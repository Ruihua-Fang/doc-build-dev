import{S as x0t,i as $0t,s as k0t,e as a,k as l,w as F,t as o,M as S0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as R0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as ejr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function B0t(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,U6,gf,qe,Xe,ci,An,J6,yn,Ln,Y6,fi,xn,K6,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),U6=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),J6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),Y6=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),K6=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var u$=s(p);m=r(u$,"NewModelConfig"),u$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var _$=s(li);mf=r(_$,"model_type"),_$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var b$=s(ii);di=r(b$,'"new-model"'),b$.forEach(t),U6=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),J6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var v$=s(yn);Ln=r(v$,"PreTrainedModel"),v$.forEach(t),Y6=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),K6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var F$=s(mi);hf=r(F$,"NewModelConfig"),F$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,U6),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,J6),e(qe,yn),e(yn,Ln),e(qe,Y6),e(qe,fi),e(fi,xn),e(qe,K6),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function P0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function N0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function D0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,U6,gf,qe,Xe,ci,An,J6,yn,Ln,Y6,fi,xn,K6,mi,hf,Ma,ze,Ae,u$,gi,_$,b$,Eo,Ea,v$,pf,F$,iDe,YPe,hi,uf,aee,Z6,dDe,nee,cDe,KPe,$n,fDe,see,mDe,gDe,lee,hDe,pDe,ZPe,e0,eIe,T$,uDe,oIe,_f,rIe,pi,bf,iee,o0,_De,dee,bDe,tIe,Co,r0,vDe,t0,FDe,M$,TDe,MDe,EDe,a0,CDe,cee,wDe,ADe,yDe,Er,n0,LDe,fee,xDe,$De,ui,kDe,mee,SDe,RDe,gee,BDe,PDe,IDe,A,vf,hee,qDe,NDe,E$,jDe,DDe,GDe,Ff,pee,ODe,VDe,C$,XDe,zDe,QDe,Tf,uee,WDe,HDe,w$,UDe,JDe,YDe,Mf,_ee,KDe,ZDe,A$,eGe,oGe,rGe,Ef,bee,tGe,aGe,y$,nGe,sGe,lGe,Cf,vee,iGe,dGe,L$,cGe,fGe,mGe,wf,Fee,gGe,hGe,x$,pGe,uGe,_Ge,Af,Tee,bGe,vGe,$$,FGe,TGe,MGe,yf,Mee,EGe,CGe,k$,wGe,AGe,yGe,Lf,Eee,LGe,xGe,S$,$Ge,kGe,SGe,xf,Cee,RGe,BGe,R$,PGe,IGe,qGe,$f,wee,NGe,jGe,B$,DGe,GGe,OGe,kf,Aee,VGe,XGe,P$,zGe,QGe,WGe,Sf,yee,HGe,UGe,I$,JGe,YGe,KGe,Rf,Lee,ZGe,eOe,q$,oOe,rOe,tOe,Bf,xee,aOe,nOe,N$,sOe,lOe,iOe,Pf,$ee,dOe,cOe,j$,fOe,mOe,gOe,If,kee,hOe,pOe,D$,uOe,_Oe,bOe,qf,See,vOe,FOe,G$,TOe,MOe,EOe,Nf,Ree,COe,wOe,O$,AOe,yOe,LOe,jf,Bee,xOe,$Oe,V$,kOe,SOe,ROe,Df,Pee,BOe,POe,X$,IOe,qOe,NOe,Gf,Iee,jOe,DOe,z$,GOe,OOe,VOe,Of,qee,XOe,zOe,Q$,QOe,WOe,HOe,Vf,Nee,UOe,JOe,W$,YOe,KOe,ZOe,Xf,jee,eVe,oVe,H$,rVe,tVe,aVe,zf,Dee,nVe,sVe,U$,lVe,iVe,dVe,Qf,Gee,cVe,fVe,J$,mVe,gVe,hVe,Wf,Oee,pVe,uVe,Y$,_Ve,bVe,vVe,Hf,Vee,FVe,TVe,K$,MVe,EVe,CVe,Uf,Xee,wVe,AVe,Z$,yVe,LVe,xVe,Jf,zee,$Ve,kVe,ek,SVe,RVe,BVe,Yf,Qee,PVe,IVe,ok,qVe,NVe,jVe,Kf,Wee,DVe,GVe,rk,OVe,VVe,XVe,Zf,Hee,zVe,QVe,tk,WVe,HVe,UVe,em,Uee,JVe,YVe,ak,KVe,ZVe,eXe,om,Jee,oXe,rXe,nk,tXe,aXe,nXe,rm,Yee,sXe,lXe,sk,iXe,dXe,cXe,tm,Kee,fXe,mXe,lk,gXe,hXe,pXe,am,Zee,uXe,_Xe,ik,bXe,vXe,FXe,nm,eoe,TXe,MXe,dk,EXe,CXe,wXe,sm,ooe,AXe,yXe,ck,LXe,xXe,$Xe,lm,roe,kXe,SXe,fk,RXe,BXe,PXe,im,toe,IXe,qXe,mk,NXe,jXe,DXe,dm,aoe,GXe,OXe,gk,VXe,XXe,zXe,cm,noe,QXe,WXe,hk,HXe,UXe,JXe,fm,soe,YXe,KXe,pk,ZXe,eze,oze,mm,loe,rze,tze,uk,aze,nze,sze,gm,ioe,lze,ize,_k,dze,cze,fze,hm,doe,mze,gze,bk,hze,pze,uze,pm,coe,_ze,bze,vk,vze,Fze,Tze,um,foe,Mze,Eze,Fk,Cze,wze,Aze,_m,moe,yze,Lze,Tk,xze,$ze,kze,bm,goe,Sze,Rze,Mk,Bze,Pze,Ize,vm,hoe,qze,Nze,Ek,jze,Dze,Gze,Fm,poe,Oze,Vze,Ck,Xze,zze,Qze,Tm,uoe,Wze,Hze,wk,Uze,Jze,Yze,Mm,_oe,Kze,Zze,Ak,eQe,oQe,rQe,Em,boe,tQe,aQe,yk,nQe,sQe,lQe,Cm,voe,iQe,dQe,Lk,cQe,fQe,mQe,wm,Foe,gQe,hQe,xk,pQe,uQe,_Qe,Am,Toe,bQe,vQe,$k,FQe,TQe,MQe,ym,Moe,EQe,CQe,kk,wQe,AQe,yQe,Lm,Eoe,LQe,xQe,Sk,$Qe,kQe,SQe,xm,Coe,RQe,BQe,Rk,PQe,IQe,qQe,$m,woe,NQe,jQe,Bk,DQe,GQe,OQe,km,Aoe,VQe,XQe,Pk,zQe,QQe,WQe,Sm,yoe,HQe,UQe,Ik,JQe,YQe,KQe,Rm,Loe,ZQe,eWe,qk,oWe,rWe,tWe,Bm,xoe,aWe,nWe,Nk,sWe,lWe,iWe,Pm,$oe,dWe,cWe,jk,fWe,mWe,gWe,Im,koe,hWe,pWe,Dk,uWe,_We,bWe,qm,Soe,vWe,FWe,Gk,TWe,MWe,EWe,Nm,Roe,CWe,wWe,Ok,AWe,yWe,LWe,jm,Boe,xWe,$We,Vk,kWe,SWe,RWe,Dm,Poe,BWe,PWe,Xk,IWe,qWe,NWe,Gm,Ioe,jWe,DWe,zk,GWe,OWe,VWe,Om,qoe,XWe,zWe,Qk,QWe,WWe,HWe,Vm,Noe,UWe,JWe,Wk,YWe,KWe,ZWe,Xm,joe,eHe,oHe,Hk,rHe,tHe,aHe,zm,Doe,nHe,sHe,Uk,lHe,iHe,dHe,Qm,Goe,cHe,fHe,Jk,mHe,gHe,hHe,Wm,Ooe,pHe,uHe,Yk,_He,bHe,vHe,Hm,Voe,FHe,THe,Kk,MHe,EHe,CHe,Um,Xoe,wHe,AHe,Zk,yHe,LHe,xHe,Jm,zoe,$He,kHe,eS,SHe,RHe,BHe,Ym,Qoe,PHe,IHe,oS,qHe,NHe,jHe,Km,Woe,DHe,GHe,rS,OHe,VHe,XHe,Zm,Hoe,zHe,QHe,tS,WHe,HHe,UHe,eg,Uoe,JHe,YHe,aS,KHe,ZHe,eUe,og,Joe,oUe,rUe,nS,tUe,aUe,nUe,rg,Yoe,sUe,lUe,sS,iUe,dUe,cUe,tg,Koe,fUe,mUe,lS,gUe,hUe,pUe,ag,Zoe,uUe,_Ue,iS,bUe,vUe,FUe,ng,ere,TUe,MUe,dS,EUe,CUe,wUe,sg,ore,AUe,yUe,cS,LUe,xUe,$Ue,lg,rre,kUe,SUe,fS,RUe,BUe,PUe,ig,tre,IUe,qUe,mS,NUe,jUe,DUe,dg,are,GUe,OUe,gS,VUe,XUe,zUe,cg,nre,QUe,WUe,hS,HUe,UUe,JUe,fg,sre,YUe,KUe,pS,ZUe,eJe,oJe,mg,lre,rJe,tJe,uS,aJe,nJe,sJe,gg,ire,lJe,iJe,_S,dJe,cJe,fJe,hg,dre,mJe,gJe,bS,hJe,pJe,uJe,pg,cre,_Je,bJe,vS,vJe,FJe,TJe,ug,fre,MJe,EJe,FS,CJe,wJe,AJe,_g,yJe,bg,s0,LJe,mre,xJe,aIe,_i,vg,gre,l0,$Je,hre,kJe,nIe,wo,i0,SJe,d0,RJe,TS,BJe,PJe,IJe,c0,qJe,pre,NJe,jJe,DJe,Cr,f0,GJe,ure,OJe,VJe,Ca,XJe,_re,zJe,QJe,bre,WJe,HJe,vre,UJe,JJe,YJe,k,kn,Fre,KJe,ZJe,MS,eYe,oYe,ES,rYe,tYe,aYe,Sn,Tre,nYe,sYe,CS,lYe,iYe,wS,dYe,cYe,fYe,Rn,Mre,mYe,gYe,AS,hYe,pYe,yS,uYe,_Ye,bYe,Fg,Ere,vYe,FYe,LS,TYe,MYe,EYe,Bn,Cre,CYe,wYe,xS,AYe,yYe,$S,LYe,xYe,$Ye,Tg,wre,kYe,SYe,kS,RYe,BYe,PYe,Mg,Are,IYe,qYe,SS,NYe,jYe,DYe,Eg,yre,GYe,OYe,RS,VYe,XYe,zYe,Pn,Lre,QYe,WYe,BS,HYe,UYe,PS,JYe,YYe,KYe,In,xre,ZYe,eKe,IS,oKe,rKe,qS,tKe,aKe,nKe,qn,$re,sKe,lKe,NS,iKe,dKe,jS,cKe,fKe,mKe,Cg,kre,gKe,hKe,DS,pKe,uKe,_Ke,wg,Sre,bKe,vKe,GS,FKe,TKe,MKe,Nn,Rre,EKe,CKe,OS,wKe,AKe,VS,yKe,LKe,xKe,Ag,Bre,$Ke,kKe,XS,SKe,RKe,BKe,jn,Pre,PKe,IKe,zS,qKe,NKe,QS,jKe,DKe,GKe,Dn,Ire,OKe,VKe,WS,XKe,zKe,HS,QKe,WKe,HKe,Gn,qre,UKe,JKe,US,YKe,KKe,JS,ZKe,eZe,oZe,yg,Nre,rZe,tZe,YS,aZe,nZe,sZe,On,jre,lZe,iZe,KS,dZe,cZe,ZS,fZe,mZe,gZe,Vn,Dre,hZe,pZe,eR,uZe,_Ze,oR,bZe,vZe,FZe,Xn,Gre,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,zn,Ore,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,BZe,Qn,Vre,PZe,IZe,sR,qZe,NZe,lR,jZe,DZe,GZe,Wn,Xre,OZe,VZe,iR,XZe,zZe,dR,QZe,WZe,HZe,Lg,zre,UZe,JZe,cR,YZe,KZe,ZZe,Hn,Qre,eeo,oeo,fR,reo,teo,mR,aeo,neo,seo,xg,Wre,leo,ieo,gR,deo,ceo,feo,Un,Hre,meo,geo,hR,heo,peo,pR,ueo,_eo,beo,Jn,Ure,veo,Feo,uR,Teo,Meo,_R,Eeo,Ceo,weo,Yn,Jre,Aeo,yeo,bR,Leo,xeo,vR,$eo,keo,Seo,Kn,Yre,Reo,Beo,FR,Peo,Ieo,TR,qeo,Neo,jeo,Zn,Kre,Deo,Geo,MR,Oeo,Veo,ER,Xeo,zeo,Qeo,$g,Zre,Weo,Heo,CR,Ueo,Jeo,Yeo,es,ete,Keo,Zeo,wR,eoo,ooo,AR,roo,too,aoo,os,ote,noo,soo,yR,loo,ioo,LR,doo,coo,foo,rs,rte,moo,goo,xR,hoo,poo,$R,uoo,_oo,boo,ts,tte,voo,Foo,kR,Too,Moo,SR,Eoo,Coo,woo,as,ate,Aoo,yoo,RR,Loo,xoo,BR,$oo,koo,Soo,ns,nte,Roo,Boo,PR,Poo,Ioo,IR,qoo,Noo,joo,kg,ste,Doo,Goo,qR,Ooo,Voo,Xoo,ss,lte,zoo,Qoo,NR,Woo,Hoo,jR,Uoo,Joo,Yoo,Sg,ite,Koo,Zoo,DR,ero,oro,rro,Rg,dte,tro,aro,GR,nro,sro,lro,ls,cte,iro,dro,OR,cro,fro,VR,mro,gro,hro,is,fte,pro,uro,XR,_ro,bro,zR,vro,Fro,Tro,ds,mte,Mro,Ero,QR,Cro,wro,WR,Aro,yro,Lro,Bg,gte,xro,$ro,HR,kro,Sro,Rro,cs,hte,Bro,Pro,UR,Iro,qro,JR,Nro,jro,Dro,fs,pte,Gro,Oro,YR,Vro,Xro,KR,zro,Qro,Wro,ms,ute,Hro,Uro,ZR,Jro,Yro,eB,Kro,Zro,eto,gs,_te,oto,rto,oB,tto,ato,rB,nto,sto,lto,hs,bte,ito,dto,tB,cto,fto,aB,mto,gto,hto,Pg,vte,pto,uto,nB,_to,bto,vto,ps,Fte,Fto,Tto,sB,Mto,Eto,lB,Cto,wto,Ato,Ig,Tte,yto,Lto,iB,xto,$to,kto,qg,Mte,Sto,Rto,dB,Bto,Pto,Ito,Ng,Ete,qto,Nto,cB,jto,Dto,Gto,jg,Cte,Oto,Vto,fB,Xto,zto,Qto,us,wte,Wto,Hto,mB,Uto,Jto,gB,Yto,Kto,Zto,Dg,Ate,eao,oao,hB,rao,tao,aao,_s,yte,nao,sao,pB,lao,iao,uB,dao,cao,fao,bs,Lte,mao,gao,_B,hao,pao,bB,uao,_ao,bao,vs,xte,vao,Fao,vB,Tao,Mao,FB,Eao,Cao,wao,Fs,$te,Aao,yao,TB,Lao,xao,MB,$ao,kao,Sao,Ts,kte,Rao,Bao,EB,Pao,Iao,CB,qao,Nao,jao,Ms,Ste,Dao,Gao,wB,Oao,Vao,AB,Xao,zao,Qao,Gg,Rte,Wao,Hao,yB,Uao,Jao,Yao,Og,Bte,Kao,Zao,LB,eno,ono,rno,Es,Pte,tno,ano,xB,nno,sno,$B,lno,ino,dno,Cs,Ite,cno,fno,kB,mno,gno,SB,hno,pno,uno,ws,qte,_no,bno,RB,vno,Fno,BB,Tno,Mno,Eno,Vg,Nte,Cno,wno,PB,Ano,yno,Lno,Xg,jte,xno,$no,IB,kno,Sno,Rno,zg,Dte,Bno,Pno,qB,Ino,qno,Nno,As,Gte,jno,Dno,NB,Gno,Ono,jB,Vno,Xno,zno,Qg,Ote,Qno,Wno,DB,Hno,Uno,Jno,Wg,Vte,Yno,Kno,GB,Zno,eso,oso,ys,Xte,rso,tso,OB,aso,nso,VB,sso,lso,iso,Hg,zte,dso,cso,XB,fso,mso,gso,Ug,Qte,hso,pso,zB,uso,_so,bso,Ls,Wte,vso,Fso,QB,Tso,Mso,WB,Eso,Cso,wso,xs,Hte,Aso,yso,HB,Lso,xso,UB,$so,kso,Sso,$s,Ute,Rso,Bso,JB,Pso,Iso,YB,qso,Nso,jso,ks,Jte,Dso,Gso,KB,Oso,Vso,ZB,Xso,zso,Qso,Jg,Wso,Yg,m0,Hso,Yte,Uso,sIe,bi,Kg,Kte,g0,Jso,Zte,Yso,lIe,Ao,h0,Kso,p0,Zso,eP,elo,olo,rlo,u0,tlo,eae,alo,nlo,slo,Qe,_0,llo,oae,ilo,dlo,wa,clo,rae,flo,mlo,tae,glo,hlo,aae,plo,ulo,_lo,oe,Zg,nae,blo,vlo,oP,Flo,Tlo,Mlo,eh,sae,Elo,Clo,rP,wlo,Alo,ylo,oh,lae,Llo,xlo,tP,$lo,klo,Slo,rh,iae,Rlo,Blo,aP,Plo,Ilo,qlo,th,dae,Nlo,jlo,nP,Dlo,Glo,Olo,ah,cae,Vlo,Xlo,sP,zlo,Qlo,Wlo,nh,fae,Hlo,Ulo,lP,Jlo,Ylo,Klo,sh,mae,Zlo,eio,iP,oio,rio,tio,lh,gae,aio,nio,dP,sio,lio,iio,ih,hae,dio,cio,cP,fio,mio,gio,dh,pae,hio,pio,fP,uio,_io,bio,ch,uae,vio,Fio,mP,Tio,Mio,Eio,fh,_ae,Cio,wio,gP,Aio,yio,Lio,mh,bae,xio,$io,hP,kio,Sio,Rio,gh,vae,Bio,Pio,pP,Iio,qio,Nio,hh,Fae,jio,Dio,uP,Gio,Oio,Vio,ph,Tae,Xio,zio,_P,Qio,Wio,Hio,uh,Mae,Uio,Jio,bP,Yio,Kio,Zio,_h,Eae,edo,odo,vP,rdo,tdo,ado,bh,Cae,ndo,sdo,FP,ldo,ido,ddo,vh,wae,cdo,fdo,TP,mdo,gdo,hdo,Fh,Aae,pdo,udo,MP,_do,bdo,vdo,Th,yae,Fdo,Tdo,EP,Mdo,Edo,Cdo,Mh,Lae,wdo,Ado,CP,ydo,Ldo,xdo,Eh,xae,$do,kdo,wP,Sdo,Rdo,Bdo,Ch,Pdo,wh,Ido,Ah,b0,qdo,$ae,Ndo,iIe,vi,yh,kae,v0,jdo,Sae,Ddo,dIe,yo,F0,Gdo,T0,Odo,AP,Vdo,Xdo,zdo,M0,Qdo,Rae,Wdo,Hdo,Udo,We,E0,Jdo,Bae,Ydo,Kdo,Fi,Zdo,Pae,eco,oco,Iae,rco,tco,aco,be,Lh,qae,nco,sco,yP,lco,ico,dco,xh,Nae,cco,fco,jae,mco,gco,hco,$h,Dae,pco,uco,LP,_co,bco,vco,kh,Gae,Fco,Tco,xP,Mco,Eco,Cco,Sh,Oae,wco,Aco,$P,yco,Lco,xco,Rh,Vae,$co,kco,kP,Sco,Rco,Bco,Bh,Xae,Pco,Ico,SP,qco,Nco,jco,Ph,zae,Dco,Gco,RP,Oco,Vco,Xco,Ih,Qae,zco,Qco,BP,Wco,Hco,Uco,qh,Wae,Jco,Yco,PP,Kco,Zco,efo,Nh,Hae,ofo,rfo,IP,tfo,afo,nfo,jh,Uae,sfo,lfo,qP,ifo,dfo,cfo,Dh,Jae,ffo,mfo,NP,gfo,hfo,pfo,Gh,Yae,ufo,_fo,jP,bfo,vfo,Ffo,Oh,Kae,Tfo,Mfo,DP,Efo,Cfo,wfo,Vh,Afo,Xh,yfo,zh,C0,Lfo,Zae,xfo,cIe,Ti,Qh,ene,w0,$fo,one,kfo,fIe,Lo,A0,Sfo,Mi,Rfo,GP,Bfo,Pfo,OP,Ifo,qfo,Nfo,y0,jfo,rne,Dfo,Gfo,Ofo,ot,L0,Vfo,tne,Xfo,zfo,Ei,Qfo,ane,Wfo,Hfo,VP,Ufo,Jfo,Yfo,Wh,Kfo,He,x0,Zfo,nne,emo,omo,Aa,rmo,sne,tmo,amo,lne,nmo,smo,ine,lmo,imo,dmo,x,Hh,dne,cmo,fmo,XP,mmo,gmo,hmo,Uh,cne,pmo,umo,zP,_mo,bmo,vmo,Jh,fne,Fmo,Tmo,QP,Mmo,Emo,Cmo,Yh,mne,wmo,Amo,WP,ymo,Lmo,xmo,Kh,gne,$mo,kmo,HP,Smo,Rmo,Bmo,Zh,hne,Pmo,Imo,UP,qmo,Nmo,jmo,ep,pne,Dmo,Gmo,JP,Omo,Vmo,Xmo,op,une,zmo,Qmo,YP,Wmo,Hmo,Umo,rp,_ne,Jmo,Ymo,KP,Kmo,Zmo,ego,tp,bne,ogo,rgo,ZP,tgo,ago,ngo,ap,vne,sgo,lgo,eI,igo,dgo,cgo,np,Fne,fgo,mgo,oI,ggo,hgo,pgo,sp,Tne,ugo,_go,rI,bgo,vgo,Fgo,lp,Mne,Tgo,Mgo,tI,Ego,Cgo,wgo,ip,Ene,Ago,ygo,aI,Lgo,xgo,$go,dp,Cne,kgo,Sgo,nI,Rgo,Bgo,Pgo,cp,wne,Igo,qgo,sI,Ngo,jgo,Dgo,fp,Ane,Ggo,Ogo,lI,Vgo,Xgo,zgo,mp,yne,Qgo,Wgo,iI,Hgo,Ugo,Jgo,gp,Lne,Ygo,Kgo,dI,Zgo,eho,oho,hp,xne,rho,tho,cI,aho,nho,sho,pp,$ne,lho,iho,fI,dho,cho,fho,up,kne,mho,gho,mI,hho,pho,uho,_p,Sne,_ho,bho,gI,vho,Fho,Tho,bp,Rne,Mho,Eho,hI,Cho,who,Aho,vp,Bne,yho,Lho,pI,xho,$ho,kho,Fp,Pne,Sho,Rho,uI,Bho,Pho,Iho,Tp,Ine,qho,Nho,_I,jho,Dho,Gho,Mp,qne,Oho,Vho,bI,Xho,zho,Qho,Ep,Nne,Who,Hho,vI,Uho,Jho,Yho,Cp,jne,Kho,Zho,FI,epo,opo,rpo,Ss,Dne,tpo,apo,TI,npo,spo,MI,lpo,ipo,dpo,wp,Gne,cpo,fpo,EI,mpo,gpo,hpo,Ap,One,ppo,upo,CI,_po,bpo,vpo,yp,Vne,Fpo,Tpo,wI,Mpo,Epo,Cpo,Lp,Xne,wpo,Apo,AI,ypo,Lpo,xpo,xp,zne,$po,kpo,yI,Spo,Rpo,Bpo,$p,Qne,Ppo,Ipo,LI,qpo,Npo,jpo,kp,Wne,Dpo,Gpo,xI,Opo,Vpo,Xpo,Sp,Hne,zpo,Qpo,$I,Wpo,Hpo,Upo,Rp,Une,Jpo,Ypo,kI,Kpo,Zpo,euo,Bp,Jne,ouo,ruo,SI,tuo,auo,nuo,Pp,Yne,suo,luo,RI,iuo,duo,cuo,Ip,Kne,fuo,muo,BI,guo,huo,puo,qp,Zne,uuo,_uo,PI,buo,vuo,Fuo,Np,ese,Tuo,Muo,II,Euo,Cuo,wuo,jp,ose,Auo,yuo,qI,Luo,xuo,$uo,Dp,rse,kuo,Suo,NI,Ruo,Buo,Puo,Gp,tse,Iuo,quo,jI,Nuo,juo,Duo,Op,ase,Guo,Ouo,DI,Vuo,Xuo,zuo,Vp,nse,Quo,Wuo,GI,Huo,Uuo,Juo,Xp,sse,Yuo,Kuo,OI,Zuo,e_o,o_o,zp,lse,r_o,t_o,VI,a_o,n_o,s_o,Qp,ise,l_o,i_o,XI,d_o,c_o,f_o,Wp,dse,m_o,g_o,zI,h_o,p_o,u_o,Hp,cse,__o,b_o,QI,v_o,F_o,T_o,Up,fse,M_o,E_o,WI,C_o,w_o,A_o,Jp,mse,y_o,L_o,HI,x_o,$_o,k_o,Yp,gse,S_o,R_o,UI,B_o,P_o,I_o,Kp,hse,q_o,N_o,JI,j_o,D_o,G_o,Zp,pse,O_o,V_o,YI,X_o,z_o,Q_o,eu,use,W_o,H_o,KI,U_o,J_o,Y_o,ou,_se,K_o,Z_o,ZI,e1o,o1o,r1o,ru,bse,t1o,a1o,eq,n1o,s1o,l1o,tu,vse,i1o,d1o,oq,c1o,f1o,m1o,au,Fse,g1o,h1o,rq,p1o,u1o,_1o,nu,Tse,b1o,v1o,tq,F1o,T1o,M1o,su,Mse,E1o,C1o,aq,w1o,A1o,y1o,lu,Ese,L1o,x1o,nq,$1o,k1o,S1o,iu,Cse,R1o,B1o,sq,P1o,I1o,q1o,du,wse,N1o,j1o,lq,D1o,G1o,O1o,cu,Ase,V1o,X1o,iq,z1o,Q1o,W1o,fu,yse,H1o,U1o,dq,J1o,Y1o,K1o,mu,Lse,Z1o,ebo,cq,obo,rbo,tbo,gu,xse,abo,nbo,fq,sbo,lbo,ibo,hu,$se,dbo,cbo,mq,fbo,mbo,gbo,pu,kse,hbo,pbo,gq,ubo,_bo,bbo,uu,Sse,vbo,Fbo,hq,Tbo,Mbo,Ebo,_u,Rse,Cbo,wbo,pq,Abo,ybo,Lbo,bu,Bse,xbo,$bo,uq,kbo,Sbo,Rbo,vu,Pse,Bbo,Pbo,_q,Ibo,qbo,Nbo,Fu,Ise,jbo,Dbo,bq,Gbo,Obo,Vbo,Tu,qse,Xbo,zbo,vq,Qbo,Wbo,Hbo,Mu,Nse,Ubo,Jbo,Fq,Ybo,Kbo,Zbo,Eu,jse,e4o,o4o,Tq,r4o,t4o,a4o,Cu,Dse,n4o,s4o,Mq,l4o,i4o,d4o,wu,Gse,c4o,f4o,Eq,m4o,g4o,h4o,Au,Ose,p4o,u4o,Cq,_4o,b4o,v4o,yu,Vse,F4o,T4o,wq,M4o,E4o,C4o,Lu,Xse,w4o,A4o,Aq,y4o,L4o,x4o,xu,zse,$4o,k4o,yq,S4o,R4o,B4o,$u,Qse,P4o,I4o,Lq,q4o,N4o,j4o,ku,Wse,D4o,G4o,xq,O4o,V4o,X4o,Su,Hse,z4o,Q4o,$q,W4o,H4o,U4o,Ru,Use,J4o,Y4o,kq,K4o,Z4o,e2o,Bu,Jse,o2o,r2o,Sq,t2o,a2o,n2o,Pu,Yse,s2o,l2o,Rq,i2o,d2o,c2o,Iu,Kse,f2o,m2o,Bq,g2o,h2o,p2o,qu,u2o,Zse,_2o,b2o,ele,v2o,F2o,Nu,mIe,Ci,ju,ole,$0,T2o,rle,M2o,gIe,xo,k0,E2o,wi,C2o,Pq,w2o,A2o,Iq,y2o,L2o,x2o,S0,$2o,tle,k2o,S2o,R2o,rt,R0,B2o,ale,P2o,I2o,Ai,q2o,nle,N2o,j2o,qq,D2o,G2o,O2o,Du,V2o,Ue,B0,X2o,sle,z2o,Q2o,ya,W2o,lle,H2o,U2o,ile,J2o,Y2o,dle,K2o,Z2o,evo,G,Gu,cle,ovo,rvo,Nq,tvo,avo,nvo,Ou,fle,svo,lvo,jq,ivo,dvo,cvo,Vu,mle,fvo,mvo,Dq,gvo,hvo,pvo,Xu,gle,uvo,_vo,Gq,bvo,vvo,Fvo,zu,hle,Tvo,Mvo,Oq,Evo,Cvo,wvo,Qu,ple,Avo,yvo,Vq,Lvo,xvo,$vo,Wu,ule,kvo,Svo,Xq,Rvo,Bvo,Pvo,Hu,_le,Ivo,qvo,zq,Nvo,jvo,Dvo,Uu,ble,Gvo,Ovo,Qq,Vvo,Xvo,zvo,Ju,vle,Qvo,Wvo,Wq,Hvo,Uvo,Jvo,Yu,Fle,Yvo,Kvo,Hq,Zvo,eFo,oFo,Ku,Tle,rFo,tFo,Uq,aFo,nFo,sFo,Zu,Mle,lFo,iFo,Jq,dFo,cFo,fFo,e_,Ele,mFo,gFo,Yq,hFo,pFo,uFo,o_,Cle,_Fo,bFo,Kq,vFo,FFo,TFo,r_,wle,MFo,EFo,Zq,CFo,wFo,AFo,t_,Ale,yFo,LFo,eN,xFo,$Fo,kFo,a_,yle,SFo,RFo,oN,BFo,PFo,IFo,n_,Lle,qFo,NFo,rN,jFo,DFo,GFo,s_,xle,OFo,VFo,tN,XFo,zFo,QFo,l_,$le,WFo,HFo,aN,UFo,JFo,YFo,i_,kle,KFo,ZFo,nN,eTo,oTo,rTo,d_,Sle,tTo,aTo,sN,nTo,sTo,lTo,c_,Rle,iTo,dTo,lN,cTo,fTo,mTo,f_,Ble,gTo,hTo,iN,pTo,uTo,_To,m_,Ple,bTo,vTo,dN,FTo,TTo,MTo,g_,Ile,ETo,CTo,cN,wTo,ATo,yTo,h_,qle,LTo,xTo,fN,$To,kTo,STo,p_,Nle,RTo,BTo,mN,PTo,ITo,qTo,u_,jle,NTo,jTo,gN,DTo,GTo,OTo,__,Dle,VTo,XTo,hN,zTo,QTo,WTo,b_,Gle,HTo,UTo,pN,JTo,YTo,KTo,v_,Ole,ZTo,e7o,uN,o7o,r7o,t7o,F_,Vle,a7o,n7o,_N,s7o,l7o,i7o,T_,Xle,d7o,c7o,bN,f7o,m7o,g7o,M_,zle,h7o,p7o,vN,u7o,_7o,b7o,E_,Qle,v7o,F7o,FN,T7o,M7o,E7o,C_,Wle,C7o,w7o,TN,A7o,y7o,L7o,w_,Hle,x7o,$7o,MN,k7o,S7o,R7o,A_,Ule,B7o,P7o,EN,I7o,q7o,N7o,y_,j7o,Jle,D7o,G7o,Yle,O7o,V7o,L_,hIe,yi,x_,Kle,P0,X7o,Zle,z7o,pIe,$o,I0,Q7o,Li,W7o,CN,H7o,U7o,wN,J7o,Y7o,K7o,q0,Z7o,eie,eMo,oMo,rMo,tt,N0,tMo,oie,aMo,nMo,xi,sMo,rie,lMo,iMo,AN,dMo,cMo,fMo,$_,mMo,Je,j0,gMo,tie,hMo,pMo,La,uMo,aie,_Mo,bMo,nie,vMo,FMo,sie,TMo,MMo,EMo,z,k_,lie,CMo,wMo,yN,AMo,yMo,LMo,S_,iie,xMo,$Mo,LN,kMo,SMo,RMo,R_,die,BMo,PMo,xN,IMo,qMo,NMo,B_,cie,jMo,DMo,$N,GMo,OMo,VMo,P_,fie,XMo,zMo,kN,QMo,WMo,HMo,I_,mie,UMo,JMo,SN,YMo,KMo,ZMo,q_,gie,eEo,oEo,RN,rEo,tEo,aEo,N_,hie,nEo,sEo,BN,lEo,iEo,dEo,j_,pie,cEo,fEo,PN,mEo,gEo,hEo,D_,uie,pEo,uEo,IN,_Eo,bEo,vEo,G_,_ie,FEo,TEo,qN,MEo,EEo,CEo,O_,bie,wEo,AEo,NN,yEo,LEo,xEo,V_,vie,$Eo,kEo,jN,SEo,REo,BEo,X_,Fie,PEo,IEo,DN,qEo,NEo,jEo,z_,Tie,DEo,GEo,GN,OEo,VEo,XEo,Q_,Mie,zEo,QEo,ON,WEo,HEo,UEo,W_,Eie,JEo,YEo,VN,KEo,ZEo,e5o,H_,Cie,o5o,r5o,XN,t5o,a5o,n5o,U_,wie,s5o,l5o,zN,i5o,d5o,c5o,J_,Aie,f5o,m5o,QN,g5o,h5o,p5o,Y_,yie,u5o,_5o,WN,b5o,v5o,F5o,K_,Lie,T5o,M5o,HN,E5o,C5o,w5o,Z_,xie,A5o,y5o,UN,L5o,x5o,$5o,e1,$ie,k5o,S5o,JN,R5o,B5o,P5o,o1,kie,I5o,q5o,YN,N5o,j5o,D5o,r1,Sie,G5o,O5o,KN,V5o,X5o,z5o,t1,Rie,Q5o,W5o,ZN,H5o,U5o,J5o,a1,Bie,Y5o,K5o,ej,Z5o,eCo,oCo,n1,Pie,rCo,tCo,oj,aCo,nCo,sCo,s1,Iie,lCo,iCo,rj,dCo,cCo,fCo,l1,qie,mCo,gCo,tj,hCo,pCo,uCo,i1,Nie,_Co,bCo,aj,vCo,FCo,TCo,d1,jie,MCo,ECo,nj,CCo,wCo,ACo,c1,Die,yCo,LCo,sj,xCo,$Co,kCo,f1,Gie,SCo,RCo,lj,BCo,PCo,ICo,m1,Oie,qCo,NCo,ij,jCo,DCo,GCo,g1,OCo,Vie,VCo,XCo,Xie,zCo,QCo,h1,uIe,$i,p1,zie,D0,WCo,Qie,HCo,_Ie,ko,G0,UCo,ki,JCo,dj,YCo,KCo,cj,ZCo,e3o,o3o,O0,r3o,Wie,t3o,a3o,n3o,at,V0,s3o,Hie,l3o,i3o,Si,d3o,Uie,c3o,f3o,fj,m3o,g3o,h3o,u1,p3o,Ye,X0,u3o,Jie,_3o,b3o,xa,v3o,Yie,F3o,T3o,Kie,M3o,E3o,Zie,C3o,w3o,A3o,Q,_1,ede,y3o,L3o,mj,x3o,$3o,k3o,b1,ode,S3o,R3o,gj,B3o,P3o,I3o,v1,rde,q3o,N3o,hj,j3o,D3o,G3o,F1,tde,O3o,V3o,pj,X3o,z3o,Q3o,T1,ade,W3o,H3o,uj,U3o,J3o,Y3o,M1,nde,K3o,Z3o,_j,ewo,owo,rwo,E1,sde,two,awo,bj,nwo,swo,lwo,C1,lde,iwo,dwo,vj,cwo,fwo,mwo,w1,ide,gwo,hwo,Fj,pwo,uwo,_wo,A1,dde,bwo,vwo,Tj,Fwo,Two,Mwo,y1,cde,Ewo,Cwo,Mj,wwo,Awo,ywo,L1,fde,Lwo,xwo,Ej,$wo,kwo,Swo,x1,mde,Rwo,Bwo,Cj,Pwo,Iwo,qwo,$1,gde,Nwo,jwo,wj,Dwo,Gwo,Owo,k1,hde,Vwo,Xwo,Aj,zwo,Qwo,Wwo,S1,pde,Hwo,Uwo,yj,Jwo,Ywo,Kwo,R1,ude,Zwo,eAo,Lj,oAo,rAo,tAo,B1,_de,aAo,nAo,xj,sAo,lAo,iAo,P1,bde,dAo,cAo,$j,fAo,mAo,gAo,I1,vde,hAo,pAo,kj,uAo,_Ao,bAo,q1,Fde,vAo,FAo,Sj,TAo,MAo,EAo,N1,Tde,CAo,wAo,Rj,AAo,yAo,LAo,j1,Mde,xAo,$Ao,Bj,kAo,SAo,RAo,D1,Ede,BAo,PAo,Pj,IAo,qAo,NAo,G1,Cde,jAo,DAo,Ij,GAo,OAo,VAo,O1,wde,XAo,zAo,qj,QAo,WAo,HAo,V1,Ade,UAo,JAo,Nj,YAo,KAo,ZAo,X1,yde,e6o,o6o,jj,r6o,t6o,a6o,z1,Lde,n6o,s6o,Dj,l6o,i6o,d6o,Q1,xde,c6o,f6o,Gj,m6o,g6o,h6o,W1,$de,p6o,u6o,kde,_6o,b6o,v6o,H1,Sde,F6o,T6o,Oj,M6o,E6o,C6o,U1,Rde,w6o,A6o,Vj,y6o,L6o,x6o,J1,Bde,$6o,k6o,Xj,S6o,R6o,B6o,Y1,Pde,P6o,I6o,zj,q6o,N6o,j6o,K1,D6o,Ide,G6o,O6o,qde,V6o,X6o,Z1,bIe,Ri,eb,Nde,z0,z6o,jde,Q6o,vIe,So,Q0,W6o,Bi,H6o,Qj,U6o,J6o,Wj,Y6o,K6o,Z6o,W0,e0o,Dde,o0o,r0o,t0o,nt,H0,a0o,Gde,n0o,s0o,Pi,l0o,Ode,i0o,d0o,Hj,c0o,f0o,m0o,ob,g0o,Ke,U0,h0o,Vde,p0o,u0o,$a,_0o,Xde,b0o,v0o,zde,F0o,T0o,Qde,M0o,E0o,C0o,he,rb,Wde,w0o,A0o,Uj,y0o,L0o,x0o,tb,Hde,$0o,k0o,Jj,S0o,R0o,B0o,ab,Ude,P0o,I0o,Yj,q0o,N0o,j0o,nb,Jde,D0o,G0o,Kj,O0o,V0o,X0o,sb,Yde,z0o,Q0o,Zj,W0o,H0o,U0o,lb,Kde,J0o,Y0o,eD,K0o,Z0o,eyo,ib,Zde,oyo,ryo,oD,tyo,ayo,nyo,db,ece,syo,lyo,rD,iyo,dyo,cyo,cb,oce,fyo,myo,tD,gyo,hyo,pyo,fb,rce,uyo,_yo,aD,byo,vyo,Fyo,mb,tce,Tyo,Myo,nD,Eyo,Cyo,wyo,gb,ace,Ayo,yyo,sD,Lyo,xyo,$yo,hb,nce,kyo,Syo,lD,Ryo,Byo,Pyo,pb,sce,Iyo,qyo,iD,Nyo,jyo,Dyo,ub,lce,Gyo,Oyo,dD,Vyo,Xyo,zyo,_b,ice,Qyo,Wyo,cD,Hyo,Uyo,Jyo,bb,dce,Yyo,Kyo,fD,Zyo,eLo,oLo,vb,rLo,cce,tLo,aLo,fce,nLo,sLo,Fb,FIe,Ii,Tb,mce,J0,lLo,gce,iLo,TIe,Ro,Y0,dLo,qi,cLo,mD,fLo,mLo,gD,gLo,hLo,pLo,K0,uLo,hce,_Lo,bLo,vLo,st,Z0,FLo,pce,TLo,MLo,Ni,ELo,uce,CLo,wLo,hD,ALo,yLo,LLo,Mb,xLo,Ze,ey,$Lo,_ce,kLo,SLo,ka,RLo,bce,BLo,PLo,vce,ILo,qLo,Fce,NLo,jLo,DLo,q,Eb,Tce,GLo,OLo,pD,VLo,XLo,zLo,Cb,Mce,QLo,WLo,uD,HLo,ULo,JLo,wb,Ece,YLo,KLo,_D,ZLo,e8o,o8o,Ab,Cce,r8o,t8o,bD,a8o,n8o,s8o,yb,wce,l8o,i8o,vD,d8o,c8o,f8o,Lb,Ace,m8o,g8o,FD,h8o,p8o,u8o,xb,yce,_8o,b8o,TD,v8o,F8o,T8o,$b,Lce,M8o,E8o,MD,C8o,w8o,A8o,kb,xce,y8o,L8o,ED,x8o,$8o,k8o,Sb,$ce,S8o,R8o,CD,B8o,P8o,I8o,Rb,kce,q8o,N8o,wD,j8o,D8o,G8o,Bb,Sce,O8o,V8o,AD,X8o,z8o,Q8o,Pb,Rce,W8o,H8o,yD,U8o,J8o,Y8o,Ib,Bce,K8o,Z8o,LD,exo,oxo,rxo,qb,Pce,txo,axo,xD,nxo,sxo,lxo,Nb,Ice,ixo,dxo,$D,cxo,fxo,mxo,jb,qce,gxo,hxo,kD,pxo,uxo,_xo,Db,Nce,bxo,vxo,SD,Fxo,Txo,Mxo,Gb,jce,Exo,Cxo,RD,wxo,Axo,yxo,Ob,Dce,Lxo,xxo,BD,$xo,kxo,Sxo,Vb,Gce,Rxo,Bxo,PD,Pxo,Ixo,qxo,Xb,Oce,Nxo,jxo,ID,Dxo,Gxo,Oxo,zb,Vce,Vxo,Xxo,qD,zxo,Qxo,Wxo,Qb,Xce,Hxo,Uxo,ND,Jxo,Yxo,Kxo,Wb,zce,Zxo,e9o,jD,o9o,r9o,t9o,Hb,Qce,a9o,n9o,DD,s9o,l9o,i9o,Ub,Wce,d9o,c9o,GD,f9o,m9o,g9o,Jb,Hce,h9o,p9o,OD,u9o,_9o,b9o,Yb,Uce,v9o,F9o,VD,T9o,M9o,E9o,Kb,Jce,C9o,w9o,XD,A9o,y9o,L9o,Zb,Yce,x9o,$9o,zD,k9o,S9o,R9o,e4,Kce,B9o,P9o,QD,I9o,q9o,N9o,o4,Zce,j9o,D9o,WD,G9o,O9o,V9o,r4,efe,X9o,z9o,HD,Q9o,W9o,H9o,t4,ofe,U9o,J9o,UD,Y9o,K9o,Z9o,a4,rfe,e$o,o$o,JD,r$o,t$o,a$o,n4,tfe,n$o,s$o,YD,l$o,i$o,d$o,s4,afe,c$o,f$o,KD,m$o,g$o,h$o,l4,nfe,p$o,u$o,ZD,_$o,b$o,v$o,i4,sfe,F$o,T$o,eG,M$o,E$o,C$o,d4,lfe,w$o,A$o,oG,y$o,L$o,x$o,c4,ife,$$o,k$o,rG,S$o,R$o,B$o,f4,dfe,P$o,I$o,tG,q$o,N$o,j$o,m4,cfe,D$o,G$o,aG,O$o,V$o,X$o,g4,ffe,z$o,Q$o,nG,W$o,H$o,U$o,h4,mfe,J$o,Y$o,sG,K$o,Z$o,eko,p4,gfe,oko,rko,lG,tko,ako,nko,u4,sko,hfe,lko,iko,pfe,dko,cko,_4,MIe,ji,b4,ufe,oy,fko,_fe,mko,EIe,Bo,ry,gko,Di,hko,iG,pko,uko,dG,_ko,bko,vko,ty,Fko,bfe,Tko,Mko,Eko,lt,ay,Cko,vfe,wko,Ako,Gi,yko,Ffe,Lko,xko,cG,$ko,kko,Sko,v4,Rko,eo,ny,Bko,Tfe,Pko,Iko,Sa,qko,Mfe,Nko,jko,Efe,Dko,Gko,Cfe,Oko,Vko,Xko,Y,F4,wfe,zko,Qko,fG,Wko,Hko,Uko,T4,Afe,Jko,Yko,mG,Kko,Zko,eSo,M4,yfe,oSo,rSo,gG,tSo,aSo,nSo,E4,Lfe,sSo,lSo,hG,iSo,dSo,cSo,C4,xfe,fSo,mSo,pG,gSo,hSo,pSo,w4,$fe,uSo,_So,uG,bSo,vSo,FSo,A4,kfe,TSo,MSo,_G,ESo,CSo,wSo,y4,Sfe,ASo,ySo,bG,LSo,xSo,$So,L4,Rfe,kSo,SSo,vG,RSo,BSo,PSo,x4,Bfe,ISo,qSo,FG,NSo,jSo,DSo,$4,Pfe,GSo,OSo,TG,VSo,XSo,zSo,k4,Ife,QSo,WSo,MG,HSo,USo,JSo,S4,qfe,YSo,KSo,EG,ZSo,eRo,oRo,R4,Nfe,rRo,tRo,CG,aRo,nRo,sRo,B4,jfe,lRo,iRo,wG,dRo,cRo,fRo,P4,Dfe,mRo,gRo,AG,hRo,pRo,uRo,I4,Gfe,_Ro,bRo,yG,vRo,FRo,TRo,q4,Ofe,MRo,ERo,LG,CRo,wRo,ARo,N4,Vfe,yRo,LRo,xG,xRo,$Ro,kRo,j4,Xfe,SRo,RRo,$G,BRo,PRo,IRo,D4,zfe,qRo,NRo,kG,jRo,DRo,GRo,G4,Qfe,ORo,VRo,SG,XRo,zRo,QRo,O4,Wfe,WRo,HRo,RG,URo,JRo,YRo,V4,Hfe,KRo,ZRo,BG,eBo,oBo,rBo,X4,Ufe,tBo,aBo,PG,nBo,sBo,lBo,z4,Jfe,iBo,dBo,IG,cBo,fBo,mBo,Q4,Yfe,gBo,hBo,qG,pBo,uBo,_Bo,W4,Kfe,bBo,vBo,NG,FBo,TBo,MBo,H4,Zfe,EBo,CBo,jG,wBo,ABo,yBo,U4,LBo,eme,xBo,$Bo,ome,kBo,SBo,J4,CIe,Oi,Y4,rme,sy,RBo,tme,BBo,wIe,Po,ly,PBo,Vi,IBo,DG,qBo,NBo,GG,jBo,DBo,GBo,iy,OBo,ame,VBo,XBo,zBo,it,dy,QBo,nme,WBo,HBo,Xi,UBo,sme,JBo,YBo,OG,KBo,ZBo,ePo,K4,oPo,oo,cy,rPo,lme,tPo,aPo,Ra,nPo,ime,sPo,lPo,dme,iPo,dPo,cme,cPo,fPo,mPo,Yr,Z4,fme,gPo,hPo,VG,pPo,uPo,_Po,e2,mme,bPo,vPo,XG,FPo,TPo,MPo,o2,gme,EPo,CPo,zG,wPo,APo,yPo,r2,hme,LPo,xPo,QG,$Po,kPo,SPo,t2,pme,RPo,BPo,WG,PPo,IPo,qPo,a2,NPo,ume,jPo,DPo,_me,GPo,OPo,n2,AIe,zi,s2,bme,fy,VPo,vme,XPo,yIe,Io,my,zPo,Qi,QPo,HG,WPo,HPo,UG,UPo,JPo,YPo,gy,KPo,Fme,ZPo,eIo,oIo,dt,hy,rIo,Tme,tIo,aIo,Wi,nIo,Mme,sIo,lIo,JG,iIo,dIo,cIo,l2,fIo,ro,py,mIo,Eme,gIo,hIo,Ba,pIo,Cme,uIo,_Io,wme,bIo,vIo,Ame,FIo,TIo,MIo,U,i2,yme,EIo,CIo,YG,wIo,AIo,yIo,d2,Lme,LIo,xIo,KG,$Io,kIo,SIo,c2,xme,RIo,BIo,ZG,PIo,IIo,qIo,f2,$me,NIo,jIo,eO,DIo,GIo,OIo,m2,kme,VIo,XIo,oO,zIo,QIo,WIo,g2,Sme,HIo,UIo,rO,JIo,YIo,KIo,h2,Rme,ZIo,eqo,tO,oqo,rqo,tqo,p2,Bme,aqo,nqo,aO,sqo,lqo,iqo,u2,Pme,dqo,cqo,nO,fqo,mqo,gqo,_2,Ime,hqo,pqo,sO,uqo,_qo,bqo,b2,qme,vqo,Fqo,lO,Tqo,Mqo,Eqo,v2,Nme,Cqo,wqo,iO,Aqo,yqo,Lqo,F2,jme,xqo,$qo,dO,kqo,Sqo,Rqo,T2,Dme,Bqo,Pqo,cO,Iqo,qqo,Nqo,M2,Gme,jqo,Dqo,fO,Gqo,Oqo,Vqo,E2,Ome,Xqo,zqo,mO,Qqo,Wqo,Hqo,C2,Vme,Uqo,Jqo,gO,Yqo,Kqo,Zqo,w2,Xme,eNo,oNo,hO,rNo,tNo,aNo,A2,zme,nNo,sNo,pO,lNo,iNo,dNo,y2,Qme,cNo,fNo,uO,mNo,gNo,hNo,L2,Wme,pNo,uNo,_O,_No,bNo,vNo,x2,Hme,FNo,TNo,bO,MNo,ENo,CNo,$2,Ume,wNo,ANo,vO,yNo,LNo,xNo,k2,Jme,$No,kNo,FO,SNo,RNo,BNo,S2,Yme,PNo,INo,TO,qNo,NNo,jNo,R2,Kme,DNo,GNo,MO,ONo,VNo,XNo,B2,Zme,zNo,QNo,EO,WNo,HNo,UNo,P2,ege,JNo,YNo,CO,KNo,ZNo,ejo,I2,oge,ojo,rjo,wO,tjo,ajo,njo,q2,rge,sjo,ljo,AO,ijo,djo,cjo,N2,tge,fjo,mjo,yO,gjo,hjo,pjo,j2,age,ujo,_jo,LO,bjo,vjo,Fjo,D2,nge,Tjo,Mjo,xO,Ejo,Cjo,wjo,G2,Ajo,sge,yjo,Ljo,lge,xjo,$jo,O2,LIe,Hi,V2,ige,uy,kjo,dge,Sjo,xIe,qo,_y,Rjo,Ui,Bjo,$O,Pjo,Ijo,kO,qjo,Njo,jjo,by,Djo,cge,Gjo,Ojo,Vjo,ct,vy,Xjo,fge,zjo,Qjo,Ji,Wjo,mge,Hjo,Ujo,SO,Jjo,Yjo,Kjo,X2,Zjo,to,Fy,eDo,gge,oDo,rDo,Pa,tDo,hge,aDo,nDo,pge,sDo,lDo,uge,iDo,dDo,cDo,O,z2,_ge,fDo,mDo,RO,gDo,hDo,pDo,Q2,bge,uDo,_Do,BO,bDo,vDo,FDo,W2,vge,TDo,MDo,PO,EDo,CDo,wDo,H2,Fge,ADo,yDo,IO,LDo,xDo,$Do,U2,Tge,kDo,SDo,qO,RDo,BDo,PDo,J2,Mge,IDo,qDo,NO,NDo,jDo,DDo,Y2,Ege,GDo,ODo,jO,VDo,XDo,zDo,K2,Cge,QDo,WDo,DO,HDo,UDo,JDo,Z2,wge,YDo,KDo,GO,ZDo,eGo,oGo,ev,Age,rGo,tGo,OO,aGo,nGo,sGo,ov,yge,lGo,iGo,VO,dGo,cGo,fGo,rv,Lge,mGo,gGo,XO,hGo,pGo,uGo,tv,xge,_Go,bGo,zO,vGo,FGo,TGo,av,$ge,MGo,EGo,QO,CGo,wGo,AGo,nv,kge,yGo,LGo,WO,xGo,$Go,kGo,sv,Sge,SGo,RGo,HO,BGo,PGo,IGo,lv,Rge,qGo,NGo,UO,jGo,DGo,GGo,iv,Bge,OGo,VGo,JO,XGo,zGo,QGo,dv,Pge,WGo,HGo,YO,UGo,JGo,YGo,cv,Ige,KGo,ZGo,KO,eOo,oOo,rOo,fv,qge,tOo,aOo,ZO,nOo,sOo,lOo,mv,Nge,iOo,dOo,eV,cOo,fOo,mOo,gv,jge,gOo,hOo,oV,pOo,uOo,_Oo,hv,Dge,bOo,vOo,rV,FOo,TOo,MOo,pv,Gge,EOo,COo,tV,wOo,AOo,yOo,uv,Oge,LOo,xOo,aV,$Oo,kOo,SOo,_v,Vge,ROo,BOo,nV,POo,IOo,qOo,bv,Xge,NOo,jOo,sV,DOo,GOo,OOo,vv,zge,VOo,XOo,lV,zOo,QOo,WOo,Fv,Qge,HOo,UOo,iV,JOo,YOo,KOo,Tv,Wge,ZOo,eVo,dV,oVo,rVo,tVo,Mv,Hge,aVo,nVo,cV,sVo,lVo,iVo,Ev,Uge,dVo,cVo,fV,fVo,mVo,gVo,Cv,Jge,hVo,pVo,mV,uVo,_Vo,bVo,wv,Yge,vVo,FVo,gV,TVo,MVo,EVo,Av,Kge,CVo,wVo,hV,AVo,yVo,LVo,yv,Zge,xVo,$Vo,pV,kVo,SVo,RVo,Lv,ehe,BVo,PVo,uV,IVo,qVo,NVo,xv,ohe,jVo,DVo,_V,GVo,OVo,VVo,$v,XVo,rhe,zVo,QVo,the,WVo,HVo,kv,$Ie,Yi,Sv,ahe,Ty,UVo,nhe,JVo,kIe,No,My,YVo,Ki,KVo,bV,ZVo,eXo,vV,oXo,rXo,tXo,Ey,aXo,she,nXo,sXo,lXo,ft,Cy,iXo,lhe,dXo,cXo,Zi,fXo,ihe,mXo,gXo,FV,hXo,pXo,uXo,Rv,_Xo,ao,wy,bXo,dhe,vXo,FXo,Ia,TXo,che,MXo,EXo,fhe,CXo,wXo,mhe,AXo,yXo,LXo,ghe,Bv,hhe,xXo,$Xo,TV,kXo,SXo,RXo,Pv,BXo,phe,PXo,IXo,uhe,qXo,NXo,Iv,SIe,ed,qv,_he,Ay,jXo,bhe,DXo,RIe,jo,yy,GXo,od,OXo,MV,VXo,XXo,EV,zXo,QXo,WXo,Ly,HXo,vhe,UXo,JXo,YXo,mt,xy,KXo,Fhe,ZXo,ezo,rd,ozo,The,rzo,tzo,CV,azo,nzo,szo,Nv,lzo,no,$y,izo,Mhe,dzo,czo,qa,fzo,Ehe,mzo,gzo,Che,hzo,pzo,whe,uzo,_zo,bzo,Fe,jv,Ahe,vzo,Fzo,wV,Tzo,Mzo,Ezo,Dv,yhe,Czo,wzo,AV,Azo,yzo,Lzo,Gv,Lhe,xzo,$zo,yV,kzo,Szo,Rzo,Rs,xhe,Bzo,Pzo,LV,Izo,qzo,xV,Nzo,jzo,Dzo,Ov,$he,Gzo,Ozo,$V,Vzo,Xzo,zzo,gt,khe,Qzo,Wzo,kV,Hzo,Uzo,SV,Jzo,Yzo,RV,Kzo,Zzo,eQo,Vv,She,oQo,rQo,BV,tQo,aQo,nQo,Xv,Rhe,sQo,lQo,PV,iQo,dQo,cQo,zv,Bhe,fQo,mQo,IV,gQo,hQo,pQo,Qv,Phe,uQo,_Qo,qV,bQo,vQo,FQo,Wv,Ihe,TQo,MQo,NV,EQo,CQo,wQo,Hv,qhe,AQo,yQo,jV,LQo,xQo,$Qo,Uv,Nhe,kQo,SQo,DV,RQo,BQo,PQo,Jv,IQo,jhe,qQo,NQo,Dhe,jQo,DQo,Yv,BIe,td,Kv,Ghe,ky,GQo,Ohe,OQo,PIe,Do,Sy,VQo,ad,XQo,GV,zQo,QQo,OV,WQo,HQo,UQo,Ry,JQo,Vhe,YQo,KQo,ZQo,ht,By,eWo,Xhe,oWo,rWo,nd,tWo,zhe,aWo,nWo,VV,sWo,lWo,iWo,Zv,dWo,so,Py,cWo,Qhe,fWo,mWo,Na,gWo,Whe,hWo,pWo,Hhe,uWo,_Wo,Uhe,bWo,vWo,FWo,Jhe,eF,Yhe,TWo,MWo,XV,EWo,CWo,wWo,oF,AWo,Khe,yWo,LWo,Zhe,xWo,$Wo,rF,IIe,sd,tF,epe,Iy,kWo,ope,SWo,qIe,Go,qy,RWo,ld,BWo,zV,PWo,IWo,QV,qWo,NWo,jWo,Ny,DWo,rpe,GWo,OWo,VWo,pt,jy,XWo,tpe,zWo,QWo,id,WWo,ape,HWo,UWo,WV,JWo,YWo,KWo,aF,ZWo,lo,Dy,eHo,npe,oHo,rHo,ja,tHo,spe,aHo,nHo,lpe,sHo,lHo,ipe,iHo,dHo,cHo,Ne,nF,dpe,fHo,mHo,HV,gHo,hHo,pHo,sF,cpe,uHo,_Ho,UV,bHo,vHo,FHo,lF,fpe,THo,MHo,JV,EHo,CHo,wHo,iF,mpe,AHo,yHo,YV,LHo,xHo,$Ho,dF,gpe,kHo,SHo,KV,RHo,BHo,PHo,cF,hpe,IHo,qHo,ZV,NHo,jHo,DHo,fF,ppe,GHo,OHo,eX,VHo,XHo,zHo,mF,upe,QHo,WHo,oX,HHo,UHo,JHo,gF,YHo,_pe,KHo,ZHo,bpe,eUo,oUo,hF,NIe,dd,pF,vpe,Gy,rUo,Fpe,tUo,jIe,Oo,Oy,aUo,cd,nUo,rX,sUo,lUo,tX,iUo,dUo,cUo,Vy,fUo,Tpe,mUo,gUo,hUo,ut,Xy,pUo,Mpe,uUo,_Uo,fd,bUo,Epe,vUo,FUo,aX,TUo,MUo,EUo,uF,CUo,io,zy,wUo,Cpe,AUo,yUo,Da,LUo,wpe,xUo,$Uo,Ape,kUo,SUo,ype,RUo,BUo,PUo,Ga,_F,Lpe,IUo,qUo,nX,NUo,jUo,DUo,bF,xpe,GUo,OUo,sX,VUo,XUo,zUo,vF,$pe,QUo,WUo,lX,HUo,UUo,JUo,FF,kpe,YUo,KUo,iX,ZUo,eJo,oJo,TF,rJo,Spe,tJo,aJo,Rpe,nJo,sJo,MF,DIe,md,EF,Bpe,Qy,lJo,Ppe,iJo,GIe,Vo,Wy,dJo,gd,cJo,dX,fJo,mJo,cX,gJo,hJo,pJo,Hy,uJo,Ipe,_Jo,bJo,vJo,_t,Uy,FJo,qpe,TJo,MJo,hd,EJo,Npe,CJo,wJo,fX,AJo,yJo,LJo,CF,xJo,co,Jy,$Jo,jpe,kJo,SJo,Oa,RJo,Dpe,BJo,PJo,Gpe,IJo,qJo,Ope,NJo,jJo,DJo,je,wF,Vpe,GJo,OJo,mX,VJo,XJo,zJo,AF,Xpe,QJo,WJo,gX,HJo,UJo,JJo,yF,zpe,YJo,KJo,hX,ZJo,eYo,oYo,LF,Qpe,rYo,tYo,pX,aYo,nYo,sYo,xF,Wpe,lYo,iYo,uX,dYo,cYo,fYo,$F,Hpe,mYo,gYo,_X,hYo,pYo,uYo,kF,Upe,_Yo,bYo,bX,vYo,FYo,TYo,SF,Jpe,MYo,EYo,vX,CYo,wYo,AYo,RF,yYo,Ype,LYo,xYo,Kpe,$Yo,kYo,BF,OIe,pd,PF,Zpe,Yy,SYo,eue,RYo,VIe,Xo,Ky,BYo,ud,PYo,FX,IYo,qYo,TX,NYo,jYo,DYo,Zy,GYo,oue,OYo,VYo,XYo,bt,eL,zYo,rue,QYo,WYo,_d,HYo,tue,UYo,JYo,MX,YYo,KYo,ZYo,IF,eKo,fo,oL,oKo,aue,rKo,tKo,Va,aKo,nue,nKo,sKo,sue,lKo,iKo,lue,dKo,cKo,fKo,rL,qF,iue,mKo,gKo,EX,hKo,pKo,uKo,NF,due,_Ko,bKo,CX,vKo,FKo,TKo,jF,MKo,cue,EKo,CKo,fue,wKo,AKo,DF,XIe,bd,GF,mue,tL,yKo,gue,LKo,zIe,zo,aL,xKo,vd,$Ko,wX,kKo,SKo,AX,RKo,BKo,PKo,nL,IKo,hue,qKo,NKo,jKo,vt,sL,DKo,pue,GKo,OKo,Fd,VKo,uue,XKo,zKo,yX,QKo,WKo,HKo,OF,UKo,mo,lL,JKo,_ue,YKo,KKo,Xa,ZKo,bue,eZo,oZo,vue,rZo,tZo,Fue,aZo,nZo,sZo,za,VF,Tue,lZo,iZo,LX,dZo,cZo,fZo,XF,Mue,mZo,gZo,xX,hZo,pZo,uZo,zF,Eue,_Zo,bZo,$X,vZo,FZo,TZo,QF,Cue,MZo,EZo,kX,CZo,wZo,AZo,WF,yZo,wue,LZo,xZo,Aue,$Zo,kZo,HF,QIe,Td,UF,yue,iL,SZo,Lue,RZo,WIe,Qo,dL,BZo,Md,PZo,SX,IZo,qZo,RX,NZo,jZo,DZo,cL,GZo,xue,OZo,VZo,XZo,Ft,fL,zZo,$ue,QZo,WZo,Ed,HZo,kue,UZo,JZo,BX,YZo,KZo,ZZo,JF,eer,go,mL,oer,Sue,rer,ter,Qa,aer,Rue,ner,ser,Bue,ler,ier,Pue,der,cer,fer,Cd,YF,Iue,mer,ger,PX,her,per,uer,KF,que,_er,ber,IX,ver,Fer,Ter,ZF,Nue,Mer,Eer,qX,Cer,wer,Aer,eT,yer,jue,Ler,xer,Due,$er,ker,oT,HIe,wd,rT,Gue,gL,Ser,Oue,Rer,UIe,Wo,hL,Ber,Ad,Per,NX,Ier,qer,jX,Ner,jer,Der,pL,Ger,Vue,Oer,Ver,Xer,Tt,uL,zer,Xue,Qer,Wer,yd,Her,zue,Uer,Jer,DX,Yer,Ker,Zer,tT,eor,ho,_L,oor,Que,ror,tor,Wa,aor,Wue,nor,sor,Hue,lor,ior,Uue,dor,cor,mor,bL,aT,Jue,gor,hor,GX,por,uor,_or,nT,Yue,bor,vor,OX,For,Tor,Mor,sT,Eor,Kue,Cor,wor,Zue,Aor,yor,lT,JIe,Ld,iT,e_e,vL,Lor,o_e,xor,YIe,Ho,FL,$or,xd,kor,VX,Sor,Ror,XX,Bor,Por,Ior,TL,qor,r_e,Nor,jor,Dor,Mt,ML,Gor,t_e,Oor,Vor,$d,Xor,a_e,zor,Qor,zX,Wor,Hor,Uor,dT,Jor,po,EL,Yor,n_e,Kor,Zor,Ha,err,s_e,orr,rrr,l_e,trr,arr,i_e,nrr,srr,lrr,d_e,cT,c_e,irr,drr,QX,crr,frr,mrr,fT,grr,f_e,hrr,prr,m_e,urr,_rr,mT,KIe,kd,gT,g_e,CL,brr,h_e,vrr,ZIe,Uo,wL,Frr,Sd,Trr,WX,Mrr,Err,HX,Crr,wrr,Arr,AL,yrr,p_e,Lrr,xrr,$rr,Et,yL,krr,u_e,Srr,Rrr,Rd,Brr,__e,Prr,Irr,UX,qrr,Nrr,jrr,hT,Drr,uo,LL,Grr,b_e,Orr,Vrr,Ua,Xrr,v_e,zrr,Qrr,F_e,Wrr,Hrr,T_e,Urr,Jrr,Yrr,Ja,pT,M_e,Krr,Zrr,JX,etr,otr,rtr,uT,E_e,ttr,atr,YX,ntr,str,ltr,_T,C_e,itr,dtr,KX,ctr,ftr,mtr,bT,w_e,gtr,htr,ZX,ptr,utr,_tr,vT,btr,A_e,vtr,Ftr,y_e,Ttr,Mtr,FT,eqe,Bd,TT,L_e,xL,Etr,x_e,Ctr,oqe,Jo,$L,wtr,Pd,Atr,ez,ytr,Ltr,oz,xtr,$tr,ktr,kL,Str,$_e,Rtr,Btr,Ptr,Ct,SL,Itr,k_e,qtr,Ntr,Id,jtr,S_e,Dtr,Gtr,rz,Otr,Vtr,Xtr,MT,ztr,_o,RL,Qtr,R_e,Wtr,Htr,Ya,Utr,B_e,Jtr,Ytr,P_e,Ktr,Ztr,I_e,ear,oar,rar,q_e,ET,N_e,tar,aar,tz,nar,sar,lar,CT,iar,j_e,dar,car,D_e,far,mar,wT,rqe,qd,AT,G_e,BL,gar,O_e,har,tqe,Yo,PL,par,Nd,uar,az,_ar,bar,nz,Far,Tar,Mar,IL,Ear,V_e,Car,war,Aar,wt,qL,yar,X_e,Lar,xar,jd,$ar,z_e,kar,Sar,sz,Rar,Bar,Par,yT,Iar,wr,NL,qar,Q_e,Nar,jar,Ka,Dar,W_e,Gar,Oar,H_e,Var,Xar,U_e,zar,Qar,War,j,LT,J_e,Har,Uar,lz,Jar,Yar,Kar,xT,Y_e,Zar,enr,iz,onr,rnr,tnr,$T,K_e,anr,nnr,dz,snr,lnr,inr,kT,Z_e,dnr,cnr,cz,fnr,mnr,gnr,ST,e1e,hnr,pnr,fz,unr,_nr,bnr,RT,o1e,vnr,Fnr,mz,Tnr,Mnr,Enr,BT,r1e,Cnr,wnr,gz,Anr,ynr,Lnr,PT,t1e,xnr,$nr,hz,knr,Snr,Rnr,IT,a1e,Bnr,Pnr,pz,Inr,qnr,Nnr,qT,n1e,jnr,Dnr,uz,Gnr,Onr,Vnr,NT,s1e,Xnr,znr,_z,Qnr,Wnr,Hnr,jT,l1e,Unr,Jnr,bz,Ynr,Knr,Znr,DT,i1e,esr,osr,vz,rsr,tsr,asr,GT,d1e,nsr,ssr,Fz,lsr,isr,dsr,OT,c1e,csr,fsr,Tz,msr,gsr,hsr,VT,f1e,psr,usr,Mz,_sr,bsr,vsr,XT,m1e,Fsr,Tsr,Ez,Msr,Esr,Csr,Bs,g1e,wsr,Asr,Cz,ysr,Lsr,wz,xsr,$sr,ksr,zT,h1e,Ssr,Rsr,Az,Bsr,Psr,Isr,QT,p1e,qsr,Nsr,yz,jsr,Dsr,Gsr,WT,u1e,Osr,Vsr,Lz,Xsr,zsr,Qsr,HT,_1e,Wsr,Hsr,xz,Usr,Jsr,Ysr,UT,b1e,Ksr,Zsr,$z,elr,olr,rlr,JT,v1e,tlr,alr,kz,nlr,slr,llr,YT,F1e,ilr,dlr,Sz,clr,flr,mlr,KT,T1e,glr,hlr,Rz,plr,ulr,_lr,ZT,M1e,blr,vlr,Bz,Flr,Tlr,Mlr,e7,E1e,Elr,Clr,Pz,wlr,Alr,ylr,o7,C1e,Llr,xlr,Iz,$lr,klr,Slr,r7,w1e,Rlr,Blr,qz,Plr,Ilr,qlr,t7,A1e,Nlr,jlr,Nz,Dlr,Glr,Olr,a7,y1e,Vlr,Xlr,jz,zlr,Qlr,Wlr,n7,L1e,Hlr,Ulr,Dz,Jlr,Ylr,Klr,s7,x1e,Zlr,eir,Gz,oir,rir,tir,l7,$1e,air,nir,Oz,sir,lir,iir,i7,k1e,dir,cir,Vz,fir,mir,gir,d7,S1e,hir,pir,Xz,uir,_ir,bir,c7,R1e,vir,Fir,zz,Tir,Mir,Eir,f7,B1e,Cir,wir,Qz,Air,yir,Lir,m7,P1e,xir,$ir,Wz,kir,Sir,Rir,g7,I1e,Bir,Pir,Hz,Iir,qir,Nir,h7,q1e,jir,Dir,Uz,Gir,Oir,Vir,p7,N1e,Xir,zir,Jz,Qir,Wir,Hir,u7,j1e,Uir,Jir,Yz,Yir,Kir,Zir,_7,D1e,edr,odr,Kz,rdr,tdr,adr,b7,aqe,Dd,v7,G1e,jL,ndr,O1e,sdr,nqe,Ko,DL,ldr,Gd,idr,Zz,ddr,cdr,eQ,fdr,mdr,gdr,GL,hdr,V1e,pdr,udr,_dr,At,OL,bdr,X1e,vdr,Fdr,Od,Tdr,z1e,Mdr,Edr,oQ,Cdr,wdr,Adr,F7,ydr,Ar,VL,Ldr,Q1e,xdr,$dr,Za,kdr,W1e,Sdr,Rdr,H1e,Bdr,Pdr,U1e,Idr,qdr,Ndr,se,T7,J1e,jdr,Ddr,rQ,Gdr,Odr,Vdr,M7,Y1e,Xdr,zdr,tQ,Qdr,Wdr,Hdr,E7,K1e,Udr,Jdr,aQ,Ydr,Kdr,Zdr,C7,Z1e,ecr,ocr,nQ,rcr,tcr,acr,w7,ebe,ncr,scr,sQ,lcr,icr,dcr,A7,obe,ccr,fcr,lQ,mcr,gcr,hcr,y7,rbe,pcr,ucr,iQ,_cr,bcr,vcr,L7,tbe,Fcr,Tcr,dQ,Mcr,Ecr,Ccr,x7,abe,wcr,Acr,cQ,ycr,Lcr,xcr,$7,nbe,$cr,kcr,fQ,Scr,Rcr,Bcr,k7,sbe,Pcr,Icr,mQ,qcr,Ncr,jcr,S7,lbe,Dcr,Gcr,gQ,Ocr,Vcr,Xcr,R7,ibe,zcr,Qcr,hQ,Wcr,Hcr,Ucr,B7,dbe,Jcr,Ycr,pQ,Kcr,Zcr,efr,P7,cbe,ofr,rfr,uQ,tfr,afr,nfr,I7,fbe,sfr,lfr,_Q,ifr,dfr,cfr,q7,mbe,ffr,mfr,bQ,gfr,hfr,pfr,N7,gbe,ufr,_fr,vQ,bfr,vfr,Ffr,j7,hbe,Tfr,Mfr,FQ,Efr,Cfr,wfr,D7,pbe,Afr,yfr,TQ,Lfr,xfr,$fr,G7,ube,kfr,Sfr,MQ,Rfr,Bfr,Pfr,O7,_be,Ifr,qfr,EQ,Nfr,jfr,Dfr,V7,bbe,Gfr,Ofr,CQ,Vfr,Xfr,zfr,X7,sqe,Vd,z7,vbe,XL,Qfr,Fbe,Wfr,lqe,Zo,zL,Hfr,Xd,Ufr,wQ,Jfr,Yfr,AQ,Kfr,Zfr,emr,QL,omr,Tbe,rmr,tmr,amr,yt,WL,nmr,Mbe,smr,lmr,zd,imr,Ebe,dmr,cmr,yQ,fmr,mmr,gmr,Q7,hmr,yr,HL,pmr,Cbe,umr,_mr,en,bmr,wbe,vmr,Fmr,Abe,Tmr,Mmr,ybe,Emr,Cmr,wmr,Te,W7,Lbe,Amr,ymr,LQ,Lmr,xmr,$mr,H7,xbe,kmr,Smr,xQ,Rmr,Bmr,Pmr,U7,$be,Imr,qmr,$Q,Nmr,jmr,Dmr,J7,kbe,Gmr,Omr,kQ,Vmr,Xmr,zmr,Y7,Sbe,Qmr,Wmr,SQ,Hmr,Umr,Jmr,K7,Rbe,Ymr,Kmr,RQ,Zmr,egr,ogr,Z7,Bbe,rgr,tgr,BQ,agr,ngr,sgr,eM,Pbe,lgr,igr,PQ,dgr,cgr,fgr,oM,Ibe,mgr,ggr,IQ,hgr,pgr,ugr,rM,qbe,_gr,bgr,qQ,vgr,Fgr,Tgr,tM,Nbe,Mgr,Egr,NQ,Cgr,wgr,Agr,aM,jbe,ygr,Lgr,jQ,xgr,$gr,kgr,nM,iqe,Qd,sM,Dbe,UL,Sgr,Gbe,Rgr,dqe,er,JL,Bgr,Wd,Pgr,DQ,Igr,qgr,GQ,Ngr,jgr,Dgr,YL,Ggr,Obe,Ogr,Vgr,Xgr,Lt,KL,zgr,Vbe,Qgr,Wgr,Hd,Hgr,Xbe,Ugr,Jgr,OQ,Ygr,Kgr,Zgr,lM,ehr,Lr,ZL,ohr,zbe,rhr,thr,on,ahr,Qbe,nhr,shr,Wbe,lhr,ihr,Hbe,dhr,chr,fhr,Ud,iM,Ube,mhr,ghr,VQ,hhr,phr,uhr,dM,Jbe,_hr,bhr,XQ,vhr,Fhr,Thr,cM,Ybe,Mhr,Ehr,zQ,Chr,whr,Ahr,fM,cqe,Jd,mM,Kbe,e8,yhr,Zbe,Lhr,fqe,or,o8,xhr,Yd,$hr,QQ,khr,Shr,WQ,Rhr,Bhr,Phr,r8,Ihr,e4e,qhr,Nhr,jhr,xt,t8,Dhr,o4e,Ghr,Ohr,Kd,Vhr,r4e,Xhr,zhr,HQ,Qhr,Whr,Hhr,gM,Uhr,xr,a8,Jhr,t4e,Yhr,Khr,rn,Zhr,a4e,epr,opr,n4e,rpr,tpr,s4e,apr,npr,spr,ie,hM,l4e,lpr,ipr,UQ,dpr,cpr,fpr,pM,i4e,mpr,gpr,JQ,hpr,ppr,upr,uM,d4e,_pr,bpr,YQ,vpr,Fpr,Tpr,_M,c4e,Mpr,Epr,KQ,Cpr,wpr,Apr,bM,f4e,ypr,Lpr,ZQ,xpr,$pr,kpr,vM,m4e,Spr,Rpr,eW,Bpr,Ppr,Ipr,FM,g4e,qpr,Npr,oW,jpr,Dpr,Gpr,TM,h4e,Opr,Vpr,rW,Xpr,zpr,Qpr,MM,p4e,Wpr,Hpr,tW,Upr,Jpr,Ypr,EM,u4e,Kpr,Zpr,aW,eur,our,rur,CM,_4e,tur,aur,nW,nur,sur,lur,wM,b4e,iur,dur,sW,cur,fur,mur,AM,v4e,gur,hur,lW,pur,uur,_ur,yM,F4e,bur,vur,iW,Fur,Tur,Mur,LM,T4e,Eur,Cur,dW,wur,Aur,yur,xM,M4e,Lur,xur,cW,$ur,kur,Sur,$M,E4e,Rur,Bur,fW,Pur,Iur,qur,kM,C4e,Nur,jur,mW,Dur,Gur,Our,SM,w4e,Vur,Xur,gW,zur,Qur,Wur,RM,A4e,Hur,Uur,hW,Jur,Yur,Kur,BM,mqe,Zd,PM,y4e,n8,Zur,L4e,e_r,gqe,rr,s8,o_r,ec,r_r,pW,t_r,a_r,uW,n_r,s_r,l_r,l8,i_r,x4e,d_r,c_r,f_r,$t,i8,m_r,$4e,g_r,h_r,oc,p_r,k4e,u_r,__r,_W,b_r,v_r,F_r,IM,T_r,$r,d8,M_r,S4e,E_r,C_r,tn,w_r,R4e,A_r,y_r,B4e,L_r,x_r,P4e,$_r,k_r,S_r,ye,qM,I4e,R_r,B_r,bW,P_r,I_r,q_r,NM,q4e,N_r,j_r,vW,D_r,G_r,O_r,jM,N4e,V_r,X_r,FW,z_r,Q_r,W_r,DM,j4e,H_r,U_r,TW,J_r,Y_r,K_r,GM,D4e,Z_r,e1r,MW,o1r,r1r,t1r,OM,G4e,a1r,n1r,EW,s1r,l1r,i1r,VM,O4e,d1r,c1r,CW,f1r,m1r,g1r,XM,V4e,h1r,p1r,wW,u1r,_1r,b1r,zM,X4e,v1r,F1r,AW,T1r,M1r,E1r,QM,z4e,C1r,w1r,yW,A1r,y1r,L1r,WM,hqe,rc,HM,Q4e,c8,x1r,W4e,$1r,pqe,tr,f8,k1r,tc,S1r,LW,R1r,B1r,xW,P1r,I1r,q1r,m8,N1r,H4e,j1r,D1r,G1r,kt,g8,O1r,U4e,V1r,X1r,ac,z1r,J4e,Q1r,W1r,$W,H1r,U1r,J1r,UM,Y1r,kr,h8,K1r,Y4e,Z1r,ebr,an,obr,K4e,rbr,tbr,Z4e,abr,nbr,e2e,sbr,lbr,ibr,Z,JM,o2e,dbr,cbr,kW,fbr,mbr,gbr,YM,r2e,hbr,pbr,SW,ubr,_br,bbr,KM,t2e,vbr,Fbr,RW,Tbr,Mbr,Ebr,ZM,a2e,Cbr,wbr,BW,Abr,ybr,Lbr,eE,n2e,xbr,$br,PW,kbr,Sbr,Rbr,oE,s2e,Bbr,Pbr,IW,Ibr,qbr,Nbr,rE,l2e,jbr,Dbr,qW,Gbr,Obr,Vbr,tE,i2e,Xbr,zbr,NW,Qbr,Wbr,Hbr,aE,d2e,Ubr,Jbr,jW,Ybr,Kbr,Zbr,nE,c2e,e4r,o4r,DW,r4r,t4r,a4r,sE,f2e,n4r,s4r,GW,l4r,i4r,d4r,lE,m2e,c4r,f4r,OW,m4r,g4r,h4r,iE,g2e,p4r,u4r,VW,_4r,b4r,v4r,dE,h2e,F4r,T4r,XW,M4r,E4r,C4r,cE,p2e,w4r,A4r,zW,y4r,L4r,x4r,fE,u2e,$4r,k4r,QW,S4r,R4r,B4r,mE,_2e,P4r,I4r,WW,q4r,N4r,j4r,gE,b2e,D4r,G4r,HW,O4r,V4r,X4r,hE,v2e,z4r,Q4r,UW,W4r,H4r,U4r,pE,F2e,J4r,Y4r,JW,K4r,Z4r,e2r,uE,T2e,o2r,r2r,YW,t2r,a2r,n2r,_E,M2e,s2r,l2r,KW,i2r,d2r,c2r,bE,E2e,f2r,m2r,ZW,g2r,h2r,p2r,vE,C2e,u2r,_2r,eH,b2r,v2r,F2r,FE,w2e,T2r,M2r,oH,E2r,C2r,w2r,TE,A2e,A2r,y2r,rH,L2r,x2r,$2r,ME,uqe,nc,EE,y2e,p8,k2r,L2e,S2r,_qe,ar,u8,R2r,sc,B2r,tH,P2r,I2r,aH,q2r,N2r,j2r,_8,D2r,x2e,G2r,O2r,V2r,St,b8,X2r,$2e,z2r,Q2r,lc,W2r,k2e,H2r,U2r,nH,J2r,Y2r,K2r,CE,Z2r,Sr,v8,evr,S2e,ovr,rvr,nn,tvr,R2e,avr,nvr,B2e,svr,lvr,P2e,ivr,dvr,cvr,pe,wE,I2e,fvr,mvr,sH,gvr,hvr,pvr,AE,q2e,uvr,_vr,lH,bvr,vvr,Fvr,yE,N2e,Tvr,Mvr,iH,Evr,Cvr,wvr,LE,j2e,Avr,yvr,dH,Lvr,xvr,$vr,xE,D2e,kvr,Svr,cH,Rvr,Bvr,Pvr,$E,G2e,Ivr,qvr,fH,Nvr,jvr,Dvr,kE,O2e,Gvr,Ovr,mH,Vvr,Xvr,zvr,SE,V2e,Qvr,Wvr,gH,Hvr,Uvr,Jvr,RE,X2e,Yvr,Kvr,hH,Zvr,eFr,oFr,BE,z2e,rFr,tFr,pH,aFr,nFr,sFr,PE,Q2e,lFr,iFr,uH,dFr,cFr,fFr,IE,W2e,mFr,gFr,_H,hFr,pFr,uFr,qE,H2e,_Fr,bFr,bH,vFr,FFr,TFr,NE,U2e,MFr,EFr,vH,CFr,wFr,AFr,jE,J2e,yFr,LFr,FH,xFr,$Fr,kFr,DE,Y2e,SFr,RFr,TH,BFr,PFr,IFr,GE,K2e,qFr,NFr,MH,jFr,DFr,GFr,OE,bqe,ic,VE,Z2e,F8,OFr,eve,VFr,vqe,nr,T8,XFr,dc,zFr,EH,QFr,WFr,CH,HFr,UFr,JFr,M8,YFr,ove,KFr,ZFr,eTr,Rt,E8,oTr,rve,rTr,tTr,cc,aTr,tve,nTr,sTr,wH,lTr,iTr,dTr,XE,cTr,Rr,C8,fTr,ave,mTr,gTr,sn,hTr,nve,pTr,uTr,sve,_Tr,bTr,lve,vTr,FTr,TTr,w8,zE,ive,MTr,ETr,AH,CTr,wTr,ATr,QE,dve,yTr,LTr,yH,xTr,$Tr,kTr,WE,Fqe,fc,HE,cve,A8,STr,fve,RTr,Tqe,sr,y8,BTr,mc,PTr,LH,ITr,qTr,xH,NTr,jTr,DTr,L8,GTr,mve,OTr,VTr,XTr,Bt,x8,zTr,gve,QTr,WTr,gc,HTr,hve,UTr,JTr,$H,YTr,KTr,ZTr,UE,e7r,Br,$8,o7r,pve,r7r,t7r,ln,a7r,uve,n7r,s7r,_ve,l7r,i7r,bve,d7r,c7r,f7r,vve,JE,Fve,m7r,g7r,kH,h7r,p7r,u7r,YE,Mqe,hc,KE,Tve,k8,_7r,Mve,b7r,Eqe,lr,S8,v7r,pc,F7r,SH,T7r,M7r,RH,E7r,C7r,w7r,R8,A7r,Eve,y7r,L7r,x7r,Pt,B8,$7r,Cve,k7r,S7r,uc,R7r,wve,B7r,P7r,BH,I7r,q7r,N7r,ZE,j7r,Pr,P8,D7r,Ave,G7r,O7r,dn,V7r,yve,X7r,z7r,Lve,Q7r,W7r,xve,H7r,U7r,J7r,de,e5,$ve,Y7r,K7r,PH,Z7r,eMr,oMr,o5,kve,rMr,tMr,IH,aMr,nMr,sMr,r5,Sve,lMr,iMr,qH,dMr,cMr,fMr,t5,Rve,mMr,gMr,NH,hMr,pMr,uMr,a5,Bve,_Mr,bMr,jH,vMr,FMr,TMr,n5,Pve,MMr,EMr,DH,CMr,wMr,AMr,s5,Ive,yMr,LMr,GH,xMr,$Mr,kMr,l5,qve,SMr,RMr,OH,BMr,PMr,IMr,i5,Nve,qMr,NMr,VH,jMr,DMr,GMr,d5,jve,OMr,VMr,XH,XMr,zMr,QMr,c5,Dve,WMr,HMr,zH,UMr,JMr,YMr,f5,Gve,KMr,ZMr,QH,eEr,oEr,rEr,m5,Ove,tEr,aEr,WH,nEr,sEr,lEr,g5,Vve,iEr,dEr,HH,cEr,fEr,mEr,h5,Xve,gEr,hEr,UH,pEr,uEr,_Er,p5,zve,bEr,vEr,JH,FEr,TEr,MEr,u5,Qve,EEr,CEr,YH,wEr,AEr,yEr,_5,Wve,LEr,xEr,KH,$Er,kEr,SEr,b5,Hve,REr,BEr,ZH,PEr,IEr,qEr,v5,Uve,NEr,jEr,eU,DEr,GEr,OEr,F5,Cqe,_c,T5,Jve,I8,VEr,Yve,XEr,wqe,ir,q8,zEr,bc,QEr,oU,WEr,HEr,rU,UEr,JEr,YEr,N8,KEr,Kve,ZEr,e5r,o5r,It,j8,r5r,Zve,t5r,a5r,vc,n5r,eFe,s5r,l5r,tU,i5r,d5r,c5r,M5,f5r,Ir,D8,m5r,oFe,g5r,h5r,cn,p5r,rFe,u5r,_5r,tFe,b5r,v5r,aFe,F5r,T5r,M5r,ce,E5,nFe,E5r,C5r,aU,w5r,A5r,y5r,C5,sFe,L5r,x5r,nU,$5r,k5r,S5r,w5,lFe,R5r,B5r,sU,P5r,I5r,q5r,A5,iFe,N5r,j5r,lU,D5r,G5r,O5r,y5,dFe,V5r,X5r,iU,z5r,Q5r,W5r,L5,cFe,H5r,U5r,dU,J5r,Y5r,K5r,x5,fFe,Z5r,eCr,cU,oCr,rCr,tCr,$5,mFe,aCr,nCr,fU,sCr,lCr,iCr,k5,gFe,dCr,cCr,mU,fCr,mCr,gCr,S5,hFe,hCr,pCr,gU,uCr,_Cr,bCr,R5,pFe,vCr,FCr,hU,TCr,MCr,ECr,B5,uFe,CCr,wCr,pU,ACr,yCr,LCr,P5,_Fe,xCr,$Cr,uU,kCr,SCr,RCr,I5,bFe,BCr,PCr,_U,ICr,qCr,NCr,q5,vFe,jCr,DCr,bU,GCr,OCr,VCr,N5,FFe,XCr,zCr,vU,QCr,WCr,HCr,j5,TFe,UCr,JCr,FU,YCr,KCr,ZCr,D5,MFe,e3r,o3r,TU,r3r,t3r,a3r,G5,EFe,n3r,s3r,MU,l3r,i3r,d3r,O5,CFe,c3r,f3r,EU,m3r,g3r,h3r,V5,Aqe,Fc,X5,wFe,G8,p3r,AFe,u3r,yqe,dr,O8,_3r,Tc,b3r,CU,v3r,F3r,wU,T3r,M3r,E3r,V8,C3r,yFe,w3r,A3r,y3r,qt,X8,L3r,LFe,x3r,$3r,Mc,k3r,xFe,S3r,R3r,AU,B3r,P3r,I3r,z5,q3r,qr,z8,N3r,$Fe,j3r,D3r,fn,G3r,kFe,O3r,V3r,SFe,X3r,z3r,RFe,Q3r,W3r,H3r,BFe,Q5,PFe,U3r,J3r,yU,Y3r,K3r,Z3r,W5,Lqe,Ec,H5,IFe,Q8,ewr,qFe,owr,xqe,cr,W8,rwr,Cc,twr,LU,awr,nwr,xU,swr,lwr,iwr,H8,dwr,NFe,cwr,fwr,mwr,Nt,U8,gwr,jFe,hwr,pwr,wc,uwr,DFe,_wr,bwr,$U,vwr,Fwr,Twr,U5,Mwr,Nr,J8,Ewr,GFe,Cwr,wwr,mn,Awr,OFe,ywr,Lwr,VFe,xwr,$wr,XFe,kwr,Swr,Rwr,zFe,J5,QFe,Bwr,Pwr,kU,Iwr,qwr,Nwr,Y5,$qe,Ac,K5,WFe,Y8,jwr,HFe,Dwr,kqe,fr,K8,Gwr,yc,Owr,SU,Vwr,Xwr,RU,zwr,Qwr,Wwr,Z8,Hwr,UFe,Uwr,Jwr,Ywr,jt,ex,Kwr,JFe,Zwr,eAr,Lc,oAr,YFe,rAr,tAr,BU,aAr,nAr,sAr,Z5,lAr,jr,ox,iAr,KFe,dAr,cAr,gn,fAr,ZFe,mAr,gAr,eTe,hAr,pAr,oTe,uAr,_Ar,bAr,re,eC,rTe,vAr,FAr,PU,TAr,MAr,EAr,oC,tTe,CAr,wAr,IU,AAr,yAr,LAr,rC,aTe,xAr,$Ar,qU,kAr,SAr,RAr,tC,nTe,BAr,PAr,NU,IAr,qAr,NAr,aC,sTe,jAr,DAr,jU,GAr,OAr,VAr,nC,lTe,XAr,zAr,DU,QAr,WAr,HAr,sC,iTe,UAr,JAr,GU,YAr,KAr,ZAr,lC,dTe,e6r,o6r,OU,r6r,t6r,a6r,iC,cTe,n6r,s6r,VU,l6r,i6r,d6r,dC,fTe,c6r,f6r,XU,m6r,g6r,h6r,cC,mTe,p6r,u6r,zU,_6r,b6r,v6r,fC,gTe,F6r,T6r,QU,M6r,E6r,C6r,mC,hTe,w6r,A6r,WU,y6r,L6r,x6r,gC,pTe,$6r,k6r,HU,S6r,R6r,B6r,hC,uTe,P6r,I6r,UU,q6r,N6r,j6r,pC,_Te,D6r,G6r,JU,O6r,V6r,X6r,uC,bTe,z6r,Q6r,YU,W6r,H6r,U6r,_C,vTe,J6r,Y6r,KU,K6r,Z6r,e0r,bC,FTe,o0r,r0r,ZU,t0r,a0r,n0r,vC,TTe,s0r,l0r,eJ,i0r,d0r,c0r,FC,MTe,f0r,m0r,oJ,g0r,h0r,p0r,TC,ETe,u0r,_0r,rJ,b0r,v0r,F0r,MC,CTe,T0r,M0r,tJ,E0r,C0r,w0r,EC,wTe,A0r,y0r,aJ,L0r,x0r,$0r,CC,ATe,k0r,S0r,nJ,R0r,B0r,P0r,wC,Sqe,xc,AC,yTe,rx,I0r,LTe,q0r,Rqe,mr,tx,N0r,$c,j0r,sJ,D0r,G0r,lJ,O0r,V0r,X0r,ax,z0r,xTe,Q0r,W0r,H0r,Dt,nx,U0r,$Te,J0r,Y0r,kc,K0r,kTe,Z0r,eyr,iJ,oyr,ryr,tyr,yC,ayr,Dr,sx,nyr,STe,syr,lyr,hn,iyr,RTe,dyr,cyr,BTe,fyr,myr,PTe,gyr,hyr,pyr,ke,LC,ITe,uyr,_yr,dJ,byr,vyr,Fyr,xC,qTe,Tyr,Myr,cJ,Eyr,Cyr,wyr,$C,NTe,Ayr,yyr,fJ,Lyr,xyr,$yr,kC,jTe,kyr,Syr,mJ,Ryr,Byr,Pyr,SC,DTe,Iyr,qyr,gJ,Nyr,jyr,Dyr,RC,GTe,Gyr,Oyr,hJ,Vyr,Xyr,zyr,BC,OTe,Qyr,Wyr,pJ,Hyr,Uyr,Jyr,PC,VTe,Yyr,Kyr,uJ,Zyr,eLr,oLr,IC,XTe,rLr,tLr,_J,aLr,nLr,sLr,qC,Bqe,Sc,NC,zTe,lx,lLr,QTe,iLr,Pqe,gr,ix,dLr,Rc,cLr,bJ,fLr,mLr,vJ,gLr,hLr,pLr,dx,uLr,WTe,_Lr,bLr,vLr,Gt,cx,FLr,HTe,TLr,MLr,Bc,ELr,UTe,CLr,wLr,FJ,ALr,yLr,LLr,jC,xLr,Gr,fx,$Lr,JTe,kLr,SLr,pn,RLr,YTe,BLr,PLr,KTe,ILr,qLr,ZTe,NLr,jLr,DLr,Me,DC,e7e,GLr,OLr,TJ,VLr,XLr,zLr,GC,o7e,QLr,WLr,MJ,HLr,ULr,JLr,OC,r7e,YLr,KLr,EJ,ZLr,e8r,o8r,VC,t7e,r8r,t8r,CJ,a8r,n8r,s8r,XC,a7e,l8r,i8r,wJ,d8r,c8r,f8r,zC,n7e,m8r,g8r,AJ,h8r,p8r,u8r,QC,s7e,_8r,b8r,yJ,v8r,F8r,T8r,WC,l7e,M8r,E8r,LJ,C8r,w8r,A8r,HC,i7e,y8r,L8r,xJ,x8r,$8r,k8r,UC,d7e,S8r,R8r,$J,B8r,P8r,I8r,JC,c7e,q8r,N8r,kJ,j8r,D8r,G8r,YC,f7e,O8r,V8r,SJ,X8r,z8r,Q8r,KC,Iqe,Pc,ZC,m7e,mx,W8r,g7e,H8r,qqe,hr,gx,U8r,Ic,J8r,RJ,Y8r,K8r,BJ,Z8r,exr,oxr,hx,rxr,h7e,txr,axr,nxr,Ot,px,sxr,p7e,lxr,ixr,qc,dxr,u7e,cxr,fxr,PJ,mxr,gxr,hxr,e3,pxr,Or,ux,uxr,_7e,_xr,bxr,un,vxr,b7e,Fxr,Txr,v7e,Mxr,Exr,F7e,Cxr,wxr,Axr,Le,o3,T7e,yxr,Lxr,IJ,xxr,$xr,kxr,r3,M7e,Sxr,Rxr,qJ,Bxr,Pxr,Ixr,t3,E7e,qxr,Nxr,NJ,jxr,Dxr,Gxr,a3,C7e,Oxr,Vxr,jJ,Xxr,zxr,Qxr,n3,w7e,Wxr,Hxr,DJ,Uxr,Jxr,Yxr,s3,A7e,Kxr,Zxr,GJ,e9r,o9r,r9r,l3,y7e,t9r,a9r,OJ,n9r,s9r,l9r,i3,L7e,i9r,d9r,VJ,c9r,f9r,m9r,d3,x7e,g9r,h9r,XJ,p9r,u9r,_9r,c3,$7e,b9r,v9r,zJ,F9r,T9r,M9r,f3,Nqe,Nc,m3,k7e,_x,E9r,S7e,C9r,jqe,pr,bx,w9r,jc,A9r,QJ,y9r,L9r,WJ,x9r,$9r,k9r,vx,S9r,R7e,R9r,B9r,P9r,Vt,Fx,I9r,B7e,q9r,N9r,Dc,j9r,P7e,D9r,G9r,HJ,O9r,V9r,X9r,g3,z9r,Vr,Tx,Q9r,I7e,W9r,H9r,_n,U9r,q7e,J9r,Y9r,N7e,K9r,Z9r,j7e,e$r,o$r,r$r,Se,h3,D7e,t$r,a$r,UJ,n$r,s$r,l$r,p3,G7e,i$r,d$r,JJ,c$r,f$r,m$r,u3,O7e,g$r,h$r,YJ,p$r,u$r,_$r,_3,V7e,b$r,v$r,KJ,F$r,T$r,M$r,b3,X7e,E$r,C$r,ZJ,w$r,A$r,y$r,v3,z7e,L$r,x$r,eY,$$r,k$r,S$r,F3,Q7e,R$r,B$r,oY,P$r,I$r,q$r,T3,W7e,N$r,j$r,rY,D$r,G$r,O$r,M3,H7e,V$r,X$r,tY,z$r,Q$r,W$r,E3,Dqe,Gc,C3,U7e,Mx,H$r,J7e,U$r,Gqe,ur,Ex,J$r,Oc,Y$r,aY,K$r,Z$r,nY,ekr,okr,rkr,Cx,tkr,Y7e,akr,nkr,skr,Xt,wx,lkr,K7e,ikr,dkr,Vc,ckr,Z7e,fkr,mkr,sY,gkr,hkr,pkr,w3,ukr,Xr,Ax,_kr,eMe,bkr,vkr,bn,Fkr,oMe,Tkr,Mkr,rMe,Ekr,Ckr,tMe,wkr,Akr,ykr,xe,A3,aMe,Lkr,xkr,lY,$kr,kkr,Skr,y3,nMe,Rkr,Bkr,iY,Pkr,Ikr,qkr,L3,sMe,Nkr,jkr,dY,Dkr,Gkr,Okr,x3,lMe,Vkr,Xkr,cY,zkr,Qkr,Wkr,$3,iMe,Hkr,Ukr,fY,Jkr,Ykr,Kkr,k3,dMe,Zkr,eSr,mY,oSr,rSr,tSr,S3,cMe,aSr,nSr,gY,sSr,lSr,iSr,R3,fMe,dSr,cSr,hY,fSr,mSr,gSr,B3,mMe,hSr,pSr,pY,uSr,_Sr,bSr,P3,gMe,vSr,FSr,uY,TSr,MSr,ESr,I3,Oqe,Xc,q3,hMe,yx,CSr,pMe,wSr,Vqe,_r,Lx,ASr,zc,ySr,_Y,LSr,xSr,bY,$Sr,kSr,SSr,xx,RSr,uMe,BSr,PSr,ISr,zt,$x,qSr,_Me,NSr,jSr,Qc,DSr,bMe,GSr,OSr,vY,VSr,XSr,zSr,N3,QSr,zr,kx,WSr,vMe,HSr,USr,vn,JSr,FMe,YSr,KSr,TMe,ZSr,eRr,MMe,oRr,rRr,tRr,$e,j3,EMe,aRr,nRr,FY,sRr,lRr,iRr,D3,CMe,dRr,cRr,TY,fRr,mRr,gRr,G3,wMe,hRr,pRr,MY,uRr,_Rr,bRr,O3,AMe,vRr,FRr,EY,TRr,MRr,ERr,V3,yMe,CRr,wRr,CY,ARr,yRr,LRr,X3,LMe,xRr,$Rr,wY,kRr,SRr,RRr,z3,xMe,BRr,PRr,AY,IRr,qRr,NRr,Q3,$Me,jRr,DRr,yY,GRr,ORr,VRr,W3,kMe,XRr,zRr,LY,QRr,WRr,HRr,H3,SMe,URr,JRr,xY,YRr,KRr,ZRr,U3,Xqe,Wc,J3,RMe,Sx,eBr,BMe,oBr,zqe,br,Rx,rBr,Hc,tBr,$Y,aBr,nBr,kY,sBr,lBr,iBr,Bx,dBr,PMe,cBr,fBr,mBr,Qt,Px,gBr,IMe,hBr,pBr,Uc,uBr,qMe,_Br,bBr,SY,vBr,FBr,TBr,Y3,MBr,Qr,Ix,EBr,NMe,CBr,wBr,Fn,ABr,jMe,yBr,LBr,DMe,xBr,$Br,GMe,kBr,SBr,RBr,De,K3,OMe,BBr,PBr,RY,IBr,qBr,NBr,Z3,VMe,jBr,DBr,BY,GBr,OBr,VBr,ew,XMe,XBr,zBr,PY,QBr,WBr,HBr,ow,zMe,UBr,JBr,IY,YBr,KBr,ZBr,rw,QMe,ePr,oPr,qY,rPr,tPr,aPr,tw,WMe,nPr,sPr,NY,lPr,iPr,dPr,aw,HMe,cPr,fPr,jY,mPr,gPr,hPr,nw,UMe,pPr,uPr,DY,_Pr,bPr,vPr,sw,Qqe,Jc,lw,JMe,qx,FPr,YMe,TPr,Wqe,vr,Nx,MPr,Yc,EPr,GY,CPr,wPr,OY,APr,yPr,LPr,jx,xPr,KMe,$Pr,kPr,SPr,Wt,Dx,RPr,ZMe,BPr,PPr,Kc,IPr,eEe,qPr,NPr,VY,jPr,DPr,GPr,iw,OPr,Wr,Gx,VPr,oEe,XPr,zPr,Tn,QPr,rEe,WPr,HPr,tEe,UPr,JPr,aEe,YPr,KPr,ZPr,Ge,dw,nEe,eIr,oIr,XY,rIr,tIr,aIr,cw,sEe,nIr,sIr,zY,lIr,iIr,dIr,fw,lEe,cIr,fIr,QY,mIr,gIr,hIr,mw,iEe,pIr,uIr,WY,_Ir,bIr,vIr,gw,dEe,FIr,TIr,HY,MIr,EIr,CIr,hw,cEe,wIr,AIr,UY,yIr,LIr,xIr,pw,fEe,$Ir,kIr,JY,SIr,RIr,BIr,uw,mEe,PIr,IIr,YY,qIr,NIr,jIr,_w,Hqe,Zc,bw,gEe,Ox,DIr,hEe,GIr,Uqe,Fr,Vx,OIr,ef,VIr,KY,XIr,zIr,ZY,QIr,WIr,HIr,Xx,UIr,pEe,JIr,YIr,KIr,Ht,zx,ZIr,uEe,eqr,oqr,of,rqr,_Ee,tqr,aqr,eK,nqr,sqr,lqr,vw,iqr,Hr,Qx,dqr,bEe,cqr,fqr,Mn,mqr,vEe,gqr,hqr,FEe,pqr,uqr,TEe,_qr,bqr,vqr,MEe,Fw,EEe,Fqr,Tqr,oK,Mqr,Eqr,Cqr,Tw,Jqe,rf,Mw,CEe,Wx,wqr,wEe,Aqr,Yqe,Tr,Hx,yqr,tf,Lqr,rK,xqr,$qr,tK,kqr,Sqr,Rqr,Ux,Bqr,AEe,Pqr,Iqr,qqr,Ut,Jx,Nqr,yEe,jqr,Dqr,af,Gqr,LEe,Oqr,Vqr,aK,Xqr,zqr,Qqr,Ew,Wqr,Ur,Yx,Hqr,xEe,Uqr,Jqr,En,Yqr,$Ee,Kqr,Zqr,kEe,eNr,oNr,SEe,rNr,tNr,aNr,Kx,Cw,REe,nNr,sNr,nK,lNr,iNr,dNr,ww,BEe,cNr,fNr,sK,mNr,gNr,hNr,Aw,Kqe,nf,yw,PEe,Zx,pNr,IEe,uNr,Zqe,Mr,e9,_Nr,sf,bNr,lK,vNr,FNr,iK,TNr,MNr,ENr,o9,CNr,qEe,wNr,ANr,yNr,Jt,r9,LNr,NEe,xNr,$Nr,lf,kNr,jEe,SNr,RNr,dK,BNr,PNr,INr,Lw,qNr,Jr,t9,NNr,DEe,jNr,DNr,Cn,GNr,GEe,ONr,VNr,OEe,XNr,zNr,VEe,QNr,WNr,HNr,XEe,xw,zEe,UNr,JNr,cK,YNr,KNr,ZNr,$w,eNe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Z6=new ee({}),e0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new ejr({props:{warning:!0,$$slots:{default:[B0t]},$$scope:{ctx:L}}}),o0=new ee({}),r0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/configuration_auto.py#L573"}}),n0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/configuration_auto.py#L596"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[P0t]},$$scope:{ctx:L}}}),s0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/configuration_auto.py#L718"}}),l0=new ee({}),i0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/tokenization_auto.py#L378"}}),f0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17141/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/tokenization_auto.py#L392"}}),Jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[I0t]},$$scope:{ctx:L}}}),m0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/tokenization_auto.py#L588"}}),g0=new ee({}),h0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),_0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17141/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Ch=new ejr({props:{$$slots:{default:[q0t]},$$scope:{ctx:L}}}),wh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[N0t]},$$scope:{ctx:L}}}),b0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),v0=new ee({}),F0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/processing_auto.py#L77"}}),E0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/processing_auto.py#L91"}}),Vh=new ejr({props:{$$slots:{default:[j0t]},$$scope:{ctx:L}}}),Xh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[D0t]},$$scope:{ctx:L}}}),C0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/processing_auto.py#L244"}}),w0=new ee({}),A0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L722"}}),L0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Wh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[G0t]},$$scope:{ctx:L}}}),x0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Nu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[O0t]},$$scope:{ctx:L}}}),$0=new ee({}),k0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L729"}}),R0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Du=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[V0t]},$$scope:{ctx:L}}}),B0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),L_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[X0t]},$$scope:{ctx:L}}}),P0=new ee({}),I0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L744"}}),N0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),$_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[z0t]},$$scope:{ctx:L}}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Q0t]},$$scope:{ctx:L}}}),D0=new ee({}),G0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L751"}}),V0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),u1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[W0t]},$$scope:{ctx:L}}}),X0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[H0t]},$$scope:{ctx:L}}}),z0=new ee({}),Q0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L758"}}),H0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),ob=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[U0t]},$$scope:{ctx:L}}}),U0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[J0t]},$$scope:{ctx:L}}}),J0=new ee({}),Y0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L767"}}),Z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Y0t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[K0t]},$$scope:{ctx:L}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L801"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Z0t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L808"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),n2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L794"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),l2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),uy=new ee({}),_y=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L776"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L783"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L817"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L856"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L863"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L886"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L870"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L877"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L895"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L902"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L849"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L824"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L831"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_auto.py#L840"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),WE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),A8=new ee({}),y8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),UE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),k8=new ee({}),S8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),B8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),I8=new ee({}),q8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),G8=new ee({}),O8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),Q8=new ee({}),W8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),Y8=new ee({}),K8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),rx=new ee({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),lx=new ee({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),mx=new ee({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),_x=new ee({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),Mx=new ee({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),yx=new ee({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),Sx=new ee({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),qx=new ee({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),Ox=new ee({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),Wx=new ee({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Ew=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),Zx=new ee({}),e9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),r9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17141/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17141/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17141/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),U6=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),J6=o("AutoConfig"),yn=o(", "),Ln=a("a"),Y6=o("AutoModel"),fi=o(`, and
`),xn=a("a"),K6=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),u$=o("will create a model that is an instance of "),gi=a("a"),_$=o("BertModel"),b$=o("."),Eo=l(),Ea=a("p"),v$=o("There is one class of "),pf=a("code"),F$=o("AutoModel"),iDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YPe=l(),hi=a("h2"),uf=a("a"),aee=a("span"),F(Z6.$$.fragment),dDe=l(),nee=a("span"),cDe=o("Extending the Auto Classes"),KPe=l(),$n=a("p"),fDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),see=a("code"),mDe=o("NewModel"),gDe=o(", make sure you have a "),lee=a("code"),hDe=o("NewModelConfig"),pDe=o(` then you can add those to the auto
classes like this:`),ZPe=l(),F(e0.$$.fragment),eIe=l(),T$=a("p"),uDe=o("You will then be able to use the auto classes like you would usually do!"),oIe=l(),F(_f.$$.fragment),rIe=l(),pi=a("h2"),bf=a("a"),iee=a("span"),F(o0.$$.fragment),_De=l(),dee=a("span"),bDe=o("AutoConfig"),tIe=l(),Co=a("div"),F(r0.$$.fragment),vDe=l(),t0=a("p"),FDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),M$=a("a"),TDe=o("from_pretrained()"),MDe=o(" class method."),EDe=l(),a0=a("p"),CDe=o("This class cannot be instantiated directly using "),cee=a("code"),wDe=o("__init__()"),ADe=o(" (throws an error)."),yDe=l(),Er=a("div"),F(n0.$$.fragment),LDe=l(),fee=a("p"),xDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$De=l(),ui=a("p"),kDe=o("The configuration class to instantiate is selected based on the "),mee=a("code"),SDe=o("model_type"),RDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gee=a("code"),BDe=o("pretrained_model_name_or_path"),PDe=o(":"),IDe=l(),A=a("ul"),vf=a("li"),hee=a("strong"),qDe=o("albert"),NDe=o(" \u2014 "),E$=a("a"),jDe=o("AlbertConfig"),DDe=o(" (ALBERT model)"),GDe=l(),Ff=a("li"),pee=a("strong"),ODe=o("bart"),VDe=o(" \u2014 "),C$=a("a"),XDe=o("BartConfig"),zDe=o(" (BART model)"),QDe=l(),Tf=a("li"),uee=a("strong"),WDe=o("beit"),HDe=o(" \u2014 "),w$=a("a"),UDe=o("BeitConfig"),JDe=o(" (BEiT model)"),YDe=l(),Mf=a("li"),_ee=a("strong"),KDe=o("bert"),ZDe=o(" \u2014 "),A$=a("a"),eGe=o("BertConfig"),oGe=o(" (BERT model)"),rGe=l(),Ef=a("li"),bee=a("strong"),tGe=o("bert-generation"),aGe=o(" \u2014 "),y$=a("a"),nGe=o("BertGenerationConfig"),sGe=o(" (Bert Generation model)"),lGe=l(),Cf=a("li"),vee=a("strong"),iGe=o("big_bird"),dGe=o(" \u2014 "),L$=a("a"),cGe=o("BigBirdConfig"),fGe=o(" (BigBird model)"),mGe=l(),wf=a("li"),Fee=a("strong"),gGe=o("bigbird_pegasus"),hGe=o(" \u2014 "),x$=a("a"),pGe=o("BigBirdPegasusConfig"),uGe=o(" (BigBirdPegasus model)"),_Ge=l(),Af=a("li"),Tee=a("strong"),bGe=o("blenderbot"),vGe=o(" \u2014 "),$$=a("a"),FGe=o("BlenderbotConfig"),TGe=o(" (Blenderbot model)"),MGe=l(),yf=a("li"),Mee=a("strong"),EGe=o("blenderbot-small"),CGe=o(" \u2014 "),k$=a("a"),wGe=o("BlenderbotSmallConfig"),AGe=o(" (BlenderbotSmall model)"),yGe=l(),Lf=a("li"),Eee=a("strong"),LGe=o("camembert"),xGe=o(" \u2014 "),S$=a("a"),$Ge=o("CamembertConfig"),kGe=o(" (CamemBERT model)"),SGe=l(),xf=a("li"),Cee=a("strong"),RGe=o("canine"),BGe=o(" \u2014 "),R$=a("a"),PGe=o("CanineConfig"),IGe=o(" (Canine model)"),qGe=l(),$f=a("li"),wee=a("strong"),NGe=o("clip"),jGe=o(" \u2014 "),B$=a("a"),DGe=o("CLIPConfig"),GGe=o(" (CLIP model)"),OGe=l(),kf=a("li"),Aee=a("strong"),VGe=o("convbert"),XGe=o(" \u2014 "),P$=a("a"),zGe=o("ConvBertConfig"),QGe=o(" (ConvBERT model)"),WGe=l(),Sf=a("li"),yee=a("strong"),HGe=o("convnext"),UGe=o(" \u2014 "),I$=a("a"),JGe=o("ConvNextConfig"),YGe=o(" (ConvNext model)"),KGe=l(),Rf=a("li"),Lee=a("strong"),ZGe=o("ctrl"),eOe=o(" \u2014 "),q$=a("a"),oOe=o("CTRLConfig"),rOe=o(" (CTRL model)"),tOe=l(),Bf=a("li"),xee=a("strong"),aOe=o("data2vec-audio"),nOe=o(" \u2014 "),N$=a("a"),sOe=o("Data2VecAudioConfig"),lOe=o(" (Data2VecAudio model)"),iOe=l(),Pf=a("li"),$ee=a("strong"),dOe=o("data2vec-text"),cOe=o(" \u2014 "),j$=a("a"),fOe=o("Data2VecTextConfig"),mOe=o(" (Data2VecText model)"),gOe=l(),If=a("li"),kee=a("strong"),hOe=o("data2vec-vision"),pOe=o(" \u2014 "),D$=a("a"),uOe=o("Data2VecVisionConfig"),_Oe=o(" (Data2VecVision model)"),bOe=l(),qf=a("li"),See=a("strong"),vOe=o("deberta"),FOe=o(" \u2014 "),G$=a("a"),TOe=o("DebertaConfig"),MOe=o(" (DeBERTa model)"),EOe=l(),Nf=a("li"),Ree=a("strong"),COe=o("deberta-v2"),wOe=o(" \u2014 "),O$=a("a"),AOe=o("DebertaV2Config"),yOe=o(" (DeBERTa-v2 model)"),LOe=l(),jf=a("li"),Bee=a("strong"),xOe=o("decision_transformer"),$Oe=o(" \u2014 "),V$=a("a"),kOe=o("DecisionTransformerConfig"),SOe=o(" (Decision Transformer model)"),ROe=l(),Df=a("li"),Pee=a("strong"),BOe=o("deit"),POe=o(" \u2014 "),X$=a("a"),IOe=o("DeiTConfig"),qOe=o(" (DeiT model)"),NOe=l(),Gf=a("li"),Iee=a("strong"),jOe=o("detr"),DOe=o(" \u2014 "),z$=a("a"),GOe=o("DetrConfig"),OOe=o(" (DETR model)"),VOe=l(),Of=a("li"),qee=a("strong"),XOe=o("distilbert"),zOe=o(" \u2014 "),Q$=a("a"),QOe=o("DistilBertConfig"),WOe=o(" (DistilBERT model)"),HOe=l(),Vf=a("li"),Nee=a("strong"),UOe=o("dpr"),JOe=o(" \u2014 "),W$=a("a"),YOe=o("DPRConfig"),KOe=o(" (DPR model)"),ZOe=l(),Xf=a("li"),jee=a("strong"),eVe=o("dpt"),oVe=o(" \u2014 "),H$=a("a"),rVe=o("DPTConfig"),tVe=o(" (DPT model)"),aVe=l(),zf=a("li"),Dee=a("strong"),nVe=o("electra"),sVe=o(" \u2014 "),U$=a("a"),lVe=o("ElectraConfig"),iVe=o(" (ELECTRA model)"),dVe=l(),Qf=a("li"),Gee=a("strong"),cVe=o("encoder-decoder"),fVe=o(" \u2014 "),J$=a("a"),mVe=o("EncoderDecoderConfig"),gVe=o(" (Encoder decoder model)"),hVe=l(),Wf=a("li"),Oee=a("strong"),pVe=o("flaubert"),uVe=o(" \u2014 "),Y$=a("a"),_Ve=o("FlaubertConfig"),bVe=o(" (FlauBERT model)"),vVe=l(),Hf=a("li"),Vee=a("strong"),FVe=o("flava"),TVe=o(" \u2014 "),K$=a("a"),MVe=o("FlavaConfig"),EVe=o(" (Flava model)"),CVe=l(),Uf=a("li"),Xee=a("strong"),wVe=o("fnet"),AVe=o(" \u2014 "),Z$=a("a"),yVe=o("FNetConfig"),LVe=o(" (FNet model)"),xVe=l(),Jf=a("li"),zee=a("strong"),$Ve=o("fsmt"),kVe=o(" \u2014 "),ek=a("a"),SVe=o("FSMTConfig"),RVe=o(" (FairSeq Machine-Translation model)"),BVe=l(),Yf=a("li"),Qee=a("strong"),PVe=o("funnel"),IVe=o(" \u2014 "),ok=a("a"),qVe=o("FunnelConfig"),NVe=o(" (Funnel Transformer model)"),jVe=l(),Kf=a("li"),Wee=a("strong"),DVe=o("glpn"),GVe=o(" \u2014 "),rk=a("a"),OVe=o("GLPNConfig"),VVe=o(" (GLPN model)"),XVe=l(),Zf=a("li"),Hee=a("strong"),zVe=o("gpt2"),QVe=o(" \u2014 "),tk=a("a"),WVe=o("GPT2Config"),HVe=o(" (OpenAI GPT-2 model)"),UVe=l(),em=a("li"),Uee=a("strong"),JVe=o("gpt_neo"),YVe=o(" \u2014 "),ak=a("a"),KVe=o("GPTNeoConfig"),ZVe=o(" (GPT Neo model)"),eXe=l(),om=a("li"),Jee=a("strong"),oXe=o("gptj"),rXe=o(" \u2014 "),nk=a("a"),tXe=o("GPTJConfig"),aXe=o(" (GPT-J model)"),nXe=l(),rm=a("li"),Yee=a("strong"),sXe=o("hubert"),lXe=o(" \u2014 "),sk=a("a"),iXe=o("HubertConfig"),dXe=o(" (Hubert model)"),cXe=l(),tm=a("li"),Kee=a("strong"),fXe=o("ibert"),mXe=o(" \u2014 "),lk=a("a"),gXe=o("IBertConfig"),hXe=o(" (I-BERT model)"),pXe=l(),am=a("li"),Zee=a("strong"),uXe=o("imagegpt"),_Xe=o(" \u2014 "),ik=a("a"),bXe=o("ImageGPTConfig"),vXe=o(" (ImageGPT model)"),FXe=l(),nm=a("li"),eoe=a("strong"),TXe=o("layoutlm"),MXe=o(" \u2014 "),dk=a("a"),EXe=o("LayoutLMConfig"),CXe=o(" (LayoutLM model)"),wXe=l(),sm=a("li"),ooe=a("strong"),AXe=o("layoutlmv2"),yXe=o(" \u2014 "),ck=a("a"),LXe=o("LayoutLMv2Config"),xXe=o(" (LayoutLMv2 model)"),$Xe=l(),lm=a("li"),roe=a("strong"),kXe=o("led"),SXe=o(" \u2014 "),fk=a("a"),RXe=o("LEDConfig"),BXe=o(" (LED model)"),PXe=l(),im=a("li"),toe=a("strong"),IXe=o("longformer"),qXe=o(" \u2014 "),mk=a("a"),NXe=o("LongformerConfig"),jXe=o(" (Longformer model)"),DXe=l(),dm=a("li"),aoe=a("strong"),GXe=o("luke"),OXe=o(" \u2014 "),gk=a("a"),VXe=o("LukeConfig"),XXe=o(" (LUKE model)"),zXe=l(),cm=a("li"),noe=a("strong"),QXe=o("lxmert"),WXe=o(" \u2014 "),hk=a("a"),HXe=o("LxmertConfig"),UXe=o(" (LXMERT model)"),JXe=l(),fm=a("li"),soe=a("strong"),YXe=o("m2m_100"),KXe=o(" \u2014 "),pk=a("a"),ZXe=o("M2M100Config"),eze=o(" (M2M100 model)"),oze=l(),mm=a("li"),loe=a("strong"),rze=o("marian"),tze=o(" \u2014 "),uk=a("a"),aze=o("MarianConfig"),nze=o(" (Marian model)"),sze=l(),gm=a("li"),ioe=a("strong"),lze=o("maskformer"),ize=o(" \u2014 "),_k=a("a"),dze=o("MaskFormerConfig"),cze=o(" (MaskFormer model)"),fze=l(),hm=a("li"),doe=a("strong"),mze=o("mbart"),gze=o(" \u2014 "),bk=a("a"),hze=o("MBartConfig"),pze=o(" (mBART model)"),uze=l(),pm=a("li"),coe=a("strong"),_ze=o("megatron-bert"),bze=o(" \u2014 "),vk=a("a"),vze=o("MegatronBertConfig"),Fze=o(" (MegatronBert model)"),Tze=l(),um=a("li"),foe=a("strong"),Mze=o("mobilebert"),Eze=o(" \u2014 "),Fk=a("a"),Cze=o("MobileBertConfig"),wze=o(" (MobileBERT model)"),Aze=l(),_m=a("li"),moe=a("strong"),yze=o("mpnet"),Lze=o(" \u2014 "),Tk=a("a"),xze=o("MPNetConfig"),$ze=o(" (MPNet model)"),kze=l(),bm=a("li"),goe=a("strong"),Sze=o("mt5"),Rze=o(" \u2014 "),Mk=a("a"),Bze=o("MT5Config"),Pze=o(" (mT5 model)"),Ize=l(),vm=a("li"),hoe=a("strong"),qze=o("nystromformer"),Nze=o(" \u2014 "),Ek=a("a"),jze=o("NystromformerConfig"),Dze=o(" (Nystromformer model)"),Gze=l(),Fm=a("li"),poe=a("strong"),Oze=o("openai-gpt"),Vze=o(" \u2014 "),Ck=a("a"),Xze=o("OpenAIGPTConfig"),zze=o(" (OpenAI GPT model)"),Qze=l(),Tm=a("li"),uoe=a("strong"),Wze=o("opt"),Hze=o(" \u2014 "),wk=a("a"),Uze=o("OPTConfig"),Jze=o(" (OPT model)"),Yze=l(),Mm=a("li"),_oe=a("strong"),Kze=o("pegasus"),Zze=o(" \u2014 "),Ak=a("a"),eQe=o("PegasusConfig"),oQe=o(" (Pegasus model)"),rQe=l(),Em=a("li"),boe=a("strong"),tQe=o("perceiver"),aQe=o(" \u2014 "),yk=a("a"),nQe=o("PerceiverConfig"),sQe=o(" (Perceiver model)"),lQe=l(),Cm=a("li"),voe=a("strong"),iQe=o("plbart"),dQe=o(" \u2014 "),Lk=a("a"),cQe=o("PLBartConfig"),fQe=o(" (PLBart model)"),mQe=l(),wm=a("li"),Foe=a("strong"),gQe=o("poolformer"),hQe=o(" \u2014 "),xk=a("a"),pQe=o("PoolFormerConfig"),uQe=o(" (PoolFormer model)"),_Qe=l(),Am=a("li"),Toe=a("strong"),bQe=o("prophetnet"),vQe=o(" \u2014 "),$k=a("a"),FQe=o("ProphetNetConfig"),TQe=o(" (ProphetNet model)"),MQe=l(),ym=a("li"),Moe=a("strong"),EQe=o("qdqbert"),CQe=o(" \u2014 "),kk=a("a"),wQe=o("QDQBertConfig"),AQe=o(" (QDQBert model)"),yQe=l(),Lm=a("li"),Eoe=a("strong"),LQe=o("rag"),xQe=o(" \u2014 "),Sk=a("a"),$Qe=o("RagConfig"),kQe=o(" (RAG model)"),SQe=l(),xm=a("li"),Coe=a("strong"),RQe=o("realm"),BQe=o(" \u2014 "),Rk=a("a"),PQe=o("RealmConfig"),IQe=o(" (Realm model)"),qQe=l(),$m=a("li"),woe=a("strong"),NQe=o("reformer"),jQe=o(" \u2014 "),Bk=a("a"),DQe=o("ReformerConfig"),GQe=o(" (Reformer model)"),OQe=l(),km=a("li"),Aoe=a("strong"),VQe=o("regnet"),XQe=o(" \u2014 "),Pk=a("a"),zQe=o("RegNetConfig"),QQe=o(" (RegNet model)"),WQe=l(),Sm=a("li"),yoe=a("strong"),HQe=o("rembert"),UQe=o(" \u2014 "),Ik=a("a"),JQe=o("RemBertConfig"),YQe=o(" (RemBERT model)"),KQe=l(),Rm=a("li"),Loe=a("strong"),ZQe=o("resnet"),eWe=o(" \u2014 "),qk=a("a"),oWe=o("ResNetConfig"),rWe=o(" (ResNet model)"),tWe=l(),Bm=a("li"),xoe=a("strong"),aWe=o("retribert"),nWe=o(" \u2014 "),Nk=a("a"),sWe=o("RetriBertConfig"),lWe=o(" (RetriBERT model)"),iWe=l(),Pm=a("li"),$oe=a("strong"),dWe=o("roberta"),cWe=o(" \u2014 "),jk=a("a"),fWe=o("RobertaConfig"),mWe=o(" (RoBERTa model)"),gWe=l(),Im=a("li"),koe=a("strong"),hWe=o("roformer"),pWe=o(" \u2014 "),Dk=a("a"),uWe=o("RoFormerConfig"),_We=o(" (RoFormer model)"),bWe=l(),qm=a("li"),Soe=a("strong"),vWe=o("segformer"),FWe=o(" \u2014 "),Gk=a("a"),TWe=o("SegformerConfig"),MWe=o(" (SegFormer model)"),EWe=l(),Nm=a("li"),Roe=a("strong"),CWe=o("sew"),wWe=o(" \u2014 "),Ok=a("a"),AWe=o("SEWConfig"),yWe=o(" (SEW model)"),LWe=l(),jm=a("li"),Boe=a("strong"),xWe=o("sew-d"),$We=o(" \u2014 "),Vk=a("a"),kWe=o("SEWDConfig"),SWe=o(" (SEW-D model)"),RWe=l(),Dm=a("li"),Poe=a("strong"),BWe=o("speech-encoder-decoder"),PWe=o(" \u2014 "),Xk=a("a"),IWe=o("SpeechEncoderDecoderConfig"),qWe=o(" (Speech Encoder decoder model)"),NWe=l(),Gm=a("li"),Ioe=a("strong"),jWe=o("speech_to_text"),DWe=o(" \u2014 "),zk=a("a"),GWe=o("Speech2TextConfig"),OWe=o(" (Speech2Text model)"),VWe=l(),Om=a("li"),qoe=a("strong"),XWe=o("speech_to_text_2"),zWe=o(" \u2014 "),Qk=a("a"),QWe=o("Speech2Text2Config"),WWe=o(" (Speech2Text2 model)"),HWe=l(),Vm=a("li"),Noe=a("strong"),UWe=o("splinter"),JWe=o(" \u2014 "),Wk=a("a"),YWe=o("SplinterConfig"),KWe=o(" (Splinter model)"),ZWe=l(),Xm=a("li"),joe=a("strong"),eHe=o("squeezebert"),oHe=o(" \u2014 "),Hk=a("a"),rHe=o("SqueezeBertConfig"),tHe=o(" (SqueezeBERT model)"),aHe=l(),zm=a("li"),Doe=a("strong"),nHe=o("swin"),sHe=o(" \u2014 "),Uk=a("a"),lHe=o("SwinConfig"),iHe=o(" (Swin model)"),dHe=l(),Qm=a("li"),Goe=a("strong"),cHe=o("t5"),fHe=o(" \u2014 "),Jk=a("a"),mHe=o("T5Config"),gHe=o(" (T5 model)"),hHe=l(),Wm=a("li"),Ooe=a("strong"),pHe=o("tapas"),uHe=o(" \u2014 "),Yk=a("a"),_He=o("TapasConfig"),bHe=o(" (TAPAS model)"),vHe=l(),Hm=a("li"),Voe=a("strong"),FHe=o("tapex"),THe=o(" \u2014 "),Kk=a("a"),MHe=o("BartConfig"),EHe=o(" (TAPEX model)"),CHe=l(),Um=a("li"),Xoe=a("strong"),wHe=o("trajectory_transformer"),AHe=o(" \u2014 "),Zk=a("a"),yHe=o("TrajectoryTransformerConfig"),LHe=o(" (Trajectory Transformer model)"),xHe=l(),Jm=a("li"),zoe=a("strong"),$He=o("transfo-xl"),kHe=o(" \u2014 "),eS=a("a"),SHe=o("TransfoXLConfig"),RHe=o(" (Transformer-XL model)"),BHe=l(),Ym=a("li"),Qoe=a("strong"),PHe=o("trocr"),IHe=o(" \u2014 "),oS=a("a"),qHe=o("TrOCRConfig"),NHe=o(" (TrOCR model)"),jHe=l(),Km=a("li"),Woe=a("strong"),DHe=o("unispeech"),GHe=o(" \u2014 "),rS=a("a"),OHe=o("UniSpeechConfig"),VHe=o(" (UniSpeech model)"),XHe=l(),Zm=a("li"),Hoe=a("strong"),zHe=o("unispeech-sat"),QHe=o(" \u2014 "),tS=a("a"),WHe=o("UniSpeechSatConfig"),HHe=o(" (UniSpeechSat model)"),UHe=l(),eg=a("li"),Uoe=a("strong"),JHe=o("van"),YHe=o(" \u2014 "),aS=a("a"),KHe=o("VanConfig"),ZHe=o(" (VAN model)"),eUe=l(),og=a("li"),Joe=a("strong"),oUe=o("vilt"),rUe=o(" \u2014 "),nS=a("a"),tUe=o("ViltConfig"),aUe=o(" (ViLT model)"),nUe=l(),rg=a("li"),Yoe=a("strong"),sUe=o("vision-encoder-decoder"),lUe=o(" \u2014 "),sS=a("a"),iUe=o("VisionEncoderDecoderConfig"),dUe=o(" (Vision Encoder decoder model)"),cUe=l(),tg=a("li"),Koe=a("strong"),fUe=o("vision-text-dual-encoder"),mUe=o(" \u2014 "),lS=a("a"),gUe=o("VisionTextDualEncoderConfig"),hUe=o(" (VisionTextDualEncoder model)"),pUe=l(),ag=a("li"),Zoe=a("strong"),uUe=o("visual_bert"),_Ue=o(" \u2014 "),iS=a("a"),bUe=o("VisualBertConfig"),vUe=o(" (VisualBert model)"),FUe=l(),ng=a("li"),ere=a("strong"),TUe=o("vit"),MUe=o(" \u2014 "),dS=a("a"),EUe=o("ViTConfig"),CUe=o(" (ViT model)"),wUe=l(),sg=a("li"),ore=a("strong"),AUe=o("vit_mae"),yUe=o(" \u2014 "),cS=a("a"),LUe=o("ViTMAEConfig"),xUe=o(" (ViTMAE model)"),$Ue=l(),lg=a("li"),rre=a("strong"),kUe=o("wav2vec2"),SUe=o(" \u2014 "),fS=a("a"),RUe=o("Wav2Vec2Config"),BUe=o(" (Wav2Vec2 model)"),PUe=l(),ig=a("li"),tre=a("strong"),IUe=o("wavlm"),qUe=o(" \u2014 "),mS=a("a"),NUe=o("WavLMConfig"),jUe=o(" (WavLM model)"),DUe=l(),dg=a("li"),are=a("strong"),GUe=o("xglm"),OUe=o(" \u2014 "),gS=a("a"),VUe=o("XGLMConfig"),XUe=o(" (XGLM model)"),zUe=l(),cg=a("li"),nre=a("strong"),QUe=o("xlm"),WUe=o(" \u2014 "),hS=a("a"),HUe=o("XLMConfig"),UUe=o(" (XLM model)"),JUe=l(),fg=a("li"),sre=a("strong"),YUe=o("xlm-prophetnet"),KUe=o(" \u2014 "),pS=a("a"),ZUe=o("XLMProphetNetConfig"),eJe=o(" (XLMProphetNet model)"),oJe=l(),mg=a("li"),lre=a("strong"),rJe=o("xlm-roberta"),tJe=o(" \u2014 "),uS=a("a"),aJe=o("XLMRobertaConfig"),nJe=o(" (XLM-RoBERTa model)"),sJe=l(),gg=a("li"),ire=a("strong"),lJe=o("xlm-roberta-xl"),iJe=o(" \u2014 "),_S=a("a"),dJe=o("XLMRobertaXLConfig"),cJe=o(" (XLM-RoBERTa-XL model)"),fJe=l(),hg=a("li"),dre=a("strong"),mJe=o("xlnet"),gJe=o(" \u2014 "),bS=a("a"),hJe=o("XLNetConfig"),pJe=o(" (XLNet model)"),uJe=l(),pg=a("li"),cre=a("strong"),_Je=o("yolos"),bJe=o(" \u2014 "),vS=a("a"),vJe=o("YolosConfig"),FJe=o(" (YOLOS model)"),TJe=l(),ug=a("li"),fre=a("strong"),MJe=o("yoso"),EJe=o(" \u2014 "),FS=a("a"),CJe=o("YosoConfig"),wJe=o(" (YOSO model)"),AJe=l(),F(_g.$$.fragment),yJe=l(),bg=a("div"),F(s0.$$.fragment),LJe=l(),mre=a("p"),xJe=o("Register a new configuration for this class."),aIe=l(),_i=a("h2"),vg=a("a"),gre=a("span"),F(l0.$$.fragment),$Je=l(),hre=a("span"),kJe=o("AutoTokenizer"),nIe=l(),wo=a("div"),F(i0.$$.fragment),SJe=l(),d0=a("p"),RJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TS=a("a"),BJe=o("AutoTokenizer.from_pretrained()"),PJe=o(" class method."),IJe=l(),c0=a("p"),qJe=o("This class cannot be instantiated directly using "),pre=a("code"),NJe=o("__init__()"),jJe=o(" (throws an error)."),DJe=l(),Cr=a("div"),F(f0.$$.fragment),GJe=l(),ure=a("p"),OJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),VJe=l(),Ca=a("p"),XJe=o("The tokenizer class to instantiate is selected based on the "),_re=a("code"),zJe=o("model_type"),QJe=o(` property of the config object (either
passed as an argument or loaded from `),bre=a("code"),WJe=o("pretrained_model_name_or_path"),HJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vre=a("code"),UJe=o("pretrained_model_name_or_path"),JJe=o(":"),YJe=l(),k=a("ul"),kn=a("li"),Fre=a("strong"),KJe=o("albert"),ZJe=o(" \u2014 "),MS=a("a"),eYe=o("AlbertTokenizer"),oYe=o(" or "),ES=a("a"),rYe=o("AlbertTokenizerFast"),tYe=o(" (ALBERT model)"),aYe=l(),Sn=a("li"),Tre=a("strong"),nYe=o("bart"),sYe=o(" \u2014 "),CS=a("a"),lYe=o("BartTokenizer"),iYe=o(" or "),wS=a("a"),dYe=o("BartTokenizerFast"),cYe=o(" (BART model)"),fYe=l(),Rn=a("li"),Mre=a("strong"),mYe=o("barthez"),gYe=o(" \u2014 "),AS=a("a"),hYe=o("BarthezTokenizer"),pYe=o(" or "),yS=a("a"),uYe=o("BarthezTokenizerFast"),_Ye=o(" (BARThez model)"),bYe=l(),Fg=a("li"),Ere=a("strong"),vYe=o("bartpho"),FYe=o(" \u2014 "),LS=a("a"),TYe=o("BartphoTokenizer"),MYe=o(" (BARTpho model)"),EYe=l(),Bn=a("li"),Cre=a("strong"),CYe=o("bert"),wYe=o(" \u2014 "),xS=a("a"),AYe=o("BertTokenizer"),yYe=o(" or "),$S=a("a"),LYe=o("BertTokenizerFast"),xYe=o(" (BERT model)"),$Ye=l(),Tg=a("li"),wre=a("strong"),kYe=o("bert-generation"),SYe=o(" \u2014 "),kS=a("a"),RYe=o("BertGenerationTokenizer"),BYe=o(" (Bert Generation model)"),PYe=l(),Mg=a("li"),Are=a("strong"),IYe=o("bert-japanese"),qYe=o(" \u2014 "),SS=a("a"),NYe=o("BertJapaneseTokenizer"),jYe=o(" (BertJapanese model)"),DYe=l(),Eg=a("li"),yre=a("strong"),GYe=o("bertweet"),OYe=o(" \u2014 "),RS=a("a"),VYe=o("BertweetTokenizer"),XYe=o(" (Bertweet model)"),zYe=l(),Pn=a("li"),Lre=a("strong"),QYe=o("big_bird"),WYe=o(" \u2014 "),BS=a("a"),HYe=o("BigBirdTokenizer"),UYe=o(" or "),PS=a("a"),JYe=o("BigBirdTokenizerFast"),YYe=o(" (BigBird model)"),KYe=l(),In=a("li"),xre=a("strong"),ZYe=o("bigbird_pegasus"),eKe=o(" \u2014 "),IS=a("a"),oKe=o("PegasusTokenizer"),rKe=o(" or "),qS=a("a"),tKe=o("PegasusTokenizerFast"),aKe=o(" (BigBirdPegasus model)"),nKe=l(),qn=a("li"),$re=a("strong"),sKe=o("blenderbot"),lKe=o(" \u2014 "),NS=a("a"),iKe=o("BlenderbotTokenizer"),dKe=o(" or "),jS=a("a"),cKe=o("BlenderbotTokenizerFast"),fKe=o(" (Blenderbot model)"),mKe=l(),Cg=a("li"),kre=a("strong"),gKe=o("blenderbot-small"),hKe=o(" \u2014 "),DS=a("a"),pKe=o("BlenderbotSmallTokenizer"),uKe=o(" (BlenderbotSmall model)"),_Ke=l(),wg=a("li"),Sre=a("strong"),bKe=o("byt5"),vKe=o(" \u2014 "),GS=a("a"),FKe=o("ByT5Tokenizer"),TKe=o(" (ByT5 model)"),MKe=l(),Nn=a("li"),Rre=a("strong"),EKe=o("camembert"),CKe=o(" \u2014 "),OS=a("a"),wKe=o("CamembertTokenizer"),AKe=o(" or "),VS=a("a"),yKe=o("CamembertTokenizerFast"),LKe=o(" (CamemBERT model)"),xKe=l(),Ag=a("li"),Bre=a("strong"),$Ke=o("canine"),kKe=o(" \u2014 "),XS=a("a"),SKe=o("CanineTokenizer"),RKe=o(" (Canine model)"),BKe=l(),jn=a("li"),Pre=a("strong"),PKe=o("clip"),IKe=o(" \u2014 "),zS=a("a"),qKe=o("CLIPTokenizer"),NKe=o(" or "),QS=a("a"),jKe=o("CLIPTokenizerFast"),DKe=o(" (CLIP model)"),GKe=l(),Dn=a("li"),Ire=a("strong"),OKe=o("convbert"),VKe=o(" \u2014 "),WS=a("a"),XKe=o("ConvBertTokenizer"),zKe=o(" or "),HS=a("a"),QKe=o("ConvBertTokenizerFast"),WKe=o(" (ConvBERT model)"),HKe=l(),Gn=a("li"),qre=a("strong"),UKe=o("cpm"),JKe=o(" \u2014 "),US=a("a"),YKe=o("CpmTokenizer"),KKe=o(" or "),JS=a("a"),ZKe=o("CpmTokenizerFast"),eZe=o(" (CPM model)"),oZe=l(),yg=a("li"),Nre=a("strong"),rZe=o("ctrl"),tZe=o(" \u2014 "),YS=a("a"),aZe=o("CTRLTokenizer"),nZe=o(" (CTRL model)"),sZe=l(),On=a("li"),jre=a("strong"),lZe=o("data2vec-text"),iZe=o(" \u2014 "),KS=a("a"),dZe=o("RobertaTokenizer"),cZe=o(" or "),ZS=a("a"),fZe=o("RobertaTokenizerFast"),mZe=o(" (Data2VecText model)"),gZe=l(),Vn=a("li"),Dre=a("strong"),hZe=o("deberta"),pZe=o(" \u2014 "),eR=a("a"),uZe=o("DebertaTokenizer"),_Ze=o(" or "),oR=a("a"),bZe=o("DebertaTokenizerFast"),vZe=o(" (DeBERTa model)"),FZe=l(),Xn=a("li"),Gre=a("strong"),TZe=o("deberta-v2"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("DebertaV2Tokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("DebertaV2TokenizerFast"),AZe=o(" (DeBERTa-v2 model)"),yZe=l(),zn=a("li"),Ore=a("strong"),LZe=o("distilbert"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("DistilBertTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("DistilBertTokenizerFast"),RZe=o(" (DistilBERT model)"),BZe=l(),Qn=a("li"),Vre=a("strong"),PZe=o("dpr"),IZe=o(" \u2014 "),sR=a("a"),qZe=o("DPRQuestionEncoderTokenizer"),NZe=o(" or "),lR=a("a"),jZe=o("DPRQuestionEncoderTokenizerFast"),DZe=o(" (DPR model)"),GZe=l(),Wn=a("li"),Xre=a("strong"),OZe=o("electra"),VZe=o(" \u2014 "),iR=a("a"),XZe=o("ElectraTokenizer"),zZe=o(" or "),dR=a("a"),QZe=o("ElectraTokenizerFast"),WZe=o(" (ELECTRA model)"),HZe=l(),Lg=a("li"),zre=a("strong"),UZe=o("flaubert"),JZe=o(" \u2014 "),cR=a("a"),YZe=o("FlaubertTokenizer"),KZe=o(" (FlauBERT model)"),ZZe=l(),Hn=a("li"),Qre=a("strong"),eeo=o("fnet"),oeo=o(" \u2014 "),fR=a("a"),reo=o("FNetTokenizer"),teo=o(" or "),mR=a("a"),aeo=o("FNetTokenizerFast"),neo=o(" (FNet model)"),seo=l(),xg=a("li"),Wre=a("strong"),leo=o("fsmt"),ieo=o(" \u2014 "),gR=a("a"),deo=o("FSMTTokenizer"),ceo=o(" (FairSeq Machine-Translation model)"),feo=l(),Un=a("li"),Hre=a("strong"),meo=o("funnel"),geo=o(" \u2014 "),hR=a("a"),heo=o("FunnelTokenizer"),peo=o(" or "),pR=a("a"),ueo=o("FunnelTokenizerFast"),_eo=o(" (Funnel Transformer model)"),beo=l(),Jn=a("li"),Ure=a("strong"),veo=o("gpt2"),Feo=o(" \u2014 "),uR=a("a"),Teo=o("GPT2Tokenizer"),Meo=o(" or "),_R=a("a"),Eeo=o("GPT2TokenizerFast"),Ceo=o(" (OpenAI GPT-2 model)"),weo=l(),Yn=a("li"),Jre=a("strong"),Aeo=o("gpt_neo"),yeo=o(" \u2014 "),bR=a("a"),Leo=o("GPT2Tokenizer"),xeo=o(" or "),vR=a("a"),$eo=o("GPT2TokenizerFast"),keo=o(" (GPT Neo model)"),Seo=l(),Kn=a("li"),Yre=a("strong"),Reo=o("gptj"),Beo=o(" \u2014 "),FR=a("a"),Peo=o("GPT2Tokenizer"),Ieo=o(" or "),TR=a("a"),qeo=o("GPT2TokenizerFast"),Neo=o(" (GPT-J model)"),jeo=l(),Zn=a("li"),Kre=a("strong"),Deo=o("herbert"),Geo=o(" \u2014 "),MR=a("a"),Oeo=o("HerbertTokenizer"),Veo=o(" or "),ER=a("a"),Xeo=o("HerbertTokenizerFast"),zeo=o(" (HerBERT model)"),Qeo=l(),$g=a("li"),Zre=a("strong"),Weo=o("hubert"),Heo=o(" \u2014 "),CR=a("a"),Ueo=o("Wav2Vec2CTCTokenizer"),Jeo=o(" (Hubert model)"),Yeo=l(),es=a("li"),ete=a("strong"),Keo=o("ibert"),Zeo=o(" \u2014 "),wR=a("a"),eoo=o("RobertaTokenizer"),ooo=o(" or "),AR=a("a"),roo=o("RobertaTokenizerFast"),too=o(" (I-BERT model)"),aoo=l(),os=a("li"),ote=a("strong"),noo=o("layoutlm"),soo=o(" \u2014 "),yR=a("a"),loo=o("LayoutLMTokenizer"),ioo=o(" or "),LR=a("a"),doo=o("LayoutLMTokenizerFast"),coo=o(" (LayoutLM model)"),foo=l(),rs=a("li"),rte=a("strong"),moo=o("layoutlmv2"),goo=o(" \u2014 "),xR=a("a"),hoo=o("LayoutLMv2Tokenizer"),poo=o(" or "),$R=a("a"),uoo=o("LayoutLMv2TokenizerFast"),_oo=o(" (LayoutLMv2 model)"),boo=l(),ts=a("li"),tte=a("strong"),voo=o("layoutxlm"),Foo=o(" \u2014 "),kR=a("a"),Too=o("LayoutXLMTokenizer"),Moo=o(" or "),SR=a("a"),Eoo=o("LayoutXLMTokenizerFast"),Coo=o(" (LayoutXLM model)"),woo=l(),as=a("li"),ate=a("strong"),Aoo=o("led"),yoo=o(" \u2014 "),RR=a("a"),Loo=o("LEDTokenizer"),xoo=o(" or "),BR=a("a"),$oo=o("LEDTokenizerFast"),koo=o(" (LED model)"),Soo=l(),ns=a("li"),nte=a("strong"),Roo=o("longformer"),Boo=o(" \u2014 "),PR=a("a"),Poo=o("LongformerTokenizer"),Ioo=o(" or "),IR=a("a"),qoo=o("LongformerTokenizerFast"),Noo=o(" (Longformer model)"),joo=l(),kg=a("li"),ste=a("strong"),Doo=o("luke"),Goo=o(" \u2014 "),qR=a("a"),Ooo=o("LukeTokenizer"),Voo=o(" (LUKE model)"),Xoo=l(),ss=a("li"),lte=a("strong"),zoo=o("lxmert"),Qoo=o(" \u2014 "),NR=a("a"),Woo=o("LxmertTokenizer"),Hoo=o(" or "),jR=a("a"),Uoo=o("LxmertTokenizerFast"),Joo=o(" (LXMERT model)"),Yoo=l(),Sg=a("li"),ite=a("strong"),Koo=o("m2m_100"),Zoo=o(" \u2014 "),DR=a("a"),ero=o("M2M100Tokenizer"),oro=o(" (M2M100 model)"),rro=l(),Rg=a("li"),dte=a("strong"),tro=o("marian"),aro=o(" \u2014 "),GR=a("a"),nro=o("MarianTokenizer"),sro=o(" (Marian model)"),lro=l(),ls=a("li"),cte=a("strong"),iro=o("mbart"),dro=o(" \u2014 "),OR=a("a"),cro=o("MBartTokenizer"),fro=o(" or "),VR=a("a"),mro=o("MBartTokenizerFast"),gro=o(" (mBART model)"),hro=l(),is=a("li"),fte=a("strong"),pro=o("mbart50"),uro=o(" \u2014 "),XR=a("a"),_ro=o("MBart50Tokenizer"),bro=o(" or "),zR=a("a"),vro=o("MBart50TokenizerFast"),Fro=o(" (mBART-50 model)"),Tro=l(),ds=a("li"),mte=a("strong"),Mro=o("megatron-bert"),Ero=o(" \u2014 "),QR=a("a"),Cro=o("BertTokenizer"),wro=o(" or "),WR=a("a"),Aro=o("BertTokenizerFast"),yro=o(" (MegatronBert model)"),Lro=l(),Bg=a("li"),gte=a("strong"),xro=o("mluke"),$ro=o(" \u2014 "),HR=a("a"),kro=o("MLukeTokenizer"),Sro=o(" (mLUKE model)"),Rro=l(),cs=a("li"),hte=a("strong"),Bro=o("mobilebert"),Pro=o(" \u2014 "),UR=a("a"),Iro=o("MobileBertTokenizer"),qro=o(" or "),JR=a("a"),Nro=o("MobileBertTokenizerFast"),jro=o(" (MobileBERT model)"),Dro=l(),fs=a("li"),pte=a("strong"),Gro=o("mpnet"),Oro=o(" \u2014 "),YR=a("a"),Vro=o("MPNetTokenizer"),Xro=o(" or "),KR=a("a"),zro=o("MPNetTokenizerFast"),Qro=o(" (MPNet model)"),Wro=l(),ms=a("li"),ute=a("strong"),Hro=o("mt5"),Uro=o(" \u2014 "),ZR=a("a"),Jro=o("MT5Tokenizer"),Yro=o(" or "),eB=a("a"),Kro=o("MT5TokenizerFast"),Zro=o(" (mT5 model)"),eto=l(),gs=a("li"),_te=a("strong"),oto=o("nystromformer"),rto=o(" \u2014 "),oB=a("a"),tto=o("AlbertTokenizer"),ato=o(" or "),rB=a("a"),nto=o("AlbertTokenizerFast"),sto=o(" (Nystromformer model)"),lto=l(),hs=a("li"),bte=a("strong"),ito=o("openai-gpt"),dto=o(" \u2014 "),tB=a("a"),cto=o("OpenAIGPTTokenizer"),fto=o(" or "),aB=a("a"),mto=o("OpenAIGPTTokenizerFast"),gto=o(" (OpenAI GPT model)"),hto=l(),Pg=a("li"),vte=a("strong"),pto=o("opt"),uto=o(" \u2014 "),nB=a("a"),_to=o("GPT2Tokenizer"),bto=o(" (OPT model)"),vto=l(),ps=a("li"),Fte=a("strong"),Fto=o("pegasus"),Tto=o(" \u2014 "),sB=a("a"),Mto=o("PegasusTokenizer"),Eto=o(" or "),lB=a("a"),Cto=o("PegasusTokenizerFast"),wto=o(" (Pegasus model)"),Ato=l(),Ig=a("li"),Tte=a("strong"),yto=o("perceiver"),Lto=o(" \u2014 "),iB=a("a"),xto=o("PerceiverTokenizer"),$to=o(" (Perceiver model)"),kto=l(),qg=a("li"),Mte=a("strong"),Sto=o("phobert"),Rto=o(" \u2014 "),dB=a("a"),Bto=o("PhobertTokenizer"),Pto=o(" (PhoBERT model)"),Ito=l(),Ng=a("li"),Ete=a("strong"),qto=o("plbart"),Nto=o(" \u2014 "),cB=a("a"),jto=o("PLBartTokenizer"),Dto=o(" (PLBart model)"),Gto=l(),jg=a("li"),Cte=a("strong"),Oto=o("prophetnet"),Vto=o(" \u2014 "),fB=a("a"),Xto=o("ProphetNetTokenizer"),zto=o(" (ProphetNet model)"),Qto=l(),us=a("li"),wte=a("strong"),Wto=o("qdqbert"),Hto=o(" \u2014 "),mB=a("a"),Uto=o("BertTokenizer"),Jto=o(" or "),gB=a("a"),Yto=o("BertTokenizerFast"),Kto=o(" (QDQBert model)"),Zto=l(),Dg=a("li"),Ate=a("strong"),eao=o("rag"),oao=o(" \u2014 "),hB=a("a"),rao=o("RagTokenizer"),tao=o(" (RAG model)"),aao=l(),_s=a("li"),yte=a("strong"),nao=o("realm"),sao=o(" \u2014 "),pB=a("a"),lao=o("RealmTokenizer"),iao=o(" or "),uB=a("a"),dao=o("RealmTokenizerFast"),cao=o(" (Realm model)"),fao=l(),bs=a("li"),Lte=a("strong"),mao=o("reformer"),gao=o(" \u2014 "),_B=a("a"),hao=o("ReformerTokenizer"),pao=o(" or "),bB=a("a"),uao=o("ReformerTokenizerFast"),_ao=o(" (Reformer model)"),bao=l(),vs=a("li"),xte=a("strong"),vao=o("rembert"),Fao=o(" \u2014 "),vB=a("a"),Tao=o("RemBertTokenizer"),Mao=o(" or "),FB=a("a"),Eao=o("RemBertTokenizerFast"),Cao=o(" (RemBERT model)"),wao=l(),Fs=a("li"),$te=a("strong"),Aao=o("retribert"),yao=o(" \u2014 "),TB=a("a"),Lao=o("RetriBertTokenizer"),xao=o(" or "),MB=a("a"),$ao=o("RetriBertTokenizerFast"),kao=o(" (RetriBERT model)"),Sao=l(),Ts=a("li"),kte=a("strong"),Rao=o("roberta"),Bao=o(" \u2014 "),EB=a("a"),Pao=o("RobertaTokenizer"),Iao=o(" or "),CB=a("a"),qao=o("RobertaTokenizerFast"),Nao=o(" (RoBERTa model)"),jao=l(),Ms=a("li"),Ste=a("strong"),Dao=o("roformer"),Gao=o(" \u2014 "),wB=a("a"),Oao=o("RoFormerTokenizer"),Vao=o(" or "),AB=a("a"),Xao=o("RoFormerTokenizerFast"),zao=o(" (RoFormer model)"),Qao=l(),Gg=a("li"),Rte=a("strong"),Wao=o("speech_to_text"),Hao=o(" \u2014 "),yB=a("a"),Uao=o("Speech2TextTokenizer"),Jao=o(" (Speech2Text model)"),Yao=l(),Og=a("li"),Bte=a("strong"),Kao=o("speech_to_text_2"),Zao=o(" \u2014 "),LB=a("a"),eno=o("Speech2Text2Tokenizer"),ono=o(" (Speech2Text2 model)"),rno=l(),Es=a("li"),Pte=a("strong"),tno=o("splinter"),ano=o(" \u2014 "),xB=a("a"),nno=o("SplinterTokenizer"),sno=o(" or "),$B=a("a"),lno=o("SplinterTokenizerFast"),ino=o(" (Splinter model)"),dno=l(),Cs=a("li"),Ite=a("strong"),cno=o("squeezebert"),fno=o(" \u2014 "),kB=a("a"),mno=o("SqueezeBertTokenizer"),gno=o(" or "),SB=a("a"),hno=o("SqueezeBertTokenizerFast"),pno=o(" (SqueezeBERT model)"),uno=l(),ws=a("li"),qte=a("strong"),_no=o("t5"),bno=o(" \u2014 "),RB=a("a"),vno=o("T5Tokenizer"),Fno=o(" or "),BB=a("a"),Tno=o("T5TokenizerFast"),Mno=o(" (T5 model)"),Eno=l(),Vg=a("li"),Nte=a("strong"),Cno=o("tapas"),wno=o(" \u2014 "),PB=a("a"),Ano=o("TapasTokenizer"),yno=o(" (TAPAS model)"),Lno=l(),Xg=a("li"),jte=a("strong"),xno=o("tapex"),$no=o(" \u2014 "),IB=a("a"),kno=o("TapexTokenizer"),Sno=o(" (TAPEX model)"),Rno=l(),zg=a("li"),Dte=a("strong"),Bno=o("transfo-xl"),Pno=o(" \u2014 "),qB=a("a"),Ino=o("TransfoXLTokenizer"),qno=o(" (Transformer-XL model)"),Nno=l(),As=a("li"),Gte=a("strong"),jno=o("visual_bert"),Dno=o(" \u2014 "),NB=a("a"),Gno=o("BertTokenizer"),Ono=o(" or "),jB=a("a"),Vno=o("BertTokenizerFast"),Xno=o(" (VisualBert model)"),zno=l(),Qg=a("li"),Ote=a("strong"),Qno=o("wav2vec2"),Wno=o(" \u2014 "),DB=a("a"),Hno=o("Wav2Vec2CTCTokenizer"),Uno=o(" (Wav2Vec2 model)"),Jno=l(),Wg=a("li"),Vte=a("strong"),Yno=o("wav2vec2_phoneme"),Kno=o(" \u2014 "),GB=a("a"),Zno=o("Wav2Vec2PhonemeCTCTokenizer"),eso=o(" (Wav2Vec2Phoneme model)"),oso=l(),ys=a("li"),Xte=a("strong"),rso=o("xglm"),tso=o(" \u2014 "),OB=a("a"),aso=o("XGLMTokenizer"),nso=o(" or "),VB=a("a"),sso=o("XGLMTokenizerFast"),lso=o(" (XGLM model)"),iso=l(),Hg=a("li"),zte=a("strong"),dso=o("xlm"),cso=o(" \u2014 "),XB=a("a"),fso=o("XLMTokenizer"),mso=o(" (XLM model)"),gso=l(),Ug=a("li"),Qte=a("strong"),hso=o("xlm-prophetnet"),pso=o(" \u2014 "),zB=a("a"),uso=o("XLMProphetNetTokenizer"),_so=o(" (XLMProphetNet model)"),bso=l(),Ls=a("li"),Wte=a("strong"),vso=o("xlm-roberta"),Fso=o(" \u2014 "),QB=a("a"),Tso=o("XLMRobertaTokenizer"),Mso=o(" or "),WB=a("a"),Eso=o("XLMRobertaTokenizerFast"),Cso=o(" (XLM-RoBERTa model)"),wso=l(),xs=a("li"),Hte=a("strong"),Aso=o("xlm-roberta-xl"),yso=o(" \u2014 "),HB=a("a"),Lso=o("RobertaTokenizer"),xso=o(" or "),UB=a("a"),$so=o("RobertaTokenizerFast"),kso=o(" (XLM-RoBERTa-XL model)"),Sso=l(),$s=a("li"),Ute=a("strong"),Rso=o("xlnet"),Bso=o(" \u2014 "),JB=a("a"),Pso=o("XLNetTokenizer"),Iso=o(" or "),YB=a("a"),qso=o("XLNetTokenizerFast"),Nso=o(" (XLNet model)"),jso=l(),ks=a("li"),Jte=a("strong"),Dso=o("yoso"),Gso=o(" \u2014 "),KB=a("a"),Oso=o("AlbertTokenizer"),Vso=o(" or "),ZB=a("a"),Xso=o("AlbertTokenizerFast"),zso=o(" (YOSO model)"),Qso=l(),F(Jg.$$.fragment),Wso=l(),Yg=a("div"),F(m0.$$.fragment),Hso=l(),Yte=a("p"),Uso=o("Register a new tokenizer in this mapping."),sIe=l(),bi=a("h2"),Kg=a("a"),Kte=a("span"),F(g0.$$.fragment),Jso=l(),Zte=a("span"),Yso=o("AutoFeatureExtractor"),lIe=l(),Ao=a("div"),F(h0.$$.fragment),Kso=l(),p0=a("p"),Zso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eP=a("a"),elo=o("AutoFeatureExtractor.from_pretrained()"),olo=o(" class method."),rlo=l(),u0=a("p"),tlo=o("This class cannot be instantiated directly using "),eae=a("code"),alo=o("__init__()"),nlo=o(" (throws an error)."),slo=l(),Qe=a("div"),F(_0.$$.fragment),llo=l(),oae=a("p"),ilo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dlo=l(),wa=a("p"),clo=o("The feature extractor class to instantiate is selected based on the "),rae=a("code"),flo=o("model_type"),mlo=o(` property of the config object
(either passed as an argument or loaded from `),tae=a("code"),glo=o("pretrained_model_name_or_path"),hlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),aae=a("code"),plo=o("pretrained_model_name_or_path"),ulo=o(":"),_lo=l(),oe=a("ul"),Zg=a("li"),nae=a("strong"),blo=o("beit"),vlo=o(" \u2014 "),oP=a("a"),Flo=o("BeitFeatureExtractor"),Tlo=o(" (BEiT model)"),Mlo=l(),eh=a("li"),sae=a("strong"),Elo=o("clip"),Clo=o(" \u2014 "),rP=a("a"),wlo=o("CLIPFeatureExtractor"),Alo=o(" (CLIP model)"),ylo=l(),oh=a("li"),lae=a("strong"),Llo=o("convnext"),xlo=o(" \u2014 "),tP=a("a"),$lo=o("ConvNextFeatureExtractor"),klo=o(" (ConvNext model)"),Slo=l(),rh=a("li"),iae=a("strong"),Rlo=o("data2vec-audio"),Blo=o(" \u2014 "),aP=a("a"),Plo=o("Wav2Vec2FeatureExtractor"),Ilo=o(" (Data2VecAudio model)"),qlo=l(),th=a("li"),dae=a("strong"),Nlo=o("data2vec-vision"),jlo=o(" \u2014 "),nP=a("a"),Dlo=o("BeitFeatureExtractor"),Glo=o(" (Data2VecVision model)"),Olo=l(),ah=a("li"),cae=a("strong"),Vlo=o("deit"),Xlo=o(" \u2014 "),sP=a("a"),zlo=o("DeiTFeatureExtractor"),Qlo=o(" (DeiT model)"),Wlo=l(),nh=a("li"),fae=a("strong"),Hlo=o("detr"),Ulo=o(" \u2014 "),lP=a("a"),Jlo=o("DetrFeatureExtractor"),Ylo=o(" (DETR model)"),Klo=l(),sh=a("li"),mae=a("strong"),Zlo=o("dpt"),eio=o(" \u2014 "),iP=a("a"),oio=o("DPTFeatureExtractor"),rio=o(" (DPT model)"),tio=l(),lh=a("li"),gae=a("strong"),aio=o("flava"),nio=o(" \u2014 "),dP=a("a"),sio=o("FlavaFeatureExtractor"),lio=o(" (Flava model)"),iio=l(),ih=a("li"),hae=a("strong"),dio=o("glpn"),cio=o(" \u2014 "),cP=a("a"),fio=o("GLPNFeatureExtractor"),mio=o(" (GLPN model)"),gio=l(),dh=a("li"),pae=a("strong"),hio=o("hubert"),pio=o(" \u2014 "),fP=a("a"),uio=o("Wav2Vec2FeatureExtractor"),_io=o(" (Hubert model)"),bio=l(),ch=a("li"),uae=a("strong"),vio=o("layoutlmv2"),Fio=o(" \u2014 "),mP=a("a"),Tio=o("LayoutLMv2FeatureExtractor"),Mio=o(" (LayoutLMv2 model)"),Eio=l(),fh=a("li"),_ae=a("strong"),Cio=o("maskformer"),wio=o(" \u2014 "),gP=a("a"),Aio=o("MaskFormerFeatureExtractor"),yio=o(" (MaskFormer model)"),Lio=l(),mh=a("li"),bae=a("strong"),xio=o("perceiver"),$io=o(" \u2014 "),hP=a("a"),kio=o("PerceiverFeatureExtractor"),Sio=o(" (Perceiver model)"),Rio=l(),gh=a("li"),vae=a("strong"),Bio=o("poolformer"),Pio=o(" \u2014 "),pP=a("a"),Iio=o("PoolFormerFeatureExtractor"),qio=o(" (PoolFormer model)"),Nio=l(),hh=a("li"),Fae=a("strong"),jio=o("regnet"),Dio=o(" \u2014 "),uP=a("a"),Gio=o("ConvNextFeatureExtractor"),Oio=o(" (RegNet model)"),Vio=l(),ph=a("li"),Tae=a("strong"),Xio=o("resnet"),zio=o(" \u2014 "),_P=a("a"),Qio=o("ConvNextFeatureExtractor"),Wio=o(" (ResNet model)"),Hio=l(),uh=a("li"),Mae=a("strong"),Uio=o("segformer"),Jio=o(" \u2014 "),bP=a("a"),Yio=o("SegformerFeatureExtractor"),Kio=o(" (SegFormer model)"),Zio=l(),_h=a("li"),Eae=a("strong"),edo=o("speech_to_text"),odo=o(" \u2014 "),vP=a("a"),rdo=o("Speech2TextFeatureExtractor"),tdo=o(" (Speech2Text model)"),ado=l(),bh=a("li"),Cae=a("strong"),ndo=o("swin"),sdo=o(" \u2014 "),FP=a("a"),ldo=o("ViTFeatureExtractor"),ido=o(" (Swin model)"),ddo=l(),vh=a("li"),wae=a("strong"),cdo=o("van"),fdo=o(" \u2014 "),TP=a("a"),mdo=o("ConvNextFeatureExtractor"),gdo=o(" (VAN model)"),hdo=l(),Fh=a("li"),Aae=a("strong"),pdo=o("vit"),udo=o(" \u2014 "),MP=a("a"),_do=o("ViTFeatureExtractor"),bdo=o(" (ViT model)"),vdo=l(),Th=a("li"),yae=a("strong"),Fdo=o("vit_mae"),Tdo=o(" \u2014 "),EP=a("a"),Mdo=o("ViTFeatureExtractor"),Edo=o(" (ViTMAE model)"),Cdo=l(),Mh=a("li"),Lae=a("strong"),wdo=o("wav2vec2"),Ado=o(" \u2014 "),CP=a("a"),ydo=o("Wav2Vec2FeatureExtractor"),Ldo=o(" (Wav2Vec2 model)"),xdo=l(),Eh=a("li"),xae=a("strong"),$do=o("yolos"),kdo=o(" \u2014 "),wP=a("a"),Sdo=o("YolosFeatureExtractor"),Rdo=o(" (YOLOS model)"),Bdo=l(),F(Ch.$$.fragment),Pdo=l(),F(wh.$$.fragment),Ido=l(),Ah=a("div"),F(b0.$$.fragment),qdo=l(),$ae=a("p"),Ndo=o("Register a new feature extractor for this class."),iIe=l(),vi=a("h2"),yh=a("a"),kae=a("span"),F(v0.$$.fragment),jdo=l(),Sae=a("span"),Ddo=o("AutoProcessor"),dIe=l(),yo=a("div"),F(F0.$$.fragment),Gdo=l(),T0=a("p"),Odo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AP=a("a"),Vdo=o("AutoProcessor.from_pretrained()"),Xdo=o(" class method."),zdo=l(),M0=a("p"),Qdo=o("This class cannot be instantiated directly using "),Rae=a("code"),Wdo=o("__init__()"),Hdo=o(" (throws an error)."),Udo=l(),We=a("div"),F(E0.$$.fragment),Jdo=l(),Bae=a("p"),Ydo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Kdo=l(),Fi=a("p"),Zdo=o("The processor class to instantiate is selected based on the "),Pae=a("code"),eco=o("model_type"),oco=o(` property of the config object (either
passed as an argument or loaded from `),Iae=a("code"),rco=o("pretrained_model_name_or_path"),tco=o(" if possible):"),aco=l(),be=a("ul"),Lh=a("li"),qae=a("strong"),nco=o("clip"),sco=o(" \u2014 "),yP=a("a"),lco=o("CLIPProcessor"),ico=o(" (CLIP model)"),dco=l(),xh=a("li"),Nae=a("strong"),cco=o("flava"),fco=o(" \u2014 "),jae=a("code"),mco=o("FLAVAProcessor"),gco=o(" (Flava model)"),hco=l(),$h=a("li"),Dae=a("strong"),pco=o("layoutlmv2"),uco=o(" \u2014 "),LP=a("a"),_co=o("LayoutLMv2Processor"),bco=o(" (LayoutLMv2 model)"),vco=l(),kh=a("li"),Gae=a("strong"),Fco=o("layoutxlm"),Tco=o(" \u2014 "),xP=a("a"),Mco=o("LayoutXLMProcessor"),Eco=o(" (LayoutXLM model)"),Cco=l(),Sh=a("li"),Oae=a("strong"),wco=o("sew"),Aco=o(" \u2014 "),$P=a("a"),yco=o("Wav2Vec2Processor"),Lco=o(" (SEW model)"),xco=l(),Rh=a("li"),Vae=a("strong"),$co=o("sew-d"),kco=o(" \u2014 "),kP=a("a"),Sco=o("Wav2Vec2Processor"),Rco=o(" (SEW-D model)"),Bco=l(),Bh=a("li"),Xae=a("strong"),Pco=o("speech_to_text"),Ico=o(" \u2014 "),SP=a("a"),qco=o("Speech2TextProcessor"),Nco=o(" (Speech2Text model)"),jco=l(),Ph=a("li"),zae=a("strong"),Dco=o("speech_to_text_2"),Gco=o(" \u2014 "),RP=a("a"),Oco=o("Speech2Text2Processor"),Vco=o(" (Speech2Text2 model)"),Xco=l(),Ih=a("li"),Qae=a("strong"),zco=o("trocr"),Qco=o(" \u2014 "),BP=a("a"),Wco=o("TrOCRProcessor"),Hco=o(" (TrOCR model)"),Uco=l(),qh=a("li"),Wae=a("strong"),Jco=o("unispeech"),Yco=o(" \u2014 "),PP=a("a"),Kco=o("Wav2Vec2Processor"),Zco=o(" (UniSpeech model)"),efo=l(),Nh=a("li"),Hae=a("strong"),ofo=o("unispeech-sat"),rfo=o(" \u2014 "),IP=a("a"),tfo=o("Wav2Vec2Processor"),afo=o(" (UniSpeechSat model)"),nfo=l(),jh=a("li"),Uae=a("strong"),sfo=o("vilt"),lfo=o(" \u2014 "),qP=a("a"),ifo=o("ViltProcessor"),dfo=o(" (ViLT model)"),cfo=l(),Dh=a("li"),Jae=a("strong"),ffo=o("vision-text-dual-encoder"),mfo=o(" \u2014 "),NP=a("a"),gfo=o("VisionTextDualEncoderProcessor"),hfo=o(" (VisionTextDualEncoder model)"),pfo=l(),Gh=a("li"),Yae=a("strong"),ufo=o("wav2vec2"),_fo=o(" \u2014 "),jP=a("a"),bfo=o("Wav2Vec2Processor"),vfo=o(" (Wav2Vec2 model)"),Ffo=l(),Oh=a("li"),Kae=a("strong"),Tfo=o("wavlm"),Mfo=o(" \u2014 "),DP=a("a"),Efo=o("Wav2Vec2Processor"),Cfo=o(" (WavLM model)"),wfo=l(),F(Vh.$$.fragment),Afo=l(),F(Xh.$$.fragment),yfo=l(),zh=a("div"),F(C0.$$.fragment),Lfo=l(),Zae=a("p"),xfo=o("Register a new processor for this class."),cIe=l(),Ti=a("h2"),Qh=a("a"),ene=a("span"),F(w0.$$.fragment),$fo=l(),one=a("span"),kfo=o("AutoModel"),fIe=l(),Lo=a("div"),F(A0.$$.fragment),Sfo=l(),Mi=a("p"),Rfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GP=a("a"),Bfo=o("from_pretrained()"),Pfo=o(" class method or the "),OP=a("a"),Ifo=o("from_config()"),qfo=o(` class
method.`),Nfo=l(),y0=a("p"),jfo=o("This class cannot be instantiated directly using "),rne=a("code"),Dfo=o("__init__()"),Gfo=o(" (throws an error)."),Ofo=l(),ot=a("div"),F(L0.$$.fragment),Vfo=l(),tne=a("p"),Xfo=o("Instantiates one of the base model classes of the library from a configuration."),zfo=l(),Ei=a("p"),Qfo=o(`Note:
Loading a model from its configuration file does `),ane=a("strong"),Wfo=o("not"),Hfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VP=a("a"),Ufo=o("from_pretrained()"),Jfo=o(" to load the model weights."),Yfo=l(),F(Wh.$$.fragment),Kfo=l(),He=a("div"),F(x0.$$.fragment),Zfo=l(),nne=a("p"),emo=o("Instantiate one of the base model classes of the library from a pretrained model."),omo=l(),Aa=a("p"),rmo=o("The model class to instantiate is selected based on the "),sne=a("code"),tmo=o("model_type"),amo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),nmo=o("pretrained_model_name_or_path"),smo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),lmo=o("pretrained_model_name_or_path"),imo=o(":"),dmo=l(),x=a("ul"),Hh=a("li"),dne=a("strong"),cmo=o("albert"),fmo=o(" \u2014 "),XP=a("a"),mmo=o("AlbertModel"),gmo=o(" (ALBERT model)"),hmo=l(),Uh=a("li"),cne=a("strong"),pmo=o("bart"),umo=o(" \u2014 "),zP=a("a"),_mo=o("BartModel"),bmo=o(" (BART model)"),vmo=l(),Jh=a("li"),fne=a("strong"),Fmo=o("beit"),Tmo=o(" \u2014 "),QP=a("a"),Mmo=o("BeitModel"),Emo=o(" (BEiT model)"),Cmo=l(),Yh=a("li"),mne=a("strong"),wmo=o("bert"),Amo=o(" \u2014 "),WP=a("a"),ymo=o("BertModel"),Lmo=o(" (BERT model)"),xmo=l(),Kh=a("li"),gne=a("strong"),$mo=o("bert-generation"),kmo=o(" \u2014 "),HP=a("a"),Smo=o("BertGenerationEncoder"),Rmo=o(" (Bert Generation model)"),Bmo=l(),Zh=a("li"),hne=a("strong"),Pmo=o("big_bird"),Imo=o(" \u2014 "),UP=a("a"),qmo=o("BigBirdModel"),Nmo=o(" (BigBird model)"),jmo=l(),ep=a("li"),pne=a("strong"),Dmo=o("bigbird_pegasus"),Gmo=o(" \u2014 "),JP=a("a"),Omo=o("BigBirdPegasusModel"),Vmo=o(" (BigBirdPegasus model)"),Xmo=l(),op=a("li"),une=a("strong"),zmo=o("blenderbot"),Qmo=o(" \u2014 "),YP=a("a"),Wmo=o("BlenderbotModel"),Hmo=o(" (Blenderbot model)"),Umo=l(),rp=a("li"),_ne=a("strong"),Jmo=o("blenderbot-small"),Ymo=o(" \u2014 "),KP=a("a"),Kmo=o("BlenderbotSmallModel"),Zmo=o(" (BlenderbotSmall model)"),ego=l(),tp=a("li"),bne=a("strong"),ogo=o("camembert"),rgo=o(" \u2014 "),ZP=a("a"),tgo=o("CamembertModel"),ago=o(" (CamemBERT model)"),ngo=l(),ap=a("li"),vne=a("strong"),sgo=o("canine"),lgo=o(" \u2014 "),eI=a("a"),igo=o("CanineModel"),dgo=o(" (Canine model)"),cgo=l(),np=a("li"),Fne=a("strong"),fgo=o("clip"),mgo=o(" \u2014 "),oI=a("a"),ggo=o("CLIPModel"),hgo=o(" (CLIP model)"),pgo=l(),sp=a("li"),Tne=a("strong"),ugo=o("convbert"),_go=o(" \u2014 "),rI=a("a"),bgo=o("ConvBertModel"),vgo=o(" (ConvBERT model)"),Fgo=l(),lp=a("li"),Mne=a("strong"),Tgo=o("convnext"),Mgo=o(" \u2014 "),tI=a("a"),Ego=o("ConvNextModel"),Cgo=o(" (ConvNext model)"),wgo=l(),ip=a("li"),Ene=a("strong"),Ago=o("ctrl"),ygo=o(" \u2014 "),aI=a("a"),Lgo=o("CTRLModel"),xgo=o(" (CTRL model)"),$go=l(),dp=a("li"),Cne=a("strong"),kgo=o("data2vec-audio"),Sgo=o(" \u2014 "),nI=a("a"),Rgo=o("Data2VecAudioModel"),Bgo=o(" (Data2VecAudio model)"),Pgo=l(),cp=a("li"),wne=a("strong"),Igo=o("data2vec-text"),qgo=o(" \u2014 "),sI=a("a"),Ngo=o("Data2VecTextModel"),jgo=o(" (Data2VecText model)"),Dgo=l(),fp=a("li"),Ane=a("strong"),Ggo=o("data2vec-vision"),Ogo=o(" \u2014 "),lI=a("a"),Vgo=o("Data2VecVisionModel"),Xgo=o(" (Data2VecVision model)"),zgo=l(),mp=a("li"),yne=a("strong"),Qgo=o("deberta"),Wgo=o(" \u2014 "),iI=a("a"),Hgo=o("DebertaModel"),Ugo=o(" (DeBERTa model)"),Jgo=l(),gp=a("li"),Lne=a("strong"),Ygo=o("deberta-v2"),Kgo=o(" \u2014 "),dI=a("a"),Zgo=o("DebertaV2Model"),eho=o(" (DeBERTa-v2 model)"),oho=l(),hp=a("li"),xne=a("strong"),rho=o("decision_transformer"),tho=o(" \u2014 "),cI=a("a"),aho=o("DecisionTransformerModel"),nho=o(" (Decision Transformer model)"),sho=l(),pp=a("li"),$ne=a("strong"),lho=o("deit"),iho=o(" \u2014 "),fI=a("a"),dho=o("DeiTModel"),cho=o(" (DeiT model)"),fho=l(),up=a("li"),kne=a("strong"),mho=o("detr"),gho=o(" \u2014 "),mI=a("a"),hho=o("DetrModel"),pho=o(" (DETR model)"),uho=l(),_p=a("li"),Sne=a("strong"),_ho=o("distilbert"),bho=o(" \u2014 "),gI=a("a"),vho=o("DistilBertModel"),Fho=o(" (DistilBERT model)"),Tho=l(),bp=a("li"),Rne=a("strong"),Mho=o("dpr"),Eho=o(" \u2014 "),hI=a("a"),Cho=o("DPRQuestionEncoder"),who=o(" (DPR model)"),Aho=l(),vp=a("li"),Bne=a("strong"),yho=o("dpt"),Lho=o(" \u2014 "),pI=a("a"),xho=o("DPTModel"),$ho=o(" (DPT model)"),kho=l(),Fp=a("li"),Pne=a("strong"),Sho=o("electra"),Rho=o(" \u2014 "),uI=a("a"),Bho=o("ElectraModel"),Pho=o(" (ELECTRA model)"),Iho=l(),Tp=a("li"),Ine=a("strong"),qho=o("flaubert"),Nho=o(" \u2014 "),_I=a("a"),jho=o("FlaubertModel"),Dho=o(" (FlauBERT model)"),Gho=l(),Mp=a("li"),qne=a("strong"),Oho=o("flava"),Vho=o(" \u2014 "),bI=a("a"),Xho=o("FlavaModel"),zho=o(" (Flava model)"),Qho=l(),Ep=a("li"),Nne=a("strong"),Who=o("fnet"),Hho=o(" \u2014 "),vI=a("a"),Uho=o("FNetModel"),Jho=o(" (FNet model)"),Yho=l(),Cp=a("li"),jne=a("strong"),Kho=o("fsmt"),Zho=o(" \u2014 "),FI=a("a"),epo=o("FSMTModel"),opo=o(" (FairSeq Machine-Translation model)"),rpo=l(),Ss=a("li"),Dne=a("strong"),tpo=o("funnel"),apo=o(" \u2014 "),TI=a("a"),npo=o("FunnelModel"),spo=o(" or "),MI=a("a"),lpo=o("FunnelBaseModel"),ipo=o(" (Funnel Transformer model)"),dpo=l(),wp=a("li"),Gne=a("strong"),cpo=o("glpn"),fpo=o(" \u2014 "),EI=a("a"),mpo=o("GLPNModel"),gpo=o(" (GLPN model)"),hpo=l(),Ap=a("li"),One=a("strong"),ppo=o("gpt2"),upo=o(" \u2014 "),CI=a("a"),_po=o("GPT2Model"),bpo=o(" (OpenAI GPT-2 model)"),vpo=l(),yp=a("li"),Vne=a("strong"),Fpo=o("gpt_neo"),Tpo=o(" \u2014 "),wI=a("a"),Mpo=o("GPTNeoModel"),Epo=o(" (GPT Neo model)"),Cpo=l(),Lp=a("li"),Xne=a("strong"),wpo=o("gptj"),Apo=o(" \u2014 "),AI=a("a"),ypo=o("GPTJModel"),Lpo=o(" (GPT-J model)"),xpo=l(),xp=a("li"),zne=a("strong"),$po=o("hubert"),kpo=o(" \u2014 "),yI=a("a"),Spo=o("HubertModel"),Rpo=o(" (Hubert model)"),Bpo=l(),$p=a("li"),Qne=a("strong"),Ppo=o("ibert"),Ipo=o(" \u2014 "),LI=a("a"),qpo=o("IBertModel"),Npo=o(" (I-BERT model)"),jpo=l(),kp=a("li"),Wne=a("strong"),Dpo=o("imagegpt"),Gpo=o(" \u2014 "),xI=a("a"),Opo=o("ImageGPTModel"),Vpo=o(" (ImageGPT model)"),Xpo=l(),Sp=a("li"),Hne=a("strong"),zpo=o("layoutlm"),Qpo=o(" \u2014 "),$I=a("a"),Wpo=o("LayoutLMModel"),Hpo=o(" (LayoutLM model)"),Upo=l(),Rp=a("li"),Une=a("strong"),Jpo=o("layoutlmv2"),Ypo=o(" \u2014 "),kI=a("a"),Kpo=o("LayoutLMv2Model"),Zpo=o(" (LayoutLMv2 model)"),euo=l(),Bp=a("li"),Jne=a("strong"),ouo=o("led"),ruo=o(" \u2014 "),SI=a("a"),tuo=o("LEDModel"),auo=o(" (LED model)"),nuo=l(),Pp=a("li"),Yne=a("strong"),suo=o("longformer"),luo=o(" \u2014 "),RI=a("a"),iuo=o("LongformerModel"),duo=o(" (Longformer model)"),cuo=l(),Ip=a("li"),Kne=a("strong"),fuo=o("luke"),muo=o(" \u2014 "),BI=a("a"),guo=o("LukeModel"),huo=o(" (LUKE model)"),puo=l(),qp=a("li"),Zne=a("strong"),uuo=o("lxmert"),_uo=o(" \u2014 "),PI=a("a"),buo=o("LxmertModel"),vuo=o(" (LXMERT model)"),Fuo=l(),Np=a("li"),ese=a("strong"),Tuo=o("m2m_100"),Muo=o(" \u2014 "),II=a("a"),Euo=o("M2M100Model"),Cuo=o(" (M2M100 model)"),wuo=l(),jp=a("li"),ose=a("strong"),Auo=o("marian"),yuo=o(" \u2014 "),qI=a("a"),Luo=o("MarianModel"),xuo=o(" (Marian model)"),$uo=l(),Dp=a("li"),rse=a("strong"),kuo=o("maskformer"),Suo=o(" \u2014 "),NI=a("a"),Ruo=o("MaskFormerModel"),Buo=o(" (MaskFormer model)"),Puo=l(),Gp=a("li"),tse=a("strong"),Iuo=o("mbart"),quo=o(" \u2014 "),jI=a("a"),Nuo=o("MBartModel"),juo=o(" (mBART model)"),Duo=l(),Op=a("li"),ase=a("strong"),Guo=o("megatron-bert"),Ouo=o(" \u2014 "),DI=a("a"),Vuo=o("MegatronBertModel"),Xuo=o(" (MegatronBert model)"),zuo=l(),Vp=a("li"),nse=a("strong"),Quo=o("mobilebert"),Wuo=o(" \u2014 "),GI=a("a"),Huo=o("MobileBertModel"),Uuo=o(" (MobileBERT model)"),Juo=l(),Xp=a("li"),sse=a("strong"),Yuo=o("mpnet"),Kuo=o(" \u2014 "),OI=a("a"),Zuo=o("MPNetModel"),e_o=o(" (MPNet model)"),o_o=l(),zp=a("li"),lse=a("strong"),r_o=o("mt5"),t_o=o(" \u2014 "),VI=a("a"),a_o=o("MT5Model"),n_o=o(" (mT5 model)"),s_o=l(),Qp=a("li"),ise=a("strong"),l_o=o("nystromformer"),i_o=o(" \u2014 "),XI=a("a"),d_o=o("NystromformerModel"),c_o=o(" (Nystromformer model)"),f_o=l(),Wp=a("li"),dse=a("strong"),m_o=o("openai-gpt"),g_o=o(" \u2014 "),zI=a("a"),h_o=o("OpenAIGPTModel"),p_o=o(" (OpenAI GPT model)"),u_o=l(),Hp=a("li"),cse=a("strong"),__o=o("opt"),b_o=o(" \u2014 "),QI=a("a"),v_o=o("OPTModel"),F_o=o(" (OPT model)"),T_o=l(),Up=a("li"),fse=a("strong"),M_o=o("pegasus"),E_o=o(" \u2014 "),WI=a("a"),C_o=o("PegasusModel"),w_o=o(" (Pegasus model)"),A_o=l(),Jp=a("li"),mse=a("strong"),y_o=o("perceiver"),L_o=o(" \u2014 "),HI=a("a"),x_o=o("PerceiverModel"),$_o=o(" (Perceiver model)"),k_o=l(),Yp=a("li"),gse=a("strong"),S_o=o("plbart"),R_o=o(" \u2014 "),UI=a("a"),B_o=o("PLBartModel"),P_o=o(" (PLBart model)"),I_o=l(),Kp=a("li"),hse=a("strong"),q_o=o("poolformer"),N_o=o(" \u2014 "),JI=a("a"),j_o=o("PoolFormerModel"),D_o=o(" (PoolFormer model)"),G_o=l(),Zp=a("li"),pse=a("strong"),O_o=o("prophetnet"),V_o=o(" \u2014 "),YI=a("a"),X_o=o("ProphetNetModel"),z_o=o(" (ProphetNet model)"),Q_o=l(),eu=a("li"),use=a("strong"),W_o=o("qdqbert"),H_o=o(" \u2014 "),KI=a("a"),U_o=o("QDQBertModel"),J_o=o(" (QDQBert model)"),Y_o=l(),ou=a("li"),_se=a("strong"),K_o=o("reformer"),Z_o=o(" \u2014 "),ZI=a("a"),e1o=o("ReformerModel"),o1o=o(" (Reformer model)"),r1o=l(),ru=a("li"),bse=a("strong"),t1o=o("regnet"),a1o=o(" \u2014 "),eq=a("a"),n1o=o("RegNetModel"),s1o=o(" (RegNet model)"),l1o=l(),tu=a("li"),vse=a("strong"),i1o=o("rembert"),d1o=o(" \u2014 "),oq=a("a"),c1o=o("RemBertModel"),f1o=o(" (RemBERT model)"),m1o=l(),au=a("li"),Fse=a("strong"),g1o=o("resnet"),h1o=o(" \u2014 "),rq=a("a"),p1o=o("ResNetModel"),u1o=o(" (ResNet model)"),_1o=l(),nu=a("li"),Tse=a("strong"),b1o=o("retribert"),v1o=o(" \u2014 "),tq=a("a"),F1o=o("RetriBertModel"),T1o=o(" (RetriBERT model)"),M1o=l(),su=a("li"),Mse=a("strong"),E1o=o("roberta"),C1o=o(" \u2014 "),aq=a("a"),w1o=o("RobertaModel"),A1o=o(" (RoBERTa model)"),y1o=l(),lu=a("li"),Ese=a("strong"),L1o=o("roformer"),x1o=o(" \u2014 "),nq=a("a"),$1o=o("RoFormerModel"),k1o=o(" (RoFormer model)"),S1o=l(),iu=a("li"),Cse=a("strong"),R1o=o("segformer"),B1o=o(" \u2014 "),sq=a("a"),P1o=o("SegformerModel"),I1o=o(" (SegFormer model)"),q1o=l(),du=a("li"),wse=a("strong"),N1o=o("sew"),j1o=o(" \u2014 "),lq=a("a"),D1o=o("SEWModel"),G1o=o(" (SEW model)"),O1o=l(),cu=a("li"),Ase=a("strong"),V1o=o("sew-d"),X1o=o(" \u2014 "),iq=a("a"),z1o=o("SEWDModel"),Q1o=o(" (SEW-D model)"),W1o=l(),fu=a("li"),yse=a("strong"),H1o=o("speech_to_text"),U1o=o(" \u2014 "),dq=a("a"),J1o=o("Speech2TextModel"),Y1o=o(" (Speech2Text model)"),K1o=l(),mu=a("li"),Lse=a("strong"),Z1o=o("splinter"),ebo=o(" \u2014 "),cq=a("a"),obo=o("SplinterModel"),rbo=o(" (Splinter model)"),tbo=l(),gu=a("li"),xse=a("strong"),abo=o("squeezebert"),nbo=o(" \u2014 "),fq=a("a"),sbo=o("SqueezeBertModel"),lbo=o(" (SqueezeBERT model)"),ibo=l(),hu=a("li"),$se=a("strong"),dbo=o("swin"),cbo=o(" \u2014 "),mq=a("a"),fbo=o("SwinModel"),mbo=o(" (Swin model)"),gbo=l(),pu=a("li"),kse=a("strong"),hbo=o("t5"),pbo=o(" \u2014 "),gq=a("a"),ubo=o("T5Model"),_bo=o(" (T5 model)"),bbo=l(),uu=a("li"),Sse=a("strong"),vbo=o("tapas"),Fbo=o(" \u2014 "),hq=a("a"),Tbo=o("TapasModel"),Mbo=o(" (TAPAS model)"),Ebo=l(),_u=a("li"),Rse=a("strong"),Cbo=o("trajectory_transformer"),wbo=o(" \u2014 "),pq=a("a"),Abo=o("TrajectoryTransformerModel"),ybo=o(" (Trajectory Transformer model)"),Lbo=l(),bu=a("li"),Bse=a("strong"),xbo=o("transfo-xl"),$bo=o(" \u2014 "),uq=a("a"),kbo=o("TransfoXLModel"),Sbo=o(" (Transformer-XL model)"),Rbo=l(),vu=a("li"),Pse=a("strong"),Bbo=o("unispeech"),Pbo=o(" \u2014 "),_q=a("a"),Ibo=o("UniSpeechModel"),qbo=o(" (UniSpeech model)"),Nbo=l(),Fu=a("li"),Ise=a("strong"),jbo=o("unispeech-sat"),Dbo=o(" \u2014 "),bq=a("a"),Gbo=o("UniSpeechSatModel"),Obo=o(" (UniSpeechSat model)"),Vbo=l(),Tu=a("li"),qse=a("strong"),Xbo=o("van"),zbo=o(" \u2014 "),vq=a("a"),Qbo=o("VanModel"),Wbo=o(" (VAN model)"),Hbo=l(),Mu=a("li"),Nse=a("strong"),Ubo=o("vilt"),Jbo=o(" \u2014 "),Fq=a("a"),Ybo=o("ViltModel"),Kbo=o(" (ViLT model)"),Zbo=l(),Eu=a("li"),jse=a("strong"),e4o=o("vision-text-dual-encoder"),o4o=o(" \u2014 "),Tq=a("a"),r4o=o("VisionTextDualEncoderModel"),t4o=o(" (VisionTextDualEncoder model)"),a4o=l(),Cu=a("li"),Dse=a("strong"),n4o=o("visual_bert"),s4o=o(" \u2014 "),Mq=a("a"),l4o=o("VisualBertModel"),i4o=o(" (VisualBert model)"),d4o=l(),wu=a("li"),Gse=a("strong"),c4o=o("vit"),f4o=o(" \u2014 "),Eq=a("a"),m4o=o("ViTModel"),g4o=o(" (ViT model)"),h4o=l(),Au=a("li"),Ose=a("strong"),p4o=o("vit_mae"),u4o=o(" \u2014 "),Cq=a("a"),_4o=o("ViTMAEModel"),b4o=o(" (ViTMAE model)"),v4o=l(),yu=a("li"),Vse=a("strong"),F4o=o("wav2vec2"),T4o=o(" \u2014 "),wq=a("a"),M4o=o("Wav2Vec2Model"),E4o=o(" (Wav2Vec2 model)"),C4o=l(),Lu=a("li"),Xse=a("strong"),w4o=o("wavlm"),A4o=o(" \u2014 "),Aq=a("a"),y4o=o("WavLMModel"),L4o=o(" (WavLM model)"),x4o=l(),xu=a("li"),zse=a("strong"),$4o=o("xglm"),k4o=o(" \u2014 "),yq=a("a"),S4o=o("XGLMModel"),R4o=o(" (XGLM model)"),B4o=l(),$u=a("li"),Qse=a("strong"),P4o=o("xlm"),I4o=o(" \u2014 "),Lq=a("a"),q4o=o("XLMModel"),N4o=o(" (XLM model)"),j4o=l(),ku=a("li"),Wse=a("strong"),D4o=o("xlm-prophetnet"),G4o=o(" \u2014 "),xq=a("a"),O4o=o("XLMProphetNetModel"),V4o=o(" (XLMProphetNet model)"),X4o=l(),Su=a("li"),Hse=a("strong"),z4o=o("xlm-roberta"),Q4o=o(" \u2014 "),$q=a("a"),W4o=o("XLMRobertaModel"),H4o=o(" (XLM-RoBERTa model)"),U4o=l(),Ru=a("li"),Use=a("strong"),J4o=o("xlm-roberta-xl"),Y4o=o(" \u2014 "),kq=a("a"),K4o=o("XLMRobertaXLModel"),Z4o=o(" (XLM-RoBERTa-XL model)"),e2o=l(),Bu=a("li"),Jse=a("strong"),o2o=o("xlnet"),r2o=o(" \u2014 "),Sq=a("a"),t2o=o("XLNetModel"),a2o=o(" (XLNet model)"),n2o=l(),Pu=a("li"),Yse=a("strong"),s2o=o("yolos"),l2o=o(" \u2014 "),Rq=a("a"),i2o=o("YolosModel"),d2o=o(" (YOLOS model)"),c2o=l(),Iu=a("li"),Kse=a("strong"),f2o=o("yoso"),m2o=o(" \u2014 "),Bq=a("a"),g2o=o("YosoModel"),h2o=o(" (YOSO model)"),p2o=l(),qu=a("p"),u2o=o("The model is set in evaluation mode by default using "),Zse=a("code"),_2o=o("model.eval()"),b2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),v2o=o("model.train()"),F2o=l(),F(Nu.$$.fragment),mIe=l(),Ci=a("h2"),ju=a("a"),ole=a("span"),F($0.$$.fragment),T2o=l(),rle=a("span"),M2o=o("AutoModelForPreTraining"),gIe=l(),xo=a("div"),F(k0.$$.fragment),E2o=l(),wi=a("p"),C2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Pq=a("a"),w2o=o("from_pretrained()"),A2o=o(" class method or the "),Iq=a("a"),y2o=o("from_config()"),L2o=o(` class
method.`),x2o=l(),S0=a("p"),$2o=o("This class cannot be instantiated directly using "),tle=a("code"),k2o=o("__init__()"),S2o=o(" (throws an error)."),R2o=l(),rt=a("div"),F(R0.$$.fragment),B2o=l(),ale=a("p"),P2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),I2o=l(),Ai=a("p"),q2o=o(`Note:
Loading a model from its configuration file does `),nle=a("strong"),N2o=o("not"),j2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=a("a"),D2o=o("from_pretrained()"),G2o=o(" to load the model weights."),O2o=l(),F(Du.$$.fragment),V2o=l(),Ue=a("div"),F(B0.$$.fragment),X2o=l(),sle=a("p"),z2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Q2o=l(),ya=a("p"),W2o=o("The model class to instantiate is selected based on the "),lle=a("code"),H2o=o("model_type"),U2o=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),J2o=o("pretrained_model_name_or_path"),Y2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),K2o=o("pretrained_model_name_or_path"),Z2o=o(":"),evo=l(),G=a("ul"),Gu=a("li"),cle=a("strong"),ovo=o("albert"),rvo=o(" \u2014 "),Nq=a("a"),tvo=o("AlbertForPreTraining"),avo=o(" (ALBERT model)"),nvo=l(),Ou=a("li"),fle=a("strong"),svo=o("bart"),lvo=o(" \u2014 "),jq=a("a"),ivo=o("BartForConditionalGeneration"),dvo=o(" (BART model)"),cvo=l(),Vu=a("li"),mle=a("strong"),fvo=o("bert"),mvo=o(" \u2014 "),Dq=a("a"),gvo=o("BertForPreTraining"),hvo=o(" (BERT model)"),pvo=l(),Xu=a("li"),gle=a("strong"),uvo=o("big_bird"),_vo=o(" \u2014 "),Gq=a("a"),bvo=o("BigBirdForPreTraining"),vvo=o(" (BigBird model)"),Fvo=l(),zu=a("li"),hle=a("strong"),Tvo=o("camembert"),Mvo=o(" \u2014 "),Oq=a("a"),Evo=o("CamembertForMaskedLM"),Cvo=o(" (CamemBERT model)"),wvo=l(),Qu=a("li"),ple=a("strong"),Avo=o("ctrl"),yvo=o(" \u2014 "),Vq=a("a"),Lvo=o("CTRLLMHeadModel"),xvo=o(" (CTRL model)"),$vo=l(),Wu=a("li"),ule=a("strong"),kvo=o("data2vec-text"),Svo=o(" \u2014 "),Xq=a("a"),Rvo=o("Data2VecTextForMaskedLM"),Bvo=o(" (Data2VecText model)"),Pvo=l(),Hu=a("li"),_le=a("strong"),Ivo=o("deberta"),qvo=o(" \u2014 "),zq=a("a"),Nvo=o("DebertaForMaskedLM"),jvo=o(" (DeBERTa model)"),Dvo=l(),Uu=a("li"),ble=a("strong"),Gvo=o("deberta-v2"),Ovo=o(" \u2014 "),Qq=a("a"),Vvo=o("DebertaV2ForMaskedLM"),Xvo=o(" (DeBERTa-v2 model)"),zvo=l(),Ju=a("li"),vle=a("strong"),Qvo=o("distilbert"),Wvo=o(" \u2014 "),Wq=a("a"),Hvo=o("DistilBertForMaskedLM"),Uvo=o(" (DistilBERT model)"),Jvo=l(),Yu=a("li"),Fle=a("strong"),Yvo=o("electra"),Kvo=o(" \u2014 "),Hq=a("a"),Zvo=o("ElectraForPreTraining"),eFo=o(" (ELECTRA model)"),oFo=l(),Ku=a("li"),Tle=a("strong"),rFo=o("flaubert"),tFo=o(" \u2014 "),Uq=a("a"),aFo=o("FlaubertWithLMHeadModel"),nFo=o(" (FlauBERT model)"),sFo=l(),Zu=a("li"),Mle=a("strong"),lFo=o("flava"),iFo=o(" \u2014 "),Jq=a("a"),dFo=o("FlavaForPreTraining"),cFo=o(" (Flava model)"),fFo=l(),e_=a("li"),Ele=a("strong"),mFo=o("fnet"),gFo=o(" \u2014 "),Yq=a("a"),hFo=o("FNetForPreTraining"),pFo=o(" (FNet model)"),uFo=l(),o_=a("li"),Cle=a("strong"),_Fo=o("fsmt"),bFo=o(" \u2014 "),Kq=a("a"),vFo=o("FSMTForConditionalGeneration"),FFo=o(" (FairSeq Machine-Translation model)"),TFo=l(),r_=a("li"),wle=a("strong"),MFo=o("funnel"),EFo=o(" \u2014 "),Zq=a("a"),CFo=o("FunnelForPreTraining"),wFo=o(" (Funnel Transformer model)"),AFo=l(),t_=a("li"),Ale=a("strong"),yFo=o("gpt2"),LFo=o(" \u2014 "),eN=a("a"),xFo=o("GPT2LMHeadModel"),$Fo=o(" (OpenAI GPT-2 model)"),kFo=l(),a_=a("li"),yle=a("strong"),SFo=o("ibert"),RFo=o(" \u2014 "),oN=a("a"),BFo=o("IBertForMaskedLM"),PFo=o(" (I-BERT model)"),IFo=l(),n_=a("li"),Lle=a("strong"),qFo=o("layoutlm"),NFo=o(" \u2014 "),rN=a("a"),jFo=o("LayoutLMForMaskedLM"),DFo=o(" (LayoutLM model)"),GFo=l(),s_=a("li"),xle=a("strong"),OFo=o("longformer"),VFo=o(" \u2014 "),tN=a("a"),XFo=o("LongformerForMaskedLM"),zFo=o(" (Longformer model)"),QFo=l(),l_=a("li"),$le=a("strong"),WFo=o("lxmert"),HFo=o(" \u2014 "),aN=a("a"),UFo=o("LxmertForPreTraining"),JFo=o(" (LXMERT model)"),YFo=l(),i_=a("li"),kle=a("strong"),KFo=o("megatron-bert"),ZFo=o(" \u2014 "),nN=a("a"),eTo=o("MegatronBertForPreTraining"),oTo=o(" (MegatronBert model)"),rTo=l(),d_=a("li"),Sle=a("strong"),tTo=o("mobilebert"),aTo=o(" \u2014 "),sN=a("a"),nTo=o("MobileBertForPreTraining"),sTo=o(" (MobileBERT model)"),lTo=l(),c_=a("li"),Rle=a("strong"),iTo=o("mpnet"),dTo=o(" \u2014 "),lN=a("a"),cTo=o("MPNetForMaskedLM"),fTo=o(" (MPNet model)"),mTo=l(),f_=a("li"),Ble=a("strong"),gTo=o("openai-gpt"),hTo=o(" \u2014 "),iN=a("a"),pTo=o("OpenAIGPTLMHeadModel"),uTo=o(" (OpenAI GPT model)"),_To=l(),m_=a("li"),Ple=a("strong"),bTo=o("retribert"),vTo=o(" \u2014 "),dN=a("a"),FTo=o("RetriBertModel"),TTo=o(" (RetriBERT model)"),MTo=l(),g_=a("li"),Ile=a("strong"),ETo=o("roberta"),CTo=o(" \u2014 "),cN=a("a"),wTo=o("RobertaForMaskedLM"),ATo=o(" (RoBERTa model)"),yTo=l(),h_=a("li"),qle=a("strong"),LTo=o("squeezebert"),xTo=o(" \u2014 "),fN=a("a"),$To=o("SqueezeBertForMaskedLM"),kTo=o(" (SqueezeBERT model)"),STo=l(),p_=a("li"),Nle=a("strong"),RTo=o("t5"),BTo=o(" \u2014 "),mN=a("a"),PTo=o("T5ForConditionalGeneration"),ITo=o(" (T5 model)"),qTo=l(),u_=a("li"),jle=a("strong"),NTo=o("tapas"),jTo=o(" \u2014 "),gN=a("a"),DTo=o("TapasForMaskedLM"),GTo=o(" (TAPAS model)"),OTo=l(),__=a("li"),Dle=a("strong"),VTo=o("transfo-xl"),XTo=o(" \u2014 "),hN=a("a"),zTo=o("TransfoXLLMHeadModel"),QTo=o(" (Transformer-XL model)"),WTo=l(),b_=a("li"),Gle=a("strong"),HTo=o("unispeech"),UTo=o(" \u2014 "),pN=a("a"),JTo=o("UniSpeechForPreTraining"),YTo=o(" (UniSpeech model)"),KTo=l(),v_=a("li"),Ole=a("strong"),ZTo=o("unispeech-sat"),e7o=o(" \u2014 "),uN=a("a"),o7o=o("UniSpeechSatForPreTraining"),r7o=o(" (UniSpeechSat model)"),t7o=l(),F_=a("li"),Vle=a("strong"),a7o=o("visual_bert"),n7o=o(" \u2014 "),_N=a("a"),s7o=o("VisualBertForPreTraining"),l7o=o(" (VisualBert model)"),i7o=l(),T_=a("li"),Xle=a("strong"),d7o=o("vit_mae"),c7o=o(" \u2014 "),bN=a("a"),f7o=o("ViTMAEForPreTraining"),m7o=o(" (ViTMAE model)"),g7o=l(),M_=a("li"),zle=a("strong"),h7o=o("wav2vec2"),p7o=o(" \u2014 "),vN=a("a"),u7o=o("Wav2Vec2ForPreTraining"),_7o=o(" (Wav2Vec2 model)"),b7o=l(),E_=a("li"),Qle=a("strong"),v7o=o("xlm"),F7o=o(" \u2014 "),FN=a("a"),T7o=o("XLMWithLMHeadModel"),M7o=o(" (XLM model)"),E7o=l(),C_=a("li"),Wle=a("strong"),C7o=o("xlm-roberta"),w7o=o(" \u2014 "),TN=a("a"),A7o=o("XLMRobertaForMaskedLM"),y7o=o(" (XLM-RoBERTa model)"),L7o=l(),w_=a("li"),Hle=a("strong"),x7o=o("xlm-roberta-xl"),$7o=o(" \u2014 "),MN=a("a"),k7o=o("XLMRobertaXLForMaskedLM"),S7o=o(" (XLM-RoBERTa-XL model)"),R7o=l(),A_=a("li"),Ule=a("strong"),B7o=o("xlnet"),P7o=o(" \u2014 "),EN=a("a"),I7o=o("XLNetLMHeadModel"),q7o=o(" (XLNet model)"),N7o=l(),y_=a("p"),j7o=o("The model is set in evaluation mode by default using "),Jle=a("code"),D7o=o("model.eval()"),G7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yle=a("code"),O7o=o("model.train()"),V7o=l(),F(L_.$$.fragment),hIe=l(),yi=a("h2"),x_=a("a"),Kle=a("span"),F(P0.$$.fragment),X7o=l(),Zle=a("span"),z7o=o("AutoModelForCausalLM"),pIe=l(),$o=a("div"),F(I0.$$.fragment),Q7o=l(),Li=a("p"),W7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CN=a("a"),H7o=o("from_pretrained()"),U7o=o(" class method or the "),wN=a("a"),J7o=o("from_config()"),Y7o=o(` class
method.`),K7o=l(),q0=a("p"),Z7o=o("This class cannot be instantiated directly using "),eie=a("code"),eMo=o("__init__()"),oMo=o(" (throws an error)."),rMo=l(),tt=a("div"),F(N0.$$.fragment),tMo=l(),oie=a("p"),aMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nMo=l(),xi=a("p"),sMo=o(`Note:
Loading a model from its configuration file does `),rie=a("strong"),lMo=o("not"),iMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AN=a("a"),dMo=o("from_pretrained()"),cMo=o(" to load the model weights."),fMo=l(),F($_.$$.fragment),mMo=l(),Je=a("div"),F(j0.$$.fragment),gMo=l(),tie=a("p"),hMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pMo=l(),La=a("p"),uMo=o("The model class to instantiate is selected based on the "),aie=a("code"),_Mo=o("model_type"),bMo=o(` property of the config object (either
passed as an argument or loaded from `),nie=a("code"),vMo=o("pretrained_model_name_or_path"),FMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sie=a("code"),TMo=o("pretrained_model_name_or_path"),MMo=o(":"),EMo=l(),z=a("ul"),k_=a("li"),lie=a("strong"),CMo=o("bart"),wMo=o(" \u2014 "),yN=a("a"),AMo=o("BartForCausalLM"),yMo=o(" (BART model)"),LMo=l(),S_=a("li"),iie=a("strong"),xMo=o("bert"),$Mo=o(" \u2014 "),LN=a("a"),kMo=o("BertLMHeadModel"),SMo=o(" (BERT model)"),RMo=l(),R_=a("li"),die=a("strong"),BMo=o("bert-generation"),PMo=o(" \u2014 "),xN=a("a"),IMo=o("BertGenerationDecoder"),qMo=o(" (Bert Generation model)"),NMo=l(),B_=a("li"),cie=a("strong"),jMo=o("big_bird"),DMo=o(" \u2014 "),$N=a("a"),GMo=o("BigBirdForCausalLM"),OMo=o(" (BigBird model)"),VMo=l(),P_=a("li"),fie=a("strong"),XMo=o("bigbird_pegasus"),zMo=o(" \u2014 "),kN=a("a"),QMo=o("BigBirdPegasusForCausalLM"),WMo=o(" (BigBirdPegasus model)"),HMo=l(),I_=a("li"),mie=a("strong"),UMo=o("blenderbot"),JMo=o(" \u2014 "),SN=a("a"),YMo=o("BlenderbotForCausalLM"),KMo=o(" (Blenderbot model)"),ZMo=l(),q_=a("li"),gie=a("strong"),eEo=o("blenderbot-small"),oEo=o(" \u2014 "),RN=a("a"),rEo=o("BlenderbotSmallForCausalLM"),tEo=o(" (BlenderbotSmall model)"),aEo=l(),N_=a("li"),hie=a("strong"),nEo=o("camembert"),sEo=o(" \u2014 "),BN=a("a"),lEo=o("CamembertForCausalLM"),iEo=o(" (CamemBERT model)"),dEo=l(),j_=a("li"),pie=a("strong"),cEo=o("ctrl"),fEo=o(" \u2014 "),PN=a("a"),mEo=o("CTRLLMHeadModel"),gEo=o(" (CTRL model)"),hEo=l(),D_=a("li"),uie=a("strong"),pEo=o("data2vec-text"),uEo=o(" \u2014 "),IN=a("a"),_Eo=o("Data2VecTextForCausalLM"),bEo=o(" (Data2VecText model)"),vEo=l(),G_=a("li"),_ie=a("strong"),FEo=o("electra"),TEo=o(" \u2014 "),qN=a("a"),MEo=o("ElectraForCausalLM"),EEo=o(" (ELECTRA model)"),CEo=l(),O_=a("li"),bie=a("strong"),wEo=o("gpt2"),AEo=o(" \u2014 "),NN=a("a"),yEo=o("GPT2LMHeadModel"),LEo=o(" (OpenAI GPT-2 model)"),xEo=l(),V_=a("li"),vie=a("strong"),$Eo=o("gpt_neo"),kEo=o(" \u2014 "),jN=a("a"),SEo=o("GPTNeoForCausalLM"),REo=o(" (GPT Neo model)"),BEo=l(),X_=a("li"),Fie=a("strong"),PEo=o("gptj"),IEo=o(" \u2014 "),DN=a("a"),qEo=o("GPTJForCausalLM"),NEo=o(" (GPT-J model)"),jEo=l(),z_=a("li"),Tie=a("strong"),DEo=o("marian"),GEo=o(" \u2014 "),GN=a("a"),OEo=o("MarianForCausalLM"),VEo=o(" (Marian model)"),XEo=l(),Q_=a("li"),Mie=a("strong"),zEo=o("mbart"),QEo=o(" \u2014 "),ON=a("a"),WEo=o("MBartForCausalLM"),HEo=o(" (mBART model)"),UEo=l(),W_=a("li"),Eie=a("strong"),JEo=o("megatron-bert"),YEo=o(" \u2014 "),VN=a("a"),KEo=o("MegatronBertForCausalLM"),ZEo=o(" (MegatronBert model)"),e5o=l(),H_=a("li"),Cie=a("strong"),o5o=o("openai-gpt"),r5o=o(" \u2014 "),XN=a("a"),t5o=o("OpenAIGPTLMHeadModel"),a5o=o(" (OpenAI GPT model)"),n5o=l(),U_=a("li"),wie=a("strong"),s5o=o("opt"),l5o=o(" \u2014 "),zN=a("a"),i5o=o("OPTForCausalLM"),d5o=o(" (OPT model)"),c5o=l(),J_=a("li"),Aie=a("strong"),f5o=o("pegasus"),m5o=o(" \u2014 "),QN=a("a"),g5o=o("PegasusForCausalLM"),h5o=o(" (Pegasus model)"),p5o=l(),Y_=a("li"),yie=a("strong"),u5o=o("plbart"),_5o=o(" \u2014 "),WN=a("a"),b5o=o("PLBartForCausalLM"),v5o=o(" (PLBart model)"),F5o=l(),K_=a("li"),Lie=a("strong"),T5o=o("prophetnet"),M5o=o(" \u2014 "),HN=a("a"),E5o=o("ProphetNetForCausalLM"),C5o=o(" (ProphetNet model)"),w5o=l(),Z_=a("li"),xie=a("strong"),A5o=o("qdqbert"),y5o=o(" \u2014 "),UN=a("a"),L5o=o("QDQBertLMHeadModel"),x5o=o(" (QDQBert model)"),$5o=l(),e1=a("li"),$ie=a("strong"),k5o=o("reformer"),S5o=o(" \u2014 "),JN=a("a"),R5o=o("ReformerModelWithLMHead"),B5o=o(" (Reformer model)"),P5o=l(),o1=a("li"),kie=a("strong"),I5o=o("rembert"),q5o=o(" \u2014 "),YN=a("a"),N5o=o("RemBertForCausalLM"),j5o=o(" (RemBERT model)"),D5o=l(),r1=a("li"),Sie=a("strong"),G5o=o("roberta"),O5o=o(" \u2014 "),KN=a("a"),V5o=o("RobertaForCausalLM"),X5o=o(" (RoBERTa model)"),z5o=l(),t1=a("li"),Rie=a("strong"),Q5o=o("roformer"),W5o=o(" \u2014 "),ZN=a("a"),H5o=o("RoFormerForCausalLM"),U5o=o(" (RoFormer model)"),J5o=l(),a1=a("li"),Bie=a("strong"),Y5o=o("speech_to_text_2"),K5o=o(" \u2014 "),ej=a("a"),Z5o=o("Speech2Text2ForCausalLM"),eCo=o(" (Speech2Text2 model)"),oCo=l(),n1=a("li"),Pie=a("strong"),rCo=o("transfo-xl"),tCo=o(" \u2014 "),oj=a("a"),aCo=o("TransfoXLLMHeadModel"),nCo=o(" (Transformer-XL model)"),sCo=l(),s1=a("li"),Iie=a("strong"),lCo=o("trocr"),iCo=o(" \u2014 "),rj=a("a"),dCo=o("TrOCRForCausalLM"),cCo=o(" (TrOCR model)"),fCo=l(),l1=a("li"),qie=a("strong"),mCo=o("xglm"),gCo=o(" \u2014 "),tj=a("a"),hCo=o("XGLMForCausalLM"),pCo=o(" (XGLM model)"),uCo=l(),i1=a("li"),Nie=a("strong"),_Co=o("xlm"),bCo=o(" \u2014 "),aj=a("a"),vCo=o("XLMWithLMHeadModel"),FCo=o(" (XLM model)"),TCo=l(),d1=a("li"),jie=a("strong"),MCo=o("xlm-prophetnet"),ECo=o(" \u2014 "),nj=a("a"),CCo=o("XLMProphetNetForCausalLM"),wCo=o(" (XLMProphetNet model)"),ACo=l(),c1=a("li"),Die=a("strong"),yCo=o("xlm-roberta"),LCo=o(" \u2014 "),sj=a("a"),xCo=o("XLMRobertaForCausalLM"),$Co=o(" (XLM-RoBERTa model)"),kCo=l(),f1=a("li"),Gie=a("strong"),SCo=o("xlm-roberta-xl"),RCo=o(" \u2014 "),lj=a("a"),BCo=o("XLMRobertaXLForCausalLM"),PCo=o(" (XLM-RoBERTa-XL model)"),ICo=l(),m1=a("li"),Oie=a("strong"),qCo=o("xlnet"),NCo=o(" \u2014 "),ij=a("a"),jCo=o("XLNetLMHeadModel"),DCo=o(" (XLNet model)"),GCo=l(),g1=a("p"),OCo=o("The model is set in evaluation mode by default using "),Vie=a("code"),VCo=o("model.eval()"),XCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=a("code"),zCo=o("model.train()"),QCo=l(),F(h1.$$.fragment),uIe=l(),$i=a("h2"),p1=a("a"),zie=a("span"),F(D0.$$.fragment),WCo=l(),Qie=a("span"),HCo=o("AutoModelForMaskedLM"),_Ie=l(),ko=a("div"),F(G0.$$.fragment),UCo=l(),ki=a("p"),JCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dj=a("a"),YCo=o("from_pretrained()"),KCo=o(" class method or the "),cj=a("a"),ZCo=o("from_config()"),e3o=o(` class
method.`),o3o=l(),O0=a("p"),r3o=o("This class cannot be instantiated directly using "),Wie=a("code"),t3o=o("__init__()"),a3o=o(" (throws an error)."),n3o=l(),at=a("div"),F(V0.$$.fragment),s3o=l(),Hie=a("p"),l3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i3o=l(),Si=a("p"),d3o=o(`Note:
Loading a model from its configuration file does `),Uie=a("strong"),c3o=o("not"),f3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),m3o=o("from_pretrained()"),g3o=o(" to load the model weights."),h3o=l(),F(u1.$$.fragment),p3o=l(),Ye=a("div"),F(X0.$$.fragment),u3o=l(),Jie=a("p"),_3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b3o=l(),xa=a("p"),v3o=o("The model class to instantiate is selected based on the "),Yie=a("code"),F3o=o("model_type"),T3o=o(` property of the config object (either
passed as an argument or loaded from `),Kie=a("code"),M3o=o("pretrained_model_name_or_path"),E3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=a("code"),C3o=o("pretrained_model_name_or_path"),w3o=o(":"),A3o=l(),Q=a("ul"),_1=a("li"),ede=a("strong"),y3o=o("albert"),L3o=o(" \u2014 "),mj=a("a"),x3o=o("AlbertForMaskedLM"),$3o=o(" (ALBERT model)"),k3o=l(),b1=a("li"),ode=a("strong"),S3o=o("bart"),R3o=o(" \u2014 "),gj=a("a"),B3o=o("BartForConditionalGeneration"),P3o=o(" (BART model)"),I3o=l(),v1=a("li"),rde=a("strong"),q3o=o("bert"),N3o=o(" \u2014 "),hj=a("a"),j3o=o("BertForMaskedLM"),D3o=o(" (BERT model)"),G3o=l(),F1=a("li"),tde=a("strong"),O3o=o("big_bird"),V3o=o(" \u2014 "),pj=a("a"),X3o=o("BigBirdForMaskedLM"),z3o=o(" (BigBird model)"),Q3o=l(),T1=a("li"),ade=a("strong"),W3o=o("camembert"),H3o=o(" \u2014 "),uj=a("a"),U3o=o("CamembertForMaskedLM"),J3o=o(" (CamemBERT model)"),Y3o=l(),M1=a("li"),nde=a("strong"),K3o=o("convbert"),Z3o=o(" \u2014 "),_j=a("a"),ewo=o("ConvBertForMaskedLM"),owo=o(" (ConvBERT model)"),rwo=l(),E1=a("li"),sde=a("strong"),two=o("data2vec-text"),awo=o(" \u2014 "),bj=a("a"),nwo=o("Data2VecTextForMaskedLM"),swo=o(" (Data2VecText model)"),lwo=l(),C1=a("li"),lde=a("strong"),iwo=o("deberta"),dwo=o(" \u2014 "),vj=a("a"),cwo=o("DebertaForMaskedLM"),fwo=o(" (DeBERTa model)"),mwo=l(),w1=a("li"),ide=a("strong"),gwo=o("deberta-v2"),hwo=o(" \u2014 "),Fj=a("a"),pwo=o("DebertaV2ForMaskedLM"),uwo=o(" (DeBERTa-v2 model)"),_wo=l(),A1=a("li"),dde=a("strong"),bwo=o("distilbert"),vwo=o(" \u2014 "),Tj=a("a"),Fwo=o("DistilBertForMaskedLM"),Two=o(" (DistilBERT model)"),Mwo=l(),y1=a("li"),cde=a("strong"),Ewo=o("electra"),Cwo=o(" \u2014 "),Mj=a("a"),wwo=o("ElectraForMaskedLM"),Awo=o(" (ELECTRA model)"),ywo=l(),L1=a("li"),fde=a("strong"),Lwo=o("flaubert"),xwo=o(" \u2014 "),Ej=a("a"),$wo=o("FlaubertWithLMHeadModel"),kwo=o(" (FlauBERT model)"),Swo=l(),x1=a("li"),mde=a("strong"),Rwo=o("fnet"),Bwo=o(" \u2014 "),Cj=a("a"),Pwo=o("FNetForMaskedLM"),Iwo=o(" (FNet model)"),qwo=l(),$1=a("li"),gde=a("strong"),Nwo=o("funnel"),jwo=o(" \u2014 "),wj=a("a"),Dwo=o("FunnelForMaskedLM"),Gwo=o(" (Funnel Transformer model)"),Owo=l(),k1=a("li"),hde=a("strong"),Vwo=o("ibert"),Xwo=o(" \u2014 "),Aj=a("a"),zwo=o("IBertForMaskedLM"),Qwo=o(" (I-BERT model)"),Wwo=l(),S1=a("li"),pde=a("strong"),Hwo=o("layoutlm"),Uwo=o(" \u2014 "),yj=a("a"),Jwo=o("LayoutLMForMaskedLM"),Ywo=o(" (LayoutLM model)"),Kwo=l(),R1=a("li"),ude=a("strong"),Zwo=o("longformer"),eAo=o(" \u2014 "),Lj=a("a"),oAo=o("LongformerForMaskedLM"),rAo=o(" (Longformer model)"),tAo=l(),B1=a("li"),_de=a("strong"),aAo=o("mbart"),nAo=o(" \u2014 "),xj=a("a"),sAo=o("MBartForConditionalGeneration"),lAo=o(" (mBART model)"),iAo=l(),P1=a("li"),bde=a("strong"),dAo=o("megatron-bert"),cAo=o(" \u2014 "),$j=a("a"),fAo=o("MegatronBertForMaskedLM"),mAo=o(" (MegatronBert model)"),gAo=l(),I1=a("li"),vde=a("strong"),hAo=o("mobilebert"),pAo=o(" \u2014 "),kj=a("a"),uAo=o("MobileBertForMaskedLM"),_Ao=o(" (MobileBERT model)"),bAo=l(),q1=a("li"),Fde=a("strong"),vAo=o("mpnet"),FAo=o(" \u2014 "),Sj=a("a"),TAo=o("MPNetForMaskedLM"),MAo=o(" (MPNet model)"),EAo=l(),N1=a("li"),Tde=a("strong"),CAo=o("nystromformer"),wAo=o(" \u2014 "),Rj=a("a"),AAo=o("NystromformerForMaskedLM"),yAo=o(" (Nystromformer model)"),LAo=l(),j1=a("li"),Mde=a("strong"),xAo=o("perceiver"),$Ao=o(" \u2014 "),Bj=a("a"),kAo=o("PerceiverForMaskedLM"),SAo=o(" (Perceiver model)"),RAo=l(),D1=a("li"),Ede=a("strong"),BAo=o("qdqbert"),PAo=o(" \u2014 "),Pj=a("a"),IAo=o("QDQBertForMaskedLM"),qAo=o(" (QDQBert model)"),NAo=l(),G1=a("li"),Cde=a("strong"),jAo=o("reformer"),DAo=o(" \u2014 "),Ij=a("a"),GAo=o("ReformerForMaskedLM"),OAo=o(" (Reformer model)"),VAo=l(),O1=a("li"),wde=a("strong"),XAo=o("rembert"),zAo=o(" \u2014 "),qj=a("a"),QAo=o("RemBertForMaskedLM"),WAo=o(" (RemBERT model)"),HAo=l(),V1=a("li"),Ade=a("strong"),UAo=o("roberta"),JAo=o(" \u2014 "),Nj=a("a"),YAo=o("RobertaForMaskedLM"),KAo=o(" (RoBERTa model)"),ZAo=l(),X1=a("li"),yde=a("strong"),e6o=o("roformer"),o6o=o(" \u2014 "),jj=a("a"),r6o=o("RoFormerForMaskedLM"),t6o=o(" (RoFormer model)"),a6o=l(),z1=a("li"),Lde=a("strong"),n6o=o("squeezebert"),s6o=o(" \u2014 "),Dj=a("a"),l6o=o("SqueezeBertForMaskedLM"),i6o=o(" (SqueezeBERT model)"),d6o=l(),Q1=a("li"),xde=a("strong"),c6o=o("tapas"),f6o=o(" \u2014 "),Gj=a("a"),m6o=o("TapasForMaskedLM"),g6o=o(" (TAPAS model)"),h6o=l(),W1=a("li"),$de=a("strong"),p6o=o("wav2vec2"),u6o=o(" \u2014 "),kde=a("code"),_6o=o("Wav2Vec2ForMaskedLM"),b6o=o(" (Wav2Vec2 model)"),v6o=l(),H1=a("li"),Sde=a("strong"),F6o=o("xlm"),T6o=o(" \u2014 "),Oj=a("a"),M6o=o("XLMWithLMHeadModel"),E6o=o(" (XLM model)"),C6o=l(),U1=a("li"),Rde=a("strong"),w6o=o("xlm-roberta"),A6o=o(" \u2014 "),Vj=a("a"),y6o=o("XLMRobertaForMaskedLM"),L6o=o(" (XLM-RoBERTa model)"),x6o=l(),J1=a("li"),Bde=a("strong"),$6o=o("xlm-roberta-xl"),k6o=o(" \u2014 "),Xj=a("a"),S6o=o("XLMRobertaXLForMaskedLM"),R6o=o(" (XLM-RoBERTa-XL model)"),B6o=l(),Y1=a("li"),Pde=a("strong"),P6o=o("yoso"),I6o=o(" \u2014 "),zj=a("a"),q6o=o("YosoForMaskedLM"),N6o=o(" (YOSO model)"),j6o=l(),K1=a("p"),D6o=o("The model is set in evaluation mode by default using "),Ide=a("code"),G6o=o("model.eval()"),O6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),V6o=o("model.train()"),X6o=l(),F(Z1.$$.fragment),bIe=l(),Ri=a("h2"),eb=a("a"),Nde=a("span"),F(z0.$$.fragment),z6o=l(),jde=a("span"),Q6o=o("AutoModelForSeq2SeqLM"),vIe=l(),So=a("div"),F(Q0.$$.fragment),W6o=l(),Bi=a("p"),H6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Qj=a("a"),U6o=o("from_pretrained()"),J6o=o(" class method or the "),Wj=a("a"),Y6o=o("from_config()"),K6o=o(` class
method.`),Z6o=l(),W0=a("p"),e0o=o("This class cannot be instantiated directly using "),Dde=a("code"),o0o=o("__init__()"),r0o=o(" (throws an error)."),t0o=l(),nt=a("div"),F(H0.$$.fragment),a0o=l(),Gde=a("p"),n0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),s0o=l(),Pi=a("p"),l0o=o(`Note:
Loading a model from its configuration file does `),Ode=a("strong"),i0o=o("not"),d0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hj=a("a"),c0o=o("from_pretrained()"),f0o=o(" to load the model weights."),m0o=l(),F(ob.$$.fragment),g0o=l(),Ke=a("div"),F(U0.$$.fragment),h0o=l(),Vde=a("p"),p0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u0o=l(),$a=a("p"),_0o=o("The model class to instantiate is selected based on the "),Xde=a("code"),b0o=o("model_type"),v0o=o(` property of the config object (either
passed as an argument or loaded from `),zde=a("code"),F0o=o("pretrained_model_name_or_path"),T0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qde=a("code"),M0o=o("pretrained_model_name_or_path"),E0o=o(":"),C0o=l(),he=a("ul"),rb=a("li"),Wde=a("strong"),w0o=o("bart"),A0o=o(" \u2014 "),Uj=a("a"),y0o=o("BartForConditionalGeneration"),L0o=o(" (BART model)"),x0o=l(),tb=a("li"),Hde=a("strong"),$0o=o("bigbird_pegasus"),k0o=o(" \u2014 "),Jj=a("a"),S0o=o("BigBirdPegasusForConditionalGeneration"),R0o=o(" (BigBirdPegasus model)"),B0o=l(),ab=a("li"),Ude=a("strong"),P0o=o("blenderbot"),I0o=o(" \u2014 "),Yj=a("a"),q0o=o("BlenderbotForConditionalGeneration"),N0o=o(" (Blenderbot model)"),j0o=l(),nb=a("li"),Jde=a("strong"),D0o=o("blenderbot-small"),G0o=o(" \u2014 "),Kj=a("a"),O0o=o("BlenderbotSmallForConditionalGeneration"),V0o=o(" (BlenderbotSmall model)"),X0o=l(),sb=a("li"),Yde=a("strong"),z0o=o("encoder-decoder"),Q0o=o(" \u2014 "),Zj=a("a"),W0o=o("EncoderDecoderModel"),H0o=o(" (Encoder decoder model)"),U0o=l(),lb=a("li"),Kde=a("strong"),J0o=o("fsmt"),Y0o=o(" \u2014 "),eD=a("a"),K0o=o("FSMTForConditionalGeneration"),Z0o=o(" (FairSeq Machine-Translation model)"),eyo=l(),ib=a("li"),Zde=a("strong"),oyo=o("led"),ryo=o(" \u2014 "),oD=a("a"),tyo=o("LEDForConditionalGeneration"),ayo=o(" (LED model)"),nyo=l(),db=a("li"),ece=a("strong"),syo=o("m2m_100"),lyo=o(" \u2014 "),rD=a("a"),iyo=o("M2M100ForConditionalGeneration"),dyo=o(" (M2M100 model)"),cyo=l(),cb=a("li"),oce=a("strong"),fyo=o("marian"),myo=o(" \u2014 "),tD=a("a"),gyo=o("MarianMTModel"),hyo=o(" (Marian model)"),pyo=l(),fb=a("li"),rce=a("strong"),uyo=o("mbart"),_yo=o(" \u2014 "),aD=a("a"),byo=o("MBartForConditionalGeneration"),vyo=o(" (mBART model)"),Fyo=l(),mb=a("li"),tce=a("strong"),Tyo=o("mt5"),Myo=o(" \u2014 "),nD=a("a"),Eyo=o("MT5ForConditionalGeneration"),Cyo=o(" (mT5 model)"),wyo=l(),gb=a("li"),ace=a("strong"),Ayo=o("pegasus"),yyo=o(" \u2014 "),sD=a("a"),Lyo=o("PegasusForConditionalGeneration"),xyo=o(" (Pegasus model)"),$yo=l(),hb=a("li"),nce=a("strong"),kyo=o("plbart"),Syo=o(" \u2014 "),lD=a("a"),Ryo=o("PLBartForConditionalGeneration"),Byo=o(" (PLBart model)"),Pyo=l(),pb=a("li"),sce=a("strong"),Iyo=o("prophetnet"),qyo=o(" \u2014 "),iD=a("a"),Nyo=o("ProphetNetForConditionalGeneration"),jyo=o(" (ProphetNet model)"),Dyo=l(),ub=a("li"),lce=a("strong"),Gyo=o("t5"),Oyo=o(" \u2014 "),dD=a("a"),Vyo=o("T5ForConditionalGeneration"),Xyo=o(" (T5 model)"),zyo=l(),_b=a("li"),ice=a("strong"),Qyo=o("tapex"),Wyo=o(" \u2014 "),cD=a("a"),Hyo=o("BartForConditionalGeneration"),Uyo=o(" (TAPEX model)"),Jyo=l(),bb=a("li"),dce=a("strong"),Yyo=o("xlm-prophetnet"),Kyo=o(" \u2014 "),fD=a("a"),Zyo=o("XLMProphetNetForConditionalGeneration"),eLo=o(" (XLMProphetNet model)"),oLo=l(),vb=a("p"),rLo=o("The model is set in evaluation mode by default using "),cce=a("code"),tLo=o("model.eval()"),aLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),nLo=o("model.train()"),sLo=l(),F(Fb.$$.fragment),FIe=l(),Ii=a("h2"),Tb=a("a"),mce=a("span"),F(J0.$$.fragment),lLo=l(),gce=a("span"),iLo=o("AutoModelForSequenceClassification"),TIe=l(),Ro=a("div"),F(Y0.$$.fragment),dLo=l(),qi=a("p"),cLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mD=a("a"),fLo=o("from_pretrained()"),mLo=o(" class method or the "),gD=a("a"),gLo=o("from_config()"),hLo=o(` class
method.`),pLo=l(),K0=a("p"),uLo=o("This class cannot be instantiated directly using "),hce=a("code"),_Lo=o("__init__()"),bLo=o(" (throws an error)."),vLo=l(),st=a("div"),F(Z0.$$.fragment),FLo=l(),pce=a("p"),TLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MLo=l(),Ni=a("p"),ELo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),CLo=o("not"),wLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=a("a"),ALo=o("from_pretrained()"),yLo=o(" to load the model weights."),LLo=l(),F(Mb.$$.fragment),xLo=l(),Ze=a("div"),F(ey.$$.fragment),$Lo=l(),_ce=a("p"),kLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SLo=l(),ka=a("p"),RLo=o("The model class to instantiate is selected based on the "),bce=a("code"),BLo=o("model_type"),PLo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),ILo=o("pretrained_model_name_or_path"),qLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),NLo=o("pretrained_model_name_or_path"),jLo=o(":"),DLo=l(),q=a("ul"),Eb=a("li"),Tce=a("strong"),GLo=o("albert"),OLo=o(" \u2014 "),pD=a("a"),VLo=o("AlbertForSequenceClassification"),XLo=o(" (ALBERT model)"),zLo=l(),Cb=a("li"),Mce=a("strong"),QLo=o("bart"),WLo=o(" \u2014 "),uD=a("a"),HLo=o("BartForSequenceClassification"),ULo=o(" (BART model)"),JLo=l(),wb=a("li"),Ece=a("strong"),YLo=o("bert"),KLo=o(" \u2014 "),_D=a("a"),ZLo=o("BertForSequenceClassification"),e8o=o(" (BERT model)"),o8o=l(),Ab=a("li"),Cce=a("strong"),r8o=o("big_bird"),t8o=o(" \u2014 "),bD=a("a"),a8o=o("BigBirdForSequenceClassification"),n8o=o(" (BigBird model)"),s8o=l(),yb=a("li"),wce=a("strong"),l8o=o("bigbird_pegasus"),i8o=o(" \u2014 "),vD=a("a"),d8o=o("BigBirdPegasusForSequenceClassification"),c8o=o(" (BigBirdPegasus model)"),f8o=l(),Lb=a("li"),Ace=a("strong"),m8o=o("camembert"),g8o=o(" \u2014 "),FD=a("a"),h8o=o("CamembertForSequenceClassification"),p8o=o(" (CamemBERT model)"),u8o=l(),xb=a("li"),yce=a("strong"),_8o=o("canine"),b8o=o(" \u2014 "),TD=a("a"),v8o=o("CanineForSequenceClassification"),F8o=o(" (Canine model)"),T8o=l(),$b=a("li"),Lce=a("strong"),M8o=o("convbert"),E8o=o(" \u2014 "),MD=a("a"),C8o=o("ConvBertForSequenceClassification"),w8o=o(" (ConvBERT model)"),A8o=l(),kb=a("li"),xce=a("strong"),y8o=o("ctrl"),L8o=o(" \u2014 "),ED=a("a"),x8o=o("CTRLForSequenceClassification"),$8o=o(" (CTRL model)"),k8o=l(),Sb=a("li"),$ce=a("strong"),S8o=o("data2vec-text"),R8o=o(" \u2014 "),CD=a("a"),B8o=o("Data2VecTextForSequenceClassification"),P8o=o(" (Data2VecText model)"),I8o=l(),Rb=a("li"),kce=a("strong"),q8o=o("deberta"),N8o=o(" \u2014 "),wD=a("a"),j8o=o("DebertaForSequenceClassification"),D8o=o(" (DeBERTa model)"),G8o=l(),Bb=a("li"),Sce=a("strong"),O8o=o("deberta-v2"),V8o=o(" \u2014 "),AD=a("a"),X8o=o("DebertaV2ForSequenceClassification"),z8o=o(" (DeBERTa-v2 model)"),Q8o=l(),Pb=a("li"),Rce=a("strong"),W8o=o("distilbert"),H8o=o(" \u2014 "),yD=a("a"),U8o=o("DistilBertForSequenceClassification"),J8o=o(" (DistilBERT model)"),Y8o=l(),Ib=a("li"),Bce=a("strong"),K8o=o("electra"),Z8o=o(" \u2014 "),LD=a("a"),exo=o("ElectraForSequenceClassification"),oxo=o(" (ELECTRA model)"),rxo=l(),qb=a("li"),Pce=a("strong"),txo=o("flaubert"),axo=o(" \u2014 "),xD=a("a"),nxo=o("FlaubertForSequenceClassification"),sxo=o(" (FlauBERT model)"),lxo=l(),Nb=a("li"),Ice=a("strong"),ixo=o("fnet"),dxo=o(" \u2014 "),$D=a("a"),cxo=o("FNetForSequenceClassification"),fxo=o(" (FNet model)"),mxo=l(),jb=a("li"),qce=a("strong"),gxo=o("funnel"),hxo=o(" \u2014 "),kD=a("a"),pxo=o("FunnelForSequenceClassification"),uxo=o(" (Funnel Transformer model)"),_xo=l(),Db=a("li"),Nce=a("strong"),bxo=o("gpt2"),vxo=o(" \u2014 "),SD=a("a"),Fxo=o("GPT2ForSequenceClassification"),Txo=o(" (OpenAI GPT-2 model)"),Mxo=l(),Gb=a("li"),jce=a("strong"),Exo=o("gpt_neo"),Cxo=o(" \u2014 "),RD=a("a"),wxo=o("GPTNeoForSequenceClassification"),Axo=o(" (GPT Neo model)"),yxo=l(),Ob=a("li"),Dce=a("strong"),Lxo=o("gptj"),xxo=o(" \u2014 "),BD=a("a"),$xo=o("GPTJForSequenceClassification"),kxo=o(" (GPT-J model)"),Sxo=l(),Vb=a("li"),Gce=a("strong"),Rxo=o("ibert"),Bxo=o(" \u2014 "),PD=a("a"),Pxo=o("IBertForSequenceClassification"),Ixo=o(" (I-BERT model)"),qxo=l(),Xb=a("li"),Oce=a("strong"),Nxo=o("layoutlm"),jxo=o(" \u2014 "),ID=a("a"),Dxo=o("LayoutLMForSequenceClassification"),Gxo=o(" (LayoutLM model)"),Oxo=l(),zb=a("li"),Vce=a("strong"),Vxo=o("layoutlmv2"),Xxo=o(" \u2014 "),qD=a("a"),zxo=o("LayoutLMv2ForSequenceClassification"),Qxo=o(" (LayoutLMv2 model)"),Wxo=l(),Qb=a("li"),Xce=a("strong"),Hxo=o("led"),Uxo=o(" \u2014 "),ND=a("a"),Jxo=o("LEDForSequenceClassification"),Yxo=o(" (LED model)"),Kxo=l(),Wb=a("li"),zce=a("strong"),Zxo=o("longformer"),e9o=o(" \u2014 "),jD=a("a"),o9o=o("LongformerForSequenceClassification"),r9o=o(" (Longformer model)"),t9o=l(),Hb=a("li"),Qce=a("strong"),a9o=o("mbart"),n9o=o(" \u2014 "),DD=a("a"),s9o=o("MBartForSequenceClassification"),l9o=o(" (mBART model)"),i9o=l(),Ub=a("li"),Wce=a("strong"),d9o=o("megatron-bert"),c9o=o(" \u2014 "),GD=a("a"),f9o=o("MegatronBertForSequenceClassification"),m9o=o(" (MegatronBert model)"),g9o=l(),Jb=a("li"),Hce=a("strong"),h9o=o("mobilebert"),p9o=o(" \u2014 "),OD=a("a"),u9o=o("MobileBertForSequenceClassification"),_9o=o(" (MobileBERT model)"),b9o=l(),Yb=a("li"),Uce=a("strong"),v9o=o("mpnet"),F9o=o(" \u2014 "),VD=a("a"),T9o=o("MPNetForSequenceClassification"),M9o=o(" (MPNet model)"),E9o=l(),Kb=a("li"),Jce=a("strong"),C9o=o("nystromformer"),w9o=o(" \u2014 "),XD=a("a"),A9o=o("NystromformerForSequenceClassification"),y9o=o(" (Nystromformer model)"),L9o=l(),Zb=a("li"),Yce=a("strong"),x9o=o("openai-gpt"),$9o=o(" \u2014 "),zD=a("a"),k9o=o("OpenAIGPTForSequenceClassification"),S9o=o(" (OpenAI GPT model)"),R9o=l(),e4=a("li"),Kce=a("strong"),B9o=o("perceiver"),P9o=o(" \u2014 "),QD=a("a"),I9o=o("PerceiverForSequenceClassification"),q9o=o(" (Perceiver model)"),N9o=l(),o4=a("li"),Zce=a("strong"),j9o=o("plbart"),D9o=o(" \u2014 "),WD=a("a"),G9o=o("PLBartForSequenceClassification"),O9o=o(" (PLBart model)"),V9o=l(),r4=a("li"),efe=a("strong"),X9o=o("qdqbert"),z9o=o(" \u2014 "),HD=a("a"),Q9o=o("QDQBertForSequenceClassification"),W9o=o(" (QDQBert model)"),H9o=l(),t4=a("li"),ofe=a("strong"),U9o=o("reformer"),J9o=o(" \u2014 "),UD=a("a"),Y9o=o("ReformerForSequenceClassification"),K9o=o(" (Reformer model)"),Z9o=l(),a4=a("li"),rfe=a("strong"),e$o=o("rembert"),o$o=o(" \u2014 "),JD=a("a"),r$o=o("RemBertForSequenceClassification"),t$o=o(" (RemBERT model)"),a$o=l(),n4=a("li"),tfe=a("strong"),n$o=o("roberta"),s$o=o(" \u2014 "),YD=a("a"),l$o=o("RobertaForSequenceClassification"),i$o=o(" (RoBERTa model)"),d$o=l(),s4=a("li"),afe=a("strong"),c$o=o("roformer"),f$o=o(" \u2014 "),KD=a("a"),m$o=o("RoFormerForSequenceClassification"),g$o=o(" (RoFormer model)"),h$o=l(),l4=a("li"),nfe=a("strong"),p$o=o("squeezebert"),u$o=o(" \u2014 "),ZD=a("a"),_$o=o("SqueezeBertForSequenceClassification"),b$o=o(" (SqueezeBERT model)"),v$o=l(),i4=a("li"),sfe=a("strong"),F$o=o("tapas"),T$o=o(" \u2014 "),eG=a("a"),M$o=o("TapasForSequenceClassification"),E$o=o(" (TAPAS model)"),C$o=l(),d4=a("li"),lfe=a("strong"),w$o=o("tapex"),A$o=o(" \u2014 "),oG=a("a"),y$o=o("BartForSequenceClassification"),L$o=o(" (TAPEX model)"),x$o=l(),c4=a("li"),ife=a("strong"),$$o=o("transfo-xl"),k$o=o(" \u2014 "),rG=a("a"),S$o=o("TransfoXLForSequenceClassification"),R$o=o(" (Transformer-XL model)"),B$o=l(),f4=a("li"),dfe=a("strong"),P$o=o("xlm"),I$o=o(" \u2014 "),tG=a("a"),q$o=o("XLMForSequenceClassification"),N$o=o(" (XLM model)"),j$o=l(),m4=a("li"),cfe=a("strong"),D$o=o("xlm-roberta"),G$o=o(" \u2014 "),aG=a("a"),O$o=o("XLMRobertaForSequenceClassification"),V$o=o(" (XLM-RoBERTa model)"),X$o=l(),g4=a("li"),ffe=a("strong"),z$o=o("xlm-roberta-xl"),Q$o=o(" \u2014 "),nG=a("a"),W$o=o("XLMRobertaXLForSequenceClassification"),H$o=o(" (XLM-RoBERTa-XL model)"),U$o=l(),h4=a("li"),mfe=a("strong"),J$o=o("xlnet"),Y$o=o(" \u2014 "),sG=a("a"),K$o=o("XLNetForSequenceClassification"),Z$o=o(" (XLNet model)"),eko=l(),p4=a("li"),gfe=a("strong"),oko=o("yoso"),rko=o(" \u2014 "),lG=a("a"),tko=o("YosoForSequenceClassification"),ako=o(" (YOSO model)"),nko=l(),u4=a("p"),sko=o("The model is set in evaluation mode by default using "),hfe=a("code"),lko=o("model.eval()"),iko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=a("code"),dko=o("model.train()"),cko=l(),F(_4.$$.fragment),MIe=l(),ji=a("h2"),b4=a("a"),ufe=a("span"),F(oy.$$.fragment),fko=l(),_fe=a("span"),mko=o("AutoModelForMultipleChoice"),EIe=l(),Bo=a("div"),F(ry.$$.fragment),gko=l(),Di=a("p"),hko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iG=a("a"),pko=o("from_pretrained()"),uko=o(" class method or the "),dG=a("a"),_ko=o("from_config()"),bko=o(` class
method.`),vko=l(),ty=a("p"),Fko=o("This class cannot be instantiated directly using "),bfe=a("code"),Tko=o("__init__()"),Mko=o(" (throws an error)."),Eko=l(),lt=a("div"),F(ay.$$.fragment),Cko=l(),vfe=a("p"),wko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ako=l(),Gi=a("p"),yko=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),Lko=o("not"),xko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),$ko=o("from_pretrained()"),kko=o(" to load the model weights."),Sko=l(),F(v4.$$.fragment),Rko=l(),eo=a("div"),F(ny.$$.fragment),Bko=l(),Tfe=a("p"),Pko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Iko=l(),Sa=a("p"),qko=o("The model class to instantiate is selected based on the "),Mfe=a("code"),Nko=o("model_type"),jko=o(` property of the config object (either
passed as an argument or loaded from `),Efe=a("code"),Dko=o("pretrained_model_name_or_path"),Gko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=a("code"),Oko=o("pretrained_model_name_or_path"),Vko=o(":"),Xko=l(),Y=a("ul"),F4=a("li"),wfe=a("strong"),zko=o("albert"),Qko=o(" \u2014 "),fG=a("a"),Wko=o("AlbertForMultipleChoice"),Hko=o(" (ALBERT model)"),Uko=l(),T4=a("li"),Afe=a("strong"),Jko=o("bert"),Yko=o(" \u2014 "),mG=a("a"),Kko=o("BertForMultipleChoice"),Zko=o(" (BERT model)"),eSo=l(),M4=a("li"),yfe=a("strong"),oSo=o("big_bird"),rSo=o(" \u2014 "),gG=a("a"),tSo=o("BigBirdForMultipleChoice"),aSo=o(" (BigBird model)"),nSo=l(),E4=a("li"),Lfe=a("strong"),sSo=o("camembert"),lSo=o(" \u2014 "),hG=a("a"),iSo=o("CamembertForMultipleChoice"),dSo=o(" (CamemBERT model)"),cSo=l(),C4=a("li"),xfe=a("strong"),fSo=o("canine"),mSo=o(" \u2014 "),pG=a("a"),gSo=o("CanineForMultipleChoice"),hSo=o(" (Canine model)"),pSo=l(),w4=a("li"),$fe=a("strong"),uSo=o("convbert"),_So=o(" \u2014 "),uG=a("a"),bSo=o("ConvBertForMultipleChoice"),vSo=o(" (ConvBERT model)"),FSo=l(),A4=a("li"),kfe=a("strong"),TSo=o("data2vec-text"),MSo=o(" \u2014 "),_G=a("a"),ESo=o("Data2VecTextForMultipleChoice"),CSo=o(" (Data2VecText model)"),wSo=l(),y4=a("li"),Sfe=a("strong"),ASo=o("deberta-v2"),ySo=o(" \u2014 "),bG=a("a"),LSo=o("DebertaV2ForMultipleChoice"),xSo=o(" (DeBERTa-v2 model)"),$So=l(),L4=a("li"),Rfe=a("strong"),kSo=o("distilbert"),SSo=o(" \u2014 "),vG=a("a"),RSo=o("DistilBertForMultipleChoice"),BSo=o(" (DistilBERT model)"),PSo=l(),x4=a("li"),Bfe=a("strong"),ISo=o("electra"),qSo=o(" \u2014 "),FG=a("a"),NSo=o("ElectraForMultipleChoice"),jSo=o(" (ELECTRA model)"),DSo=l(),$4=a("li"),Pfe=a("strong"),GSo=o("flaubert"),OSo=o(" \u2014 "),TG=a("a"),VSo=o("FlaubertForMultipleChoice"),XSo=o(" (FlauBERT model)"),zSo=l(),k4=a("li"),Ife=a("strong"),QSo=o("fnet"),WSo=o(" \u2014 "),MG=a("a"),HSo=o("FNetForMultipleChoice"),USo=o(" (FNet model)"),JSo=l(),S4=a("li"),qfe=a("strong"),YSo=o("funnel"),KSo=o(" \u2014 "),EG=a("a"),ZSo=o("FunnelForMultipleChoice"),eRo=o(" (Funnel Transformer model)"),oRo=l(),R4=a("li"),Nfe=a("strong"),rRo=o("ibert"),tRo=o(" \u2014 "),CG=a("a"),aRo=o("IBertForMultipleChoice"),nRo=o(" (I-BERT model)"),sRo=l(),B4=a("li"),jfe=a("strong"),lRo=o("longformer"),iRo=o(" \u2014 "),wG=a("a"),dRo=o("LongformerForMultipleChoice"),cRo=o(" (Longformer model)"),fRo=l(),P4=a("li"),Dfe=a("strong"),mRo=o("megatron-bert"),gRo=o(" \u2014 "),AG=a("a"),hRo=o("MegatronBertForMultipleChoice"),pRo=o(" (MegatronBert model)"),uRo=l(),I4=a("li"),Gfe=a("strong"),_Ro=o("mobilebert"),bRo=o(" \u2014 "),yG=a("a"),vRo=o("MobileBertForMultipleChoice"),FRo=o(" (MobileBERT model)"),TRo=l(),q4=a("li"),Ofe=a("strong"),MRo=o("mpnet"),ERo=o(" \u2014 "),LG=a("a"),CRo=o("MPNetForMultipleChoice"),wRo=o(" (MPNet model)"),ARo=l(),N4=a("li"),Vfe=a("strong"),yRo=o("nystromformer"),LRo=o(" \u2014 "),xG=a("a"),xRo=o("NystromformerForMultipleChoice"),$Ro=o(" (Nystromformer model)"),kRo=l(),j4=a("li"),Xfe=a("strong"),SRo=o("qdqbert"),RRo=o(" \u2014 "),$G=a("a"),BRo=o("QDQBertForMultipleChoice"),PRo=o(" (QDQBert model)"),IRo=l(),D4=a("li"),zfe=a("strong"),qRo=o("rembert"),NRo=o(" \u2014 "),kG=a("a"),jRo=o("RemBertForMultipleChoice"),DRo=o(" (RemBERT model)"),GRo=l(),G4=a("li"),Qfe=a("strong"),ORo=o("roberta"),VRo=o(" \u2014 "),SG=a("a"),XRo=o("RobertaForMultipleChoice"),zRo=o(" (RoBERTa model)"),QRo=l(),O4=a("li"),Wfe=a("strong"),WRo=o("roformer"),HRo=o(" \u2014 "),RG=a("a"),URo=o("RoFormerForMultipleChoice"),JRo=o(" (RoFormer model)"),YRo=l(),V4=a("li"),Hfe=a("strong"),KRo=o("squeezebert"),ZRo=o(" \u2014 "),BG=a("a"),eBo=o("SqueezeBertForMultipleChoice"),oBo=o(" (SqueezeBERT model)"),rBo=l(),X4=a("li"),Ufe=a("strong"),tBo=o("xlm"),aBo=o(" \u2014 "),PG=a("a"),nBo=o("XLMForMultipleChoice"),sBo=o(" (XLM model)"),lBo=l(),z4=a("li"),Jfe=a("strong"),iBo=o("xlm-roberta"),dBo=o(" \u2014 "),IG=a("a"),cBo=o("XLMRobertaForMultipleChoice"),fBo=o(" (XLM-RoBERTa model)"),mBo=l(),Q4=a("li"),Yfe=a("strong"),gBo=o("xlm-roberta-xl"),hBo=o(" \u2014 "),qG=a("a"),pBo=o("XLMRobertaXLForMultipleChoice"),uBo=o(" (XLM-RoBERTa-XL model)"),_Bo=l(),W4=a("li"),Kfe=a("strong"),bBo=o("xlnet"),vBo=o(" \u2014 "),NG=a("a"),FBo=o("XLNetForMultipleChoice"),TBo=o(" (XLNet model)"),MBo=l(),H4=a("li"),Zfe=a("strong"),EBo=o("yoso"),CBo=o(" \u2014 "),jG=a("a"),wBo=o("YosoForMultipleChoice"),ABo=o(" (YOSO model)"),yBo=l(),U4=a("p"),LBo=o("The model is set in evaluation mode by default using "),eme=a("code"),xBo=o("model.eval()"),$Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),kBo=o("model.train()"),SBo=l(),F(J4.$$.fragment),CIe=l(),Oi=a("h2"),Y4=a("a"),rme=a("span"),F(sy.$$.fragment),RBo=l(),tme=a("span"),BBo=o("AutoModelForNextSentencePrediction"),wIe=l(),Po=a("div"),F(ly.$$.fragment),PBo=l(),Vi=a("p"),IBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DG=a("a"),qBo=o("from_pretrained()"),NBo=o(" class method or the "),GG=a("a"),jBo=o("from_config()"),DBo=o(` class
method.`),GBo=l(),iy=a("p"),OBo=o("This class cannot be instantiated directly using "),ame=a("code"),VBo=o("__init__()"),XBo=o(" (throws an error)."),zBo=l(),it=a("div"),F(dy.$$.fragment),QBo=l(),nme=a("p"),WBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HBo=l(),Xi=a("p"),UBo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),JBo=o("not"),YBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),KBo=o("from_pretrained()"),ZBo=o(" to load the model weights."),ePo=l(),F(K4.$$.fragment),oPo=l(),oo=a("div"),F(cy.$$.fragment),rPo=l(),lme=a("p"),tPo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aPo=l(),Ra=a("p"),nPo=o("The model class to instantiate is selected based on the "),ime=a("code"),sPo=o("model_type"),lPo=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),iPo=o("pretrained_model_name_or_path"),dPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),cPo=o("pretrained_model_name_or_path"),fPo=o(":"),mPo=l(),Yr=a("ul"),Z4=a("li"),fme=a("strong"),gPo=o("bert"),hPo=o(" \u2014 "),VG=a("a"),pPo=o("BertForNextSentencePrediction"),uPo=o(" (BERT model)"),_Po=l(),e2=a("li"),mme=a("strong"),bPo=o("fnet"),vPo=o(" \u2014 "),XG=a("a"),FPo=o("FNetForNextSentencePrediction"),TPo=o(" (FNet model)"),MPo=l(),o2=a("li"),gme=a("strong"),EPo=o("megatron-bert"),CPo=o(" \u2014 "),zG=a("a"),wPo=o("MegatronBertForNextSentencePrediction"),APo=o(" (MegatronBert model)"),yPo=l(),r2=a("li"),hme=a("strong"),LPo=o("mobilebert"),xPo=o(" \u2014 "),QG=a("a"),$Po=o("MobileBertForNextSentencePrediction"),kPo=o(" (MobileBERT model)"),SPo=l(),t2=a("li"),pme=a("strong"),RPo=o("qdqbert"),BPo=o(" \u2014 "),WG=a("a"),PPo=o("QDQBertForNextSentencePrediction"),IPo=o(" (QDQBert model)"),qPo=l(),a2=a("p"),NPo=o("The model is set in evaluation mode by default using "),ume=a("code"),jPo=o("model.eval()"),DPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),GPo=o("model.train()"),OPo=l(),F(n2.$$.fragment),AIe=l(),zi=a("h2"),s2=a("a"),bme=a("span"),F(fy.$$.fragment),VPo=l(),vme=a("span"),XPo=o("AutoModelForTokenClassification"),yIe=l(),Io=a("div"),F(my.$$.fragment),zPo=l(),Qi=a("p"),QPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HG=a("a"),WPo=o("from_pretrained()"),HPo=o(" class method or the "),UG=a("a"),UPo=o("from_config()"),JPo=o(` class
method.`),YPo=l(),gy=a("p"),KPo=o("This class cannot be instantiated directly using "),Fme=a("code"),ZPo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),dt=a("div"),F(hy.$$.fragment),rIo=l(),Tme=a("p"),tIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aIo=l(),Wi=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(l2.$$.fragment),fIo=l(),ro=a("div"),F(py.$$.fragment),mIo=l(),Eme=a("p"),gIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hIo=l(),Ba=a("p"),pIo=o("The model class to instantiate is selected based on the "),Cme=a("code"),uIo=o("model_type"),_Io=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),U=a("ul"),i2=a("li"),yme=a("strong"),EIo=o("albert"),CIo=o(" \u2014 "),YG=a("a"),wIo=o("AlbertForTokenClassification"),AIo=o(" (ALBERT model)"),yIo=l(),d2=a("li"),Lme=a("strong"),LIo=o("bert"),xIo=o(" \u2014 "),KG=a("a"),$Io=o("BertForTokenClassification"),kIo=o(" (BERT model)"),SIo=l(),c2=a("li"),xme=a("strong"),RIo=o("big_bird"),BIo=o(" \u2014 "),ZG=a("a"),PIo=o("BigBirdForTokenClassification"),IIo=o(" (BigBird model)"),qIo=l(),f2=a("li"),$me=a("strong"),NIo=o("camembert"),jIo=o(" \u2014 "),eO=a("a"),DIo=o("CamembertForTokenClassification"),GIo=o(" (CamemBERT model)"),OIo=l(),m2=a("li"),kme=a("strong"),VIo=o("canine"),XIo=o(" \u2014 "),oO=a("a"),zIo=o("CanineForTokenClassification"),QIo=o(" (Canine model)"),WIo=l(),g2=a("li"),Sme=a("strong"),HIo=o("convbert"),UIo=o(" \u2014 "),rO=a("a"),JIo=o("ConvBertForTokenClassification"),YIo=o(" (ConvBERT model)"),KIo=l(),h2=a("li"),Rme=a("strong"),ZIo=o("data2vec-text"),eqo=o(" \u2014 "),tO=a("a"),oqo=o("Data2VecTextForTokenClassification"),rqo=o(" (Data2VecText model)"),tqo=l(),p2=a("li"),Bme=a("strong"),aqo=o("deberta"),nqo=o(" \u2014 "),aO=a("a"),sqo=o("DebertaForTokenClassification"),lqo=o(" (DeBERTa model)"),iqo=l(),u2=a("li"),Pme=a("strong"),dqo=o("deberta-v2"),cqo=o(" \u2014 "),nO=a("a"),fqo=o("DebertaV2ForTokenClassification"),mqo=o(" (DeBERTa-v2 model)"),gqo=l(),_2=a("li"),Ime=a("strong"),hqo=o("distilbert"),pqo=o(" \u2014 "),sO=a("a"),uqo=o("DistilBertForTokenClassification"),_qo=o(" (DistilBERT model)"),bqo=l(),b2=a("li"),qme=a("strong"),vqo=o("electra"),Fqo=o(" \u2014 "),lO=a("a"),Tqo=o("ElectraForTokenClassification"),Mqo=o(" (ELECTRA model)"),Eqo=l(),v2=a("li"),Nme=a("strong"),Cqo=o("flaubert"),wqo=o(" \u2014 "),iO=a("a"),Aqo=o("FlaubertForTokenClassification"),yqo=o(" (FlauBERT model)"),Lqo=l(),F2=a("li"),jme=a("strong"),xqo=o("fnet"),$qo=o(" \u2014 "),dO=a("a"),kqo=o("FNetForTokenClassification"),Sqo=o(" (FNet model)"),Rqo=l(),T2=a("li"),Dme=a("strong"),Bqo=o("funnel"),Pqo=o(" \u2014 "),cO=a("a"),Iqo=o("FunnelForTokenClassification"),qqo=o(" (Funnel Transformer model)"),Nqo=l(),M2=a("li"),Gme=a("strong"),jqo=o("gpt2"),Dqo=o(" \u2014 "),fO=a("a"),Gqo=o("GPT2ForTokenClassification"),Oqo=o(" (OpenAI GPT-2 model)"),Vqo=l(),E2=a("li"),Ome=a("strong"),Xqo=o("ibert"),zqo=o(" \u2014 "),mO=a("a"),Qqo=o("IBertForTokenClassification"),Wqo=o(" (I-BERT model)"),Hqo=l(),C2=a("li"),Vme=a("strong"),Uqo=o("layoutlm"),Jqo=o(" \u2014 "),gO=a("a"),Yqo=o("LayoutLMForTokenClassification"),Kqo=o(" (LayoutLM model)"),Zqo=l(),w2=a("li"),Xme=a("strong"),eNo=o("layoutlmv2"),oNo=o(" \u2014 "),hO=a("a"),rNo=o("LayoutLMv2ForTokenClassification"),tNo=o(" (LayoutLMv2 model)"),aNo=l(),A2=a("li"),zme=a("strong"),nNo=o("longformer"),sNo=o(" \u2014 "),pO=a("a"),lNo=o("LongformerForTokenClassification"),iNo=o(" (Longformer model)"),dNo=l(),y2=a("li"),Qme=a("strong"),cNo=o("megatron-bert"),fNo=o(" \u2014 "),uO=a("a"),mNo=o("MegatronBertForTokenClassification"),gNo=o(" (MegatronBert model)"),hNo=l(),L2=a("li"),Wme=a("strong"),pNo=o("mobilebert"),uNo=o(" \u2014 "),_O=a("a"),_No=o("MobileBertForTokenClassification"),bNo=o(" (MobileBERT model)"),vNo=l(),x2=a("li"),Hme=a("strong"),FNo=o("mpnet"),TNo=o(" \u2014 "),bO=a("a"),MNo=o("MPNetForTokenClassification"),ENo=o(" (MPNet model)"),CNo=l(),$2=a("li"),Ume=a("strong"),wNo=o("nystromformer"),ANo=o(" \u2014 "),vO=a("a"),yNo=o("NystromformerForTokenClassification"),LNo=o(" (Nystromformer model)"),xNo=l(),k2=a("li"),Jme=a("strong"),$No=o("qdqbert"),kNo=o(" \u2014 "),FO=a("a"),SNo=o("QDQBertForTokenClassification"),RNo=o(" (QDQBert model)"),BNo=l(),S2=a("li"),Yme=a("strong"),PNo=o("rembert"),INo=o(" \u2014 "),TO=a("a"),qNo=o("RemBertForTokenClassification"),NNo=o(" (RemBERT model)"),jNo=l(),R2=a("li"),Kme=a("strong"),DNo=o("roberta"),GNo=o(" \u2014 "),MO=a("a"),ONo=o("RobertaForTokenClassification"),VNo=o(" (RoBERTa model)"),XNo=l(),B2=a("li"),Zme=a("strong"),zNo=o("roformer"),QNo=o(" \u2014 "),EO=a("a"),WNo=o("RoFormerForTokenClassification"),HNo=o(" (RoFormer model)"),UNo=l(),P2=a("li"),ege=a("strong"),JNo=o("squeezebert"),YNo=o(" \u2014 "),CO=a("a"),KNo=o("SqueezeBertForTokenClassification"),ZNo=o(" (SqueezeBERT model)"),ejo=l(),I2=a("li"),oge=a("strong"),ojo=o("xlm"),rjo=o(" \u2014 "),wO=a("a"),tjo=o("XLMForTokenClassification"),ajo=o(" (XLM model)"),njo=l(),q2=a("li"),rge=a("strong"),sjo=o("xlm-roberta"),ljo=o(" \u2014 "),AO=a("a"),ijo=o("XLMRobertaForTokenClassification"),djo=o(" (XLM-RoBERTa model)"),cjo=l(),N2=a("li"),tge=a("strong"),fjo=o("xlm-roberta-xl"),mjo=o(" \u2014 "),yO=a("a"),gjo=o("XLMRobertaXLForTokenClassification"),hjo=o(" (XLM-RoBERTa-XL model)"),pjo=l(),j2=a("li"),age=a("strong"),ujo=o("xlnet"),_jo=o(" \u2014 "),LO=a("a"),bjo=o("XLNetForTokenClassification"),vjo=o(" (XLNet model)"),Fjo=l(),D2=a("li"),nge=a("strong"),Tjo=o("yoso"),Mjo=o(" \u2014 "),xO=a("a"),Ejo=o("YosoForTokenClassification"),Cjo=o(" (YOSO model)"),wjo=l(),G2=a("p"),Ajo=o("The model is set in evaluation mode by default using "),sge=a("code"),yjo=o("model.eval()"),Ljo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),xjo=o("model.train()"),$jo=l(),F(O2.$$.fragment),LIe=l(),Hi=a("h2"),V2=a("a"),ige=a("span"),F(uy.$$.fragment),kjo=l(),dge=a("span"),Sjo=o("AutoModelForQuestionAnswering"),xIe=l(),qo=a("div"),F(_y.$$.fragment),Rjo=l(),Ui=a("p"),Bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$O=a("a"),Pjo=o("from_pretrained()"),Ijo=o(" class method or the "),kO=a("a"),qjo=o("from_config()"),Njo=o(` class
method.`),jjo=l(),by=a("p"),Djo=o("This class cannot be instantiated directly using "),cge=a("code"),Gjo=o("__init__()"),Ojo=o(" (throws an error)."),Vjo=l(),ct=a("div"),F(vy.$$.fragment),Xjo=l(),fge=a("p"),zjo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qjo=l(),Ji=a("p"),Wjo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),Hjo=o("not"),Ujo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" to load the model weights."),Kjo=l(),F(X2.$$.fragment),Zjo=l(),to=a("div"),F(Fy.$$.fragment),eDo=l(),gge=a("p"),oDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rDo=l(),Pa=a("p"),tDo=o("The model class to instantiate is selected based on the "),hge=a("code"),aDo=o("model_type"),nDo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),sDo=o("pretrained_model_name_or_path"),lDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),iDo=o("pretrained_model_name_or_path"),dDo=o(":"),cDo=l(),O=a("ul"),z2=a("li"),_ge=a("strong"),fDo=o("albert"),mDo=o(" \u2014 "),RO=a("a"),gDo=o("AlbertForQuestionAnswering"),hDo=o(" (ALBERT model)"),pDo=l(),Q2=a("li"),bge=a("strong"),uDo=o("bart"),_Do=o(" \u2014 "),BO=a("a"),bDo=o("BartForQuestionAnswering"),vDo=o(" (BART model)"),FDo=l(),W2=a("li"),vge=a("strong"),TDo=o("bert"),MDo=o(" \u2014 "),PO=a("a"),EDo=o("BertForQuestionAnswering"),CDo=o(" (BERT model)"),wDo=l(),H2=a("li"),Fge=a("strong"),ADo=o("big_bird"),yDo=o(" \u2014 "),IO=a("a"),LDo=o("BigBirdForQuestionAnswering"),xDo=o(" (BigBird model)"),$Do=l(),U2=a("li"),Tge=a("strong"),kDo=o("bigbird_pegasus"),SDo=o(" \u2014 "),qO=a("a"),RDo=o("BigBirdPegasusForQuestionAnswering"),BDo=o(" (BigBirdPegasus model)"),PDo=l(),J2=a("li"),Mge=a("strong"),IDo=o("camembert"),qDo=o(" \u2014 "),NO=a("a"),NDo=o("CamembertForQuestionAnswering"),jDo=o(" (CamemBERT model)"),DDo=l(),Y2=a("li"),Ege=a("strong"),GDo=o("canine"),ODo=o(" \u2014 "),jO=a("a"),VDo=o("CanineForQuestionAnswering"),XDo=o(" (Canine model)"),zDo=l(),K2=a("li"),Cge=a("strong"),QDo=o("convbert"),WDo=o(" \u2014 "),DO=a("a"),HDo=o("ConvBertForQuestionAnswering"),UDo=o(" (ConvBERT model)"),JDo=l(),Z2=a("li"),wge=a("strong"),YDo=o("data2vec-text"),KDo=o(" \u2014 "),GO=a("a"),ZDo=o("Data2VecTextForQuestionAnswering"),eGo=o(" (Data2VecText model)"),oGo=l(),ev=a("li"),Age=a("strong"),rGo=o("deberta"),tGo=o(" \u2014 "),OO=a("a"),aGo=o("DebertaForQuestionAnswering"),nGo=o(" (DeBERTa model)"),sGo=l(),ov=a("li"),yge=a("strong"),lGo=o("deberta-v2"),iGo=o(" \u2014 "),VO=a("a"),dGo=o("DebertaV2ForQuestionAnswering"),cGo=o(" (DeBERTa-v2 model)"),fGo=l(),rv=a("li"),Lge=a("strong"),mGo=o("distilbert"),gGo=o(" \u2014 "),XO=a("a"),hGo=o("DistilBertForQuestionAnswering"),pGo=o(" (DistilBERT model)"),uGo=l(),tv=a("li"),xge=a("strong"),_Go=o("electra"),bGo=o(" \u2014 "),zO=a("a"),vGo=o("ElectraForQuestionAnswering"),FGo=o(" (ELECTRA model)"),TGo=l(),av=a("li"),$ge=a("strong"),MGo=o("flaubert"),EGo=o(" \u2014 "),QO=a("a"),CGo=o("FlaubertForQuestionAnsweringSimple"),wGo=o(" (FlauBERT model)"),AGo=l(),nv=a("li"),kge=a("strong"),yGo=o("fnet"),LGo=o(" \u2014 "),WO=a("a"),xGo=o("FNetForQuestionAnswering"),$Go=o(" (FNet model)"),kGo=l(),sv=a("li"),Sge=a("strong"),SGo=o("funnel"),RGo=o(" \u2014 "),HO=a("a"),BGo=o("FunnelForQuestionAnswering"),PGo=o(" (Funnel Transformer model)"),IGo=l(),lv=a("li"),Rge=a("strong"),qGo=o("gptj"),NGo=o(" \u2014 "),UO=a("a"),jGo=o("GPTJForQuestionAnswering"),DGo=o(" (GPT-J model)"),GGo=l(),iv=a("li"),Bge=a("strong"),OGo=o("ibert"),VGo=o(" \u2014 "),JO=a("a"),XGo=o("IBertForQuestionAnswering"),zGo=o(" (I-BERT model)"),QGo=l(),dv=a("li"),Pge=a("strong"),WGo=o("layoutlmv2"),HGo=o(" \u2014 "),YO=a("a"),UGo=o("LayoutLMv2ForQuestionAnswering"),JGo=o(" (LayoutLMv2 model)"),YGo=l(),cv=a("li"),Ige=a("strong"),KGo=o("led"),ZGo=o(" \u2014 "),KO=a("a"),eOo=o("LEDForQuestionAnswering"),oOo=o(" (LED model)"),rOo=l(),fv=a("li"),qge=a("strong"),tOo=o("longformer"),aOo=o(" \u2014 "),ZO=a("a"),nOo=o("LongformerForQuestionAnswering"),sOo=o(" (Longformer model)"),lOo=l(),mv=a("li"),Nge=a("strong"),iOo=o("lxmert"),dOo=o(" \u2014 "),eV=a("a"),cOo=o("LxmertForQuestionAnswering"),fOo=o(" (LXMERT model)"),mOo=l(),gv=a("li"),jge=a("strong"),gOo=o("mbart"),hOo=o(" \u2014 "),oV=a("a"),pOo=o("MBartForQuestionAnswering"),uOo=o(" (mBART model)"),_Oo=l(),hv=a("li"),Dge=a("strong"),bOo=o("megatron-bert"),vOo=o(" \u2014 "),rV=a("a"),FOo=o("MegatronBertForQuestionAnswering"),TOo=o(" (MegatronBert model)"),MOo=l(),pv=a("li"),Gge=a("strong"),EOo=o("mobilebert"),COo=o(" \u2014 "),tV=a("a"),wOo=o("MobileBertForQuestionAnswering"),AOo=o(" (MobileBERT model)"),yOo=l(),uv=a("li"),Oge=a("strong"),LOo=o("mpnet"),xOo=o(" \u2014 "),aV=a("a"),$Oo=o("MPNetForQuestionAnswering"),kOo=o(" (MPNet model)"),SOo=l(),_v=a("li"),Vge=a("strong"),ROo=o("nystromformer"),BOo=o(" \u2014 "),nV=a("a"),POo=o("NystromformerForQuestionAnswering"),IOo=o(" (Nystromformer model)"),qOo=l(),bv=a("li"),Xge=a("strong"),NOo=o("qdqbert"),jOo=o(" \u2014 "),sV=a("a"),DOo=o("QDQBertForQuestionAnswering"),GOo=o(" (QDQBert model)"),OOo=l(),vv=a("li"),zge=a("strong"),VOo=o("reformer"),XOo=o(" \u2014 "),lV=a("a"),zOo=o("ReformerForQuestionAnswering"),QOo=o(" (Reformer model)"),WOo=l(),Fv=a("li"),Qge=a("strong"),HOo=o("rembert"),UOo=o(" \u2014 "),iV=a("a"),JOo=o("RemBertForQuestionAnswering"),YOo=o(" (RemBERT model)"),KOo=l(),Tv=a("li"),Wge=a("strong"),ZOo=o("roberta"),eVo=o(" \u2014 "),dV=a("a"),oVo=o("RobertaForQuestionAnswering"),rVo=o(" (RoBERTa model)"),tVo=l(),Mv=a("li"),Hge=a("strong"),aVo=o("roformer"),nVo=o(" \u2014 "),cV=a("a"),sVo=o("RoFormerForQuestionAnswering"),lVo=o(" (RoFormer model)"),iVo=l(),Ev=a("li"),Uge=a("strong"),dVo=o("splinter"),cVo=o(" \u2014 "),fV=a("a"),fVo=o("SplinterForQuestionAnswering"),mVo=o(" (Splinter model)"),gVo=l(),Cv=a("li"),Jge=a("strong"),hVo=o("squeezebert"),pVo=o(" \u2014 "),mV=a("a"),uVo=o("SqueezeBertForQuestionAnswering"),_Vo=o(" (SqueezeBERT model)"),bVo=l(),wv=a("li"),Yge=a("strong"),vVo=o("xlm"),FVo=o(" \u2014 "),gV=a("a"),TVo=o("XLMForQuestionAnsweringSimple"),MVo=o(" (XLM model)"),EVo=l(),Av=a("li"),Kge=a("strong"),CVo=o("xlm-roberta"),wVo=o(" \u2014 "),hV=a("a"),AVo=o("XLMRobertaForQuestionAnswering"),yVo=o(" (XLM-RoBERTa model)"),LVo=l(),yv=a("li"),Zge=a("strong"),xVo=o("xlm-roberta-xl"),$Vo=o(" \u2014 "),pV=a("a"),kVo=o("XLMRobertaXLForQuestionAnswering"),SVo=o(" (XLM-RoBERTa-XL model)"),RVo=l(),Lv=a("li"),ehe=a("strong"),BVo=o("xlnet"),PVo=o(" \u2014 "),uV=a("a"),IVo=o("XLNetForQuestionAnsweringSimple"),qVo=o(" (XLNet model)"),NVo=l(),xv=a("li"),ohe=a("strong"),jVo=o("yoso"),DVo=o(" \u2014 "),_V=a("a"),GVo=o("YosoForQuestionAnswering"),OVo=o(" (YOSO model)"),VVo=l(),$v=a("p"),XVo=o("The model is set in evaluation mode by default using "),rhe=a("code"),zVo=o("model.eval()"),QVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),WVo=o("model.train()"),HVo=l(),F(kv.$$.fragment),$Ie=l(),Yi=a("h2"),Sv=a("a"),ahe=a("span"),F(Ty.$$.fragment),UVo=l(),nhe=a("span"),JVo=o("AutoModelForTableQuestionAnswering"),kIe=l(),No=a("div"),F(My.$$.fragment),YVo=l(),Ki=a("p"),KVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bV=a("a"),ZVo=o("from_pretrained()"),eXo=o(" class method or the "),vV=a("a"),oXo=o("from_config()"),rXo=o(` class
method.`),tXo=l(),Ey=a("p"),aXo=o("This class cannot be instantiated directly using "),she=a("code"),nXo=o("__init__()"),sXo=o(" (throws an error)."),lXo=l(),ft=a("div"),F(Cy.$$.fragment),iXo=l(),lhe=a("p"),dXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cXo=l(),Zi=a("p"),fXo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),mXo=o("not"),gXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),hXo=o("from_pretrained()"),pXo=o(" to load the model weights."),uXo=l(),F(Rv.$$.fragment),_Xo=l(),ao=a("div"),F(wy.$$.fragment),bXo=l(),dhe=a("p"),vXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FXo=l(),Ia=a("p"),TXo=o("The model class to instantiate is selected based on the "),che=a("code"),MXo=o("model_type"),EXo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),CXo=o("pretrained_model_name_or_path"),wXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),AXo=o("pretrained_model_name_or_path"),yXo=o(":"),LXo=l(),ghe=a("ul"),Bv=a("li"),hhe=a("strong"),xXo=o("tapas"),$Xo=o(" \u2014 "),TV=a("a"),kXo=o("TapasForQuestionAnswering"),SXo=o(" (TAPAS model)"),RXo=l(),Pv=a("p"),BXo=o("The model is set in evaluation mode by default using "),phe=a("code"),PXo=o("model.eval()"),IXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),qXo=o("model.train()"),NXo=l(),F(Iv.$$.fragment),SIe=l(),ed=a("h2"),qv=a("a"),_he=a("span"),F(Ay.$$.fragment),jXo=l(),bhe=a("span"),DXo=o("AutoModelForImageClassification"),RIe=l(),jo=a("div"),F(yy.$$.fragment),GXo=l(),od=a("p"),OXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MV=a("a"),VXo=o("from_pretrained()"),XXo=o(" class method or the "),EV=a("a"),zXo=o("from_config()"),QXo=o(` class
method.`),WXo=l(),Ly=a("p"),HXo=o("This class cannot be instantiated directly using "),vhe=a("code"),UXo=o("__init__()"),JXo=o(" (throws an error)."),YXo=l(),mt=a("div"),F(xy.$$.fragment),KXo=l(),Fhe=a("p"),ZXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ezo=l(),rd=a("p"),ozo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),rzo=o("not"),tzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),azo=o("from_pretrained()"),nzo=o(" to load the model weights."),szo=l(),F(Nv.$$.fragment),lzo=l(),no=a("div"),F($y.$$.fragment),izo=l(),Mhe=a("p"),dzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),czo=l(),qa=a("p"),fzo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),mzo=o("model_type"),gzo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),hzo=o("pretrained_model_name_or_path"),pzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),uzo=o("pretrained_model_name_or_path"),_zo=o(":"),bzo=l(),Fe=a("ul"),jv=a("li"),Ahe=a("strong"),vzo=o("beit"),Fzo=o(" \u2014 "),wV=a("a"),Tzo=o("BeitForImageClassification"),Mzo=o(" (BEiT model)"),Ezo=l(),Dv=a("li"),yhe=a("strong"),Czo=o("convnext"),wzo=o(" \u2014 "),AV=a("a"),Azo=o("ConvNextForImageClassification"),yzo=o(" (ConvNext model)"),Lzo=l(),Gv=a("li"),Lhe=a("strong"),xzo=o("data2vec-vision"),$zo=o(" \u2014 "),yV=a("a"),kzo=o("Data2VecVisionForImageClassification"),Szo=o(" (Data2VecVision model)"),Rzo=l(),Rs=a("li"),xhe=a("strong"),Bzo=o("deit"),Pzo=o(" \u2014 "),LV=a("a"),Izo=o("DeiTForImageClassification"),qzo=o(" or "),xV=a("a"),Nzo=o("DeiTForImageClassificationWithTeacher"),jzo=o(" (DeiT model)"),Dzo=l(),Ov=a("li"),$he=a("strong"),Gzo=o("imagegpt"),Ozo=o(" \u2014 "),$V=a("a"),Vzo=o("ImageGPTForImageClassification"),Xzo=o(" (ImageGPT model)"),zzo=l(),gt=a("li"),khe=a("strong"),Qzo=o("perceiver"),Wzo=o(" \u2014 "),kV=a("a"),Hzo=o("PerceiverForImageClassificationLearned"),Uzo=o(" or "),SV=a("a"),Jzo=o("PerceiverForImageClassificationFourier"),Yzo=o(" or "),RV=a("a"),Kzo=o("PerceiverForImageClassificationConvProcessing"),Zzo=o(" (Perceiver model)"),eQo=l(),Vv=a("li"),She=a("strong"),oQo=o("poolformer"),rQo=o(" \u2014 "),BV=a("a"),tQo=o("PoolFormerForImageClassification"),aQo=o(" (PoolFormer model)"),nQo=l(),Xv=a("li"),Rhe=a("strong"),sQo=o("regnet"),lQo=o(" \u2014 "),PV=a("a"),iQo=o("RegNetForImageClassification"),dQo=o(" (RegNet model)"),cQo=l(),zv=a("li"),Bhe=a("strong"),fQo=o("resnet"),mQo=o(" \u2014 "),IV=a("a"),gQo=o("ResNetForImageClassification"),hQo=o(" (ResNet model)"),pQo=l(),Qv=a("li"),Phe=a("strong"),uQo=o("segformer"),_Qo=o(" \u2014 "),qV=a("a"),bQo=o("SegformerForImageClassification"),vQo=o(" (SegFormer model)"),FQo=l(),Wv=a("li"),Ihe=a("strong"),TQo=o("swin"),MQo=o(" \u2014 "),NV=a("a"),EQo=o("SwinForImageClassification"),CQo=o(" (Swin model)"),wQo=l(),Hv=a("li"),qhe=a("strong"),AQo=o("van"),yQo=o(" \u2014 "),jV=a("a"),LQo=o("VanForImageClassification"),xQo=o(" (VAN model)"),$Qo=l(),Uv=a("li"),Nhe=a("strong"),kQo=o("vit"),SQo=o(" \u2014 "),DV=a("a"),RQo=o("ViTForImageClassification"),BQo=o(" (ViT model)"),PQo=l(),Jv=a("p"),IQo=o("The model is set in evaluation mode by default using "),jhe=a("code"),qQo=o("model.eval()"),NQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),jQo=o("model.train()"),DQo=l(),F(Yv.$$.fragment),BIe=l(),td=a("h2"),Kv=a("a"),Ghe=a("span"),F(ky.$$.fragment),GQo=l(),Ohe=a("span"),OQo=o("AutoModelForVision2Seq"),PIe=l(),Do=a("div"),F(Sy.$$.fragment),VQo=l(),ad=a("p"),XQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GV=a("a"),zQo=o("from_pretrained()"),QQo=o(" class method or the "),OV=a("a"),WQo=o("from_config()"),HQo=o(` class
method.`),UQo=l(),Ry=a("p"),JQo=o("This class cannot be instantiated directly using "),Vhe=a("code"),YQo=o("__init__()"),KQo=o(" (throws an error)."),ZQo=l(),ht=a("div"),F(By.$$.fragment),eWo=l(),Xhe=a("p"),oWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rWo=l(),nd=a("p"),tWo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),aWo=o("not"),nWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),sWo=o("from_pretrained()"),lWo=o(" to load the model weights."),iWo=l(),F(Zv.$$.fragment),dWo=l(),so=a("div"),F(Py.$$.fragment),cWo=l(),Qhe=a("p"),fWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mWo=l(),Na=a("p"),gWo=o("The model class to instantiate is selected based on the "),Whe=a("code"),hWo=o("model_type"),pWo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),uWo=o("pretrained_model_name_or_path"),_Wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(":"),FWo=l(),Jhe=a("ul"),eF=a("li"),Yhe=a("strong"),TWo=o("vision-encoder-decoder"),MWo=o(" \u2014 "),XV=a("a"),EWo=o("VisionEncoderDecoderModel"),CWo=o(" (Vision Encoder decoder model)"),wWo=l(),oF=a("p"),AWo=o("The model is set in evaluation mode by default using "),Khe=a("code"),yWo=o("model.eval()"),LWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),xWo=o("model.train()"),$Wo=l(),F(rF.$$.fragment),IIe=l(),sd=a("h2"),tF=a("a"),epe=a("span"),F(Iy.$$.fragment),kWo=l(),ope=a("span"),SWo=o("AutoModelForAudioClassification"),qIe=l(),Go=a("div"),F(qy.$$.fragment),RWo=l(),ld=a("p"),BWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zV=a("a"),PWo=o("from_pretrained()"),IWo=o(" class method or the "),QV=a("a"),qWo=o("from_config()"),NWo=o(` class
method.`),jWo=l(),Ny=a("p"),DWo=o("This class cannot be instantiated directly using "),rpe=a("code"),GWo=o("__init__()"),OWo=o(" (throws an error)."),VWo=l(),pt=a("div"),F(jy.$$.fragment),XWo=l(),tpe=a("p"),zWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QWo=l(),id=a("p"),WWo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),JWo=o("from_pretrained()"),YWo=o(" to load the model weights."),KWo=l(),F(aF.$$.fragment),ZWo=l(),lo=a("div"),F(Dy.$$.fragment),eHo=l(),npe=a("p"),oHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rHo=l(),ja=a("p"),tHo=o("The model class to instantiate is selected based on the "),spe=a("code"),aHo=o("model_type"),nHo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),iHo=o("pretrained_model_name_or_path"),dHo=o(":"),cHo=l(),Ne=a("ul"),nF=a("li"),dpe=a("strong"),fHo=o("data2vec-audio"),mHo=o(" \u2014 "),HV=a("a"),gHo=o("Data2VecAudioForSequenceClassification"),hHo=o(" (Data2VecAudio model)"),pHo=l(),sF=a("li"),cpe=a("strong"),uHo=o("hubert"),_Ho=o(" \u2014 "),UV=a("a"),bHo=o("HubertForSequenceClassification"),vHo=o(" (Hubert model)"),FHo=l(),lF=a("li"),fpe=a("strong"),THo=o("sew"),MHo=o(" \u2014 "),JV=a("a"),EHo=o("SEWForSequenceClassification"),CHo=o(" (SEW model)"),wHo=l(),iF=a("li"),mpe=a("strong"),AHo=o("sew-d"),yHo=o(" \u2014 "),YV=a("a"),LHo=o("SEWDForSequenceClassification"),xHo=o(" (SEW-D model)"),$Ho=l(),dF=a("li"),gpe=a("strong"),kHo=o("unispeech"),SHo=o(" \u2014 "),KV=a("a"),RHo=o("UniSpeechForSequenceClassification"),BHo=o(" (UniSpeech model)"),PHo=l(),cF=a("li"),hpe=a("strong"),IHo=o("unispeech-sat"),qHo=o(" \u2014 "),ZV=a("a"),NHo=o("UniSpeechSatForSequenceClassification"),jHo=o(" (UniSpeechSat model)"),DHo=l(),fF=a("li"),ppe=a("strong"),GHo=o("wav2vec2"),OHo=o(" \u2014 "),eX=a("a"),VHo=o("Wav2Vec2ForSequenceClassification"),XHo=o(" (Wav2Vec2 model)"),zHo=l(),mF=a("li"),upe=a("strong"),QHo=o("wavlm"),WHo=o(" \u2014 "),oX=a("a"),HHo=o("WavLMForSequenceClassification"),UHo=o(" (WavLM model)"),JHo=l(),gF=a("p"),YHo=o("The model is set in evaluation mode by default using "),_pe=a("code"),KHo=o("model.eval()"),ZHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),eUo=o("model.train()"),oUo=l(),F(hF.$$.fragment),NIe=l(),dd=a("h2"),pF=a("a"),vpe=a("span"),F(Gy.$$.fragment),rUo=l(),Fpe=a("span"),tUo=o("AutoModelForAudioFrameClassification"),jIe=l(),Oo=a("div"),F(Oy.$$.fragment),aUo=l(),cd=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rX=a("a"),sUo=o("from_pretrained()"),lUo=o(" class method or the "),tX=a("a"),iUo=o("from_config()"),dUo=o(` class
method.`),cUo=l(),Vy=a("p"),fUo=o("This class cannot be instantiated directly using "),Tpe=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),ut=a("div"),F(Xy.$$.fragment),pUo=l(),Mpe=a("p"),uUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_Uo=l(),fd=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),vUo=o("not"),FUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),TUo=o("from_pretrained()"),MUo=o(" to load the model weights."),EUo=l(),F(uF.$$.fragment),CUo=l(),io=a("div"),F(zy.$$.fragment),wUo=l(),Cpe=a("p"),AUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yUo=l(),Da=a("p"),LUo=o("The model class to instantiate is selected based on the "),wpe=a("code"),xUo=o("model_type"),$Uo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),RUo=o("pretrained_model_name_or_path"),BUo=o(":"),PUo=l(),Ga=a("ul"),_F=a("li"),Lpe=a("strong"),IUo=o("data2vec-audio"),qUo=o(" \u2014 "),nX=a("a"),NUo=o("Data2VecAudioForAudioFrameClassification"),jUo=o(" (Data2VecAudio model)"),DUo=l(),bF=a("li"),xpe=a("strong"),GUo=o("unispeech-sat"),OUo=o(" \u2014 "),sX=a("a"),VUo=o("UniSpeechSatForAudioFrameClassification"),XUo=o(" (UniSpeechSat model)"),zUo=l(),vF=a("li"),$pe=a("strong"),QUo=o("wav2vec2"),WUo=o(" \u2014 "),lX=a("a"),HUo=o("Wav2Vec2ForAudioFrameClassification"),UUo=o(" (Wav2Vec2 model)"),JUo=l(),FF=a("li"),kpe=a("strong"),YUo=o("wavlm"),KUo=o(" \u2014 "),iX=a("a"),ZUo=o("WavLMForAudioFrameClassification"),eJo=o(" (WavLM model)"),oJo=l(),TF=a("p"),rJo=o("The model is set in evaluation mode by default using "),Spe=a("code"),tJo=o("model.eval()"),aJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),nJo=o("model.train()"),sJo=l(),F(MF.$$.fragment),DIe=l(),md=a("h2"),EF=a("a"),Bpe=a("span"),F(Qy.$$.fragment),lJo=l(),Ppe=a("span"),iJo=o("AutoModelForCTC"),GIe=l(),Vo=a("div"),F(Wy.$$.fragment),dJo=l(),gd=a("p"),cJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dX=a("a"),fJo=o("from_pretrained()"),mJo=o(" class method or the "),cX=a("a"),gJo=o("from_config()"),hJo=o(` class
method.`),pJo=l(),Hy=a("p"),uJo=o("This class cannot be instantiated directly using "),Ipe=a("code"),_Jo=o("__init__()"),bJo=o(" (throws an error)."),vJo=l(),_t=a("div"),F(Uy.$$.fragment),FJo=l(),qpe=a("p"),TJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),MJo=l(),hd=a("p"),EJo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),CJo=o("not"),wJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),AJo=o("from_pretrained()"),yJo=o(" to load the model weights."),LJo=l(),F(CF.$$.fragment),xJo=l(),co=a("div"),F(Jy.$$.fragment),$Jo=l(),jpe=a("p"),kJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SJo=l(),Oa=a("p"),RJo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),BJo=o("model_type"),PJo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(":"),DJo=l(),je=a("ul"),wF=a("li"),Vpe=a("strong"),GJo=o("data2vec-audio"),OJo=o(" \u2014 "),mX=a("a"),VJo=o("Data2VecAudioForCTC"),XJo=o(" (Data2VecAudio model)"),zJo=l(),AF=a("li"),Xpe=a("strong"),QJo=o("hubert"),WJo=o(" \u2014 "),gX=a("a"),HJo=o("HubertForCTC"),UJo=o(" (Hubert model)"),JJo=l(),yF=a("li"),zpe=a("strong"),YJo=o("sew"),KJo=o(" \u2014 "),hX=a("a"),ZJo=o("SEWForCTC"),eYo=o(" (SEW model)"),oYo=l(),LF=a("li"),Qpe=a("strong"),rYo=o("sew-d"),tYo=o(" \u2014 "),pX=a("a"),aYo=o("SEWDForCTC"),nYo=o(" (SEW-D model)"),sYo=l(),xF=a("li"),Wpe=a("strong"),lYo=o("unispeech"),iYo=o(" \u2014 "),uX=a("a"),dYo=o("UniSpeechForCTC"),cYo=o(" (UniSpeech model)"),fYo=l(),$F=a("li"),Hpe=a("strong"),mYo=o("unispeech-sat"),gYo=o(" \u2014 "),_X=a("a"),hYo=o("UniSpeechSatForCTC"),pYo=o(" (UniSpeechSat model)"),uYo=l(),kF=a("li"),Upe=a("strong"),_Yo=o("wav2vec2"),bYo=o(" \u2014 "),bX=a("a"),vYo=o("Wav2Vec2ForCTC"),FYo=o(" (Wav2Vec2 model)"),TYo=l(),SF=a("li"),Jpe=a("strong"),MYo=o("wavlm"),EYo=o(" \u2014 "),vX=a("a"),CYo=o("WavLMForCTC"),wYo=o(" (WavLM model)"),AYo=l(),RF=a("p"),yYo=o("The model is set in evaluation mode by default using "),Ype=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=a("code"),$Yo=o("model.train()"),kYo=l(),F(BF.$$.fragment),OIe=l(),pd=a("h2"),PF=a("a"),Zpe=a("span"),F(Yy.$$.fragment),SYo=l(),eue=a("span"),RYo=o("AutoModelForSpeechSeq2Seq"),VIe=l(),Xo=a("div"),F(Ky.$$.fragment),BYo=l(),ud=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FX=a("a"),IYo=o("from_pretrained()"),qYo=o(" class method or the "),TX=a("a"),NYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),Zy=a("p"),GYo=o("This class cannot be instantiated directly using "),oue=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),bt=a("div"),F(eL.$$.fragment),zYo=l(),rue=a("p"),QYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WYo=l(),_d=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(IF.$$.fragment),eKo=l(),fo=a("div"),F(oL.$$.fragment),oKo=l(),aue=a("p"),rKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tKo=l(),Va=a("p"),aKo=o("The model class to instantiate is selected based on the "),nue=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),rL=a("ul"),qF=a("li"),iue=a("strong"),mKo=o("speech-encoder-decoder"),gKo=o(" \u2014 "),EX=a("a"),hKo=o("SpeechEncoderDecoderModel"),pKo=o(" (Speech Encoder decoder model)"),uKo=l(),NF=a("li"),due=a("strong"),_Ko=o("speech_to_text"),bKo=o(" \u2014 "),CX=a("a"),vKo=o("Speech2TextForConditionalGeneration"),FKo=o(" (Speech2Text model)"),TKo=l(),jF=a("p"),MKo=o("The model is set in evaluation mode by default using "),cue=a("code"),EKo=o("model.eval()"),CKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),wKo=o("model.train()"),AKo=l(),F(DF.$$.fragment),XIe=l(),bd=a("h2"),GF=a("a"),mue=a("span"),F(tL.$$.fragment),yKo=l(),gue=a("span"),LKo=o("AutoModelForAudioXVector"),zIe=l(),zo=a("div"),F(aL.$$.fragment),xKo=l(),vd=a("p"),$Ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wX=a("a"),kKo=o("from_pretrained()"),SKo=o(" class method or the "),AX=a("a"),RKo=o("from_config()"),BKo=o(` class
method.`),PKo=l(),nL=a("p"),IKo=o("This class cannot be instantiated directly using "),hue=a("code"),qKo=o("__init__()"),NKo=o(" (throws an error)."),jKo=l(),vt=a("div"),F(sL.$$.fragment),DKo=l(),pue=a("p"),GKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),OKo=l(),Fd=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),QKo=o("from_pretrained()"),WKo=o(" to load the model weights."),HKo=l(),F(OF.$$.fragment),UKo=l(),mo=a("div"),F(lL.$$.fragment),JKo=l(),_ue=a("p"),YKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KKo=l(),Xa=a("p"),ZKo=o("The model class to instantiate is selected based on the "),bue=a("code"),eZo=o("model_type"),oZo=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(":"),sZo=l(),za=a("ul"),VF=a("li"),Tue=a("strong"),lZo=o("data2vec-audio"),iZo=o(" \u2014 "),LX=a("a"),dZo=o("Data2VecAudioForXVector"),cZo=o(" (Data2VecAudio model)"),fZo=l(),XF=a("li"),Mue=a("strong"),mZo=o("unispeech-sat"),gZo=o(" \u2014 "),xX=a("a"),hZo=o("UniSpeechSatForXVector"),pZo=o(" (UniSpeechSat model)"),uZo=l(),zF=a("li"),Eue=a("strong"),_Zo=o("wav2vec2"),bZo=o(" \u2014 "),$X=a("a"),vZo=o("Wav2Vec2ForXVector"),FZo=o(" (Wav2Vec2 model)"),TZo=l(),QF=a("li"),Cue=a("strong"),MZo=o("wavlm"),EZo=o(" \u2014 "),kX=a("a"),CZo=o("WavLMForXVector"),wZo=o(" (WavLM model)"),AZo=l(),WF=a("p"),yZo=o("The model is set in evaluation mode by default using "),wue=a("code"),LZo=o("model.eval()"),xZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),$Zo=o("model.train()"),kZo=l(),F(HF.$$.fragment),QIe=l(),Td=a("h2"),UF=a("a"),yue=a("span"),F(iL.$$.fragment),SZo=l(),Lue=a("span"),RZo=o("AutoModelForMaskedImageModeling"),WIe=l(),Qo=a("div"),F(dL.$$.fragment),BZo=l(),Md=a("p"),PZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),SX=a("a"),IZo=o("from_pretrained()"),qZo=o(" class method or the "),RX=a("a"),NZo=o("from_config()"),jZo=o(` class
method.`),DZo=l(),cL=a("p"),GZo=o("This class cannot be instantiated directly using "),xue=a("code"),OZo=o("__init__()"),VZo=o(" (throws an error)."),XZo=l(),Ft=a("div"),F(fL.$$.fragment),zZo=l(),$ue=a("p"),QZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WZo=l(),Ed=a("p"),HZo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),UZo=o("not"),JZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),YZo=o("from_pretrained()"),KZo=o(" to load the model weights."),ZZo=l(),F(JF.$$.fragment),eer=l(),go=a("div"),F(mL.$$.fragment),oer=l(),Sue=a("p"),rer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ter=l(),Qa=a("p"),aer=o("The model class to instantiate is selected based on the "),Rue=a("code"),ner=o("model_type"),ser=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),der=o("pretrained_model_name_or_path"),cer=o(":"),fer=l(),Cd=a("ul"),YF=a("li"),Iue=a("strong"),mer=o("deit"),ger=o(" \u2014 "),PX=a("a"),her=o("DeiTForMaskedImageModeling"),per=o(" (DeiT model)"),uer=l(),KF=a("li"),que=a("strong"),_er=o("swin"),ber=o(" \u2014 "),IX=a("a"),ver=o("SwinForMaskedImageModeling"),Fer=o(" (Swin model)"),Ter=l(),ZF=a("li"),Nue=a("strong"),Mer=o("vit"),Eer=o(" \u2014 "),qX=a("a"),Cer=o("ViTForMaskedImageModeling"),wer=o(" (ViT model)"),Aer=l(),eT=a("p"),yer=o("The model is set in evaluation mode by default using "),jue=a("code"),Ler=o("model.eval()"),xer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),$er=o("model.train()"),ker=l(),F(oT.$$.fragment),HIe=l(),wd=a("h2"),rT=a("a"),Gue=a("span"),F(gL.$$.fragment),Ser=l(),Oue=a("span"),Rer=o("AutoModelForObjectDetection"),UIe=l(),Wo=a("div"),F(hL.$$.fragment),Ber=l(),Ad=a("p"),Per=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NX=a("a"),Ier=o("from_pretrained()"),qer=o(" class method or the "),jX=a("a"),Ner=o("from_config()"),jer=o(` class
method.`),Der=l(),pL=a("p"),Ger=o("This class cannot be instantiated directly using "),Vue=a("code"),Oer=o("__init__()"),Ver=o(" (throws an error)."),Xer=l(),Tt=a("div"),F(uL.$$.fragment),zer=l(),Xue=a("p"),Qer=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Wer=l(),yd=a("p"),Her=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),Uer=o("not"),Jer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Yer=o("from_pretrained()"),Ker=o(" to load the model weights."),Zer=l(),F(tT.$$.fragment),eor=l(),ho=a("div"),F(_L.$$.fragment),oor=l(),Que=a("p"),ror=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tor=l(),Wa=a("p"),aor=o("The model class to instantiate is selected based on the "),Wue=a("code"),nor=o("model_type"),sor=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),lor=o("pretrained_model_name_or_path"),ior=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),dor=o("pretrained_model_name_or_path"),cor=o(":"),mor=l(),bL=a("ul"),aT=a("li"),Jue=a("strong"),gor=o("detr"),hor=o(" \u2014 "),GX=a("a"),por=o("DetrForObjectDetection"),uor=o(" (DETR model)"),_or=l(),nT=a("li"),Yue=a("strong"),bor=o("yolos"),vor=o(" \u2014 "),OX=a("a"),For=o("YolosForObjectDetection"),Tor=o(" (YOLOS model)"),Mor=l(),sT=a("p"),Eor=o("The model is set in evaluation mode by default using "),Kue=a("code"),Cor=o("model.eval()"),wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),Aor=o("model.train()"),yor=l(),F(lT.$$.fragment),JIe=l(),Ld=a("h2"),iT=a("a"),e_e=a("span"),F(vL.$$.fragment),Lor=l(),o_e=a("span"),xor=o("AutoModelForImageSegmentation"),YIe=l(),Ho=a("div"),F(FL.$$.fragment),$or=l(),xd=a("p"),kor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VX=a("a"),Sor=o("from_pretrained()"),Ror=o(" class method or the "),XX=a("a"),Bor=o("from_config()"),Por=o(` class
method.`),Ior=l(),TL=a("p"),qor=o("This class cannot be instantiated directly using "),r_e=a("code"),Nor=o("__init__()"),jor=o(" (throws an error)."),Dor=l(),Mt=a("div"),F(ML.$$.fragment),Gor=l(),t_e=a("p"),Oor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vor=l(),$d=a("p"),Xor=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),zor=o("not"),Qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),Wor=o("from_pretrained()"),Hor=o(" to load the model weights."),Uor=l(),F(dT.$$.fragment),Jor=l(),po=a("div"),F(EL.$$.fragment),Yor=l(),n_e=a("p"),Kor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Zor=l(),Ha=a("p"),err=o("The model class to instantiate is selected based on the "),s_e=a("code"),orr=o("model_type"),rrr=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(":"),lrr=l(),d_e=a("ul"),cT=a("li"),c_e=a("strong"),irr=o("detr"),drr=o(" \u2014 "),QX=a("a"),crr=o("DetrForSegmentation"),frr=o(" (DETR model)"),mrr=l(),fT=a("p"),grr=o("The model is set in evaluation mode by default using "),f_e=a("code"),hrr=o("model.eval()"),prr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),urr=o("model.train()"),_rr=l(),F(mT.$$.fragment),KIe=l(),kd=a("h2"),gT=a("a"),g_e=a("span"),F(CL.$$.fragment),brr=l(),h_e=a("span"),vrr=o("AutoModelForSemanticSegmentation"),ZIe=l(),Uo=a("div"),F(wL.$$.fragment),Frr=l(),Sd=a("p"),Trr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WX=a("a"),Mrr=o("from_pretrained()"),Err=o(" class method or the "),HX=a("a"),Crr=o("from_config()"),wrr=o(` class
method.`),Arr=l(),AL=a("p"),yrr=o("This class cannot be instantiated directly using "),p_e=a("code"),Lrr=o("__init__()"),xrr=o(" (throws an error)."),$rr=l(),Et=a("div"),F(yL.$$.fragment),krr=l(),u_e=a("p"),Srr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Rrr=l(),Rd=a("p"),Brr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),Prr=o("not"),Irr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),qrr=o("from_pretrained()"),Nrr=o(" to load the model weights."),jrr=l(),F(hT.$$.fragment),Drr=l(),uo=a("div"),F(LL.$$.fragment),Grr=l(),b_e=a("p"),Orr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vrr=l(),Ua=a("p"),Xrr=o("The model class to instantiate is selected based on the "),v_e=a("code"),zrr=o("model_type"),Qrr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Wrr=o("pretrained_model_name_or_path"),Hrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),Urr=o("pretrained_model_name_or_path"),Jrr=o(":"),Yrr=l(),Ja=a("ul"),pT=a("li"),M_e=a("strong"),Krr=o("beit"),Zrr=o(" \u2014 "),JX=a("a"),etr=o("BeitForSemanticSegmentation"),otr=o(" (BEiT model)"),rtr=l(),uT=a("li"),E_e=a("strong"),ttr=o("data2vec-vision"),atr=o(" \u2014 "),YX=a("a"),ntr=o("Data2VecVisionForSemanticSegmentation"),str=o(" (Data2VecVision model)"),ltr=l(),_T=a("li"),C_e=a("strong"),itr=o("dpt"),dtr=o(" \u2014 "),KX=a("a"),ctr=o("DPTForSemanticSegmentation"),ftr=o(" (DPT model)"),mtr=l(),bT=a("li"),w_e=a("strong"),gtr=o("segformer"),htr=o(" \u2014 "),ZX=a("a"),ptr=o("SegformerForSemanticSegmentation"),utr=o(" (SegFormer model)"),_tr=l(),vT=a("p"),btr=o("The model is set in evaluation mode by default using "),A_e=a("code"),vtr=o("model.eval()"),Ftr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=a("code"),Ttr=o("model.train()"),Mtr=l(),F(FT.$$.fragment),eqe=l(),Bd=a("h2"),TT=a("a"),L_e=a("span"),F(xL.$$.fragment),Etr=l(),x_e=a("span"),Ctr=o("AutoModelForInstanceSegmentation"),oqe=l(),Jo=a("div"),F($L.$$.fragment),wtr=l(),Pd=a("p"),Atr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ez=a("a"),ytr=o("from_pretrained()"),Ltr=o(" class method or the "),oz=a("a"),xtr=o("from_config()"),$tr=o(` class
method.`),ktr=l(),kL=a("p"),Str=o("This class cannot be instantiated directly using "),$_e=a("code"),Rtr=o("__init__()"),Btr=o(" (throws an error)."),Ptr=l(),Ct=a("div"),F(SL.$$.fragment),Itr=l(),k_e=a("p"),qtr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ntr=l(),Id=a("p"),jtr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),Dtr=o("not"),Gtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),Otr=o("from_pretrained()"),Vtr=o(" to load the model weights."),Xtr=l(),F(MT.$$.fragment),ztr=l(),_o=a("div"),F(RL.$$.fragment),Qtr=l(),R_e=a("p"),Wtr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Htr=l(),Ya=a("p"),Utr=o("The model class to instantiate is selected based on the "),B_e=a("code"),Jtr=o("model_type"),Ytr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),Ktr=o("pretrained_model_name_or_path"),Ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),ear=o("pretrained_model_name_or_path"),oar=o(":"),rar=l(),q_e=a("ul"),ET=a("li"),N_e=a("strong"),tar=o("maskformer"),aar=o(" \u2014 "),tz=a("a"),nar=o("MaskFormerForInstanceSegmentation"),sar=o(" (MaskFormer model)"),lar=l(),CT=a("p"),iar=o("The model is set in evaluation mode by default using "),j_e=a("code"),dar=o("model.eval()"),car=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),far=o("model.train()"),mar=l(),F(wT.$$.fragment),rqe=l(),qd=a("h2"),AT=a("a"),G_e=a("span"),F(BL.$$.fragment),gar=l(),O_e=a("span"),har=o("TFAutoModel"),tqe=l(),Yo=a("div"),F(PL.$$.fragment),par=l(),Nd=a("p"),uar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),az=a("a"),_ar=o("from_pretrained()"),bar=o(" class method or the "),nz=a("a"),Far=o("from_config()"),Tar=o(` class
method.`),Mar=l(),IL=a("p"),Ear=o("This class cannot be instantiated directly using "),V_e=a("code"),Car=o("__init__()"),war=o(" (throws an error)."),Aar=l(),wt=a("div"),F(qL.$$.fragment),yar=l(),X_e=a("p"),Lar=o("Instantiates one of the base model classes of the library from a configuration."),xar=l(),jd=a("p"),$ar=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),kar=o("not"),Sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),Rar=o("from_pretrained()"),Bar=o(" to load the model weights."),Par=l(),F(yT.$$.fragment),Iar=l(),wr=a("div"),F(NL.$$.fragment),qar=l(),Q_e=a("p"),Nar=o("Instantiate one of the base model classes of the library from a pretrained model."),jar=l(),Ka=a("p"),Dar=o("The model class to instantiate is selected based on the "),W_e=a("code"),Gar=o("model_type"),Oar=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),Var=o("pretrained_model_name_or_path"),Xar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),zar=o("pretrained_model_name_or_path"),Qar=o(":"),War=l(),j=a("ul"),LT=a("li"),J_e=a("strong"),Har=o("albert"),Uar=o(" \u2014 "),lz=a("a"),Jar=o("TFAlbertModel"),Yar=o(" (ALBERT model)"),Kar=l(),xT=a("li"),Y_e=a("strong"),Zar=o("bart"),enr=o(" \u2014 "),iz=a("a"),onr=o("TFBartModel"),rnr=o(" (BART model)"),tnr=l(),$T=a("li"),K_e=a("strong"),anr=o("bert"),nnr=o(" \u2014 "),dz=a("a"),snr=o("TFBertModel"),lnr=o(" (BERT model)"),inr=l(),kT=a("li"),Z_e=a("strong"),dnr=o("blenderbot"),cnr=o(" \u2014 "),cz=a("a"),fnr=o("TFBlenderbotModel"),mnr=o(" (Blenderbot model)"),gnr=l(),ST=a("li"),e1e=a("strong"),hnr=o("blenderbot-small"),pnr=o(" \u2014 "),fz=a("a"),unr=o("TFBlenderbotSmallModel"),_nr=o(" (BlenderbotSmall model)"),bnr=l(),RT=a("li"),o1e=a("strong"),vnr=o("camembert"),Fnr=o(" \u2014 "),mz=a("a"),Tnr=o("TFCamembertModel"),Mnr=o(" (CamemBERT model)"),Enr=l(),BT=a("li"),r1e=a("strong"),Cnr=o("clip"),wnr=o(" \u2014 "),gz=a("a"),Anr=o("TFCLIPModel"),ynr=o(" (CLIP model)"),Lnr=l(),PT=a("li"),t1e=a("strong"),xnr=o("convbert"),$nr=o(" \u2014 "),hz=a("a"),knr=o("TFConvBertModel"),Snr=o(" (ConvBERT model)"),Rnr=l(),IT=a("li"),a1e=a("strong"),Bnr=o("convnext"),Pnr=o(" \u2014 "),pz=a("a"),Inr=o("TFConvNextModel"),qnr=o(" (ConvNext model)"),Nnr=l(),qT=a("li"),n1e=a("strong"),jnr=o("ctrl"),Dnr=o(" \u2014 "),uz=a("a"),Gnr=o("TFCTRLModel"),Onr=o(" (CTRL model)"),Vnr=l(),NT=a("li"),s1e=a("strong"),Xnr=o("data2vec-vision"),znr=o(" \u2014 "),_z=a("a"),Qnr=o("TFData2VecVisionModel"),Wnr=o(" (Data2VecVision model)"),Hnr=l(),jT=a("li"),l1e=a("strong"),Unr=o("deberta"),Jnr=o(" \u2014 "),bz=a("a"),Ynr=o("TFDebertaModel"),Knr=o(" (DeBERTa model)"),Znr=l(),DT=a("li"),i1e=a("strong"),esr=o("deberta-v2"),osr=o(" \u2014 "),vz=a("a"),rsr=o("TFDebertaV2Model"),tsr=o(" (DeBERTa-v2 model)"),asr=l(),GT=a("li"),d1e=a("strong"),nsr=o("distilbert"),ssr=o(" \u2014 "),Fz=a("a"),lsr=o("TFDistilBertModel"),isr=o(" (DistilBERT model)"),dsr=l(),OT=a("li"),c1e=a("strong"),csr=o("dpr"),fsr=o(" \u2014 "),Tz=a("a"),msr=o("TFDPRQuestionEncoder"),gsr=o(" (DPR model)"),hsr=l(),VT=a("li"),f1e=a("strong"),psr=o("electra"),usr=o(" \u2014 "),Mz=a("a"),_sr=o("TFElectraModel"),bsr=o(" (ELECTRA model)"),vsr=l(),XT=a("li"),m1e=a("strong"),Fsr=o("flaubert"),Tsr=o(" \u2014 "),Ez=a("a"),Msr=o("TFFlaubertModel"),Esr=o(" (FlauBERT model)"),Csr=l(),Bs=a("li"),g1e=a("strong"),wsr=o("funnel"),Asr=o(" \u2014 "),Cz=a("a"),ysr=o("TFFunnelModel"),Lsr=o(" or "),wz=a("a"),xsr=o("TFFunnelBaseModel"),$sr=o(" (Funnel Transformer model)"),ksr=l(),zT=a("li"),h1e=a("strong"),Ssr=o("gpt2"),Rsr=o(" \u2014 "),Az=a("a"),Bsr=o("TFGPT2Model"),Psr=o(" (OpenAI GPT-2 model)"),Isr=l(),QT=a("li"),p1e=a("strong"),qsr=o("gptj"),Nsr=o(" \u2014 "),yz=a("a"),jsr=o("TFGPTJModel"),Dsr=o(" (GPT-J model)"),Gsr=l(),WT=a("li"),u1e=a("strong"),Osr=o("hubert"),Vsr=o(" \u2014 "),Lz=a("a"),Xsr=o("TFHubertModel"),zsr=o(" (Hubert model)"),Qsr=l(),HT=a("li"),_1e=a("strong"),Wsr=o("layoutlm"),Hsr=o(" \u2014 "),xz=a("a"),Usr=o("TFLayoutLMModel"),Jsr=o(" (LayoutLM model)"),Ysr=l(),UT=a("li"),b1e=a("strong"),Ksr=o("led"),Zsr=o(" \u2014 "),$z=a("a"),elr=o("TFLEDModel"),olr=o(" (LED model)"),rlr=l(),JT=a("li"),v1e=a("strong"),tlr=o("longformer"),alr=o(" \u2014 "),kz=a("a"),nlr=o("TFLongformerModel"),slr=o(" (Longformer model)"),llr=l(),YT=a("li"),F1e=a("strong"),ilr=o("lxmert"),dlr=o(" \u2014 "),Sz=a("a"),clr=o("TFLxmertModel"),flr=o(" (LXMERT model)"),mlr=l(),KT=a("li"),T1e=a("strong"),glr=o("marian"),hlr=o(" \u2014 "),Rz=a("a"),plr=o("TFMarianModel"),ulr=o(" (Marian model)"),_lr=l(),ZT=a("li"),M1e=a("strong"),blr=o("mbart"),vlr=o(" \u2014 "),Bz=a("a"),Flr=o("TFMBartModel"),Tlr=o(" (mBART model)"),Mlr=l(),e7=a("li"),E1e=a("strong"),Elr=o("mobilebert"),Clr=o(" \u2014 "),Pz=a("a"),wlr=o("TFMobileBertModel"),Alr=o(" (MobileBERT model)"),ylr=l(),o7=a("li"),C1e=a("strong"),Llr=o("mpnet"),xlr=o(" \u2014 "),Iz=a("a"),$lr=o("TFMPNetModel"),klr=o(" (MPNet model)"),Slr=l(),r7=a("li"),w1e=a("strong"),Rlr=o("mt5"),Blr=o(" \u2014 "),qz=a("a"),Plr=o("TFMT5Model"),Ilr=o(" (mT5 model)"),qlr=l(),t7=a("li"),A1e=a("strong"),Nlr=o("openai-gpt"),jlr=o(" \u2014 "),Nz=a("a"),Dlr=o("TFOpenAIGPTModel"),Glr=o(" (OpenAI GPT model)"),Olr=l(),a7=a("li"),y1e=a("strong"),Vlr=o("pegasus"),Xlr=o(" \u2014 "),jz=a("a"),zlr=o("TFPegasusModel"),Qlr=o(" (Pegasus model)"),Wlr=l(),n7=a("li"),L1e=a("strong"),Hlr=o("rembert"),Ulr=o(" \u2014 "),Dz=a("a"),Jlr=o("TFRemBertModel"),Ylr=o(" (RemBERT model)"),Klr=l(),s7=a("li"),x1e=a("strong"),Zlr=o("roberta"),eir=o(" \u2014 "),Gz=a("a"),oir=o("TFRobertaModel"),rir=o(" (RoBERTa model)"),tir=l(),l7=a("li"),$1e=a("strong"),air=o("roformer"),nir=o(" \u2014 "),Oz=a("a"),sir=o("TFRoFormerModel"),lir=o(" (RoFormer model)"),iir=l(),i7=a("li"),k1e=a("strong"),dir=o("speech_to_text"),cir=o(" \u2014 "),Vz=a("a"),fir=o("TFSpeech2TextModel"),mir=o(" (Speech2Text model)"),gir=l(),d7=a("li"),S1e=a("strong"),hir=o("t5"),pir=o(" \u2014 "),Xz=a("a"),uir=o("TFT5Model"),_ir=o(" (T5 model)"),bir=l(),c7=a("li"),R1e=a("strong"),vir=o("tapas"),Fir=o(" \u2014 "),zz=a("a"),Tir=o("TFTapasModel"),Mir=o(" (TAPAS model)"),Eir=l(),f7=a("li"),B1e=a("strong"),Cir=o("transfo-xl"),wir=o(" \u2014 "),Qz=a("a"),Air=o("TFTransfoXLModel"),yir=o(" (Transformer-XL model)"),Lir=l(),m7=a("li"),P1e=a("strong"),xir=o("vit"),$ir=o(" \u2014 "),Wz=a("a"),kir=o("TFViTModel"),Sir=o(" (ViT model)"),Rir=l(),g7=a("li"),I1e=a("strong"),Bir=o("vit_mae"),Pir=o(" \u2014 "),Hz=a("a"),Iir=o("TFViTMAEModel"),qir=o(" (ViTMAE model)"),Nir=l(),h7=a("li"),q1e=a("strong"),jir=o("wav2vec2"),Dir=o(" \u2014 "),Uz=a("a"),Gir=o("TFWav2Vec2Model"),Oir=o(" (Wav2Vec2 model)"),Vir=l(),p7=a("li"),N1e=a("strong"),Xir=o("xlm"),zir=o(" \u2014 "),Jz=a("a"),Qir=o("TFXLMModel"),Wir=o(" (XLM model)"),Hir=l(),u7=a("li"),j1e=a("strong"),Uir=o("xlm-roberta"),Jir=o(" \u2014 "),Yz=a("a"),Yir=o("TFXLMRobertaModel"),Kir=o(" (XLM-RoBERTa model)"),Zir=l(),_7=a("li"),D1e=a("strong"),edr=o("xlnet"),odr=o(" \u2014 "),Kz=a("a"),rdr=o("TFXLNetModel"),tdr=o(" (XLNet model)"),adr=l(),F(b7.$$.fragment),aqe=l(),Dd=a("h2"),v7=a("a"),G1e=a("span"),F(jL.$$.fragment),ndr=l(),O1e=a("span"),sdr=o("TFAutoModelForPreTraining"),nqe=l(),Ko=a("div"),F(DL.$$.fragment),ldr=l(),Gd=a("p"),idr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zz=a("a"),ddr=o("from_pretrained()"),cdr=o(" class method or the "),eQ=a("a"),fdr=o("from_config()"),mdr=o(` class
method.`),gdr=l(),GL=a("p"),hdr=o("This class cannot be instantiated directly using "),V1e=a("code"),pdr=o("__init__()"),udr=o(" (throws an error)."),_dr=l(),At=a("div"),F(OL.$$.fragment),bdr=l(),X1e=a("p"),vdr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fdr=l(),Od=a("p"),Tdr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),Mdr=o("not"),Edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),Cdr=o("from_pretrained()"),wdr=o(" to load the model weights."),Adr=l(),F(F7.$$.fragment),ydr=l(),Ar=a("div"),F(VL.$$.fragment),Ldr=l(),Q1e=a("p"),xdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$dr=l(),Za=a("p"),kdr=o("The model class to instantiate is selected based on the "),W1e=a("code"),Sdr=o("model_type"),Rdr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),Bdr=o("pretrained_model_name_or_path"),Pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),Idr=o("pretrained_model_name_or_path"),qdr=o(":"),Ndr=l(),se=a("ul"),T7=a("li"),J1e=a("strong"),jdr=o("albert"),Ddr=o(" \u2014 "),rQ=a("a"),Gdr=o("TFAlbertForPreTraining"),Odr=o(" (ALBERT model)"),Vdr=l(),M7=a("li"),Y1e=a("strong"),Xdr=o("bart"),zdr=o(" \u2014 "),tQ=a("a"),Qdr=o("TFBartForConditionalGeneration"),Wdr=o(" (BART model)"),Hdr=l(),E7=a("li"),K1e=a("strong"),Udr=o("bert"),Jdr=o(" \u2014 "),aQ=a("a"),Ydr=o("TFBertForPreTraining"),Kdr=o(" (BERT model)"),Zdr=l(),C7=a("li"),Z1e=a("strong"),ecr=o("camembert"),ocr=o(" \u2014 "),nQ=a("a"),rcr=o("TFCamembertForMaskedLM"),tcr=o(" (CamemBERT model)"),acr=l(),w7=a("li"),ebe=a("strong"),ncr=o("ctrl"),scr=o(" \u2014 "),sQ=a("a"),lcr=o("TFCTRLLMHeadModel"),icr=o(" (CTRL model)"),dcr=l(),A7=a("li"),obe=a("strong"),ccr=o("distilbert"),fcr=o(" \u2014 "),lQ=a("a"),mcr=o("TFDistilBertForMaskedLM"),gcr=o(" (DistilBERT model)"),hcr=l(),y7=a("li"),rbe=a("strong"),pcr=o("electra"),ucr=o(" \u2014 "),iQ=a("a"),_cr=o("TFElectraForPreTraining"),bcr=o(" (ELECTRA model)"),vcr=l(),L7=a("li"),tbe=a("strong"),Fcr=o("flaubert"),Tcr=o(" \u2014 "),dQ=a("a"),Mcr=o("TFFlaubertWithLMHeadModel"),Ecr=o(" (FlauBERT model)"),Ccr=l(),x7=a("li"),abe=a("strong"),wcr=o("funnel"),Acr=o(" \u2014 "),cQ=a("a"),ycr=o("TFFunnelForPreTraining"),Lcr=o(" (Funnel Transformer model)"),xcr=l(),$7=a("li"),nbe=a("strong"),$cr=o("gpt2"),kcr=o(" \u2014 "),fQ=a("a"),Scr=o("TFGPT2LMHeadModel"),Rcr=o(" (OpenAI GPT-2 model)"),Bcr=l(),k7=a("li"),sbe=a("strong"),Pcr=o("layoutlm"),Icr=o(" \u2014 "),mQ=a("a"),qcr=o("TFLayoutLMForMaskedLM"),Ncr=o(" (LayoutLM model)"),jcr=l(),S7=a("li"),lbe=a("strong"),Dcr=o("lxmert"),Gcr=o(" \u2014 "),gQ=a("a"),Ocr=o("TFLxmertForPreTraining"),Vcr=o(" (LXMERT model)"),Xcr=l(),R7=a("li"),ibe=a("strong"),zcr=o("mobilebert"),Qcr=o(" \u2014 "),hQ=a("a"),Wcr=o("TFMobileBertForPreTraining"),Hcr=o(" (MobileBERT model)"),Ucr=l(),B7=a("li"),dbe=a("strong"),Jcr=o("mpnet"),Ycr=o(" \u2014 "),pQ=a("a"),Kcr=o("TFMPNetForMaskedLM"),Zcr=o(" (MPNet model)"),efr=l(),P7=a("li"),cbe=a("strong"),ofr=o("openai-gpt"),rfr=o(" \u2014 "),uQ=a("a"),tfr=o("TFOpenAIGPTLMHeadModel"),afr=o(" (OpenAI GPT model)"),nfr=l(),I7=a("li"),fbe=a("strong"),sfr=o("roberta"),lfr=o(" \u2014 "),_Q=a("a"),ifr=o("TFRobertaForMaskedLM"),dfr=o(" (RoBERTa model)"),cfr=l(),q7=a("li"),mbe=a("strong"),ffr=o("t5"),mfr=o(" \u2014 "),bQ=a("a"),gfr=o("TFT5ForConditionalGeneration"),hfr=o(" (T5 model)"),pfr=l(),N7=a("li"),gbe=a("strong"),ufr=o("tapas"),_fr=o(" \u2014 "),vQ=a("a"),bfr=o("TFTapasForMaskedLM"),vfr=o(" (TAPAS model)"),Ffr=l(),j7=a("li"),hbe=a("strong"),Tfr=o("transfo-xl"),Mfr=o(" \u2014 "),FQ=a("a"),Efr=o("TFTransfoXLLMHeadModel"),Cfr=o(" (Transformer-XL model)"),wfr=l(),D7=a("li"),pbe=a("strong"),Afr=o("vit_mae"),yfr=o(" \u2014 "),TQ=a("a"),Lfr=o("TFViTMAEForPreTraining"),xfr=o(" (ViTMAE model)"),$fr=l(),G7=a("li"),ube=a("strong"),kfr=o("xlm"),Sfr=o(" \u2014 "),MQ=a("a"),Rfr=o("TFXLMWithLMHeadModel"),Bfr=o(" (XLM model)"),Pfr=l(),O7=a("li"),_be=a("strong"),Ifr=o("xlm-roberta"),qfr=o(" \u2014 "),EQ=a("a"),Nfr=o("TFXLMRobertaForMaskedLM"),jfr=o(" (XLM-RoBERTa model)"),Dfr=l(),V7=a("li"),bbe=a("strong"),Gfr=o("xlnet"),Ofr=o(" \u2014 "),CQ=a("a"),Vfr=o("TFXLNetLMHeadModel"),Xfr=o(" (XLNet model)"),zfr=l(),F(X7.$$.fragment),sqe=l(),Vd=a("h2"),z7=a("a"),vbe=a("span"),F(XL.$$.fragment),Qfr=l(),Fbe=a("span"),Wfr=o("TFAutoModelForCausalLM"),lqe=l(),Zo=a("div"),F(zL.$$.fragment),Hfr=l(),Xd=a("p"),Ufr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wQ=a("a"),Jfr=o("from_pretrained()"),Yfr=o(" class method or the "),AQ=a("a"),Kfr=o("from_config()"),Zfr=o(` class
method.`),emr=l(),QL=a("p"),omr=o("This class cannot be instantiated directly using "),Tbe=a("code"),rmr=o("__init__()"),tmr=o(" (throws an error)."),amr=l(),yt=a("div"),F(WL.$$.fragment),nmr=l(),Mbe=a("p"),smr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lmr=l(),zd=a("p"),imr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),dmr=o("not"),cmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),fmr=o("from_pretrained()"),mmr=o(" to load the model weights."),gmr=l(),F(Q7.$$.fragment),hmr=l(),yr=a("div"),F(HL.$$.fragment),pmr=l(),Cbe=a("p"),umr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_mr=l(),en=a("p"),bmr=o("The model class to instantiate is selected based on the "),wbe=a("code"),vmr=o("model_type"),Fmr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),Tmr=o("pretrained_model_name_or_path"),Mmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),Emr=o("pretrained_model_name_or_path"),Cmr=o(":"),wmr=l(),Te=a("ul"),W7=a("li"),Lbe=a("strong"),Amr=o("bert"),ymr=o(" \u2014 "),LQ=a("a"),Lmr=o("TFBertLMHeadModel"),xmr=o(" (BERT model)"),$mr=l(),H7=a("li"),xbe=a("strong"),kmr=o("camembert"),Smr=o(" \u2014 "),xQ=a("a"),Rmr=o("TFCamembertForCausalLM"),Bmr=o(" (CamemBERT model)"),Pmr=l(),U7=a("li"),$be=a("strong"),Imr=o("ctrl"),qmr=o(" \u2014 "),$Q=a("a"),Nmr=o("TFCTRLLMHeadModel"),jmr=o(" (CTRL model)"),Dmr=l(),J7=a("li"),kbe=a("strong"),Gmr=o("gpt2"),Omr=o(" \u2014 "),kQ=a("a"),Vmr=o("TFGPT2LMHeadModel"),Xmr=o(" (OpenAI GPT-2 model)"),zmr=l(),Y7=a("li"),Sbe=a("strong"),Qmr=o("gptj"),Wmr=o(" \u2014 "),SQ=a("a"),Hmr=o("TFGPTJForCausalLM"),Umr=o(" (GPT-J model)"),Jmr=l(),K7=a("li"),Rbe=a("strong"),Ymr=o("openai-gpt"),Kmr=o(" \u2014 "),RQ=a("a"),Zmr=o("TFOpenAIGPTLMHeadModel"),egr=o(" (OpenAI GPT model)"),ogr=l(),Z7=a("li"),Bbe=a("strong"),rgr=o("rembert"),tgr=o(" \u2014 "),BQ=a("a"),agr=o("TFRemBertForCausalLM"),ngr=o(" (RemBERT model)"),sgr=l(),eM=a("li"),Pbe=a("strong"),lgr=o("roberta"),igr=o(" \u2014 "),PQ=a("a"),dgr=o("TFRobertaForCausalLM"),cgr=o(" (RoBERTa model)"),fgr=l(),oM=a("li"),Ibe=a("strong"),mgr=o("roformer"),ggr=o(" \u2014 "),IQ=a("a"),hgr=o("TFRoFormerForCausalLM"),pgr=o(" (RoFormer model)"),ugr=l(),rM=a("li"),qbe=a("strong"),_gr=o("transfo-xl"),bgr=o(" \u2014 "),qQ=a("a"),vgr=o("TFTransfoXLLMHeadModel"),Fgr=o(" (Transformer-XL model)"),Tgr=l(),tM=a("li"),Nbe=a("strong"),Mgr=o("xlm"),Egr=o(" \u2014 "),NQ=a("a"),Cgr=o("TFXLMWithLMHeadModel"),wgr=o(" (XLM model)"),Agr=l(),aM=a("li"),jbe=a("strong"),ygr=o("xlnet"),Lgr=o(" \u2014 "),jQ=a("a"),xgr=o("TFXLNetLMHeadModel"),$gr=o(" (XLNet model)"),kgr=l(),F(nM.$$.fragment),iqe=l(),Qd=a("h2"),sM=a("a"),Dbe=a("span"),F(UL.$$.fragment),Sgr=l(),Gbe=a("span"),Rgr=o("TFAutoModelForImageClassification"),dqe=l(),er=a("div"),F(JL.$$.fragment),Bgr=l(),Wd=a("p"),Pgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DQ=a("a"),Igr=o("from_pretrained()"),qgr=o(" class method or the "),GQ=a("a"),Ngr=o("from_config()"),jgr=o(` class
method.`),Dgr=l(),YL=a("p"),Ggr=o("This class cannot be instantiated directly using "),Obe=a("code"),Ogr=o("__init__()"),Vgr=o(" (throws an error)."),Xgr=l(),Lt=a("div"),F(KL.$$.fragment),zgr=l(),Vbe=a("p"),Qgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wgr=l(),Hd=a("p"),Hgr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),Ugr=o("not"),Jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" to load the model weights."),Zgr=l(),F(lM.$$.fragment),ehr=l(),Lr=a("div"),F(ZL.$$.fragment),ohr=l(),zbe=a("p"),rhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),thr=l(),on=a("p"),ahr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),nhr=o("model_type"),shr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),dhr=o("pretrained_model_name_or_path"),chr=o(":"),fhr=l(),Ud=a("ul"),iM=a("li"),Ube=a("strong"),mhr=o("convnext"),ghr=o(" \u2014 "),VQ=a("a"),hhr=o("TFConvNextForImageClassification"),phr=o(" (ConvNext model)"),uhr=l(),dM=a("li"),Jbe=a("strong"),_hr=o("data2vec-vision"),bhr=o(" \u2014 "),XQ=a("a"),vhr=o("TFData2VecVisionForImageClassification"),Fhr=o(" (Data2VecVision model)"),Thr=l(),cM=a("li"),Ybe=a("strong"),Mhr=o("vit"),Ehr=o(" \u2014 "),zQ=a("a"),Chr=o("TFViTForImageClassification"),whr=o(" (ViT model)"),Ahr=l(),F(fM.$$.fragment),cqe=l(),Jd=a("h2"),mM=a("a"),Kbe=a("span"),F(e8.$$.fragment),yhr=l(),Zbe=a("span"),Lhr=o("TFAutoModelForMaskedLM"),fqe=l(),or=a("div"),F(o8.$$.fragment),xhr=l(),Yd=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QQ=a("a"),khr=o("from_pretrained()"),Shr=o(" class method or the "),WQ=a("a"),Rhr=o("from_config()"),Bhr=o(` class
method.`),Phr=l(),r8=a("p"),Ihr=o("This class cannot be instantiated directly using "),e4e=a("code"),qhr=o("__init__()"),Nhr=o(" (throws an error)."),jhr=l(),xt=a("div"),F(t8.$$.fragment),Dhr=l(),o4e=a("p"),Ghr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ohr=l(),Kd=a("p"),Vhr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),Xhr=o("not"),zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),Qhr=o("from_pretrained()"),Whr=o(" to load the model weights."),Hhr=l(),F(gM.$$.fragment),Uhr=l(),xr=a("div"),F(a8.$$.fragment),Jhr=l(),t4e=a("p"),Yhr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Khr=l(),rn=a("p"),Zhr=o("The model class to instantiate is selected based on the "),a4e=a("code"),epr=o("model_type"),opr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(":"),spr=l(),ie=a("ul"),hM=a("li"),l4e=a("strong"),lpr=o("albert"),ipr=o(" \u2014 "),UQ=a("a"),dpr=o("TFAlbertForMaskedLM"),cpr=o(" (ALBERT model)"),fpr=l(),pM=a("li"),i4e=a("strong"),mpr=o("bert"),gpr=o(" \u2014 "),JQ=a("a"),hpr=o("TFBertForMaskedLM"),ppr=o(" (BERT model)"),upr=l(),uM=a("li"),d4e=a("strong"),_pr=o("camembert"),bpr=o(" \u2014 "),YQ=a("a"),vpr=o("TFCamembertForMaskedLM"),Fpr=o(" (CamemBERT model)"),Tpr=l(),_M=a("li"),c4e=a("strong"),Mpr=o("convbert"),Epr=o(" \u2014 "),KQ=a("a"),Cpr=o("TFConvBertForMaskedLM"),wpr=o(" (ConvBERT model)"),Apr=l(),bM=a("li"),f4e=a("strong"),ypr=o("deberta"),Lpr=o(" \u2014 "),ZQ=a("a"),xpr=o("TFDebertaForMaskedLM"),$pr=o(" (DeBERTa model)"),kpr=l(),vM=a("li"),m4e=a("strong"),Spr=o("deberta-v2"),Rpr=o(" \u2014 "),eW=a("a"),Bpr=o("TFDebertaV2ForMaskedLM"),Ppr=o(" (DeBERTa-v2 model)"),Ipr=l(),FM=a("li"),g4e=a("strong"),qpr=o("distilbert"),Npr=o(" \u2014 "),oW=a("a"),jpr=o("TFDistilBertForMaskedLM"),Dpr=o(" (DistilBERT model)"),Gpr=l(),TM=a("li"),h4e=a("strong"),Opr=o("electra"),Vpr=o(" \u2014 "),rW=a("a"),Xpr=o("TFElectraForMaskedLM"),zpr=o(" (ELECTRA model)"),Qpr=l(),MM=a("li"),p4e=a("strong"),Wpr=o("flaubert"),Hpr=o(" \u2014 "),tW=a("a"),Upr=o("TFFlaubertWithLMHeadModel"),Jpr=o(" (FlauBERT model)"),Ypr=l(),EM=a("li"),u4e=a("strong"),Kpr=o("funnel"),Zpr=o(" \u2014 "),aW=a("a"),eur=o("TFFunnelForMaskedLM"),our=o(" (Funnel Transformer model)"),rur=l(),CM=a("li"),_4e=a("strong"),tur=o("layoutlm"),aur=o(" \u2014 "),nW=a("a"),nur=o("TFLayoutLMForMaskedLM"),sur=o(" (LayoutLM model)"),lur=l(),wM=a("li"),b4e=a("strong"),iur=o("longformer"),dur=o(" \u2014 "),sW=a("a"),cur=o("TFLongformerForMaskedLM"),fur=o(" (Longformer model)"),mur=l(),AM=a("li"),v4e=a("strong"),gur=o("mobilebert"),hur=o(" \u2014 "),lW=a("a"),pur=o("TFMobileBertForMaskedLM"),uur=o(" (MobileBERT model)"),_ur=l(),yM=a("li"),F4e=a("strong"),bur=o("mpnet"),vur=o(" \u2014 "),iW=a("a"),Fur=o("TFMPNetForMaskedLM"),Tur=o(" (MPNet model)"),Mur=l(),LM=a("li"),T4e=a("strong"),Eur=o("rembert"),Cur=o(" \u2014 "),dW=a("a"),wur=o("TFRemBertForMaskedLM"),Aur=o(" (RemBERT model)"),yur=l(),xM=a("li"),M4e=a("strong"),Lur=o("roberta"),xur=o(" \u2014 "),cW=a("a"),$ur=o("TFRobertaForMaskedLM"),kur=o(" (RoBERTa model)"),Sur=l(),$M=a("li"),E4e=a("strong"),Rur=o("roformer"),Bur=o(" \u2014 "),fW=a("a"),Pur=o("TFRoFormerForMaskedLM"),Iur=o(" (RoFormer model)"),qur=l(),kM=a("li"),C4e=a("strong"),Nur=o("tapas"),jur=o(" \u2014 "),mW=a("a"),Dur=o("TFTapasForMaskedLM"),Gur=o(" (TAPAS model)"),Our=l(),SM=a("li"),w4e=a("strong"),Vur=o("xlm"),Xur=o(" \u2014 "),gW=a("a"),zur=o("TFXLMWithLMHeadModel"),Qur=o(" (XLM model)"),Wur=l(),RM=a("li"),A4e=a("strong"),Hur=o("xlm-roberta"),Uur=o(" \u2014 "),hW=a("a"),Jur=o("TFXLMRobertaForMaskedLM"),Yur=o(" (XLM-RoBERTa model)"),Kur=l(),F(BM.$$.fragment),mqe=l(),Zd=a("h2"),PM=a("a"),y4e=a("span"),F(n8.$$.fragment),Zur=l(),L4e=a("span"),e_r=o("TFAutoModelForSeq2SeqLM"),gqe=l(),rr=a("div"),F(s8.$$.fragment),o_r=l(),ec=a("p"),r_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pW=a("a"),t_r=o("from_pretrained()"),a_r=o(" class method or the "),uW=a("a"),n_r=o("from_config()"),s_r=o(` class
method.`),l_r=l(),l8=a("p"),i_r=o("This class cannot be instantiated directly using "),x4e=a("code"),d_r=o("__init__()"),c_r=o(" (throws an error)."),f_r=l(),$t=a("div"),F(i8.$$.fragment),m_r=l(),$4e=a("p"),g_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h_r=l(),oc=a("p"),p_r=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),u_r=o("not"),__r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),b_r=o("from_pretrained()"),v_r=o(" to load the model weights."),F_r=l(),F(IM.$$.fragment),T_r=l(),$r=a("div"),F(d8.$$.fragment),M_r=l(),S4e=a("p"),E_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C_r=l(),tn=a("p"),w_r=o("The model class to instantiate is selected based on the "),R4e=a("code"),A_r=o("model_type"),y_r=o(` property of the config object (either
passed as an argument or loaded from `),B4e=a("code"),L_r=o("pretrained_model_name_or_path"),x_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),$_r=o("pretrained_model_name_or_path"),k_r=o(":"),S_r=l(),ye=a("ul"),qM=a("li"),I4e=a("strong"),R_r=o("bart"),B_r=o(" \u2014 "),bW=a("a"),P_r=o("TFBartForConditionalGeneration"),I_r=o(" (BART model)"),q_r=l(),NM=a("li"),q4e=a("strong"),N_r=o("blenderbot"),j_r=o(" \u2014 "),vW=a("a"),D_r=o("TFBlenderbotForConditionalGeneration"),G_r=o(" (Blenderbot model)"),O_r=l(),jM=a("li"),N4e=a("strong"),V_r=o("blenderbot-small"),X_r=o(" \u2014 "),FW=a("a"),z_r=o("TFBlenderbotSmallForConditionalGeneration"),Q_r=o(" (BlenderbotSmall model)"),W_r=l(),DM=a("li"),j4e=a("strong"),H_r=o("encoder-decoder"),U_r=o(" \u2014 "),TW=a("a"),J_r=o("TFEncoderDecoderModel"),Y_r=o(" (Encoder decoder model)"),K_r=l(),GM=a("li"),D4e=a("strong"),Z_r=o("led"),e1r=o(" \u2014 "),MW=a("a"),o1r=o("TFLEDForConditionalGeneration"),r1r=o(" (LED model)"),t1r=l(),OM=a("li"),G4e=a("strong"),a1r=o("marian"),n1r=o(" \u2014 "),EW=a("a"),s1r=o("TFMarianMTModel"),l1r=o(" (Marian model)"),i1r=l(),VM=a("li"),O4e=a("strong"),d1r=o("mbart"),c1r=o(" \u2014 "),CW=a("a"),f1r=o("TFMBartForConditionalGeneration"),m1r=o(" (mBART model)"),g1r=l(),XM=a("li"),V4e=a("strong"),h1r=o("mt5"),p1r=o(" \u2014 "),wW=a("a"),u1r=o("TFMT5ForConditionalGeneration"),_1r=o(" (mT5 model)"),b1r=l(),zM=a("li"),X4e=a("strong"),v1r=o("pegasus"),F1r=o(" \u2014 "),AW=a("a"),T1r=o("TFPegasusForConditionalGeneration"),M1r=o(" (Pegasus model)"),E1r=l(),QM=a("li"),z4e=a("strong"),C1r=o("t5"),w1r=o(" \u2014 "),yW=a("a"),A1r=o("TFT5ForConditionalGeneration"),y1r=o(" (T5 model)"),L1r=l(),F(WM.$$.fragment),hqe=l(),rc=a("h2"),HM=a("a"),Q4e=a("span"),F(c8.$$.fragment),x1r=l(),W4e=a("span"),$1r=o("TFAutoModelForSequenceClassification"),pqe=l(),tr=a("div"),F(f8.$$.fragment),k1r=l(),tc=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LW=a("a"),R1r=o("from_pretrained()"),B1r=o(" class method or the "),xW=a("a"),P1r=o("from_config()"),I1r=o(` class
method.`),q1r=l(),m8=a("p"),N1r=o("This class cannot be instantiated directly using "),H4e=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),kt=a("div"),F(g8.$$.fragment),O1r=l(),U4e=a("p"),V1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X1r=l(),ac=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),Q1r=o("not"),W1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(UM.$$.fragment),Y1r=l(),kr=a("div"),F(h8.$$.fragment),K1r=l(),Y4e=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ebr=l(),an=a("p"),obr=o("The model class to instantiate is selected based on the "),K4e=a("code"),rbr=o("model_type"),tbr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),abr=o("pretrained_model_name_or_path"),nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),sbr=o("pretrained_model_name_or_path"),lbr=o(":"),ibr=l(),Z=a("ul"),JM=a("li"),o2e=a("strong"),dbr=o("albert"),cbr=o(" \u2014 "),kW=a("a"),fbr=o("TFAlbertForSequenceClassification"),mbr=o(" (ALBERT model)"),gbr=l(),YM=a("li"),r2e=a("strong"),hbr=o("bert"),pbr=o(" \u2014 "),SW=a("a"),ubr=o("TFBertForSequenceClassification"),_br=o(" (BERT model)"),bbr=l(),KM=a("li"),t2e=a("strong"),vbr=o("camembert"),Fbr=o(" \u2014 "),RW=a("a"),Tbr=o("TFCamembertForSequenceClassification"),Mbr=o(" (CamemBERT model)"),Ebr=l(),ZM=a("li"),a2e=a("strong"),Cbr=o("convbert"),wbr=o(" \u2014 "),BW=a("a"),Abr=o("TFConvBertForSequenceClassification"),ybr=o(" (ConvBERT model)"),Lbr=l(),eE=a("li"),n2e=a("strong"),xbr=o("ctrl"),$br=o(" \u2014 "),PW=a("a"),kbr=o("TFCTRLForSequenceClassification"),Sbr=o(" (CTRL model)"),Rbr=l(),oE=a("li"),s2e=a("strong"),Bbr=o("deberta"),Pbr=o(" \u2014 "),IW=a("a"),Ibr=o("TFDebertaForSequenceClassification"),qbr=o(" (DeBERTa model)"),Nbr=l(),rE=a("li"),l2e=a("strong"),jbr=o("deberta-v2"),Dbr=o(" \u2014 "),qW=a("a"),Gbr=o("TFDebertaV2ForSequenceClassification"),Obr=o(" (DeBERTa-v2 model)"),Vbr=l(),tE=a("li"),i2e=a("strong"),Xbr=o("distilbert"),zbr=o(" \u2014 "),NW=a("a"),Qbr=o("TFDistilBertForSequenceClassification"),Wbr=o(" (DistilBERT model)"),Hbr=l(),aE=a("li"),d2e=a("strong"),Ubr=o("electra"),Jbr=o(" \u2014 "),jW=a("a"),Ybr=o("TFElectraForSequenceClassification"),Kbr=o(" (ELECTRA model)"),Zbr=l(),nE=a("li"),c2e=a("strong"),e4r=o("flaubert"),o4r=o(" \u2014 "),DW=a("a"),r4r=o("TFFlaubertForSequenceClassification"),t4r=o(" (FlauBERT model)"),a4r=l(),sE=a("li"),f2e=a("strong"),n4r=o("funnel"),s4r=o(" \u2014 "),GW=a("a"),l4r=o("TFFunnelForSequenceClassification"),i4r=o(" (Funnel Transformer model)"),d4r=l(),lE=a("li"),m2e=a("strong"),c4r=o("gpt2"),f4r=o(" \u2014 "),OW=a("a"),m4r=o("TFGPT2ForSequenceClassification"),g4r=o(" (OpenAI GPT-2 model)"),h4r=l(),iE=a("li"),g2e=a("strong"),p4r=o("gptj"),u4r=o(" \u2014 "),VW=a("a"),_4r=o("TFGPTJForSequenceClassification"),b4r=o(" (GPT-J model)"),v4r=l(),dE=a("li"),h2e=a("strong"),F4r=o("layoutlm"),T4r=o(" \u2014 "),XW=a("a"),M4r=o("TFLayoutLMForSequenceClassification"),E4r=o(" (LayoutLM model)"),C4r=l(),cE=a("li"),p2e=a("strong"),w4r=o("longformer"),A4r=o(" \u2014 "),zW=a("a"),y4r=o("TFLongformerForSequenceClassification"),L4r=o(" (Longformer model)"),x4r=l(),fE=a("li"),u2e=a("strong"),$4r=o("mobilebert"),k4r=o(" \u2014 "),QW=a("a"),S4r=o("TFMobileBertForSequenceClassification"),R4r=o(" (MobileBERT model)"),B4r=l(),mE=a("li"),_2e=a("strong"),P4r=o("mpnet"),I4r=o(" \u2014 "),WW=a("a"),q4r=o("TFMPNetForSequenceClassification"),N4r=o(" (MPNet model)"),j4r=l(),gE=a("li"),b2e=a("strong"),D4r=o("openai-gpt"),G4r=o(" \u2014 "),HW=a("a"),O4r=o("TFOpenAIGPTForSequenceClassification"),V4r=o(" (OpenAI GPT model)"),X4r=l(),hE=a("li"),v2e=a("strong"),z4r=o("rembert"),Q4r=o(" \u2014 "),UW=a("a"),W4r=o("TFRemBertForSequenceClassification"),H4r=o(" (RemBERT model)"),U4r=l(),pE=a("li"),F2e=a("strong"),J4r=o("roberta"),Y4r=o(" \u2014 "),JW=a("a"),K4r=o("TFRobertaForSequenceClassification"),Z4r=o(" (RoBERTa model)"),e2r=l(),uE=a("li"),T2e=a("strong"),o2r=o("roformer"),r2r=o(" \u2014 "),YW=a("a"),t2r=o("TFRoFormerForSequenceClassification"),a2r=o(" (RoFormer model)"),n2r=l(),_E=a("li"),M2e=a("strong"),s2r=o("tapas"),l2r=o(" \u2014 "),KW=a("a"),i2r=o("TFTapasForSequenceClassification"),d2r=o(" (TAPAS model)"),c2r=l(),bE=a("li"),E2e=a("strong"),f2r=o("transfo-xl"),m2r=o(" \u2014 "),ZW=a("a"),g2r=o("TFTransfoXLForSequenceClassification"),h2r=o(" (Transformer-XL model)"),p2r=l(),vE=a("li"),C2e=a("strong"),u2r=o("xlm"),_2r=o(" \u2014 "),eH=a("a"),b2r=o("TFXLMForSequenceClassification"),v2r=o(" (XLM model)"),F2r=l(),FE=a("li"),w2e=a("strong"),T2r=o("xlm-roberta"),M2r=o(" \u2014 "),oH=a("a"),E2r=o("TFXLMRobertaForSequenceClassification"),C2r=o(" (XLM-RoBERTa model)"),w2r=l(),TE=a("li"),A2e=a("strong"),A2r=o("xlnet"),y2r=o(" \u2014 "),rH=a("a"),L2r=o("TFXLNetForSequenceClassification"),x2r=o(" (XLNet model)"),$2r=l(),F(ME.$$.fragment),uqe=l(),nc=a("h2"),EE=a("a"),y2e=a("span"),F(p8.$$.fragment),k2r=l(),L2e=a("span"),S2r=o("TFAutoModelForMultipleChoice"),_qe=l(),ar=a("div"),F(u8.$$.fragment),R2r=l(),sc=a("p"),B2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tH=a("a"),P2r=o("from_pretrained()"),I2r=o(" class method or the "),aH=a("a"),q2r=o("from_config()"),N2r=o(` class
method.`),j2r=l(),_8=a("p"),D2r=o("This class cannot be instantiated directly using "),x2e=a("code"),G2r=o("__init__()"),O2r=o(" (throws an error)."),V2r=l(),St=a("div"),F(b8.$$.fragment),X2r=l(),$2e=a("p"),z2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q2r=l(),lc=a("p"),W2r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),H2r=o("not"),U2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),J2r=o("from_pretrained()"),Y2r=o(" to load the model weights."),K2r=l(),F(CE.$$.fragment),Z2r=l(),Sr=a("div"),F(v8.$$.fragment),evr=l(),S2e=a("p"),ovr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rvr=l(),nn=a("p"),tvr=o("The model class to instantiate is selected based on the "),R2e=a("code"),avr=o("model_type"),nvr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(":"),cvr=l(),pe=a("ul"),wE=a("li"),I2e=a("strong"),fvr=o("albert"),mvr=o(" \u2014 "),sH=a("a"),gvr=o("TFAlbertForMultipleChoice"),hvr=o(" (ALBERT model)"),pvr=l(),AE=a("li"),q2e=a("strong"),uvr=o("bert"),_vr=o(" \u2014 "),lH=a("a"),bvr=o("TFBertForMultipleChoice"),vvr=o(" (BERT model)"),Fvr=l(),yE=a("li"),N2e=a("strong"),Tvr=o("camembert"),Mvr=o(" \u2014 "),iH=a("a"),Evr=o("TFCamembertForMultipleChoice"),Cvr=o(" (CamemBERT model)"),wvr=l(),LE=a("li"),j2e=a("strong"),Avr=o("convbert"),yvr=o(" \u2014 "),dH=a("a"),Lvr=o("TFConvBertForMultipleChoice"),xvr=o(" (ConvBERT model)"),$vr=l(),xE=a("li"),D2e=a("strong"),kvr=o("distilbert"),Svr=o(" \u2014 "),cH=a("a"),Rvr=o("TFDistilBertForMultipleChoice"),Bvr=o(" (DistilBERT model)"),Pvr=l(),$E=a("li"),G2e=a("strong"),Ivr=o("electra"),qvr=o(" \u2014 "),fH=a("a"),Nvr=o("TFElectraForMultipleChoice"),jvr=o(" (ELECTRA model)"),Dvr=l(),kE=a("li"),O2e=a("strong"),Gvr=o("flaubert"),Ovr=o(" \u2014 "),mH=a("a"),Vvr=o("TFFlaubertForMultipleChoice"),Xvr=o(" (FlauBERT model)"),zvr=l(),SE=a("li"),V2e=a("strong"),Qvr=o("funnel"),Wvr=o(" \u2014 "),gH=a("a"),Hvr=o("TFFunnelForMultipleChoice"),Uvr=o(" (Funnel Transformer model)"),Jvr=l(),RE=a("li"),X2e=a("strong"),Yvr=o("longformer"),Kvr=o(" \u2014 "),hH=a("a"),Zvr=o("TFLongformerForMultipleChoice"),eFr=o(" (Longformer model)"),oFr=l(),BE=a("li"),z2e=a("strong"),rFr=o("mobilebert"),tFr=o(" \u2014 "),pH=a("a"),aFr=o("TFMobileBertForMultipleChoice"),nFr=o(" (MobileBERT model)"),sFr=l(),PE=a("li"),Q2e=a("strong"),lFr=o("mpnet"),iFr=o(" \u2014 "),uH=a("a"),dFr=o("TFMPNetForMultipleChoice"),cFr=o(" (MPNet model)"),fFr=l(),IE=a("li"),W2e=a("strong"),mFr=o("rembert"),gFr=o(" \u2014 "),_H=a("a"),hFr=o("TFRemBertForMultipleChoice"),pFr=o(" (RemBERT model)"),uFr=l(),qE=a("li"),H2e=a("strong"),_Fr=o("roberta"),bFr=o(" \u2014 "),bH=a("a"),vFr=o("TFRobertaForMultipleChoice"),FFr=o(" (RoBERTa model)"),TFr=l(),NE=a("li"),U2e=a("strong"),MFr=o("roformer"),EFr=o(" \u2014 "),vH=a("a"),CFr=o("TFRoFormerForMultipleChoice"),wFr=o(" (RoFormer model)"),AFr=l(),jE=a("li"),J2e=a("strong"),yFr=o("xlm"),LFr=o(" \u2014 "),FH=a("a"),xFr=o("TFXLMForMultipleChoice"),$Fr=o(" (XLM model)"),kFr=l(),DE=a("li"),Y2e=a("strong"),SFr=o("xlm-roberta"),RFr=o(" \u2014 "),TH=a("a"),BFr=o("TFXLMRobertaForMultipleChoice"),PFr=o(" (XLM-RoBERTa model)"),IFr=l(),GE=a("li"),K2e=a("strong"),qFr=o("xlnet"),NFr=o(" \u2014 "),MH=a("a"),jFr=o("TFXLNetForMultipleChoice"),DFr=o(" (XLNet model)"),GFr=l(),F(OE.$$.fragment),bqe=l(),ic=a("h2"),VE=a("a"),Z2e=a("span"),F(F8.$$.fragment),OFr=l(),eve=a("span"),VFr=o("TFAutoModelForNextSentencePrediction"),vqe=l(),nr=a("div"),F(T8.$$.fragment),XFr=l(),dc=a("p"),zFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EH=a("a"),QFr=o("from_pretrained()"),WFr=o(" class method or the "),CH=a("a"),HFr=o("from_config()"),UFr=o(` class
method.`),JFr=l(),M8=a("p"),YFr=o("This class cannot be instantiated directly using "),ove=a("code"),KFr=o("__init__()"),ZFr=o(" (throws an error)."),eTr=l(),Rt=a("div"),F(E8.$$.fragment),oTr=l(),rve=a("p"),rTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tTr=l(),cc=a("p"),aTr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),nTr=o("not"),sTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),lTr=o("from_pretrained()"),iTr=o(" to load the model weights."),dTr=l(),F(XE.$$.fragment),cTr=l(),Rr=a("div"),F(C8.$$.fragment),fTr=l(),ave=a("p"),mTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gTr=l(),sn=a("p"),hTr=o("The model class to instantiate is selected based on the "),nve=a("code"),pTr=o("model_type"),uTr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),_Tr=o("pretrained_model_name_or_path"),bTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),vTr=o("pretrained_model_name_or_path"),FTr=o(":"),TTr=l(),w8=a("ul"),zE=a("li"),ive=a("strong"),MTr=o("bert"),ETr=o(" \u2014 "),AH=a("a"),CTr=o("TFBertForNextSentencePrediction"),wTr=o(" (BERT model)"),ATr=l(),QE=a("li"),dve=a("strong"),yTr=o("mobilebert"),LTr=o(" \u2014 "),yH=a("a"),xTr=o("TFMobileBertForNextSentencePrediction"),$Tr=o(" (MobileBERT model)"),kTr=l(),F(WE.$$.fragment),Fqe=l(),fc=a("h2"),HE=a("a"),cve=a("span"),F(A8.$$.fragment),STr=l(),fve=a("span"),RTr=o("TFAutoModelForTableQuestionAnswering"),Tqe=l(),sr=a("div"),F(y8.$$.fragment),BTr=l(),mc=a("p"),PTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LH=a("a"),ITr=o("from_pretrained()"),qTr=o(" class method or the "),xH=a("a"),NTr=o("from_config()"),jTr=o(` class
method.`),DTr=l(),L8=a("p"),GTr=o("This class cannot be instantiated directly using "),mve=a("code"),OTr=o("__init__()"),VTr=o(" (throws an error)."),XTr=l(),Bt=a("div"),F(x8.$$.fragment),zTr=l(),gve=a("p"),QTr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),WTr=l(),gc=a("p"),HTr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),UTr=o("not"),JTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),YTr=o("from_pretrained()"),KTr=o(" to load the model weights."),ZTr=l(),F(UE.$$.fragment),e7r=l(),Br=a("div"),F($8.$$.fragment),o7r=l(),pve=a("p"),r7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),t7r=l(),ln=a("p"),a7r=o("The model class to instantiate is selected based on the "),uve=a("code"),n7r=o("model_type"),s7r=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),l7r=o("pretrained_model_name_or_path"),i7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),d7r=o("pretrained_model_name_or_path"),c7r=o(":"),f7r=l(),vve=a("ul"),JE=a("li"),Fve=a("strong"),m7r=o("tapas"),g7r=o(" \u2014 "),kH=a("a"),h7r=o("TFTapasForQuestionAnswering"),p7r=o(" (TAPAS model)"),u7r=l(),F(YE.$$.fragment),Mqe=l(),hc=a("h2"),KE=a("a"),Tve=a("span"),F(k8.$$.fragment),_7r=l(),Mve=a("span"),b7r=o("TFAutoModelForTokenClassification"),Eqe=l(),lr=a("div"),F(S8.$$.fragment),v7r=l(),pc=a("p"),F7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SH=a("a"),T7r=o("from_pretrained()"),M7r=o(" class method or the "),RH=a("a"),E7r=o("from_config()"),C7r=o(` class
method.`),w7r=l(),R8=a("p"),A7r=o("This class cannot be instantiated directly using "),Eve=a("code"),y7r=o("__init__()"),L7r=o(" (throws an error)."),x7r=l(),Pt=a("div"),F(B8.$$.fragment),$7r=l(),Cve=a("p"),k7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S7r=l(),uc=a("p"),R7r=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),B7r=o("not"),P7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),I7r=o("from_pretrained()"),q7r=o(" to load the model weights."),N7r=l(),F(ZE.$$.fragment),j7r=l(),Pr=a("div"),F(P8.$$.fragment),D7r=l(),Ave=a("p"),G7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O7r=l(),dn=a("p"),V7r=o("The model class to instantiate is selected based on the "),yve=a("code"),X7r=o("model_type"),z7r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),Q7r=o("pretrained_model_name_or_path"),W7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),H7r=o("pretrained_model_name_or_path"),U7r=o(":"),J7r=l(),de=a("ul"),e5=a("li"),$ve=a("strong"),Y7r=o("albert"),K7r=o(" \u2014 "),PH=a("a"),Z7r=o("TFAlbertForTokenClassification"),eMr=o(" (ALBERT model)"),oMr=l(),o5=a("li"),kve=a("strong"),rMr=o("bert"),tMr=o(" \u2014 "),IH=a("a"),aMr=o("TFBertForTokenClassification"),nMr=o(" (BERT model)"),sMr=l(),r5=a("li"),Sve=a("strong"),lMr=o("camembert"),iMr=o(" \u2014 "),qH=a("a"),dMr=o("TFCamembertForTokenClassification"),cMr=o(" (CamemBERT model)"),fMr=l(),t5=a("li"),Rve=a("strong"),mMr=o("convbert"),gMr=o(" \u2014 "),NH=a("a"),hMr=o("TFConvBertForTokenClassification"),pMr=o(" (ConvBERT model)"),uMr=l(),a5=a("li"),Bve=a("strong"),_Mr=o("deberta"),bMr=o(" \u2014 "),jH=a("a"),vMr=o("TFDebertaForTokenClassification"),FMr=o(" (DeBERTa model)"),TMr=l(),n5=a("li"),Pve=a("strong"),MMr=o("deberta-v2"),EMr=o(" \u2014 "),DH=a("a"),CMr=o("TFDebertaV2ForTokenClassification"),wMr=o(" (DeBERTa-v2 model)"),AMr=l(),s5=a("li"),Ive=a("strong"),yMr=o("distilbert"),LMr=o(" \u2014 "),GH=a("a"),xMr=o("TFDistilBertForTokenClassification"),$Mr=o(" (DistilBERT model)"),kMr=l(),l5=a("li"),qve=a("strong"),SMr=o("electra"),RMr=o(" \u2014 "),OH=a("a"),BMr=o("TFElectraForTokenClassification"),PMr=o(" (ELECTRA model)"),IMr=l(),i5=a("li"),Nve=a("strong"),qMr=o("flaubert"),NMr=o(" \u2014 "),VH=a("a"),jMr=o("TFFlaubertForTokenClassification"),DMr=o(" (FlauBERT model)"),GMr=l(),d5=a("li"),jve=a("strong"),OMr=o("funnel"),VMr=o(" \u2014 "),XH=a("a"),XMr=o("TFFunnelForTokenClassification"),zMr=o(" (Funnel Transformer model)"),QMr=l(),c5=a("li"),Dve=a("strong"),WMr=o("layoutlm"),HMr=o(" \u2014 "),zH=a("a"),UMr=o("TFLayoutLMForTokenClassification"),JMr=o(" (LayoutLM model)"),YMr=l(),f5=a("li"),Gve=a("strong"),KMr=o("longformer"),ZMr=o(" \u2014 "),QH=a("a"),eEr=o("TFLongformerForTokenClassification"),oEr=o(" (Longformer model)"),rEr=l(),m5=a("li"),Ove=a("strong"),tEr=o("mobilebert"),aEr=o(" \u2014 "),WH=a("a"),nEr=o("TFMobileBertForTokenClassification"),sEr=o(" (MobileBERT model)"),lEr=l(),g5=a("li"),Vve=a("strong"),iEr=o("mpnet"),dEr=o(" \u2014 "),HH=a("a"),cEr=o("TFMPNetForTokenClassification"),fEr=o(" (MPNet model)"),mEr=l(),h5=a("li"),Xve=a("strong"),gEr=o("rembert"),hEr=o(" \u2014 "),UH=a("a"),pEr=o("TFRemBertForTokenClassification"),uEr=o(" (RemBERT model)"),_Er=l(),p5=a("li"),zve=a("strong"),bEr=o("roberta"),vEr=o(" \u2014 "),JH=a("a"),FEr=o("TFRobertaForTokenClassification"),TEr=o(" (RoBERTa model)"),MEr=l(),u5=a("li"),Qve=a("strong"),EEr=o("roformer"),CEr=o(" \u2014 "),YH=a("a"),wEr=o("TFRoFormerForTokenClassification"),AEr=o(" (RoFormer model)"),yEr=l(),_5=a("li"),Wve=a("strong"),LEr=o("xlm"),xEr=o(" \u2014 "),KH=a("a"),$Er=o("TFXLMForTokenClassification"),kEr=o(" (XLM model)"),SEr=l(),b5=a("li"),Hve=a("strong"),REr=o("xlm-roberta"),BEr=o(" \u2014 "),ZH=a("a"),PEr=o("TFXLMRobertaForTokenClassification"),IEr=o(" (XLM-RoBERTa model)"),qEr=l(),v5=a("li"),Uve=a("strong"),NEr=o("xlnet"),jEr=o(" \u2014 "),eU=a("a"),DEr=o("TFXLNetForTokenClassification"),GEr=o(" (XLNet model)"),OEr=l(),F(F5.$$.fragment),Cqe=l(),_c=a("h2"),T5=a("a"),Jve=a("span"),F(I8.$$.fragment),VEr=l(),Yve=a("span"),XEr=o("TFAutoModelForQuestionAnswering"),wqe=l(),ir=a("div"),F(q8.$$.fragment),zEr=l(),bc=a("p"),QEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oU=a("a"),WEr=o("from_pretrained()"),HEr=o(" class method or the "),rU=a("a"),UEr=o("from_config()"),JEr=o(` class
method.`),YEr=l(),N8=a("p"),KEr=o("This class cannot be instantiated directly using "),Kve=a("code"),ZEr=o("__init__()"),e5r=o(" (throws an error)."),o5r=l(),It=a("div"),F(j8.$$.fragment),r5r=l(),Zve=a("p"),t5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a5r=l(),vc=a("p"),n5r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),s5r=o("not"),l5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),i5r=o("from_pretrained()"),d5r=o(" to load the model weights."),c5r=l(),F(M5.$$.fragment),f5r=l(),Ir=a("div"),F(D8.$$.fragment),m5r=l(),oFe=a("p"),g5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h5r=l(),cn=a("p"),p5r=o("The model class to instantiate is selected based on the "),rFe=a("code"),u5r=o("model_type"),_5r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(":"),M5r=l(),ce=a("ul"),E5=a("li"),nFe=a("strong"),E5r=o("albert"),C5r=o(" \u2014 "),aU=a("a"),w5r=o("TFAlbertForQuestionAnswering"),A5r=o(" (ALBERT model)"),y5r=l(),C5=a("li"),sFe=a("strong"),L5r=o("bert"),x5r=o(" \u2014 "),nU=a("a"),$5r=o("TFBertForQuestionAnswering"),k5r=o(" (BERT model)"),S5r=l(),w5=a("li"),lFe=a("strong"),R5r=o("camembert"),B5r=o(" \u2014 "),sU=a("a"),P5r=o("TFCamembertForQuestionAnswering"),I5r=o(" (CamemBERT model)"),q5r=l(),A5=a("li"),iFe=a("strong"),N5r=o("convbert"),j5r=o(" \u2014 "),lU=a("a"),D5r=o("TFConvBertForQuestionAnswering"),G5r=o(" (ConvBERT model)"),O5r=l(),y5=a("li"),dFe=a("strong"),V5r=o("deberta"),X5r=o(" \u2014 "),iU=a("a"),z5r=o("TFDebertaForQuestionAnswering"),Q5r=o(" (DeBERTa model)"),W5r=l(),L5=a("li"),cFe=a("strong"),H5r=o("deberta-v2"),U5r=o(" \u2014 "),dU=a("a"),J5r=o("TFDebertaV2ForQuestionAnswering"),Y5r=o(" (DeBERTa-v2 model)"),K5r=l(),x5=a("li"),fFe=a("strong"),Z5r=o("distilbert"),eCr=o(" \u2014 "),cU=a("a"),oCr=o("TFDistilBertForQuestionAnswering"),rCr=o(" (DistilBERT model)"),tCr=l(),$5=a("li"),mFe=a("strong"),aCr=o("electra"),nCr=o(" \u2014 "),fU=a("a"),sCr=o("TFElectraForQuestionAnswering"),lCr=o(" (ELECTRA model)"),iCr=l(),k5=a("li"),gFe=a("strong"),dCr=o("flaubert"),cCr=o(" \u2014 "),mU=a("a"),fCr=o("TFFlaubertForQuestionAnsweringSimple"),mCr=o(" (FlauBERT model)"),gCr=l(),S5=a("li"),hFe=a("strong"),hCr=o("funnel"),pCr=o(" \u2014 "),gU=a("a"),uCr=o("TFFunnelForQuestionAnswering"),_Cr=o(" (Funnel Transformer model)"),bCr=l(),R5=a("li"),pFe=a("strong"),vCr=o("gptj"),FCr=o(" \u2014 "),hU=a("a"),TCr=o("TFGPTJForQuestionAnswering"),MCr=o(" (GPT-J model)"),ECr=l(),B5=a("li"),uFe=a("strong"),CCr=o("longformer"),wCr=o(" \u2014 "),pU=a("a"),ACr=o("TFLongformerForQuestionAnswering"),yCr=o(" (Longformer model)"),LCr=l(),P5=a("li"),_Fe=a("strong"),xCr=o("mobilebert"),$Cr=o(" \u2014 "),uU=a("a"),kCr=o("TFMobileBertForQuestionAnswering"),SCr=o(" (MobileBERT model)"),RCr=l(),I5=a("li"),bFe=a("strong"),BCr=o("mpnet"),PCr=o(" \u2014 "),_U=a("a"),ICr=o("TFMPNetForQuestionAnswering"),qCr=o(" (MPNet model)"),NCr=l(),q5=a("li"),vFe=a("strong"),jCr=o("rembert"),DCr=o(" \u2014 "),bU=a("a"),GCr=o("TFRemBertForQuestionAnswering"),OCr=o(" (RemBERT model)"),VCr=l(),N5=a("li"),FFe=a("strong"),XCr=o("roberta"),zCr=o(" \u2014 "),vU=a("a"),QCr=o("TFRobertaForQuestionAnswering"),WCr=o(" (RoBERTa model)"),HCr=l(),j5=a("li"),TFe=a("strong"),UCr=o("roformer"),JCr=o(" \u2014 "),FU=a("a"),YCr=o("TFRoFormerForQuestionAnswering"),KCr=o(" (RoFormer model)"),ZCr=l(),D5=a("li"),MFe=a("strong"),e3r=o("xlm"),o3r=o(" \u2014 "),TU=a("a"),r3r=o("TFXLMForQuestionAnsweringSimple"),t3r=o(" (XLM model)"),a3r=l(),G5=a("li"),EFe=a("strong"),n3r=o("xlm-roberta"),s3r=o(" \u2014 "),MU=a("a"),l3r=o("TFXLMRobertaForQuestionAnswering"),i3r=o(" (XLM-RoBERTa model)"),d3r=l(),O5=a("li"),CFe=a("strong"),c3r=o("xlnet"),f3r=o(" \u2014 "),EU=a("a"),m3r=o("TFXLNetForQuestionAnsweringSimple"),g3r=o(" (XLNet model)"),h3r=l(),F(V5.$$.fragment),Aqe=l(),Fc=a("h2"),X5=a("a"),wFe=a("span"),F(G8.$$.fragment),p3r=l(),AFe=a("span"),u3r=o("TFAutoModelForVision2Seq"),yqe=l(),dr=a("div"),F(O8.$$.fragment),_3r=l(),Tc=a("p"),b3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CU=a("a"),v3r=o("from_pretrained()"),F3r=o(" class method or the "),wU=a("a"),T3r=o("from_config()"),M3r=o(` class
method.`),E3r=l(),V8=a("p"),C3r=o("This class cannot be instantiated directly using "),yFe=a("code"),w3r=o("__init__()"),A3r=o(" (throws an error)."),y3r=l(),qt=a("div"),F(X8.$$.fragment),L3r=l(),LFe=a("p"),x3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$3r=l(),Mc=a("p"),k3r=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),S3r=o("not"),R3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),B3r=o("from_pretrained()"),P3r=o(" to load the model weights."),I3r=l(),F(z5.$$.fragment),q3r=l(),qr=a("div"),F(z8.$$.fragment),N3r=l(),$Fe=a("p"),j3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D3r=l(),fn=a("p"),G3r=o("The model class to instantiate is selected based on the "),kFe=a("code"),O3r=o("model_type"),V3r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),X3r=o("pretrained_model_name_or_path"),z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),Q3r=o("pretrained_model_name_or_path"),W3r=o(":"),H3r=l(),BFe=a("ul"),Q5=a("li"),PFe=a("strong"),U3r=o("vision-encoder-decoder"),J3r=o(" \u2014 "),yU=a("a"),Y3r=o("TFVisionEncoderDecoderModel"),K3r=o(" (Vision Encoder decoder model)"),Z3r=l(),F(W5.$$.fragment),Lqe=l(),Ec=a("h2"),H5=a("a"),IFe=a("span"),F(Q8.$$.fragment),ewr=l(),qFe=a("span"),owr=o("TFAutoModelForSpeechSeq2Seq"),xqe=l(),cr=a("div"),F(W8.$$.fragment),rwr=l(),Cc=a("p"),twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LU=a("a"),awr=o("from_pretrained()"),nwr=o(" class method or the "),xU=a("a"),swr=o("from_config()"),lwr=o(` class
method.`),iwr=l(),H8=a("p"),dwr=o("This class cannot be instantiated directly using "),NFe=a("code"),cwr=o("__init__()"),fwr=o(" (throws an error)."),mwr=l(),Nt=a("div"),F(U8.$$.fragment),gwr=l(),jFe=a("p"),hwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pwr=l(),wc=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),_wr=o("not"),bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),vwr=o("from_pretrained()"),Fwr=o(" to load the model weights."),Twr=l(),F(U5.$$.fragment),Mwr=l(),Nr=a("div"),F(J8.$$.fragment),Ewr=l(),GFe=a("p"),Cwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wwr=l(),mn=a("p"),Awr=o("The model class to instantiate is selected based on the "),OFe=a("code"),ywr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),xwr=o("pretrained_model_name_or_path"),$wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),kwr=o("pretrained_model_name_or_path"),Swr=o(":"),Rwr=l(),zFe=a("ul"),J5=a("li"),QFe=a("strong"),Bwr=o("speech_to_text"),Pwr=o(" \u2014 "),kU=a("a"),Iwr=o("TFSpeech2TextForConditionalGeneration"),qwr=o(" (Speech2Text model)"),Nwr=l(),F(Y5.$$.fragment),$qe=l(),Ac=a("h2"),K5=a("a"),WFe=a("span"),F(Y8.$$.fragment),jwr=l(),HFe=a("span"),Dwr=o("FlaxAutoModel"),kqe=l(),fr=a("div"),F(K8.$$.fragment),Gwr=l(),yc=a("p"),Owr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SU=a("a"),Vwr=o("from_pretrained()"),Xwr=o(" class method or the "),RU=a("a"),zwr=o("from_config()"),Qwr=o(` class
method.`),Wwr=l(),Z8=a("p"),Hwr=o("This class cannot be instantiated directly using "),UFe=a("code"),Uwr=o("__init__()"),Jwr=o(" (throws an error)."),Ywr=l(),jt=a("div"),F(ex.$$.fragment),Kwr=l(),JFe=a("p"),Zwr=o("Instantiates one of the base model classes of the library from a configuration."),eAr=l(),Lc=a("p"),oAr=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),rAr=o("not"),tAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),aAr=o("from_pretrained()"),nAr=o(" to load the model weights."),sAr=l(),F(Z5.$$.fragment),lAr=l(),jr=a("div"),F(ox.$$.fragment),iAr=l(),KFe=a("p"),dAr=o("Instantiate one of the base model classes of the library from a pretrained model."),cAr=l(),gn=a("p"),fAr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),mAr=o("model_type"),gAr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),uAr=o("pretrained_model_name_or_path"),_Ar=o(":"),bAr=l(),re=a("ul"),eC=a("li"),rTe=a("strong"),vAr=o("albert"),FAr=o(" \u2014 "),PU=a("a"),TAr=o("FlaxAlbertModel"),MAr=o(" (ALBERT model)"),EAr=l(),oC=a("li"),tTe=a("strong"),CAr=o("bart"),wAr=o(" \u2014 "),IU=a("a"),AAr=o("FlaxBartModel"),yAr=o(" (BART model)"),LAr=l(),rC=a("li"),aTe=a("strong"),xAr=o("beit"),$Ar=o(" \u2014 "),qU=a("a"),kAr=o("FlaxBeitModel"),SAr=o(" (BEiT model)"),RAr=l(),tC=a("li"),nTe=a("strong"),BAr=o("bert"),PAr=o(" \u2014 "),NU=a("a"),IAr=o("FlaxBertModel"),qAr=o(" (BERT model)"),NAr=l(),aC=a("li"),sTe=a("strong"),jAr=o("big_bird"),DAr=o(" \u2014 "),jU=a("a"),GAr=o("FlaxBigBirdModel"),OAr=o(" (BigBird model)"),VAr=l(),nC=a("li"),lTe=a("strong"),XAr=o("blenderbot"),zAr=o(" \u2014 "),DU=a("a"),QAr=o("FlaxBlenderbotModel"),WAr=o(" (Blenderbot model)"),HAr=l(),sC=a("li"),iTe=a("strong"),UAr=o("blenderbot-small"),JAr=o(" \u2014 "),GU=a("a"),YAr=o("FlaxBlenderbotSmallModel"),KAr=o(" (BlenderbotSmall model)"),ZAr=l(),lC=a("li"),dTe=a("strong"),e6r=o("clip"),o6r=o(" \u2014 "),OU=a("a"),r6r=o("FlaxCLIPModel"),t6r=o(" (CLIP model)"),a6r=l(),iC=a("li"),cTe=a("strong"),n6r=o("distilbert"),s6r=o(" \u2014 "),VU=a("a"),l6r=o("FlaxDistilBertModel"),i6r=o(" (DistilBERT model)"),d6r=l(),dC=a("li"),fTe=a("strong"),c6r=o("electra"),f6r=o(" \u2014 "),XU=a("a"),m6r=o("FlaxElectraModel"),g6r=o(" (ELECTRA model)"),h6r=l(),cC=a("li"),mTe=a("strong"),p6r=o("gpt2"),u6r=o(" \u2014 "),zU=a("a"),_6r=o("FlaxGPT2Model"),b6r=o(" (OpenAI GPT-2 model)"),v6r=l(),fC=a("li"),gTe=a("strong"),F6r=o("gpt_neo"),T6r=o(" \u2014 "),QU=a("a"),M6r=o("FlaxGPTNeoModel"),E6r=o(" (GPT Neo model)"),C6r=l(),mC=a("li"),hTe=a("strong"),w6r=o("gptj"),A6r=o(" \u2014 "),WU=a("a"),y6r=o("FlaxGPTJModel"),L6r=o(" (GPT-J model)"),x6r=l(),gC=a("li"),pTe=a("strong"),$6r=o("marian"),k6r=o(" \u2014 "),HU=a("a"),S6r=o("FlaxMarianModel"),R6r=o(" (Marian model)"),B6r=l(),hC=a("li"),uTe=a("strong"),P6r=o("mbart"),I6r=o(" \u2014 "),UU=a("a"),q6r=o("FlaxMBartModel"),N6r=o(" (mBART model)"),j6r=l(),pC=a("li"),_Te=a("strong"),D6r=o("mt5"),G6r=o(" \u2014 "),JU=a("a"),O6r=o("FlaxMT5Model"),V6r=o(" (mT5 model)"),X6r=l(),uC=a("li"),bTe=a("strong"),z6r=o("pegasus"),Q6r=o(" \u2014 "),YU=a("a"),W6r=o("FlaxPegasusModel"),H6r=o(" (Pegasus model)"),U6r=l(),_C=a("li"),vTe=a("strong"),J6r=o("roberta"),Y6r=o(" \u2014 "),KU=a("a"),K6r=o("FlaxRobertaModel"),Z6r=o(" (RoBERTa model)"),e0r=l(),bC=a("li"),FTe=a("strong"),o0r=o("roformer"),r0r=o(" \u2014 "),ZU=a("a"),t0r=o("FlaxRoFormerModel"),a0r=o(" (RoFormer model)"),n0r=l(),vC=a("li"),TTe=a("strong"),s0r=o("t5"),l0r=o(" \u2014 "),eJ=a("a"),i0r=o("FlaxT5Model"),d0r=o(" (T5 model)"),c0r=l(),FC=a("li"),MTe=a("strong"),f0r=o("vision-text-dual-encoder"),m0r=o(" \u2014 "),oJ=a("a"),g0r=o("FlaxVisionTextDualEncoderModel"),h0r=o(" (VisionTextDualEncoder model)"),p0r=l(),TC=a("li"),ETe=a("strong"),u0r=o("vit"),_0r=o(" \u2014 "),rJ=a("a"),b0r=o("FlaxViTModel"),v0r=o(" (ViT model)"),F0r=l(),MC=a("li"),CTe=a("strong"),T0r=o("wav2vec2"),M0r=o(" \u2014 "),tJ=a("a"),E0r=o("FlaxWav2Vec2Model"),C0r=o(" (Wav2Vec2 model)"),w0r=l(),EC=a("li"),wTe=a("strong"),A0r=o("xglm"),y0r=o(" \u2014 "),aJ=a("a"),L0r=o("FlaxXGLMModel"),x0r=o(" (XGLM model)"),$0r=l(),CC=a("li"),ATe=a("strong"),k0r=o("xlm-roberta"),S0r=o(" \u2014 "),nJ=a("a"),R0r=o("FlaxXLMRobertaModel"),B0r=o(" (XLM-RoBERTa model)"),P0r=l(),F(wC.$$.fragment),Sqe=l(),xc=a("h2"),AC=a("a"),yTe=a("span"),F(rx.$$.fragment),I0r=l(),LTe=a("span"),q0r=o("FlaxAutoModelForCausalLM"),Rqe=l(),mr=a("div"),F(tx.$$.fragment),N0r=l(),$c=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sJ=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),lJ=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),ax=a("p"),z0r=o("This class cannot be instantiated directly using "),xTe=a("code"),Q0r=o("__init__()"),W0r=o(" (throws an error)."),H0r=l(),Dt=a("div"),F(nx.$$.fragment),U0r=l(),$Te=a("p"),J0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y0r=l(),kc=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),Z0r=o("not"),eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),oyr=o("from_pretrained()"),ryr=o(" to load the model weights."),tyr=l(),F(yC.$$.fragment),ayr=l(),Dr=a("div"),F(sx.$$.fragment),nyr=l(),STe=a("p"),syr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lyr=l(),hn=a("p"),iyr=o("The model class to instantiate is selected based on the "),RTe=a("code"),dyr=o("model_type"),cyr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(":"),pyr=l(),ke=a("ul"),LC=a("li"),ITe=a("strong"),uyr=o("bart"),_yr=o(" \u2014 "),dJ=a("a"),byr=o("FlaxBartForCausalLM"),vyr=o(" (BART model)"),Fyr=l(),xC=a("li"),qTe=a("strong"),Tyr=o("bert"),Myr=o(" \u2014 "),cJ=a("a"),Eyr=o("FlaxBertForCausalLM"),Cyr=o(" (BERT model)"),wyr=l(),$C=a("li"),NTe=a("strong"),Ayr=o("big_bird"),yyr=o(" \u2014 "),fJ=a("a"),Lyr=o("FlaxBigBirdForCausalLM"),xyr=o(" (BigBird model)"),$yr=l(),kC=a("li"),jTe=a("strong"),kyr=o("electra"),Syr=o(" \u2014 "),mJ=a("a"),Ryr=o("FlaxElectraForCausalLM"),Byr=o(" (ELECTRA model)"),Pyr=l(),SC=a("li"),DTe=a("strong"),Iyr=o("gpt2"),qyr=o(" \u2014 "),gJ=a("a"),Nyr=o("FlaxGPT2LMHeadModel"),jyr=o(" (OpenAI GPT-2 model)"),Dyr=l(),RC=a("li"),GTe=a("strong"),Gyr=o("gpt_neo"),Oyr=o(" \u2014 "),hJ=a("a"),Vyr=o("FlaxGPTNeoForCausalLM"),Xyr=o(" (GPT Neo model)"),zyr=l(),BC=a("li"),OTe=a("strong"),Qyr=o("gptj"),Wyr=o(" \u2014 "),pJ=a("a"),Hyr=o("FlaxGPTJForCausalLM"),Uyr=o(" (GPT-J model)"),Jyr=l(),PC=a("li"),VTe=a("strong"),Yyr=o("roberta"),Kyr=o(" \u2014 "),uJ=a("a"),Zyr=o("FlaxRobertaForCausalLM"),eLr=o(" (RoBERTa model)"),oLr=l(),IC=a("li"),XTe=a("strong"),rLr=o("xglm"),tLr=o(" \u2014 "),_J=a("a"),aLr=o("FlaxXGLMForCausalLM"),nLr=o(" (XGLM model)"),sLr=l(),F(qC.$$.fragment),Bqe=l(),Sc=a("h2"),NC=a("a"),zTe=a("span"),F(lx.$$.fragment),lLr=l(),QTe=a("span"),iLr=o("FlaxAutoModelForPreTraining"),Pqe=l(),gr=a("div"),F(ix.$$.fragment),dLr=l(),Rc=a("p"),cLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bJ=a("a"),fLr=o("from_pretrained()"),mLr=o(" class method or the "),vJ=a("a"),gLr=o("from_config()"),hLr=o(` class
method.`),pLr=l(),dx=a("p"),uLr=o("This class cannot be instantiated directly using "),WTe=a("code"),_Lr=o("__init__()"),bLr=o(" (throws an error)."),vLr=l(),Gt=a("div"),F(cx.$$.fragment),FLr=l(),HTe=a("p"),TLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MLr=l(),Bc=a("p"),ELr=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),CLr=o("not"),wLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=a("a"),ALr=o("from_pretrained()"),yLr=o(" to load the model weights."),LLr=l(),F(jC.$$.fragment),xLr=l(),Gr=a("div"),F(fx.$$.fragment),$Lr=l(),JTe=a("p"),kLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SLr=l(),pn=a("p"),RLr=o("The model class to instantiate is selected based on the "),YTe=a("code"),BLr=o("model_type"),PLr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),ILr=o("pretrained_model_name_or_path"),qLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),NLr=o("pretrained_model_name_or_path"),jLr=o(":"),DLr=l(),Me=a("ul"),DC=a("li"),e7e=a("strong"),GLr=o("albert"),OLr=o(" \u2014 "),TJ=a("a"),VLr=o("FlaxAlbertForPreTraining"),XLr=o(" (ALBERT model)"),zLr=l(),GC=a("li"),o7e=a("strong"),QLr=o("bart"),WLr=o(" \u2014 "),MJ=a("a"),HLr=o("FlaxBartForConditionalGeneration"),ULr=o(" (BART model)"),JLr=l(),OC=a("li"),r7e=a("strong"),YLr=o("bert"),KLr=o(" \u2014 "),EJ=a("a"),ZLr=o("FlaxBertForPreTraining"),e8r=o(" (BERT model)"),o8r=l(),VC=a("li"),t7e=a("strong"),r8r=o("big_bird"),t8r=o(" \u2014 "),CJ=a("a"),a8r=o("FlaxBigBirdForPreTraining"),n8r=o(" (BigBird model)"),s8r=l(),XC=a("li"),a7e=a("strong"),l8r=o("electra"),i8r=o(" \u2014 "),wJ=a("a"),d8r=o("FlaxElectraForPreTraining"),c8r=o(" (ELECTRA model)"),f8r=l(),zC=a("li"),n7e=a("strong"),m8r=o("mbart"),g8r=o(" \u2014 "),AJ=a("a"),h8r=o("FlaxMBartForConditionalGeneration"),p8r=o(" (mBART model)"),u8r=l(),QC=a("li"),s7e=a("strong"),_8r=o("mt5"),b8r=o(" \u2014 "),yJ=a("a"),v8r=o("FlaxMT5ForConditionalGeneration"),F8r=o(" (mT5 model)"),T8r=l(),WC=a("li"),l7e=a("strong"),M8r=o("roberta"),E8r=o(" \u2014 "),LJ=a("a"),C8r=o("FlaxRobertaForMaskedLM"),w8r=o(" (RoBERTa model)"),A8r=l(),HC=a("li"),i7e=a("strong"),y8r=o("roformer"),L8r=o(" \u2014 "),xJ=a("a"),x8r=o("FlaxRoFormerForMaskedLM"),$8r=o(" (RoFormer model)"),k8r=l(),UC=a("li"),d7e=a("strong"),S8r=o("t5"),R8r=o(" \u2014 "),$J=a("a"),B8r=o("FlaxT5ForConditionalGeneration"),P8r=o(" (T5 model)"),I8r=l(),JC=a("li"),c7e=a("strong"),q8r=o("wav2vec2"),N8r=o(" \u2014 "),kJ=a("a"),j8r=o("FlaxWav2Vec2ForPreTraining"),D8r=o(" (Wav2Vec2 model)"),G8r=l(),YC=a("li"),f7e=a("strong"),O8r=o("xlm-roberta"),V8r=o(" \u2014 "),SJ=a("a"),X8r=o("FlaxXLMRobertaForMaskedLM"),z8r=o(" (XLM-RoBERTa model)"),Q8r=l(),F(KC.$$.fragment),Iqe=l(),Pc=a("h2"),ZC=a("a"),m7e=a("span"),F(mx.$$.fragment),W8r=l(),g7e=a("span"),H8r=o("FlaxAutoModelForMaskedLM"),qqe=l(),hr=a("div"),F(gx.$$.fragment),U8r=l(),Ic=a("p"),J8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RJ=a("a"),Y8r=o("from_pretrained()"),K8r=o(" class method or the "),BJ=a("a"),Z8r=o("from_config()"),exr=o(` class
method.`),oxr=l(),hx=a("p"),rxr=o("This class cannot be instantiated directly using "),h7e=a("code"),txr=o("__init__()"),axr=o(" (throws an error)."),nxr=l(),Ot=a("div"),F(px.$$.fragment),sxr=l(),p7e=a("p"),lxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ixr=l(),qc=a("p"),dxr=o(`Note:
Loading a model from its configuration file does `),u7e=a("strong"),cxr=o("not"),fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),mxr=o("from_pretrained()"),gxr=o(" to load the model weights."),hxr=l(),F(e3.$$.fragment),pxr=l(),Or=a("div"),F(ux.$$.fragment),uxr=l(),_7e=a("p"),_xr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bxr=l(),un=a("p"),vxr=o("The model class to instantiate is selected based on the "),b7e=a("code"),Fxr=o("model_type"),Txr=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(":"),Axr=l(),Le=a("ul"),o3=a("li"),T7e=a("strong"),yxr=o("albert"),Lxr=o(" \u2014 "),IJ=a("a"),xxr=o("FlaxAlbertForMaskedLM"),$xr=o(" (ALBERT model)"),kxr=l(),r3=a("li"),M7e=a("strong"),Sxr=o("bart"),Rxr=o(" \u2014 "),qJ=a("a"),Bxr=o("FlaxBartForConditionalGeneration"),Pxr=o(" (BART model)"),Ixr=l(),t3=a("li"),E7e=a("strong"),qxr=o("bert"),Nxr=o(" \u2014 "),NJ=a("a"),jxr=o("FlaxBertForMaskedLM"),Dxr=o(" (BERT model)"),Gxr=l(),a3=a("li"),C7e=a("strong"),Oxr=o("big_bird"),Vxr=o(" \u2014 "),jJ=a("a"),Xxr=o("FlaxBigBirdForMaskedLM"),zxr=o(" (BigBird model)"),Qxr=l(),n3=a("li"),w7e=a("strong"),Wxr=o("distilbert"),Hxr=o(" \u2014 "),DJ=a("a"),Uxr=o("FlaxDistilBertForMaskedLM"),Jxr=o(" (DistilBERT model)"),Yxr=l(),s3=a("li"),A7e=a("strong"),Kxr=o("electra"),Zxr=o(" \u2014 "),GJ=a("a"),e9r=o("FlaxElectraForMaskedLM"),o9r=o(" (ELECTRA model)"),r9r=l(),l3=a("li"),y7e=a("strong"),t9r=o("mbart"),a9r=o(" \u2014 "),OJ=a("a"),n9r=o("FlaxMBartForConditionalGeneration"),s9r=o(" (mBART model)"),l9r=l(),i3=a("li"),L7e=a("strong"),i9r=o("roberta"),d9r=o(" \u2014 "),VJ=a("a"),c9r=o("FlaxRobertaForMaskedLM"),f9r=o(" (RoBERTa model)"),m9r=l(),d3=a("li"),x7e=a("strong"),g9r=o("roformer"),h9r=o(" \u2014 "),XJ=a("a"),p9r=o("FlaxRoFormerForMaskedLM"),u9r=o(" (RoFormer model)"),_9r=l(),c3=a("li"),$7e=a("strong"),b9r=o("xlm-roberta"),v9r=o(" \u2014 "),zJ=a("a"),F9r=o("FlaxXLMRobertaForMaskedLM"),T9r=o(" (XLM-RoBERTa model)"),M9r=l(),F(f3.$$.fragment),Nqe=l(),Nc=a("h2"),m3=a("a"),k7e=a("span"),F(_x.$$.fragment),E9r=l(),S7e=a("span"),C9r=o("FlaxAutoModelForSeq2SeqLM"),jqe=l(),pr=a("div"),F(bx.$$.fragment),w9r=l(),jc=a("p"),A9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QJ=a("a"),y9r=o("from_pretrained()"),L9r=o(" class method or the "),WJ=a("a"),x9r=o("from_config()"),$9r=o(` class
method.`),k9r=l(),vx=a("p"),S9r=o("This class cannot be instantiated directly using "),R7e=a("code"),R9r=o("__init__()"),B9r=o(" (throws an error)."),P9r=l(),Vt=a("div"),F(Fx.$$.fragment),I9r=l(),B7e=a("p"),q9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),N9r=l(),Dc=a("p"),j9r=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),D9r=o("not"),G9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),O9r=o("from_pretrained()"),V9r=o(" to load the model weights."),X9r=l(),F(g3.$$.fragment),z9r=l(),Vr=a("div"),F(Tx.$$.fragment),Q9r=l(),I7e=a("p"),W9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H9r=l(),_n=a("p"),U9r=o("The model class to instantiate is selected based on the "),q7e=a("code"),J9r=o("model_type"),Y9r=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),e$r=o("pretrained_model_name_or_path"),o$r=o(":"),r$r=l(),Se=a("ul"),h3=a("li"),D7e=a("strong"),t$r=o("bart"),a$r=o(" \u2014 "),UJ=a("a"),n$r=o("FlaxBartForConditionalGeneration"),s$r=o(" (BART model)"),l$r=l(),p3=a("li"),G7e=a("strong"),i$r=o("blenderbot"),d$r=o(" \u2014 "),JJ=a("a"),c$r=o("FlaxBlenderbotForConditionalGeneration"),f$r=o(" (Blenderbot model)"),m$r=l(),u3=a("li"),O7e=a("strong"),g$r=o("blenderbot-small"),h$r=o(" \u2014 "),YJ=a("a"),p$r=o("FlaxBlenderbotSmallForConditionalGeneration"),u$r=o(" (BlenderbotSmall model)"),_$r=l(),_3=a("li"),V7e=a("strong"),b$r=o("encoder-decoder"),v$r=o(" \u2014 "),KJ=a("a"),F$r=o("FlaxEncoderDecoderModel"),T$r=o(" (Encoder decoder model)"),M$r=l(),b3=a("li"),X7e=a("strong"),E$r=o("marian"),C$r=o(" \u2014 "),ZJ=a("a"),w$r=o("FlaxMarianMTModel"),A$r=o(" (Marian model)"),y$r=l(),v3=a("li"),z7e=a("strong"),L$r=o("mbart"),x$r=o(" \u2014 "),eY=a("a"),$$r=o("FlaxMBartForConditionalGeneration"),k$r=o(" (mBART model)"),S$r=l(),F3=a("li"),Q7e=a("strong"),R$r=o("mt5"),B$r=o(" \u2014 "),oY=a("a"),P$r=o("FlaxMT5ForConditionalGeneration"),I$r=o(" (mT5 model)"),q$r=l(),T3=a("li"),W7e=a("strong"),N$r=o("pegasus"),j$r=o(" \u2014 "),rY=a("a"),D$r=o("FlaxPegasusForConditionalGeneration"),G$r=o(" (Pegasus model)"),O$r=l(),M3=a("li"),H7e=a("strong"),V$r=o("t5"),X$r=o(" \u2014 "),tY=a("a"),z$r=o("FlaxT5ForConditionalGeneration"),Q$r=o(" (T5 model)"),W$r=l(),F(E3.$$.fragment),Dqe=l(),Gc=a("h2"),C3=a("a"),U7e=a("span"),F(Mx.$$.fragment),H$r=l(),J7e=a("span"),U$r=o("FlaxAutoModelForSequenceClassification"),Gqe=l(),ur=a("div"),F(Ex.$$.fragment),J$r=l(),Oc=a("p"),Y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aY=a("a"),K$r=o("from_pretrained()"),Z$r=o(" class method or the "),nY=a("a"),ekr=o("from_config()"),okr=o(` class
method.`),rkr=l(),Cx=a("p"),tkr=o("This class cannot be instantiated directly using "),Y7e=a("code"),akr=o("__init__()"),nkr=o(" (throws an error)."),skr=l(),Xt=a("div"),F(wx.$$.fragment),lkr=l(),K7e=a("p"),ikr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dkr=l(),Vc=a("p"),ckr=o(`Note:
Loading a model from its configuration file does `),Z7e=a("strong"),fkr=o("not"),mkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),gkr=o("from_pretrained()"),hkr=o(" to load the model weights."),pkr=l(),F(w3.$$.fragment),ukr=l(),Xr=a("div"),F(Ax.$$.fragment),_kr=l(),eMe=a("p"),bkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vkr=l(),bn=a("p"),Fkr=o("The model class to instantiate is selected based on the "),oMe=a("code"),Tkr=o("model_type"),Mkr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),Ekr=o("pretrained_model_name_or_path"),Ckr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),wkr=o("pretrained_model_name_or_path"),Akr=o(":"),ykr=l(),xe=a("ul"),A3=a("li"),aMe=a("strong"),Lkr=o("albert"),xkr=o(" \u2014 "),lY=a("a"),$kr=o("FlaxAlbertForSequenceClassification"),kkr=o(" (ALBERT model)"),Skr=l(),y3=a("li"),nMe=a("strong"),Rkr=o("bart"),Bkr=o(" \u2014 "),iY=a("a"),Pkr=o("FlaxBartForSequenceClassification"),Ikr=o(" (BART model)"),qkr=l(),L3=a("li"),sMe=a("strong"),Nkr=o("bert"),jkr=o(" \u2014 "),dY=a("a"),Dkr=o("FlaxBertForSequenceClassification"),Gkr=o(" (BERT model)"),Okr=l(),x3=a("li"),lMe=a("strong"),Vkr=o("big_bird"),Xkr=o(" \u2014 "),cY=a("a"),zkr=o("FlaxBigBirdForSequenceClassification"),Qkr=o(" (BigBird model)"),Wkr=l(),$3=a("li"),iMe=a("strong"),Hkr=o("distilbert"),Ukr=o(" \u2014 "),fY=a("a"),Jkr=o("FlaxDistilBertForSequenceClassification"),Ykr=o(" (DistilBERT model)"),Kkr=l(),k3=a("li"),dMe=a("strong"),Zkr=o("electra"),eSr=o(" \u2014 "),mY=a("a"),oSr=o("FlaxElectraForSequenceClassification"),rSr=o(" (ELECTRA model)"),tSr=l(),S3=a("li"),cMe=a("strong"),aSr=o("mbart"),nSr=o(" \u2014 "),gY=a("a"),sSr=o("FlaxMBartForSequenceClassification"),lSr=o(" (mBART model)"),iSr=l(),R3=a("li"),fMe=a("strong"),dSr=o("roberta"),cSr=o(" \u2014 "),hY=a("a"),fSr=o("FlaxRobertaForSequenceClassification"),mSr=o(" (RoBERTa model)"),gSr=l(),B3=a("li"),mMe=a("strong"),hSr=o("roformer"),pSr=o(" \u2014 "),pY=a("a"),uSr=o("FlaxRoFormerForSequenceClassification"),_Sr=o(" (RoFormer model)"),bSr=l(),P3=a("li"),gMe=a("strong"),vSr=o("xlm-roberta"),FSr=o(" \u2014 "),uY=a("a"),TSr=o("FlaxXLMRobertaForSequenceClassification"),MSr=o(" (XLM-RoBERTa model)"),ESr=l(),F(I3.$$.fragment),Oqe=l(),Xc=a("h2"),q3=a("a"),hMe=a("span"),F(yx.$$.fragment),CSr=l(),pMe=a("span"),wSr=o("FlaxAutoModelForQuestionAnswering"),Vqe=l(),_r=a("div"),F(Lx.$$.fragment),ASr=l(),zc=a("p"),ySr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_Y=a("a"),LSr=o("from_pretrained()"),xSr=o(" class method or the "),bY=a("a"),$Sr=o("from_config()"),kSr=o(` class
method.`),SSr=l(),xx=a("p"),RSr=o("This class cannot be instantiated directly using "),uMe=a("code"),BSr=o("__init__()"),PSr=o(" (throws an error)."),ISr=l(),zt=a("div"),F($x.$$.fragment),qSr=l(),_Me=a("p"),NSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jSr=l(),Qc=a("p"),DSr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),GSr=o("not"),OSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),VSr=o("from_pretrained()"),XSr=o(" to load the model weights."),zSr=l(),F(N3.$$.fragment),QSr=l(),zr=a("div"),F(kx.$$.fragment),WSr=l(),vMe=a("p"),HSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),USr=l(),vn=a("p"),JSr=o("The model class to instantiate is selected based on the "),FMe=a("code"),YSr=o("model_type"),KSr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),ZSr=o("pretrained_model_name_or_path"),eRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(":"),tRr=l(),$e=a("ul"),j3=a("li"),EMe=a("strong"),aRr=o("albert"),nRr=o(" \u2014 "),FY=a("a"),sRr=o("FlaxAlbertForQuestionAnswering"),lRr=o(" (ALBERT model)"),iRr=l(),D3=a("li"),CMe=a("strong"),dRr=o("bart"),cRr=o(" \u2014 "),TY=a("a"),fRr=o("FlaxBartForQuestionAnswering"),mRr=o(" (BART model)"),gRr=l(),G3=a("li"),wMe=a("strong"),hRr=o("bert"),pRr=o(" \u2014 "),MY=a("a"),uRr=o("FlaxBertForQuestionAnswering"),_Rr=o(" (BERT model)"),bRr=l(),O3=a("li"),AMe=a("strong"),vRr=o("big_bird"),FRr=o(" \u2014 "),EY=a("a"),TRr=o("FlaxBigBirdForQuestionAnswering"),MRr=o(" (BigBird model)"),ERr=l(),V3=a("li"),yMe=a("strong"),CRr=o("distilbert"),wRr=o(" \u2014 "),CY=a("a"),ARr=o("FlaxDistilBertForQuestionAnswering"),yRr=o(" (DistilBERT model)"),LRr=l(),X3=a("li"),LMe=a("strong"),xRr=o("electra"),$Rr=o(" \u2014 "),wY=a("a"),kRr=o("FlaxElectraForQuestionAnswering"),SRr=o(" (ELECTRA model)"),RRr=l(),z3=a("li"),xMe=a("strong"),BRr=o("mbart"),PRr=o(" \u2014 "),AY=a("a"),IRr=o("FlaxMBartForQuestionAnswering"),qRr=o(" (mBART model)"),NRr=l(),Q3=a("li"),$Me=a("strong"),jRr=o("roberta"),DRr=o(" \u2014 "),yY=a("a"),GRr=o("FlaxRobertaForQuestionAnswering"),ORr=o(" (RoBERTa model)"),VRr=l(),W3=a("li"),kMe=a("strong"),XRr=o("roformer"),zRr=o(" \u2014 "),LY=a("a"),QRr=o("FlaxRoFormerForQuestionAnswering"),WRr=o(" (RoFormer model)"),HRr=l(),H3=a("li"),SMe=a("strong"),URr=o("xlm-roberta"),JRr=o(" \u2014 "),xY=a("a"),YRr=o("FlaxXLMRobertaForQuestionAnswering"),KRr=o(" (XLM-RoBERTa model)"),ZRr=l(),F(U3.$$.fragment),Xqe=l(),Wc=a("h2"),J3=a("a"),RMe=a("span"),F(Sx.$$.fragment),eBr=l(),BMe=a("span"),oBr=o("FlaxAutoModelForTokenClassification"),zqe=l(),br=a("div"),F(Rx.$$.fragment),rBr=l(),Hc=a("p"),tBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Y=a("a"),aBr=o("from_pretrained()"),nBr=o(" class method or the "),kY=a("a"),sBr=o("from_config()"),lBr=o(` class
method.`),iBr=l(),Bx=a("p"),dBr=o("This class cannot be instantiated directly using "),PMe=a("code"),cBr=o("__init__()"),fBr=o(" (throws an error)."),mBr=l(),Qt=a("div"),F(Px.$$.fragment),gBr=l(),IMe=a("p"),hBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pBr=l(),Uc=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),_Br=o("not"),bBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=a("a"),vBr=o("from_pretrained()"),FBr=o(" to load the model weights."),TBr=l(),F(Y3.$$.fragment),MBr=l(),Qr=a("div"),F(Ix.$$.fragment),EBr=l(),NMe=a("p"),CBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wBr=l(),Fn=a("p"),ABr=o("The model class to instantiate is selected based on the "),jMe=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),kBr=o("pretrained_model_name_or_path"),SBr=o(":"),RBr=l(),De=a("ul"),K3=a("li"),OMe=a("strong"),BBr=o("albert"),PBr=o(" \u2014 "),RY=a("a"),IBr=o("FlaxAlbertForTokenClassification"),qBr=o(" (ALBERT model)"),NBr=l(),Z3=a("li"),VMe=a("strong"),jBr=o("bert"),DBr=o(" \u2014 "),BY=a("a"),GBr=o("FlaxBertForTokenClassification"),OBr=o(" (BERT model)"),VBr=l(),ew=a("li"),XMe=a("strong"),XBr=o("big_bird"),zBr=o(" \u2014 "),PY=a("a"),QBr=o("FlaxBigBirdForTokenClassification"),WBr=o(" (BigBird model)"),HBr=l(),ow=a("li"),zMe=a("strong"),UBr=o("distilbert"),JBr=o(" \u2014 "),IY=a("a"),YBr=o("FlaxDistilBertForTokenClassification"),KBr=o(" (DistilBERT model)"),ZBr=l(),rw=a("li"),QMe=a("strong"),ePr=o("electra"),oPr=o(" \u2014 "),qY=a("a"),rPr=o("FlaxElectraForTokenClassification"),tPr=o(" (ELECTRA model)"),aPr=l(),tw=a("li"),WMe=a("strong"),nPr=o("roberta"),sPr=o(" \u2014 "),NY=a("a"),lPr=o("FlaxRobertaForTokenClassification"),iPr=o(" (RoBERTa model)"),dPr=l(),aw=a("li"),HMe=a("strong"),cPr=o("roformer"),fPr=o(" \u2014 "),jY=a("a"),mPr=o("FlaxRoFormerForTokenClassification"),gPr=o(" (RoFormer model)"),hPr=l(),nw=a("li"),UMe=a("strong"),pPr=o("xlm-roberta"),uPr=o(" \u2014 "),DY=a("a"),_Pr=o("FlaxXLMRobertaForTokenClassification"),bPr=o(" (XLM-RoBERTa model)"),vPr=l(),F(sw.$$.fragment),Qqe=l(),Jc=a("h2"),lw=a("a"),JMe=a("span"),F(qx.$$.fragment),FPr=l(),YMe=a("span"),TPr=o("FlaxAutoModelForMultipleChoice"),Wqe=l(),vr=a("div"),F(Nx.$$.fragment),MPr=l(),Yc=a("p"),EPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GY=a("a"),CPr=o("from_pretrained()"),wPr=o(" class method or the "),OY=a("a"),APr=o("from_config()"),yPr=o(` class
method.`),LPr=l(),jx=a("p"),xPr=o("This class cannot be instantiated directly using "),KMe=a("code"),$Pr=o("__init__()"),kPr=o(" (throws an error)."),SPr=l(),Wt=a("div"),F(Dx.$$.fragment),RPr=l(),ZMe=a("p"),BPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PPr=l(),Kc=a("p"),IPr=o(`Note:
Loading a model from its configuration file does `),eEe=a("strong"),qPr=o("not"),NPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),jPr=o("from_pretrained()"),DPr=o(" to load the model weights."),GPr=l(),F(iw.$$.fragment),OPr=l(),Wr=a("div"),F(Gx.$$.fragment),VPr=l(),oEe=a("p"),XPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zPr=l(),Tn=a("p"),QPr=o("The model class to instantiate is selected based on the "),rEe=a("code"),WPr=o("model_type"),HPr=o(` property of the config object (either
passed as an argument or loaded from `),tEe=a("code"),UPr=o("pretrained_model_name_or_path"),JPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=a("code"),YPr=o("pretrained_model_name_or_path"),KPr=o(":"),ZPr=l(),Ge=a("ul"),dw=a("li"),nEe=a("strong"),eIr=o("albert"),oIr=o(" \u2014 "),XY=a("a"),rIr=o("FlaxAlbertForMultipleChoice"),tIr=o(" (ALBERT model)"),aIr=l(),cw=a("li"),sEe=a("strong"),nIr=o("bert"),sIr=o(" \u2014 "),zY=a("a"),lIr=o("FlaxBertForMultipleChoice"),iIr=o(" (BERT model)"),dIr=l(),fw=a("li"),lEe=a("strong"),cIr=o("big_bird"),fIr=o(" \u2014 "),QY=a("a"),mIr=o("FlaxBigBirdForMultipleChoice"),gIr=o(" (BigBird model)"),hIr=l(),mw=a("li"),iEe=a("strong"),pIr=o("distilbert"),uIr=o(" \u2014 "),WY=a("a"),_Ir=o("FlaxDistilBertForMultipleChoice"),bIr=o(" (DistilBERT model)"),vIr=l(),gw=a("li"),dEe=a("strong"),FIr=o("electra"),TIr=o(" \u2014 "),HY=a("a"),MIr=o("FlaxElectraForMultipleChoice"),EIr=o(" (ELECTRA model)"),CIr=l(),hw=a("li"),cEe=a("strong"),wIr=o("roberta"),AIr=o(" \u2014 "),UY=a("a"),yIr=o("FlaxRobertaForMultipleChoice"),LIr=o(" (RoBERTa model)"),xIr=l(),pw=a("li"),fEe=a("strong"),$Ir=o("roformer"),kIr=o(" \u2014 "),JY=a("a"),SIr=o("FlaxRoFormerForMultipleChoice"),RIr=o(" (RoFormer model)"),BIr=l(),uw=a("li"),mEe=a("strong"),PIr=o("xlm-roberta"),IIr=o(" \u2014 "),YY=a("a"),qIr=o("FlaxXLMRobertaForMultipleChoice"),NIr=o(" (XLM-RoBERTa model)"),jIr=l(),F(_w.$$.fragment),Hqe=l(),Zc=a("h2"),bw=a("a"),gEe=a("span"),F(Ox.$$.fragment),DIr=l(),hEe=a("span"),GIr=o("FlaxAutoModelForNextSentencePrediction"),Uqe=l(),Fr=a("div"),F(Vx.$$.fragment),OIr=l(),ef=a("p"),VIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KY=a("a"),XIr=o("from_pretrained()"),zIr=o(" class method or the "),ZY=a("a"),QIr=o("from_config()"),WIr=o(` class
method.`),HIr=l(),Xx=a("p"),UIr=o("This class cannot be instantiated directly using "),pEe=a("code"),JIr=o("__init__()"),YIr=o(" (throws an error)."),KIr=l(),Ht=a("div"),F(zx.$$.fragment),ZIr=l(),uEe=a("p"),eqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oqr=l(),of=a("p"),rqr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),tqr=o("not"),aqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),nqr=o("from_pretrained()"),sqr=o(" to load the model weights."),lqr=l(),F(vw.$$.fragment),iqr=l(),Hr=a("div"),F(Qx.$$.fragment),dqr=l(),bEe=a("p"),cqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fqr=l(),Mn=a("p"),mqr=o("The model class to instantiate is selected based on the "),vEe=a("code"),gqr=o("model_type"),hqr=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),pqr=o("pretrained_model_name_or_path"),uqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),_qr=o("pretrained_model_name_or_path"),bqr=o(":"),vqr=l(),MEe=a("ul"),Fw=a("li"),EEe=a("strong"),Fqr=o("bert"),Tqr=o(" \u2014 "),oK=a("a"),Mqr=o("FlaxBertForNextSentencePrediction"),Eqr=o(" (BERT model)"),Cqr=l(),F(Tw.$$.fragment),Jqe=l(),rf=a("h2"),Mw=a("a"),CEe=a("span"),F(Wx.$$.fragment),wqr=l(),wEe=a("span"),Aqr=o("FlaxAutoModelForImageClassification"),Yqe=l(),Tr=a("div"),F(Hx.$$.fragment),yqr=l(),tf=a("p"),Lqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rK=a("a"),xqr=o("from_pretrained()"),$qr=o(" class method or the "),tK=a("a"),kqr=o("from_config()"),Sqr=o(` class
method.`),Rqr=l(),Ux=a("p"),Bqr=o("This class cannot be instantiated directly using "),AEe=a("code"),Pqr=o("__init__()"),Iqr=o(" (throws an error)."),qqr=l(),Ut=a("div"),F(Jx.$$.fragment),Nqr=l(),yEe=a("p"),jqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dqr=l(),af=a("p"),Gqr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),Oqr=o("not"),Vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Xqr=o("from_pretrained()"),zqr=o(" to load the model weights."),Qqr=l(),F(Ew.$$.fragment),Wqr=l(),Ur=a("div"),F(Yx.$$.fragment),Hqr=l(),xEe=a("p"),Uqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jqr=l(),En=a("p"),Yqr=o("The model class to instantiate is selected based on the "),$Ee=a("code"),Kqr=o("model_type"),Zqr=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),eNr=o("pretrained_model_name_or_path"),oNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(":"),aNr=l(),Kx=a("ul"),Cw=a("li"),REe=a("strong"),nNr=o("beit"),sNr=o(" \u2014 "),nK=a("a"),lNr=o("FlaxBeitForImageClassification"),iNr=o(" (BEiT model)"),dNr=l(),ww=a("li"),BEe=a("strong"),cNr=o("vit"),fNr=o(" \u2014 "),sK=a("a"),mNr=o("FlaxViTForImageClassification"),gNr=o(" (ViT model)"),hNr=l(),F(Aw.$$.fragment),Kqe=l(),nf=a("h2"),yw=a("a"),PEe=a("span"),F(Zx.$$.fragment),pNr=l(),IEe=a("span"),uNr=o("FlaxAutoModelForVision2Seq"),Zqe=l(),Mr=a("div"),F(e9.$$.fragment),_Nr=l(),sf=a("p"),bNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lK=a("a"),vNr=o("from_pretrained()"),FNr=o(" class method or the "),iK=a("a"),TNr=o("from_config()"),MNr=o(` class
method.`),ENr=l(),o9=a("p"),CNr=o("This class cannot be instantiated directly using "),qEe=a("code"),wNr=o("__init__()"),ANr=o(" (throws an error)."),yNr=l(),Jt=a("div"),F(r9.$$.fragment),LNr=l(),NEe=a("p"),xNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Nr=l(),lf=a("p"),kNr=o(`Note:
Loading a model from its configuration file does `),jEe=a("strong"),SNr=o("not"),RNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),BNr=o("from_pretrained()"),PNr=o(" to load the model weights."),INr=l(),F(Lw.$$.fragment),qNr=l(),Jr=a("div"),F(t9.$$.fragment),NNr=l(),DEe=a("p"),jNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DNr=l(),Cn=a("p"),GNr=o("The model class to instantiate is selected based on the "),GEe=a("code"),ONr=o("model_type"),VNr=o(` property of the config object (either
passed as an argument or loaded from `),OEe=a("code"),XNr=o("pretrained_model_name_or_path"),zNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=a("code"),QNr=o("pretrained_model_name_or_path"),WNr=o(":"),HNr=l(),XEe=a("ul"),xw=a("li"),zEe=a("strong"),UNr=o("vision-encoder-decoder"),JNr=o(" \u2014 "),cK=a("a"),YNr=o("FlaxVisionEncoderDecoderModel"),KNr=o(" (Vision Encoder decoder model)"),ZNr=l(),F($w.$$.fragment),this.h()},l(f){const _=S0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var a9=s(p);m=n(a9,"A",{id:!0,class:!0,href:!0});var QEe=s(m);u=n(QEe,"SPAN",{});var WEe=s(u);T(d.$$.fragment,WEe),WEe.forEach(t),QEe.forEach(t),h=i(a9),Mo=n(a9,"SPAN",{});var HEe=s(Mo);li=r(HEe,"Auto Classes"),HEe.forEach(t),a9.forEach(t),mf=i(f),et=n(f,"P",{});var n9=s(et);ii=r(n9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(n9,"CODE",{});var UEe=s(di);U6=r(UEe,"from_pretrained()"),UEe.forEach(t),gf=r(n9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),n9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var JEe=s(An);J6=r(JEe,"AutoConfig"),JEe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var YEe=s(Ln);Y6=r(YEe,"AutoModel"),YEe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var KEe=s(xn);K6=r(KEe,"AutoTokenizer"),KEe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var s9=s(Ae);u$=r(s9,"will create a model that is an instance of "),gi=n(s9,"A",{href:!0});var ZEe=s(gi);_$=r(ZEe,"BertModel"),ZEe.forEach(t),b$=r(s9,"."),s9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var l9=s(Ea);v$=r(l9,"There is one class of "),pf=n(l9,"CODE",{});var e5e=s(pf);F$=r(e5e,"AutoModel"),e5e.forEach(t),iDe=r(l9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),l9.forEach(t),YPe=i(f),hi=n(f,"H2",{class:!0});var i9=s(hi);uf=n(i9,"A",{id:!0,class:!0,href:!0});var o5e=s(uf);aee=n(o5e,"SPAN",{});var r5e=s(aee);T(Z6.$$.fragment,r5e),r5e.forEach(t),o5e.forEach(t),dDe=i(i9),nee=n(i9,"SPAN",{});var t5e=s(nee);cDe=r(t5e,"Extending the Auto Classes"),t5e.forEach(t),i9.forEach(t),KPe=i(f),$n=n(f,"P",{});var df=s($n);fDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),see=n(df,"CODE",{});var a5e=s(see);mDe=r(a5e,"NewModel"),a5e.forEach(t),gDe=r(df,", make sure you have a "),lee=n(df,"CODE",{});var n5e=s(lee);hDe=r(n5e,"NewModelConfig"),n5e.forEach(t),pDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),ZPe=i(f),T(e0.$$.fragment,f),eIe=i(f),T$=n(f,"P",{});var s5e=s(T$);uDe=r(s5e,"You will then be able to use the auto classes like you would usually do!"),s5e.forEach(t),oIe=i(f),T(_f.$$.fragment,f),rIe=i(f),pi=n(f,"H2",{class:!0});var d9=s(pi);bf=n(d9,"A",{id:!0,class:!0,href:!0});var l5e=s(bf);iee=n(l5e,"SPAN",{});var i5e=s(iee);T(o0.$$.fragment,i5e),i5e.forEach(t),l5e.forEach(t),_De=i(d9),dee=n(d9,"SPAN",{});var d5e=s(dee);bDe=r(d5e,"AutoConfig"),d5e.forEach(t),d9.forEach(t),tIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(r0.$$.fragment,Kr),vDe=i(Kr),t0=n(Kr,"P",{});var c9=s(t0);FDe=r(c9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),M$=n(c9,"A",{href:!0});var c5e=s(M$);TDe=r(c5e,"from_pretrained()"),c5e.forEach(t),MDe=r(c9," class method."),c9.forEach(t),EDe=i(Kr),a0=n(Kr,"P",{});var f9=s(a0);CDe=r(f9,"This class cannot be instantiated directly using "),cee=n(f9,"CODE",{});var f5e=s(cee);wDe=r(f5e,"__init__()"),f5e.forEach(t),ADe=r(f9," (throws an error)."),f9.forEach(t),yDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(n0.$$.fragment,Zr),LDe=i(Zr),fee=n(Zr,"P",{});var m5e=s(fee);xDe=r(m5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),m5e.forEach(t),$De=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);kDe=r(cf,"The configuration class to instantiate is selected based on the "),mee=n(cf,"CODE",{});var g5e=s(mee);SDe=r(g5e,"model_type"),g5e.forEach(t),RDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gee=n(cf,"CODE",{});var h5e=s(gee);BDe=r(h5e,"pretrained_model_name_or_path"),h5e.forEach(t),PDe=r(cf,":"),cf.forEach(t),IDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var kw=s(vf);hee=n(kw,"STRONG",{});var p5e=s(hee);qDe=r(p5e,"albert"),p5e.forEach(t),NDe=r(kw," \u2014 "),E$=n(kw,"A",{href:!0});var u5e=s(E$);jDe=r(u5e,"AlbertConfig"),u5e.forEach(t),DDe=r(kw," (ALBERT model)"),kw.forEach(t),GDe=i(y),Ff=n(y,"LI",{});var Sw=s(Ff);pee=n(Sw,"STRONG",{});var _5e=s(pee);ODe=r(_5e,"bart"),_5e.forEach(t),VDe=r(Sw," \u2014 "),C$=n(Sw,"A",{href:!0});var b5e=s(C$);XDe=r(b5e,"BartConfig"),b5e.forEach(t),zDe=r(Sw," (BART model)"),Sw.forEach(t),QDe=i(y),Tf=n(y,"LI",{});var Rw=s(Tf);uee=n(Rw,"STRONG",{});var v5e=s(uee);WDe=r(v5e,"beit"),v5e.forEach(t),HDe=r(Rw," \u2014 "),w$=n(Rw,"A",{href:!0});var F5e=s(w$);UDe=r(F5e,"BeitConfig"),F5e.forEach(t),JDe=r(Rw," (BEiT model)"),Rw.forEach(t),YDe=i(y),Mf=n(y,"LI",{});var Bw=s(Mf);_ee=n(Bw,"STRONG",{});var T5e=s(_ee);KDe=r(T5e,"bert"),T5e.forEach(t),ZDe=r(Bw," \u2014 "),A$=n(Bw,"A",{href:!0});var M5e=s(A$);eGe=r(M5e,"BertConfig"),M5e.forEach(t),oGe=r(Bw," (BERT model)"),Bw.forEach(t),rGe=i(y),Ef=n(y,"LI",{});var Pw=s(Ef);bee=n(Pw,"STRONG",{});var E5e=s(bee);tGe=r(E5e,"bert-generation"),E5e.forEach(t),aGe=r(Pw," \u2014 "),y$=n(Pw,"A",{href:!0});var C5e=s(y$);nGe=r(C5e,"BertGenerationConfig"),C5e.forEach(t),sGe=r(Pw," (Bert Generation model)"),Pw.forEach(t),lGe=i(y),Cf=n(y,"LI",{});var Iw=s(Cf);vee=n(Iw,"STRONG",{});var w5e=s(vee);iGe=r(w5e,"big_bird"),w5e.forEach(t),dGe=r(Iw," \u2014 "),L$=n(Iw,"A",{href:!0});var A5e=s(L$);cGe=r(A5e,"BigBirdConfig"),A5e.forEach(t),fGe=r(Iw," (BigBird model)"),Iw.forEach(t),mGe=i(y),wf=n(y,"LI",{});var qw=s(wf);Fee=n(qw,"STRONG",{});var y5e=s(Fee);gGe=r(y5e,"bigbird_pegasus"),y5e.forEach(t),hGe=r(qw," \u2014 "),x$=n(qw,"A",{href:!0});var L5e=s(x$);pGe=r(L5e,"BigBirdPegasusConfig"),L5e.forEach(t),uGe=r(qw," (BigBirdPegasus model)"),qw.forEach(t),_Ge=i(y),Af=n(y,"LI",{});var Nw=s(Af);Tee=n(Nw,"STRONG",{});var x5e=s(Tee);bGe=r(x5e,"blenderbot"),x5e.forEach(t),vGe=r(Nw," \u2014 "),$$=n(Nw,"A",{href:!0});var $5e=s($$);FGe=r($5e,"BlenderbotConfig"),$5e.forEach(t),TGe=r(Nw," (Blenderbot model)"),Nw.forEach(t),MGe=i(y),yf=n(y,"LI",{});var jw=s(yf);Mee=n(jw,"STRONG",{});var k5e=s(Mee);EGe=r(k5e,"blenderbot-small"),k5e.forEach(t),CGe=r(jw," \u2014 "),k$=n(jw,"A",{href:!0});var S5e=s(k$);wGe=r(S5e,"BlenderbotSmallConfig"),S5e.forEach(t),AGe=r(jw," (BlenderbotSmall model)"),jw.forEach(t),yGe=i(y),Lf=n(y,"LI",{});var Dw=s(Lf);Eee=n(Dw,"STRONG",{});var R5e=s(Eee);LGe=r(R5e,"camembert"),R5e.forEach(t),xGe=r(Dw," \u2014 "),S$=n(Dw,"A",{href:!0});var B5e=s(S$);$Ge=r(B5e,"CamembertConfig"),B5e.forEach(t),kGe=r(Dw," (CamemBERT model)"),Dw.forEach(t),SGe=i(y),xf=n(y,"LI",{});var Gw=s(xf);Cee=n(Gw,"STRONG",{});var P5e=s(Cee);RGe=r(P5e,"canine"),P5e.forEach(t),BGe=r(Gw," \u2014 "),R$=n(Gw,"A",{href:!0});var I5e=s(R$);PGe=r(I5e,"CanineConfig"),I5e.forEach(t),IGe=r(Gw," (Canine model)"),Gw.forEach(t),qGe=i(y),$f=n(y,"LI",{});var Ow=s($f);wee=n(Ow,"STRONG",{});var q5e=s(wee);NGe=r(q5e,"clip"),q5e.forEach(t),jGe=r(Ow," \u2014 "),B$=n(Ow,"A",{href:!0});var N5e=s(B$);DGe=r(N5e,"CLIPConfig"),N5e.forEach(t),GGe=r(Ow," (CLIP model)"),Ow.forEach(t),OGe=i(y),kf=n(y,"LI",{});var Vw=s(kf);Aee=n(Vw,"STRONG",{});var j5e=s(Aee);VGe=r(j5e,"convbert"),j5e.forEach(t),XGe=r(Vw," \u2014 "),P$=n(Vw,"A",{href:!0});var D5e=s(P$);zGe=r(D5e,"ConvBertConfig"),D5e.forEach(t),QGe=r(Vw," (ConvBERT model)"),Vw.forEach(t),WGe=i(y),Sf=n(y,"LI",{});var Xw=s(Sf);yee=n(Xw,"STRONG",{});var G5e=s(yee);HGe=r(G5e,"convnext"),G5e.forEach(t),UGe=r(Xw," \u2014 "),I$=n(Xw,"A",{href:!0});var O5e=s(I$);JGe=r(O5e,"ConvNextConfig"),O5e.forEach(t),YGe=r(Xw," (ConvNext model)"),Xw.forEach(t),KGe=i(y),Rf=n(y,"LI",{});var zw=s(Rf);Lee=n(zw,"STRONG",{});var V5e=s(Lee);ZGe=r(V5e,"ctrl"),V5e.forEach(t),eOe=r(zw," \u2014 "),q$=n(zw,"A",{href:!0});var X5e=s(q$);oOe=r(X5e,"CTRLConfig"),X5e.forEach(t),rOe=r(zw," (CTRL model)"),zw.forEach(t),tOe=i(y),Bf=n(y,"LI",{});var Qw=s(Bf);xee=n(Qw,"STRONG",{});var z5e=s(xee);aOe=r(z5e,"data2vec-audio"),z5e.forEach(t),nOe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var Q5e=s(N$);sOe=r(Q5e,"Data2VecAudioConfig"),Q5e.forEach(t),lOe=r(Qw," (Data2VecAudio model)"),Qw.forEach(t),iOe=i(y),Pf=n(y,"LI",{});var Ww=s(Pf);$ee=n(Ww,"STRONG",{});var W5e=s($ee);dOe=r(W5e,"data2vec-text"),W5e.forEach(t),cOe=r(Ww," \u2014 "),j$=n(Ww,"A",{href:!0});var H5e=s(j$);fOe=r(H5e,"Data2VecTextConfig"),H5e.forEach(t),mOe=r(Ww," (Data2VecText model)"),Ww.forEach(t),gOe=i(y),If=n(y,"LI",{});var Hw=s(If);kee=n(Hw,"STRONG",{});var U5e=s(kee);hOe=r(U5e,"data2vec-vision"),U5e.forEach(t),pOe=r(Hw," \u2014 "),D$=n(Hw,"A",{href:!0});var J5e=s(D$);uOe=r(J5e,"Data2VecVisionConfig"),J5e.forEach(t),_Oe=r(Hw," (Data2VecVision model)"),Hw.forEach(t),bOe=i(y),qf=n(y,"LI",{});var Uw=s(qf);See=n(Uw,"STRONG",{});var Y5e=s(See);vOe=r(Y5e,"deberta"),Y5e.forEach(t),FOe=r(Uw," \u2014 "),G$=n(Uw,"A",{href:!0});var K5e=s(G$);TOe=r(K5e,"DebertaConfig"),K5e.forEach(t),MOe=r(Uw," (DeBERTa model)"),Uw.forEach(t),EOe=i(y),Nf=n(y,"LI",{});var Jw=s(Nf);Ree=n(Jw,"STRONG",{});var Z5e=s(Ree);COe=r(Z5e,"deberta-v2"),Z5e.forEach(t),wOe=r(Jw," \u2014 "),O$=n(Jw,"A",{href:!0});var eCe=s(O$);AOe=r(eCe,"DebertaV2Config"),eCe.forEach(t),yOe=r(Jw," (DeBERTa-v2 model)"),Jw.forEach(t),LOe=i(y),jf=n(y,"LI",{});var Yw=s(jf);Bee=n(Yw,"STRONG",{});var oCe=s(Bee);xOe=r(oCe,"decision_transformer"),oCe.forEach(t),$Oe=r(Yw," \u2014 "),V$=n(Yw,"A",{href:!0});var rCe=s(V$);kOe=r(rCe,"DecisionTransformerConfig"),rCe.forEach(t),SOe=r(Yw," (Decision Transformer model)"),Yw.forEach(t),ROe=i(y),Df=n(y,"LI",{});var Kw=s(Df);Pee=n(Kw,"STRONG",{});var tCe=s(Pee);BOe=r(tCe,"deit"),tCe.forEach(t),POe=r(Kw," \u2014 "),X$=n(Kw,"A",{href:!0});var aCe=s(X$);IOe=r(aCe,"DeiTConfig"),aCe.forEach(t),qOe=r(Kw," (DeiT model)"),Kw.forEach(t),NOe=i(y),Gf=n(y,"LI",{});var Zw=s(Gf);Iee=n(Zw,"STRONG",{});var nCe=s(Iee);jOe=r(nCe,"detr"),nCe.forEach(t),DOe=r(Zw," \u2014 "),z$=n(Zw,"A",{href:!0});var ojr=s(z$);GOe=r(ojr,"DetrConfig"),ojr.forEach(t),OOe=r(Zw," (DETR model)"),Zw.forEach(t),VOe=i(y),Of=n(y,"LI",{});var sCe=s(Of);qee=n(sCe,"STRONG",{});var rjr=s(qee);XOe=r(rjr,"distilbert"),rjr.forEach(t),zOe=r(sCe," \u2014 "),Q$=n(sCe,"A",{href:!0});var tjr=s(Q$);QOe=r(tjr,"DistilBertConfig"),tjr.forEach(t),WOe=r(sCe," (DistilBERT model)"),sCe.forEach(t),HOe=i(y),Vf=n(y,"LI",{});var lCe=s(Vf);Nee=n(lCe,"STRONG",{});var ajr=s(Nee);UOe=r(ajr,"dpr"),ajr.forEach(t),JOe=r(lCe," \u2014 "),W$=n(lCe,"A",{href:!0});var njr=s(W$);YOe=r(njr,"DPRConfig"),njr.forEach(t),KOe=r(lCe," (DPR model)"),lCe.forEach(t),ZOe=i(y),Xf=n(y,"LI",{});var iCe=s(Xf);jee=n(iCe,"STRONG",{});var sjr=s(jee);eVe=r(sjr,"dpt"),sjr.forEach(t),oVe=r(iCe," \u2014 "),H$=n(iCe,"A",{href:!0});var ljr=s(H$);rVe=r(ljr,"DPTConfig"),ljr.forEach(t),tVe=r(iCe," (DPT model)"),iCe.forEach(t),aVe=i(y),zf=n(y,"LI",{});var dCe=s(zf);Dee=n(dCe,"STRONG",{});var ijr=s(Dee);nVe=r(ijr,"electra"),ijr.forEach(t),sVe=r(dCe," \u2014 "),U$=n(dCe,"A",{href:!0});var djr=s(U$);lVe=r(djr,"ElectraConfig"),djr.forEach(t),iVe=r(dCe," (ELECTRA model)"),dCe.forEach(t),dVe=i(y),Qf=n(y,"LI",{});var cCe=s(Qf);Gee=n(cCe,"STRONG",{});var cjr=s(Gee);cVe=r(cjr,"encoder-decoder"),cjr.forEach(t),fVe=r(cCe," \u2014 "),J$=n(cCe,"A",{href:!0});var fjr=s(J$);mVe=r(fjr,"EncoderDecoderConfig"),fjr.forEach(t),gVe=r(cCe," (Encoder decoder model)"),cCe.forEach(t),hVe=i(y),Wf=n(y,"LI",{});var fCe=s(Wf);Oee=n(fCe,"STRONG",{});var mjr=s(Oee);pVe=r(mjr,"flaubert"),mjr.forEach(t),uVe=r(fCe," \u2014 "),Y$=n(fCe,"A",{href:!0});var gjr=s(Y$);_Ve=r(gjr,"FlaubertConfig"),gjr.forEach(t),bVe=r(fCe," (FlauBERT model)"),fCe.forEach(t),vVe=i(y),Hf=n(y,"LI",{});var mCe=s(Hf);Vee=n(mCe,"STRONG",{});var hjr=s(Vee);FVe=r(hjr,"flava"),hjr.forEach(t),TVe=r(mCe," \u2014 "),K$=n(mCe,"A",{href:!0});var pjr=s(K$);MVe=r(pjr,"FlavaConfig"),pjr.forEach(t),EVe=r(mCe," (Flava model)"),mCe.forEach(t),CVe=i(y),Uf=n(y,"LI",{});var gCe=s(Uf);Xee=n(gCe,"STRONG",{});var ujr=s(Xee);wVe=r(ujr,"fnet"),ujr.forEach(t),AVe=r(gCe," \u2014 "),Z$=n(gCe,"A",{href:!0});var _jr=s(Z$);yVe=r(_jr,"FNetConfig"),_jr.forEach(t),LVe=r(gCe," (FNet model)"),gCe.forEach(t),xVe=i(y),Jf=n(y,"LI",{});var hCe=s(Jf);zee=n(hCe,"STRONG",{});var bjr=s(zee);$Ve=r(bjr,"fsmt"),bjr.forEach(t),kVe=r(hCe," \u2014 "),ek=n(hCe,"A",{href:!0});var vjr=s(ek);SVe=r(vjr,"FSMTConfig"),vjr.forEach(t),RVe=r(hCe," (FairSeq Machine-Translation model)"),hCe.forEach(t),BVe=i(y),Yf=n(y,"LI",{});var pCe=s(Yf);Qee=n(pCe,"STRONG",{});var Fjr=s(Qee);PVe=r(Fjr,"funnel"),Fjr.forEach(t),IVe=r(pCe," \u2014 "),ok=n(pCe,"A",{href:!0});var Tjr=s(ok);qVe=r(Tjr,"FunnelConfig"),Tjr.forEach(t),NVe=r(pCe," (Funnel Transformer model)"),pCe.forEach(t),jVe=i(y),Kf=n(y,"LI",{});var uCe=s(Kf);Wee=n(uCe,"STRONG",{});var Mjr=s(Wee);DVe=r(Mjr,"glpn"),Mjr.forEach(t),GVe=r(uCe," \u2014 "),rk=n(uCe,"A",{href:!0});var Ejr=s(rk);OVe=r(Ejr,"GLPNConfig"),Ejr.forEach(t),VVe=r(uCe," (GLPN model)"),uCe.forEach(t),XVe=i(y),Zf=n(y,"LI",{});var _Ce=s(Zf);Hee=n(_Ce,"STRONG",{});var Cjr=s(Hee);zVe=r(Cjr,"gpt2"),Cjr.forEach(t),QVe=r(_Ce," \u2014 "),tk=n(_Ce,"A",{href:!0});var wjr=s(tk);WVe=r(wjr,"GPT2Config"),wjr.forEach(t),HVe=r(_Ce," (OpenAI GPT-2 model)"),_Ce.forEach(t),UVe=i(y),em=n(y,"LI",{});var bCe=s(em);Uee=n(bCe,"STRONG",{});var Ajr=s(Uee);JVe=r(Ajr,"gpt_neo"),Ajr.forEach(t),YVe=r(bCe," \u2014 "),ak=n(bCe,"A",{href:!0});var yjr=s(ak);KVe=r(yjr,"GPTNeoConfig"),yjr.forEach(t),ZVe=r(bCe," (GPT Neo model)"),bCe.forEach(t),eXe=i(y),om=n(y,"LI",{});var vCe=s(om);Jee=n(vCe,"STRONG",{});var Ljr=s(Jee);oXe=r(Ljr,"gptj"),Ljr.forEach(t),rXe=r(vCe," \u2014 "),nk=n(vCe,"A",{href:!0});var xjr=s(nk);tXe=r(xjr,"GPTJConfig"),xjr.forEach(t),aXe=r(vCe," (GPT-J model)"),vCe.forEach(t),nXe=i(y),rm=n(y,"LI",{});var FCe=s(rm);Yee=n(FCe,"STRONG",{});var $jr=s(Yee);sXe=r($jr,"hubert"),$jr.forEach(t),lXe=r(FCe," \u2014 "),sk=n(FCe,"A",{href:!0});var kjr=s(sk);iXe=r(kjr,"HubertConfig"),kjr.forEach(t),dXe=r(FCe," (Hubert model)"),FCe.forEach(t),cXe=i(y),tm=n(y,"LI",{});var TCe=s(tm);Kee=n(TCe,"STRONG",{});var Sjr=s(Kee);fXe=r(Sjr,"ibert"),Sjr.forEach(t),mXe=r(TCe," \u2014 "),lk=n(TCe,"A",{href:!0});var Rjr=s(lk);gXe=r(Rjr,"IBertConfig"),Rjr.forEach(t),hXe=r(TCe," (I-BERT model)"),TCe.forEach(t),pXe=i(y),am=n(y,"LI",{});var MCe=s(am);Zee=n(MCe,"STRONG",{});var Bjr=s(Zee);uXe=r(Bjr,"imagegpt"),Bjr.forEach(t),_Xe=r(MCe," \u2014 "),ik=n(MCe,"A",{href:!0});var Pjr=s(ik);bXe=r(Pjr,"ImageGPTConfig"),Pjr.forEach(t),vXe=r(MCe," (ImageGPT model)"),MCe.forEach(t),FXe=i(y),nm=n(y,"LI",{});var ECe=s(nm);eoe=n(ECe,"STRONG",{});var Ijr=s(eoe);TXe=r(Ijr,"layoutlm"),Ijr.forEach(t),MXe=r(ECe," \u2014 "),dk=n(ECe,"A",{href:!0});var qjr=s(dk);EXe=r(qjr,"LayoutLMConfig"),qjr.forEach(t),CXe=r(ECe," (LayoutLM model)"),ECe.forEach(t),wXe=i(y),sm=n(y,"LI",{});var CCe=s(sm);ooe=n(CCe,"STRONG",{});var Njr=s(ooe);AXe=r(Njr,"layoutlmv2"),Njr.forEach(t),yXe=r(CCe," \u2014 "),ck=n(CCe,"A",{href:!0});var jjr=s(ck);LXe=r(jjr,"LayoutLMv2Config"),jjr.forEach(t),xXe=r(CCe," (LayoutLMv2 model)"),CCe.forEach(t),$Xe=i(y),lm=n(y,"LI",{});var wCe=s(lm);roe=n(wCe,"STRONG",{});var Djr=s(roe);kXe=r(Djr,"led"),Djr.forEach(t),SXe=r(wCe," \u2014 "),fk=n(wCe,"A",{href:!0});var Gjr=s(fk);RXe=r(Gjr,"LEDConfig"),Gjr.forEach(t),BXe=r(wCe," (LED model)"),wCe.forEach(t),PXe=i(y),im=n(y,"LI",{});var ACe=s(im);toe=n(ACe,"STRONG",{});var Ojr=s(toe);IXe=r(Ojr,"longformer"),Ojr.forEach(t),qXe=r(ACe," \u2014 "),mk=n(ACe,"A",{href:!0});var Vjr=s(mk);NXe=r(Vjr,"LongformerConfig"),Vjr.forEach(t),jXe=r(ACe," (Longformer model)"),ACe.forEach(t),DXe=i(y),dm=n(y,"LI",{});var yCe=s(dm);aoe=n(yCe,"STRONG",{});var Xjr=s(aoe);GXe=r(Xjr,"luke"),Xjr.forEach(t),OXe=r(yCe," \u2014 "),gk=n(yCe,"A",{href:!0});var zjr=s(gk);VXe=r(zjr,"LukeConfig"),zjr.forEach(t),XXe=r(yCe," (LUKE model)"),yCe.forEach(t),zXe=i(y),cm=n(y,"LI",{});var LCe=s(cm);noe=n(LCe,"STRONG",{});var Qjr=s(noe);QXe=r(Qjr,"lxmert"),Qjr.forEach(t),WXe=r(LCe," \u2014 "),hk=n(LCe,"A",{href:!0});var Wjr=s(hk);HXe=r(Wjr,"LxmertConfig"),Wjr.forEach(t),UXe=r(LCe," (LXMERT model)"),LCe.forEach(t),JXe=i(y),fm=n(y,"LI",{});var xCe=s(fm);soe=n(xCe,"STRONG",{});var Hjr=s(soe);YXe=r(Hjr,"m2m_100"),Hjr.forEach(t),KXe=r(xCe," \u2014 "),pk=n(xCe,"A",{href:!0});var Ujr=s(pk);ZXe=r(Ujr,"M2M100Config"),Ujr.forEach(t),eze=r(xCe," (M2M100 model)"),xCe.forEach(t),oze=i(y),mm=n(y,"LI",{});var $Ce=s(mm);loe=n($Ce,"STRONG",{});var Jjr=s(loe);rze=r(Jjr,"marian"),Jjr.forEach(t),tze=r($Ce," \u2014 "),uk=n($Ce,"A",{href:!0});var Yjr=s(uk);aze=r(Yjr,"MarianConfig"),Yjr.forEach(t),nze=r($Ce," (Marian model)"),$Ce.forEach(t),sze=i(y),gm=n(y,"LI",{});var kCe=s(gm);ioe=n(kCe,"STRONG",{});var Kjr=s(ioe);lze=r(Kjr,"maskformer"),Kjr.forEach(t),ize=r(kCe," \u2014 "),_k=n(kCe,"A",{href:!0});var Zjr=s(_k);dze=r(Zjr,"MaskFormerConfig"),Zjr.forEach(t),cze=r(kCe," (MaskFormer model)"),kCe.forEach(t),fze=i(y),hm=n(y,"LI",{});var SCe=s(hm);doe=n(SCe,"STRONG",{});var eDr=s(doe);mze=r(eDr,"mbart"),eDr.forEach(t),gze=r(SCe," \u2014 "),bk=n(SCe,"A",{href:!0});var oDr=s(bk);hze=r(oDr,"MBartConfig"),oDr.forEach(t),pze=r(SCe," (mBART model)"),SCe.forEach(t),uze=i(y),pm=n(y,"LI",{});var RCe=s(pm);coe=n(RCe,"STRONG",{});var rDr=s(coe);_ze=r(rDr,"megatron-bert"),rDr.forEach(t),bze=r(RCe," \u2014 "),vk=n(RCe,"A",{href:!0});var tDr=s(vk);vze=r(tDr,"MegatronBertConfig"),tDr.forEach(t),Fze=r(RCe," (MegatronBert model)"),RCe.forEach(t),Tze=i(y),um=n(y,"LI",{});var BCe=s(um);foe=n(BCe,"STRONG",{});var aDr=s(foe);Mze=r(aDr,"mobilebert"),aDr.forEach(t),Eze=r(BCe," \u2014 "),Fk=n(BCe,"A",{href:!0});var nDr=s(Fk);Cze=r(nDr,"MobileBertConfig"),nDr.forEach(t),wze=r(BCe," (MobileBERT model)"),BCe.forEach(t),Aze=i(y),_m=n(y,"LI",{});var PCe=s(_m);moe=n(PCe,"STRONG",{});var sDr=s(moe);yze=r(sDr,"mpnet"),sDr.forEach(t),Lze=r(PCe," \u2014 "),Tk=n(PCe,"A",{href:!0});var lDr=s(Tk);xze=r(lDr,"MPNetConfig"),lDr.forEach(t),$ze=r(PCe," (MPNet model)"),PCe.forEach(t),kze=i(y),bm=n(y,"LI",{});var ICe=s(bm);goe=n(ICe,"STRONG",{});var iDr=s(goe);Sze=r(iDr,"mt5"),iDr.forEach(t),Rze=r(ICe," \u2014 "),Mk=n(ICe,"A",{href:!0});var dDr=s(Mk);Bze=r(dDr,"MT5Config"),dDr.forEach(t),Pze=r(ICe," (mT5 model)"),ICe.forEach(t),Ize=i(y),vm=n(y,"LI",{});var qCe=s(vm);hoe=n(qCe,"STRONG",{});var cDr=s(hoe);qze=r(cDr,"nystromformer"),cDr.forEach(t),Nze=r(qCe," \u2014 "),Ek=n(qCe,"A",{href:!0});var fDr=s(Ek);jze=r(fDr,"NystromformerConfig"),fDr.forEach(t),Dze=r(qCe," (Nystromformer model)"),qCe.forEach(t),Gze=i(y),Fm=n(y,"LI",{});var NCe=s(Fm);poe=n(NCe,"STRONG",{});var mDr=s(poe);Oze=r(mDr,"openai-gpt"),mDr.forEach(t),Vze=r(NCe," \u2014 "),Ck=n(NCe,"A",{href:!0});var gDr=s(Ck);Xze=r(gDr,"OpenAIGPTConfig"),gDr.forEach(t),zze=r(NCe," (OpenAI GPT model)"),NCe.forEach(t),Qze=i(y),Tm=n(y,"LI",{});var jCe=s(Tm);uoe=n(jCe,"STRONG",{});var hDr=s(uoe);Wze=r(hDr,"opt"),hDr.forEach(t),Hze=r(jCe," \u2014 "),wk=n(jCe,"A",{href:!0});var pDr=s(wk);Uze=r(pDr,"OPTConfig"),pDr.forEach(t),Jze=r(jCe," (OPT model)"),jCe.forEach(t),Yze=i(y),Mm=n(y,"LI",{});var DCe=s(Mm);_oe=n(DCe,"STRONG",{});var uDr=s(_oe);Kze=r(uDr,"pegasus"),uDr.forEach(t),Zze=r(DCe," \u2014 "),Ak=n(DCe,"A",{href:!0});var _Dr=s(Ak);eQe=r(_Dr,"PegasusConfig"),_Dr.forEach(t),oQe=r(DCe," (Pegasus model)"),DCe.forEach(t),rQe=i(y),Em=n(y,"LI",{});var GCe=s(Em);boe=n(GCe,"STRONG",{});var bDr=s(boe);tQe=r(bDr,"perceiver"),bDr.forEach(t),aQe=r(GCe," \u2014 "),yk=n(GCe,"A",{href:!0});var vDr=s(yk);nQe=r(vDr,"PerceiverConfig"),vDr.forEach(t),sQe=r(GCe," (Perceiver model)"),GCe.forEach(t),lQe=i(y),Cm=n(y,"LI",{});var OCe=s(Cm);voe=n(OCe,"STRONG",{});var FDr=s(voe);iQe=r(FDr,"plbart"),FDr.forEach(t),dQe=r(OCe," \u2014 "),Lk=n(OCe,"A",{href:!0});var TDr=s(Lk);cQe=r(TDr,"PLBartConfig"),TDr.forEach(t),fQe=r(OCe," (PLBart model)"),OCe.forEach(t),mQe=i(y),wm=n(y,"LI",{});var VCe=s(wm);Foe=n(VCe,"STRONG",{});var MDr=s(Foe);gQe=r(MDr,"poolformer"),MDr.forEach(t),hQe=r(VCe," \u2014 "),xk=n(VCe,"A",{href:!0});var EDr=s(xk);pQe=r(EDr,"PoolFormerConfig"),EDr.forEach(t),uQe=r(VCe," (PoolFormer model)"),VCe.forEach(t),_Qe=i(y),Am=n(y,"LI",{});var XCe=s(Am);Toe=n(XCe,"STRONG",{});var CDr=s(Toe);bQe=r(CDr,"prophetnet"),CDr.forEach(t),vQe=r(XCe," \u2014 "),$k=n(XCe,"A",{href:!0});var wDr=s($k);FQe=r(wDr,"ProphetNetConfig"),wDr.forEach(t),TQe=r(XCe," (ProphetNet model)"),XCe.forEach(t),MQe=i(y),ym=n(y,"LI",{});var zCe=s(ym);Moe=n(zCe,"STRONG",{});var ADr=s(Moe);EQe=r(ADr,"qdqbert"),ADr.forEach(t),CQe=r(zCe," \u2014 "),kk=n(zCe,"A",{href:!0});var yDr=s(kk);wQe=r(yDr,"QDQBertConfig"),yDr.forEach(t),AQe=r(zCe," (QDQBert model)"),zCe.forEach(t),yQe=i(y),Lm=n(y,"LI",{});var QCe=s(Lm);Eoe=n(QCe,"STRONG",{});var LDr=s(Eoe);LQe=r(LDr,"rag"),LDr.forEach(t),xQe=r(QCe," \u2014 "),Sk=n(QCe,"A",{href:!0});var xDr=s(Sk);$Qe=r(xDr,"RagConfig"),xDr.forEach(t),kQe=r(QCe," (RAG model)"),QCe.forEach(t),SQe=i(y),xm=n(y,"LI",{});var WCe=s(xm);Coe=n(WCe,"STRONG",{});var $Dr=s(Coe);RQe=r($Dr,"realm"),$Dr.forEach(t),BQe=r(WCe," \u2014 "),Rk=n(WCe,"A",{href:!0});var kDr=s(Rk);PQe=r(kDr,"RealmConfig"),kDr.forEach(t),IQe=r(WCe," (Realm model)"),WCe.forEach(t),qQe=i(y),$m=n(y,"LI",{});var HCe=s($m);woe=n(HCe,"STRONG",{});var SDr=s(woe);NQe=r(SDr,"reformer"),SDr.forEach(t),jQe=r(HCe," \u2014 "),Bk=n(HCe,"A",{href:!0});var RDr=s(Bk);DQe=r(RDr,"ReformerConfig"),RDr.forEach(t),GQe=r(HCe," (Reformer model)"),HCe.forEach(t),OQe=i(y),km=n(y,"LI",{});var UCe=s(km);Aoe=n(UCe,"STRONG",{});var BDr=s(Aoe);VQe=r(BDr,"regnet"),BDr.forEach(t),XQe=r(UCe," \u2014 "),Pk=n(UCe,"A",{href:!0});var PDr=s(Pk);zQe=r(PDr,"RegNetConfig"),PDr.forEach(t),QQe=r(UCe," (RegNet model)"),UCe.forEach(t),WQe=i(y),Sm=n(y,"LI",{});var JCe=s(Sm);yoe=n(JCe,"STRONG",{});var IDr=s(yoe);HQe=r(IDr,"rembert"),IDr.forEach(t),UQe=r(JCe," \u2014 "),Ik=n(JCe,"A",{href:!0});var qDr=s(Ik);JQe=r(qDr,"RemBertConfig"),qDr.forEach(t),YQe=r(JCe," (RemBERT model)"),JCe.forEach(t),KQe=i(y),Rm=n(y,"LI",{});var YCe=s(Rm);Loe=n(YCe,"STRONG",{});var NDr=s(Loe);ZQe=r(NDr,"resnet"),NDr.forEach(t),eWe=r(YCe," \u2014 "),qk=n(YCe,"A",{href:!0});var jDr=s(qk);oWe=r(jDr,"ResNetConfig"),jDr.forEach(t),rWe=r(YCe," (ResNet model)"),YCe.forEach(t),tWe=i(y),Bm=n(y,"LI",{});var KCe=s(Bm);xoe=n(KCe,"STRONG",{});var DDr=s(xoe);aWe=r(DDr,"retribert"),DDr.forEach(t),nWe=r(KCe," \u2014 "),Nk=n(KCe,"A",{href:!0});var GDr=s(Nk);sWe=r(GDr,"RetriBertConfig"),GDr.forEach(t),lWe=r(KCe," (RetriBERT model)"),KCe.forEach(t),iWe=i(y),Pm=n(y,"LI",{});var ZCe=s(Pm);$oe=n(ZCe,"STRONG",{});var ODr=s($oe);dWe=r(ODr,"roberta"),ODr.forEach(t),cWe=r(ZCe," \u2014 "),jk=n(ZCe,"A",{href:!0});var VDr=s(jk);fWe=r(VDr,"RobertaConfig"),VDr.forEach(t),mWe=r(ZCe," (RoBERTa model)"),ZCe.forEach(t),gWe=i(y),Im=n(y,"LI",{});var e3e=s(Im);koe=n(e3e,"STRONG",{});var XDr=s(koe);hWe=r(XDr,"roformer"),XDr.forEach(t),pWe=r(e3e," \u2014 "),Dk=n(e3e,"A",{href:!0});var zDr=s(Dk);uWe=r(zDr,"RoFormerConfig"),zDr.forEach(t),_We=r(e3e," (RoFormer model)"),e3e.forEach(t),bWe=i(y),qm=n(y,"LI",{});var o3e=s(qm);Soe=n(o3e,"STRONG",{});var QDr=s(Soe);vWe=r(QDr,"segformer"),QDr.forEach(t),FWe=r(o3e," \u2014 "),Gk=n(o3e,"A",{href:!0});var WDr=s(Gk);TWe=r(WDr,"SegformerConfig"),WDr.forEach(t),MWe=r(o3e," (SegFormer model)"),o3e.forEach(t),EWe=i(y),Nm=n(y,"LI",{});var r3e=s(Nm);Roe=n(r3e,"STRONG",{});var HDr=s(Roe);CWe=r(HDr,"sew"),HDr.forEach(t),wWe=r(r3e," \u2014 "),Ok=n(r3e,"A",{href:!0});var UDr=s(Ok);AWe=r(UDr,"SEWConfig"),UDr.forEach(t),yWe=r(r3e," (SEW model)"),r3e.forEach(t),LWe=i(y),jm=n(y,"LI",{});var t3e=s(jm);Boe=n(t3e,"STRONG",{});var JDr=s(Boe);xWe=r(JDr,"sew-d"),JDr.forEach(t),$We=r(t3e," \u2014 "),Vk=n(t3e,"A",{href:!0});var YDr=s(Vk);kWe=r(YDr,"SEWDConfig"),YDr.forEach(t),SWe=r(t3e," (SEW-D model)"),t3e.forEach(t),RWe=i(y),Dm=n(y,"LI",{});var a3e=s(Dm);Poe=n(a3e,"STRONG",{});var KDr=s(Poe);BWe=r(KDr,"speech-encoder-decoder"),KDr.forEach(t),PWe=r(a3e," \u2014 "),Xk=n(a3e,"A",{href:!0});var ZDr=s(Xk);IWe=r(ZDr,"SpeechEncoderDecoderConfig"),ZDr.forEach(t),qWe=r(a3e," (Speech Encoder decoder model)"),a3e.forEach(t),NWe=i(y),Gm=n(y,"LI",{});var n3e=s(Gm);Ioe=n(n3e,"STRONG",{});var eGr=s(Ioe);jWe=r(eGr,"speech_to_text"),eGr.forEach(t),DWe=r(n3e," \u2014 "),zk=n(n3e,"A",{href:!0});var oGr=s(zk);GWe=r(oGr,"Speech2TextConfig"),oGr.forEach(t),OWe=r(n3e," (Speech2Text model)"),n3e.forEach(t),VWe=i(y),Om=n(y,"LI",{});var s3e=s(Om);qoe=n(s3e,"STRONG",{});var rGr=s(qoe);XWe=r(rGr,"speech_to_text_2"),rGr.forEach(t),zWe=r(s3e," \u2014 "),Qk=n(s3e,"A",{href:!0});var tGr=s(Qk);QWe=r(tGr,"Speech2Text2Config"),tGr.forEach(t),WWe=r(s3e," (Speech2Text2 model)"),s3e.forEach(t),HWe=i(y),Vm=n(y,"LI",{});var l3e=s(Vm);Noe=n(l3e,"STRONG",{});var aGr=s(Noe);UWe=r(aGr,"splinter"),aGr.forEach(t),JWe=r(l3e," \u2014 "),Wk=n(l3e,"A",{href:!0});var nGr=s(Wk);YWe=r(nGr,"SplinterConfig"),nGr.forEach(t),KWe=r(l3e," (Splinter model)"),l3e.forEach(t),ZWe=i(y),Xm=n(y,"LI",{});var i3e=s(Xm);joe=n(i3e,"STRONG",{});var sGr=s(joe);eHe=r(sGr,"squeezebert"),sGr.forEach(t),oHe=r(i3e," \u2014 "),Hk=n(i3e,"A",{href:!0});var lGr=s(Hk);rHe=r(lGr,"SqueezeBertConfig"),lGr.forEach(t),tHe=r(i3e," (SqueezeBERT model)"),i3e.forEach(t),aHe=i(y),zm=n(y,"LI",{});var d3e=s(zm);Doe=n(d3e,"STRONG",{});var iGr=s(Doe);nHe=r(iGr,"swin"),iGr.forEach(t),sHe=r(d3e," \u2014 "),Uk=n(d3e,"A",{href:!0});var dGr=s(Uk);lHe=r(dGr,"SwinConfig"),dGr.forEach(t),iHe=r(d3e," (Swin model)"),d3e.forEach(t),dHe=i(y),Qm=n(y,"LI",{});var c3e=s(Qm);Goe=n(c3e,"STRONG",{});var cGr=s(Goe);cHe=r(cGr,"t5"),cGr.forEach(t),fHe=r(c3e," \u2014 "),Jk=n(c3e,"A",{href:!0});var fGr=s(Jk);mHe=r(fGr,"T5Config"),fGr.forEach(t),gHe=r(c3e," (T5 model)"),c3e.forEach(t),hHe=i(y),Wm=n(y,"LI",{});var f3e=s(Wm);Ooe=n(f3e,"STRONG",{});var mGr=s(Ooe);pHe=r(mGr,"tapas"),mGr.forEach(t),uHe=r(f3e," \u2014 "),Yk=n(f3e,"A",{href:!0});var gGr=s(Yk);_He=r(gGr,"TapasConfig"),gGr.forEach(t),bHe=r(f3e," (TAPAS model)"),f3e.forEach(t),vHe=i(y),Hm=n(y,"LI",{});var m3e=s(Hm);Voe=n(m3e,"STRONG",{});var hGr=s(Voe);FHe=r(hGr,"tapex"),hGr.forEach(t),THe=r(m3e," \u2014 "),Kk=n(m3e,"A",{href:!0});var pGr=s(Kk);MHe=r(pGr,"BartConfig"),pGr.forEach(t),EHe=r(m3e," (TAPEX model)"),m3e.forEach(t),CHe=i(y),Um=n(y,"LI",{});var g3e=s(Um);Xoe=n(g3e,"STRONG",{});var uGr=s(Xoe);wHe=r(uGr,"trajectory_transformer"),uGr.forEach(t),AHe=r(g3e," \u2014 "),Zk=n(g3e,"A",{href:!0});var _Gr=s(Zk);yHe=r(_Gr,"TrajectoryTransformerConfig"),_Gr.forEach(t),LHe=r(g3e," (Trajectory Transformer model)"),g3e.forEach(t),xHe=i(y),Jm=n(y,"LI",{});var h3e=s(Jm);zoe=n(h3e,"STRONG",{});var bGr=s(zoe);$He=r(bGr,"transfo-xl"),bGr.forEach(t),kHe=r(h3e," \u2014 "),eS=n(h3e,"A",{href:!0});var vGr=s(eS);SHe=r(vGr,"TransfoXLConfig"),vGr.forEach(t),RHe=r(h3e," (Transformer-XL model)"),h3e.forEach(t),BHe=i(y),Ym=n(y,"LI",{});var p3e=s(Ym);Qoe=n(p3e,"STRONG",{});var FGr=s(Qoe);PHe=r(FGr,"trocr"),FGr.forEach(t),IHe=r(p3e," \u2014 "),oS=n(p3e,"A",{href:!0});var TGr=s(oS);qHe=r(TGr,"TrOCRConfig"),TGr.forEach(t),NHe=r(p3e," (TrOCR model)"),p3e.forEach(t),jHe=i(y),Km=n(y,"LI",{});var u3e=s(Km);Woe=n(u3e,"STRONG",{});var MGr=s(Woe);DHe=r(MGr,"unispeech"),MGr.forEach(t),GHe=r(u3e," \u2014 "),rS=n(u3e,"A",{href:!0});var EGr=s(rS);OHe=r(EGr,"UniSpeechConfig"),EGr.forEach(t),VHe=r(u3e," (UniSpeech model)"),u3e.forEach(t),XHe=i(y),Zm=n(y,"LI",{});var _3e=s(Zm);Hoe=n(_3e,"STRONG",{});var CGr=s(Hoe);zHe=r(CGr,"unispeech-sat"),CGr.forEach(t),QHe=r(_3e," \u2014 "),tS=n(_3e,"A",{href:!0});var wGr=s(tS);WHe=r(wGr,"UniSpeechSatConfig"),wGr.forEach(t),HHe=r(_3e," (UniSpeechSat model)"),_3e.forEach(t),UHe=i(y),eg=n(y,"LI",{});var b3e=s(eg);Uoe=n(b3e,"STRONG",{});var AGr=s(Uoe);JHe=r(AGr,"van"),AGr.forEach(t),YHe=r(b3e," \u2014 "),aS=n(b3e,"A",{href:!0});var yGr=s(aS);KHe=r(yGr,"VanConfig"),yGr.forEach(t),ZHe=r(b3e," (VAN model)"),b3e.forEach(t),eUe=i(y),og=n(y,"LI",{});var v3e=s(og);Joe=n(v3e,"STRONG",{});var LGr=s(Joe);oUe=r(LGr,"vilt"),LGr.forEach(t),rUe=r(v3e," \u2014 "),nS=n(v3e,"A",{href:!0});var xGr=s(nS);tUe=r(xGr,"ViltConfig"),xGr.forEach(t),aUe=r(v3e," (ViLT model)"),v3e.forEach(t),nUe=i(y),rg=n(y,"LI",{});var F3e=s(rg);Yoe=n(F3e,"STRONG",{});var $Gr=s(Yoe);sUe=r($Gr,"vision-encoder-decoder"),$Gr.forEach(t),lUe=r(F3e," \u2014 "),sS=n(F3e,"A",{href:!0});var kGr=s(sS);iUe=r(kGr,"VisionEncoderDecoderConfig"),kGr.forEach(t),dUe=r(F3e," (Vision Encoder decoder model)"),F3e.forEach(t),cUe=i(y),tg=n(y,"LI",{});var T3e=s(tg);Koe=n(T3e,"STRONG",{});var SGr=s(Koe);fUe=r(SGr,"vision-text-dual-encoder"),SGr.forEach(t),mUe=r(T3e," \u2014 "),lS=n(T3e,"A",{href:!0});var RGr=s(lS);gUe=r(RGr,"VisionTextDualEncoderConfig"),RGr.forEach(t),hUe=r(T3e," (VisionTextDualEncoder model)"),T3e.forEach(t),pUe=i(y),ag=n(y,"LI",{});var M3e=s(ag);Zoe=n(M3e,"STRONG",{});var BGr=s(Zoe);uUe=r(BGr,"visual_bert"),BGr.forEach(t),_Ue=r(M3e," \u2014 "),iS=n(M3e,"A",{href:!0});var PGr=s(iS);bUe=r(PGr,"VisualBertConfig"),PGr.forEach(t),vUe=r(M3e," (VisualBert model)"),M3e.forEach(t),FUe=i(y),ng=n(y,"LI",{});var E3e=s(ng);ere=n(E3e,"STRONG",{});var IGr=s(ere);TUe=r(IGr,"vit"),IGr.forEach(t),MUe=r(E3e," \u2014 "),dS=n(E3e,"A",{href:!0});var qGr=s(dS);EUe=r(qGr,"ViTConfig"),qGr.forEach(t),CUe=r(E3e," (ViT model)"),E3e.forEach(t),wUe=i(y),sg=n(y,"LI",{});var C3e=s(sg);ore=n(C3e,"STRONG",{});var NGr=s(ore);AUe=r(NGr,"vit_mae"),NGr.forEach(t),yUe=r(C3e," \u2014 "),cS=n(C3e,"A",{href:!0});var jGr=s(cS);LUe=r(jGr,"ViTMAEConfig"),jGr.forEach(t),xUe=r(C3e," (ViTMAE model)"),C3e.forEach(t),$Ue=i(y),lg=n(y,"LI",{});var w3e=s(lg);rre=n(w3e,"STRONG",{});var DGr=s(rre);kUe=r(DGr,"wav2vec2"),DGr.forEach(t),SUe=r(w3e," \u2014 "),fS=n(w3e,"A",{href:!0});var GGr=s(fS);RUe=r(GGr,"Wav2Vec2Config"),GGr.forEach(t),BUe=r(w3e," (Wav2Vec2 model)"),w3e.forEach(t),PUe=i(y),ig=n(y,"LI",{});var A3e=s(ig);tre=n(A3e,"STRONG",{});var OGr=s(tre);IUe=r(OGr,"wavlm"),OGr.forEach(t),qUe=r(A3e," \u2014 "),mS=n(A3e,"A",{href:!0});var VGr=s(mS);NUe=r(VGr,"WavLMConfig"),VGr.forEach(t),jUe=r(A3e," (WavLM model)"),A3e.forEach(t),DUe=i(y),dg=n(y,"LI",{});var y3e=s(dg);are=n(y3e,"STRONG",{});var XGr=s(are);GUe=r(XGr,"xglm"),XGr.forEach(t),OUe=r(y3e," \u2014 "),gS=n(y3e,"A",{href:!0});var zGr=s(gS);VUe=r(zGr,"XGLMConfig"),zGr.forEach(t),XUe=r(y3e," (XGLM model)"),y3e.forEach(t),zUe=i(y),cg=n(y,"LI",{});var L3e=s(cg);nre=n(L3e,"STRONG",{});var QGr=s(nre);QUe=r(QGr,"xlm"),QGr.forEach(t),WUe=r(L3e," \u2014 "),hS=n(L3e,"A",{href:!0});var WGr=s(hS);HUe=r(WGr,"XLMConfig"),WGr.forEach(t),UUe=r(L3e," (XLM model)"),L3e.forEach(t),JUe=i(y),fg=n(y,"LI",{});var x3e=s(fg);sre=n(x3e,"STRONG",{});var HGr=s(sre);YUe=r(HGr,"xlm-prophetnet"),HGr.forEach(t),KUe=r(x3e," \u2014 "),pS=n(x3e,"A",{href:!0});var UGr=s(pS);ZUe=r(UGr,"XLMProphetNetConfig"),UGr.forEach(t),eJe=r(x3e," (XLMProphetNet model)"),x3e.forEach(t),oJe=i(y),mg=n(y,"LI",{});var $3e=s(mg);lre=n($3e,"STRONG",{});var JGr=s(lre);rJe=r(JGr,"xlm-roberta"),JGr.forEach(t),tJe=r($3e," \u2014 "),uS=n($3e,"A",{href:!0});var YGr=s(uS);aJe=r(YGr,"XLMRobertaConfig"),YGr.forEach(t),nJe=r($3e," (XLM-RoBERTa model)"),$3e.forEach(t),sJe=i(y),gg=n(y,"LI",{});var k3e=s(gg);ire=n(k3e,"STRONG",{});var KGr=s(ire);lJe=r(KGr,"xlm-roberta-xl"),KGr.forEach(t),iJe=r(k3e," \u2014 "),_S=n(k3e,"A",{href:!0});var ZGr=s(_S);dJe=r(ZGr,"XLMRobertaXLConfig"),ZGr.forEach(t),cJe=r(k3e," (XLM-RoBERTa-XL model)"),k3e.forEach(t),fJe=i(y),hg=n(y,"LI",{});var S3e=s(hg);dre=n(S3e,"STRONG",{});var eOr=s(dre);mJe=r(eOr,"xlnet"),eOr.forEach(t),gJe=r(S3e," \u2014 "),bS=n(S3e,"A",{href:!0});var oOr=s(bS);hJe=r(oOr,"XLNetConfig"),oOr.forEach(t),pJe=r(S3e," (XLNet model)"),S3e.forEach(t),uJe=i(y),pg=n(y,"LI",{});var R3e=s(pg);cre=n(R3e,"STRONG",{});var rOr=s(cre);_Je=r(rOr,"yolos"),rOr.forEach(t),bJe=r(R3e," \u2014 "),vS=n(R3e,"A",{href:!0});var tOr=s(vS);vJe=r(tOr,"YolosConfig"),tOr.forEach(t),FJe=r(R3e," (YOLOS model)"),R3e.forEach(t),TJe=i(y),ug=n(y,"LI",{});var B3e=s(ug);fre=n(B3e,"STRONG",{});var aOr=s(fre);MJe=r(aOr,"yoso"),aOr.forEach(t),EJe=r(B3e," \u2014 "),FS=n(B3e,"A",{href:!0});var nOr=s(FS);CJe=r(nOr,"YosoConfig"),nOr.forEach(t),wJe=r(B3e," (YOSO model)"),B3e.forEach(t),y.forEach(t),AJe=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),yJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var oNe=s(bg);T(s0.$$.fragment,oNe),LJe=i(oNe),mre=n(oNe,"P",{});var sOr=s(mre);xJe=r(sOr,"Register a new configuration for this class."),sOr.forEach(t),oNe.forEach(t),Kr.forEach(t),aIe=i(f),_i=n(f,"H2",{class:!0});var rNe=s(_i);vg=n(rNe,"A",{id:!0,class:!0,href:!0});var lOr=s(vg);gre=n(lOr,"SPAN",{});var iOr=s(gre);T(l0.$$.fragment,iOr),iOr.forEach(t),lOr.forEach(t),$Je=i(rNe),hre=n(rNe,"SPAN",{});var dOr=s(hre);kJe=r(dOr,"AutoTokenizer"),dOr.forEach(t),rNe.forEach(t),nIe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(i0.$$.fragment,Ps),SJe=i(Ps),d0=n(Ps,"P",{});var tNe=s(d0);RJe=r(tNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TS=n(tNe,"A",{href:!0});var cOr=s(TS);BJe=r(cOr,"AutoTokenizer.from_pretrained()"),cOr.forEach(t),PJe=r(tNe," class method."),tNe.forEach(t),IJe=i(Ps),c0=n(Ps,"P",{});var aNe=s(c0);qJe=r(aNe,"This class cannot be instantiated directly using "),pre=n(aNe,"CODE",{});var fOr=s(pre);NJe=r(fOr,"__init__()"),fOr.forEach(t),jJe=r(aNe," (throws an error)."),aNe.forEach(t),DJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(f0.$$.fragment,Is),GJe=i(Is),ure=n(Is,"P",{});var mOr=s(ure);OJe=r(mOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mOr.forEach(t),VJe=i(Is),Ca=n(Is,"P",{});var eA=s(Ca);XJe=r(eA,"The tokenizer class to instantiate is selected based on the "),_re=n(eA,"CODE",{});var gOr=s(_re);zJe=r(gOr,"model_type"),gOr.forEach(t),QJe=r(eA,` property of the config object (either
passed as an argument or loaded from `),bre=n(eA,"CODE",{});var hOr=s(bre);WJe=r(hOr,"pretrained_model_name_or_path"),hOr.forEach(t),HJe=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vre=n(eA,"CODE",{});var pOr=s(vre);UJe=r(pOr,"pretrained_model_name_or_path"),pOr.forEach(t),JJe=r(eA,":"),eA.forEach(t),YJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var m9=s(kn);Fre=n(m9,"STRONG",{});var uOr=s(Fre);KJe=r(uOr,"albert"),uOr.forEach(t),ZJe=r(m9," \u2014 "),MS=n(m9,"A",{href:!0});var _Or=s(MS);eYe=r(_Or,"AlbertTokenizer"),_Or.forEach(t),oYe=r(m9," or "),ES=n(m9,"A",{href:!0});var bOr=s(ES);rYe=r(bOr,"AlbertTokenizerFast"),bOr.forEach(t),tYe=r(m9," (ALBERT model)"),m9.forEach(t),aYe=i(S),Sn=n(S,"LI",{});var g9=s(Sn);Tre=n(g9,"STRONG",{});var vOr=s(Tre);nYe=r(vOr,"bart"),vOr.forEach(t),sYe=r(g9," \u2014 "),CS=n(g9,"A",{href:!0});var FOr=s(CS);lYe=r(FOr,"BartTokenizer"),FOr.forEach(t),iYe=r(g9," or "),wS=n(g9,"A",{href:!0});var TOr=s(wS);dYe=r(TOr,"BartTokenizerFast"),TOr.forEach(t),cYe=r(g9," (BART model)"),g9.forEach(t),fYe=i(S),Rn=n(S,"LI",{});var h9=s(Rn);Mre=n(h9,"STRONG",{});var MOr=s(Mre);mYe=r(MOr,"barthez"),MOr.forEach(t),gYe=r(h9," \u2014 "),AS=n(h9,"A",{href:!0});var EOr=s(AS);hYe=r(EOr,"BarthezTokenizer"),EOr.forEach(t),pYe=r(h9," or "),yS=n(h9,"A",{href:!0});var COr=s(yS);uYe=r(COr,"BarthezTokenizerFast"),COr.forEach(t),_Ye=r(h9," (BARThez model)"),h9.forEach(t),bYe=i(S),Fg=n(S,"LI",{});var P3e=s(Fg);Ere=n(P3e,"STRONG",{});var wOr=s(Ere);vYe=r(wOr,"bartpho"),wOr.forEach(t),FYe=r(P3e," \u2014 "),LS=n(P3e,"A",{href:!0});var AOr=s(LS);TYe=r(AOr,"BartphoTokenizer"),AOr.forEach(t),MYe=r(P3e," (BARTpho model)"),P3e.forEach(t),EYe=i(S),Bn=n(S,"LI",{});var p9=s(Bn);Cre=n(p9,"STRONG",{});var yOr=s(Cre);CYe=r(yOr,"bert"),yOr.forEach(t),wYe=r(p9," \u2014 "),xS=n(p9,"A",{href:!0});var LOr=s(xS);AYe=r(LOr,"BertTokenizer"),LOr.forEach(t),yYe=r(p9," or "),$S=n(p9,"A",{href:!0});var xOr=s($S);LYe=r(xOr,"BertTokenizerFast"),xOr.forEach(t),xYe=r(p9," (BERT model)"),p9.forEach(t),$Ye=i(S),Tg=n(S,"LI",{});var I3e=s(Tg);wre=n(I3e,"STRONG",{});var $Or=s(wre);kYe=r($Or,"bert-generation"),$Or.forEach(t),SYe=r(I3e," \u2014 "),kS=n(I3e,"A",{href:!0});var kOr=s(kS);RYe=r(kOr,"BertGenerationTokenizer"),kOr.forEach(t),BYe=r(I3e," (Bert Generation model)"),I3e.forEach(t),PYe=i(S),Mg=n(S,"LI",{});var q3e=s(Mg);Are=n(q3e,"STRONG",{});var SOr=s(Are);IYe=r(SOr,"bert-japanese"),SOr.forEach(t),qYe=r(q3e," \u2014 "),SS=n(q3e,"A",{href:!0});var ROr=s(SS);NYe=r(ROr,"BertJapaneseTokenizer"),ROr.forEach(t),jYe=r(q3e," (BertJapanese model)"),q3e.forEach(t),DYe=i(S),Eg=n(S,"LI",{});var N3e=s(Eg);yre=n(N3e,"STRONG",{});var BOr=s(yre);GYe=r(BOr,"bertweet"),BOr.forEach(t),OYe=r(N3e," \u2014 "),RS=n(N3e,"A",{href:!0});var POr=s(RS);VYe=r(POr,"BertweetTokenizer"),POr.forEach(t),XYe=r(N3e," (Bertweet model)"),N3e.forEach(t),zYe=i(S),Pn=n(S,"LI",{});var u9=s(Pn);Lre=n(u9,"STRONG",{});var IOr=s(Lre);QYe=r(IOr,"big_bird"),IOr.forEach(t),WYe=r(u9," \u2014 "),BS=n(u9,"A",{href:!0});var qOr=s(BS);HYe=r(qOr,"BigBirdTokenizer"),qOr.forEach(t),UYe=r(u9," or "),PS=n(u9,"A",{href:!0});var NOr=s(PS);JYe=r(NOr,"BigBirdTokenizerFast"),NOr.forEach(t),YYe=r(u9," (BigBird model)"),u9.forEach(t),KYe=i(S),In=n(S,"LI",{});var _9=s(In);xre=n(_9,"STRONG",{});var jOr=s(xre);ZYe=r(jOr,"bigbird_pegasus"),jOr.forEach(t),eKe=r(_9," \u2014 "),IS=n(_9,"A",{href:!0});var DOr=s(IS);oKe=r(DOr,"PegasusTokenizer"),DOr.forEach(t),rKe=r(_9," or "),qS=n(_9,"A",{href:!0});var GOr=s(qS);tKe=r(GOr,"PegasusTokenizerFast"),GOr.forEach(t),aKe=r(_9," (BigBirdPegasus model)"),_9.forEach(t),nKe=i(S),qn=n(S,"LI",{});var b9=s(qn);$re=n(b9,"STRONG",{});var OOr=s($re);sKe=r(OOr,"blenderbot"),OOr.forEach(t),lKe=r(b9," \u2014 "),NS=n(b9,"A",{href:!0});var VOr=s(NS);iKe=r(VOr,"BlenderbotTokenizer"),VOr.forEach(t),dKe=r(b9," or "),jS=n(b9,"A",{href:!0});var XOr=s(jS);cKe=r(XOr,"BlenderbotTokenizerFast"),XOr.forEach(t),fKe=r(b9," (Blenderbot model)"),b9.forEach(t),mKe=i(S),Cg=n(S,"LI",{});var j3e=s(Cg);kre=n(j3e,"STRONG",{});var zOr=s(kre);gKe=r(zOr,"blenderbot-small"),zOr.forEach(t),hKe=r(j3e," \u2014 "),DS=n(j3e,"A",{href:!0});var QOr=s(DS);pKe=r(QOr,"BlenderbotSmallTokenizer"),QOr.forEach(t),uKe=r(j3e," (BlenderbotSmall model)"),j3e.forEach(t),_Ke=i(S),wg=n(S,"LI",{});var D3e=s(wg);Sre=n(D3e,"STRONG",{});var WOr=s(Sre);bKe=r(WOr,"byt5"),WOr.forEach(t),vKe=r(D3e," \u2014 "),GS=n(D3e,"A",{href:!0});var HOr=s(GS);FKe=r(HOr,"ByT5Tokenizer"),HOr.forEach(t),TKe=r(D3e," (ByT5 model)"),D3e.forEach(t),MKe=i(S),Nn=n(S,"LI",{});var v9=s(Nn);Rre=n(v9,"STRONG",{});var UOr=s(Rre);EKe=r(UOr,"camembert"),UOr.forEach(t),CKe=r(v9," \u2014 "),OS=n(v9,"A",{href:!0});var JOr=s(OS);wKe=r(JOr,"CamembertTokenizer"),JOr.forEach(t),AKe=r(v9," or "),VS=n(v9,"A",{href:!0});var YOr=s(VS);yKe=r(YOr,"CamembertTokenizerFast"),YOr.forEach(t),LKe=r(v9," (CamemBERT model)"),v9.forEach(t),xKe=i(S),Ag=n(S,"LI",{});var G3e=s(Ag);Bre=n(G3e,"STRONG",{});var KOr=s(Bre);$Ke=r(KOr,"canine"),KOr.forEach(t),kKe=r(G3e," \u2014 "),XS=n(G3e,"A",{href:!0});var ZOr=s(XS);SKe=r(ZOr,"CanineTokenizer"),ZOr.forEach(t),RKe=r(G3e," (Canine model)"),G3e.forEach(t),BKe=i(S),jn=n(S,"LI",{});var F9=s(jn);Pre=n(F9,"STRONG",{});var eVr=s(Pre);PKe=r(eVr,"clip"),eVr.forEach(t),IKe=r(F9," \u2014 "),zS=n(F9,"A",{href:!0});var oVr=s(zS);qKe=r(oVr,"CLIPTokenizer"),oVr.forEach(t),NKe=r(F9," or "),QS=n(F9,"A",{href:!0});var rVr=s(QS);jKe=r(rVr,"CLIPTokenizerFast"),rVr.forEach(t),DKe=r(F9," (CLIP model)"),F9.forEach(t),GKe=i(S),Dn=n(S,"LI",{});var T9=s(Dn);Ire=n(T9,"STRONG",{});var tVr=s(Ire);OKe=r(tVr,"convbert"),tVr.forEach(t),VKe=r(T9," \u2014 "),WS=n(T9,"A",{href:!0});var aVr=s(WS);XKe=r(aVr,"ConvBertTokenizer"),aVr.forEach(t),zKe=r(T9," or "),HS=n(T9,"A",{href:!0});var nVr=s(HS);QKe=r(nVr,"ConvBertTokenizerFast"),nVr.forEach(t),WKe=r(T9," (ConvBERT model)"),T9.forEach(t),HKe=i(S),Gn=n(S,"LI",{});var M9=s(Gn);qre=n(M9,"STRONG",{});var sVr=s(qre);UKe=r(sVr,"cpm"),sVr.forEach(t),JKe=r(M9," \u2014 "),US=n(M9,"A",{href:!0});var lVr=s(US);YKe=r(lVr,"CpmTokenizer"),lVr.forEach(t),KKe=r(M9," or "),JS=n(M9,"A",{href:!0});var iVr=s(JS);ZKe=r(iVr,"CpmTokenizerFast"),iVr.forEach(t),eZe=r(M9," (CPM model)"),M9.forEach(t),oZe=i(S),yg=n(S,"LI",{});var O3e=s(yg);Nre=n(O3e,"STRONG",{});var dVr=s(Nre);rZe=r(dVr,"ctrl"),dVr.forEach(t),tZe=r(O3e," \u2014 "),YS=n(O3e,"A",{href:!0});var cVr=s(YS);aZe=r(cVr,"CTRLTokenizer"),cVr.forEach(t),nZe=r(O3e," (CTRL model)"),O3e.forEach(t),sZe=i(S),On=n(S,"LI",{});var E9=s(On);jre=n(E9,"STRONG",{});var fVr=s(jre);lZe=r(fVr,"data2vec-text"),fVr.forEach(t),iZe=r(E9," \u2014 "),KS=n(E9,"A",{href:!0});var mVr=s(KS);dZe=r(mVr,"RobertaTokenizer"),mVr.forEach(t),cZe=r(E9," or "),ZS=n(E9,"A",{href:!0});var gVr=s(ZS);fZe=r(gVr,"RobertaTokenizerFast"),gVr.forEach(t),mZe=r(E9," (Data2VecText model)"),E9.forEach(t),gZe=i(S),Vn=n(S,"LI",{});var C9=s(Vn);Dre=n(C9,"STRONG",{});var hVr=s(Dre);hZe=r(hVr,"deberta"),hVr.forEach(t),pZe=r(C9," \u2014 "),eR=n(C9,"A",{href:!0});var pVr=s(eR);uZe=r(pVr,"DebertaTokenizer"),pVr.forEach(t),_Ze=r(C9," or "),oR=n(C9,"A",{href:!0});var uVr=s(oR);bZe=r(uVr,"DebertaTokenizerFast"),uVr.forEach(t),vZe=r(C9," (DeBERTa model)"),C9.forEach(t),FZe=i(S),Xn=n(S,"LI",{});var w9=s(Xn);Gre=n(w9,"STRONG",{});var _Vr=s(Gre);TZe=r(_Vr,"deberta-v2"),_Vr.forEach(t),MZe=r(w9," \u2014 "),rR=n(w9,"A",{href:!0});var bVr=s(rR);EZe=r(bVr,"DebertaV2Tokenizer"),bVr.forEach(t),CZe=r(w9," or "),tR=n(w9,"A",{href:!0});var vVr=s(tR);wZe=r(vVr,"DebertaV2TokenizerFast"),vVr.forEach(t),AZe=r(w9," (DeBERTa-v2 model)"),w9.forEach(t),yZe=i(S),zn=n(S,"LI",{});var A9=s(zn);Ore=n(A9,"STRONG",{});var FVr=s(Ore);LZe=r(FVr,"distilbert"),FVr.forEach(t),xZe=r(A9," \u2014 "),aR=n(A9,"A",{href:!0});var TVr=s(aR);$Ze=r(TVr,"DistilBertTokenizer"),TVr.forEach(t),kZe=r(A9," or "),nR=n(A9,"A",{href:!0});var MVr=s(nR);SZe=r(MVr,"DistilBertTokenizerFast"),MVr.forEach(t),RZe=r(A9," (DistilBERT model)"),A9.forEach(t),BZe=i(S),Qn=n(S,"LI",{});var y9=s(Qn);Vre=n(y9,"STRONG",{});var EVr=s(Vre);PZe=r(EVr,"dpr"),EVr.forEach(t),IZe=r(y9," \u2014 "),sR=n(y9,"A",{href:!0});var CVr=s(sR);qZe=r(CVr,"DPRQuestionEncoderTokenizer"),CVr.forEach(t),NZe=r(y9," or "),lR=n(y9,"A",{href:!0});var wVr=s(lR);jZe=r(wVr,"DPRQuestionEncoderTokenizerFast"),wVr.forEach(t),DZe=r(y9," (DPR model)"),y9.forEach(t),GZe=i(S),Wn=n(S,"LI",{});var L9=s(Wn);Xre=n(L9,"STRONG",{});var AVr=s(Xre);OZe=r(AVr,"electra"),AVr.forEach(t),VZe=r(L9," \u2014 "),iR=n(L9,"A",{href:!0});var yVr=s(iR);XZe=r(yVr,"ElectraTokenizer"),yVr.forEach(t),zZe=r(L9," or "),dR=n(L9,"A",{href:!0});var LVr=s(dR);QZe=r(LVr,"ElectraTokenizerFast"),LVr.forEach(t),WZe=r(L9," (ELECTRA model)"),L9.forEach(t),HZe=i(S),Lg=n(S,"LI",{});var V3e=s(Lg);zre=n(V3e,"STRONG",{});var xVr=s(zre);UZe=r(xVr,"flaubert"),xVr.forEach(t),JZe=r(V3e," \u2014 "),cR=n(V3e,"A",{href:!0});var $Vr=s(cR);YZe=r($Vr,"FlaubertTokenizer"),$Vr.forEach(t),KZe=r(V3e," (FlauBERT model)"),V3e.forEach(t),ZZe=i(S),Hn=n(S,"LI",{});var x9=s(Hn);Qre=n(x9,"STRONG",{});var kVr=s(Qre);eeo=r(kVr,"fnet"),kVr.forEach(t),oeo=r(x9," \u2014 "),fR=n(x9,"A",{href:!0});var SVr=s(fR);reo=r(SVr,"FNetTokenizer"),SVr.forEach(t),teo=r(x9," or "),mR=n(x9,"A",{href:!0});var RVr=s(mR);aeo=r(RVr,"FNetTokenizerFast"),RVr.forEach(t),neo=r(x9," (FNet model)"),x9.forEach(t),seo=i(S),xg=n(S,"LI",{});var X3e=s(xg);Wre=n(X3e,"STRONG",{});var BVr=s(Wre);leo=r(BVr,"fsmt"),BVr.forEach(t),ieo=r(X3e," \u2014 "),gR=n(X3e,"A",{href:!0});var PVr=s(gR);deo=r(PVr,"FSMTTokenizer"),PVr.forEach(t),ceo=r(X3e," (FairSeq Machine-Translation model)"),X3e.forEach(t),feo=i(S),Un=n(S,"LI",{});var $9=s(Un);Hre=n($9,"STRONG",{});var IVr=s(Hre);meo=r(IVr,"funnel"),IVr.forEach(t),geo=r($9," \u2014 "),hR=n($9,"A",{href:!0});var qVr=s(hR);heo=r(qVr,"FunnelTokenizer"),qVr.forEach(t),peo=r($9," or "),pR=n($9,"A",{href:!0});var NVr=s(pR);ueo=r(NVr,"FunnelTokenizerFast"),NVr.forEach(t),_eo=r($9," (Funnel Transformer model)"),$9.forEach(t),beo=i(S),Jn=n(S,"LI",{});var k9=s(Jn);Ure=n(k9,"STRONG",{});var jVr=s(Ure);veo=r(jVr,"gpt2"),jVr.forEach(t),Feo=r(k9," \u2014 "),uR=n(k9,"A",{href:!0});var DVr=s(uR);Teo=r(DVr,"GPT2Tokenizer"),DVr.forEach(t),Meo=r(k9," or "),_R=n(k9,"A",{href:!0});var GVr=s(_R);Eeo=r(GVr,"GPT2TokenizerFast"),GVr.forEach(t),Ceo=r(k9," (OpenAI GPT-2 model)"),k9.forEach(t),weo=i(S),Yn=n(S,"LI",{});var S9=s(Yn);Jre=n(S9,"STRONG",{});var OVr=s(Jre);Aeo=r(OVr,"gpt_neo"),OVr.forEach(t),yeo=r(S9," \u2014 "),bR=n(S9,"A",{href:!0});var VVr=s(bR);Leo=r(VVr,"GPT2Tokenizer"),VVr.forEach(t),xeo=r(S9," or "),vR=n(S9,"A",{href:!0});var XVr=s(vR);$eo=r(XVr,"GPT2TokenizerFast"),XVr.forEach(t),keo=r(S9," (GPT Neo model)"),S9.forEach(t),Seo=i(S),Kn=n(S,"LI",{});var R9=s(Kn);Yre=n(R9,"STRONG",{});var zVr=s(Yre);Reo=r(zVr,"gptj"),zVr.forEach(t),Beo=r(R9," \u2014 "),FR=n(R9,"A",{href:!0});var QVr=s(FR);Peo=r(QVr,"GPT2Tokenizer"),QVr.forEach(t),Ieo=r(R9," or "),TR=n(R9,"A",{href:!0});var WVr=s(TR);qeo=r(WVr,"GPT2TokenizerFast"),WVr.forEach(t),Neo=r(R9," (GPT-J model)"),R9.forEach(t),jeo=i(S),Zn=n(S,"LI",{});var B9=s(Zn);Kre=n(B9,"STRONG",{});var HVr=s(Kre);Deo=r(HVr,"herbert"),HVr.forEach(t),Geo=r(B9," \u2014 "),MR=n(B9,"A",{href:!0});var UVr=s(MR);Oeo=r(UVr,"HerbertTokenizer"),UVr.forEach(t),Veo=r(B9," or "),ER=n(B9,"A",{href:!0});var JVr=s(ER);Xeo=r(JVr,"HerbertTokenizerFast"),JVr.forEach(t),zeo=r(B9," (HerBERT model)"),B9.forEach(t),Qeo=i(S),$g=n(S,"LI",{});var z3e=s($g);Zre=n(z3e,"STRONG",{});var YVr=s(Zre);Weo=r(YVr,"hubert"),YVr.forEach(t),Heo=r(z3e," \u2014 "),CR=n(z3e,"A",{href:!0});var KVr=s(CR);Ueo=r(KVr,"Wav2Vec2CTCTokenizer"),KVr.forEach(t),Jeo=r(z3e," (Hubert model)"),z3e.forEach(t),Yeo=i(S),es=n(S,"LI",{});var P9=s(es);ete=n(P9,"STRONG",{});var ZVr=s(ete);Keo=r(ZVr,"ibert"),ZVr.forEach(t),Zeo=r(P9," \u2014 "),wR=n(P9,"A",{href:!0});var eXr=s(wR);eoo=r(eXr,"RobertaTokenizer"),eXr.forEach(t),ooo=r(P9," or "),AR=n(P9,"A",{href:!0});var oXr=s(AR);roo=r(oXr,"RobertaTokenizerFast"),oXr.forEach(t),too=r(P9," (I-BERT model)"),P9.forEach(t),aoo=i(S),os=n(S,"LI",{});var I9=s(os);ote=n(I9,"STRONG",{});var rXr=s(ote);noo=r(rXr,"layoutlm"),rXr.forEach(t),soo=r(I9," \u2014 "),yR=n(I9,"A",{href:!0});var tXr=s(yR);loo=r(tXr,"LayoutLMTokenizer"),tXr.forEach(t),ioo=r(I9," or "),LR=n(I9,"A",{href:!0});var aXr=s(LR);doo=r(aXr,"LayoutLMTokenizerFast"),aXr.forEach(t),coo=r(I9," (LayoutLM model)"),I9.forEach(t),foo=i(S),rs=n(S,"LI",{});var q9=s(rs);rte=n(q9,"STRONG",{});var nXr=s(rte);moo=r(nXr,"layoutlmv2"),nXr.forEach(t),goo=r(q9," \u2014 "),xR=n(q9,"A",{href:!0});var sXr=s(xR);hoo=r(sXr,"LayoutLMv2Tokenizer"),sXr.forEach(t),poo=r(q9," or "),$R=n(q9,"A",{href:!0});var lXr=s($R);uoo=r(lXr,"LayoutLMv2TokenizerFast"),lXr.forEach(t),_oo=r(q9," (LayoutLMv2 model)"),q9.forEach(t),boo=i(S),ts=n(S,"LI",{});var N9=s(ts);tte=n(N9,"STRONG",{});var iXr=s(tte);voo=r(iXr,"layoutxlm"),iXr.forEach(t),Foo=r(N9," \u2014 "),kR=n(N9,"A",{href:!0});var dXr=s(kR);Too=r(dXr,"LayoutXLMTokenizer"),dXr.forEach(t),Moo=r(N9," or "),SR=n(N9,"A",{href:!0});var cXr=s(SR);Eoo=r(cXr,"LayoutXLMTokenizerFast"),cXr.forEach(t),Coo=r(N9," (LayoutXLM model)"),N9.forEach(t),woo=i(S),as=n(S,"LI",{});var j9=s(as);ate=n(j9,"STRONG",{});var fXr=s(ate);Aoo=r(fXr,"led"),fXr.forEach(t),yoo=r(j9," \u2014 "),RR=n(j9,"A",{href:!0});var mXr=s(RR);Loo=r(mXr,"LEDTokenizer"),mXr.forEach(t),xoo=r(j9," or "),BR=n(j9,"A",{href:!0});var gXr=s(BR);$oo=r(gXr,"LEDTokenizerFast"),gXr.forEach(t),koo=r(j9," (LED model)"),j9.forEach(t),Soo=i(S),ns=n(S,"LI",{});var D9=s(ns);nte=n(D9,"STRONG",{});var hXr=s(nte);Roo=r(hXr,"longformer"),hXr.forEach(t),Boo=r(D9," \u2014 "),PR=n(D9,"A",{href:!0});var pXr=s(PR);Poo=r(pXr,"LongformerTokenizer"),pXr.forEach(t),Ioo=r(D9," or "),IR=n(D9,"A",{href:!0});var uXr=s(IR);qoo=r(uXr,"LongformerTokenizerFast"),uXr.forEach(t),Noo=r(D9," (Longformer model)"),D9.forEach(t),joo=i(S),kg=n(S,"LI",{});var Q3e=s(kg);ste=n(Q3e,"STRONG",{});var _Xr=s(ste);Doo=r(_Xr,"luke"),_Xr.forEach(t),Goo=r(Q3e," \u2014 "),qR=n(Q3e,"A",{href:!0});var bXr=s(qR);Ooo=r(bXr,"LukeTokenizer"),bXr.forEach(t),Voo=r(Q3e," (LUKE model)"),Q3e.forEach(t),Xoo=i(S),ss=n(S,"LI",{});var G9=s(ss);lte=n(G9,"STRONG",{});var vXr=s(lte);zoo=r(vXr,"lxmert"),vXr.forEach(t),Qoo=r(G9," \u2014 "),NR=n(G9,"A",{href:!0});var FXr=s(NR);Woo=r(FXr,"LxmertTokenizer"),FXr.forEach(t),Hoo=r(G9," or "),jR=n(G9,"A",{href:!0});var TXr=s(jR);Uoo=r(TXr,"LxmertTokenizerFast"),TXr.forEach(t),Joo=r(G9," (LXMERT model)"),G9.forEach(t),Yoo=i(S),Sg=n(S,"LI",{});var W3e=s(Sg);ite=n(W3e,"STRONG",{});var MXr=s(ite);Koo=r(MXr,"m2m_100"),MXr.forEach(t),Zoo=r(W3e," \u2014 "),DR=n(W3e,"A",{href:!0});var EXr=s(DR);ero=r(EXr,"M2M100Tokenizer"),EXr.forEach(t),oro=r(W3e," (M2M100 model)"),W3e.forEach(t),rro=i(S),Rg=n(S,"LI",{});var H3e=s(Rg);dte=n(H3e,"STRONG",{});var CXr=s(dte);tro=r(CXr,"marian"),CXr.forEach(t),aro=r(H3e," \u2014 "),GR=n(H3e,"A",{href:!0});var wXr=s(GR);nro=r(wXr,"MarianTokenizer"),wXr.forEach(t),sro=r(H3e," (Marian model)"),H3e.forEach(t),lro=i(S),ls=n(S,"LI",{});var O9=s(ls);cte=n(O9,"STRONG",{});var AXr=s(cte);iro=r(AXr,"mbart"),AXr.forEach(t),dro=r(O9," \u2014 "),OR=n(O9,"A",{href:!0});var yXr=s(OR);cro=r(yXr,"MBartTokenizer"),yXr.forEach(t),fro=r(O9," or "),VR=n(O9,"A",{href:!0});var LXr=s(VR);mro=r(LXr,"MBartTokenizerFast"),LXr.forEach(t),gro=r(O9," (mBART model)"),O9.forEach(t),hro=i(S),is=n(S,"LI",{});var V9=s(is);fte=n(V9,"STRONG",{});var xXr=s(fte);pro=r(xXr,"mbart50"),xXr.forEach(t),uro=r(V9," \u2014 "),XR=n(V9,"A",{href:!0});var $Xr=s(XR);_ro=r($Xr,"MBart50Tokenizer"),$Xr.forEach(t),bro=r(V9," or "),zR=n(V9,"A",{href:!0});var kXr=s(zR);vro=r(kXr,"MBart50TokenizerFast"),kXr.forEach(t),Fro=r(V9," (mBART-50 model)"),V9.forEach(t),Tro=i(S),ds=n(S,"LI",{});var X9=s(ds);mte=n(X9,"STRONG",{});var SXr=s(mte);Mro=r(SXr,"megatron-bert"),SXr.forEach(t),Ero=r(X9," \u2014 "),QR=n(X9,"A",{href:!0});var RXr=s(QR);Cro=r(RXr,"BertTokenizer"),RXr.forEach(t),wro=r(X9," or "),WR=n(X9,"A",{href:!0});var BXr=s(WR);Aro=r(BXr,"BertTokenizerFast"),BXr.forEach(t),yro=r(X9," (MegatronBert model)"),X9.forEach(t),Lro=i(S),Bg=n(S,"LI",{});var U3e=s(Bg);gte=n(U3e,"STRONG",{});var PXr=s(gte);xro=r(PXr,"mluke"),PXr.forEach(t),$ro=r(U3e," \u2014 "),HR=n(U3e,"A",{href:!0});var IXr=s(HR);kro=r(IXr,"MLukeTokenizer"),IXr.forEach(t),Sro=r(U3e," (mLUKE model)"),U3e.forEach(t),Rro=i(S),cs=n(S,"LI",{});var z9=s(cs);hte=n(z9,"STRONG",{});var qXr=s(hte);Bro=r(qXr,"mobilebert"),qXr.forEach(t),Pro=r(z9," \u2014 "),UR=n(z9,"A",{href:!0});var NXr=s(UR);Iro=r(NXr,"MobileBertTokenizer"),NXr.forEach(t),qro=r(z9," or "),JR=n(z9,"A",{href:!0});var jXr=s(JR);Nro=r(jXr,"MobileBertTokenizerFast"),jXr.forEach(t),jro=r(z9," (MobileBERT model)"),z9.forEach(t),Dro=i(S),fs=n(S,"LI",{});var Q9=s(fs);pte=n(Q9,"STRONG",{});var DXr=s(pte);Gro=r(DXr,"mpnet"),DXr.forEach(t),Oro=r(Q9," \u2014 "),YR=n(Q9,"A",{href:!0});var GXr=s(YR);Vro=r(GXr,"MPNetTokenizer"),GXr.forEach(t),Xro=r(Q9," or "),KR=n(Q9,"A",{href:!0});var OXr=s(KR);zro=r(OXr,"MPNetTokenizerFast"),OXr.forEach(t),Qro=r(Q9," (MPNet model)"),Q9.forEach(t),Wro=i(S),ms=n(S,"LI",{});var W9=s(ms);ute=n(W9,"STRONG",{});var VXr=s(ute);Hro=r(VXr,"mt5"),VXr.forEach(t),Uro=r(W9," \u2014 "),ZR=n(W9,"A",{href:!0});var XXr=s(ZR);Jro=r(XXr,"MT5Tokenizer"),XXr.forEach(t),Yro=r(W9," or "),eB=n(W9,"A",{href:!0});var zXr=s(eB);Kro=r(zXr,"MT5TokenizerFast"),zXr.forEach(t),Zro=r(W9," (mT5 model)"),W9.forEach(t),eto=i(S),gs=n(S,"LI",{});var H9=s(gs);_te=n(H9,"STRONG",{});var QXr=s(_te);oto=r(QXr,"nystromformer"),QXr.forEach(t),rto=r(H9," \u2014 "),oB=n(H9,"A",{href:!0});var WXr=s(oB);tto=r(WXr,"AlbertTokenizer"),WXr.forEach(t),ato=r(H9," or "),rB=n(H9,"A",{href:!0});var HXr=s(rB);nto=r(HXr,"AlbertTokenizerFast"),HXr.forEach(t),sto=r(H9," (Nystromformer model)"),H9.forEach(t),lto=i(S),hs=n(S,"LI",{});var U9=s(hs);bte=n(U9,"STRONG",{});var UXr=s(bte);ito=r(UXr,"openai-gpt"),UXr.forEach(t),dto=r(U9," \u2014 "),tB=n(U9,"A",{href:!0});var JXr=s(tB);cto=r(JXr,"OpenAIGPTTokenizer"),JXr.forEach(t),fto=r(U9," or "),aB=n(U9,"A",{href:!0});var YXr=s(aB);mto=r(YXr,"OpenAIGPTTokenizerFast"),YXr.forEach(t),gto=r(U9," (OpenAI GPT model)"),U9.forEach(t),hto=i(S),Pg=n(S,"LI",{});var J3e=s(Pg);vte=n(J3e,"STRONG",{});var KXr=s(vte);pto=r(KXr,"opt"),KXr.forEach(t),uto=r(J3e," \u2014 "),nB=n(J3e,"A",{href:!0});var ZXr=s(nB);_to=r(ZXr,"GPT2Tokenizer"),ZXr.forEach(t),bto=r(J3e," (OPT model)"),J3e.forEach(t),vto=i(S),ps=n(S,"LI",{});var J9=s(ps);Fte=n(J9,"STRONG",{});var ezr=s(Fte);Fto=r(ezr,"pegasus"),ezr.forEach(t),Tto=r(J9," \u2014 "),sB=n(J9,"A",{href:!0});var ozr=s(sB);Mto=r(ozr,"PegasusTokenizer"),ozr.forEach(t),Eto=r(J9," or "),lB=n(J9,"A",{href:!0});var rzr=s(lB);Cto=r(rzr,"PegasusTokenizerFast"),rzr.forEach(t),wto=r(J9," (Pegasus model)"),J9.forEach(t),Ato=i(S),Ig=n(S,"LI",{});var Y3e=s(Ig);Tte=n(Y3e,"STRONG",{});var tzr=s(Tte);yto=r(tzr,"perceiver"),tzr.forEach(t),Lto=r(Y3e," \u2014 "),iB=n(Y3e,"A",{href:!0});var azr=s(iB);xto=r(azr,"PerceiverTokenizer"),azr.forEach(t),$to=r(Y3e," (Perceiver model)"),Y3e.forEach(t),kto=i(S),qg=n(S,"LI",{});var K3e=s(qg);Mte=n(K3e,"STRONG",{});var nzr=s(Mte);Sto=r(nzr,"phobert"),nzr.forEach(t),Rto=r(K3e," \u2014 "),dB=n(K3e,"A",{href:!0});var szr=s(dB);Bto=r(szr,"PhobertTokenizer"),szr.forEach(t),Pto=r(K3e," (PhoBERT model)"),K3e.forEach(t),Ito=i(S),Ng=n(S,"LI",{});var Z3e=s(Ng);Ete=n(Z3e,"STRONG",{});var lzr=s(Ete);qto=r(lzr,"plbart"),lzr.forEach(t),Nto=r(Z3e," \u2014 "),cB=n(Z3e,"A",{href:!0});var izr=s(cB);jto=r(izr,"PLBartTokenizer"),izr.forEach(t),Dto=r(Z3e," (PLBart model)"),Z3e.forEach(t),Gto=i(S),jg=n(S,"LI",{});var ewe=s(jg);Cte=n(ewe,"STRONG",{});var dzr=s(Cte);Oto=r(dzr,"prophetnet"),dzr.forEach(t),Vto=r(ewe," \u2014 "),fB=n(ewe,"A",{href:!0});var czr=s(fB);Xto=r(czr,"ProphetNetTokenizer"),czr.forEach(t),zto=r(ewe," (ProphetNet model)"),ewe.forEach(t),Qto=i(S),us=n(S,"LI",{});var Y9=s(us);wte=n(Y9,"STRONG",{});var fzr=s(wte);Wto=r(fzr,"qdqbert"),fzr.forEach(t),Hto=r(Y9," \u2014 "),mB=n(Y9,"A",{href:!0});var mzr=s(mB);Uto=r(mzr,"BertTokenizer"),mzr.forEach(t),Jto=r(Y9," or "),gB=n(Y9,"A",{href:!0});var gzr=s(gB);Yto=r(gzr,"BertTokenizerFast"),gzr.forEach(t),Kto=r(Y9," (QDQBert model)"),Y9.forEach(t),Zto=i(S),Dg=n(S,"LI",{});var owe=s(Dg);Ate=n(owe,"STRONG",{});var hzr=s(Ate);eao=r(hzr,"rag"),hzr.forEach(t),oao=r(owe," \u2014 "),hB=n(owe,"A",{href:!0});var pzr=s(hB);rao=r(pzr,"RagTokenizer"),pzr.forEach(t),tao=r(owe," (RAG model)"),owe.forEach(t),aao=i(S),_s=n(S,"LI",{});var K9=s(_s);yte=n(K9,"STRONG",{});var uzr=s(yte);nao=r(uzr,"realm"),uzr.forEach(t),sao=r(K9," \u2014 "),pB=n(K9,"A",{href:!0});var _zr=s(pB);lao=r(_zr,"RealmTokenizer"),_zr.forEach(t),iao=r(K9," or "),uB=n(K9,"A",{href:!0});var bzr=s(uB);dao=r(bzr,"RealmTokenizerFast"),bzr.forEach(t),cao=r(K9," (Realm model)"),K9.forEach(t),fao=i(S),bs=n(S,"LI",{});var Z9=s(bs);Lte=n(Z9,"STRONG",{});var vzr=s(Lte);mao=r(vzr,"reformer"),vzr.forEach(t),gao=r(Z9," \u2014 "),_B=n(Z9,"A",{href:!0});var Fzr=s(_B);hao=r(Fzr,"ReformerTokenizer"),Fzr.forEach(t),pao=r(Z9," or "),bB=n(Z9,"A",{href:!0});var Tzr=s(bB);uao=r(Tzr,"ReformerTokenizerFast"),Tzr.forEach(t),_ao=r(Z9," (Reformer model)"),Z9.forEach(t),bao=i(S),vs=n(S,"LI",{});var e$=s(vs);xte=n(e$,"STRONG",{});var Mzr=s(xte);vao=r(Mzr,"rembert"),Mzr.forEach(t),Fao=r(e$," \u2014 "),vB=n(e$,"A",{href:!0});var Ezr=s(vB);Tao=r(Ezr,"RemBertTokenizer"),Ezr.forEach(t),Mao=r(e$," or "),FB=n(e$,"A",{href:!0});var Czr=s(FB);Eao=r(Czr,"RemBertTokenizerFast"),Czr.forEach(t),Cao=r(e$," (RemBERT model)"),e$.forEach(t),wao=i(S),Fs=n(S,"LI",{});var o$=s(Fs);$te=n(o$,"STRONG",{});var wzr=s($te);Aao=r(wzr,"retribert"),wzr.forEach(t),yao=r(o$," \u2014 "),TB=n(o$,"A",{href:!0});var Azr=s(TB);Lao=r(Azr,"RetriBertTokenizer"),Azr.forEach(t),xao=r(o$," or "),MB=n(o$,"A",{href:!0});var yzr=s(MB);$ao=r(yzr,"RetriBertTokenizerFast"),yzr.forEach(t),kao=r(o$," (RetriBERT model)"),o$.forEach(t),Sao=i(S),Ts=n(S,"LI",{});var r$=s(Ts);kte=n(r$,"STRONG",{});var Lzr=s(kte);Rao=r(Lzr,"roberta"),Lzr.forEach(t),Bao=r(r$," \u2014 "),EB=n(r$,"A",{href:!0});var xzr=s(EB);Pao=r(xzr,"RobertaTokenizer"),xzr.forEach(t),Iao=r(r$," or "),CB=n(r$,"A",{href:!0});var $zr=s(CB);qao=r($zr,"RobertaTokenizerFast"),$zr.forEach(t),Nao=r(r$," (RoBERTa model)"),r$.forEach(t),jao=i(S),Ms=n(S,"LI",{});var t$=s(Ms);Ste=n(t$,"STRONG",{});var kzr=s(Ste);Dao=r(kzr,"roformer"),kzr.forEach(t),Gao=r(t$," \u2014 "),wB=n(t$,"A",{href:!0});var Szr=s(wB);Oao=r(Szr,"RoFormerTokenizer"),Szr.forEach(t),Vao=r(t$," or "),AB=n(t$,"A",{href:!0});var Rzr=s(AB);Xao=r(Rzr,"RoFormerTokenizerFast"),Rzr.forEach(t),zao=r(t$," (RoFormer model)"),t$.forEach(t),Qao=i(S),Gg=n(S,"LI",{});var rwe=s(Gg);Rte=n(rwe,"STRONG",{});var Bzr=s(Rte);Wao=r(Bzr,"speech_to_text"),Bzr.forEach(t),Hao=r(rwe," \u2014 "),yB=n(rwe,"A",{href:!0});var Pzr=s(yB);Uao=r(Pzr,"Speech2TextTokenizer"),Pzr.forEach(t),Jao=r(rwe," (Speech2Text model)"),rwe.forEach(t),Yao=i(S),Og=n(S,"LI",{});var twe=s(Og);Bte=n(twe,"STRONG",{});var Izr=s(Bte);Kao=r(Izr,"speech_to_text_2"),Izr.forEach(t),Zao=r(twe," \u2014 "),LB=n(twe,"A",{href:!0});var qzr=s(LB);eno=r(qzr,"Speech2Text2Tokenizer"),qzr.forEach(t),ono=r(twe," (Speech2Text2 model)"),twe.forEach(t),rno=i(S),Es=n(S,"LI",{});var a$=s(Es);Pte=n(a$,"STRONG",{});var Nzr=s(Pte);tno=r(Nzr,"splinter"),Nzr.forEach(t),ano=r(a$," \u2014 "),xB=n(a$,"A",{href:!0});var jzr=s(xB);nno=r(jzr,"SplinterTokenizer"),jzr.forEach(t),sno=r(a$," or "),$B=n(a$,"A",{href:!0});var Dzr=s($B);lno=r(Dzr,"SplinterTokenizerFast"),Dzr.forEach(t),ino=r(a$," (Splinter model)"),a$.forEach(t),dno=i(S),Cs=n(S,"LI",{});var n$=s(Cs);Ite=n(n$,"STRONG",{});var Gzr=s(Ite);cno=r(Gzr,"squeezebert"),Gzr.forEach(t),fno=r(n$," \u2014 "),kB=n(n$,"A",{href:!0});var Ozr=s(kB);mno=r(Ozr,"SqueezeBertTokenizer"),Ozr.forEach(t),gno=r(n$," or "),SB=n(n$,"A",{href:!0});var Vzr=s(SB);hno=r(Vzr,"SqueezeBertTokenizerFast"),Vzr.forEach(t),pno=r(n$," (SqueezeBERT model)"),n$.forEach(t),uno=i(S),ws=n(S,"LI",{});var s$=s(ws);qte=n(s$,"STRONG",{});var Xzr=s(qte);_no=r(Xzr,"t5"),Xzr.forEach(t),bno=r(s$," \u2014 "),RB=n(s$,"A",{href:!0});var zzr=s(RB);vno=r(zzr,"T5Tokenizer"),zzr.forEach(t),Fno=r(s$," or "),BB=n(s$,"A",{href:!0});var Qzr=s(BB);Tno=r(Qzr,"T5TokenizerFast"),Qzr.forEach(t),Mno=r(s$," (T5 model)"),s$.forEach(t),Eno=i(S),Vg=n(S,"LI",{});var awe=s(Vg);Nte=n(awe,"STRONG",{});var Wzr=s(Nte);Cno=r(Wzr,"tapas"),Wzr.forEach(t),wno=r(awe," \u2014 "),PB=n(awe,"A",{href:!0});var Hzr=s(PB);Ano=r(Hzr,"TapasTokenizer"),Hzr.forEach(t),yno=r(awe," (TAPAS model)"),awe.forEach(t),Lno=i(S),Xg=n(S,"LI",{});var nwe=s(Xg);jte=n(nwe,"STRONG",{});var Uzr=s(jte);xno=r(Uzr,"tapex"),Uzr.forEach(t),$no=r(nwe," \u2014 "),IB=n(nwe,"A",{href:!0});var Jzr=s(IB);kno=r(Jzr,"TapexTokenizer"),Jzr.forEach(t),Sno=r(nwe," (TAPEX model)"),nwe.forEach(t),Rno=i(S),zg=n(S,"LI",{});var swe=s(zg);Dte=n(swe,"STRONG",{});var Yzr=s(Dte);Bno=r(Yzr,"transfo-xl"),Yzr.forEach(t),Pno=r(swe," \u2014 "),qB=n(swe,"A",{href:!0});var Kzr=s(qB);Ino=r(Kzr,"TransfoXLTokenizer"),Kzr.forEach(t),qno=r(swe," (Transformer-XL model)"),swe.forEach(t),Nno=i(S),As=n(S,"LI",{});var l$=s(As);Gte=n(l$,"STRONG",{});var Zzr=s(Gte);jno=r(Zzr,"visual_bert"),Zzr.forEach(t),Dno=r(l$," \u2014 "),NB=n(l$,"A",{href:!0});var eQr=s(NB);Gno=r(eQr,"BertTokenizer"),eQr.forEach(t),Ono=r(l$," or "),jB=n(l$,"A",{href:!0});var oQr=s(jB);Vno=r(oQr,"BertTokenizerFast"),oQr.forEach(t),Xno=r(l$," (VisualBert model)"),l$.forEach(t),zno=i(S),Qg=n(S,"LI",{});var lwe=s(Qg);Ote=n(lwe,"STRONG",{});var rQr=s(Ote);Qno=r(rQr,"wav2vec2"),rQr.forEach(t),Wno=r(lwe," \u2014 "),DB=n(lwe,"A",{href:!0});var tQr=s(DB);Hno=r(tQr,"Wav2Vec2CTCTokenizer"),tQr.forEach(t),Uno=r(lwe," (Wav2Vec2 model)"),lwe.forEach(t),Jno=i(S),Wg=n(S,"LI",{});var iwe=s(Wg);Vte=n(iwe,"STRONG",{});var aQr=s(Vte);Yno=r(aQr,"wav2vec2_phoneme"),aQr.forEach(t),Kno=r(iwe," \u2014 "),GB=n(iwe,"A",{href:!0});var nQr=s(GB);Zno=r(nQr,"Wav2Vec2PhonemeCTCTokenizer"),nQr.forEach(t),eso=r(iwe," (Wav2Vec2Phoneme model)"),iwe.forEach(t),oso=i(S),ys=n(S,"LI",{});var i$=s(ys);Xte=n(i$,"STRONG",{});var sQr=s(Xte);rso=r(sQr,"xglm"),sQr.forEach(t),tso=r(i$," \u2014 "),OB=n(i$,"A",{href:!0});var lQr=s(OB);aso=r(lQr,"XGLMTokenizer"),lQr.forEach(t),nso=r(i$," or "),VB=n(i$,"A",{href:!0});var iQr=s(VB);sso=r(iQr,"XGLMTokenizerFast"),iQr.forEach(t),lso=r(i$," (XGLM model)"),i$.forEach(t),iso=i(S),Hg=n(S,"LI",{});var dwe=s(Hg);zte=n(dwe,"STRONG",{});var dQr=s(zte);dso=r(dQr,"xlm"),dQr.forEach(t),cso=r(dwe," \u2014 "),XB=n(dwe,"A",{href:!0});var cQr=s(XB);fso=r(cQr,"XLMTokenizer"),cQr.forEach(t),mso=r(dwe," (XLM model)"),dwe.forEach(t),gso=i(S),Ug=n(S,"LI",{});var cwe=s(Ug);Qte=n(cwe,"STRONG",{});var fQr=s(Qte);hso=r(fQr,"xlm-prophetnet"),fQr.forEach(t),pso=r(cwe," \u2014 "),zB=n(cwe,"A",{href:!0});var mQr=s(zB);uso=r(mQr,"XLMProphetNetTokenizer"),mQr.forEach(t),_so=r(cwe," (XLMProphetNet model)"),cwe.forEach(t),bso=i(S),Ls=n(S,"LI",{});var d$=s(Ls);Wte=n(d$,"STRONG",{});var gQr=s(Wte);vso=r(gQr,"xlm-roberta"),gQr.forEach(t),Fso=r(d$," \u2014 "),QB=n(d$,"A",{href:!0});var hQr=s(QB);Tso=r(hQr,"XLMRobertaTokenizer"),hQr.forEach(t),Mso=r(d$," or "),WB=n(d$,"A",{href:!0});var pQr=s(WB);Eso=r(pQr,"XLMRobertaTokenizerFast"),pQr.forEach(t),Cso=r(d$," (XLM-RoBERTa model)"),d$.forEach(t),wso=i(S),xs=n(S,"LI",{});var c$=s(xs);Hte=n(c$,"STRONG",{});var uQr=s(Hte);Aso=r(uQr,"xlm-roberta-xl"),uQr.forEach(t),yso=r(c$," \u2014 "),HB=n(c$,"A",{href:!0});var _Qr=s(HB);Lso=r(_Qr,"RobertaTokenizer"),_Qr.forEach(t),xso=r(c$," or "),UB=n(c$,"A",{href:!0});var bQr=s(UB);$so=r(bQr,"RobertaTokenizerFast"),bQr.forEach(t),kso=r(c$," (XLM-RoBERTa-XL model)"),c$.forEach(t),Sso=i(S),$s=n(S,"LI",{});var f$=s($s);Ute=n(f$,"STRONG",{});var vQr=s(Ute);Rso=r(vQr,"xlnet"),vQr.forEach(t),Bso=r(f$," \u2014 "),JB=n(f$,"A",{href:!0});var FQr=s(JB);Pso=r(FQr,"XLNetTokenizer"),FQr.forEach(t),Iso=r(f$," or "),YB=n(f$,"A",{href:!0});var TQr=s(YB);qso=r(TQr,"XLNetTokenizerFast"),TQr.forEach(t),Nso=r(f$," (XLNet model)"),f$.forEach(t),jso=i(S),ks=n(S,"LI",{});var m$=s(ks);Jte=n(m$,"STRONG",{});var MQr=s(Jte);Dso=r(MQr,"yoso"),MQr.forEach(t),Gso=r(m$," \u2014 "),KB=n(m$,"A",{href:!0});var EQr=s(KB);Oso=r(EQr,"AlbertTokenizer"),EQr.forEach(t),Vso=r(m$," or "),ZB=n(m$,"A",{href:!0});var CQr=s(ZB);Xso=r(CQr,"AlbertTokenizerFast"),CQr.forEach(t),zso=r(m$," (YOSO model)"),m$.forEach(t),S.forEach(t),Qso=i(Is),T(Jg.$$.fragment,Is),Is.forEach(t),Wso=i(Ps),Yg=n(Ps,"DIV",{class:!0});var nNe=s(Yg);T(m0.$$.fragment,nNe),Hso=i(nNe),Yte=n(nNe,"P",{});var wQr=s(Yte);Uso=r(wQr,"Register a new tokenizer in this mapping."),wQr.forEach(t),nNe.forEach(t),Ps.forEach(t),sIe=i(f),bi=n(f,"H2",{class:!0});var sNe=s(bi);Kg=n(sNe,"A",{id:!0,class:!0,href:!0});var AQr=s(Kg);Kte=n(AQr,"SPAN",{});var yQr=s(Kte);T(g0.$$.fragment,yQr),yQr.forEach(t),AQr.forEach(t),Jso=i(sNe),Zte=n(sNe,"SPAN",{});var LQr=s(Zte);Yso=r(LQr,"AutoFeatureExtractor"),LQr.forEach(t),sNe.forEach(t),lIe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(h0.$$.fragment,qs),Kso=i(qs),p0=n(qs,"P",{});var lNe=s(p0);Zso=r(lNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eP=n(lNe,"A",{href:!0});var xQr=s(eP);elo=r(xQr,"AutoFeatureExtractor.from_pretrained()"),xQr.forEach(t),olo=r(lNe," class method."),lNe.forEach(t),rlo=i(qs),u0=n(qs,"P",{});var iNe=s(u0);tlo=r(iNe,"This class cannot be instantiated directly using "),eae=n(iNe,"CODE",{});var $Qr=s(eae);alo=r($Qr,"__init__()"),$Qr.forEach(t),nlo=r(iNe," (throws an error)."),iNe.forEach(t),slo=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(_0.$$.fragment,Yt),llo=i(Yt),oae=n(Yt,"P",{});var kQr=s(oae);ilo=r(kQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kQr.forEach(t),dlo=i(Yt),wa=n(Yt,"P",{});var oA=s(wa);clo=r(oA,"The feature extractor class to instantiate is selected based on the "),rae=n(oA,"CODE",{});var SQr=s(rae);flo=r(SQr,"model_type"),SQr.forEach(t),mlo=r(oA,` property of the config object
(either passed as an argument or loaded from `),tae=n(oA,"CODE",{});var RQr=s(tae);glo=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),hlo=r(oA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),aae=n(oA,"CODE",{});var BQr=s(aae);plo=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),ulo=r(oA,":"),oA.forEach(t),_lo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Zg=n(ae,"LI",{});var fwe=s(Zg);nae=n(fwe,"STRONG",{});var PQr=s(nae);blo=r(PQr,"beit"),PQr.forEach(t),vlo=r(fwe," \u2014 "),oP=n(fwe,"A",{href:!0});var IQr=s(oP);Flo=r(IQr,"BeitFeatureExtractor"),IQr.forEach(t),Tlo=r(fwe," (BEiT model)"),fwe.forEach(t),Mlo=i(ae),eh=n(ae,"LI",{});var mwe=s(eh);sae=n(mwe,"STRONG",{});var qQr=s(sae);Elo=r(qQr,"clip"),qQr.forEach(t),Clo=r(mwe," \u2014 "),rP=n(mwe,"A",{href:!0});var NQr=s(rP);wlo=r(NQr,"CLIPFeatureExtractor"),NQr.forEach(t),Alo=r(mwe," (CLIP model)"),mwe.forEach(t),ylo=i(ae),oh=n(ae,"LI",{});var gwe=s(oh);lae=n(gwe,"STRONG",{});var jQr=s(lae);Llo=r(jQr,"convnext"),jQr.forEach(t),xlo=r(gwe," \u2014 "),tP=n(gwe,"A",{href:!0});var DQr=s(tP);$lo=r(DQr,"ConvNextFeatureExtractor"),DQr.forEach(t),klo=r(gwe," (ConvNext model)"),gwe.forEach(t),Slo=i(ae),rh=n(ae,"LI",{});var hwe=s(rh);iae=n(hwe,"STRONG",{});var GQr=s(iae);Rlo=r(GQr,"data2vec-audio"),GQr.forEach(t),Blo=r(hwe," \u2014 "),aP=n(hwe,"A",{href:!0});var OQr=s(aP);Plo=r(OQr,"Wav2Vec2FeatureExtractor"),OQr.forEach(t),Ilo=r(hwe," (Data2VecAudio model)"),hwe.forEach(t),qlo=i(ae),th=n(ae,"LI",{});var pwe=s(th);dae=n(pwe,"STRONG",{});var VQr=s(dae);Nlo=r(VQr,"data2vec-vision"),VQr.forEach(t),jlo=r(pwe," \u2014 "),nP=n(pwe,"A",{href:!0});var XQr=s(nP);Dlo=r(XQr,"BeitFeatureExtractor"),XQr.forEach(t),Glo=r(pwe," (Data2VecVision model)"),pwe.forEach(t),Olo=i(ae),ah=n(ae,"LI",{});var uwe=s(ah);cae=n(uwe,"STRONG",{});var zQr=s(cae);Vlo=r(zQr,"deit"),zQr.forEach(t),Xlo=r(uwe," \u2014 "),sP=n(uwe,"A",{href:!0});var QQr=s(sP);zlo=r(QQr,"DeiTFeatureExtractor"),QQr.forEach(t),Qlo=r(uwe," (DeiT model)"),uwe.forEach(t),Wlo=i(ae),nh=n(ae,"LI",{});var _we=s(nh);fae=n(_we,"STRONG",{});var WQr=s(fae);Hlo=r(WQr,"detr"),WQr.forEach(t),Ulo=r(_we," \u2014 "),lP=n(_we,"A",{href:!0});var HQr=s(lP);Jlo=r(HQr,"DetrFeatureExtractor"),HQr.forEach(t),Ylo=r(_we," (DETR model)"),_we.forEach(t),Klo=i(ae),sh=n(ae,"LI",{});var bwe=s(sh);mae=n(bwe,"STRONG",{});var UQr=s(mae);Zlo=r(UQr,"dpt"),UQr.forEach(t),eio=r(bwe," \u2014 "),iP=n(bwe,"A",{href:!0});var JQr=s(iP);oio=r(JQr,"DPTFeatureExtractor"),JQr.forEach(t),rio=r(bwe," (DPT model)"),bwe.forEach(t),tio=i(ae),lh=n(ae,"LI",{});var vwe=s(lh);gae=n(vwe,"STRONG",{});var YQr=s(gae);aio=r(YQr,"flava"),YQr.forEach(t),nio=r(vwe," \u2014 "),dP=n(vwe,"A",{href:!0});var KQr=s(dP);sio=r(KQr,"FlavaFeatureExtractor"),KQr.forEach(t),lio=r(vwe," (Flava model)"),vwe.forEach(t),iio=i(ae),ih=n(ae,"LI",{});var Fwe=s(ih);hae=n(Fwe,"STRONG",{});var ZQr=s(hae);dio=r(ZQr,"glpn"),ZQr.forEach(t),cio=r(Fwe," \u2014 "),cP=n(Fwe,"A",{href:!0});var eWr=s(cP);fio=r(eWr,"GLPNFeatureExtractor"),eWr.forEach(t),mio=r(Fwe," (GLPN model)"),Fwe.forEach(t),gio=i(ae),dh=n(ae,"LI",{});var Twe=s(dh);pae=n(Twe,"STRONG",{});var oWr=s(pae);hio=r(oWr,"hubert"),oWr.forEach(t),pio=r(Twe," \u2014 "),fP=n(Twe,"A",{href:!0});var rWr=s(fP);uio=r(rWr,"Wav2Vec2FeatureExtractor"),rWr.forEach(t),_io=r(Twe," (Hubert model)"),Twe.forEach(t),bio=i(ae),ch=n(ae,"LI",{});var Mwe=s(ch);uae=n(Mwe,"STRONG",{});var tWr=s(uae);vio=r(tWr,"layoutlmv2"),tWr.forEach(t),Fio=r(Mwe," \u2014 "),mP=n(Mwe,"A",{href:!0});var aWr=s(mP);Tio=r(aWr,"LayoutLMv2FeatureExtractor"),aWr.forEach(t),Mio=r(Mwe," (LayoutLMv2 model)"),Mwe.forEach(t),Eio=i(ae),fh=n(ae,"LI",{});var Ewe=s(fh);_ae=n(Ewe,"STRONG",{});var nWr=s(_ae);Cio=r(nWr,"maskformer"),nWr.forEach(t),wio=r(Ewe," \u2014 "),gP=n(Ewe,"A",{href:!0});var sWr=s(gP);Aio=r(sWr,"MaskFormerFeatureExtractor"),sWr.forEach(t),yio=r(Ewe," (MaskFormer model)"),Ewe.forEach(t),Lio=i(ae),mh=n(ae,"LI",{});var Cwe=s(mh);bae=n(Cwe,"STRONG",{});var lWr=s(bae);xio=r(lWr,"perceiver"),lWr.forEach(t),$io=r(Cwe," \u2014 "),hP=n(Cwe,"A",{href:!0});var iWr=s(hP);kio=r(iWr,"PerceiverFeatureExtractor"),iWr.forEach(t),Sio=r(Cwe," (Perceiver model)"),Cwe.forEach(t),Rio=i(ae),gh=n(ae,"LI",{});var wwe=s(gh);vae=n(wwe,"STRONG",{});var dWr=s(vae);Bio=r(dWr,"poolformer"),dWr.forEach(t),Pio=r(wwe," \u2014 "),pP=n(wwe,"A",{href:!0});var cWr=s(pP);Iio=r(cWr,"PoolFormerFeatureExtractor"),cWr.forEach(t),qio=r(wwe," (PoolFormer model)"),wwe.forEach(t),Nio=i(ae),hh=n(ae,"LI",{});var Awe=s(hh);Fae=n(Awe,"STRONG",{});var fWr=s(Fae);jio=r(fWr,"regnet"),fWr.forEach(t),Dio=r(Awe," \u2014 "),uP=n(Awe,"A",{href:!0});var mWr=s(uP);Gio=r(mWr,"ConvNextFeatureExtractor"),mWr.forEach(t),Oio=r(Awe," (RegNet model)"),Awe.forEach(t),Vio=i(ae),ph=n(ae,"LI",{});var ywe=s(ph);Tae=n(ywe,"STRONG",{});var gWr=s(Tae);Xio=r(gWr,"resnet"),gWr.forEach(t),zio=r(ywe," \u2014 "),_P=n(ywe,"A",{href:!0});var hWr=s(_P);Qio=r(hWr,"ConvNextFeatureExtractor"),hWr.forEach(t),Wio=r(ywe," (ResNet model)"),ywe.forEach(t),Hio=i(ae),uh=n(ae,"LI",{});var Lwe=s(uh);Mae=n(Lwe,"STRONG",{});var pWr=s(Mae);Uio=r(pWr,"segformer"),pWr.forEach(t),Jio=r(Lwe," \u2014 "),bP=n(Lwe,"A",{href:!0});var uWr=s(bP);Yio=r(uWr,"SegformerFeatureExtractor"),uWr.forEach(t),Kio=r(Lwe," (SegFormer model)"),Lwe.forEach(t),Zio=i(ae),_h=n(ae,"LI",{});var xwe=s(_h);Eae=n(xwe,"STRONG",{});var _Wr=s(Eae);edo=r(_Wr,"speech_to_text"),_Wr.forEach(t),odo=r(xwe," \u2014 "),vP=n(xwe,"A",{href:!0});var bWr=s(vP);rdo=r(bWr,"Speech2TextFeatureExtractor"),bWr.forEach(t),tdo=r(xwe," (Speech2Text model)"),xwe.forEach(t),ado=i(ae),bh=n(ae,"LI",{});var $we=s(bh);Cae=n($we,"STRONG",{});var vWr=s(Cae);ndo=r(vWr,"swin"),vWr.forEach(t),sdo=r($we," \u2014 "),FP=n($we,"A",{href:!0});var FWr=s(FP);ldo=r(FWr,"ViTFeatureExtractor"),FWr.forEach(t),ido=r($we," (Swin model)"),$we.forEach(t),ddo=i(ae),vh=n(ae,"LI",{});var kwe=s(vh);wae=n(kwe,"STRONG",{});var TWr=s(wae);cdo=r(TWr,"van"),TWr.forEach(t),fdo=r(kwe," \u2014 "),TP=n(kwe,"A",{href:!0});var MWr=s(TP);mdo=r(MWr,"ConvNextFeatureExtractor"),MWr.forEach(t),gdo=r(kwe," (VAN model)"),kwe.forEach(t),hdo=i(ae),Fh=n(ae,"LI",{});var Swe=s(Fh);Aae=n(Swe,"STRONG",{});var EWr=s(Aae);pdo=r(EWr,"vit"),EWr.forEach(t),udo=r(Swe," \u2014 "),MP=n(Swe,"A",{href:!0});var CWr=s(MP);_do=r(CWr,"ViTFeatureExtractor"),CWr.forEach(t),bdo=r(Swe," (ViT model)"),Swe.forEach(t),vdo=i(ae),Th=n(ae,"LI",{});var Rwe=s(Th);yae=n(Rwe,"STRONG",{});var wWr=s(yae);Fdo=r(wWr,"vit_mae"),wWr.forEach(t),Tdo=r(Rwe," \u2014 "),EP=n(Rwe,"A",{href:!0});var AWr=s(EP);Mdo=r(AWr,"ViTFeatureExtractor"),AWr.forEach(t),Edo=r(Rwe," (ViTMAE model)"),Rwe.forEach(t),Cdo=i(ae),Mh=n(ae,"LI",{});var Bwe=s(Mh);Lae=n(Bwe,"STRONG",{});var yWr=s(Lae);wdo=r(yWr,"wav2vec2"),yWr.forEach(t),Ado=r(Bwe," \u2014 "),CP=n(Bwe,"A",{href:!0});var LWr=s(CP);ydo=r(LWr,"Wav2Vec2FeatureExtractor"),LWr.forEach(t),Ldo=r(Bwe," (Wav2Vec2 model)"),Bwe.forEach(t),xdo=i(ae),Eh=n(ae,"LI",{});var Pwe=s(Eh);xae=n(Pwe,"STRONG",{});var xWr=s(xae);$do=r(xWr,"yolos"),xWr.forEach(t),kdo=r(Pwe," \u2014 "),wP=n(Pwe,"A",{href:!0});var $Wr=s(wP);Sdo=r($Wr,"YolosFeatureExtractor"),$Wr.forEach(t),Rdo=r(Pwe," (YOLOS model)"),Pwe.forEach(t),ae.forEach(t),Bdo=i(Yt),T(Ch.$$.fragment,Yt),Pdo=i(Yt),T(wh.$$.fragment,Yt),Yt.forEach(t),Ido=i(qs),Ah=n(qs,"DIV",{class:!0});var dNe=s(Ah);T(b0.$$.fragment,dNe),qdo=i(dNe),$ae=n(dNe,"P",{});var kWr=s($ae);Ndo=r(kWr,"Register a new feature extractor for this class."),kWr.forEach(t),dNe.forEach(t),qs.forEach(t),iIe=i(f),vi=n(f,"H2",{class:!0});var cNe=s(vi);yh=n(cNe,"A",{id:!0,class:!0,href:!0});var SWr=s(yh);kae=n(SWr,"SPAN",{});var RWr=s(kae);T(v0.$$.fragment,RWr),RWr.forEach(t),SWr.forEach(t),jdo=i(cNe),Sae=n(cNe,"SPAN",{});var BWr=s(Sae);Ddo=r(BWr,"AutoProcessor"),BWr.forEach(t),cNe.forEach(t),dIe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(F0.$$.fragment,Ns),Gdo=i(Ns),T0=n(Ns,"P",{});var fNe=s(T0);Odo=r(fNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AP=n(fNe,"A",{href:!0});var PWr=s(AP);Vdo=r(PWr,"AutoProcessor.from_pretrained()"),PWr.forEach(t),Xdo=r(fNe," class method."),fNe.forEach(t),zdo=i(Ns),M0=n(Ns,"P",{});var mNe=s(M0);Qdo=r(mNe,"This class cannot be instantiated directly using "),Rae=n(mNe,"CODE",{});var IWr=s(Rae);Wdo=r(IWr,"__init__()"),IWr.forEach(t),Hdo=r(mNe," (throws an error)."),mNe.forEach(t),Udo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(E0.$$.fragment,Kt),Jdo=i(Kt),Bae=n(Kt,"P",{});var qWr=s(Bae);Ydo=r(qWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qWr.forEach(t),Kdo=i(Kt),Fi=n(Kt,"P",{});var fK=s(Fi);Zdo=r(fK,"The processor class to instantiate is selected based on the "),Pae=n(fK,"CODE",{});var NWr=s(Pae);eco=r(NWr,"model_type"),NWr.forEach(t),oco=r(fK,` property of the config object (either
passed as an argument or loaded from `),Iae=n(fK,"CODE",{});var jWr=s(Iae);rco=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),tco=r(fK," if possible):"),fK.forEach(t),aco=i(Kt),be=n(Kt,"UL",{});var ve=s(be);Lh=n(ve,"LI",{});var Iwe=s(Lh);qae=n(Iwe,"STRONG",{});var DWr=s(qae);nco=r(DWr,"clip"),DWr.forEach(t),sco=r(Iwe," \u2014 "),yP=n(Iwe,"A",{href:!0});var GWr=s(yP);lco=r(GWr,"CLIPProcessor"),GWr.forEach(t),ico=r(Iwe," (CLIP model)"),Iwe.forEach(t),dco=i(ve),xh=n(ve,"LI",{});var qwe=s(xh);Nae=n(qwe,"STRONG",{});var OWr=s(Nae);cco=r(OWr,"flava"),OWr.forEach(t),fco=r(qwe," \u2014 "),jae=n(qwe,"CODE",{});var VWr=s(jae);mco=r(VWr,"FLAVAProcessor"),VWr.forEach(t),gco=r(qwe," (Flava model)"),qwe.forEach(t),hco=i(ve),$h=n(ve,"LI",{});var Nwe=s($h);Dae=n(Nwe,"STRONG",{});var XWr=s(Dae);pco=r(XWr,"layoutlmv2"),XWr.forEach(t),uco=r(Nwe," \u2014 "),LP=n(Nwe,"A",{href:!0});var zWr=s(LP);_co=r(zWr,"LayoutLMv2Processor"),zWr.forEach(t),bco=r(Nwe," (LayoutLMv2 model)"),Nwe.forEach(t),vco=i(ve),kh=n(ve,"LI",{});var jwe=s(kh);Gae=n(jwe,"STRONG",{});var QWr=s(Gae);Fco=r(QWr,"layoutxlm"),QWr.forEach(t),Tco=r(jwe," \u2014 "),xP=n(jwe,"A",{href:!0});var WWr=s(xP);Mco=r(WWr,"LayoutXLMProcessor"),WWr.forEach(t),Eco=r(jwe," (LayoutXLM model)"),jwe.forEach(t),Cco=i(ve),Sh=n(ve,"LI",{});var Dwe=s(Sh);Oae=n(Dwe,"STRONG",{});var HWr=s(Oae);wco=r(HWr,"sew"),HWr.forEach(t),Aco=r(Dwe," \u2014 "),$P=n(Dwe,"A",{href:!0});var UWr=s($P);yco=r(UWr,"Wav2Vec2Processor"),UWr.forEach(t),Lco=r(Dwe," (SEW model)"),Dwe.forEach(t),xco=i(ve),Rh=n(ve,"LI",{});var Gwe=s(Rh);Vae=n(Gwe,"STRONG",{});var JWr=s(Vae);$co=r(JWr,"sew-d"),JWr.forEach(t),kco=r(Gwe," \u2014 "),kP=n(Gwe,"A",{href:!0});var YWr=s(kP);Sco=r(YWr,"Wav2Vec2Processor"),YWr.forEach(t),Rco=r(Gwe," (SEW-D model)"),Gwe.forEach(t),Bco=i(ve),Bh=n(ve,"LI",{});var Owe=s(Bh);Xae=n(Owe,"STRONG",{});var KWr=s(Xae);Pco=r(KWr,"speech_to_text"),KWr.forEach(t),Ico=r(Owe," \u2014 "),SP=n(Owe,"A",{href:!0});var ZWr=s(SP);qco=r(ZWr,"Speech2TextProcessor"),ZWr.forEach(t),Nco=r(Owe," (Speech2Text model)"),Owe.forEach(t),jco=i(ve),Ph=n(ve,"LI",{});var Vwe=s(Ph);zae=n(Vwe,"STRONG",{});var eHr=s(zae);Dco=r(eHr,"speech_to_text_2"),eHr.forEach(t),Gco=r(Vwe," \u2014 "),RP=n(Vwe,"A",{href:!0});var oHr=s(RP);Oco=r(oHr,"Speech2Text2Processor"),oHr.forEach(t),Vco=r(Vwe," (Speech2Text2 model)"),Vwe.forEach(t),Xco=i(ve),Ih=n(ve,"LI",{});var Xwe=s(Ih);Qae=n(Xwe,"STRONG",{});var rHr=s(Qae);zco=r(rHr,"trocr"),rHr.forEach(t),Qco=r(Xwe," \u2014 "),BP=n(Xwe,"A",{href:!0});var tHr=s(BP);Wco=r(tHr,"TrOCRProcessor"),tHr.forEach(t),Hco=r(Xwe," (TrOCR model)"),Xwe.forEach(t),Uco=i(ve),qh=n(ve,"LI",{});var zwe=s(qh);Wae=n(zwe,"STRONG",{});var aHr=s(Wae);Jco=r(aHr,"unispeech"),aHr.forEach(t),Yco=r(zwe," \u2014 "),PP=n(zwe,"A",{href:!0});var nHr=s(PP);Kco=r(nHr,"Wav2Vec2Processor"),nHr.forEach(t),Zco=r(zwe," (UniSpeech model)"),zwe.forEach(t),efo=i(ve),Nh=n(ve,"LI",{});var Qwe=s(Nh);Hae=n(Qwe,"STRONG",{});var sHr=s(Hae);ofo=r(sHr,"unispeech-sat"),sHr.forEach(t),rfo=r(Qwe," \u2014 "),IP=n(Qwe,"A",{href:!0});var lHr=s(IP);tfo=r(lHr,"Wav2Vec2Processor"),lHr.forEach(t),afo=r(Qwe," (UniSpeechSat model)"),Qwe.forEach(t),nfo=i(ve),jh=n(ve,"LI",{});var Wwe=s(jh);Uae=n(Wwe,"STRONG",{});var iHr=s(Uae);sfo=r(iHr,"vilt"),iHr.forEach(t),lfo=r(Wwe," \u2014 "),qP=n(Wwe,"A",{href:!0});var dHr=s(qP);ifo=r(dHr,"ViltProcessor"),dHr.forEach(t),dfo=r(Wwe," (ViLT model)"),Wwe.forEach(t),cfo=i(ve),Dh=n(ve,"LI",{});var Hwe=s(Dh);Jae=n(Hwe,"STRONG",{});var cHr=s(Jae);ffo=r(cHr,"vision-text-dual-encoder"),cHr.forEach(t),mfo=r(Hwe," \u2014 "),NP=n(Hwe,"A",{href:!0});var fHr=s(NP);gfo=r(fHr,"VisionTextDualEncoderProcessor"),fHr.forEach(t),hfo=r(Hwe," (VisionTextDualEncoder model)"),Hwe.forEach(t),pfo=i(ve),Gh=n(ve,"LI",{});var Uwe=s(Gh);Yae=n(Uwe,"STRONG",{});var mHr=s(Yae);ufo=r(mHr,"wav2vec2"),mHr.forEach(t),_fo=r(Uwe," \u2014 "),jP=n(Uwe,"A",{href:!0});var gHr=s(jP);bfo=r(gHr,"Wav2Vec2Processor"),gHr.forEach(t),vfo=r(Uwe," (Wav2Vec2 model)"),Uwe.forEach(t),Ffo=i(ve),Oh=n(ve,"LI",{});var Jwe=s(Oh);Kae=n(Jwe,"STRONG",{});var hHr=s(Kae);Tfo=r(hHr,"wavlm"),hHr.forEach(t),Mfo=r(Jwe," \u2014 "),DP=n(Jwe,"A",{href:!0});var pHr=s(DP);Efo=r(pHr,"Wav2Vec2Processor"),pHr.forEach(t),Cfo=r(Jwe," (WavLM model)"),Jwe.forEach(t),ve.forEach(t),wfo=i(Kt),T(Vh.$$.fragment,Kt),Afo=i(Kt),T(Xh.$$.fragment,Kt),Kt.forEach(t),yfo=i(Ns),zh=n(Ns,"DIV",{class:!0});var gNe=s(zh);T(C0.$$.fragment,gNe),Lfo=i(gNe),Zae=n(gNe,"P",{});var uHr=s(Zae);xfo=r(uHr,"Register a new processor for this class."),uHr.forEach(t),gNe.forEach(t),Ns.forEach(t),cIe=i(f),Ti=n(f,"H2",{class:!0});var hNe=s(Ti);Qh=n(hNe,"A",{id:!0,class:!0,href:!0});var _Hr=s(Qh);ene=n(_Hr,"SPAN",{});var bHr=s(ene);T(w0.$$.fragment,bHr),bHr.forEach(t),_Hr.forEach(t),$fo=i(hNe),one=n(hNe,"SPAN",{});var vHr=s(one);kfo=r(vHr,"AutoModel"),vHr.forEach(t),hNe.forEach(t),fIe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(A0.$$.fragment,js),Sfo=i(js),Mi=n(js,"P",{});var mK=s(Mi);Rfo=r(mK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GP=n(mK,"A",{href:!0});var FHr=s(GP);Bfo=r(FHr,"from_pretrained()"),FHr.forEach(t),Pfo=r(mK," class method or the "),OP=n(mK,"A",{href:!0});var THr=s(OP);Ifo=r(THr,"from_config()"),THr.forEach(t),qfo=r(mK,` class
method.`),mK.forEach(t),Nfo=i(js),y0=n(js,"P",{});var pNe=s(y0);jfo=r(pNe,"This class cannot be instantiated directly using "),rne=n(pNe,"CODE",{});var MHr=s(rne);Dfo=r(MHr,"__init__()"),MHr.forEach(t),Gfo=r(pNe," (throws an error)."),pNe.forEach(t),Ofo=i(js),ot=n(js,"DIV",{class:!0});var rA=s(ot);T(L0.$$.fragment,rA),Vfo=i(rA),tne=n(rA,"P",{});var EHr=s(tne);Xfo=r(EHr,"Instantiates one of the base model classes of the library from a configuration."),EHr.forEach(t),zfo=i(rA),Ei=n(rA,"P",{});var gK=s(Ei);Qfo=r(gK,`Note:
Loading a model from its configuration file does `),ane=n(gK,"STRONG",{});var CHr=s(ane);Wfo=r(CHr,"not"),CHr.forEach(t),Hfo=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VP=n(gK,"A",{href:!0});var wHr=s(VP);Ufo=r(wHr,"from_pretrained()"),wHr.forEach(t),Jfo=r(gK," to load the model weights."),gK.forEach(t),Yfo=i(rA),T(Wh.$$.fragment,rA),rA.forEach(t),Kfo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(x0.$$.fragment,Zt),Zfo=i(Zt),nne=n(Zt,"P",{});var AHr=s(nne);emo=r(AHr,"Instantiate one of the base model classes of the library from a pretrained model."),AHr.forEach(t),omo=i(Zt),Aa=n(Zt,"P",{});var tA=s(Aa);rmo=r(tA,"The model class to instantiate is selected based on the "),sne=n(tA,"CODE",{});var yHr=s(sne);tmo=r(yHr,"model_type"),yHr.forEach(t),amo=r(tA,` property of the config object (either
passed as an argument or loaded from `),lne=n(tA,"CODE",{});var LHr=s(lne);nmo=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),smo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(tA,"CODE",{});var xHr=s(ine);lmo=r(xHr,"pretrained_model_name_or_path"),xHr.forEach(t),imo=r(tA,":"),tA.forEach(t),dmo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Hh=n($,"LI",{});var Ywe=s(Hh);dne=n(Ywe,"STRONG",{});var $Hr=s(dne);cmo=r($Hr,"albert"),$Hr.forEach(t),fmo=r(Ywe," \u2014 "),XP=n(Ywe,"A",{href:!0});var kHr=s(XP);mmo=r(kHr,"AlbertModel"),kHr.forEach(t),gmo=r(Ywe," (ALBERT model)"),Ywe.forEach(t),hmo=i($),Uh=n($,"LI",{});var Kwe=s(Uh);cne=n(Kwe,"STRONG",{});var SHr=s(cne);pmo=r(SHr,"bart"),SHr.forEach(t),umo=r(Kwe," \u2014 "),zP=n(Kwe,"A",{href:!0});var RHr=s(zP);_mo=r(RHr,"BartModel"),RHr.forEach(t),bmo=r(Kwe," (BART model)"),Kwe.forEach(t),vmo=i($),Jh=n($,"LI",{});var Zwe=s(Jh);fne=n(Zwe,"STRONG",{});var BHr=s(fne);Fmo=r(BHr,"beit"),BHr.forEach(t),Tmo=r(Zwe," \u2014 "),QP=n(Zwe,"A",{href:!0});var PHr=s(QP);Mmo=r(PHr,"BeitModel"),PHr.forEach(t),Emo=r(Zwe," (BEiT model)"),Zwe.forEach(t),Cmo=i($),Yh=n($,"LI",{});var eAe=s(Yh);mne=n(eAe,"STRONG",{});var IHr=s(mne);wmo=r(IHr,"bert"),IHr.forEach(t),Amo=r(eAe," \u2014 "),WP=n(eAe,"A",{href:!0});var qHr=s(WP);ymo=r(qHr,"BertModel"),qHr.forEach(t),Lmo=r(eAe," (BERT model)"),eAe.forEach(t),xmo=i($),Kh=n($,"LI",{});var oAe=s(Kh);gne=n(oAe,"STRONG",{});var NHr=s(gne);$mo=r(NHr,"bert-generation"),NHr.forEach(t),kmo=r(oAe," \u2014 "),HP=n(oAe,"A",{href:!0});var jHr=s(HP);Smo=r(jHr,"BertGenerationEncoder"),jHr.forEach(t),Rmo=r(oAe," (Bert Generation model)"),oAe.forEach(t),Bmo=i($),Zh=n($,"LI",{});var rAe=s(Zh);hne=n(rAe,"STRONG",{});var DHr=s(hne);Pmo=r(DHr,"big_bird"),DHr.forEach(t),Imo=r(rAe," \u2014 "),UP=n(rAe,"A",{href:!0});var GHr=s(UP);qmo=r(GHr,"BigBirdModel"),GHr.forEach(t),Nmo=r(rAe," (BigBird model)"),rAe.forEach(t),jmo=i($),ep=n($,"LI",{});var tAe=s(ep);pne=n(tAe,"STRONG",{});var OHr=s(pne);Dmo=r(OHr,"bigbird_pegasus"),OHr.forEach(t),Gmo=r(tAe," \u2014 "),JP=n(tAe,"A",{href:!0});var VHr=s(JP);Omo=r(VHr,"BigBirdPegasusModel"),VHr.forEach(t),Vmo=r(tAe," (BigBirdPegasus model)"),tAe.forEach(t),Xmo=i($),op=n($,"LI",{});var aAe=s(op);une=n(aAe,"STRONG",{});var XHr=s(une);zmo=r(XHr,"blenderbot"),XHr.forEach(t),Qmo=r(aAe," \u2014 "),YP=n(aAe,"A",{href:!0});var zHr=s(YP);Wmo=r(zHr,"BlenderbotModel"),zHr.forEach(t),Hmo=r(aAe," (Blenderbot model)"),aAe.forEach(t),Umo=i($),rp=n($,"LI",{});var nAe=s(rp);_ne=n(nAe,"STRONG",{});var QHr=s(_ne);Jmo=r(QHr,"blenderbot-small"),QHr.forEach(t),Ymo=r(nAe," \u2014 "),KP=n(nAe,"A",{href:!0});var WHr=s(KP);Kmo=r(WHr,"BlenderbotSmallModel"),WHr.forEach(t),Zmo=r(nAe," (BlenderbotSmall model)"),nAe.forEach(t),ego=i($),tp=n($,"LI",{});var sAe=s(tp);bne=n(sAe,"STRONG",{});var HHr=s(bne);ogo=r(HHr,"camembert"),HHr.forEach(t),rgo=r(sAe," \u2014 "),ZP=n(sAe,"A",{href:!0});var UHr=s(ZP);tgo=r(UHr,"CamembertModel"),UHr.forEach(t),ago=r(sAe," (CamemBERT model)"),sAe.forEach(t),ngo=i($),ap=n($,"LI",{});var lAe=s(ap);vne=n(lAe,"STRONG",{});var JHr=s(vne);sgo=r(JHr,"canine"),JHr.forEach(t),lgo=r(lAe," \u2014 "),eI=n(lAe,"A",{href:!0});var YHr=s(eI);igo=r(YHr,"CanineModel"),YHr.forEach(t),dgo=r(lAe," (Canine model)"),lAe.forEach(t),cgo=i($),np=n($,"LI",{});var iAe=s(np);Fne=n(iAe,"STRONG",{});var KHr=s(Fne);fgo=r(KHr,"clip"),KHr.forEach(t),mgo=r(iAe," \u2014 "),oI=n(iAe,"A",{href:!0});var ZHr=s(oI);ggo=r(ZHr,"CLIPModel"),ZHr.forEach(t),hgo=r(iAe," (CLIP model)"),iAe.forEach(t),pgo=i($),sp=n($,"LI",{});var dAe=s(sp);Tne=n(dAe,"STRONG",{});var eUr=s(Tne);ugo=r(eUr,"convbert"),eUr.forEach(t),_go=r(dAe," \u2014 "),rI=n(dAe,"A",{href:!0});var oUr=s(rI);bgo=r(oUr,"ConvBertModel"),oUr.forEach(t),vgo=r(dAe," (ConvBERT model)"),dAe.forEach(t),Fgo=i($),lp=n($,"LI",{});var cAe=s(lp);Mne=n(cAe,"STRONG",{});var rUr=s(Mne);Tgo=r(rUr,"convnext"),rUr.forEach(t),Mgo=r(cAe," \u2014 "),tI=n(cAe,"A",{href:!0});var tUr=s(tI);Ego=r(tUr,"ConvNextModel"),tUr.forEach(t),Cgo=r(cAe," (ConvNext model)"),cAe.forEach(t),wgo=i($),ip=n($,"LI",{});var fAe=s(ip);Ene=n(fAe,"STRONG",{});var aUr=s(Ene);Ago=r(aUr,"ctrl"),aUr.forEach(t),ygo=r(fAe," \u2014 "),aI=n(fAe,"A",{href:!0});var nUr=s(aI);Lgo=r(nUr,"CTRLModel"),nUr.forEach(t),xgo=r(fAe," (CTRL model)"),fAe.forEach(t),$go=i($),dp=n($,"LI",{});var mAe=s(dp);Cne=n(mAe,"STRONG",{});var sUr=s(Cne);kgo=r(sUr,"data2vec-audio"),sUr.forEach(t),Sgo=r(mAe," \u2014 "),nI=n(mAe,"A",{href:!0});var lUr=s(nI);Rgo=r(lUr,"Data2VecAudioModel"),lUr.forEach(t),Bgo=r(mAe," (Data2VecAudio model)"),mAe.forEach(t),Pgo=i($),cp=n($,"LI",{});var gAe=s(cp);wne=n(gAe,"STRONG",{});var iUr=s(wne);Igo=r(iUr,"data2vec-text"),iUr.forEach(t),qgo=r(gAe," \u2014 "),sI=n(gAe,"A",{href:!0});var dUr=s(sI);Ngo=r(dUr,"Data2VecTextModel"),dUr.forEach(t),jgo=r(gAe," (Data2VecText model)"),gAe.forEach(t),Dgo=i($),fp=n($,"LI",{});var hAe=s(fp);Ane=n(hAe,"STRONG",{});var cUr=s(Ane);Ggo=r(cUr,"data2vec-vision"),cUr.forEach(t),Ogo=r(hAe," \u2014 "),lI=n(hAe,"A",{href:!0});var fUr=s(lI);Vgo=r(fUr,"Data2VecVisionModel"),fUr.forEach(t),Xgo=r(hAe," (Data2VecVision model)"),hAe.forEach(t),zgo=i($),mp=n($,"LI",{});var pAe=s(mp);yne=n(pAe,"STRONG",{});var mUr=s(yne);Qgo=r(mUr,"deberta"),mUr.forEach(t),Wgo=r(pAe," \u2014 "),iI=n(pAe,"A",{href:!0});var gUr=s(iI);Hgo=r(gUr,"DebertaModel"),gUr.forEach(t),Ugo=r(pAe," (DeBERTa model)"),pAe.forEach(t),Jgo=i($),gp=n($,"LI",{});var uAe=s(gp);Lne=n(uAe,"STRONG",{});var hUr=s(Lne);Ygo=r(hUr,"deberta-v2"),hUr.forEach(t),Kgo=r(uAe," \u2014 "),dI=n(uAe,"A",{href:!0});var pUr=s(dI);Zgo=r(pUr,"DebertaV2Model"),pUr.forEach(t),eho=r(uAe," (DeBERTa-v2 model)"),uAe.forEach(t),oho=i($),hp=n($,"LI",{});var _Ae=s(hp);xne=n(_Ae,"STRONG",{});var uUr=s(xne);rho=r(uUr,"decision_transformer"),uUr.forEach(t),tho=r(_Ae," \u2014 "),cI=n(_Ae,"A",{href:!0});var _Ur=s(cI);aho=r(_Ur,"DecisionTransformerModel"),_Ur.forEach(t),nho=r(_Ae," (Decision Transformer model)"),_Ae.forEach(t),sho=i($),pp=n($,"LI",{});var bAe=s(pp);$ne=n(bAe,"STRONG",{});var bUr=s($ne);lho=r(bUr,"deit"),bUr.forEach(t),iho=r(bAe," \u2014 "),fI=n(bAe,"A",{href:!0});var vUr=s(fI);dho=r(vUr,"DeiTModel"),vUr.forEach(t),cho=r(bAe," (DeiT model)"),bAe.forEach(t),fho=i($),up=n($,"LI",{});var vAe=s(up);kne=n(vAe,"STRONG",{});var FUr=s(kne);mho=r(FUr,"detr"),FUr.forEach(t),gho=r(vAe," \u2014 "),mI=n(vAe,"A",{href:!0});var TUr=s(mI);hho=r(TUr,"DetrModel"),TUr.forEach(t),pho=r(vAe," (DETR model)"),vAe.forEach(t),uho=i($),_p=n($,"LI",{});var FAe=s(_p);Sne=n(FAe,"STRONG",{});var MUr=s(Sne);_ho=r(MUr,"distilbert"),MUr.forEach(t),bho=r(FAe," \u2014 "),gI=n(FAe,"A",{href:!0});var EUr=s(gI);vho=r(EUr,"DistilBertModel"),EUr.forEach(t),Fho=r(FAe," (DistilBERT model)"),FAe.forEach(t),Tho=i($),bp=n($,"LI",{});var TAe=s(bp);Rne=n(TAe,"STRONG",{});var CUr=s(Rne);Mho=r(CUr,"dpr"),CUr.forEach(t),Eho=r(TAe," \u2014 "),hI=n(TAe,"A",{href:!0});var wUr=s(hI);Cho=r(wUr,"DPRQuestionEncoder"),wUr.forEach(t),who=r(TAe," (DPR model)"),TAe.forEach(t),Aho=i($),vp=n($,"LI",{});var MAe=s(vp);Bne=n(MAe,"STRONG",{});var AUr=s(Bne);yho=r(AUr,"dpt"),AUr.forEach(t),Lho=r(MAe," \u2014 "),pI=n(MAe,"A",{href:!0});var yUr=s(pI);xho=r(yUr,"DPTModel"),yUr.forEach(t),$ho=r(MAe," (DPT model)"),MAe.forEach(t),kho=i($),Fp=n($,"LI",{});var EAe=s(Fp);Pne=n(EAe,"STRONG",{});var LUr=s(Pne);Sho=r(LUr,"electra"),LUr.forEach(t),Rho=r(EAe," \u2014 "),uI=n(EAe,"A",{href:!0});var xUr=s(uI);Bho=r(xUr,"ElectraModel"),xUr.forEach(t),Pho=r(EAe," (ELECTRA model)"),EAe.forEach(t),Iho=i($),Tp=n($,"LI",{});var CAe=s(Tp);Ine=n(CAe,"STRONG",{});var $Ur=s(Ine);qho=r($Ur,"flaubert"),$Ur.forEach(t),Nho=r(CAe," \u2014 "),_I=n(CAe,"A",{href:!0});var kUr=s(_I);jho=r(kUr,"FlaubertModel"),kUr.forEach(t),Dho=r(CAe," (FlauBERT model)"),CAe.forEach(t),Gho=i($),Mp=n($,"LI",{});var wAe=s(Mp);qne=n(wAe,"STRONG",{});var SUr=s(qne);Oho=r(SUr,"flava"),SUr.forEach(t),Vho=r(wAe," \u2014 "),bI=n(wAe,"A",{href:!0});var RUr=s(bI);Xho=r(RUr,"FlavaModel"),RUr.forEach(t),zho=r(wAe," (Flava model)"),wAe.forEach(t),Qho=i($),Ep=n($,"LI",{});var AAe=s(Ep);Nne=n(AAe,"STRONG",{});var BUr=s(Nne);Who=r(BUr,"fnet"),BUr.forEach(t),Hho=r(AAe," \u2014 "),vI=n(AAe,"A",{href:!0});var PUr=s(vI);Uho=r(PUr,"FNetModel"),PUr.forEach(t),Jho=r(AAe," (FNet model)"),AAe.forEach(t),Yho=i($),Cp=n($,"LI",{});var yAe=s(Cp);jne=n(yAe,"STRONG",{});var IUr=s(jne);Kho=r(IUr,"fsmt"),IUr.forEach(t),Zho=r(yAe," \u2014 "),FI=n(yAe,"A",{href:!0});var qUr=s(FI);epo=r(qUr,"FSMTModel"),qUr.forEach(t),opo=r(yAe," (FairSeq Machine-Translation model)"),yAe.forEach(t),rpo=i($),Ss=n($,"LI",{});var g$=s(Ss);Dne=n(g$,"STRONG",{});var NUr=s(Dne);tpo=r(NUr,"funnel"),NUr.forEach(t),apo=r(g$," \u2014 "),TI=n(g$,"A",{href:!0});var jUr=s(TI);npo=r(jUr,"FunnelModel"),jUr.forEach(t),spo=r(g$," or "),MI=n(g$,"A",{href:!0});var DUr=s(MI);lpo=r(DUr,"FunnelBaseModel"),DUr.forEach(t),ipo=r(g$," (Funnel Transformer model)"),g$.forEach(t),dpo=i($),wp=n($,"LI",{});var LAe=s(wp);Gne=n(LAe,"STRONG",{});var GUr=s(Gne);cpo=r(GUr,"glpn"),GUr.forEach(t),fpo=r(LAe," \u2014 "),EI=n(LAe,"A",{href:!0});var OUr=s(EI);mpo=r(OUr,"GLPNModel"),OUr.forEach(t),gpo=r(LAe," (GLPN model)"),LAe.forEach(t),hpo=i($),Ap=n($,"LI",{});var xAe=s(Ap);One=n(xAe,"STRONG",{});var VUr=s(One);ppo=r(VUr,"gpt2"),VUr.forEach(t),upo=r(xAe," \u2014 "),CI=n(xAe,"A",{href:!0});var XUr=s(CI);_po=r(XUr,"GPT2Model"),XUr.forEach(t),bpo=r(xAe," (OpenAI GPT-2 model)"),xAe.forEach(t),vpo=i($),yp=n($,"LI",{});var $Ae=s(yp);Vne=n($Ae,"STRONG",{});var zUr=s(Vne);Fpo=r(zUr,"gpt_neo"),zUr.forEach(t),Tpo=r($Ae," \u2014 "),wI=n($Ae,"A",{href:!0});var QUr=s(wI);Mpo=r(QUr,"GPTNeoModel"),QUr.forEach(t),Epo=r($Ae," (GPT Neo model)"),$Ae.forEach(t),Cpo=i($),Lp=n($,"LI",{});var kAe=s(Lp);Xne=n(kAe,"STRONG",{});var WUr=s(Xne);wpo=r(WUr,"gptj"),WUr.forEach(t),Apo=r(kAe," \u2014 "),AI=n(kAe,"A",{href:!0});var HUr=s(AI);ypo=r(HUr,"GPTJModel"),HUr.forEach(t),Lpo=r(kAe," (GPT-J model)"),kAe.forEach(t),xpo=i($),xp=n($,"LI",{});var SAe=s(xp);zne=n(SAe,"STRONG",{});var UUr=s(zne);$po=r(UUr,"hubert"),UUr.forEach(t),kpo=r(SAe," \u2014 "),yI=n(SAe,"A",{href:!0});var JUr=s(yI);Spo=r(JUr,"HubertModel"),JUr.forEach(t),Rpo=r(SAe," (Hubert model)"),SAe.forEach(t),Bpo=i($),$p=n($,"LI",{});var RAe=s($p);Qne=n(RAe,"STRONG",{});var YUr=s(Qne);Ppo=r(YUr,"ibert"),YUr.forEach(t),Ipo=r(RAe," \u2014 "),LI=n(RAe,"A",{href:!0});var KUr=s(LI);qpo=r(KUr,"IBertModel"),KUr.forEach(t),Npo=r(RAe," (I-BERT model)"),RAe.forEach(t),jpo=i($),kp=n($,"LI",{});var BAe=s(kp);Wne=n(BAe,"STRONG",{});var ZUr=s(Wne);Dpo=r(ZUr,"imagegpt"),ZUr.forEach(t),Gpo=r(BAe," \u2014 "),xI=n(BAe,"A",{href:!0});var eJr=s(xI);Opo=r(eJr,"ImageGPTModel"),eJr.forEach(t),Vpo=r(BAe," (ImageGPT model)"),BAe.forEach(t),Xpo=i($),Sp=n($,"LI",{});var PAe=s(Sp);Hne=n(PAe,"STRONG",{});var oJr=s(Hne);zpo=r(oJr,"layoutlm"),oJr.forEach(t),Qpo=r(PAe," \u2014 "),$I=n(PAe,"A",{href:!0});var rJr=s($I);Wpo=r(rJr,"LayoutLMModel"),rJr.forEach(t),Hpo=r(PAe," (LayoutLM model)"),PAe.forEach(t),Upo=i($),Rp=n($,"LI",{});var IAe=s(Rp);Une=n(IAe,"STRONG",{});var tJr=s(Une);Jpo=r(tJr,"layoutlmv2"),tJr.forEach(t),Ypo=r(IAe," \u2014 "),kI=n(IAe,"A",{href:!0});var aJr=s(kI);Kpo=r(aJr,"LayoutLMv2Model"),aJr.forEach(t),Zpo=r(IAe," (LayoutLMv2 model)"),IAe.forEach(t),euo=i($),Bp=n($,"LI",{});var qAe=s(Bp);Jne=n(qAe,"STRONG",{});var nJr=s(Jne);ouo=r(nJr,"led"),nJr.forEach(t),ruo=r(qAe," \u2014 "),SI=n(qAe,"A",{href:!0});var sJr=s(SI);tuo=r(sJr,"LEDModel"),sJr.forEach(t),auo=r(qAe," (LED model)"),qAe.forEach(t),nuo=i($),Pp=n($,"LI",{});var NAe=s(Pp);Yne=n(NAe,"STRONG",{});var lJr=s(Yne);suo=r(lJr,"longformer"),lJr.forEach(t),luo=r(NAe," \u2014 "),RI=n(NAe,"A",{href:!0});var iJr=s(RI);iuo=r(iJr,"LongformerModel"),iJr.forEach(t),duo=r(NAe," (Longformer model)"),NAe.forEach(t),cuo=i($),Ip=n($,"LI",{});var jAe=s(Ip);Kne=n(jAe,"STRONG",{});var dJr=s(Kne);fuo=r(dJr,"luke"),dJr.forEach(t),muo=r(jAe," \u2014 "),BI=n(jAe,"A",{href:!0});var cJr=s(BI);guo=r(cJr,"LukeModel"),cJr.forEach(t),huo=r(jAe," (LUKE model)"),jAe.forEach(t),puo=i($),qp=n($,"LI",{});var DAe=s(qp);Zne=n(DAe,"STRONG",{});var fJr=s(Zne);uuo=r(fJr,"lxmert"),fJr.forEach(t),_uo=r(DAe," \u2014 "),PI=n(DAe,"A",{href:!0});var mJr=s(PI);buo=r(mJr,"LxmertModel"),mJr.forEach(t),vuo=r(DAe," (LXMERT model)"),DAe.forEach(t),Fuo=i($),Np=n($,"LI",{});var GAe=s(Np);ese=n(GAe,"STRONG",{});var gJr=s(ese);Tuo=r(gJr,"m2m_100"),gJr.forEach(t),Muo=r(GAe," \u2014 "),II=n(GAe,"A",{href:!0});var hJr=s(II);Euo=r(hJr,"M2M100Model"),hJr.forEach(t),Cuo=r(GAe," (M2M100 model)"),GAe.forEach(t),wuo=i($),jp=n($,"LI",{});var OAe=s(jp);ose=n(OAe,"STRONG",{});var pJr=s(ose);Auo=r(pJr,"marian"),pJr.forEach(t),yuo=r(OAe," \u2014 "),qI=n(OAe,"A",{href:!0});var uJr=s(qI);Luo=r(uJr,"MarianModel"),uJr.forEach(t),xuo=r(OAe," (Marian model)"),OAe.forEach(t),$uo=i($),Dp=n($,"LI",{});var VAe=s(Dp);rse=n(VAe,"STRONG",{});var _Jr=s(rse);kuo=r(_Jr,"maskformer"),_Jr.forEach(t),Suo=r(VAe," \u2014 "),NI=n(VAe,"A",{href:!0});var bJr=s(NI);Ruo=r(bJr,"MaskFormerModel"),bJr.forEach(t),Buo=r(VAe," (MaskFormer model)"),VAe.forEach(t),Puo=i($),Gp=n($,"LI",{});var XAe=s(Gp);tse=n(XAe,"STRONG",{});var vJr=s(tse);Iuo=r(vJr,"mbart"),vJr.forEach(t),quo=r(XAe," \u2014 "),jI=n(XAe,"A",{href:!0});var FJr=s(jI);Nuo=r(FJr,"MBartModel"),FJr.forEach(t),juo=r(XAe," (mBART model)"),XAe.forEach(t),Duo=i($),Op=n($,"LI",{});var zAe=s(Op);ase=n(zAe,"STRONG",{});var TJr=s(ase);Guo=r(TJr,"megatron-bert"),TJr.forEach(t),Ouo=r(zAe," \u2014 "),DI=n(zAe,"A",{href:!0});var MJr=s(DI);Vuo=r(MJr,"MegatronBertModel"),MJr.forEach(t),Xuo=r(zAe," (MegatronBert model)"),zAe.forEach(t),zuo=i($),Vp=n($,"LI",{});var QAe=s(Vp);nse=n(QAe,"STRONG",{});var EJr=s(nse);Quo=r(EJr,"mobilebert"),EJr.forEach(t),Wuo=r(QAe," \u2014 "),GI=n(QAe,"A",{href:!0});var CJr=s(GI);Huo=r(CJr,"MobileBertModel"),CJr.forEach(t),Uuo=r(QAe," (MobileBERT model)"),QAe.forEach(t),Juo=i($),Xp=n($,"LI",{});var WAe=s(Xp);sse=n(WAe,"STRONG",{});var wJr=s(sse);Yuo=r(wJr,"mpnet"),wJr.forEach(t),Kuo=r(WAe," \u2014 "),OI=n(WAe,"A",{href:!0});var AJr=s(OI);Zuo=r(AJr,"MPNetModel"),AJr.forEach(t),e_o=r(WAe," (MPNet model)"),WAe.forEach(t),o_o=i($),zp=n($,"LI",{});var HAe=s(zp);lse=n(HAe,"STRONG",{});var yJr=s(lse);r_o=r(yJr,"mt5"),yJr.forEach(t),t_o=r(HAe," \u2014 "),VI=n(HAe,"A",{href:!0});var LJr=s(VI);a_o=r(LJr,"MT5Model"),LJr.forEach(t),n_o=r(HAe," (mT5 model)"),HAe.forEach(t),s_o=i($),Qp=n($,"LI",{});var UAe=s(Qp);ise=n(UAe,"STRONG",{});var xJr=s(ise);l_o=r(xJr,"nystromformer"),xJr.forEach(t),i_o=r(UAe," \u2014 "),XI=n(UAe,"A",{href:!0});var $Jr=s(XI);d_o=r($Jr,"NystromformerModel"),$Jr.forEach(t),c_o=r(UAe," (Nystromformer model)"),UAe.forEach(t),f_o=i($),Wp=n($,"LI",{});var JAe=s(Wp);dse=n(JAe,"STRONG",{});var kJr=s(dse);m_o=r(kJr,"openai-gpt"),kJr.forEach(t),g_o=r(JAe," \u2014 "),zI=n(JAe,"A",{href:!0});var SJr=s(zI);h_o=r(SJr,"OpenAIGPTModel"),SJr.forEach(t),p_o=r(JAe," (OpenAI GPT model)"),JAe.forEach(t),u_o=i($),Hp=n($,"LI",{});var YAe=s(Hp);cse=n(YAe,"STRONG",{});var RJr=s(cse);__o=r(RJr,"opt"),RJr.forEach(t),b_o=r(YAe," \u2014 "),QI=n(YAe,"A",{href:!0});var BJr=s(QI);v_o=r(BJr,"OPTModel"),BJr.forEach(t),F_o=r(YAe," (OPT model)"),YAe.forEach(t),T_o=i($),Up=n($,"LI",{});var KAe=s(Up);fse=n(KAe,"STRONG",{});var PJr=s(fse);M_o=r(PJr,"pegasus"),PJr.forEach(t),E_o=r(KAe," \u2014 "),WI=n(KAe,"A",{href:!0});var IJr=s(WI);C_o=r(IJr,"PegasusModel"),IJr.forEach(t),w_o=r(KAe," (Pegasus model)"),KAe.forEach(t),A_o=i($),Jp=n($,"LI",{});var ZAe=s(Jp);mse=n(ZAe,"STRONG",{});var qJr=s(mse);y_o=r(qJr,"perceiver"),qJr.forEach(t),L_o=r(ZAe," \u2014 "),HI=n(ZAe,"A",{href:!0});var NJr=s(HI);x_o=r(NJr,"PerceiverModel"),NJr.forEach(t),$_o=r(ZAe," (Perceiver model)"),ZAe.forEach(t),k_o=i($),Yp=n($,"LI",{});var e6e=s(Yp);gse=n(e6e,"STRONG",{});var jJr=s(gse);S_o=r(jJr,"plbart"),jJr.forEach(t),R_o=r(e6e," \u2014 "),UI=n(e6e,"A",{href:!0});var DJr=s(UI);B_o=r(DJr,"PLBartModel"),DJr.forEach(t),P_o=r(e6e," (PLBart model)"),e6e.forEach(t),I_o=i($),Kp=n($,"LI",{});var o6e=s(Kp);hse=n(o6e,"STRONG",{});var GJr=s(hse);q_o=r(GJr,"poolformer"),GJr.forEach(t),N_o=r(o6e," \u2014 "),JI=n(o6e,"A",{href:!0});var OJr=s(JI);j_o=r(OJr,"PoolFormerModel"),OJr.forEach(t),D_o=r(o6e," (PoolFormer model)"),o6e.forEach(t),G_o=i($),Zp=n($,"LI",{});var r6e=s(Zp);pse=n(r6e,"STRONG",{});var VJr=s(pse);O_o=r(VJr,"prophetnet"),VJr.forEach(t),V_o=r(r6e," \u2014 "),YI=n(r6e,"A",{href:!0});var XJr=s(YI);X_o=r(XJr,"ProphetNetModel"),XJr.forEach(t),z_o=r(r6e," (ProphetNet model)"),r6e.forEach(t),Q_o=i($),eu=n($,"LI",{});var t6e=s(eu);use=n(t6e,"STRONG",{});var zJr=s(use);W_o=r(zJr,"qdqbert"),zJr.forEach(t),H_o=r(t6e," \u2014 "),KI=n(t6e,"A",{href:!0});var QJr=s(KI);U_o=r(QJr,"QDQBertModel"),QJr.forEach(t),J_o=r(t6e," (QDQBert model)"),t6e.forEach(t),Y_o=i($),ou=n($,"LI",{});var a6e=s(ou);_se=n(a6e,"STRONG",{});var WJr=s(_se);K_o=r(WJr,"reformer"),WJr.forEach(t),Z_o=r(a6e," \u2014 "),ZI=n(a6e,"A",{href:!0});var HJr=s(ZI);e1o=r(HJr,"ReformerModel"),HJr.forEach(t),o1o=r(a6e," (Reformer model)"),a6e.forEach(t),r1o=i($),ru=n($,"LI",{});var n6e=s(ru);bse=n(n6e,"STRONG",{});var UJr=s(bse);t1o=r(UJr,"regnet"),UJr.forEach(t),a1o=r(n6e," \u2014 "),eq=n(n6e,"A",{href:!0});var JJr=s(eq);n1o=r(JJr,"RegNetModel"),JJr.forEach(t),s1o=r(n6e," (RegNet model)"),n6e.forEach(t),l1o=i($),tu=n($,"LI",{});var s6e=s(tu);vse=n(s6e,"STRONG",{});var YJr=s(vse);i1o=r(YJr,"rembert"),YJr.forEach(t),d1o=r(s6e," \u2014 "),oq=n(s6e,"A",{href:!0});var KJr=s(oq);c1o=r(KJr,"RemBertModel"),KJr.forEach(t),f1o=r(s6e," (RemBERT model)"),s6e.forEach(t),m1o=i($),au=n($,"LI",{});var l6e=s(au);Fse=n(l6e,"STRONG",{});var ZJr=s(Fse);g1o=r(ZJr,"resnet"),ZJr.forEach(t),h1o=r(l6e," \u2014 "),rq=n(l6e,"A",{href:!0});var eYr=s(rq);p1o=r(eYr,"ResNetModel"),eYr.forEach(t),u1o=r(l6e," (ResNet model)"),l6e.forEach(t),_1o=i($),nu=n($,"LI",{});var i6e=s(nu);Tse=n(i6e,"STRONG",{});var oYr=s(Tse);b1o=r(oYr,"retribert"),oYr.forEach(t),v1o=r(i6e," \u2014 "),tq=n(i6e,"A",{href:!0});var rYr=s(tq);F1o=r(rYr,"RetriBertModel"),rYr.forEach(t),T1o=r(i6e," (RetriBERT model)"),i6e.forEach(t),M1o=i($),su=n($,"LI",{});var d6e=s(su);Mse=n(d6e,"STRONG",{});var tYr=s(Mse);E1o=r(tYr,"roberta"),tYr.forEach(t),C1o=r(d6e," \u2014 "),aq=n(d6e,"A",{href:!0});var aYr=s(aq);w1o=r(aYr,"RobertaModel"),aYr.forEach(t),A1o=r(d6e," (RoBERTa model)"),d6e.forEach(t),y1o=i($),lu=n($,"LI",{});var c6e=s(lu);Ese=n(c6e,"STRONG",{});var nYr=s(Ese);L1o=r(nYr,"roformer"),nYr.forEach(t),x1o=r(c6e," \u2014 "),nq=n(c6e,"A",{href:!0});var sYr=s(nq);$1o=r(sYr,"RoFormerModel"),sYr.forEach(t),k1o=r(c6e," (RoFormer model)"),c6e.forEach(t),S1o=i($),iu=n($,"LI",{});var f6e=s(iu);Cse=n(f6e,"STRONG",{});var lYr=s(Cse);R1o=r(lYr,"segformer"),lYr.forEach(t),B1o=r(f6e," \u2014 "),sq=n(f6e,"A",{href:!0});var iYr=s(sq);P1o=r(iYr,"SegformerModel"),iYr.forEach(t),I1o=r(f6e," (SegFormer model)"),f6e.forEach(t),q1o=i($),du=n($,"LI",{});var m6e=s(du);wse=n(m6e,"STRONG",{});var dYr=s(wse);N1o=r(dYr,"sew"),dYr.forEach(t),j1o=r(m6e," \u2014 "),lq=n(m6e,"A",{href:!0});var cYr=s(lq);D1o=r(cYr,"SEWModel"),cYr.forEach(t),G1o=r(m6e," (SEW model)"),m6e.forEach(t),O1o=i($),cu=n($,"LI",{});var g6e=s(cu);Ase=n(g6e,"STRONG",{});var fYr=s(Ase);V1o=r(fYr,"sew-d"),fYr.forEach(t),X1o=r(g6e," \u2014 "),iq=n(g6e,"A",{href:!0});var mYr=s(iq);z1o=r(mYr,"SEWDModel"),mYr.forEach(t),Q1o=r(g6e," (SEW-D model)"),g6e.forEach(t),W1o=i($),fu=n($,"LI",{});var h6e=s(fu);yse=n(h6e,"STRONG",{});var gYr=s(yse);H1o=r(gYr,"speech_to_text"),gYr.forEach(t),U1o=r(h6e," \u2014 "),dq=n(h6e,"A",{href:!0});var hYr=s(dq);J1o=r(hYr,"Speech2TextModel"),hYr.forEach(t),Y1o=r(h6e," (Speech2Text model)"),h6e.forEach(t),K1o=i($),mu=n($,"LI",{});var p6e=s(mu);Lse=n(p6e,"STRONG",{});var pYr=s(Lse);Z1o=r(pYr,"splinter"),pYr.forEach(t),ebo=r(p6e," \u2014 "),cq=n(p6e,"A",{href:!0});var uYr=s(cq);obo=r(uYr,"SplinterModel"),uYr.forEach(t),rbo=r(p6e," (Splinter model)"),p6e.forEach(t),tbo=i($),gu=n($,"LI",{});var u6e=s(gu);xse=n(u6e,"STRONG",{});var _Yr=s(xse);abo=r(_Yr,"squeezebert"),_Yr.forEach(t),nbo=r(u6e," \u2014 "),fq=n(u6e,"A",{href:!0});var bYr=s(fq);sbo=r(bYr,"SqueezeBertModel"),bYr.forEach(t),lbo=r(u6e," (SqueezeBERT model)"),u6e.forEach(t),ibo=i($),hu=n($,"LI",{});var _6e=s(hu);$se=n(_6e,"STRONG",{});var vYr=s($se);dbo=r(vYr,"swin"),vYr.forEach(t),cbo=r(_6e," \u2014 "),mq=n(_6e,"A",{href:!0});var FYr=s(mq);fbo=r(FYr,"SwinModel"),FYr.forEach(t),mbo=r(_6e," (Swin model)"),_6e.forEach(t),gbo=i($),pu=n($,"LI",{});var b6e=s(pu);kse=n(b6e,"STRONG",{});var TYr=s(kse);hbo=r(TYr,"t5"),TYr.forEach(t),pbo=r(b6e," \u2014 "),gq=n(b6e,"A",{href:!0});var MYr=s(gq);ubo=r(MYr,"T5Model"),MYr.forEach(t),_bo=r(b6e," (T5 model)"),b6e.forEach(t),bbo=i($),uu=n($,"LI",{});var v6e=s(uu);Sse=n(v6e,"STRONG",{});var EYr=s(Sse);vbo=r(EYr,"tapas"),EYr.forEach(t),Fbo=r(v6e," \u2014 "),hq=n(v6e,"A",{href:!0});var CYr=s(hq);Tbo=r(CYr,"TapasModel"),CYr.forEach(t),Mbo=r(v6e," (TAPAS model)"),v6e.forEach(t),Ebo=i($),_u=n($,"LI",{});var F6e=s(_u);Rse=n(F6e,"STRONG",{});var wYr=s(Rse);Cbo=r(wYr,"trajectory_transformer"),wYr.forEach(t),wbo=r(F6e," \u2014 "),pq=n(F6e,"A",{href:!0});var AYr=s(pq);Abo=r(AYr,"TrajectoryTransformerModel"),AYr.forEach(t),ybo=r(F6e," (Trajectory Transformer model)"),F6e.forEach(t),Lbo=i($),bu=n($,"LI",{});var T6e=s(bu);Bse=n(T6e,"STRONG",{});var yYr=s(Bse);xbo=r(yYr,"transfo-xl"),yYr.forEach(t),$bo=r(T6e," \u2014 "),uq=n(T6e,"A",{href:!0});var LYr=s(uq);kbo=r(LYr,"TransfoXLModel"),LYr.forEach(t),Sbo=r(T6e," (Transformer-XL model)"),T6e.forEach(t),Rbo=i($),vu=n($,"LI",{});var M6e=s(vu);Pse=n(M6e,"STRONG",{});var xYr=s(Pse);Bbo=r(xYr,"unispeech"),xYr.forEach(t),Pbo=r(M6e," \u2014 "),_q=n(M6e,"A",{href:!0});var $Yr=s(_q);Ibo=r($Yr,"UniSpeechModel"),$Yr.forEach(t),qbo=r(M6e," (UniSpeech model)"),M6e.forEach(t),Nbo=i($),Fu=n($,"LI",{});var E6e=s(Fu);Ise=n(E6e,"STRONG",{});var kYr=s(Ise);jbo=r(kYr,"unispeech-sat"),kYr.forEach(t),Dbo=r(E6e," \u2014 "),bq=n(E6e,"A",{href:!0});var SYr=s(bq);Gbo=r(SYr,"UniSpeechSatModel"),SYr.forEach(t),Obo=r(E6e," (UniSpeechSat model)"),E6e.forEach(t),Vbo=i($),Tu=n($,"LI",{});var C6e=s(Tu);qse=n(C6e,"STRONG",{});var RYr=s(qse);Xbo=r(RYr,"van"),RYr.forEach(t),zbo=r(C6e," \u2014 "),vq=n(C6e,"A",{href:!0});var BYr=s(vq);Qbo=r(BYr,"VanModel"),BYr.forEach(t),Wbo=r(C6e," (VAN model)"),C6e.forEach(t),Hbo=i($),Mu=n($,"LI",{});var w6e=s(Mu);Nse=n(w6e,"STRONG",{});var PYr=s(Nse);Ubo=r(PYr,"vilt"),PYr.forEach(t),Jbo=r(w6e," \u2014 "),Fq=n(w6e,"A",{href:!0});var IYr=s(Fq);Ybo=r(IYr,"ViltModel"),IYr.forEach(t),Kbo=r(w6e," (ViLT model)"),w6e.forEach(t),Zbo=i($),Eu=n($,"LI",{});var A6e=s(Eu);jse=n(A6e,"STRONG",{});var qYr=s(jse);e4o=r(qYr,"vision-text-dual-encoder"),qYr.forEach(t),o4o=r(A6e," \u2014 "),Tq=n(A6e,"A",{href:!0});var NYr=s(Tq);r4o=r(NYr,"VisionTextDualEncoderModel"),NYr.forEach(t),t4o=r(A6e," (VisionTextDualEncoder model)"),A6e.forEach(t),a4o=i($),Cu=n($,"LI",{});var y6e=s(Cu);Dse=n(y6e,"STRONG",{});var jYr=s(Dse);n4o=r(jYr,"visual_bert"),jYr.forEach(t),s4o=r(y6e," \u2014 "),Mq=n(y6e,"A",{href:!0});var DYr=s(Mq);l4o=r(DYr,"VisualBertModel"),DYr.forEach(t),i4o=r(y6e," (VisualBert model)"),y6e.forEach(t),d4o=i($),wu=n($,"LI",{});var L6e=s(wu);Gse=n(L6e,"STRONG",{});var GYr=s(Gse);c4o=r(GYr,"vit"),GYr.forEach(t),f4o=r(L6e," \u2014 "),Eq=n(L6e,"A",{href:!0});var OYr=s(Eq);m4o=r(OYr,"ViTModel"),OYr.forEach(t),g4o=r(L6e," (ViT model)"),L6e.forEach(t),h4o=i($),Au=n($,"LI",{});var x6e=s(Au);Ose=n(x6e,"STRONG",{});var VYr=s(Ose);p4o=r(VYr,"vit_mae"),VYr.forEach(t),u4o=r(x6e," \u2014 "),Cq=n(x6e,"A",{href:!0});var XYr=s(Cq);_4o=r(XYr,"ViTMAEModel"),XYr.forEach(t),b4o=r(x6e," (ViTMAE model)"),x6e.forEach(t),v4o=i($),yu=n($,"LI",{});var $6e=s(yu);Vse=n($6e,"STRONG",{});var zYr=s(Vse);F4o=r(zYr,"wav2vec2"),zYr.forEach(t),T4o=r($6e," \u2014 "),wq=n($6e,"A",{href:!0});var QYr=s(wq);M4o=r(QYr,"Wav2Vec2Model"),QYr.forEach(t),E4o=r($6e," (Wav2Vec2 model)"),$6e.forEach(t),C4o=i($),Lu=n($,"LI",{});var k6e=s(Lu);Xse=n(k6e,"STRONG",{});var WYr=s(Xse);w4o=r(WYr,"wavlm"),WYr.forEach(t),A4o=r(k6e," \u2014 "),Aq=n(k6e,"A",{href:!0});var HYr=s(Aq);y4o=r(HYr,"WavLMModel"),HYr.forEach(t),L4o=r(k6e," (WavLM model)"),k6e.forEach(t),x4o=i($),xu=n($,"LI",{});var S6e=s(xu);zse=n(S6e,"STRONG",{});var UYr=s(zse);$4o=r(UYr,"xglm"),UYr.forEach(t),k4o=r(S6e," \u2014 "),yq=n(S6e,"A",{href:!0});var JYr=s(yq);S4o=r(JYr,"XGLMModel"),JYr.forEach(t),R4o=r(S6e," (XGLM model)"),S6e.forEach(t),B4o=i($),$u=n($,"LI",{});var R6e=s($u);Qse=n(R6e,"STRONG",{});var YYr=s(Qse);P4o=r(YYr,"xlm"),YYr.forEach(t),I4o=r(R6e," \u2014 "),Lq=n(R6e,"A",{href:!0});var KYr=s(Lq);q4o=r(KYr,"XLMModel"),KYr.forEach(t),N4o=r(R6e," (XLM model)"),R6e.forEach(t),j4o=i($),ku=n($,"LI",{});var B6e=s(ku);Wse=n(B6e,"STRONG",{});var ZYr=s(Wse);D4o=r(ZYr,"xlm-prophetnet"),ZYr.forEach(t),G4o=r(B6e," \u2014 "),xq=n(B6e,"A",{href:!0});var eKr=s(xq);O4o=r(eKr,"XLMProphetNetModel"),eKr.forEach(t),V4o=r(B6e," (XLMProphetNet model)"),B6e.forEach(t),X4o=i($),Su=n($,"LI",{});var P6e=s(Su);Hse=n(P6e,"STRONG",{});var oKr=s(Hse);z4o=r(oKr,"xlm-roberta"),oKr.forEach(t),Q4o=r(P6e," \u2014 "),$q=n(P6e,"A",{href:!0});var rKr=s($q);W4o=r(rKr,"XLMRobertaModel"),rKr.forEach(t),H4o=r(P6e," (XLM-RoBERTa model)"),P6e.forEach(t),U4o=i($),Ru=n($,"LI",{});var I6e=s(Ru);Use=n(I6e,"STRONG",{});var tKr=s(Use);J4o=r(tKr,"xlm-roberta-xl"),tKr.forEach(t),Y4o=r(I6e," \u2014 "),kq=n(I6e,"A",{href:!0});var aKr=s(kq);K4o=r(aKr,"XLMRobertaXLModel"),aKr.forEach(t),Z4o=r(I6e," (XLM-RoBERTa-XL model)"),I6e.forEach(t),e2o=i($),Bu=n($,"LI",{});var q6e=s(Bu);Jse=n(q6e,"STRONG",{});var nKr=s(Jse);o2o=r(nKr,"xlnet"),nKr.forEach(t),r2o=r(q6e," \u2014 "),Sq=n(q6e,"A",{href:!0});var sKr=s(Sq);t2o=r(sKr,"XLNetModel"),sKr.forEach(t),a2o=r(q6e," (XLNet model)"),q6e.forEach(t),n2o=i($),Pu=n($,"LI",{});var N6e=s(Pu);Yse=n(N6e,"STRONG",{});var lKr=s(Yse);s2o=r(lKr,"yolos"),lKr.forEach(t),l2o=r(N6e," \u2014 "),Rq=n(N6e,"A",{href:!0});var iKr=s(Rq);i2o=r(iKr,"YolosModel"),iKr.forEach(t),d2o=r(N6e," (YOLOS model)"),N6e.forEach(t),c2o=i($),Iu=n($,"LI",{});var j6e=s(Iu);Kse=n(j6e,"STRONG",{});var dKr=s(Kse);f2o=r(dKr,"yoso"),dKr.forEach(t),m2o=r(j6e," \u2014 "),Bq=n(j6e,"A",{href:!0});var cKr=s(Bq);g2o=r(cKr,"YosoModel"),cKr.forEach(t),h2o=r(j6e," (YOSO model)"),j6e.forEach(t),$.forEach(t),p2o=i(Zt),qu=n(Zt,"P",{});var D6e=s(qu);u2o=r(D6e,"The model is set in evaluation mode by default using "),Zse=n(D6e,"CODE",{});var fKr=s(Zse);_2o=r(fKr,"model.eval()"),fKr.forEach(t),b2o=r(D6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(D6e,"CODE",{});var mKr=s(ele);v2o=r(mKr,"model.train()"),mKr.forEach(t),D6e.forEach(t),F2o=i(Zt),T(Nu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),mIe=i(f),Ci=n(f,"H2",{class:!0});var uNe=s(Ci);ju=n(uNe,"A",{id:!0,class:!0,href:!0});var gKr=s(ju);ole=n(gKr,"SPAN",{});var hKr=s(ole);T($0.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),T2o=i(uNe),rle=n(uNe,"SPAN",{});var pKr=s(rle);M2o=r(pKr,"AutoModelForPreTraining"),pKr.forEach(t),uNe.forEach(t),gIe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(k0.$$.fragment,Ds),E2o=i(Ds),wi=n(Ds,"P",{});var hK=s(wi);C2o=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Pq=n(hK,"A",{href:!0});var uKr=s(Pq);w2o=r(uKr,"from_pretrained()"),uKr.forEach(t),A2o=r(hK," class method or the "),Iq=n(hK,"A",{href:!0});var _Kr=s(Iq);y2o=r(_Kr,"from_config()"),_Kr.forEach(t),L2o=r(hK,` class
method.`),hK.forEach(t),x2o=i(Ds),S0=n(Ds,"P",{});var _Ne=s(S0);$2o=r(_Ne,"This class cannot be instantiated directly using "),tle=n(_Ne,"CODE",{});var bKr=s(tle);k2o=r(bKr,"__init__()"),bKr.forEach(t),S2o=r(_Ne," (throws an error)."),_Ne.forEach(t),R2o=i(Ds),rt=n(Ds,"DIV",{class:!0});var aA=s(rt);T(R0.$$.fragment,aA),B2o=i(aA),ale=n(aA,"P",{});var vKr=s(ale);P2o=r(vKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vKr.forEach(t),I2o=i(aA),Ai=n(aA,"P",{});var pK=s(Ai);q2o=r(pK,`Note:
Loading a model from its configuration file does `),nle=n(pK,"STRONG",{});var FKr=s(nle);N2o=r(FKr,"not"),FKr.forEach(t),j2o=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=n(pK,"A",{href:!0});var TKr=s(qq);D2o=r(TKr,"from_pretrained()"),TKr.forEach(t),G2o=r(pK," to load the model weights."),pK.forEach(t),O2o=i(aA),T(Du.$$.fragment,aA),aA.forEach(t),V2o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(B0.$$.fragment,ea),X2o=i(ea),sle=n(ea,"P",{});var MKr=s(sle);z2o=r(MKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MKr.forEach(t),Q2o=i(ea),ya=n(ea,"P",{});var nA=s(ya);W2o=r(nA,"The model class to instantiate is selected based on the "),lle=n(nA,"CODE",{});var EKr=s(lle);H2o=r(EKr,"model_type"),EKr.forEach(t),U2o=r(nA,` property of the config object (either
passed as an argument or loaded from `),ile=n(nA,"CODE",{});var CKr=s(ile);J2o=r(CKr,"pretrained_model_name_or_path"),CKr.forEach(t),Y2o=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(nA,"CODE",{});var wKr=s(dle);K2o=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),Z2o=r(nA,":"),nA.forEach(t),evo=i(ea),G=n(ea,"UL",{});var V=s(G);Gu=n(V,"LI",{});var G6e=s(Gu);cle=n(G6e,"STRONG",{});var AKr=s(cle);ovo=r(AKr,"albert"),AKr.forEach(t),rvo=r(G6e," \u2014 "),Nq=n(G6e,"A",{href:!0});var yKr=s(Nq);tvo=r(yKr,"AlbertForPreTraining"),yKr.forEach(t),avo=r(G6e," (ALBERT model)"),G6e.forEach(t),nvo=i(V),Ou=n(V,"LI",{});var O6e=s(Ou);fle=n(O6e,"STRONG",{});var LKr=s(fle);svo=r(LKr,"bart"),LKr.forEach(t),lvo=r(O6e," \u2014 "),jq=n(O6e,"A",{href:!0});var xKr=s(jq);ivo=r(xKr,"BartForConditionalGeneration"),xKr.forEach(t),dvo=r(O6e," (BART model)"),O6e.forEach(t),cvo=i(V),Vu=n(V,"LI",{});var V6e=s(Vu);mle=n(V6e,"STRONG",{});var $Kr=s(mle);fvo=r($Kr,"bert"),$Kr.forEach(t),mvo=r(V6e," \u2014 "),Dq=n(V6e,"A",{href:!0});var kKr=s(Dq);gvo=r(kKr,"BertForPreTraining"),kKr.forEach(t),hvo=r(V6e," (BERT model)"),V6e.forEach(t),pvo=i(V),Xu=n(V,"LI",{});var X6e=s(Xu);gle=n(X6e,"STRONG",{});var SKr=s(gle);uvo=r(SKr,"big_bird"),SKr.forEach(t),_vo=r(X6e," \u2014 "),Gq=n(X6e,"A",{href:!0});var RKr=s(Gq);bvo=r(RKr,"BigBirdForPreTraining"),RKr.forEach(t),vvo=r(X6e," (BigBird model)"),X6e.forEach(t),Fvo=i(V),zu=n(V,"LI",{});var z6e=s(zu);hle=n(z6e,"STRONG",{});var BKr=s(hle);Tvo=r(BKr,"camembert"),BKr.forEach(t),Mvo=r(z6e," \u2014 "),Oq=n(z6e,"A",{href:!0});var PKr=s(Oq);Evo=r(PKr,"CamembertForMaskedLM"),PKr.forEach(t),Cvo=r(z6e," (CamemBERT model)"),z6e.forEach(t),wvo=i(V),Qu=n(V,"LI",{});var Q6e=s(Qu);ple=n(Q6e,"STRONG",{});var IKr=s(ple);Avo=r(IKr,"ctrl"),IKr.forEach(t),yvo=r(Q6e," \u2014 "),Vq=n(Q6e,"A",{href:!0});var qKr=s(Vq);Lvo=r(qKr,"CTRLLMHeadModel"),qKr.forEach(t),xvo=r(Q6e," (CTRL model)"),Q6e.forEach(t),$vo=i(V),Wu=n(V,"LI",{});var W6e=s(Wu);ule=n(W6e,"STRONG",{});var NKr=s(ule);kvo=r(NKr,"data2vec-text"),NKr.forEach(t),Svo=r(W6e," \u2014 "),Xq=n(W6e,"A",{href:!0});var jKr=s(Xq);Rvo=r(jKr,"Data2VecTextForMaskedLM"),jKr.forEach(t),Bvo=r(W6e," (Data2VecText model)"),W6e.forEach(t),Pvo=i(V),Hu=n(V,"LI",{});var H6e=s(Hu);_le=n(H6e,"STRONG",{});var DKr=s(_le);Ivo=r(DKr,"deberta"),DKr.forEach(t),qvo=r(H6e," \u2014 "),zq=n(H6e,"A",{href:!0});var GKr=s(zq);Nvo=r(GKr,"DebertaForMaskedLM"),GKr.forEach(t),jvo=r(H6e," (DeBERTa model)"),H6e.forEach(t),Dvo=i(V),Uu=n(V,"LI",{});var U6e=s(Uu);ble=n(U6e,"STRONG",{});var OKr=s(ble);Gvo=r(OKr,"deberta-v2"),OKr.forEach(t),Ovo=r(U6e," \u2014 "),Qq=n(U6e,"A",{href:!0});var VKr=s(Qq);Vvo=r(VKr,"DebertaV2ForMaskedLM"),VKr.forEach(t),Xvo=r(U6e," (DeBERTa-v2 model)"),U6e.forEach(t),zvo=i(V),Ju=n(V,"LI",{});var J6e=s(Ju);vle=n(J6e,"STRONG",{});var XKr=s(vle);Qvo=r(XKr,"distilbert"),XKr.forEach(t),Wvo=r(J6e," \u2014 "),Wq=n(J6e,"A",{href:!0});var zKr=s(Wq);Hvo=r(zKr,"DistilBertForMaskedLM"),zKr.forEach(t),Uvo=r(J6e," (DistilBERT model)"),J6e.forEach(t),Jvo=i(V),Yu=n(V,"LI",{});var Y6e=s(Yu);Fle=n(Y6e,"STRONG",{});var QKr=s(Fle);Yvo=r(QKr,"electra"),QKr.forEach(t),Kvo=r(Y6e," \u2014 "),Hq=n(Y6e,"A",{href:!0});var WKr=s(Hq);Zvo=r(WKr,"ElectraForPreTraining"),WKr.forEach(t),eFo=r(Y6e," (ELECTRA model)"),Y6e.forEach(t),oFo=i(V),Ku=n(V,"LI",{});var K6e=s(Ku);Tle=n(K6e,"STRONG",{});var HKr=s(Tle);rFo=r(HKr,"flaubert"),HKr.forEach(t),tFo=r(K6e," \u2014 "),Uq=n(K6e,"A",{href:!0});var UKr=s(Uq);aFo=r(UKr,"FlaubertWithLMHeadModel"),UKr.forEach(t),nFo=r(K6e," (FlauBERT model)"),K6e.forEach(t),sFo=i(V),Zu=n(V,"LI",{});var Z6e=s(Zu);Mle=n(Z6e,"STRONG",{});var JKr=s(Mle);lFo=r(JKr,"flava"),JKr.forEach(t),iFo=r(Z6e," \u2014 "),Jq=n(Z6e,"A",{href:!0});var YKr=s(Jq);dFo=r(YKr,"FlavaForPreTraining"),YKr.forEach(t),cFo=r(Z6e," (Flava model)"),Z6e.forEach(t),fFo=i(V),e_=n(V,"LI",{});var e0e=s(e_);Ele=n(e0e,"STRONG",{});var KKr=s(Ele);mFo=r(KKr,"fnet"),KKr.forEach(t),gFo=r(e0e," \u2014 "),Yq=n(e0e,"A",{href:!0});var ZKr=s(Yq);hFo=r(ZKr,"FNetForPreTraining"),ZKr.forEach(t),pFo=r(e0e," (FNet model)"),e0e.forEach(t),uFo=i(V),o_=n(V,"LI",{});var o0e=s(o_);Cle=n(o0e,"STRONG",{});var eZr=s(Cle);_Fo=r(eZr,"fsmt"),eZr.forEach(t),bFo=r(o0e," \u2014 "),Kq=n(o0e,"A",{href:!0});var oZr=s(Kq);vFo=r(oZr,"FSMTForConditionalGeneration"),oZr.forEach(t),FFo=r(o0e," (FairSeq Machine-Translation model)"),o0e.forEach(t),TFo=i(V),r_=n(V,"LI",{});var r0e=s(r_);wle=n(r0e,"STRONG",{});var rZr=s(wle);MFo=r(rZr,"funnel"),rZr.forEach(t),EFo=r(r0e," \u2014 "),Zq=n(r0e,"A",{href:!0});var tZr=s(Zq);CFo=r(tZr,"FunnelForPreTraining"),tZr.forEach(t),wFo=r(r0e," (Funnel Transformer model)"),r0e.forEach(t),AFo=i(V),t_=n(V,"LI",{});var t0e=s(t_);Ale=n(t0e,"STRONG",{});var aZr=s(Ale);yFo=r(aZr,"gpt2"),aZr.forEach(t),LFo=r(t0e," \u2014 "),eN=n(t0e,"A",{href:!0});var nZr=s(eN);xFo=r(nZr,"GPT2LMHeadModel"),nZr.forEach(t),$Fo=r(t0e," (OpenAI GPT-2 model)"),t0e.forEach(t),kFo=i(V),a_=n(V,"LI",{});var a0e=s(a_);yle=n(a0e,"STRONG",{});var sZr=s(yle);SFo=r(sZr,"ibert"),sZr.forEach(t),RFo=r(a0e," \u2014 "),oN=n(a0e,"A",{href:!0});var lZr=s(oN);BFo=r(lZr,"IBertForMaskedLM"),lZr.forEach(t),PFo=r(a0e," (I-BERT model)"),a0e.forEach(t),IFo=i(V),n_=n(V,"LI",{});var n0e=s(n_);Lle=n(n0e,"STRONG",{});var iZr=s(Lle);qFo=r(iZr,"layoutlm"),iZr.forEach(t),NFo=r(n0e," \u2014 "),rN=n(n0e,"A",{href:!0});var dZr=s(rN);jFo=r(dZr,"LayoutLMForMaskedLM"),dZr.forEach(t),DFo=r(n0e," (LayoutLM model)"),n0e.forEach(t),GFo=i(V),s_=n(V,"LI",{});var s0e=s(s_);xle=n(s0e,"STRONG",{});var cZr=s(xle);OFo=r(cZr,"longformer"),cZr.forEach(t),VFo=r(s0e," \u2014 "),tN=n(s0e,"A",{href:!0});var fZr=s(tN);XFo=r(fZr,"LongformerForMaskedLM"),fZr.forEach(t),zFo=r(s0e," (Longformer model)"),s0e.forEach(t),QFo=i(V),l_=n(V,"LI",{});var l0e=s(l_);$le=n(l0e,"STRONG",{});var mZr=s($le);WFo=r(mZr,"lxmert"),mZr.forEach(t),HFo=r(l0e," \u2014 "),aN=n(l0e,"A",{href:!0});var gZr=s(aN);UFo=r(gZr,"LxmertForPreTraining"),gZr.forEach(t),JFo=r(l0e," (LXMERT model)"),l0e.forEach(t),YFo=i(V),i_=n(V,"LI",{});var i0e=s(i_);kle=n(i0e,"STRONG",{});var hZr=s(kle);KFo=r(hZr,"megatron-bert"),hZr.forEach(t),ZFo=r(i0e," \u2014 "),nN=n(i0e,"A",{href:!0});var pZr=s(nN);eTo=r(pZr,"MegatronBertForPreTraining"),pZr.forEach(t),oTo=r(i0e," (MegatronBert model)"),i0e.forEach(t),rTo=i(V),d_=n(V,"LI",{});var d0e=s(d_);Sle=n(d0e,"STRONG",{});var uZr=s(Sle);tTo=r(uZr,"mobilebert"),uZr.forEach(t),aTo=r(d0e," \u2014 "),sN=n(d0e,"A",{href:!0});var _Zr=s(sN);nTo=r(_Zr,"MobileBertForPreTraining"),_Zr.forEach(t),sTo=r(d0e," (MobileBERT model)"),d0e.forEach(t),lTo=i(V),c_=n(V,"LI",{});var c0e=s(c_);Rle=n(c0e,"STRONG",{});var bZr=s(Rle);iTo=r(bZr,"mpnet"),bZr.forEach(t),dTo=r(c0e," \u2014 "),lN=n(c0e,"A",{href:!0});var vZr=s(lN);cTo=r(vZr,"MPNetForMaskedLM"),vZr.forEach(t),fTo=r(c0e," (MPNet model)"),c0e.forEach(t),mTo=i(V),f_=n(V,"LI",{});var f0e=s(f_);Ble=n(f0e,"STRONG",{});var FZr=s(Ble);gTo=r(FZr,"openai-gpt"),FZr.forEach(t),hTo=r(f0e," \u2014 "),iN=n(f0e,"A",{href:!0});var TZr=s(iN);pTo=r(TZr,"OpenAIGPTLMHeadModel"),TZr.forEach(t),uTo=r(f0e," (OpenAI GPT model)"),f0e.forEach(t),_To=i(V),m_=n(V,"LI",{});var m0e=s(m_);Ple=n(m0e,"STRONG",{});var MZr=s(Ple);bTo=r(MZr,"retribert"),MZr.forEach(t),vTo=r(m0e," \u2014 "),dN=n(m0e,"A",{href:!0});var EZr=s(dN);FTo=r(EZr,"RetriBertModel"),EZr.forEach(t),TTo=r(m0e," (RetriBERT model)"),m0e.forEach(t),MTo=i(V),g_=n(V,"LI",{});var g0e=s(g_);Ile=n(g0e,"STRONG",{});var CZr=s(Ile);ETo=r(CZr,"roberta"),CZr.forEach(t),CTo=r(g0e," \u2014 "),cN=n(g0e,"A",{href:!0});var wZr=s(cN);wTo=r(wZr,"RobertaForMaskedLM"),wZr.forEach(t),ATo=r(g0e," (RoBERTa model)"),g0e.forEach(t),yTo=i(V),h_=n(V,"LI",{});var h0e=s(h_);qle=n(h0e,"STRONG",{});var AZr=s(qle);LTo=r(AZr,"squeezebert"),AZr.forEach(t),xTo=r(h0e," \u2014 "),fN=n(h0e,"A",{href:!0});var yZr=s(fN);$To=r(yZr,"SqueezeBertForMaskedLM"),yZr.forEach(t),kTo=r(h0e," (SqueezeBERT model)"),h0e.forEach(t),STo=i(V),p_=n(V,"LI",{});var p0e=s(p_);Nle=n(p0e,"STRONG",{});var LZr=s(Nle);RTo=r(LZr,"t5"),LZr.forEach(t),BTo=r(p0e," \u2014 "),mN=n(p0e,"A",{href:!0});var xZr=s(mN);PTo=r(xZr,"T5ForConditionalGeneration"),xZr.forEach(t),ITo=r(p0e," (T5 model)"),p0e.forEach(t),qTo=i(V),u_=n(V,"LI",{});var u0e=s(u_);jle=n(u0e,"STRONG",{});var $Zr=s(jle);NTo=r($Zr,"tapas"),$Zr.forEach(t),jTo=r(u0e," \u2014 "),gN=n(u0e,"A",{href:!0});var kZr=s(gN);DTo=r(kZr,"TapasForMaskedLM"),kZr.forEach(t),GTo=r(u0e," (TAPAS model)"),u0e.forEach(t),OTo=i(V),__=n(V,"LI",{});var _0e=s(__);Dle=n(_0e,"STRONG",{});var SZr=s(Dle);VTo=r(SZr,"transfo-xl"),SZr.forEach(t),XTo=r(_0e," \u2014 "),hN=n(_0e,"A",{href:!0});var RZr=s(hN);zTo=r(RZr,"TransfoXLLMHeadModel"),RZr.forEach(t),QTo=r(_0e," (Transformer-XL model)"),_0e.forEach(t),WTo=i(V),b_=n(V,"LI",{});var b0e=s(b_);Gle=n(b0e,"STRONG",{});var BZr=s(Gle);HTo=r(BZr,"unispeech"),BZr.forEach(t),UTo=r(b0e," \u2014 "),pN=n(b0e,"A",{href:!0});var PZr=s(pN);JTo=r(PZr,"UniSpeechForPreTraining"),PZr.forEach(t),YTo=r(b0e," (UniSpeech model)"),b0e.forEach(t),KTo=i(V),v_=n(V,"LI",{});var v0e=s(v_);Ole=n(v0e,"STRONG",{});var IZr=s(Ole);ZTo=r(IZr,"unispeech-sat"),IZr.forEach(t),e7o=r(v0e," \u2014 "),uN=n(v0e,"A",{href:!0});var qZr=s(uN);o7o=r(qZr,"UniSpeechSatForPreTraining"),qZr.forEach(t),r7o=r(v0e," (UniSpeechSat model)"),v0e.forEach(t),t7o=i(V),F_=n(V,"LI",{});var F0e=s(F_);Vle=n(F0e,"STRONG",{});var NZr=s(Vle);a7o=r(NZr,"visual_bert"),NZr.forEach(t),n7o=r(F0e," \u2014 "),_N=n(F0e,"A",{href:!0});var jZr=s(_N);s7o=r(jZr,"VisualBertForPreTraining"),jZr.forEach(t),l7o=r(F0e," (VisualBert model)"),F0e.forEach(t),i7o=i(V),T_=n(V,"LI",{});var T0e=s(T_);Xle=n(T0e,"STRONG",{});var DZr=s(Xle);d7o=r(DZr,"vit_mae"),DZr.forEach(t),c7o=r(T0e," \u2014 "),bN=n(T0e,"A",{href:!0});var GZr=s(bN);f7o=r(GZr,"ViTMAEForPreTraining"),GZr.forEach(t),m7o=r(T0e," (ViTMAE model)"),T0e.forEach(t),g7o=i(V),M_=n(V,"LI",{});var M0e=s(M_);zle=n(M0e,"STRONG",{});var OZr=s(zle);h7o=r(OZr,"wav2vec2"),OZr.forEach(t),p7o=r(M0e," \u2014 "),vN=n(M0e,"A",{href:!0});var VZr=s(vN);u7o=r(VZr,"Wav2Vec2ForPreTraining"),VZr.forEach(t),_7o=r(M0e," (Wav2Vec2 model)"),M0e.forEach(t),b7o=i(V),E_=n(V,"LI",{});var E0e=s(E_);Qle=n(E0e,"STRONG",{});var XZr=s(Qle);v7o=r(XZr,"xlm"),XZr.forEach(t),F7o=r(E0e," \u2014 "),FN=n(E0e,"A",{href:!0});var zZr=s(FN);T7o=r(zZr,"XLMWithLMHeadModel"),zZr.forEach(t),M7o=r(E0e," (XLM model)"),E0e.forEach(t),E7o=i(V),C_=n(V,"LI",{});var C0e=s(C_);Wle=n(C0e,"STRONG",{});var QZr=s(Wle);C7o=r(QZr,"xlm-roberta"),QZr.forEach(t),w7o=r(C0e," \u2014 "),TN=n(C0e,"A",{href:!0});var WZr=s(TN);A7o=r(WZr,"XLMRobertaForMaskedLM"),WZr.forEach(t),y7o=r(C0e," (XLM-RoBERTa model)"),C0e.forEach(t),L7o=i(V),w_=n(V,"LI",{});var w0e=s(w_);Hle=n(w0e,"STRONG",{});var HZr=s(Hle);x7o=r(HZr,"xlm-roberta-xl"),HZr.forEach(t),$7o=r(w0e," \u2014 "),MN=n(w0e,"A",{href:!0});var UZr=s(MN);k7o=r(UZr,"XLMRobertaXLForMaskedLM"),UZr.forEach(t),S7o=r(w0e," (XLM-RoBERTa-XL model)"),w0e.forEach(t),R7o=i(V),A_=n(V,"LI",{});var A0e=s(A_);Ule=n(A0e,"STRONG",{});var JZr=s(Ule);B7o=r(JZr,"xlnet"),JZr.forEach(t),P7o=r(A0e," \u2014 "),EN=n(A0e,"A",{href:!0});var YZr=s(EN);I7o=r(YZr,"XLNetLMHeadModel"),YZr.forEach(t),q7o=r(A0e," (XLNet model)"),A0e.forEach(t),V.forEach(t),N7o=i(ea),y_=n(ea,"P",{});var y0e=s(y_);j7o=r(y0e,"The model is set in evaluation mode by default using "),Jle=n(y0e,"CODE",{});var KZr=s(Jle);D7o=r(KZr,"model.eval()"),KZr.forEach(t),G7o=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yle=n(y0e,"CODE",{});var ZZr=s(Yle);O7o=r(ZZr,"model.train()"),ZZr.forEach(t),y0e.forEach(t),V7o=i(ea),T(L_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),hIe=i(f),yi=n(f,"H2",{class:!0});var bNe=s(yi);x_=n(bNe,"A",{id:!0,class:!0,href:!0});var eet=s(x_);Kle=n(eet,"SPAN",{});var oet=s(Kle);T(P0.$$.fragment,oet),oet.forEach(t),eet.forEach(t),X7o=i(bNe),Zle=n(bNe,"SPAN",{});var ret=s(Zle);z7o=r(ret,"AutoModelForCausalLM"),ret.forEach(t),bNe.forEach(t),pIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(I0.$$.fragment,Gs),Q7o=i(Gs),Li=n(Gs,"P",{});var uK=s(Li);W7o=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CN=n(uK,"A",{href:!0});var tet=s(CN);H7o=r(tet,"from_pretrained()"),tet.forEach(t),U7o=r(uK," class method or the "),wN=n(uK,"A",{href:!0});var aet=s(wN);J7o=r(aet,"from_config()"),aet.forEach(t),Y7o=r(uK,` class
method.`),uK.forEach(t),K7o=i(Gs),q0=n(Gs,"P",{});var vNe=s(q0);Z7o=r(vNe,"This class cannot be instantiated directly using "),eie=n(vNe,"CODE",{});var net=s(eie);eMo=r(net,"__init__()"),net.forEach(t),oMo=r(vNe," (throws an error)."),vNe.forEach(t),rMo=i(Gs),tt=n(Gs,"DIV",{class:!0});var sA=s(tt);T(N0.$$.fragment,sA),tMo=i(sA),oie=n(sA,"P",{});var set=s(oie);aMo=r(set,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),set.forEach(t),nMo=i(sA),xi=n(sA,"P",{});var _K=s(xi);sMo=r(_K,`Note:
Loading a model from its configuration file does `),rie=n(_K,"STRONG",{});var iet=s(rie);lMo=r(iet,"not"),iet.forEach(t),iMo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),AN=n(_K,"A",{href:!0});var det=s(AN);dMo=r(det,"from_pretrained()"),det.forEach(t),cMo=r(_K," to load the model weights."),_K.forEach(t),fMo=i(sA),T($_.$$.fragment,sA),sA.forEach(t),mMo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(j0.$$.fragment,oa),gMo=i(oa),tie=n(oa,"P",{});var cet=s(tie);hMo=r(cet,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cet.forEach(t),pMo=i(oa),La=n(oa,"P",{});var lA=s(La);uMo=r(lA,"The model class to instantiate is selected based on the "),aie=n(lA,"CODE",{});var fet=s(aie);_Mo=r(fet,"model_type"),fet.forEach(t),bMo=r(lA,` property of the config object (either
passed as an argument or loaded from `),nie=n(lA,"CODE",{});var met=s(nie);vMo=r(met,"pretrained_model_name_or_path"),met.forEach(t),FMo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sie=n(lA,"CODE",{});var get=s(sie);TMo=r(get,"pretrained_model_name_or_path"),get.forEach(t),MMo=r(lA,":"),lA.forEach(t),EMo=i(oa),z=n(oa,"UL",{});var W=s(z);k_=n(W,"LI",{});var L0e=s(k_);lie=n(L0e,"STRONG",{});var het=s(lie);CMo=r(het,"bart"),het.forEach(t),wMo=r(L0e," \u2014 "),yN=n(L0e,"A",{href:!0});var pet=s(yN);AMo=r(pet,"BartForCausalLM"),pet.forEach(t),yMo=r(L0e," (BART model)"),L0e.forEach(t),LMo=i(W),S_=n(W,"LI",{});var x0e=s(S_);iie=n(x0e,"STRONG",{});var uet=s(iie);xMo=r(uet,"bert"),uet.forEach(t),$Mo=r(x0e," \u2014 "),LN=n(x0e,"A",{href:!0});var _et=s(LN);kMo=r(_et,"BertLMHeadModel"),_et.forEach(t),SMo=r(x0e," (BERT model)"),x0e.forEach(t),RMo=i(W),R_=n(W,"LI",{});var $0e=s(R_);die=n($0e,"STRONG",{});var bet=s(die);BMo=r(bet,"bert-generation"),bet.forEach(t),PMo=r($0e," \u2014 "),xN=n($0e,"A",{href:!0});var vet=s(xN);IMo=r(vet,"BertGenerationDecoder"),vet.forEach(t),qMo=r($0e," (Bert Generation model)"),$0e.forEach(t),NMo=i(W),B_=n(W,"LI",{});var k0e=s(B_);cie=n(k0e,"STRONG",{});var Fet=s(cie);jMo=r(Fet,"big_bird"),Fet.forEach(t),DMo=r(k0e," \u2014 "),$N=n(k0e,"A",{href:!0});var Tet=s($N);GMo=r(Tet,"BigBirdForCausalLM"),Tet.forEach(t),OMo=r(k0e," (BigBird model)"),k0e.forEach(t),VMo=i(W),P_=n(W,"LI",{});var S0e=s(P_);fie=n(S0e,"STRONG",{});var Met=s(fie);XMo=r(Met,"bigbird_pegasus"),Met.forEach(t),zMo=r(S0e," \u2014 "),kN=n(S0e,"A",{href:!0});var Eet=s(kN);QMo=r(Eet,"BigBirdPegasusForCausalLM"),Eet.forEach(t),WMo=r(S0e," (BigBirdPegasus model)"),S0e.forEach(t),HMo=i(W),I_=n(W,"LI",{});var R0e=s(I_);mie=n(R0e,"STRONG",{});var Cet=s(mie);UMo=r(Cet,"blenderbot"),Cet.forEach(t),JMo=r(R0e," \u2014 "),SN=n(R0e,"A",{href:!0});var wet=s(SN);YMo=r(wet,"BlenderbotForCausalLM"),wet.forEach(t),KMo=r(R0e," (Blenderbot model)"),R0e.forEach(t),ZMo=i(W),q_=n(W,"LI",{});var B0e=s(q_);gie=n(B0e,"STRONG",{});var Aet=s(gie);eEo=r(Aet,"blenderbot-small"),Aet.forEach(t),oEo=r(B0e," \u2014 "),RN=n(B0e,"A",{href:!0});var yet=s(RN);rEo=r(yet,"BlenderbotSmallForCausalLM"),yet.forEach(t),tEo=r(B0e," (BlenderbotSmall model)"),B0e.forEach(t),aEo=i(W),N_=n(W,"LI",{});var P0e=s(N_);hie=n(P0e,"STRONG",{});var Let=s(hie);nEo=r(Let,"camembert"),Let.forEach(t),sEo=r(P0e," \u2014 "),BN=n(P0e,"A",{href:!0});var xet=s(BN);lEo=r(xet,"CamembertForCausalLM"),xet.forEach(t),iEo=r(P0e," (CamemBERT model)"),P0e.forEach(t),dEo=i(W),j_=n(W,"LI",{});var I0e=s(j_);pie=n(I0e,"STRONG",{});var $et=s(pie);cEo=r($et,"ctrl"),$et.forEach(t),fEo=r(I0e," \u2014 "),PN=n(I0e,"A",{href:!0});var ket=s(PN);mEo=r(ket,"CTRLLMHeadModel"),ket.forEach(t),gEo=r(I0e," (CTRL model)"),I0e.forEach(t),hEo=i(W),D_=n(W,"LI",{});var q0e=s(D_);uie=n(q0e,"STRONG",{});var Set=s(uie);pEo=r(Set,"data2vec-text"),Set.forEach(t),uEo=r(q0e," \u2014 "),IN=n(q0e,"A",{href:!0});var Ret=s(IN);_Eo=r(Ret,"Data2VecTextForCausalLM"),Ret.forEach(t),bEo=r(q0e," (Data2VecText model)"),q0e.forEach(t),vEo=i(W),G_=n(W,"LI",{});var N0e=s(G_);_ie=n(N0e,"STRONG",{});var Bet=s(_ie);FEo=r(Bet,"electra"),Bet.forEach(t),TEo=r(N0e," \u2014 "),qN=n(N0e,"A",{href:!0});var Pet=s(qN);MEo=r(Pet,"ElectraForCausalLM"),Pet.forEach(t),EEo=r(N0e," (ELECTRA model)"),N0e.forEach(t),CEo=i(W),O_=n(W,"LI",{});var j0e=s(O_);bie=n(j0e,"STRONG",{});var Iet=s(bie);wEo=r(Iet,"gpt2"),Iet.forEach(t),AEo=r(j0e," \u2014 "),NN=n(j0e,"A",{href:!0});var qet=s(NN);yEo=r(qet,"GPT2LMHeadModel"),qet.forEach(t),LEo=r(j0e," (OpenAI GPT-2 model)"),j0e.forEach(t),xEo=i(W),V_=n(W,"LI",{});var D0e=s(V_);vie=n(D0e,"STRONG",{});var Net=s(vie);$Eo=r(Net,"gpt_neo"),Net.forEach(t),kEo=r(D0e," \u2014 "),jN=n(D0e,"A",{href:!0});var jet=s(jN);SEo=r(jet,"GPTNeoForCausalLM"),jet.forEach(t),REo=r(D0e," (GPT Neo model)"),D0e.forEach(t),BEo=i(W),X_=n(W,"LI",{});var G0e=s(X_);Fie=n(G0e,"STRONG",{});var Det=s(Fie);PEo=r(Det,"gptj"),Det.forEach(t),IEo=r(G0e," \u2014 "),DN=n(G0e,"A",{href:!0});var Get=s(DN);qEo=r(Get,"GPTJForCausalLM"),Get.forEach(t),NEo=r(G0e," (GPT-J model)"),G0e.forEach(t),jEo=i(W),z_=n(W,"LI",{});var O0e=s(z_);Tie=n(O0e,"STRONG",{});var Oet=s(Tie);DEo=r(Oet,"marian"),Oet.forEach(t),GEo=r(O0e," \u2014 "),GN=n(O0e,"A",{href:!0});var Vet=s(GN);OEo=r(Vet,"MarianForCausalLM"),Vet.forEach(t),VEo=r(O0e," (Marian model)"),O0e.forEach(t),XEo=i(W),Q_=n(W,"LI",{});var V0e=s(Q_);Mie=n(V0e,"STRONG",{});var Xet=s(Mie);zEo=r(Xet,"mbart"),Xet.forEach(t),QEo=r(V0e," \u2014 "),ON=n(V0e,"A",{href:!0});var zet=s(ON);WEo=r(zet,"MBartForCausalLM"),zet.forEach(t),HEo=r(V0e," (mBART model)"),V0e.forEach(t),UEo=i(W),W_=n(W,"LI",{});var X0e=s(W_);Eie=n(X0e,"STRONG",{});var Qet=s(Eie);JEo=r(Qet,"megatron-bert"),Qet.forEach(t),YEo=r(X0e," \u2014 "),VN=n(X0e,"A",{href:!0});var Wet=s(VN);KEo=r(Wet,"MegatronBertForCausalLM"),Wet.forEach(t),ZEo=r(X0e," (MegatronBert model)"),X0e.forEach(t),e5o=i(W),H_=n(W,"LI",{});var z0e=s(H_);Cie=n(z0e,"STRONG",{});var Het=s(Cie);o5o=r(Het,"openai-gpt"),Het.forEach(t),r5o=r(z0e," \u2014 "),XN=n(z0e,"A",{href:!0});var Uet=s(XN);t5o=r(Uet,"OpenAIGPTLMHeadModel"),Uet.forEach(t),a5o=r(z0e," (OpenAI GPT model)"),z0e.forEach(t),n5o=i(W),U_=n(W,"LI",{});var Q0e=s(U_);wie=n(Q0e,"STRONG",{});var Jet=s(wie);s5o=r(Jet,"opt"),Jet.forEach(t),l5o=r(Q0e," \u2014 "),zN=n(Q0e,"A",{href:!0});var Yet=s(zN);i5o=r(Yet,"OPTForCausalLM"),Yet.forEach(t),d5o=r(Q0e," (OPT model)"),Q0e.forEach(t),c5o=i(W),J_=n(W,"LI",{});var W0e=s(J_);Aie=n(W0e,"STRONG",{});var Ket=s(Aie);f5o=r(Ket,"pegasus"),Ket.forEach(t),m5o=r(W0e," \u2014 "),QN=n(W0e,"A",{href:!0});var Zet=s(QN);g5o=r(Zet,"PegasusForCausalLM"),Zet.forEach(t),h5o=r(W0e," (Pegasus model)"),W0e.forEach(t),p5o=i(W),Y_=n(W,"LI",{});var H0e=s(Y_);yie=n(H0e,"STRONG",{});var eot=s(yie);u5o=r(eot,"plbart"),eot.forEach(t),_5o=r(H0e," \u2014 "),WN=n(H0e,"A",{href:!0});var oot=s(WN);b5o=r(oot,"PLBartForCausalLM"),oot.forEach(t),v5o=r(H0e," (PLBart model)"),H0e.forEach(t),F5o=i(W),K_=n(W,"LI",{});var U0e=s(K_);Lie=n(U0e,"STRONG",{});var rot=s(Lie);T5o=r(rot,"prophetnet"),rot.forEach(t),M5o=r(U0e," \u2014 "),HN=n(U0e,"A",{href:!0});var tot=s(HN);E5o=r(tot,"ProphetNetForCausalLM"),tot.forEach(t),C5o=r(U0e," (ProphetNet model)"),U0e.forEach(t),w5o=i(W),Z_=n(W,"LI",{});var J0e=s(Z_);xie=n(J0e,"STRONG",{});var aot=s(xie);A5o=r(aot,"qdqbert"),aot.forEach(t),y5o=r(J0e," \u2014 "),UN=n(J0e,"A",{href:!0});var not=s(UN);L5o=r(not,"QDQBertLMHeadModel"),not.forEach(t),x5o=r(J0e," (QDQBert model)"),J0e.forEach(t),$5o=i(W),e1=n(W,"LI",{});var Y0e=s(e1);$ie=n(Y0e,"STRONG",{});var sot=s($ie);k5o=r(sot,"reformer"),sot.forEach(t),S5o=r(Y0e," \u2014 "),JN=n(Y0e,"A",{href:!0});var lot=s(JN);R5o=r(lot,"ReformerModelWithLMHead"),lot.forEach(t),B5o=r(Y0e," (Reformer model)"),Y0e.forEach(t),P5o=i(W),o1=n(W,"LI",{});var K0e=s(o1);kie=n(K0e,"STRONG",{});var iot=s(kie);I5o=r(iot,"rembert"),iot.forEach(t),q5o=r(K0e," \u2014 "),YN=n(K0e,"A",{href:!0});var dot=s(YN);N5o=r(dot,"RemBertForCausalLM"),dot.forEach(t),j5o=r(K0e," (RemBERT model)"),K0e.forEach(t),D5o=i(W),r1=n(W,"LI",{});var Z0e=s(r1);Sie=n(Z0e,"STRONG",{});var cot=s(Sie);G5o=r(cot,"roberta"),cot.forEach(t),O5o=r(Z0e," \u2014 "),KN=n(Z0e,"A",{href:!0});var fot=s(KN);V5o=r(fot,"RobertaForCausalLM"),fot.forEach(t),X5o=r(Z0e," (RoBERTa model)"),Z0e.forEach(t),z5o=i(W),t1=n(W,"LI",{});var eye=s(t1);Rie=n(eye,"STRONG",{});var mot=s(Rie);Q5o=r(mot,"roformer"),mot.forEach(t),W5o=r(eye," \u2014 "),ZN=n(eye,"A",{href:!0});var got=s(ZN);H5o=r(got,"RoFormerForCausalLM"),got.forEach(t),U5o=r(eye," (RoFormer model)"),eye.forEach(t),J5o=i(W),a1=n(W,"LI",{});var oye=s(a1);Bie=n(oye,"STRONG",{});var hot=s(Bie);Y5o=r(hot,"speech_to_text_2"),hot.forEach(t),K5o=r(oye," \u2014 "),ej=n(oye,"A",{href:!0});var pot=s(ej);Z5o=r(pot,"Speech2Text2ForCausalLM"),pot.forEach(t),eCo=r(oye," (Speech2Text2 model)"),oye.forEach(t),oCo=i(W),n1=n(W,"LI",{});var rye=s(n1);Pie=n(rye,"STRONG",{});var uot=s(Pie);rCo=r(uot,"transfo-xl"),uot.forEach(t),tCo=r(rye," \u2014 "),oj=n(rye,"A",{href:!0});var _ot=s(oj);aCo=r(_ot,"TransfoXLLMHeadModel"),_ot.forEach(t),nCo=r(rye," (Transformer-XL model)"),rye.forEach(t),sCo=i(W),s1=n(W,"LI",{});var tye=s(s1);Iie=n(tye,"STRONG",{});var bot=s(Iie);lCo=r(bot,"trocr"),bot.forEach(t),iCo=r(tye," \u2014 "),rj=n(tye,"A",{href:!0});var vot=s(rj);dCo=r(vot,"TrOCRForCausalLM"),vot.forEach(t),cCo=r(tye," (TrOCR model)"),tye.forEach(t),fCo=i(W),l1=n(W,"LI",{});var aye=s(l1);qie=n(aye,"STRONG",{});var Fot=s(qie);mCo=r(Fot,"xglm"),Fot.forEach(t),gCo=r(aye," \u2014 "),tj=n(aye,"A",{href:!0});var Tot=s(tj);hCo=r(Tot,"XGLMForCausalLM"),Tot.forEach(t),pCo=r(aye," (XGLM model)"),aye.forEach(t),uCo=i(W),i1=n(W,"LI",{});var nye=s(i1);Nie=n(nye,"STRONG",{});var Mot=s(Nie);_Co=r(Mot,"xlm"),Mot.forEach(t),bCo=r(nye," \u2014 "),aj=n(nye,"A",{href:!0});var Eot=s(aj);vCo=r(Eot,"XLMWithLMHeadModel"),Eot.forEach(t),FCo=r(nye," (XLM model)"),nye.forEach(t),TCo=i(W),d1=n(W,"LI",{});var sye=s(d1);jie=n(sye,"STRONG",{});var Cot=s(jie);MCo=r(Cot,"xlm-prophetnet"),Cot.forEach(t),ECo=r(sye," \u2014 "),nj=n(sye,"A",{href:!0});var wot=s(nj);CCo=r(wot,"XLMProphetNetForCausalLM"),wot.forEach(t),wCo=r(sye," (XLMProphetNet model)"),sye.forEach(t),ACo=i(W),c1=n(W,"LI",{});var lye=s(c1);Die=n(lye,"STRONG",{});var Aot=s(Die);yCo=r(Aot,"xlm-roberta"),Aot.forEach(t),LCo=r(lye," \u2014 "),sj=n(lye,"A",{href:!0});var yot=s(sj);xCo=r(yot,"XLMRobertaForCausalLM"),yot.forEach(t),$Co=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),kCo=i(W),f1=n(W,"LI",{});var iye=s(f1);Gie=n(iye,"STRONG",{});var Lot=s(Gie);SCo=r(Lot,"xlm-roberta-xl"),Lot.forEach(t),RCo=r(iye," \u2014 "),lj=n(iye,"A",{href:!0});var xot=s(lj);BCo=r(xot,"XLMRobertaXLForCausalLM"),xot.forEach(t),PCo=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),ICo=i(W),m1=n(W,"LI",{});var dye=s(m1);Oie=n(dye,"STRONG",{});var $ot=s(Oie);qCo=r($ot,"xlnet"),$ot.forEach(t),NCo=r(dye," \u2014 "),ij=n(dye,"A",{href:!0});var kot=s(ij);jCo=r(kot,"XLNetLMHeadModel"),kot.forEach(t),DCo=r(dye," (XLNet model)"),dye.forEach(t),W.forEach(t),GCo=i(oa),g1=n(oa,"P",{});var cye=s(g1);OCo=r(cye,"The model is set in evaluation mode by default using "),Vie=n(cye,"CODE",{});var Sot=s(Vie);VCo=r(Sot,"model.eval()"),Sot.forEach(t),XCo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=n(cye,"CODE",{});var Rot=s(Xie);zCo=r(Rot,"model.train()"),Rot.forEach(t),cye.forEach(t),QCo=i(oa),T(h1.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),uIe=i(f),$i=n(f,"H2",{class:!0});var FNe=s($i);p1=n(FNe,"A",{id:!0,class:!0,href:!0});var Bot=s(p1);zie=n(Bot,"SPAN",{});var Pot=s(zie);T(D0.$$.fragment,Pot),Pot.forEach(t),Bot.forEach(t),WCo=i(FNe),Qie=n(FNe,"SPAN",{});var Iot=s(Qie);HCo=r(Iot,"AutoModelForMaskedLM"),Iot.forEach(t),FNe.forEach(t),_Ie=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(G0.$$.fragment,Os),UCo=i(Os),ki=n(Os,"P",{});var bK=s(ki);JCo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dj=n(bK,"A",{href:!0});var qot=s(dj);YCo=r(qot,"from_pretrained()"),qot.forEach(t),KCo=r(bK," class method or the "),cj=n(bK,"A",{href:!0});var Not=s(cj);ZCo=r(Not,"from_config()"),Not.forEach(t),e3o=r(bK,` class
method.`),bK.forEach(t),o3o=i(Os),O0=n(Os,"P",{});var TNe=s(O0);r3o=r(TNe,"This class cannot be instantiated directly using "),Wie=n(TNe,"CODE",{});var jot=s(Wie);t3o=r(jot,"__init__()"),jot.forEach(t),a3o=r(TNe," (throws an error)."),TNe.forEach(t),n3o=i(Os),at=n(Os,"DIV",{class:!0});var iA=s(at);T(V0.$$.fragment,iA),s3o=i(iA),Hie=n(iA,"P",{});var Dot=s(Hie);l3o=r(Dot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Dot.forEach(t),i3o=i(iA),Si=n(iA,"P",{});var vK=s(Si);d3o=r(vK,`Note:
Loading a model from its configuration file does `),Uie=n(vK,"STRONG",{});var Got=s(Uie);c3o=r(Got,"not"),Got.forEach(t),f3o=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(vK,"A",{href:!0});var Oot=s(fj);m3o=r(Oot,"from_pretrained()"),Oot.forEach(t),g3o=r(vK," to load the model weights."),vK.forEach(t),h3o=i(iA),T(u1.$$.fragment,iA),iA.forEach(t),p3o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(X0.$$.fragment,ra),u3o=i(ra),Jie=n(ra,"P",{});var Vot=s(Jie);_3o=r(Vot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vot.forEach(t),b3o=i(ra),xa=n(ra,"P",{});var dA=s(xa);v3o=r(dA,"The model class to instantiate is selected based on the "),Yie=n(dA,"CODE",{});var Xot=s(Yie);F3o=r(Xot,"model_type"),Xot.forEach(t),T3o=r(dA,` property of the config object (either
passed as an argument or loaded from `),Kie=n(dA,"CODE",{});var zot=s(Kie);M3o=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),E3o=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zie=n(dA,"CODE",{});var Qot=s(Zie);C3o=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),w3o=r(dA,":"),dA.forEach(t),A3o=i(ra),Q=n(ra,"UL",{});var H=s(Q);_1=n(H,"LI",{});var fye=s(_1);ede=n(fye,"STRONG",{});var Wot=s(ede);y3o=r(Wot,"albert"),Wot.forEach(t),L3o=r(fye," \u2014 "),mj=n(fye,"A",{href:!0});var Hot=s(mj);x3o=r(Hot,"AlbertForMaskedLM"),Hot.forEach(t),$3o=r(fye," (ALBERT model)"),fye.forEach(t),k3o=i(H),b1=n(H,"LI",{});var mye=s(b1);ode=n(mye,"STRONG",{});var Uot=s(ode);S3o=r(Uot,"bart"),Uot.forEach(t),R3o=r(mye," \u2014 "),gj=n(mye,"A",{href:!0});var Jot=s(gj);B3o=r(Jot,"BartForConditionalGeneration"),Jot.forEach(t),P3o=r(mye," (BART model)"),mye.forEach(t),I3o=i(H),v1=n(H,"LI",{});var gye=s(v1);rde=n(gye,"STRONG",{});var Yot=s(rde);q3o=r(Yot,"bert"),Yot.forEach(t),N3o=r(gye," \u2014 "),hj=n(gye,"A",{href:!0});var Kot=s(hj);j3o=r(Kot,"BertForMaskedLM"),Kot.forEach(t),D3o=r(gye," (BERT model)"),gye.forEach(t),G3o=i(H),F1=n(H,"LI",{});var hye=s(F1);tde=n(hye,"STRONG",{});var Zot=s(tde);O3o=r(Zot,"big_bird"),Zot.forEach(t),V3o=r(hye," \u2014 "),pj=n(hye,"A",{href:!0});var ert=s(pj);X3o=r(ert,"BigBirdForMaskedLM"),ert.forEach(t),z3o=r(hye," (BigBird model)"),hye.forEach(t),Q3o=i(H),T1=n(H,"LI",{});var pye=s(T1);ade=n(pye,"STRONG",{});var ort=s(ade);W3o=r(ort,"camembert"),ort.forEach(t),H3o=r(pye," \u2014 "),uj=n(pye,"A",{href:!0});var rrt=s(uj);U3o=r(rrt,"CamembertForMaskedLM"),rrt.forEach(t),J3o=r(pye," (CamemBERT model)"),pye.forEach(t),Y3o=i(H),M1=n(H,"LI",{});var uye=s(M1);nde=n(uye,"STRONG",{});var trt=s(nde);K3o=r(trt,"convbert"),trt.forEach(t),Z3o=r(uye," \u2014 "),_j=n(uye,"A",{href:!0});var art=s(_j);ewo=r(art,"ConvBertForMaskedLM"),art.forEach(t),owo=r(uye," (ConvBERT model)"),uye.forEach(t),rwo=i(H),E1=n(H,"LI",{});var _ye=s(E1);sde=n(_ye,"STRONG",{});var nrt=s(sde);two=r(nrt,"data2vec-text"),nrt.forEach(t),awo=r(_ye," \u2014 "),bj=n(_ye,"A",{href:!0});var srt=s(bj);nwo=r(srt,"Data2VecTextForMaskedLM"),srt.forEach(t),swo=r(_ye," (Data2VecText model)"),_ye.forEach(t),lwo=i(H),C1=n(H,"LI",{});var bye=s(C1);lde=n(bye,"STRONG",{});var lrt=s(lde);iwo=r(lrt,"deberta"),lrt.forEach(t),dwo=r(bye," \u2014 "),vj=n(bye,"A",{href:!0});var irt=s(vj);cwo=r(irt,"DebertaForMaskedLM"),irt.forEach(t),fwo=r(bye," (DeBERTa model)"),bye.forEach(t),mwo=i(H),w1=n(H,"LI",{});var vye=s(w1);ide=n(vye,"STRONG",{});var drt=s(ide);gwo=r(drt,"deberta-v2"),drt.forEach(t),hwo=r(vye," \u2014 "),Fj=n(vye,"A",{href:!0});var crt=s(Fj);pwo=r(crt,"DebertaV2ForMaskedLM"),crt.forEach(t),uwo=r(vye," (DeBERTa-v2 model)"),vye.forEach(t),_wo=i(H),A1=n(H,"LI",{});var Fye=s(A1);dde=n(Fye,"STRONG",{});var frt=s(dde);bwo=r(frt,"distilbert"),frt.forEach(t),vwo=r(Fye," \u2014 "),Tj=n(Fye,"A",{href:!0});var mrt=s(Tj);Fwo=r(mrt,"DistilBertForMaskedLM"),mrt.forEach(t),Two=r(Fye," (DistilBERT model)"),Fye.forEach(t),Mwo=i(H),y1=n(H,"LI",{});var Tye=s(y1);cde=n(Tye,"STRONG",{});var grt=s(cde);Ewo=r(grt,"electra"),grt.forEach(t),Cwo=r(Tye," \u2014 "),Mj=n(Tye,"A",{href:!0});var hrt=s(Mj);wwo=r(hrt,"ElectraForMaskedLM"),hrt.forEach(t),Awo=r(Tye," (ELECTRA model)"),Tye.forEach(t),ywo=i(H),L1=n(H,"LI",{});var Mye=s(L1);fde=n(Mye,"STRONG",{});var prt=s(fde);Lwo=r(prt,"flaubert"),prt.forEach(t),xwo=r(Mye," \u2014 "),Ej=n(Mye,"A",{href:!0});var urt=s(Ej);$wo=r(urt,"FlaubertWithLMHeadModel"),urt.forEach(t),kwo=r(Mye," (FlauBERT model)"),Mye.forEach(t),Swo=i(H),x1=n(H,"LI",{});var Eye=s(x1);mde=n(Eye,"STRONG",{});var _rt=s(mde);Rwo=r(_rt,"fnet"),_rt.forEach(t),Bwo=r(Eye," \u2014 "),Cj=n(Eye,"A",{href:!0});var brt=s(Cj);Pwo=r(brt,"FNetForMaskedLM"),brt.forEach(t),Iwo=r(Eye," (FNet model)"),Eye.forEach(t),qwo=i(H),$1=n(H,"LI",{});var Cye=s($1);gde=n(Cye,"STRONG",{});var vrt=s(gde);Nwo=r(vrt,"funnel"),vrt.forEach(t),jwo=r(Cye," \u2014 "),wj=n(Cye,"A",{href:!0});var Frt=s(wj);Dwo=r(Frt,"FunnelForMaskedLM"),Frt.forEach(t),Gwo=r(Cye," (Funnel Transformer model)"),Cye.forEach(t),Owo=i(H),k1=n(H,"LI",{});var wye=s(k1);hde=n(wye,"STRONG",{});var Trt=s(hde);Vwo=r(Trt,"ibert"),Trt.forEach(t),Xwo=r(wye," \u2014 "),Aj=n(wye,"A",{href:!0});var Mrt=s(Aj);zwo=r(Mrt,"IBertForMaskedLM"),Mrt.forEach(t),Qwo=r(wye," (I-BERT model)"),wye.forEach(t),Wwo=i(H),S1=n(H,"LI",{});var Aye=s(S1);pde=n(Aye,"STRONG",{});var Ert=s(pde);Hwo=r(Ert,"layoutlm"),Ert.forEach(t),Uwo=r(Aye," \u2014 "),yj=n(Aye,"A",{href:!0});var Crt=s(yj);Jwo=r(Crt,"LayoutLMForMaskedLM"),Crt.forEach(t),Ywo=r(Aye," (LayoutLM model)"),Aye.forEach(t),Kwo=i(H),R1=n(H,"LI",{});var yye=s(R1);ude=n(yye,"STRONG",{});var wrt=s(ude);Zwo=r(wrt,"longformer"),wrt.forEach(t),eAo=r(yye," \u2014 "),Lj=n(yye,"A",{href:!0});var Art=s(Lj);oAo=r(Art,"LongformerForMaskedLM"),Art.forEach(t),rAo=r(yye," (Longformer model)"),yye.forEach(t),tAo=i(H),B1=n(H,"LI",{});var Lye=s(B1);_de=n(Lye,"STRONG",{});var yrt=s(_de);aAo=r(yrt,"mbart"),yrt.forEach(t),nAo=r(Lye," \u2014 "),xj=n(Lye,"A",{href:!0});var Lrt=s(xj);sAo=r(Lrt,"MBartForConditionalGeneration"),Lrt.forEach(t),lAo=r(Lye," (mBART model)"),Lye.forEach(t),iAo=i(H),P1=n(H,"LI",{});var xye=s(P1);bde=n(xye,"STRONG",{});var xrt=s(bde);dAo=r(xrt,"megatron-bert"),xrt.forEach(t),cAo=r(xye," \u2014 "),$j=n(xye,"A",{href:!0});var $rt=s($j);fAo=r($rt,"MegatronBertForMaskedLM"),$rt.forEach(t),mAo=r(xye," (MegatronBert model)"),xye.forEach(t),gAo=i(H),I1=n(H,"LI",{});var $ye=s(I1);vde=n($ye,"STRONG",{});var krt=s(vde);hAo=r(krt,"mobilebert"),krt.forEach(t),pAo=r($ye," \u2014 "),kj=n($ye,"A",{href:!0});var Srt=s(kj);uAo=r(Srt,"MobileBertForMaskedLM"),Srt.forEach(t),_Ao=r($ye," (MobileBERT model)"),$ye.forEach(t),bAo=i(H),q1=n(H,"LI",{});var kye=s(q1);Fde=n(kye,"STRONG",{});var Rrt=s(Fde);vAo=r(Rrt,"mpnet"),Rrt.forEach(t),FAo=r(kye," \u2014 "),Sj=n(kye,"A",{href:!0});var Brt=s(Sj);TAo=r(Brt,"MPNetForMaskedLM"),Brt.forEach(t),MAo=r(kye," (MPNet model)"),kye.forEach(t),EAo=i(H),N1=n(H,"LI",{});var Sye=s(N1);Tde=n(Sye,"STRONG",{});var Prt=s(Tde);CAo=r(Prt,"nystromformer"),Prt.forEach(t),wAo=r(Sye," \u2014 "),Rj=n(Sye,"A",{href:!0});var Irt=s(Rj);AAo=r(Irt,"NystromformerForMaskedLM"),Irt.forEach(t),yAo=r(Sye," (Nystromformer model)"),Sye.forEach(t),LAo=i(H),j1=n(H,"LI",{});var Rye=s(j1);Mde=n(Rye,"STRONG",{});var qrt=s(Mde);xAo=r(qrt,"perceiver"),qrt.forEach(t),$Ao=r(Rye," \u2014 "),Bj=n(Rye,"A",{href:!0});var Nrt=s(Bj);kAo=r(Nrt,"PerceiverForMaskedLM"),Nrt.forEach(t),SAo=r(Rye," (Perceiver model)"),Rye.forEach(t),RAo=i(H),D1=n(H,"LI",{});var Bye=s(D1);Ede=n(Bye,"STRONG",{});var jrt=s(Ede);BAo=r(jrt,"qdqbert"),jrt.forEach(t),PAo=r(Bye," \u2014 "),Pj=n(Bye,"A",{href:!0});var Drt=s(Pj);IAo=r(Drt,"QDQBertForMaskedLM"),Drt.forEach(t),qAo=r(Bye," (QDQBert model)"),Bye.forEach(t),NAo=i(H),G1=n(H,"LI",{});var Pye=s(G1);Cde=n(Pye,"STRONG",{});var Grt=s(Cde);jAo=r(Grt,"reformer"),Grt.forEach(t),DAo=r(Pye," \u2014 "),Ij=n(Pye,"A",{href:!0});var Ort=s(Ij);GAo=r(Ort,"ReformerForMaskedLM"),Ort.forEach(t),OAo=r(Pye," (Reformer model)"),Pye.forEach(t),VAo=i(H),O1=n(H,"LI",{});var Iye=s(O1);wde=n(Iye,"STRONG",{});var Vrt=s(wde);XAo=r(Vrt,"rembert"),Vrt.forEach(t),zAo=r(Iye," \u2014 "),qj=n(Iye,"A",{href:!0});var Xrt=s(qj);QAo=r(Xrt,"RemBertForMaskedLM"),Xrt.forEach(t),WAo=r(Iye," (RemBERT model)"),Iye.forEach(t),HAo=i(H),V1=n(H,"LI",{});var qye=s(V1);Ade=n(qye,"STRONG",{});var zrt=s(Ade);UAo=r(zrt,"roberta"),zrt.forEach(t),JAo=r(qye," \u2014 "),Nj=n(qye,"A",{href:!0});var Qrt=s(Nj);YAo=r(Qrt,"RobertaForMaskedLM"),Qrt.forEach(t),KAo=r(qye," (RoBERTa model)"),qye.forEach(t),ZAo=i(H),X1=n(H,"LI",{});var Nye=s(X1);yde=n(Nye,"STRONG",{});var Wrt=s(yde);e6o=r(Wrt,"roformer"),Wrt.forEach(t),o6o=r(Nye," \u2014 "),jj=n(Nye,"A",{href:!0});var Hrt=s(jj);r6o=r(Hrt,"RoFormerForMaskedLM"),Hrt.forEach(t),t6o=r(Nye," (RoFormer model)"),Nye.forEach(t),a6o=i(H),z1=n(H,"LI",{});var jye=s(z1);Lde=n(jye,"STRONG",{});var Urt=s(Lde);n6o=r(Urt,"squeezebert"),Urt.forEach(t),s6o=r(jye," \u2014 "),Dj=n(jye,"A",{href:!0});var Jrt=s(Dj);l6o=r(Jrt,"SqueezeBertForMaskedLM"),Jrt.forEach(t),i6o=r(jye," (SqueezeBERT model)"),jye.forEach(t),d6o=i(H),Q1=n(H,"LI",{});var Dye=s(Q1);xde=n(Dye,"STRONG",{});var Yrt=s(xde);c6o=r(Yrt,"tapas"),Yrt.forEach(t),f6o=r(Dye," \u2014 "),Gj=n(Dye,"A",{href:!0});var Krt=s(Gj);m6o=r(Krt,"TapasForMaskedLM"),Krt.forEach(t),g6o=r(Dye," (TAPAS model)"),Dye.forEach(t),h6o=i(H),W1=n(H,"LI",{});var Gye=s(W1);$de=n(Gye,"STRONG",{});var Zrt=s($de);p6o=r(Zrt,"wav2vec2"),Zrt.forEach(t),u6o=r(Gye," \u2014 "),kde=n(Gye,"CODE",{});var ett=s(kde);_6o=r(ett,"Wav2Vec2ForMaskedLM"),ett.forEach(t),b6o=r(Gye," (Wav2Vec2 model)"),Gye.forEach(t),v6o=i(H),H1=n(H,"LI",{});var Oye=s(H1);Sde=n(Oye,"STRONG",{});var ott=s(Sde);F6o=r(ott,"xlm"),ott.forEach(t),T6o=r(Oye," \u2014 "),Oj=n(Oye,"A",{href:!0});var rtt=s(Oj);M6o=r(rtt,"XLMWithLMHeadModel"),rtt.forEach(t),E6o=r(Oye," (XLM model)"),Oye.forEach(t),C6o=i(H),U1=n(H,"LI",{});var Vye=s(U1);Rde=n(Vye,"STRONG",{});var ttt=s(Rde);w6o=r(ttt,"xlm-roberta"),ttt.forEach(t),A6o=r(Vye," \u2014 "),Vj=n(Vye,"A",{href:!0});var att=s(Vj);y6o=r(att,"XLMRobertaForMaskedLM"),att.forEach(t),L6o=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),x6o=i(H),J1=n(H,"LI",{});var Xye=s(J1);Bde=n(Xye,"STRONG",{});var ntt=s(Bde);$6o=r(ntt,"xlm-roberta-xl"),ntt.forEach(t),k6o=r(Xye," \u2014 "),Xj=n(Xye,"A",{href:!0});var stt=s(Xj);S6o=r(stt,"XLMRobertaXLForMaskedLM"),stt.forEach(t),R6o=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),B6o=i(H),Y1=n(H,"LI",{});var zye=s(Y1);Pde=n(zye,"STRONG",{});var ltt=s(Pde);P6o=r(ltt,"yoso"),ltt.forEach(t),I6o=r(zye," \u2014 "),zj=n(zye,"A",{href:!0});var itt=s(zj);q6o=r(itt,"YosoForMaskedLM"),itt.forEach(t),N6o=r(zye," (YOSO model)"),zye.forEach(t),H.forEach(t),j6o=i(ra),K1=n(ra,"P",{});var Qye=s(K1);D6o=r(Qye,"The model is set in evaluation mode by default using "),Ide=n(Qye,"CODE",{});var dtt=s(Ide);G6o=r(dtt,"model.eval()"),dtt.forEach(t),O6o=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(Qye,"CODE",{});var ctt=s(qde);V6o=r(ctt,"model.train()"),ctt.forEach(t),Qye.forEach(t),X6o=i(ra),T(Z1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),bIe=i(f),Ri=n(f,"H2",{class:!0});var MNe=s(Ri);eb=n(MNe,"A",{id:!0,class:!0,href:!0});var ftt=s(eb);Nde=n(ftt,"SPAN",{});var mtt=s(Nde);T(z0.$$.fragment,mtt),mtt.forEach(t),ftt.forEach(t),z6o=i(MNe),jde=n(MNe,"SPAN",{});var gtt=s(jde);Q6o=r(gtt,"AutoModelForSeq2SeqLM"),gtt.forEach(t),MNe.forEach(t),vIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(Q0.$$.fragment,Vs),W6o=i(Vs),Bi=n(Vs,"P",{});var FK=s(Bi);H6o=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Qj=n(FK,"A",{href:!0});var htt=s(Qj);U6o=r(htt,"from_pretrained()"),htt.forEach(t),J6o=r(FK," class method or the "),Wj=n(FK,"A",{href:!0});var ptt=s(Wj);Y6o=r(ptt,"from_config()"),ptt.forEach(t),K6o=r(FK,` class
method.`),FK.forEach(t),Z6o=i(Vs),W0=n(Vs,"P",{});var ENe=s(W0);e0o=r(ENe,"This class cannot be instantiated directly using "),Dde=n(ENe,"CODE",{});var utt=s(Dde);o0o=r(utt,"__init__()"),utt.forEach(t),r0o=r(ENe," (throws an error)."),ENe.forEach(t),t0o=i(Vs),nt=n(Vs,"DIV",{class:!0});var cA=s(nt);T(H0.$$.fragment,cA),a0o=i(cA),Gde=n(cA,"P",{});var _tt=s(Gde);n0o=r(_tt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_tt.forEach(t),s0o=i(cA),Pi=n(cA,"P",{});var TK=s(Pi);l0o=r(TK,`Note:
Loading a model from its configuration file does `),Ode=n(TK,"STRONG",{});var btt=s(Ode);i0o=r(btt,"not"),btt.forEach(t),d0o=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hj=n(TK,"A",{href:!0});var vtt=s(Hj);c0o=r(vtt,"from_pretrained()"),vtt.forEach(t),f0o=r(TK," to load the model weights."),TK.forEach(t),m0o=i(cA),T(ob.$$.fragment,cA),cA.forEach(t),g0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(U0.$$.fragment,ta),h0o=i(ta),Vde=n(ta,"P",{});var Ftt=s(Vde);p0o=r(Ftt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ftt.forEach(t),u0o=i(ta),$a=n(ta,"P",{});var fA=s($a);_0o=r(fA,"The model class to instantiate is selected based on the "),Xde=n(fA,"CODE",{});var Ttt=s(Xde);b0o=r(Ttt,"model_type"),Ttt.forEach(t),v0o=r(fA,` property of the config object (either
passed as an argument or loaded from `),zde=n(fA,"CODE",{});var Mtt=s(zde);F0o=r(Mtt,"pretrained_model_name_or_path"),Mtt.forEach(t),T0o=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qde=n(fA,"CODE",{});var Ett=s(Qde);M0o=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),E0o=r(fA,":"),fA.forEach(t),C0o=i(ta),he=n(ta,"UL",{});var ue=s(he);rb=n(ue,"LI",{});var Wye=s(rb);Wde=n(Wye,"STRONG",{});var Ctt=s(Wde);w0o=r(Ctt,"bart"),Ctt.forEach(t),A0o=r(Wye," \u2014 "),Uj=n(Wye,"A",{href:!0});var wtt=s(Uj);y0o=r(wtt,"BartForConditionalGeneration"),wtt.forEach(t),L0o=r(Wye," (BART model)"),Wye.forEach(t),x0o=i(ue),tb=n(ue,"LI",{});var Hye=s(tb);Hde=n(Hye,"STRONG",{});var Att=s(Hde);$0o=r(Att,"bigbird_pegasus"),Att.forEach(t),k0o=r(Hye," \u2014 "),Jj=n(Hye,"A",{href:!0});var ytt=s(Jj);S0o=r(ytt,"BigBirdPegasusForConditionalGeneration"),ytt.forEach(t),R0o=r(Hye," (BigBirdPegasus model)"),Hye.forEach(t),B0o=i(ue),ab=n(ue,"LI",{});var Uye=s(ab);Ude=n(Uye,"STRONG",{});var Ltt=s(Ude);P0o=r(Ltt,"blenderbot"),Ltt.forEach(t),I0o=r(Uye," \u2014 "),Yj=n(Uye,"A",{href:!0});var xtt=s(Yj);q0o=r(xtt,"BlenderbotForConditionalGeneration"),xtt.forEach(t),N0o=r(Uye," (Blenderbot model)"),Uye.forEach(t),j0o=i(ue),nb=n(ue,"LI",{});var Jye=s(nb);Jde=n(Jye,"STRONG",{});var $tt=s(Jde);D0o=r($tt,"blenderbot-small"),$tt.forEach(t),G0o=r(Jye," \u2014 "),Kj=n(Jye,"A",{href:!0});var ktt=s(Kj);O0o=r(ktt,"BlenderbotSmallForConditionalGeneration"),ktt.forEach(t),V0o=r(Jye," (BlenderbotSmall model)"),Jye.forEach(t),X0o=i(ue),sb=n(ue,"LI",{});var Yye=s(sb);Yde=n(Yye,"STRONG",{});var Stt=s(Yde);z0o=r(Stt,"encoder-decoder"),Stt.forEach(t),Q0o=r(Yye," \u2014 "),Zj=n(Yye,"A",{href:!0});var Rtt=s(Zj);W0o=r(Rtt,"EncoderDecoderModel"),Rtt.forEach(t),H0o=r(Yye," (Encoder decoder model)"),Yye.forEach(t),U0o=i(ue),lb=n(ue,"LI",{});var Kye=s(lb);Kde=n(Kye,"STRONG",{});var Btt=s(Kde);J0o=r(Btt,"fsmt"),Btt.forEach(t),Y0o=r(Kye," \u2014 "),eD=n(Kye,"A",{href:!0});var Ptt=s(eD);K0o=r(Ptt,"FSMTForConditionalGeneration"),Ptt.forEach(t),Z0o=r(Kye," (FairSeq Machine-Translation model)"),Kye.forEach(t),eyo=i(ue),ib=n(ue,"LI",{});var Zye=s(ib);Zde=n(Zye,"STRONG",{});var Itt=s(Zde);oyo=r(Itt,"led"),Itt.forEach(t),ryo=r(Zye," \u2014 "),oD=n(Zye,"A",{href:!0});var qtt=s(oD);tyo=r(qtt,"LEDForConditionalGeneration"),qtt.forEach(t),ayo=r(Zye," (LED model)"),Zye.forEach(t),nyo=i(ue),db=n(ue,"LI",{});var eLe=s(db);ece=n(eLe,"STRONG",{});var Ntt=s(ece);syo=r(Ntt,"m2m_100"),Ntt.forEach(t),lyo=r(eLe," \u2014 "),rD=n(eLe,"A",{href:!0});var jtt=s(rD);iyo=r(jtt,"M2M100ForConditionalGeneration"),jtt.forEach(t),dyo=r(eLe," (M2M100 model)"),eLe.forEach(t),cyo=i(ue),cb=n(ue,"LI",{});var oLe=s(cb);oce=n(oLe,"STRONG",{});var Dtt=s(oce);fyo=r(Dtt,"marian"),Dtt.forEach(t),myo=r(oLe," \u2014 "),tD=n(oLe,"A",{href:!0});var Gtt=s(tD);gyo=r(Gtt,"MarianMTModel"),Gtt.forEach(t),hyo=r(oLe," (Marian model)"),oLe.forEach(t),pyo=i(ue),fb=n(ue,"LI",{});var rLe=s(fb);rce=n(rLe,"STRONG",{});var Ott=s(rce);uyo=r(Ott,"mbart"),Ott.forEach(t),_yo=r(rLe," \u2014 "),aD=n(rLe,"A",{href:!0});var Vtt=s(aD);byo=r(Vtt,"MBartForConditionalGeneration"),Vtt.forEach(t),vyo=r(rLe," (mBART model)"),rLe.forEach(t),Fyo=i(ue),mb=n(ue,"LI",{});var tLe=s(mb);tce=n(tLe,"STRONG",{});var Xtt=s(tce);Tyo=r(Xtt,"mt5"),Xtt.forEach(t),Myo=r(tLe," \u2014 "),nD=n(tLe,"A",{href:!0});var ztt=s(nD);Eyo=r(ztt,"MT5ForConditionalGeneration"),ztt.forEach(t),Cyo=r(tLe," (mT5 model)"),tLe.forEach(t),wyo=i(ue),gb=n(ue,"LI",{});var aLe=s(gb);ace=n(aLe,"STRONG",{});var Qtt=s(ace);Ayo=r(Qtt,"pegasus"),Qtt.forEach(t),yyo=r(aLe," \u2014 "),sD=n(aLe,"A",{href:!0});var Wtt=s(sD);Lyo=r(Wtt,"PegasusForConditionalGeneration"),Wtt.forEach(t),xyo=r(aLe," (Pegasus model)"),aLe.forEach(t),$yo=i(ue),hb=n(ue,"LI",{});var nLe=s(hb);nce=n(nLe,"STRONG",{});var Htt=s(nce);kyo=r(Htt,"plbart"),Htt.forEach(t),Syo=r(nLe," \u2014 "),lD=n(nLe,"A",{href:!0});var Utt=s(lD);Ryo=r(Utt,"PLBartForConditionalGeneration"),Utt.forEach(t),Byo=r(nLe," (PLBart model)"),nLe.forEach(t),Pyo=i(ue),pb=n(ue,"LI",{});var sLe=s(pb);sce=n(sLe,"STRONG",{});var Jtt=s(sce);Iyo=r(Jtt,"prophetnet"),Jtt.forEach(t),qyo=r(sLe," \u2014 "),iD=n(sLe,"A",{href:!0});var Ytt=s(iD);Nyo=r(Ytt,"ProphetNetForConditionalGeneration"),Ytt.forEach(t),jyo=r(sLe," (ProphetNet model)"),sLe.forEach(t),Dyo=i(ue),ub=n(ue,"LI",{});var lLe=s(ub);lce=n(lLe,"STRONG",{});var Ktt=s(lce);Gyo=r(Ktt,"t5"),Ktt.forEach(t),Oyo=r(lLe," \u2014 "),dD=n(lLe,"A",{href:!0});var Ztt=s(dD);Vyo=r(Ztt,"T5ForConditionalGeneration"),Ztt.forEach(t),Xyo=r(lLe," (T5 model)"),lLe.forEach(t),zyo=i(ue),_b=n(ue,"LI",{});var iLe=s(_b);ice=n(iLe,"STRONG",{});var eat=s(ice);Qyo=r(eat,"tapex"),eat.forEach(t),Wyo=r(iLe," \u2014 "),cD=n(iLe,"A",{href:!0});var oat=s(cD);Hyo=r(oat,"BartForConditionalGeneration"),oat.forEach(t),Uyo=r(iLe," (TAPEX model)"),iLe.forEach(t),Jyo=i(ue),bb=n(ue,"LI",{});var dLe=s(bb);dce=n(dLe,"STRONG",{});var rat=s(dce);Yyo=r(rat,"xlm-prophetnet"),rat.forEach(t),Kyo=r(dLe," \u2014 "),fD=n(dLe,"A",{href:!0});var tat=s(fD);Zyo=r(tat,"XLMProphetNetForConditionalGeneration"),tat.forEach(t),eLo=r(dLe," (XLMProphetNet model)"),dLe.forEach(t),ue.forEach(t),oLo=i(ta),vb=n(ta,"P",{});var cLe=s(vb);rLo=r(cLe,"The model is set in evaluation mode by default using "),cce=n(cLe,"CODE",{});var aat=s(cce);tLo=r(aat,"model.eval()"),aat.forEach(t),aLo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(cLe,"CODE",{});var nat=s(fce);nLo=r(nat,"model.train()"),nat.forEach(t),cLe.forEach(t),sLo=i(ta),T(Fb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),FIe=i(f),Ii=n(f,"H2",{class:!0});var CNe=s(Ii);Tb=n(CNe,"A",{id:!0,class:!0,href:!0});var sat=s(Tb);mce=n(sat,"SPAN",{});var lat=s(mce);T(J0.$$.fragment,lat),lat.forEach(t),sat.forEach(t),lLo=i(CNe),gce=n(CNe,"SPAN",{});var iat=s(gce);iLo=r(iat,"AutoModelForSequenceClassification"),iat.forEach(t),CNe.forEach(t),TIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(Y0.$$.fragment,Xs),dLo=i(Xs),qi=n(Xs,"P",{});var MK=s(qi);cLo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mD=n(MK,"A",{href:!0});var dat=s(mD);fLo=r(dat,"from_pretrained()"),dat.forEach(t),mLo=r(MK," class method or the "),gD=n(MK,"A",{href:!0});var cat=s(gD);gLo=r(cat,"from_config()"),cat.forEach(t),hLo=r(MK,` class
method.`),MK.forEach(t),pLo=i(Xs),K0=n(Xs,"P",{});var wNe=s(K0);uLo=r(wNe,"This class cannot be instantiated directly using "),hce=n(wNe,"CODE",{});var fat=s(hce);_Lo=r(fat,"__init__()"),fat.forEach(t),bLo=r(wNe," (throws an error)."),wNe.forEach(t),vLo=i(Xs),st=n(Xs,"DIV",{class:!0});var mA=s(st);T(Z0.$$.fragment,mA),FLo=i(mA),pce=n(mA,"P",{});var mat=s(pce);TLo=r(mat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mat.forEach(t),MLo=i(mA),Ni=n(mA,"P",{});var EK=s(Ni);ELo=r(EK,`Note:
Loading a model from its configuration file does `),uce=n(EK,"STRONG",{});var gat=s(uce);CLo=r(gat,"not"),gat.forEach(t),wLo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hD=n(EK,"A",{href:!0});var hat=s(hD);ALo=r(hat,"from_pretrained()"),hat.forEach(t),yLo=r(EK," to load the model weights."),EK.forEach(t),LLo=i(mA),T(Mb.$$.fragment,mA),mA.forEach(t),xLo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(ey.$$.fragment,aa),$Lo=i(aa),_ce=n(aa,"P",{});var pat=s(_ce);kLo=r(pat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pat.forEach(t),SLo=i(aa),ka=n(aa,"P",{});var gA=s(ka);RLo=r(gA,"The model class to instantiate is selected based on the "),bce=n(gA,"CODE",{});var uat=s(bce);BLo=r(uat,"model_type"),uat.forEach(t),PLo=r(gA,` property of the config object (either
passed as an argument or loaded from `),vce=n(gA,"CODE",{});var _at=s(vce);ILo=r(_at,"pretrained_model_name_or_path"),_at.forEach(t),qLo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(gA,"CODE",{});var bat=s(Fce);NLo=r(bat,"pretrained_model_name_or_path"),bat.forEach(t),jLo=r(gA,":"),gA.forEach(t),DLo=i(aa),q=n(aa,"UL",{});var N=s(q);Eb=n(N,"LI",{});var fLe=s(Eb);Tce=n(fLe,"STRONG",{});var vat=s(Tce);GLo=r(vat,"albert"),vat.forEach(t),OLo=r(fLe," \u2014 "),pD=n(fLe,"A",{href:!0});var Fat=s(pD);VLo=r(Fat,"AlbertForSequenceClassification"),Fat.forEach(t),XLo=r(fLe," (ALBERT model)"),fLe.forEach(t),zLo=i(N),Cb=n(N,"LI",{});var mLe=s(Cb);Mce=n(mLe,"STRONG",{});var Tat=s(Mce);QLo=r(Tat,"bart"),Tat.forEach(t),WLo=r(mLe," \u2014 "),uD=n(mLe,"A",{href:!0});var Mat=s(uD);HLo=r(Mat,"BartForSequenceClassification"),Mat.forEach(t),ULo=r(mLe," (BART model)"),mLe.forEach(t),JLo=i(N),wb=n(N,"LI",{});var gLe=s(wb);Ece=n(gLe,"STRONG",{});var Eat=s(Ece);YLo=r(Eat,"bert"),Eat.forEach(t),KLo=r(gLe," \u2014 "),_D=n(gLe,"A",{href:!0});var Cat=s(_D);ZLo=r(Cat,"BertForSequenceClassification"),Cat.forEach(t),e8o=r(gLe," (BERT model)"),gLe.forEach(t),o8o=i(N),Ab=n(N,"LI",{});var hLe=s(Ab);Cce=n(hLe,"STRONG",{});var wat=s(Cce);r8o=r(wat,"big_bird"),wat.forEach(t),t8o=r(hLe," \u2014 "),bD=n(hLe,"A",{href:!0});var Aat=s(bD);a8o=r(Aat,"BigBirdForSequenceClassification"),Aat.forEach(t),n8o=r(hLe," (BigBird model)"),hLe.forEach(t),s8o=i(N),yb=n(N,"LI",{});var pLe=s(yb);wce=n(pLe,"STRONG",{});var yat=s(wce);l8o=r(yat,"bigbird_pegasus"),yat.forEach(t),i8o=r(pLe," \u2014 "),vD=n(pLe,"A",{href:!0});var Lat=s(vD);d8o=r(Lat,"BigBirdPegasusForSequenceClassification"),Lat.forEach(t),c8o=r(pLe," (BigBirdPegasus model)"),pLe.forEach(t),f8o=i(N),Lb=n(N,"LI",{});var uLe=s(Lb);Ace=n(uLe,"STRONG",{});var xat=s(Ace);m8o=r(xat,"camembert"),xat.forEach(t),g8o=r(uLe," \u2014 "),FD=n(uLe,"A",{href:!0});var $at=s(FD);h8o=r($at,"CamembertForSequenceClassification"),$at.forEach(t),p8o=r(uLe," (CamemBERT model)"),uLe.forEach(t),u8o=i(N),xb=n(N,"LI",{});var _Le=s(xb);yce=n(_Le,"STRONG",{});var kat=s(yce);_8o=r(kat,"canine"),kat.forEach(t),b8o=r(_Le," \u2014 "),TD=n(_Le,"A",{href:!0});var Sat=s(TD);v8o=r(Sat,"CanineForSequenceClassification"),Sat.forEach(t),F8o=r(_Le," (Canine model)"),_Le.forEach(t),T8o=i(N),$b=n(N,"LI",{});var bLe=s($b);Lce=n(bLe,"STRONG",{});var Rat=s(Lce);M8o=r(Rat,"convbert"),Rat.forEach(t),E8o=r(bLe," \u2014 "),MD=n(bLe,"A",{href:!0});var Bat=s(MD);C8o=r(Bat,"ConvBertForSequenceClassification"),Bat.forEach(t),w8o=r(bLe," (ConvBERT model)"),bLe.forEach(t),A8o=i(N),kb=n(N,"LI",{});var vLe=s(kb);xce=n(vLe,"STRONG",{});var Pat=s(xce);y8o=r(Pat,"ctrl"),Pat.forEach(t),L8o=r(vLe," \u2014 "),ED=n(vLe,"A",{href:!0});var Iat=s(ED);x8o=r(Iat,"CTRLForSequenceClassification"),Iat.forEach(t),$8o=r(vLe," (CTRL model)"),vLe.forEach(t),k8o=i(N),Sb=n(N,"LI",{});var FLe=s(Sb);$ce=n(FLe,"STRONG",{});var qat=s($ce);S8o=r(qat,"data2vec-text"),qat.forEach(t),R8o=r(FLe," \u2014 "),CD=n(FLe,"A",{href:!0});var Nat=s(CD);B8o=r(Nat,"Data2VecTextForSequenceClassification"),Nat.forEach(t),P8o=r(FLe," (Data2VecText model)"),FLe.forEach(t),I8o=i(N),Rb=n(N,"LI",{});var TLe=s(Rb);kce=n(TLe,"STRONG",{});var jat=s(kce);q8o=r(jat,"deberta"),jat.forEach(t),N8o=r(TLe," \u2014 "),wD=n(TLe,"A",{href:!0});var Dat=s(wD);j8o=r(Dat,"DebertaForSequenceClassification"),Dat.forEach(t),D8o=r(TLe," (DeBERTa model)"),TLe.forEach(t),G8o=i(N),Bb=n(N,"LI",{});var MLe=s(Bb);Sce=n(MLe,"STRONG",{});var Gat=s(Sce);O8o=r(Gat,"deberta-v2"),Gat.forEach(t),V8o=r(MLe," \u2014 "),AD=n(MLe,"A",{href:!0});var Oat=s(AD);X8o=r(Oat,"DebertaV2ForSequenceClassification"),Oat.forEach(t),z8o=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),Q8o=i(N),Pb=n(N,"LI",{});var ELe=s(Pb);Rce=n(ELe,"STRONG",{});var Vat=s(Rce);W8o=r(Vat,"distilbert"),Vat.forEach(t),H8o=r(ELe," \u2014 "),yD=n(ELe,"A",{href:!0});var Xat=s(yD);U8o=r(Xat,"DistilBertForSequenceClassification"),Xat.forEach(t),J8o=r(ELe," (DistilBERT model)"),ELe.forEach(t),Y8o=i(N),Ib=n(N,"LI",{});var CLe=s(Ib);Bce=n(CLe,"STRONG",{});var zat=s(Bce);K8o=r(zat,"electra"),zat.forEach(t),Z8o=r(CLe," \u2014 "),LD=n(CLe,"A",{href:!0});var Qat=s(LD);exo=r(Qat,"ElectraForSequenceClassification"),Qat.forEach(t),oxo=r(CLe," (ELECTRA model)"),CLe.forEach(t),rxo=i(N),qb=n(N,"LI",{});var wLe=s(qb);Pce=n(wLe,"STRONG",{});var Wat=s(Pce);txo=r(Wat,"flaubert"),Wat.forEach(t),axo=r(wLe," \u2014 "),xD=n(wLe,"A",{href:!0});var Hat=s(xD);nxo=r(Hat,"FlaubertForSequenceClassification"),Hat.forEach(t),sxo=r(wLe," (FlauBERT model)"),wLe.forEach(t),lxo=i(N),Nb=n(N,"LI",{});var ALe=s(Nb);Ice=n(ALe,"STRONG",{});var Uat=s(Ice);ixo=r(Uat,"fnet"),Uat.forEach(t),dxo=r(ALe," \u2014 "),$D=n(ALe,"A",{href:!0});var Jat=s($D);cxo=r(Jat,"FNetForSequenceClassification"),Jat.forEach(t),fxo=r(ALe," (FNet model)"),ALe.forEach(t),mxo=i(N),jb=n(N,"LI",{});var yLe=s(jb);qce=n(yLe,"STRONG",{});var Yat=s(qce);gxo=r(Yat,"funnel"),Yat.forEach(t),hxo=r(yLe," \u2014 "),kD=n(yLe,"A",{href:!0});var Kat=s(kD);pxo=r(Kat,"FunnelForSequenceClassification"),Kat.forEach(t),uxo=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),_xo=i(N),Db=n(N,"LI",{});var LLe=s(Db);Nce=n(LLe,"STRONG",{});var Zat=s(Nce);bxo=r(Zat,"gpt2"),Zat.forEach(t),vxo=r(LLe," \u2014 "),SD=n(LLe,"A",{href:!0});var ent=s(SD);Fxo=r(ent,"GPT2ForSequenceClassification"),ent.forEach(t),Txo=r(LLe," (OpenAI GPT-2 model)"),LLe.forEach(t),Mxo=i(N),Gb=n(N,"LI",{});var xLe=s(Gb);jce=n(xLe,"STRONG",{});var ont=s(jce);Exo=r(ont,"gpt_neo"),ont.forEach(t),Cxo=r(xLe," \u2014 "),RD=n(xLe,"A",{href:!0});var rnt=s(RD);wxo=r(rnt,"GPTNeoForSequenceClassification"),rnt.forEach(t),Axo=r(xLe," (GPT Neo model)"),xLe.forEach(t),yxo=i(N),Ob=n(N,"LI",{});var $Le=s(Ob);Dce=n($Le,"STRONG",{});var tnt=s(Dce);Lxo=r(tnt,"gptj"),tnt.forEach(t),xxo=r($Le," \u2014 "),BD=n($Le,"A",{href:!0});var ant=s(BD);$xo=r(ant,"GPTJForSequenceClassification"),ant.forEach(t),kxo=r($Le," (GPT-J model)"),$Le.forEach(t),Sxo=i(N),Vb=n(N,"LI",{});var kLe=s(Vb);Gce=n(kLe,"STRONG",{});var nnt=s(Gce);Rxo=r(nnt,"ibert"),nnt.forEach(t),Bxo=r(kLe," \u2014 "),PD=n(kLe,"A",{href:!0});var snt=s(PD);Pxo=r(snt,"IBertForSequenceClassification"),snt.forEach(t),Ixo=r(kLe," (I-BERT model)"),kLe.forEach(t),qxo=i(N),Xb=n(N,"LI",{});var SLe=s(Xb);Oce=n(SLe,"STRONG",{});var lnt=s(Oce);Nxo=r(lnt,"layoutlm"),lnt.forEach(t),jxo=r(SLe," \u2014 "),ID=n(SLe,"A",{href:!0});var int=s(ID);Dxo=r(int,"LayoutLMForSequenceClassification"),int.forEach(t),Gxo=r(SLe," (LayoutLM model)"),SLe.forEach(t),Oxo=i(N),zb=n(N,"LI",{});var RLe=s(zb);Vce=n(RLe,"STRONG",{});var dnt=s(Vce);Vxo=r(dnt,"layoutlmv2"),dnt.forEach(t),Xxo=r(RLe," \u2014 "),qD=n(RLe,"A",{href:!0});var cnt=s(qD);zxo=r(cnt,"LayoutLMv2ForSequenceClassification"),cnt.forEach(t),Qxo=r(RLe," (LayoutLMv2 model)"),RLe.forEach(t),Wxo=i(N),Qb=n(N,"LI",{});var BLe=s(Qb);Xce=n(BLe,"STRONG",{});var fnt=s(Xce);Hxo=r(fnt,"led"),fnt.forEach(t),Uxo=r(BLe," \u2014 "),ND=n(BLe,"A",{href:!0});var mnt=s(ND);Jxo=r(mnt,"LEDForSequenceClassification"),mnt.forEach(t),Yxo=r(BLe," (LED model)"),BLe.forEach(t),Kxo=i(N),Wb=n(N,"LI",{});var PLe=s(Wb);zce=n(PLe,"STRONG",{});var gnt=s(zce);Zxo=r(gnt,"longformer"),gnt.forEach(t),e9o=r(PLe," \u2014 "),jD=n(PLe,"A",{href:!0});var hnt=s(jD);o9o=r(hnt,"LongformerForSequenceClassification"),hnt.forEach(t),r9o=r(PLe," (Longformer model)"),PLe.forEach(t),t9o=i(N),Hb=n(N,"LI",{});var ILe=s(Hb);Qce=n(ILe,"STRONG",{});var pnt=s(Qce);a9o=r(pnt,"mbart"),pnt.forEach(t),n9o=r(ILe," \u2014 "),DD=n(ILe,"A",{href:!0});var unt=s(DD);s9o=r(unt,"MBartForSequenceClassification"),unt.forEach(t),l9o=r(ILe," (mBART model)"),ILe.forEach(t),i9o=i(N),Ub=n(N,"LI",{});var qLe=s(Ub);Wce=n(qLe,"STRONG",{});var _nt=s(Wce);d9o=r(_nt,"megatron-bert"),_nt.forEach(t),c9o=r(qLe," \u2014 "),GD=n(qLe,"A",{href:!0});var bnt=s(GD);f9o=r(bnt,"MegatronBertForSequenceClassification"),bnt.forEach(t),m9o=r(qLe," (MegatronBert model)"),qLe.forEach(t),g9o=i(N),Jb=n(N,"LI",{});var NLe=s(Jb);Hce=n(NLe,"STRONG",{});var vnt=s(Hce);h9o=r(vnt,"mobilebert"),vnt.forEach(t),p9o=r(NLe," \u2014 "),OD=n(NLe,"A",{href:!0});var Fnt=s(OD);u9o=r(Fnt,"MobileBertForSequenceClassification"),Fnt.forEach(t),_9o=r(NLe," (MobileBERT model)"),NLe.forEach(t),b9o=i(N),Yb=n(N,"LI",{});var jLe=s(Yb);Uce=n(jLe,"STRONG",{});var Tnt=s(Uce);v9o=r(Tnt,"mpnet"),Tnt.forEach(t),F9o=r(jLe," \u2014 "),VD=n(jLe,"A",{href:!0});var Mnt=s(VD);T9o=r(Mnt,"MPNetForSequenceClassification"),Mnt.forEach(t),M9o=r(jLe," (MPNet model)"),jLe.forEach(t),E9o=i(N),Kb=n(N,"LI",{});var DLe=s(Kb);Jce=n(DLe,"STRONG",{});var Ent=s(Jce);C9o=r(Ent,"nystromformer"),Ent.forEach(t),w9o=r(DLe," \u2014 "),XD=n(DLe,"A",{href:!0});var Cnt=s(XD);A9o=r(Cnt,"NystromformerForSequenceClassification"),Cnt.forEach(t),y9o=r(DLe," (Nystromformer model)"),DLe.forEach(t),L9o=i(N),Zb=n(N,"LI",{});var GLe=s(Zb);Yce=n(GLe,"STRONG",{});var wnt=s(Yce);x9o=r(wnt,"openai-gpt"),wnt.forEach(t),$9o=r(GLe," \u2014 "),zD=n(GLe,"A",{href:!0});var Ant=s(zD);k9o=r(Ant,"OpenAIGPTForSequenceClassification"),Ant.forEach(t),S9o=r(GLe," (OpenAI GPT model)"),GLe.forEach(t),R9o=i(N),e4=n(N,"LI",{});var OLe=s(e4);Kce=n(OLe,"STRONG",{});var ynt=s(Kce);B9o=r(ynt,"perceiver"),ynt.forEach(t),P9o=r(OLe," \u2014 "),QD=n(OLe,"A",{href:!0});var Lnt=s(QD);I9o=r(Lnt,"PerceiverForSequenceClassification"),Lnt.forEach(t),q9o=r(OLe," (Perceiver model)"),OLe.forEach(t),N9o=i(N),o4=n(N,"LI",{});var VLe=s(o4);Zce=n(VLe,"STRONG",{});var xnt=s(Zce);j9o=r(xnt,"plbart"),xnt.forEach(t),D9o=r(VLe," \u2014 "),WD=n(VLe,"A",{href:!0});var $nt=s(WD);G9o=r($nt,"PLBartForSequenceClassification"),$nt.forEach(t),O9o=r(VLe," (PLBart model)"),VLe.forEach(t),V9o=i(N),r4=n(N,"LI",{});var XLe=s(r4);efe=n(XLe,"STRONG",{});var knt=s(efe);X9o=r(knt,"qdqbert"),knt.forEach(t),z9o=r(XLe," \u2014 "),HD=n(XLe,"A",{href:!0});var Snt=s(HD);Q9o=r(Snt,"QDQBertForSequenceClassification"),Snt.forEach(t),W9o=r(XLe," (QDQBert model)"),XLe.forEach(t),H9o=i(N),t4=n(N,"LI",{});var zLe=s(t4);ofe=n(zLe,"STRONG",{});var Rnt=s(ofe);U9o=r(Rnt,"reformer"),Rnt.forEach(t),J9o=r(zLe," \u2014 "),UD=n(zLe,"A",{href:!0});var Bnt=s(UD);Y9o=r(Bnt,"ReformerForSequenceClassification"),Bnt.forEach(t),K9o=r(zLe," (Reformer model)"),zLe.forEach(t),Z9o=i(N),a4=n(N,"LI",{});var QLe=s(a4);rfe=n(QLe,"STRONG",{});var Pnt=s(rfe);e$o=r(Pnt,"rembert"),Pnt.forEach(t),o$o=r(QLe," \u2014 "),JD=n(QLe,"A",{href:!0});var Int=s(JD);r$o=r(Int,"RemBertForSequenceClassification"),Int.forEach(t),t$o=r(QLe," (RemBERT model)"),QLe.forEach(t),a$o=i(N),n4=n(N,"LI",{});var WLe=s(n4);tfe=n(WLe,"STRONG",{});var qnt=s(tfe);n$o=r(qnt,"roberta"),qnt.forEach(t),s$o=r(WLe," \u2014 "),YD=n(WLe,"A",{href:!0});var Nnt=s(YD);l$o=r(Nnt,"RobertaForSequenceClassification"),Nnt.forEach(t),i$o=r(WLe," (RoBERTa model)"),WLe.forEach(t),d$o=i(N),s4=n(N,"LI",{});var HLe=s(s4);afe=n(HLe,"STRONG",{});var jnt=s(afe);c$o=r(jnt,"roformer"),jnt.forEach(t),f$o=r(HLe," \u2014 "),KD=n(HLe,"A",{href:!0});var Dnt=s(KD);m$o=r(Dnt,"RoFormerForSequenceClassification"),Dnt.forEach(t),g$o=r(HLe," (RoFormer model)"),HLe.forEach(t),h$o=i(N),l4=n(N,"LI",{});var ULe=s(l4);nfe=n(ULe,"STRONG",{});var Gnt=s(nfe);p$o=r(Gnt,"squeezebert"),Gnt.forEach(t),u$o=r(ULe," \u2014 "),ZD=n(ULe,"A",{href:!0});var Ont=s(ZD);_$o=r(Ont,"SqueezeBertForSequenceClassification"),Ont.forEach(t),b$o=r(ULe," (SqueezeBERT model)"),ULe.forEach(t),v$o=i(N),i4=n(N,"LI",{});var JLe=s(i4);sfe=n(JLe,"STRONG",{});var Vnt=s(sfe);F$o=r(Vnt,"tapas"),Vnt.forEach(t),T$o=r(JLe," \u2014 "),eG=n(JLe,"A",{href:!0});var Xnt=s(eG);M$o=r(Xnt,"TapasForSequenceClassification"),Xnt.forEach(t),E$o=r(JLe," (TAPAS model)"),JLe.forEach(t),C$o=i(N),d4=n(N,"LI",{});var YLe=s(d4);lfe=n(YLe,"STRONG",{});var znt=s(lfe);w$o=r(znt,"tapex"),znt.forEach(t),A$o=r(YLe," \u2014 "),oG=n(YLe,"A",{href:!0});var Qnt=s(oG);y$o=r(Qnt,"BartForSequenceClassification"),Qnt.forEach(t),L$o=r(YLe," (TAPEX model)"),YLe.forEach(t),x$o=i(N),c4=n(N,"LI",{});var KLe=s(c4);ife=n(KLe,"STRONG",{});var Wnt=s(ife);$$o=r(Wnt,"transfo-xl"),Wnt.forEach(t),k$o=r(KLe," \u2014 "),rG=n(KLe,"A",{href:!0});var Hnt=s(rG);S$o=r(Hnt,"TransfoXLForSequenceClassification"),Hnt.forEach(t),R$o=r(KLe," (Transformer-XL model)"),KLe.forEach(t),B$o=i(N),f4=n(N,"LI",{});var ZLe=s(f4);dfe=n(ZLe,"STRONG",{});var Unt=s(dfe);P$o=r(Unt,"xlm"),Unt.forEach(t),I$o=r(ZLe," \u2014 "),tG=n(ZLe,"A",{href:!0});var Jnt=s(tG);q$o=r(Jnt,"XLMForSequenceClassification"),Jnt.forEach(t),N$o=r(ZLe," (XLM model)"),ZLe.forEach(t),j$o=i(N),m4=n(N,"LI",{});var e8e=s(m4);cfe=n(e8e,"STRONG",{});var Ynt=s(cfe);D$o=r(Ynt,"xlm-roberta"),Ynt.forEach(t),G$o=r(e8e," \u2014 "),aG=n(e8e,"A",{href:!0});var Knt=s(aG);O$o=r(Knt,"XLMRobertaForSequenceClassification"),Knt.forEach(t),V$o=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),X$o=i(N),g4=n(N,"LI",{});var o8e=s(g4);ffe=n(o8e,"STRONG",{});var Znt=s(ffe);z$o=r(Znt,"xlm-roberta-xl"),Znt.forEach(t),Q$o=r(o8e," \u2014 "),nG=n(o8e,"A",{href:!0});var est=s(nG);W$o=r(est,"XLMRobertaXLForSequenceClassification"),est.forEach(t),H$o=r(o8e," (XLM-RoBERTa-XL model)"),o8e.forEach(t),U$o=i(N),h4=n(N,"LI",{});var r8e=s(h4);mfe=n(r8e,"STRONG",{});var ost=s(mfe);J$o=r(ost,"xlnet"),ost.forEach(t),Y$o=r(r8e," \u2014 "),sG=n(r8e,"A",{href:!0});var rst=s(sG);K$o=r(rst,"XLNetForSequenceClassification"),rst.forEach(t),Z$o=r(r8e," (XLNet model)"),r8e.forEach(t),eko=i(N),p4=n(N,"LI",{});var t8e=s(p4);gfe=n(t8e,"STRONG",{});var tst=s(gfe);oko=r(tst,"yoso"),tst.forEach(t),rko=r(t8e," \u2014 "),lG=n(t8e,"A",{href:!0});var ast=s(lG);tko=r(ast,"YosoForSequenceClassification"),ast.forEach(t),ako=r(t8e," (YOSO model)"),t8e.forEach(t),N.forEach(t),nko=i(aa),u4=n(aa,"P",{});var a8e=s(u4);sko=r(a8e,"The model is set in evaluation mode by default using "),hfe=n(a8e,"CODE",{});var nst=s(hfe);lko=r(nst,"model.eval()"),nst.forEach(t),iko=r(a8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pfe=n(a8e,"CODE",{});var sst=s(pfe);dko=r(sst,"model.train()"),sst.forEach(t),a8e.forEach(t),cko=i(aa),T(_4.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),MIe=i(f),ji=n(f,"H2",{class:!0});var ANe=s(ji);b4=n(ANe,"A",{id:!0,class:!0,href:!0});var lst=s(b4);ufe=n(lst,"SPAN",{});var ist=s(ufe);T(oy.$$.fragment,ist),ist.forEach(t),lst.forEach(t),fko=i(ANe),_fe=n(ANe,"SPAN",{});var dst=s(_fe);mko=r(dst,"AutoModelForMultipleChoice"),dst.forEach(t),ANe.forEach(t),EIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(ry.$$.fragment,zs),gko=i(zs),Di=n(zs,"P",{});var CK=s(Di);hko=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iG=n(CK,"A",{href:!0});var cst=s(iG);pko=r(cst,"from_pretrained()"),cst.forEach(t),uko=r(CK," class method or the "),dG=n(CK,"A",{href:!0});var fst=s(dG);_ko=r(fst,"from_config()"),fst.forEach(t),bko=r(CK,` class
method.`),CK.forEach(t),vko=i(zs),ty=n(zs,"P",{});var yNe=s(ty);Fko=r(yNe,"This class cannot be instantiated directly using "),bfe=n(yNe,"CODE",{});var mst=s(bfe);Tko=r(mst,"__init__()"),mst.forEach(t),Mko=r(yNe," (throws an error)."),yNe.forEach(t),Eko=i(zs),lt=n(zs,"DIV",{class:!0});var hA=s(lt);T(ay.$$.fragment,hA),Cko=i(hA),vfe=n(hA,"P",{});var gst=s(vfe);wko=r(gst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gst.forEach(t),Ako=i(hA),Gi=n(hA,"P",{});var wK=s(Gi);yko=r(wK,`Note:
Loading a model from its configuration file does `),Ffe=n(wK,"STRONG",{});var hst=s(Ffe);Lko=r(hst,"not"),hst.forEach(t),xko=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(wK,"A",{href:!0});var pst=s(cG);$ko=r(pst,"from_pretrained()"),pst.forEach(t),kko=r(wK," to load the model weights."),wK.forEach(t),Sko=i(hA),T(v4.$$.fragment,hA),hA.forEach(t),Rko=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(ny.$$.fragment,na),Bko=i(na),Tfe=n(na,"P",{});var ust=s(Tfe);Pko=r(ust,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ust.forEach(t),Iko=i(na),Sa=n(na,"P",{});var pA=s(Sa);qko=r(pA,"The model class to instantiate is selected based on the "),Mfe=n(pA,"CODE",{});var _st=s(Mfe);Nko=r(_st,"model_type"),_st.forEach(t),jko=r(pA,` property of the config object (either
passed as an argument or loaded from `),Efe=n(pA,"CODE",{});var bst=s(Efe);Dko=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),Gko=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cfe=n(pA,"CODE",{});var vst=s(Cfe);Oko=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),Vko=r(pA,":"),pA.forEach(t),Xko=i(na),Y=n(na,"UL",{});var K=s(Y);F4=n(K,"LI",{});var n8e=s(F4);wfe=n(n8e,"STRONG",{});var Fst=s(wfe);zko=r(Fst,"albert"),Fst.forEach(t),Qko=r(n8e," \u2014 "),fG=n(n8e,"A",{href:!0});var Tst=s(fG);Wko=r(Tst,"AlbertForMultipleChoice"),Tst.forEach(t),Hko=r(n8e," (ALBERT model)"),n8e.forEach(t),Uko=i(K),T4=n(K,"LI",{});var s8e=s(T4);Afe=n(s8e,"STRONG",{});var Mst=s(Afe);Jko=r(Mst,"bert"),Mst.forEach(t),Yko=r(s8e," \u2014 "),mG=n(s8e,"A",{href:!0});var Est=s(mG);Kko=r(Est,"BertForMultipleChoice"),Est.forEach(t),Zko=r(s8e," (BERT model)"),s8e.forEach(t),eSo=i(K),M4=n(K,"LI",{});var l8e=s(M4);yfe=n(l8e,"STRONG",{});var Cst=s(yfe);oSo=r(Cst,"big_bird"),Cst.forEach(t),rSo=r(l8e," \u2014 "),gG=n(l8e,"A",{href:!0});var wst=s(gG);tSo=r(wst,"BigBirdForMultipleChoice"),wst.forEach(t),aSo=r(l8e," (BigBird model)"),l8e.forEach(t),nSo=i(K),E4=n(K,"LI",{});var i8e=s(E4);Lfe=n(i8e,"STRONG",{});var Ast=s(Lfe);sSo=r(Ast,"camembert"),Ast.forEach(t),lSo=r(i8e," \u2014 "),hG=n(i8e,"A",{href:!0});var yst=s(hG);iSo=r(yst,"CamembertForMultipleChoice"),yst.forEach(t),dSo=r(i8e," (CamemBERT model)"),i8e.forEach(t),cSo=i(K),C4=n(K,"LI",{});var d8e=s(C4);xfe=n(d8e,"STRONG",{});var Lst=s(xfe);fSo=r(Lst,"canine"),Lst.forEach(t),mSo=r(d8e," \u2014 "),pG=n(d8e,"A",{href:!0});var xst=s(pG);gSo=r(xst,"CanineForMultipleChoice"),xst.forEach(t),hSo=r(d8e," (Canine model)"),d8e.forEach(t),pSo=i(K),w4=n(K,"LI",{});var c8e=s(w4);$fe=n(c8e,"STRONG",{});var $st=s($fe);uSo=r($st,"convbert"),$st.forEach(t),_So=r(c8e," \u2014 "),uG=n(c8e,"A",{href:!0});var kst=s(uG);bSo=r(kst,"ConvBertForMultipleChoice"),kst.forEach(t),vSo=r(c8e," (ConvBERT model)"),c8e.forEach(t),FSo=i(K),A4=n(K,"LI",{});var f8e=s(A4);kfe=n(f8e,"STRONG",{});var Sst=s(kfe);TSo=r(Sst,"data2vec-text"),Sst.forEach(t),MSo=r(f8e," \u2014 "),_G=n(f8e,"A",{href:!0});var Rst=s(_G);ESo=r(Rst,"Data2VecTextForMultipleChoice"),Rst.forEach(t),CSo=r(f8e," (Data2VecText model)"),f8e.forEach(t),wSo=i(K),y4=n(K,"LI",{});var m8e=s(y4);Sfe=n(m8e,"STRONG",{});var Bst=s(Sfe);ASo=r(Bst,"deberta-v2"),Bst.forEach(t),ySo=r(m8e," \u2014 "),bG=n(m8e,"A",{href:!0});var Pst=s(bG);LSo=r(Pst,"DebertaV2ForMultipleChoice"),Pst.forEach(t),xSo=r(m8e," (DeBERTa-v2 model)"),m8e.forEach(t),$So=i(K),L4=n(K,"LI",{});var g8e=s(L4);Rfe=n(g8e,"STRONG",{});var Ist=s(Rfe);kSo=r(Ist,"distilbert"),Ist.forEach(t),SSo=r(g8e," \u2014 "),vG=n(g8e,"A",{href:!0});var qst=s(vG);RSo=r(qst,"DistilBertForMultipleChoice"),qst.forEach(t),BSo=r(g8e," (DistilBERT model)"),g8e.forEach(t),PSo=i(K),x4=n(K,"LI",{});var h8e=s(x4);Bfe=n(h8e,"STRONG",{});var Nst=s(Bfe);ISo=r(Nst,"electra"),Nst.forEach(t),qSo=r(h8e," \u2014 "),FG=n(h8e,"A",{href:!0});var jst=s(FG);NSo=r(jst,"ElectraForMultipleChoice"),jst.forEach(t),jSo=r(h8e," (ELECTRA model)"),h8e.forEach(t),DSo=i(K),$4=n(K,"LI",{});var p8e=s($4);Pfe=n(p8e,"STRONG",{});var Dst=s(Pfe);GSo=r(Dst,"flaubert"),Dst.forEach(t),OSo=r(p8e," \u2014 "),TG=n(p8e,"A",{href:!0});var Gst=s(TG);VSo=r(Gst,"FlaubertForMultipleChoice"),Gst.forEach(t),XSo=r(p8e," (FlauBERT model)"),p8e.forEach(t),zSo=i(K),k4=n(K,"LI",{});var u8e=s(k4);Ife=n(u8e,"STRONG",{});var Ost=s(Ife);QSo=r(Ost,"fnet"),Ost.forEach(t),WSo=r(u8e," \u2014 "),MG=n(u8e,"A",{href:!0});var Vst=s(MG);HSo=r(Vst,"FNetForMultipleChoice"),Vst.forEach(t),USo=r(u8e," (FNet model)"),u8e.forEach(t),JSo=i(K),S4=n(K,"LI",{});var _8e=s(S4);qfe=n(_8e,"STRONG",{});var Xst=s(qfe);YSo=r(Xst,"funnel"),Xst.forEach(t),KSo=r(_8e," \u2014 "),EG=n(_8e,"A",{href:!0});var zst=s(EG);ZSo=r(zst,"FunnelForMultipleChoice"),zst.forEach(t),eRo=r(_8e," (Funnel Transformer model)"),_8e.forEach(t),oRo=i(K),R4=n(K,"LI",{});var b8e=s(R4);Nfe=n(b8e,"STRONG",{});var Qst=s(Nfe);rRo=r(Qst,"ibert"),Qst.forEach(t),tRo=r(b8e," \u2014 "),CG=n(b8e,"A",{href:!0});var Wst=s(CG);aRo=r(Wst,"IBertForMultipleChoice"),Wst.forEach(t),nRo=r(b8e," (I-BERT model)"),b8e.forEach(t),sRo=i(K),B4=n(K,"LI",{});var v8e=s(B4);jfe=n(v8e,"STRONG",{});var Hst=s(jfe);lRo=r(Hst,"longformer"),Hst.forEach(t),iRo=r(v8e," \u2014 "),wG=n(v8e,"A",{href:!0});var Ust=s(wG);dRo=r(Ust,"LongformerForMultipleChoice"),Ust.forEach(t),cRo=r(v8e," (Longformer model)"),v8e.forEach(t),fRo=i(K),P4=n(K,"LI",{});var F8e=s(P4);Dfe=n(F8e,"STRONG",{});var Jst=s(Dfe);mRo=r(Jst,"megatron-bert"),Jst.forEach(t),gRo=r(F8e," \u2014 "),AG=n(F8e,"A",{href:!0});var Yst=s(AG);hRo=r(Yst,"MegatronBertForMultipleChoice"),Yst.forEach(t),pRo=r(F8e," (MegatronBert model)"),F8e.forEach(t),uRo=i(K),I4=n(K,"LI",{});var T8e=s(I4);Gfe=n(T8e,"STRONG",{});var Kst=s(Gfe);_Ro=r(Kst,"mobilebert"),Kst.forEach(t),bRo=r(T8e," \u2014 "),yG=n(T8e,"A",{href:!0});var Zst=s(yG);vRo=r(Zst,"MobileBertForMultipleChoice"),Zst.forEach(t),FRo=r(T8e," (MobileBERT model)"),T8e.forEach(t),TRo=i(K),q4=n(K,"LI",{});var M8e=s(q4);Ofe=n(M8e,"STRONG",{});var elt=s(Ofe);MRo=r(elt,"mpnet"),elt.forEach(t),ERo=r(M8e," \u2014 "),LG=n(M8e,"A",{href:!0});var olt=s(LG);CRo=r(olt,"MPNetForMultipleChoice"),olt.forEach(t),wRo=r(M8e," (MPNet model)"),M8e.forEach(t),ARo=i(K),N4=n(K,"LI",{});var E8e=s(N4);Vfe=n(E8e,"STRONG",{});var rlt=s(Vfe);yRo=r(rlt,"nystromformer"),rlt.forEach(t),LRo=r(E8e," \u2014 "),xG=n(E8e,"A",{href:!0});var tlt=s(xG);xRo=r(tlt,"NystromformerForMultipleChoice"),tlt.forEach(t),$Ro=r(E8e," (Nystromformer model)"),E8e.forEach(t),kRo=i(K),j4=n(K,"LI",{});var C8e=s(j4);Xfe=n(C8e,"STRONG",{});var alt=s(Xfe);SRo=r(alt,"qdqbert"),alt.forEach(t),RRo=r(C8e," \u2014 "),$G=n(C8e,"A",{href:!0});var nlt=s($G);BRo=r(nlt,"QDQBertForMultipleChoice"),nlt.forEach(t),PRo=r(C8e," (QDQBert model)"),C8e.forEach(t),IRo=i(K),D4=n(K,"LI",{});var w8e=s(D4);zfe=n(w8e,"STRONG",{});var slt=s(zfe);qRo=r(slt,"rembert"),slt.forEach(t),NRo=r(w8e," \u2014 "),kG=n(w8e,"A",{href:!0});var llt=s(kG);jRo=r(llt,"RemBertForMultipleChoice"),llt.forEach(t),DRo=r(w8e," (RemBERT model)"),w8e.forEach(t),GRo=i(K),G4=n(K,"LI",{});var A8e=s(G4);Qfe=n(A8e,"STRONG",{});var ilt=s(Qfe);ORo=r(ilt,"roberta"),ilt.forEach(t),VRo=r(A8e," \u2014 "),SG=n(A8e,"A",{href:!0});var dlt=s(SG);XRo=r(dlt,"RobertaForMultipleChoice"),dlt.forEach(t),zRo=r(A8e," (RoBERTa model)"),A8e.forEach(t),QRo=i(K),O4=n(K,"LI",{});var y8e=s(O4);Wfe=n(y8e,"STRONG",{});var clt=s(Wfe);WRo=r(clt,"roformer"),clt.forEach(t),HRo=r(y8e," \u2014 "),RG=n(y8e,"A",{href:!0});var flt=s(RG);URo=r(flt,"RoFormerForMultipleChoice"),flt.forEach(t),JRo=r(y8e," (RoFormer model)"),y8e.forEach(t),YRo=i(K),V4=n(K,"LI",{});var L8e=s(V4);Hfe=n(L8e,"STRONG",{});var mlt=s(Hfe);KRo=r(mlt,"squeezebert"),mlt.forEach(t),ZRo=r(L8e," \u2014 "),BG=n(L8e,"A",{href:!0});var glt=s(BG);eBo=r(glt,"SqueezeBertForMultipleChoice"),glt.forEach(t),oBo=r(L8e," (SqueezeBERT model)"),L8e.forEach(t),rBo=i(K),X4=n(K,"LI",{});var x8e=s(X4);Ufe=n(x8e,"STRONG",{});var hlt=s(Ufe);tBo=r(hlt,"xlm"),hlt.forEach(t),aBo=r(x8e," \u2014 "),PG=n(x8e,"A",{href:!0});var plt=s(PG);nBo=r(plt,"XLMForMultipleChoice"),plt.forEach(t),sBo=r(x8e," (XLM model)"),x8e.forEach(t),lBo=i(K),z4=n(K,"LI",{});var $8e=s(z4);Jfe=n($8e,"STRONG",{});var ult=s(Jfe);iBo=r(ult,"xlm-roberta"),ult.forEach(t),dBo=r($8e," \u2014 "),IG=n($8e,"A",{href:!0});var _lt=s(IG);cBo=r(_lt,"XLMRobertaForMultipleChoice"),_lt.forEach(t),fBo=r($8e," (XLM-RoBERTa model)"),$8e.forEach(t),mBo=i(K),Q4=n(K,"LI",{});var k8e=s(Q4);Yfe=n(k8e,"STRONG",{});var blt=s(Yfe);gBo=r(blt,"xlm-roberta-xl"),blt.forEach(t),hBo=r(k8e," \u2014 "),qG=n(k8e,"A",{href:!0});var vlt=s(qG);pBo=r(vlt,"XLMRobertaXLForMultipleChoice"),vlt.forEach(t),uBo=r(k8e," (XLM-RoBERTa-XL model)"),k8e.forEach(t),_Bo=i(K),W4=n(K,"LI",{});var S8e=s(W4);Kfe=n(S8e,"STRONG",{});var Flt=s(Kfe);bBo=r(Flt,"xlnet"),Flt.forEach(t),vBo=r(S8e," \u2014 "),NG=n(S8e,"A",{href:!0});var Tlt=s(NG);FBo=r(Tlt,"XLNetForMultipleChoice"),Tlt.forEach(t),TBo=r(S8e," (XLNet model)"),S8e.forEach(t),MBo=i(K),H4=n(K,"LI",{});var R8e=s(H4);Zfe=n(R8e,"STRONG",{});var Mlt=s(Zfe);EBo=r(Mlt,"yoso"),Mlt.forEach(t),CBo=r(R8e," \u2014 "),jG=n(R8e,"A",{href:!0});var Elt=s(jG);wBo=r(Elt,"YosoForMultipleChoice"),Elt.forEach(t),ABo=r(R8e," (YOSO model)"),R8e.forEach(t),K.forEach(t),yBo=i(na),U4=n(na,"P",{});var B8e=s(U4);LBo=r(B8e,"The model is set in evaluation mode by default using "),eme=n(B8e,"CODE",{});var Clt=s(eme);xBo=r(Clt,"model.eval()"),Clt.forEach(t),$Bo=r(B8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(B8e,"CODE",{});var wlt=s(ome);kBo=r(wlt,"model.train()"),wlt.forEach(t),B8e.forEach(t),SBo=i(na),T(J4.$$.fragment,na),na.forEach(t),zs.forEach(t),CIe=i(f),Oi=n(f,"H2",{class:!0});var LNe=s(Oi);Y4=n(LNe,"A",{id:!0,class:!0,href:!0});var Alt=s(Y4);rme=n(Alt,"SPAN",{});var ylt=s(rme);T(sy.$$.fragment,ylt),ylt.forEach(t),Alt.forEach(t),RBo=i(LNe),tme=n(LNe,"SPAN",{});var Llt=s(tme);BBo=r(Llt,"AutoModelForNextSentencePrediction"),Llt.forEach(t),LNe.forEach(t),wIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(ly.$$.fragment,Qs),PBo=i(Qs),Vi=n(Qs,"P",{});var AK=s(Vi);IBo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DG=n(AK,"A",{href:!0});var xlt=s(DG);qBo=r(xlt,"from_pretrained()"),xlt.forEach(t),NBo=r(AK," class method or the "),GG=n(AK,"A",{href:!0});var $lt=s(GG);jBo=r($lt,"from_config()"),$lt.forEach(t),DBo=r(AK,` class
method.`),AK.forEach(t),GBo=i(Qs),iy=n(Qs,"P",{});var xNe=s(iy);OBo=r(xNe,"This class cannot be instantiated directly using "),ame=n(xNe,"CODE",{});var klt=s(ame);VBo=r(klt,"__init__()"),klt.forEach(t),XBo=r(xNe," (throws an error)."),xNe.forEach(t),zBo=i(Qs),it=n(Qs,"DIV",{class:!0});var uA=s(it);T(dy.$$.fragment,uA),QBo=i(uA),nme=n(uA,"P",{});var Slt=s(nme);WBo=r(Slt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Slt.forEach(t),HBo=i(uA),Xi=n(uA,"P",{});var yK=s(Xi);UBo=r(yK,`Note:
Loading a model from its configuration file does `),sme=n(yK,"STRONG",{});var Rlt=s(sme);JBo=r(Rlt,"not"),Rlt.forEach(t),YBo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(yK,"A",{href:!0});var Blt=s(OG);KBo=r(Blt,"from_pretrained()"),Blt.forEach(t),ZBo=r(yK," to load the model weights."),yK.forEach(t),ePo=i(uA),T(K4.$$.fragment,uA),uA.forEach(t),oPo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(cy.$$.fragment,sa),rPo=i(sa),lme=n(sa,"P",{});var Plt=s(lme);tPo=r(Plt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Plt.forEach(t),aPo=i(sa),Ra=n(sa,"P",{});var _A=s(Ra);nPo=r(_A,"The model class to instantiate is selected based on the "),ime=n(_A,"CODE",{});var Ilt=s(ime);sPo=r(Ilt,"model_type"),Ilt.forEach(t),lPo=r(_A,` property of the config object (either
passed as an argument or loaded from `),dme=n(_A,"CODE",{});var qlt=s(dme);iPo=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),dPo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(_A,"CODE",{});var Nlt=s(cme);cPo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),fPo=r(_A,":"),_A.forEach(t),mPo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Z4=n(Ws,"LI",{});var P8e=s(Z4);fme=n(P8e,"STRONG",{});var jlt=s(fme);gPo=r(jlt,"bert"),jlt.forEach(t),hPo=r(P8e," \u2014 "),VG=n(P8e,"A",{href:!0});var Dlt=s(VG);pPo=r(Dlt,"BertForNextSentencePrediction"),Dlt.forEach(t),uPo=r(P8e," (BERT model)"),P8e.forEach(t),_Po=i(Ws),e2=n(Ws,"LI",{});var I8e=s(e2);mme=n(I8e,"STRONG",{});var Glt=s(mme);bPo=r(Glt,"fnet"),Glt.forEach(t),vPo=r(I8e," \u2014 "),XG=n(I8e,"A",{href:!0});var Olt=s(XG);FPo=r(Olt,"FNetForNextSentencePrediction"),Olt.forEach(t),TPo=r(I8e," (FNet model)"),I8e.forEach(t),MPo=i(Ws),o2=n(Ws,"LI",{});var q8e=s(o2);gme=n(q8e,"STRONG",{});var Vlt=s(gme);EPo=r(Vlt,"megatron-bert"),Vlt.forEach(t),CPo=r(q8e," \u2014 "),zG=n(q8e,"A",{href:!0});var Xlt=s(zG);wPo=r(Xlt,"MegatronBertForNextSentencePrediction"),Xlt.forEach(t),APo=r(q8e," (MegatronBert model)"),q8e.forEach(t),yPo=i(Ws),r2=n(Ws,"LI",{});var N8e=s(r2);hme=n(N8e,"STRONG",{});var zlt=s(hme);LPo=r(zlt,"mobilebert"),zlt.forEach(t),xPo=r(N8e," \u2014 "),QG=n(N8e,"A",{href:!0});var Qlt=s(QG);$Po=r(Qlt,"MobileBertForNextSentencePrediction"),Qlt.forEach(t),kPo=r(N8e," (MobileBERT model)"),N8e.forEach(t),SPo=i(Ws),t2=n(Ws,"LI",{});var j8e=s(t2);pme=n(j8e,"STRONG",{});var Wlt=s(pme);RPo=r(Wlt,"qdqbert"),Wlt.forEach(t),BPo=r(j8e," \u2014 "),WG=n(j8e,"A",{href:!0});var Hlt=s(WG);PPo=r(Hlt,"QDQBertForNextSentencePrediction"),Hlt.forEach(t),IPo=r(j8e," (QDQBert model)"),j8e.forEach(t),Ws.forEach(t),qPo=i(sa),a2=n(sa,"P",{});var D8e=s(a2);NPo=r(D8e,"The model is set in evaluation mode by default using "),ume=n(D8e,"CODE",{});var Ult=s(ume);jPo=r(Ult,"model.eval()"),Ult.forEach(t),DPo=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(D8e,"CODE",{});var Jlt=s(_me);GPo=r(Jlt,"model.train()"),Jlt.forEach(t),D8e.forEach(t),OPo=i(sa),T(n2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),AIe=i(f),zi=n(f,"H2",{class:!0});var $Ne=s(zi);s2=n($Ne,"A",{id:!0,class:!0,href:!0});var Ylt=s(s2);bme=n(Ylt,"SPAN",{});var Klt=s(bme);T(fy.$$.fragment,Klt),Klt.forEach(t),Ylt.forEach(t),VPo=i($Ne),vme=n($Ne,"SPAN",{});var Zlt=s(vme);XPo=r(Zlt,"AutoModelForTokenClassification"),Zlt.forEach(t),$Ne.forEach(t),yIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(my.$$.fragment,Hs),zPo=i(Hs),Qi=n(Hs,"P",{});var LK=s(Qi);QPo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HG=n(LK,"A",{href:!0});var eit=s(HG);WPo=r(eit,"from_pretrained()"),eit.forEach(t),HPo=r(LK," class method or the "),UG=n(LK,"A",{href:!0});var oit=s(UG);UPo=r(oit,"from_config()"),oit.forEach(t),JPo=r(LK,` class
method.`),LK.forEach(t),YPo=i(Hs),gy=n(Hs,"P",{});var kNe=s(gy);KPo=r(kNe,"This class cannot be instantiated directly using "),Fme=n(kNe,"CODE",{});var rit=s(Fme);ZPo=r(rit,"__init__()"),rit.forEach(t),eIo=r(kNe," (throws an error)."),kNe.forEach(t),oIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var bA=s(dt);T(hy.$$.fragment,bA),rIo=i(bA),Tme=n(bA,"P",{});var tit=s(Tme);tIo=r(tit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tit.forEach(t),aIo=i(bA),Wi=n(bA,"P",{});var xK=s(Wi);nIo=r(xK,`Note:
Loading a model from its configuration file does `),Mme=n(xK,"STRONG",{});var ait=s(Mme);sIo=r(ait,"not"),ait.forEach(t),lIo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(xK,"A",{href:!0});var nit=s(JG);iIo=r(nit,"from_pretrained()"),nit.forEach(t),dIo=r(xK," to load the model weights."),xK.forEach(t),cIo=i(bA),T(l2.$$.fragment,bA),bA.forEach(t),fIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(py.$$.fragment,la),mIo=i(la),Eme=n(la,"P",{});var sit=s(Eme);gIo=r(sit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sit.forEach(t),hIo=i(la),Ba=n(la,"P",{});var vA=s(Ba);pIo=r(vA,"The model class to instantiate is selected based on the "),Cme=n(vA,"CODE",{});var lit=s(Cme);uIo=r(lit,"model_type"),lit.forEach(t),_Io=r(vA,` property of the config object (either
passed as an argument or loaded from `),wme=n(vA,"CODE",{});var iit=s(wme);bIo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),vIo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(vA,"CODE",{});var dit=s(Ame);FIo=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),TIo=r(vA,":"),vA.forEach(t),MIo=i(la),U=n(la,"UL",{});var J=s(U);i2=n(J,"LI",{});var G8e=s(i2);yme=n(G8e,"STRONG",{});var cit=s(yme);EIo=r(cit,"albert"),cit.forEach(t),CIo=r(G8e," \u2014 "),YG=n(G8e,"A",{href:!0});var fit=s(YG);wIo=r(fit,"AlbertForTokenClassification"),fit.forEach(t),AIo=r(G8e," (ALBERT model)"),G8e.forEach(t),yIo=i(J),d2=n(J,"LI",{});var O8e=s(d2);Lme=n(O8e,"STRONG",{});var mit=s(Lme);LIo=r(mit,"bert"),mit.forEach(t),xIo=r(O8e," \u2014 "),KG=n(O8e,"A",{href:!0});var git=s(KG);$Io=r(git,"BertForTokenClassification"),git.forEach(t),kIo=r(O8e," (BERT model)"),O8e.forEach(t),SIo=i(J),c2=n(J,"LI",{});var V8e=s(c2);xme=n(V8e,"STRONG",{});var hit=s(xme);RIo=r(hit,"big_bird"),hit.forEach(t),BIo=r(V8e," \u2014 "),ZG=n(V8e,"A",{href:!0});var pit=s(ZG);PIo=r(pit,"BigBirdForTokenClassification"),pit.forEach(t),IIo=r(V8e," (BigBird model)"),V8e.forEach(t),qIo=i(J),f2=n(J,"LI",{});var X8e=s(f2);$me=n(X8e,"STRONG",{});var uit=s($me);NIo=r(uit,"camembert"),uit.forEach(t),jIo=r(X8e," \u2014 "),eO=n(X8e,"A",{href:!0});var _it=s(eO);DIo=r(_it,"CamembertForTokenClassification"),_it.forEach(t),GIo=r(X8e," (CamemBERT model)"),X8e.forEach(t),OIo=i(J),m2=n(J,"LI",{});var z8e=s(m2);kme=n(z8e,"STRONG",{});var bit=s(kme);VIo=r(bit,"canine"),bit.forEach(t),XIo=r(z8e," \u2014 "),oO=n(z8e,"A",{href:!0});var vit=s(oO);zIo=r(vit,"CanineForTokenClassification"),vit.forEach(t),QIo=r(z8e," (Canine model)"),z8e.forEach(t),WIo=i(J),g2=n(J,"LI",{});var Q8e=s(g2);Sme=n(Q8e,"STRONG",{});var Fit=s(Sme);HIo=r(Fit,"convbert"),Fit.forEach(t),UIo=r(Q8e," \u2014 "),rO=n(Q8e,"A",{href:!0});var Tit=s(rO);JIo=r(Tit,"ConvBertForTokenClassification"),Tit.forEach(t),YIo=r(Q8e," (ConvBERT model)"),Q8e.forEach(t),KIo=i(J),h2=n(J,"LI",{});var W8e=s(h2);Rme=n(W8e,"STRONG",{});var Mit=s(Rme);ZIo=r(Mit,"data2vec-text"),Mit.forEach(t),eqo=r(W8e," \u2014 "),tO=n(W8e,"A",{href:!0});var Eit=s(tO);oqo=r(Eit,"Data2VecTextForTokenClassification"),Eit.forEach(t),rqo=r(W8e," (Data2VecText model)"),W8e.forEach(t),tqo=i(J),p2=n(J,"LI",{});var H8e=s(p2);Bme=n(H8e,"STRONG",{});var Cit=s(Bme);aqo=r(Cit,"deberta"),Cit.forEach(t),nqo=r(H8e," \u2014 "),aO=n(H8e,"A",{href:!0});var wit=s(aO);sqo=r(wit,"DebertaForTokenClassification"),wit.forEach(t),lqo=r(H8e," (DeBERTa model)"),H8e.forEach(t),iqo=i(J),u2=n(J,"LI",{});var U8e=s(u2);Pme=n(U8e,"STRONG",{});var Ait=s(Pme);dqo=r(Ait,"deberta-v2"),Ait.forEach(t),cqo=r(U8e," \u2014 "),nO=n(U8e,"A",{href:!0});var yit=s(nO);fqo=r(yit,"DebertaV2ForTokenClassification"),yit.forEach(t),mqo=r(U8e," (DeBERTa-v2 model)"),U8e.forEach(t),gqo=i(J),_2=n(J,"LI",{});var J8e=s(_2);Ime=n(J8e,"STRONG",{});var Lit=s(Ime);hqo=r(Lit,"distilbert"),Lit.forEach(t),pqo=r(J8e," \u2014 "),sO=n(J8e,"A",{href:!0});var xit=s(sO);uqo=r(xit,"DistilBertForTokenClassification"),xit.forEach(t),_qo=r(J8e," (DistilBERT model)"),J8e.forEach(t),bqo=i(J),b2=n(J,"LI",{});var Y8e=s(b2);qme=n(Y8e,"STRONG",{});var $it=s(qme);vqo=r($it,"electra"),$it.forEach(t),Fqo=r(Y8e," \u2014 "),lO=n(Y8e,"A",{href:!0});var kit=s(lO);Tqo=r(kit,"ElectraForTokenClassification"),kit.forEach(t),Mqo=r(Y8e," (ELECTRA model)"),Y8e.forEach(t),Eqo=i(J),v2=n(J,"LI",{});var K8e=s(v2);Nme=n(K8e,"STRONG",{});var Sit=s(Nme);Cqo=r(Sit,"flaubert"),Sit.forEach(t),wqo=r(K8e," \u2014 "),iO=n(K8e,"A",{href:!0});var Rit=s(iO);Aqo=r(Rit,"FlaubertForTokenClassification"),Rit.forEach(t),yqo=r(K8e," (FlauBERT model)"),K8e.forEach(t),Lqo=i(J),F2=n(J,"LI",{});var Z8e=s(F2);jme=n(Z8e,"STRONG",{});var Bit=s(jme);xqo=r(Bit,"fnet"),Bit.forEach(t),$qo=r(Z8e," \u2014 "),dO=n(Z8e,"A",{href:!0});var Pit=s(dO);kqo=r(Pit,"FNetForTokenClassification"),Pit.forEach(t),Sqo=r(Z8e," (FNet model)"),Z8e.forEach(t),Rqo=i(J),T2=n(J,"LI",{});var exe=s(T2);Dme=n(exe,"STRONG",{});var Iit=s(Dme);Bqo=r(Iit,"funnel"),Iit.forEach(t),Pqo=r(exe," \u2014 "),cO=n(exe,"A",{href:!0});var qit=s(cO);Iqo=r(qit,"FunnelForTokenClassification"),qit.forEach(t),qqo=r(exe," (Funnel Transformer model)"),exe.forEach(t),Nqo=i(J),M2=n(J,"LI",{});var oxe=s(M2);Gme=n(oxe,"STRONG",{});var Nit=s(Gme);jqo=r(Nit,"gpt2"),Nit.forEach(t),Dqo=r(oxe," \u2014 "),fO=n(oxe,"A",{href:!0});var jit=s(fO);Gqo=r(jit,"GPT2ForTokenClassification"),jit.forEach(t),Oqo=r(oxe," (OpenAI GPT-2 model)"),oxe.forEach(t),Vqo=i(J),E2=n(J,"LI",{});var rxe=s(E2);Ome=n(rxe,"STRONG",{});var Dit=s(Ome);Xqo=r(Dit,"ibert"),Dit.forEach(t),zqo=r(rxe," \u2014 "),mO=n(rxe,"A",{href:!0});var Git=s(mO);Qqo=r(Git,"IBertForTokenClassification"),Git.forEach(t),Wqo=r(rxe," (I-BERT model)"),rxe.forEach(t),Hqo=i(J),C2=n(J,"LI",{});var txe=s(C2);Vme=n(txe,"STRONG",{});var Oit=s(Vme);Uqo=r(Oit,"layoutlm"),Oit.forEach(t),Jqo=r(txe," \u2014 "),gO=n(txe,"A",{href:!0});var Vit=s(gO);Yqo=r(Vit,"LayoutLMForTokenClassification"),Vit.forEach(t),Kqo=r(txe," (LayoutLM model)"),txe.forEach(t),Zqo=i(J),w2=n(J,"LI",{});var axe=s(w2);Xme=n(axe,"STRONG",{});var Xit=s(Xme);eNo=r(Xit,"layoutlmv2"),Xit.forEach(t),oNo=r(axe," \u2014 "),hO=n(axe,"A",{href:!0});var zit=s(hO);rNo=r(zit,"LayoutLMv2ForTokenClassification"),zit.forEach(t),tNo=r(axe," (LayoutLMv2 model)"),axe.forEach(t),aNo=i(J),A2=n(J,"LI",{});var nxe=s(A2);zme=n(nxe,"STRONG",{});var Qit=s(zme);nNo=r(Qit,"longformer"),Qit.forEach(t),sNo=r(nxe," \u2014 "),pO=n(nxe,"A",{href:!0});var Wit=s(pO);lNo=r(Wit,"LongformerForTokenClassification"),Wit.forEach(t),iNo=r(nxe," (Longformer model)"),nxe.forEach(t),dNo=i(J),y2=n(J,"LI",{});var sxe=s(y2);Qme=n(sxe,"STRONG",{});var Hit=s(Qme);cNo=r(Hit,"megatron-bert"),Hit.forEach(t),fNo=r(sxe," \u2014 "),uO=n(sxe,"A",{href:!0});var Uit=s(uO);mNo=r(Uit,"MegatronBertForTokenClassification"),Uit.forEach(t),gNo=r(sxe," (MegatronBert model)"),sxe.forEach(t),hNo=i(J),L2=n(J,"LI",{});var lxe=s(L2);Wme=n(lxe,"STRONG",{});var Jit=s(Wme);pNo=r(Jit,"mobilebert"),Jit.forEach(t),uNo=r(lxe," \u2014 "),_O=n(lxe,"A",{href:!0});var Yit=s(_O);_No=r(Yit,"MobileBertForTokenClassification"),Yit.forEach(t),bNo=r(lxe," (MobileBERT model)"),lxe.forEach(t),vNo=i(J),x2=n(J,"LI",{});var ixe=s(x2);Hme=n(ixe,"STRONG",{});var Kit=s(Hme);FNo=r(Kit,"mpnet"),Kit.forEach(t),TNo=r(ixe," \u2014 "),bO=n(ixe,"A",{href:!0});var Zit=s(bO);MNo=r(Zit,"MPNetForTokenClassification"),Zit.forEach(t),ENo=r(ixe," (MPNet model)"),ixe.forEach(t),CNo=i(J),$2=n(J,"LI",{});var dxe=s($2);Ume=n(dxe,"STRONG",{});var edt=s(Ume);wNo=r(edt,"nystromformer"),edt.forEach(t),ANo=r(dxe," \u2014 "),vO=n(dxe,"A",{href:!0});var odt=s(vO);yNo=r(odt,"NystromformerForTokenClassification"),odt.forEach(t),LNo=r(dxe," (Nystromformer model)"),dxe.forEach(t),xNo=i(J),k2=n(J,"LI",{});var cxe=s(k2);Jme=n(cxe,"STRONG",{});var rdt=s(Jme);$No=r(rdt,"qdqbert"),rdt.forEach(t),kNo=r(cxe," \u2014 "),FO=n(cxe,"A",{href:!0});var tdt=s(FO);SNo=r(tdt,"QDQBertForTokenClassification"),tdt.forEach(t),RNo=r(cxe," (QDQBert model)"),cxe.forEach(t),BNo=i(J),S2=n(J,"LI",{});var fxe=s(S2);Yme=n(fxe,"STRONG",{});var adt=s(Yme);PNo=r(adt,"rembert"),adt.forEach(t),INo=r(fxe," \u2014 "),TO=n(fxe,"A",{href:!0});var ndt=s(TO);qNo=r(ndt,"RemBertForTokenClassification"),ndt.forEach(t),NNo=r(fxe," (RemBERT model)"),fxe.forEach(t),jNo=i(J),R2=n(J,"LI",{});var mxe=s(R2);Kme=n(mxe,"STRONG",{});var sdt=s(Kme);DNo=r(sdt,"roberta"),sdt.forEach(t),GNo=r(mxe," \u2014 "),MO=n(mxe,"A",{href:!0});var ldt=s(MO);ONo=r(ldt,"RobertaForTokenClassification"),ldt.forEach(t),VNo=r(mxe," (RoBERTa model)"),mxe.forEach(t),XNo=i(J),B2=n(J,"LI",{});var gxe=s(B2);Zme=n(gxe,"STRONG",{});var idt=s(Zme);zNo=r(idt,"roformer"),idt.forEach(t),QNo=r(gxe," \u2014 "),EO=n(gxe,"A",{href:!0});var ddt=s(EO);WNo=r(ddt,"RoFormerForTokenClassification"),ddt.forEach(t),HNo=r(gxe," (RoFormer model)"),gxe.forEach(t),UNo=i(J),P2=n(J,"LI",{});var hxe=s(P2);ege=n(hxe,"STRONG",{});var cdt=s(ege);JNo=r(cdt,"squeezebert"),cdt.forEach(t),YNo=r(hxe," \u2014 "),CO=n(hxe,"A",{href:!0});var fdt=s(CO);KNo=r(fdt,"SqueezeBertForTokenClassification"),fdt.forEach(t),ZNo=r(hxe," (SqueezeBERT model)"),hxe.forEach(t),ejo=i(J),I2=n(J,"LI",{});var pxe=s(I2);oge=n(pxe,"STRONG",{});var mdt=s(oge);ojo=r(mdt,"xlm"),mdt.forEach(t),rjo=r(pxe," \u2014 "),wO=n(pxe,"A",{href:!0});var gdt=s(wO);tjo=r(gdt,"XLMForTokenClassification"),gdt.forEach(t),ajo=r(pxe," (XLM model)"),pxe.forEach(t),njo=i(J),q2=n(J,"LI",{});var uxe=s(q2);rge=n(uxe,"STRONG",{});var hdt=s(rge);sjo=r(hdt,"xlm-roberta"),hdt.forEach(t),ljo=r(uxe," \u2014 "),AO=n(uxe,"A",{href:!0});var pdt=s(AO);ijo=r(pdt,"XLMRobertaForTokenClassification"),pdt.forEach(t),djo=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),cjo=i(J),N2=n(J,"LI",{});var _xe=s(N2);tge=n(_xe,"STRONG",{});var udt=s(tge);fjo=r(udt,"xlm-roberta-xl"),udt.forEach(t),mjo=r(_xe," \u2014 "),yO=n(_xe,"A",{href:!0});var _dt=s(yO);gjo=r(_dt,"XLMRobertaXLForTokenClassification"),_dt.forEach(t),hjo=r(_xe," (XLM-RoBERTa-XL model)"),_xe.forEach(t),pjo=i(J),j2=n(J,"LI",{});var bxe=s(j2);age=n(bxe,"STRONG",{});var bdt=s(age);ujo=r(bdt,"xlnet"),bdt.forEach(t),_jo=r(bxe," \u2014 "),LO=n(bxe,"A",{href:!0});var vdt=s(LO);bjo=r(vdt,"XLNetForTokenClassification"),vdt.forEach(t),vjo=r(bxe," (XLNet model)"),bxe.forEach(t),Fjo=i(J),D2=n(J,"LI",{});var vxe=s(D2);nge=n(vxe,"STRONG",{});var Fdt=s(nge);Tjo=r(Fdt,"yoso"),Fdt.forEach(t),Mjo=r(vxe," \u2014 "),xO=n(vxe,"A",{href:!0});var Tdt=s(xO);Ejo=r(Tdt,"YosoForTokenClassification"),Tdt.forEach(t),Cjo=r(vxe," (YOSO model)"),vxe.forEach(t),J.forEach(t),wjo=i(la),G2=n(la,"P",{});var Fxe=s(G2);Ajo=r(Fxe,"The model is set in evaluation mode by default using "),sge=n(Fxe,"CODE",{});var Mdt=s(sge);yjo=r(Mdt,"model.eval()"),Mdt.forEach(t),Ljo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n(Fxe,"CODE",{});var Edt=s(lge);xjo=r(Edt,"model.train()"),Edt.forEach(t),Fxe.forEach(t),$jo=i(la),T(O2.$$.fragment,la),la.forEach(t),Hs.forEach(t),LIe=i(f),Hi=n(f,"H2",{class:!0});var SNe=s(Hi);V2=n(SNe,"A",{id:!0,class:!0,href:!0});var Cdt=s(V2);ige=n(Cdt,"SPAN",{});var wdt=s(ige);T(uy.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),kjo=i(SNe),dge=n(SNe,"SPAN",{});var Adt=s(dge);Sjo=r(Adt,"AutoModelForQuestionAnswering"),Adt.forEach(t),SNe.forEach(t),xIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(_y.$$.fragment,Us),Rjo=i(Us),Ui=n(Us,"P",{});var $K=s(Ui);Bjo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$O=n($K,"A",{href:!0});var ydt=s($O);Pjo=r(ydt,"from_pretrained()"),ydt.forEach(t),Ijo=r($K," class method or the "),kO=n($K,"A",{href:!0});var Ldt=s(kO);qjo=r(Ldt,"from_config()"),Ldt.forEach(t),Njo=r($K,` class
method.`),$K.forEach(t),jjo=i(Us),by=n(Us,"P",{});var RNe=s(by);Djo=r(RNe,"This class cannot be instantiated directly using "),cge=n(RNe,"CODE",{});var xdt=s(cge);Gjo=r(xdt,"__init__()"),xdt.forEach(t),Ojo=r(RNe," (throws an error)."),RNe.forEach(t),Vjo=i(Us),ct=n(Us,"DIV",{class:!0});var FA=s(ct);T(vy.$$.fragment,FA),Xjo=i(FA),fge=n(FA,"P",{});var $dt=s(fge);zjo=r($dt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$dt.forEach(t),Qjo=i(FA),Ji=n(FA,"P",{});var kK=s(Ji);Wjo=r(kK,`Note:
Loading a model from its configuration file does `),mge=n(kK,"STRONG",{});var kdt=s(mge);Hjo=r(kdt,"not"),kdt.forEach(t),Ujo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SO=n(kK,"A",{href:!0});var Sdt=s(SO);Jjo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),Yjo=r(kK," to load the model weights."),kK.forEach(t),Kjo=i(FA),T(X2.$$.fragment,FA),FA.forEach(t),Zjo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Fy.$$.fragment,ia),eDo=i(ia),gge=n(ia,"P",{});var Rdt=s(gge);oDo=r(Rdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Rdt.forEach(t),rDo=i(ia),Pa=n(ia,"P",{});var TA=s(Pa);tDo=r(TA,"The model class to instantiate is selected based on the "),hge=n(TA,"CODE",{});var Bdt=s(hge);aDo=r(Bdt,"model_type"),Bdt.forEach(t),nDo=r(TA,` property of the config object (either
passed as an argument or loaded from `),pge=n(TA,"CODE",{});var Pdt=s(pge);sDo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),lDo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(TA,"CODE",{});var Idt=s(uge);iDo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),dDo=r(TA,":"),TA.forEach(t),cDo=i(ia),O=n(ia,"UL",{});var X=s(O);z2=n(X,"LI",{});var Txe=s(z2);_ge=n(Txe,"STRONG",{});var qdt=s(_ge);fDo=r(qdt,"albert"),qdt.forEach(t),mDo=r(Txe," \u2014 "),RO=n(Txe,"A",{href:!0});var Ndt=s(RO);gDo=r(Ndt,"AlbertForQuestionAnswering"),Ndt.forEach(t),hDo=r(Txe," (ALBERT model)"),Txe.forEach(t),pDo=i(X),Q2=n(X,"LI",{});var Mxe=s(Q2);bge=n(Mxe,"STRONG",{});var jdt=s(bge);uDo=r(jdt,"bart"),jdt.forEach(t),_Do=r(Mxe," \u2014 "),BO=n(Mxe,"A",{href:!0});var Ddt=s(BO);bDo=r(Ddt,"BartForQuestionAnswering"),Ddt.forEach(t),vDo=r(Mxe," (BART model)"),Mxe.forEach(t),FDo=i(X),W2=n(X,"LI",{});var Exe=s(W2);vge=n(Exe,"STRONG",{});var Gdt=s(vge);TDo=r(Gdt,"bert"),Gdt.forEach(t),MDo=r(Exe," \u2014 "),PO=n(Exe,"A",{href:!0});var Odt=s(PO);EDo=r(Odt,"BertForQuestionAnswering"),Odt.forEach(t),CDo=r(Exe," (BERT model)"),Exe.forEach(t),wDo=i(X),H2=n(X,"LI",{});var Cxe=s(H2);Fge=n(Cxe,"STRONG",{});var Vdt=s(Fge);ADo=r(Vdt,"big_bird"),Vdt.forEach(t),yDo=r(Cxe," \u2014 "),IO=n(Cxe,"A",{href:!0});var Xdt=s(IO);LDo=r(Xdt,"BigBirdForQuestionAnswering"),Xdt.forEach(t),xDo=r(Cxe," (BigBird model)"),Cxe.forEach(t),$Do=i(X),U2=n(X,"LI",{});var wxe=s(U2);Tge=n(wxe,"STRONG",{});var zdt=s(Tge);kDo=r(zdt,"bigbird_pegasus"),zdt.forEach(t),SDo=r(wxe," \u2014 "),qO=n(wxe,"A",{href:!0});var Qdt=s(qO);RDo=r(Qdt,"BigBirdPegasusForQuestionAnswering"),Qdt.forEach(t),BDo=r(wxe," (BigBirdPegasus model)"),wxe.forEach(t),PDo=i(X),J2=n(X,"LI",{});var Axe=s(J2);Mge=n(Axe,"STRONG",{});var Wdt=s(Mge);IDo=r(Wdt,"camembert"),Wdt.forEach(t),qDo=r(Axe," \u2014 "),NO=n(Axe,"A",{href:!0});var Hdt=s(NO);NDo=r(Hdt,"CamembertForQuestionAnswering"),Hdt.forEach(t),jDo=r(Axe," (CamemBERT model)"),Axe.forEach(t),DDo=i(X),Y2=n(X,"LI",{});var yxe=s(Y2);Ege=n(yxe,"STRONG",{});var Udt=s(Ege);GDo=r(Udt,"canine"),Udt.forEach(t),ODo=r(yxe," \u2014 "),jO=n(yxe,"A",{href:!0});var Jdt=s(jO);VDo=r(Jdt,"CanineForQuestionAnswering"),Jdt.forEach(t),XDo=r(yxe," (Canine model)"),yxe.forEach(t),zDo=i(X),K2=n(X,"LI",{});var Lxe=s(K2);Cge=n(Lxe,"STRONG",{});var Ydt=s(Cge);QDo=r(Ydt,"convbert"),Ydt.forEach(t),WDo=r(Lxe," \u2014 "),DO=n(Lxe,"A",{href:!0});var Kdt=s(DO);HDo=r(Kdt,"ConvBertForQuestionAnswering"),Kdt.forEach(t),UDo=r(Lxe," (ConvBERT model)"),Lxe.forEach(t),JDo=i(X),Z2=n(X,"LI",{});var xxe=s(Z2);wge=n(xxe,"STRONG",{});var Zdt=s(wge);YDo=r(Zdt,"data2vec-text"),Zdt.forEach(t),KDo=r(xxe," \u2014 "),GO=n(xxe,"A",{href:!0});var ect=s(GO);ZDo=r(ect,"Data2VecTextForQuestionAnswering"),ect.forEach(t),eGo=r(xxe," (Data2VecText model)"),xxe.forEach(t),oGo=i(X),ev=n(X,"LI",{});var $xe=s(ev);Age=n($xe,"STRONG",{});var oct=s(Age);rGo=r(oct,"deberta"),oct.forEach(t),tGo=r($xe," \u2014 "),OO=n($xe,"A",{href:!0});var rct=s(OO);aGo=r(rct,"DebertaForQuestionAnswering"),rct.forEach(t),nGo=r($xe," (DeBERTa model)"),$xe.forEach(t),sGo=i(X),ov=n(X,"LI",{});var kxe=s(ov);yge=n(kxe,"STRONG",{});var tct=s(yge);lGo=r(tct,"deberta-v2"),tct.forEach(t),iGo=r(kxe," \u2014 "),VO=n(kxe,"A",{href:!0});var act=s(VO);dGo=r(act,"DebertaV2ForQuestionAnswering"),act.forEach(t),cGo=r(kxe," (DeBERTa-v2 model)"),kxe.forEach(t),fGo=i(X),rv=n(X,"LI",{});var Sxe=s(rv);Lge=n(Sxe,"STRONG",{});var nct=s(Lge);mGo=r(nct,"distilbert"),nct.forEach(t),gGo=r(Sxe," \u2014 "),XO=n(Sxe,"A",{href:!0});var sct=s(XO);hGo=r(sct,"DistilBertForQuestionAnswering"),sct.forEach(t),pGo=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),uGo=i(X),tv=n(X,"LI",{});var Rxe=s(tv);xge=n(Rxe,"STRONG",{});var lct=s(xge);_Go=r(lct,"electra"),lct.forEach(t),bGo=r(Rxe," \u2014 "),zO=n(Rxe,"A",{href:!0});var ict=s(zO);vGo=r(ict,"ElectraForQuestionAnswering"),ict.forEach(t),FGo=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),TGo=i(X),av=n(X,"LI",{});var Bxe=s(av);$ge=n(Bxe,"STRONG",{});var dct=s($ge);MGo=r(dct,"flaubert"),dct.forEach(t),EGo=r(Bxe," \u2014 "),QO=n(Bxe,"A",{href:!0});var cct=s(QO);CGo=r(cct,"FlaubertForQuestionAnsweringSimple"),cct.forEach(t),wGo=r(Bxe," (FlauBERT model)"),Bxe.forEach(t),AGo=i(X),nv=n(X,"LI",{});var Pxe=s(nv);kge=n(Pxe,"STRONG",{});var fct=s(kge);yGo=r(fct,"fnet"),fct.forEach(t),LGo=r(Pxe," \u2014 "),WO=n(Pxe,"A",{href:!0});var mct=s(WO);xGo=r(mct,"FNetForQuestionAnswering"),mct.forEach(t),$Go=r(Pxe," (FNet model)"),Pxe.forEach(t),kGo=i(X),sv=n(X,"LI",{});var Ixe=s(sv);Sge=n(Ixe,"STRONG",{});var gct=s(Sge);SGo=r(gct,"funnel"),gct.forEach(t),RGo=r(Ixe," \u2014 "),HO=n(Ixe,"A",{href:!0});var hct=s(HO);BGo=r(hct,"FunnelForQuestionAnswering"),hct.forEach(t),PGo=r(Ixe," (Funnel Transformer model)"),Ixe.forEach(t),IGo=i(X),lv=n(X,"LI",{});var qxe=s(lv);Rge=n(qxe,"STRONG",{});var pct=s(Rge);qGo=r(pct,"gptj"),pct.forEach(t),NGo=r(qxe," \u2014 "),UO=n(qxe,"A",{href:!0});var uct=s(UO);jGo=r(uct,"GPTJForQuestionAnswering"),uct.forEach(t),DGo=r(qxe," (GPT-J model)"),qxe.forEach(t),GGo=i(X),iv=n(X,"LI",{});var Nxe=s(iv);Bge=n(Nxe,"STRONG",{});var _ct=s(Bge);OGo=r(_ct,"ibert"),_ct.forEach(t),VGo=r(Nxe," \u2014 "),JO=n(Nxe,"A",{href:!0});var bct=s(JO);XGo=r(bct,"IBertForQuestionAnswering"),bct.forEach(t),zGo=r(Nxe," (I-BERT model)"),Nxe.forEach(t),QGo=i(X),dv=n(X,"LI",{});var jxe=s(dv);Pge=n(jxe,"STRONG",{});var vct=s(Pge);WGo=r(vct,"layoutlmv2"),vct.forEach(t),HGo=r(jxe," \u2014 "),YO=n(jxe,"A",{href:!0});var Fct=s(YO);UGo=r(Fct,"LayoutLMv2ForQuestionAnswering"),Fct.forEach(t),JGo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),YGo=i(X),cv=n(X,"LI",{});var Dxe=s(cv);Ige=n(Dxe,"STRONG",{});var Tct=s(Ige);KGo=r(Tct,"led"),Tct.forEach(t),ZGo=r(Dxe," \u2014 "),KO=n(Dxe,"A",{href:!0});var Mct=s(KO);eOo=r(Mct,"LEDForQuestionAnswering"),Mct.forEach(t),oOo=r(Dxe," (LED model)"),Dxe.forEach(t),rOo=i(X),fv=n(X,"LI",{});var Gxe=s(fv);qge=n(Gxe,"STRONG",{});var Ect=s(qge);tOo=r(Ect,"longformer"),Ect.forEach(t),aOo=r(Gxe," \u2014 "),ZO=n(Gxe,"A",{href:!0});var Cct=s(ZO);nOo=r(Cct,"LongformerForQuestionAnswering"),Cct.forEach(t),sOo=r(Gxe," (Longformer model)"),Gxe.forEach(t),lOo=i(X),mv=n(X,"LI",{});var Oxe=s(mv);Nge=n(Oxe,"STRONG",{});var wct=s(Nge);iOo=r(wct,"lxmert"),wct.forEach(t),dOo=r(Oxe," \u2014 "),eV=n(Oxe,"A",{href:!0});var Act=s(eV);cOo=r(Act,"LxmertForQuestionAnswering"),Act.forEach(t),fOo=r(Oxe," (LXMERT model)"),Oxe.forEach(t),mOo=i(X),gv=n(X,"LI",{});var Vxe=s(gv);jge=n(Vxe,"STRONG",{});var yct=s(jge);gOo=r(yct,"mbart"),yct.forEach(t),hOo=r(Vxe," \u2014 "),oV=n(Vxe,"A",{href:!0});var Lct=s(oV);pOo=r(Lct,"MBartForQuestionAnswering"),Lct.forEach(t),uOo=r(Vxe," (mBART model)"),Vxe.forEach(t),_Oo=i(X),hv=n(X,"LI",{});var Xxe=s(hv);Dge=n(Xxe,"STRONG",{});var xct=s(Dge);bOo=r(xct,"megatron-bert"),xct.forEach(t),vOo=r(Xxe," \u2014 "),rV=n(Xxe,"A",{href:!0});var $ct=s(rV);FOo=r($ct,"MegatronBertForQuestionAnswering"),$ct.forEach(t),TOo=r(Xxe," (MegatronBert model)"),Xxe.forEach(t),MOo=i(X),pv=n(X,"LI",{});var zxe=s(pv);Gge=n(zxe,"STRONG",{});var kct=s(Gge);EOo=r(kct,"mobilebert"),kct.forEach(t),COo=r(zxe," \u2014 "),tV=n(zxe,"A",{href:!0});var Sct=s(tV);wOo=r(Sct,"MobileBertForQuestionAnswering"),Sct.forEach(t),AOo=r(zxe," (MobileBERT model)"),zxe.forEach(t),yOo=i(X),uv=n(X,"LI",{});var Qxe=s(uv);Oge=n(Qxe,"STRONG",{});var Rct=s(Oge);LOo=r(Rct,"mpnet"),Rct.forEach(t),xOo=r(Qxe," \u2014 "),aV=n(Qxe,"A",{href:!0});var Bct=s(aV);$Oo=r(Bct,"MPNetForQuestionAnswering"),Bct.forEach(t),kOo=r(Qxe," (MPNet model)"),Qxe.forEach(t),SOo=i(X),_v=n(X,"LI",{});var Wxe=s(_v);Vge=n(Wxe,"STRONG",{});var Pct=s(Vge);ROo=r(Pct,"nystromformer"),Pct.forEach(t),BOo=r(Wxe," \u2014 "),nV=n(Wxe,"A",{href:!0});var Ict=s(nV);POo=r(Ict,"NystromformerForQuestionAnswering"),Ict.forEach(t),IOo=r(Wxe," (Nystromformer model)"),Wxe.forEach(t),qOo=i(X),bv=n(X,"LI",{});var Hxe=s(bv);Xge=n(Hxe,"STRONG",{});var qct=s(Xge);NOo=r(qct,"qdqbert"),qct.forEach(t),jOo=r(Hxe," \u2014 "),sV=n(Hxe,"A",{href:!0});var Nct=s(sV);DOo=r(Nct,"QDQBertForQuestionAnswering"),Nct.forEach(t),GOo=r(Hxe," (QDQBert model)"),Hxe.forEach(t),OOo=i(X),vv=n(X,"LI",{});var Uxe=s(vv);zge=n(Uxe,"STRONG",{});var jct=s(zge);VOo=r(jct,"reformer"),jct.forEach(t),XOo=r(Uxe," \u2014 "),lV=n(Uxe,"A",{href:!0});var Dct=s(lV);zOo=r(Dct,"ReformerForQuestionAnswering"),Dct.forEach(t),QOo=r(Uxe," (Reformer model)"),Uxe.forEach(t),WOo=i(X),Fv=n(X,"LI",{});var Jxe=s(Fv);Qge=n(Jxe,"STRONG",{});var Gct=s(Qge);HOo=r(Gct,"rembert"),Gct.forEach(t),UOo=r(Jxe," \u2014 "),iV=n(Jxe,"A",{href:!0});var Oct=s(iV);JOo=r(Oct,"RemBertForQuestionAnswering"),Oct.forEach(t),YOo=r(Jxe," (RemBERT model)"),Jxe.forEach(t),KOo=i(X),Tv=n(X,"LI",{});var Yxe=s(Tv);Wge=n(Yxe,"STRONG",{});var Vct=s(Wge);ZOo=r(Vct,"roberta"),Vct.forEach(t),eVo=r(Yxe," \u2014 "),dV=n(Yxe,"A",{href:!0});var Xct=s(dV);oVo=r(Xct,"RobertaForQuestionAnswering"),Xct.forEach(t),rVo=r(Yxe," (RoBERTa model)"),Yxe.forEach(t),tVo=i(X),Mv=n(X,"LI",{});var Kxe=s(Mv);Hge=n(Kxe,"STRONG",{});var zct=s(Hge);aVo=r(zct,"roformer"),zct.forEach(t),nVo=r(Kxe," \u2014 "),cV=n(Kxe,"A",{href:!0});var Qct=s(cV);sVo=r(Qct,"RoFormerForQuestionAnswering"),Qct.forEach(t),lVo=r(Kxe," (RoFormer model)"),Kxe.forEach(t),iVo=i(X),Ev=n(X,"LI",{});var Zxe=s(Ev);Uge=n(Zxe,"STRONG",{});var Wct=s(Uge);dVo=r(Wct,"splinter"),Wct.forEach(t),cVo=r(Zxe," \u2014 "),fV=n(Zxe,"A",{href:!0});var Hct=s(fV);fVo=r(Hct,"SplinterForQuestionAnswering"),Hct.forEach(t),mVo=r(Zxe," (Splinter model)"),Zxe.forEach(t),gVo=i(X),Cv=n(X,"LI",{});var e9e=s(Cv);Jge=n(e9e,"STRONG",{});var Uct=s(Jge);hVo=r(Uct,"squeezebert"),Uct.forEach(t),pVo=r(e9e," \u2014 "),mV=n(e9e,"A",{href:!0});var Jct=s(mV);uVo=r(Jct,"SqueezeBertForQuestionAnswering"),Jct.forEach(t),_Vo=r(e9e," (SqueezeBERT model)"),e9e.forEach(t),bVo=i(X),wv=n(X,"LI",{});var o9e=s(wv);Yge=n(o9e,"STRONG",{});var Yct=s(Yge);vVo=r(Yct,"xlm"),Yct.forEach(t),FVo=r(o9e," \u2014 "),gV=n(o9e,"A",{href:!0});var Kct=s(gV);TVo=r(Kct,"XLMForQuestionAnsweringSimple"),Kct.forEach(t),MVo=r(o9e," (XLM model)"),o9e.forEach(t),EVo=i(X),Av=n(X,"LI",{});var r9e=s(Av);Kge=n(r9e,"STRONG",{});var Zct=s(Kge);CVo=r(Zct,"xlm-roberta"),Zct.forEach(t),wVo=r(r9e," \u2014 "),hV=n(r9e,"A",{href:!0});var eft=s(hV);AVo=r(eft,"XLMRobertaForQuestionAnswering"),eft.forEach(t),yVo=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),LVo=i(X),yv=n(X,"LI",{});var t9e=s(yv);Zge=n(t9e,"STRONG",{});var oft=s(Zge);xVo=r(oft,"xlm-roberta-xl"),oft.forEach(t),$Vo=r(t9e," \u2014 "),pV=n(t9e,"A",{href:!0});var rft=s(pV);kVo=r(rft,"XLMRobertaXLForQuestionAnswering"),rft.forEach(t),SVo=r(t9e," (XLM-RoBERTa-XL model)"),t9e.forEach(t),RVo=i(X),Lv=n(X,"LI",{});var a9e=s(Lv);ehe=n(a9e,"STRONG",{});var tft=s(ehe);BVo=r(tft,"xlnet"),tft.forEach(t),PVo=r(a9e," \u2014 "),uV=n(a9e,"A",{href:!0});var aft=s(uV);IVo=r(aft,"XLNetForQuestionAnsweringSimple"),aft.forEach(t),qVo=r(a9e," (XLNet model)"),a9e.forEach(t),NVo=i(X),xv=n(X,"LI",{});var n9e=s(xv);ohe=n(n9e,"STRONG",{});var nft=s(ohe);jVo=r(nft,"yoso"),nft.forEach(t),DVo=r(n9e," \u2014 "),_V=n(n9e,"A",{href:!0});var sft=s(_V);GVo=r(sft,"YosoForQuestionAnswering"),sft.forEach(t),OVo=r(n9e," (YOSO model)"),n9e.forEach(t),X.forEach(t),VVo=i(ia),$v=n(ia,"P",{});var s9e=s($v);XVo=r(s9e,"The model is set in evaluation mode by default using "),rhe=n(s9e,"CODE",{});var lft=s(rhe);zVo=r(lft,"model.eval()"),lft.forEach(t),QVo=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(s9e,"CODE",{});var ift=s(the);WVo=r(ift,"model.train()"),ift.forEach(t),s9e.forEach(t),HVo=i(ia),T(kv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),$Ie=i(f),Yi=n(f,"H2",{class:!0});var BNe=s(Yi);Sv=n(BNe,"A",{id:!0,class:!0,href:!0});var dft=s(Sv);ahe=n(dft,"SPAN",{});var cft=s(ahe);T(Ty.$$.fragment,cft),cft.forEach(t),dft.forEach(t),UVo=i(BNe),nhe=n(BNe,"SPAN",{});var fft=s(nhe);JVo=r(fft,"AutoModelForTableQuestionAnswering"),fft.forEach(t),BNe.forEach(t),kIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(My.$$.fragment,Js),YVo=i(Js),Ki=n(Js,"P",{});var SK=s(Ki);KVo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bV=n(SK,"A",{href:!0});var mft=s(bV);ZVo=r(mft,"from_pretrained()"),mft.forEach(t),eXo=r(SK," class method or the "),vV=n(SK,"A",{href:!0});var gft=s(vV);oXo=r(gft,"from_config()"),gft.forEach(t),rXo=r(SK,` class
method.`),SK.forEach(t),tXo=i(Js),Ey=n(Js,"P",{});var PNe=s(Ey);aXo=r(PNe,"This class cannot be instantiated directly using "),she=n(PNe,"CODE",{});var hft=s(she);nXo=r(hft,"__init__()"),hft.forEach(t),sXo=r(PNe," (throws an error)."),PNe.forEach(t),lXo=i(Js),ft=n(Js,"DIV",{class:!0});var MA=s(ft);T(Cy.$$.fragment,MA),iXo=i(MA),lhe=n(MA,"P",{});var pft=s(lhe);dXo=r(pft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pft.forEach(t),cXo=i(MA),Zi=n(MA,"P",{});var RK=s(Zi);fXo=r(RK,`Note:
Loading a model from its configuration file does `),ihe=n(RK,"STRONG",{});var uft=s(ihe);mXo=r(uft,"not"),uft.forEach(t),gXo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(RK,"A",{href:!0});var _ft=s(FV);hXo=r(_ft,"from_pretrained()"),_ft.forEach(t),pXo=r(RK," to load the model weights."),RK.forEach(t),uXo=i(MA),T(Rv.$$.fragment,MA),MA.forEach(t),_Xo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(wy.$$.fragment,da),bXo=i(da),dhe=n(da,"P",{});var bft=s(dhe);vXo=r(bft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bft.forEach(t),FXo=i(da),Ia=n(da,"P",{});var EA=s(Ia);TXo=r(EA,"The model class to instantiate is selected based on the "),che=n(EA,"CODE",{});var vft=s(che);MXo=r(vft,"model_type"),vft.forEach(t),EXo=r(EA,` property of the config object (either
passed as an argument or loaded from `),fhe=n(EA,"CODE",{});var Fft=s(fhe);CXo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),wXo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(EA,"CODE",{});var Tft=s(mhe);AXo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),yXo=r(EA,":"),EA.forEach(t),LXo=i(da),ghe=n(da,"UL",{});var Mft=s(ghe);Bv=n(Mft,"LI",{});var l9e=s(Bv);hhe=n(l9e,"STRONG",{});var Eft=s(hhe);xXo=r(Eft,"tapas"),Eft.forEach(t),$Xo=r(l9e," \u2014 "),TV=n(l9e,"A",{href:!0});var Cft=s(TV);kXo=r(Cft,"TapasForQuestionAnswering"),Cft.forEach(t),SXo=r(l9e," (TAPAS model)"),l9e.forEach(t),Mft.forEach(t),RXo=i(da),Pv=n(da,"P",{});var i9e=s(Pv);BXo=r(i9e,"The model is set in evaluation mode by default using "),phe=n(i9e,"CODE",{});var wft=s(phe);PXo=r(wft,"model.eval()"),wft.forEach(t),IXo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(i9e,"CODE",{});var Aft=s(uhe);qXo=r(Aft,"model.train()"),Aft.forEach(t),i9e.forEach(t),NXo=i(da),T(Iv.$$.fragment,da),da.forEach(t),Js.forEach(t),SIe=i(f),ed=n(f,"H2",{class:!0});var INe=s(ed);qv=n(INe,"A",{id:!0,class:!0,href:!0});var yft=s(qv);_he=n(yft,"SPAN",{});var Lft=s(_he);T(Ay.$$.fragment,Lft),Lft.forEach(t),yft.forEach(t),jXo=i(INe),bhe=n(INe,"SPAN",{});var xft=s(bhe);DXo=r(xft,"AutoModelForImageClassification"),xft.forEach(t),INe.forEach(t),RIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(yy.$$.fragment,Ys),GXo=i(Ys),od=n(Ys,"P",{});var BK=s(od);OXo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MV=n(BK,"A",{href:!0});var $ft=s(MV);VXo=r($ft,"from_pretrained()"),$ft.forEach(t),XXo=r(BK," class method or the "),EV=n(BK,"A",{href:!0});var kft=s(EV);zXo=r(kft,"from_config()"),kft.forEach(t),QXo=r(BK,` class
method.`),BK.forEach(t),WXo=i(Ys),Ly=n(Ys,"P",{});var qNe=s(Ly);HXo=r(qNe,"This class cannot be instantiated directly using "),vhe=n(qNe,"CODE",{});var Sft=s(vhe);UXo=r(Sft,"__init__()"),Sft.forEach(t),JXo=r(qNe," (throws an error)."),qNe.forEach(t),YXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var CA=s(mt);T(xy.$$.fragment,CA),KXo=i(CA),Fhe=n(CA,"P",{});var Rft=s(Fhe);ZXo=r(Rft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rft.forEach(t),ezo=i(CA),rd=n(CA,"P",{});var PK=s(rd);ozo=r(PK,`Note:
Loading a model from its configuration file does `),The=n(PK,"STRONG",{});var Bft=s(The);rzo=r(Bft,"not"),Bft.forEach(t),tzo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(PK,"A",{href:!0});var Pft=s(CV);azo=r(Pft,"from_pretrained()"),Pft.forEach(t),nzo=r(PK," to load the model weights."),PK.forEach(t),szo=i(CA),T(Nv.$$.fragment,CA),CA.forEach(t),lzo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T($y.$$.fragment,ca),izo=i(ca),Mhe=n(ca,"P",{});var Ift=s(Mhe);dzo=r(Ift,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ift.forEach(t),czo=i(ca),qa=n(ca,"P",{});var wA=s(qa);fzo=r(wA,"The model class to instantiate is selected based on the "),Ehe=n(wA,"CODE",{});var qft=s(Ehe);mzo=r(qft,"model_type"),qft.forEach(t),gzo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Che=n(wA,"CODE",{});var Nft=s(Che);hzo=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),pzo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(wA,"CODE",{});var jft=s(whe);uzo=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),_zo=r(wA,":"),wA.forEach(t),bzo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);jv=n(Ee,"LI",{});var d9e=s(jv);Ahe=n(d9e,"STRONG",{});var Dft=s(Ahe);vzo=r(Dft,"beit"),Dft.forEach(t),Fzo=r(d9e," \u2014 "),wV=n(d9e,"A",{href:!0});var Gft=s(wV);Tzo=r(Gft,"BeitForImageClassification"),Gft.forEach(t),Mzo=r(d9e," (BEiT model)"),d9e.forEach(t),Ezo=i(Ee),Dv=n(Ee,"LI",{});var c9e=s(Dv);yhe=n(c9e,"STRONG",{});var Oft=s(yhe);Czo=r(Oft,"convnext"),Oft.forEach(t),wzo=r(c9e," \u2014 "),AV=n(c9e,"A",{href:!0});var Vft=s(AV);Azo=r(Vft,"ConvNextForImageClassification"),Vft.forEach(t),yzo=r(c9e," (ConvNext model)"),c9e.forEach(t),Lzo=i(Ee),Gv=n(Ee,"LI",{});var f9e=s(Gv);Lhe=n(f9e,"STRONG",{});var Xft=s(Lhe);xzo=r(Xft,"data2vec-vision"),Xft.forEach(t),$zo=r(f9e," \u2014 "),yV=n(f9e,"A",{href:!0});var zft=s(yV);kzo=r(zft,"Data2VecVisionForImageClassification"),zft.forEach(t),Szo=r(f9e," (Data2VecVision model)"),f9e.forEach(t),Rzo=i(Ee),Rs=n(Ee,"LI",{});var h$=s(Rs);xhe=n(h$,"STRONG",{});var Qft=s(xhe);Bzo=r(Qft,"deit"),Qft.forEach(t),Pzo=r(h$," \u2014 "),LV=n(h$,"A",{href:!0});var Wft=s(LV);Izo=r(Wft,"DeiTForImageClassification"),Wft.forEach(t),qzo=r(h$," or "),xV=n(h$,"A",{href:!0});var Hft=s(xV);Nzo=r(Hft,"DeiTForImageClassificationWithTeacher"),Hft.forEach(t),jzo=r(h$," (DeiT model)"),h$.forEach(t),Dzo=i(Ee),Ov=n(Ee,"LI",{});var m9e=s(Ov);$he=n(m9e,"STRONG",{});var Uft=s($he);Gzo=r(Uft,"imagegpt"),Uft.forEach(t),Ozo=r(m9e," \u2014 "),$V=n(m9e,"A",{href:!0});var Jft=s($V);Vzo=r(Jft,"ImageGPTForImageClassification"),Jft.forEach(t),Xzo=r(m9e," (ImageGPT model)"),m9e.forEach(t),zzo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);khe=n(ff,"STRONG",{});var Yft=s(khe);Qzo=r(Yft,"perceiver"),Yft.forEach(t),Wzo=r(ff," \u2014 "),kV=n(ff,"A",{href:!0});var Kft=s(kV);Hzo=r(Kft,"PerceiverForImageClassificationLearned"),Kft.forEach(t),Uzo=r(ff," or "),SV=n(ff,"A",{href:!0});var Zft=s(SV);Jzo=r(Zft,"PerceiverForImageClassificationFourier"),Zft.forEach(t),Yzo=r(ff," or "),RV=n(ff,"A",{href:!0});var emt=s(RV);Kzo=r(emt,"PerceiverForImageClassificationConvProcessing"),emt.forEach(t),Zzo=r(ff," (Perceiver model)"),ff.forEach(t),eQo=i(Ee),Vv=n(Ee,"LI",{});var g9e=s(Vv);She=n(g9e,"STRONG",{});var omt=s(She);oQo=r(omt,"poolformer"),omt.forEach(t),rQo=r(g9e," \u2014 "),BV=n(g9e,"A",{href:!0});var rmt=s(BV);tQo=r(rmt,"PoolFormerForImageClassification"),rmt.forEach(t),aQo=r(g9e," (PoolFormer model)"),g9e.forEach(t),nQo=i(Ee),Xv=n(Ee,"LI",{});var h9e=s(Xv);Rhe=n(h9e,"STRONG",{});var tmt=s(Rhe);sQo=r(tmt,"regnet"),tmt.forEach(t),lQo=r(h9e," \u2014 "),PV=n(h9e,"A",{href:!0});var amt=s(PV);iQo=r(amt,"RegNetForImageClassification"),amt.forEach(t),dQo=r(h9e," (RegNet model)"),h9e.forEach(t),cQo=i(Ee),zv=n(Ee,"LI",{});var p9e=s(zv);Bhe=n(p9e,"STRONG",{});var nmt=s(Bhe);fQo=r(nmt,"resnet"),nmt.forEach(t),mQo=r(p9e," \u2014 "),IV=n(p9e,"A",{href:!0});var smt=s(IV);gQo=r(smt,"ResNetForImageClassification"),smt.forEach(t),hQo=r(p9e," (ResNet model)"),p9e.forEach(t),pQo=i(Ee),Qv=n(Ee,"LI",{});var u9e=s(Qv);Phe=n(u9e,"STRONG",{});var lmt=s(Phe);uQo=r(lmt,"segformer"),lmt.forEach(t),_Qo=r(u9e," \u2014 "),qV=n(u9e,"A",{href:!0});var imt=s(qV);bQo=r(imt,"SegformerForImageClassification"),imt.forEach(t),vQo=r(u9e," (SegFormer model)"),u9e.forEach(t),FQo=i(Ee),Wv=n(Ee,"LI",{});var _9e=s(Wv);Ihe=n(_9e,"STRONG",{});var dmt=s(Ihe);TQo=r(dmt,"swin"),dmt.forEach(t),MQo=r(_9e," \u2014 "),NV=n(_9e,"A",{href:!0});var cmt=s(NV);EQo=r(cmt,"SwinForImageClassification"),cmt.forEach(t),CQo=r(_9e," (Swin model)"),_9e.forEach(t),wQo=i(Ee),Hv=n(Ee,"LI",{});var b9e=s(Hv);qhe=n(b9e,"STRONG",{});var fmt=s(qhe);AQo=r(fmt,"van"),fmt.forEach(t),yQo=r(b9e," \u2014 "),jV=n(b9e,"A",{href:!0});var mmt=s(jV);LQo=r(mmt,"VanForImageClassification"),mmt.forEach(t),xQo=r(b9e," (VAN model)"),b9e.forEach(t),$Qo=i(Ee),Uv=n(Ee,"LI",{});var v9e=s(Uv);Nhe=n(v9e,"STRONG",{});var gmt=s(Nhe);kQo=r(gmt,"vit"),gmt.forEach(t),SQo=r(v9e," \u2014 "),DV=n(v9e,"A",{href:!0});var hmt=s(DV);RQo=r(hmt,"ViTForImageClassification"),hmt.forEach(t),BQo=r(v9e," (ViT model)"),v9e.forEach(t),Ee.forEach(t),PQo=i(ca),Jv=n(ca,"P",{});var F9e=s(Jv);IQo=r(F9e,"The model is set in evaluation mode by default using "),jhe=n(F9e,"CODE",{});var pmt=s(jhe);qQo=r(pmt,"model.eval()"),pmt.forEach(t),NQo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(F9e,"CODE",{});var umt=s(Dhe);jQo=r(umt,"model.train()"),umt.forEach(t),F9e.forEach(t),DQo=i(ca),T(Yv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),BIe=i(f),td=n(f,"H2",{class:!0});var NNe=s(td);Kv=n(NNe,"A",{id:!0,class:!0,href:!0});var _mt=s(Kv);Ghe=n(_mt,"SPAN",{});var bmt=s(Ghe);T(ky.$$.fragment,bmt),bmt.forEach(t),_mt.forEach(t),GQo=i(NNe),Ohe=n(NNe,"SPAN",{});var vmt=s(Ohe);OQo=r(vmt,"AutoModelForVision2Seq"),vmt.forEach(t),NNe.forEach(t),PIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Sy.$$.fragment,Ks),VQo=i(Ks),ad=n(Ks,"P",{});var IK=s(ad);XQo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GV=n(IK,"A",{href:!0});var Fmt=s(GV);zQo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),QQo=r(IK," class method or the "),OV=n(IK,"A",{href:!0});var Tmt=s(OV);WQo=r(Tmt,"from_config()"),Tmt.forEach(t),HQo=r(IK,` class
method.`),IK.forEach(t),UQo=i(Ks),Ry=n(Ks,"P",{});var jNe=s(Ry);JQo=r(jNe,"This class cannot be instantiated directly using "),Vhe=n(jNe,"CODE",{});var Mmt=s(Vhe);YQo=r(Mmt,"__init__()"),Mmt.forEach(t),KQo=r(jNe," (throws an error)."),jNe.forEach(t),ZQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var AA=s(ht);T(By.$$.fragment,AA),eWo=i(AA),Xhe=n(AA,"P",{});var Emt=s(Xhe);oWo=r(Emt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Emt.forEach(t),rWo=i(AA),nd=n(AA,"P",{});var qK=s(nd);tWo=r(qK,`Note:
Loading a model from its configuration file does `),zhe=n(qK,"STRONG",{});var Cmt=s(zhe);aWo=r(Cmt,"not"),Cmt.forEach(t),nWo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(qK,"A",{href:!0});var wmt=s(VV);sWo=r(wmt,"from_pretrained()"),wmt.forEach(t),lWo=r(qK," to load the model weights."),qK.forEach(t),iWo=i(AA),T(Zv.$$.fragment,AA),AA.forEach(t),dWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Py.$$.fragment,fa),cWo=i(fa),Qhe=n(fa,"P",{});var Amt=s(Qhe);fWo=r(Amt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Amt.forEach(t),mWo=i(fa),Na=n(fa,"P",{});var yA=s(Na);gWo=r(yA,"The model class to instantiate is selected based on the "),Whe=n(yA,"CODE",{});var ymt=s(Whe);hWo=r(ymt,"model_type"),ymt.forEach(t),pWo=r(yA,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(yA,"CODE",{});var Lmt=s(Hhe);uWo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),_Wo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(yA,"CODE",{});var xmt=s(Uhe);bWo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),vWo=r(yA,":"),yA.forEach(t),FWo=i(fa),Jhe=n(fa,"UL",{});var $mt=s(Jhe);eF=n($mt,"LI",{});var T9e=s(eF);Yhe=n(T9e,"STRONG",{});var kmt=s(Yhe);TWo=r(kmt,"vision-encoder-decoder"),kmt.forEach(t),MWo=r(T9e," \u2014 "),XV=n(T9e,"A",{href:!0});var Smt=s(XV);EWo=r(Smt,"VisionEncoderDecoderModel"),Smt.forEach(t),CWo=r(T9e," (Vision Encoder decoder model)"),T9e.forEach(t),$mt.forEach(t),wWo=i(fa),oF=n(fa,"P",{});var M9e=s(oF);AWo=r(M9e,"The model is set in evaluation mode by default using "),Khe=n(M9e,"CODE",{});var Rmt=s(Khe);yWo=r(Rmt,"model.eval()"),Rmt.forEach(t),LWo=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(M9e,"CODE",{});var Bmt=s(Zhe);xWo=r(Bmt,"model.train()"),Bmt.forEach(t),M9e.forEach(t),$Wo=i(fa),T(rF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),IIe=i(f),sd=n(f,"H2",{class:!0});var DNe=s(sd);tF=n(DNe,"A",{id:!0,class:!0,href:!0});var Pmt=s(tF);epe=n(Pmt,"SPAN",{});var Imt=s(epe);T(Iy.$$.fragment,Imt),Imt.forEach(t),Pmt.forEach(t),kWo=i(DNe),ope=n(DNe,"SPAN",{});var qmt=s(ope);SWo=r(qmt,"AutoModelForAudioClassification"),qmt.forEach(t),DNe.forEach(t),qIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(qy.$$.fragment,Zs),RWo=i(Zs),ld=n(Zs,"P",{});var NK=s(ld);BWo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zV=n(NK,"A",{href:!0});var Nmt=s(zV);PWo=r(Nmt,"from_pretrained()"),Nmt.forEach(t),IWo=r(NK," class method or the "),QV=n(NK,"A",{href:!0});var jmt=s(QV);qWo=r(jmt,"from_config()"),jmt.forEach(t),NWo=r(NK,` class
method.`),NK.forEach(t),jWo=i(Zs),Ny=n(Zs,"P",{});var GNe=s(Ny);DWo=r(GNe,"This class cannot be instantiated directly using "),rpe=n(GNe,"CODE",{});var Dmt=s(rpe);GWo=r(Dmt,"__init__()"),Dmt.forEach(t),OWo=r(GNe," (throws an error)."),GNe.forEach(t),VWo=i(Zs),pt=n(Zs,"DIV",{class:!0});var LA=s(pt);T(jy.$$.fragment,LA),XWo=i(LA),tpe=n(LA,"P",{});var Gmt=s(tpe);zWo=r(Gmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Gmt.forEach(t),QWo=i(LA),id=n(LA,"P",{});var jK=s(id);WWo=r(jK,`Note:
Loading a model from its configuration file does `),ape=n(jK,"STRONG",{});var Omt=s(ape);HWo=r(Omt,"not"),Omt.forEach(t),UWo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(jK,"A",{href:!0});var Vmt=s(WV);JWo=r(Vmt,"from_pretrained()"),Vmt.forEach(t),YWo=r(jK," to load the model weights."),jK.forEach(t),KWo=i(LA),T(aF.$$.fragment,LA),LA.forEach(t),ZWo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Dy.$$.fragment,ma),eHo=i(ma),npe=n(ma,"P",{});var Xmt=s(npe);oHo=r(Xmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xmt.forEach(t),rHo=i(ma),ja=n(ma,"P",{});var xA=s(ja);tHo=r(xA,"The model class to instantiate is selected based on the "),spe=n(xA,"CODE",{});var zmt=s(spe);aHo=r(zmt,"model_type"),zmt.forEach(t),nHo=r(xA,` property of the config object (either
passed as an argument or loaded from `),lpe=n(xA,"CODE",{});var Qmt=s(lpe);sHo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),lHo=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(xA,"CODE",{});var Wmt=s(ipe);iHo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),dHo=r(xA,":"),xA.forEach(t),cHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);nF=n(bo,"LI",{});var E9e=s(nF);dpe=n(E9e,"STRONG",{});var Hmt=s(dpe);fHo=r(Hmt,"data2vec-audio"),Hmt.forEach(t),mHo=r(E9e," \u2014 "),HV=n(E9e,"A",{href:!0});var Umt=s(HV);gHo=r(Umt,"Data2VecAudioForSequenceClassification"),Umt.forEach(t),hHo=r(E9e," (Data2VecAudio model)"),E9e.forEach(t),pHo=i(bo),sF=n(bo,"LI",{});var C9e=s(sF);cpe=n(C9e,"STRONG",{});var Jmt=s(cpe);uHo=r(Jmt,"hubert"),Jmt.forEach(t),_Ho=r(C9e," \u2014 "),UV=n(C9e,"A",{href:!0});var Ymt=s(UV);bHo=r(Ymt,"HubertForSequenceClassification"),Ymt.forEach(t),vHo=r(C9e," (Hubert model)"),C9e.forEach(t),FHo=i(bo),lF=n(bo,"LI",{});var w9e=s(lF);fpe=n(w9e,"STRONG",{});var Kmt=s(fpe);THo=r(Kmt,"sew"),Kmt.forEach(t),MHo=r(w9e," \u2014 "),JV=n(w9e,"A",{href:!0});var Zmt=s(JV);EHo=r(Zmt,"SEWForSequenceClassification"),Zmt.forEach(t),CHo=r(w9e," (SEW model)"),w9e.forEach(t),wHo=i(bo),iF=n(bo,"LI",{});var A9e=s(iF);mpe=n(A9e,"STRONG",{});var egt=s(mpe);AHo=r(egt,"sew-d"),egt.forEach(t),yHo=r(A9e," \u2014 "),YV=n(A9e,"A",{href:!0});var ogt=s(YV);LHo=r(ogt,"SEWDForSequenceClassification"),ogt.forEach(t),xHo=r(A9e," (SEW-D model)"),A9e.forEach(t),$Ho=i(bo),dF=n(bo,"LI",{});var y9e=s(dF);gpe=n(y9e,"STRONG",{});var rgt=s(gpe);kHo=r(rgt,"unispeech"),rgt.forEach(t),SHo=r(y9e," \u2014 "),KV=n(y9e,"A",{href:!0});var tgt=s(KV);RHo=r(tgt,"UniSpeechForSequenceClassification"),tgt.forEach(t),BHo=r(y9e," (UniSpeech model)"),y9e.forEach(t),PHo=i(bo),cF=n(bo,"LI",{});var L9e=s(cF);hpe=n(L9e,"STRONG",{});var agt=s(hpe);IHo=r(agt,"unispeech-sat"),agt.forEach(t),qHo=r(L9e," \u2014 "),ZV=n(L9e,"A",{href:!0});var ngt=s(ZV);NHo=r(ngt,"UniSpeechSatForSequenceClassification"),ngt.forEach(t),jHo=r(L9e," (UniSpeechSat model)"),L9e.forEach(t),DHo=i(bo),fF=n(bo,"LI",{});var x9e=s(fF);ppe=n(x9e,"STRONG",{});var sgt=s(ppe);GHo=r(sgt,"wav2vec2"),sgt.forEach(t),OHo=r(x9e," \u2014 "),eX=n(x9e,"A",{href:!0});var lgt=s(eX);VHo=r(lgt,"Wav2Vec2ForSequenceClassification"),lgt.forEach(t),XHo=r(x9e," (Wav2Vec2 model)"),x9e.forEach(t),zHo=i(bo),mF=n(bo,"LI",{});var $9e=s(mF);upe=n($9e,"STRONG",{});var igt=s(upe);QHo=r(igt,"wavlm"),igt.forEach(t),WHo=r($9e," \u2014 "),oX=n($9e,"A",{href:!0});var dgt=s(oX);HHo=r(dgt,"WavLMForSequenceClassification"),dgt.forEach(t),UHo=r($9e," (WavLM model)"),$9e.forEach(t),bo.forEach(t),JHo=i(ma),gF=n(ma,"P",{});var k9e=s(gF);YHo=r(k9e,"The model is set in evaluation mode by default using "),_pe=n(k9e,"CODE",{});var cgt=s(_pe);KHo=r(cgt,"model.eval()"),cgt.forEach(t),ZHo=r(k9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(k9e,"CODE",{});var fgt=s(bpe);eUo=r(fgt,"model.train()"),fgt.forEach(t),k9e.forEach(t),oUo=i(ma),T(hF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),NIe=i(f),dd=n(f,"H2",{class:!0});var ONe=s(dd);pF=n(ONe,"A",{id:!0,class:!0,href:!0});var mgt=s(pF);vpe=n(mgt,"SPAN",{});var ggt=s(vpe);T(Gy.$$.fragment,ggt),ggt.forEach(t),mgt.forEach(t),rUo=i(ONe),Fpe=n(ONe,"SPAN",{});var hgt=s(Fpe);tUo=r(hgt,"AutoModelForAudioFrameClassification"),hgt.forEach(t),ONe.forEach(t),jIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(Oy.$$.fragment,el),aUo=i(el),cd=n(el,"P",{});var DK=s(cd);nUo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rX=n(DK,"A",{href:!0});var pgt=s(rX);sUo=r(pgt,"from_pretrained()"),pgt.forEach(t),lUo=r(DK," class method or the "),tX=n(DK,"A",{href:!0});var ugt=s(tX);iUo=r(ugt,"from_config()"),ugt.forEach(t),dUo=r(DK,` class
method.`),DK.forEach(t),cUo=i(el),Vy=n(el,"P",{});var VNe=s(Vy);fUo=r(VNe,"This class cannot be instantiated directly using "),Tpe=n(VNe,"CODE",{});var _gt=s(Tpe);mUo=r(_gt,"__init__()"),_gt.forEach(t),gUo=r(VNe," (throws an error)."),VNe.forEach(t),hUo=i(el),ut=n(el,"DIV",{class:!0});var $A=s(ut);T(Xy.$$.fragment,$A),pUo=i($A),Mpe=n($A,"P",{});var bgt=s(Mpe);uUo=r(bgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bgt.forEach(t),_Uo=i($A),fd=n($A,"P",{});var GK=s(fd);bUo=r(GK,`Note:
Loading a model from its configuration file does `),Epe=n(GK,"STRONG",{});var vgt=s(Epe);vUo=r(vgt,"not"),vgt.forEach(t),FUo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(GK,"A",{href:!0});var Fgt=s(aX);TUo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),MUo=r(GK," to load the model weights."),GK.forEach(t),EUo=i($A),T(uF.$$.fragment,$A),$A.forEach(t),CUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(zy.$$.fragment,ga),wUo=i(ga),Cpe=n(ga,"P",{});var Tgt=s(Cpe);AUo=r(Tgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tgt.forEach(t),yUo=i(ga),Da=n(ga,"P",{});var kA=s(Da);LUo=r(kA,"The model class to instantiate is selected based on the "),wpe=n(kA,"CODE",{});var Mgt=s(wpe);xUo=r(Mgt,"model_type"),Mgt.forEach(t),$Uo=r(kA,` property of the config object (either
passed as an argument or loaded from `),Ape=n(kA,"CODE",{});var Egt=s(Ape);kUo=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),SUo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(kA,"CODE",{});var Cgt=s(ype);RUo=r(Cgt,"pretrained_model_name_or_path"),Cgt.forEach(t),BUo=r(kA,":"),kA.forEach(t),PUo=i(ga),Ga=n(ga,"UL",{});var SA=s(Ga);_F=n(SA,"LI",{});var S9e=s(_F);Lpe=n(S9e,"STRONG",{});var wgt=s(Lpe);IUo=r(wgt,"data2vec-audio"),wgt.forEach(t),qUo=r(S9e," \u2014 "),nX=n(S9e,"A",{href:!0});var Agt=s(nX);NUo=r(Agt,"Data2VecAudioForAudioFrameClassification"),Agt.forEach(t),jUo=r(S9e," (Data2VecAudio model)"),S9e.forEach(t),DUo=i(SA),bF=n(SA,"LI",{});var R9e=s(bF);xpe=n(R9e,"STRONG",{});var ygt=s(xpe);GUo=r(ygt,"unispeech-sat"),ygt.forEach(t),OUo=r(R9e," \u2014 "),sX=n(R9e,"A",{href:!0});var Lgt=s(sX);VUo=r(Lgt,"UniSpeechSatForAudioFrameClassification"),Lgt.forEach(t),XUo=r(R9e," (UniSpeechSat model)"),R9e.forEach(t),zUo=i(SA),vF=n(SA,"LI",{});var B9e=s(vF);$pe=n(B9e,"STRONG",{});var xgt=s($pe);QUo=r(xgt,"wav2vec2"),xgt.forEach(t),WUo=r(B9e," \u2014 "),lX=n(B9e,"A",{href:!0});var $gt=s(lX);HUo=r($gt,"Wav2Vec2ForAudioFrameClassification"),$gt.forEach(t),UUo=r(B9e," (Wav2Vec2 model)"),B9e.forEach(t),JUo=i(SA),FF=n(SA,"LI",{});var P9e=s(FF);kpe=n(P9e,"STRONG",{});var kgt=s(kpe);YUo=r(kgt,"wavlm"),kgt.forEach(t),KUo=r(P9e," \u2014 "),iX=n(P9e,"A",{href:!0});var Sgt=s(iX);ZUo=r(Sgt,"WavLMForAudioFrameClassification"),Sgt.forEach(t),eJo=r(P9e," (WavLM model)"),P9e.forEach(t),SA.forEach(t),oJo=i(ga),TF=n(ga,"P",{});var I9e=s(TF);rJo=r(I9e,"The model is set in evaluation mode by default using "),Spe=n(I9e,"CODE",{});var Rgt=s(Spe);tJo=r(Rgt,"model.eval()"),Rgt.forEach(t),aJo=r(I9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(I9e,"CODE",{});var Bgt=s(Rpe);nJo=r(Bgt,"model.train()"),Bgt.forEach(t),I9e.forEach(t),sJo=i(ga),T(MF.$$.fragment,ga),ga.forEach(t),el.forEach(t),DIe=i(f),md=n(f,"H2",{class:!0});var XNe=s(md);EF=n(XNe,"A",{id:!0,class:!0,href:!0});var Pgt=s(EF);Bpe=n(Pgt,"SPAN",{});var Igt=s(Bpe);T(Qy.$$.fragment,Igt),Igt.forEach(t),Pgt.forEach(t),lJo=i(XNe),Ppe=n(XNe,"SPAN",{});var qgt=s(Ppe);iJo=r(qgt,"AutoModelForCTC"),qgt.forEach(t),XNe.forEach(t),GIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Wy.$$.fragment,ol),dJo=i(ol),gd=n(ol,"P",{});var OK=s(gd);cJo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dX=n(OK,"A",{href:!0});var Ngt=s(dX);fJo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),mJo=r(OK," class method or the "),cX=n(OK,"A",{href:!0});var jgt=s(cX);gJo=r(jgt,"from_config()"),jgt.forEach(t),hJo=r(OK,` class
method.`),OK.forEach(t),pJo=i(ol),Hy=n(ol,"P",{});var zNe=s(Hy);uJo=r(zNe,"This class cannot be instantiated directly using "),Ipe=n(zNe,"CODE",{});var Dgt=s(Ipe);_Jo=r(Dgt,"__init__()"),Dgt.forEach(t),bJo=r(zNe," (throws an error)."),zNe.forEach(t),vJo=i(ol),_t=n(ol,"DIV",{class:!0});var RA=s(_t);T(Uy.$$.fragment,RA),FJo=i(RA),qpe=n(RA,"P",{});var Ggt=s(qpe);TJo=r(Ggt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ggt.forEach(t),MJo=i(RA),hd=n(RA,"P",{});var VK=s(hd);EJo=r(VK,`Note:
Loading a model from its configuration file does `),Npe=n(VK,"STRONG",{});var Ogt=s(Npe);CJo=r(Ogt,"not"),Ogt.forEach(t),wJo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(VK,"A",{href:!0});var Vgt=s(fX);AJo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),yJo=r(VK," to load the model weights."),VK.forEach(t),LJo=i(RA),T(CF.$$.fragment,RA),RA.forEach(t),xJo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Jy.$$.fragment,ha),$Jo=i(ha),jpe=n(ha,"P",{});var Xgt=s(jpe);kJo=r(Xgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Xgt.forEach(t),SJo=i(ha),Oa=n(ha,"P",{});var BA=s(Oa);RJo=r(BA,"The model class to instantiate is selected based on the "),Dpe=n(BA,"CODE",{});var zgt=s(Dpe);BJo=r(zgt,"model_type"),zgt.forEach(t),PJo=r(BA,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(BA,"CODE",{});var Qgt=s(Gpe);IJo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),qJo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(BA,"CODE",{});var Wgt=s(Ope);NJo=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),jJo=r(BA,":"),BA.forEach(t),DJo=i(ha),je=n(ha,"UL",{});var vo=s(je);wF=n(vo,"LI",{});var q9e=s(wF);Vpe=n(q9e,"STRONG",{});var Hgt=s(Vpe);GJo=r(Hgt,"data2vec-audio"),Hgt.forEach(t),OJo=r(q9e," \u2014 "),mX=n(q9e,"A",{href:!0});var Ugt=s(mX);VJo=r(Ugt,"Data2VecAudioForCTC"),Ugt.forEach(t),XJo=r(q9e," (Data2VecAudio model)"),q9e.forEach(t),zJo=i(vo),AF=n(vo,"LI",{});var N9e=s(AF);Xpe=n(N9e,"STRONG",{});var Jgt=s(Xpe);QJo=r(Jgt,"hubert"),Jgt.forEach(t),WJo=r(N9e," \u2014 "),gX=n(N9e,"A",{href:!0});var Ygt=s(gX);HJo=r(Ygt,"HubertForCTC"),Ygt.forEach(t),UJo=r(N9e," (Hubert model)"),N9e.forEach(t),JJo=i(vo),yF=n(vo,"LI",{});var j9e=s(yF);zpe=n(j9e,"STRONG",{});var Kgt=s(zpe);YJo=r(Kgt,"sew"),Kgt.forEach(t),KJo=r(j9e," \u2014 "),hX=n(j9e,"A",{href:!0});var Zgt=s(hX);ZJo=r(Zgt,"SEWForCTC"),Zgt.forEach(t),eYo=r(j9e," (SEW model)"),j9e.forEach(t),oYo=i(vo),LF=n(vo,"LI",{});var D9e=s(LF);Qpe=n(D9e,"STRONG",{});var eht=s(Qpe);rYo=r(eht,"sew-d"),eht.forEach(t),tYo=r(D9e," \u2014 "),pX=n(D9e,"A",{href:!0});var oht=s(pX);aYo=r(oht,"SEWDForCTC"),oht.forEach(t),nYo=r(D9e," (SEW-D model)"),D9e.forEach(t),sYo=i(vo),xF=n(vo,"LI",{});var G9e=s(xF);Wpe=n(G9e,"STRONG",{});var rht=s(Wpe);lYo=r(rht,"unispeech"),rht.forEach(t),iYo=r(G9e," \u2014 "),uX=n(G9e,"A",{href:!0});var tht=s(uX);dYo=r(tht,"UniSpeechForCTC"),tht.forEach(t),cYo=r(G9e," (UniSpeech model)"),G9e.forEach(t),fYo=i(vo),$F=n(vo,"LI",{});var O9e=s($F);Hpe=n(O9e,"STRONG",{});var aht=s(Hpe);mYo=r(aht,"unispeech-sat"),aht.forEach(t),gYo=r(O9e," \u2014 "),_X=n(O9e,"A",{href:!0});var nht=s(_X);hYo=r(nht,"UniSpeechSatForCTC"),nht.forEach(t),pYo=r(O9e," (UniSpeechSat model)"),O9e.forEach(t),uYo=i(vo),kF=n(vo,"LI",{});var V9e=s(kF);Upe=n(V9e,"STRONG",{});var sht=s(Upe);_Yo=r(sht,"wav2vec2"),sht.forEach(t),bYo=r(V9e," \u2014 "),bX=n(V9e,"A",{href:!0});var lht=s(bX);vYo=r(lht,"Wav2Vec2ForCTC"),lht.forEach(t),FYo=r(V9e," (Wav2Vec2 model)"),V9e.forEach(t),TYo=i(vo),SF=n(vo,"LI",{});var X9e=s(SF);Jpe=n(X9e,"STRONG",{});var iht=s(Jpe);MYo=r(iht,"wavlm"),iht.forEach(t),EYo=r(X9e," \u2014 "),vX=n(X9e,"A",{href:!0});var dht=s(vX);CYo=r(dht,"WavLMForCTC"),dht.forEach(t),wYo=r(X9e," (WavLM model)"),X9e.forEach(t),vo.forEach(t),AYo=i(ha),RF=n(ha,"P",{});var z9e=s(RF);yYo=r(z9e,"The model is set in evaluation mode by default using "),Ype=n(z9e,"CODE",{});var cht=s(Ype);LYo=r(cht,"model.eval()"),cht.forEach(t),xYo=r(z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kpe=n(z9e,"CODE",{});var fht=s(Kpe);$Yo=r(fht,"model.train()"),fht.forEach(t),z9e.forEach(t),kYo=i(ha),T(BF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),OIe=i(f),pd=n(f,"H2",{class:!0});var QNe=s(pd);PF=n(QNe,"A",{id:!0,class:!0,href:!0});var mht=s(PF);Zpe=n(mht,"SPAN",{});var ght=s(Zpe);T(Yy.$$.fragment,ght),ght.forEach(t),mht.forEach(t),SYo=i(QNe),eue=n(QNe,"SPAN",{});var hht=s(eue);RYo=r(hht,"AutoModelForSpeechSeq2Seq"),hht.forEach(t),QNe.forEach(t),VIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Ky.$$.fragment,rl),BYo=i(rl),ud=n(rl,"P",{});var XK=s(ud);PYo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FX=n(XK,"A",{href:!0});var pht=s(FX);IYo=r(pht,"from_pretrained()"),pht.forEach(t),qYo=r(XK," class method or the "),TX=n(XK,"A",{href:!0});var uht=s(TX);NYo=r(uht,"from_config()"),uht.forEach(t),jYo=r(XK,` class
method.`),XK.forEach(t),DYo=i(rl),Zy=n(rl,"P",{});var WNe=s(Zy);GYo=r(WNe,"This class cannot be instantiated directly using "),oue=n(WNe,"CODE",{});var _ht=s(oue);OYo=r(_ht,"__init__()"),_ht.forEach(t),VYo=r(WNe," (throws an error)."),WNe.forEach(t),XYo=i(rl),bt=n(rl,"DIV",{class:!0});var PA=s(bt);T(eL.$$.fragment,PA),zYo=i(PA),rue=n(PA,"P",{});var bht=s(rue);QYo=r(bht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bht.forEach(t),WYo=i(PA),_d=n(PA,"P",{});var zK=s(_d);HYo=r(zK,`Note:
Loading a model from its configuration file does `),tue=n(zK,"STRONG",{});var vht=s(tue);UYo=r(vht,"not"),vht.forEach(t),JYo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(zK,"A",{href:!0});var Fht=s(MX);YYo=r(Fht,"from_pretrained()"),Fht.forEach(t),KYo=r(zK," to load the model weights."),zK.forEach(t),ZYo=i(PA),T(IF.$$.fragment,PA),PA.forEach(t),eKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(oL.$$.fragment,pa),oKo=i(pa),aue=n(pa,"P",{});var Tht=s(aue);rKo=r(Tht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Tht.forEach(t),tKo=i(pa),Va=n(pa,"P",{});var IA=s(Va);aKo=r(IA,"The model class to instantiate is selected based on the "),nue=n(IA,"CODE",{});var Mht=s(nue);nKo=r(Mht,"model_type"),Mht.forEach(t),sKo=r(IA,` property of the config object (either
passed as an argument or loaded from `),sue=n(IA,"CODE",{});var Eht=s(sue);lKo=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),iKo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(IA,"CODE",{});var Cht=s(lue);dKo=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),cKo=r(IA,":"),IA.forEach(t),fKo=i(pa),rL=n(pa,"UL",{});var HNe=s(rL);qF=n(HNe,"LI",{});var Q9e=s(qF);iue=n(Q9e,"STRONG",{});var wht=s(iue);mKo=r(wht,"speech-encoder-decoder"),wht.forEach(t),gKo=r(Q9e," \u2014 "),EX=n(Q9e,"A",{href:!0});var Aht=s(EX);hKo=r(Aht,"SpeechEncoderDecoderModel"),Aht.forEach(t),pKo=r(Q9e," (Speech Encoder decoder model)"),Q9e.forEach(t),uKo=i(HNe),NF=n(HNe,"LI",{});var W9e=s(NF);due=n(W9e,"STRONG",{});var yht=s(due);_Ko=r(yht,"speech_to_text"),yht.forEach(t),bKo=r(W9e," \u2014 "),CX=n(W9e,"A",{href:!0});var Lht=s(CX);vKo=r(Lht,"Speech2TextForConditionalGeneration"),Lht.forEach(t),FKo=r(W9e," (Speech2Text model)"),W9e.forEach(t),HNe.forEach(t),TKo=i(pa),jF=n(pa,"P",{});var H9e=s(jF);MKo=r(H9e,"The model is set in evaluation mode by default using "),cue=n(H9e,"CODE",{});var xht=s(cue);EKo=r(xht,"model.eval()"),xht.forEach(t),CKo=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(H9e,"CODE",{});var $ht=s(fue);wKo=r($ht,"model.train()"),$ht.forEach(t),H9e.forEach(t),AKo=i(pa),T(DF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),XIe=i(f),bd=n(f,"H2",{class:!0});var UNe=s(bd);GF=n(UNe,"A",{id:!0,class:!0,href:!0});var kht=s(GF);mue=n(kht,"SPAN",{});var Sht=s(mue);T(tL.$$.fragment,Sht),Sht.forEach(t),kht.forEach(t),yKo=i(UNe),gue=n(UNe,"SPAN",{});var Rht=s(gue);LKo=r(Rht,"AutoModelForAudioXVector"),Rht.forEach(t),UNe.forEach(t),zIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(aL.$$.fragment,tl),xKo=i(tl),vd=n(tl,"P",{});var QK=s(vd);$Ko=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wX=n(QK,"A",{href:!0});var Bht=s(wX);kKo=r(Bht,"from_pretrained()"),Bht.forEach(t),SKo=r(QK," class method or the "),AX=n(QK,"A",{href:!0});var Pht=s(AX);RKo=r(Pht,"from_config()"),Pht.forEach(t),BKo=r(QK,` class
method.`),QK.forEach(t),PKo=i(tl),nL=n(tl,"P",{});var JNe=s(nL);IKo=r(JNe,"This class cannot be instantiated directly using "),hue=n(JNe,"CODE",{});var Iht=s(hue);qKo=r(Iht,"__init__()"),Iht.forEach(t),NKo=r(JNe," (throws an error)."),JNe.forEach(t),jKo=i(tl),vt=n(tl,"DIV",{class:!0});var qA=s(vt);T(sL.$$.fragment,qA),DKo=i(qA),pue=n(qA,"P",{});var qht=s(pue);GKo=r(qht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qht.forEach(t),OKo=i(qA),Fd=n(qA,"P",{});var WK=s(Fd);VKo=r(WK,`Note:
Loading a model from its configuration file does `),uue=n(WK,"STRONG",{});var Nht=s(uue);XKo=r(Nht,"not"),Nht.forEach(t),zKo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(WK,"A",{href:!0});var jht=s(yX);QKo=r(jht,"from_pretrained()"),jht.forEach(t),WKo=r(WK," to load the model weights."),WK.forEach(t),HKo=i(qA),T(OF.$$.fragment,qA),qA.forEach(t),UKo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(lL.$$.fragment,ua),JKo=i(ua),_ue=n(ua,"P",{});var Dht=s(_ue);YKo=r(Dht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Dht.forEach(t),KKo=i(ua),Xa=n(ua,"P",{});var NA=s(Xa);ZKo=r(NA,"The model class to instantiate is selected based on the "),bue=n(NA,"CODE",{});var Ght=s(bue);eZo=r(Ght,"model_type"),Ght.forEach(t),oZo=r(NA,` property of the config object (either
passed as an argument or loaded from `),vue=n(NA,"CODE",{});var Oht=s(vue);rZo=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),tZo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(NA,"CODE",{});var Vht=s(Fue);aZo=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),nZo=r(NA,":"),NA.forEach(t),sZo=i(ua),za=n(ua,"UL",{});var jA=s(za);VF=n(jA,"LI",{});var U9e=s(VF);Tue=n(U9e,"STRONG",{});var Xht=s(Tue);lZo=r(Xht,"data2vec-audio"),Xht.forEach(t),iZo=r(U9e," \u2014 "),LX=n(U9e,"A",{href:!0});var zht=s(LX);dZo=r(zht,"Data2VecAudioForXVector"),zht.forEach(t),cZo=r(U9e," (Data2VecAudio model)"),U9e.forEach(t),fZo=i(jA),XF=n(jA,"LI",{});var J9e=s(XF);Mue=n(J9e,"STRONG",{});var Qht=s(Mue);mZo=r(Qht,"unispeech-sat"),Qht.forEach(t),gZo=r(J9e," \u2014 "),xX=n(J9e,"A",{href:!0});var Wht=s(xX);hZo=r(Wht,"UniSpeechSatForXVector"),Wht.forEach(t),pZo=r(J9e," (UniSpeechSat model)"),J9e.forEach(t),uZo=i(jA),zF=n(jA,"LI",{});var Y9e=s(zF);Eue=n(Y9e,"STRONG",{});var Hht=s(Eue);_Zo=r(Hht,"wav2vec2"),Hht.forEach(t),bZo=r(Y9e," \u2014 "),$X=n(Y9e,"A",{href:!0});var Uht=s($X);vZo=r(Uht,"Wav2Vec2ForXVector"),Uht.forEach(t),FZo=r(Y9e," (Wav2Vec2 model)"),Y9e.forEach(t),TZo=i(jA),QF=n(jA,"LI",{});var K9e=s(QF);Cue=n(K9e,"STRONG",{});var Jht=s(Cue);MZo=r(Jht,"wavlm"),Jht.forEach(t),EZo=r(K9e," \u2014 "),kX=n(K9e,"A",{href:!0});var Yht=s(kX);CZo=r(Yht,"WavLMForXVector"),Yht.forEach(t),wZo=r(K9e," (WavLM model)"),K9e.forEach(t),jA.forEach(t),AZo=i(ua),WF=n(ua,"P",{});var Z9e=s(WF);yZo=r(Z9e,"The model is set in evaluation mode by default using "),wue=n(Z9e,"CODE",{});var Kht=s(wue);LZo=r(Kht,"model.eval()"),Kht.forEach(t),xZo=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(Z9e,"CODE",{});var Zht=s(Aue);$Zo=r(Zht,"model.train()"),Zht.forEach(t),Z9e.forEach(t),kZo=i(ua),T(HF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),QIe=i(f),Td=n(f,"H2",{class:!0});var YNe=s(Td);UF=n(YNe,"A",{id:!0,class:!0,href:!0});var ept=s(UF);yue=n(ept,"SPAN",{});var opt=s(yue);T(iL.$$.fragment,opt),opt.forEach(t),ept.forEach(t),SZo=i(YNe),Lue=n(YNe,"SPAN",{});var rpt=s(Lue);RZo=r(rpt,"AutoModelForMaskedImageModeling"),rpt.forEach(t),YNe.forEach(t),WIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(dL.$$.fragment,al),BZo=i(al),Md=n(al,"P",{});var HK=s(Md);PZo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),SX=n(HK,"A",{href:!0});var tpt=s(SX);IZo=r(tpt,"from_pretrained()"),tpt.forEach(t),qZo=r(HK," class method or the "),RX=n(HK,"A",{href:!0});var apt=s(RX);NZo=r(apt,"from_config()"),apt.forEach(t),jZo=r(HK,` class
method.`),HK.forEach(t),DZo=i(al),cL=n(al,"P",{});var KNe=s(cL);GZo=r(KNe,"This class cannot be instantiated directly using "),xue=n(KNe,"CODE",{});var npt=s(xue);OZo=r(npt,"__init__()"),npt.forEach(t),VZo=r(KNe," (throws an error)."),KNe.forEach(t),XZo=i(al),Ft=n(al,"DIV",{class:!0});var DA=s(Ft);T(fL.$$.fragment,DA),zZo=i(DA),$ue=n(DA,"P",{});var spt=s($ue);QZo=r(spt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),spt.forEach(t),WZo=i(DA),Ed=n(DA,"P",{});var UK=s(Ed);HZo=r(UK,`Note:
Loading a model from its configuration file does `),kue=n(UK,"STRONG",{});var lpt=s(kue);UZo=r(lpt,"not"),lpt.forEach(t),JZo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(UK,"A",{href:!0});var ipt=s(BX);YZo=r(ipt,"from_pretrained()"),ipt.forEach(t),KZo=r(UK," to load the model weights."),UK.forEach(t),ZZo=i(DA),T(JF.$$.fragment,DA),DA.forEach(t),eer=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(mL.$$.fragment,_a),oer=i(_a),Sue=n(_a,"P",{});var dpt=s(Sue);rer=r(dpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dpt.forEach(t),ter=i(_a),Qa=n(_a,"P",{});var GA=s(Qa);aer=r(GA,"The model class to instantiate is selected based on the "),Rue=n(GA,"CODE",{});var cpt=s(Rue);ner=r(cpt,"model_type"),cpt.forEach(t),ser=r(GA,` property of the config object (either
passed as an argument or loaded from `),Bue=n(GA,"CODE",{});var fpt=s(Bue);ler=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),ier=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(GA,"CODE",{});var mpt=s(Pue);der=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),cer=r(GA,":"),GA.forEach(t),fer=i(_a),Cd=n(_a,"UL",{});var JK=s(Cd);YF=n(JK,"LI",{});var e$e=s(YF);Iue=n(e$e,"STRONG",{});var gpt=s(Iue);mer=r(gpt,"deit"),gpt.forEach(t),ger=r(e$e," \u2014 "),PX=n(e$e,"A",{href:!0});var hpt=s(PX);her=r(hpt,"DeiTForMaskedImageModeling"),hpt.forEach(t),per=r(e$e," (DeiT model)"),e$e.forEach(t),uer=i(JK),KF=n(JK,"LI",{});var o$e=s(KF);que=n(o$e,"STRONG",{});var ppt=s(que);_er=r(ppt,"swin"),ppt.forEach(t),ber=r(o$e," \u2014 "),IX=n(o$e,"A",{href:!0});var upt=s(IX);ver=r(upt,"SwinForMaskedImageModeling"),upt.forEach(t),Fer=r(o$e," (Swin model)"),o$e.forEach(t),Ter=i(JK),ZF=n(JK,"LI",{});var r$e=s(ZF);Nue=n(r$e,"STRONG",{});var _pt=s(Nue);Mer=r(_pt,"vit"),_pt.forEach(t),Eer=r(r$e," \u2014 "),qX=n(r$e,"A",{href:!0});var bpt=s(qX);Cer=r(bpt,"ViTForMaskedImageModeling"),bpt.forEach(t),wer=r(r$e," (ViT model)"),r$e.forEach(t),JK.forEach(t),Aer=i(_a),eT=n(_a,"P",{});var t$e=s(eT);yer=r(t$e,"The model is set in evaluation mode by default using "),jue=n(t$e,"CODE",{});var vpt=s(jue);Ler=r(vpt,"model.eval()"),vpt.forEach(t),xer=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(t$e,"CODE",{});var Fpt=s(Due);$er=r(Fpt,"model.train()"),Fpt.forEach(t),t$e.forEach(t),ker=i(_a),T(oT.$$.fragment,_a),_a.forEach(t),al.forEach(t),HIe=i(f),wd=n(f,"H2",{class:!0});var ZNe=s(wd);rT=n(ZNe,"A",{id:!0,class:!0,href:!0});var Tpt=s(rT);Gue=n(Tpt,"SPAN",{});var Mpt=s(Gue);T(gL.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),Ser=i(ZNe),Oue=n(ZNe,"SPAN",{});var Ept=s(Oue);Rer=r(Ept,"AutoModelForObjectDetection"),Ept.forEach(t),ZNe.forEach(t),UIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(hL.$$.fragment,nl),Ber=i(nl),Ad=n(nl,"P",{});var YK=s(Ad);Per=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NX=n(YK,"A",{href:!0});var Cpt=s(NX);Ier=r(Cpt,"from_pretrained()"),Cpt.forEach(t),qer=r(YK," class method or the "),jX=n(YK,"A",{href:!0});var wpt=s(jX);Ner=r(wpt,"from_config()"),wpt.forEach(t),jer=r(YK,` class
method.`),YK.forEach(t),Der=i(nl),pL=n(nl,"P",{});var eje=s(pL);Ger=r(eje,"This class cannot be instantiated directly using "),Vue=n(eje,"CODE",{});var Apt=s(Vue);Oer=r(Apt,"__init__()"),Apt.forEach(t),Ver=r(eje," (throws an error)."),eje.forEach(t),Xer=i(nl),Tt=n(nl,"DIV",{class:!0});var OA=s(Tt);T(uL.$$.fragment,OA),zer=i(OA),Xue=n(OA,"P",{});var ypt=s(Xue);Qer=r(ypt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ypt.forEach(t),Wer=i(OA),yd=n(OA,"P",{});var KK=s(yd);Her=r(KK,`Note:
Loading a model from its configuration file does `),zue=n(KK,"STRONG",{});var Lpt=s(zue);Uer=r(Lpt,"not"),Lpt.forEach(t),Jer=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(KK,"A",{href:!0});var xpt=s(DX);Yer=r(xpt,"from_pretrained()"),xpt.forEach(t),Ker=r(KK," to load the model weights."),KK.forEach(t),Zer=i(OA),T(tT.$$.fragment,OA),OA.forEach(t),eor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(_L.$$.fragment,ba),oor=i(ba),Que=n(ba,"P",{});var $pt=s(Que);ror=r($pt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$pt.forEach(t),tor=i(ba),Wa=n(ba,"P",{});var VA=s(Wa);aor=r(VA,"The model class to instantiate is selected based on the "),Wue=n(VA,"CODE",{});var kpt=s(Wue);nor=r(kpt,"model_type"),kpt.forEach(t),sor=r(VA,` property of the config object (either
passed as an argument or loaded from `),Hue=n(VA,"CODE",{});var Spt=s(Hue);lor=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),ior=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(VA,"CODE",{});var Rpt=s(Uue);dor=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),cor=r(VA,":"),VA.forEach(t),mor=i(ba),bL=n(ba,"UL",{});var oje=s(bL);aT=n(oje,"LI",{});var a$e=s(aT);Jue=n(a$e,"STRONG",{});var Bpt=s(Jue);gor=r(Bpt,"detr"),Bpt.forEach(t),hor=r(a$e," \u2014 "),GX=n(a$e,"A",{href:!0});var Ppt=s(GX);por=r(Ppt,"DetrForObjectDetection"),Ppt.forEach(t),uor=r(a$e," (DETR model)"),a$e.forEach(t),_or=i(oje),nT=n(oje,"LI",{});var n$e=s(nT);Yue=n(n$e,"STRONG",{});var Ipt=s(Yue);bor=r(Ipt,"yolos"),Ipt.forEach(t),vor=r(n$e," \u2014 "),OX=n(n$e,"A",{href:!0});var qpt=s(OX);For=r(qpt,"YolosForObjectDetection"),qpt.forEach(t),Tor=r(n$e," (YOLOS model)"),n$e.forEach(t),oje.forEach(t),Mor=i(ba),sT=n(ba,"P",{});var s$e=s(sT);Eor=r(s$e,"The model is set in evaluation mode by default using "),Kue=n(s$e,"CODE",{});var Npt=s(Kue);Cor=r(Npt,"model.eval()"),Npt.forEach(t),wor=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(s$e,"CODE",{});var jpt=s(Zue);Aor=r(jpt,"model.train()"),jpt.forEach(t),s$e.forEach(t),yor=i(ba),T(lT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),JIe=i(f),Ld=n(f,"H2",{class:!0});var rje=s(Ld);iT=n(rje,"A",{id:!0,class:!0,href:!0});var Dpt=s(iT);e_e=n(Dpt,"SPAN",{});var Gpt=s(e_e);T(vL.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),Lor=i(rje),o_e=n(rje,"SPAN",{});var Opt=s(o_e);xor=r(Opt,"AutoModelForImageSegmentation"),Opt.forEach(t),rje.forEach(t),YIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(FL.$$.fragment,sl),$or=i(sl),xd=n(sl,"P",{});var ZK=s(xd);kor=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VX=n(ZK,"A",{href:!0});var Vpt=s(VX);Sor=r(Vpt,"from_pretrained()"),Vpt.forEach(t),Ror=r(ZK," class method or the "),XX=n(ZK,"A",{href:!0});var Xpt=s(XX);Bor=r(Xpt,"from_config()"),Xpt.forEach(t),Por=r(ZK,` class
method.`),ZK.forEach(t),Ior=i(sl),TL=n(sl,"P",{});var tje=s(TL);qor=r(tje,"This class cannot be instantiated directly using "),r_e=n(tje,"CODE",{});var zpt=s(r_e);Nor=r(zpt,"__init__()"),zpt.forEach(t),jor=r(tje," (throws an error)."),tje.forEach(t),Dor=i(sl),Mt=n(sl,"DIV",{class:!0});var XA=s(Mt);T(ML.$$.fragment,XA),Gor=i(XA),t_e=n(XA,"P",{});var Qpt=s(t_e);Oor=r(Qpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qpt.forEach(t),Vor=i(XA),$d=n(XA,"P",{});var eZ=s($d);Xor=r(eZ,`Note:
Loading a model from its configuration file does `),a_e=n(eZ,"STRONG",{});var Wpt=s(a_e);zor=r(Wpt,"not"),Wpt.forEach(t),Qor=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(eZ,"A",{href:!0});var Hpt=s(zX);Wor=r(Hpt,"from_pretrained()"),Hpt.forEach(t),Hor=r(eZ," to load the model weights."),eZ.forEach(t),Uor=i(XA),T(dT.$$.fragment,XA),XA.forEach(t),Jor=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(EL.$$.fragment,va),Yor=i(va),n_e=n(va,"P",{});var Upt=s(n_e);Kor=r(Upt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Upt.forEach(t),Zor=i(va),Ha=n(va,"P",{});var zA=s(Ha);err=r(zA,"The model class to instantiate is selected based on the "),s_e=n(zA,"CODE",{});var Jpt=s(s_e);orr=r(Jpt,"model_type"),Jpt.forEach(t),rrr=r(zA,` property of the config object (either
passed as an argument or loaded from `),l_e=n(zA,"CODE",{});var Ypt=s(l_e);trr=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),arr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(zA,"CODE",{});var Kpt=s(i_e);nrr=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),srr=r(zA,":"),zA.forEach(t),lrr=i(va),d_e=n(va,"UL",{});var Zpt=s(d_e);cT=n(Zpt,"LI",{});var l$e=s(cT);c_e=n(l$e,"STRONG",{});var eut=s(c_e);irr=r(eut,"detr"),eut.forEach(t),drr=r(l$e," \u2014 "),QX=n(l$e,"A",{href:!0});var out=s(QX);crr=r(out,"DetrForSegmentation"),out.forEach(t),frr=r(l$e," (DETR model)"),l$e.forEach(t),Zpt.forEach(t),mrr=i(va),fT=n(va,"P",{});var i$e=s(fT);grr=r(i$e,"The model is set in evaluation mode by default using "),f_e=n(i$e,"CODE",{});var rut=s(f_e);hrr=r(rut,"model.eval()"),rut.forEach(t),prr=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n(i$e,"CODE",{});var tut=s(m_e);urr=r(tut,"model.train()"),tut.forEach(t),i$e.forEach(t),_rr=i(va),T(mT.$$.fragment,va),va.forEach(t),sl.forEach(t),KIe=i(f),kd=n(f,"H2",{class:!0});var aje=s(kd);gT=n(aje,"A",{id:!0,class:!0,href:!0});var aut=s(gT);g_e=n(aut,"SPAN",{});var nut=s(g_e);T(CL.$$.fragment,nut),nut.forEach(t),aut.forEach(t),brr=i(aje),h_e=n(aje,"SPAN",{});var sut=s(h_e);vrr=r(sut,"AutoModelForSemanticSegmentation"),sut.forEach(t),aje.forEach(t),ZIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(wL.$$.fragment,ll),Frr=i(ll),Sd=n(ll,"P",{});var oZ=s(Sd);Trr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WX=n(oZ,"A",{href:!0});var lut=s(WX);Mrr=r(lut,"from_pretrained()"),lut.forEach(t),Err=r(oZ," class method or the "),HX=n(oZ,"A",{href:!0});var iut=s(HX);Crr=r(iut,"from_config()"),iut.forEach(t),wrr=r(oZ,` class
method.`),oZ.forEach(t),Arr=i(ll),AL=n(ll,"P",{});var nje=s(AL);yrr=r(nje,"This class cannot be instantiated directly using "),p_e=n(nje,"CODE",{});var dut=s(p_e);Lrr=r(dut,"__init__()"),dut.forEach(t),xrr=r(nje," (throws an error)."),nje.forEach(t),$rr=i(ll),Et=n(ll,"DIV",{class:!0});var QA=s(Et);T(yL.$$.fragment,QA),krr=i(QA),u_e=n(QA,"P",{});var cut=s(u_e);Srr=r(cut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),cut.forEach(t),Rrr=i(QA),Rd=n(QA,"P",{});var rZ=s(Rd);Brr=r(rZ,`Note:
Loading a model from its configuration file does `),__e=n(rZ,"STRONG",{});var fut=s(__e);Prr=r(fut,"not"),fut.forEach(t),Irr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(rZ,"A",{href:!0});var mut=s(UX);qrr=r(mut,"from_pretrained()"),mut.forEach(t),Nrr=r(rZ," to load the model weights."),rZ.forEach(t),jrr=i(QA),T(hT.$$.fragment,QA),QA.forEach(t),Drr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(LL.$$.fragment,Fa),Grr=i(Fa),b_e=n(Fa,"P",{});var gut=s(b_e);Orr=r(gut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),gut.forEach(t),Vrr=i(Fa),Ua=n(Fa,"P",{});var WA=s(Ua);Xrr=r(WA,"The model class to instantiate is selected based on the "),v_e=n(WA,"CODE",{});var hut=s(v_e);zrr=r(hut,"model_type"),hut.forEach(t),Qrr=r(WA,` property of the config object (either
passed as an argument or loaded from `),F_e=n(WA,"CODE",{});var put=s(F_e);Wrr=r(put,"pretrained_model_name_or_path"),put.forEach(t),Hrr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(WA,"CODE",{});var uut=s(T_e);Urr=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),Jrr=r(WA,":"),WA.forEach(t),Yrr=i(Fa),Ja=n(Fa,"UL",{});var HA=s(Ja);pT=n(HA,"LI",{});var d$e=s(pT);M_e=n(d$e,"STRONG",{});var _ut=s(M_e);Krr=r(_ut,"beit"),_ut.forEach(t),Zrr=r(d$e," \u2014 "),JX=n(d$e,"A",{href:!0});var but=s(JX);etr=r(but,"BeitForSemanticSegmentation"),but.forEach(t),otr=r(d$e," (BEiT model)"),d$e.forEach(t),rtr=i(HA),uT=n(HA,"LI",{});var c$e=s(uT);E_e=n(c$e,"STRONG",{});var vut=s(E_e);ttr=r(vut,"data2vec-vision"),vut.forEach(t),atr=r(c$e," \u2014 "),YX=n(c$e,"A",{href:!0});var Fut=s(YX);ntr=r(Fut,"Data2VecVisionForSemanticSegmentation"),Fut.forEach(t),str=r(c$e," (Data2VecVision model)"),c$e.forEach(t),ltr=i(HA),_T=n(HA,"LI",{});var f$e=s(_T);C_e=n(f$e,"STRONG",{});var Tut=s(C_e);itr=r(Tut,"dpt"),Tut.forEach(t),dtr=r(f$e," \u2014 "),KX=n(f$e,"A",{href:!0});var Mut=s(KX);ctr=r(Mut,"DPTForSemanticSegmentation"),Mut.forEach(t),ftr=r(f$e," (DPT model)"),f$e.forEach(t),mtr=i(HA),bT=n(HA,"LI",{});var m$e=s(bT);w_e=n(m$e,"STRONG",{});var Eut=s(w_e);gtr=r(Eut,"segformer"),Eut.forEach(t),htr=r(m$e," \u2014 "),ZX=n(m$e,"A",{href:!0});var Cut=s(ZX);ptr=r(Cut,"SegformerForSemanticSegmentation"),Cut.forEach(t),utr=r(m$e," (SegFormer model)"),m$e.forEach(t),HA.forEach(t),_tr=i(Fa),vT=n(Fa,"P",{});var g$e=s(vT);btr=r(g$e,"The model is set in evaluation mode by default using "),A_e=n(g$e,"CODE",{});var wut=s(A_e);vtr=r(wut,"model.eval()"),wut.forEach(t),Ftr=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y_e=n(g$e,"CODE",{});var Aut=s(y_e);Ttr=r(Aut,"model.train()"),Aut.forEach(t),g$e.forEach(t),Mtr=i(Fa),T(FT.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),eqe=i(f),Bd=n(f,"H2",{class:!0});var sje=s(Bd);TT=n(sje,"A",{id:!0,class:!0,href:!0});var yut=s(TT);L_e=n(yut,"SPAN",{});var Lut=s(L_e);T(xL.$$.fragment,Lut),Lut.forEach(t),yut.forEach(t),Etr=i(sje),x_e=n(sje,"SPAN",{});var xut=s(x_e);Ctr=r(xut,"AutoModelForInstanceSegmentation"),xut.forEach(t),sje.forEach(t),oqe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T($L.$$.fragment,il),wtr=i(il),Pd=n(il,"P",{});var tZ=s(Pd);Atr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ez=n(tZ,"A",{href:!0});var $ut=s(ez);ytr=r($ut,"from_pretrained()"),$ut.forEach(t),Ltr=r(tZ," class method or the "),oz=n(tZ,"A",{href:!0});var kut=s(oz);xtr=r(kut,"from_config()"),kut.forEach(t),$tr=r(tZ,` class
method.`),tZ.forEach(t),ktr=i(il),kL=n(il,"P",{});var lje=s(kL);Str=r(lje,"This class cannot be instantiated directly using "),$_e=n(lje,"CODE",{});var Sut=s($_e);Rtr=r(Sut,"__init__()"),Sut.forEach(t),Btr=r(lje," (throws an error)."),lje.forEach(t),Ptr=i(il),Ct=n(il,"DIV",{class:!0});var UA=s(Ct);T(SL.$$.fragment,UA),Itr=i(UA),k_e=n(UA,"P",{});var Rut=s(k_e);qtr=r(Rut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Rut.forEach(t),Ntr=i(UA),Id=n(UA,"P",{});var aZ=s(Id);jtr=r(aZ,`Note:
Loading a model from its configuration file does `),S_e=n(aZ,"STRONG",{});var But=s(S_e);Dtr=r(But,"not"),But.forEach(t),Gtr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(aZ,"A",{href:!0});var Put=s(rz);Otr=r(Put,"from_pretrained()"),Put.forEach(t),Vtr=r(aZ," to load the model weights."),aZ.forEach(t),Xtr=i(UA),T(MT.$$.fragment,UA),UA.forEach(t),ztr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(RL.$$.fragment,Ta),Qtr=i(Ta),R_e=n(Ta,"P",{});var Iut=s(R_e);Wtr=r(Iut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Iut.forEach(t),Htr=i(Ta),Ya=n(Ta,"P",{});var JA=s(Ya);Utr=r(JA,"The model class to instantiate is selected based on the "),B_e=n(JA,"CODE",{});var qut=s(B_e);Jtr=r(qut,"model_type"),qut.forEach(t),Ytr=r(JA,` property of the config object (either
passed as an argument or loaded from `),P_e=n(JA,"CODE",{});var Nut=s(P_e);Ktr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),Ztr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(JA,"CODE",{});var jut=s(I_e);ear=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),oar=r(JA,":"),JA.forEach(t),rar=i(Ta),q_e=n(Ta,"UL",{});var Dut=s(q_e);ET=n(Dut,"LI",{});var h$e=s(ET);N_e=n(h$e,"STRONG",{});var Gut=s(N_e);tar=r(Gut,"maskformer"),Gut.forEach(t),aar=r(h$e," \u2014 "),tz=n(h$e,"A",{href:!0});var Out=s(tz);nar=r(Out,"MaskFormerForInstanceSegmentation"),Out.forEach(t),sar=r(h$e," (MaskFormer model)"),h$e.forEach(t),Dut.forEach(t),lar=i(Ta),CT=n(Ta,"P",{});var p$e=s(CT);iar=r(p$e,"The model is set in evaluation mode by default using "),j_e=n(p$e,"CODE",{});var Vut=s(j_e);dar=r(Vut,"model.eval()"),Vut.forEach(t),car=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(p$e,"CODE",{});var Xut=s(D_e);far=r(Xut,"model.train()"),Xut.forEach(t),p$e.forEach(t),mar=i(Ta),T(wT.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),rqe=i(f),qd=n(f,"H2",{class:!0});var ije=s(qd);AT=n(ije,"A",{id:!0,class:!0,href:!0});var zut=s(AT);G_e=n(zut,"SPAN",{});var Qut=s(G_e);T(BL.$$.fragment,Qut),Qut.forEach(t),zut.forEach(t),gar=i(ije),O_e=n(ije,"SPAN",{});var Wut=s(O_e);har=r(Wut,"TFAutoModel"),Wut.forEach(t),ije.forEach(t),tqe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(PL.$$.fragment,dl),par=i(dl),Nd=n(dl,"P",{});var nZ=s(Nd);uar=r(nZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),az=n(nZ,"A",{href:!0});var Hut=s(az);_ar=r(Hut,"from_pretrained()"),Hut.forEach(t),bar=r(nZ," class method or the "),nz=n(nZ,"A",{href:!0});var Uut=s(nz);Far=r(Uut,"from_config()"),Uut.forEach(t),Tar=r(nZ,` class
method.`),nZ.forEach(t),Mar=i(dl),IL=n(dl,"P",{});var dje=s(IL);Ear=r(dje,"This class cannot be instantiated directly using "),V_e=n(dje,"CODE",{});var Jut=s(V_e);Car=r(Jut,"__init__()"),Jut.forEach(t),war=r(dje," (throws an error)."),dje.forEach(t),Aar=i(dl),wt=n(dl,"DIV",{class:!0});var YA=s(wt);T(qL.$$.fragment,YA),yar=i(YA),X_e=n(YA,"P",{});var Yut=s(X_e);Lar=r(Yut,"Instantiates one of the base model classes of the library from a configuration."),Yut.forEach(t),xar=i(YA),jd=n(YA,"P",{});var sZ=s(jd);$ar=r(sZ,`Note:
Loading a model from its configuration file does `),z_e=n(sZ,"STRONG",{});var Kut=s(z_e);kar=r(Kut,"not"),Kut.forEach(t),Sar=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(sZ,"A",{href:!0});var Zut=s(sz);Rar=r(Zut,"from_pretrained()"),Zut.forEach(t),Bar=r(sZ," to load the model weights."),sZ.forEach(t),Par=i(YA),T(yT.$$.fragment,YA),YA.forEach(t),Iar=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(NL.$$.fragment,cl),qar=i(cl),Q_e=n(cl,"P",{});var e_t=s(Q_e);Nar=r(e_t,"Instantiate one of the base model classes of the library from a pretrained model."),e_t.forEach(t),jar=i(cl),Ka=n(cl,"P",{});var KA=s(Ka);Dar=r(KA,"The model class to instantiate is selected based on the "),W_e=n(KA,"CODE",{});var o_t=s(W_e);Gar=r(o_t,"model_type"),o_t.forEach(t),Oar=r(KA,` property of the config object (either
passed as an argument or loaded from `),H_e=n(KA,"CODE",{});var r_t=s(H_e);Var=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),Xar=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(KA,"CODE",{});var t_t=s(U_e);zar=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),Qar=r(KA,":"),KA.forEach(t),War=i(cl),j=n(cl,"UL",{});var D=s(j);LT=n(D,"LI",{});var u$e=s(LT);J_e=n(u$e,"STRONG",{});var a_t=s(J_e);Har=r(a_t,"albert"),a_t.forEach(t),Uar=r(u$e," \u2014 "),lz=n(u$e,"A",{href:!0});var n_t=s(lz);Jar=r(n_t,"TFAlbertModel"),n_t.forEach(t),Yar=r(u$e," (ALBERT model)"),u$e.forEach(t),Kar=i(D),xT=n(D,"LI",{});var _$e=s(xT);Y_e=n(_$e,"STRONG",{});var s_t=s(Y_e);Zar=r(s_t,"bart"),s_t.forEach(t),enr=r(_$e," \u2014 "),iz=n(_$e,"A",{href:!0});var l_t=s(iz);onr=r(l_t,"TFBartModel"),l_t.forEach(t),rnr=r(_$e," (BART model)"),_$e.forEach(t),tnr=i(D),$T=n(D,"LI",{});var b$e=s($T);K_e=n(b$e,"STRONG",{});var i_t=s(K_e);anr=r(i_t,"bert"),i_t.forEach(t),nnr=r(b$e," \u2014 "),dz=n(b$e,"A",{href:!0});var d_t=s(dz);snr=r(d_t,"TFBertModel"),d_t.forEach(t),lnr=r(b$e," (BERT model)"),b$e.forEach(t),inr=i(D),kT=n(D,"LI",{});var v$e=s(kT);Z_e=n(v$e,"STRONG",{});var c_t=s(Z_e);dnr=r(c_t,"blenderbot"),c_t.forEach(t),cnr=r(v$e," \u2014 "),cz=n(v$e,"A",{href:!0});var f_t=s(cz);fnr=r(f_t,"TFBlenderbotModel"),f_t.forEach(t),mnr=r(v$e," (Blenderbot model)"),v$e.forEach(t),gnr=i(D),ST=n(D,"LI",{});var F$e=s(ST);e1e=n(F$e,"STRONG",{});var m_t=s(e1e);hnr=r(m_t,"blenderbot-small"),m_t.forEach(t),pnr=r(F$e," \u2014 "),fz=n(F$e,"A",{href:!0});var g_t=s(fz);unr=r(g_t,"TFBlenderbotSmallModel"),g_t.forEach(t),_nr=r(F$e," (BlenderbotSmall model)"),F$e.forEach(t),bnr=i(D),RT=n(D,"LI",{});var T$e=s(RT);o1e=n(T$e,"STRONG",{});var h_t=s(o1e);vnr=r(h_t,"camembert"),h_t.forEach(t),Fnr=r(T$e," \u2014 "),mz=n(T$e,"A",{href:!0});var p_t=s(mz);Tnr=r(p_t,"TFCamembertModel"),p_t.forEach(t),Mnr=r(T$e," (CamemBERT model)"),T$e.forEach(t),Enr=i(D),BT=n(D,"LI",{});var M$e=s(BT);r1e=n(M$e,"STRONG",{});var u_t=s(r1e);Cnr=r(u_t,"clip"),u_t.forEach(t),wnr=r(M$e," \u2014 "),gz=n(M$e,"A",{href:!0});var __t=s(gz);Anr=r(__t,"TFCLIPModel"),__t.forEach(t),ynr=r(M$e," (CLIP model)"),M$e.forEach(t),Lnr=i(D),PT=n(D,"LI",{});var E$e=s(PT);t1e=n(E$e,"STRONG",{});var b_t=s(t1e);xnr=r(b_t,"convbert"),b_t.forEach(t),$nr=r(E$e," \u2014 "),hz=n(E$e,"A",{href:!0});var v_t=s(hz);knr=r(v_t,"TFConvBertModel"),v_t.forEach(t),Snr=r(E$e," (ConvBERT model)"),E$e.forEach(t),Rnr=i(D),IT=n(D,"LI",{});var C$e=s(IT);a1e=n(C$e,"STRONG",{});var F_t=s(a1e);Bnr=r(F_t,"convnext"),F_t.forEach(t),Pnr=r(C$e," \u2014 "),pz=n(C$e,"A",{href:!0});var T_t=s(pz);Inr=r(T_t,"TFConvNextModel"),T_t.forEach(t),qnr=r(C$e," (ConvNext model)"),C$e.forEach(t),Nnr=i(D),qT=n(D,"LI",{});var w$e=s(qT);n1e=n(w$e,"STRONG",{});var M_t=s(n1e);jnr=r(M_t,"ctrl"),M_t.forEach(t),Dnr=r(w$e," \u2014 "),uz=n(w$e,"A",{href:!0});var E_t=s(uz);Gnr=r(E_t,"TFCTRLModel"),E_t.forEach(t),Onr=r(w$e," (CTRL model)"),w$e.forEach(t),Vnr=i(D),NT=n(D,"LI",{});var A$e=s(NT);s1e=n(A$e,"STRONG",{});var C_t=s(s1e);Xnr=r(C_t,"data2vec-vision"),C_t.forEach(t),znr=r(A$e," \u2014 "),_z=n(A$e,"A",{href:!0});var w_t=s(_z);Qnr=r(w_t,"TFData2VecVisionModel"),w_t.forEach(t),Wnr=r(A$e," (Data2VecVision model)"),A$e.forEach(t),Hnr=i(D),jT=n(D,"LI",{});var y$e=s(jT);l1e=n(y$e,"STRONG",{});var A_t=s(l1e);Unr=r(A_t,"deberta"),A_t.forEach(t),Jnr=r(y$e," \u2014 "),bz=n(y$e,"A",{href:!0});var y_t=s(bz);Ynr=r(y_t,"TFDebertaModel"),y_t.forEach(t),Knr=r(y$e," (DeBERTa model)"),y$e.forEach(t),Znr=i(D),DT=n(D,"LI",{});var L$e=s(DT);i1e=n(L$e,"STRONG",{});var L_t=s(i1e);esr=r(L_t,"deberta-v2"),L_t.forEach(t),osr=r(L$e," \u2014 "),vz=n(L$e,"A",{href:!0});var x_t=s(vz);rsr=r(x_t,"TFDebertaV2Model"),x_t.forEach(t),tsr=r(L$e," (DeBERTa-v2 model)"),L$e.forEach(t),asr=i(D),GT=n(D,"LI",{});var x$e=s(GT);d1e=n(x$e,"STRONG",{});var $_t=s(d1e);nsr=r($_t,"distilbert"),$_t.forEach(t),ssr=r(x$e," \u2014 "),Fz=n(x$e,"A",{href:!0});var k_t=s(Fz);lsr=r(k_t,"TFDistilBertModel"),k_t.forEach(t),isr=r(x$e," (DistilBERT model)"),x$e.forEach(t),dsr=i(D),OT=n(D,"LI",{});var $$e=s(OT);c1e=n($$e,"STRONG",{});var S_t=s(c1e);csr=r(S_t,"dpr"),S_t.forEach(t),fsr=r($$e," \u2014 "),Tz=n($$e,"A",{href:!0});var R_t=s(Tz);msr=r(R_t,"TFDPRQuestionEncoder"),R_t.forEach(t),gsr=r($$e," (DPR model)"),$$e.forEach(t),hsr=i(D),VT=n(D,"LI",{});var k$e=s(VT);f1e=n(k$e,"STRONG",{});var B_t=s(f1e);psr=r(B_t,"electra"),B_t.forEach(t),usr=r(k$e," \u2014 "),Mz=n(k$e,"A",{href:!0});var P_t=s(Mz);_sr=r(P_t,"TFElectraModel"),P_t.forEach(t),bsr=r(k$e," (ELECTRA model)"),k$e.forEach(t),vsr=i(D),XT=n(D,"LI",{});var S$e=s(XT);m1e=n(S$e,"STRONG",{});var I_t=s(m1e);Fsr=r(I_t,"flaubert"),I_t.forEach(t),Tsr=r(S$e," \u2014 "),Ez=n(S$e,"A",{href:!0});var q_t=s(Ez);Msr=r(q_t,"TFFlaubertModel"),q_t.forEach(t),Esr=r(S$e," (FlauBERT model)"),S$e.forEach(t),Csr=i(D),Bs=n(D,"LI",{});var p$=s(Bs);g1e=n(p$,"STRONG",{});var N_t=s(g1e);wsr=r(N_t,"funnel"),N_t.forEach(t),Asr=r(p$," \u2014 "),Cz=n(p$,"A",{href:!0});var j_t=s(Cz);ysr=r(j_t,"TFFunnelModel"),j_t.forEach(t),Lsr=r(p$," or "),wz=n(p$,"A",{href:!0});var D_t=s(wz);xsr=r(D_t,"TFFunnelBaseModel"),D_t.forEach(t),$sr=r(p$," (Funnel Transformer model)"),p$.forEach(t),ksr=i(D),zT=n(D,"LI",{});var R$e=s(zT);h1e=n(R$e,"STRONG",{});var G_t=s(h1e);Ssr=r(G_t,"gpt2"),G_t.forEach(t),Rsr=r(R$e," \u2014 "),Az=n(R$e,"A",{href:!0});var O_t=s(Az);Bsr=r(O_t,"TFGPT2Model"),O_t.forEach(t),Psr=r(R$e," (OpenAI GPT-2 model)"),R$e.forEach(t),Isr=i(D),QT=n(D,"LI",{});var B$e=s(QT);p1e=n(B$e,"STRONG",{});var V_t=s(p1e);qsr=r(V_t,"gptj"),V_t.forEach(t),Nsr=r(B$e," \u2014 "),yz=n(B$e,"A",{href:!0});var X_t=s(yz);jsr=r(X_t,"TFGPTJModel"),X_t.forEach(t),Dsr=r(B$e," (GPT-J model)"),B$e.forEach(t),Gsr=i(D),WT=n(D,"LI",{});var P$e=s(WT);u1e=n(P$e,"STRONG",{});var z_t=s(u1e);Osr=r(z_t,"hubert"),z_t.forEach(t),Vsr=r(P$e," \u2014 "),Lz=n(P$e,"A",{href:!0});var Q_t=s(Lz);Xsr=r(Q_t,"TFHubertModel"),Q_t.forEach(t),zsr=r(P$e," (Hubert model)"),P$e.forEach(t),Qsr=i(D),HT=n(D,"LI",{});var I$e=s(HT);_1e=n(I$e,"STRONG",{});var W_t=s(_1e);Wsr=r(W_t,"layoutlm"),W_t.forEach(t),Hsr=r(I$e," \u2014 "),xz=n(I$e,"A",{href:!0});var H_t=s(xz);Usr=r(H_t,"TFLayoutLMModel"),H_t.forEach(t),Jsr=r(I$e," (LayoutLM model)"),I$e.forEach(t),Ysr=i(D),UT=n(D,"LI",{});var q$e=s(UT);b1e=n(q$e,"STRONG",{});var U_t=s(b1e);Ksr=r(U_t,"led"),U_t.forEach(t),Zsr=r(q$e," \u2014 "),$z=n(q$e,"A",{href:!0});var J_t=s($z);elr=r(J_t,"TFLEDModel"),J_t.forEach(t),olr=r(q$e," (LED model)"),q$e.forEach(t),rlr=i(D),JT=n(D,"LI",{});var N$e=s(JT);v1e=n(N$e,"STRONG",{});var Y_t=s(v1e);tlr=r(Y_t,"longformer"),Y_t.forEach(t),alr=r(N$e," \u2014 "),kz=n(N$e,"A",{href:!0});var K_t=s(kz);nlr=r(K_t,"TFLongformerModel"),K_t.forEach(t),slr=r(N$e," (Longformer model)"),N$e.forEach(t),llr=i(D),YT=n(D,"LI",{});var j$e=s(YT);F1e=n(j$e,"STRONG",{});var Z_t=s(F1e);ilr=r(Z_t,"lxmert"),Z_t.forEach(t),dlr=r(j$e," \u2014 "),Sz=n(j$e,"A",{href:!0});var e1t=s(Sz);clr=r(e1t,"TFLxmertModel"),e1t.forEach(t),flr=r(j$e," (LXMERT model)"),j$e.forEach(t),mlr=i(D),KT=n(D,"LI",{});var D$e=s(KT);T1e=n(D$e,"STRONG",{});var o1t=s(T1e);glr=r(o1t,"marian"),o1t.forEach(t),hlr=r(D$e," \u2014 "),Rz=n(D$e,"A",{href:!0});var r1t=s(Rz);plr=r(r1t,"TFMarianModel"),r1t.forEach(t),ulr=r(D$e," (Marian model)"),D$e.forEach(t),_lr=i(D),ZT=n(D,"LI",{});var G$e=s(ZT);M1e=n(G$e,"STRONG",{});var t1t=s(M1e);blr=r(t1t,"mbart"),t1t.forEach(t),vlr=r(G$e," \u2014 "),Bz=n(G$e,"A",{href:!0});var a1t=s(Bz);Flr=r(a1t,"TFMBartModel"),a1t.forEach(t),Tlr=r(G$e," (mBART model)"),G$e.forEach(t),Mlr=i(D),e7=n(D,"LI",{});var O$e=s(e7);E1e=n(O$e,"STRONG",{});var n1t=s(E1e);Elr=r(n1t,"mobilebert"),n1t.forEach(t),Clr=r(O$e," \u2014 "),Pz=n(O$e,"A",{href:!0});var s1t=s(Pz);wlr=r(s1t,"TFMobileBertModel"),s1t.forEach(t),Alr=r(O$e," (MobileBERT model)"),O$e.forEach(t),ylr=i(D),o7=n(D,"LI",{});var V$e=s(o7);C1e=n(V$e,"STRONG",{});var l1t=s(C1e);Llr=r(l1t,"mpnet"),l1t.forEach(t),xlr=r(V$e," \u2014 "),Iz=n(V$e,"A",{href:!0});var i1t=s(Iz);$lr=r(i1t,"TFMPNetModel"),i1t.forEach(t),klr=r(V$e," (MPNet model)"),V$e.forEach(t),Slr=i(D),r7=n(D,"LI",{});var X$e=s(r7);w1e=n(X$e,"STRONG",{});var d1t=s(w1e);Rlr=r(d1t,"mt5"),d1t.forEach(t),Blr=r(X$e," \u2014 "),qz=n(X$e,"A",{href:!0});var c1t=s(qz);Plr=r(c1t,"TFMT5Model"),c1t.forEach(t),Ilr=r(X$e," (mT5 model)"),X$e.forEach(t),qlr=i(D),t7=n(D,"LI",{});var z$e=s(t7);A1e=n(z$e,"STRONG",{});var f1t=s(A1e);Nlr=r(f1t,"openai-gpt"),f1t.forEach(t),jlr=r(z$e," \u2014 "),Nz=n(z$e,"A",{href:!0});var m1t=s(Nz);Dlr=r(m1t,"TFOpenAIGPTModel"),m1t.forEach(t),Glr=r(z$e," (OpenAI GPT model)"),z$e.forEach(t),Olr=i(D),a7=n(D,"LI",{});var Q$e=s(a7);y1e=n(Q$e,"STRONG",{});var g1t=s(y1e);Vlr=r(g1t,"pegasus"),g1t.forEach(t),Xlr=r(Q$e," \u2014 "),jz=n(Q$e,"A",{href:!0});var h1t=s(jz);zlr=r(h1t,"TFPegasusModel"),h1t.forEach(t),Qlr=r(Q$e," (Pegasus model)"),Q$e.forEach(t),Wlr=i(D),n7=n(D,"LI",{});var W$e=s(n7);L1e=n(W$e,"STRONG",{});var p1t=s(L1e);Hlr=r(p1t,"rembert"),p1t.forEach(t),Ulr=r(W$e," \u2014 "),Dz=n(W$e,"A",{href:!0});var u1t=s(Dz);Jlr=r(u1t,"TFRemBertModel"),u1t.forEach(t),Ylr=r(W$e," (RemBERT model)"),W$e.forEach(t),Klr=i(D),s7=n(D,"LI",{});var H$e=s(s7);x1e=n(H$e,"STRONG",{});var _1t=s(x1e);Zlr=r(_1t,"roberta"),_1t.forEach(t),eir=r(H$e," \u2014 "),Gz=n(H$e,"A",{href:!0});var b1t=s(Gz);oir=r(b1t,"TFRobertaModel"),b1t.forEach(t),rir=r(H$e," (RoBERTa model)"),H$e.forEach(t),tir=i(D),l7=n(D,"LI",{});var U$e=s(l7);$1e=n(U$e,"STRONG",{});var v1t=s($1e);air=r(v1t,"roformer"),v1t.forEach(t),nir=r(U$e," \u2014 "),Oz=n(U$e,"A",{href:!0});var F1t=s(Oz);sir=r(F1t,"TFRoFormerModel"),F1t.forEach(t),lir=r(U$e," (RoFormer model)"),U$e.forEach(t),iir=i(D),i7=n(D,"LI",{});var J$e=s(i7);k1e=n(J$e,"STRONG",{});var T1t=s(k1e);dir=r(T1t,"speech_to_text"),T1t.forEach(t),cir=r(J$e," \u2014 "),Vz=n(J$e,"A",{href:!0});var M1t=s(Vz);fir=r(M1t,"TFSpeech2TextModel"),M1t.forEach(t),mir=r(J$e," (Speech2Text model)"),J$e.forEach(t),gir=i(D),d7=n(D,"LI",{});var Y$e=s(d7);S1e=n(Y$e,"STRONG",{});var E1t=s(S1e);hir=r(E1t,"t5"),E1t.forEach(t),pir=r(Y$e," \u2014 "),Xz=n(Y$e,"A",{href:!0});var C1t=s(Xz);uir=r(C1t,"TFT5Model"),C1t.forEach(t),_ir=r(Y$e," (T5 model)"),Y$e.forEach(t),bir=i(D),c7=n(D,"LI",{});var K$e=s(c7);R1e=n(K$e,"STRONG",{});var w1t=s(R1e);vir=r(w1t,"tapas"),w1t.forEach(t),Fir=r(K$e," \u2014 "),zz=n(K$e,"A",{href:!0});var A1t=s(zz);Tir=r(A1t,"TFTapasModel"),A1t.forEach(t),Mir=r(K$e," (TAPAS model)"),K$e.forEach(t),Eir=i(D),f7=n(D,"LI",{});var Z$e=s(f7);B1e=n(Z$e,"STRONG",{});var y1t=s(B1e);Cir=r(y1t,"transfo-xl"),y1t.forEach(t),wir=r(Z$e," \u2014 "),Qz=n(Z$e,"A",{href:!0});var L1t=s(Qz);Air=r(L1t,"TFTransfoXLModel"),L1t.forEach(t),yir=r(Z$e," (Transformer-XL model)"),Z$e.forEach(t),Lir=i(D),m7=n(D,"LI",{});var eke=s(m7);P1e=n(eke,"STRONG",{});var x1t=s(P1e);xir=r(x1t,"vit"),x1t.forEach(t),$ir=r(eke," \u2014 "),Wz=n(eke,"A",{href:!0});var $1t=s(Wz);kir=r($1t,"TFViTModel"),$1t.forEach(t),Sir=r(eke," (ViT model)"),eke.forEach(t),Rir=i(D),g7=n(D,"LI",{});var oke=s(g7);I1e=n(oke,"STRONG",{});var k1t=s(I1e);Bir=r(k1t,"vit_mae"),k1t.forEach(t),Pir=r(oke," \u2014 "),Hz=n(oke,"A",{href:!0});var S1t=s(Hz);Iir=r(S1t,"TFViTMAEModel"),S1t.forEach(t),qir=r(oke," (ViTMAE model)"),oke.forEach(t),Nir=i(D),h7=n(D,"LI",{});var rke=s(h7);q1e=n(rke,"STRONG",{});var R1t=s(q1e);jir=r(R1t,"wav2vec2"),R1t.forEach(t),Dir=r(rke," \u2014 "),Uz=n(rke,"A",{href:!0});var B1t=s(Uz);Gir=r(B1t,"TFWav2Vec2Model"),B1t.forEach(t),Oir=r(rke," (Wav2Vec2 model)"),rke.forEach(t),Vir=i(D),p7=n(D,"LI",{});var tke=s(p7);N1e=n(tke,"STRONG",{});var P1t=s(N1e);Xir=r(P1t,"xlm"),P1t.forEach(t),zir=r(tke," \u2014 "),Jz=n(tke,"A",{href:!0});var I1t=s(Jz);Qir=r(I1t,"TFXLMModel"),I1t.forEach(t),Wir=r(tke," (XLM model)"),tke.forEach(t),Hir=i(D),u7=n(D,"LI",{});var ake=s(u7);j1e=n(ake,"STRONG",{});var q1t=s(j1e);Uir=r(q1t,"xlm-roberta"),q1t.forEach(t),Jir=r(ake," \u2014 "),Yz=n(ake,"A",{href:!0});var N1t=s(Yz);Yir=r(N1t,"TFXLMRobertaModel"),N1t.forEach(t),Kir=r(ake," (XLM-RoBERTa model)"),ake.forEach(t),Zir=i(D),_7=n(D,"LI",{});var nke=s(_7);D1e=n(nke,"STRONG",{});var j1t=s(D1e);edr=r(j1t,"xlnet"),j1t.forEach(t),odr=r(nke," \u2014 "),Kz=n(nke,"A",{href:!0});var D1t=s(Kz);rdr=r(D1t,"TFXLNetModel"),D1t.forEach(t),tdr=r(nke," (XLNet model)"),nke.forEach(t),D.forEach(t),adr=i(cl),T(b7.$$.fragment,cl),cl.forEach(t),dl.forEach(t),aqe=i(f),Dd=n(f,"H2",{class:!0});var cje=s(Dd);v7=n(cje,"A",{id:!0,class:!0,href:!0});var G1t=s(v7);G1e=n(G1t,"SPAN",{});var O1t=s(G1e);T(jL.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),ndr=i(cje),O1e=n(cje,"SPAN",{});var V1t=s(O1e);sdr=r(V1t,"TFAutoModelForPreTraining"),V1t.forEach(t),cje.forEach(t),nqe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(DL.$$.fragment,fl),ldr=i(fl),Gd=n(fl,"P",{});var lZ=s(Gd);idr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zz=n(lZ,"A",{href:!0});var X1t=s(Zz);ddr=r(X1t,"from_pretrained()"),X1t.forEach(t),cdr=r(lZ," class method or the "),eQ=n(lZ,"A",{href:!0});var z1t=s(eQ);fdr=r(z1t,"from_config()"),z1t.forEach(t),mdr=r(lZ,` class
method.`),lZ.forEach(t),gdr=i(fl),GL=n(fl,"P",{});var fje=s(GL);hdr=r(fje,"This class cannot be instantiated directly using "),V1e=n(fje,"CODE",{});var Q1t=s(V1e);pdr=r(Q1t,"__init__()"),Q1t.forEach(t),udr=r(fje," (throws an error)."),fje.forEach(t),_dr=i(fl),At=n(fl,"DIV",{class:!0});var ZA=s(At);T(OL.$$.fragment,ZA),bdr=i(ZA),X1e=n(ZA,"P",{});var W1t=s(X1e);vdr=r(W1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),W1t.forEach(t),Fdr=i(ZA),Od=n(ZA,"P",{});var iZ=s(Od);Tdr=r(iZ,`Note:
Loading a model from its configuration file does `),z1e=n(iZ,"STRONG",{});var H1t=s(z1e);Mdr=r(H1t,"not"),H1t.forEach(t),Edr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(iZ,"A",{href:!0});var U1t=s(oQ);Cdr=r(U1t,"from_pretrained()"),U1t.forEach(t),wdr=r(iZ," to load the model weights."),iZ.forEach(t),Adr=i(ZA),T(F7.$$.fragment,ZA),ZA.forEach(t),ydr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(VL.$$.fragment,ml),Ldr=i(ml),Q1e=n(ml,"P",{});var J1t=s(Q1e);xdr=r(J1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J1t.forEach(t),$dr=i(ml),Za=n(ml,"P",{});var e6=s(Za);kdr=r(e6,"The model class to instantiate is selected based on the "),W1e=n(e6,"CODE",{});var Y1t=s(W1e);Sdr=r(Y1t,"model_type"),Y1t.forEach(t),Rdr=r(e6,` property of the config object (either
passed as an argument or loaded from `),H1e=n(e6,"CODE",{});var K1t=s(H1e);Bdr=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),Pdr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(e6,"CODE",{});var Z1t=s(U1e);Idr=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),qdr=r(e6,":"),e6.forEach(t),Ndr=i(ml),se=n(ml,"UL",{});var le=s(se);T7=n(le,"LI",{});var ske=s(T7);J1e=n(ske,"STRONG",{});var ebt=s(J1e);jdr=r(ebt,"albert"),ebt.forEach(t),Ddr=r(ske," \u2014 "),rQ=n(ske,"A",{href:!0});var obt=s(rQ);Gdr=r(obt,"TFAlbertForPreTraining"),obt.forEach(t),Odr=r(ske," (ALBERT model)"),ske.forEach(t),Vdr=i(le),M7=n(le,"LI",{});var lke=s(M7);Y1e=n(lke,"STRONG",{});var rbt=s(Y1e);Xdr=r(rbt,"bart"),rbt.forEach(t),zdr=r(lke," \u2014 "),tQ=n(lke,"A",{href:!0});var tbt=s(tQ);Qdr=r(tbt,"TFBartForConditionalGeneration"),tbt.forEach(t),Wdr=r(lke," (BART model)"),lke.forEach(t),Hdr=i(le),E7=n(le,"LI",{});var ike=s(E7);K1e=n(ike,"STRONG",{});var abt=s(K1e);Udr=r(abt,"bert"),abt.forEach(t),Jdr=r(ike," \u2014 "),aQ=n(ike,"A",{href:!0});var nbt=s(aQ);Ydr=r(nbt,"TFBertForPreTraining"),nbt.forEach(t),Kdr=r(ike," (BERT model)"),ike.forEach(t),Zdr=i(le),C7=n(le,"LI",{});var dke=s(C7);Z1e=n(dke,"STRONG",{});var sbt=s(Z1e);ecr=r(sbt,"camembert"),sbt.forEach(t),ocr=r(dke," \u2014 "),nQ=n(dke,"A",{href:!0});var lbt=s(nQ);rcr=r(lbt,"TFCamembertForMaskedLM"),lbt.forEach(t),tcr=r(dke," (CamemBERT model)"),dke.forEach(t),acr=i(le),w7=n(le,"LI",{});var cke=s(w7);ebe=n(cke,"STRONG",{});var ibt=s(ebe);ncr=r(ibt,"ctrl"),ibt.forEach(t),scr=r(cke," \u2014 "),sQ=n(cke,"A",{href:!0});var dbt=s(sQ);lcr=r(dbt,"TFCTRLLMHeadModel"),dbt.forEach(t),icr=r(cke," (CTRL model)"),cke.forEach(t),dcr=i(le),A7=n(le,"LI",{});var fke=s(A7);obe=n(fke,"STRONG",{});var cbt=s(obe);ccr=r(cbt,"distilbert"),cbt.forEach(t),fcr=r(fke," \u2014 "),lQ=n(fke,"A",{href:!0});var fbt=s(lQ);mcr=r(fbt,"TFDistilBertForMaskedLM"),fbt.forEach(t),gcr=r(fke," (DistilBERT model)"),fke.forEach(t),hcr=i(le),y7=n(le,"LI",{});var mke=s(y7);rbe=n(mke,"STRONG",{});var mbt=s(rbe);pcr=r(mbt,"electra"),mbt.forEach(t),ucr=r(mke," \u2014 "),iQ=n(mke,"A",{href:!0});var gbt=s(iQ);_cr=r(gbt,"TFElectraForPreTraining"),gbt.forEach(t),bcr=r(mke," (ELECTRA model)"),mke.forEach(t),vcr=i(le),L7=n(le,"LI",{});var gke=s(L7);tbe=n(gke,"STRONG",{});var hbt=s(tbe);Fcr=r(hbt,"flaubert"),hbt.forEach(t),Tcr=r(gke," \u2014 "),dQ=n(gke,"A",{href:!0});var pbt=s(dQ);Mcr=r(pbt,"TFFlaubertWithLMHeadModel"),pbt.forEach(t),Ecr=r(gke," (FlauBERT model)"),gke.forEach(t),Ccr=i(le),x7=n(le,"LI",{});var hke=s(x7);abe=n(hke,"STRONG",{});var ubt=s(abe);wcr=r(ubt,"funnel"),ubt.forEach(t),Acr=r(hke," \u2014 "),cQ=n(hke,"A",{href:!0});var _bt=s(cQ);ycr=r(_bt,"TFFunnelForPreTraining"),_bt.forEach(t),Lcr=r(hke," (Funnel Transformer model)"),hke.forEach(t),xcr=i(le),$7=n(le,"LI",{});var pke=s($7);nbe=n(pke,"STRONG",{});var bbt=s(nbe);$cr=r(bbt,"gpt2"),bbt.forEach(t),kcr=r(pke," \u2014 "),fQ=n(pke,"A",{href:!0});var vbt=s(fQ);Scr=r(vbt,"TFGPT2LMHeadModel"),vbt.forEach(t),Rcr=r(pke," (OpenAI GPT-2 model)"),pke.forEach(t),Bcr=i(le),k7=n(le,"LI",{});var uke=s(k7);sbe=n(uke,"STRONG",{});var Fbt=s(sbe);Pcr=r(Fbt,"layoutlm"),Fbt.forEach(t),Icr=r(uke," \u2014 "),mQ=n(uke,"A",{href:!0});var Tbt=s(mQ);qcr=r(Tbt,"TFLayoutLMForMaskedLM"),Tbt.forEach(t),Ncr=r(uke," (LayoutLM model)"),uke.forEach(t),jcr=i(le),S7=n(le,"LI",{});var _ke=s(S7);lbe=n(_ke,"STRONG",{});var Mbt=s(lbe);Dcr=r(Mbt,"lxmert"),Mbt.forEach(t),Gcr=r(_ke," \u2014 "),gQ=n(_ke,"A",{href:!0});var Ebt=s(gQ);Ocr=r(Ebt,"TFLxmertForPreTraining"),Ebt.forEach(t),Vcr=r(_ke," (LXMERT model)"),_ke.forEach(t),Xcr=i(le),R7=n(le,"LI",{});var bke=s(R7);ibe=n(bke,"STRONG",{});var Cbt=s(ibe);zcr=r(Cbt,"mobilebert"),Cbt.forEach(t),Qcr=r(bke," \u2014 "),hQ=n(bke,"A",{href:!0});var wbt=s(hQ);Wcr=r(wbt,"TFMobileBertForPreTraining"),wbt.forEach(t),Hcr=r(bke," (MobileBERT model)"),bke.forEach(t),Ucr=i(le),B7=n(le,"LI",{});var vke=s(B7);dbe=n(vke,"STRONG",{});var Abt=s(dbe);Jcr=r(Abt,"mpnet"),Abt.forEach(t),Ycr=r(vke," \u2014 "),pQ=n(vke,"A",{href:!0});var ybt=s(pQ);Kcr=r(ybt,"TFMPNetForMaskedLM"),ybt.forEach(t),Zcr=r(vke," (MPNet model)"),vke.forEach(t),efr=i(le),P7=n(le,"LI",{});var Fke=s(P7);cbe=n(Fke,"STRONG",{});var Lbt=s(cbe);ofr=r(Lbt,"openai-gpt"),Lbt.forEach(t),rfr=r(Fke," \u2014 "),uQ=n(Fke,"A",{href:!0});var xbt=s(uQ);tfr=r(xbt,"TFOpenAIGPTLMHeadModel"),xbt.forEach(t),afr=r(Fke," (OpenAI GPT model)"),Fke.forEach(t),nfr=i(le),I7=n(le,"LI",{});var Tke=s(I7);fbe=n(Tke,"STRONG",{});var $bt=s(fbe);sfr=r($bt,"roberta"),$bt.forEach(t),lfr=r(Tke," \u2014 "),_Q=n(Tke,"A",{href:!0});var kbt=s(_Q);ifr=r(kbt,"TFRobertaForMaskedLM"),kbt.forEach(t),dfr=r(Tke," (RoBERTa model)"),Tke.forEach(t),cfr=i(le),q7=n(le,"LI",{});var Mke=s(q7);mbe=n(Mke,"STRONG",{});var Sbt=s(mbe);ffr=r(Sbt,"t5"),Sbt.forEach(t),mfr=r(Mke," \u2014 "),bQ=n(Mke,"A",{href:!0});var Rbt=s(bQ);gfr=r(Rbt,"TFT5ForConditionalGeneration"),Rbt.forEach(t),hfr=r(Mke," (T5 model)"),Mke.forEach(t),pfr=i(le),N7=n(le,"LI",{});var Eke=s(N7);gbe=n(Eke,"STRONG",{});var Bbt=s(gbe);ufr=r(Bbt,"tapas"),Bbt.forEach(t),_fr=r(Eke," \u2014 "),vQ=n(Eke,"A",{href:!0});var Pbt=s(vQ);bfr=r(Pbt,"TFTapasForMaskedLM"),Pbt.forEach(t),vfr=r(Eke," (TAPAS model)"),Eke.forEach(t),Ffr=i(le),j7=n(le,"LI",{});var Cke=s(j7);hbe=n(Cke,"STRONG",{});var Ibt=s(hbe);Tfr=r(Ibt,"transfo-xl"),Ibt.forEach(t),Mfr=r(Cke," \u2014 "),FQ=n(Cke,"A",{href:!0});var qbt=s(FQ);Efr=r(qbt,"TFTransfoXLLMHeadModel"),qbt.forEach(t),Cfr=r(Cke," (Transformer-XL model)"),Cke.forEach(t),wfr=i(le),D7=n(le,"LI",{});var wke=s(D7);pbe=n(wke,"STRONG",{});var Nbt=s(pbe);Afr=r(Nbt,"vit_mae"),Nbt.forEach(t),yfr=r(wke," \u2014 "),TQ=n(wke,"A",{href:!0});var jbt=s(TQ);Lfr=r(jbt,"TFViTMAEForPreTraining"),jbt.forEach(t),xfr=r(wke," (ViTMAE model)"),wke.forEach(t),$fr=i(le),G7=n(le,"LI",{});var Ake=s(G7);ube=n(Ake,"STRONG",{});var Dbt=s(ube);kfr=r(Dbt,"xlm"),Dbt.forEach(t),Sfr=r(Ake," \u2014 "),MQ=n(Ake,"A",{href:!0});var Gbt=s(MQ);Rfr=r(Gbt,"TFXLMWithLMHeadModel"),Gbt.forEach(t),Bfr=r(Ake," (XLM model)"),Ake.forEach(t),Pfr=i(le),O7=n(le,"LI",{});var yke=s(O7);_be=n(yke,"STRONG",{});var Obt=s(_be);Ifr=r(Obt,"xlm-roberta"),Obt.forEach(t),qfr=r(yke," \u2014 "),EQ=n(yke,"A",{href:!0});var Vbt=s(EQ);Nfr=r(Vbt,"TFXLMRobertaForMaskedLM"),Vbt.forEach(t),jfr=r(yke," (XLM-RoBERTa model)"),yke.forEach(t),Dfr=i(le),V7=n(le,"LI",{});var Lke=s(V7);bbe=n(Lke,"STRONG",{});var Xbt=s(bbe);Gfr=r(Xbt,"xlnet"),Xbt.forEach(t),Ofr=r(Lke," \u2014 "),CQ=n(Lke,"A",{href:!0});var zbt=s(CQ);Vfr=r(zbt,"TFXLNetLMHeadModel"),zbt.forEach(t),Xfr=r(Lke," (XLNet model)"),Lke.forEach(t),le.forEach(t),zfr=i(ml),T(X7.$$.fragment,ml),ml.forEach(t),fl.forEach(t),sqe=i(f),Vd=n(f,"H2",{class:!0});var mje=s(Vd);z7=n(mje,"A",{id:!0,class:!0,href:!0});var Qbt=s(z7);vbe=n(Qbt,"SPAN",{});var Wbt=s(vbe);T(XL.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),Qfr=i(mje),Fbe=n(mje,"SPAN",{});var Hbt=s(Fbe);Wfr=r(Hbt,"TFAutoModelForCausalLM"),Hbt.forEach(t),mje.forEach(t),lqe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(zL.$$.fragment,gl),Hfr=i(gl),Xd=n(gl,"P",{});var dZ=s(Xd);Ufr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wQ=n(dZ,"A",{href:!0});var Ubt=s(wQ);Jfr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),Yfr=r(dZ," class method or the "),AQ=n(dZ,"A",{href:!0});var Jbt=s(AQ);Kfr=r(Jbt,"from_config()"),Jbt.forEach(t),Zfr=r(dZ,` class
method.`),dZ.forEach(t),emr=i(gl),QL=n(gl,"P",{});var gje=s(QL);omr=r(gje,"This class cannot be instantiated directly using "),Tbe=n(gje,"CODE",{});var Ybt=s(Tbe);rmr=r(Ybt,"__init__()"),Ybt.forEach(t),tmr=r(gje," (throws an error)."),gje.forEach(t),amr=i(gl),yt=n(gl,"DIV",{class:!0});var o6=s(yt);T(WL.$$.fragment,o6),nmr=i(o6),Mbe=n(o6,"P",{});var Kbt=s(Mbe);smr=r(Kbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kbt.forEach(t),lmr=i(o6),zd=n(o6,"P",{});var cZ=s(zd);imr=r(cZ,`Note:
Loading a model from its configuration file does `),Ebe=n(cZ,"STRONG",{});var Zbt=s(Ebe);dmr=r(Zbt,"not"),Zbt.forEach(t),cmr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(cZ,"A",{href:!0});var e4t=s(yQ);fmr=r(e4t,"from_pretrained()"),e4t.forEach(t),mmr=r(cZ," to load the model weights."),cZ.forEach(t),gmr=i(o6),T(Q7.$$.fragment,o6),o6.forEach(t),hmr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(HL.$$.fragment,hl),pmr=i(hl),Cbe=n(hl,"P",{});var o4t=s(Cbe);umr=r(o4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o4t.forEach(t),_mr=i(hl),en=n(hl,"P",{});var r6=s(en);bmr=r(r6,"The model class to instantiate is selected based on the "),wbe=n(r6,"CODE",{});var r4t=s(wbe);vmr=r(r4t,"model_type"),r4t.forEach(t),Fmr=r(r6,` property of the config object (either
passed as an argument or loaded from `),Abe=n(r6,"CODE",{});var t4t=s(Abe);Tmr=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),Mmr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(r6,"CODE",{});var a4t=s(ybe);Emr=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),Cmr=r(r6,":"),r6.forEach(t),wmr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);W7=n(Ce,"LI",{});var xke=s(W7);Lbe=n(xke,"STRONG",{});var n4t=s(Lbe);Amr=r(n4t,"bert"),n4t.forEach(t),ymr=r(xke," \u2014 "),LQ=n(xke,"A",{href:!0});var s4t=s(LQ);Lmr=r(s4t,"TFBertLMHeadModel"),s4t.forEach(t),xmr=r(xke," (BERT model)"),xke.forEach(t),$mr=i(Ce),H7=n(Ce,"LI",{});var $ke=s(H7);xbe=n($ke,"STRONG",{});var l4t=s(xbe);kmr=r(l4t,"camembert"),l4t.forEach(t),Smr=r($ke," \u2014 "),xQ=n($ke,"A",{href:!0});var i4t=s(xQ);Rmr=r(i4t,"TFCamembertForCausalLM"),i4t.forEach(t),Bmr=r($ke," (CamemBERT model)"),$ke.forEach(t),Pmr=i(Ce),U7=n(Ce,"LI",{});var kke=s(U7);$be=n(kke,"STRONG",{});var d4t=s($be);Imr=r(d4t,"ctrl"),d4t.forEach(t),qmr=r(kke," \u2014 "),$Q=n(kke,"A",{href:!0});var c4t=s($Q);Nmr=r(c4t,"TFCTRLLMHeadModel"),c4t.forEach(t),jmr=r(kke," (CTRL model)"),kke.forEach(t),Dmr=i(Ce),J7=n(Ce,"LI",{});var Ske=s(J7);kbe=n(Ske,"STRONG",{});var f4t=s(kbe);Gmr=r(f4t,"gpt2"),f4t.forEach(t),Omr=r(Ske," \u2014 "),kQ=n(Ske,"A",{href:!0});var m4t=s(kQ);Vmr=r(m4t,"TFGPT2LMHeadModel"),m4t.forEach(t),Xmr=r(Ske," (OpenAI GPT-2 model)"),Ske.forEach(t),zmr=i(Ce),Y7=n(Ce,"LI",{});var Rke=s(Y7);Sbe=n(Rke,"STRONG",{});var g4t=s(Sbe);Qmr=r(g4t,"gptj"),g4t.forEach(t),Wmr=r(Rke," \u2014 "),SQ=n(Rke,"A",{href:!0});var h4t=s(SQ);Hmr=r(h4t,"TFGPTJForCausalLM"),h4t.forEach(t),Umr=r(Rke," (GPT-J model)"),Rke.forEach(t),Jmr=i(Ce),K7=n(Ce,"LI",{});var Bke=s(K7);Rbe=n(Bke,"STRONG",{});var p4t=s(Rbe);Ymr=r(p4t,"openai-gpt"),p4t.forEach(t),Kmr=r(Bke," \u2014 "),RQ=n(Bke,"A",{href:!0});var u4t=s(RQ);Zmr=r(u4t,"TFOpenAIGPTLMHeadModel"),u4t.forEach(t),egr=r(Bke," (OpenAI GPT model)"),Bke.forEach(t),ogr=i(Ce),Z7=n(Ce,"LI",{});var Pke=s(Z7);Bbe=n(Pke,"STRONG",{});var _4t=s(Bbe);rgr=r(_4t,"rembert"),_4t.forEach(t),tgr=r(Pke," \u2014 "),BQ=n(Pke,"A",{href:!0});var b4t=s(BQ);agr=r(b4t,"TFRemBertForCausalLM"),b4t.forEach(t),ngr=r(Pke," (RemBERT model)"),Pke.forEach(t),sgr=i(Ce),eM=n(Ce,"LI",{});var Ike=s(eM);Pbe=n(Ike,"STRONG",{});var v4t=s(Pbe);lgr=r(v4t,"roberta"),v4t.forEach(t),igr=r(Ike," \u2014 "),PQ=n(Ike,"A",{href:!0});var F4t=s(PQ);dgr=r(F4t,"TFRobertaForCausalLM"),F4t.forEach(t),cgr=r(Ike," (RoBERTa model)"),Ike.forEach(t),fgr=i(Ce),oM=n(Ce,"LI",{});var qke=s(oM);Ibe=n(qke,"STRONG",{});var T4t=s(Ibe);mgr=r(T4t,"roformer"),T4t.forEach(t),ggr=r(qke," \u2014 "),IQ=n(qke,"A",{href:!0});var M4t=s(IQ);hgr=r(M4t,"TFRoFormerForCausalLM"),M4t.forEach(t),pgr=r(qke," (RoFormer model)"),qke.forEach(t),ugr=i(Ce),rM=n(Ce,"LI",{});var Nke=s(rM);qbe=n(Nke,"STRONG",{});var E4t=s(qbe);_gr=r(E4t,"transfo-xl"),E4t.forEach(t),bgr=r(Nke," \u2014 "),qQ=n(Nke,"A",{href:!0});var C4t=s(qQ);vgr=r(C4t,"TFTransfoXLLMHeadModel"),C4t.forEach(t),Fgr=r(Nke," (Transformer-XL model)"),Nke.forEach(t),Tgr=i(Ce),tM=n(Ce,"LI",{});var jke=s(tM);Nbe=n(jke,"STRONG",{});var w4t=s(Nbe);Mgr=r(w4t,"xlm"),w4t.forEach(t),Egr=r(jke," \u2014 "),NQ=n(jke,"A",{href:!0});var A4t=s(NQ);Cgr=r(A4t,"TFXLMWithLMHeadModel"),A4t.forEach(t),wgr=r(jke," (XLM model)"),jke.forEach(t),Agr=i(Ce),aM=n(Ce,"LI",{});var Dke=s(aM);jbe=n(Dke,"STRONG",{});var y4t=s(jbe);ygr=r(y4t,"xlnet"),y4t.forEach(t),Lgr=r(Dke," \u2014 "),jQ=n(Dke,"A",{href:!0});var L4t=s(jQ);xgr=r(L4t,"TFXLNetLMHeadModel"),L4t.forEach(t),$gr=r(Dke," (XLNet model)"),Dke.forEach(t),Ce.forEach(t),kgr=i(hl),T(nM.$$.fragment,hl),hl.forEach(t),gl.forEach(t),iqe=i(f),Qd=n(f,"H2",{class:!0});var hje=s(Qd);sM=n(hje,"A",{id:!0,class:!0,href:!0});var x4t=s(sM);Dbe=n(x4t,"SPAN",{});var $4t=s(Dbe);T(UL.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),Sgr=i(hje),Gbe=n(hje,"SPAN",{});var k4t=s(Gbe);Rgr=r(k4t,"TFAutoModelForImageClassification"),k4t.forEach(t),hje.forEach(t),dqe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(JL.$$.fragment,pl),Bgr=i(pl),Wd=n(pl,"P",{});var fZ=s(Wd);Pgr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DQ=n(fZ,"A",{href:!0});var S4t=s(DQ);Igr=r(S4t,"from_pretrained()"),S4t.forEach(t),qgr=r(fZ," class method or the "),GQ=n(fZ,"A",{href:!0});var R4t=s(GQ);Ngr=r(R4t,"from_config()"),R4t.forEach(t),jgr=r(fZ,` class
method.`),fZ.forEach(t),Dgr=i(pl),YL=n(pl,"P",{});var pje=s(YL);Ggr=r(pje,"This class cannot be instantiated directly using "),Obe=n(pje,"CODE",{});var B4t=s(Obe);Ogr=r(B4t,"__init__()"),B4t.forEach(t),Vgr=r(pje," (throws an error)."),pje.forEach(t),Xgr=i(pl),Lt=n(pl,"DIV",{class:!0});var t6=s(Lt);T(KL.$$.fragment,t6),zgr=i(t6),Vbe=n(t6,"P",{});var P4t=s(Vbe);Qgr=r(P4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P4t.forEach(t),Wgr=i(t6),Hd=n(t6,"P",{});var mZ=s(Hd);Hgr=r(mZ,`Note:
Loading a model from its configuration file does `),Xbe=n(mZ,"STRONG",{});var I4t=s(Xbe);Ugr=r(I4t,"not"),I4t.forEach(t),Jgr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(mZ,"A",{href:!0});var q4t=s(OQ);Ygr=r(q4t,"from_pretrained()"),q4t.forEach(t),Kgr=r(mZ," to load the model weights."),mZ.forEach(t),Zgr=i(t6),T(lM.$$.fragment,t6),t6.forEach(t),ehr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(ZL.$$.fragment,ul),ohr=i(ul),zbe=n(ul,"P",{});var N4t=s(zbe);rhr=r(N4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N4t.forEach(t),thr=i(ul),on=n(ul,"P",{});var a6=s(on);ahr=r(a6,"The model class to instantiate is selected based on the "),Qbe=n(a6,"CODE",{});var j4t=s(Qbe);nhr=r(j4t,"model_type"),j4t.forEach(t),shr=r(a6,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(a6,"CODE",{});var D4t=s(Wbe);lhr=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),ihr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(a6,"CODE",{});var G4t=s(Hbe);dhr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),chr=r(a6,":"),a6.forEach(t),fhr=i(ul),Ud=n(ul,"UL",{});var gZ=s(Ud);iM=n(gZ,"LI",{});var Gke=s(iM);Ube=n(Gke,"STRONG",{});var O4t=s(Ube);mhr=r(O4t,"convnext"),O4t.forEach(t),ghr=r(Gke," \u2014 "),VQ=n(Gke,"A",{href:!0});var V4t=s(VQ);hhr=r(V4t,"TFConvNextForImageClassification"),V4t.forEach(t),phr=r(Gke," (ConvNext model)"),Gke.forEach(t),uhr=i(gZ),dM=n(gZ,"LI",{});var Oke=s(dM);Jbe=n(Oke,"STRONG",{});var X4t=s(Jbe);_hr=r(X4t,"data2vec-vision"),X4t.forEach(t),bhr=r(Oke," \u2014 "),XQ=n(Oke,"A",{href:!0});var z4t=s(XQ);vhr=r(z4t,"TFData2VecVisionForImageClassification"),z4t.forEach(t),Fhr=r(Oke," (Data2VecVision model)"),Oke.forEach(t),Thr=i(gZ),cM=n(gZ,"LI",{});var Vke=s(cM);Ybe=n(Vke,"STRONG",{});var Q4t=s(Ybe);Mhr=r(Q4t,"vit"),Q4t.forEach(t),Ehr=r(Vke," \u2014 "),zQ=n(Vke,"A",{href:!0});var W4t=s(zQ);Chr=r(W4t,"TFViTForImageClassification"),W4t.forEach(t),whr=r(Vke," (ViT model)"),Vke.forEach(t),gZ.forEach(t),Ahr=i(ul),T(fM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),cqe=i(f),Jd=n(f,"H2",{class:!0});var uje=s(Jd);mM=n(uje,"A",{id:!0,class:!0,href:!0});var H4t=s(mM);Kbe=n(H4t,"SPAN",{});var U4t=s(Kbe);T(e8.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),yhr=i(uje),Zbe=n(uje,"SPAN",{});var J4t=s(Zbe);Lhr=r(J4t,"TFAutoModelForMaskedLM"),J4t.forEach(t),uje.forEach(t),fqe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(o8.$$.fragment,_l),xhr=i(_l),Yd=n(_l,"P",{});var hZ=s(Yd);$hr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QQ=n(hZ,"A",{href:!0});var Y4t=s(QQ);khr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),Shr=r(hZ," class method or the "),WQ=n(hZ,"A",{href:!0});var K4t=s(WQ);Rhr=r(K4t,"from_config()"),K4t.forEach(t),Bhr=r(hZ,` class
method.`),hZ.forEach(t),Phr=i(_l),r8=n(_l,"P",{});var _je=s(r8);Ihr=r(_je,"This class cannot be instantiated directly using "),e4e=n(_je,"CODE",{});var Z4t=s(e4e);qhr=r(Z4t,"__init__()"),Z4t.forEach(t),Nhr=r(_je," (throws an error)."),_je.forEach(t),jhr=i(_l),xt=n(_l,"DIV",{class:!0});var n6=s(xt);T(t8.$$.fragment,n6),Dhr=i(n6),o4e=n(n6,"P",{});var e2t=s(o4e);Ghr=r(e2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e2t.forEach(t),Ohr=i(n6),Kd=n(n6,"P",{});var pZ=s(Kd);Vhr=r(pZ,`Note:
Loading a model from its configuration file does `),r4e=n(pZ,"STRONG",{});var o2t=s(r4e);Xhr=r(o2t,"not"),o2t.forEach(t),zhr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(pZ,"A",{href:!0});var r2t=s(HQ);Qhr=r(r2t,"from_pretrained()"),r2t.forEach(t),Whr=r(pZ," to load the model weights."),pZ.forEach(t),Hhr=i(n6),T(gM.$$.fragment,n6),n6.forEach(t),Uhr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(a8.$$.fragment,bl),Jhr=i(bl),t4e=n(bl,"P",{});var t2t=s(t4e);Yhr=r(t2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),t2t.forEach(t),Khr=i(bl),rn=n(bl,"P",{});var s6=s(rn);Zhr=r(s6,"The model class to instantiate is selected based on the "),a4e=n(s6,"CODE",{});var a2t=s(a4e);epr=r(a2t,"model_type"),a2t.forEach(t),opr=r(s6,` property of the config object (either
passed as an argument or loaded from `),n4e=n(s6,"CODE",{});var n2t=s(n4e);rpr=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),tpr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(s6,"CODE",{});var s2t=s(s4e);apr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),npr=r(s6,":"),s6.forEach(t),spr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);hM=n(fe,"LI",{});var Xke=s(hM);l4e=n(Xke,"STRONG",{});var l2t=s(l4e);lpr=r(l2t,"albert"),l2t.forEach(t),ipr=r(Xke," \u2014 "),UQ=n(Xke,"A",{href:!0});var i2t=s(UQ);dpr=r(i2t,"TFAlbertForMaskedLM"),i2t.forEach(t),cpr=r(Xke," (ALBERT model)"),Xke.forEach(t),fpr=i(fe),pM=n(fe,"LI",{});var zke=s(pM);i4e=n(zke,"STRONG",{});var d2t=s(i4e);mpr=r(d2t,"bert"),d2t.forEach(t),gpr=r(zke," \u2014 "),JQ=n(zke,"A",{href:!0});var c2t=s(JQ);hpr=r(c2t,"TFBertForMaskedLM"),c2t.forEach(t),ppr=r(zke," (BERT model)"),zke.forEach(t),upr=i(fe),uM=n(fe,"LI",{});var Qke=s(uM);d4e=n(Qke,"STRONG",{});var f2t=s(d4e);_pr=r(f2t,"camembert"),f2t.forEach(t),bpr=r(Qke," \u2014 "),YQ=n(Qke,"A",{href:!0});var m2t=s(YQ);vpr=r(m2t,"TFCamembertForMaskedLM"),m2t.forEach(t),Fpr=r(Qke," (CamemBERT model)"),Qke.forEach(t),Tpr=i(fe),_M=n(fe,"LI",{});var Wke=s(_M);c4e=n(Wke,"STRONG",{});var g2t=s(c4e);Mpr=r(g2t,"convbert"),g2t.forEach(t),Epr=r(Wke," \u2014 "),KQ=n(Wke,"A",{href:!0});var h2t=s(KQ);Cpr=r(h2t,"TFConvBertForMaskedLM"),h2t.forEach(t),wpr=r(Wke," (ConvBERT model)"),Wke.forEach(t),Apr=i(fe),bM=n(fe,"LI",{});var Hke=s(bM);f4e=n(Hke,"STRONG",{});var p2t=s(f4e);ypr=r(p2t,"deberta"),p2t.forEach(t),Lpr=r(Hke," \u2014 "),ZQ=n(Hke,"A",{href:!0});var u2t=s(ZQ);xpr=r(u2t,"TFDebertaForMaskedLM"),u2t.forEach(t),$pr=r(Hke," (DeBERTa model)"),Hke.forEach(t),kpr=i(fe),vM=n(fe,"LI",{});var Uke=s(vM);m4e=n(Uke,"STRONG",{});var _2t=s(m4e);Spr=r(_2t,"deberta-v2"),_2t.forEach(t),Rpr=r(Uke," \u2014 "),eW=n(Uke,"A",{href:!0});var b2t=s(eW);Bpr=r(b2t,"TFDebertaV2ForMaskedLM"),b2t.forEach(t),Ppr=r(Uke," (DeBERTa-v2 model)"),Uke.forEach(t),Ipr=i(fe),FM=n(fe,"LI",{});var Jke=s(FM);g4e=n(Jke,"STRONG",{});var v2t=s(g4e);qpr=r(v2t,"distilbert"),v2t.forEach(t),Npr=r(Jke," \u2014 "),oW=n(Jke,"A",{href:!0});var F2t=s(oW);jpr=r(F2t,"TFDistilBertForMaskedLM"),F2t.forEach(t),Dpr=r(Jke," (DistilBERT model)"),Jke.forEach(t),Gpr=i(fe),TM=n(fe,"LI",{});var Yke=s(TM);h4e=n(Yke,"STRONG",{});var T2t=s(h4e);Opr=r(T2t,"electra"),T2t.forEach(t),Vpr=r(Yke," \u2014 "),rW=n(Yke,"A",{href:!0});var M2t=s(rW);Xpr=r(M2t,"TFElectraForMaskedLM"),M2t.forEach(t),zpr=r(Yke," (ELECTRA model)"),Yke.forEach(t),Qpr=i(fe),MM=n(fe,"LI",{});var Kke=s(MM);p4e=n(Kke,"STRONG",{});var E2t=s(p4e);Wpr=r(E2t,"flaubert"),E2t.forEach(t),Hpr=r(Kke," \u2014 "),tW=n(Kke,"A",{href:!0});var C2t=s(tW);Upr=r(C2t,"TFFlaubertWithLMHeadModel"),C2t.forEach(t),Jpr=r(Kke," (FlauBERT model)"),Kke.forEach(t),Ypr=i(fe),EM=n(fe,"LI",{});var Zke=s(EM);u4e=n(Zke,"STRONG",{});var w2t=s(u4e);Kpr=r(w2t,"funnel"),w2t.forEach(t),Zpr=r(Zke," \u2014 "),aW=n(Zke,"A",{href:!0});var A2t=s(aW);eur=r(A2t,"TFFunnelForMaskedLM"),A2t.forEach(t),our=r(Zke," (Funnel Transformer model)"),Zke.forEach(t),rur=i(fe),CM=n(fe,"LI",{});var eSe=s(CM);_4e=n(eSe,"STRONG",{});var y2t=s(_4e);tur=r(y2t,"layoutlm"),y2t.forEach(t),aur=r(eSe," \u2014 "),nW=n(eSe,"A",{href:!0});var L2t=s(nW);nur=r(L2t,"TFLayoutLMForMaskedLM"),L2t.forEach(t),sur=r(eSe," (LayoutLM model)"),eSe.forEach(t),lur=i(fe),wM=n(fe,"LI",{});var oSe=s(wM);b4e=n(oSe,"STRONG",{});var x2t=s(b4e);iur=r(x2t,"longformer"),x2t.forEach(t),dur=r(oSe," \u2014 "),sW=n(oSe,"A",{href:!0});var $2t=s(sW);cur=r($2t,"TFLongformerForMaskedLM"),$2t.forEach(t),fur=r(oSe," (Longformer model)"),oSe.forEach(t),mur=i(fe),AM=n(fe,"LI",{});var rSe=s(AM);v4e=n(rSe,"STRONG",{});var k2t=s(v4e);gur=r(k2t,"mobilebert"),k2t.forEach(t),hur=r(rSe," \u2014 "),lW=n(rSe,"A",{href:!0});var S2t=s(lW);pur=r(S2t,"TFMobileBertForMaskedLM"),S2t.forEach(t),uur=r(rSe," (MobileBERT model)"),rSe.forEach(t),_ur=i(fe),yM=n(fe,"LI",{});var tSe=s(yM);F4e=n(tSe,"STRONG",{});var R2t=s(F4e);bur=r(R2t,"mpnet"),R2t.forEach(t),vur=r(tSe," \u2014 "),iW=n(tSe,"A",{href:!0});var B2t=s(iW);Fur=r(B2t,"TFMPNetForMaskedLM"),B2t.forEach(t),Tur=r(tSe," (MPNet model)"),tSe.forEach(t),Mur=i(fe),LM=n(fe,"LI",{});var aSe=s(LM);T4e=n(aSe,"STRONG",{});var P2t=s(T4e);Eur=r(P2t,"rembert"),P2t.forEach(t),Cur=r(aSe," \u2014 "),dW=n(aSe,"A",{href:!0});var I2t=s(dW);wur=r(I2t,"TFRemBertForMaskedLM"),I2t.forEach(t),Aur=r(aSe," (RemBERT model)"),aSe.forEach(t),yur=i(fe),xM=n(fe,"LI",{});var nSe=s(xM);M4e=n(nSe,"STRONG",{});var q2t=s(M4e);Lur=r(q2t,"roberta"),q2t.forEach(t),xur=r(nSe," \u2014 "),cW=n(nSe,"A",{href:!0});var N2t=s(cW);$ur=r(N2t,"TFRobertaForMaskedLM"),N2t.forEach(t),kur=r(nSe," (RoBERTa model)"),nSe.forEach(t),Sur=i(fe),$M=n(fe,"LI",{});var sSe=s($M);E4e=n(sSe,"STRONG",{});var j2t=s(E4e);Rur=r(j2t,"roformer"),j2t.forEach(t),Bur=r(sSe," \u2014 "),fW=n(sSe,"A",{href:!0});var D2t=s(fW);Pur=r(D2t,"TFRoFormerForMaskedLM"),D2t.forEach(t),Iur=r(sSe," (RoFormer model)"),sSe.forEach(t),qur=i(fe),kM=n(fe,"LI",{});var lSe=s(kM);C4e=n(lSe,"STRONG",{});var G2t=s(C4e);Nur=r(G2t,"tapas"),G2t.forEach(t),jur=r(lSe," \u2014 "),mW=n(lSe,"A",{href:!0});var O2t=s(mW);Dur=r(O2t,"TFTapasForMaskedLM"),O2t.forEach(t),Gur=r(lSe," (TAPAS model)"),lSe.forEach(t),Our=i(fe),SM=n(fe,"LI",{});var iSe=s(SM);w4e=n(iSe,"STRONG",{});var V2t=s(w4e);Vur=r(V2t,"xlm"),V2t.forEach(t),Xur=r(iSe," \u2014 "),gW=n(iSe,"A",{href:!0});var X2t=s(gW);zur=r(X2t,"TFXLMWithLMHeadModel"),X2t.forEach(t),Qur=r(iSe," (XLM model)"),iSe.forEach(t),Wur=i(fe),RM=n(fe,"LI",{});var dSe=s(RM);A4e=n(dSe,"STRONG",{});var z2t=s(A4e);Hur=r(z2t,"xlm-roberta"),z2t.forEach(t),Uur=r(dSe," \u2014 "),hW=n(dSe,"A",{href:!0});var Q2t=s(hW);Jur=r(Q2t,"TFXLMRobertaForMaskedLM"),Q2t.forEach(t),Yur=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),fe.forEach(t),Kur=i(bl),T(BM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),mqe=i(f),Zd=n(f,"H2",{class:!0});var bje=s(Zd);PM=n(bje,"A",{id:!0,class:!0,href:!0});var W2t=s(PM);y4e=n(W2t,"SPAN",{});var H2t=s(y4e);T(n8.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),Zur=i(bje),L4e=n(bje,"SPAN",{});var U2t=s(L4e);e_r=r(U2t,"TFAutoModelForSeq2SeqLM"),U2t.forEach(t),bje.forEach(t),gqe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(s8.$$.fragment,vl),o_r=i(vl),ec=n(vl,"P",{});var uZ=s(ec);r_r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pW=n(uZ,"A",{href:!0});var J2t=s(pW);t_r=r(J2t,"from_pretrained()"),J2t.forEach(t),a_r=r(uZ," class method or the "),uW=n(uZ,"A",{href:!0});var Y2t=s(uW);n_r=r(Y2t,"from_config()"),Y2t.forEach(t),s_r=r(uZ,` class
method.`),uZ.forEach(t),l_r=i(vl),l8=n(vl,"P",{});var vje=s(l8);i_r=r(vje,"This class cannot be instantiated directly using "),x4e=n(vje,"CODE",{});var K2t=s(x4e);d_r=r(K2t,"__init__()"),K2t.forEach(t),c_r=r(vje," (throws an error)."),vje.forEach(t),f_r=i(vl),$t=n(vl,"DIV",{class:!0});var l6=s($t);T(i8.$$.fragment,l6),m_r=i(l6),$4e=n(l6,"P",{});var Z2t=s($4e);g_r=r(Z2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z2t.forEach(t),h_r=i(l6),oc=n(l6,"P",{});var _Z=s(oc);p_r=r(_Z,`Note:
Loading a model from its configuration file does `),k4e=n(_Z,"STRONG",{});var evt=s(k4e);u_r=r(evt,"not"),evt.forEach(t),__r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(_Z,"A",{href:!0});var ovt=s(_W);b_r=r(ovt,"from_pretrained()"),ovt.forEach(t),v_r=r(_Z," to load the model weights."),_Z.forEach(t),F_r=i(l6),T(IM.$$.fragment,l6),l6.forEach(t),T_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(d8.$$.fragment,Fl),M_r=i(Fl),S4e=n(Fl,"P",{});var rvt=s(S4e);E_r=r(rvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rvt.forEach(t),C_r=i(Fl),tn=n(Fl,"P",{});var i6=s(tn);w_r=r(i6,"The model class to instantiate is selected based on the "),R4e=n(i6,"CODE",{});var tvt=s(R4e);A_r=r(tvt,"model_type"),tvt.forEach(t),y_r=r(i6,` property of the config object (either
passed as an argument or loaded from `),B4e=n(i6,"CODE",{});var avt=s(B4e);L_r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),x_r=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(i6,"CODE",{});var nvt=s(P4e);$_r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),k_r=r(i6,":"),i6.forEach(t),S_r=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);qM=n(Re,"LI",{});var cSe=s(qM);I4e=n(cSe,"STRONG",{});var svt=s(I4e);R_r=r(svt,"bart"),svt.forEach(t),B_r=r(cSe," \u2014 "),bW=n(cSe,"A",{href:!0});var lvt=s(bW);P_r=r(lvt,"TFBartForConditionalGeneration"),lvt.forEach(t),I_r=r(cSe," (BART model)"),cSe.forEach(t),q_r=i(Re),NM=n(Re,"LI",{});var fSe=s(NM);q4e=n(fSe,"STRONG",{});var ivt=s(q4e);N_r=r(ivt,"blenderbot"),ivt.forEach(t),j_r=r(fSe," \u2014 "),vW=n(fSe,"A",{href:!0});var dvt=s(vW);D_r=r(dvt,"TFBlenderbotForConditionalGeneration"),dvt.forEach(t),G_r=r(fSe," (Blenderbot model)"),fSe.forEach(t),O_r=i(Re),jM=n(Re,"LI",{});var mSe=s(jM);N4e=n(mSe,"STRONG",{});var cvt=s(N4e);V_r=r(cvt,"blenderbot-small"),cvt.forEach(t),X_r=r(mSe," \u2014 "),FW=n(mSe,"A",{href:!0});var fvt=s(FW);z_r=r(fvt,"TFBlenderbotSmallForConditionalGeneration"),fvt.forEach(t),Q_r=r(mSe," (BlenderbotSmall model)"),mSe.forEach(t),W_r=i(Re),DM=n(Re,"LI",{});var gSe=s(DM);j4e=n(gSe,"STRONG",{});var mvt=s(j4e);H_r=r(mvt,"encoder-decoder"),mvt.forEach(t),U_r=r(gSe," \u2014 "),TW=n(gSe,"A",{href:!0});var gvt=s(TW);J_r=r(gvt,"TFEncoderDecoderModel"),gvt.forEach(t),Y_r=r(gSe," (Encoder decoder model)"),gSe.forEach(t),K_r=i(Re),GM=n(Re,"LI",{});var hSe=s(GM);D4e=n(hSe,"STRONG",{});var hvt=s(D4e);Z_r=r(hvt,"led"),hvt.forEach(t),e1r=r(hSe," \u2014 "),MW=n(hSe,"A",{href:!0});var pvt=s(MW);o1r=r(pvt,"TFLEDForConditionalGeneration"),pvt.forEach(t),r1r=r(hSe," (LED model)"),hSe.forEach(t),t1r=i(Re),OM=n(Re,"LI",{});var pSe=s(OM);G4e=n(pSe,"STRONG",{});var uvt=s(G4e);a1r=r(uvt,"marian"),uvt.forEach(t),n1r=r(pSe," \u2014 "),EW=n(pSe,"A",{href:!0});var _vt=s(EW);s1r=r(_vt,"TFMarianMTModel"),_vt.forEach(t),l1r=r(pSe," (Marian model)"),pSe.forEach(t),i1r=i(Re),VM=n(Re,"LI",{});var uSe=s(VM);O4e=n(uSe,"STRONG",{});var bvt=s(O4e);d1r=r(bvt,"mbart"),bvt.forEach(t),c1r=r(uSe," \u2014 "),CW=n(uSe,"A",{href:!0});var vvt=s(CW);f1r=r(vvt,"TFMBartForConditionalGeneration"),vvt.forEach(t),m1r=r(uSe," (mBART model)"),uSe.forEach(t),g1r=i(Re),XM=n(Re,"LI",{});var _Se=s(XM);V4e=n(_Se,"STRONG",{});var Fvt=s(V4e);h1r=r(Fvt,"mt5"),Fvt.forEach(t),p1r=r(_Se," \u2014 "),wW=n(_Se,"A",{href:!0});var Tvt=s(wW);u1r=r(Tvt,"TFMT5ForConditionalGeneration"),Tvt.forEach(t),_1r=r(_Se," (mT5 model)"),_Se.forEach(t),b1r=i(Re),zM=n(Re,"LI",{});var bSe=s(zM);X4e=n(bSe,"STRONG",{});var Mvt=s(X4e);v1r=r(Mvt,"pegasus"),Mvt.forEach(t),F1r=r(bSe," \u2014 "),AW=n(bSe,"A",{href:!0});var Evt=s(AW);T1r=r(Evt,"TFPegasusForConditionalGeneration"),Evt.forEach(t),M1r=r(bSe," (Pegasus model)"),bSe.forEach(t),E1r=i(Re),QM=n(Re,"LI",{});var vSe=s(QM);z4e=n(vSe,"STRONG",{});var Cvt=s(z4e);C1r=r(Cvt,"t5"),Cvt.forEach(t),w1r=r(vSe," \u2014 "),yW=n(vSe,"A",{href:!0});var wvt=s(yW);A1r=r(wvt,"TFT5ForConditionalGeneration"),wvt.forEach(t),y1r=r(vSe," (T5 model)"),vSe.forEach(t),Re.forEach(t),L1r=i(Fl),T(WM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),hqe=i(f),rc=n(f,"H2",{class:!0});var Fje=s(rc);HM=n(Fje,"A",{id:!0,class:!0,href:!0});var Avt=s(HM);Q4e=n(Avt,"SPAN",{});var yvt=s(Q4e);T(c8.$$.fragment,yvt),yvt.forEach(t),Avt.forEach(t),x1r=i(Fje),W4e=n(Fje,"SPAN",{});var Lvt=s(W4e);$1r=r(Lvt,"TFAutoModelForSequenceClassification"),Lvt.forEach(t),Fje.forEach(t),pqe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(f8.$$.fragment,Tl),k1r=i(Tl),tc=n(Tl,"P",{});var bZ=s(tc);S1r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LW=n(bZ,"A",{href:!0});var xvt=s(LW);R1r=r(xvt,"from_pretrained()"),xvt.forEach(t),B1r=r(bZ," class method or the "),xW=n(bZ,"A",{href:!0});var $vt=s(xW);P1r=r($vt,"from_config()"),$vt.forEach(t),I1r=r(bZ,` class
method.`),bZ.forEach(t),q1r=i(Tl),m8=n(Tl,"P",{});var Tje=s(m8);N1r=r(Tje,"This class cannot be instantiated directly using "),H4e=n(Tje,"CODE",{});var kvt=s(H4e);j1r=r(kvt,"__init__()"),kvt.forEach(t),D1r=r(Tje," (throws an error)."),Tje.forEach(t),G1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var d6=s(kt);T(g8.$$.fragment,d6),O1r=i(d6),U4e=n(d6,"P",{});var Svt=s(U4e);V1r=r(Svt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Svt.forEach(t),X1r=i(d6),ac=n(d6,"P",{});var vZ=s(ac);z1r=r(vZ,`Note:
Loading a model from its configuration file does `),J4e=n(vZ,"STRONG",{});var Rvt=s(J4e);Q1r=r(Rvt,"not"),Rvt.forEach(t),W1r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(vZ,"A",{href:!0});var Bvt=s($W);H1r=r(Bvt,"from_pretrained()"),Bvt.forEach(t),U1r=r(vZ," to load the model weights."),vZ.forEach(t),J1r=i(d6),T(UM.$$.fragment,d6),d6.forEach(t),Y1r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(h8.$$.fragment,Ml),K1r=i(Ml),Y4e=n(Ml,"P",{});var Pvt=s(Y4e);Z1r=r(Pvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pvt.forEach(t),ebr=i(Ml),an=n(Ml,"P",{});var c6=s(an);obr=r(c6,"The model class to instantiate is selected based on the "),K4e=n(c6,"CODE",{});var Ivt=s(K4e);rbr=r(Ivt,"model_type"),Ivt.forEach(t),tbr=r(c6,` property of the config object (either
passed as an argument or loaded from `),Z4e=n(c6,"CODE",{});var qvt=s(Z4e);abr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),nbr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(c6,"CODE",{});var Nvt=s(e2e);sbr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),lbr=r(c6,":"),c6.forEach(t),ibr=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);JM=n(te,"LI",{});var FSe=s(JM);o2e=n(FSe,"STRONG",{});var jvt=s(o2e);dbr=r(jvt,"albert"),jvt.forEach(t),cbr=r(FSe," \u2014 "),kW=n(FSe,"A",{href:!0});var Dvt=s(kW);fbr=r(Dvt,"TFAlbertForSequenceClassification"),Dvt.forEach(t),mbr=r(FSe," (ALBERT model)"),FSe.forEach(t),gbr=i(te),YM=n(te,"LI",{});var TSe=s(YM);r2e=n(TSe,"STRONG",{});var Gvt=s(r2e);hbr=r(Gvt,"bert"),Gvt.forEach(t),pbr=r(TSe," \u2014 "),SW=n(TSe,"A",{href:!0});var Ovt=s(SW);ubr=r(Ovt,"TFBertForSequenceClassification"),Ovt.forEach(t),_br=r(TSe," (BERT model)"),TSe.forEach(t),bbr=i(te),KM=n(te,"LI",{});var MSe=s(KM);t2e=n(MSe,"STRONG",{});var Vvt=s(t2e);vbr=r(Vvt,"camembert"),Vvt.forEach(t),Fbr=r(MSe," \u2014 "),RW=n(MSe,"A",{href:!0});var Xvt=s(RW);Tbr=r(Xvt,"TFCamembertForSequenceClassification"),Xvt.forEach(t),Mbr=r(MSe," (CamemBERT model)"),MSe.forEach(t),Ebr=i(te),ZM=n(te,"LI",{});var ESe=s(ZM);a2e=n(ESe,"STRONG",{});var zvt=s(a2e);Cbr=r(zvt,"convbert"),zvt.forEach(t),wbr=r(ESe," \u2014 "),BW=n(ESe,"A",{href:!0});var Qvt=s(BW);Abr=r(Qvt,"TFConvBertForSequenceClassification"),Qvt.forEach(t),ybr=r(ESe," (ConvBERT model)"),ESe.forEach(t),Lbr=i(te),eE=n(te,"LI",{});var CSe=s(eE);n2e=n(CSe,"STRONG",{});var Wvt=s(n2e);xbr=r(Wvt,"ctrl"),Wvt.forEach(t),$br=r(CSe," \u2014 "),PW=n(CSe,"A",{href:!0});var Hvt=s(PW);kbr=r(Hvt,"TFCTRLForSequenceClassification"),Hvt.forEach(t),Sbr=r(CSe," (CTRL model)"),CSe.forEach(t),Rbr=i(te),oE=n(te,"LI",{});var wSe=s(oE);s2e=n(wSe,"STRONG",{});var Uvt=s(s2e);Bbr=r(Uvt,"deberta"),Uvt.forEach(t),Pbr=r(wSe," \u2014 "),IW=n(wSe,"A",{href:!0});var Jvt=s(IW);Ibr=r(Jvt,"TFDebertaForSequenceClassification"),Jvt.forEach(t),qbr=r(wSe," (DeBERTa model)"),wSe.forEach(t),Nbr=i(te),rE=n(te,"LI",{});var ASe=s(rE);l2e=n(ASe,"STRONG",{});var Yvt=s(l2e);jbr=r(Yvt,"deberta-v2"),Yvt.forEach(t),Dbr=r(ASe," \u2014 "),qW=n(ASe,"A",{href:!0});var Kvt=s(qW);Gbr=r(Kvt,"TFDebertaV2ForSequenceClassification"),Kvt.forEach(t),Obr=r(ASe," (DeBERTa-v2 model)"),ASe.forEach(t),Vbr=i(te),tE=n(te,"LI",{});var ySe=s(tE);i2e=n(ySe,"STRONG",{});var Zvt=s(i2e);Xbr=r(Zvt,"distilbert"),Zvt.forEach(t),zbr=r(ySe," \u2014 "),NW=n(ySe,"A",{href:!0});var eFt=s(NW);Qbr=r(eFt,"TFDistilBertForSequenceClassification"),eFt.forEach(t),Wbr=r(ySe," (DistilBERT model)"),ySe.forEach(t),Hbr=i(te),aE=n(te,"LI",{});var LSe=s(aE);d2e=n(LSe,"STRONG",{});var oFt=s(d2e);Ubr=r(oFt,"electra"),oFt.forEach(t),Jbr=r(LSe," \u2014 "),jW=n(LSe,"A",{href:!0});var rFt=s(jW);Ybr=r(rFt,"TFElectraForSequenceClassification"),rFt.forEach(t),Kbr=r(LSe," (ELECTRA model)"),LSe.forEach(t),Zbr=i(te),nE=n(te,"LI",{});var xSe=s(nE);c2e=n(xSe,"STRONG",{});var tFt=s(c2e);e4r=r(tFt,"flaubert"),tFt.forEach(t),o4r=r(xSe," \u2014 "),DW=n(xSe,"A",{href:!0});var aFt=s(DW);r4r=r(aFt,"TFFlaubertForSequenceClassification"),aFt.forEach(t),t4r=r(xSe," (FlauBERT model)"),xSe.forEach(t),a4r=i(te),sE=n(te,"LI",{});var $Se=s(sE);f2e=n($Se,"STRONG",{});var nFt=s(f2e);n4r=r(nFt,"funnel"),nFt.forEach(t),s4r=r($Se," \u2014 "),GW=n($Se,"A",{href:!0});var sFt=s(GW);l4r=r(sFt,"TFFunnelForSequenceClassification"),sFt.forEach(t),i4r=r($Se," (Funnel Transformer model)"),$Se.forEach(t),d4r=i(te),lE=n(te,"LI",{});var kSe=s(lE);m2e=n(kSe,"STRONG",{});var lFt=s(m2e);c4r=r(lFt,"gpt2"),lFt.forEach(t),f4r=r(kSe," \u2014 "),OW=n(kSe,"A",{href:!0});var iFt=s(OW);m4r=r(iFt,"TFGPT2ForSequenceClassification"),iFt.forEach(t),g4r=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),h4r=i(te),iE=n(te,"LI",{});var SSe=s(iE);g2e=n(SSe,"STRONG",{});var dFt=s(g2e);p4r=r(dFt,"gptj"),dFt.forEach(t),u4r=r(SSe," \u2014 "),VW=n(SSe,"A",{href:!0});var cFt=s(VW);_4r=r(cFt,"TFGPTJForSequenceClassification"),cFt.forEach(t),b4r=r(SSe," (GPT-J model)"),SSe.forEach(t),v4r=i(te),dE=n(te,"LI",{});var RSe=s(dE);h2e=n(RSe,"STRONG",{});var fFt=s(h2e);F4r=r(fFt,"layoutlm"),fFt.forEach(t),T4r=r(RSe," \u2014 "),XW=n(RSe,"A",{href:!0});var mFt=s(XW);M4r=r(mFt,"TFLayoutLMForSequenceClassification"),mFt.forEach(t),E4r=r(RSe," (LayoutLM model)"),RSe.forEach(t),C4r=i(te),cE=n(te,"LI",{});var BSe=s(cE);p2e=n(BSe,"STRONG",{});var gFt=s(p2e);w4r=r(gFt,"longformer"),gFt.forEach(t),A4r=r(BSe," \u2014 "),zW=n(BSe,"A",{href:!0});var hFt=s(zW);y4r=r(hFt,"TFLongformerForSequenceClassification"),hFt.forEach(t),L4r=r(BSe," (Longformer model)"),BSe.forEach(t),x4r=i(te),fE=n(te,"LI",{});var PSe=s(fE);u2e=n(PSe,"STRONG",{});var pFt=s(u2e);$4r=r(pFt,"mobilebert"),pFt.forEach(t),k4r=r(PSe," \u2014 "),QW=n(PSe,"A",{href:!0});var uFt=s(QW);S4r=r(uFt,"TFMobileBertForSequenceClassification"),uFt.forEach(t),R4r=r(PSe," (MobileBERT model)"),PSe.forEach(t),B4r=i(te),mE=n(te,"LI",{});var ISe=s(mE);_2e=n(ISe,"STRONG",{});var _Ft=s(_2e);P4r=r(_Ft,"mpnet"),_Ft.forEach(t),I4r=r(ISe," \u2014 "),WW=n(ISe,"A",{href:!0});var bFt=s(WW);q4r=r(bFt,"TFMPNetForSequenceClassification"),bFt.forEach(t),N4r=r(ISe," (MPNet model)"),ISe.forEach(t),j4r=i(te),gE=n(te,"LI",{});var qSe=s(gE);b2e=n(qSe,"STRONG",{});var vFt=s(b2e);D4r=r(vFt,"openai-gpt"),vFt.forEach(t),G4r=r(qSe," \u2014 "),HW=n(qSe,"A",{href:!0});var FFt=s(HW);O4r=r(FFt,"TFOpenAIGPTForSequenceClassification"),FFt.forEach(t),V4r=r(qSe," (OpenAI GPT model)"),qSe.forEach(t),X4r=i(te),hE=n(te,"LI",{});var NSe=s(hE);v2e=n(NSe,"STRONG",{});var TFt=s(v2e);z4r=r(TFt,"rembert"),TFt.forEach(t),Q4r=r(NSe," \u2014 "),UW=n(NSe,"A",{href:!0});var MFt=s(UW);W4r=r(MFt,"TFRemBertForSequenceClassification"),MFt.forEach(t),H4r=r(NSe," (RemBERT model)"),NSe.forEach(t),U4r=i(te),pE=n(te,"LI",{});var jSe=s(pE);F2e=n(jSe,"STRONG",{});var EFt=s(F2e);J4r=r(EFt,"roberta"),EFt.forEach(t),Y4r=r(jSe," \u2014 "),JW=n(jSe,"A",{href:!0});var CFt=s(JW);K4r=r(CFt,"TFRobertaForSequenceClassification"),CFt.forEach(t),Z4r=r(jSe," (RoBERTa model)"),jSe.forEach(t),e2r=i(te),uE=n(te,"LI",{});var DSe=s(uE);T2e=n(DSe,"STRONG",{});var wFt=s(T2e);o2r=r(wFt,"roformer"),wFt.forEach(t),r2r=r(DSe," \u2014 "),YW=n(DSe,"A",{href:!0});var AFt=s(YW);t2r=r(AFt,"TFRoFormerForSequenceClassification"),AFt.forEach(t),a2r=r(DSe," (RoFormer model)"),DSe.forEach(t),n2r=i(te),_E=n(te,"LI",{});var GSe=s(_E);M2e=n(GSe,"STRONG",{});var yFt=s(M2e);s2r=r(yFt,"tapas"),yFt.forEach(t),l2r=r(GSe," \u2014 "),KW=n(GSe,"A",{href:!0});var LFt=s(KW);i2r=r(LFt,"TFTapasForSequenceClassification"),LFt.forEach(t),d2r=r(GSe," (TAPAS model)"),GSe.forEach(t),c2r=i(te),bE=n(te,"LI",{});var OSe=s(bE);E2e=n(OSe,"STRONG",{});var xFt=s(E2e);f2r=r(xFt,"transfo-xl"),xFt.forEach(t),m2r=r(OSe," \u2014 "),ZW=n(OSe,"A",{href:!0});var $Ft=s(ZW);g2r=r($Ft,"TFTransfoXLForSequenceClassification"),$Ft.forEach(t),h2r=r(OSe," (Transformer-XL model)"),OSe.forEach(t),p2r=i(te),vE=n(te,"LI",{});var VSe=s(vE);C2e=n(VSe,"STRONG",{});var kFt=s(C2e);u2r=r(kFt,"xlm"),kFt.forEach(t),_2r=r(VSe," \u2014 "),eH=n(VSe,"A",{href:!0});var SFt=s(eH);b2r=r(SFt,"TFXLMForSequenceClassification"),SFt.forEach(t),v2r=r(VSe," (XLM model)"),VSe.forEach(t),F2r=i(te),FE=n(te,"LI",{});var XSe=s(FE);w2e=n(XSe,"STRONG",{});var RFt=s(w2e);T2r=r(RFt,"xlm-roberta"),RFt.forEach(t),M2r=r(XSe," \u2014 "),oH=n(XSe,"A",{href:!0});var BFt=s(oH);E2r=r(BFt,"TFXLMRobertaForSequenceClassification"),BFt.forEach(t),C2r=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),w2r=i(te),TE=n(te,"LI",{});var zSe=s(TE);A2e=n(zSe,"STRONG",{});var PFt=s(A2e);A2r=r(PFt,"xlnet"),PFt.forEach(t),y2r=r(zSe," \u2014 "),rH=n(zSe,"A",{href:!0});var IFt=s(rH);L2r=r(IFt,"TFXLNetForSequenceClassification"),IFt.forEach(t),x2r=r(zSe," (XLNet model)"),zSe.forEach(t),te.forEach(t),$2r=i(Ml),T(ME.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),uqe=i(f),nc=n(f,"H2",{class:!0});var Mje=s(nc);EE=n(Mje,"A",{id:!0,class:!0,href:!0});var qFt=s(EE);y2e=n(qFt,"SPAN",{});var NFt=s(y2e);T(p8.$$.fragment,NFt),NFt.forEach(t),qFt.forEach(t),k2r=i(Mje),L2e=n(Mje,"SPAN",{});var jFt=s(L2e);S2r=r(jFt,"TFAutoModelForMultipleChoice"),jFt.forEach(t),Mje.forEach(t),_qe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(u8.$$.fragment,El),R2r=i(El),sc=n(El,"P",{});var FZ=s(sc);B2r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tH=n(FZ,"A",{href:!0});var DFt=s(tH);P2r=r(DFt,"from_pretrained()"),DFt.forEach(t),I2r=r(FZ," class method or the "),aH=n(FZ,"A",{href:!0});var GFt=s(aH);q2r=r(GFt,"from_config()"),GFt.forEach(t),N2r=r(FZ,` class
method.`),FZ.forEach(t),j2r=i(El),_8=n(El,"P",{});var Eje=s(_8);D2r=r(Eje,"This class cannot be instantiated directly using "),x2e=n(Eje,"CODE",{});var OFt=s(x2e);G2r=r(OFt,"__init__()"),OFt.forEach(t),O2r=r(Eje," (throws an error)."),Eje.forEach(t),V2r=i(El),St=n(El,"DIV",{class:!0});var f6=s(St);T(b8.$$.fragment,f6),X2r=i(f6),$2e=n(f6,"P",{});var VFt=s($2e);z2r=r(VFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VFt.forEach(t),Q2r=i(f6),lc=n(f6,"P",{});var TZ=s(lc);W2r=r(TZ,`Note:
Loading a model from its configuration file does `),k2e=n(TZ,"STRONG",{});var XFt=s(k2e);H2r=r(XFt,"not"),XFt.forEach(t),U2r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(TZ,"A",{href:!0});var zFt=s(nH);J2r=r(zFt,"from_pretrained()"),zFt.forEach(t),Y2r=r(TZ," to load the model weights."),TZ.forEach(t),K2r=i(f6),T(CE.$$.fragment,f6),f6.forEach(t),Z2r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(v8.$$.fragment,Cl),evr=i(Cl),S2e=n(Cl,"P",{});var QFt=s(S2e);ovr=r(QFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QFt.forEach(t),rvr=i(Cl),nn=n(Cl,"P",{});var m6=s(nn);tvr=r(m6,"The model class to instantiate is selected based on the "),R2e=n(m6,"CODE",{});var WFt=s(R2e);avr=r(WFt,"model_type"),WFt.forEach(t),nvr=r(m6,` property of the config object (either
passed as an argument or loaded from `),B2e=n(m6,"CODE",{});var HFt=s(B2e);svr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),lvr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(m6,"CODE",{});var UFt=s(P2e);ivr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),dvr=r(m6,":"),m6.forEach(t),cvr=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);wE=n(_e,"LI",{});var QSe=s(wE);I2e=n(QSe,"STRONG",{});var JFt=s(I2e);fvr=r(JFt,"albert"),JFt.forEach(t),mvr=r(QSe," \u2014 "),sH=n(QSe,"A",{href:!0});var YFt=s(sH);gvr=r(YFt,"TFAlbertForMultipleChoice"),YFt.forEach(t),hvr=r(QSe," (ALBERT model)"),QSe.forEach(t),pvr=i(_e),AE=n(_e,"LI",{});var WSe=s(AE);q2e=n(WSe,"STRONG",{});var KFt=s(q2e);uvr=r(KFt,"bert"),KFt.forEach(t),_vr=r(WSe," \u2014 "),lH=n(WSe,"A",{href:!0});var ZFt=s(lH);bvr=r(ZFt,"TFBertForMultipleChoice"),ZFt.forEach(t),vvr=r(WSe," (BERT model)"),WSe.forEach(t),Fvr=i(_e),yE=n(_e,"LI",{});var HSe=s(yE);N2e=n(HSe,"STRONG",{});var eTt=s(N2e);Tvr=r(eTt,"camembert"),eTt.forEach(t),Mvr=r(HSe," \u2014 "),iH=n(HSe,"A",{href:!0});var oTt=s(iH);Evr=r(oTt,"TFCamembertForMultipleChoice"),oTt.forEach(t),Cvr=r(HSe," (CamemBERT model)"),HSe.forEach(t),wvr=i(_e),LE=n(_e,"LI",{});var USe=s(LE);j2e=n(USe,"STRONG",{});var rTt=s(j2e);Avr=r(rTt,"convbert"),rTt.forEach(t),yvr=r(USe," \u2014 "),dH=n(USe,"A",{href:!0});var tTt=s(dH);Lvr=r(tTt,"TFConvBertForMultipleChoice"),tTt.forEach(t),xvr=r(USe," (ConvBERT model)"),USe.forEach(t),$vr=i(_e),xE=n(_e,"LI",{});var JSe=s(xE);D2e=n(JSe,"STRONG",{});var aTt=s(D2e);kvr=r(aTt,"distilbert"),aTt.forEach(t),Svr=r(JSe," \u2014 "),cH=n(JSe,"A",{href:!0});var nTt=s(cH);Rvr=r(nTt,"TFDistilBertForMultipleChoice"),nTt.forEach(t),Bvr=r(JSe," (DistilBERT model)"),JSe.forEach(t),Pvr=i(_e),$E=n(_e,"LI",{});var YSe=s($E);G2e=n(YSe,"STRONG",{});var sTt=s(G2e);Ivr=r(sTt,"electra"),sTt.forEach(t),qvr=r(YSe," \u2014 "),fH=n(YSe,"A",{href:!0});var lTt=s(fH);Nvr=r(lTt,"TFElectraForMultipleChoice"),lTt.forEach(t),jvr=r(YSe," (ELECTRA model)"),YSe.forEach(t),Dvr=i(_e),kE=n(_e,"LI",{});var KSe=s(kE);O2e=n(KSe,"STRONG",{});var iTt=s(O2e);Gvr=r(iTt,"flaubert"),iTt.forEach(t),Ovr=r(KSe," \u2014 "),mH=n(KSe,"A",{href:!0});var dTt=s(mH);Vvr=r(dTt,"TFFlaubertForMultipleChoice"),dTt.forEach(t),Xvr=r(KSe," (FlauBERT model)"),KSe.forEach(t),zvr=i(_e),SE=n(_e,"LI",{});var ZSe=s(SE);V2e=n(ZSe,"STRONG",{});var cTt=s(V2e);Qvr=r(cTt,"funnel"),cTt.forEach(t),Wvr=r(ZSe," \u2014 "),gH=n(ZSe,"A",{href:!0});var fTt=s(gH);Hvr=r(fTt,"TFFunnelForMultipleChoice"),fTt.forEach(t),Uvr=r(ZSe," (Funnel Transformer model)"),ZSe.forEach(t),Jvr=i(_e),RE=n(_e,"LI",{});var eRe=s(RE);X2e=n(eRe,"STRONG",{});var mTt=s(X2e);Yvr=r(mTt,"longformer"),mTt.forEach(t),Kvr=r(eRe," \u2014 "),hH=n(eRe,"A",{href:!0});var gTt=s(hH);Zvr=r(gTt,"TFLongformerForMultipleChoice"),gTt.forEach(t),eFr=r(eRe," (Longformer model)"),eRe.forEach(t),oFr=i(_e),BE=n(_e,"LI",{});var oRe=s(BE);z2e=n(oRe,"STRONG",{});var hTt=s(z2e);rFr=r(hTt,"mobilebert"),hTt.forEach(t),tFr=r(oRe," \u2014 "),pH=n(oRe,"A",{href:!0});var pTt=s(pH);aFr=r(pTt,"TFMobileBertForMultipleChoice"),pTt.forEach(t),nFr=r(oRe," (MobileBERT model)"),oRe.forEach(t),sFr=i(_e),PE=n(_e,"LI",{});var rRe=s(PE);Q2e=n(rRe,"STRONG",{});var uTt=s(Q2e);lFr=r(uTt,"mpnet"),uTt.forEach(t),iFr=r(rRe," \u2014 "),uH=n(rRe,"A",{href:!0});var _Tt=s(uH);dFr=r(_Tt,"TFMPNetForMultipleChoice"),_Tt.forEach(t),cFr=r(rRe," (MPNet model)"),rRe.forEach(t),fFr=i(_e),IE=n(_e,"LI",{});var tRe=s(IE);W2e=n(tRe,"STRONG",{});var bTt=s(W2e);mFr=r(bTt,"rembert"),bTt.forEach(t),gFr=r(tRe," \u2014 "),_H=n(tRe,"A",{href:!0});var vTt=s(_H);hFr=r(vTt,"TFRemBertForMultipleChoice"),vTt.forEach(t),pFr=r(tRe," (RemBERT model)"),tRe.forEach(t),uFr=i(_e),qE=n(_e,"LI",{});var aRe=s(qE);H2e=n(aRe,"STRONG",{});var FTt=s(H2e);_Fr=r(FTt,"roberta"),FTt.forEach(t),bFr=r(aRe," \u2014 "),bH=n(aRe,"A",{href:!0});var TTt=s(bH);vFr=r(TTt,"TFRobertaForMultipleChoice"),TTt.forEach(t),FFr=r(aRe," (RoBERTa model)"),aRe.forEach(t),TFr=i(_e),NE=n(_e,"LI",{});var nRe=s(NE);U2e=n(nRe,"STRONG",{});var MTt=s(U2e);MFr=r(MTt,"roformer"),MTt.forEach(t),EFr=r(nRe," \u2014 "),vH=n(nRe,"A",{href:!0});var ETt=s(vH);CFr=r(ETt,"TFRoFormerForMultipleChoice"),ETt.forEach(t),wFr=r(nRe," (RoFormer model)"),nRe.forEach(t),AFr=i(_e),jE=n(_e,"LI",{});var sRe=s(jE);J2e=n(sRe,"STRONG",{});var CTt=s(J2e);yFr=r(CTt,"xlm"),CTt.forEach(t),LFr=r(sRe," \u2014 "),FH=n(sRe,"A",{href:!0});var wTt=s(FH);xFr=r(wTt,"TFXLMForMultipleChoice"),wTt.forEach(t),$Fr=r(sRe," (XLM model)"),sRe.forEach(t),kFr=i(_e),DE=n(_e,"LI",{});var lRe=s(DE);Y2e=n(lRe,"STRONG",{});var ATt=s(Y2e);SFr=r(ATt,"xlm-roberta"),ATt.forEach(t),RFr=r(lRe," \u2014 "),TH=n(lRe,"A",{href:!0});var yTt=s(TH);BFr=r(yTt,"TFXLMRobertaForMultipleChoice"),yTt.forEach(t),PFr=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),IFr=i(_e),GE=n(_e,"LI",{});var iRe=s(GE);K2e=n(iRe,"STRONG",{});var LTt=s(K2e);qFr=r(LTt,"xlnet"),LTt.forEach(t),NFr=r(iRe," \u2014 "),MH=n(iRe,"A",{href:!0});var xTt=s(MH);jFr=r(xTt,"TFXLNetForMultipleChoice"),xTt.forEach(t),DFr=r(iRe," (XLNet model)"),iRe.forEach(t),_e.forEach(t),GFr=i(Cl),T(OE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),bqe=i(f),ic=n(f,"H2",{class:!0});var Cje=s(ic);VE=n(Cje,"A",{id:!0,class:!0,href:!0});var $Tt=s(VE);Z2e=n($Tt,"SPAN",{});var kTt=s(Z2e);T(F8.$$.fragment,kTt),kTt.forEach(t),$Tt.forEach(t),OFr=i(Cje),eve=n(Cje,"SPAN",{});var STt=s(eve);VFr=r(STt,"TFAutoModelForNextSentencePrediction"),STt.forEach(t),Cje.forEach(t),vqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(T8.$$.fragment,wl),XFr=i(wl),dc=n(wl,"P",{});var MZ=s(dc);zFr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EH=n(MZ,"A",{href:!0});var RTt=s(EH);QFr=r(RTt,"from_pretrained()"),RTt.forEach(t),WFr=r(MZ," class method or the "),CH=n(MZ,"A",{href:!0});var BTt=s(CH);HFr=r(BTt,"from_config()"),BTt.forEach(t),UFr=r(MZ,` class
method.`),MZ.forEach(t),JFr=i(wl),M8=n(wl,"P",{});var wje=s(M8);YFr=r(wje,"This class cannot be instantiated directly using "),ove=n(wje,"CODE",{});var PTt=s(ove);KFr=r(PTt,"__init__()"),PTt.forEach(t),ZFr=r(wje," (throws an error)."),wje.forEach(t),eTr=i(wl),Rt=n(wl,"DIV",{class:!0});var g6=s(Rt);T(E8.$$.fragment,g6),oTr=i(g6),rve=n(g6,"P",{});var ITt=s(rve);rTr=r(ITt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ITt.forEach(t),tTr=i(g6),cc=n(g6,"P",{});var EZ=s(cc);aTr=r(EZ,`Note:
Loading a model from its configuration file does `),tve=n(EZ,"STRONG",{});var qTt=s(tve);nTr=r(qTt,"not"),qTt.forEach(t),sTr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(EZ,"A",{href:!0});var NTt=s(wH);lTr=r(NTt,"from_pretrained()"),NTt.forEach(t),iTr=r(EZ," to load the model weights."),EZ.forEach(t),dTr=i(g6),T(XE.$$.fragment,g6),g6.forEach(t),cTr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(C8.$$.fragment,Al),fTr=i(Al),ave=n(Al,"P",{});var jTt=s(ave);mTr=r(jTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jTt.forEach(t),gTr=i(Al),sn=n(Al,"P",{});var h6=s(sn);hTr=r(h6,"The model class to instantiate is selected based on the "),nve=n(h6,"CODE",{});var DTt=s(nve);pTr=r(DTt,"model_type"),DTt.forEach(t),uTr=r(h6,` property of the config object (either
passed as an argument or loaded from `),sve=n(h6,"CODE",{});var GTt=s(sve);_Tr=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),bTr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(h6,"CODE",{});var OTt=s(lve);vTr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),FTr=r(h6,":"),h6.forEach(t),TTr=i(Al),w8=n(Al,"UL",{});var Aje=s(w8);zE=n(Aje,"LI",{});var dRe=s(zE);ive=n(dRe,"STRONG",{});var VTt=s(ive);MTr=r(VTt,"bert"),VTt.forEach(t),ETr=r(dRe," \u2014 "),AH=n(dRe,"A",{href:!0});var XTt=s(AH);CTr=r(XTt,"TFBertForNextSentencePrediction"),XTt.forEach(t),wTr=r(dRe," (BERT model)"),dRe.forEach(t),ATr=i(Aje),QE=n(Aje,"LI",{});var cRe=s(QE);dve=n(cRe,"STRONG",{});var zTt=s(dve);yTr=r(zTt,"mobilebert"),zTt.forEach(t),LTr=r(cRe," \u2014 "),yH=n(cRe,"A",{href:!0});var QTt=s(yH);xTr=r(QTt,"TFMobileBertForNextSentencePrediction"),QTt.forEach(t),$Tr=r(cRe," (MobileBERT model)"),cRe.forEach(t),Aje.forEach(t),kTr=i(Al),T(WE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Fqe=i(f),fc=n(f,"H2",{class:!0});var yje=s(fc);HE=n(yje,"A",{id:!0,class:!0,href:!0});var WTt=s(HE);cve=n(WTt,"SPAN",{});var HTt=s(cve);T(A8.$$.fragment,HTt),HTt.forEach(t),WTt.forEach(t),STr=i(yje),fve=n(yje,"SPAN",{});var UTt=s(fve);RTr=r(UTt,"TFAutoModelForTableQuestionAnswering"),UTt.forEach(t),yje.forEach(t),Tqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(y8.$$.fragment,yl),BTr=i(yl),mc=n(yl,"P",{});var CZ=s(mc);PTr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LH=n(CZ,"A",{href:!0});var JTt=s(LH);ITr=r(JTt,"from_pretrained()"),JTt.forEach(t),qTr=r(CZ," class method or the "),xH=n(CZ,"A",{href:!0});var YTt=s(xH);NTr=r(YTt,"from_config()"),YTt.forEach(t),jTr=r(CZ,` class
method.`),CZ.forEach(t),DTr=i(yl),L8=n(yl,"P",{});var Lje=s(L8);GTr=r(Lje,"This class cannot be instantiated directly using "),mve=n(Lje,"CODE",{});var KTt=s(mve);OTr=r(KTt,"__init__()"),KTt.forEach(t),VTr=r(Lje," (throws an error)."),Lje.forEach(t),XTr=i(yl),Bt=n(yl,"DIV",{class:!0});var p6=s(Bt);T(x8.$$.fragment,p6),zTr=i(p6),gve=n(p6,"P",{});var ZTt=s(gve);QTr=r(ZTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZTt.forEach(t),WTr=i(p6),gc=n(p6,"P",{});var wZ=s(gc);HTr=r(wZ,`Note:
Loading a model from its configuration file does `),hve=n(wZ,"STRONG",{});var e7t=s(hve);UTr=r(e7t,"not"),e7t.forEach(t),JTr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(wZ,"A",{href:!0});var o7t=s($H);YTr=r(o7t,"from_pretrained()"),o7t.forEach(t),KTr=r(wZ," to load the model weights."),wZ.forEach(t),ZTr=i(p6),T(UE.$$.fragment,p6),p6.forEach(t),e7r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T($8.$$.fragment,Ll),o7r=i(Ll),pve=n(Ll,"P",{});var r7t=s(pve);r7r=r(r7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),r7t.forEach(t),t7r=i(Ll),ln=n(Ll,"P",{});var u6=s(ln);a7r=r(u6,"The model class to instantiate is selected based on the "),uve=n(u6,"CODE",{});var t7t=s(uve);n7r=r(t7t,"model_type"),t7t.forEach(t),s7r=r(u6,` property of the config object (either
passed as an argument or loaded from `),_ve=n(u6,"CODE",{});var a7t=s(_ve);l7r=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),i7r=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(u6,"CODE",{});var n7t=s(bve);d7r=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),c7r=r(u6,":"),u6.forEach(t),f7r=i(Ll),vve=n(Ll,"UL",{});var s7t=s(vve);JE=n(s7t,"LI",{});var fRe=s(JE);Fve=n(fRe,"STRONG",{});var l7t=s(Fve);m7r=r(l7t,"tapas"),l7t.forEach(t),g7r=r(fRe," \u2014 "),kH=n(fRe,"A",{href:!0});var i7t=s(kH);h7r=r(i7t,"TFTapasForQuestionAnswering"),i7t.forEach(t),p7r=r(fRe," (TAPAS model)"),fRe.forEach(t),s7t.forEach(t),u7r=i(Ll),T(YE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Mqe=i(f),hc=n(f,"H2",{class:!0});var xje=s(hc);KE=n(xje,"A",{id:!0,class:!0,href:!0});var d7t=s(KE);Tve=n(d7t,"SPAN",{});var c7t=s(Tve);T(k8.$$.fragment,c7t),c7t.forEach(t),d7t.forEach(t),_7r=i(xje),Mve=n(xje,"SPAN",{});var f7t=s(Mve);b7r=r(f7t,"TFAutoModelForTokenClassification"),f7t.forEach(t),xje.forEach(t),Eqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(S8.$$.fragment,xl),v7r=i(xl),pc=n(xl,"P",{});var AZ=s(pc);F7r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SH=n(AZ,"A",{href:!0});var m7t=s(SH);T7r=r(m7t,"from_pretrained()"),m7t.forEach(t),M7r=r(AZ," class method or the "),RH=n(AZ,"A",{href:!0});var g7t=s(RH);E7r=r(g7t,"from_config()"),g7t.forEach(t),C7r=r(AZ,` class
method.`),AZ.forEach(t),w7r=i(xl),R8=n(xl,"P",{});var $je=s(R8);A7r=r($je,"This class cannot be instantiated directly using "),Eve=n($je,"CODE",{});var h7t=s(Eve);y7r=r(h7t,"__init__()"),h7t.forEach(t),L7r=r($je," (throws an error)."),$je.forEach(t),x7r=i(xl),Pt=n(xl,"DIV",{class:!0});var _6=s(Pt);T(B8.$$.fragment,_6),$7r=i(_6),Cve=n(_6,"P",{});var p7t=s(Cve);k7r=r(p7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p7t.forEach(t),S7r=i(_6),uc=n(_6,"P",{});var yZ=s(uc);R7r=r(yZ,`Note:
Loading a model from its configuration file does `),wve=n(yZ,"STRONG",{});var u7t=s(wve);B7r=r(u7t,"not"),u7t.forEach(t),P7r=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(yZ,"A",{href:!0});var _7t=s(BH);I7r=r(_7t,"from_pretrained()"),_7t.forEach(t),q7r=r(yZ," to load the model weights."),yZ.forEach(t),N7r=i(_6),T(ZE.$$.fragment,_6),_6.forEach(t),j7r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(P8.$$.fragment,$l),D7r=i($l),Ave=n($l,"P",{});var b7t=s(Ave);G7r=r(b7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b7t.forEach(t),O7r=i($l),dn=n($l,"P",{});var b6=s(dn);V7r=r(b6,"The model class to instantiate is selected based on the "),yve=n(b6,"CODE",{});var v7t=s(yve);X7r=r(v7t,"model_type"),v7t.forEach(t),z7r=r(b6,` property of the config object (either
passed as an argument or loaded from `),Lve=n(b6,"CODE",{});var F7t=s(Lve);Q7r=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),W7r=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(b6,"CODE",{});var T7t=s(xve);H7r=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),U7r=r(b6,":"),b6.forEach(t),J7r=i($l),de=n($l,"UL",{});var me=s(de);e5=n(me,"LI",{});var mRe=s(e5);$ve=n(mRe,"STRONG",{});var M7t=s($ve);Y7r=r(M7t,"albert"),M7t.forEach(t),K7r=r(mRe," \u2014 "),PH=n(mRe,"A",{href:!0});var E7t=s(PH);Z7r=r(E7t,"TFAlbertForTokenClassification"),E7t.forEach(t),eMr=r(mRe," (ALBERT model)"),mRe.forEach(t),oMr=i(me),o5=n(me,"LI",{});var gRe=s(o5);kve=n(gRe,"STRONG",{});var C7t=s(kve);rMr=r(C7t,"bert"),C7t.forEach(t),tMr=r(gRe," \u2014 "),IH=n(gRe,"A",{href:!0});var w7t=s(IH);aMr=r(w7t,"TFBertForTokenClassification"),w7t.forEach(t),nMr=r(gRe," (BERT model)"),gRe.forEach(t),sMr=i(me),r5=n(me,"LI",{});var hRe=s(r5);Sve=n(hRe,"STRONG",{});var A7t=s(Sve);lMr=r(A7t,"camembert"),A7t.forEach(t),iMr=r(hRe," \u2014 "),qH=n(hRe,"A",{href:!0});var y7t=s(qH);dMr=r(y7t,"TFCamembertForTokenClassification"),y7t.forEach(t),cMr=r(hRe," (CamemBERT model)"),hRe.forEach(t),fMr=i(me),t5=n(me,"LI",{});var pRe=s(t5);Rve=n(pRe,"STRONG",{});var L7t=s(Rve);mMr=r(L7t,"convbert"),L7t.forEach(t),gMr=r(pRe," \u2014 "),NH=n(pRe,"A",{href:!0});var x7t=s(NH);hMr=r(x7t,"TFConvBertForTokenClassification"),x7t.forEach(t),pMr=r(pRe," (ConvBERT model)"),pRe.forEach(t),uMr=i(me),a5=n(me,"LI",{});var uRe=s(a5);Bve=n(uRe,"STRONG",{});var $7t=s(Bve);_Mr=r($7t,"deberta"),$7t.forEach(t),bMr=r(uRe," \u2014 "),jH=n(uRe,"A",{href:!0});var k7t=s(jH);vMr=r(k7t,"TFDebertaForTokenClassification"),k7t.forEach(t),FMr=r(uRe," (DeBERTa model)"),uRe.forEach(t),TMr=i(me),n5=n(me,"LI",{});var _Re=s(n5);Pve=n(_Re,"STRONG",{});var S7t=s(Pve);MMr=r(S7t,"deberta-v2"),S7t.forEach(t),EMr=r(_Re," \u2014 "),DH=n(_Re,"A",{href:!0});var R7t=s(DH);CMr=r(R7t,"TFDebertaV2ForTokenClassification"),R7t.forEach(t),wMr=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),AMr=i(me),s5=n(me,"LI",{});var bRe=s(s5);Ive=n(bRe,"STRONG",{});var B7t=s(Ive);yMr=r(B7t,"distilbert"),B7t.forEach(t),LMr=r(bRe," \u2014 "),GH=n(bRe,"A",{href:!0});var P7t=s(GH);xMr=r(P7t,"TFDistilBertForTokenClassification"),P7t.forEach(t),$Mr=r(bRe," (DistilBERT model)"),bRe.forEach(t),kMr=i(me),l5=n(me,"LI",{});var vRe=s(l5);qve=n(vRe,"STRONG",{});var I7t=s(qve);SMr=r(I7t,"electra"),I7t.forEach(t),RMr=r(vRe," \u2014 "),OH=n(vRe,"A",{href:!0});var q7t=s(OH);BMr=r(q7t,"TFElectraForTokenClassification"),q7t.forEach(t),PMr=r(vRe," (ELECTRA model)"),vRe.forEach(t),IMr=i(me),i5=n(me,"LI",{});var FRe=s(i5);Nve=n(FRe,"STRONG",{});var N7t=s(Nve);qMr=r(N7t,"flaubert"),N7t.forEach(t),NMr=r(FRe," \u2014 "),VH=n(FRe,"A",{href:!0});var j7t=s(VH);jMr=r(j7t,"TFFlaubertForTokenClassification"),j7t.forEach(t),DMr=r(FRe," (FlauBERT model)"),FRe.forEach(t),GMr=i(me),d5=n(me,"LI",{});var TRe=s(d5);jve=n(TRe,"STRONG",{});var D7t=s(jve);OMr=r(D7t,"funnel"),D7t.forEach(t),VMr=r(TRe," \u2014 "),XH=n(TRe,"A",{href:!0});var G7t=s(XH);XMr=r(G7t,"TFFunnelForTokenClassification"),G7t.forEach(t),zMr=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),QMr=i(me),c5=n(me,"LI",{});var MRe=s(c5);Dve=n(MRe,"STRONG",{});var O7t=s(Dve);WMr=r(O7t,"layoutlm"),O7t.forEach(t),HMr=r(MRe," \u2014 "),zH=n(MRe,"A",{href:!0});var V7t=s(zH);UMr=r(V7t,"TFLayoutLMForTokenClassification"),V7t.forEach(t),JMr=r(MRe," (LayoutLM model)"),MRe.forEach(t),YMr=i(me),f5=n(me,"LI",{});var ERe=s(f5);Gve=n(ERe,"STRONG",{});var X7t=s(Gve);KMr=r(X7t,"longformer"),X7t.forEach(t),ZMr=r(ERe," \u2014 "),QH=n(ERe,"A",{href:!0});var z7t=s(QH);eEr=r(z7t,"TFLongformerForTokenClassification"),z7t.forEach(t),oEr=r(ERe," (Longformer model)"),ERe.forEach(t),rEr=i(me),m5=n(me,"LI",{});var CRe=s(m5);Ove=n(CRe,"STRONG",{});var Q7t=s(Ove);tEr=r(Q7t,"mobilebert"),Q7t.forEach(t),aEr=r(CRe," \u2014 "),WH=n(CRe,"A",{href:!0});var W7t=s(WH);nEr=r(W7t,"TFMobileBertForTokenClassification"),W7t.forEach(t),sEr=r(CRe," (MobileBERT model)"),CRe.forEach(t),lEr=i(me),g5=n(me,"LI",{});var wRe=s(g5);Vve=n(wRe,"STRONG",{});var H7t=s(Vve);iEr=r(H7t,"mpnet"),H7t.forEach(t),dEr=r(wRe," \u2014 "),HH=n(wRe,"A",{href:!0});var U7t=s(HH);cEr=r(U7t,"TFMPNetForTokenClassification"),U7t.forEach(t),fEr=r(wRe," (MPNet model)"),wRe.forEach(t),mEr=i(me),h5=n(me,"LI",{});var ARe=s(h5);Xve=n(ARe,"STRONG",{});var J7t=s(Xve);gEr=r(J7t,"rembert"),J7t.forEach(t),hEr=r(ARe," \u2014 "),UH=n(ARe,"A",{href:!0});var Y7t=s(UH);pEr=r(Y7t,"TFRemBertForTokenClassification"),Y7t.forEach(t),uEr=r(ARe," (RemBERT model)"),ARe.forEach(t),_Er=i(me),p5=n(me,"LI",{});var yRe=s(p5);zve=n(yRe,"STRONG",{});var K7t=s(zve);bEr=r(K7t,"roberta"),K7t.forEach(t),vEr=r(yRe," \u2014 "),JH=n(yRe,"A",{href:!0});var Z7t=s(JH);FEr=r(Z7t,"TFRobertaForTokenClassification"),Z7t.forEach(t),TEr=r(yRe," (RoBERTa model)"),yRe.forEach(t),MEr=i(me),u5=n(me,"LI",{});var LRe=s(u5);Qve=n(LRe,"STRONG",{});var eMt=s(Qve);EEr=r(eMt,"roformer"),eMt.forEach(t),CEr=r(LRe," \u2014 "),YH=n(LRe,"A",{href:!0});var oMt=s(YH);wEr=r(oMt,"TFRoFormerForTokenClassification"),oMt.forEach(t),AEr=r(LRe," (RoFormer model)"),LRe.forEach(t),yEr=i(me),_5=n(me,"LI",{});var xRe=s(_5);Wve=n(xRe,"STRONG",{});var rMt=s(Wve);LEr=r(rMt,"xlm"),rMt.forEach(t),xEr=r(xRe," \u2014 "),KH=n(xRe,"A",{href:!0});var tMt=s(KH);$Er=r(tMt,"TFXLMForTokenClassification"),tMt.forEach(t),kEr=r(xRe," (XLM model)"),xRe.forEach(t),SEr=i(me),b5=n(me,"LI",{});var $Re=s(b5);Hve=n($Re,"STRONG",{});var aMt=s(Hve);REr=r(aMt,"xlm-roberta"),aMt.forEach(t),BEr=r($Re," \u2014 "),ZH=n($Re,"A",{href:!0});var nMt=s(ZH);PEr=r(nMt,"TFXLMRobertaForTokenClassification"),nMt.forEach(t),IEr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),qEr=i(me),v5=n(me,"LI",{});var kRe=s(v5);Uve=n(kRe,"STRONG",{});var sMt=s(Uve);NEr=r(sMt,"xlnet"),sMt.forEach(t),jEr=r(kRe," \u2014 "),eU=n(kRe,"A",{href:!0});var lMt=s(eU);DEr=r(lMt,"TFXLNetForTokenClassification"),lMt.forEach(t),GEr=r(kRe," (XLNet model)"),kRe.forEach(t),me.forEach(t),OEr=i($l),T(F5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Cqe=i(f),_c=n(f,"H2",{class:!0});var kje=s(_c);T5=n(kje,"A",{id:!0,class:!0,href:!0});var iMt=s(T5);Jve=n(iMt,"SPAN",{});var dMt=s(Jve);T(I8.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),VEr=i(kje),Yve=n(kje,"SPAN",{});var cMt=s(Yve);XEr=r(cMt,"TFAutoModelForQuestionAnswering"),cMt.forEach(t),kje.forEach(t),wqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(q8.$$.fragment,kl),zEr=i(kl),bc=n(kl,"P",{});var LZ=s(bc);QEr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oU=n(LZ,"A",{href:!0});var fMt=s(oU);WEr=r(fMt,"from_pretrained()"),fMt.forEach(t),HEr=r(LZ," class method or the "),rU=n(LZ,"A",{href:!0});var mMt=s(rU);UEr=r(mMt,"from_config()"),mMt.forEach(t),JEr=r(LZ,` class
method.`),LZ.forEach(t),YEr=i(kl),N8=n(kl,"P",{});var Sje=s(N8);KEr=r(Sje,"This class cannot be instantiated directly using "),Kve=n(Sje,"CODE",{});var gMt=s(Kve);ZEr=r(gMt,"__init__()"),gMt.forEach(t),e5r=r(Sje," (throws an error)."),Sje.forEach(t),o5r=i(kl),It=n(kl,"DIV",{class:!0});var v6=s(It);T(j8.$$.fragment,v6),r5r=i(v6),Zve=n(v6,"P",{});var hMt=s(Zve);t5r=r(hMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hMt.forEach(t),a5r=i(v6),vc=n(v6,"P",{});var xZ=s(vc);n5r=r(xZ,`Note:
Loading a model from its configuration file does `),eFe=n(xZ,"STRONG",{});var pMt=s(eFe);s5r=r(pMt,"not"),pMt.forEach(t),l5r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(xZ,"A",{href:!0});var uMt=s(tU);i5r=r(uMt,"from_pretrained()"),uMt.forEach(t),d5r=r(xZ," to load the model weights."),xZ.forEach(t),c5r=i(v6),T(M5.$$.fragment,v6),v6.forEach(t),f5r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(D8.$$.fragment,Sl),m5r=i(Sl),oFe=n(Sl,"P",{});var _Mt=s(oFe);g5r=r(_Mt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Mt.forEach(t),h5r=i(Sl),cn=n(Sl,"P",{});var F6=s(cn);p5r=r(F6,"The model class to instantiate is selected based on the "),rFe=n(F6,"CODE",{});var bMt=s(rFe);u5r=r(bMt,"model_type"),bMt.forEach(t),_5r=r(F6,` property of the config object (either
passed as an argument or loaded from `),tFe=n(F6,"CODE",{});var vMt=s(tFe);b5r=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),v5r=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(F6,"CODE",{});var FMt=s(aFe);F5r=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),T5r=r(F6,":"),F6.forEach(t),M5r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);E5=n(ge,"LI",{});var SRe=s(E5);nFe=n(SRe,"STRONG",{});var TMt=s(nFe);E5r=r(TMt,"albert"),TMt.forEach(t),C5r=r(SRe," \u2014 "),aU=n(SRe,"A",{href:!0});var MMt=s(aU);w5r=r(MMt,"TFAlbertForQuestionAnswering"),MMt.forEach(t),A5r=r(SRe," (ALBERT model)"),SRe.forEach(t),y5r=i(ge),C5=n(ge,"LI",{});var RRe=s(C5);sFe=n(RRe,"STRONG",{});var EMt=s(sFe);L5r=r(EMt,"bert"),EMt.forEach(t),x5r=r(RRe," \u2014 "),nU=n(RRe,"A",{href:!0});var CMt=s(nU);$5r=r(CMt,"TFBertForQuestionAnswering"),CMt.forEach(t),k5r=r(RRe," (BERT model)"),RRe.forEach(t),S5r=i(ge),w5=n(ge,"LI",{});var BRe=s(w5);lFe=n(BRe,"STRONG",{});var wMt=s(lFe);R5r=r(wMt,"camembert"),wMt.forEach(t),B5r=r(BRe," \u2014 "),sU=n(BRe,"A",{href:!0});var AMt=s(sU);P5r=r(AMt,"TFCamembertForQuestionAnswering"),AMt.forEach(t),I5r=r(BRe," (CamemBERT model)"),BRe.forEach(t),q5r=i(ge),A5=n(ge,"LI",{});var PRe=s(A5);iFe=n(PRe,"STRONG",{});var yMt=s(iFe);N5r=r(yMt,"convbert"),yMt.forEach(t),j5r=r(PRe," \u2014 "),lU=n(PRe,"A",{href:!0});var LMt=s(lU);D5r=r(LMt,"TFConvBertForQuestionAnswering"),LMt.forEach(t),G5r=r(PRe," (ConvBERT model)"),PRe.forEach(t),O5r=i(ge),y5=n(ge,"LI",{});var IRe=s(y5);dFe=n(IRe,"STRONG",{});var xMt=s(dFe);V5r=r(xMt,"deberta"),xMt.forEach(t),X5r=r(IRe," \u2014 "),iU=n(IRe,"A",{href:!0});var $Mt=s(iU);z5r=r($Mt,"TFDebertaForQuestionAnswering"),$Mt.forEach(t),Q5r=r(IRe," (DeBERTa model)"),IRe.forEach(t),W5r=i(ge),L5=n(ge,"LI",{});var qRe=s(L5);cFe=n(qRe,"STRONG",{});var kMt=s(cFe);H5r=r(kMt,"deberta-v2"),kMt.forEach(t),U5r=r(qRe," \u2014 "),dU=n(qRe,"A",{href:!0});var SMt=s(dU);J5r=r(SMt,"TFDebertaV2ForQuestionAnswering"),SMt.forEach(t),Y5r=r(qRe," (DeBERTa-v2 model)"),qRe.forEach(t),K5r=i(ge),x5=n(ge,"LI",{});var NRe=s(x5);fFe=n(NRe,"STRONG",{});var RMt=s(fFe);Z5r=r(RMt,"distilbert"),RMt.forEach(t),eCr=r(NRe," \u2014 "),cU=n(NRe,"A",{href:!0});var BMt=s(cU);oCr=r(BMt,"TFDistilBertForQuestionAnswering"),BMt.forEach(t),rCr=r(NRe," (DistilBERT model)"),NRe.forEach(t),tCr=i(ge),$5=n(ge,"LI",{});var jRe=s($5);mFe=n(jRe,"STRONG",{});var PMt=s(mFe);aCr=r(PMt,"electra"),PMt.forEach(t),nCr=r(jRe," \u2014 "),fU=n(jRe,"A",{href:!0});var IMt=s(fU);sCr=r(IMt,"TFElectraForQuestionAnswering"),IMt.forEach(t),lCr=r(jRe," (ELECTRA model)"),jRe.forEach(t),iCr=i(ge),k5=n(ge,"LI",{});var DRe=s(k5);gFe=n(DRe,"STRONG",{});var qMt=s(gFe);dCr=r(qMt,"flaubert"),qMt.forEach(t),cCr=r(DRe," \u2014 "),mU=n(DRe,"A",{href:!0});var NMt=s(mU);fCr=r(NMt,"TFFlaubertForQuestionAnsweringSimple"),NMt.forEach(t),mCr=r(DRe," (FlauBERT model)"),DRe.forEach(t),gCr=i(ge),S5=n(ge,"LI",{});var GRe=s(S5);hFe=n(GRe,"STRONG",{});var jMt=s(hFe);hCr=r(jMt,"funnel"),jMt.forEach(t),pCr=r(GRe," \u2014 "),gU=n(GRe,"A",{href:!0});var DMt=s(gU);uCr=r(DMt,"TFFunnelForQuestionAnswering"),DMt.forEach(t),_Cr=r(GRe," (Funnel Transformer model)"),GRe.forEach(t),bCr=i(ge),R5=n(ge,"LI",{});var ORe=s(R5);pFe=n(ORe,"STRONG",{});var GMt=s(pFe);vCr=r(GMt,"gptj"),GMt.forEach(t),FCr=r(ORe," \u2014 "),hU=n(ORe,"A",{href:!0});var OMt=s(hU);TCr=r(OMt,"TFGPTJForQuestionAnswering"),OMt.forEach(t),MCr=r(ORe," (GPT-J model)"),ORe.forEach(t),ECr=i(ge),B5=n(ge,"LI",{});var VRe=s(B5);uFe=n(VRe,"STRONG",{});var VMt=s(uFe);CCr=r(VMt,"longformer"),VMt.forEach(t),wCr=r(VRe," \u2014 "),pU=n(VRe,"A",{href:!0});var XMt=s(pU);ACr=r(XMt,"TFLongformerForQuestionAnswering"),XMt.forEach(t),yCr=r(VRe," (Longformer model)"),VRe.forEach(t),LCr=i(ge),P5=n(ge,"LI",{});var XRe=s(P5);_Fe=n(XRe,"STRONG",{});var zMt=s(_Fe);xCr=r(zMt,"mobilebert"),zMt.forEach(t),$Cr=r(XRe," \u2014 "),uU=n(XRe,"A",{href:!0});var QMt=s(uU);kCr=r(QMt,"TFMobileBertForQuestionAnswering"),QMt.forEach(t),SCr=r(XRe," (MobileBERT model)"),XRe.forEach(t),RCr=i(ge),I5=n(ge,"LI",{});var zRe=s(I5);bFe=n(zRe,"STRONG",{});var WMt=s(bFe);BCr=r(WMt,"mpnet"),WMt.forEach(t),PCr=r(zRe," \u2014 "),_U=n(zRe,"A",{href:!0});var HMt=s(_U);ICr=r(HMt,"TFMPNetForQuestionAnswering"),HMt.forEach(t),qCr=r(zRe," (MPNet model)"),zRe.forEach(t),NCr=i(ge),q5=n(ge,"LI",{});var QRe=s(q5);vFe=n(QRe,"STRONG",{});var UMt=s(vFe);jCr=r(UMt,"rembert"),UMt.forEach(t),DCr=r(QRe," \u2014 "),bU=n(QRe,"A",{href:!0});var JMt=s(bU);GCr=r(JMt,"TFRemBertForQuestionAnswering"),JMt.forEach(t),OCr=r(QRe," (RemBERT model)"),QRe.forEach(t),VCr=i(ge),N5=n(ge,"LI",{});var WRe=s(N5);FFe=n(WRe,"STRONG",{});var YMt=s(FFe);XCr=r(YMt,"roberta"),YMt.forEach(t),zCr=r(WRe," \u2014 "),vU=n(WRe,"A",{href:!0});var KMt=s(vU);QCr=r(KMt,"TFRobertaForQuestionAnswering"),KMt.forEach(t),WCr=r(WRe," (RoBERTa model)"),WRe.forEach(t),HCr=i(ge),j5=n(ge,"LI",{});var HRe=s(j5);TFe=n(HRe,"STRONG",{});var ZMt=s(TFe);UCr=r(ZMt,"roformer"),ZMt.forEach(t),JCr=r(HRe," \u2014 "),FU=n(HRe,"A",{href:!0});var eEt=s(FU);YCr=r(eEt,"TFRoFormerForQuestionAnswering"),eEt.forEach(t),KCr=r(HRe," (RoFormer model)"),HRe.forEach(t),ZCr=i(ge),D5=n(ge,"LI",{});var URe=s(D5);MFe=n(URe,"STRONG",{});var oEt=s(MFe);e3r=r(oEt,"xlm"),oEt.forEach(t),o3r=r(URe," \u2014 "),TU=n(URe,"A",{href:!0});var rEt=s(TU);r3r=r(rEt,"TFXLMForQuestionAnsweringSimple"),rEt.forEach(t),t3r=r(URe," (XLM model)"),URe.forEach(t),a3r=i(ge),G5=n(ge,"LI",{});var JRe=s(G5);EFe=n(JRe,"STRONG",{});var tEt=s(EFe);n3r=r(tEt,"xlm-roberta"),tEt.forEach(t),s3r=r(JRe," \u2014 "),MU=n(JRe,"A",{href:!0});var aEt=s(MU);l3r=r(aEt,"TFXLMRobertaForQuestionAnswering"),aEt.forEach(t),i3r=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),d3r=i(ge),O5=n(ge,"LI",{});var YRe=s(O5);CFe=n(YRe,"STRONG",{});var nEt=s(CFe);c3r=r(nEt,"xlnet"),nEt.forEach(t),f3r=r(YRe," \u2014 "),EU=n(YRe,"A",{href:!0});var sEt=s(EU);m3r=r(sEt,"TFXLNetForQuestionAnsweringSimple"),sEt.forEach(t),g3r=r(YRe," (XLNet model)"),YRe.forEach(t),ge.forEach(t),h3r=i(Sl),T(V5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Aqe=i(f),Fc=n(f,"H2",{class:!0});var Rje=s(Fc);X5=n(Rje,"A",{id:!0,class:!0,href:!0});var lEt=s(X5);wFe=n(lEt,"SPAN",{});var iEt=s(wFe);T(G8.$$.fragment,iEt),iEt.forEach(t),lEt.forEach(t),p3r=i(Rje),AFe=n(Rje,"SPAN",{});var dEt=s(AFe);u3r=r(dEt,"TFAutoModelForVision2Seq"),dEt.forEach(t),Rje.forEach(t),yqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(O8.$$.fragment,Rl),_3r=i(Rl),Tc=n(Rl,"P",{});var $Z=s(Tc);b3r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CU=n($Z,"A",{href:!0});var cEt=s(CU);v3r=r(cEt,"from_pretrained()"),cEt.forEach(t),F3r=r($Z," class method or the "),wU=n($Z,"A",{href:!0});var fEt=s(wU);T3r=r(fEt,"from_config()"),fEt.forEach(t),M3r=r($Z,` class
method.`),$Z.forEach(t),E3r=i(Rl),V8=n(Rl,"P",{});var Bje=s(V8);C3r=r(Bje,"This class cannot be instantiated directly using "),yFe=n(Bje,"CODE",{});var mEt=s(yFe);w3r=r(mEt,"__init__()"),mEt.forEach(t),A3r=r(Bje," (throws an error)."),Bje.forEach(t),y3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var T6=s(qt);T(X8.$$.fragment,T6),L3r=i(T6),LFe=n(T6,"P",{});var gEt=s(LFe);x3r=r(gEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gEt.forEach(t),$3r=i(T6),Mc=n(T6,"P",{});var kZ=s(Mc);k3r=r(kZ,`Note:
Loading a model from its configuration file does `),xFe=n(kZ,"STRONG",{});var hEt=s(xFe);S3r=r(hEt,"not"),hEt.forEach(t),R3r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(kZ,"A",{href:!0});var pEt=s(AU);B3r=r(pEt,"from_pretrained()"),pEt.forEach(t),P3r=r(kZ," to load the model weights."),kZ.forEach(t),I3r=i(T6),T(z5.$$.fragment,T6),T6.forEach(t),q3r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(z8.$$.fragment,Bl),N3r=i(Bl),$Fe=n(Bl,"P",{});var uEt=s($Fe);j3r=r(uEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uEt.forEach(t),D3r=i(Bl),fn=n(Bl,"P",{});var M6=s(fn);G3r=r(M6,"The model class to instantiate is selected based on the "),kFe=n(M6,"CODE",{});var _Et=s(kFe);O3r=r(_Et,"model_type"),_Et.forEach(t),V3r=r(M6,` property of the config object (either
passed as an argument or loaded from `),SFe=n(M6,"CODE",{});var bEt=s(SFe);X3r=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),z3r=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(M6,"CODE",{});var vEt=s(RFe);Q3r=r(vEt,"pretrained_model_name_or_path"),vEt.forEach(t),W3r=r(M6,":"),M6.forEach(t),H3r=i(Bl),BFe=n(Bl,"UL",{});var FEt=s(BFe);Q5=n(FEt,"LI",{});var KRe=s(Q5);PFe=n(KRe,"STRONG",{});var TEt=s(PFe);U3r=r(TEt,"vision-encoder-decoder"),TEt.forEach(t),J3r=r(KRe," \u2014 "),yU=n(KRe,"A",{href:!0});var MEt=s(yU);Y3r=r(MEt,"TFVisionEncoderDecoderModel"),MEt.forEach(t),K3r=r(KRe," (Vision Encoder decoder model)"),KRe.forEach(t),FEt.forEach(t),Z3r=i(Bl),T(W5.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),Lqe=i(f),Ec=n(f,"H2",{class:!0});var Pje=s(Ec);H5=n(Pje,"A",{id:!0,class:!0,href:!0});var EEt=s(H5);IFe=n(EEt,"SPAN",{});var CEt=s(IFe);T(Q8.$$.fragment,CEt),CEt.forEach(t),EEt.forEach(t),ewr=i(Pje),qFe=n(Pje,"SPAN",{});var wEt=s(qFe);owr=r(wEt,"TFAutoModelForSpeechSeq2Seq"),wEt.forEach(t),Pje.forEach(t),xqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(W8.$$.fragment,Pl),rwr=i(Pl),Cc=n(Pl,"P",{});var SZ=s(Cc);twr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LU=n(SZ,"A",{href:!0});var AEt=s(LU);awr=r(AEt,"from_pretrained()"),AEt.forEach(t),nwr=r(SZ," class method or the "),xU=n(SZ,"A",{href:!0});var yEt=s(xU);swr=r(yEt,"from_config()"),yEt.forEach(t),lwr=r(SZ,` class
method.`),SZ.forEach(t),iwr=i(Pl),H8=n(Pl,"P",{});var Ije=s(H8);dwr=r(Ije,"This class cannot be instantiated directly using "),NFe=n(Ije,"CODE",{});var LEt=s(NFe);cwr=r(LEt,"__init__()"),LEt.forEach(t),fwr=r(Ije," (throws an error)."),Ije.forEach(t),mwr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var E6=s(Nt);T(U8.$$.fragment,E6),gwr=i(E6),jFe=n(E6,"P",{});var xEt=s(jFe);hwr=r(xEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xEt.forEach(t),pwr=i(E6),wc=n(E6,"P",{});var RZ=s(wc);uwr=r(RZ,`Note:
Loading a model from its configuration file does `),DFe=n(RZ,"STRONG",{});var $Et=s(DFe);_wr=r($Et,"not"),$Et.forEach(t),bwr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(RZ,"A",{href:!0});var kEt=s($U);vwr=r(kEt,"from_pretrained()"),kEt.forEach(t),Fwr=r(RZ," to load the model weights."),RZ.forEach(t),Twr=i(E6),T(U5.$$.fragment,E6),E6.forEach(t),Mwr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(J8.$$.fragment,Il),Ewr=i(Il),GFe=n(Il,"P",{});var SEt=s(GFe);Cwr=r(SEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SEt.forEach(t),wwr=i(Il),mn=n(Il,"P",{});var C6=s(mn);Awr=r(C6,"The model class to instantiate is selected based on the "),OFe=n(C6,"CODE",{});var REt=s(OFe);ywr=r(REt,"model_type"),REt.forEach(t),Lwr=r(C6,` property of the config object (either
passed as an argument or loaded from `),VFe=n(C6,"CODE",{});var BEt=s(VFe);xwr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),$wr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(C6,"CODE",{});var PEt=s(XFe);kwr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),Swr=r(C6,":"),C6.forEach(t),Rwr=i(Il),zFe=n(Il,"UL",{});var IEt=s(zFe);J5=n(IEt,"LI",{});var ZRe=s(J5);QFe=n(ZRe,"STRONG",{});var qEt=s(QFe);Bwr=r(qEt,"speech_to_text"),qEt.forEach(t),Pwr=r(ZRe," \u2014 "),kU=n(ZRe,"A",{href:!0});var NEt=s(kU);Iwr=r(NEt,"TFSpeech2TextForConditionalGeneration"),NEt.forEach(t),qwr=r(ZRe," (Speech2Text model)"),ZRe.forEach(t),IEt.forEach(t),Nwr=i(Il),T(Y5.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),$qe=i(f),Ac=n(f,"H2",{class:!0});var qje=s(Ac);K5=n(qje,"A",{id:!0,class:!0,href:!0});var jEt=s(K5);WFe=n(jEt,"SPAN",{});var DEt=s(WFe);T(Y8.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),jwr=i(qje),HFe=n(qje,"SPAN",{});var GEt=s(HFe);Dwr=r(GEt,"FlaxAutoModel"),GEt.forEach(t),qje.forEach(t),kqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(K8.$$.fragment,ql),Gwr=i(ql),yc=n(ql,"P",{});var BZ=s(yc);Owr=r(BZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SU=n(BZ,"A",{href:!0});var OEt=s(SU);Vwr=r(OEt,"from_pretrained()"),OEt.forEach(t),Xwr=r(BZ," class method or the "),RU=n(BZ,"A",{href:!0});var VEt=s(RU);zwr=r(VEt,"from_config()"),VEt.forEach(t),Qwr=r(BZ,` class
method.`),BZ.forEach(t),Wwr=i(ql),Z8=n(ql,"P",{});var Nje=s(Z8);Hwr=r(Nje,"This class cannot be instantiated directly using "),UFe=n(Nje,"CODE",{});var XEt=s(UFe);Uwr=r(XEt,"__init__()"),XEt.forEach(t),Jwr=r(Nje," (throws an error)."),Nje.forEach(t),Ywr=i(ql),jt=n(ql,"DIV",{class:!0});var w6=s(jt);T(ex.$$.fragment,w6),Kwr=i(w6),JFe=n(w6,"P",{});var zEt=s(JFe);Zwr=r(zEt,"Instantiates one of the base model classes of the library from a configuration."),zEt.forEach(t),eAr=i(w6),Lc=n(w6,"P",{});var PZ=s(Lc);oAr=r(PZ,`Note:
Loading a model from its configuration file does `),YFe=n(PZ,"STRONG",{});var QEt=s(YFe);rAr=r(QEt,"not"),QEt.forEach(t),tAr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(PZ,"A",{href:!0});var WEt=s(BU);aAr=r(WEt,"from_pretrained()"),WEt.forEach(t),nAr=r(PZ," to load the model weights."),PZ.forEach(t),sAr=i(w6),T(Z5.$$.fragment,w6),w6.forEach(t),lAr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(ox.$$.fragment,Nl),iAr=i(Nl),KFe=n(Nl,"P",{});var HEt=s(KFe);dAr=r(HEt,"Instantiate one of the base model classes of the library from a pretrained model."),HEt.forEach(t),cAr=i(Nl),gn=n(Nl,"P",{});var A6=s(gn);fAr=r(A6,"The model class to instantiate is selected based on the "),ZFe=n(A6,"CODE",{});var UEt=s(ZFe);mAr=r(UEt,"model_type"),UEt.forEach(t),gAr=r(A6,` property of the config object (either
passed as an argument or loaded from `),eTe=n(A6,"CODE",{});var JEt=s(eTe);hAr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),pAr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(A6,"CODE",{});var YEt=s(oTe);uAr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),_Ar=r(A6,":"),A6.forEach(t),bAr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);eC=n(ne,"LI",{});var eBe=s(eC);rTe=n(eBe,"STRONG",{});var KEt=s(rTe);vAr=r(KEt,"albert"),KEt.forEach(t),FAr=r(eBe," \u2014 "),PU=n(eBe,"A",{href:!0});var ZEt=s(PU);TAr=r(ZEt,"FlaxAlbertModel"),ZEt.forEach(t),MAr=r(eBe," (ALBERT model)"),eBe.forEach(t),EAr=i(ne),oC=n(ne,"LI",{});var oBe=s(oC);tTe=n(oBe,"STRONG",{});var e5t=s(tTe);CAr=r(e5t,"bart"),e5t.forEach(t),wAr=r(oBe," \u2014 "),IU=n(oBe,"A",{href:!0});var o5t=s(IU);AAr=r(o5t,"FlaxBartModel"),o5t.forEach(t),yAr=r(oBe," (BART model)"),oBe.forEach(t),LAr=i(ne),rC=n(ne,"LI",{});var rBe=s(rC);aTe=n(rBe,"STRONG",{});var r5t=s(aTe);xAr=r(r5t,"beit"),r5t.forEach(t),$Ar=r(rBe," \u2014 "),qU=n(rBe,"A",{href:!0});var t5t=s(qU);kAr=r(t5t,"FlaxBeitModel"),t5t.forEach(t),SAr=r(rBe," (BEiT model)"),rBe.forEach(t),RAr=i(ne),tC=n(ne,"LI",{});var tBe=s(tC);nTe=n(tBe,"STRONG",{});var a5t=s(nTe);BAr=r(a5t,"bert"),a5t.forEach(t),PAr=r(tBe," \u2014 "),NU=n(tBe,"A",{href:!0});var n5t=s(NU);IAr=r(n5t,"FlaxBertModel"),n5t.forEach(t),qAr=r(tBe," (BERT model)"),tBe.forEach(t),NAr=i(ne),aC=n(ne,"LI",{});var aBe=s(aC);sTe=n(aBe,"STRONG",{});var s5t=s(sTe);jAr=r(s5t,"big_bird"),s5t.forEach(t),DAr=r(aBe," \u2014 "),jU=n(aBe,"A",{href:!0});var l5t=s(jU);GAr=r(l5t,"FlaxBigBirdModel"),l5t.forEach(t),OAr=r(aBe," (BigBird model)"),aBe.forEach(t),VAr=i(ne),nC=n(ne,"LI",{});var nBe=s(nC);lTe=n(nBe,"STRONG",{});var i5t=s(lTe);XAr=r(i5t,"blenderbot"),i5t.forEach(t),zAr=r(nBe," \u2014 "),DU=n(nBe,"A",{href:!0});var d5t=s(DU);QAr=r(d5t,"FlaxBlenderbotModel"),d5t.forEach(t),WAr=r(nBe," (Blenderbot model)"),nBe.forEach(t),HAr=i(ne),sC=n(ne,"LI",{});var sBe=s(sC);iTe=n(sBe,"STRONG",{});var c5t=s(iTe);UAr=r(c5t,"blenderbot-small"),c5t.forEach(t),JAr=r(sBe," \u2014 "),GU=n(sBe,"A",{href:!0});var f5t=s(GU);YAr=r(f5t,"FlaxBlenderbotSmallModel"),f5t.forEach(t),KAr=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),ZAr=i(ne),lC=n(ne,"LI",{});var lBe=s(lC);dTe=n(lBe,"STRONG",{});var m5t=s(dTe);e6r=r(m5t,"clip"),m5t.forEach(t),o6r=r(lBe," \u2014 "),OU=n(lBe,"A",{href:!0});var g5t=s(OU);r6r=r(g5t,"FlaxCLIPModel"),g5t.forEach(t),t6r=r(lBe," (CLIP model)"),lBe.forEach(t),a6r=i(ne),iC=n(ne,"LI",{});var iBe=s(iC);cTe=n(iBe,"STRONG",{});var h5t=s(cTe);n6r=r(h5t,"distilbert"),h5t.forEach(t),s6r=r(iBe," \u2014 "),VU=n(iBe,"A",{href:!0});var p5t=s(VU);l6r=r(p5t,"FlaxDistilBertModel"),p5t.forEach(t),i6r=r(iBe," (DistilBERT model)"),iBe.forEach(t),d6r=i(ne),dC=n(ne,"LI",{});var dBe=s(dC);fTe=n(dBe,"STRONG",{});var u5t=s(fTe);c6r=r(u5t,"electra"),u5t.forEach(t),f6r=r(dBe," \u2014 "),XU=n(dBe,"A",{href:!0});var _5t=s(XU);m6r=r(_5t,"FlaxElectraModel"),_5t.forEach(t),g6r=r(dBe," (ELECTRA model)"),dBe.forEach(t),h6r=i(ne),cC=n(ne,"LI",{});var cBe=s(cC);mTe=n(cBe,"STRONG",{});var b5t=s(mTe);p6r=r(b5t,"gpt2"),b5t.forEach(t),u6r=r(cBe," \u2014 "),zU=n(cBe,"A",{href:!0});var v5t=s(zU);_6r=r(v5t,"FlaxGPT2Model"),v5t.forEach(t),b6r=r(cBe," (OpenAI GPT-2 model)"),cBe.forEach(t),v6r=i(ne),fC=n(ne,"LI",{});var fBe=s(fC);gTe=n(fBe,"STRONG",{});var F5t=s(gTe);F6r=r(F5t,"gpt_neo"),F5t.forEach(t),T6r=r(fBe," \u2014 "),QU=n(fBe,"A",{href:!0});var T5t=s(QU);M6r=r(T5t,"FlaxGPTNeoModel"),T5t.forEach(t),E6r=r(fBe," (GPT Neo model)"),fBe.forEach(t),C6r=i(ne),mC=n(ne,"LI",{});var mBe=s(mC);hTe=n(mBe,"STRONG",{});var M5t=s(hTe);w6r=r(M5t,"gptj"),M5t.forEach(t),A6r=r(mBe," \u2014 "),WU=n(mBe,"A",{href:!0});var E5t=s(WU);y6r=r(E5t,"FlaxGPTJModel"),E5t.forEach(t),L6r=r(mBe," (GPT-J model)"),mBe.forEach(t),x6r=i(ne),gC=n(ne,"LI",{});var gBe=s(gC);pTe=n(gBe,"STRONG",{});var C5t=s(pTe);$6r=r(C5t,"marian"),C5t.forEach(t),k6r=r(gBe," \u2014 "),HU=n(gBe,"A",{href:!0});var w5t=s(HU);S6r=r(w5t,"FlaxMarianModel"),w5t.forEach(t),R6r=r(gBe," (Marian model)"),gBe.forEach(t),B6r=i(ne),hC=n(ne,"LI",{});var hBe=s(hC);uTe=n(hBe,"STRONG",{});var A5t=s(uTe);P6r=r(A5t,"mbart"),A5t.forEach(t),I6r=r(hBe," \u2014 "),UU=n(hBe,"A",{href:!0});var y5t=s(UU);q6r=r(y5t,"FlaxMBartModel"),y5t.forEach(t),N6r=r(hBe," (mBART model)"),hBe.forEach(t),j6r=i(ne),pC=n(ne,"LI",{});var pBe=s(pC);_Te=n(pBe,"STRONG",{});var L5t=s(_Te);D6r=r(L5t,"mt5"),L5t.forEach(t),G6r=r(pBe," \u2014 "),JU=n(pBe,"A",{href:!0});var x5t=s(JU);O6r=r(x5t,"FlaxMT5Model"),x5t.forEach(t),V6r=r(pBe," (mT5 model)"),pBe.forEach(t),X6r=i(ne),uC=n(ne,"LI",{});var uBe=s(uC);bTe=n(uBe,"STRONG",{});var $5t=s(bTe);z6r=r($5t,"pegasus"),$5t.forEach(t),Q6r=r(uBe," \u2014 "),YU=n(uBe,"A",{href:!0});var k5t=s(YU);W6r=r(k5t,"FlaxPegasusModel"),k5t.forEach(t),H6r=r(uBe," (Pegasus model)"),uBe.forEach(t),U6r=i(ne),_C=n(ne,"LI",{});var _Be=s(_C);vTe=n(_Be,"STRONG",{});var S5t=s(vTe);J6r=r(S5t,"roberta"),S5t.forEach(t),Y6r=r(_Be," \u2014 "),KU=n(_Be,"A",{href:!0});var R5t=s(KU);K6r=r(R5t,"FlaxRobertaModel"),R5t.forEach(t),Z6r=r(_Be," (RoBERTa model)"),_Be.forEach(t),e0r=i(ne),bC=n(ne,"LI",{});var bBe=s(bC);FTe=n(bBe,"STRONG",{});var B5t=s(FTe);o0r=r(B5t,"roformer"),B5t.forEach(t),r0r=r(bBe," \u2014 "),ZU=n(bBe,"A",{href:!0});var P5t=s(ZU);t0r=r(P5t,"FlaxRoFormerModel"),P5t.forEach(t),a0r=r(bBe," (RoFormer model)"),bBe.forEach(t),n0r=i(ne),vC=n(ne,"LI",{});var vBe=s(vC);TTe=n(vBe,"STRONG",{});var I5t=s(TTe);s0r=r(I5t,"t5"),I5t.forEach(t),l0r=r(vBe," \u2014 "),eJ=n(vBe,"A",{href:!0});var q5t=s(eJ);i0r=r(q5t,"FlaxT5Model"),q5t.forEach(t),d0r=r(vBe," (T5 model)"),vBe.forEach(t),c0r=i(ne),FC=n(ne,"LI",{});var FBe=s(FC);MTe=n(FBe,"STRONG",{});var N5t=s(MTe);f0r=r(N5t,"vision-text-dual-encoder"),N5t.forEach(t),m0r=r(FBe," \u2014 "),oJ=n(FBe,"A",{href:!0});var j5t=s(oJ);g0r=r(j5t,"FlaxVisionTextDualEncoderModel"),j5t.forEach(t),h0r=r(FBe," (VisionTextDualEncoder model)"),FBe.forEach(t),p0r=i(ne),TC=n(ne,"LI",{});var TBe=s(TC);ETe=n(TBe,"STRONG",{});var D5t=s(ETe);u0r=r(D5t,"vit"),D5t.forEach(t),_0r=r(TBe," \u2014 "),rJ=n(TBe,"A",{href:!0});var G5t=s(rJ);b0r=r(G5t,"FlaxViTModel"),G5t.forEach(t),v0r=r(TBe," (ViT model)"),TBe.forEach(t),F0r=i(ne),MC=n(ne,"LI",{});var MBe=s(MC);CTe=n(MBe,"STRONG",{});var O5t=s(CTe);T0r=r(O5t,"wav2vec2"),O5t.forEach(t),M0r=r(MBe," \u2014 "),tJ=n(MBe,"A",{href:!0});var V5t=s(tJ);E0r=r(V5t,"FlaxWav2Vec2Model"),V5t.forEach(t),C0r=r(MBe," (Wav2Vec2 model)"),MBe.forEach(t),w0r=i(ne),EC=n(ne,"LI",{});var EBe=s(EC);wTe=n(EBe,"STRONG",{});var X5t=s(wTe);A0r=r(X5t,"xglm"),X5t.forEach(t),y0r=r(EBe," \u2014 "),aJ=n(EBe,"A",{href:!0});var z5t=s(aJ);L0r=r(z5t,"FlaxXGLMModel"),z5t.forEach(t),x0r=r(EBe," (XGLM model)"),EBe.forEach(t),$0r=i(ne),CC=n(ne,"LI",{});var CBe=s(CC);ATe=n(CBe,"STRONG",{});var Q5t=s(ATe);k0r=r(Q5t,"xlm-roberta"),Q5t.forEach(t),S0r=r(CBe," \u2014 "),nJ=n(CBe,"A",{href:!0});var W5t=s(nJ);R0r=r(W5t,"FlaxXLMRobertaModel"),W5t.forEach(t),B0r=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),ne.forEach(t),P0r=i(Nl),T(wC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Sqe=i(f),xc=n(f,"H2",{class:!0});var jje=s(xc);AC=n(jje,"A",{id:!0,class:!0,href:!0});var H5t=s(AC);yTe=n(H5t,"SPAN",{});var U5t=s(yTe);T(rx.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),I0r=i(jje),LTe=n(jje,"SPAN",{});var J5t=s(LTe);q0r=r(J5t,"FlaxAutoModelForCausalLM"),J5t.forEach(t),jje.forEach(t),Rqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(tx.$$.fragment,jl),N0r=i(jl),$c=n(jl,"P",{});var IZ=s($c);j0r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sJ=n(IZ,"A",{href:!0});var Y5t=s(sJ);D0r=r(Y5t,"from_pretrained()"),Y5t.forEach(t),G0r=r(IZ," class method or the "),lJ=n(IZ,"A",{href:!0});var K5t=s(lJ);O0r=r(K5t,"from_config()"),K5t.forEach(t),V0r=r(IZ,` class
method.`),IZ.forEach(t),X0r=i(jl),ax=n(jl,"P",{});var Dje=s(ax);z0r=r(Dje,"This class cannot be instantiated directly using "),xTe=n(Dje,"CODE",{});var Z5t=s(xTe);Q0r=r(Z5t,"__init__()"),Z5t.forEach(t),W0r=r(Dje," (throws an error)."),Dje.forEach(t),H0r=i(jl),Dt=n(jl,"DIV",{class:!0});var y6=s(Dt);T(nx.$$.fragment,y6),U0r=i(y6),$Te=n(y6,"P",{});var eCt=s($Te);J0r=r(eCt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eCt.forEach(t),Y0r=i(y6),kc=n(y6,"P",{});var qZ=s(kc);K0r=r(qZ,`Note:
Loading a model from its configuration file does `),kTe=n(qZ,"STRONG",{});var oCt=s(kTe);Z0r=r(oCt,"not"),oCt.forEach(t),eyr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(qZ,"A",{href:!0});var rCt=s(iJ);oyr=r(rCt,"from_pretrained()"),rCt.forEach(t),ryr=r(qZ," to load the model weights."),qZ.forEach(t),tyr=i(y6),T(yC.$$.fragment,y6),y6.forEach(t),ayr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(sx.$$.fragment,Dl),nyr=i(Dl),STe=n(Dl,"P",{});var tCt=s(STe);syr=r(tCt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tCt.forEach(t),lyr=i(Dl),hn=n(Dl,"P",{});var L6=s(hn);iyr=r(L6,"The model class to instantiate is selected based on the "),RTe=n(L6,"CODE",{});var aCt=s(RTe);dyr=r(aCt,"model_type"),aCt.forEach(t),cyr=r(L6,` property of the config object (either
passed as an argument or loaded from `),BTe=n(L6,"CODE",{});var nCt=s(BTe);fyr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),myr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(L6,"CODE",{});var sCt=s(PTe);gyr=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),hyr=r(L6,":"),L6.forEach(t),pyr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);LC=n(Oe,"LI",{});var wBe=s(LC);ITe=n(wBe,"STRONG",{});var lCt=s(ITe);uyr=r(lCt,"bart"),lCt.forEach(t),_yr=r(wBe," \u2014 "),dJ=n(wBe,"A",{href:!0});var iCt=s(dJ);byr=r(iCt,"FlaxBartForCausalLM"),iCt.forEach(t),vyr=r(wBe," (BART model)"),wBe.forEach(t),Fyr=i(Oe),xC=n(Oe,"LI",{});var ABe=s(xC);qTe=n(ABe,"STRONG",{});var dCt=s(qTe);Tyr=r(dCt,"bert"),dCt.forEach(t),Myr=r(ABe," \u2014 "),cJ=n(ABe,"A",{href:!0});var cCt=s(cJ);Eyr=r(cCt,"FlaxBertForCausalLM"),cCt.forEach(t),Cyr=r(ABe," (BERT model)"),ABe.forEach(t),wyr=i(Oe),$C=n(Oe,"LI",{});var yBe=s($C);NTe=n(yBe,"STRONG",{});var fCt=s(NTe);Ayr=r(fCt,"big_bird"),fCt.forEach(t),yyr=r(yBe," \u2014 "),fJ=n(yBe,"A",{href:!0});var mCt=s(fJ);Lyr=r(mCt,"FlaxBigBirdForCausalLM"),mCt.forEach(t),xyr=r(yBe," (BigBird model)"),yBe.forEach(t),$yr=i(Oe),kC=n(Oe,"LI",{});var LBe=s(kC);jTe=n(LBe,"STRONG",{});var gCt=s(jTe);kyr=r(gCt,"electra"),gCt.forEach(t),Syr=r(LBe," \u2014 "),mJ=n(LBe,"A",{href:!0});var hCt=s(mJ);Ryr=r(hCt,"FlaxElectraForCausalLM"),hCt.forEach(t),Byr=r(LBe," (ELECTRA model)"),LBe.forEach(t),Pyr=i(Oe),SC=n(Oe,"LI",{});var xBe=s(SC);DTe=n(xBe,"STRONG",{});var pCt=s(DTe);Iyr=r(pCt,"gpt2"),pCt.forEach(t),qyr=r(xBe," \u2014 "),gJ=n(xBe,"A",{href:!0});var uCt=s(gJ);Nyr=r(uCt,"FlaxGPT2LMHeadModel"),uCt.forEach(t),jyr=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),Dyr=i(Oe),RC=n(Oe,"LI",{});var $Be=s(RC);GTe=n($Be,"STRONG",{});var _Ct=s(GTe);Gyr=r(_Ct,"gpt_neo"),_Ct.forEach(t),Oyr=r($Be," \u2014 "),hJ=n($Be,"A",{href:!0});var bCt=s(hJ);Vyr=r(bCt,"FlaxGPTNeoForCausalLM"),bCt.forEach(t),Xyr=r($Be," (GPT Neo model)"),$Be.forEach(t),zyr=i(Oe),BC=n(Oe,"LI",{});var kBe=s(BC);OTe=n(kBe,"STRONG",{});var vCt=s(OTe);Qyr=r(vCt,"gptj"),vCt.forEach(t),Wyr=r(kBe," \u2014 "),pJ=n(kBe,"A",{href:!0});var FCt=s(pJ);Hyr=r(FCt,"FlaxGPTJForCausalLM"),FCt.forEach(t),Uyr=r(kBe," (GPT-J model)"),kBe.forEach(t),Jyr=i(Oe),PC=n(Oe,"LI",{});var SBe=s(PC);VTe=n(SBe,"STRONG",{});var TCt=s(VTe);Yyr=r(TCt,"roberta"),TCt.forEach(t),Kyr=r(SBe," \u2014 "),uJ=n(SBe,"A",{href:!0});var MCt=s(uJ);Zyr=r(MCt,"FlaxRobertaForCausalLM"),MCt.forEach(t),eLr=r(SBe," (RoBERTa model)"),SBe.forEach(t),oLr=i(Oe),IC=n(Oe,"LI",{});var RBe=s(IC);XTe=n(RBe,"STRONG",{});var ECt=s(XTe);rLr=r(ECt,"xglm"),ECt.forEach(t),tLr=r(RBe," \u2014 "),_J=n(RBe,"A",{href:!0});var CCt=s(_J);aLr=r(CCt,"FlaxXGLMForCausalLM"),CCt.forEach(t),nLr=r(RBe," (XGLM model)"),RBe.forEach(t),Oe.forEach(t),sLr=i(Dl),T(qC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Bqe=i(f),Sc=n(f,"H2",{class:!0});var Gje=s(Sc);NC=n(Gje,"A",{id:!0,class:!0,href:!0});var wCt=s(NC);zTe=n(wCt,"SPAN",{});var ACt=s(zTe);T(lx.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),lLr=i(Gje),QTe=n(Gje,"SPAN",{});var yCt=s(QTe);iLr=r(yCt,"FlaxAutoModelForPreTraining"),yCt.forEach(t),Gje.forEach(t),Pqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(ix.$$.fragment,Gl),dLr=i(Gl),Rc=n(Gl,"P",{});var NZ=s(Rc);cLr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bJ=n(NZ,"A",{href:!0});var LCt=s(bJ);fLr=r(LCt,"from_pretrained()"),LCt.forEach(t),mLr=r(NZ," class method or the "),vJ=n(NZ,"A",{href:!0});var xCt=s(vJ);gLr=r(xCt,"from_config()"),xCt.forEach(t),hLr=r(NZ,` class
method.`),NZ.forEach(t),pLr=i(Gl),dx=n(Gl,"P",{});var Oje=s(dx);uLr=r(Oje,"This class cannot be instantiated directly using "),WTe=n(Oje,"CODE",{});var $Ct=s(WTe);_Lr=r($Ct,"__init__()"),$Ct.forEach(t),bLr=r(Oje," (throws an error)."),Oje.forEach(t),vLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var x6=s(Gt);T(cx.$$.fragment,x6),FLr=i(x6),HTe=n(x6,"P",{});var kCt=s(HTe);TLr=r(kCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kCt.forEach(t),MLr=i(x6),Bc=n(x6,"P",{});var jZ=s(Bc);ELr=r(jZ,`Note:
Loading a model from its configuration file does `),UTe=n(jZ,"STRONG",{});var SCt=s(UTe);CLr=r(SCt,"not"),SCt.forEach(t),wLr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FJ=n(jZ,"A",{href:!0});var RCt=s(FJ);ALr=r(RCt,"from_pretrained()"),RCt.forEach(t),yLr=r(jZ," to load the model weights."),jZ.forEach(t),LLr=i(x6),T(jC.$$.fragment,x6),x6.forEach(t),xLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(fx.$$.fragment,Ol),$Lr=i(Ol),JTe=n(Ol,"P",{});var BCt=s(JTe);kLr=r(BCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BCt.forEach(t),SLr=i(Ol),pn=n(Ol,"P",{});var $6=s(pn);RLr=r($6,"The model class to instantiate is selected based on the "),YTe=n($6,"CODE",{});var PCt=s(YTe);BLr=r(PCt,"model_type"),PCt.forEach(t),PLr=r($6,` property of the config object (either
passed as an argument or loaded from `),KTe=n($6,"CODE",{});var ICt=s(KTe);ILr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),qLr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n($6,"CODE",{});var qCt=s(ZTe);NLr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),jLr=r($6,":"),$6.forEach(t),DLr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);DC=n(we,"LI",{});var BBe=s(DC);e7e=n(BBe,"STRONG",{});var NCt=s(e7e);GLr=r(NCt,"albert"),NCt.forEach(t),OLr=r(BBe," \u2014 "),TJ=n(BBe,"A",{href:!0});var jCt=s(TJ);VLr=r(jCt,"FlaxAlbertForPreTraining"),jCt.forEach(t),XLr=r(BBe," (ALBERT model)"),BBe.forEach(t),zLr=i(we),GC=n(we,"LI",{});var PBe=s(GC);o7e=n(PBe,"STRONG",{});var DCt=s(o7e);QLr=r(DCt,"bart"),DCt.forEach(t),WLr=r(PBe," \u2014 "),MJ=n(PBe,"A",{href:!0});var GCt=s(MJ);HLr=r(GCt,"FlaxBartForConditionalGeneration"),GCt.forEach(t),ULr=r(PBe," (BART model)"),PBe.forEach(t),JLr=i(we),OC=n(we,"LI",{});var IBe=s(OC);r7e=n(IBe,"STRONG",{});var OCt=s(r7e);YLr=r(OCt,"bert"),OCt.forEach(t),KLr=r(IBe," \u2014 "),EJ=n(IBe,"A",{href:!0});var VCt=s(EJ);ZLr=r(VCt,"FlaxBertForPreTraining"),VCt.forEach(t),e8r=r(IBe," (BERT model)"),IBe.forEach(t),o8r=i(we),VC=n(we,"LI",{});var qBe=s(VC);t7e=n(qBe,"STRONG",{});var XCt=s(t7e);r8r=r(XCt,"big_bird"),XCt.forEach(t),t8r=r(qBe," \u2014 "),CJ=n(qBe,"A",{href:!0});var zCt=s(CJ);a8r=r(zCt,"FlaxBigBirdForPreTraining"),zCt.forEach(t),n8r=r(qBe," (BigBird model)"),qBe.forEach(t),s8r=i(we),XC=n(we,"LI",{});var NBe=s(XC);a7e=n(NBe,"STRONG",{});var QCt=s(a7e);l8r=r(QCt,"electra"),QCt.forEach(t),i8r=r(NBe," \u2014 "),wJ=n(NBe,"A",{href:!0});var WCt=s(wJ);d8r=r(WCt,"FlaxElectraForPreTraining"),WCt.forEach(t),c8r=r(NBe," (ELECTRA model)"),NBe.forEach(t),f8r=i(we),zC=n(we,"LI",{});var jBe=s(zC);n7e=n(jBe,"STRONG",{});var HCt=s(n7e);m8r=r(HCt,"mbart"),HCt.forEach(t),g8r=r(jBe," \u2014 "),AJ=n(jBe,"A",{href:!0});var UCt=s(AJ);h8r=r(UCt,"FlaxMBartForConditionalGeneration"),UCt.forEach(t),p8r=r(jBe," (mBART model)"),jBe.forEach(t),u8r=i(we),QC=n(we,"LI",{});var DBe=s(QC);s7e=n(DBe,"STRONG",{});var JCt=s(s7e);_8r=r(JCt,"mt5"),JCt.forEach(t),b8r=r(DBe," \u2014 "),yJ=n(DBe,"A",{href:!0});var YCt=s(yJ);v8r=r(YCt,"FlaxMT5ForConditionalGeneration"),YCt.forEach(t),F8r=r(DBe," (mT5 model)"),DBe.forEach(t),T8r=i(we),WC=n(we,"LI",{});var GBe=s(WC);l7e=n(GBe,"STRONG",{});var KCt=s(l7e);M8r=r(KCt,"roberta"),KCt.forEach(t),E8r=r(GBe," \u2014 "),LJ=n(GBe,"A",{href:!0});var ZCt=s(LJ);C8r=r(ZCt,"FlaxRobertaForMaskedLM"),ZCt.forEach(t),w8r=r(GBe," (RoBERTa model)"),GBe.forEach(t),A8r=i(we),HC=n(we,"LI",{});var OBe=s(HC);i7e=n(OBe,"STRONG",{});var e3t=s(i7e);y8r=r(e3t,"roformer"),e3t.forEach(t),L8r=r(OBe," \u2014 "),xJ=n(OBe,"A",{href:!0});var o3t=s(xJ);x8r=r(o3t,"FlaxRoFormerForMaskedLM"),o3t.forEach(t),$8r=r(OBe," (RoFormer model)"),OBe.forEach(t),k8r=i(we),UC=n(we,"LI",{});var VBe=s(UC);d7e=n(VBe,"STRONG",{});var r3t=s(d7e);S8r=r(r3t,"t5"),r3t.forEach(t),R8r=r(VBe," \u2014 "),$J=n(VBe,"A",{href:!0});var t3t=s($J);B8r=r(t3t,"FlaxT5ForConditionalGeneration"),t3t.forEach(t),P8r=r(VBe," (T5 model)"),VBe.forEach(t),I8r=i(we),JC=n(we,"LI",{});var XBe=s(JC);c7e=n(XBe,"STRONG",{});var a3t=s(c7e);q8r=r(a3t,"wav2vec2"),a3t.forEach(t),N8r=r(XBe," \u2014 "),kJ=n(XBe,"A",{href:!0});var n3t=s(kJ);j8r=r(n3t,"FlaxWav2Vec2ForPreTraining"),n3t.forEach(t),D8r=r(XBe," (Wav2Vec2 model)"),XBe.forEach(t),G8r=i(we),YC=n(we,"LI",{});var zBe=s(YC);f7e=n(zBe,"STRONG",{});var s3t=s(f7e);O8r=r(s3t,"xlm-roberta"),s3t.forEach(t),V8r=r(zBe," \u2014 "),SJ=n(zBe,"A",{href:!0});var l3t=s(SJ);X8r=r(l3t,"FlaxXLMRobertaForMaskedLM"),l3t.forEach(t),z8r=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),we.forEach(t),Q8r=i(Ol),T(KC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Iqe=i(f),Pc=n(f,"H2",{class:!0});var Vje=s(Pc);ZC=n(Vje,"A",{id:!0,class:!0,href:!0});var i3t=s(ZC);m7e=n(i3t,"SPAN",{});var d3t=s(m7e);T(mx.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),W8r=i(Vje),g7e=n(Vje,"SPAN",{});var c3t=s(g7e);H8r=r(c3t,"FlaxAutoModelForMaskedLM"),c3t.forEach(t),Vje.forEach(t),qqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(gx.$$.fragment,Vl),U8r=i(Vl),Ic=n(Vl,"P",{});var DZ=s(Ic);J8r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RJ=n(DZ,"A",{href:!0});var f3t=s(RJ);Y8r=r(f3t,"from_pretrained()"),f3t.forEach(t),K8r=r(DZ," class method or the "),BJ=n(DZ,"A",{href:!0});var m3t=s(BJ);Z8r=r(m3t,"from_config()"),m3t.forEach(t),exr=r(DZ,` class
method.`),DZ.forEach(t),oxr=i(Vl),hx=n(Vl,"P",{});var Xje=s(hx);rxr=r(Xje,"This class cannot be instantiated directly using "),h7e=n(Xje,"CODE",{});var g3t=s(h7e);txr=r(g3t,"__init__()"),g3t.forEach(t),axr=r(Xje," (throws an error)."),Xje.forEach(t),nxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var k6=s(Ot);T(px.$$.fragment,k6),sxr=i(k6),p7e=n(k6,"P",{});var h3t=s(p7e);lxr=r(h3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),h3t.forEach(t),ixr=i(k6),qc=n(k6,"P",{});var GZ=s(qc);dxr=r(GZ,`Note:
Loading a model from its configuration file does `),u7e=n(GZ,"STRONG",{});var p3t=s(u7e);cxr=r(p3t,"not"),p3t.forEach(t),fxr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(GZ,"A",{href:!0});var u3t=s(PJ);mxr=r(u3t,"from_pretrained()"),u3t.forEach(t),gxr=r(GZ," to load the model weights."),GZ.forEach(t),hxr=i(k6),T(e3.$$.fragment,k6),k6.forEach(t),pxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(ux.$$.fragment,Xl),uxr=i(Xl),_7e=n(Xl,"P",{});var _3t=s(_7e);_xr=r(_3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_3t.forEach(t),bxr=i(Xl),un=n(Xl,"P",{});var S6=s(un);vxr=r(S6,"The model class to instantiate is selected based on the "),b7e=n(S6,"CODE",{});var b3t=s(b7e);Fxr=r(b3t,"model_type"),b3t.forEach(t),Txr=r(S6,` property of the config object (either
passed as an argument or loaded from `),v7e=n(S6,"CODE",{});var v3t=s(v7e);Mxr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),Exr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(S6,"CODE",{});var F3t=s(F7e);Cxr=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),wxr=r(S6,":"),S6.forEach(t),Axr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);o3=n(Be,"LI",{});var QBe=s(o3);T7e=n(QBe,"STRONG",{});var T3t=s(T7e);yxr=r(T3t,"albert"),T3t.forEach(t),Lxr=r(QBe," \u2014 "),IJ=n(QBe,"A",{href:!0});var M3t=s(IJ);xxr=r(M3t,"FlaxAlbertForMaskedLM"),M3t.forEach(t),$xr=r(QBe," (ALBERT model)"),QBe.forEach(t),kxr=i(Be),r3=n(Be,"LI",{});var WBe=s(r3);M7e=n(WBe,"STRONG",{});var E3t=s(M7e);Sxr=r(E3t,"bart"),E3t.forEach(t),Rxr=r(WBe," \u2014 "),qJ=n(WBe,"A",{href:!0});var C3t=s(qJ);Bxr=r(C3t,"FlaxBartForConditionalGeneration"),C3t.forEach(t),Pxr=r(WBe," (BART model)"),WBe.forEach(t),Ixr=i(Be),t3=n(Be,"LI",{});var HBe=s(t3);E7e=n(HBe,"STRONG",{});var w3t=s(E7e);qxr=r(w3t,"bert"),w3t.forEach(t),Nxr=r(HBe," \u2014 "),NJ=n(HBe,"A",{href:!0});var A3t=s(NJ);jxr=r(A3t,"FlaxBertForMaskedLM"),A3t.forEach(t),Dxr=r(HBe," (BERT model)"),HBe.forEach(t),Gxr=i(Be),a3=n(Be,"LI",{});var UBe=s(a3);C7e=n(UBe,"STRONG",{});var y3t=s(C7e);Oxr=r(y3t,"big_bird"),y3t.forEach(t),Vxr=r(UBe," \u2014 "),jJ=n(UBe,"A",{href:!0});var L3t=s(jJ);Xxr=r(L3t,"FlaxBigBirdForMaskedLM"),L3t.forEach(t),zxr=r(UBe," (BigBird model)"),UBe.forEach(t),Qxr=i(Be),n3=n(Be,"LI",{});var JBe=s(n3);w7e=n(JBe,"STRONG",{});var x3t=s(w7e);Wxr=r(x3t,"distilbert"),x3t.forEach(t),Hxr=r(JBe," \u2014 "),DJ=n(JBe,"A",{href:!0});var $3t=s(DJ);Uxr=r($3t,"FlaxDistilBertForMaskedLM"),$3t.forEach(t),Jxr=r(JBe," (DistilBERT model)"),JBe.forEach(t),Yxr=i(Be),s3=n(Be,"LI",{});var YBe=s(s3);A7e=n(YBe,"STRONG",{});var k3t=s(A7e);Kxr=r(k3t,"electra"),k3t.forEach(t),Zxr=r(YBe," \u2014 "),GJ=n(YBe,"A",{href:!0});var S3t=s(GJ);e9r=r(S3t,"FlaxElectraForMaskedLM"),S3t.forEach(t),o9r=r(YBe," (ELECTRA model)"),YBe.forEach(t),r9r=i(Be),l3=n(Be,"LI",{});var KBe=s(l3);y7e=n(KBe,"STRONG",{});var R3t=s(y7e);t9r=r(R3t,"mbart"),R3t.forEach(t),a9r=r(KBe," \u2014 "),OJ=n(KBe,"A",{href:!0});var B3t=s(OJ);n9r=r(B3t,"FlaxMBartForConditionalGeneration"),B3t.forEach(t),s9r=r(KBe," (mBART model)"),KBe.forEach(t),l9r=i(Be),i3=n(Be,"LI",{});var ZBe=s(i3);L7e=n(ZBe,"STRONG",{});var P3t=s(L7e);i9r=r(P3t,"roberta"),P3t.forEach(t),d9r=r(ZBe," \u2014 "),VJ=n(ZBe,"A",{href:!0});var I3t=s(VJ);c9r=r(I3t,"FlaxRobertaForMaskedLM"),I3t.forEach(t),f9r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),m9r=i(Be),d3=n(Be,"LI",{});var ePe=s(d3);x7e=n(ePe,"STRONG",{});var q3t=s(x7e);g9r=r(q3t,"roformer"),q3t.forEach(t),h9r=r(ePe," \u2014 "),XJ=n(ePe,"A",{href:!0});var N3t=s(XJ);p9r=r(N3t,"FlaxRoFormerForMaskedLM"),N3t.forEach(t),u9r=r(ePe," (RoFormer model)"),ePe.forEach(t),_9r=i(Be),c3=n(Be,"LI",{});var oPe=s(c3);$7e=n(oPe,"STRONG",{});var j3t=s($7e);b9r=r(j3t,"xlm-roberta"),j3t.forEach(t),v9r=r(oPe," \u2014 "),zJ=n(oPe,"A",{href:!0});var D3t=s(zJ);F9r=r(D3t,"FlaxXLMRobertaForMaskedLM"),D3t.forEach(t),T9r=r(oPe," (XLM-RoBERTa model)"),oPe.forEach(t),Be.forEach(t),M9r=i(Xl),T(f3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Nqe=i(f),Nc=n(f,"H2",{class:!0});var zje=s(Nc);m3=n(zje,"A",{id:!0,class:!0,href:!0});var G3t=s(m3);k7e=n(G3t,"SPAN",{});var O3t=s(k7e);T(_x.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),E9r=i(zje),S7e=n(zje,"SPAN",{});var V3t=s(S7e);C9r=r(V3t,"FlaxAutoModelForSeq2SeqLM"),V3t.forEach(t),zje.forEach(t),jqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(bx.$$.fragment,zl),w9r=i(zl),jc=n(zl,"P",{});var OZ=s(jc);A9r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QJ=n(OZ,"A",{href:!0});var X3t=s(QJ);y9r=r(X3t,"from_pretrained()"),X3t.forEach(t),L9r=r(OZ," class method or the "),WJ=n(OZ,"A",{href:!0});var z3t=s(WJ);x9r=r(z3t,"from_config()"),z3t.forEach(t),$9r=r(OZ,` class
method.`),OZ.forEach(t),k9r=i(zl),vx=n(zl,"P",{});var Qje=s(vx);S9r=r(Qje,"This class cannot be instantiated directly using "),R7e=n(Qje,"CODE",{});var Q3t=s(R7e);R9r=r(Q3t,"__init__()"),Q3t.forEach(t),B9r=r(Qje," (throws an error)."),Qje.forEach(t),P9r=i(zl),Vt=n(zl,"DIV",{class:!0});var R6=s(Vt);T(Fx.$$.fragment,R6),I9r=i(R6),B7e=n(R6,"P",{});var W3t=s(B7e);q9r=r(W3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W3t.forEach(t),N9r=i(R6),Dc=n(R6,"P",{});var VZ=s(Dc);j9r=r(VZ,`Note:
Loading a model from its configuration file does `),P7e=n(VZ,"STRONG",{});var H3t=s(P7e);D9r=r(H3t,"not"),H3t.forEach(t),G9r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(VZ,"A",{href:!0});var U3t=s(HJ);O9r=r(U3t,"from_pretrained()"),U3t.forEach(t),V9r=r(VZ," to load the model weights."),VZ.forEach(t),X9r=i(R6),T(g3.$$.fragment,R6),R6.forEach(t),z9r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(Tx.$$.fragment,Ql),Q9r=i(Ql),I7e=n(Ql,"P",{});var J3t=s(I7e);W9r=r(J3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J3t.forEach(t),H9r=i(Ql),_n=n(Ql,"P",{});var B6=s(_n);U9r=r(B6,"The model class to instantiate is selected based on the "),q7e=n(B6,"CODE",{});var Y3t=s(q7e);J9r=r(Y3t,"model_type"),Y3t.forEach(t),Y9r=r(B6,` property of the config object (either
passed as an argument or loaded from `),N7e=n(B6,"CODE",{});var K3t=s(N7e);K9r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),Z9r=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(B6,"CODE",{});var Z3t=s(j7e);e$r=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),o$r=r(B6,":"),B6.forEach(t),r$r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);h3=n(Ve,"LI",{});var rPe=s(h3);D7e=n(rPe,"STRONG",{});var ewt=s(D7e);t$r=r(ewt,"bart"),ewt.forEach(t),a$r=r(rPe," \u2014 "),UJ=n(rPe,"A",{href:!0});var owt=s(UJ);n$r=r(owt,"FlaxBartForConditionalGeneration"),owt.forEach(t),s$r=r(rPe," (BART model)"),rPe.forEach(t),l$r=i(Ve),p3=n(Ve,"LI",{});var tPe=s(p3);G7e=n(tPe,"STRONG",{});var rwt=s(G7e);i$r=r(rwt,"blenderbot"),rwt.forEach(t),d$r=r(tPe," \u2014 "),JJ=n(tPe,"A",{href:!0});var twt=s(JJ);c$r=r(twt,"FlaxBlenderbotForConditionalGeneration"),twt.forEach(t),f$r=r(tPe," (Blenderbot model)"),tPe.forEach(t),m$r=i(Ve),u3=n(Ve,"LI",{});var aPe=s(u3);O7e=n(aPe,"STRONG",{});var awt=s(O7e);g$r=r(awt,"blenderbot-small"),awt.forEach(t),h$r=r(aPe," \u2014 "),YJ=n(aPe,"A",{href:!0});var nwt=s(YJ);p$r=r(nwt,"FlaxBlenderbotSmallForConditionalGeneration"),nwt.forEach(t),u$r=r(aPe," (BlenderbotSmall model)"),aPe.forEach(t),_$r=i(Ve),_3=n(Ve,"LI",{});var nPe=s(_3);V7e=n(nPe,"STRONG",{});var swt=s(V7e);b$r=r(swt,"encoder-decoder"),swt.forEach(t),v$r=r(nPe," \u2014 "),KJ=n(nPe,"A",{href:!0});var lwt=s(KJ);F$r=r(lwt,"FlaxEncoderDecoderModel"),lwt.forEach(t),T$r=r(nPe," (Encoder decoder model)"),nPe.forEach(t),M$r=i(Ve),b3=n(Ve,"LI",{});var sPe=s(b3);X7e=n(sPe,"STRONG",{});var iwt=s(X7e);E$r=r(iwt,"marian"),iwt.forEach(t),C$r=r(sPe," \u2014 "),ZJ=n(sPe,"A",{href:!0});var dwt=s(ZJ);w$r=r(dwt,"FlaxMarianMTModel"),dwt.forEach(t),A$r=r(sPe," (Marian model)"),sPe.forEach(t),y$r=i(Ve),v3=n(Ve,"LI",{});var lPe=s(v3);z7e=n(lPe,"STRONG",{});var cwt=s(z7e);L$r=r(cwt,"mbart"),cwt.forEach(t),x$r=r(lPe," \u2014 "),eY=n(lPe,"A",{href:!0});var fwt=s(eY);$$r=r(fwt,"FlaxMBartForConditionalGeneration"),fwt.forEach(t),k$r=r(lPe," (mBART model)"),lPe.forEach(t),S$r=i(Ve),F3=n(Ve,"LI",{});var iPe=s(F3);Q7e=n(iPe,"STRONG",{});var mwt=s(Q7e);R$r=r(mwt,"mt5"),mwt.forEach(t),B$r=r(iPe," \u2014 "),oY=n(iPe,"A",{href:!0});var gwt=s(oY);P$r=r(gwt,"FlaxMT5ForConditionalGeneration"),gwt.forEach(t),I$r=r(iPe," (mT5 model)"),iPe.forEach(t),q$r=i(Ve),T3=n(Ve,"LI",{});var dPe=s(T3);W7e=n(dPe,"STRONG",{});var hwt=s(W7e);N$r=r(hwt,"pegasus"),hwt.forEach(t),j$r=r(dPe," \u2014 "),rY=n(dPe,"A",{href:!0});var pwt=s(rY);D$r=r(pwt,"FlaxPegasusForConditionalGeneration"),pwt.forEach(t),G$r=r(dPe," (Pegasus model)"),dPe.forEach(t),O$r=i(Ve),M3=n(Ve,"LI",{});var cPe=s(M3);H7e=n(cPe,"STRONG",{});var uwt=s(H7e);V$r=r(uwt,"t5"),uwt.forEach(t),X$r=r(cPe," \u2014 "),tY=n(cPe,"A",{href:!0});var _wt=s(tY);z$r=r(_wt,"FlaxT5ForConditionalGeneration"),_wt.forEach(t),Q$r=r(cPe," (T5 model)"),cPe.forEach(t),Ve.forEach(t),W$r=i(Ql),T(E3.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Dqe=i(f),Gc=n(f,"H2",{class:!0});var Wje=s(Gc);C3=n(Wje,"A",{id:!0,class:!0,href:!0});var bwt=s(C3);U7e=n(bwt,"SPAN",{});var vwt=s(U7e);T(Mx.$$.fragment,vwt),vwt.forEach(t),bwt.forEach(t),H$r=i(Wje),J7e=n(Wje,"SPAN",{});var Fwt=s(J7e);U$r=r(Fwt,"FlaxAutoModelForSequenceClassification"),Fwt.forEach(t),Wje.forEach(t),Gqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(Ex.$$.fragment,Wl),J$r=i(Wl),Oc=n(Wl,"P",{});var XZ=s(Oc);Y$r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aY=n(XZ,"A",{href:!0});var Twt=s(aY);K$r=r(Twt,"from_pretrained()"),Twt.forEach(t),Z$r=r(XZ," class method or the "),nY=n(XZ,"A",{href:!0});var Mwt=s(nY);ekr=r(Mwt,"from_config()"),Mwt.forEach(t),okr=r(XZ,` class
method.`),XZ.forEach(t),rkr=i(Wl),Cx=n(Wl,"P",{});var Hje=s(Cx);tkr=r(Hje,"This class cannot be instantiated directly using "),Y7e=n(Hje,"CODE",{});var Ewt=s(Y7e);akr=r(Ewt,"__init__()"),Ewt.forEach(t),nkr=r(Hje," (throws an error)."),Hje.forEach(t),skr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var P6=s(Xt);T(wx.$$.fragment,P6),lkr=i(P6),K7e=n(P6,"P",{});var Cwt=s(K7e);ikr=r(Cwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cwt.forEach(t),dkr=i(P6),Vc=n(P6,"P",{});var zZ=s(Vc);ckr=r(zZ,`Note:
Loading a model from its configuration file does `),Z7e=n(zZ,"STRONG",{});var wwt=s(Z7e);fkr=r(wwt,"not"),wwt.forEach(t),mkr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(zZ,"A",{href:!0});var Awt=s(sY);gkr=r(Awt,"from_pretrained()"),Awt.forEach(t),hkr=r(zZ," to load the model weights."),zZ.forEach(t),pkr=i(P6),T(w3.$$.fragment,P6),P6.forEach(t),ukr=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(Ax.$$.fragment,Hl),_kr=i(Hl),eMe=n(Hl,"P",{});var ywt=s(eMe);bkr=r(ywt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ywt.forEach(t),vkr=i(Hl),bn=n(Hl,"P",{});var I6=s(bn);Fkr=r(I6,"The model class to instantiate is selected based on the "),oMe=n(I6,"CODE",{});var Lwt=s(oMe);Tkr=r(Lwt,"model_type"),Lwt.forEach(t),Mkr=r(I6,` property of the config object (either
passed as an argument or loaded from `),rMe=n(I6,"CODE",{});var xwt=s(rMe);Ekr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),Ckr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(I6,"CODE",{});var $wt=s(tMe);wkr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),Akr=r(I6,":"),I6.forEach(t),ykr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);A3=n(Pe,"LI",{});var fPe=s(A3);aMe=n(fPe,"STRONG",{});var kwt=s(aMe);Lkr=r(kwt,"albert"),kwt.forEach(t),xkr=r(fPe," \u2014 "),lY=n(fPe,"A",{href:!0});var Swt=s(lY);$kr=r(Swt,"FlaxAlbertForSequenceClassification"),Swt.forEach(t),kkr=r(fPe," (ALBERT model)"),fPe.forEach(t),Skr=i(Pe),y3=n(Pe,"LI",{});var mPe=s(y3);nMe=n(mPe,"STRONG",{});var Rwt=s(nMe);Rkr=r(Rwt,"bart"),Rwt.forEach(t),Bkr=r(mPe," \u2014 "),iY=n(mPe,"A",{href:!0});var Bwt=s(iY);Pkr=r(Bwt,"FlaxBartForSequenceClassification"),Bwt.forEach(t),Ikr=r(mPe," (BART model)"),mPe.forEach(t),qkr=i(Pe),L3=n(Pe,"LI",{});var gPe=s(L3);sMe=n(gPe,"STRONG",{});var Pwt=s(sMe);Nkr=r(Pwt,"bert"),Pwt.forEach(t),jkr=r(gPe," \u2014 "),dY=n(gPe,"A",{href:!0});var Iwt=s(dY);Dkr=r(Iwt,"FlaxBertForSequenceClassification"),Iwt.forEach(t),Gkr=r(gPe," (BERT model)"),gPe.forEach(t),Okr=i(Pe),x3=n(Pe,"LI",{});var hPe=s(x3);lMe=n(hPe,"STRONG",{});var qwt=s(lMe);Vkr=r(qwt,"big_bird"),qwt.forEach(t),Xkr=r(hPe," \u2014 "),cY=n(hPe,"A",{href:!0});var Nwt=s(cY);zkr=r(Nwt,"FlaxBigBirdForSequenceClassification"),Nwt.forEach(t),Qkr=r(hPe," (BigBird model)"),hPe.forEach(t),Wkr=i(Pe),$3=n(Pe,"LI",{});var pPe=s($3);iMe=n(pPe,"STRONG",{});var jwt=s(iMe);Hkr=r(jwt,"distilbert"),jwt.forEach(t),Ukr=r(pPe," \u2014 "),fY=n(pPe,"A",{href:!0});var Dwt=s(fY);Jkr=r(Dwt,"FlaxDistilBertForSequenceClassification"),Dwt.forEach(t),Ykr=r(pPe," (DistilBERT model)"),pPe.forEach(t),Kkr=i(Pe),k3=n(Pe,"LI",{});var uPe=s(k3);dMe=n(uPe,"STRONG",{});var Gwt=s(dMe);Zkr=r(Gwt,"electra"),Gwt.forEach(t),eSr=r(uPe," \u2014 "),mY=n(uPe,"A",{href:!0});var Owt=s(mY);oSr=r(Owt,"FlaxElectraForSequenceClassification"),Owt.forEach(t),rSr=r(uPe," (ELECTRA model)"),uPe.forEach(t),tSr=i(Pe),S3=n(Pe,"LI",{});var _Pe=s(S3);cMe=n(_Pe,"STRONG",{});var Vwt=s(cMe);aSr=r(Vwt,"mbart"),Vwt.forEach(t),nSr=r(_Pe," \u2014 "),gY=n(_Pe,"A",{href:!0});var Xwt=s(gY);sSr=r(Xwt,"FlaxMBartForSequenceClassification"),Xwt.forEach(t),lSr=r(_Pe," (mBART model)"),_Pe.forEach(t),iSr=i(Pe),R3=n(Pe,"LI",{});var bPe=s(R3);fMe=n(bPe,"STRONG",{});var zwt=s(fMe);dSr=r(zwt,"roberta"),zwt.forEach(t),cSr=r(bPe," \u2014 "),hY=n(bPe,"A",{href:!0});var Qwt=s(hY);fSr=r(Qwt,"FlaxRobertaForSequenceClassification"),Qwt.forEach(t),mSr=r(bPe," (RoBERTa model)"),bPe.forEach(t),gSr=i(Pe),B3=n(Pe,"LI",{});var vPe=s(B3);mMe=n(vPe,"STRONG",{});var Wwt=s(mMe);hSr=r(Wwt,"roformer"),Wwt.forEach(t),pSr=r(vPe," \u2014 "),pY=n(vPe,"A",{href:!0});var Hwt=s(pY);uSr=r(Hwt,"FlaxRoFormerForSequenceClassification"),Hwt.forEach(t),_Sr=r(vPe," (RoFormer model)"),vPe.forEach(t),bSr=i(Pe),P3=n(Pe,"LI",{});var FPe=s(P3);gMe=n(FPe,"STRONG",{});var Uwt=s(gMe);vSr=r(Uwt,"xlm-roberta"),Uwt.forEach(t),FSr=r(FPe," \u2014 "),uY=n(FPe,"A",{href:!0});var Jwt=s(uY);TSr=r(Jwt,"FlaxXLMRobertaForSequenceClassification"),Jwt.forEach(t),MSr=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),Pe.forEach(t),ESr=i(Hl),T(I3.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),Oqe=i(f),Xc=n(f,"H2",{class:!0});var Uje=s(Xc);q3=n(Uje,"A",{id:!0,class:!0,href:!0});var Ywt=s(q3);hMe=n(Ywt,"SPAN",{});var Kwt=s(hMe);T(yx.$$.fragment,Kwt),Kwt.forEach(t),Ywt.forEach(t),CSr=i(Uje),pMe=n(Uje,"SPAN",{});var Zwt=s(pMe);wSr=r(Zwt,"FlaxAutoModelForQuestionAnswering"),Zwt.forEach(t),Uje.forEach(t),Vqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(Lx.$$.fragment,Ul),ASr=i(Ul),zc=n(Ul,"P",{});var QZ=s(zc);ySr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_Y=n(QZ,"A",{href:!0});var eAt=s(_Y);LSr=r(eAt,"from_pretrained()"),eAt.forEach(t),xSr=r(QZ," class method or the "),bY=n(QZ,"A",{href:!0});var oAt=s(bY);$Sr=r(oAt,"from_config()"),oAt.forEach(t),kSr=r(QZ,` class
method.`),QZ.forEach(t),SSr=i(Ul),xx=n(Ul,"P",{});var Jje=s(xx);RSr=r(Jje,"This class cannot be instantiated directly using "),uMe=n(Jje,"CODE",{});var rAt=s(uMe);BSr=r(rAt,"__init__()"),rAt.forEach(t),PSr=r(Jje," (throws an error)."),Jje.forEach(t),ISr=i(Ul),zt=n(Ul,"DIV",{class:!0});var q6=s(zt);T($x.$$.fragment,q6),qSr=i(q6),_Me=n(q6,"P",{});var tAt=s(_Me);NSr=r(tAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tAt.forEach(t),jSr=i(q6),Qc=n(q6,"P",{});var WZ=s(Qc);DSr=r(WZ,`Note:
Loading a model from its configuration file does `),bMe=n(WZ,"STRONG",{});var aAt=s(bMe);GSr=r(aAt,"not"),aAt.forEach(t),OSr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(WZ,"A",{href:!0});var nAt=s(vY);VSr=r(nAt,"from_pretrained()"),nAt.forEach(t),XSr=r(WZ," to load the model weights."),WZ.forEach(t),zSr=i(q6),T(N3.$$.fragment,q6),q6.forEach(t),QSr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(kx.$$.fragment,Jl),WSr=i(Jl),vMe=n(Jl,"P",{});var sAt=s(vMe);HSr=r(sAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sAt.forEach(t),USr=i(Jl),vn=n(Jl,"P",{});var N6=s(vn);JSr=r(N6,"The model class to instantiate is selected based on the "),FMe=n(N6,"CODE",{});var lAt=s(FMe);YSr=r(lAt,"model_type"),lAt.forEach(t),KSr=r(N6,` property of the config object (either
passed as an argument or loaded from `),TMe=n(N6,"CODE",{});var iAt=s(TMe);ZSr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),eRr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(N6,"CODE",{});var dAt=s(MMe);oRr=r(dAt,"pretrained_model_name_or_path"),dAt.forEach(t),rRr=r(N6,":"),N6.forEach(t),tRr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);j3=n(Ie,"LI",{});var TPe=s(j3);EMe=n(TPe,"STRONG",{});var cAt=s(EMe);aRr=r(cAt,"albert"),cAt.forEach(t),nRr=r(TPe," \u2014 "),FY=n(TPe,"A",{href:!0});var fAt=s(FY);sRr=r(fAt,"FlaxAlbertForQuestionAnswering"),fAt.forEach(t),lRr=r(TPe," (ALBERT model)"),TPe.forEach(t),iRr=i(Ie),D3=n(Ie,"LI",{});var MPe=s(D3);CMe=n(MPe,"STRONG",{});var mAt=s(CMe);dRr=r(mAt,"bart"),mAt.forEach(t),cRr=r(MPe," \u2014 "),TY=n(MPe,"A",{href:!0});var gAt=s(TY);fRr=r(gAt,"FlaxBartForQuestionAnswering"),gAt.forEach(t),mRr=r(MPe," (BART model)"),MPe.forEach(t),gRr=i(Ie),G3=n(Ie,"LI",{});var EPe=s(G3);wMe=n(EPe,"STRONG",{});var hAt=s(wMe);hRr=r(hAt,"bert"),hAt.forEach(t),pRr=r(EPe," \u2014 "),MY=n(EPe,"A",{href:!0});var pAt=s(MY);uRr=r(pAt,"FlaxBertForQuestionAnswering"),pAt.forEach(t),_Rr=r(EPe," (BERT model)"),EPe.forEach(t),bRr=i(Ie),O3=n(Ie,"LI",{});var CPe=s(O3);AMe=n(CPe,"STRONG",{});var uAt=s(AMe);vRr=r(uAt,"big_bird"),uAt.forEach(t),FRr=r(CPe," \u2014 "),EY=n(CPe,"A",{href:!0});var _At=s(EY);TRr=r(_At,"FlaxBigBirdForQuestionAnswering"),_At.forEach(t),MRr=r(CPe," (BigBird model)"),CPe.forEach(t),ERr=i(Ie),V3=n(Ie,"LI",{});var wPe=s(V3);yMe=n(wPe,"STRONG",{});var bAt=s(yMe);CRr=r(bAt,"distilbert"),bAt.forEach(t),wRr=r(wPe," \u2014 "),CY=n(wPe,"A",{href:!0});var vAt=s(CY);ARr=r(vAt,"FlaxDistilBertForQuestionAnswering"),vAt.forEach(t),yRr=r(wPe," (DistilBERT model)"),wPe.forEach(t),LRr=i(Ie),X3=n(Ie,"LI",{});var APe=s(X3);LMe=n(APe,"STRONG",{});var FAt=s(LMe);xRr=r(FAt,"electra"),FAt.forEach(t),$Rr=r(APe," \u2014 "),wY=n(APe,"A",{href:!0});var TAt=s(wY);kRr=r(TAt,"FlaxElectraForQuestionAnswering"),TAt.forEach(t),SRr=r(APe," (ELECTRA model)"),APe.forEach(t),RRr=i(Ie),z3=n(Ie,"LI",{});var yPe=s(z3);xMe=n(yPe,"STRONG",{});var MAt=s(xMe);BRr=r(MAt,"mbart"),MAt.forEach(t),PRr=r(yPe," \u2014 "),AY=n(yPe,"A",{href:!0});var EAt=s(AY);IRr=r(EAt,"FlaxMBartForQuestionAnswering"),EAt.forEach(t),qRr=r(yPe," (mBART model)"),yPe.forEach(t),NRr=i(Ie),Q3=n(Ie,"LI",{});var LPe=s(Q3);$Me=n(LPe,"STRONG",{});var CAt=s($Me);jRr=r(CAt,"roberta"),CAt.forEach(t),DRr=r(LPe," \u2014 "),yY=n(LPe,"A",{href:!0});var wAt=s(yY);GRr=r(wAt,"FlaxRobertaForQuestionAnswering"),wAt.forEach(t),ORr=r(LPe," (RoBERTa model)"),LPe.forEach(t),VRr=i(Ie),W3=n(Ie,"LI",{});var xPe=s(W3);kMe=n(xPe,"STRONG",{});var AAt=s(kMe);XRr=r(AAt,"roformer"),AAt.forEach(t),zRr=r(xPe," \u2014 "),LY=n(xPe,"A",{href:!0});var yAt=s(LY);QRr=r(yAt,"FlaxRoFormerForQuestionAnswering"),yAt.forEach(t),WRr=r(xPe," (RoFormer model)"),xPe.forEach(t),HRr=i(Ie),H3=n(Ie,"LI",{});var $Pe=s(H3);SMe=n($Pe,"STRONG",{});var LAt=s(SMe);URr=r(LAt,"xlm-roberta"),LAt.forEach(t),JRr=r($Pe," \u2014 "),xY=n($Pe,"A",{href:!0});var xAt=s(xY);YRr=r(xAt,"FlaxXLMRobertaForQuestionAnswering"),xAt.forEach(t),KRr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),Ie.forEach(t),ZRr=i(Jl),T(U3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Xqe=i(f),Wc=n(f,"H2",{class:!0});var Yje=s(Wc);J3=n(Yje,"A",{id:!0,class:!0,href:!0});var $At=s(J3);RMe=n($At,"SPAN",{});var kAt=s(RMe);T(Sx.$$.fragment,kAt),kAt.forEach(t),$At.forEach(t),eBr=i(Yje),BMe=n(Yje,"SPAN",{});var SAt=s(BMe);oBr=r(SAt,"FlaxAutoModelForTokenClassification"),SAt.forEach(t),Yje.forEach(t),zqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Rx.$$.fragment,Yl),rBr=i(Yl),Hc=n(Yl,"P",{});var HZ=s(Hc);tBr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Y=n(HZ,"A",{href:!0});var RAt=s($Y);aBr=r(RAt,"from_pretrained()"),RAt.forEach(t),nBr=r(HZ," class method or the "),kY=n(HZ,"A",{href:!0});var BAt=s(kY);sBr=r(BAt,"from_config()"),BAt.forEach(t),lBr=r(HZ,` class
method.`),HZ.forEach(t),iBr=i(Yl),Bx=n(Yl,"P",{});var Kje=s(Bx);dBr=r(Kje,"This class cannot be instantiated directly using "),PMe=n(Kje,"CODE",{});var PAt=s(PMe);cBr=r(PAt,"__init__()"),PAt.forEach(t),fBr=r(Kje," (throws an error)."),Kje.forEach(t),mBr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var j6=s(Qt);T(Px.$$.fragment,j6),gBr=i(j6),IMe=n(j6,"P",{});var IAt=s(IMe);hBr=r(IAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IAt.forEach(t),pBr=i(j6),Uc=n(j6,"P",{});var UZ=s(Uc);uBr=r(UZ,`Note:
Loading a model from its configuration file does `),qMe=n(UZ,"STRONG",{});var qAt=s(qMe);_Br=r(qAt,"not"),qAt.forEach(t),bBr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=n(UZ,"A",{href:!0});var NAt=s(SY);vBr=r(NAt,"from_pretrained()"),NAt.forEach(t),FBr=r(UZ," to load the model weights."),UZ.forEach(t),TBr=i(j6),T(Y3.$$.fragment,j6),j6.forEach(t),MBr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(Ix.$$.fragment,Kl),EBr=i(Kl),NMe=n(Kl,"P",{});var jAt=s(NMe);CBr=r(jAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jAt.forEach(t),wBr=i(Kl),Fn=n(Kl,"P",{});var D6=s(Fn);ABr=r(D6,"The model class to instantiate is selected based on the "),jMe=n(D6,"CODE",{});var DAt=s(jMe);yBr=r(DAt,"model_type"),DAt.forEach(t),LBr=r(D6,` property of the config object (either
passed as an argument or loaded from `),DMe=n(D6,"CODE",{});var GAt=s(DMe);xBr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),$Br=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(D6,"CODE",{});var OAt=s(GMe);kBr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),SBr=r(D6,":"),D6.forEach(t),RBr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);K3=n(Fo,"LI",{});var kPe=s(K3);OMe=n(kPe,"STRONG",{});var VAt=s(OMe);BBr=r(VAt,"albert"),VAt.forEach(t),PBr=r(kPe," \u2014 "),RY=n(kPe,"A",{href:!0});var XAt=s(RY);IBr=r(XAt,"FlaxAlbertForTokenClassification"),XAt.forEach(t),qBr=r(kPe," (ALBERT model)"),kPe.forEach(t),NBr=i(Fo),Z3=n(Fo,"LI",{});var SPe=s(Z3);VMe=n(SPe,"STRONG",{});var zAt=s(VMe);jBr=r(zAt,"bert"),zAt.forEach(t),DBr=r(SPe," \u2014 "),BY=n(SPe,"A",{href:!0});var QAt=s(BY);GBr=r(QAt,"FlaxBertForTokenClassification"),QAt.forEach(t),OBr=r(SPe," (BERT model)"),SPe.forEach(t),VBr=i(Fo),ew=n(Fo,"LI",{});var RPe=s(ew);XMe=n(RPe,"STRONG",{});var WAt=s(XMe);XBr=r(WAt,"big_bird"),WAt.forEach(t),zBr=r(RPe," \u2014 "),PY=n(RPe,"A",{href:!0});var HAt=s(PY);QBr=r(HAt,"FlaxBigBirdForTokenClassification"),HAt.forEach(t),WBr=r(RPe," (BigBird model)"),RPe.forEach(t),HBr=i(Fo),ow=n(Fo,"LI",{});var BPe=s(ow);zMe=n(BPe,"STRONG",{});var UAt=s(zMe);UBr=r(UAt,"distilbert"),UAt.forEach(t),JBr=r(BPe," \u2014 "),IY=n(BPe,"A",{href:!0});var JAt=s(IY);YBr=r(JAt,"FlaxDistilBertForTokenClassification"),JAt.forEach(t),KBr=r(BPe," (DistilBERT model)"),BPe.forEach(t),ZBr=i(Fo),rw=n(Fo,"LI",{});var PPe=s(rw);QMe=n(PPe,"STRONG",{});var YAt=s(QMe);ePr=r(YAt,"electra"),YAt.forEach(t),oPr=r(PPe," \u2014 "),qY=n(PPe,"A",{href:!0});var KAt=s(qY);rPr=r(KAt,"FlaxElectraForTokenClassification"),KAt.forEach(t),tPr=r(PPe," (ELECTRA model)"),PPe.forEach(t),aPr=i(Fo),tw=n(Fo,"LI",{});var IPe=s(tw);WMe=n(IPe,"STRONG",{});var ZAt=s(WMe);nPr=r(ZAt,"roberta"),ZAt.forEach(t),sPr=r(IPe," \u2014 "),NY=n(IPe,"A",{href:!0});var e6t=s(NY);lPr=r(e6t,"FlaxRobertaForTokenClassification"),e6t.forEach(t),iPr=r(IPe," (RoBERTa model)"),IPe.forEach(t),dPr=i(Fo),aw=n(Fo,"LI",{});var qPe=s(aw);HMe=n(qPe,"STRONG",{});var o6t=s(HMe);cPr=r(o6t,"roformer"),o6t.forEach(t),fPr=r(qPe," \u2014 "),jY=n(qPe,"A",{href:!0});var r6t=s(jY);mPr=r(r6t,"FlaxRoFormerForTokenClassification"),r6t.forEach(t),gPr=r(qPe," (RoFormer model)"),qPe.forEach(t),hPr=i(Fo),nw=n(Fo,"LI",{});var NPe=s(nw);UMe=n(NPe,"STRONG",{});var t6t=s(UMe);pPr=r(t6t,"xlm-roberta"),t6t.forEach(t),uPr=r(NPe," \u2014 "),DY=n(NPe,"A",{href:!0});var a6t=s(DY);_Pr=r(a6t,"FlaxXLMRobertaForTokenClassification"),a6t.forEach(t),bPr=r(NPe," (XLM-RoBERTa model)"),NPe.forEach(t),Fo.forEach(t),vPr=i(Kl),T(sw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Qqe=i(f),Jc=n(f,"H2",{class:!0});var Zje=s(Jc);lw=n(Zje,"A",{id:!0,class:!0,href:!0});var n6t=s(lw);JMe=n(n6t,"SPAN",{});var s6t=s(JMe);T(qx.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),FPr=i(Zje),YMe=n(Zje,"SPAN",{});var l6t=s(YMe);TPr=r(l6t,"FlaxAutoModelForMultipleChoice"),l6t.forEach(t),Zje.forEach(t),Wqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Nx.$$.fragment,Zl),MPr=i(Zl),Yc=n(Zl,"P",{});var JZ=s(Yc);EPr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GY=n(JZ,"A",{href:!0});var i6t=s(GY);CPr=r(i6t,"from_pretrained()"),i6t.forEach(t),wPr=r(JZ," class method or the "),OY=n(JZ,"A",{href:!0});var d6t=s(OY);APr=r(d6t,"from_config()"),d6t.forEach(t),yPr=r(JZ,` class
method.`),JZ.forEach(t),LPr=i(Zl),jx=n(Zl,"P",{});var eDe=s(jx);xPr=r(eDe,"This class cannot be instantiated directly using "),KMe=n(eDe,"CODE",{});var c6t=s(KMe);$Pr=r(c6t,"__init__()"),c6t.forEach(t),kPr=r(eDe," (throws an error)."),eDe.forEach(t),SPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var G6=s(Wt);T(Dx.$$.fragment,G6),RPr=i(G6),ZMe=n(G6,"P",{});var f6t=s(ZMe);BPr=r(f6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f6t.forEach(t),PPr=i(G6),Kc=n(G6,"P",{});var YZ=s(Kc);IPr=r(YZ,`Note:
Loading a model from its configuration file does `),eEe=n(YZ,"STRONG",{});var m6t=s(eEe);qPr=r(m6t,"not"),m6t.forEach(t),NPr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(YZ,"A",{href:!0});var g6t=s(VY);jPr=r(g6t,"from_pretrained()"),g6t.forEach(t),DPr=r(YZ," to load the model weights."),YZ.forEach(t),GPr=i(G6),T(iw.$$.fragment,G6),G6.forEach(t),OPr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Gx.$$.fragment,ei),VPr=i(ei),oEe=n(ei,"P",{});var h6t=s(oEe);XPr=r(h6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h6t.forEach(t),zPr=i(ei),Tn=n(ei,"P",{});var O6=s(Tn);QPr=r(O6,"The model class to instantiate is selected based on the "),rEe=n(O6,"CODE",{});var p6t=s(rEe);WPr=r(p6t,"model_type"),p6t.forEach(t),HPr=r(O6,` property of the config object (either
passed as an argument or loaded from `),tEe=n(O6,"CODE",{});var u6t=s(tEe);UPr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),JPr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aEe=n(O6,"CODE",{});var _6t=s(aEe);YPr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),KPr=r(O6,":"),O6.forEach(t),ZPr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);dw=n(To,"LI",{});var jPe=s(dw);nEe=n(jPe,"STRONG",{});var b6t=s(nEe);eIr=r(b6t,"albert"),b6t.forEach(t),oIr=r(jPe," \u2014 "),XY=n(jPe,"A",{href:!0});var v6t=s(XY);rIr=r(v6t,"FlaxAlbertForMultipleChoice"),v6t.forEach(t),tIr=r(jPe," (ALBERT model)"),jPe.forEach(t),aIr=i(To),cw=n(To,"LI",{});var DPe=s(cw);sEe=n(DPe,"STRONG",{});var F6t=s(sEe);nIr=r(F6t,"bert"),F6t.forEach(t),sIr=r(DPe," \u2014 "),zY=n(DPe,"A",{href:!0});var T6t=s(zY);lIr=r(T6t,"FlaxBertForMultipleChoice"),T6t.forEach(t),iIr=r(DPe," (BERT model)"),DPe.forEach(t),dIr=i(To),fw=n(To,"LI",{});var GPe=s(fw);lEe=n(GPe,"STRONG",{});var M6t=s(lEe);cIr=r(M6t,"big_bird"),M6t.forEach(t),fIr=r(GPe," \u2014 "),QY=n(GPe,"A",{href:!0});var E6t=s(QY);mIr=r(E6t,"FlaxBigBirdForMultipleChoice"),E6t.forEach(t),gIr=r(GPe," (BigBird model)"),GPe.forEach(t),hIr=i(To),mw=n(To,"LI",{});var OPe=s(mw);iEe=n(OPe,"STRONG",{});var C6t=s(iEe);pIr=r(C6t,"distilbert"),C6t.forEach(t),uIr=r(OPe," \u2014 "),WY=n(OPe,"A",{href:!0});var w6t=s(WY);_Ir=r(w6t,"FlaxDistilBertForMultipleChoice"),w6t.forEach(t),bIr=r(OPe," (DistilBERT model)"),OPe.forEach(t),vIr=i(To),gw=n(To,"LI",{});var VPe=s(gw);dEe=n(VPe,"STRONG",{});var A6t=s(dEe);FIr=r(A6t,"electra"),A6t.forEach(t),TIr=r(VPe," \u2014 "),HY=n(VPe,"A",{href:!0});var y6t=s(HY);MIr=r(y6t,"FlaxElectraForMultipleChoice"),y6t.forEach(t),EIr=r(VPe," (ELECTRA model)"),VPe.forEach(t),CIr=i(To),hw=n(To,"LI",{});var XPe=s(hw);cEe=n(XPe,"STRONG",{});var L6t=s(cEe);wIr=r(L6t,"roberta"),L6t.forEach(t),AIr=r(XPe," \u2014 "),UY=n(XPe,"A",{href:!0});var x6t=s(UY);yIr=r(x6t,"FlaxRobertaForMultipleChoice"),x6t.forEach(t),LIr=r(XPe," (RoBERTa model)"),XPe.forEach(t),xIr=i(To),pw=n(To,"LI",{});var zPe=s(pw);fEe=n(zPe,"STRONG",{});var $6t=s(fEe);$Ir=r($6t,"roformer"),$6t.forEach(t),kIr=r(zPe," \u2014 "),JY=n(zPe,"A",{href:!0});var k6t=s(JY);SIr=r(k6t,"FlaxRoFormerForMultipleChoice"),k6t.forEach(t),RIr=r(zPe," (RoFormer model)"),zPe.forEach(t),BIr=i(To),uw=n(To,"LI",{});var QPe=s(uw);mEe=n(QPe,"STRONG",{});var S6t=s(mEe);PIr=r(S6t,"xlm-roberta"),S6t.forEach(t),IIr=r(QPe," \u2014 "),YY=n(QPe,"A",{href:!0});var R6t=s(YY);qIr=r(R6t,"FlaxXLMRobertaForMultipleChoice"),R6t.forEach(t),NIr=r(QPe," (XLM-RoBERTa model)"),QPe.forEach(t),To.forEach(t),jIr=i(ei),T(_w.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Hqe=i(f),Zc=n(f,"H2",{class:!0});var oDe=s(Zc);bw=n(oDe,"A",{id:!0,class:!0,href:!0});var B6t=s(bw);gEe=n(B6t,"SPAN",{});var P6t=s(gEe);T(Ox.$$.fragment,P6t),P6t.forEach(t),B6t.forEach(t),DIr=i(oDe),hEe=n(oDe,"SPAN",{});var I6t=s(hEe);GIr=r(I6t,"FlaxAutoModelForNextSentencePrediction"),I6t.forEach(t),oDe.forEach(t),Uqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Vx.$$.fragment,oi),OIr=i(oi),ef=n(oi,"P",{});var KZ=s(ef);VIr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KY=n(KZ,"A",{href:!0});var q6t=s(KY);XIr=r(q6t,"from_pretrained()"),q6t.forEach(t),zIr=r(KZ," class method or the "),ZY=n(KZ,"A",{href:!0});var N6t=s(ZY);QIr=r(N6t,"from_config()"),N6t.forEach(t),WIr=r(KZ,` class
method.`),KZ.forEach(t),HIr=i(oi),Xx=n(oi,"P",{});var rDe=s(Xx);UIr=r(rDe,"This class cannot be instantiated directly using "),pEe=n(rDe,"CODE",{});var j6t=s(pEe);JIr=r(j6t,"__init__()"),j6t.forEach(t),YIr=r(rDe," (throws an error)."),rDe.forEach(t),KIr=i(oi),Ht=n(oi,"DIV",{class:!0});var V6=s(Ht);T(zx.$$.fragment,V6),ZIr=i(V6),uEe=n(V6,"P",{});var D6t=s(uEe);eqr=r(D6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),D6t.forEach(t),oqr=i(V6),of=n(V6,"P",{});var ZZ=s(of);rqr=r(ZZ,`Note:
Loading a model from its configuration file does `),_Ee=n(ZZ,"STRONG",{});var G6t=s(_Ee);tqr=r(G6t,"not"),G6t.forEach(t),aqr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(ZZ,"A",{href:!0});var O6t=s(eK);nqr=r(O6t,"from_pretrained()"),O6t.forEach(t),sqr=r(ZZ," to load the model weights."),ZZ.forEach(t),lqr=i(V6),T(vw.$$.fragment,V6),V6.forEach(t),iqr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Qx.$$.fragment,ri),dqr=i(ri),bEe=n(ri,"P",{});var V6t=s(bEe);cqr=r(V6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V6t.forEach(t),fqr=i(ri),Mn=n(ri,"P",{});var X6=s(Mn);mqr=r(X6,"The model class to instantiate is selected based on the "),vEe=n(X6,"CODE",{});var X6t=s(vEe);gqr=r(X6t,"model_type"),X6t.forEach(t),hqr=r(X6,` property of the config object (either
passed as an argument or loaded from `),FEe=n(X6,"CODE",{});var z6t=s(FEe);pqr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),uqr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(X6,"CODE",{});var Q6t=s(TEe);_qr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),bqr=r(X6,":"),X6.forEach(t),vqr=i(ri),MEe=n(ri,"UL",{});var W6t=s(MEe);Fw=n(W6t,"LI",{});var WPe=s(Fw);EEe=n(WPe,"STRONG",{});var H6t=s(EEe);Fqr=r(H6t,"bert"),H6t.forEach(t),Tqr=r(WPe," \u2014 "),oK=n(WPe,"A",{href:!0});var U6t=s(oK);Mqr=r(U6t,"FlaxBertForNextSentencePrediction"),U6t.forEach(t),Eqr=r(WPe," (BERT model)"),WPe.forEach(t),W6t.forEach(t),Cqr=i(ri),T(Tw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Jqe=i(f),rf=n(f,"H2",{class:!0});var tDe=s(rf);Mw=n(tDe,"A",{id:!0,class:!0,href:!0});var J6t=s(Mw);CEe=n(J6t,"SPAN",{});var Y6t=s(CEe);T(Wx.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),wqr=i(tDe),wEe=n(tDe,"SPAN",{});var K6t=s(wEe);Aqr=r(K6t,"FlaxAutoModelForImageClassification"),K6t.forEach(t),tDe.forEach(t),Yqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Hx.$$.fragment,ti),yqr=i(ti),tf=n(ti,"P",{});var eee=s(tf);Lqr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rK=n(eee,"A",{href:!0});var Z6t=s(rK);xqr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),$qr=r(eee," class method or the "),tK=n(eee,"A",{href:!0});var e0t=s(tK);kqr=r(e0t,"from_config()"),e0t.forEach(t),Sqr=r(eee,` class
method.`),eee.forEach(t),Rqr=i(ti),Ux=n(ti,"P",{});var aDe=s(Ux);Bqr=r(aDe,"This class cannot be instantiated directly using "),AEe=n(aDe,"CODE",{});var o0t=s(AEe);Pqr=r(o0t,"__init__()"),o0t.forEach(t),Iqr=r(aDe," (throws an error)."),aDe.forEach(t),qqr=i(ti),Ut=n(ti,"DIV",{class:!0});var z6=s(Ut);T(Jx.$$.fragment,z6),Nqr=i(z6),yEe=n(z6,"P",{});var r0t=s(yEe);jqr=r(r0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),r0t.forEach(t),Dqr=i(z6),af=n(z6,"P",{});var oee=s(af);Gqr=r(oee,`Note:
Loading a model from its configuration file does `),LEe=n(oee,"STRONG",{});var t0t=s(LEe);Oqr=r(t0t,"not"),t0t.forEach(t),Vqr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(oee,"A",{href:!0});var a0t=s(aK);Xqr=r(a0t,"from_pretrained()"),a0t.forEach(t),zqr=r(oee," to load the model weights."),oee.forEach(t),Qqr=i(z6),T(Ew.$$.fragment,z6),z6.forEach(t),Wqr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Yx.$$.fragment,ai),Hqr=i(ai),xEe=n(ai,"P",{});var n0t=s(xEe);Uqr=r(n0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),n0t.forEach(t),Jqr=i(ai),En=n(ai,"P",{});var Q6=s(En);Yqr=r(Q6,"The model class to instantiate is selected based on the "),$Ee=n(Q6,"CODE",{});var s0t=s($Ee);Kqr=r(s0t,"model_type"),s0t.forEach(t),Zqr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),kEe=n(Q6,"CODE",{});var l0t=s(kEe);eNr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),oNr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(Q6,"CODE",{});var i0t=s(SEe);rNr=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),tNr=r(Q6,":"),Q6.forEach(t),aNr=i(ai),Kx=n(ai,"UL",{});var nDe=s(Kx);Cw=n(nDe,"LI",{});var HPe=s(Cw);REe=n(HPe,"STRONG",{});var d0t=s(REe);nNr=r(d0t,"beit"),d0t.forEach(t),sNr=r(HPe," \u2014 "),nK=n(HPe,"A",{href:!0});var c0t=s(nK);lNr=r(c0t,"FlaxBeitForImageClassification"),c0t.forEach(t),iNr=r(HPe," (BEiT model)"),HPe.forEach(t),dNr=i(nDe),ww=n(nDe,"LI",{});var UPe=s(ww);BEe=n(UPe,"STRONG",{});var f0t=s(BEe);cNr=r(f0t,"vit"),f0t.forEach(t),fNr=r(UPe," \u2014 "),sK=n(UPe,"A",{href:!0});var m0t=s(sK);mNr=r(m0t,"FlaxViTForImageClassification"),m0t.forEach(t),gNr=r(UPe," (ViT model)"),UPe.forEach(t),nDe.forEach(t),hNr=i(ai),T(Aw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Kqe=i(f),nf=n(f,"H2",{class:!0});var sDe=s(nf);yw=n(sDe,"A",{id:!0,class:!0,href:!0});var g0t=s(yw);PEe=n(g0t,"SPAN",{});var h0t=s(PEe);T(Zx.$$.fragment,h0t),h0t.forEach(t),g0t.forEach(t),pNr=i(sDe),IEe=n(sDe,"SPAN",{});var p0t=s(IEe);uNr=r(p0t,"FlaxAutoModelForVision2Seq"),p0t.forEach(t),sDe.forEach(t),Zqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(e9.$$.fragment,ni),_Nr=i(ni),sf=n(ni,"P",{});var ree=s(sf);bNr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lK=n(ree,"A",{href:!0});var u0t=s(lK);vNr=r(u0t,"from_pretrained()"),u0t.forEach(t),FNr=r(ree," class method or the "),iK=n(ree,"A",{href:!0});var _0t=s(iK);TNr=r(_0t,"from_config()"),_0t.forEach(t),MNr=r(ree,` class
method.`),ree.forEach(t),ENr=i(ni),o9=n(ni,"P",{});var lDe=s(o9);CNr=r(lDe,"This class cannot be instantiated directly using "),qEe=n(lDe,"CODE",{});var b0t=s(qEe);wNr=r(b0t,"__init__()"),b0t.forEach(t),ANr=r(lDe," (throws an error)."),lDe.forEach(t),yNr=i(ni),Jt=n(ni,"DIV",{class:!0});var W6=s(Jt);T(r9.$$.fragment,W6),LNr=i(W6),NEe=n(W6,"P",{});var v0t=s(NEe);xNr=r(v0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),v0t.forEach(t),$Nr=i(W6),lf=n(W6,"P",{});var tee=s(lf);kNr=r(tee,`Note:
Loading a model from its configuration file does `),jEe=n(tee,"STRONG",{});var F0t=s(jEe);SNr=r(F0t,"not"),F0t.forEach(t),RNr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(tee,"A",{href:!0});var T0t=s(dK);BNr=r(T0t,"from_pretrained()"),T0t.forEach(t),PNr=r(tee," to load the model weights."),tee.forEach(t),INr=i(W6),T(Lw.$$.fragment,W6),W6.forEach(t),qNr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(t9.$$.fragment,si),NNr=i(si),DEe=n(si,"P",{});var M0t=s(DEe);jNr=r(M0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M0t.forEach(t),DNr=i(si),Cn=n(si,"P",{});var H6=s(Cn);GNr=r(H6,"The model class to instantiate is selected based on the "),GEe=n(H6,"CODE",{});var E0t=s(GEe);ONr=r(E0t,"model_type"),E0t.forEach(t),VNr=r(H6,` property of the config object (either
passed as an argument or loaded from `),OEe=n(H6,"CODE",{});var C0t=s(OEe);XNr=r(C0t,"pretrained_model_name_or_path"),C0t.forEach(t),zNr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VEe=n(H6,"CODE",{});var w0t=s(VEe);QNr=r(w0t,"pretrained_model_name_or_path"),w0t.forEach(t),WNr=r(H6,":"),H6.forEach(t),HNr=i(si),XEe=n(si,"UL",{});var A0t=s(XEe);xw=n(A0t,"LI",{});var JPe=s(xw);zEe=n(JPe,"STRONG",{});var y0t=s(zEe);UNr=r(y0t,"vision-encoder-decoder"),y0t.forEach(t),JNr=r(JPe," \u2014 "),cK=n(JPe,"A",{href:!0});var L0t=s(cK);YNr=r(L0t,"FlaxVisionEncoderDecoderModel"),L0t.forEach(t),KNr=r(JPe," (Vision Encoder decoder model)"),JPe.forEach(t),A0t.forEach(t),ZNr=i(si),T($w.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(SLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(M$,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(E$,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertConfig"),c(C$,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig"),c(w$,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitConfig"),c(A$,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertConfig"),c(y$,"href","/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(L$,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdConfig"),c(x$,"href","/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c($$,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(k$,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(S$,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertConfig"),c(R$,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineConfig"),c(B$,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPConfig"),c(P$,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertConfig"),c(I$,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextConfig"),c(q$,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLConfig"),c(N$,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(j$,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(D$,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(G$,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaConfig"),c(O$,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(V$,"href","/docs/transformers/pr_17141/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(X$,"href","/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTConfig"),c(z$,"href","/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrConfig"),c(Q$,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertConfig"),c(W$,"href","/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRConfig"),c(H$,"href","/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTConfig"),c(U$,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraConfig"),c(J$,"href","/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Y$,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertConfig"),c(K$,"href","/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaConfig"),c(Z$,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetConfig"),c(ek,"href","/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTConfig"),c(ok,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelConfig"),c(rk,"href","/docs/transformers/pr_17141/en/model_doc/glpn#transformers.GLPNConfig"),c(tk,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Config"),c(ak,"href","/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(nk,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJConfig"),c(sk,"href","/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertConfig"),c(lk,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertConfig"),c(ik,"href","/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(dk,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ck,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(fk,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDConfig"),c(mk,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerConfig"),c(gk,"href","/docs/transformers/pr_17141/en/model_doc/luke#transformers.LukeConfig"),c(hk,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertConfig"),c(pk,"href","/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100Config"),c(uk,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianConfig"),c(_k,"href","/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(bk,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartConfig"),c(vk,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Fk,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Tk,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetConfig"),c(Mk,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Config"),c(Ek,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Ck,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wk,"href","/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTConfig"),c(Ak,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusConfig"),c(yk,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Lk,"href","/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartConfig"),c(xk,"href","/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerConfig"),c($k,"href","/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(kk,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Sk,"href","/docs/transformers/pr_17141/en/model_doc/rag#transformers.RagConfig"),c(Rk,"href","/docs/transformers/pr_17141/en/model_doc/realm#transformers.RealmConfig"),c(Bk,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerConfig"),c(Pk,"href","/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetConfig"),c(Ik,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertConfig"),c(qk,"href","/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetConfig"),c(Nk,"href","/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertConfig"),c(jk,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaConfig"),c(Dk,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerConfig"),c(Gk,"href","/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerConfig"),c(Ok,"href","/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWConfig"),c(Vk,"href","/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDConfig"),c(Xk,"href","/docs/transformers/pr_17141/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(zk,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Qk,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Wk,"href","/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterConfig"),c(Hk,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Uk,"href","/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinConfig"),c(Jk,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Config"),c(Yk,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasConfig"),c(Kk,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartConfig"),c(Zk,"href","/docs/transformers/pr_17141/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(eS,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(oS,"href","/docs/transformers/pr_17141/en/model_doc/trocr#transformers.TrOCRConfig"),c(rS,"href","/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(tS,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(aS,"href","/docs/transformers/pr_17141/en/model_doc/van#transformers.VanConfig"),c(nS,"href","/docs/transformers/pr_17141/en/model_doc/vilt#transformers.ViltConfig"),c(sS,"href","/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(lS,"href","/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(iS,"href","/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(dS,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTConfig"),c(cS,"href","/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(fS,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mS,"href","/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMConfig"),c(gS,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMConfig"),c(hS,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMConfig"),c(pS,"href","/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(uS,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(_S,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bS,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetConfig"),c(vS,"href","/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosConfig"),c(FS,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(TS,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(MS,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertTokenizer"),c(ES,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CS,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartTokenizer"),c(wS,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartTokenizerFast"),c(AS,"href","/docs/transformers/pr_17141/en/model_doc/barthez#transformers.BarthezTokenizer"),c(yS,"href","/docs/transformers/pr_17141/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(LS,"href","/docs/transformers/pr_17141/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xS,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizer"),c($S,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizerFast"),c(kS,"href","/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(SS,"href","/docs/transformers/pr_17141/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(RS,"href","/docs/transformers/pr_17141/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(BS,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(PS,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(IS,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qS,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(NS,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jS,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(DS,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(GS,"href","/docs/transformers/pr_17141/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(OS,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertTokenizer"),c(VS,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(XS,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineTokenizer"),c(zS,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPTokenizer"),c(QS,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(WS,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(HS,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(US,"href","/docs/transformers/pr_17141/en/model_doc/cpm#transformers.CpmTokenizer"),c(JS,"href","/docs/transformers/pr_17141/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(YS,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(KS,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZS,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eR,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaTokenizer"),c(oR,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(rR,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(tR,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(aR,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(nR,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(sR,"href","/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(lR,"href","/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(iR,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraTokenizer"),c(dR,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(cR,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(fR,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetTokenizer"),c(mR,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(gR,"href","/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(hR,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelTokenizer"),c(pR,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(uR,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vR,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FR,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TR,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17141/en/model_doc/herbert#transformers.HerbertTokenizer"),c(ER,"href","/docs/transformers/pr_17141/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wR,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AR,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yR,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LR,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(xR,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($R,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(kR,"href","/docs/transformers/pr_17141/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(SR,"href","/docs/transformers/pr_17141/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(RR,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDTokenizer"),c(BR,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDTokenizerFast"),c(PR,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerTokenizer"),c(IR,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qR,"href","/docs/transformers/pr_17141/en/model_doc/luke#transformers.LukeTokenizer"),c(NR,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(jR,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(GR,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianTokenizer"),c(OR,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartTokenizer"),c(VR,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(XR,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(zR,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(QR,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizer"),c(WR,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizerFast"),c(HR,"href","/docs/transformers/pr_17141/en/model_doc/mluke#transformers.MLukeTokenizer"),c(UR,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(JR,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(KR,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.T5Tokenizer"),c(eB,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.T5TokenizerFast"),c(oB,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(aB,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nB,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sB,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lB,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iB,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dB,"href","/docs/transformers/pr_17141/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cB,"href","/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fB,"href","/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mB,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_17141/en/model_doc/rag#transformers.RagTokenizer"),c(pB,"href","/docs/transformers/pr_17141/en/model_doc/realm#transformers.RealmTokenizer"),c(uB,"href","/docs/transformers/pr_17141/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_B,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bB,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vB,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertTokenizer"),c(FB,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(MB,"href","/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CB,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(AB,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yB,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(LB,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xB,"href","/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterTokenizer"),c($B,"href","/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kB,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(SB,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.T5Tokenizer"),c(BB,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.T5TokenizerFast"),c(PB,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasTokenizer"),c(IB,"href","/docs/transformers/pr_17141/en/model_doc/tapex#transformers.TapexTokenizer"),c(qB,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(NB,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizer"),c(jB,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertTokenizerFast"),c(DB,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GB,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(OB,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VB,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMTokenizer"),c(zB,"href","/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(QB,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WB,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UB,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JB,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YB,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KB,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZB,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoFeatureExtractor"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(eP,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oP,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nP,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(dP,"href","/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17141/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mP,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(gP,"href","/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wP,"href","/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(AP,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(yP,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPProcessor"),c(LP,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(xP,"href","/docs/transformers/pr_17141/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($P,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(RP,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(BP,"href","/docs/transformers/pr_17141/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/pr_17141/en/model_doc/vilt#transformers.ViltProcessor"),c(NP,"href","/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(jP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DP,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoModel"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(GP,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OP,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VP,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XP,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertModel"),c(zP,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartModel"),c(QP,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitModel"),c(WP,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertModel"),c(HP,"href","/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UP,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdModel"),c(JP,"href","/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YP,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KP,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZP,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertModel"),c(eI,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineModel"),c(oI,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.CLIPModel"),c(rI,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertModel"),c(tI,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextModel"),c(aI,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLModel"),c(nI,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sI,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lI,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iI,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaModel"),c(dI,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cI,"href","/docs/transformers/pr_17141/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fI,"href","/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTModel"),c(mI,"href","/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrModel"),c(gI,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertModel"),c(hI,"href","/docs/transformers/pr_17141/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pI,"href","/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTModel"),c(uI,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraModel"),c(_I,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertModel"),c(bI,"href","/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaModel"),c(vI,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetModel"),c(FI,"href","/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTModel"),c(TI,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelModel"),c(MI,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelBaseModel"),c(EI,"href","/docs/transformers/pr_17141/en/model_doc/glpn#transformers.GLPNModel"),c(CI,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2Model"),c(wI,"href","/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(AI,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJModel"),c(yI,"href","/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertModel"),c(LI,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertModel"),c(xI,"href","/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTModel"),c($I,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(kI,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(SI,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDModel"),c(RI,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerModel"),c(BI,"href","/docs/transformers/pr_17141/en/model_doc/luke#transformers.LukeModel"),c(PI,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertModel"),c(II,"href","/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100Model"),c(qI,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianModel"),c(NI,"href","/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerModel"),c(jI,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartModel"),c(DI,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(GI,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertModel"),c(OI,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetModel"),c(VI,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5Model"),c(XI,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerModel"),c(zI,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(QI,"href","/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTModel"),c(WI,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusModel"),c(HI,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverModel"),c(UI,"href","/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartModel"),c(JI,"href","/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerModel"),c(YI,"href","/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(KI,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ZI,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerModel"),c(eq,"href","/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetModel"),c(oq,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertModel"),c(rq,"href","/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetModel"),c(tq,"href","/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertModel"),c(aq,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaModel"),c(nq,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerModel"),c(sq,"href","/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerModel"),c(lq,"href","/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWModel"),c(iq,"href","/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDModel"),c(dq,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(cq,"href","/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterModel"),c(fq,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(mq,"href","/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinModel"),c(gq,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5Model"),c(hq,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasModel"),c(pq,"href","/docs/transformers/pr_17141/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(uq,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(_q,"href","/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechModel"),c(bq,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(vq,"href","/docs/transformers/pr_17141/en/model_doc/van#transformers.VanModel"),c(Fq,"href","/docs/transformers/pr_17141/en/model_doc/vilt#transformers.ViltModel"),c(Tq,"href","/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Mq,"href","/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Eq,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTModel"),c(Cq,"href","/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(wq,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Aq,"href","/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMModel"),c(yq,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMModel"),c(Lq,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMModel"),c(xq,"href","/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c($q,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kq,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Sq,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetModel"),c(Rq,"href","/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosModel"),c(Bq,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ju,"id","transformers.AutoModelForPreTraining"),c(ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ju,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Pq,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qq,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nq,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForPreTraining"),c(jq,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dq,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForPreTraining"),c(Gq,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Oq,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xq,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(zq,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Uq,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Jq,"href","/docs/transformers/pr_17141/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Yq,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Kq,"href","/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Zq,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(eN,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(oN,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(rN,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(tN,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(aN,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(nN,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(sN,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(lN,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(iN,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dN,"href","/docs/transformers/pr_17141/en/model_doc/retribert#transformers.RetriBertModel"),c(cN,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fN,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(mN,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gN,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hN,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pN,"href","/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(uN,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(_N,"href","/docs/transformers/pr_17141/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(bN,"href","/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(vN,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(FN,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TN,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(MN,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(EN,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x_,"id","transformers.AutoModelForCausalLM"),c(x_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(CN,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wN,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AN,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yN,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForCausalLM"),c(LN,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertLMHeadModel"),c(xN,"href","/docs/transformers/pr_17141/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c($N,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(kN,"href","/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(SN,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(RN,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(BN,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(PN,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(IN,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(qN,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForCausalLM"),c(NN,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(jN,"href","/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(DN,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(GN,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianForCausalLM"),c(ON,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForCausalLM"),c(VN,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(XN,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zN,"href","/docs/transformers/pr_17141/en/model_doc/opt#transformers.OPTForCausalLM"),c(QN,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(WN,"href","/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(HN,"href","/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(UN,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(JN,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(YN,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(KN,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ZN,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ej,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(oj,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rj,"href","/docs/transformers/pr_17141/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(tj,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(aj,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nj,"href","/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(sj,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(lj,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ij,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForMaskedLM"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(dj,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uj,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(vj,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(wj,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xj,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($j,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(qj,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jj,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Vj,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(zj,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eb,"id","transformers.AutoModelForSeq2SeqLM"),c(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Qj,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wj,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hj,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uj,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Zj,"href","/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(eD,"href","/docs/transformers/pr_17141/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17141/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.MarianMTModel"),c(aD,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17141/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17141/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForSequenceClassification"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(mD,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gD,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hD,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pD,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17141/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.AutoModelForMultipleChoice"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(iG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c($G,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.AutoModelForNextSentencePrediction"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(DG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VG,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(XG,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(zG,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(QG,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WG,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s2,"id","transformers.AutoModelForTokenClassification"),c(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s2,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(HG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(KG,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(eO,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rO,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tO,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(aO,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nO,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sO,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iO,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(cO,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(fO,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(mO,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(hO,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(pO,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uO,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(vO,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(FO,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(EO,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(CO,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(AO,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(yO,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LO,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(xO,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForQuestionAnswering"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c($O,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kO,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SO,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RO,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17141/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17141/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WO,"href","/docs/transformers/pr_17141/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17141/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17141/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17141/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17141/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17141/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17141/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17141/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17141/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hV,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_V,"href","/docs/transformers/pr_17141/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(bV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qv,"id","transformers.AutoModelForImageClassification"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(MV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitForImageClassification"),c(AV,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yV,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(LV,"href","/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTForImageClassification"),c(xV,"href","/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($V,"href","/docs/transformers/pr_17141/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(kV,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(SV,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(RV,"href","/docs/transformers/pr_17141/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BV,"href","/docs/transformers/pr_17141/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PV,"href","/docs/transformers/pr_17141/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(IV,"href","/docs/transformers/pr_17141/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qV,"href","/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NV,"href","/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinForImageClassification"),c(jV,"href","/docs/transformers/pr_17141/en/model_doc/van#transformers.VanForImageClassification"),c(DV,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForVision2Seq"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(GV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForAudioClassification"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(zV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForAudioFrameClassification"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(rX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sX,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lX,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iX,"href","/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForCTC"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(dX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gX,"href","/docs/transformers/pr_17141/en/model_doc/hubert#transformers.HubertForCTC"),c(hX,"href","/docs/transformers/pr_17141/en/model_doc/sew#transformers.SEWForCTC"),c(pX,"href","/docs/transformers/pr_17141/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uX,"href","/docs/transformers/pr_17141/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(_X,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(bX,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(vX,"href","/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17141/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(CX,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForAudioXVector"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(wX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xX,"href","/docs/transformers/pr_17141/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($X,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kX,"href","/docs/transformers/pr_17141/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForMaskedImageModeling"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(SX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PX,"href","/docs/transformers/pr_17141/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(IX,"href","/docs/transformers/pr_17141/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(qX,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForObjectDetection"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(NX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrForObjectDetection"),c(OX,"href","/docs/transformers/pr_17141/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.AutoModelForImageSegmentation"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(VX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17141/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForSemanticSegmentation"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YX,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(KX,"href","/docs/transformers/pr_17141/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(ZX,"href","/docs/transformers/pr_17141/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForInstanceSegmentation"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(ez,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17141/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.TFAutoModel"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(az,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertModel"),c(iz,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.TFBartModel"),c(dz,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertModel"),c(cz,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(fz,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(mz,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertModel"),c(gz,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.TFCLIPModel"),c(hz,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertModel"),c(pz,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.TFConvNextModel"),c(uz,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLModel"),c(_z,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(bz,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaModel"),c(vz,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Fz,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Tz,"href","/docs/transformers/pr_17141/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Mz,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraModel"),c(Ez,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Cz,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelModel"),c(wz,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Az,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2Model"),c(yz,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJModel"),c(Lz,"href","/docs/transformers/pr_17141/en/model_doc/hubert#transformers.TFHubertModel"),c(xz,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c($z,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.TFLEDModel"),c(kz,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerModel"),c(Sz,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Rz,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.TFMarianModel"),c(Bz,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.TFMBartModel"),c(Pz,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Iz,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetModel"),c(qz,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.TFMT5Model"),c(Nz,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(jz,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Dz,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertModel"),c(Gz,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaModel"),c(Oz,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Vz,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Xz,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.TFT5Model"),c(zz,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasModel"),c(Qz,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Wz,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.TFViTModel"),c(Hz,"href","/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Uz,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Jz,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMModel"),c(Yz,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Kz,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.TFAutoModelForPreTraining"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(tQ,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aQ,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForPreTraining"),c(nQ,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(dQ,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(fQ,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mQ,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17141/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(hQ,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(pQ,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uQ,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(TQ,"href","/docs/transformers/pr_17141/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(MQ,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.TFAutoModelForCausalLM"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c($Q,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kQ,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SQ,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(RQ,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(PQ,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(IQ,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(qQ,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForImageClassification"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17141/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(XQ,"href","/docs/transformers/pr_17141/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(zQ,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForMaskedLM"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(eW,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(oW,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rW,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(tW,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aW,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(nW,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sW,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(lW,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(iW,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dW,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(cW,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fW,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(mW,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gW,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hW,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uW,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vW,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(MW,"href","/docs/transformers/pr_17141/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(EW,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.TFMarianMTModel"),c(CW,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForSequenceClassification"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(LW,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17141/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17141/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17141/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForMultipleChoice"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(tH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(TH,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(EH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(yH,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17141/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.TFAutoModelForTokenClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(SH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(IH,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(qH,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(NH,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(jH,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(DH,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(GH,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(VH,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(zH,"href","/docs/transformers/pr_17141/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(QH,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(WH,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(HH,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(UH,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(JH,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(YH,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(KH,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(eU,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForQuestionAnswering"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(oU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17141/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17141/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_17141/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17141/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17141/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(gU,"href","/docs/transformers/pr_17141/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17141/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17141/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17141/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17141/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17141/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(MU,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17141/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.TFAutoModelForVision2Seq"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(LU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_17141/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModel"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(SU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertModel"),c(IU,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartModel"),c(qU,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.FlaxBeitModel"),c(NU,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertModel"),c(jU,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(DU,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(GU,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(OU,"href","/docs/transformers/pr_17141/en/model_doc/clip#transformers.FlaxCLIPModel"),c(VU,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(XU,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraModel"),c(zU,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(QU,"href","/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(WU,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(HU,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.FlaxMarianModel"),c(UU,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartModel"),c(JU,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.FlaxMT5Model"),c(YU,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(KU,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(ZU,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(eJ,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.FlaxT5Model"),c(oJ,"href","/docs/transformers/pr_17141/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(rJ,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.FlaxViTModel"),c(tJ,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(aJ,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(nJ,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForCausalLM"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(cJ,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(fJ,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mJ,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(gJ,"href","/docs/transformers/pr_17141/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(hJ,"href","/docs/transformers/pr_17141/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(pJ,"href","/docs/transformers/pr_17141/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(uJ,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(_J,"href","/docs/transformers/pr_17141/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForPreTraining"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(bJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TJ,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(MJ,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(CJ,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(wJ,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(AJ,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xJ,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($J,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17141/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(SJ,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModelForMaskedLM"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(GJ,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(OJ,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(XJ,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UJ,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17141/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17141/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(ZJ,"href","/docs/transformers/pr_17141/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(eY,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oY,"href","/docs/transformers/pr_17141/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17141/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_17141/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(_Y,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17141/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17141/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForTokenClassification"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c($Y,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RY,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(BY,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(IY,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(qY,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(NY,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(jY,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(DY,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(GY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/pr_17141/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17141/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(WY,"href","/docs/transformers/pr_17141/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(HY,"href","/docs/transformers/pr_17141/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(UY,"href","/docs/transformers/pr_17141/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(JY,"href","/docs/transformers/pr_17141/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(YY,"href","/docs/transformers/pr_17141/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(KY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/pr_17141/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mw,"id","transformers.FlaxAutoModelForImageClassification"),c(Mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mw,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(rK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17141/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(sK,"href","/docs/transformers/pr_17141/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForVision2Seq"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(lK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_17141/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_17141/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,U6),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,J6),e(Xe,yn),e(Xe,Ln),e(Ln,Y6),e(Xe,fi),e(Xe,xn),e(xn,K6),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,u$),e(Ae,gi),e(gi,_$),e(Ae,b$),b(f,Eo,_),b(f,Ea,_),e(Ea,v$),e(Ea,pf),e(pf,F$),e(Ea,iDe),b(f,YPe,_),b(f,hi,_),e(hi,uf),e(uf,aee),M(Z6,aee,null),e(hi,dDe),e(hi,nee),e(nee,cDe),b(f,KPe,_),b(f,$n,_),e($n,fDe),e($n,see),e(see,mDe),e($n,gDe),e($n,lee),e(lee,hDe),e($n,pDe),b(f,ZPe,_),M(e0,f,_),b(f,eIe,_),b(f,T$,_),e(T$,uDe),b(f,oIe,_),M(_f,f,_),b(f,rIe,_),b(f,pi,_),e(pi,bf),e(bf,iee),M(o0,iee,null),e(pi,_De),e(pi,dee),e(dee,bDe),b(f,tIe,_),b(f,Co,_),M(r0,Co,null),e(Co,vDe),e(Co,t0),e(t0,FDe),e(t0,M$),e(M$,TDe),e(t0,MDe),e(Co,EDe),e(Co,a0),e(a0,CDe),e(a0,cee),e(cee,wDe),e(a0,ADe),e(Co,yDe),e(Co,Er),M(n0,Er,null),e(Er,LDe),e(Er,fee),e(fee,xDe),e(Er,$De),e(Er,ui),e(ui,kDe),e(ui,mee),e(mee,SDe),e(ui,RDe),e(ui,gee),e(gee,BDe),e(ui,PDe),e(Er,IDe),e(Er,A),e(A,vf),e(vf,hee),e(hee,qDe),e(vf,NDe),e(vf,E$),e(E$,jDe),e(vf,DDe),e(A,GDe),e(A,Ff),e(Ff,pee),e(pee,ODe),e(Ff,VDe),e(Ff,C$),e(C$,XDe),e(Ff,zDe),e(A,QDe),e(A,Tf),e(Tf,uee),e(uee,WDe),e(Tf,HDe),e(Tf,w$),e(w$,UDe),e(Tf,JDe),e(A,YDe),e(A,Mf),e(Mf,_ee),e(_ee,KDe),e(Mf,ZDe),e(Mf,A$),e(A$,eGe),e(Mf,oGe),e(A,rGe),e(A,Ef),e(Ef,bee),e(bee,tGe),e(Ef,aGe),e(Ef,y$),e(y$,nGe),e(Ef,sGe),e(A,lGe),e(A,Cf),e(Cf,vee),e(vee,iGe),e(Cf,dGe),e(Cf,L$),e(L$,cGe),e(Cf,fGe),e(A,mGe),e(A,wf),e(wf,Fee),e(Fee,gGe),e(wf,hGe),e(wf,x$),e(x$,pGe),e(wf,uGe),e(A,_Ge),e(A,Af),e(Af,Tee),e(Tee,bGe),e(Af,vGe),e(Af,$$),e($$,FGe),e(Af,TGe),e(A,MGe),e(A,yf),e(yf,Mee),e(Mee,EGe),e(yf,CGe),e(yf,k$),e(k$,wGe),e(yf,AGe),e(A,yGe),e(A,Lf),e(Lf,Eee),e(Eee,LGe),e(Lf,xGe),e(Lf,S$),e(S$,$Ge),e(Lf,kGe),e(A,SGe),e(A,xf),e(xf,Cee),e(Cee,RGe),e(xf,BGe),e(xf,R$),e(R$,PGe),e(xf,IGe),e(A,qGe),e(A,$f),e($f,wee),e(wee,NGe),e($f,jGe),e($f,B$),e(B$,DGe),e($f,GGe),e(A,OGe),e(A,kf),e(kf,Aee),e(Aee,VGe),e(kf,XGe),e(kf,P$),e(P$,zGe),e(kf,QGe),e(A,WGe),e(A,Sf),e(Sf,yee),e(yee,HGe),e(Sf,UGe),e(Sf,I$),e(I$,JGe),e(Sf,YGe),e(A,KGe),e(A,Rf),e(Rf,Lee),e(Lee,ZGe),e(Rf,eOe),e(Rf,q$),e(q$,oOe),e(Rf,rOe),e(A,tOe),e(A,Bf),e(Bf,xee),e(xee,aOe),e(Bf,nOe),e(Bf,N$),e(N$,sOe),e(Bf,lOe),e(A,iOe),e(A,Pf),e(Pf,$ee),e($ee,dOe),e(Pf,cOe),e(Pf,j$),e(j$,fOe),e(Pf,mOe),e(A,gOe),e(A,If),e(If,kee),e(kee,hOe),e(If,pOe),e(If,D$),e(D$,uOe),e(If,_Oe),e(A,bOe),e(A,qf),e(qf,See),e(See,vOe),e(qf,FOe),e(qf,G$),e(G$,TOe),e(qf,MOe),e(A,EOe),e(A,Nf),e(Nf,Ree),e(Ree,COe),e(Nf,wOe),e(Nf,O$),e(O$,AOe),e(Nf,yOe),e(A,LOe),e(A,jf),e(jf,Bee),e(Bee,xOe),e(jf,$Oe),e(jf,V$),e(V$,kOe),e(jf,SOe),e(A,ROe),e(A,Df),e(Df,Pee),e(Pee,BOe),e(Df,POe),e(Df,X$),e(X$,IOe),e(Df,qOe),e(A,NOe),e(A,Gf),e(Gf,Iee),e(Iee,jOe),e(Gf,DOe),e(Gf,z$),e(z$,GOe),e(Gf,OOe),e(A,VOe),e(A,Of),e(Of,qee),e(qee,XOe),e(Of,zOe),e(Of,Q$),e(Q$,QOe),e(Of,WOe),e(A,HOe),e(A,Vf),e(Vf,Nee),e(Nee,UOe),e(Vf,JOe),e(Vf,W$),e(W$,YOe),e(Vf,KOe),e(A,ZOe),e(A,Xf),e(Xf,jee),e(jee,eVe),e(Xf,oVe),e(Xf,H$),e(H$,rVe),e(Xf,tVe),e(A,aVe),e(A,zf),e(zf,Dee),e(Dee,nVe),e(zf,sVe),e(zf,U$),e(U$,lVe),e(zf,iVe),e(A,dVe),e(A,Qf),e(Qf,Gee),e(Gee,cVe),e(Qf,fVe),e(Qf,J$),e(J$,mVe),e(Qf,gVe),e(A,hVe),e(A,Wf),e(Wf,Oee),e(Oee,pVe),e(Wf,uVe),e(Wf,Y$),e(Y$,_Ve),e(Wf,bVe),e(A,vVe),e(A,Hf),e(Hf,Vee),e(Vee,FVe),e(Hf,TVe),e(Hf,K$),e(K$,MVe),e(Hf,EVe),e(A,CVe),e(A,Uf),e(Uf,Xee),e(Xee,wVe),e(Uf,AVe),e(Uf,Z$),e(Z$,yVe),e(Uf,LVe),e(A,xVe),e(A,Jf),e(Jf,zee),e(zee,$Ve),e(Jf,kVe),e(Jf,ek),e(ek,SVe),e(Jf,RVe),e(A,BVe),e(A,Yf),e(Yf,Qee),e(Qee,PVe),e(Yf,IVe),e(Yf,ok),e(ok,qVe),e(Yf,NVe),e(A,jVe),e(A,Kf),e(Kf,Wee),e(Wee,DVe),e(Kf,GVe),e(Kf,rk),e(rk,OVe),e(Kf,VVe),e(A,XVe),e(A,Zf),e(Zf,Hee),e(Hee,zVe),e(Zf,QVe),e(Zf,tk),e(tk,WVe),e(Zf,HVe),e(A,UVe),e(A,em),e(em,Uee),e(Uee,JVe),e(em,YVe),e(em,ak),e(ak,KVe),e(em,ZVe),e(A,eXe),e(A,om),e(om,Jee),e(Jee,oXe),e(om,rXe),e(om,nk),e(nk,tXe),e(om,aXe),e(A,nXe),e(A,rm),e(rm,Yee),e(Yee,sXe),e(rm,lXe),e(rm,sk),e(sk,iXe),e(rm,dXe),e(A,cXe),e(A,tm),e(tm,Kee),e(Kee,fXe),e(tm,mXe),e(tm,lk),e(lk,gXe),e(tm,hXe),e(A,pXe),e(A,am),e(am,Zee),e(Zee,uXe),e(am,_Xe),e(am,ik),e(ik,bXe),e(am,vXe),e(A,FXe),e(A,nm),e(nm,eoe),e(eoe,TXe),e(nm,MXe),e(nm,dk),e(dk,EXe),e(nm,CXe),e(A,wXe),e(A,sm),e(sm,ooe),e(ooe,AXe),e(sm,yXe),e(sm,ck),e(ck,LXe),e(sm,xXe),e(A,$Xe),e(A,lm),e(lm,roe),e(roe,kXe),e(lm,SXe),e(lm,fk),e(fk,RXe),e(lm,BXe),e(A,PXe),e(A,im),e(im,toe),e(toe,IXe),e(im,qXe),e(im,mk),e(mk,NXe),e(im,jXe),e(A,DXe),e(A,dm),e(dm,aoe),e(aoe,GXe),e(dm,OXe),e(dm,gk),e(gk,VXe),e(dm,XXe),e(A,zXe),e(A,cm),e(cm,noe),e(noe,QXe),e(cm,WXe),e(cm,hk),e(hk,HXe),e(cm,UXe),e(A,JXe),e(A,fm),e(fm,soe),e(soe,YXe),e(fm,KXe),e(fm,pk),e(pk,ZXe),e(fm,eze),e(A,oze),e(A,mm),e(mm,loe),e(loe,rze),e(mm,tze),e(mm,uk),e(uk,aze),e(mm,nze),e(A,sze),e(A,gm),e(gm,ioe),e(ioe,lze),e(gm,ize),e(gm,_k),e(_k,dze),e(gm,cze),e(A,fze),e(A,hm),e(hm,doe),e(doe,mze),e(hm,gze),e(hm,bk),e(bk,hze),e(hm,pze),e(A,uze),e(A,pm),e(pm,coe),e(coe,_ze),e(pm,bze),e(pm,vk),e(vk,vze),e(pm,Fze),e(A,Tze),e(A,um),e(um,foe),e(foe,Mze),e(um,Eze),e(um,Fk),e(Fk,Cze),e(um,wze),e(A,Aze),e(A,_m),e(_m,moe),e(moe,yze),e(_m,Lze),e(_m,Tk),e(Tk,xze),e(_m,$ze),e(A,kze),e(A,bm),e(bm,goe),e(goe,Sze),e(bm,Rze),e(bm,Mk),e(Mk,Bze),e(bm,Pze),e(A,Ize),e(A,vm),e(vm,hoe),e(hoe,qze),e(vm,Nze),e(vm,Ek),e(Ek,jze),e(vm,Dze),e(A,Gze),e(A,Fm),e(Fm,poe),e(poe,Oze),e(Fm,Vze),e(Fm,Ck),e(Ck,Xze),e(Fm,zze),e(A,Qze),e(A,Tm),e(Tm,uoe),e(uoe,Wze),e(Tm,Hze),e(Tm,wk),e(wk,Uze),e(Tm,Jze),e(A,Yze),e(A,Mm),e(Mm,_oe),e(_oe,Kze),e(Mm,Zze),e(Mm,Ak),e(Ak,eQe),e(Mm,oQe),e(A,rQe),e(A,Em),e(Em,boe),e(boe,tQe),e(Em,aQe),e(Em,yk),e(yk,nQe),e(Em,sQe),e(A,lQe),e(A,Cm),e(Cm,voe),e(voe,iQe),e(Cm,dQe),e(Cm,Lk),e(Lk,cQe),e(Cm,fQe),e(A,mQe),e(A,wm),e(wm,Foe),e(Foe,gQe),e(wm,hQe),e(wm,xk),e(xk,pQe),e(wm,uQe),e(A,_Qe),e(A,Am),e(Am,Toe),e(Toe,bQe),e(Am,vQe),e(Am,$k),e($k,FQe),e(Am,TQe),e(A,MQe),e(A,ym),e(ym,Moe),e(Moe,EQe),e(ym,CQe),e(ym,kk),e(kk,wQe),e(ym,AQe),e(A,yQe),e(A,Lm),e(Lm,Eoe),e(Eoe,LQe),e(Lm,xQe),e(Lm,Sk),e(Sk,$Qe),e(Lm,kQe),e(A,SQe),e(A,xm),e(xm,Coe),e(Coe,RQe),e(xm,BQe),e(xm,Rk),e(Rk,PQe),e(xm,IQe),e(A,qQe),e(A,$m),e($m,woe),e(woe,NQe),e($m,jQe),e($m,Bk),e(Bk,DQe),e($m,GQe),e(A,OQe),e(A,km),e(km,Aoe),e(Aoe,VQe),e(km,XQe),e(km,Pk),e(Pk,zQe),e(km,QQe),e(A,WQe),e(A,Sm),e(Sm,yoe),e(yoe,HQe),e(Sm,UQe),e(Sm,Ik),e(Ik,JQe),e(Sm,YQe),e(A,KQe),e(A,Rm),e(Rm,Loe),e(Loe,ZQe),e(Rm,eWe),e(Rm,qk),e(qk,oWe),e(Rm,rWe),e(A,tWe),e(A,Bm),e(Bm,xoe),e(xoe,aWe),e(Bm,nWe),e(Bm,Nk),e(Nk,sWe),e(Bm,lWe),e(A,iWe),e(A,Pm),e(Pm,$oe),e($oe,dWe),e(Pm,cWe),e(Pm,jk),e(jk,fWe),e(Pm,mWe),e(A,gWe),e(A,Im),e(Im,koe),e(koe,hWe),e(Im,pWe),e(Im,Dk),e(Dk,uWe),e(Im,_We),e(A,bWe),e(A,qm),e(qm,Soe),e(Soe,vWe),e(qm,FWe),e(qm,Gk),e(Gk,TWe),e(qm,MWe),e(A,EWe),e(A,Nm),e(Nm,Roe),e(Roe,CWe),e(Nm,wWe),e(Nm,Ok),e(Ok,AWe),e(Nm,yWe),e(A,LWe),e(A,jm),e(jm,Boe),e(Boe,xWe),e(jm,$We),e(jm,Vk),e(Vk,kWe),e(jm,SWe),e(A,RWe),e(A,Dm),e(Dm,Poe),e(Poe,BWe),e(Dm,PWe),e(Dm,Xk),e(Xk,IWe),e(Dm,qWe),e(A,NWe),e(A,Gm),e(Gm,Ioe),e(Ioe,jWe),e(Gm,DWe),e(Gm,zk),e(zk,GWe),e(Gm,OWe),e(A,VWe),e(A,Om),e(Om,qoe),e(qoe,XWe),e(Om,zWe),e(Om,Qk),e(Qk,QWe),e(Om,WWe),e(A,HWe),e(A,Vm),e(Vm,Noe),e(Noe,UWe),e(Vm,JWe),e(Vm,Wk),e(Wk,YWe),e(Vm,KWe),e(A,ZWe),e(A,Xm),e(Xm,joe),e(joe,eHe),e(Xm,oHe),e(Xm,Hk),e(Hk,rHe),e(Xm,tHe),e(A,aHe),e(A,zm),e(zm,Doe),e(Doe,nHe),e(zm,sHe),e(zm,Uk),e(Uk,lHe),e(zm,iHe),e(A,dHe),e(A,Qm),e(Qm,Goe),e(Goe,cHe),e(Qm,fHe),e(Qm,Jk),e(Jk,mHe),e(Qm,gHe),e(A,hHe),e(A,Wm),e(Wm,Ooe),e(Ooe,pHe),e(Wm,uHe),e(Wm,Yk),e(Yk,_He),e(Wm,bHe),e(A,vHe),e(A,Hm),e(Hm,Voe),e(Voe,FHe),e(Hm,THe),e(Hm,Kk),e(Kk,MHe),e(Hm,EHe),e(A,CHe),e(A,Um),e(Um,Xoe),e(Xoe,wHe),e(Um,AHe),e(Um,Zk),e(Zk,yHe),e(Um,LHe),e(A,xHe),e(A,Jm),e(Jm,zoe),e(zoe,$He),e(Jm,kHe),e(Jm,eS),e(eS,SHe),e(Jm,RHe),e(A,BHe),e(A,Ym),e(Ym,Qoe),e(Qoe,PHe),e(Ym,IHe),e(Ym,oS),e(oS,qHe),e(Ym,NHe),e(A,jHe),e(A,Km),e(Km,Woe),e(Woe,DHe),e(Km,GHe),e(Km,rS),e(rS,OHe),e(Km,VHe),e(A,XHe),e(A,Zm),e(Zm,Hoe),e(Hoe,zHe),e(Zm,QHe),e(Zm,tS),e(tS,WHe),e(Zm,HHe),e(A,UHe),e(A,eg),e(eg,Uoe),e(Uoe,JHe),e(eg,YHe),e(eg,aS),e(aS,KHe),e(eg,ZHe),e(A,eUe),e(A,og),e(og,Joe),e(Joe,oUe),e(og,rUe),e(og,nS),e(nS,tUe),e(og,aUe),e(A,nUe),e(A,rg),e(rg,Yoe),e(Yoe,sUe),e(rg,lUe),e(rg,sS),e(sS,iUe),e(rg,dUe),e(A,cUe),e(A,tg),e(tg,Koe),e(Koe,fUe),e(tg,mUe),e(tg,lS),e(lS,gUe),e(tg,hUe),e(A,pUe),e(A,ag),e(ag,Zoe),e(Zoe,uUe),e(ag,_Ue),e(ag,iS),e(iS,bUe),e(ag,vUe),e(A,FUe),e(A,ng),e(ng,ere),e(ere,TUe),e(ng,MUe),e(ng,dS),e(dS,EUe),e(ng,CUe),e(A,wUe),e(A,sg),e(sg,ore),e(ore,AUe),e(sg,yUe),e(sg,cS),e(cS,LUe),e(sg,xUe),e(A,$Ue),e(A,lg),e(lg,rre),e(rre,kUe),e(lg,SUe),e(lg,fS),e(fS,RUe),e(lg,BUe),e(A,PUe),e(A,ig),e(ig,tre),e(tre,IUe),e(ig,qUe),e(ig,mS),e(mS,NUe),e(ig,jUe),e(A,DUe),e(A,dg),e(dg,are),e(are,GUe),e(dg,OUe),e(dg,gS),e(gS,VUe),e(dg,XUe),e(A,zUe),e(A,cg),e(cg,nre),e(nre,QUe),e(cg,WUe),e(cg,hS),e(hS,HUe),e(cg,UUe),e(A,JUe),e(A,fg),e(fg,sre),e(sre,YUe),e(fg,KUe),e(fg,pS),e(pS,ZUe),e(fg,eJe),e(A,oJe),e(A,mg),e(mg,lre),e(lre,rJe),e(mg,tJe),e(mg,uS),e(uS,aJe),e(mg,nJe),e(A,sJe),e(A,gg),e(gg,ire),e(ire,lJe),e(gg,iJe),e(gg,_S),e(_S,dJe),e(gg,cJe),e(A,fJe),e(A,hg),e(hg,dre),e(dre,mJe),e(hg,gJe),e(hg,bS),e(bS,hJe),e(hg,pJe),e(A,uJe),e(A,pg),e(pg,cre),e(cre,_Je),e(pg,bJe),e(pg,vS),e(vS,vJe),e(pg,FJe),e(A,TJe),e(A,ug),e(ug,fre),e(fre,MJe),e(ug,EJe),e(ug,FS),e(FS,CJe),e(ug,wJe),e(Er,AJe),M(_g,Er,null),e(Co,yJe),e(Co,bg),M(s0,bg,null),e(bg,LJe),e(bg,mre),e(mre,xJe),b(f,aIe,_),b(f,_i,_),e(_i,vg),e(vg,gre),M(l0,gre,null),e(_i,$Je),e(_i,hre),e(hre,kJe),b(f,nIe,_),b(f,wo,_),M(i0,wo,null),e(wo,SJe),e(wo,d0),e(d0,RJe),e(d0,TS),e(TS,BJe),e(d0,PJe),e(wo,IJe),e(wo,c0),e(c0,qJe),e(c0,pre),e(pre,NJe),e(c0,jJe),e(wo,DJe),e(wo,Cr),M(f0,Cr,null),e(Cr,GJe),e(Cr,ure),e(ure,OJe),e(Cr,VJe),e(Cr,Ca),e(Ca,XJe),e(Ca,_re),e(_re,zJe),e(Ca,QJe),e(Ca,bre),e(bre,WJe),e(Ca,HJe),e(Ca,vre),e(vre,UJe),e(Ca,JJe),e(Cr,YJe),e(Cr,k),e(k,kn),e(kn,Fre),e(Fre,KJe),e(kn,ZJe),e(kn,MS),e(MS,eYe),e(kn,oYe),e(kn,ES),e(ES,rYe),e(kn,tYe),e(k,aYe),e(k,Sn),e(Sn,Tre),e(Tre,nYe),e(Sn,sYe),e(Sn,CS),e(CS,lYe),e(Sn,iYe),e(Sn,wS),e(wS,dYe),e(Sn,cYe),e(k,fYe),e(k,Rn),e(Rn,Mre),e(Mre,mYe),e(Rn,gYe),e(Rn,AS),e(AS,hYe),e(Rn,pYe),e(Rn,yS),e(yS,uYe),e(Rn,_Ye),e(k,bYe),e(k,Fg),e(Fg,Ere),e(Ere,vYe),e(Fg,FYe),e(Fg,LS),e(LS,TYe),e(Fg,MYe),e(k,EYe),e(k,Bn),e(Bn,Cre),e(Cre,CYe),e(Bn,wYe),e(Bn,xS),e(xS,AYe),e(Bn,yYe),e(Bn,$S),e($S,LYe),e(Bn,xYe),e(k,$Ye),e(k,Tg),e(Tg,wre),e(wre,kYe),e(Tg,SYe),e(Tg,kS),e(kS,RYe),e(Tg,BYe),e(k,PYe),e(k,Mg),e(Mg,Are),e(Are,IYe),e(Mg,qYe),e(Mg,SS),e(SS,NYe),e(Mg,jYe),e(k,DYe),e(k,Eg),e(Eg,yre),e(yre,GYe),e(Eg,OYe),e(Eg,RS),e(RS,VYe),e(Eg,XYe),e(k,zYe),e(k,Pn),e(Pn,Lre),e(Lre,QYe),e(Pn,WYe),e(Pn,BS),e(BS,HYe),e(Pn,UYe),e(Pn,PS),e(PS,JYe),e(Pn,YYe),e(k,KYe),e(k,In),e(In,xre),e(xre,ZYe),e(In,eKe),e(In,IS),e(IS,oKe),e(In,rKe),e(In,qS),e(qS,tKe),e(In,aKe),e(k,nKe),e(k,qn),e(qn,$re),e($re,sKe),e(qn,lKe),e(qn,NS),e(NS,iKe),e(qn,dKe),e(qn,jS),e(jS,cKe),e(qn,fKe),e(k,mKe),e(k,Cg),e(Cg,kre),e(kre,gKe),e(Cg,hKe),e(Cg,DS),e(DS,pKe),e(Cg,uKe),e(k,_Ke),e(k,wg),e(wg,Sre),e(Sre,bKe),e(wg,vKe),e(wg,GS),e(GS,FKe),e(wg,TKe),e(k,MKe),e(k,Nn),e(Nn,Rre),e(Rre,EKe),e(Nn,CKe),e(Nn,OS),e(OS,wKe),e(Nn,AKe),e(Nn,VS),e(VS,yKe),e(Nn,LKe),e(k,xKe),e(k,Ag),e(Ag,Bre),e(Bre,$Ke),e(Ag,kKe),e(Ag,XS),e(XS,SKe),e(Ag,RKe),e(k,BKe),e(k,jn),e(jn,Pre),e(Pre,PKe),e(jn,IKe),e(jn,zS),e(zS,qKe),e(jn,NKe),e(jn,QS),e(QS,jKe),e(jn,DKe),e(k,GKe),e(k,Dn),e(Dn,Ire),e(Ire,OKe),e(Dn,VKe),e(Dn,WS),e(WS,XKe),e(Dn,zKe),e(Dn,HS),e(HS,QKe),e(Dn,WKe),e(k,HKe),e(k,Gn),e(Gn,qre),e(qre,UKe),e(Gn,JKe),e(Gn,US),e(US,YKe),e(Gn,KKe),e(Gn,JS),e(JS,ZKe),e(Gn,eZe),e(k,oZe),e(k,yg),e(yg,Nre),e(Nre,rZe),e(yg,tZe),e(yg,YS),e(YS,aZe),e(yg,nZe),e(k,sZe),e(k,On),e(On,jre),e(jre,lZe),e(On,iZe),e(On,KS),e(KS,dZe),e(On,cZe),e(On,ZS),e(ZS,fZe),e(On,mZe),e(k,gZe),e(k,Vn),e(Vn,Dre),e(Dre,hZe),e(Vn,pZe),e(Vn,eR),e(eR,uZe),e(Vn,_Ze),e(Vn,oR),e(oR,bZe),e(Vn,vZe),e(k,FZe),e(k,Xn),e(Xn,Gre),e(Gre,TZe),e(Xn,MZe),e(Xn,rR),e(rR,EZe),e(Xn,CZe),e(Xn,tR),e(tR,wZe),e(Xn,AZe),e(k,yZe),e(k,zn),e(zn,Ore),e(Ore,LZe),e(zn,xZe),e(zn,aR),e(aR,$Ze),e(zn,kZe),e(zn,nR),e(nR,SZe),e(zn,RZe),e(k,BZe),e(k,Qn),e(Qn,Vre),e(Vre,PZe),e(Qn,IZe),e(Qn,sR),e(sR,qZe),e(Qn,NZe),e(Qn,lR),e(lR,jZe),e(Qn,DZe),e(k,GZe),e(k,Wn),e(Wn,Xre),e(Xre,OZe),e(Wn,VZe),e(Wn,iR),e(iR,XZe),e(Wn,zZe),e(Wn,dR),e(dR,QZe),e(Wn,WZe),e(k,HZe),e(k,Lg),e(Lg,zre),e(zre,UZe),e(Lg,JZe),e(Lg,cR),e(cR,YZe),e(Lg,KZe),e(k,ZZe),e(k,Hn),e(Hn,Qre),e(Qre,eeo),e(Hn,oeo),e(Hn,fR),e(fR,reo),e(Hn,teo),e(Hn,mR),e(mR,aeo),e(Hn,neo),e(k,seo),e(k,xg),e(xg,Wre),e(Wre,leo),e(xg,ieo),e(xg,gR),e(gR,deo),e(xg,ceo),e(k,feo),e(k,Un),e(Un,Hre),e(Hre,meo),e(Un,geo),e(Un,hR),e(hR,heo),e(Un,peo),e(Un,pR),e(pR,ueo),e(Un,_eo),e(k,beo),e(k,Jn),e(Jn,Ure),e(Ure,veo),e(Jn,Feo),e(Jn,uR),e(uR,Teo),e(Jn,Meo),e(Jn,_R),e(_R,Eeo),e(Jn,Ceo),e(k,weo),e(k,Yn),e(Yn,Jre),e(Jre,Aeo),e(Yn,yeo),e(Yn,bR),e(bR,Leo),e(Yn,xeo),e(Yn,vR),e(vR,$eo),e(Yn,keo),e(k,Seo),e(k,Kn),e(Kn,Yre),e(Yre,Reo),e(Kn,Beo),e(Kn,FR),e(FR,Peo),e(Kn,Ieo),e(Kn,TR),e(TR,qeo),e(Kn,Neo),e(k,jeo),e(k,Zn),e(Zn,Kre),e(Kre,Deo),e(Zn,Geo),e(Zn,MR),e(MR,Oeo),e(Zn,Veo),e(Zn,ER),e(ER,Xeo),e(Zn,zeo),e(k,Qeo),e(k,$g),e($g,Zre),e(Zre,Weo),e($g,Heo),e($g,CR),e(CR,Ueo),e($g,Jeo),e(k,Yeo),e(k,es),e(es,ete),e(ete,Keo),e(es,Zeo),e(es,wR),e(wR,eoo),e(es,ooo),e(es,AR),e(AR,roo),e(es,too),e(k,aoo),e(k,os),e(os,ote),e(ote,noo),e(os,soo),e(os,yR),e(yR,loo),e(os,ioo),e(os,LR),e(LR,doo),e(os,coo),e(k,foo),e(k,rs),e(rs,rte),e(rte,moo),e(rs,goo),e(rs,xR),e(xR,hoo),e(rs,poo),e(rs,$R),e($R,uoo),e(rs,_oo),e(k,boo),e(k,ts),e(ts,tte),e(tte,voo),e(ts,Foo),e(ts,kR),e(kR,Too),e(ts,Moo),e(ts,SR),e(SR,Eoo),e(ts,Coo),e(k,woo),e(k,as),e(as,ate),e(ate,Aoo),e(as,yoo),e(as,RR),e(RR,Loo),e(as,xoo),e(as,BR),e(BR,$oo),e(as,koo),e(k,Soo),e(k,ns),e(ns,nte),e(nte,Roo),e(ns,Boo),e(ns,PR),e(PR,Poo),e(ns,Ioo),e(ns,IR),e(IR,qoo),e(ns,Noo),e(k,joo),e(k,kg),e(kg,ste),e(ste,Doo),e(kg,Goo),e(kg,qR),e(qR,Ooo),e(kg,Voo),e(k,Xoo),e(k,ss),e(ss,lte),e(lte,zoo),e(ss,Qoo),e(ss,NR),e(NR,Woo),e(ss,Hoo),e(ss,jR),e(jR,Uoo),e(ss,Joo),e(k,Yoo),e(k,Sg),e(Sg,ite),e(ite,Koo),e(Sg,Zoo),e(Sg,DR),e(DR,ero),e(Sg,oro),e(k,rro),e(k,Rg),e(Rg,dte),e(dte,tro),e(Rg,aro),e(Rg,GR),e(GR,nro),e(Rg,sro),e(k,lro),e(k,ls),e(ls,cte),e(cte,iro),e(ls,dro),e(ls,OR),e(OR,cro),e(ls,fro),e(ls,VR),e(VR,mro),e(ls,gro),e(k,hro),e(k,is),e(is,fte),e(fte,pro),e(is,uro),e(is,XR),e(XR,_ro),e(is,bro),e(is,zR),e(zR,vro),e(is,Fro),e(k,Tro),e(k,ds),e(ds,mte),e(mte,Mro),e(ds,Ero),e(ds,QR),e(QR,Cro),e(ds,wro),e(ds,WR),e(WR,Aro),e(ds,yro),e(k,Lro),e(k,Bg),e(Bg,gte),e(gte,xro),e(Bg,$ro),e(Bg,HR),e(HR,kro),e(Bg,Sro),e(k,Rro),e(k,cs),e(cs,hte),e(hte,Bro),e(cs,Pro),e(cs,UR),e(UR,Iro),e(cs,qro),e(cs,JR),e(JR,Nro),e(cs,jro),e(k,Dro),e(k,fs),e(fs,pte),e(pte,Gro),e(fs,Oro),e(fs,YR),e(YR,Vro),e(fs,Xro),e(fs,KR),e(KR,zro),e(fs,Qro),e(k,Wro),e(k,ms),e(ms,ute),e(ute,Hro),e(ms,Uro),e(ms,ZR),e(ZR,Jro),e(ms,Yro),e(ms,eB),e(eB,Kro),e(ms,Zro),e(k,eto),e(k,gs),e(gs,_te),e(_te,oto),e(gs,rto),e(gs,oB),e(oB,tto),e(gs,ato),e(gs,rB),e(rB,nto),e(gs,sto),e(k,lto),e(k,hs),e(hs,bte),e(bte,ito),e(hs,dto),e(hs,tB),e(tB,cto),e(hs,fto),e(hs,aB),e(aB,mto),e(hs,gto),e(k,hto),e(k,Pg),e(Pg,vte),e(vte,pto),e(Pg,uto),e(Pg,nB),e(nB,_to),e(Pg,bto),e(k,vto),e(k,ps),e(ps,Fte),e(Fte,Fto),e(ps,Tto),e(ps,sB),e(sB,Mto),e(ps,Eto),e(ps,lB),e(lB,Cto),e(ps,wto),e(k,Ato),e(k,Ig),e(Ig,Tte),e(Tte,yto),e(Ig,Lto),e(Ig,iB),e(iB,xto),e(Ig,$to),e(k,kto),e(k,qg),e(qg,Mte),e(Mte,Sto),e(qg,Rto),e(qg,dB),e(dB,Bto),e(qg,Pto),e(k,Ito),e(k,Ng),e(Ng,Ete),e(Ete,qto),e(Ng,Nto),e(Ng,cB),e(cB,jto),e(Ng,Dto),e(k,Gto),e(k,jg),e(jg,Cte),e(Cte,Oto),e(jg,Vto),e(jg,fB),e(fB,Xto),e(jg,zto),e(k,Qto),e(k,us),e(us,wte),e(wte,Wto),e(us,Hto),e(us,mB),e(mB,Uto),e(us,Jto),e(us,gB),e(gB,Yto),e(us,Kto),e(k,Zto),e(k,Dg),e(Dg,Ate),e(Ate,eao),e(Dg,oao),e(Dg,hB),e(hB,rao),e(Dg,tao),e(k,aao),e(k,_s),e(_s,yte),e(yte,nao),e(_s,sao),e(_s,pB),e(pB,lao),e(_s,iao),e(_s,uB),e(uB,dao),e(_s,cao),e(k,fao),e(k,bs),e(bs,Lte),e(Lte,mao),e(bs,gao),e(bs,_B),e(_B,hao),e(bs,pao),e(bs,bB),e(bB,uao),e(bs,_ao),e(k,bao),e(k,vs),e(vs,xte),e(xte,vao),e(vs,Fao),e(vs,vB),e(vB,Tao),e(vs,Mao),e(vs,FB),e(FB,Eao),e(vs,Cao),e(k,wao),e(k,Fs),e(Fs,$te),e($te,Aao),e(Fs,yao),e(Fs,TB),e(TB,Lao),e(Fs,xao),e(Fs,MB),e(MB,$ao),e(Fs,kao),e(k,Sao),e(k,Ts),e(Ts,kte),e(kte,Rao),e(Ts,Bao),e(Ts,EB),e(EB,Pao),e(Ts,Iao),e(Ts,CB),e(CB,qao),e(Ts,Nao),e(k,jao),e(k,Ms),e(Ms,Ste),e(Ste,Dao),e(Ms,Gao),e(Ms,wB),e(wB,Oao),e(Ms,Vao),e(Ms,AB),e(AB,Xao),e(Ms,zao),e(k,Qao),e(k,Gg),e(Gg,Rte),e(Rte,Wao),e(Gg,Hao),e(Gg,yB),e(yB,Uao),e(Gg,Jao),e(k,Yao),e(k,Og),e(Og,Bte),e(Bte,Kao),e(Og,Zao),e(Og,LB),e(LB,eno),e(Og,ono),e(k,rno),e(k,Es),e(Es,Pte),e(Pte,tno),e(Es,ano),e(Es,xB),e(xB,nno),e(Es,sno),e(Es,$B),e($B,lno),e(Es,ino),e(k,dno),e(k,Cs),e(Cs,Ite),e(Ite,cno),e(Cs,fno),e(Cs,kB),e(kB,mno),e(Cs,gno),e(Cs,SB),e(SB,hno),e(Cs,pno),e(k,uno),e(k,ws),e(ws,qte),e(qte,_no),e(ws,bno),e(ws,RB),e(RB,vno),e(ws,Fno),e(ws,BB),e(BB,Tno),e(ws,Mno),e(k,Eno),e(k,Vg),e(Vg,Nte),e(Nte,Cno),e(Vg,wno),e(Vg,PB),e(PB,Ano),e(Vg,yno),e(k,Lno),e(k,Xg),e(Xg,jte),e(jte,xno),e(Xg,$no),e(Xg,IB),e(IB,kno),e(Xg,Sno),e(k,Rno),e(k,zg),e(zg,Dte),e(Dte,Bno),e(zg,Pno),e(zg,qB),e(qB,Ino),e(zg,qno),e(k,Nno),e(k,As),e(As,Gte),e(Gte,jno),e(As,Dno),e(As,NB),e(NB,Gno),e(As,Ono),e(As,jB),e(jB,Vno),e(As,Xno),e(k,zno),e(k,Qg),e(Qg,Ote),e(Ote,Qno),e(Qg,Wno),e(Qg,DB),e(DB,Hno),e(Qg,Uno),e(k,Jno),e(k,Wg),e(Wg,Vte),e(Vte,Yno),e(Wg,Kno),e(Wg,GB),e(GB,Zno),e(Wg,eso),e(k,oso),e(k,ys),e(ys,Xte),e(Xte,rso),e(ys,tso),e(ys,OB),e(OB,aso),e(ys,nso),e(ys,VB),e(VB,sso),e(ys,lso),e(k,iso),e(k,Hg),e(Hg,zte),e(zte,dso),e(Hg,cso),e(Hg,XB),e(XB,fso),e(Hg,mso),e(k,gso),e(k,Ug),e(Ug,Qte),e(Qte,hso),e(Ug,pso),e(Ug,zB),e(zB,uso),e(Ug,_so),e(k,bso),e(k,Ls),e(Ls,Wte),e(Wte,vso),e(Ls,Fso),e(Ls,QB),e(QB,Tso),e(Ls,Mso),e(Ls,WB),e(WB,Eso),e(Ls,Cso),e(k,wso),e(k,xs),e(xs,Hte),e(Hte,Aso),e(xs,yso),e(xs,HB),e(HB,Lso),e(xs,xso),e(xs,UB),e(UB,$so),e(xs,kso),e(k,Sso),e(k,$s),e($s,Ute),e(Ute,Rso),e($s,Bso),e($s,JB),e(JB,Pso),e($s,Iso),e($s,YB),e(YB,qso),e($s,Nso),e(k,jso),e(k,ks),e(ks,Jte),e(Jte,Dso),e(ks,Gso),e(ks,KB),e(KB,Oso),e(ks,Vso),e(ks,ZB),e(ZB,Xso),e(ks,zso),e(Cr,Qso),M(Jg,Cr,null),e(wo,Wso),e(wo,Yg),M(m0,Yg,null),e(Yg,Hso),e(Yg,Yte),e(Yte,Uso),b(f,sIe,_),b(f,bi,_),e(bi,Kg),e(Kg,Kte),M(g0,Kte,null),e(bi,Jso),e(bi,Zte),e(Zte,Yso),b(f,lIe,_),b(f,Ao,_),M(h0,Ao,null),e(Ao,Kso),e(Ao,p0),e(p0,Zso),e(p0,eP),e(eP,elo),e(p0,olo),e(Ao,rlo),e(Ao,u0),e(u0,tlo),e(u0,eae),e(eae,alo),e(u0,nlo),e(Ao,slo),e(Ao,Qe),M(_0,Qe,null),e(Qe,llo),e(Qe,oae),e(oae,ilo),e(Qe,dlo),e(Qe,wa),e(wa,clo),e(wa,rae),e(rae,flo),e(wa,mlo),e(wa,tae),e(tae,glo),e(wa,hlo),e(wa,aae),e(aae,plo),e(wa,ulo),e(Qe,_lo),e(Qe,oe),e(oe,Zg),e(Zg,nae),e(nae,blo),e(Zg,vlo),e(Zg,oP),e(oP,Flo),e(Zg,Tlo),e(oe,Mlo),e(oe,eh),e(eh,sae),e(sae,Elo),e(eh,Clo),e(eh,rP),e(rP,wlo),e(eh,Alo),e(oe,ylo),e(oe,oh),e(oh,lae),e(lae,Llo),e(oh,xlo),e(oh,tP),e(tP,$lo),e(oh,klo),e(oe,Slo),e(oe,rh),e(rh,iae),e(iae,Rlo),e(rh,Blo),e(rh,aP),e(aP,Plo),e(rh,Ilo),e(oe,qlo),e(oe,th),e(th,dae),e(dae,Nlo),e(th,jlo),e(th,nP),e(nP,Dlo),e(th,Glo),e(oe,Olo),e(oe,ah),e(ah,cae),e(cae,Vlo),e(ah,Xlo),e(ah,sP),e(sP,zlo),e(ah,Qlo),e(oe,Wlo),e(oe,nh),e(nh,fae),e(fae,Hlo),e(nh,Ulo),e(nh,lP),e(lP,Jlo),e(nh,Ylo),e(oe,Klo),e(oe,sh),e(sh,mae),e(mae,Zlo),e(sh,eio),e(sh,iP),e(iP,oio),e(sh,rio),e(oe,tio),e(oe,lh),e(lh,gae),e(gae,aio),e(lh,nio),e(lh,dP),e(dP,sio),e(lh,lio),e(oe,iio),e(oe,ih),e(ih,hae),e(hae,dio),e(ih,cio),e(ih,cP),e(cP,fio),e(ih,mio),e(oe,gio),e(oe,dh),e(dh,pae),e(pae,hio),e(dh,pio),e(dh,fP),e(fP,uio),e(dh,_io),e(oe,bio),e(oe,ch),e(ch,uae),e(uae,vio),e(ch,Fio),e(ch,mP),e(mP,Tio),e(ch,Mio),e(oe,Eio),e(oe,fh),e(fh,_ae),e(_ae,Cio),e(fh,wio),e(fh,gP),e(gP,Aio),e(fh,yio),e(oe,Lio),e(oe,mh),e(mh,bae),e(bae,xio),e(mh,$io),e(mh,hP),e(hP,kio),e(mh,Sio),e(oe,Rio),e(oe,gh),e(gh,vae),e(vae,Bio),e(gh,Pio),e(gh,pP),e(pP,Iio),e(gh,qio),e(oe,Nio),e(oe,hh),e(hh,Fae),e(Fae,jio),e(hh,Dio),e(hh,uP),e(uP,Gio),e(hh,Oio),e(oe,Vio),e(oe,ph),e(ph,Tae),e(Tae,Xio),e(ph,zio),e(ph,_P),e(_P,Qio),e(ph,Wio),e(oe,Hio),e(oe,uh),e(uh,Mae),e(Mae,Uio),e(uh,Jio),e(uh,bP),e(bP,Yio),e(uh,Kio),e(oe,Zio),e(oe,_h),e(_h,Eae),e(Eae,edo),e(_h,odo),e(_h,vP),e(vP,rdo),e(_h,tdo),e(oe,ado),e(oe,bh),e(bh,Cae),e(Cae,ndo),e(bh,sdo),e(bh,FP),e(FP,ldo),e(bh,ido),e(oe,ddo),e(oe,vh),e(vh,wae),e(wae,cdo),e(vh,fdo),e(vh,TP),e(TP,mdo),e(vh,gdo),e(oe,hdo),e(oe,Fh),e(Fh,Aae),e(Aae,pdo),e(Fh,udo),e(Fh,MP),e(MP,_do),e(Fh,bdo),e(oe,vdo),e(oe,Th),e(Th,yae),e(yae,Fdo),e(Th,Tdo),e(Th,EP),e(EP,Mdo),e(Th,Edo),e(oe,Cdo),e(oe,Mh),e(Mh,Lae),e(Lae,wdo),e(Mh,Ado),e(Mh,CP),e(CP,ydo),e(Mh,Ldo),e(oe,xdo),e(oe,Eh),e(Eh,xae),e(xae,$do),e(Eh,kdo),e(Eh,wP),e(wP,Sdo),e(Eh,Rdo),e(Qe,Bdo),M(Ch,Qe,null),e(Qe,Pdo),M(wh,Qe,null),e(Ao,Ido),e(Ao,Ah),M(b0,Ah,null),e(Ah,qdo),e(Ah,$ae),e($ae,Ndo),b(f,iIe,_),b(f,vi,_),e(vi,yh),e(yh,kae),M(v0,kae,null),e(vi,jdo),e(vi,Sae),e(Sae,Ddo),b(f,dIe,_),b(f,yo,_),M(F0,yo,null),e(yo,Gdo),e(yo,T0),e(T0,Odo),e(T0,AP),e(AP,Vdo),e(T0,Xdo),e(yo,zdo),e(yo,M0),e(M0,Qdo),e(M0,Rae),e(Rae,Wdo),e(M0,Hdo),e(yo,Udo),e(yo,We),M(E0,We,null),e(We,Jdo),e(We,Bae),e(Bae,Ydo),e(We,Kdo),e(We,Fi),e(Fi,Zdo),e(Fi,Pae),e(Pae,eco),e(Fi,oco),e(Fi,Iae),e(Iae,rco),e(Fi,tco),e(We,aco),e(We,be),e(be,Lh),e(Lh,qae),e(qae,nco),e(Lh,sco),e(Lh,yP),e(yP,lco),e(Lh,ico),e(be,dco),e(be,xh),e(xh,Nae),e(Nae,cco),e(xh,fco),e(xh,jae),e(jae,mco),e(xh,gco),e(be,hco),e(be,$h),e($h,Dae),e(Dae,pco),e($h,uco),e($h,LP),e(LP,_co),e($h,bco),e(be,vco),e(be,kh),e(kh,Gae),e(Gae,Fco),e(kh,Tco),e(kh,xP),e(xP,Mco),e(kh,Eco),e(be,Cco),e(be,Sh),e(Sh,Oae),e(Oae,wco),e(Sh,Aco),e(Sh,$P),e($P,yco),e(Sh,Lco),e(be,xco),e(be,Rh),e(Rh,Vae),e(Vae,$co),e(Rh,kco),e(Rh,kP),e(kP,Sco),e(Rh,Rco),e(be,Bco),e(be,Bh),e(Bh,Xae),e(Xae,Pco),e(Bh,Ico),e(Bh,SP),e(SP,qco),e(Bh,Nco),e(be,jco),e(be,Ph),e(Ph,zae),e(zae,Dco),e(Ph,Gco),e(Ph,RP),e(RP,Oco),e(Ph,Vco),e(be,Xco),e(be,Ih),e(Ih,Qae),e(Qae,zco),e(Ih,Qco),e(Ih,BP),e(BP,Wco),e(Ih,Hco),e(be,Uco),e(be,qh),e(qh,Wae),e(Wae,Jco),e(qh,Yco),e(qh,PP),e(PP,Kco),e(qh,Zco),e(be,efo),e(be,Nh),e(Nh,Hae),e(Hae,ofo),e(Nh,rfo),e(Nh,IP),e(IP,tfo),e(Nh,afo),e(be,nfo),e(be,jh),e(jh,Uae),e(Uae,sfo),e(jh,lfo),e(jh,qP),e(qP,ifo),e(jh,dfo),e(be,cfo),e(be,Dh),e(Dh,Jae),e(Jae,ffo),e(Dh,mfo),e(Dh,NP),e(NP,gfo),e(Dh,hfo),e(be,pfo),e(be,Gh),e(Gh,Yae),e(Yae,ufo),e(Gh,_fo),e(Gh,jP),e(jP,bfo),e(Gh,vfo),e(be,Ffo),e(be,Oh),e(Oh,Kae),e(Kae,Tfo),e(Oh,Mfo),e(Oh,DP),e(DP,Efo),e(Oh,Cfo),e(We,wfo),M(Vh,We,null),e(We,Afo),M(Xh,We,null),e(yo,yfo),e(yo,zh),M(C0,zh,null),e(zh,Lfo),e(zh,Zae),e(Zae,xfo),b(f,cIe,_),b(f,Ti,_),e(Ti,Qh),e(Qh,ene),M(w0,ene,null),e(Ti,$fo),e(Ti,one),e(one,kfo),b(f,fIe,_),b(f,Lo,_),M(A0,Lo,null),e(Lo,Sfo),e(Lo,Mi),e(Mi,Rfo),e(Mi,GP),e(GP,Bfo),e(Mi,Pfo),e(Mi,OP),e(OP,Ifo),e(Mi,qfo),e(Lo,Nfo),e(Lo,y0),e(y0,jfo),e(y0,rne),e(rne,Dfo),e(y0,Gfo),e(Lo,Ofo),e(Lo,ot),M(L0,ot,null),e(ot,Vfo),e(ot,tne),e(tne,Xfo),e(ot,zfo),e(ot,Ei),e(Ei,Qfo),e(Ei,ane),e(ane,Wfo),e(Ei,Hfo),e(Ei,VP),e(VP,Ufo),e(Ei,Jfo),e(ot,Yfo),M(Wh,ot,null),e(Lo,Kfo),e(Lo,He),M(x0,He,null),e(He,Zfo),e(He,nne),e(nne,emo),e(He,omo),e(He,Aa),e(Aa,rmo),e(Aa,sne),e(sne,tmo),e(Aa,amo),e(Aa,lne),e(lne,nmo),e(Aa,smo),e(Aa,ine),e(ine,lmo),e(Aa,imo),e(He,dmo),e(He,x),e(x,Hh),e(Hh,dne),e(dne,cmo),e(Hh,fmo),e(Hh,XP),e(XP,mmo),e(Hh,gmo),e(x,hmo),e(x,Uh),e(Uh,cne),e(cne,pmo),e(Uh,umo),e(Uh,zP),e(zP,_mo),e(Uh,bmo),e(x,vmo),e(x,Jh),e(Jh,fne),e(fne,Fmo),e(Jh,Tmo),e(Jh,QP),e(QP,Mmo),e(Jh,Emo),e(x,Cmo),e(x,Yh),e(Yh,mne),e(mne,wmo),e(Yh,Amo),e(Yh,WP),e(WP,ymo),e(Yh,Lmo),e(x,xmo),e(x,Kh),e(Kh,gne),e(gne,$mo),e(Kh,kmo),e(Kh,HP),e(HP,Smo),e(Kh,Rmo),e(x,Bmo),e(x,Zh),e(Zh,hne),e(hne,Pmo),e(Zh,Imo),e(Zh,UP),e(UP,qmo),e(Zh,Nmo),e(x,jmo),e(x,ep),e(ep,pne),e(pne,Dmo),e(ep,Gmo),e(ep,JP),e(JP,Omo),e(ep,Vmo),e(x,Xmo),e(x,op),e(op,une),e(une,zmo),e(op,Qmo),e(op,YP),e(YP,Wmo),e(op,Hmo),e(x,Umo),e(x,rp),e(rp,_ne),e(_ne,Jmo),e(rp,Ymo),e(rp,KP),e(KP,Kmo),e(rp,Zmo),e(x,ego),e(x,tp),e(tp,bne),e(bne,ogo),e(tp,rgo),e(tp,ZP),e(ZP,tgo),e(tp,ago),e(x,ngo),e(x,ap),e(ap,vne),e(vne,sgo),e(ap,lgo),e(ap,eI),e(eI,igo),e(ap,dgo),e(x,cgo),e(x,np),e(np,Fne),e(Fne,fgo),e(np,mgo),e(np,oI),e(oI,ggo),e(np,hgo),e(x,pgo),e(x,sp),e(sp,Tne),e(Tne,ugo),e(sp,_go),e(sp,rI),e(rI,bgo),e(sp,vgo),e(x,Fgo),e(x,lp),e(lp,Mne),e(Mne,Tgo),e(lp,Mgo),e(lp,tI),e(tI,Ego),e(lp,Cgo),e(x,wgo),e(x,ip),e(ip,Ene),e(Ene,Ago),e(ip,ygo),e(ip,aI),e(aI,Lgo),e(ip,xgo),e(x,$go),e(x,dp),e(dp,Cne),e(Cne,kgo),e(dp,Sgo),e(dp,nI),e(nI,Rgo),e(dp,Bgo),e(x,Pgo),e(x,cp),e(cp,wne),e(wne,Igo),e(cp,qgo),e(cp,sI),e(sI,Ngo),e(cp,jgo),e(x,Dgo),e(x,fp),e(fp,Ane),e(Ane,Ggo),e(fp,Ogo),e(fp,lI),e(lI,Vgo),e(fp,Xgo),e(x,zgo),e(x,mp),e(mp,yne),e(yne,Qgo),e(mp,Wgo),e(mp,iI),e(iI,Hgo),e(mp,Ugo),e(x,Jgo),e(x,gp),e(gp,Lne),e(Lne,Ygo),e(gp,Kgo),e(gp,dI),e(dI,Zgo),e(gp,eho),e(x,oho),e(x,hp),e(hp,xne),e(xne,rho),e(hp,tho),e(hp,cI),e(cI,aho),e(hp,nho),e(x,sho),e(x,pp),e(pp,$ne),e($ne,lho),e(pp,iho),e(pp,fI),e(fI,dho),e(pp,cho),e(x,fho),e(x,up),e(up,kne),e(kne,mho),e(up,gho),e(up,mI),e(mI,hho),e(up,pho),e(x,uho),e(x,_p),e(_p,Sne),e(Sne,_ho),e(_p,bho),e(_p,gI),e(gI,vho),e(_p,Fho),e(x,Tho),e(x,bp),e(bp,Rne),e(Rne,Mho),e(bp,Eho),e(bp,hI),e(hI,Cho),e(bp,who),e(x,Aho),e(x,vp),e(vp,Bne),e(Bne,yho),e(vp,Lho),e(vp,pI),e(pI,xho),e(vp,$ho),e(x,kho),e(x,Fp),e(Fp,Pne),e(Pne,Sho),e(Fp,Rho),e(Fp,uI),e(uI,Bho),e(Fp,Pho),e(x,Iho),e(x,Tp),e(Tp,Ine),e(Ine,qho),e(Tp,Nho),e(Tp,_I),e(_I,jho),e(Tp,Dho),e(x,Gho),e(x,Mp),e(Mp,qne),e(qne,Oho),e(Mp,Vho),e(Mp,bI),e(bI,Xho),e(Mp,zho),e(x,Qho),e(x,Ep),e(Ep,Nne),e(Nne,Who),e(Ep,Hho),e(Ep,vI),e(vI,Uho),e(Ep,Jho),e(x,Yho),e(x,Cp),e(Cp,jne),e(jne,Kho),e(Cp,Zho),e(Cp,FI),e(FI,epo),e(Cp,opo),e(x,rpo),e(x,Ss),e(Ss,Dne),e(Dne,tpo),e(Ss,apo),e(Ss,TI),e(TI,npo),e(Ss,spo),e(Ss,MI),e(MI,lpo),e(Ss,ipo),e(x,dpo),e(x,wp),e(wp,Gne),e(Gne,cpo),e(wp,fpo),e(wp,EI),e(EI,mpo),e(wp,gpo),e(x,hpo),e(x,Ap),e(Ap,One),e(One,ppo),e(Ap,upo),e(Ap,CI),e(CI,_po),e(Ap,bpo),e(x,vpo),e(x,yp),e(yp,Vne),e(Vne,Fpo),e(yp,Tpo),e(yp,wI),e(wI,Mpo),e(yp,Epo),e(x,Cpo),e(x,Lp),e(Lp,Xne),e(Xne,wpo),e(Lp,Apo),e(Lp,AI),e(AI,ypo),e(Lp,Lpo),e(x,xpo),e(x,xp),e(xp,zne),e(zne,$po),e(xp,kpo),e(xp,yI),e(yI,Spo),e(xp,Rpo),e(x,Bpo),e(x,$p),e($p,Qne),e(Qne,Ppo),e($p,Ipo),e($p,LI),e(LI,qpo),e($p,Npo),e(x,jpo),e(x,kp),e(kp,Wne),e(Wne,Dpo),e(kp,Gpo),e(kp,xI),e(xI,Opo),e(kp,Vpo),e(x,Xpo),e(x,Sp),e(Sp,Hne),e(Hne,zpo),e(Sp,Qpo),e(Sp,$I),e($I,Wpo),e(Sp,Hpo),e(x,Upo),e(x,Rp),e(Rp,Une),e(Une,Jpo),e(Rp,Ypo),e(Rp,kI),e(kI,Kpo),e(Rp,Zpo),e(x,euo),e(x,Bp),e(Bp,Jne),e(Jne,ouo),e(Bp,ruo),e(Bp,SI),e(SI,tuo),e(Bp,auo),e(x,nuo),e(x,Pp),e(Pp,Yne),e(Yne,suo),e(Pp,luo),e(Pp,RI),e(RI,iuo),e(Pp,duo),e(x,cuo),e(x,Ip),e(Ip,Kne),e(Kne,fuo),e(Ip,muo),e(Ip,BI),e(BI,guo),e(Ip,huo),e(x,puo),e(x,qp),e(qp,Zne),e(Zne,uuo),e(qp,_uo),e(qp,PI),e(PI,buo),e(qp,vuo),e(x,Fuo),e(x,Np),e(Np,ese),e(ese,Tuo),e(Np,Muo),e(Np,II),e(II,Euo),e(Np,Cuo),e(x,wuo),e(x,jp),e(jp,ose),e(ose,Auo),e(jp,yuo),e(jp,qI),e(qI,Luo),e(jp,xuo),e(x,$uo),e(x,Dp),e(Dp,rse),e(rse,kuo),e(Dp,Suo),e(Dp,NI),e(NI,Ruo),e(Dp,Buo),e(x,Puo),e(x,Gp),e(Gp,tse),e(tse,Iuo),e(Gp,quo),e(Gp,jI),e(jI,Nuo),e(Gp,juo),e(x,Duo),e(x,Op),e(Op,ase),e(ase,Guo),e(Op,Ouo),e(Op,DI),e(DI,Vuo),e(Op,Xuo),e(x,zuo),e(x,Vp),e(Vp,nse),e(nse,Quo),e(Vp,Wuo),e(Vp,GI),e(GI,Huo),e(Vp,Uuo),e(x,Juo),e(x,Xp),e(Xp,sse),e(sse,Yuo),e(Xp,Kuo),e(Xp,OI),e(OI,Zuo),e(Xp,e_o),e(x,o_o),e(x,zp),e(zp,lse),e(lse,r_o),e(zp,t_o),e(zp,VI),e(VI,a_o),e(zp,n_o),e(x,s_o),e(x,Qp),e(Qp,ise),e(ise,l_o),e(Qp,i_o),e(Qp,XI),e(XI,d_o),e(Qp,c_o),e(x,f_o),e(x,Wp),e(Wp,dse),e(dse,m_o),e(Wp,g_o),e(Wp,zI),e(zI,h_o),e(Wp,p_o),e(x,u_o),e(x,Hp),e(Hp,cse),e(cse,__o),e(Hp,b_o),e(Hp,QI),e(QI,v_o),e(Hp,F_o),e(x,T_o),e(x,Up),e(Up,fse),e(fse,M_o),e(Up,E_o),e(Up,WI),e(WI,C_o),e(Up,w_o),e(x,A_o),e(x,Jp),e(Jp,mse),e(mse,y_o),e(Jp,L_o),e(Jp,HI),e(HI,x_o),e(Jp,$_o),e(x,k_o),e(x,Yp),e(Yp,gse),e(gse,S_o),e(Yp,R_o),e(Yp,UI),e(UI,B_o),e(Yp,P_o),e(x,I_o),e(x,Kp),e(Kp,hse),e(hse,q_o),e(Kp,N_o),e(Kp,JI),e(JI,j_o),e(Kp,D_o),e(x,G_o),e(x,Zp),e(Zp,pse),e(pse,O_o),e(Zp,V_o),e(Zp,YI),e(YI,X_o),e(Zp,z_o),e(x,Q_o),e(x,eu),e(eu,use),e(use,W_o),e(eu,H_o),e(eu,KI),e(KI,U_o),e(eu,J_o),e(x,Y_o),e(x,ou),e(ou,_se),e(_se,K_o),e(ou,Z_o),e(ou,ZI),e(ZI,e1o),e(ou,o1o),e(x,r1o),e(x,ru),e(ru,bse),e(bse,t1o),e(ru,a1o),e(ru,eq),e(eq,n1o),e(ru,s1o),e(x,l1o),e(x,tu),e(tu,vse),e(vse,i1o),e(tu,d1o),e(tu,oq),e(oq,c1o),e(tu,f1o),e(x,m1o),e(x,au),e(au,Fse),e(Fse,g1o),e(au,h1o),e(au,rq),e(rq,p1o),e(au,u1o),e(x,_1o),e(x,nu),e(nu,Tse),e(Tse,b1o),e(nu,v1o),e(nu,tq),e(tq,F1o),e(nu,T1o),e(x,M1o),e(x,su),e(su,Mse),e(Mse,E1o),e(su,C1o),e(su,aq),e(aq,w1o),e(su,A1o),e(x,y1o),e(x,lu),e(lu,Ese),e(Ese,L1o),e(lu,x1o),e(lu,nq),e(nq,$1o),e(lu,k1o),e(x,S1o),e(x,iu),e(iu,Cse),e(Cse,R1o),e(iu,B1o),e(iu,sq),e(sq,P1o),e(iu,I1o),e(x,q1o),e(x,du),e(du,wse),e(wse,N1o),e(du,j1o),e(du,lq),e(lq,D1o),e(du,G1o),e(x,O1o),e(x,cu),e(cu,Ase),e(Ase,V1o),e(cu,X1o),e(cu,iq),e(iq,z1o),e(cu,Q1o),e(x,W1o),e(x,fu),e(fu,yse),e(yse,H1o),e(fu,U1o),e(fu,dq),e(dq,J1o),e(fu,Y1o),e(x,K1o),e(x,mu),e(mu,Lse),e(Lse,Z1o),e(mu,ebo),e(mu,cq),e(cq,obo),e(mu,rbo),e(x,tbo),e(x,gu),e(gu,xse),e(xse,abo),e(gu,nbo),e(gu,fq),e(fq,sbo),e(gu,lbo),e(x,ibo),e(x,hu),e(hu,$se),e($se,dbo),e(hu,cbo),e(hu,mq),e(mq,fbo),e(hu,mbo),e(x,gbo),e(x,pu),e(pu,kse),e(kse,hbo),e(pu,pbo),e(pu,gq),e(gq,ubo),e(pu,_bo),e(x,bbo),e(x,uu),e(uu,Sse),e(Sse,vbo),e(uu,Fbo),e(uu,hq),e(hq,Tbo),e(uu,Mbo),e(x,Ebo),e(x,_u),e(_u,Rse),e(Rse,Cbo),e(_u,wbo),e(_u,pq),e(pq,Abo),e(_u,ybo),e(x,Lbo),e(x,bu),e(bu,Bse),e(Bse,xbo),e(bu,$bo),e(bu,uq),e(uq,kbo),e(bu,Sbo),e(x,Rbo),e(x,vu),e(vu,Pse),e(Pse,Bbo),e(vu,Pbo),e(vu,_q),e(_q,Ibo),e(vu,qbo),e(x,Nbo),e(x,Fu),e(Fu,Ise),e(Ise,jbo),e(Fu,Dbo),e(Fu,bq),e(bq,Gbo),e(Fu,Obo),e(x,Vbo),e(x,Tu),e(Tu,qse),e(qse,Xbo),e(Tu,zbo),e(Tu,vq),e(vq,Qbo),e(Tu,Wbo),e(x,Hbo),e(x,Mu),e(Mu,Nse),e(Nse,Ubo),e(Mu,Jbo),e(Mu,Fq),e(Fq,Ybo),e(Mu,Kbo),e(x,Zbo),e(x,Eu),e(Eu,jse),e(jse,e4o),e(Eu,o4o),e(Eu,Tq),e(Tq,r4o),e(Eu,t4o),e(x,a4o),e(x,Cu),e(Cu,Dse),e(Dse,n4o),e(Cu,s4o),e(Cu,Mq),e(Mq,l4o),e(Cu,i4o),e(x,d4o),e(x,wu),e(wu,Gse),e(Gse,c4o),e(wu,f4o),e(wu,Eq),e(Eq,m4o),e(wu,g4o),e(x,h4o),e(x,Au),e(Au,Ose),e(Ose,p4o),e(Au,u4o),e(Au,Cq),e(Cq,_4o),e(Au,b4o),e(x,v4o),e(x,yu),e(yu,Vse),e(Vse,F4o),e(yu,T4o),e(yu,wq),e(wq,M4o),e(yu,E4o),e(x,C4o),e(x,Lu),e(Lu,Xse),e(Xse,w4o),e(Lu,A4o),e(Lu,Aq),e(Aq,y4o),e(Lu,L4o),e(x,x4o),e(x,xu),e(xu,zse),e(zse,$4o),e(xu,k4o),e(xu,yq),e(yq,S4o),e(xu,R4o),e(x,B4o),e(x,$u),e($u,Qse),e(Qse,P4o),e($u,I4o),e($u,Lq),e(Lq,q4o),e($u,N4o),e(x,j4o),e(x,ku),e(ku,Wse),e(Wse,D4o),e(ku,G4o),e(ku,xq),e(xq,O4o),e(ku,V4o),e(x,X4o),e(x,Su),e(Su,Hse),e(Hse,z4o),e(Su,Q4o),e(Su,$q),e($q,W4o),e(Su,H4o),e(x,U4o),e(x,Ru),e(Ru,Use),e(Use,J4o),e(Ru,Y4o),e(Ru,kq),e(kq,K4o),e(Ru,Z4o),e(x,e2o),e(x,Bu),e(Bu,Jse),e(Jse,o2o),e(Bu,r2o),e(Bu,Sq),e(Sq,t2o),e(Bu,a2o),e(x,n2o),e(x,Pu),e(Pu,Yse),e(Yse,s2o),e(Pu,l2o),e(Pu,Rq),e(Rq,i2o),e(Pu,d2o),e(x,c2o),e(x,Iu),e(Iu,Kse),e(Kse,f2o),e(Iu,m2o),e(Iu,Bq),e(Bq,g2o),e(Iu,h2o),e(He,p2o),e(He,qu),e(qu,u2o),e(qu,Zse),e(Zse,_2o),e(qu,b2o),e(qu,ele),e(ele,v2o),e(He,F2o),M(Nu,He,null),b(f,mIe,_),b(f,Ci,_),e(Ci,ju),e(ju,ole),M($0,ole,null),e(Ci,T2o),e(Ci,rle),e(rle,M2o),b(f,gIe,_),b(f,xo,_),M(k0,xo,null),e(xo,E2o),e(xo,wi),e(wi,C2o),e(wi,Pq),e(Pq,w2o),e(wi,A2o),e(wi,Iq),e(Iq,y2o),e(wi,L2o),e(xo,x2o),e(xo,S0),e(S0,$2o),e(S0,tle),e(tle,k2o),e(S0,S2o),e(xo,R2o),e(xo,rt),M(R0,rt,null),e(rt,B2o),e(rt,ale),e(ale,P2o),e(rt,I2o),e(rt,Ai),e(Ai,q2o),e(Ai,nle),e(nle,N2o),e(Ai,j2o),e(Ai,qq),e(qq,D2o),e(Ai,G2o),e(rt,O2o),M(Du,rt,null),e(xo,V2o),e(xo,Ue),M(B0,Ue,null),e(Ue,X2o),e(Ue,sle),e(sle,z2o),e(Ue,Q2o),e(Ue,ya),e(ya,W2o),e(ya,lle),e(lle,H2o),e(ya,U2o),e(ya,ile),e(ile,J2o),e(ya,Y2o),e(ya,dle),e(dle,K2o),e(ya,Z2o),e(Ue,evo),e(Ue,G),e(G,Gu),e(Gu,cle),e(cle,ovo),e(Gu,rvo),e(Gu,Nq),e(Nq,tvo),e(Gu,avo),e(G,nvo),e(G,Ou),e(Ou,fle),e(fle,svo),e(Ou,lvo),e(Ou,jq),e(jq,ivo),e(Ou,dvo),e(G,cvo),e(G,Vu),e(Vu,mle),e(mle,fvo),e(Vu,mvo),e(Vu,Dq),e(Dq,gvo),e(Vu,hvo),e(G,pvo),e(G,Xu),e(Xu,gle),e(gle,uvo),e(Xu,_vo),e(Xu,Gq),e(Gq,bvo),e(Xu,vvo),e(G,Fvo),e(G,zu),e(zu,hle),e(hle,Tvo),e(zu,Mvo),e(zu,Oq),e(Oq,Evo),e(zu,Cvo),e(G,wvo),e(G,Qu),e(Qu,ple),e(ple,Avo),e(Qu,yvo),e(Qu,Vq),e(Vq,Lvo),e(Qu,xvo),e(G,$vo),e(G,Wu),e(Wu,ule),e(ule,kvo),e(Wu,Svo),e(Wu,Xq),e(Xq,Rvo),e(Wu,Bvo),e(G,Pvo),e(G,Hu),e(Hu,_le),e(_le,Ivo),e(Hu,qvo),e(Hu,zq),e(zq,Nvo),e(Hu,jvo),e(G,Dvo),e(G,Uu),e(Uu,ble),e(ble,Gvo),e(Uu,Ovo),e(Uu,Qq),e(Qq,Vvo),e(Uu,Xvo),e(G,zvo),e(G,Ju),e(Ju,vle),e(vle,Qvo),e(Ju,Wvo),e(Ju,Wq),e(Wq,Hvo),e(Ju,Uvo),e(G,Jvo),e(G,Yu),e(Yu,Fle),e(Fle,Yvo),e(Yu,Kvo),e(Yu,Hq),e(Hq,Zvo),e(Yu,eFo),e(G,oFo),e(G,Ku),e(Ku,Tle),e(Tle,rFo),e(Ku,tFo),e(Ku,Uq),e(Uq,aFo),e(Ku,nFo),e(G,sFo),e(G,Zu),e(Zu,Mle),e(Mle,lFo),e(Zu,iFo),e(Zu,Jq),e(Jq,dFo),e(Zu,cFo),e(G,fFo),e(G,e_),e(e_,Ele),e(Ele,mFo),e(e_,gFo),e(e_,Yq),e(Yq,hFo),e(e_,pFo),e(G,uFo),e(G,o_),e(o_,Cle),e(Cle,_Fo),e(o_,bFo),e(o_,Kq),e(Kq,vFo),e(o_,FFo),e(G,TFo),e(G,r_),e(r_,wle),e(wle,MFo),e(r_,EFo),e(r_,Zq),e(Zq,CFo),e(r_,wFo),e(G,AFo),e(G,t_),e(t_,Ale),e(Ale,yFo),e(t_,LFo),e(t_,eN),e(eN,xFo),e(t_,$Fo),e(G,kFo),e(G,a_),e(a_,yle),e(yle,SFo),e(a_,RFo),e(a_,oN),e(oN,BFo),e(a_,PFo),e(G,IFo),e(G,n_),e(n_,Lle),e(Lle,qFo),e(n_,NFo),e(n_,rN),e(rN,jFo),e(n_,DFo),e(G,GFo),e(G,s_),e(s_,xle),e(xle,OFo),e(s_,VFo),e(s_,tN),e(tN,XFo),e(s_,zFo),e(G,QFo),e(G,l_),e(l_,$le),e($le,WFo),e(l_,HFo),e(l_,aN),e(aN,UFo),e(l_,JFo),e(G,YFo),e(G,i_),e(i_,kle),e(kle,KFo),e(i_,ZFo),e(i_,nN),e(nN,eTo),e(i_,oTo),e(G,rTo),e(G,d_),e(d_,Sle),e(Sle,tTo),e(d_,aTo),e(d_,sN),e(sN,nTo),e(d_,sTo),e(G,lTo),e(G,c_),e(c_,Rle),e(Rle,iTo),e(c_,dTo),e(c_,lN),e(lN,cTo),e(c_,fTo),e(G,mTo),e(G,f_),e(f_,Ble),e(Ble,gTo),e(f_,hTo),e(f_,iN),e(iN,pTo),e(f_,uTo),e(G,_To),e(G,m_),e(m_,Ple),e(Ple,bTo),e(m_,vTo),e(m_,dN),e(dN,FTo),e(m_,TTo),e(G,MTo),e(G,g_),e(g_,Ile),e(Ile,ETo),e(g_,CTo),e(g_,cN),e(cN,wTo),e(g_,ATo),e(G,yTo),e(G,h_),e(h_,qle),e(qle,LTo),e(h_,xTo),e(h_,fN),e(fN,$To),e(h_,kTo),e(G,STo),e(G,p_),e(p_,Nle),e(Nle,RTo),e(p_,BTo),e(p_,mN),e(mN,PTo),e(p_,ITo),e(G,qTo),e(G,u_),e(u_,jle),e(jle,NTo),e(u_,jTo),e(u_,gN),e(gN,DTo),e(u_,GTo),e(G,OTo),e(G,__),e(__,Dle),e(Dle,VTo),e(__,XTo),e(__,hN),e(hN,zTo),e(__,QTo),e(G,WTo),e(G,b_),e(b_,Gle),e(Gle,HTo),e(b_,UTo),e(b_,pN),e(pN,JTo),e(b_,YTo),e(G,KTo),e(G,v_),e(v_,Ole),e(Ole,ZTo),e(v_,e7o),e(v_,uN),e(uN,o7o),e(v_,r7o),e(G,t7o),e(G,F_),e(F_,Vle),e(Vle,a7o),e(F_,n7o),e(F_,_N),e(_N,s7o),e(F_,l7o),e(G,i7o),e(G,T_),e(T_,Xle),e(Xle,d7o),e(T_,c7o),e(T_,bN),e(bN,f7o),e(T_,m7o),e(G,g7o),e(G,M_),e(M_,zle),e(zle,h7o),e(M_,p7o),e(M_,vN),e(vN,u7o),e(M_,_7o),e(G,b7o),e(G,E_),e(E_,Qle),e(Qle,v7o),e(E_,F7o),e(E_,FN),e(FN,T7o),e(E_,M7o),e(G,E7o),e(G,C_),e(C_,Wle),e(Wle,C7o),e(C_,w7o),e(C_,TN),e(TN,A7o),e(C_,y7o),e(G,L7o),e(G,w_),e(w_,Hle),e(Hle,x7o),e(w_,$7o),e(w_,MN),e(MN,k7o),e(w_,S7o),e(G,R7o),e(G,A_),e(A_,Ule),e(Ule,B7o),e(A_,P7o),e(A_,EN),e(EN,I7o),e(A_,q7o),e(Ue,N7o),e(Ue,y_),e(y_,j7o),e(y_,Jle),e(Jle,D7o),e(y_,G7o),e(y_,Yle),e(Yle,O7o),e(Ue,V7o),M(L_,Ue,null),b(f,hIe,_),b(f,yi,_),e(yi,x_),e(x_,Kle),M(P0,Kle,null),e(yi,X7o),e(yi,Zle),e(Zle,z7o),b(f,pIe,_),b(f,$o,_),M(I0,$o,null),e($o,Q7o),e($o,Li),e(Li,W7o),e(Li,CN),e(CN,H7o),e(Li,U7o),e(Li,wN),e(wN,J7o),e(Li,Y7o),e($o,K7o),e($o,q0),e(q0,Z7o),e(q0,eie),e(eie,eMo),e(q0,oMo),e($o,rMo),e($o,tt),M(N0,tt,null),e(tt,tMo),e(tt,oie),e(oie,aMo),e(tt,nMo),e(tt,xi),e(xi,sMo),e(xi,rie),e(rie,lMo),e(xi,iMo),e(xi,AN),e(AN,dMo),e(xi,cMo),e(tt,fMo),M($_,tt,null),e($o,mMo),e($o,Je),M(j0,Je,null),e(Je,gMo),e(Je,tie),e(tie,hMo),e(Je,pMo),e(Je,La),e(La,uMo),e(La,aie),e(aie,_Mo),e(La,bMo),e(La,nie),e(nie,vMo),e(La,FMo),e(La,sie),e(sie,TMo),e(La,MMo),e(Je,EMo),e(Je,z),e(z,k_),e(k_,lie),e(lie,CMo),e(k_,wMo),e(k_,yN),e(yN,AMo),e(k_,yMo),e(z,LMo),e(z,S_),e(S_,iie),e(iie,xMo),e(S_,$Mo),e(S_,LN),e(LN,kMo),e(S_,SMo),e(z,RMo),e(z,R_),e(R_,die),e(die,BMo),e(R_,PMo),e(R_,xN),e(xN,IMo),e(R_,qMo),e(z,NMo),e(z,B_),e(B_,cie),e(cie,jMo),e(B_,DMo),e(B_,$N),e($N,GMo),e(B_,OMo),e(z,VMo),e(z,P_),e(P_,fie),e(fie,XMo),e(P_,zMo),e(P_,kN),e(kN,QMo),e(P_,WMo),e(z,HMo),e(z,I_),e(I_,mie),e(mie,UMo),e(I_,JMo),e(I_,SN),e(SN,YMo),e(I_,KMo),e(z,ZMo),e(z,q_),e(q_,gie),e(gie,eEo),e(q_,oEo),e(q_,RN),e(RN,rEo),e(q_,tEo),e(z,aEo),e(z,N_),e(N_,hie),e(hie,nEo),e(N_,sEo),e(N_,BN),e(BN,lEo),e(N_,iEo),e(z,dEo),e(z,j_),e(j_,pie),e(pie,cEo),e(j_,fEo),e(j_,PN),e(PN,mEo),e(j_,gEo),e(z,hEo),e(z,D_),e(D_,uie),e(uie,pEo),e(D_,uEo),e(D_,IN),e(IN,_Eo),e(D_,bEo),e(z,vEo),e(z,G_),e(G_,_ie),e(_ie,FEo),e(G_,TEo),e(G_,qN),e(qN,MEo),e(G_,EEo),e(z,CEo),e(z,O_),e(O_,bie),e(bie,wEo),e(O_,AEo),e(O_,NN),e(NN,yEo),e(O_,LEo),e(z,xEo),e(z,V_),e(V_,vie),e(vie,$Eo),e(V_,kEo),e(V_,jN),e(jN,SEo),e(V_,REo),e(z,BEo),e(z,X_),e(X_,Fie),e(Fie,PEo),e(X_,IEo),e(X_,DN),e(DN,qEo),e(X_,NEo),e(z,jEo),e(z,z_),e(z_,Tie),e(Tie,DEo),e(z_,GEo),e(z_,GN),e(GN,OEo),e(z_,VEo),e(z,XEo),e(z,Q_),e(Q_,Mie),e(Mie,zEo),e(Q_,QEo),e(Q_,ON),e(ON,WEo),e(Q_,HEo),e(z,UEo),e(z,W_),e(W_,Eie),e(Eie,JEo),e(W_,YEo),e(W_,VN),e(VN,KEo),e(W_,ZEo),e(z,e5o),e(z,H_),e(H_,Cie),e(Cie,o5o),e(H_,r5o),e(H_,XN),e(XN,t5o),e(H_,a5o),e(z,n5o),e(z,U_),e(U_,wie),e(wie,s5o),e(U_,l5o),e(U_,zN),e(zN,i5o),e(U_,d5o),e(z,c5o),e(z,J_),e(J_,Aie),e(Aie,f5o),e(J_,m5o),e(J_,QN),e(QN,g5o),e(J_,h5o),e(z,p5o),e(z,Y_),e(Y_,yie),e(yie,u5o),e(Y_,_5o),e(Y_,WN),e(WN,b5o),e(Y_,v5o),e(z,F5o),e(z,K_),e(K_,Lie),e(Lie,T5o),e(K_,M5o),e(K_,HN),e(HN,E5o),e(K_,C5o),e(z,w5o),e(z,Z_),e(Z_,xie),e(xie,A5o),e(Z_,y5o),e(Z_,UN),e(UN,L5o),e(Z_,x5o),e(z,$5o),e(z,e1),e(e1,$ie),e($ie,k5o),e(e1,S5o),e(e1,JN),e(JN,R5o),e(e1,B5o),e(z,P5o),e(z,o1),e(o1,kie),e(kie,I5o),e(o1,q5o),e(o1,YN),e(YN,N5o),e(o1,j5o),e(z,D5o),e(z,r1),e(r1,Sie),e(Sie,G5o),e(r1,O5o),e(r1,KN),e(KN,V5o),e(r1,X5o),e(z,z5o),e(z,t1),e(t1,Rie),e(Rie,Q5o),e(t1,W5o),e(t1,ZN),e(ZN,H5o),e(t1,U5o),e(z,J5o),e(z,a1),e(a1,Bie),e(Bie,Y5o),e(a1,K5o),e(a1,ej),e(ej,Z5o),e(a1,eCo),e(z,oCo),e(z,n1),e(n1,Pie),e(Pie,rCo),e(n1,tCo),e(n1,oj),e(oj,aCo),e(n1,nCo),e(z,sCo),e(z,s1),e(s1,Iie),e(Iie,lCo),e(s1,iCo),e(s1,rj),e(rj,dCo),e(s1,cCo),e(z,fCo),e(z,l1),e(l1,qie),e(qie,mCo),e(l1,gCo),e(l1,tj),e(tj,hCo),e(l1,pCo),e(z,uCo),e(z,i1),e(i1,Nie),e(Nie,_Co),e(i1,bCo),e(i1,aj),e(aj,vCo),e(i1,FCo),e(z,TCo),e(z,d1),e(d1,jie),e(jie,MCo),e(d1,ECo),e(d1,nj),e(nj,CCo),e(d1,wCo),e(z,ACo),e(z,c1),e(c1,Die),e(Die,yCo),e(c1,LCo),e(c1,sj),e(sj,xCo),e(c1,$Co),e(z,kCo),e(z,f1),e(f1,Gie),e(Gie,SCo),e(f1,RCo),e(f1,lj),e(lj,BCo),e(f1,PCo),e(z,ICo),e(z,m1),e(m1,Oie),e(Oie,qCo),e(m1,NCo),e(m1,ij),e(ij,jCo),e(m1,DCo),e(Je,GCo),e(Je,g1),e(g1,OCo),e(g1,Vie),e(Vie,VCo),e(g1,XCo),e(g1,Xie),e(Xie,zCo),e(Je,QCo),M(h1,Je,null),b(f,uIe,_),b(f,$i,_),e($i,p1),e(p1,zie),M(D0,zie,null),e($i,WCo),e($i,Qie),e(Qie,HCo),b(f,_Ie,_),b(f,ko,_),M(G0,ko,null),e(ko,UCo),e(ko,ki),e(ki,JCo),e(ki,dj),e(dj,YCo),e(ki,KCo),e(ki,cj),e(cj,ZCo),e(ki,e3o),e(ko,o3o),e(ko,O0),e(O0,r3o),e(O0,Wie),e(Wie,t3o),e(O0,a3o),e(ko,n3o),e(ko,at),M(V0,at,null),e(at,s3o),e(at,Hie),e(Hie,l3o),e(at,i3o),e(at,Si),e(Si,d3o),e(Si,Uie),e(Uie,c3o),e(Si,f3o),e(Si,fj),e(fj,m3o),e(Si,g3o),e(at,h3o),M(u1,at,null),e(ko,p3o),e(ko,Ye),M(X0,Ye,null),e(Ye,u3o),e(Ye,Jie),e(Jie,_3o),e(Ye,b3o),e(Ye,xa),e(xa,v3o),e(xa,Yie),e(Yie,F3o),e(xa,T3o),e(xa,Kie),e(Kie,M3o),e(xa,E3o),e(xa,Zie),e(Zie,C3o),e(xa,w3o),e(Ye,A3o),e(Ye,Q),e(Q,_1),e(_1,ede),e(ede,y3o),e(_1,L3o),e(_1,mj),e(mj,x3o),e(_1,$3o),e(Q,k3o),e(Q,b1),e(b1,ode),e(ode,S3o),e(b1,R3o),e(b1,gj),e(gj,B3o),e(b1,P3o),e(Q,I3o),e(Q,v1),e(v1,rde),e(rde,q3o),e(v1,N3o),e(v1,hj),e(hj,j3o),e(v1,D3o),e(Q,G3o),e(Q,F1),e(F1,tde),e(tde,O3o),e(F1,V3o),e(F1,pj),e(pj,X3o),e(F1,z3o),e(Q,Q3o),e(Q,T1),e(T1,ade),e(ade,W3o),e(T1,H3o),e(T1,uj),e(uj,U3o),e(T1,J3o),e(Q,Y3o),e(Q,M1),e(M1,nde),e(nde,K3o),e(M1,Z3o),e(M1,_j),e(_j,ewo),e(M1,owo),e(Q,rwo),e(Q,E1),e(E1,sde),e(sde,two),e(E1,awo),e(E1,bj),e(bj,nwo),e(E1,swo),e(Q,lwo),e(Q,C1),e(C1,lde),e(lde,iwo),e(C1,dwo),e(C1,vj),e(vj,cwo),e(C1,fwo),e(Q,mwo),e(Q,w1),e(w1,ide),e(ide,gwo),e(w1,hwo),e(w1,Fj),e(Fj,pwo),e(w1,uwo),e(Q,_wo),e(Q,A1),e(A1,dde),e(dde,bwo),e(A1,vwo),e(A1,Tj),e(Tj,Fwo),e(A1,Two),e(Q,Mwo),e(Q,y1),e(y1,cde),e(cde,Ewo),e(y1,Cwo),e(y1,Mj),e(Mj,wwo),e(y1,Awo),e(Q,ywo),e(Q,L1),e(L1,fde),e(fde,Lwo),e(L1,xwo),e(L1,Ej),e(Ej,$wo),e(L1,kwo),e(Q,Swo),e(Q,x1),e(x1,mde),e(mde,Rwo),e(x1,Bwo),e(x1,Cj),e(Cj,Pwo),e(x1,Iwo),e(Q,qwo),e(Q,$1),e($1,gde),e(gde,Nwo),e($1,jwo),e($1,wj),e(wj,Dwo),e($1,Gwo),e(Q,Owo),e(Q,k1),e(k1,hde),e(hde,Vwo),e(k1,Xwo),e(k1,Aj),e(Aj,zwo),e(k1,Qwo),e(Q,Wwo),e(Q,S1),e(S1,pde),e(pde,Hwo),e(S1,Uwo),e(S1,yj),e(yj,Jwo),e(S1,Ywo),e(Q,Kwo),e(Q,R1),e(R1,ude),e(ude,Zwo),e(R1,eAo),e(R1,Lj),e(Lj,oAo),e(R1,rAo),e(Q,tAo),e(Q,B1),e(B1,_de),e(_de,aAo),e(B1,nAo),e(B1,xj),e(xj,sAo),e(B1,lAo),e(Q,iAo),e(Q,P1),e(P1,bde),e(bde,dAo),e(P1,cAo),e(P1,$j),e($j,fAo),e(P1,mAo),e(Q,gAo),e(Q,I1),e(I1,vde),e(vde,hAo),e(I1,pAo),e(I1,kj),e(kj,uAo),e(I1,_Ao),e(Q,bAo),e(Q,q1),e(q1,Fde),e(Fde,vAo),e(q1,FAo),e(q1,Sj),e(Sj,TAo),e(q1,MAo),e(Q,EAo),e(Q,N1),e(N1,Tde),e(Tde,CAo),e(N1,wAo),e(N1,Rj),e(Rj,AAo),e(N1,yAo),e(Q,LAo),e(Q,j1),e(j1,Mde),e(Mde,xAo),e(j1,$Ao),e(j1,Bj),e(Bj,kAo),e(j1,SAo),e(Q,RAo),e(Q,D1),e(D1,Ede),e(Ede,BAo),e(D1,PAo),e(D1,Pj),e(Pj,IAo),e(D1,qAo),e(Q,NAo),e(Q,G1),e(G1,Cde),e(Cde,jAo),e(G1,DAo),e(G1,Ij),e(Ij,GAo),e(G1,OAo),e(Q,VAo),e(Q,O1),e(O1,wde),e(wde,XAo),e(O1,zAo),e(O1,qj),e(qj,QAo),e(O1,WAo),e(Q,HAo),e(Q,V1),e(V1,Ade),e(Ade,UAo),e(V1,JAo),e(V1,Nj),e(Nj,YAo),e(V1,KAo),e(Q,ZAo),e(Q,X1),e(X1,yde),e(yde,e6o),e(X1,o6o),e(X1,jj),e(jj,r6o),e(X1,t6o),e(Q,a6o),e(Q,z1),e(z1,Lde),e(Lde,n6o),e(z1,s6o),e(z1,Dj),e(Dj,l6o),e(z1,i6o),e(Q,d6o),e(Q,Q1),e(Q1,xde),e(xde,c6o),e(Q1,f6o),e(Q1,Gj),e(Gj,m6o),e(Q1,g6o),e(Q,h6o),e(Q,W1),e(W1,$de),e($de,p6o),e(W1,u6o),e(W1,kde),e(kde,_6o),e(W1,b6o),e(Q,v6o),e(Q,H1),e(H1,Sde),e(Sde,F6o),e(H1,T6o),e(H1,Oj),e(Oj,M6o),e(H1,E6o),e(Q,C6o),e(Q,U1),e(U1,Rde),e(Rde,w6o),e(U1,A6o),e(U1,Vj),e(Vj,y6o),e(U1,L6o),e(Q,x6o),e(Q,J1),e(J1,Bde),e(Bde,$6o),e(J1,k6o),e(J1,Xj),e(Xj,S6o),e(J1,R6o),e(Q,B6o),e(Q,Y1),e(Y1,Pde),e(Pde,P6o),e(Y1,I6o),e(Y1,zj),e(zj,q6o),e(Y1,N6o),e(Ye,j6o),e(Ye,K1),e(K1,D6o),e(K1,Ide),e(Ide,G6o),e(K1,O6o),e(K1,qde),e(qde,V6o),e(Ye,X6o),M(Z1,Ye,null),b(f,bIe,_),b(f,Ri,_),e(Ri,eb),e(eb,Nde),M(z0,Nde,null),e(Ri,z6o),e(Ri,jde),e(jde,Q6o),b(f,vIe,_),b(f,So,_),M(Q0,So,null),e(So,W6o),e(So,Bi),e(Bi,H6o),e(Bi,Qj),e(Qj,U6o),e(Bi,J6o),e(Bi,Wj),e(Wj,Y6o),e(Bi,K6o),e(So,Z6o),e(So,W0),e(W0,e0o),e(W0,Dde),e(Dde,o0o),e(W0,r0o),e(So,t0o),e(So,nt),M(H0,nt,null),e(nt,a0o),e(nt,Gde),e(Gde,n0o),e(nt,s0o),e(nt,Pi),e(Pi,l0o),e(Pi,Ode),e(Ode,i0o),e(Pi,d0o),e(Pi,Hj),e(Hj,c0o),e(Pi,f0o),e(nt,m0o),M(ob,nt,null),e(So,g0o),e(So,Ke),M(U0,Ke,null),e(Ke,h0o),e(Ke,Vde),e(Vde,p0o),e(Ke,u0o),e(Ke,$a),e($a,_0o),e($a,Xde),e(Xde,b0o),e($a,v0o),e($a,zde),e(zde,F0o),e($a,T0o),e($a,Qde),e(Qde,M0o),e($a,E0o),e(Ke,C0o),e(Ke,he),e(he,rb),e(rb,Wde),e(Wde,w0o),e(rb,A0o),e(rb,Uj),e(Uj,y0o),e(rb,L0o),e(he,x0o),e(he,tb),e(tb,Hde),e(Hde,$0o),e(tb,k0o),e(tb,Jj),e(Jj,S0o),e(tb,R0o),e(he,B0o),e(he,ab),e(ab,Ude),e(Ude,P0o),e(ab,I0o),e(ab,Yj),e(Yj,q0o),e(ab,N0o),e(he,j0o),e(he,nb),e(nb,Jde),e(Jde,D0o),e(nb,G0o),e(nb,Kj),e(Kj,O0o),e(nb,V0o),e(he,X0o),e(he,sb),e(sb,Yde),e(Yde,z0o),e(sb,Q0o),e(sb,Zj),e(Zj,W0o),e(sb,H0o),e(he,U0o),e(he,lb),e(lb,Kde),e(Kde,J0o),e(lb,Y0o),e(lb,eD),e(eD,K0o),e(lb,Z0o),e(he,eyo),e(he,ib),e(ib,Zde),e(Zde,oyo),e(ib,ryo),e(ib,oD),e(oD,tyo),e(ib,ayo),e(he,nyo),e(he,db),e(db,ece),e(ece,syo),e(db,lyo),e(db,rD),e(rD,iyo),e(db,dyo),e(he,cyo),e(he,cb),e(cb,oce),e(oce,fyo),e(cb,myo),e(cb,tD),e(tD,gyo),e(cb,hyo),e(he,pyo),e(he,fb),e(fb,rce),e(rce,uyo),e(fb,_yo),e(fb,aD),e(aD,byo),e(fb,vyo),e(he,Fyo),e(he,mb),e(mb,tce),e(tce,Tyo),e(mb,Myo),e(mb,nD),e(nD,Eyo),e(mb,Cyo),e(he,wyo),e(he,gb),e(gb,ace),e(ace,Ayo),e(gb,yyo),e(gb,sD),e(sD,Lyo),e(gb,xyo),e(he,$yo),e(he,hb),e(hb,nce),e(nce,kyo),e(hb,Syo),e(hb,lD),e(lD,Ryo),e(hb,Byo),e(he,Pyo),e(he,pb),e(pb,sce),e(sce,Iyo),e(pb,qyo),e(pb,iD),e(iD,Nyo),e(pb,jyo),e(he,Dyo),e(he,ub),e(ub,lce),e(lce,Gyo),e(ub,Oyo),e(ub,dD),e(dD,Vyo),e(ub,Xyo),e(he,zyo),e(he,_b),e(_b,ice),e(ice,Qyo),e(_b,Wyo),e(_b,cD),e(cD,Hyo),e(_b,Uyo),e(he,Jyo),e(he,bb),e(bb,dce),e(dce,Yyo),e(bb,Kyo),e(bb,fD),e(fD,Zyo),e(bb,eLo),e(Ke,oLo),e(Ke,vb),e(vb,rLo),e(vb,cce),e(cce,tLo),e(vb,aLo),e(vb,fce),e(fce,nLo),e(Ke,sLo),M(Fb,Ke,null),b(f,FIe,_),b(f,Ii,_),e(Ii,Tb),e(Tb,mce),M(J0,mce,null),e(Ii,lLo),e(Ii,gce),e(gce,iLo),b(f,TIe,_),b(f,Ro,_),M(Y0,Ro,null),e(Ro,dLo),e(Ro,qi),e(qi,cLo),e(qi,mD),e(mD,fLo),e(qi,mLo),e(qi,gD),e(gD,gLo),e(qi,hLo),e(Ro,pLo),e(Ro,K0),e(K0,uLo),e(K0,hce),e(hce,_Lo),e(K0,bLo),e(Ro,vLo),e(Ro,st),M(Z0,st,null),e(st,FLo),e(st,pce),e(pce,TLo),e(st,MLo),e(st,Ni),e(Ni,ELo),e(Ni,uce),e(uce,CLo),e(Ni,wLo),e(Ni,hD),e(hD,ALo),e(Ni,yLo),e(st,LLo),M(Mb,st,null),e(Ro,xLo),e(Ro,Ze),M(ey,Ze,null),e(Ze,$Lo),e(Ze,_ce),e(_ce,kLo),e(Ze,SLo),e(Ze,ka),e(ka,RLo),e(ka,bce),e(bce,BLo),e(ka,PLo),e(ka,vce),e(vce,ILo),e(ka,qLo),e(ka,Fce),e(Fce,NLo),e(ka,jLo),e(Ze,DLo),e(Ze,q),e(q,Eb),e(Eb,Tce),e(Tce,GLo),e(Eb,OLo),e(Eb,pD),e(pD,VLo),e(Eb,XLo),e(q,zLo),e(q,Cb),e(Cb,Mce),e(Mce,QLo),e(Cb,WLo),e(Cb,uD),e(uD,HLo),e(Cb,ULo),e(q,JLo),e(q,wb),e(wb,Ece),e(Ece,YLo),e(wb,KLo),e(wb,_D),e(_D,ZLo),e(wb,e8o),e(q,o8o),e(q,Ab),e(Ab,Cce),e(Cce,r8o),e(Ab,t8o),e(Ab,bD),e(bD,a8o),e(Ab,n8o),e(q,s8o),e(q,yb),e(yb,wce),e(wce,l8o),e(yb,i8o),e(yb,vD),e(vD,d8o),e(yb,c8o),e(q,f8o),e(q,Lb),e(Lb,Ace),e(Ace,m8o),e(Lb,g8o),e(Lb,FD),e(FD,h8o),e(Lb,p8o),e(q,u8o),e(q,xb),e(xb,yce),e(yce,_8o),e(xb,b8o),e(xb,TD),e(TD,v8o),e(xb,F8o),e(q,T8o),e(q,$b),e($b,Lce),e(Lce,M8o),e($b,E8o),e($b,MD),e(MD,C8o),e($b,w8o),e(q,A8o),e(q,kb),e(kb,xce),e(xce,y8o),e(kb,L8o),e(kb,ED),e(ED,x8o),e(kb,$8o),e(q,k8o),e(q,Sb),e(Sb,$ce),e($ce,S8o),e(Sb,R8o),e(Sb,CD),e(CD,B8o),e(Sb,P8o),e(q,I8o),e(q,Rb),e(Rb,kce),e(kce,q8o),e(Rb,N8o),e(Rb,wD),e(wD,j8o),e(Rb,D8o),e(q,G8o),e(q,Bb),e(Bb,Sce),e(Sce,O8o),e(Bb,V8o),e(Bb,AD),e(AD,X8o),e(Bb,z8o),e(q,Q8o),e(q,Pb),e(Pb,Rce),e(Rce,W8o),e(Pb,H8o),e(Pb,yD),e(yD,U8o),e(Pb,J8o),e(q,Y8o),e(q,Ib),e(Ib,Bce),e(Bce,K8o),e(Ib,Z8o),e(Ib,LD),e(LD,exo),e(Ib,oxo),e(q,rxo),e(q,qb),e(qb,Pce),e(Pce,txo),e(qb,axo),e(qb,xD),e(xD,nxo),e(qb,sxo),e(q,lxo),e(q,Nb),e(Nb,Ice),e(Ice,ixo),e(Nb,dxo),e(Nb,$D),e($D,cxo),e(Nb,fxo),e(q,mxo),e(q,jb),e(jb,qce),e(qce,gxo),e(jb,hxo),e(jb,kD),e(kD,pxo),e(jb,uxo),e(q,_xo),e(q,Db),e(Db,Nce),e(Nce,bxo),e(Db,vxo),e(Db,SD),e(SD,Fxo),e(Db,Txo),e(q,Mxo),e(q,Gb),e(Gb,jce),e(jce,Exo),e(Gb,Cxo),e(Gb,RD),e(RD,wxo),e(Gb,Axo),e(q,yxo),e(q,Ob),e(Ob,Dce),e(Dce,Lxo),e(Ob,xxo),e(Ob,BD),e(BD,$xo),e(Ob,kxo),e(q,Sxo),e(q,Vb),e(Vb,Gce),e(Gce,Rxo),e(Vb,Bxo),e(Vb,PD),e(PD,Pxo),e(Vb,Ixo),e(q,qxo),e(q,Xb),e(Xb,Oce),e(Oce,Nxo),e(Xb,jxo),e(Xb,ID),e(ID,Dxo),e(Xb,Gxo),e(q,Oxo),e(q,zb),e(zb,Vce),e(Vce,Vxo),e(zb,Xxo),e(zb,qD),e(qD,zxo),e(zb,Qxo),e(q,Wxo),e(q,Qb),e(Qb,Xce),e(Xce,Hxo),e(Qb,Uxo),e(Qb,ND),e(ND,Jxo),e(Qb,Yxo),e(q,Kxo),e(q,Wb),e(Wb,zce),e(zce,Zxo),e(Wb,e9o),e(Wb,jD),e(jD,o9o),e(Wb,r9o),e(q,t9o),e(q,Hb),e(Hb,Qce),e(Qce,a9o),e(Hb,n9o),e(Hb,DD),e(DD,s9o),e(Hb,l9o),e(q,i9o),e(q,Ub),e(Ub,Wce),e(Wce,d9o),e(Ub,c9o),e(Ub,GD),e(GD,f9o),e(Ub,m9o),e(q,g9o),e(q,Jb),e(Jb,Hce),e(Hce,h9o),e(Jb,p9o),e(Jb,OD),e(OD,u9o),e(Jb,_9o),e(q,b9o),e(q,Yb),e(Yb,Uce),e(Uce,v9o),e(Yb,F9o),e(Yb,VD),e(VD,T9o),e(Yb,M9o),e(q,E9o),e(q,Kb),e(Kb,Jce),e(Jce,C9o),e(Kb,w9o),e(Kb,XD),e(XD,A9o),e(Kb,y9o),e(q,L9o),e(q,Zb),e(Zb,Yce),e(Yce,x9o),e(Zb,$9o),e(Zb,zD),e(zD,k9o),e(Zb,S9o),e(q,R9o),e(q,e4),e(e4,Kce),e(Kce,B9o),e(e4,P9o),e(e4,QD),e(QD,I9o),e(e4,q9o),e(q,N9o),e(q,o4),e(o4,Zce),e(Zce,j9o),e(o4,D9o),e(o4,WD),e(WD,G9o),e(o4,O9o),e(q,V9o),e(q,r4),e(r4,efe),e(efe,X9o),e(r4,z9o),e(r4,HD),e(HD,Q9o),e(r4,W9o),e(q,H9o),e(q,t4),e(t4,ofe),e(ofe,U9o),e(t4,J9o),e(t4,UD),e(UD,Y9o),e(t4,K9o),e(q,Z9o),e(q,a4),e(a4,rfe),e(rfe,e$o),e(a4,o$o),e(a4,JD),e(JD,r$o),e(a4,t$o),e(q,a$o),e(q,n4),e(n4,tfe),e(tfe,n$o),e(n4,s$o),e(n4,YD),e(YD,l$o),e(n4,i$o),e(q,d$o),e(q,s4),e(s4,afe),e(afe,c$o),e(s4,f$o),e(s4,KD),e(KD,m$o),e(s4,g$o),e(q,h$o),e(q,l4),e(l4,nfe),e(nfe,p$o),e(l4,u$o),e(l4,ZD),e(ZD,_$o),e(l4,b$o),e(q,v$o),e(q,i4),e(i4,sfe),e(sfe,F$o),e(i4,T$o),e(i4,eG),e(eG,M$o),e(i4,E$o),e(q,C$o),e(q,d4),e(d4,lfe),e(lfe,w$o),e(d4,A$o),e(d4,oG),e(oG,y$o),e(d4,L$o),e(q,x$o),e(q,c4),e(c4,ife),e(ife,$$o),e(c4,k$o),e(c4,rG),e(rG,S$o),e(c4,R$o),e(q,B$o),e(q,f4),e(f4,dfe),e(dfe,P$o),e(f4,I$o),e(f4,tG),e(tG,q$o),e(f4,N$o),e(q,j$o),e(q,m4),e(m4,cfe),e(cfe,D$o),e(m4,G$o),e(m4,aG),e(aG,O$o),e(m4,V$o),e(q,X$o),e(q,g4),e(g4,ffe),e(ffe,z$o),e(g4,Q$o),e(g4,nG),e(nG,W$o),e(g4,H$o),e(q,U$o),e(q,h4),e(h4,mfe),e(mfe,J$o),e(h4,Y$o),e(h4,sG),e(sG,K$o),e(h4,Z$o),e(q,eko),e(q,p4),e(p4,gfe),e(gfe,oko),e(p4,rko),e(p4,lG),e(lG,tko),e(p4,ako),e(Ze,nko),e(Ze,u4),e(u4,sko),e(u4,hfe),e(hfe,lko),e(u4,iko),e(u4,pfe),e(pfe,dko),e(Ze,cko),M(_4,Ze,null),b(f,MIe,_),b(f,ji,_),e(ji,b4),e(b4,ufe),M(oy,ufe,null),e(ji,fko),e(ji,_fe),e(_fe,mko),b(f,EIe,_),b(f,Bo,_),M(ry,Bo,null),e(Bo,gko),e(Bo,Di),e(Di,hko),e(Di,iG),e(iG,pko),e(Di,uko),e(Di,dG),e(dG,_ko),e(Di,bko),e(Bo,vko),e(Bo,ty),e(ty,Fko),e(ty,bfe),e(bfe,Tko),e(ty,Mko),e(Bo,Eko),e(Bo,lt),M(ay,lt,null),e(lt,Cko),e(lt,vfe),e(vfe,wko),e(lt,Ako),e(lt,Gi),e(Gi,yko),e(Gi,Ffe),e(Ffe,Lko),e(Gi,xko),e(Gi,cG),e(cG,$ko),e(Gi,kko),e(lt,Sko),M(v4,lt,null),e(Bo,Rko),e(Bo,eo),M(ny,eo,null),e(eo,Bko),e(eo,Tfe),e(Tfe,Pko),e(eo,Iko),e(eo,Sa),e(Sa,qko),e(Sa,Mfe),e(Mfe,Nko),e(Sa,jko),e(Sa,Efe),e(Efe,Dko),e(Sa,Gko),e(Sa,Cfe),e(Cfe,Oko),e(Sa,Vko),e(eo,Xko),e(eo,Y),e(Y,F4),e(F4,wfe),e(wfe,zko),e(F4,Qko),e(F4,fG),e(fG,Wko),e(F4,Hko),e(Y,Uko),e(Y,T4),e(T4,Afe),e(Afe,Jko),e(T4,Yko),e(T4,mG),e(mG,Kko),e(T4,Zko),e(Y,eSo),e(Y,M4),e(M4,yfe),e(yfe,oSo),e(M4,rSo),e(M4,gG),e(gG,tSo),e(M4,aSo),e(Y,nSo),e(Y,E4),e(E4,Lfe),e(Lfe,sSo),e(E4,lSo),e(E4,hG),e(hG,iSo),e(E4,dSo),e(Y,cSo),e(Y,C4),e(C4,xfe),e(xfe,fSo),e(C4,mSo),e(C4,pG),e(pG,gSo),e(C4,hSo),e(Y,pSo),e(Y,w4),e(w4,$fe),e($fe,uSo),e(w4,_So),e(w4,uG),e(uG,bSo),e(w4,vSo),e(Y,FSo),e(Y,A4),e(A4,kfe),e(kfe,TSo),e(A4,MSo),e(A4,_G),e(_G,ESo),e(A4,CSo),e(Y,wSo),e(Y,y4),e(y4,Sfe),e(Sfe,ASo),e(y4,ySo),e(y4,bG),e(bG,LSo),e(y4,xSo),e(Y,$So),e(Y,L4),e(L4,Rfe),e(Rfe,kSo),e(L4,SSo),e(L4,vG),e(vG,RSo),e(L4,BSo),e(Y,PSo),e(Y,x4),e(x4,Bfe),e(Bfe,ISo),e(x4,qSo),e(x4,FG),e(FG,NSo),e(x4,jSo),e(Y,DSo),e(Y,$4),e($4,Pfe),e(Pfe,GSo),e($4,OSo),e($4,TG),e(TG,VSo),e($4,XSo),e(Y,zSo),e(Y,k4),e(k4,Ife),e(Ife,QSo),e(k4,WSo),e(k4,MG),e(MG,HSo),e(k4,USo),e(Y,JSo),e(Y,S4),e(S4,qfe),e(qfe,YSo),e(S4,KSo),e(S4,EG),e(EG,ZSo),e(S4,eRo),e(Y,oRo),e(Y,R4),e(R4,Nfe),e(Nfe,rRo),e(R4,tRo),e(R4,CG),e(CG,aRo),e(R4,nRo),e(Y,sRo),e(Y,B4),e(B4,jfe),e(jfe,lRo),e(B4,iRo),e(B4,wG),e(wG,dRo),e(B4,cRo),e(Y,fRo),e(Y,P4),e(P4,Dfe),e(Dfe,mRo),e(P4,gRo),e(P4,AG),e(AG,hRo),e(P4,pRo),e(Y,uRo),e(Y,I4),e(I4,Gfe),e(Gfe,_Ro),e(I4,bRo),e(I4,yG),e(yG,vRo),e(I4,FRo),e(Y,TRo),e(Y,q4),e(q4,Ofe),e(Ofe,MRo),e(q4,ERo),e(q4,LG),e(LG,CRo),e(q4,wRo),e(Y,ARo),e(Y,N4),e(N4,Vfe),e(Vfe,yRo),e(N4,LRo),e(N4,xG),e(xG,xRo),e(N4,$Ro),e(Y,kRo),e(Y,j4),e(j4,Xfe),e(Xfe,SRo),e(j4,RRo),e(j4,$G),e($G,BRo),e(j4,PRo),e(Y,IRo),e(Y,D4),e(D4,zfe),e(zfe,qRo),e(D4,NRo),e(D4,kG),e(kG,jRo),e(D4,DRo),e(Y,GRo),e(Y,G4),e(G4,Qfe),e(Qfe,ORo),e(G4,VRo),e(G4,SG),e(SG,XRo),e(G4,zRo),e(Y,QRo),e(Y,O4),e(O4,Wfe),e(Wfe,WRo),e(O4,HRo),e(O4,RG),e(RG,URo),e(O4,JRo),e(Y,YRo),e(Y,V4),e(V4,Hfe),e(Hfe,KRo),e(V4,ZRo),e(V4,BG),e(BG,eBo),e(V4,oBo),e(Y,rBo),e(Y,X4),e(X4,Ufe),e(Ufe,tBo),e(X4,aBo),e(X4,PG),e(PG,nBo),e(X4,sBo),e(Y,lBo),e(Y,z4),e(z4,Jfe),e(Jfe,iBo),e(z4,dBo),e(z4,IG),e(IG,cBo),e(z4,fBo),e(Y,mBo),e(Y,Q4),e(Q4,Yfe),e(Yfe,gBo),e(Q4,hBo),e(Q4,qG),e(qG,pBo),e(Q4,uBo),e(Y,_Bo),e(Y,W4),e(W4,Kfe),e(Kfe,bBo),e(W4,vBo),e(W4,NG),e(NG,FBo),e(W4,TBo),e(Y,MBo),e(Y,H4),e(H4,Zfe),e(Zfe,EBo),e(H4,CBo),e(H4,jG),e(jG,wBo),e(H4,ABo),e(eo,yBo),e(eo,U4),e(U4,LBo),e(U4,eme),e(eme,xBo),e(U4,$Bo),e(U4,ome),e(ome,kBo),e(eo,SBo),M(J4,eo,null),b(f,CIe,_),b(f,Oi,_),e(Oi,Y4),e(Y4,rme),M(sy,rme,null),e(Oi,RBo),e(Oi,tme),e(tme,BBo),b(f,wIe,_),b(f,Po,_),M(ly,Po,null),e(Po,PBo),e(Po,Vi),e(Vi,IBo),e(Vi,DG),e(DG,qBo),e(Vi,NBo),e(Vi,GG),e(GG,jBo),e(Vi,DBo),e(Po,GBo),e(Po,iy),e(iy,OBo),e(iy,ame),e(ame,VBo),e(iy,XBo),e(Po,zBo),e(Po,it),M(dy,it,null),e(it,QBo),e(it,nme),e(nme,WBo),e(it,HBo),e(it,Xi),e(Xi,UBo),e(Xi,sme),e(sme,JBo),e(Xi,YBo),e(Xi,OG),e(OG,KBo),e(Xi,ZBo),e(it,ePo),M(K4,it,null),e(Po,oPo),e(Po,oo),M(cy,oo,null),e(oo,rPo),e(oo,lme),e(lme,tPo),e(oo,aPo),e(oo,Ra),e(Ra,nPo),e(Ra,ime),e(ime,sPo),e(Ra,lPo),e(Ra,dme),e(dme,iPo),e(Ra,dPo),e(Ra,cme),e(cme,cPo),e(Ra,fPo),e(oo,mPo),e(oo,Yr),e(Yr,Z4),e(Z4,fme),e(fme,gPo),e(Z4,hPo),e(Z4,VG),e(VG,pPo),e(Z4,uPo),e(Yr,_Po),e(Yr,e2),e(e2,mme),e(mme,bPo),e(e2,vPo),e(e2,XG),e(XG,FPo),e(e2,TPo),e(Yr,MPo),e(Yr,o2),e(o2,gme),e(gme,EPo),e(o2,CPo),e(o2,zG),e(zG,wPo),e(o2,APo),e(Yr,yPo),e(Yr,r2),e(r2,hme),e(hme,LPo),e(r2,xPo),e(r2,QG),e(QG,$Po),e(r2,kPo),e(Yr,SPo),e(Yr,t2),e(t2,pme),e(pme,RPo),e(t2,BPo),e(t2,WG),e(WG,PPo),e(t2,IPo),e(oo,qPo),e(oo,a2),e(a2,NPo),e(a2,ume),e(ume,jPo),e(a2,DPo),e(a2,_me),e(_me,GPo),e(oo,OPo),M(n2,oo,null),b(f,AIe,_),b(f,zi,_),e(zi,s2),e(s2,bme),M(fy,bme,null),e(zi,VPo),e(zi,vme),e(vme,XPo),b(f,yIe,_),b(f,Io,_),M(my,Io,null),e(Io,zPo),e(Io,Qi),e(Qi,QPo),e(Qi,HG),e(HG,WPo),e(Qi,HPo),e(Qi,UG),e(UG,UPo),e(Qi,JPo),e(Io,YPo),e(Io,gy),e(gy,KPo),e(gy,Fme),e(Fme,ZPo),e(gy,eIo),e(Io,oIo),e(Io,dt),M(hy,dt,null),e(dt,rIo),e(dt,Tme),e(Tme,tIo),e(dt,aIo),e(dt,Wi),e(Wi,nIo),e(Wi,Mme),e(Mme,sIo),e(Wi,lIo),e(Wi,JG),e(JG,iIo),e(Wi,dIo),e(dt,cIo),M(l2,dt,null),e(Io,fIo),e(Io,ro),M(py,ro,null),e(ro,mIo),e(ro,Eme),e(Eme,gIo),e(ro,hIo),e(ro,Ba),e(Ba,pIo),e(Ba,Cme),e(Cme,uIo),e(Ba,_Io),e(Ba,wme),e(wme,bIo),e(Ba,vIo),e(Ba,Ame),e(Ame,FIo),e(Ba,TIo),e(ro,MIo),e(ro,U),e(U,i2),e(i2,yme),e(yme,EIo),e(i2,CIo),e(i2,YG),e(YG,wIo),e(i2,AIo),e(U,yIo),e(U,d2),e(d2,Lme),e(Lme,LIo),e(d2,xIo),e(d2,KG),e(KG,$Io),e(d2,kIo),e(U,SIo),e(U,c2),e(c2,xme),e(xme,RIo),e(c2,BIo),e(c2,ZG),e(ZG,PIo),e(c2,IIo),e(U,qIo),e(U,f2),e(f2,$me),e($me,NIo),e(f2,jIo),e(f2,eO),e(eO,DIo),e(f2,GIo),e(U,OIo),e(U,m2),e(m2,kme),e(kme,VIo),e(m2,XIo),e(m2,oO),e(oO,zIo),e(m2,QIo),e(U,WIo),e(U,g2),e(g2,Sme),e(Sme,HIo),e(g2,UIo),e(g2,rO),e(rO,JIo),e(g2,YIo),e(U,KIo),e(U,h2),e(h2,Rme),e(Rme,ZIo),e(h2,eqo),e(h2,tO),e(tO,oqo),e(h2,rqo),e(U,tqo),e(U,p2),e(p2,Bme),e(Bme,aqo),e(p2,nqo),e(p2,aO),e(aO,sqo),e(p2,lqo),e(U,iqo),e(U,u2),e(u2,Pme),e(Pme,dqo),e(u2,cqo),e(u2,nO),e(nO,fqo),e(u2,mqo),e(U,gqo),e(U,_2),e(_2,Ime),e(Ime,hqo),e(_2,pqo),e(_2,sO),e(sO,uqo),e(_2,_qo),e(U,bqo),e(U,b2),e(b2,qme),e(qme,vqo),e(b2,Fqo),e(b2,lO),e(lO,Tqo),e(b2,Mqo),e(U,Eqo),e(U,v2),e(v2,Nme),e(Nme,Cqo),e(v2,wqo),e(v2,iO),e(iO,Aqo),e(v2,yqo),e(U,Lqo),e(U,F2),e(F2,jme),e(jme,xqo),e(F2,$qo),e(F2,dO),e(dO,kqo),e(F2,Sqo),e(U,Rqo),e(U,T2),e(T2,Dme),e(Dme,Bqo),e(T2,Pqo),e(T2,cO),e(cO,Iqo),e(T2,qqo),e(U,Nqo),e(U,M2),e(M2,Gme),e(Gme,jqo),e(M2,Dqo),e(M2,fO),e(fO,Gqo),e(M2,Oqo),e(U,Vqo),e(U,E2),e(E2,Ome),e(Ome,Xqo),e(E2,zqo),e(E2,mO),e(mO,Qqo),e(E2,Wqo),e(U,Hqo),e(U,C2),e(C2,Vme),e(Vme,Uqo),e(C2,Jqo),e(C2,gO),e(gO,Yqo),e(C2,Kqo),e(U,Zqo),e(U,w2),e(w2,Xme),e(Xme,eNo),e(w2,oNo),e(w2,hO),e(hO,rNo),e(w2,tNo),e(U,aNo),e(U,A2),e(A2,zme),e(zme,nNo),e(A2,sNo),e(A2,pO),e(pO,lNo),e(A2,iNo),e(U,dNo),e(U,y2),e(y2,Qme),e(Qme,cNo),e(y2,fNo),e(y2,uO),e(uO,mNo),e(y2,gNo),e(U,hNo),e(U,L2),e(L2,Wme),e(Wme,pNo),e(L2,uNo),e(L2,_O),e(_O,_No),e(L2,bNo),e(U,vNo),e(U,x2),e(x2,Hme),e(Hme,FNo),e(x2,TNo),e(x2,bO),e(bO,MNo),e(x2,ENo),e(U,CNo),e(U,$2),e($2,Ume),e(Ume,wNo),e($2,ANo),e($2,vO),e(vO,yNo),e($2,LNo),e(U,xNo),e(U,k2),e(k2,Jme),e(Jme,$No),e(k2,kNo),e(k2,FO),e(FO,SNo),e(k2,RNo),e(U,BNo),e(U,S2),e(S2,Yme),e(Yme,PNo),e(S2,INo),e(S2,TO),e(TO,qNo),e(S2,NNo),e(U,jNo),e(U,R2),e(R2,Kme),e(Kme,DNo),e(R2,GNo),e(R2,MO),e(MO,ONo),e(R2,VNo),e(U,XNo),e(U,B2),e(B2,Zme),e(Zme,zNo),e(B2,QNo),e(B2,EO),e(EO,WNo),e(B2,HNo),e(U,UNo),e(U,P2),e(P2,ege),e(ege,JNo),e(P2,YNo),e(P2,CO),e(CO,KNo),e(P2,ZNo),e(U,ejo),e(U,I2),e(I2,oge),e(oge,ojo),e(I2,rjo),e(I2,wO),e(wO,tjo),e(I2,ajo),e(U,njo),e(U,q2),e(q2,rge),e(rge,sjo),e(q2,ljo),e(q2,AO),e(AO,ijo),e(q2,djo),e(U,cjo),e(U,N2),e(N2,tge),e(tge,fjo),e(N2,mjo),e(N2,yO),e(yO,gjo),e(N2,hjo),e(U,pjo),e(U,j2),e(j2,age),e(age,ujo),e(j2,_jo),e(j2,LO),e(LO,bjo),e(j2,vjo),e(U,Fjo),e(U,D2),e(D2,nge),e(nge,Tjo),e(D2,Mjo),e(D2,xO),e(xO,Ejo),e(D2,Cjo),e(ro,wjo),e(ro,G2),e(G2,Ajo),e(G2,sge),e(sge,yjo),e(G2,Ljo),e(G2,lge),e(lge,xjo),e(ro,$jo),M(O2,ro,null),b(f,LIe,_),b(f,Hi,_),e(Hi,V2),e(V2,ige),M(uy,ige,null),e(Hi,kjo),e(Hi,dge),e(dge,Sjo),b(f,xIe,_),b(f,qo,_),M(_y,qo,null),e(qo,Rjo),e(qo,Ui),e(Ui,Bjo),e(Ui,$O),e($O,Pjo),e(Ui,Ijo),e(Ui,kO),e(kO,qjo),e(Ui,Njo),e(qo,jjo),e(qo,by),e(by,Djo),e(by,cge),e(cge,Gjo),e(by,Ojo),e(qo,Vjo),e(qo,ct),M(vy,ct,null),e(ct,Xjo),e(ct,fge),e(fge,zjo),e(ct,Qjo),e(ct,Ji),e(Ji,Wjo),e(Ji,mge),e(mge,Hjo),e(Ji,Ujo),e(Ji,SO),e(SO,Jjo),e(Ji,Yjo),e(ct,Kjo),M(X2,ct,null),e(qo,Zjo),e(qo,to),M(Fy,to,null),e(to,eDo),e(to,gge),e(gge,oDo),e(to,rDo),e(to,Pa),e(Pa,tDo),e(Pa,hge),e(hge,aDo),e(Pa,nDo),e(Pa,pge),e(pge,sDo),e(Pa,lDo),e(Pa,uge),e(uge,iDo),e(Pa,dDo),e(to,cDo),e(to,O),e(O,z2),e(z2,_ge),e(_ge,fDo),e(z2,mDo),e(z2,RO),e(RO,gDo),e(z2,hDo),e(O,pDo),e(O,Q2),e(Q2,bge),e(bge,uDo),e(Q2,_Do),e(Q2,BO),e(BO,bDo),e(Q2,vDo),e(O,FDo),e(O,W2),e(W2,vge),e(vge,TDo),e(W2,MDo),e(W2,PO),e(PO,EDo),e(W2,CDo),e(O,wDo),e(O,H2),e(H2,Fge),e(Fge,ADo),e(H2,yDo),e(H2,IO),e(IO,LDo),e(H2,xDo),e(O,$Do),e(O,U2),e(U2,Tge),e(Tge,kDo),e(U2,SDo),e(U2,qO),e(qO,RDo),e(U2,BDo),e(O,PDo),e(O,J2),e(J2,Mge),e(Mge,IDo),e(J2,qDo),e(J2,NO),e(NO,NDo),e(J2,jDo),e(O,DDo),e(O,Y2),e(Y2,Ege),e(Ege,GDo),e(Y2,ODo),e(Y2,jO),e(jO,VDo),e(Y2,XDo),e(O,zDo),e(O,K2),e(K2,Cge),e(Cge,QDo),e(K2,WDo),e(K2,DO),e(DO,HDo),e(K2,UDo),e(O,JDo),e(O,Z2),e(Z2,wge),e(wge,YDo),e(Z2,KDo),e(Z2,GO),e(GO,ZDo),e(Z2,eGo),e(O,oGo),e(O,ev),e(ev,Age),e(Age,rGo),e(ev,tGo),e(ev,OO),e(OO,aGo),e(ev,nGo),e(O,sGo),e(O,ov),e(ov,yge),e(yge,lGo),e(ov,iGo),e(ov,VO),e(VO,dGo),e(ov,cGo),e(O,fGo),e(O,rv),e(rv,Lge),e(Lge,mGo),e(rv,gGo),e(rv,XO),e(XO,hGo),e(rv,pGo),e(O,uGo),e(O,tv),e(tv,xge),e(xge,_Go),e(tv,bGo),e(tv,zO),e(zO,vGo),e(tv,FGo),e(O,TGo),e(O,av),e(av,$ge),e($ge,MGo),e(av,EGo),e(av,QO),e(QO,CGo),e(av,wGo),e(O,AGo),e(O,nv),e(nv,kge),e(kge,yGo),e(nv,LGo),e(nv,WO),e(WO,xGo),e(nv,$Go),e(O,kGo),e(O,sv),e(sv,Sge),e(Sge,SGo),e(sv,RGo),e(sv,HO),e(HO,BGo),e(sv,PGo),e(O,IGo),e(O,lv),e(lv,Rge),e(Rge,qGo),e(lv,NGo),e(lv,UO),e(UO,jGo),e(lv,DGo),e(O,GGo),e(O,iv),e(iv,Bge),e(Bge,OGo),e(iv,VGo),e(iv,JO),e(JO,XGo),e(iv,zGo),e(O,QGo),e(O,dv),e(dv,Pge),e(Pge,WGo),e(dv,HGo),e(dv,YO),e(YO,UGo),e(dv,JGo),e(O,YGo),e(O,cv),e(cv,Ige),e(Ige,KGo),e(cv,ZGo),e(cv,KO),e(KO,eOo),e(cv,oOo),e(O,rOo),e(O,fv),e(fv,qge),e(qge,tOo),e(fv,aOo),e(fv,ZO),e(ZO,nOo),e(fv,sOo),e(O,lOo),e(O,mv),e(mv,Nge),e(Nge,iOo),e(mv,dOo),e(mv,eV),e(eV,cOo),e(mv,fOo),e(O,mOo),e(O,gv),e(gv,jge),e(jge,gOo),e(gv,hOo),e(gv,oV),e(oV,pOo),e(gv,uOo),e(O,_Oo),e(O,hv),e(hv,Dge),e(Dge,bOo),e(hv,vOo),e(hv,rV),e(rV,FOo),e(hv,TOo),e(O,MOo),e(O,pv),e(pv,Gge),e(Gge,EOo),e(pv,COo),e(pv,tV),e(tV,wOo),e(pv,AOo),e(O,yOo),e(O,uv),e(uv,Oge),e(Oge,LOo),e(uv,xOo),e(uv,aV),e(aV,$Oo),e(uv,kOo),e(O,SOo),e(O,_v),e(_v,Vge),e(Vge,ROo),e(_v,BOo),e(_v,nV),e(nV,POo),e(_v,IOo),e(O,qOo),e(O,bv),e(bv,Xge),e(Xge,NOo),e(bv,jOo),e(bv,sV),e(sV,DOo),e(bv,GOo),e(O,OOo),e(O,vv),e(vv,zge),e(zge,VOo),e(vv,XOo),e(vv,lV),e(lV,zOo),e(vv,QOo),e(O,WOo),e(O,Fv),e(Fv,Qge),e(Qge,HOo),e(Fv,UOo),e(Fv,iV),e(iV,JOo),e(Fv,YOo),e(O,KOo),e(O,Tv),e(Tv,Wge),e(Wge,ZOo),e(Tv,eVo),e(Tv,dV),e(dV,oVo),e(Tv,rVo),e(O,tVo),e(O,Mv),e(Mv,Hge),e(Hge,aVo),e(Mv,nVo),e(Mv,cV),e(cV,sVo),e(Mv,lVo),e(O,iVo),e(O,Ev),e(Ev,Uge),e(Uge,dVo),e(Ev,cVo),e(Ev,fV),e(fV,fVo),e(Ev,mVo),e(O,gVo),e(O,Cv),e(Cv,Jge),e(Jge,hVo),e(Cv,pVo),e(Cv,mV),e(mV,uVo),e(Cv,_Vo),e(O,bVo),e(O,wv),e(wv,Yge),e(Yge,vVo),e(wv,FVo),e(wv,gV),e(gV,TVo),e(wv,MVo),e(O,EVo),e(O,Av),e(Av,Kge),e(Kge,CVo),e(Av,wVo),e(Av,hV),e(hV,AVo),e(Av,yVo),e(O,LVo),e(O,yv),e(yv,Zge),e(Zge,xVo),e(yv,$Vo),e(yv,pV),e(pV,kVo),e(yv,SVo),e(O,RVo),e(O,Lv),e(Lv,ehe),e(ehe,BVo),e(Lv,PVo),e(Lv,uV),e(uV,IVo),e(Lv,qVo),e(O,NVo),e(O,xv),e(xv,ohe),e(ohe,jVo),e(xv,DVo),e(xv,_V),e(_V,GVo),e(xv,OVo),e(to,VVo),e(to,$v),e($v,XVo),e($v,rhe),e(rhe,zVo),e($v,QVo),e($v,the),e(the,WVo),e(to,HVo),M(kv,to,null),b(f,$Ie,_),b(f,Yi,_),e(Yi,Sv),e(Sv,ahe),M(Ty,ahe,null),e(Yi,UVo),e(Yi,nhe),e(nhe,JVo),b(f,kIe,_),b(f,No,_),M(My,No,null),e(No,YVo),e(No,Ki),e(Ki,KVo),e(Ki,bV),e(bV,ZVo),e(Ki,eXo),e(Ki,vV),e(vV,oXo),e(Ki,rXo),e(No,tXo),e(No,Ey),e(Ey,aXo),e(Ey,she),e(she,nXo),e(Ey,sXo),e(No,lXo),e(No,ft),M(Cy,ft,null),e(ft,iXo),e(ft,lhe),e(lhe,dXo),e(ft,cXo),e(ft,Zi),e(Zi,fXo),e(Zi,ihe),e(ihe,mXo),e(Zi,gXo),e(Zi,FV),e(FV,hXo),e(Zi,pXo),e(ft,uXo),M(Rv,ft,null),e(No,_Xo),e(No,ao),M(wy,ao,null),e(ao,bXo),e(ao,dhe),e(dhe,vXo),e(ao,FXo),e(ao,Ia),e(Ia,TXo),e(Ia,che),e(che,MXo),e(Ia,EXo),e(Ia,fhe),e(fhe,CXo),e(Ia,wXo),e(Ia,mhe),e(mhe,AXo),e(Ia,yXo),e(ao,LXo),e(ao,ghe),e(ghe,Bv),e(Bv,hhe),e(hhe,xXo),e(Bv,$Xo),e(Bv,TV),e(TV,kXo),e(Bv,SXo),e(ao,RXo),e(ao,Pv),e(Pv,BXo),e(Pv,phe),e(phe,PXo),e(Pv,IXo),e(Pv,uhe),e(uhe,qXo),e(ao,NXo),M(Iv,ao,null),b(f,SIe,_),b(f,ed,_),e(ed,qv),e(qv,_he),M(Ay,_he,null),e(ed,jXo),e(ed,bhe),e(bhe,DXo),b(f,RIe,_),b(f,jo,_),M(yy,jo,null),e(jo,GXo),e(jo,od),e(od,OXo),e(od,MV),e(MV,VXo),e(od,XXo),e(od,EV),e(EV,zXo),e(od,QXo),e(jo,WXo),e(jo,Ly),e(Ly,HXo),e(Ly,vhe),e(vhe,UXo),e(Ly,JXo),e(jo,YXo),e(jo,mt),M(xy,mt,null),e(mt,KXo),e(mt,Fhe),e(Fhe,ZXo),e(mt,ezo),e(mt,rd),e(rd,ozo),e(rd,The),e(The,rzo),e(rd,tzo),e(rd,CV),e(CV,azo),e(rd,nzo),e(mt,szo),M(Nv,mt,null),e(jo,lzo),e(jo,no),M($y,no,null),e(no,izo),e(no,Mhe),e(Mhe,dzo),e(no,czo),e(no,qa),e(qa,fzo),e(qa,Ehe),e(Ehe,mzo),e(qa,gzo),e(qa,Che),e(Che,hzo),e(qa,pzo),e(qa,whe),e(whe,uzo),e(qa,_zo),e(no,bzo),e(no,Fe),e(Fe,jv),e(jv,Ahe),e(Ahe,vzo),e(jv,Fzo),e(jv,wV),e(wV,Tzo),e(jv,Mzo),e(Fe,Ezo),e(Fe,Dv),e(Dv,yhe),e(yhe,Czo),e(Dv,wzo),e(Dv,AV),e(AV,Azo),e(Dv,yzo),e(Fe,Lzo),e(Fe,Gv),e(Gv,Lhe),e(Lhe,xzo),e(Gv,$zo),e(Gv,yV),e(yV,kzo),e(Gv,Szo),e(Fe,Rzo),e(Fe,Rs),e(Rs,xhe),e(xhe,Bzo),e(Rs,Pzo),e(Rs,LV),e(LV,Izo),e(Rs,qzo),e(Rs,xV),e(xV,Nzo),e(Rs,jzo),e(Fe,Dzo),e(Fe,Ov),e(Ov,$he),e($he,Gzo),e(Ov,Ozo),e(Ov,$V),e($V,Vzo),e(Ov,Xzo),e(Fe,zzo),e(Fe,gt),e(gt,khe),e(khe,Qzo),e(gt,Wzo),e(gt,kV),e(kV,Hzo),e(gt,Uzo),e(gt,SV),e(SV,Jzo),e(gt,Yzo),e(gt,RV),e(RV,Kzo),e(gt,Zzo),e(Fe,eQo),e(Fe,Vv),e(Vv,She),e(She,oQo),e(Vv,rQo),e(Vv,BV),e(BV,tQo),e(Vv,aQo),e(Fe,nQo),e(Fe,Xv),e(Xv,Rhe),e(Rhe,sQo),e(Xv,lQo),e(Xv,PV),e(PV,iQo),e(Xv,dQo),e(Fe,cQo),e(Fe,zv),e(zv,Bhe),e(Bhe,fQo),e(zv,mQo),e(zv,IV),e(IV,gQo),e(zv,hQo),e(Fe,pQo),e(Fe,Qv),e(Qv,Phe),e(Phe,uQo),e(Qv,_Qo),e(Qv,qV),e(qV,bQo),e(Qv,vQo),e(Fe,FQo),e(Fe,Wv),e(Wv,Ihe),e(Ihe,TQo),e(Wv,MQo),e(Wv,NV),e(NV,EQo),e(Wv,CQo),e(Fe,wQo),e(Fe,Hv),e(Hv,qhe),e(qhe,AQo),e(Hv,yQo),e(Hv,jV),e(jV,LQo),e(Hv,xQo),e(Fe,$Qo),e(Fe,Uv),e(Uv,Nhe),e(Nhe,kQo),e(Uv,SQo),e(Uv,DV),e(DV,RQo),e(Uv,BQo),e(no,PQo),e(no,Jv),e(Jv,IQo),e(Jv,jhe),e(jhe,qQo),e(Jv,NQo),e(Jv,Dhe),e(Dhe,jQo),e(no,DQo),M(Yv,no,null),b(f,BIe,_),b(f,td,_),e(td,Kv),e(Kv,Ghe),M(ky,Ghe,null),e(td,GQo),e(td,Ohe),e(Ohe,OQo),b(f,PIe,_),b(f,Do,_),M(Sy,Do,null),e(Do,VQo),e(Do,ad),e(ad,XQo),e(ad,GV),e(GV,zQo),e(ad,QQo),e(ad,OV),e(OV,WQo),e(ad,HQo),e(Do,UQo),e(Do,Ry),e(Ry,JQo),e(Ry,Vhe),e(Vhe,YQo),e(Ry,KQo),e(Do,ZQo),e(Do,ht),M(By,ht,null),e(ht,eWo),e(ht,Xhe),e(Xhe,oWo),e(ht,rWo),e(ht,nd),e(nd,tWo),e(nd,zhe),e(zhe,aWo),e(nd,nWo),e(nd,VV),e(VV,sWo),e(nd,lWo),e(ht,iWo),M(Zv,ht,null),e(Do,dWo),e(Do,so),M(Py,so,null),e(so,cWo),e(so,Qhe),e(Qhe,fWo),e(so,mWo),e(so,Na),e(Na,gWo),e(Na,Whe),e(Whe,hWo),e(Na,pWo),e(Na,Hhe),e(Hhe,uWo),e(Na,_Wo),e(Na,Uhe),e(Uhe,bWo),e(Na,vWo),e(so,FWo),e(so,Jhe),e(Jhe,eF),e(eF,Yhe),e(Yhe,TWo),e(eF,MWo),e(eF,XV),e(XV,EWo),e(eF,CWo),e(so,wWo),e(so,oF),e(oF,AWo),e(oF,Khe),e(Khe,yWo),e(oF,LWo),e(oF,Zhe),e(Zhe,xWo),e(so,$Wo),M(rF,so,null),b(f,IIe,_),b(f,sd,_),e(sd,tF),e(tF,epe),M(Iy,epe,null),e(sd,kWo),e(sd,ope),e(ope,SWo),b(f,qIe,_),b(f,Go,_),M(qy,Go,null),e(Go,RWo),e(Go,ld),e(ld,BWo),e(ld,zV),e(zV,PWo),e(ld,IWo),e(ld,QV),e(QV,qWo),e(ld,NWo),e(Go,jWo),e(Go,Ny),e(Ny,DWo),e(Ny,rpe),e(rpe,GWo),e(Ny,OWo),e(Go,VWo),e(Go,pt),M(jy,pt,null),e(pt,XWo),e(pt,tpe),e(tpe,zWo),e(pt,QWo),e(pt,id),e(id,WWo),e(id,ape),e(ape,HWo),e(id,UWo),e(id,WV),e(WV,JWo),e(id,YWo),e(pt,KWo),M(aF,pt,null),e(Go,ZWo),e(Go,lo),M(Dy,lo,null),e(lo,eHo),e(lo,npe),e(npe,oHo),e(lo,rHo),e(lo,ja),e(ja,tHo),e(ja,spe),e(spe,aHo),e(ja,nHo),e(ja,lpe),e(lpe,sHo),e(ja,lHo),e(ja,ipe),e(ipe,iHo),e(ja,dHo),e(lo,cHo),e(lo,Ne),e(Ne,nF),e(nF,dpe),e(dpe,fHo),e(nF,mHo),e(nF,HV),e(HV,gHo),e(nF,hHo),e(Ne,pHo),e(Ne,sF),e(sF,cpe),e(cpe,uHo),e(sF,_Ho),e(sF,UV),e(UV,bHo),e(sF,vHo),e(Ne,FHo),e(Ne,lF),e(lF,fpe),e(fpe,THo),e(lF,MHo),e(lF,JV),e(JV,EHo),e(lF,CHo),e(Ne,wHo),e(Ne,iF),e(iF,mpe),e(mpe,AHo),e(iF,yHo),e(iF,YV),e(YV,LHo),e(iF,xHo),e(Ne,$Ho),e(Ne,dF),e(dF,gpe),e(gpe,kHo),e(dF,SHo),e(dF,KV),e(KV,RHo),e(dF,BHo),e(Ne,PHo),e(Ne,cF),e(cF,hpe),e(hpe,IHo),e(cF,qHo),e(cF,ZV),e(ZV,NHo),e(cF,jHo),e(Ne,DHo),e(Ne,fF),e(fF,ppe),e(ppe,GHo),e(fF,OHo),e(fF,eX),e(eX,VHo),e(fF,XHo),e(Ne,zHo),e(Ne,mF),e(mF,upe),e(upe,QHo),e(mF,WHo),e(mF,oX),e(oX,HHo),e(mF,UHo),e(lo,JHo),e(lo,gF),e(gF,YHo),e(gF,_pe),e(_pe,KHo),e(gF,ZHo),e(gF,bpe),e(bpe,eUo),e(lo,oUo),M(hF,lo,null),b(f,NIe,_),b(f,dd,_),e(dd,pF),e(pF,vpe),M(Gy,vpe,null),e(dd,rUo),e(dd,Fpe),e(Fpe,tUo),b(f,jIe,_),b(f,Oo,_),M(Oy,Oo,null),e(Oo,aUo),e(Oo,cd),e(cd,nUo),e(cd,rX),e(rX,sUo),e(cd,lUo),e(cd,tX),e(tX,iUo),e(cd,dUo),e(Oo,cUo),e(Oo,Vy),e(Vy,fUo),e(Vy,Tpe),e(Tpe,mUo),e(Vy,gUo),e(Oo,hUo),e(Oo,ut),M(Xy,ut,null),e(ut,pUo),e(ut,Mpe),e(Mpe,uUo),e(ut,_Uo),e(ut,fd),e(fd,bUo),e(fd,Epe),e(Epe,vUo),e(fd,FUo),e(fd,aX),e(aX,TUo),e(fd,MUo),e(ut,EUo),M(uF,ut,null),e(Oo,CUo),e(Oo,io),M(zy,io,null),e(io,wUo),e(io,Cpe),e(Cpe,AUo),e(io,yUo),e(io,Da),e(Da,LUo),e(Da,wpe),e(wpe,xUo),e(Da,$Uo),e(Da,Ape),e(Ape,kUo),e(Da,SUo),e(Da,ype),e(ype,RUo),e(Da,BUo),e(io,PUo),e(io,Ga),e(Ga,_F),e(_F,Lpe),e(Lpe,IUo),e(_F,qUo),e(_F,nX),e(nX,NUo),e(_F,jUo),e(Ga,DUo),e(Ga,bF),e(bF,xpe),e(xpe,GUo),e(bF,OUo),e(bF,sX),e(sX,VUo),e(bF,XUo),e(Ga,zUo),e(Ga,vF),e(vF,$pe),e($pe,QUo),e(vF,WUo),e(vF,lX),e(lX,HUo),e(vF,UUo),e(Ga,JUo),e(Ga,FF),e(FF,kpe),e(kpe,YUo),e(FF,KUo),e(FF,iX),e(iX,ZUo),e(FF,eJo),e(io,oJo),e(io,TF),e(TF,rJo),e(TF,Spe),e(Spe,tJo),e(TF,aJo),e(TF,Rpe),e(Rpe,nJo),e(io,sJo),M(MF,io,null),b(f,DIe,_),b(f,md,_),e(md,EF),e(EF,Bpe),M(Qy,Bpe,null),e(md,lJo),e(md,Ppe),e(Ppe,iJo),b(f,GIe,_),b(f,Vo,_),M(Wy,Vo,null),e(Vo,dJo),e(Vo,gd),e(gd,cJo),e(gd,dX),e(dX,fJo),e(gd,mJo),e(gd,cX),e(cX,gJo),e(gd,hJo),e(Vo,pJo),e(Vo,Hy),e(Hy,uJo),e(Hy,Ipe),e(Ipe,_Jo),e(Hy,bJo),e(Vo,vJo),e(Vo,_t),M(Uy,_t,null),e(_t,FJo),e(_t,qpe),e(qpe,TJo),e(_t,MJo),e(_t,hd),e(hd,EJo),e(hd,Npe),e(Npe,CJo),e(hd,wJo),e(hd,fX),e(fX,AJo),e(hd,yJo),e(_t,LJo),M(CF,_t,null),e(Vo,xJo),e(Vo,co),M(Jy,co,null),e(co,$Jo),e(co,jpe),e(jpe,kJo),e(co,SJo),e(co,Oa),e(Oa,RJo),e(Oa,Dpe),e(Dpe,BJo),e(Oa,PJo),e(Oa,Gpe),e(Gpe,IJo),e(Oa,qJo),e(Oa,Ope),e(Ope,NJo),e(Oa,jJo),e(co,DJo),e(co,je),e(je,wF),e(wF,Vpe),e(Vpe,GJo),e(wF,OJo),e(wF,mX),e(mX,VJo),e(wF,XJo),e(je,zJo),e(je,AF),e(AF,Xpe),e(Xpe,QJo),e(AF,WJo),e(AF,gX),e(gX,HJo),e(AF,UJo),e(je,JJo),e(je,yF),e(yF,zpe),e(zpe,YJo),e(yF,KJo),e(yF,hX),e(hX,ZJo),e(yF,eYo),e(je,oYo),e(je,LF),e(LF,Qpe),e(Qpe,rYo),e(LF,tYo),e(LF,pX),e(pX,aYo),e(LF,nYo),e(je,sYo),e(je,xF),e(xF,Wpe),e(Wpe,lYo),e(xF,iYo),e(xF,uX),e(uX,dYo),e(xF,cYo),e(je,fYo),e(je,$F),e($F,Hpe),e(Hpe,mYo),e($F,gYo),e($F,_X),e(_X,hYo),e($F,pYo),e(je,uYo),e(je,kF),e(kF,Upe),e(Upe,_Yo),e(kF,bYo),e(kF,bX),e(bX,vYo),e(kF,FYo),e(je,TYo),e(je,SF),e(SF,Jpe),e(Jpe,MYo),e(SF,EYo),e(SF,vX),e(vX,CYo),e(SF,wYo),e(co,AYo),e(co,RF),e(RF,yYo),e(RF,Ype),e(Ype,LYo),e(RF,xYo),e(RF,Kpe),e(Kpe,$Yo),e(co,kYo),M(BF,co,null),b(f,OIe,_),b(f,pd,_),e(pd,PF),e(PF,Zpe),M(Yy,Zpe,null),e(pd,SYo),e(pd,eue),e(eue,RYo),b(f,VIe,_),b(f,Xo,_),M(Ky,Xo,null),e(Xo,BYo),e(Xo,ud),e(ud,PYo),e(ud,FX),e(FX,IYo),e(ud,qYo),e(ud,TX),e(TX,NYo),e(ud,jYo),e(Xo,DYo),e(Xo,Zy),e(Zy,GYo),e(Zy,oue),e(oue,OYo),e(Zy,VYo),e(Xo,XYo),e(Xo,bt),M(eL,bt,null),e(bt,zYo),e(bt,rue),e(rue,QYo),e(bt,WYo),e(bt,_d),e(_d,HYo),e(_d,tue),e(tue,UYo),e(_d,JYo),e(_d,MX),e(MX,YYo),e(_d,KYo),e(bt,ZYo),M(IF,bt,null),e(Xo,eKo),e(Xo,fo),M(oL,fo,null),e(fo,oKo),e(fo,aue),e(aue,rKo),e(fo,tKo),e(fo,Va),e(Va,aKo),e(Va,nue),e(nue,nKo),e(Va,sKo),e(Va,sue),e(sue,lKo),e(Va,iKo),e(Va,lue),e(lue,dKo),e(Va,cKo),e(fo,fKo),e(fo,rL),e(rL,qF),e(qF,iue),e(iue,mKo),e(qF,gKo),e(qF,EX),e(EX,hKo),e(qF,pKo),e(rL,uKo),e(rL,NF),e(NF,due),e(due,_Ko),e(NF,bKo),e(NF,CX),e(CX,vKo),e(NF,FKo),e(fo,TKo),e(fo,jF),e(jF,MKo),e(jF,cue),e(cue,EKo),e(jF,CKo),e(jF,fue),e(fue,wKo),e(fo,AKo),M(DF,fo,null),b(f,XIe,_),b(f,bd,_),e(bd,GF),e(GF,mue),M(tL,mue,null),e(bd,yKo),e(bd,gue),e(gue,LKo),b(f,zIe,_),b(f,zo,_),M(aL,zo,null),e(zo,xKo),e(zo,vd),e(vd,$Ko),e(vd,wX),e(wX,kKo),e(vd,SKo),e(vd,AX),e(AX,RKo),e(vd,BKo),e(zo,PKo),e(zo,nL),e(nL,IKo),e(nL,hue),e(hue,qKo),e(nL,NKo),e(zo,jKo),e(zo,vt),M(sL,vt,null),e(vt,DKo),e(vt,pue),e(pue,GKo),e(vt,OKo),e(vt,Fd),e(Fd,VKo),e(Fd,uue),e(uue,XKo),e(Fd,zKo),e(Fd,yX),e(yX,QKo),e(Fd,WKo),e(vt,HKo),M(OF,vt,null),e(zo,UKo),e(zo,mo),M(lL,mo,null),e(mo,JKo),e(mo,_ue),e(_ue,YKo),e(mo,KKo),e(mo,Xa),e(Xa,ZKo),e(Xa,bue),e(bue,eZo),e(Xa,oZo),e(Xa,vue),e(vue,rZo),e(Xa,tZo),e(Xa,Fue),e(Fue,aZo),e(Xa,nZo),e(mo,sZo),e(mo,za),e(za,VF),e(VF,Tue),e(Tue,lZo),e(VF,iZo),e(VF,LX),e(LX,dZo),e(VF,cZo),e(za,fZo),e(za,XF),e(XF,Mue),e(Mue,mZo),e(XF,gZo),e(XF,xX),e(xX,hZo),e(XF,pZo),e(za,uZo),e(za,zF),e(zF,Eue),e(Eue,_Zo),e(zF,bZo),e(zF,$X),e($X,vZo),e(zF,FZo),e(za,TZo),e(za,QF),e(QF,Cue),e(Cue,MZo),e(QF,EZo),e(QF,kX),e(kX,CZo),e(QF,wZo),e(mo,AZo),e(mo,WF),e(WF,yZo),e(WF,wue),e(wue,LZo),e(WF,xZo),e(WF,Aue),e(Aue,$Zo),e(mo,kZo),M(HF,mo,null),b(f,QIe,_),b(f,Td,_),e(Td,UF),e(UF,yue),M(iL,yue,null),e(Td,SZo),e(Td,Lue),e(Lue,RZo),b(f,WIe,_),b(f,Qo,_),M(dL,Qo,null),e(Qo,BZo),e(Qo,Md),e(Md,PZo),e(Md,SX),e(SX,IZo),e(Md,qZo),e(Md,RX),e(RX,NZo),e(Md,jZo),e(Qo,DZo),e(Qo,cL),e(cL,GZo),e(cL,xue),e(xue,OZo),e(cL,VZo),e(Qo,XZo),e(Qo,Ft),M(fL,Ft,null),e(Ft,zZo),e(Ft,$ue),e($ue,QZo),e(Ft,WZo),e(Ft,Ed),e(Ed,HZo),e(Ed,kue),e(kue,UZo),e(Ed,JZo),e(Ed,BX),e(BX,YZo),e(Ed,KZo),e(Ft,ZZo),M(JF,Ft,null),e(Qo,eer),e(Qo,go),M(mL,go,null),e(go,oer),e(go,Sue),e(Sue,rer),e(go,ter),e(go,Qa),e(Qa,aer),e(Qa,Rue),e(Rue,ner),e(Qa,ser),e(Qa,Bue),e(Bue,ler),e(Qa,ier),e(Qa,Pue),e(Pue,der),e(Qa,cer),e(go,fer),e(go,Cd),e(Cd,YF),e(YF,Iue),e(Iue,mer),e(YF,ger),e(YF,PX),e(PX,her),e(YF,per),e(Cd,uer),e(Cd,KF),e(KF,que),e(que,_er),e(KF,ber),e(KF,IX),e(IX,ver),e(KF,Fer),e(Cd,Ter),e(Cd,ZF),e(ZF,Nue),e(Nue,Mer),e(ZF,Eer),e(ZF,qX),e(qX,Cer),e(ZF,wer),e(go,Aer),e(go,eT),e(eT,yer),e(eT,jue),e(jue,Ler),e(eT,xer),e(eT,Due),e(Due,$er),e(go,ker),M(oT,go,null),b(f,HIe,_),b(f,wd,_),e(wd,rT),e(rT,Gue),M(gL,Gue,null),e(wd,Ser),e(wd,Oue),e(Oue,Rer),b(f,UIe,_),b(f,Wo,_),M(hL,Wo,null),e(Wo,Ber),e(Wo,Ad),e(Ad,Per),e(Ad,NX),e(NX,Ier),e(Ad,qer),e(Ad,jX),e(jX,Ner),e(Ad,jer),e(Wo,Der),e(Wo,pL),e(pL,Ger),e(pL,Vue),e(Vue,Oer),e(pL,Ver),e(Wo,Xer),e(Wo,Tt),M(uL,Tt,null),e(Tt,zer),e(Tt,Xue),e(Xue,Qer),e(Tt,Wer),e(Tt,yd),e(yd,Her),e(yd,zue),e(zue,Uer),e(yd,Jer),e(yd,DX),e(DX,Yer),e(yd,Ker),e(Tt,Zer),M(tT,Tt,null),e(Wo,eor),e(Wo,ho),M(_L,ho,null),e(ho,oor),e(ho,Que),e(Que,ror),e(ho,tor),e(ho,Wa),e(Wa,aor),e(Wa,Wue),e(Wue,nor),e(Wa,sor),e(Wa,Hue),e(Hue,lor),e(Wa,ior),e(Wa,Uue),e(Uue,dor),e(Wa,cor),e(ho,mor),e(ho,bL),e(bL,aT),e(aT,Jue),e(Jue,gor),e(aT,hor),e(aT,GX),e(GX,por),e(aT,uor),e(bL,_or),e(bL,nT),e(nT,Yue),e(Yue,bor),e(nT,vor),e(nT,OX),e(OX,For),e(nT,Tor),e(ho,Mor),e(ho,sT),e(sT,Eor),e(sT,Kue),e(Kue,Cor),e(sT,wor),e(sT,Zue),e(Zue,Aor),e(ho,yor),M(lT,ho,null),b(f,JIe,_),b(f,Ld,_),e(Ld,iT),e(iT,e_e),M(vL,e_e,null),e(Ld,Lor),e(Ld,o_e),e(o_e,xor),b(f,YIe,_),b(f,Ho,_),M(FL,Ho,null),e(Ho,$or),e(Ho,xd),e(xd,kor),e(xd,VX),e(VX,Sor),e(xd,Ror),e(xd,XX),e(XX,Bor),e(xd,Por),e(Ho,Ior),e(Ho,TL),e(TL,qor),e(TL,r_e),e(r_e,Nor),e(TL,jor),e(Ho,Dor),e(Ho,Mt),M(ML,Mt,null),e(Mt,Gor),e(Mt,t_e),e(t_e,Oor),e(Mt,Vor),e(Mt,$d),e($d,Xor),e($d,a_e),e(a_e,zor),e($d,Qor),e($d,zX),e(zX,Wor),e($d,Hor),e(Mt,Uor),M(dT,Mt,null),e(Ho,Jor),e(Ho,po),M(EL,po,null),e(po,Yor),e(po,n_e),e(n_e,Kor),e(po,Zor),e(po,Ha),e(Ha,err),e(Ha,s_e),e(s_e,orr),e(Ha,rrr),e(Ha,l_e),e(l_e,trr),e(Ha,arr),e(Ha,i_e),e(i_e,nrr),e(Ha,srr),e(po,lrr),e(po,d_e),e(d_e,cT),e(cT,c_e),e(c_e,irr),e(cT,drr),e(cT,QX),e(QX,crr),e(cT,frr),e(po,mrr),e(po,fT),e(fT,grr),e(fT,f_e),e(f_e,hrr),e(fT,prr),e(fT,m_e),e(m_e,urr),e(po,_rr),M(mT,po,null),b(f,KIe,_),b(f,kd,_),e(kd,gT),e(gT,g_e),M(CL,g_e,null),e(kd,brr),e(kd,h_e),e(h_e,vrr),b(f,ZIe,_),b(f,Uo,_),M(wL,Uo,null),e(Uo,Frr),e(Uo,Sd),e(Sd,Trr),e(Sd,WX),e(WX,Mrr),e(Sd,Err),e(Sd,HX),e(HX,Crr),e(Sd,wrr),e(Uo,Arr),e(Uo,AL),e(AL,yrr),e(AL,p_e),e(p_e,Lrr),e(AL,xrr),e(Uo,$rr),e(Uo,Et),M(yL,Et,null),e(Et,krr),e(Et,u_e),e(u_e,Srr),e(Et,Rrr),e(Et,Rd),e(Rd,Brr),e(Rd,__e),e(__e,Prr),e(Rd,Irr),e(Rd,UX),e(UX,qrr),e(Rd,Nrr),e(Et,jrr),M(hT,Et,null),e(Uo,Drr),e(Uo,uo),M(LL,uo,null),e(uo,Grr),e(uo,b_e),e(b_e,Orr),e(uo,Vrr),e(uo,Ua),e(Ua,Xrr),e(Ua,v_e),e(v_e,zrr),e(Ua,Qrr),e(Ua,F_e),e(F_e,Wrr),e(Ua,Hrr),e(Ua,T_e),e(T_e,Urr),e(Ua,Jrr),e(uo,Yrr),e(uo,Ja),e(Ja,pT),e(pT,M_e),e(M_e,Krr),e(pT,Zrr),e(pT,JX),e(JX,etr),e(pT,otr),e(Ja,rtr),e(Ja,uT),e(uT,E_e),e(E_e,ttr),e(uT,atr),e(uT,YX),e(YX,ntr),e(uT,str),e(Ja,ltr),e(Ja,_T),e(_T,C_e),e(C_e,itr),e(_T,dtr),e(_T,KX),e(KX,ctr),e(_T,ftr),e(Ja,mtr),e(Ja,bT),e(bT,w_e),e(w_e,gtr),e(bT,htr),e(bT,ZX),e(ZX,ptr),e(bT,utr),e(uo,_tr),e(uo,vT),e(vT,btr),e(vT,A_e),e(A_e,vtr),e(vT,Ftr),e(vT,y_e),e(y_e,Ttr),e(uo,Mtr),M(FT,uo,null),b(f,eqe,_),b(f,Bd,_),e(Bd,TT),e(TT,L_e),M(xL,L_e,null),e(Bd,Etr),e(Bd,x_e),e(x_e,Ctr),b(f,oqe,_),b(f,Jo,_),M($L,Jo,null),e(Jo,wtr),e(Jo,Pd),e(Pd,Atr),e(Pd,ez),e(ez,ytr),e(Pd,Ltr),e(Pd,oz),e(oz,xtr),e(Pd,$tr),e(Jo,ktr),e(Jo,kL),e(kL,Str),e(kL,$_e),e($_e,Rtr),e(kL,Btr),e(Jo,Ptr),e(Jo,Ct),M(SL,Ct,null),e(Ct,Itr),e(Ct,k_e),e(k_e,qtr),e(Ct,Ntr),e(Ct,Id),e(Id,jtr),e(Id,S_e),e(S_e,Dtr),e(Id,Gtr),e(Id,rz),e(rz,Otr),e(Id,Vtr),e(Ct,Xtr),M(MT,Ct,null),e(Jo,ztr),e(Jo,_o),M(RL,_o,null),e(_o,Qtr),e(_o,R_e),e(R_e,Wtr),e(_o,Htr),e(_o,Ya),e(Ya,Utr),e(Ya,B_e),e(B_e,Jtr),e(Ya,Ytr),e(Ya,P_e),e(P_e,Ktr),e(Ya,Ztr),e(Ya,I_e),e(I_e,ear),e(Ya,oar),e(_o,rar),e(_o,q_e),e(q_e,ET),e(ET,N_e),e(N_e,tar),e(ET,aar),e(ET,tz),e(tz,nar),e(ET,sar),e(_o,lar),e(_o,CT),e(CT,iar),e(CT,j_e),e(j_e,dar),e(CT,car),e(CT,D_e),e(D_e,far),e(_o,mar),M(wT,_o,null),b(f,rqe,_),b(f,qd,_),e(qd,AT),e(AT,G_e),M(BL,G_e,null),e(qd,gar),e(qd,O_e),e(O_e,har),b(f,tqe,_),b(f,Yo,_),M(PL,Yo,null),e(Yo,par),e(Yo,Nd),e(Nd,uar),e(Nd,az),e(az,_ar),e(Nd,bar),e(Nd,nz),e(nz,Far),e(Nd,Tar),e(Yo,Mar),e(Yo,IL),e(IL,Ear),e(IL,V_e),e(V_e,Car),e(IL,war),e(Yo,Aar),e(Yo,wt),M(qL,wt,null),e(wt,yar),e(wt,X_e),e(X_e,Lar),e(wt,xar),e(wt,jd),e(jd,$ar),e(jd,z_e),e(z_e,kar),e(jd,Sar),e(jd,sz),e(sz,Rar),e(jd,Bar),e(wt,Par),M(yT,wt,null),e(Yo,Iar),e(Yo,wr),M(NL,wr,null),e(wr,qar),e(wr,Q_e),e(Q_e,Nar),e(wr,jar),e(wr,Ka),e(Ka,Dar),e(Ka,W_e),e(W_e,Gar),e(Ka,Oar),e(Ka,H_e),e(H_e,Var),e(Ka,Xar),e(Ka,U_e),e(U_e,zar),e(Ka,Qar),e(wr,War),e(wr,j),e(j,LT),e(LT,J_e),e(J_e,Har),e(LT,Uar),e(LT,lz),e(lz,Jar),e(LT,Yar),e(j,Kar),e(j,xT),e(xT,Y_e),e(Y_e,Zar),e(xT,enr),e(xT,iz),e(iz,onr),e(xT,rnr),e(j,tnr),e(j,$T),e($T,K_e),e(K_e,anr),e($T,nnr),e($T,dz),e(dz,snr),e($T,lnr),e(j,inr),e(j,kT),e(kT,Z_e),e(Z_e,dnr),e(kT,cnr),e(kT,cz),e(cz,fnr),e(kT,mnr),e(j,gnr),e(j,ST),e(ST,e1e),e(e1e,hnr),e(ST,pnr),e(ST,fz),e(fz,unr),e(ST,_nr),e(j,bnr),e(j,RT),e(RT,o1e),e(o1e,vnr),e(RT,Fnr),e(RT,mz),e(mz,Tnr),e(RT,Mnr),e(j,Enr),e(j,BT),e(BT,r1e),e(r1e,Cnr),e(BT,wnr),e(BT,gz),e(gz,Anr),e(BT,ynr),e(j,Lnr),e(j,PT),e(PT,t1e),e(t1e,xnr),e(PT,$nr),e(PT,hz),e(hz,knr),e(PT,Snr),e(j,Rnr),e(j,IT),e(IT,a1e),e(a1e,Bnr),e(IT,Pnr),e(IT,pz),e(pz,Inr),e(IT,qnr),e(j,Nnr),e(j,qT),e(qT,n1e),e(n1e,jnr),e(qT,Dnr),e(qT,uz),e(uz,Gnr),e(qT,Onr),e(j,Vnr),e(j,NT),e(NT,s1e),e(s1e,Xnr),e(NT,znr),e(NT,_z),e(_z,Qnr),e(NT,Wnr),e(j,Hnr),e(j,jT),e(jT,l1e),e(l1e,Unr),e(jT,Jnr),e(jT,bz),e(bz,Ynr),e(jT,Knr),e(j,Znr),e(j,DT),e(DT,i1e),e(i1e,esr),e(DT,osr),e(DT,vz),e(vz,rsr),e(DT,tsr),e(j,asr),e(j,GT),e(GT,d1e),e(d1e,nsr),e(GT,ssr),e(GT,Fz),e(Fz,lsr),e(GT,isr),e(j,dsr),e(j,OT),e(OT,c1e),e(c1e,csr),e(OT,fsr),e(OT,Tz),e(Tz,msr),e(OT,gsr),e(j,hsr),e(j,VT),e(VT,f1e),e(f1e,psr),e(VT,usr),e(VT,Mz),e(Mz,_sr),e(VT,bsr),e(j,vsr),e(j,XT),e(XT,m1e),e(m1e,Fsr),e(XT,Tsr),e(XT,Ez),e(Ez,Msr),e(XT,Esr),e(j,Csr),e(j,Bs),e(Bs,g1e),e(g1e,wsr),e(Bs,Asr),e(Bs,Cz),e(Cz,ysr),e(Bs,Lsr),e(Bs,wz),e(wz,xsr),e(Bs,$sr),e(j,ksr),e(j,zT),e(zT,h1e),e(h1e,Ssr),e(zT,Rsr),e(zT,Az),e(Az,Bsr),e(zT,Psr),e(j,Isr),e(j,QT),e(QT,p1e),e(p1e,qsr),e(QT,Nsr),e(QT,yz),e(yz,jsr),e(QT,Dsr),e(j,Gsr),e(j,WT),e(WT,u1e),e(u1e,Osr),e(WT,Vsr),e(WT,Lz),e(Lz,Xsr),e(WT,zsr),e(j,Qsr),e(j,HT),e(HT,_1e),e(_1e,Wsr),e(HT,Hsr),e(HT,xz),e(xz,Usr),e(HT,Jsr),e(j,Ysr),e(j,UT),e(UT,b1e),e(b1e,Ksr),e(UT,Zsr),e(UT,$z),e($z,elr),e(UT,olr),e(j,rlr),e(j,JT),e(JT,v1e),e(v1e,tlr),e(JT,alr),e(JT,kz),e(kz,nlr),e(JT,slr),e(j,llr),e(j,YT),e(YT,F1e),e(F1e,ilr),e(YT,dlr),e(YT,Sz),e(Sz,clr),e(YT,flr),e(j,mlr),e(j,KT),e(KT,T1e),e(T1e,glr),e(KT,hlr),e(KT,Rz),e(Rz,plr),e(KT,ulr),e(j,_lr),e(j,ZT),e(ZT,M1e),e(M1e,blr),e(ZT,vlr),e(ZT,Bz),e(Bz,Flr),e(ZT,Tlr),e(j,Mlr),e(j,e7),e(e7,E1e),e(E1e,Elr),e(e7,Clr),e(e7,Pz),e(Pz,wlr),e(e7,Alr),e(j,ylr),e(j,o7),e(o7,C1e),e(C1e,Llr),e(o7,xlr),e(o7,Iz),e(Iz,$lr),e(o7,klr),e(j,Slr),e(j,r7),e(r7,w1e),e(w1e,Rlr),e(r7,Blr),e(r7,qz),e(qz,Plr),e(r7,Ilr),e(j,qlr),e(j,t7),e(t7,A1e),e(A1e,Nlr),e(t7,jlr),e(t7,Nz),e(Nz,Dlr),e(t7,Glr),e(j,Olr),e(j,a7),e(a7,y1e),e(y1e,Vlr),e(a7,Xlr),e(a7,jz),e(jz,zlr),e(a7,Qlr),e(j,Wlr),e(j,n7),e(n7,L1e),e(L1e,Hlr),e(n7,Ulr),e(n7,Dz),e(Dz,Jlr),e(n7,Ylr),e(j,Klr),e(j,s7),e(s7,x1e),e(x1e,Zlr),e(s7,eir),e(s7,Gz),e(Gz,oir),e(s7,rir),e(j,tir),e(j,l7),e(l7,$1e),e($1e,air),e(l7,nir),e(l7,Oz),e(Oz,sir),e(l7,lir),e(j,iir),e(j,i7),e(i7,k1e),e(k1e,dir),e(i7,cir),e(i7,Vz),e(Vz,fir),e(i7,mir),e(j,gir),e(j,d7),e(d7,S1e),e(S1e,hir),e(d7,pir),e(d7,Xz),e(Xz,uir),e(d7,_ir),e(j,bir),e(j,c7),e(c7,R1e),e(R1e,vir),e(c7,Fir),e(c7,zz),e(zz,Tir),e(c7,Mir),e(j,Eir),e(j,f7),e(f7,B1e),e(B1e,Cir),e(f7,wir),e(f7,Qz),e(Qz,Air),e(f7,yir),e(j,Lir),e(j,m7),e(m7,P1e),e(P1e,xir),e(m7,$ir),e(m7,Wz),e(Wz,kir),e(m7,Sir),e(j,Rir),e(j,g7),e(g7,I1e),e(I1e,Bir),e(g7,Pir),e(g7,Hz),e(Hz,Iir),e(g7,qir),e(j,Nir),e(j,h7),e(h7,q1e),e(q1e,jir),e(h7,Dir),e(h7,Uz),e(Uz,Gir),e(h7,Oir),e(j,Vir),e(j,p7),e(p7,N1e),e(N1e,Xir),e(p7,zir),e(p7,Jz),e(Jz,Qir),e(p7,Wir),e(j,Hir),e(j,u7),e(u7,j1e),e(j1e,Uir),e(u7,Jir),e(u7,Yz),e(Yz,Yir),e(u7,Kir),e(j,Zir),e(j,_7),e(_7,D1e),e(D1e,edr),e(_7,odr),e(_7,Kz),e(Kz,rdr),e(_7,tdr),e(wr,adr),M(b7,wr,null),b(f,aqe,_),b(f,Dd,_),e(Dd,v7),e(v7,G1e),M(jL,G1e,null),e(Dd,ndr),e(Dd,O1e),e(O1e,sdr),b(f,nqe,_),b(f,Ko,_),M(DL,Ko,null),e(Ko,ldr),e(Ko,Gd),e(Gd,idr),e(Gd,Zz),e(Zz,ddr),e(Gd,cdr),e(Gd,eQ),e(eQ,fdr),e(Gd,mdr),e(Ko,gdr),e(Ko,GL),e(GL,hdr),e(GL,V1e),e(V1e,pdr),e(GL,udr),e(Ko,_dr),e(Ko,At),M(OL,At,null),e(At,bdr),e(At,X1e),e(X1e,vdr),e(At,Fdr),e(At,Od),e(Od,Tdr),e(Od,z1e),e(z1e,Mdr),e(Od,Edr),e(Od,oQ),e(oQ,Cdr),e(Od,wdr),e(At,Adr),M(F7,At,null),e(Ko,ydr),e(Ko,Ar),M(VL,Ar,null),e(Ar,Ldr),e(Ar,Q1e),e(Q1e,xdr),e(Ar,$dr),e(Ar,Za),e(Za,kdr),e(Za,W1e),e(W1e,Sdr),e(Za,Rdr),e(Za,H1e),e(H1e,Bdr),e(Za,Pdr),e(Za,U1e),e(U1e,Idr),e(Za,qdr),e(Ar,Ndr),e(Ar,se),e(se,T7),e(T7,J1e),e(J1e,jdr),e(T7,Ddr),e(T7,rQ),e(rQ,Gdr),e(T7,Odr),e(se,Vdr),e(se,M7),e(M7,Y1e),e(Y1e,Xdr),e(M7,zdr),e(M7,tQ),e(tQ,Qdr),e(M7,Wdr),e(se,Hdr),e(se,E7),e(E7,K1e),e(K1e,Udr),e(E7,Jdr),e(E7,aQ),e(aQ,Ydr),e(E7,Kdr),e(se,Zdr),e(se,C7),e(C7,Z1e),e(Z1e,ecr),e(C7,ocr),e(C7,nQ),e(nQ,rcr),e(C7,tcr),e(se,acr),e(se,w7),e(w7,ebe),e(ebe,ncr),e(w7,scr),e(w7,sQ),e(sQ,lcr),e(w7,icr),e(se,dcr),e(se,A7),e(A7,obe),e(obe,ccr),e(A7,fcr),e(A7,lQ),e(lQ,mcr),e(A7,gcr),e(se,hcr),e(se,y7),e(y7,rbe),e(rbe,pcr),e(y7,ucr),e(y7,iQ),e(iQ,_cr),e(y7,bcr),e(se,vcr),e(se,L7),e(L7,tbe),e(tbe,Fcr),e(L7,Tcr),e(L7,dQ),e(dQ,Mcr),e(L7,Ecr),e(se,Ccr),e(se,x7),e(x7,abe),e(abe,wcr),e(x7,Acr),e(x7,cQ),e(cQ,ycr),e(x7,Lcr),e(se,xcr),e(se,$7),e($7,nbe),e(nbe,$cr),e($7,kcr),e($7,fQ),e(fQ,Scr),e($7,Rcr),e(se,Bcr),e(se,k7),e(k7,sbe),e(sbe,Pcr),e(k7,Icr),e(k7,mQ),e(mQ,qcr),e(k7,Ncr),e(se,jcr),e(se,S7),e(S7,lbe),e(lbe,Dcr),e(S7,Gcr),e(S7,gQ),e(gQ,Ocr),e(S7,Vcr),e(se,Xcr),e(se,R7),e(R7,ibe),e(ibe,zcr),e(R7,Qcr),e(R7,hQ),e(hQ,Wcr),e(R7,Hcr),e(se,Ucr),e(se,B7),e(B7,dbe),e(dbe,Jcr),e(B7,Ycr),e(B7,pQ),e(pQ,Kcr),e(B7,Zcr),e(se,efr),e(se,P7),e(P7,cbe),e(cbe,ofr),e(P7,rfr),e(P7,uQ),e(uQ,tfr),e(P7,afr),e(se,nfr),e(se,I7),e(I7,fbe),e(fbe,sfr),e(I7,lfr),e(I7,_Q),e(_Q,ifr),e(I7,dfr),e(se,cfr),e(se,q7),e(q7,mbe),e(mbe,ffr),e(q7,mfr),e(q7,bQ),e(bQ,gfr),e(q7,hfr),e(se,pfr),e(se,N7),e(N7,gbe),e(gbe,ufr),e(N7,_fr),e(N7,vQ),e(vQ,bfr),e(N7,vfr),e(se,Ffr),e(se,j7),e(j7,hbe),e(hbe,Tfr),e(j7,Mfr),e(j7,FQ),e(FQ,Efr),e(j7,Cfr),e(se,wfr),e(se,D7),e(D7,pbe),e(pbe,Afr),e(D7,yfr),e(D7,TQ),e(TQ,Lfr),e(D7,xfr),e(se,$fr),e(se,G7),e(G7,ube),e(ube,kfr),e(G7,Sfr),e(G7,MQ),e(MQ,Rfr),e(G7,Bfr),e(se,Pfr),e(se,O7),e(O7,_be),e(_be,Ifr),e(O7,qfr),e(O7,EQ),e(EQ,Nfr),e(O7,jfr),e(se,Dfr),e(se,V7),e(V7,bbe),e(bbe,Gfr),e(V7,Ofr),e(V7,CQ),e(CQ,Vfr),e(V7,Xfr),e(Ar,zfr),M(X7,Ar,null),b(f,sqe,_),b(f,Vd,_),e(Vd,z7),e(z7,vbe),M(XL,vbe,null),e(Vd,Qfr),e(Vd,Fbe),e(Fbe,Wfr),b(f,lqe,_),b(f,Zo,_),M(zL,Zo,null),e(Zo,Hfr),e(Zo,Xd),e(Xd,Ufr),e(Xd,wQ),e(wQ,Jfr),e(Xd,Yfr),e(Xd,AQ),e(AQ,Kfr),e(Xd,Zfr),e(Zo,emr),e(Zo,QL),e(QL,omr),e(QL,Tbe),e(Tbe,rmr),e(QL,tmr),e(Zo,amr),e(Zo,yt),M(WL,yt,null),e(yt,nmr),e(yt,Mbe),e(Mbe,smr),e(yt,lmr),e(yt,zd),e(zd,imr),e(zd,Ebe),e(Ebe,dmr),e(zd,cmr),e(zd,yQ),e(yQ,fmr),e(zd,mmr),e(yt,gmr),M(Q7,yt,null),e(Zo,hmr),e(Zo,yr),M(HL,yr,null),e(yr,pmr),e(yr,Cbe),e(Cbe,umr),e(yr,_mr),e(yr,en),e(en,bmr),e(en,wbe),e(wbe,vmr),e(en,Fmr),e(en,Abe),e(Abe,Tmr),e(en,Mmr),e(en,ybe),e(ybe,Emr),e(en,Cmr),e(yr,wmr),e(yr,Te),e(Te,W7),e(W7,Lbe),e(Lbe,Amr),e(W7,ymr),e(W7,LQ),e(LQ,Lmr),e(W7,xmr),e(Te,$mr),e(Te,H7),e(H7,xbe),e(xbe,kmr),e(H7,Smr),e(H7,xQ),e(xQ,Rmr),e(H7,Bmr),e(Te,Pmr),e(Te,U7),e(U7,$be),e($be,Imr),e(U7,qmr),e(U7,$Q),e($Q,Nmr),e(U7,jmr),e(Te,Dmr),e(Te,J7),e(J7,kbe),e(kbe,Gmr),e(J7,Omr),e(J7,kQ),e(kQ,Vmr),e(J7,Xmr),e(Te,zmr),e(Te,Y7),e(Y7,Sbe),e(Sbe,Qmr),e(Y7,Wmr),e(Y7,SQ),e(SQ,Hmr),e(Y7,Umr),e(Te,Jmr),e(Te,K7),e(K7,Rbe),e(Rbe,Ymr),e(K7,Kmr),e(K7,RQ),e(RQ,Zmr),e(K7,egr),e(Te,ogr),e(Te,Z7),e(Z7,Bbe),e(Bbe,rgr),e(Z7,tgr),e(Z7,BQ),e(BQ,agr),e(Z7,ngr),e(Te,sgr),e(Te,eM),e(eM,Pbe),e(Pbe,lgr),e(eM,igr),e(eM,PQ),e(PQ,dgr),e(eM,cgr),e(Te,fgr),e(Te,oM),e(oM,Ibe),e(Ibe,mgr),e(oM,ggr),e(oM,IQ),e(IQ,hgr),e(oM,pgr),e(Te,ugr),e(Te,rM),e(rM,qbe),e(qbe,_gr),e(rM,bgr),e(rM,qQ),e(qQ,vgr),e(rM,Fgr),e(Te,Tgr),e(Te,tM),e(tM,Nbe),e(Nbe,Mgr),e(tM,Egr),e(tM,NQ),e(NQ,Cgr),e(tM,wgr),e(Te,Agr),e(Te,aM),e(aM,jbe),e(jbe,ygr),e(aM,Lgr),e(aM,jQ),e(jQ,xgr),e(aM,$gr),e(yr,kgr),M(nM,yr,null),b(f,iqe,_),b(f,Qd,_),e(Qd,sM),e(sM,Dbe),M(UL,Dbe,null),e(Qd,Sgr),e(Qd,Gbe),e(Gbe,Rgr),b(f,dqe,_),b(f,er,_),M(JL,er,null),e(er,Bgr),e(er,Wd),e(Wd,Pgr),e(Wd,DQ),e(DQ,Igr),e(Wd,qgr),e(Wd,GQ),e(GQ,Ngr),e(Wd,jgr),e(er,Dgr),e(er,YL),e(YL,Ggr),e(YL,Obe),e(Obe,Ogr),e(YL,Vgr),e(er,Xgr),e(er,Lt),M(KL,Lt,null),e(Lt,zgr),e(Lt,Vbe),e(Vbe,Qgr),e(Lt,Wgr),e(Lt,Hd),e(Hd,Hgr),e(Hd,Xbe),e(Xbe,Ugr),e(Hd,Jgr),e(Hd,OQ),e(OQ,Ygr),e(Hd,Kgr),e(Lt,Zgr),M(lM,Lt,null),e(er,ehr),e(er,Lr),M(ZL,Lr,null),e(Lr,ohr),e(Lr,zbe),e(zbe,rhr),e(Lr,thr),e(Lr,on),e(on,ahr),e(on,Qbe),e(Qbe,nhr),e(on,shr),e(on,Wbe),e(Wbe,lhr),e(on,ihr),e(on,Hbe),e(Hbe,dhr),e(on,chr),e(Lr,fhr),e(Lr,Ud),e(Ud,iM),e(iM,Ube),e(Ube,mhr),e(iM,ghr),e(iM,VQ),e(VQ,hhr),e(iM,phr),e(Ud,uhr),e(Ud,dM),e(dM,Jbe),e(Jbe,_hr),e(dM,bhr),e(dM,XQ),e(XQ,vhr),e(dM,Fhr),e(Ud,Thr),e(Ud,cM),e(cM,Ybe),e(Ybe,Mhr),e(cM,Ehr),e(cM,zQ),e(zQ,Chr),e(cM,whr),e(Lr,Ahr),M(fM,Lr,null),b(f,cqe,_),b(f,Jd,_),e(Jd,mM),e(mM,Kbe),M(e8,Kbe,null),e(Jd,yhr),e(Jd,Zbe),e(Zbe,Lhr),b(f,fqe,_),b(f,or,_),M(o8,or,null),e(or,xhr),e(or,Yd),e(Yd,$hr),e(Yd,QQ),e(QQ,khr),e(Yd,Shr),e(Yd,WQ),e(WQ,Rhr),e(Yd,Bhr),e(or,Phr),e(or,r8),e(r8,Ihr),e(r8,e4e),e(e4e,qhr),e(r8,Nhr),e(or,jhr),e(or,xt),M(t8,xt,null),e(xt,Dhr),e(xt,o4e),e(o4e,Ghr),e(xt,Ohr),e(xt,Kd),e(Kd,Vhr),e(Kd,r4e),e(r4e,Xhr),e(Kd,zhr),e(Kd,HQ),e(HQ,Qhr),e(Kd,Whr),e(xt,Hhr),M(gM,xt,null),e(or,Uhr),e(or,xr),M(a8,xr,null),e(xr,Jhr),e(xr,t4e),e(t4e,Yhr),e(xr,Khr),e(xr,rn),e(rn,Zhr),e(rn,a4e),e(a4e,epr),e(rn,opr),e(rn,n4e),e(n4e,rpr),e(rn,tpr),e(rn,s4e),e(s4e,apr),e(rn,npr),e(xr,spr),e(xr,ie),e(ie,hM),e(hM,l4e),e(l4e,lpr),e(hM,ipr),e(hM,UQ),e(UQ,dpr),e(hM,cpr),e(ie,fpr),e(ie,pM),e(pM,i4e),e(i4e,mpr),e(pM,gpr),e(pM,JQ),e(JQ,hpr),e(pM,ppr),e(ie,upr),e(ie,uM),e(uM,d4e),e(d4e,_pr),e(uM,bpr),e(uM,YQ),e(YQ,vpr),e(uM,Fpr),e(ie,Tpr),e(ie,_M),e(_M,c4e),e(c4e,Mpr),e(_M,Epr),e(_M,KQ),e(KQ,Cpr),e(_M,wpr),e(ie,Apr),e(ie,bM),e(bM,f4e),e(f4e,ypr),e(bM,Lpr),e(bM,ZQ),e(ZQ,xpr),e(bM,$pr),e(ie,kpr),e(ie,vM),e(vM,m4e),e(m4e,Spr),e(vM,Rpr),e(vM,eW),e(eW,Bpr),e(vM,Ppr),e(ie,Ipr),e(ie,FM),e(FM,g4e),e(g4e,qpr),e(FM,Npr),e(FM,oW),e(oW,jpr),e(FM,Dpr),e(ie,Gpr),e(ie,TM),e(TM,h4e),e(h4e,Opr),e(TM,Vpr),e(TM,rW),e(rW,Xpr),e(TM,zpr),e(ie,Qpr),e(ie,MM),e(MM,p4e),e(p4e,Wpr),e(MM,Hpr),e(MM,tW),e(tW,Upr),e(MM,Jpr),e(ie,Ypr),e(ie,EM),e(EM,u4e),e(u4e,Kpr),e(EM,Zpr),e(EM,aW),e(aW,eur),e(EM,our),e(ie,rur),e(ie,CM),e(CM,_4e),e(_4e,tur),e(CM,aur),e(CM,nW),e(nW,nur),e(CM,sur),e(ie,lur),e(ie,wM),e(wM,b4e),e(b4e,iur),e(wM,dur),e(wM,sW),e(sW,cur),e(wM,fur),e(ie,mur),e(ie,AM),e(AM,v4e),e(v4e,gur),e(AM,hur),e(AM,lW),e(lW,pur),e(AM,uur),e(ie,_ur),e(ie,yM),e(yM,F4e),e(F4e,bur),e(yM,vur),e(yM,iW),e(iW,Fur),e(yM,Tur),e(ie,Mur),e(ie,LM),e(LM,T4e),e(T4e,Eur),e(LM,Cur),e(LM,dW),e(dW,wur),e(LM,Aur),e(ie,yur),e(ie,xM),e(xM,M4e),e(M4e,Lur),e(xM,xur),e(xM,cW),e(cW,$ur),e(xM,kur),e(ie,Sur),e(ie,$M),e($M,E4e),e(E4e,Rur),e($M,Bur),e($M,fW),e(fW,Pur),e($M,Iur),e(ie,qur),e(ie,kM),e(kM,C4e),e(C4e,Nur),e(kM,jur),e(kM,mW),e(mW,Dur),e(kM,Gur),e(ie,Our),e(ie,SM),e(SM,w4e),e(w4e,Vur),e(SM,Xur),e(SM,gW),e(gW,zur),e(SM,Qur),e(ie,Wur),e(ie,RM),e(RM,A4e),e(A4e,Hur),e(RM,Uur),e(RM,hW),e(hW,Jur),e(RM,Yur),e(xr,Kur),M(BM,xr,null),b(f,mqe,_),b(f,Zd,_),e(Zd,PM),e(PM,y4e),M(n8,y4e,null),e(Zd,Zur),e(Zd,L4e),e(L4e,e_r),b(f,gqe,_),b(f,rr,_),M(s8,rr,null),e(rr,o_r),e(rr,ec),e(ec,r_r),e(ec,pW),e(pW,t_r),e(ec,a_r),e(ec,uW),e(uW,n_r),e(ec,s_r),e(rr,l_r),e(rr,l8),e(l8,i_r),e(l8,x4e),e(x4e,d_r),e(l8,c_r),e(rr,f_r),e(rr,$t),M(i8,$t,null),e($t,m_r),e($t,$4e),e($4e,g_r),e($t,h_r),e($t,oc),e(oc,p_r),e(oc,k4e),e(k4e,u_r),e(oc,__r),e(oc,_W),e(_W,b_r),e(oc,v_r),e($t,F_r),M(IM,$t,null),e(rr,T_r),e(rr,$r),M(d8,$r,null),e($r,M_r),e($r,S4e),e(S4e,E_r),e($r,C_r),e($r,tn),e(tn,w_r),e(tn,R4e),e(R4e,A_r),e(tn,y_r),e(tn,B4e),e(B4e,L_r),e(tn,x_r),e(tn,P4e),e(P4e,$_r),e(tn,k_r),e($r,S_r),e($r,ye),e(ye,qM),e(qM,I4e),e(I4e,R_r),e(qM,B_r),e(qM,bW),e(bW,P_r),e(qM,I_r),e(ye,q_r),e(ye,NM),e(NM,q4e),e(q4e,N_r),e(NM,j_r),e(NM,vW),e(vW,D_r),e(NM,G_r),e(ye,O_r),e(ye,jM),e(jM,N4e),e(N4e,V_r),e(jM,X_r),e(jM,FW),e(FW,z_r),e(jM,Q_r),e(ye,W_r),e(ye,DM),e(DM,j4e),e(j4e,H_r),e(DM,U_r),e(DM,TW),e(TW,J_r),e(DM,Y_r),e(ye,K_r),e(ye,GM),e(GM,D4e),e(D4e,Z_r),e(GM,e1r),e(GM,MW),e(MW,o1r),e(GM,r1r),e(ye,t1r),e(ye,OM),e(OM,G4e),e(G4e,a1r),e(OM,n1r),e(OM,EW),e(EW,s1r),e(OM,l1r),e(ye,i1r),e(ye,VM),e(VM,O4e),e(O4e,d1r),e(VM,c1r),e(VM,CW),e(CW,f1r),e(VM,m1r),e(ye,g1r),e(ye,XM),e(XM,V4e),e(V4e,h1r),e(XM,p1r),e(XM,wW),e(wW,u1r),e(XM,_1r),e(ye,b1r),e(ye,zM),e(zM,X4e),e(X4e,v1r),e(zM,F1r),e(zM,AW),e(AW,T1r),e(zM,M1r),e(ye,E1r),e(ye,QM),e(QM,z4e),e(z4e,C1r),e(QM,w1r),e(QM,yW),e(yW,A1r),e(QM,y1r),e($r,L1r),M(WM,$r,null),b(f,hqe,_),b(f,rc,_),e(rc,HM),e(HM,Q4e),M(c8,Q4e,null),e(rc,x1r),e(rc,W4e),e(W4e,$1r),b(f,pqe,_),b(f,tr,_),M(f8,tr,null),e(tr,k1r),e(tr,tc),e(tc,S1r),e(tc,LW),e(LW,R1r),e(tc,B1r),e(tc,xW),e(xW,P1r),e(tc,I1r),e(tr,q1r),e(tr,m8),e(m8,N1r),e(m8,H4e),e(H4e,j1r),e(m8,D1r),e(tr,G1r),e(tr,kt),M(g8,kt,null),e(kt,O1r),e(kt,U4e),e(U4e,V1r),e(kt,X1r),e(kt,ac),e(ac,z1r),e(ac,J4e),e(J4e,Q1r),e(ac,W1r),e(ac,$W),e($W,H1r),e(ac,U1r),e(kt,J1r),M(UM,kt,null),e(tr,Y1r),e(tr,kr),M(h8,kr,null),e(kr,K1r),e(kr,Y4e),e(Y4e,Z1r),e(kr,ebr),e(kr,an),e(an,obr),e(an,K4e),e(K4e,rbr),e(an,tbr),e(an,Z4e),e(Z4e,abr),e(an,nbr),e(an,e2e),e(e2e,sbr),e(an,lbr),e(kr,ibr),e(kr,Z),e(Z,JM),e(JM,o2e),e(o2e,dbr),e(JM,cbr),e(JM,kW),e(kW,fbr),e(JM,mbr),e(Z,gbr),e(Z,YM),e(YM,r2e),e(r2e,hbr),e(YM,pbr),e(YM,SW),e(SW,ubr),e(YM,_br),e(Z,bbr),e(Z,KM),e(KM,t2e),e(t2e,vbr),e(KM,Fbr),e(KM,RW),e(RW,Tbr),e(KM,Mbr),e(Z,Ebr),e(Z,ZM),e(ZM,a2e),e(a2e,Cbr),e(ZM,wbr),e(ZM,BW),e(BW,Abr),e(ZM,ybr),e(Z,Lbr),e(Z,eE),e(eE,n2e),e(n2e,xbr),e(eE,$br),e(eE,PW),e(PW,kbr),e(eE,Sbr),e(Z,Rbr),e(Z,oE),e(oE,s2e),e(s2e,Bbr),e(oE,Pbr),e(oE,IW),e(IW,Ibr),e(oE,qbr),e(Z,Nbr),e(Z,rE),e(rE,l2e),e(l2e,jbr),e(rE,Dbr),e(rE,qW),e(qW,Gbr),e(rE,Obr),e(Z,Vbr),e(Z,tE),e(tE,i2e),e(i2e,Xbr),e(tE,zbr),e(tE,NW),e(NW,Qbr),e(tE,Wbr),e(Z,Hbr),e(Z,aE),e(aE,d2e),e(d2e,Ubr),e(aE,Jbr),e(aE,jW),e(jW,Ybr),e(aE,Kbr),e(Z,Zbr),e(Z,nE),e(nE,c2e),e(c2e,e4r),e(nE,o4r),e(nE,DW),e(DW,r4r),e(nE,t4r),e(Z,a4r),e(Z,sE),e(sE,f2e),e(f2e,n4r),e(sE,s4r),e(sE,GW),e(GW,l4r),e(sE,i4r),e(Z,d4r),e(Z,lE),e(lE,m2e),e(m2e,c4r),e(lE,f4r),e(lE,OW),e(OW,m4r),e(lE,g4r),e(Z,h4r),e(Z,iE),e(iE,g2e),e(g2e,p4r),e(iE,u4r),e(iE,VW),e(VW,_4r),e(iE,b4r),e(Z,v4r),e(Z,dE),e(dE,h2e),e(h2e,F4r),e(dE,T4r),e(dE,XW),e(XW,M4r),e(dE,E4r),e(Z,C4r),e(Z,cE),e(cE,p2e),e(p2e,w4r),e(cE,A4r),e(cE,zW),e(zW,y4r),e(cE,L4r),e(Z,x4r),e(Z,fE),e(fE,u2e),e(u2e,$4r),e(fE,k4r),e(fE,QW),e(QW,S4r),e(fE,R4r),e(Z,B4r),e(Z,mE),e(mE,_2e),e(_2e,P4r),e(mE,I4r),e(mE,WW),e(WW,q4r),e(mE,N4r),e(Z,j4r),e(Z,gE),e(gE,b2e),e(b2e,D4r),e(gE,G4r),e(gE,HW),e(HW,O4r),e(gE,V4r),e(Z,X4r),e(Z,hE),e(hE,v2e),e(v2e,z4r),e(hE,Q4r),e(hE,UW),e(UW,W4r),e(hE,H4r),e(Z,U4r),e(Z,pE),e(pE,F2e),e(F2e,J4r),e(pE,Y4r),e(pE,JW),e(JW,K4r),e(pE,Z4r),e(Z,e2r),e(Z,uE),e(uE,T2e),e(T2e,o2r),e(uE,r2r),e(uE,YW),e(YW,t2r),e(uE,a2r),e(Z,n2r),e(Z,_E),e(_E,M2e),e(M2e,s2r),e(_E,l2r),e(_E,KW),e(KW,i2r),e(_E,d2r),e(Z,c2r),e(Z,bE),e(bE,E2e),e(E2e,f2r),e(bE,m2r),e(bE,ZW),e(ZW,g2r),e(bE,h2r),e(Z,p2r),e(Z,vE),e(vE,C2e),e(C2e,u2r),e(vE,_2r),e(vE,eH),e(eH,b2r),e(vE,v2r),e(Z,F2r),e(Z,FE),e(FE,w2e),e(w2e,T2r),e(FE,M2r),e(FE,oH),e(oH,E2r),e(FE,C2r),e(Z,w2r),e(Z,TE),e(TE,A2e),e(A2e,A2r),e(TE,y2r),e(TE,rH),e(rH,L2r),e(TE,x2r),e(kr,$2r),M(ME,kr,null),b(f,uqe,_),b(f,nc,_),e(nc,EE),e(EE,y2e),M(p8,y2e,null),e(nc,k2r),e(nc,L2e),e(L2e,S2r),b(f,_qe,_),b(f,ar,_),M(u8,ar,null),e(ar,R2r),e(ar,sc),e(sc,B2r),e(sc,tH),e(tH,P2r),e(sc,I2r),e(sc,aH),e(aH,q2r),e(sc,N2r),e(ar,j2r),e(ar,_8),e(_8,D2r),e(_8,x2e),e(x2e,G2r),e(_8,O2r),e(ar,V2r),e(ar,St),M(b8,St,null),e(St,X2r),e(St,$2e),e($2e,z2r),e(St,Q2r),e(St,lc),e(lc,W2r),e(lc,k2e),e(k2e,H2r),e(lc,U2r),e(lc,nH),e(nH,J2r),e(lc,Y2r),e(St,K2r),M(CE,St,null),e(ar,Z2r),e(ar,Sr),M(v8,Sr,null),e(Sr,evr),e(Sr,S2e),e(S2e,ovr),e(Sr,rvr),e(Sr,nn),e(nn,tvr),e(nn,R2e),e(R2e,avr),e(nn,nvr),e(nn,B2e),e(B2e,svr),e(nn,lvr),e(nn,P2e),e(P2e,ivr),e(nn,dvr),e(Sr,cvr),e(Sr,pe),e(pe,wE),e(wE,I2e),e(I2e,fvr),e(wE,mvr),e(wE,sH),e(sH,gvr),e(wE,hvr),e(pe,pvr),e(pe,AE),e(AE,q2e),e(q2e,uvr),e(AE,_vr),e(AE,lH),e(lH,bvr),e(AE,vvr),e(pe,Fvr),e(pe,yE),e(yE,N2e),e(N2e,Tvr),e(yE,Mvr),e(yE,iH),e(iH,Evr),e(yE,Cvr),e(pe,wvr),e(pe,LE),e(LE,j2e),e(j2e,Avr),e(LE,yvr),e(LE,dH),e(dH,Lvr),e(LE,xvr),e(pe,$vr),e(pe,xE),e(xE,D2e),e(D2e,kvr),e(xE,Svr),e(xE,cH),e(cH,Rvr),e(xE,Bvr),e(pe,Pvr),e(pe,$E),e($E,G2e),e(G2e,Ivr),e($E,qvr),e($E,fH),e(fH,Nvr),e($E,jvr),e(pe,Dvr),e(pe,kE),e(kE,O2e),e(O2e,Gvr),e(kE,Ovr),e(kE,mH),e(mH,Vvr),e(kE,Xvr),e(pe,zvr),e(pe,SE),e(SE,V2e),e(V2e,Qvr),e(SE,Wvr),e(SE,gH),e(gH,Hvr),e(SE,Uvr),e(pe,Jvr),e(pe,RE),e(RE,X2e),e(X2e,Yvr),e(RE,Kvr),e(RE,hH),e(hH,Zvr),e(RE,eFr),e(pe,oFr),e(pe,BE),e(BE,z2e),e(z2e,rFr),e(BE,tFr),e(BE,pH),e(pH,aFr),e(BE,nFr),e(pe,sFr),e(pe,PE),e(PE,Q2e),e(Q2e,lFr),e(PE,iFr),e(PE,uH),e(uH,dFr),e(PE,cFr),e(pe,fFr),e(pe,IE),e(IE,W2e),e(W2e,mFr),e(IE,gFr),e(IE,_H),e(_H,hFr),e(IE,pFr),e(pe,uFr),e(pe,qE),e(qE,H2e),e(H2e,_Fr),e(qE,bFr),e(qE,bH),e(bH,vFr),e(qE,FFr),e(pe,TFr),e(pe,NE),e(NE,U2e),e(U2e,MFr),e(NE,EFr),e(NE,vH),e(vH,CFr),e(NE,wFr),e(pe,AFr),e(pe,jE),e(jE,J2e),e(J2e,yFr),e(jE,LFr),e(jE,FH),e(FH,xFr),e(jE,$Fr),e(pe,kFr),e(pe,DE),e(DE,Y2e),e(Y2e,SFr),e(DE,RFr),e(DE,TH),e(TH,BFr),e(DE,PFr),e(pe,IFr),e(pe,GE),e(GE,K2e),e(K2e,qFr),e(GE,NFr),e(GE,MH),e(MH,jFr),e(GE,DFr),e(Sr,GFr),M(OE,Sr,null),b(f,bqe,_),b(f,ic,_),e(ic,VE),e(VE,Z2e),M(F8,Z2e,null),e(ic,OFr),e(ic,eve),e(eve,VFr),b(f,vqe,_),b(f,nr,_),M(T8,nr,null),e(nr,XFr),e(nr,dc),e(dc,zFr),e(dc,EH),e(EH,QFr),e(dc,WFr),e(dc,CH),e(CH,HFr),e(dc,UFr),e(nr,JFr),e(nr,M8),e(M8,YFr),e(M8,ove),e(ove,KFr),e(M8,ZFr),e(nr,eTr),e(nr,Rt),M(E8,Rt,null),e(Rt,oTr),e(Rt,rve),e(rve,rTr),e(Rt,tTr),e(Rt,cc),e(cc,aTr),e(cc,tve),e(tve,nTr),e(cc,sTr),e(cc,wH),e(wH,lTr),e(cc,iTr),e(Rt,dTr),M(XE,Rt,null),e(nr,cTr),e(nr,Rr),M(C8,Rr,null),e(Rr,fTr),e(Rr,ave),e(ave,mTr),e(Rr,gTr),e(Rr,sn),e(sn,hTr),e(sn,nve),e(nve,pTr),e(sn,uTr),e(sn,sve),e(sve,_Tr),e(sn,bTr),e(sn,lve),e(lve,vTr),e(sn,FTr),e(Rr,TTr),e(Rr,w8),e(w8,zE),e(zE,ive),e(ive,MTr),e(zE,ETr),e(zE,AH),e(AH,CTr),e(zE,wTr),e(w8,ATr),e(w8,QE),e(QE,dve),e(dve,yTr),e(QE,LTr),e(QE,yH),e(yH,xTr),e(QE,$Tr),e(Rr,kTr),M(WE,Rr,null),b(f,Fqe,_),b(f,fc,_),e(fc,HE),e(HE,cve),M(A8,cve,null),e(fc,STr),e(fc,fve),e(fve,RTr),b(f,Tqe,_),b(f,sr,_),M(y8,sr,null),e(sr,BTr),e(sr,mc),e(mc,PTr),e(mc,LH),e(LH,ITr),e(mc,qTr),e(mc,xH),e(xH,NTr),e(mc,jTr),e(sr,DTr),e(sr,L8),e(L8,GTr),e(L8,mve),e(mve,OTr),e(L8,VTr),e(sr,XTr),e(sr,Bt),M(x8,Bt,null),e(Bt,zTr),e(Bt,gve),e(gve,QTr),e(Bt,WTr),e(Bt,gc),e(gc,HTr),e(gc,hve),e(hve,UTr),e(gc,JTr),e(gc,$H),e($H,YTr),e(gc,KTr),e(Bt,ZTr),M(UE,Bt,null),e(sr,e7r),e(sr,Br),M($8,Br,null),e(Br,o7r),e(Br,pve),e(pve,r7r),e(Br,t7r),e(Br,ln),e(ln,a7r),e(ln,uve),e(uve,n7r),e(ln,s7r),e(ln,_ve),e(_ve,l7r),e(ln,i7r),e(ln,bve),e(bve,d7r),e(ln,c7r),e(Br,f7r),e(Br,vve),e(vve,JE),e(JE,Fve),e(Fve,m7r),e(JE,g7r),e(JE,kH),e(kH,h7r),e(JE,p7r),e(Br,u7r),M(YE,Br,null),b(f,Mqe,_),b(f,hc,_),e(hc,KE),e(KE,Tve),M(k8,Tve,null),e(hc,_7r),e(hc,Mve),e(Mve,b7r),b(f,Eqe,_),b(f,lr,_),M(S8,lr,null),e(lr,v7r),e(lr,pc),e(pc,F7r),e(pc,SH),e(SH,T7r),e(pc,M7r),e(pc,RH),e(RH,E7r),e(pc,C7r),e(lr,w7r),e(lr,R8),e(R8,A7r),e(R8,Eve),e(Eve,y7r),e(R8,L7r),e(lr,x7r),e(lr,Pt),M(B8,Pt,null),e(Pt,$7r),e(Pt,Cve),e(Cve,k7r),e(Pt,S7r),e(Pt,uc),e(uc,R7r),e(uc,wve),e(wve,B7r),e(uc,P7r),e(uc,BH),e(BH,I7r),e(uc,q7r),e(Pt,N7r),M(ZE,Pt,null),e(lr,j7r),e(lr,Pr),M(P8,Pr,null),e(Pr,D7r),e(Pr,Ave),e(Ave,G7r),e(Pr,O7r),e(Pr,dn),e(dn,V7r),e(dn,yve),e(yve,X7r),e(dn,z7r),e(dn,Lve),e(Lve,Q7r),e(dn,W7r),e(dn,xve),e(xve,H7r),e(dn,U7r),e(Pr,J7r),e(Pr,de),e(de,e5),e(e5,$ve),e($ve,Y7r),e(e5,K7r),e(e5,PH),e(PH,Z7r),e(e5,eMr),e(de,oMr),e(de,o5),e(o5,kve),e(kve,rMr),e(o5,tMr),e(o5,IH),e(IH,aMr),e(o5,nMr),e(de,sMr),e(de,r5),e(r5,Sve),e(Sve,lMr),e(r5,iMr),e(r5,qH),e(qH,dMr),e(r5,cMr),e(de,fMr),e(de,t5),e(t5,Rve),e(Rve,mMr),e(t5,gMr),e(t5,NH),e(NH,hMr),e(t5,pMr),e(de,uMr),e(de,a5),e(a5,Bve),e(Bve,_Mr),e(a5,bMr),e(a5,jH),e(jH,vMr),e(a5,FMr),e(de,TMr),e(de,n5),e(n5,Pve),e(Pve,MMr),e(n5,EMr),e(n5,DH),e(DH,CMr),e(n5,wMr),e(de,AMr),e(de,s5),e(s5,Ive),e(Ive,yMr),e(s5,LMr),e(s5,GH),e(GH,xMr),e(s5,$Mr),e(de,kMr),e(de,l5),e(l5,qve),e(qve,SMr),e(l5,RMr),e(l5,OH),e(OH,BMr),e(l5,PMr),e(de,IMr),e(de,i5),e(i5,Nve),e(Nve,qMr),e(i5,NMr),e(i5,VH),e(VH,jMr),e(i5,DMr),e(de,GMr),e(de,d5),e(d5,jve),e(jve,OMr),e(d5,VMr),e(d5,XH),e(XH,XMr),e(d5,zMr),e(de,QMr),e(de,c5),e(c5,Dve),e(Dve,WMr),e(c5,HMr),e(c5,zH),e(zH,UMr),e(c5,JMr),e(de,YMr),e(de,f5),e(f5,Gve),e(Gve,KMr),e(f5,ZMr),e(f5,QH),e(QH,eEr),e(f5,oEr),e(de,rEr),e(de,m5),e(m5,Ove),e(Ove,tEr),e(m5,aEr),e(m5,WH),e(WH,nEr),e(m5,sEr),e(de,lEr),e(de,g5),e(g5,Vve),e(Vve,iEr),e(g5,dEr),e(g5,HH),e(HH,cEr),e(g5,fEr),e(de,mEr),e(de,h5),e(h5,Xve),e(Xve,gEr),e(h5,hEr),e(h5,UH),e(UH,pEr),e(h5,uEr),e(de,_Er),e(de,p5),e(p5,zve),e(zve,bEr),e(p5,vEr),e(p5,JH),e(JH,FEr),e(p5,TEr),e(de,MEr),e(de,u5),e(u5,Qve),e(Qve,EEr),e(u5,CEr),e(u5,YH),e(YH,wEr),e(u5,AEr),e(de,yEr),e(de,_5),e(_5,Wve),e(Wve,LEr),e(_5,xEr),e(_5,KH),e(KH,$Er),e(_5,kEr),e(de,SEr),e(de,b5),e(b5,Hve),e(Hve,REr),e(b5,BEr),e(b5,ZH),e(ZH,PEr),e(b5,IEr),e(de,qEr),e(de,v5),e(v5,Uve),e(Uve,NEr),e(v5,jEr),e(v5,eU),e(eU,DEr),e(v5,GEr),e(Pr,OEr),M(F5,Pr,null),b(f,Cqe,_),b(f,_c,_),e(_c,T5),e(T5,Jve),M(I8,Jve,null),e(_c,VEr),e(_c,Yve),e(Yve,XEr),b(f,wqe,_),b(f,ir,_),M(q8,ir,null),e(ir,zEr),e(ir,bc),e(bc,QEr),e(bc,oU),e(oU,WEr),e(bc,HEr),e(bc,rU),e(rU,UEr),e(bc,JEr),e(ir,YEr),e(ir,N8),e(N8,KEr),e(N8,Kve),e(Kve,ZEr),e(N8,e5r),e(ir,o5r),e(ir,It),M(j8,It,null),e(It,r5r),e(It,Zve),e(Zve,t5r),e(It,a5r),e(It,vc),e(vc,n5r),e(vc,eFe),e(eFe,s5r),e(vc,l5r),e(vc,tU),e(tU,i5r),e(vc,d5r),e(It,c5r),M(M5,It,null),e(ir,f5r),e(ir,Ir),M(D8,Ir,null),e(Ir,m5r),e(Ir,oFe),e(oFe,g5r),e(Ir,h5r),e(Ir,cn),e(cn,p5r),e(cn,rFe),e(rFe,u5r),e(cn,_5r),e(cn,tFe),e(tFe,b5r),e(cn,v5r),e(cn,aFe),e(aFe,F5r),e(cn,T5r),e(Ir,M5r),e(Ir,ce),e(ce,E5),e(E5,nFe),e(nFe,E5r),e(E5,C5r),e(E5,aU),e(aU,w5r),e(E5,A5r),e(ce,y5r),e(ce,C5),e(C5,sFe),e(sFe,L5r),e(C5,x5r),e(C5,nU),e(nU,$5r),e(C5,k5r),e(ce,S5r),e(ce,w5),e(w5,lFe),e(lFe,R5r),e(w5,B5r),e(w5,sU),e(sU,P5r),e(w5,I5r),e(ce,q5r),e(ce,A5),e(A5,iFe),e(iFe,N5r),e(A5,j5r),e(A5,lU),e(lU,D5r),e(A5,G5r),e(ce,O5r),e(ce,y5),e(y5,dFe),e(dFe,V5r),e(y5,X5r),e(y5,iU),e(iU,z5r),e(y5,Q5r),e(ce,W5r),e(ce,L5),e(L5,cFe),e(cFe,H5r),e(L5,U5r),e(L5,dU),e(dU,J5r),e(L5,Y5r),e(ce,K5r),e(ce,x5),e(x5,fFe),e(fFe,Z5r),e(x5,eCr),e(x5,cU),e(cU,oCr),e(x5,rCr),e(ce,tCr),e(ce,$5),e($5,mFe),e(mFe,aCr),e($5,nCr),e($5,fU),e(fU,sCr),e($5,lCr),e(ce,iCr),e(ce,k5),e(k5,gFe),e(gFe,dCr),e(k5,cCr),e(k5,mU),e(mU,fCr),e(k5,mCr),e(ce,gCr),e(ce,S5),e(S5,hFe),e(hFe,hCr),e(S5,pCr),e(S5,gU),e(gU,uCr),e(S5,_Cr),e(ce,bCr),e(ce,R5),e(R5,pFe),e(pFe,vCr),e(R5,FCr),e(R5,hU),e(hU,TCr),e(R5,MCr),e(ce,ECr),e(ce,B5),e(B5,uFe),e(uFe,CCr),e(B5,wCr),e(B5,pU),e(pU,ACr),e(B5,yCr),e(ce,LCr),e(ce,P5),e(P5,_Fe),e(_Fe,xCr),e(P5,$Cr),e(P5,uU),e(uU,kCr),e(P5,SCr),e(ce,RCr),e(ce,I5),e(I5,bFe),e(bFe,BCr),e(I5,PCr),e(I5,_U),e(_U,ICr),e(I5,qCr),e(ce,NCr),e(ce,q5),e(q5,vFe),e(vFe,jCr),e(q5,DCr),e(q5,bU),e(bU,GCr),e(q5,OCr),e(ce,VCr),e(ce,N5),e(N5,FFe),e(FFe,XCr),e(N5,zCr),e(N5,vU),e(vU,QCr),e(N5,WCr),e(ce,HCr),e(ce,j5),e(j5,TFe),e(TFe,UCr),e(j5,JCr),e(j5,FU),e(FU,YCr),e(j5,KCr),e(ce,ZCr),e(ce,D5),e(D5,MFe),e(MFe,e3r),e(D5,o3r),e(D5,TU),e(TU,r3r),e(D5,t3r),e(ce,a3r),e(ce,G5),e(G5,EFe),e(EFe,n3r),e(G5,s3r),e(G5,MU),e(MU,l3r),e(G5,i3r),e(ce,d3r),e(ce,O5),e(O5,CFe),e(CFe,c3r),e(O5,f3r),e(O5,EU),e(EU,m3r),e(O5,g3r),e(Ir,h3r),M(V5,Ir,null),b(f,Aqe,_),b(f,Fc,_),e(Fc,X5),e(X5,wFe),M(G8,wFe,null),e(Fc,p3r),e(Fc,AFe),e(AFe,u3r),b(f,yqe,_),b(f,dr,_),M(O8,dr,null),e(dr,_3r),e(dr,Tc),e(Tc,b3r),e(Tc,CU),e(CU,v3r),e(Tc,F3r),e(Tc,wU),e(wU,T3r),e(Tc,M3r),e(dr,E3r),e(dr,V8),e(V8,C3r),e(V8,yFe),e(yFe,w3r),e(V8,A3r),e(dr,y3r),e(dr,qt),M(X8,qt,null),e(qt,L3r),e(qt,LFe),e(LFe,x3r),e(qt,$3r),e(qt,Mc),e(Mc,k3r),e(Mc,xFe),e(xFe,S3r),e(Mc,R3r),e(Mc,AU),e(AU,B3r),e(Mc,P3r),e(qt,I3r),M(z5,qt,null),e(dr,q3r),e(dr,qr),M(z8,qr,null),e(qr,N3r),e(qr,$Fe),e($Fe,j3r),e(qr,D3r),e(qr,fn),e(fn,G3r),e(fn,kFe),e(kFe,O3r),e(fn,V3r),e(fn,SFe),e(SFe,X3r),e(fn,z3r),e(fn,RFe),e(RFe,Q3r),e(fn,W3r),e(qr,H3r),e(qr,BFe),e(BFe,Q5),e(Q5,PFe),e(PFe,U3r),e(Q5,J3r),e(Q5,yU),e(yU,Y3r),e(Q5,K3r),e(qr,Z3r),M(W5,qr,null),b(f,Lqe,_),b(f,Ec,_),e(Ec,H5),e(H5,IFe),M(Q8,IFe,null),e(Ec,ewr),e(Ec,qFe),e(qFe,owr),b(f,xqe,_),b(f,cr,_),M(W8,cr,null),e(cr,rwr),e(cr,Cc),e(Cc,twr),e(Cc,LU),e(LU,awr),e(Cc,nwr),e(Cc,xU),e(xU,swr),e(Cc,lwr),e(cr,iwr),e(cr,H8),e(H8,dwr),e(H8,NFe),e(NFe,cwr),e(H8,fwr),e(cr,mwr),e(cr,Nt),M(U8,Nt,null),e(Nt,gwr),e(Nt,jFe),e(jFe,hwr),e(Nt,pwr),e(Nt,wc),e(wc,uwr),e(wc,DFe),e(DFe,_wr),e(wc,bwr),e(wc,$U),e($U,vwr),e(wc,Fwr),e(Nt,Twr),M(U5,Nt,null),e(cr,Mwr),e(cr,Nr),M(J8,Nr,null),e(Nr,Ewr),e(Nr,GFe),e(GFe,Cwr),e(Nr,wwr),e(Nr,mn),e(mn,Awr),e(mn,OFe),e(OFe,ywr),e(mn,Lwr),e(mn,VFe),e(VFe,xwr),e(mn,$wr),e(mn,XFe),e(XFe,kwr),e(mn,Swr),e(Nr,Rwr),e(Nr,zFe),e(zFe,J5),e(J5,QFe),e(QFe,Bwr),e(J5,Pwr),e(J5,kU),e(kU,Iwr),e(J5,qwr),e(Nr,Nwr),M(Y5,Nr,null),b(f,$qe,_),b(f,Ac,_),e(Ac,K5),e(K5,WFe),M(Y8,WFe,null),e(Ac,jwr),e(Ac,HFe),e(HFe,Dwr),b(f,kqe,_),b(f,fr,_),M(K8,fr,null),e(fr,Gwr),e(fr,yc),e(yc,Owr),e(yc,SU),e(SU,Vwr),e(yc,Xwr),e(yc,RU),e(RU,zwr),e(yc,Qwr),e(fr,Wwr),e(fr,Z8),e(Z8,Hwr),e(Z8,UFe),e(UFe,Uwr),e(Z8,Jwr),e(fr,Ywr),e(fr,jt),M(ex,jt,null),e(jt,Kwr),e(jt,JFe),e(JFe,Zwr),e(jt,eAr),e(jt,Lc),e(Lc,oAr),e(Lc,YFe),e(YFe,rAr),e(Lc,tAr),e(Lc,BU),e(BU,aAr),e(Lc,nAr),e(jt,sAr),M(Z5,jt,null),e(fr,lAr),e(fr,jr),M(ox,jr,null),e(jr,iAr),e(jr,KFe),e(KFe,dAr),e(jr,cAr),e(jr,gn),e(gn,fAr),e(gn,ZFe),e(ZFe,mAr),e(gn,gAr),e(gn,eTe),e(eTe,hAr),e(gn,pAr),e(gn,oTe),e(oTe,uAr),e(gn,_Ar),e(jr,bAr),e(jr,re),e(re,eC),e(eC,rTe),e(rTe,vAr),e(eC,FAr),e(eC,PU),e(PU,TAr),e(eC,MAr),e(re,EAr),e(re,oC),e(oC,tTe),e(tTe,CAr),e(oC,wAr),e(oC,IU),e(IU,AAr),e(oC,yAr),e(re,LAr),e(re,rC),e(rC,aTe),e(aTe,xAr),e(rC,$Ar),e(rC,qU),e(qU,kAr),e(rC,SAr),e(re,RAr),e(re,tC),e(tC,nTe),e(nTe,BAr),e(tC,PAr),e(tC,NU),e(NU,IAr),e(tC,qAr),e(re,NAr),e(re,aC),e(aC,sTe),e(sTe,jAr),e(aC,DAr),e(aC,jU),e(jU,GAr),e(aC,OAr),e(re,VAr),e(re,nC),e(nC,lTe),e(lTe,XAr),e(nC,zAr),e(nC,DU),e(DU,QAr),e(nC,WAr),e(re,HAr),e(re,sC),e(sC,iTe),e(iTe,UAr),e(sC,JAr),e(sC,GU),e(GU,YAr),e(sC,KAr),e(re,ZAr),e(re,lC),e(lC,dTe),e(dTe,e6r),e(lC,o6r),e(lC,OU),e(OU,r6r),e(lC,t6r),e(re,a6r),e(re,iC),e(iC,cTe),e(cTe,n6r),e(iC,s6r),e(iC,VU),e(VU,l6r),e(iC,i6r),e(re,d6r),e(re,dC),e(dC,fTe),e(fTe,c6r),e(dC,f6r),e(dC,XU),e(XU,m6r),e(dC,g6r),e(re,h6r),e(re,cC),e(cC,mTe),e(mTe,p6r),e(cC,u6r),e(cC,zU),e(zU,_6r),e(cC,b6r),e(re,v6r),e(re,fC),e(fC,gTe),e(gTe,F6r),e(fC,T6r),e(fC,QU),e(QU,M6r),e(fC,E6r),e(re,C6r),e(re,mC),e(mC,hTe),e(hTe,w6r),e(mC,A6r),e(mC,WU),e(WU,y6r),e(mC,L6r),e(re,x6r),e(re,gC),e(gC,pTe),e(pTe,$6r),e(gC,k6r),e(gC,HU),e(HU,S6r),e(gC,R6r),e(re,B6r),e(re,hC),e(hC,uTe),e(uTe,P6r),e(hC,I6r),e(hC,UU),e(UU,q6r),e(hC,N6r),e(re,j6r),e(re,pC),e(pC,_Te),e(_Te,D6r),e(pC,G6r),e(pC,JU),e(JU,O6r),e(pC,V6r),e(re,X6r),e(re,uC),e(uC,bTe),e(bTe,z6r),e(uC,Q6r),e(uC,YU),e(YU,W6r),e(uC,H6r),e(re,U6r),e(re,_C),e(_C,vTe),e(vTe,J6r),e(_C,Y6r),e(_C,KU),e(KU,K6r),e(_C,Z6r),e(re,e0r),e(re,bC),e(bC,FTe),e(FTe,o0r),e(bC,r0r),e(bC,ZU),e(ZU,t0r),e(bC,a0r),e(re,n0r),e(re,vC),e(vC,TTe),e(TTe,s0r),e(vC,l0r),e(vC,eJ),e(eJ,i0r),e(vC,d0r),e(re,c0r),e(re,FC),e(FC,MTe),e(MTe,f0r),e(FC,m0r),e(FC,oJ),e(oJ,g0r),e(FC,h0r),e(re,p0r),e(re,TC),e(TC,ETe),e(ETe,u0r),e(TC,_0r),e(TC,rJ),e(rJ,b0r),e(TC,v0r),e(re,F0r),e(re,MC),e(MC,CTe),e(CTe,T0r),e(MC,M0r),e(MC,tJ),e(tJ,E0r),e(MC,C0r),e(re,w0r),e(re,EC),e(EC,wTe),e(wTe,A0r),e(EC,y0r),e(EC,aJ),e(aJ,L0r),e(EC,x0r),e(re,$0r),e(re,CC),e(CC,ATe),e(ATe,k0r),e(CC,S0r),e(CC,nJ),e(nJ,R0r),e(CC,B0r),e(jr,P0r),M(wC,jr,null),b(f,Sqe,_),b(f,xc,_),e(xc,AC),e(AC,yTe),M(rx,yTe,null),e(xc,I0r),e(xc,LTe),e(LTe,q0r),b(f,Rqe,_),b(f,mr,_),M(tx,mr,null),e(mr,N0r),e(mr,$c),e($c,j0r),e($c,sJ),e(sJ,D0r),e($c,G0r),e($c,lJ),e(lJ,O0r),e($c,V0r),e(mr,X0r),e(mr,ax),e(ax,z0r),e(ax,xTe),e(xTe,Q0r),e(ax,W0r),e(mr,H0r),e(mr,Dt),M(nx,Dt,null),e(Dt,U0r),e(Dt,$Te),e($Te,J0r),e(Dt,Y0r),e(Dt,kc),e(kc,K0r),e(kc,kTe),e(kTe,Z0r),e(kc,eyr),e(kc,iJ),e(iJ,oyr),e(kc,ryr),e(Dt,tyr),M(yC,Dt,null),e(mr,ayr),e(mr,Dr),M(sx,Dr,null),e(Dr,nyr),e(Dr,STe),e(STe,syr),e(Dr,lyr),e(Dr,hn),e(hn,iyr),e(hn,RTe),e(RTe,dyr),e(hn,cyr),e(hn,BTe),e(BTe,fyr),e(hn,myr),e(hn,PTe),e(PTe,gyr),e(hn,hyr),e(Dr,pyr),e(Dr,ke),e(ke,LC),e(LC,ITe),e(ITe,uyr),e(LC,_yr),e(LC,dJ),e(dJ,byr),e(LC,vyr),e(ke,Fyr),e(ke,xC),e(xC,qTe),e(qTe,Tyr),e(xC,Myr),e(xC,cJ),e(cJ,Eyr),e(xC,Cyr),e(ke,wyr),e(ke,$C),e($C,NTe),e(NTe,Ayr),e($C,yyr),e($C,fJ),e(fJ,Lyr),e($C,xyr),e(ke,$yr),e(ke,kC),e(kC,jTe),e(jTe,kyr),e(kC,Syr),e(kC,mJ),e(mJ,Ryr),e(kC,Byr),e(ke,Pyr),e(ke,SC),e(SC,DTe),e(DTe,Iyr),e(SC,qyr),e(SC,gJ),e(gJ,Nyr),e(SC,jyr),e(ke,Dyr),e(ke,RC),e(RC,GTe),e(GTe,Gyr),e(RC,Oyr),e(RC,hJ),e(hJ,Vyr),e(RC,Xyr),e(ke,zyr),e(ke,BC),e(BC,OTe),e(OTe,Qyr),e(BC,Wyr),e(BC,pJ),e(pJ,Hyr),e(BC,Uyr),e(ke,Jyr),e(ke,PC),e(PC,VTe),e(VTe,Yyr),e(PC,Kyr),e(PC,uJ),e(uJ,Zyr),e(PC,eLr),e(ke,oLr),e(ke,IC),e(IC,XTe),e(XTe,rLr),e(IC,tLr),e(IC,_J),e(_J,aLr),e(IC,nLr),e(Dr,sLr),M(qC,Dr,null),b(f,Bqe,_),b(f,Sc,_),e(Sc,NC),e(NC,zTe),M(lx,zTe,null),e(Sc,lLr),e(Sc,QTe),e(QTe,iLr),b(f,Pqe,_),b(f,gr,_),M(ix,gr,null),e(gr,dLr),e(gr,Rc),e(Rc,cLr),e(Rc,bJ),e(bJ,fLr),e(Rc,mLr),e(Rc,vJ),e(vJ,gLr),e(Rc,hLr),e(gr,pLr),e(gr,dx),e(dx,uLr),e(dx,WTe),e(WTe,_Lr),e(dx,bLr),e(gr,vLr),e(gr,Gt),M(cx,Gt,null),e(Gt,FLr),e(Gt,HTe),e(HTe,TLr),e(Gt,MLr),e(Gt,Bc),e(Bc,ELr),e(Bc,UTe),e(UTe,CLr),e(Bc,wLr),e(Bc,FJ),e(FJ,ALr),e(Bc,yLr),e(Gt,LLr),M(jC,Gt,null),e(gr,xLr),e(gr,Gr),M(fx,Gr,null),e(Gr,$Lr),e(Gr,JTe),e(JTe,kLr),e(Gr,SLr),e(Gr,pn),e(pn,RLr),e(pn,YTe),e(YTe,BLr),e(pn,PLr),e(pn,KTe),e(KTe,ILr),e(pn,qLr),e(pn,ZTe),e(ZTe,NLr),e(pn,jLr),e(Gr,DLr),e(Gr,Me),e(Me,DC),e(DC,e7e),e(e7e,GLr),e(DC,OLr),e(DC,TJ),e(TJ,VLr),e(DC,XLr),e(Me,zLr),e(Me,GC),e(GC,o7e),e(o7e,QLr),e(GC,WLr),e(GC,MJ),e(MJ,HLr),e(GC,ULr),e(Me,JLr),e(Me,OC),e(OC,r7e),e(r7e,YLr),e(OC,KLr),e(OC,EJ),e(EJ,ZLr),e(OC,e8r),e(Me,o8r),e(Me,VC),e(VC,t7e),e(t7e,r8r),e(VC,t8r),e(VC,CJ),e(CJ,a8r),e(VC,n8r),e(Me,s8r),e(Me,XC),e(XC,a7e),e(a7e,l8r),e(XC,i8r),e(XC,wJ),e(wJ,d8r),e(XC,c8r),e(Me,f8r),e(Me,zC),e(zC,n7e),e(n7e,m8r),e(zC,g8r),e(zC,AJ),e(AJ,h8r),e(zC,p8r),e(Me,u8r),e(Me,QC),e(QC,s7e),e(s7e,_8r),e(QC,b8r),e(QC,yJ),e(yJ,v8r),e(QC,F8r),e(Me,T8r),e(Me,WC),e(WC,l7e),e(l7e,M8r),e(WC,E8r),e(WC,LJ),e(LJ,C8r),e(WC,w8r),e(Me,A8r),e(Me,HC),e(HC,i7e),e(i7e,y8r),e(HC,L8r),e(HC,xJ),e(xJ,x8r),e(HC,$8r),e(Me,k8r),e(Me,UC),e(UC,d7e),e(d7e,S8r),e(UC,R8r),e(UC,$J),e($J,B8r),e(UC,P8r),e(Me,I8r),e(Me,JC),e(JC,c7e),e(c7e,q8r),e(JC,N8r),e(JC,kJ),e(kJ,j8r),e(JC,D8r),e(Me,G8r),e(Me,YC),e(YC,f7e),e(f7e,O8r),e(YC,V8r),e(YC,SJ),e(SJ,X8r),e(YC,z8r),e(Gr,Q8r),M(KC,Gr,null),b(f,Iqe,_),b(f,Pc,_),e(Pc,ZC),e(ZC,m7e),M(mx,m7e,null),e(Pc,W8r),e(Pc,g7e),e(g7e,H8r),b(f,qqe,_),b(f,hr,_),M(gx,hr,null),e(hr,U8r),e(hr,Ic),e(Ic,J8r),e(Ic,RJ),e(RJ,Y8r),e(Ic,K8r),e(Ic,BJ),e(BJ,Z8r),e(Ic,exr),e(hr,oxr),e(hr,hx),e(hx,rxr),e(hx,h7e),e(h7e,txr),e(hx,axr),e(hr,nxr),e(hr,Ot),M(px,Ot,null),e(Ot,sxr),e(Ot,p7e),e(p7e,lxr),e(Ot,ixr),e(Ot,qc),e(qc,dxr),e(qc,u7e),e(u7e,cxr),e(qc,fxr),e(qc,PJ),e(PJ,mxr),e(qc,gxr),e(Ot,hxr),M(e3,Ot,null),e(hr,pxr),e(hr,Or),M(ux,Or,null),e(Or,uxr),e(Or,_7e),e(_7e,_xr),e(Or,bxr),e(Or,un),e(un,vxr),e(un,b7e),e(b7e,Fxr),e(un,Txr),e(un,v7e),e(v7e,Mxr),e(un,Exr),e(un,F7e),e(F7e,Cxr),e(un,wxr),e(Or,Axr),e(Or,Le),e(Le,o3),e(o3,T7e),e(T7e,yxr),e(o3,Lxr),e(o3,IJ),e(IJ,xxr),e(o3,$xr),e(Le,kxr),e(Le,r3),e(r3,M7e),e(M7e,Sxr),e(r3,Rxr),e(r3,qJ),e(qJ,Bxr),e(r3,Pxr),e(Le,Ixr),e(Le,t3),e(t3,E7e),e(E7e,qxr),e(t3,Nxr),e(t3,NJ),e(NJ,jxr),e(t3,Dxr),e(Le,Gxr),e(Le,a3),e(a3,C7e),e(C7e,Oxr),e(a3,Vxr),e(a3,jJ),e(jJ,Xxr),e(a3,zxr),e(Le,Qxr),e(Le,n3),e(n3,w7e),e(w7e,Wxr),e(n3,Hxr),e(n3,DJ),e(DJ,Uxr),e(n3,Jxr),e(Le,Yxr),e(Le,s3),e(s3,A7e),e(A7e,Kxr),e(s3,Zxr),e(s3,GJ),e(GJ,e9r),e(s3,o9r),e(Le,r9r),e(Le,l3),e(l3,y7e),e(y7e,t9r),e(l3,a9r),e(l3,OJ),e(OJ,n9r),e(l3,s9r),e(Le,l9r),e(Le,i3),e(i3,L7e),e(L7e,i9r),e(i3,d9r),e(i3,VJ),e(VJ,c9r),e(i3,f9r),e(Le,m9r),e(Le,d3),e(d3,x7e),e(x7e,g9r),e(d3,h9r),e(d3,XJ),e(XJ,p9r),e(d3,u9r),e(Le,_9r),e(Le,c3),e(c3,$7e),e($7e,b9r),e(c3,v9r),e(c3,zJ),e(zJ,F9r),e(c3,T9r),e(Or,M9r),M(f3,Or,null),b(f,Nqe,_),b(f,Nc,_),e(Nc,m3),e(m3,k7e),M(_x,k7e,null),e(Nc,E9r),e(Nc,S7e),e(S7e,C9r),b(f,jqe,_),b(f,pr,_),M(bx,pr,null),e(pr,w9r),e(pr,jc),e(jc,A9r),e(jc,QJ),e(QJ,y9r),e(jc,L9r),e(jc,WJ),e(WJ,x9r),e(jc,$9r),e(pr,k9r),e(pr,vx),e(vx,S9r),e(vx,R7e),e(R7e,R9r),e(vx,B9r),e(pr,P9r),e(pr,Vt),M(Fx,Vt,null),e(Vt,I9r),e(Vt,B7e),e(B7e,q9r),e(Vt,N9r),e(Vt,Dc),e(Dc,j9r),e(Dc,P7e),e(P7e,D9r),e(Dc,G9r),e(Dc,HJ),e(HJ,O9r),e(Dc,V9r),e(Vt,X9r),M(g3,Vt,null),e(pr,z9r),e(pr,Vr),M(Tx,Vr,null),e(Vr,Q9r),e(Vr,I7e),e(I7e,W9r),e(Vr,H9r),e(Vr,_n),e(_n,U9r),e(_n,q7e),e(q7e,J9r),e(_n,Y9r),e(_n,N7e),e(N7e,K9r),e(_n,Z9r),e(_n,j7e),e(j7e,e$r),e(_n,o$r),e(Vr,r$r),e(Vr,Se),e(Se,h3),e(h3,D7e),e(D7e,t$r),e(h3,a$r),e(h3,UJ),e(UJ,n$r),e(h3,s$r),e(Se,l$r),e(Se,p3),e(p3,G7e),e(G7e,i$r),e(p3,d$r),e(p3,JJ),e(JJ,c$r),e(p3,f$r),e(Se,m$r),e(Se,u3),e(u3,O7e),e(O7e,g$r),e(u3,h$r),e(u3,YJ),e(YJ,p$r),e(u3,u$r),e(Se,_$r),e(Se,_3),e(_3,V7e),e(V7e,b$r),e(_3,v$r),e(_3,KJ),e(KJ,F$r),e(_3,T$r),e(Se,M$r),e(Se,b3),e(b3,X7e),e(X7e,E$r),e(b3,C$r),e(b3,ZJ),e(ZJ,w$r),e(b3,A$r),e(Se,y$r),e(Se,v3),e(v3,z7e),e(z7e,L$r),e(v3,x$r),e(v3,eY),e(eY,$$r),e(v3,k$r),e(Se,S$r),e(Se,F3),e(F3,Q7e),e(Q7e,R$r),e(F3,B$r),e(F3,oY),e(oY,P$r),e(F3,I$r),e(Se,q$r),e(Se,T3),e(T3,W7e),e(W7e,N$r),e(T3,j$r),e(T3,rY),e(rY,D$r),e(T3,G$r),e(Se,O$r),e(Se,M3),e(M3,H7e),e(H7e,V$r),e(M3,X$r),e(M3,tY),e(tY,z$r),e(M3,Q$r),e(Vr,W$r),M(E3,Vr,null),b(f,Dqe,_),b(f,Gc,_),e(Gc,C3),e(C3,U7e),M(Mx,U7e,null),e(Gc,H$r),e(Gc,J7e),e(J7e,U$r),b(f,Gqe,_),b(f,ur,_),M(Ex,ur,null),e(ur,J$r),e(ur,Oc),e(Oc,Y$r),e(Oc,aY),e(aY,K$r),e(Oc,Z$r),e(Oc,nY),e(nY,ekr),e(Oc,okr),e(ur,rkr),e(ur,Cx),e(Cx,tkr),e(Cx,Y7e),e(Y7e,akr),e(Cx,nkr),e(ur,skr),e(ur,Xt),M(wx,Xt,null),e(Xt,lkr),e(Xt,K7e),e(K7e,ikr),e(Xt,dkr),e(Xt,Vc),e(Vc,ckr),e(Vc,Z7e),e(Z7e,fkr),e(Vc,mkr),e(Vc,sY),e(sY,gkr),e(Vc,hkr),e(Xt,pkr),M(w3,Xt,null),e(ur,ukr),e(ur,Xr),M(Ax,Xr,null),e(Xr,_kr),e(Xr,eMe),e(eMe,bkr),e(Xr,vkr),e(Xr,bn),e(bn,Fkr),e(bn,oMe),e(oMe,Tkr),e(bn,Mkr),e(bn,rMe),e(rMe,Ekr),e(bn,Ckr),e(bn,tMe),e(tMe,wkr),e(bn,Akr),e(Xr,ykr),e(Xr,xe),e(xe,A3),e(A3,aMe),e(aMe,Lkr),e(A3,xkr),e(A3,lY),e(lY,$kr),e(A3,kkr),e(xe,Skr),e(xe,y3),e(y3,nMe),e(nMe,Rkr),e(y3,Bkr),e(y3,iY),e(iY,Pkr),e(y3,Ikr),e(xe,qkr),e(xe,L3),e(L3,sMe),e(sMe,Nkr),e(L3,jkr),e(L3,dY),e(dY,Dkr),e(L3,Gkr),e(xe,Okr),e(xe,x3),e(x3,lMe),e(lMe,Vkr),e(x3,Xkr),e(x3,cY),e(cY,zkr),e(x3,Qkr),e(xe,Wkr),e(xe,$3),e($3,iMe),e(iMe,Hkr),e($3,Ukr),e($3,fY),e(fY,Jkr),e($3,Ykr),e(xe,Kkr),e(xe,k3),e(k3,dMe),e(dMe,Zkr),e(k3,eSr),e(k3,mY),e(mY,oSr),e(k3,rSr),e(xe,tSr),e(xe,S3),e(S3,cMe),e(cMe,aSr),e(S3,nSr),e(S3,gY),e(gY,sSr),e(S3,lSr),e(xe,iSr),e(xe,R3),e(R3,fMe),e(fMe,dSr),e(R3,cSr),e(R3,hY),e(hY,fSr),e(R3,mSr),e(xe,gSr),e(xe,B3),e(B3,mMe),e(mMe,hSr),e(B3,pSr),e(B3,pY),e(pY,uSr),e(B3,_Sr),e(xe,bSr),e(xe,P3),e(P3,gMe),e(gMe,vSr),e(P3,FSr),e(P3,uY),e(uY,TSr),e(P3,MSr),e(Xr,ESr),M(I3,Xr,null),b(f,Oqe,_),b(f,Xc,_),e(Xc,q3),e(q3,hMe),M(yx,hMe,null),e(Xc,CSr),e(Xc,pMe),e(pMe,wSr),b(f,Vqe,_),b(f,_r,_),M(Lx,_r,null),e(_r,ASr),e(_r,zc),e(zc,ySr),e(zc,_Y),e(_Y,LSr),e(zc,xSr),e(zc,bY),e(bY,$Sr),e(zc,kSr),e(_r,SSr),e(_r,xx),e(xx,RSr),e(xx,uMe),e(uMe,BSr),e(xx,PSr),e(_r,ISr),e(_r,zt),M($x,zt,null),e(zt,qSr),e(zt,_Me),e(_Me,NSr),e(zt,jSr),e(zt,Qc),e(Qc,DSr),e(Qc,bMe),e(bMe,GSr),e(Qc,OSr),e(Qc,vY),e(vY,VSr),e(Qc,XSr),e(zt,zSr),M(N3,zt,null),e(_r,QSr),e(_r,zr),M(kx,zr,null),e(zr,WSr),e(zr,vMe),e(vMe,HSr),e(zr,USr),e(zr,vn),e(vn,JSr),e(vn,FMe),e(FMe,YSr),e(vn,KSr),e(vn,TMe),e(TMe,ZSr),e(vn,eRr),e(vn,MMe),e(MMe,oRr),e(vn,rRr),e(zr,tRr),e(zr,$e),e($e,j3),e(j3,EMe),e(EMe,aRr),e(j3,nRr),e(j3,FY),e(FY,sRr),e(j3,lRr),e($e,iRr),e($e,D3),e(D3,CMe),e(CMe,dRr),e(D3,cRr),e(D3,TY),e(TY,fRr),e(D3,mRr),e($e,gRr),e($e,G3),e(G3,wMe),e(wMe,hRr),e(G3,pRr),e(G3,MY),e(MY,uRr),e(G3,_Rr),e($e,bRr),e($e,O3),e(O3,AMe),e(AMe,vRr),e(O3,FRr),e(O3,EY),e(EY,TRr),e(O3,MRr),e($e,ERr),e($e,V3),e(V3,yMe),e(yMe,CRr),e(V3,wRr),e(V3,CY),e(CY,ARr),e(V3,yRr),e($e,LRr),e($e,X3),e(X3,LMe),e(LMe,xRr),e(X3,$Rr),e(X3,wY),e(wY,kRr),e(X3,SRr),e($e,RRr),e($e,z3),e(z3,xMe),e(xMe,BRr),e(z3,PRr),e(z3,AY),e(AY,IRr),e(z3,qRr),e($e,NRr),e($e,Q3),e(Q3,$Me),e($Me,jRr),e(Q3,DRr),e(Q3,yY),e(yY,GRr),e(Q3,ORr),e($e,VRr),e($e,W3),e(W3,kMe),e(kMe,XRr),e(W3,zRr),e(W3,LY),e(LY,QRr),e(W3,WRr),e($e,HRr),e($e,H3),e(H3,SMe),e(SMe,URr),e(H3,JRr),e(H3,xY),e(xY,YRr),e(H3,KRr),e(zr,ZRr),M(U3,zr,null),b(f,Xqe,_),b(f,Wc,_),e(Wc,J3),e(J3,RMe),M(Sx,RMe,null),e(Wc,eBr),e(Wc,BMe),e(BMe,oBr),b(f,zqe,_),b(f,br,_),M(Rx,br,null),e(br,rBr),e(br,Hc),e(Hc,tBr),e(Hc,$Y),e($Y,aBr),e(Hc,nBr),e(Hc,kY),e(kY,sBr),e(Hc,lBr),e(br,iBr),e(br,Bx),e(Bx,dBr),e(Bx,PMe),e(PMe,cBr),e(Bx,fBr),e(br,mBr),e(br,Qt),M(Px,Qt,null),e(Qt,gBr),e(Qt,IMe),e(IMe,hBr),e(Qt,pBr),e(Qt,Uc),e(Uc,uBr),e(Uc,qMe),e(qMe,_Br),e(Uc,bBr),e(Uc,SY),e(SY,vBr),e(Uc,FBr),e(Qt,TBr),M(Y3,Qt,null),e(br,MBr),e(br,Qr),M(Ix,Qr,null),e(Qr,EBr),e(Qr,NMe),e(NMe,CBr),e(Qr,wBr),e(Qr,Fn),e(Fn,ABr),e(Fn,jMe),e(jMe,yBr),e(Fn,LBr),e(Fn,DMe),e(DMe,xBr),e(Fn,$Br),e(Fn,GMe),e(GMe,kBr),e(Fn,SBr),e(Qr,RBr),e(Qr,De),e(De,K3),e(K3,OMe),e(OMe,BBr),e(K3,PBr),e(K3,RY),e(RY,IBr),e(K3,qBr),e(De,NBr),e(De,Z3),e(Z3,VMe),e(VMe,jBr),e(Z3,DBr),e(Z3,BY),e(BY,GBr),e(Z3,OBr),e(De,VBr),e(De,ew),e(ew,XMe),e(XMe,XBr),e(ew,zBr),e(ew,PY),e(PY,QBr),e(ew,WBr),e(De,HBr),e(De,ow),e(ow,zMe),e(zMe,UBr),e(ow,JBr),e(ow,IY),e(IY,YBr),e(ow,KBr),e(De,ZBr),e(De,rw),e(rw,QMe),e(QMe,ePr),e(rw,oPr),e(rw,qY),e(qY,rPr),e(rw,tPr),e(De,aPr),e(De,tw),e(tw,WMe),e(WMe,nPr),e(tw,sPr),e(tw,NY),e(NY,lPr),e(tw,iPr),e(De,dPr),e(De,aw),e(aw,HMe),e(HMe,cPr),e(aw,fPr),e(aw,jY),e(jY,mPr),e(aw,gPr),e(De,hPr),e(De,nw),e(nw,UMe),e(UMe,pPr),e(nw,uPr),e(nw,DY),e(DY,_Pr),e(nw,bPr),e(Qr,vPr),M(sw,Qr,null),b(f,Qqe,_),b(f,Jc,_),e(Jc,lw),e(lw,JMe),M(qx,JMe,null),e(Jc,FPr),e(Jc,YMe),e(YMe,TPr),b(f,Wqe,_),b(f,vr,_),M(Nx,vr,null),e(vr,MPr),e(vr,Yc),e(Yc,EPr),e(Yc,GY),e(GY,CPr),e(Yc,wPr),e(Yc,OY),e(OY,APr),e(Yc,yPr),e(vr,LPr),e(vr,jx),e(jx,xPr),e(jx,KMe),e(KMe,$Pr),e(jx,kPr),e(vr,SPr),e(vr,Wt),M(Dx,Wt,null),e(Wt,RPr),e(Wt,ZMe),e(ZMe,BPr),e(Wt,PPr),e(Wt,Kc),e(Kc,IPr),e(Kc,eEe),e(eEe,qPr),e(Kc,NPr),e(Kc,VY),e(VY,jPr),e(Kc,DPr),e(Wt,GPr),M(iw,Wt,null),e(vr,OPr),e(vr,Wr),M(Gx,Wr,null),e(Wr,VPr),e(Wr,oEe),e(oEe,XPr),e(Wr,zPr),e(Wr,Tn),e(Tn,QPr),e(Tn,rEe),e(rEe,WPr),e(Tn,HPr),e(Tn,tEe),e(tEe,UPr),e(Tn,JPr),e(Tn,aEe),e(aEe,YPr),e(Tn,KPr),e(Wr,ZPr),e(Wr,Ge),e(Ge,dw),e(dw,nEe),e(nEe,eIr),e(dw,oIr),e(dw,XY),e(XY,rIr),e(dw,tIr),e(Ge,aIr),e(Ge,cw),e(cw,sEe),e(sEe,nIr),e(cw,sIr),e(cw,zY),e(zY,lIr),e(cw,iIr),e(Ge,dIr),e(Ge,fw),e(fw,lEe),e(lEe,cIr),e(fw,fIr),e(fw,QY),e(QY,mIr),e(fw,gIr),e(Ge,hIr),e(Ge,mw),e(mw,iEe),e(iEe,pIr),e(mw,uIr),e(mw,WY),e(WY,_Ir),e(mw,bIr),e(Ge,vIr),e(Ge,gw),e(gw,dEe),e(dEe,FIr),e(gw,TIr),e(gw,HY),e(HY,MIr),e(gw,EIr),e(Ge,CIr),e(Ge,hw),e(hw,cEe),e(cEe,wIr),e(hw,AIr),e(hw,UY),e(UY,yIr),e(hw,LIr),e(Ge,xIr),e(Ge,pw),e(pw,fEe),e(fEe,$Ir),e(pw,kIr),e(pw,JY),e(JY,SIr),e(pw,RIr),e(Ge,BIr),e(Ge,uw),e(uw,mEe),e(mEe,PIr),e(uw,IIr),e(uw,YY),e(YY,qIr),e(uw,NIr),e(Wr,jIr),M(_w,Wr,null),b(f,Hqe,_),b(f,Zc,_),e(Zc,bw),e(bw,gEe),M(Ox,gEe,null),e(Zc,DIr),e(Zc,hEe),e(hEe,GIr),b(f,Uqe,_),b(f,Fr,_),M(Vx,Fr,null),e(Fr,OIr),e(Fr,ef),e(ef,VIr),e(ef,KY),e(KY,XIr),e(ef,zIr),e(ef,ZY),e(ZY,QIr),e(ef,WIr),e(Fr,HIr),e(Fr,Xx),e(Xx,UIr),e(Xx,pEe),e(pEe,JIr),e(Xx,YIr),e(Fr,KIr),e(Fr,Ht),M(zx,Ht,null),e(Ht,ZIr),e(Ht,uEe),e(uEe,eqr),e(Ht,oqr),e(Ht,of),e(of,rqr),e(of,_Ee),e(_Ee,tqr),e(of,aqr),e(of,eK),e(eK,nqr),e(of,sqr),e(Ht,lqr),M(vw,Ht,null),e(Fr,iqr),e(Fr,Hr),M(Qx,Hr,null),e(Hr,dqr),e(Hr,bEe),e(bEe,cqr),e(Hr,fqr),e(Hr,Mn),e(Mn,mqr),e(Mn,vEe),e(vEe,gqr),e(Mn,hqr),e(Mn,FEe),e(FEe,pqr),e(Mn,uqr),e(Mn,TEe),e(TEe,_qr),e(Mn,bqr),e(Hr,vqr),e(Hr,MEe),e(MEe,Fw),e(Fw,EEe),e(EEe,Fqr),e(Fw,Tqr),e(Fw,oK),e(oK,Mqr),e(Fw,Eqr),e(Hr,Cqr),M(Tw,Hr,null),b(f,Jqe,_),b(f,rf,_),e(rf,Mw),e(Mw,CEe),M(Wx,CEe,null),e(rf,wqr),e(rf,wEe),e(wEe,Aqr),b(f,Yqe,_),b(f,Tr,_),M(Hx,Tr,null),e(Tr,yqr),e(Tr,tf),e(tf,Lqr),e(tf,rK),e(rK,xqr),e(tf,$qr),e(tf,tK),e(tK,kqr),e(tf,Sqr),e(Tr,Rqr),e(Tr,Ux),e(Ux,Bqr),e(Ux,AEe),e(AEe,Pqr),e(Ux,Iqr),e(Tr,qqr),e(Tr,Ut),M(Jx,Ut,null),e(Ut,Nqr),e(Ut,yEe),e(yEe,jqr),e(Ut,Dqr),e(Ut,af),e(af,Gqr),e(af,LEe),e(LEe,Oqr),e(af,Vqr),e(af,aK),e(aK,Xqr),e(af,zqr),e(Ut,Qqr),M(Ew,Ut,null),e(Tr,Wqr),e(Tr,Ur),M(Yx,Ur,null),e(Ur,Hqr),e(Ur,xEe),e(xEe,Uqr),e(Ur,Jqr),e(Ur,En),e(En,Yqr),e(En,$Ee),e($Ee,Kqr),e(En,Zqr),e(En,kEe),e(kEe,eNr),e(En,oNr),e(En,SEe),e(SEe,rNr),e(En,tNr),e(Ur,aNr),e(Ur,Kx),e(Kx,Cw),e(Cw,REe),e(REe,nNr),e(Cw,sNr),e(Cw,nK),e(nK,lNr),e(Cw,iNr),e(Kx,dNr),e(Kx,ww),e(ww,BEe),e(BEe,cNr),e(ww,fNr),e(ww,sK),e(sK,mNr),e(ww,gNr),e(Ur,hNr),M(Aw,Ur,null),b(f,Kqe,_),b(f,nf,_),e(nf,yw),e(yw,PEe),M(Zx,PEe,null),e(nf,pNr),e(nf,IEe),e(IEe,uNr),b(f,Zqe,_),b(f,Mr,_),M(e9,Mr,null),e(Mr,_Nr),e(Mr,sf),e(sf,bNr),e(sf,lK),e(lK,vNr),e(sf,FNr),e(sf,iK),e(iK,TNr),e(sf,MNr),e(Mr,ENr),e(Mr,o9),e(o9,CNr),e(o9,qEe),e(qEe,wNr),e(o9,ANr),e(Mr,yNr),e(Mr,Jt),M(r9,Jt,null),e(Jt,LNr),e(Jt,NEe),e(NEe,xNr),e(Jt,$Nr),e(Jt,lf),e(lf,kNr),e(lf,jEe),e(jEe,SNr),e(lf,RNr),e(lf,dK),e(dK,BNr),e(lf,PNr),e(Jt,INr),M(Lw,Jt,null),e(Mr,qNr),e(Mr,Jr),M(t9,Jr,null),e(Jr,NNr),e(Jr,DEe),e(DEe,jNr),e(Jr,DNr),e(Jr,Cn),e(Cn,GNr),e(Cn,GEe),e(GEe,ONr),e(Cn,VNr),e(Cn,OEe),e(OEe,XNr),e(Cn,zNr),e(Cn,VEe),e(VEe,QNr),e(Cn,WNr),e(Jr,HNr),e(Jr,XEe),e(XEe,xw),e(xw,zEe),e(zEe,UNr),e(xw,JNr),e(xw,cK),e(cK,YNr),e(xw,KNr),e(Jr,ZNr),M($w,Jr,null),eNe=!0},p(f,[_]){const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),_f.$set(a9);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),_g.$set(QEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),Jg.$set(WEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),Ch.$set(HEe);const n9={};_&2&&(n9.$$scope={dirty:_,ctx:f}),wh.$set(n9);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),Vh.$set(UEe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Xh.$set(wn);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),Wh.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),Nu.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),Du.$set(KEe);const s9={};_&2&&(s9.$$scope={dirty:_,ctx:f}),L_.$set(s9);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),$_.$set(ZEe);const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),h1.$set(l9);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),u1.$set(e5e);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),Z1.$set(i9);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),ob.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),Fb.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),Mb.$set(t5e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),_4.$set(df);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),v4.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),J4.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),K4.$set(s5e);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),n2.$set(d9);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),l2.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),O2.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),X2.$set(d5e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),kv.$set(Kr);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),Rv.$set(c9);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),Iv.$set(c5e);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),Nv.$set(f9);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),Yv.$set(f5e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Zv.$set(Zr);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),rF.$set(m5e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),aF.$set(cf);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),hF.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),uF.$set(h5e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),MF.$set(y);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),CF.$set(kw);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),BF.$set(p5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),IF.$set(u5e);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),DF.$set(Sw);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),OF.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),HF.$set(b5e);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),JF.$set(Rw);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),oT.$set(v5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),tT.$set(F5e);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),lT.$set(Bw);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),dT.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),mT.$set(M5e);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),hT.$set(Pw);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),FT.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),MT.$set(C5e);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),wT.$set(Iw);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),yT.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),b7.$set(A5e);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),F7.$set(qw);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),X7.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),Q7.$set(L5e);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),nM.$set(Nw);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),lM.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),fM.$set($5e);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),gM.$set(jw);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),BM.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),IM.$set(S5e);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),WM.$set(Dw);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),UM.$set(R5e);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:f}),ME.$set(B5e);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),CE.$set(Gw);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),OE.$set(P5e);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:f}),XE.$set(I5e);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),WE.$set(Ow);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:f}),UE.$set(q5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:f}),YE.$set(N5e);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),ZE.$set(Vw);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:f}),F5.$set(j5e);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:f}),M5.$set(D5e);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),V5.$set(Xw);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:f}),z5.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:f}),W5.$set(O5e);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),U5.$set(zw);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:f}),Y5.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:f}),Z5.$set(X5e);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),wC.$set(Qw);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:f}),yC.$set(z5e);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:f}),qC.$set(Q5e);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),jC.$set(Ww);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:f}),KC.$set(W5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:f}),e3.$set(H5e);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),f3.$set(Hw);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:f}),g3.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:f}),E3.$set(J5e);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),w3.$set(Uw);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:f}),I3.$set(Y5e);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:f}),N3.$set(K5e);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),U3.$set(Jw);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:f}),Y3.$set(Z5e);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:f}),sw.$set(eCe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),iw.$set(Yw);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:f}),_w.$set(oCe);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:f}),vw.$set(rCe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),Tw.$set(Kw);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:f}),Ew.$set(tCe);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:f}),Aw.$set(aCe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),Lw.$set(Zw);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:f}),$w.$set(nCe)},i(f){eNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Z6.$$.fragment,f),E(e0.$$.fragment,f),E(_f.$$.fragment,f),E(o0.$$.fragment,f),E(r0.$$.fragment,f),E(n0.$$.fragment,f),E(_g.$$.fragment,f),E(s0.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(f0.$$.fragment,f),E(Jg.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(h0.$$.fragment,f),E(_0.$$.fragment,f),E(Ch.$$.fragment,f),E(wh.$$.fragment,f),E(b0.$$.fragment,f),E(v0.$$.fragment,f),E(F0.$$.fragment,f),E(E0.$$.fragment,f),E(Vh.$$.fragment,f),E(Xh.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(L0.$$.fragment,f),E(Wh.$$.fragment,f),E(x0.$$.fragment,f),E(Nu.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(R0.$$.fragment,f),E(Du.$$.fragment,f),E(B0.$$.fragment,f),E(L_.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(N0.$$.fragment,f),E($_.$$.fragment,f),E(j0.$$.fragment,f),E(h1.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(V0.$$.fragment,f),E(u1.$$.fragment,f),E(X0.$$.fragment,f),E(Z1.$$.fragment,f),E(z0.$$.fragment,f),E(Q0.$$.fragment,f),E(H0.$$.fragment,f),E(ob.$$.fragment,f),E(U0.$$.fragment,f),E(Fb.$$.fragment,f),E(J0.$$.fragment,f),E(Y0.$$.fragment,f),E(Z0.$$.fragment,f),E(Mb.$$.fragment,f),E(ey.$$.fragment,f),E(_4.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(v4.$$.fragment,f),E(ny.$$.fragment,f),E(J4.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(K4.$$.fragment,f),E(cy.$$.fragment,f),E(n2.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(l2.$$.fragment,f),E(py.$$.fragment,f),E(O2.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(X2.$$.fragment,f),E(Fy.$$.fragment,f),E(kv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Rv.$$.fragment,f),E(wy.$$.fragment,f),E(Iv.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(Nv.$$.fragment,f),E($y.$$.fragment,f),E(Yv.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Zv.$$.fragment,f),E(Py.$$.fragment,f),E(rF.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(aF.$$.fragment,f),E(Dy.$$.fragment,f),E(hF.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(uF.$$.fragment,f),E(zy.$$.fragment,f),E(MF.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(CF.$$.fragment,f),E(Jy.$$.fragment,f),E(BF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(IF.$$.fragment,f),E(oL.$$.fragment,f),E(DF.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(OF.$$.fragment,f),E(lL.$$.fragment,f),E(HF.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(JF.$$.fragment,f),E(mL.$$.fragment,f),E(oT.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(tT.$$.fragment,f),E(_L.$$.fragment,f),E(lT.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(dT.$$.fragment,f),E(EL.$$.fragment,f),E(mT.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(hT.$$.fragment,f),E(LL.$$.fragment,f),E(FT.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(MT.$$.fragment,f),E(RL.$$.fragment,f),E(wT.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(yT.$$.fragment,f),E(NL.$$.fragment,f),E(b7.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(F7.$$.fragment,f),E(VL.$$.fragment,f),E(X7.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(Q7.$$.fragment,f),E(HL.$$.fragment,f),E(nM.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(lM.$$.fragment,f),E(ZL.$$.fragment,f),E(fM.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(gM.$$.fragment,f),E(a8.$$.fragment,f),E(BM.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(IM.$$.fragment,f),E(d8.$$.fragment,f),E(WM.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(UM.$$.fragment,f),E(h8.$$.fragment,f),E(ME.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(CE.$$.fragment,f),E(v8.$$.fragment,f),E(OE.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(XE.$$.fragment,f),E(C8.$$.fragment,f),E(WE.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(UE.$$.fragment,f),E($8.$$.fragment,f),E(YE.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(B8.$$.fragment,f),E(ZE.$$.fragment,f),E(P8.$$.fragment,f),E(F5.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(M5.$$.fragment,f),E(D8.$$.fragment,f),E(V5.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E(z5.$$.fragment,f),E(z8.$$.fragment,f),E(W5.$$.fragment,f),E(Q8.$$.fragment,f),E(W8.$$.fragment,f),E(U8.$$.fragment,f),E(U5.$$.fragment,f),E(J8.$$.fragment,f),E(Y5.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(Z5.$$.fragment,f),E(ox.$$.fragment,f),E(wC.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(yC.$$.fragment,f),E(sx.$$.fragment,f),E(qC.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(jC.$$.fragment,f),E(fx.$$.fragment,f),E(KC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(e3.$$.fragment,f),E(ux.$$.fragment,f),E(f3.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(g3.$$.fragment,f),E(Tx.$$.fragment,f),E(E3.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(w3.$$.fragment,f),E(Ax.$$.fragment,f),E(I3.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(N3.$$.fragment,f),E(kx.$$.fragment,f),E(U3.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Px.$$.fragment,f),E(Y3.$$.fragment,f),E(Ix.$$.fragment,f),E(sw.$$.fragment,f),E(qx.$$.fragment,f),E(Nx.$$.fragment,f),E(Dx.$$.fragment,f),E(iw.$$.fragment,f),E(Gx.$$.fragment,f),E(_w.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(vw.$$.fragment,f),E(Qx.$$.fragment,f),E(Tw.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(Ew.$$.fragment,f),E(Yx.$$.fragment,f),E(Aw.$$.fragment,f),E(Zx.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(Lw.$$.fragment,f),E(t9.$$.fragment,f),E($w.$$.fragment,f),eNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Z6.$$.fragment,f),C(e0.$$.fragment,f),C(_f.$$.fragment,f),C(o0.$$.fragment,f),C(r0.$$.fragment,f),C(n0.$$.fragment,f),C(_g.$$.fragment,f),C(s0.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(f0.$$.fragment,f),C(Jg.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(h0.$$.fragment,f),C(_0.$$.fragment,f),C(Ch.$$.fragment,f),C(wh.$$.fragment,f),C(b0.$$.fragment,f),C(v0.$$.fragment,f),C(F0.$$.fragment,f),C(E0.$$.fragment,f),C(Vh.$$.fragment,f),C(Xh.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(L0.$$.fragment,f),C(Wh.$$.fragment,f),C(x0.$$.fragment,f),C(Nu.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(R0.$$.fragment,f),C(Du.$$.fragment,f),C(B0.$$.fragment,f),C(L_.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(N0.$$.fragment,f),C($_.$$.fragment,f),C(j0.$$.fragment,f),C(h1.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(V0.$$.fragment,f),C(u1.$$.fragment,f),C(X0.$$.fragment,f),C(Z1.$$.fragment,f),C(z0.$$.fragment,f),C(Q0.$$.fragment,f),C(H0.$$.fragment,f),C(ob.$$.fragment,f),C(U0.$$.fragment,f),C(Fb.$$.fragment,f),C(J0.$$.fragment,f),C(Y0.$$.fragment,f),C(Z0.$$.fragment,f),C(Mb.$$.fragment,f),C(ey.$$.fragment,f),C(_4.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(v4.$$.fragment,f),C(ny.$$.fragment,f),C(J4.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(K4.$$.fragment,f),C(cy.$$.fragment,f),C(n2.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(l2.$$.fragment,f),C(py.$$.fragment,f),C(O2.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(X2.$$.fragment,f),C(Fy.$$.fragment,f),C(kv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Rv.$$.fragment,f),C(wy.$$.fragment,f),C(Iv.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(Nv.$$.fragment,f),C($y.$$.fragment,f),C(Yv.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Zv.$$.fragment,f),C(Py.$$.fragment,f),C(rF.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(aF.$$.fragment,f),C(Dy.$$.fragment,f),C(hF.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(uF.$$.fragment,f),C(zy.$$.fragment,f),C(MF.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(CF.$$.fragment,f),C(Jy.$$.fragment,f),C(BF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(IF.$$.fragment,f),C(oL.$$.fragment,f),C(DF.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(OF.$$.fragment,f),C(lL.$$.fragment,f),C(HF.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(JF.$$.fragment,f),C(mL.$$.fragment,f),C(oT.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(tT.$$.fragment,f),C(_L.$$.fragment,f),C(lT.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(dT.$$.fragment,f),C(EL.$$.fragment,f),C(mT.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(hT.$$.fragment,f),C(LL.$$.fragment,f),C(FT.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(MT.$$.fragment,f),C(RL.$$.fragment,f),C(wT.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(yT.$$.fragment,f),C(NL.$$.fragment,f),C(b7.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(F7.$$.fragment,f),C(VL.$$.fragment,f),C(X7.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(Q7.$$.fragment,f),C(HL.$$.fragment,f),C(nM.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(lM.$$.fragment,f),C(ZL.$$.fragment,f),C(fM.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(gM.$$.fragment,f),C(a8.$$.fragment,f),C(BM.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(IM.$$.fragment,f),C(d8.$$.fragment,f),C(WM.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(UM.$$.fragment,f),C(h8.$$.fragment,f),C(ME.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(CE.$$.fragment,f),C(v8.$$.fragment,f),C(OE.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(XE.$$.fragment,f),C(C8.$$.fragment,f),C(WE.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(UE.$$.fragment,f),C($8.$$.fragment,f),C(YE.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(B8.$$.fragment,f),C(ZE.$$.fragment,f),C(P8.$$.fragment,f),C(F5.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(M5.$$.fragment,f),C(D8.$$.fragment,f),C(V5.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C(z5.$$.fragment,f),C(z8.$$.fragment,f),C(W5.$$.fragment,f),C(Q8.$$.fragment,f),C(W8.$$.fragment,f),C(U8.$$.fragment,f),C(U5.$$.fragment,f),C(J8.$$.fragment,f),C(Y5.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(Z5.$$.fragment,f),C(ox.$$.fragment,f),C(wC.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(yC.$$.fragment,f),C(sx.$$.fragment,f),C(qC.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(jC.$$.fragment,f),C(fx.$$.fragment,f),C(KC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(e3.$$.fragment,f),C(ux.$$.fragment,f),C(f3.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(g3.$$.fragment,f),C(Tx.$$.fragment,f),C(E3.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(w3.$$.fragment,f),C(Ax.$$.fragment,f),C(I3.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(N3.$$.fragment,f),C(kx.$$.fragment,f),C(U3.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Px.$$.fragment,f),C(Y3.$$.fragment,f),C(Ix.$$.fragment,f),C(sw.$$.fragment,f),C(qx.$$.fragment,f),C(Nx.$$.fragment,f),C(Dx.$$.fragment,f),C(iw.$$.fragment,f),C(Gx.$$.fragment,f),C(_w.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(vw.$$.fragment,f),C(Qx.$$.fragment,f),C(Tw.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(Ew.$$.fragment,f),C(Yx.$$.fragment,f),C(Aw.$$.fragment,f),C(Zx.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(Lw.$$.fragment,f),C(t9.$$.fragment,f),C($w.$$.fragment,f),eNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(YPe),f&&t(hi),w(Z6),f&&t(KPe),f&&t($n),f&&t(ZPe),w(e0,f),f&&t(eIe),f&&t(T$),f&&t(oIe),w(_f,f),f&&t(rIe),f&&t(pi),w(o0),f&&t(tIe),f&&t(Co),w(r0),w(n0),w(_g),w(s0),f&&t(aIe),f&&t(_i),w(l0),f&&t(nIe),f&&t(wo),w(i0),w(f0),w(Jg),w(m0),f&&t(sIe),f&&t(bi),w(g0),f&&t(lIe),f&&t(Ao),w(h0),w(_0),w(Ch),w(wh),w(b0),f&&t(iIe),f&&t(vi),w(v0),f&&t(dIe),f&&t(yo),w(F0),w(E0),w(Vh),w(Xh),w(C0),f&&t(cIe),f&&t(Ti),w(w0),f&&t(fIe),f&&t(Lo),w(A0),w(L0),w(Wh),w(x0),w(Nu),f&&t(mIe),f&&t(Ci),w($0),f&&t(gIe),f&&t(xo),w(k0),w(R0),w(Du),w(B0),w(L_),f&&t(hIe),f&&t(yi),w(P0),f&&t(pIe),f&&t($o),w(I0),w(N0),w($_),w(j0),w(h1),f&&t(uIe),f&&t($i),w(D0),f&&t(_Ie),f&&t(ko),w(G0),w(V0),w(u1),w(X0),w(Z1),f&&t(bIe),f&&t(Ri),w(z0),f&&t(vIe),f&&t(So),w(Q0),w(H0),w(ob),w(U0),w(Fb),f&&t(FIe),f&&t(Ii),w(J0),f&&t(TIe),f&&t(Ro),w(Y0),w(Z0),w(Mb),w(ey),w(_4),f&&t(MIe),f&&t(ji),w(oy),f&&t(EIe),f&&t(Bo),w(ry),w(ay),w(v4),w(ny),w(J4),f&&t(CIe),f&&t(Oi),w(sy),f&&t(wIe),f&&t(Po),w(ly),w(dy),w(K4),w(cy),w(n2),f&&t(AIe),f&&t(zi),w(fy),f&&t(yIe),f&&t(Io),w(my),w(hy),w(l2),w(py),w(O2),f&&t(LIe),f&&t(Hi),w(uy),f&&t(xIe),f&&t(qo),w(_y),w(vy),w(X2),w(Fy),w(kv),f&&t($Ie),f&&t(Yi),w(Ty),f&&t(kIe),f&&t(No),w(My),w(Cy),w(Rv),w(wy),w(Iv),f&&t(SIe),f&&t(ed),w(Ay),f&&t(RIe),f&&t(jo),w(yy),w(xy),w(Nv),w($y),w(Yv),f&&t(BIe),f&&t(td),w(ky),f&&t(PIe),f&&t(Do),w(Sy),w(By),w(Zv),w(Py),w(rF),f&&t(IIe),f&&t(sd),w(Iy),f&&t(qIe),f&&t(Go),w(qy),w(jy),w(aF),w(Dy),w(hF),f&&t(NIe),f&&t(dd),w(Gy),f&&t(jIe),f&&t(Oo),w(Oy),w(Xy),w(uF),w(zy),w(MF),f&&t(DIe),f&&t(md),w(Qy),f&&t(GIe),f&&t(Vo),w(Wy),w(Uy),w(CF),w(Jy),w(BF),f&&t(OIe),f&&t(pd),w(Yy),f&&t(VIe),f&&t(Xo),w(Ky),w(eL),w(IF),w(oL),w(DF),f&&t(XIe),f&&t(bd),w(tL),f&&t(zIe),f&&t(zo),w(aL),w(sL),w(OF),w(lL),w(HF),f&&t(QIe),f&&t(Td),w(iL),f&&t(WIe),f&&t(Qo),w(dL),w(fL),w(JF),w(mL),w(oT),f&&t(HIe),f&&t(wd),w(gL),f&&t(UIe),f&&t(Wo),w(hL),w(uL),w(tT),w(_L),w(lT),f&&t(JIe),f&&t(Ld),w(vL),f&&t(YIe),f&&t(Ho),w(FL),w(ML),w(dT),w(EL),w(mT),f&&t(KIe),f&&t(kd),w(CL),f&&t(ZIe),f&&t(Uo),w(wL),w(yL),w(hT),w(LL),w(FT),f&&t(eqe),f&&t(Bd),w(xL),f&&t(oqe),f&&t(Jo),w($L),w(SL),w(MT),w(RL),w(wT),f&&t(rqe),f&&t(qd),w(BL),f&&t(tqe),f&&t(Yo),w(PL),w(qL),w(yT),w(NL),w(b7),f&&t(aqe),f&&t(Dd),w(jL),f&&t(nqe),f&&t(Ko),w(DL),w(OL),w(F7),w(VL),w(X7),f&&t(sqe),f&&t(Vd),w(XL),f&&t(lqe),f&&t(Zo),w(zL),w(WL),w(Q7),w(HL),w(nM),f&&t(iqe),f&&t(Qd),w(UL),f&&t(dqe),f&&t(er),w(JL),w(KL),w(lM),w(ZL),w(fM),f&&t(cqe),f&&t(Jd),w(e8),f&&t(fqe),f&&t(or),w(o8),w(t8),w(gM),w(a8),w(BM),f&&t(mqe),f&&t(Zd),w(n8),f&&t(gqe),f&&t(rr),w(s8),w(i8),w(IM),w(d8),w(WM),f&&t(hqe),f&&t(rc),w(c8),f&&t(pqe),f&&t(tr),w(f8),w(g8),w(UM),w(h8),w(ME),f&&t(uqe),f&&t(nc),w(p8),f&&t(_qe),f&&t(ar),w(u8),w(b8),w(CE),w(v8),w(OE),f&&t(bqe),f&&t(ic),w(F8),f&&t(vqe),f&&t(nr),w(T8),w(E8),w(XE),w(C8),w(WE),f&&t(Fqe),f&&t(fc),w(A8),f&&t(Tqe),f&&t(sr),w(y8),w(x8),w(UE),w($8),w(YE),f&&t(Mqe),f&&t(hc),w(k8),f&&t(Eqe),f&&t(lr),w(S8),w(B8),w(ZE),w(P8),w(F5),f&&t(Cqe),f&&t(_c),w(I8),f&&t(wqe),f&&t(ir),w(q8),w(j8),w(M5),w(D8),w(V5),f&&t(Aqe),f&&t(Fc),w(G8),f&&t(yqe),f&&t(dr),w(O8),w(X8),w(z5),w(z8),w(W5),f&&t(Lqe),f&&t(Ec),w(Q8),f&&t(xqe),f&&t(cr),w(W8),w(U8),w(U5),w(J8),w(Y5),f&&t($qe),f&&t(Ac),w(Y8),f&&t(kqe),f&&t(fr),w(K8),w(ex),w(Z5),w(ox),w(wC),f&&t(Sqe),f&&t(xc),w(rx),f&&t(Rqe),f&&t(mr),w(tx),w(nx),w(yC),w(sx),w(qC),f&&t(Bqe),f&&t(Sc),w(lx),f&&t(Pqe),f&&t(gr),w(ix),w(cx),w(jC),w(fx),w(KC),f&&t(Iqe),f&&t(Pc),w(mx),f&&t(qqe),f&&t(hr),w(gx),w(px),w(e3),w(ux),w(f3),f&&t(Nqe),f&&t(Nc),w(_x),f&&t(jqe),f&&t(pr),w(bx),w(Fx),w(g3),w(Tx),w(E3),f&&t(Dqe),f&&t(Gc),w(Mx),f&&t(Gqe),f&&t(ur),w(Ex),w(wx),w(w3),w(Ax),w(I3),f&&t(Oqe),f&&t(Xc),w(yx),f&&t(Vqe),f&&t(_r),w(Lx),w($x),w(N3),w(kx),w(U3),f&&t(Xqe),f&&t(Wc),w(Sx),f&&t(zqe),f&&t(br),w(Rx),w(Px),w(Y3),w(Ix),w(sw),f&&t(Qqe),f&&t(Jc),w(qx),f&&t(Wqe),f&&t(vr),w(Nx),w(Dx),w(iw),w(Gx),w(_w),f&&t(Hqe),f&&t(Zc),w(Ox),f&&t(Uqe),f&&t(Fr),w(Vx),w(zx),w(vw),w(Qx),w(Tw),f&&t(Jqe),f&&t(rf),w(Wx),f&&t(Yqe),f&&t(Tr),w(Hx),w(Jx),w(Ew),w(Yx),w(Aw),f&&t(Kqe),f&&t(nf),w(Zx),f&&t(Zqe),f&&t(Mr),w(e9),w(r9),w(Lw),w(t9),w($w)}}}const SLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function RLt(L){return R0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class DLt extends x0t{constructor(g){super();$0t(this,g,RLt,kLt,k0t,{})}}export{DLt as default,SLt as metadata};
