import{S as nCt,i as sCt,s as lCt,e as a,k as l,w as f,t as o,M as iCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as dCt}from"../../chunks/vendor-6b77c823.js";import{T as ikr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function cCt($f){let K,io,de,Ee,lo,fe,Ce,Vo,Ii,If,fa,Ni,Di,nE,Nf,Be,co,ji,Gn,sE,On,Xn,lE,qi,Vn,iE,Gi,Df,qa;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),fe=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),Di=o('"new-model"'),nE=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),sE=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),lE=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),iE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){K=n(fo,"P",{});var pe=s(K);io=r(pe,"If your "),de=n(pe,"CODE",{});var K7=s(de);Ee=r(K7,"NewModelConfig"),K7.forEach(t),lo=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Oi=s(fe);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(pe,`, make sure its
`),Ii=n(pe,"CODE",{});var Z7=s(Ii);If=r(Z7,"model_type"),Z7.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),Ni=n(pe,"CODE",{});var e8=s(Ni);Di=r(e8,'"new-model"'),e8.forEach(t),nE=r(pe,")."),pe.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),sE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var o8=s(On);Xn=r(o8,"PreTrainedModel"),o8.forEach(t),lE=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var jf=s(qi);Vn=r(jf,"config_class"),jf.forEach(t),iE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var r8=s(Gi);Df=r(r8,"NewModelConfig"),r8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,K,pe),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,fe),e(fe,Ce),e(K,Vo),e(K,Ii),e(Ii,If),e(K,fa),e(K,Ni),e(Ni,Di),e(K,nE),b(fo,Nf,pe),b(fo,Be,pe),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,sE),e(Be,On),e(On,Xn),e(Be,lE),e(Be,qi),e(qi,Vn),e(Be,iE),e(Be,Gi),e(Gi,Df),e(Be,qa)},d(fo){fo&&t(K),fo&&t(Nf),fo&&t(Be)}}}function fCt($f){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function mCt($f){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function gCt($f){let K,io,de,Ee,lo,fe,Ce,Vo,Ii,If,fa,Ni,Di,nE,Nf,Be,co,ji,Gn,sE,On,Xn,lE,qi,Vn,iE,Gi,Df,qa,fo,pe,K7,Oi,Z7,e8,zo,Ga,o8,jf,r8,h$e,eke,Xi,qf,DQ,dE,p$e,jQ,_$e,oke,zn,u$e,qQ,b$e,v$e,GQ,T$e,F$e,rke,cE,tke,t8,C$e,ake,Gf,nke,Vi,Of,OQ,fE,M$e,XQ,E$e,ske,Wo,mE,y$e,gE,w$e,a8,A$e,L$e,B$e,hE,x$e,VQ,k$e,R$e,S$e,mo,pE,P$e,zQ,$$e,I$e,zi,N$e,WQ,D$e,j$e,QQ,q$e,G$e,O$e,v,Xf,HQ,X$e,V$e,n8,z$e,W$e,Q$e,Vf,UQ,H$e,U$e,s8,J$e,Y$e,K$e,zf,JQ,Z$e,eIe,l8,oIe,rIe,tIe,Wf,YQ,aIe,nIe,i8,sIe,lIe,iIe,Qf,KQ,dIe,cIe,d8,fIe,mIe,gIe,Hf,ZQ,hIe,pIe,c8,_Ie,uIe,bIe,Uf,eH,vIe,TIe,f8,FIe,CIe,MIe,Jf,oH,EIe,yIe,m8,wIe,AIe,LIe,Yf,rH,BIe,xIe,g8,kIe,RIe,SIe,Kf,tH,PIe,$Ie,h8,IIe,NIe,DIe,Zf,aH,jIe,qIe,p8,GIe,OIe,XIe,em,nH,VIe,zIe,_8,WIe,QIe,HIe,om,sH,UIe,JIe,u8,YIe,KIe,ZIe,rm,lH,eNe,oNe,b8,rNe,tNe,aNe,tm,iH,nNe,sNe,v8,lNe,iNe,dNe,am,dH,cNe,fNe,T8,mNe,gNe,hNe,nm,cH,pNe,_Ne,F8,uNe,bNe,vNe,sm,fH,TNe,FNe,C8,CNe,MNe,ENe,lm,mH,yNe,wNe,M8,ANe,LNe,BNe,im,gH,xNe,kNe,E8,RNe,SNe,PNe,dm,hH,$Ne,INe,y8,NNe,DNe,jNe,cm,pH,qNe,GNe,w8,ONe,XNe,VNe,fm,_H,zNe,WNe,A8,QNe,HNe,UNe,mm,uH,JNe,YNe,L8,KNe,ZNe,eDe,gm,bH,oDe,rDe,B8,tDe,aDe,nDe,hm,vH,sDe,lDe,x8,iDe,dDe,cDe,pm,TH,fDe,mDe,k8,gDe,hDe,pDe,_m,FH,_De,uDe,R8,bDe,vDe,TDe,um,CH,FDe,CDe,S8,MDe,EDe,yDe,bm,MH,wDe,ADe,P8,LDe,BDe,xDe,vm,EH,kDe,RDe,$8,SDe,PDe,$De,Tm,yH,IDe,NDe,I8,DDe,jDe,qDe,Fm,wH,GDe,ODe,N8,XDe,VDe,zDe,Cm,AH,WDe,QDe,D8,HDe,UDe,JDe,Mm,LH,YDe,KDe,j8,ZDe,eje,oje,Em,BH,rje,tje,q8,aje,nje,sje,ym,xH,lje,ije,G8,dje,cje,fje,wm,kH,mje,gje,O8,hje,pje,_je,Am,RH,uje,bje,X8,vje,Tje,Fje,Lm,SH,Cje,Mje,V8,Eje,yje,wje,Bm,PH,Aje,Lje,z8,Bje,xje,kje,xm,$H,Rje,Sje,W8,Pje,$je,Ije,km,IH,Nje,Dje,Q8,jje,qje,Gje,Rm,NH,Oje,Xje,H8,Vje,zje,Wje,Sm,DH,Qje,Hje,U8,Uje,Jje,Yje,Pm,jH,Kje,Zje,J8,eqe,oqe,rqe,$m,qH,tqe,aqe,Y8,nqe,sqe,lqe,Im,GH,iqe,dqe,K8,cqe,fqe,mqe,Nm,OH,gqe,hqe,Z8,pqe,_qe,uqe,Dm,XH,bqe,vqe,eB,Tqe,Fqe,Cqe,jm,VH,Mqe,Eqe,oB,yqe,wqe,Aqe,qm,zH,Lqe,Bqe,rB,xqe,kqe,Rqe,Gm,WH,Sqe,Pqe,tB,$qe,Iqe,Nqe,Om,QH,Dqe,jqe,aB,qqe,Gqe,Oqe,Xm,HH,Xqe,Vqe,nB,zqe,Wqe,Qqe,Vm,UH,Hqe,Uqe,sB,Jqe,Yqe,Kqe,zm,JH,Zqe,eGe,lB,oGe,rGe,tGe,Wm,YH,aGe,nGe,iB,sGe,lGe,iGe,Qm,KH,dGe,cGe,dB,fGe,mGe,gGe,Hm,ZH,hGe,pGe,cB,_Ge,uGe,bGe,Um,eU,vGe,TGe,fB,FGe,CGe,MGe,Jm,oU,EGe,yGe,mB,wGe,AGe,LGe,Ym,rU,BGe,xGe,gB,kGe,RGe,SGe,Km,tU,PGe,$Ge,hB,IGe,NGe,DGe,Zm,aU,jGe,qGe,pB,GGe,OGe,XGe,eg,nU,VGe,zGe,_B,WGe,QGe,HGe,og,sU,UGe,JGe,uB,YGe,KGe,ZGe,rg,lU,eOe,oOe,bB,rOe,tOe,aOe,tg,iU,nOe,sOe,vB,lOe,iOe,dOe,ag,dU,cOe,fOe,TB,mOe,gOe,hOe,ng,cU,pOe,_Oe,FB,uOe,bOe,vOe,sg,fU,TOe,FOe,CB,COe,MOe,EOe,lg,mU,yOe,wOe,MB,AOe,LOe,BOe,ig,gU,xOe,kOe,EB,ROe,SOe,POe,dg,hU,$Oe,IOe,yB,NOe,DOe,jOe,cg,pU,qOe,GOe,wB,OOe,XOe,VOe,fg,_U,zOe,WOe,AB,QOe,HOe,UOe,mg,uU,JOe,YOe,LB,KOe,ZOe,eXe,gg,bU,oXe,rXe,BB,tXe,aXe,nXe,hg,vU,sXe,lXe,xB,iXe,dXe,cXe,pg,TU,fXe,mXe,kB,gXe,hXe,pXe,_g,FU,_Xe,uXe,RB,bXe,vXe,TXe,ug,CU,FXe,CXe,SB,MXe,EXe,yXe,bg,MU,wXe,AXe,PB,LXe,BXe,xXe,vg,EU,kXe,RXe,$B,SXe,PXe,$Xe,Tg,yU,IXe,NXe,IB,DXe,jXe,qXe,Fg,wU,GXe,OXe,NB,XXe,VXe,zXe,Cg,AU,WXe,QXe,DB,HXe,UXe,JXe,Mg,LU,YXe,KXe,jB,ZXe,eVe,oVe,Eg,BU,rVe,tVe,qB,aVe,nVe,sVe,yg,xU,lVe,iVe,GB,dVe,cVe,fVe,wg,kU,mVe,gVe,OB,hVe,pVe,_Ve,Ag,RU,uVe,bVe,XB,vVe,TVe,FVe,Lg,SU,CVe,MVe,VB,EVe,yVe,wVe,Bg,PU,AVe,LVe,zB,BVe,xVe,kVe,xg,$U,RVe,SVe,WB,PVe,$Ve,IVe,kg,IU,NVe,DVe,QB,jVe,qVe,GVe,Rg,NU,OVe,XVe,HB,VVe,zVe,WVe,DU,QVe,HVe,_E,UVe,Sg,uE,JVe,jU,YVe,lke,Wi,Pg,qU,bE,KVe,GU,ZVe,ike,Qo,vE,eze,TE,oze,UB,rze,tze,aze,FE,nze,OU,sze,lze,ize,go,CE,dze,XU,cze,fze,Oa,mze,VU,gze,hze,zU,pze,_ze,WU,uze,bze,vze,E,Wn,QU,Tze,Fze,JB,Cze,Mze,YB,Eze,yze,wze,Qn,HU,Aze,Lze,KB,Bze,xze,ZB,kze,Rze,Sze,Hn,UU,Pze,$ze,ex,Ize,Nze,ox,Dze,jze,qze,$g,JU,Gze,Oze,rx,Xze,Vze,zze,Un,YU,Wze,Qze,tx,Hze,Uze,ax,Jze,Yze,Kze,Ig,KU,Zze,eWe,nx,oWe,rWe,tWe,Ng,ZU,aWe,nWe,sx,sWe,lWe,iWe,Dg,eJ,dWe,cWe,lx,fWe,mWe,gWe,Jn,oJ,hWe,pWe,ix,_We,uWe,dx,bWe,vWe,TWe,Yn,rJ,FWe,CWe,cx,MWe,EWe,fx,yWe,wWe,AWe,Kn,tJ,LWe,BWe,mx,xWe,kWe,gx,RWe,SWe,PWe,jg,aJ,$We,IWe,hx,NWe,DWe,jWe,qg,nJ,qWe,GWe,px,OWe,XWe,VWe,Zn,sJ,zWe,WWe,_x,QWe,HWe,ux,UWe,JWe,YWe,Gg,lJ,KWe,ZWe,bx,eQe,oQe,rQe,es,iJ,tQe,aQe,vx,nQe,sQe,Tx,lQe,iQe,dQe,os,dJ,cQe,fQe,Fx,mQe,gQe,Cx,hQe,pQe,_Qe,rs,cJ,uQe,bQe,Mx,vQe,TQe,fJ,FQe,CQe,MQe,Og,mJ,EQe,yQe,Ex,wQe,AQe,LQe,ts,gJ,BQe,xQe,yx,kQe,RQe,wx,SQe,PQe,$Qe,Xg,hJ,IQe,NQe,Ax,DQe,jQe,qQe,as,pJ,GQe,OQe,Lx,XQe,VQe,Bx,zQe,WQe,QQe,ns,_J,HQe,UQe,xx,JQe,YQe,kx,KQe,ZQe,eHe,ss,uJ,oHe,rHe,Rx,tHe,aHe,Sx,nHe,sHe,lHe,Vg,bJ,iHe,dHe,Px,cHe,fHe,mHe,ls,vJ,gHe,hHe,$x,pHe,_He,Ix,uHe,bHe,vHe,zg,TJ,THe,FHe,Nx,CHe,MHe,EHe,is,FJ,yHe,wHe,Dx,AHe,LHe,jx,BHe,xHe,kHe,ds,CJ,RHe,SHe,qx,PHe,$He,Gx,IHe,NHe,DHe,cs,MJ,jHe,qHe,Ox,GHe,OHe,Xx,XHe,VHe,zHe,fs,EJ,WHe,QHe,Vx,HHe,UHe,zx,JHe,YHe,KHe,Wg,yJ,ZHe,eUe,Wx,oUe,rUe,tUe,ms,wJ,aUe,nUe,Qx,sUe,lUe,Hx,iUe,dUe,cUe,gs,AJ,fUe,mUe,Ux,gUe,hUe,Jx,pUe,_Ue,uUe,hs,LJ,bUe,vUe,Yx,TUe,FUe,Kx,CUe,MUe,EUe,ps,BJ,yUe,wUe,Zx,AUe,LUe,ek,BUe,xUe,kUe,_s,xJ,RUe,SUe,ok,PUe,$Ue,rk,IUe,NUe,DUe,us,kJ,jUe,qUe,tk,GUe,OUe,ak,XUe,VUe,zUe,Qg,RJ,WUe,QUe,nk,HUe,UUe,JUe,bs,SJ,YUe,KUe,sk,ZUe,eJe,lk,oJe,rJe,tJe,Hg,PJ,aJe,nJe,ik,sJe,lJe,iJe,Ug,$J,dJe,cJe,dk,fJe,mJe,gJe,vs,IJ,hJe,pJe,ck,_Je,uJe,fk,bJe,vJe,TJe,Ts,NJ,FJe,CJe,mk,MJe,EJe,gk,yJe,wJe,AJe,Jg,DJ,LJe,BJe,hk,xJe,kJe,RJe,Fs,jJ,SJe,PJe,pk,$Je,IJe,_k,NJe,DJe,jJe,Cs,qJ,qJe,GJe,uk,OJe,XJe,bk,VJe,zJe,WJe,Ms,GJ,QJe,HJe,vk,UJe,JJe,Tk,YJe,KJe,ZJe,Es,OJ,eYe,oYe,Fk,rYe,tYe,Ck,aYe,nYe,sYe,ys,XJ,lYe,iYe,Mk,dYe,cYe,Ek,fYe,mYe,gYe,Yg,VJ,hYe,pYe,yk,_Ye,uYe,bYe,Kg,zJ,vYe,TYe,wk,FYe,CYe,MYe,Zg,WJ,EYe,yYe,Ak,wYe,AYe,LYe,eh,QJ,BYe,xYe,Lk,kYe,RYe,SYe,ws,HJ,PYe,$Ye,Bk,IYe,NYe,xk,DYe,jYe,qYe,oh,UJ,GYe,OYe,kk,XYe,VYe,zYe,As,JJ,WYe,QYe,Rk,HYe,UYe,Sk,JYe,YYe,KYe,Ls,YJ,ZYe,eKe,Pk,oKe,rKe,$k,tKe,aKe,nKe,Bs,KJ,sKe,lKe,Ik,iKe,dKe,Nk,cKe,fKe,mKe,xs,ZJ,gKe,hKe,Dk,pKe,_Ke,jk,uKe,bKe,vKe,ks,eY,TKe,FKe,qk,CKe,MKe,Gk,EKe,yKe,wKe,Rs,oY,AKe,LKe,Ok,BKe,xKe,Xk,kKe,RKe,SKe,rh,rY,PKe,$Ke,Vk,IKe,NKe,DKe,th,tY,jKe,qKe,zk,GKe,OKe,XKe,Ss,aY,VKe,zKe,Wk,WKe,QKe,Qk,HKe,UKe,JKe,Ps,nY,YKe,KKe,Hk,ZKe,eZe,Uk,oZe,rZe,tZe,$s,sY,aZe,nZe,Jk,sZe,lZe,Yk,iZe,dZe,cZe,ah,lY,fZe,mZe,Kk,gZe,hZe,pZe,nh,iY,_Ze,uZe,Zk,bZe,vZe,TZe,sh,dY,FZe,CZe,eR,MZe,EZe,yZe,lh,cY,wZe,AZe,oR,LZe,BZe,xZe,Is,fY,kZe,RZe,rR,SZe,PZe,tR,$Ze,IZe,NZe,ih,mY,DZe,jZe,aR,qZe,GZe,OZe,dh,gY,XZe,VZe,nR,zZe,WZe,QZe,Ns,hY,HZe,UZe,sR,JZe,YZe,lR,KZe,ZZe,eeo,Ds,pY,oeo,reo,iR,teo,aeo,dR,neo,seo,leo,_Y,ieo,deo,ME,ceo,ch,EE,feo,uY,meo,dke,Qi,fh,bY,yE,geo,vY,heo,cke,Ho,wE,peo,AE,_eo,cR,ueo,beo,veo,LE,Teo,TY,Feo,Ceo,Meo,$e,BE,Eeo,FY,yeo,weo,Xa,Aeo,CY,Leo,Beo,MY,xeo,keo,EY,Reo,Seo,Peo,re,mh,yY,$eo,Ieo,fR,Neo,Deo,jeo,gh,wY,qeo,Geo,mR,Oeo,Xeo,Veo,hh,AY,zeo,Weo,gR,Qeo,Heo,Ueo,ph,LY,Jeo,Yeo,hR,Keo,Zeo,eoo,_h,BY,ooo,roo,pR,too,aoo,noo,uh,xY,soo,loo,_R,ioo,doo,coo,bh,kY,foo,moo,uR,goo,hoo,poo,vh,RY,_oo,uoo,bR,boo,voo,Too,Th,SY,Foo,Coo,vR,Moo,Eoo,yoo,Fh,PY,woo,Aoo,TR,Loo,Boo,xoo,Ch,$Y,koo,Roo,FR,Soo,Poo,$oo,Mh,IY,Ioo,Noo,CR,Doo,joo,qoo,Eh,NY,Goo,Ooo,MR,Xoo,Voo,zoo,yh,DY,Woo,Qoo,ER,Hoo,Uoo,Joo,wh,jY,Yoo,Koo,yR,Zoo,ero,oro,Ah,qY,rro,tro,wR,aro,nro,sro,Lh,GY,lro,iro,AR,dro,cro,fro,Bh,OY,mro,gro,LR,hro,pro,_ro,xh,uro,XY,bro,vro,xE,Tro,kh,kE,Fro,VY,Cro,fke,Hi,Rh,zY,RE,Mro,WY,Ero,mke,Uo,SE,yro,PE,wro,BR,Aro,Lro,Bro,$E,xro,QY,kro,Rro,Sro,Ie,IE,Pro,HY,$ro,Iro,Ui,Nro,UY,Dro,jro,JY,qro,Gro,Oro,xe,Sh,YY,Xro,Vro,xR,zro,Wro,Qro,Ph,KY,Hro,Uro,kR,Jro,Yro,Kro,$h,ZY,Zro,eto,RR,oto,rto,tto,Ih,eK,ato,nto,SR,sto,lto,ito,Nh,oK,dto,cto,PR,fto,mto,gto,Dh,rK,hto,pto,$R,_to,uto,bto,jh,tK,vto,Tto,IR,Fto,Cto,Mto,qh,aK,Eto,yto,NR,wto,Ato,Lto,Gh,Bto,nK,xto,kto,NE,Rto,Oh,DE,Sto,sK,Pto,gke,Ji,Xh,lK,jE,$to,iK,Ito,hke,Jo,qE,Nto,Yi,Dto,dK,jto,qto,cK,Gto,Oto,Xto,GE,Vto,fK,zto,Wto,Qto,Vr,OE,Hto,mK,Uto,Jto,Ki,Yto,gK,Kto,Zto,hK,eao,oao,rao,pK,tao,aao,XE,nao,Ne,VE,sao,_K,lao,iao,Va,dao,uK,cao,fao,bK,mao,gao,vK,hao,pao,_ao,F,Vh,TK,uao,bao,DR,vao,Tao,Fao,zh,FK,Cao,Mao,jR,Eao,yao,wao,Wh,CK,Aao,Lao,qR,Bao,xao,kao,Qh,MK,Rao,Sao,GR,Pao,$ao,Iao,Hh,EK,Nao,Dao,OR,jao,qao,Gao,Uh,yK,Oao,Xao,XR,Vao,zao,Wao,Jh,wK,Qao,Hao,VR,Uao,Jao,Yao,Yh,AK,Kao,Zao,zR,eno,ono,rno,Kh,LK,tno,ano,WR,nno,sno,lno,Zh,BK,ino,dno,QR,cno,fno,mno,ep,xK,gno,hno,HR,pno,_no,uno,op,kK,bno,vno,UR,Tno,Fno,Cno,rp,RK,Mno,Eno,JR,yno,wno,Ano,tp,SK,Lno,Bno,YR,xno,kno,Rno,ap,PK,Sno,Pno,KR,$no,Ino,Nno,np,$K,Dno,jno,ZR,qno,Gno,Ono,sp,IK,Xno,Vno,eS,zno,Wno,Qno,lp,NK,Hno,Uno,oS,Jno,Yno,Kno,ip,DK,Zno,eso,rS,oso,rso,tso,dp,jK,aso,nso,tS,sso,lso,iso,cp,qK,dso,cso,aS,fso,mso,gso,fp,GK,hso,pso,nS,_so,uso,bso,mp,OK,vso,Tso,sS,Fso,Cso,Mso,gp,XK,Eso,yso,lS,wso,Aso,Lso,hp,VK,Bso,xso,iS,kso,Rso,Sso,pp,zK,Pso,$so,dS,Iso,Nso,Dso,_p,WK,jso,qso,cS,Gso,Oso,Xso,up,QK,Vso,zso,fS,Wso,Qso,Hso,js,HK,Uso,Jso,mS,Yso,Kso,gS,Zso,elo,olo,bp,UK,rlo,tlo,hS,alo,nlo,slo,vp,JK,llo,ilo,pS,dlo,clo,flo,Tp,YK,mlo,glo,_S,hlo,plo,_lo,Fp,KK,ulo,blo,uS,vlo,Tlo,Flo,Cp,ZK,Clo,Mlo,bS,Elo,ylo,wlo,Mp,eZ,Alo,Llo,vS,Blo,xlo,klo,Ep,oZ,Rlo,Slo,TS,Plo,$lo,Ilo,yp,rZ,Nlo,Dlo,FS,jlo,qlo,Glo,wp,tZ,Olo,Xlo,CS,Vlo,zlo,Wlo,Ap,aZ,Qlo,Hlo,MS,Ulo,Jlo,Ylo,Lp,nZ,Klo,Zlo,ES,eio,oio,rio,Bp,sZ,tio,aio,yS,nio,sio,lio,xp,lZ,iio,dio,wS,cio,fio,mio,kp,iZ,gio,hio,AS,pio,_io,uio,Rp,dZ,bio,vio,LS,Tio,Fio,Cio,Sp,cZ,Mio,Eio,BS,yio,wio,Aio,Pp,fZ,Lio,Bio,xS,xio,kio,Rio,$p,mZ,Sio,Pio,kS,$io,Iio,Nio,Ip,gZ,Dio,jio,RS,qio,Gio,Oio,Np,hZ,Xio,Vio,SS,zio,Wio,Qio,Dp,pZ,Hio,Uio,PS,Jio,Yio,Kio,jp,_Z,Zio,edo,$S,odo,rdo,tdo,qp,uZ,ado,ndo,IS,sdo,ldo,ido,Gp,bZ,ddo,cdo,NS,fdo,mdo,gdo,Op,vZ,hdo,pdo,DS,_do,udo,bdo,Xp,TZ,vdo,Tdo,jS,Fdo,Cdo,Mdo,Vp,FZ,Edo,ydo,qS,wdo,Ado,Ldo,zp,CZ,Bdo,xdo,GS,kdo,Rdo,Sdo,Wp,MZ,Pdo,$do,OS,Ido,Ndo,Ddo,Qp,EZ,jdo,qdo,XS,Gdo,Odo,Xdo,Hp,yZ,Vdo,zdo,VS,Wdo,Qdo,Hdo,Up,wZ,Udo,Jdo,zS,Ydo,Kdo,Zdo,Jp,AZ,eco,oco,WS,rco,tco,aco,Yp,LZ,nco,sco,QS,lco,ico,dco,Kp,BZ,cco,fco,HS,mco,gco,hco,Zp,xZ,pco,_co,US,uco,bco,vco,e_,kZ,Tco,Fco,JS,Cco,Mco,Eco,o_,RZ,yco,wco,YS,Aco,Lco,Bco,r_,SZ,xco,kco,KS,Rco,Sco,Pco,t_,PZ,$co,Ico,ZS,Nco,Dco,jco,a_,$Z,qco,Gco,eP,Oco,Xco,Vco,n_,IZ,zco,Wco,oP,Qco,Hco,Uco,s_,NZ,Jco,Yco,rP,Kco,Zco,efo,l_,DZ,ofo,rfo,tP,tfo,afo,nfo,i_,jZ,sfo,lfo,aP,ifo,dfo,cfo,d_,qZ,ffo,mfo,nP,gfo,hfo,pfo,c_,GZ,_fo,ufo,sP,bfo,vfo,Tfo,f_,OZ,Ffo,Cfo,lP,Mfo,Efo,yfo,m_,XZ,wfo,Afo,iP,Lfo,Bfo,xfo,g_,VZ,kfo,Rfo,dP,Sfo,Pfo,$fo,h_,zZ,Ifo,Nfo,cP,Dfo,jfo,qfo,p_,WZ,Gfo,Ofo,fP,Xfo,Vfo,zfo,__,QZ,Wfo,Qfo,mP,Hfo,Ufo,Jfo,u_,HZ,Yfo,Kfo,gP,Zfo,emo,omo,b_,UZ,rmo,tmo,hP,amo,nmo,smo,v_,JZ,lmo,imo,pP,dmo,cmo,fmo,T_,YZ,mmo,gmo,_P,hmo,pmo,_mo,F_,KZ,umo,bmo,uP,vmo,Tmo,Fmo,C_,ZZ,Cmo,Mmo,bP,Emo,ymo,wmo,M_,eee,Amo,Lmo,vP,Bmo,xmo,kmo,E_,oee,Rmo,Smo,TP,Pmo,$mo,Imo,y_,ree,Nmo,Dmo,FP,jmo,qmo,Gmo,w_,Omo,tee,Xmo,Vmo,aee,zmo,Wmo,nee,Qmo,Hmo,zE,pke,Zi,A_,see,WE,Umo,lee,Jmo,_ke,Yo,QE,Ymo,ed,Kmo,iee,Zmo,ego,dee,ogo,rgo,tgo,HE,ago,cee,ngo,sgo,lgo,zr,UE,igo,fee,dgo,cgo,od,fgo,mee,mgo,ggo,gee,hgo,pgo,_go,hee,ugo,bgo,JE,vgo,De,YE,Tgo,pee,Fgo,Cgo,za,Mgo,_ee,Ego,ygo,uee,wgo,Ago,bee,Lgo,Bgo,xgo,k,L_,vee,kgo,Rgo,CP,Sgo,Pgo,$go,B_,Tee,Igo,Ngo,MP,Dgo,jgo,qgo,x_,Fee,Ggo,Ogo,EP,Xgo,Vgo,zgo,k_,Cee,Wgo,Qgo,yP,Hgo,Ugo,Jgo,R_,Mee,Ygo,Kgo,wP,Zgo,eho,oho,S_,Eee,rho,tho,AP,aho,nho,sho,P_,yee,lho,iho,LP,dho,cho,fho,$_,wee,mho,gho,BP,hho,pho,_ho,I_,Aee,uho,bho,xP,vho,Tho,Fho,N_,Lee,Cho,Mho,kP,Eho,yho,who,D_,Bee,Aho,Lho,RP,Bho,xho,kho,j_,xee,Rho,Sho,SP,Pho,$ho,Iho,q_,kee,Nho,Dho,PP,jho,qho,Gho,G_,Ree,Oho,Xho,$P,Vho,zho,Who,O_,See,Qho,Hho,IP,Uho,Jho,Yho,X_,Pee,Kho,Zho,NP,epo,opo,rpo,V_,$ee,tpo,apo,DP,npo,spo,lpo,z_,Iee,ipo,dpo,jP,cpo,fpo,mpo,W_,Nee,gpo,hpo,qP,ppo,_po,upo,Q_,Dee,bpo,vpo,GP,Tpo,Fpo,Cpo,H_,jee,Mpo,Epo,OP,ypo,wpo,Apo,U_,qee,Lpo,Bpo,XP,xpo,kpo,Rpo,J_,Gee,Spo,Ppo,VP,$po,Ipo,Npo,Y_,Oee,Dpo,jpo,zP,qpo,Gpo,Opo,K_,Xee,Xpo,Vpo,WP,zpo,Wpo,Qpo,Z_,Vee,Hpo,Upo,QP,Jpo,Ypo,Kpo,eu,zee,Zpo,e_o,HP,o_o,r_o,t_o,ou,Wee,a_o,n_o,UP,s_o,l_o,i_o,ru,Qee,d_o,c_o,JP,f_o,m_o,g_o,tu,Hee,h_o,p_o,YP,__o,u_o,b_o,au,Uee,v_o,T_o,KP,F_o,C_o,M_o,nu,Jee,E_o,y_o,ZP,w_o,A_o,L_o,su,Yee,B_o,x_o,e$,k_o,R_o,S_o,lu,Kee,P_o,$_o,o$,I_o,N_o,D_o,iu,Zee,j_o,q_o,r$,G_o,O_o,X_o,du,eoe,V_o,z_o,t$,W_o,Q_o,H_o,cu,ooe,U_o,J_o,a$,Y_o,K_o,Z_o,fu,roe,euo,ouo,n$,ruo,tuo,auo,mu,toe,nuo,suo,s$,luo,iuo,duo,gu,cuo,aoe,fuo,muo,noe,guo,huo,soe,puo,_uo,KE,uke,rd,hu,loe,ZE,uuo,ioe,buo,bke,Ko,e5,vuo,td,Tuo,doe,Fuo,Cuo,coe,Muo,Euo,yuo,o5,wuo,foe,Auo,Luo,Buo,Wr,r5,xuo,moe,kuo,Ruo,ad,Suo,goe,Puo,$uo,hoe,Iuo,Nuo,Duo,poe,juo,quo,t5,Guo,je,a5,Ouo,_oe,Xuo,Vuo,Wa,zuo,uoe,Wuo,Quo,boe,Huo,Uuo,voe,Juo,Yuo,Kuo,$,pu,Toe,Zuo,e1o,l$,o1o,r1o,t1o,_u,Foe,a1o,n1o,i$,s1o,l1o,i1o,uu,Coe,d1o,c1o,d$,f1o,m1o,g1o,bu,Moe,h1o,p1o,c$,_1o,u1o,b1o,vu,Eoe,v1o,T1o,f$,F1o,C1o,M1o,Tu,yoe,E1o,y1o,m$,w1o,A1o,L1o,Fu,woe,B1o,x1o,g$,k1o,R1o,S1o,Cu,Aoe,P1o,$1o,h$,I1o,N1o,D1o,Mu,Loe,j1o,q1o,p$,G1o,O1o,X1o,Eu,Boe,V1o,z1o,_$,W1o,Q1o,H1o,yu,xoe,U1o,J1o,u$,Y1o,K1o,Z1o,wu,koe,e9o,o9o,b$,r9o,t9o,a9o,Au,Roe,n9o,s9o,v$,l9o,i9o,d9o,Lu,Soe,c9o,f9o,T$,m9o,g9o,h9o,Bu,Poe,p9o,_9o,F$,u9o,b9o,v9o,xu,$oe,T9o,F9o,C$,C9o,M9o,E9o,ku,Ioe,y9o,w9o,M$,A9o,L9o,B9o,Ru,Noe,x9o,k9o,E$,R9o,S9o,P9o,Su,Doe,$9o,I9o,y$,N9o,D9o,j9o,Pu,joe,q9o,G9o,w$,O9o,X9o,V9o,$u,qoe,z9o,W9o,A$,Q9o,H9o,U9o,Iu,Goe,J9o,Y9o,L$,K9o,Z9o,ebo,Nu,Ooe,obo,rbo,B$,tbo,abo,nbo,Du,Xoe,sbo,lbo,x$,ibo,dbo,cbo,ju,Voe,fbo,mbo,k$,gbo,hbo,pbo,qu,zoe,_bo,ubo,R$,bbo,vbo,Tbo,Gu,Woe,Fbo,Cbo,S$,Mbo,Ebo,ybo,Ou,Qoe,wbo,Abo,P$,Lbo,Bbo,xbo,Xu,Hoe,kbo,Rbo,$$,Sbo,Pbo,$bo,Vu,Uoe,Ibo,Nbo,I$,Dbo,jbo,qbo,zu,Joe,Gbo,Obo,N$,Xbo,Vbo,zbo,Wu,Yoe,Wbo,Qbo,D$,Hbo,Ubo,Jbo,Qu,Koe,Ybo,Kbo,j$,Zbo,e3o,o3o,Hu,Zoe,r3o,t3o,q$,a3o,n3o,s3o,Uu,ere,l3o,i3o,G$,d3o,c3o,f3o,Ju,m3o,ore,g3o,h3o,rre,p3o,_3o,tre,u3o,b3o,n5,vke,nd,Yu,are,s5,v3o,nre,T3o,Tke,Zo,l5,F3o,sd,C3o,sre,M3o,E3o,lre,y3o,w3o,A3o,i5,L3o,ire,B3o,x3o,k3o,Qr,d5,R3o,dre,S3o,P3o,ld,$3o,cre,I3o,N3o,fre,D3o,j3o,q3o,mre,G3o,O3o,c5,X3o,qe,f5,V3o,gre,z3o,W3o,Qa,Q3o,hre,H3o,U3o,pre,J3o,Y3o,_re,K3o,Z3o,e2o,I,Ku,ure,o2o,r2o,O$,t2o,a2o,n2o,Zu,bre,s2o,l2o,X$,i2o,d2o,c2o,e1,vre,f2o,m2o,V$,g2o,h2o,p2o,o1,Tre,_2o,u2o,z$,b2o,v2o,T2o,r1,Fre,F2o,C2o,W$,M2o,E2o,y2o,t1,Cre,w2o,A2o,Q$,L2o,B2o,x2o,a1,Mre,k2o,R2o,H$,S2o,P2o,$2o,n1,Ere,I2o,N2o,U$,D2o,j2o,q2o,s1,yre,G2o,O2o,J$,X2o,V2o,z2o,l1,wre,W2o,Q2o,Y$,H2o,U2o,J2o,i1,Are,Y2o,K2o,K$,Z2o,evo,ovo,d1,Lre,rvo,tvo,Z$,avo,nvo,svo,c1,Bre,lvo,ivo,eI,dvo,cvo,fvo,f1,xre,mvo,gvo,oI,hvo,pvo,_vo,m1,kre,uvo,bvo,rI,vvo,Tvo,Fvo,g1,Rre,Cvo,Mvo,tI,Evo,yvo,wvo,h1,Sre,Avo,Lvo,aI,Bvo,xvo,kvo,p1,Pre,Rvo,Svo,nI,Pvo,$vo,Ivo,_1,$re,Nvo,Dvo,sI,jvo,qvo,Gvo,u1,Ire,Ovo,Xvo,lI,Vvo,zvo,Wvo,b1,Nre,Qvo,Hvo,iI,Uvo,Jvo,Yvo,v1,Dre,Kvo,Zvo,dI,e6o,o6o,r6o,T1,jre,t6o,a6o,cI,n6o,s6o,l6o,F1,qre,i6o,d6o,fI,c6o,f6o,m6o,C1,Gre,g6o,h6o,mI,p6o,_6o,u6o,M1,Ore,b6o,v6o,gI,T6o,F6o,C6o,E1,Xre,M6o,E6o,hI,y6o,w6o,A6o,y1,Vre,L6o,B6o,pI,x6o,k6o,R6o,w1,zre,S6o,P6o,_I,$6o,I6o,N6o,A1,Wre,D6o,j6o,uI,q6o,G6o,O6o,L1,Qre,X6o,V6o,Hre,z6o,W6o,Q6o,B1,Ure,H6o,U6o,bI,J6o,Y6o,K6o,x1,Jre,Z6o,eTo,vI,oTo,rTo,tTo,k1,Yre,aTo,nTo,TI,sTo,lTo,iTo,R1,Kre,dTo,cTo,FI,fTo,mTo,gTo,S1,hTo,Zre,pTo,_To,ete,uTo,bTo,ote,vTo,TTo,m5,Fke,id,P1,rte,g5,FTo,tte,CTo,Cke,er,h5,MTo,dd,ETo,ate,yTo,wTo,nte,ATo,LTo,BTo,p5,xTo,ste,kTo,RTo,STo,Hr,_5,PTo,lte,$To,ITo,cd,NTo,ite,DTo,jTo,dte,qTo,GTo,OTo,cte,XTo,VTo,u5,zTo,Ge,b5,WTo,fte,QTo,HTo,Ha,UTo,mte,JTo,YTo,gte,KTo,ZTo,hte,eFo,oFo,rFo,se,$1,pte,tFo,aFo,CI,nFo,sFo,lFo,I1,_te,iFo,dFo,MI,cFo,fFo,mFo,N1,ute,gFo,hFo,EI,pFo,_Fo,uFo,D1,bte,bFo,vFo,yI,TFo,FFo,CFo,j1,vte,MFo,EFo,wI,yFo,wFo,AFo,q1,Tte,LFo,BFo,AI,xFo,kFo,RFo,G1,Fte,SFo,PFo,LI,$Fo,IFo,NFo,O1,Cte,DFo,jFo,BI,qFo,GFo,OFo,X1,Mte,XFo,VFo,xI,zFo,WFo,QFo,V1,Ete,HFo,UFo,kI,JFo,YFo,KFo,z1,yte,ZFo,eCo,RI,oCo,rCo,tCo,W1,wte,aCo,nCo,SI,sCo,lCo,iCo,Q1,Ate,dCo,cCo,PI,fCo,mCo,gCo,H1,Lte,hCo,pCo,$I,_Co,uCo,bCo,U1,Bte,vCo,TCo,II,FCo,CCo,MCo,J1,xte,ECo,yCo,NI,wCo,ACo,LCo,Y1,BCo,kte,xCo,kCo,Rte,RCo,SCo,Ste,PCo,$Co,v5,Mke,fd,K1,Pte,T5,ICo,$te,NCo,Eke,or,F5,DCo,md,jCo,Ite,qCo,GCo,Nte,OCo,XCo,VCo,C5,zCo,Dte,WCo,QCo,HCo,Ur,M5,UCo,jte,JCo,YCo,gd,KCo,qte,ZCo,eMo,Gte,oMo,rMo,tMo,Ote,aMo,nMo,E5,sMo,Oe,y5,lMo,Xte,iMo,dMo,Ua,cMo,Vte,fMo,mMo,zte,gMo,hMo,Wte,pMo,_Mo,uMo,A,Z1,Qte,bMo,vMo,DI,TMo,FMo,CMo,e9,Hte,MMo,EMo,jI,yMo,wMo,AMo,o9,Ute,LMo,BMo,qI,xMo,kMo,RMo,r9,Jte,SMo,PMo,GI,$Mo,IMo,NMo,t9,Yte,DMo,jMo,OI,qMo,GMo,OMo,a9,Kte,XMo,VMo,XI,zMo,WMo,QMo,n9,Zte,HMo,UMo,VI,JMo,YMo,KMo,s9,eae,ZMo,e4o,zI,o4o,r4o,t4o,l9,oae,a4o,n4o,WI,s4o,l4o,i4o,i9,rae,d4o,c4o,QI,f4o,m4o,g4o,d9,tae,h4o,p4o,HI,_4o,u4o,b4o,c9,aae,v4o,T4o,UI,F4o,C4o,M4o,f9,nae,E4o,y4o,JI,w4o,A4o,L4o,m9,sae,B4o,x4o,YI,k4o,R4o,S4o,g9,lae,P4o,$4o,KI,I4o,N4o,D4o,h9,iae,j4o,q4o,ZI,G4o,O4o,X4o,p9,dae,V4o,z4o,eN,W4o,Q4o,H4o,_9,cae,U4o,J4o,oN,Y4o,K4o,Z4o,u9,fae,eEo,oEo,rN,rEo,tEo,aEo,b9,mae,nEo,sEo,tN,lEo,iEo,dEo,v9,gae,cEo,fEo,aN,mEo,gEo,hEo,T9,hae,pEo,_Eo,nN,uEo,bEo,vEo,F9,pae,TEo,FEo,sN,CEo,MEo,EEo,C9,_ae,yEo,wEo,lN,AEo,LEo,BEo,M9,uae,xEo,kEo,iN,REo,SEo,PEo,E9,bae,$Eo,IEo,dN,NEo,DEo,jEo,y9,vae,qEo,GEo,cN,OEo,XEo,VEo,w9,Tae,zEo,WEo,fN,QEo,HEo,UEo,A9,Fae,JEo,YEo,mN,KEo,ZEo,e5o,L9,Cae,o5o,r5o,gN,t5o,a5o,n5o,B9,Mae,s5o,l5o,hN,i5o,d5o,c5o,x9,Eae,f5o,m5o,pN,g5o,h5o,p5o,k9,yae,_5o,u5o,_N,b5o,v5o,T5o,R9,wae,F5o,C5o,uN,M5o,E5o,y5o,S9,Aae,w5o,A5o,bN,L5o,B5o,x5o,P9,Lae,k5o,R5o,vN,S5o,P5o,$5o,$9,Bae,I5o,N5o,TN,D5o,j5o,q5o,I9,xae,G5o,O5o,FN,X5o,V5o,z5o,N9,kae,W5o,Q5o,CN,H5o,U5o,J5o,D9,Rae,Y5o,K5o,MN,Z5o,eyo,oyo,j9,Sae,ryo,tyo,EN,ayo,nyo,syo,q9,Pae,lyo,iyo,yN,dyo,cyo,fyo,G9,$ae,myo,gyo,wN,hyo,pyo,_yo,O9,Iae,uyo,byo,AN,vyo,Tyo,Fyo,X9,Nae,Cyo,Myo,LN,Eyo,yyo,wyo,V9,Dae,Ayo,Lyo,BN,Byo,xyo,kyo,z9,Ryo,jae,Syo,Pyo,qae,$yo,Iyo,Gae,Nyo,Dyo,w5,yke,hd,W9,Oae,A5,jyo,Xae,qyo,wke,rr,L5,Gyo,pd,Oyo,Vae,Xyo,Vyo,zae,zyo,Wyo,Qyo,B5,Hyo,Wae,Uyo,Jyo,Yyo,Jr,x5,Kyo,Qae,Zyo,ewo,_d,owo,Hae,rwo,two,Uae,awo,nwo,swo,Jae,lwo,iwo,k5,dwo,Xe,R5,cwo,Yae,fwo,mwo,Ja,gwo,Kae,hwo,pwo,Zae,_wo,uwo,ene,bwo,vwo,Two,G,Q9,one,Fwo,Cwo,xN,Mwo,Ewo,ywo,H9,rne,wwo,Awo,kN,Lwo,Bwo,xwo,U9,tne,kwo,Rwo,RN,Swo,Pwo,$wo,J9,ane,Iwo,Nwo,SN,Dwo,jwo,qwo,Y9,nne,Gwo,Owo,PN,Xwo,Vwo,zwo,K9,sne,Wwo,Qwo,$N,Hwo,Uwo,Jwo,Z9,lne,Ywo,Kwo,IN,Zwo,eAo,oAo,eb,ine,rAo,tAo,NN,aAo,nAo,sAo,ob,dne,lAo,iAo,DN,dAo,cAo,fAo,rb,cne,mAo,gAo,jN,hAo,pAo,_Ao,tb,fne,uAo,bAo,qN,vAo,TAo,FAo,ab,mne,CAo,MAo,GN,EAo,yAo,wAo,nb,gne,AAo,LAo,ON,BAo,xAo,kAo,sb,hne,RAo,SAo,XN,PAo,$Ao,IAo,lb,pne,NAo,DAo,VN,jAo,qAo,GAo,ib,_ne,OAo,XAo,zN,VAo,zAo,WAo,db,une,QAo,HAo,WN,UAo,JAo,YAo,cb,bne,KAo,ZAo,QN,e0o,o0o,r0o,fb,vne,t0o,a0o,HN,n0o,s0o,l0o,mb,Tne,i0o,d0o,UN,c0o,f0o,m0o,gb,Fne,g0o,h0o,JN,p0o,_0o,u0o,hb,Cne,b0o,v0o,YN,T0o,F0o,C0o,pb,Mne,M0o,E0o,KN,y0o,w0o,A0o,_b,Ene,L0o,B0o,ZN,x0o,k0o,R0o,ub,yne,S0o,P0o,eD,$0o,I0o,N0o,bb,wne,D0o,j0o,oD,q0o,G0o,O0o,vb,Ane,X0o,V0o,rD,z0o,W0o,Q0o,Tb,Lne,H0o,U0o,tD,J0o,Y0o,K0o,Fb,Z0o,Bne,eLo,oLo,xne,rLo,tLo,kne,aLo,nLo,S5,Ake,ud,Cb,Rne,P5,sLo,Sne,lLo,Lke,tr,$5,iLo,bd,dLo,Pne,cLo,fLo,$ne,mLo,gLo,hLo,I5,pLo,Ine,_Lo,uLo,bLo,Yr,N5,vLo,Nne,TLo,FLo,vd,CLo,Dne,MLo,ELo,jne,yLo,wLo,ALo,qne,LLo,BLo,D5,xLo,Ve,j5,kLo,Gne,RLo,SLo,Ya,PLo,One,$Lo,ILo,Xne,NLo,DLo,Vne,jLo,qLo,GLo,da,Mb,zne,OLo,XLo,aD,VLo,zLo,WLo,Eb,Wne,QLo,HLo,nD,ULo,JLo,YLo,yb,Qne,KLo,ZLo,sD,e7o,o7o,r7o,wb,Hne,t7o,a7o,lD,n7o,s7o,l7o,Ab,Une,i7o,d7o,iD,c7o,f7o,m7o,Lb,g7o,Jne,h7o,p7o,Yne,_7o,u7o,Kne,b7o,v7o,q5,Bke,Td,Bb,Zne,G5,T7o,ese,F7o,xke,ar,O5,C7o,Fd,M7o,ose,E7o,y7o,rse,w7o,A7o,L7o,X5,B7o,tse,x7o,k7o,R7o,Kr,V5,S7o,ase,P7o,$7o,Cd,I7o,nse,N7o,D7o,sse,j7o,q7o,G7o,lse,O7o,X7o,z5,V7o,ze,W5,z7o,ise,W7o,Q7o,Ka,H7o,dse,U7o,J7o,cse,Y7o,K7o,fse,Z7o,e8o,o8o,j,xb,mse,r8o,t8o,dD,a8o,n8o,s8o,kb,gse,l8o,i8o,cD,d8o,c8o,f8o,Rb,hse,m8o,g8o,fD,h8o,p8o,_8o,Sb,pse,u8o,b8o,mD,v8o,T8o,F8o,Pb,_se,C8o,M8o,gD,E8o,y8o,w8o,$b,use,A8o,L8o,hD,B8o,x8o,k8o,Ib,bse,R8o,S8o,pD,P8o,$8o,I8o,Nb,vse,N8o,D8o,_D,j8o,q8o,G8o,Db,Tse,O8o,X8o,uD,V8o,z8o,W8o,jb,Fse,Q8o,H8o,bD,U8o,J8o,Y8o,qb,Cse,K8o,Z8o,vD,eBo,oBo,rBo,Gb,Mse,tBo,aBo,TD,nBo,sBo,lBo,Ob,Ese,iBo,dBo,FD,cBo,fBo,mBo,Xb,yse,gBo,hBo,CD,pBo,_Bo,uBo,Vb,wse,bBo,vBo,MD,TBo,FBo,CBo,zb,Ase,MBo,EBo,ED,yBo,wBo,ABo,Wb,Lse,LBo,BBo,yD,xBo,kBo,RBo,Qb,Bse,SBo,PBo,wD,$Bo,IBo,NBo,Hb,xse,DBo,jBo,AD,qBo,GBo,OBo,Ub,kse,XBo,VBo,LD,zBo,WBo,QBo,Jb,Rse,HBo,UBo,BD,JBo,YBo,KBo,Yb,Sse,ZBo,exo,xD,oxo,rxo,txo,Kb,Pse,axo,nxo,kD,sxo,lxo,ixo,Zb,$se,dxo,cxo,RD,fxo,mxo,gxo,e3,Ise,hxo,pxo,SD,_xo,uxo,bxo,o3,Nse,vxo,Txo,PD,Fxo,Cxo,Mxo,r3,Dse,Exo,yxo,$D,wxo,Axo,Lxo,t3,jse,Bxo,xxo,ID,kxo,Rxo,Sxo,a3,qse,Pxo,$xo,ND,Ixo,Nxo,Dxo,n3,Gse,jxo,qxo,DD,Gxo,Oxo,Xxo,s3,Ose,Vxo,zxo,jD,Wxo,Qxo,Hxo,l3,Xse,Uxo,Jxo,qD,Yxo,Kxo,Zxo,i3,Vse,eko,oko,GD,rko,tko,ako,d3,nko,zse,sko,lko,Wse,iko,dko,Qse,cko,fko,Q5,kke,Md,c3,Hse,H5,mko,Use,gko,Rke,nr,U5,hko,Ed,pko,Jse,_ko,uko,Yse,bko,vko,Tko,J5,Fko,Kse,Cko,Mko,Eko,Zr,Y5,yko,Zse,wko,Ako,yd,Lko,ele,Bko,xko,ole,kko,Rko,Sko,rle,Pko,$ko,K5,Iko,We,Z5,Nko,tle,Dko,jko,Za,qko,ale,Gko,Oko,nle,Xko,Vko,sle,zko,Wko,Qko,R,f3,lle,Hko,Uko,OD,Jko,Yko,Kko,m3,ile,Zko,eRo,XD,oRo,rRo,tRo,g3,dle,aRo,nRo,VD,sRo,lRo,iRo,h3,cle,dRo,cRo,zD,fRo,mRo,gRo,p3,fle,hRo,pRo,WD,_Ro,uRo,bRo,_3,mle,vRo,TRo,QD,FRo,CRo,MRo,u3,gle,ERo,yRo,HD,wRo,ARo,LRo,b3,hle,BRo,xRo,UD,kRo,RRo,SRo,v3,ple,PRo,$Ro,JD,IRo,NRo,DRo,T3,_le,jRo,qRo,YD,GRo,ORo,XRo,F3,ule,VRo,zRo,KD,WRo,QRo,HRo,C3,ble,URo,JRo,ZD,YRo,KRo,ZRo,M3,vle,eSo,oSo,ej,rSo,tSo,aSo,E3,Tle,nSo,sSo,oj,lSo,iSo,dSo,y3,Fle,cSo,fSo,rj,mSo,gSo,hSo,w3,Cle,pSo,_So,tj,uSo,bSo,vSo,A3,Mle,TSo,FSo,aj,CSo,MSo,ESo,L3,Ele,ySo,wSo,nj,ASo,LSo,BSo,B3,yle,xSo,kSo,sj,RSo,SSo,PSo,x3,wle,$So,ISo,lj,NSo,DSo,jSo,k3,Ale,qSo,GSo,ij,OSo,XSo,VSo,R3,Lle,zSo,WSo,dj,QSo,HSo,USo,S3,Ble,JSo,YSo,cj,KSo,ZSo,ePo,P3,xle,oPo,rPo,fj,tPo,aPo,nPo,$3,kle,sPo,lPo,mj,iPo,dPo,cPo,I3,Rle,fPo,mPo,gj,gPo,hPo,pPo,N3,Sle,_Po,uPo,hj,bPo,vPo,TPo,D3,Ple,FPo,CPo,pj,MPo,EPo,yPo,j3,$le,wPo,APo,_j,LPo,BPo,xPo,q3,Ile,kPo,RPo,uj,SPo,PPo,$Po,G3,Nle,IPo,NPo,bj,DPo,jPo,qPo,O3,Dle,GPo,OPo,vj,XPo,VPo,zPo,X3,jle,WPo,QPo,Tj,HPo,UPo,JPo,V3,qle,YPo,KPo,Fj,ZPo,e$o,o$o,z3,Gle,r$o,t$o,Cj,a$o,n$o,s$o,W3,Ole,l$o,i$o,Mj,d$o,c$o,f$o,Q3,Xle,m$o,g$o,Ej,h$o,p$o,_$o,H3,Vle,u$o,b$o,yj,v$o,T$o,F$o,U3,zle,C$o,M$o,wj,E$o,y$o,w$o,J3,A$o,Wle,L$o,B$o,Qle,x$o,k$o,Hle,R$o,S$o,ey,Ske,wd,Y3,Ule,oy,P$o,Jle,$$o,Pke,sr,ry,I$o,Ad,N$o,Yle,D$o,j$o,Kle,q$o,G$o,O$o,ty,X$o,Zle,V$o,z$o,W$o,et,ay,Q$o,eie,H$o,U$o,Ld,J$o,oie,Y$o,K$o,rie,Z$o,eIo,oIo,tie,rIo,tIo,ny,aIo,Qe,sy,nIo,aie,sIo,lIo,en,iIo,nie,dIo,cIo,sie,fIo,mIo,lie,gIo,hIo,pIo,iie,K3,die,_Io,uIo,Aj,bIo,vIo,TIo,Z3,FIo,cie,CIo,MIo,fie,EIo,yIo,mie,wIo,AIo,ly,$ke,Bd,e2,gie,iy,LIo,hie,BIo,Ike,lr,dy,xIo,xd,kIo,pie,RIo,SIo,_ie,PIo,$Io,IIo,cy,NIo,uie,DIo,jIo,qIo,ot,fy,GIo,bie,OIo,XIo,kd,VIo,vie,zIo,WIo,Tie,QIo,HIo,UIo,Fie,JIo,YIo,my,KIo,He,gy,ZIo,Cie,eNo,oNo,on,rNo,Mie,tNo,aNo,Eie,nNo,sNo,yie,lNo,iNo,dNo,me,o2,wie,cNo,fNo,Lj,mNo,gNo,hNo,r2,Aie,pNo,_No,Bj,uNo,bNo,vNo,qs,Lie,TNo,FNo,xj,CNo,MNo,kj,ENo,yNo,wNo,t2,Bie,ANo,LNo,Rj,BNo,xNo,kNo,ma,xie,RNo,SNo,Sj,PNo,$No,Pj,INo,NNo,$j,DNo,jNo,qNo,a2,kie,GNo,ONo,Ij,XNo,VNo,zNo,n2,Rie,WNo,QNo,Nj,HNo,UNo,JNo,s2,Sie,YNo,KNo,Dj,ZNo,eDo,oDo,l2,Pie,rDo,tDo,jj,aDo,nDo,sDo,i2,$ie,lDo,iDo,qj,dDo,cDo,fDo,d2,Iie,mDo,gDo,Gj,hDo,pDo,_Do,c2,uDo,Nie,bDo,vDo,Die,TDo,FDo,jie,CDo,MDo,hy,Nke,Rd,f2,qie,py,EDo,Gie,yDo,Dke,ir,_y,wDo,Sd,ADo,Oie,LDo,BDo,Xie,xDo,kDo,RDo,uy,SDo,Vie,PDo,$Do,IDo,rt,by,NDo,zie,DDo,jDo,Pd,qDo,Wie,GDo,ODo,Qie,XDo,VDo,zDo,Hie,WDo,QDo,vy,HDo,Ue,Ty,UDo,Uie,JDo,YDo,rn,KDo,Jie,ZDo,ejo,Yie,ojo,rjo,Kie,tjo,ajo,njo,Zie,m2,ede,sjo,ljo,Oj,ijo,djo,cjo,g2,fjo,ode,mjo,gjo,rde,hjo,pjo,tde,_jo,ujo,Fy,jke,$d,h2,ade,Cy,bjo,nde,vjo,qke,dr,My,Tjo,Id,Fjo,sde,Cjo,Mjo,lde,Ejo,yjo,wjo,Ey,Ajo,ide,Ljo,Bjo,xjo,tt,yy,kjo,dde,Rjo,Sjo,Nd,Pjo,cde,$jo,Ijo,fde,Njo,Djo,jjo,mde,qjo,Gjo,wy,Ojo,Je,Ay,Xjo,gde,Vjo,zjo,tn,Wjo,hde,Qjo,Hjo,pde,Ujo,Jjo,_de,Yjo,Kjo,Zjo,ke,p2,ude,eqo,oqo,Xj,rqo,tqo,aqo,_2,bde,nqo,sqo,Vj,lqo,iqo,dqo,u2,vde,cqo,fqo,zj,mqo,gqo,hqo,b2,Tde,pqo,_qo,Wj,uqo,bqo,vqo,v2,Fde,Tqo,Fqo,Qj,Cqo,Mqo,Eqo,T2,Cde,yqo,wqo,Hj,Aqo,Lqo,Bqo,F2,Mde,xqo,kqo,Uj,Rqo,Sqo,Pqo,C2,Ede,$qo,Iqo,Jj,Nqo,Dqo,jqo,M2,qqo,yde,Gqo,Oqo,wde,Xqo,Vqo,Ade,zqo,Wqo,Ly,Gke,Dd,E2,Lde,By,Qqo,Bde,Hqo,Oke,cr,xy,Uqo,jd,Jqo,xde,Yqo,Kqo,kde,Zqo,eGo,oGo,ky,rGo,Rde,tGo,aGo,nGo,at,Ry,sGo,Sde,lGo,iGo,qd,dGo,Pde,cGo,fGo,$de,mGo,gGo,hGo,Ide,pGo,_Go,Sy,uGo,Ye,Py,bGo,Nde,vGo,TGo,an,FGo,Dde,CGo,MGo,jde,EGo,yGo,qde,wGo,AGo,LGo,nn,y2,Gde,BGo,xGo,Yj,kGo,RGo,SGo,w2,Ode,PGo,$Go,Kj,IGo,NGo,DGo,A2,Xde,jGo,qGo,Zj,GGo,OGo,XGo,L2,Vde,VGo,zGo,eq,WGo,QGo,HGo,B2,UGo,zde,JGo,YGo,Wde,KGo,ZGo,Qde,eOo,oOo,$y,Xke,Gd,x2,Hde,Iy,rOo,Ude,tOo,Vke,fr,Ny,aOo,Od,nOo,Jde,sOo,lOo,Yde,iOo,dOo,cOo,Dy,fOo,Kde,mOo,gOo,hOo,nt,jy,pOo,Zde,_Oo,uOo,Xd,bOo,ece,vOo,TOo,oce,FOo,COo,MOo,rce,EOo,yOo,qy,wOo,Ke,Gy,AOo,tce,LOo,BOo,sn,xOo,ace,kOo,ROo,nce,SOo,POo,sce,$Oo,IOo,NOo,Re,k2,lce,DOo,jOo,oq,qOo,GOo,OOo,R2,ice,XOo,VOo,rq,zOo,WOo,QOo,S2,dce,HOo,UOo,tq,JOo,YOo,KOo,P2,cce,ZOo,eXo,aq,oXo,rXo,tXo,$2,fce,aXo,nXo,nq,sXo,lXo,iXo,I2,mce,dXo,cXo,sq,fXo,mXo,gXo,N2,gce,hXo,pXo,lq,_Xo,uXo,bXo,D2,hce,vXo,TXo,iq,FXo,CXo,MXo,j2,EXo,pce,yXo,wXo,_ce,AXo,LXo,uce,BXo,xXo,Oy,zke,Vd,q2,bce,Xy,kXo,vce,RXo,Wke,mr,Vy,SXo,zd,PXo,Tce,$Xo,IXo,Fce,NXo,DXo,jXo,zy,qXo,Cce,GXo,OXo,XXo,st,Wy,VXo,Mce,zXo,WXo,Wd,QXo,Ece,HXo,UXo,yce,JXo,YXo,KXo,wce,ZXo,eVo,Qy,oVo,Ze,Hy,rVo,Ace,tVo,aVo,ln,nVo,Lce,sVo,lVo,Bce,iVo,dVo,xce,cVo,fVo,mVo,Uy,G2,kce,gVo,hVo,dq,pVo,_Vo,uVo,O2,Rce,bVo,vVo,cq,TVo,FVo,CVo,X2,MVo,Sce,EVo,yVo,Pce,wVo,AVo,$ce,LVo,BVo,Jy,Qke,Qd,V2,Ice,Yy,xVo,Nce,kVo,Hke,gr,Ky,RVo,Hd,SVo,Dce,PVo,$Vo,jce,IVo,NVo,DVo,Zy,jVo,qce,qVo,GVo,OVo,lt,ew,XVo,Gce,VVo,zVo,Ud,WVo,Oce,QVo,HVo,Xce,UVo,JVo,YVo,Vce,KVo,ZVo,ow,ezo,eo,rw,ozo,zce,rzo,tzo,dn,azo,Wce,nzo,szo,Qce,lzo,izo,Hce,dzo,czo,fzo,cn,z2,Uce,mzo,gzo,fq,hzo,pzo,_zo,W2,Jce,uzo,bzo,mq,vzo,Tzo,Fzo,Q2,Yce,Czo,Mzo,gq,Ezo,yzo,wzo,H2,Kce,Azo,Lzo,hq,Bzo,xzo,kzo,U2,Rzo,Zce,Szo,Pzo,efe,$zo,Izo,ofe,Nzo,Dzo,tw,Uke,Jd,J2,rfe,aw,jzo,tfe,qzo,Jke,hr,nw,Gzo,Yd,Ozo,afe,Xzo,Vzo,nfe,zzo,Wzo,Qzo,sw,Hzo,sfe,Uzo,Jzo,Yzo,it,lw,Kzo,lfe,Zzo,eWo,Kd,oWo,ife,rWo,tWo,dfe,aWo,nWo,sWo,cfe,lWo,iWo,iw,dWo,oo,dw,cWo,ffe,fWo,mWo,fn,gWo,mfe,hWo,pWo,gfe,_Wo,uWo,hfe,bWo,vWo,TWo,Zd,Y2,pfe,FWo,CWo,pq,MWo,EWo,yWo,K2,_fe,wWo,AWo,_q,LWo,BWo,xWo,Z2,ufe,kWo,RWo,uq,SWo,PWo,$Wo,ev,IWo,bfe,NWo,DWo,vfe,jWo,qWo,Tfe,GWo,OWo,cw,Yke,ec,ov,Ffe,fw,XWo,Cfe,VWo,Kke,pr,mw,zWo,oc,WWo,Mfe,QWo,HWo,Efe,UWo,JWo,YWo,gw,KWo,yfe,ZWo,eQo,oQo,dt,hw,rQo,wfe,tQo,aQo,rc,nQo,Afe,sQo,lQo,Lfe,iQo,dQo,cQo,Bfe,fQo,mQo,pw,gQo,ro,_w,hQo,xfe,pQo,_Qo,mn,uQo,kfe,bQo,vQo,Rfe,TQo,FQo,Sfe,CQo,MQo,EQo,Pfe,rv,$fe,yQo,wQo,bq,AQo,LQo,BQo,tv,xQo,Ife,kQo,RQo,Nfe,SQo,PQo,Dfe,$Qo,IQo,uw,Zke,tc,av,jfe,bw,NQo,qfe,DQo,eRe,_r,vw,jQo,ac,qQo,Gfe,GQo,OQo,Ofe,XQo,VQo,zQo,Tw,WQo,Xfe,QQo,HQo,UQo,ct,Fw,JQo,Vfe,YQo,KQo,nc,ZQo,zfe,eHo,oHo,Wfe,rHo,tHo,aHo,Qfe,nHo,sHo,Cw,lHo,to,Mw,iHo,Hfe,dHo,cHo,gn,fHo,Ufe,mHo,gHo,Jfe,hHo,pHo,Yfe,_Ho,uHo,bHo,Kfe,nv,Zfe,vHo,THo,vq,FHo,CHo,MHo,sv,EHo,eme,yHo,wHo,ome,AHo,LHo,rme,BHo,xHo,Ew,oRe,sc,lv,tme,yw,kHo,ame,RHo,rRe,ur,ww,SHo,lc,PHo,nme,$Ho,IHo,sme,NHo,DHo,jHo,Aw,qHo,lme,GHo,OHo,XHo,ft,Lw,VHo,ime,zHo,WHo,ic,QHo,dme,HHo,UHo,cme,JHo,YHo,KHo,fme,ZHo,eUo,Bw,oUo,ao,xw,rUo,mme,tUo,aUo,hn,nUo,gme,sUo,lUo,hme,iUo,dUo,pme,cUo,fUo,mUo,kw,iv,_me,gUo,hUo,Tq,pUo,_Uo,uUo,dv,ume,bUo,vUo,Fq,TUo,FUo,CUo,cv,MUo,bme,EUo,yUo,vme,wUo,AUo,Tme,LUo,BUo,Rw,tRe,dc,fv,Fme,Sw,xUo,Cme,kUo,aRe,br,Pw,RUo,cc,SUo,Mme,PUo,$Uo,Eme,IUo,NUo,DUo,$w,jUo,yme,qUo,GUo,OUo,mt,Iw,XUo,wme,VUo,zUo,fc,WUo,Ame,QUo,HUo,Lme,UUo,JUo,YUo,Bme,KUo,ZUo,Nw,eJo,no,Dw,oJo,xme,rJo,tJo,pn,aJo,kme,nJo,sJo,Rme,lJo,iJo,Sme,dJo,cJo,fJo,Pme,mv,$me,mJo,gJo,Cq,hJo,pJo,_Jo,gv,uJo,Ime,bJo,vJo,Nme,TJo,FJo,Dme,CJo,MJo,jw,nRe,mc,hv,jme,qw,EJo,qme,yJo,sRe,vr,Gw,wJo,gc,AJo,Gme,LJo,BJo,Ome,xJo,kJo,RJo,Ow,SJo,Xme,PJo,$Jo,IJo,gt,Xw,NJo,Vme,DJo,jJo,hc,qJo,zme,GJo,OJo,Wme,XJo,VJo,zJo,Qme,WJo,QJo,Vw,HJo,ho,zw,UJo,Hme,JJo,YJo,_n,KJo,Ume,ZJo,eYo,Jme,oYo,rYo,Yme,tYo,aYo,nYo,B,pv,Kme,sYo,lYo,Mq,iYo,dYo,cYo,_v,Zme,fYo,mYo,Eq,gYo,hYo,pYo,uv,ege,_Yo,uYo,yq,bYo,vYo,TYo,bv,oge,FYo,CYo,wq,MYo,EYo,yYo,vv,rge,wYo,AYo,Aq,LYo,BYo,xYo,Tv,tge,kYo,RYo,Lq,SYo,PYo,$Yo,Fv,age,IYo,NYo,Bq,DYo,jYo,qYo,Cv,nge,GYo,OYo,xq,XYo,VYo,zYo,Mv,sge,WYo,QYo,kq,HYo,UYo,JYo,Ev,lge,YYo,KYo,Rq,ZYo,eKo,oKo,yv,ige,rKo,tKo,Sq,aKo,nKo,sKo,wv,dge,lKo,iKo,Pq,dKo,cKo,fKo,Av,cge,mKo,gKo,$q,hKo,pKo,_Ko,Lv,fge,uKo,bKo,Iq,vKo,TKo,FKo,Bv,mge,CKo,MKo,Nq,EKo,yKo,wKo,xv,gge,AKo,LKo,Dq,BKo,xKo,kKo,Gs,hge,RKo,SKo,jq,PKo,$Ko,qq,IKo,NKo,DKo,kv,pge,jKo,qKo,Gq,GKo,OKo,XKo,Rv,_ge,VKo,zKo,Oq,WKo,QKo,HKo,Sv,uge,UKo,JKo,Xq,YKo,KKo,ZKo,Pv,bge,eZo,oZo,Vq,rZo,tZo,aZo,$v,vge,nZo,sZo,zq,lZo,iZo,dZo,Iv,Tge,cZo,fZo,Wq,mZo,gZo,hZo,Nv,Fge,pZo,_Zo,Qq,uZo,bZo,vZo,Dv,Cge,TZo,FZo,Hq,CZo,MZo,EZo,jv,Mge,yZo,wZo,Uq,AZo,LZo,BZo,qv,Ege,xZo,kZo,Jq,RZo,SZo,PZo,Gv,yge,$Zo,IZo,Yq,NZo,DZo,jZo,Ov,wge,qZo,GZo,Kq,OZo,XZo,VZo,Xv,Age,zZo,WZo,Zq,QZo,HZo,UZo,Vv,Lge,JZo,YZo,eG,KZo,ZZo,eer,zv,Bge,oer,rer,oG,ter,aer,ner,Wv,xge,ser,ler,rG,ier,der,cer,Qv,kge,fer,mer,tG,ger,her,per,Hv,Rge,_er,uer,aG,ber,ver,Ter,Uv,Sge,Fer,Cer,nG,Mer,Eer,yer,Jv,Pge,wer,Aer,sG,Ler,Ber,xer,Yv,$ge,ker,Rer,lG,Ser,Per,$er,Kv,Ige,Ier,Ner,iG,Der,jer,qer,Zv,Nge,Ger,Oer,dG,Xer,Ver,zer,e6,Dge,Wer,Qer,cG,Her,Uer,Jer,o6,jge,Yer,Ker,fG,Zer,eor,oor,qge,ror,tor,Ww,lRe,pc,r6,Gge,Qw,aor,Oge,nor,iRe,Tr,Hw,sor,_c,lor,Xge,ior,dor,Vge,cor,mor,gor,Uw,hor,zge,por,_or,uor,ht,Jw,bor,Wge,vor,Tor,uc,For,Qge,Cor,Mor,Hge,Eor,yor,wor,Uge,Aor,Lor,Yw,Bor,po,Kw,xor,Jge,kor,Ror,un,Sor,Yge,Por,$or,Kge,Ior,Nor,Zge,Dor,jor,qor,H,t6,ehe,Gor,Oor,mG,Xor,Vor,zor,a6,ohe,Wor,Qor,gG,Hor,Uor,Jor,n6,rhe,Yor,Kor,hG,Zor,err,orr,s6,the,rrr,trr,pG,arr,nrr,srr,l6,ahe,lrr,irr,_G,drr,crr,frr,i6,nhe,mrr,grr,uG,hrr,prr,_rr,d6,she,urr,brr,bG,vrr,Trr,Frr,c6,lhe,Crr,Mrr,vG,Err,yrr,wrr,f6,ihe,Arr,Lrr,TG,Brr,xrr,krr,m6,dhe,Rrr,Srr,FG,Prr,$rr,Irr,g6,che,Nrr,Drr,CG,jrr,qrr,Grr,h6,fhe,Orr,Xrr,MG,Vrr,zrr,Wrr,p6,mhe,Qrr,Hrr,EG,Urr,Jrr,Yrr,_6,ghe,Krr,Zrr,yG,etr,otr,rtr,u6,hhe,ttr,atr,wG,ntr,str,ltr,b6,phe,itr,dtr,AG,ctr,ftr,mtr,v6,_he,gtr,htr,LG,ptr,_tr,utr,T6,uhe,btr,vtr,BG,Ttr,Ftr,Ctr,F6,bhe,Mtr,Etr,xG,ytr,wtr,Atr,C6,vhe,Ltr,Btr,kG,xtr,ktr,Rtr,M6,The,Str,Ptr,RG,$tr,Itr,Ntr,E6,Fhe,Dtr,jtr,SG,qtr,Gtr,Otr,Che,Xtr,Vtr,Zw,dRe,bc,y6,Mhe,eA,ztr,Ehe,Wtr,cRe,Fr,oA,Qtr,vc,Htr,yhe,Utr,Jtr,whe,Ytr,Ktr,Ztr,rA,ear,Ahe,oar,rar,tar,pt,tA,aar,Lhe,nar,sar,Tc,lar,Bhe,iar,dar,xhe,car,far,mar,khe,gar,har,aA,par,_o,nA,_ar,Rhe,uar,bar,bn,Tar,She,Far,Car,Phe,Mar,Ear,$he,yar,war,Aar,ge,w6,Ihe,Lar,Bar,PG,xar,kar,Rar,A6,Nhe,Sar,Par,$G,$ar,Iar,Nar,L6,Dhe,Dar,jar,IG,qar,Gar,Oar,B6,jhe,Xar,Var,NG,zar,War,Qar,x6,qhe,Har,Uar,DG,Jar,Yar,Kar,k6,Ghe,Zar,enr,jG,onr,rnr,tnr,R6,Ohe,anr,nnr,qG,snr,lnr,inr,S6,Xhe,dnr,cnr,GG,fnr,mnr,gnr,P6,Vhe,hnr,pnr,OG,_nr,unr,bnr,$6,zhe,vnr,Tnr,XG,Fnr,Cnr,Mnr,I6,Whe,Enr,ynr,VG,wnr,Anr,Lnr,Qhe,Bnr,xnr,sA,fRe,Fc,N6,Hhe,lA,knr,Uhe,Rnr,mRe,Cr,iA,Snr,Cc,Pnr,Jhe,$nr,Inr,Yhe,Nnr,Dnr,jnr,dA,qnr,Khe,Gnr,Onr,Xnr,_t,cA,Vnr,Zhe,znr,Wnr,Mc,Qnr,epe,Hnr,Unr,ope,Jnr,Ynr,Knr,rpe,Znr,esr,fA,osr,uo,mA,rsr,tpe,tsr,asr,vn,nsr,ape,ssr,lsr,npe,isr,dsr,spe,csr,fsr,msr,gA,D6,lpe,gsr,hsr,zG,psr,_sr,usr,j6,ipe,bsr,vsr,WG,Tsr,Fsr,Csr,dpe,Msr,Esr,hA,gRe,Ec,q6,cpe,pA,ysr,fpe,wsr,hRe,Mr,_A,Asr,yc,Lsr,mpe,Bsr,xsr,gpe,ksr,Rsr,Ssr,uA,Psr,hpe,$sr,Isr,Nsr,ut,bA,Dsr,ppe,jsr,qsr,wc,Gsr,_pe,Osr,Xsr,upe,Vsr,zsr,Wsr,bpe,Qsr,Hsr,vA,Usr,bo,TA,Jsr,vpe,Ysr,Ksr,Tn,Zsr,Tpe,elr,olr,Fpe,rlr,tlr,Cpe,alr,nlr,slr,J,G6,Mpe,llr,ilr,QG,dlr,clr,flr,O6,Epe,mlr,glr,HG,hlr,plr,_lr,X6,ype,ulr,blr,UG,vlr,Tlr,Flr,V6,wpe,Clr,Mlr,JG,Elr,ylr,wlr,z6,Ape,Alr,Llr,YG,Blr,xlr,klr,W6,Lpe,Rlr,Slr,KG,Plr,$lr,Ilr,Q6,Bpe,Nlr,Dlr,ZG,jlr,qlr,Glr,H6,xpe,Olr,Xlr,eO,Vlr,zlr,Wlr,U6,kpe,Qlr,Hlr,oO,Ulr,Jlr,Ylr,J6,Rpe,Klr,Zlr,rO,eir,oir,rir,Y6,Spe,tir,air,tO,nir,sir,lir,K6,Ppe,iir,dir,aO,cir,fir,mir,Z6,$pe,gir,hir,nO,pir,_ir,uir,eT,Ipe,bir,vir,sO,Tir,Fir,Cir,oT,Npe,Mir,Eir,lO,yir,wir,Air,rT,Dpe,Lir,Bir,iO,xir,kir,Rir,tT,jpe,Sir,Pir,dO,$ir,Iir,Nir,aT,qpe,Dir,jir,cO,qir,Gir,Oir,nT,Gpe,Xir,Vir,fO,zir,Wir,Qir,sT,Ope,Hir,Uir,mO,Jir,Yir,Kir,Xpe,Zir,edr,FA,pRe,Ac,lT,Vpe,CA,odr,zpe,rdr,_Re,Er,MA,tdr,Lc,adr,Wpe,ndr,sdr,Qpe,ldr,idr,ddr,EA,cdr,Hpe,fdr,mdr,gdr,bt,yA,hdr,Upe,pdr,_dr,Bc,udr,Jpe,bdr,vdr,Ype,Tdr,Fdr,Cdr,Kpe,Mdr,Edr,wA,ydr,vo,AA,wdr,Zpe,Adr,Ldr,Fn,Bdr,e_e,xdr,kdr,o_e,Rdr,Sdr,r_e,Pdr,$dr,Idr,_e,iT,t_e,Ndr,Ddr,gO,jdr,qdr,Gdr,dT,a_e,Odr,Xdr,hO,Vdr,zdr,Wdr,cT,n_e,Qdr,Hdr,pO,Udr,Jdr,Ydr,fT,s_e,Kdr,Zdr,_O,ecr,ocr,rcr,mT,l_e,tcr,acr,uO,ncr,scr,lcr,gT,i_e,icr,dcr,bO,ccr,fcr,mcr,hT,d_e,gcr,hcr,vO,pcr,_cr,ucr,pT,c_e,bcr,vcr,TO,Tcr,Fcr,Ccr,_T,f_e,Mcr,Ecr,FO,ycr,wcr,Acr,uT,m_e,Lcr,Bcr,CO,xcr,kcr,Rcr,g_e,Scr,Pcr,LA,uRe,xc,bT,h_e,BA,$cr,p_e,Icr,bRe,yr,xA,Ncr,kc,Dcr,__e,jcr,qcr,u_e,Gcr,Ocr,Xcr,kA,Vcr,b_e,zcr,Wcr,Qcr,vt,RA,Hcr,v_e,Ucr,Jcr,Rc,Ycr,T_e,Kcr,Zcr,F_e,efr,ofr,rfr,C_e,tfr,afr,SA,nfr,To,PA,sfr,M_e,lfr,ifr,Cn,dfr,E_e,cfr,ffr,y_e,mfr,gfr,w_e,hfr,pfr,_fr,V,vT,A_e,ufr,bfr,MO,vfr,Tfr,Ffr,TT,L_e,Cfr,Mfr,EO,Efr,yfr,wfr,FT,B_e,Afr,Lfr,yO,Bfr,xfr,kfr,CT,x_e,Rfr,Sfr,wO,Pfr,$fr,Ifr,MT,k_e,Nfr,Dfr,AO,jfr,qfr,Gfr,ET,R_e,Ofr,Xfr,LO,Vfr,zfr,Wfr,yT,S_e,Qfr,Hfr,BO,Ufr,Jfr,Yfr,wT,P_e,Kfr,Zfr,xO,emr,omr,rmr,AT,$_e,tmr,amr,kO,nmr,smr,lmr,LT,I_e,imr,dmr,RO,cmr,fmr,mmr,BT,N_e,gmr,hmr,SO,pmr,_mr,umr,xT,D_e,bmr,vmr,PO,Tmr,Fmr,Cmr,kT,j_e,Mmr,Emr,$O,ymr,wmr,Amr,RT,q_e,Lmr,Bmr,IO,xmr,kmr,Rmr,ST,G_e,Smr,Pmr,NO,$mr,Imr,Nmr,PT,O_e,Dmr,jmr,DO,qmr,Gmr,Omr,$T,X_e,Xmr,Vmr,jO,zmr,Wmr,Qmr,IT,V_e,Hmr,Umr,qO,Jmr,Ymr,Kmr,NT,z_e,Zmr,egr,GO,ogr,rgr,tgr,DT,W_e,agr,ngr,OO,sgr,lgr,igr,jT,Q_e,dgr,cgr,XO,fgr,mgr,ggr,qT,H_e,hgr,pgr,VO,_gr,ugr,bgr,GT,U_e,vgr,Tgr,zO,Fgr,Cgr,Mgr,OT,J_e,Egr,ygr,WO,wgr,Agr,Lgr,XT,Y_e,Bgr,xgr,QO,kgr,Rgr,Sgr,K_e,Pgr,$gr,$A,vRe,Sc,VT,Z_e,IA,Igr,eue,Ngr,TRe,wr,NA,Dgr,Pc,jgr,oue,qgr,Ggr,rue,Ogr,Xgr,Vgr,DA,zgr,tue,Wgr,Qgr,Hgr,Tt,jA,Ugr,aue,Jgr,Ygr,$c,Kgr,nue,Zgr,ehr,sue,ohr,rhr,thr,lue,ahr,nhr,qA,shr,Fo,GA,lhr,iue,ihr,dhr,Mn,chr,due,fhr,mhr,cue,ghr,hhr,fue,phr,_hr,uhr,ae,zT,mue,bhr,vhr,HO,Thr,Fhr,Chr,WT,gue,Mhr,Ehr,UO,yhr,whr,Ahr,QT,hue,Lhr,Bhr,JO,xhr,khr,Rhr,HT,pue,Shr,Phr,YO,$hr,Ihr,Nhr,UT,_ue,Dhr,jhr,KO,qhr,Ghr,Ohr,JT,uue,Xhr,Vhr,ZO,zhr,Whr,Qhr,YT,bue,Hhr,Uhr,eX,Jhr,Yhr,Khr,KT,vue,Zhr,epr,oX,opr,rpr,tpr,ZT,Tue,apr,npr,rX,spr,lpr,ipr,eF,Fue,dpr,cpr,tX,fpr,mpr,gpr,oF,Cue,hpr,ppr,aX,_pr,upr,bpr,rF,Mue,vpr,Tpr,nX,Fpr,Cpr,Mpr,tF,Eue,Epr,ypr,sX,wpr,Apr,Lpr,aF,yue,Bpr,xpr,lX,kpr,Rpr,Spr,nF,wue,Ppr,$pr,iX,Ipr,Npr,Dpr,sF,Aue,jpr,qpr,dX,Gpr,Opr,Xpr,lF,Lue,Vpr,zpr,cX,Wpr,Qpr,Hpr,Bue,Upr,Jpr,OA,FRe,Ic,iF,xue,XA,Ypr,kue,Kpr,CRe,Ar,VA,Zpr,Nc,e_r,Rue,o_r,r_r,Sue,t_r,a_r,n_r,zA,s_r,Pue,l_r,i_r,d_r,Ft,WA,c_r,$ue,f_r,m_r,Dc,g_r,Iue,h_r,p_r,Nue,__r,u_r,b_r,Due,v_r,T_r,QA,F_r,Co,HA,C_r,jue,M_r,E_r,En,y_r,que,w_r,A_r,Gue,L_r,B_r,Oue,x_r,k_r,R_r,Xue,dF,Vue,S_r,P_r,fX,$_r,I_r,N_r,zue,D_r,j_r,UA,MRe,jc,cF,Wue,JA,q_r,Que,G_r,ERe,Lr,YA,O_r,qc,X_r,Hue,V_r,z_r,Uue,W_r,Q_r,H_r,KA,U_r,Jue,J_r,Y_r,K_r,Ct,ZA,Z_r,Yue,eur,our,Gc,rur,Kue,tur,aur,Zue,nur,sur,lur,e1e,iur,dur,e0,cur,Mo,o0,fur,o1e,mur,gur,yn,hur,r1e,pur,_ur,t1e,uur,bur,a1e,vur,Tur,Fur,Y,fF,n1e,Cur,Mur,mX,Eur,yur,wur,mF,s1e,Aur,Lur,gX,Bur,xur,kur,gF,l1e,Rur,Sur,hX,Pur,$ur,Iur,hF,i1e,Nur,Dur,pX,jur,qur,Gur,pF,d1e,Our,Xur,_X,Vur,zur,Wur,_F,c1e,Qur,Hur,uX,Uur,Jur,Yur,uF,f1e,Kur,Zur,bX,e1r,o1r,r1r,bF,m1e,t1r,a1r,vX,n1r,s1r,l1r,vF,g1e,i1r,d1r,TX,c1r,f1r,m1r,TF,h1e,g1r,h1r,FX,p1r,_1r,u1r,FF,p1e,b1r,v1r,CX,T1r,F1r,C1r,CF,_1e,M1r,E1r,MX,y1r,w1r,A1r,MF,u1e,L1r,B1r,EX,x1r,k1r,R1r,EF,b1e,S1r,P1r,yX,$1r,I1r,N1r,yF,v1e,D1r,j1r,wX,q1r,G1r,O1r,wF,T1e,X1r,V1r,AX,z1r,W1r,Q1r,AF,F1e,H1r,U1r,LX,J1r,Y1r,K1r,LF,C1e,Z1r,e9r,BX,o9r,r9r,t9r,BF,M1e,a9r,n9r,xX,s9r,l9r,i9r,xF,E1e,d9r,c9r,kX,f9r,m9r,g9r,y1e,h9r,p9r,r0,yRe,Oc,kF,w1e,t0,_9r,A1e,u9r,wRe,Br,a0,b9r,Xc,v9r,L1e,T9r,F9r,B1e,C9r,M9r,E9r,n0,y9r,x1e,w9r,A9r,L9r,Mt,s0,B9r,k1e,x9r,k9r,Vc,R9r,R1e,S9r,P9r,S1e,$9r,I9r,N9r,P1e,D9r,j9r,l0,q9r,Eo,i0,G9r,$1e,O9r,X9r,wn,V9r,I1e,z9r,W9r,N1e,Q9r,H9r,D1e,U9r,J9r,Y9r,Z,RF,j1e,K9r,Z9r,RX,ebr,obr,rbr,SF,q1e,tbr,abr,SX,nbr,sbr,lbr,PF,G1e,ibr,dbr,PX,cbr,fbr,mbr,$F,O1e,gbr,hbr,$X,pbr,_br,ubr,IF,X1e,bbr,vbr,IX,Tbr,Fbr,Cbr,NF,V1e,Mbr,Ebr,NX,ybr,wbr,Abr,DF,z1e,Lbr,Bbr,DX,xbr,kbr,Rbr,jF,W1e,Sbr,Pbr,jX,$br,Ibr,Nbr,qF,Q1e,Dbr,jbr,qX,qbr,Gbr,Obr,GF,H1e,Xbr,Vbr,GX,zbr,Wbr,Qbr,OF,U1e,Hbr,Ubr,OX,Jbr,Ybr,Kbr,XF,J1e,Zbr,e3r,XX,o3r,r3r,t3r,VF,Y1e,a3r,n3r,VX,s3r,l3r,i3r,zF,K1e,d3r,c3r,zX,f3r,m3r,g3r,WF,Z1e,h3r,p3r,WX,_3r,u3r,b3r,QF,e9e,v3r,T3r,QX,F3r,C3r,M3r,HF,o9e,E3r,y3r,HX,w3r,A3r,L3r,UF,r9e,B3r,x3r,UX,k3r,R3r,S3r,JF,t9e,P3r,$3r,JX,I3r,N3r,D3r,a9e,j3r,q3r,d0,ARe,zc,YF,n9e,c0,G3r,s9e,O3r,LRe,xr,f0,X3r,Wc,V3r,l9e,z3r,W3r,i9e,Q3r,H3r,U3r,m0,J3r,d9e,Y3r,K3r,Z3r,Et,g0,e2r,c9e,o2r,r2r,Qc,t2r,f9e,a2r,n2r,m9e,s2r,l2r,i2r,g9e,d2r,c2r,h0,f2r,yo,p0,m2r,h9e,g2r,h2r,An,p2r,p9e,_2r,u2r,_9e,b2r,v2r,u9e,T2r,F2r,C2r,b9e,KF,v9e,M2r,E2r,YX,y2r,w2r,A2r,T9e,L2r,B2r,_0,BRe,Hc,ZF,F9e,u0,x2r,C9e,k2r,xRe,kr,b0,R2r,Uc,S2r,M9e,P2r,$2r,E9e,I2r,N2r,D2r,v0,j2r,y9e,q2r,G2r,O2r,yt,T0,X2r,w9e,V2r,z2r,Jc,W2r,A9e,Q2r,H2r,L9e,U2r,J2r,Y2r,B9e,K2r,Z2r,F0,evr,wo,C0,ovr,x9e,rvr,tvr,Ln,avr,k9e,nvr,svr,R9e,lvr,ivr,S9e,dvr,cvr,fvr,P9e,eC,$9e,mvr,gvr,KX,hvr,pvr,_vr,I9e,uvr,bvr,M0,kRe,Yc,oC,N9e,E0,vvr,D9e,Tvr,RRe,Rr,y0,Fvr,Kc,Cvr,j9e,Mvr,Evr,q9e,yvr,wvr,Avr,w0,Lvr,G9e,Bvr,xvr,kvr,wt,A0,Rvr,O9e,Svr,Pvr,Zc,$vr,X9e,Ivr,Nvr,V9e,Dvr,jvr,qvr,z9e,Gvr,Ovr,L0,Xvr,Ao,B0,Vvr,W9e,zvr,Wvr,Bn,Qvr,Q9e,Hvr,Uvr,H9e,Jvr,Yvr,U9e,Kvr,Zvr,e6r,z,rC,J9e,o6r,r6r,ZX,t6r,a6r,n6r,tC,Y9e,s6r,l6r,eV,i6r,d6r,c6r,aC,K9e,f6r,m6r,oV,g6r,h6r,p6r,nC,Z9e,_6r,u6r,rV,b6r,v6r,T6r,sC,ebe,F6r,C6r,tV,M6r,E6r,y6r,lC,obe,w6r,A6r,aV,L6r,B6r,x6r,iC,rbe,k6r,R6r,nV,S6r,P6r,$6r,dC,tbe,I6r,N6r,sV,D6r,j6r,q6r,cC,abe,G6r,O6r,lV,X6r,V6r,z6r,fC,nbe,W6r,Q6r,iV,H6r,U6r,J6r,mC,sbe,Y6r,K6r,dV,Z6r,eTr,oTr,gC,lbe,rTr,tTr,cV,aTr,nTr,sTr,hC,ibe,lTr,iTr,fV,dTr,cTr,fTr,pC,dbe,mTr,gTr,mV,hTr,pTr,_Tr,_C,cbe,uTr,bTr,gV,vTr,TTr,FTr,uC,fbe,CTr,MTr,hV,ETr,yTr,wTr,bC,mbe,ATr,LTr,pV,BTr,xTr,kTr,vC,gbe,RTr,STr,_V,PTr,$Tr,ITr,TC,hbe,NTr,DTr,uV,jTr,qTr,GTr,FC,pbe,OTr,XTr,bV,VTr,zTr,WTr,CC,_be,QTr,HTr,vV,UTr,JTr,YTr,MC,ube,KTr,ZTr,TV,eFr,oFr,rFr,EC,bbe,tFr,aFr,FV,nFr,sFr,lFr,yC,vbe,iFr,dFr,CV,cFr,fFr,mFr,wC,Tbe,gFr,hFr,MV,pFr,_Fr,uFr,Fbe,bFr,vFr,x0,SRe,ef,AC,Cbe,k0,TFr,Mbe,FFr,PRe,Sr,R0,CFr,of,MFr,Ebe,EFr,yFr,ybe,wFr,AFr,LFr,S0,BFr,wbe,xFr,kFr,RFr,At,P0,SFr,Abe,PFr,$Fr,rf,IFr,Lbe,NFr,DFr,Bbe,jFr,qFr,GFr,xbe,OFr,XFr,$0,VFr,Lo,I0,zFr,kbe,WFr,QFr,xn,HFr,Rbe,UFr,JFr,Sbe,YFr,KFr,Pbe,ZFr,eCr,oCr,ca,LC,$be,rCr,tCr,EV,aCr,nCr,sCr,BC,Ibe,lCr,iCr,yV,dCr,cCr,fCr,xC,Nbe,mCr,gCr,wV,hCr,pCr,_Cr,kC,Dbe,uCr,bCr,AV,vCr,TCr,FCr,RC,jbe,CCr,MCr,LV,ECr,yCr,wCr,qbe,ACr,LCr,N0,$Re,tf,SC,Gbe,D0,BCr,Obe,xCr,IRe,Pr,j0,kCr,af,RCr,Xbe,SCr,PCr,Vbe,$Cr,ICr,NCr,q0,DCr,zbe,jCr,qCr,GCr,Lt,G0,OCr,Wbe,XCr,VCr,nf,zCr,Qbe,WCr,QCr,Hbe,HCr,UCr,JCr,Ube,YCr,KCr,O0,ZCr,Bo,X0,eMr,Jbe,oMr,rMr,kn,tMr,Ybe,aMr,nMr,Kbe,sMr,lMr,Zbe,iMr,dMr,cMr,ce,PC,e3e,fMr,mMr,BV,gMr,hMr,pMr,$C,o3e,_Mr,uMr,xV,bMr,vMr,TMr,IC,r3e,FMr,CMr,kV,MMr,EMr,yMr,NC,t3e,wMr,AMr,RV,LMr,BMr,xMr,DC,a3e,kMr,RMr,SV,SMr,PMr,$Mr,jC,n3e,IMr,NMr,PV,DMr,jMr,qMr,qC,s3e,GMr,OMr,$V,XMr,VMr,zMr,GC,l3e,WMr,QMr,IV,HMr,UMr,JMr,OC,i3e,YMr,KMr,NV,ZMr,e4r,o4r,XC,d3e,r4r,t4r,DV,a4r,n4r,s4r,VC,c3e,l4r,i4r,jV,d4r,c4r,f4r,zC,f3e,m4r,g4r,qV,h4r,p4r,_4r,m3e,u4r,b4r,V0,NRe,sf,WC,g3e,z0,v4r,h3e,T4r,DRe,$r,W0,F4r,lf,C4r,p3e,M4r,E4r,_3e,y4r,w4r,A4r,Q0,L4r,u3e,B4r,x4r,k4r,Bt,H0,R4r,b3e,S4r,P4r,df,$4r,v3e,I4r,N4r,T3e,D4r,j4r,q4r,F3e,G4r,O4r,U0,X4r,xo,J0,V4r,C3e,z4r,W4r,Rn,Q4r,M3e,H4r,U4r,E3e,J4r,Y4r,y3e,K4r,Z4r,eEr,ue,QC,w3e,oEr,rEr,GV,tEr,aEr,nEr,HC,A3e,sEr,lEr,OV,iEr,dEr,cEr,UC,L3e,fEr,mEr,XV,gEr,hEr,pEr,JC,B3e,_Er,uEr,VV,bEr,vEr,TEr,YC,x3e,FEr,CEr,zV,MEr,EEr,yEr,KC,k3e,wEr,AEr,WV,LEr,BEr,xEr,ZC,R3e,kEr,REr,QV,SEr,PEr,$Er,eM,S3e,IEr,NEr,HV,DEr,jEr,qEr,oM,P3e,GEr,OEr,UV,XEr,VEr,zEr,rM,$3e,WEr,QEr,JV,HEr,UEr,JEr,I3e,YEr,KEr,Y0,jRe,cf,tM,N3e,K0,ZEr,D3e,e5r,qRe,Ir,Z0,o5r,ff,r5r,j3e,t5r,a5r,q3e,n5r,s5r,l5r,eL,i5r,G3e,d5r,c5r,f5r,xt,oL,m5r,O3e,g5r,h5r,mf,p5r,X3e,_5r,u5r,V3e,b5r,v5r,T5r,z3e,F5r,C5r,rL,M5r,ko,tL,E5r,W3e,y5r,w5r,Sn,A5r,Q3e,L5r,B5r,H3e,x5r,k5r,U3e,R5r,S5r,P5r,Me,aM,J3e,$5r,I5r,YV,N5r,D5r,j5r,nM,Y3e,q5r,G5r,KV,O5r,X5r,V5r,sM,K3e,z5r,W5r,ZV,Q5r,H5r,U5r,lM,Z3e,J5r,Y5r,ez,K5r,Z5r,eyr,iM,e2e,oyr,ryr,oz,tyr,ayr,nyr,dM,o2e,syr,lyr,rz,iyr,dyr,cyr,cM,r2e,fyr,myr,tz,gyr,hyr,pyr,fM,t2e,_yr,uyr,az,byr,vyr,Tyr,mM,a2e,Fyr,Cyr,nz,Myr,Eyr,yyr,n2e,wyr,Ayr,aL,GRe,gf,gM,s2e,nL,Lyr,l2e,Byr,ORe,Nr,sL,xyr,hf,kyr,i2e,Ryr,Syr,d2e,Pyr,$yr,Iyr,lL,Nyr,c2e,Dyr,jyr,qyr,kt,iL,Gyr,f2e,Oyr,Xyr,pf,Vyr,m2e,zyr,Wyr,g2e,Qyr,Hyr,Uyr,h2e,Jyr,Yyr,dL,Kyr,Ro,cL,Zyr,p2e,ewr,owr,Pn,rwr,_2e,twr,awr,u2e,nwr,swr,b2e,lwr,iwr,dwr,be,hM,v2e,cwr,fwr,sz,mwr,gwr,hwr,pM,T2e,pwr,_wr,lz,uwr,bwr,vwr,_M,F2e,Twr,Fwr,iz,Cwr,Mwr,Ewr,uM,C2e,ywr,wwr,dz,Awr,Lwr,Bwr,bM,M2e,xwr,kwr,cz,Rwr,Swr,Pwr,vM,E2e,$wr,Iwr,fz,Nwr,Dwr,jwr,TM,y2e,qwr,Gwr,mz,Owr,Xwr,Vwr,FM,w2e,zwr,Wwr,gz,Qwr,Hwr,Uwr,CM,A2e,Jwr,Ywr,hz,Kwr,Zwr,eAr,MM,L2e,oAr,rAr,pz,tAr,aAr,nAr,B2e,sAr,lAr,fL,XRe,_f,EM,x2e,mL,iAr,k2e,dAr,VRe,Dr,gL,cAr,uf,fAr,R2e,mAr,gAr,S2e,hAr,pAr,_Ar,hL,uAr,P2e,bAr,vAr,TAr,Rt,pL,FAr,$2e,CAr,MAr,bf,EAr,I2e,yAr,wAr,N2e,AAr,LAr,BAr,D2e,xAr,kAr,_L,RAr,So,uL,SAr,j2e,PAr,$Ar,$n,IAr,q2e,NAr,DAr,G2e,jAr,qAr,O2e,GAr,OAr,XAr,ve,yM,X2e,VAr,zAr,_z,WAr,QAr,HAr,wM,V2e,UAr,JAr,uz,YAr,KAr,ZAr,AM,z2e,e0r,o0r,bz,r0r,t0r,a0r,LM,W2e,n0r,s0r,vz,l0r,i0r,d0r,BM,Q2e,c0r,f0r,Tz,m0r,g0r,h0r,xM,H2e,p0r,_0r,Fz,u0r,b0r,v0r,kM,U2e,T0r,F0r,Cz,C0r,M0r,E0r,RM,J2e,y0r,w0r,Mz,A0r,L0r,B0r,SM,Y2e,x0r,k0r,Ez,R0r,S0r,P0r,PM,K2e,$0r,I0r,yz,N0r,D0r,j0r,Z2e,q0r,G0r,bL,zRe,vf,$M,eve,vL,O0r,ove,X0r,WRe,jr,TL,V0r,Tf,z0r,rve,W0r,Q0r,tve,H0r,U0r,J0r,FL,Y0r,ave,K0r,Z0r,eLr,St,CL,oLr,nve,rLr,tLr,Ff,aLr,sve,nLr,sLr,lve,lLr,iLr,dLr,ive,cLr,fLr,ML,mLr,Po,EL,gLr,dve,hLr,pLr,In,_Lr,cve,uLr,bLr,fve,vLr,TLr,mve,FLr,CLr,MLr,Se,IM,gve,ELr,yLr,wz,wLr,ALr,LLr,NM,hve,BLr,xLr,Az,kLr,RLr,SLr,DM,pve,PLr,$Lr,Lz,ILr,NLr,DLr,jM,_ve,jLr,qLr,Bz,GLr,OLr,XLr,qM,uve,VLr,zLr,xz,WLr,QLr,HLr,GM,bve,ULr,JLr,kz,YLr,KLr,ZLr,OM,vve,e7r,o7r,Rz,r7r,t7r,a7r,XM,Tve,n7r,s7r,Sz,l7r,i7r,d7r,Fve,c7r,f7r,yL,QRe,Cf,VM,Cve,wL,m7r,Mve,g7r,HRe,qr,AL,h7r,Mf,p7r,Eve,_7r,u7r,yve,b7r,v7r,T7r,LL,F7r,wve,C7r,M7r,E7r,Pt,BL,y7r,Ave,w7r,A7r,Ef,L7r,Lve,B7r,x7r,Bve,k7r,R7r,S7r,xve,P7r,$7r,xL,I7r,$o,kL,N7r,kve,D7r,j7r,Nn,q7r,Rve,G7r,O7r,Sve,X7r,V7r,Pve,z7r,W7r,Q7r,Pe,zM,$ve,H7r,U7r,Pz,J7r,Y7r,K7r,WM,Ive,Z7r,e8r,$z,o8r,r8r,t8r,QM,Nve,a8r,n8r,Iz,s8r,l8r,i8r,HM,Dve,d8r,c8r,Nz,f8r,m8r,g8r,UM,jve,h8r,p8r,Dz,_8r,u8r,b8r,JM,qve,v8r,T8r,jz,F8r,C8r,M8r,YM,Gve,E8r,y8r,qz,w8r,A8r,L8r,KM,Ove,B8r,x8r,Gz,k8r,R8r,S8r,Xve,P8r,$8r,RL,URe,yf,ZM,Vve,SL,I8r,zve,N8r,JRe,Gr,PL,D8r,wf,j8r,Wve,q8r,G8r,Qve,O8r,X8r,V8r,$L,z8r,Hve,W8r,Q8r,H8r,$t,IL,U8r,Uve,J8r,Y8r,Af,K8r,Jve,Z8r,eBr,Yve,oBr,rBr,tBr,Kve,aBr,nBr,NL,sBr,Io,DL,lBr,Zve,iBr,dBr,Dn,cBr,e6e,fBr,mBr,o6e,gBr,hBr,r6e,pBr,_Br,uBr,t6e,e4,a6e,bBr,vBr,Oz,TBr,FBr,CBr,n6e,MBr,EBr,jL,YRe,Lf,o4,s6e,qL,yBr,l6e,wBr,KRe,Or,GL,ABr,Bf,LBr,i6e,BBr,xBr,d6e,kBr,RBr,SBr,OL,PBr,c6e,$Br,IBr,NBr,It,XL,DBr,f6e,jBr,qBr,xf,GBr,m6e,OBr,XBr,g6e,VBr,zBr,WBr,h6e,QBr,HBr,VL,UBr,No,zL,JBr,p6e,YBr,KBr,jn,ZBr,_6e,exr,oxr,u6e,rxr,txr,b6e,axr,nxr,sxr,WL,r4,v6e,lxr,ixr,Xz,dxr,cxr,fxr,t4,T6e,mxr,gxr,Vz,hxr,pxr,_xr,F6e,uxr,bxr,QL,ZRe,kf,a4,C6e,HL,vxr,M6e,Txr,eSe,Xr,UL,Fxr,Rf,Cxr,E6e,Mxr,Exr,y6e,yxr,wxr,Axr,JL,Lxr,w6e,Bxr,xxr,kxr,Nt,YL,Rxr,A6e,Sxr,Pxr,Sf,$xr,L6e,Ixr,Nxr,B6e,Dxr,jxr,qxr,x6e,Gxr,Oxr,KL,Xxr,Do,ZL,Vxr,k6e,zxr,Wxr,qn,Qxr,R6e,Hxr,Uxr,S6e,Jxr,Yxr,P6e,Kxr,Zxr,ekr,$6e,n4,I6e,okr,rkr,zz,tkr,akr,nkr,N6e,skr,lkr,e7,oSe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),dE=new X({}),cE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new ikr({props:{warning:!0,$$slots:{default:[cCt]},$$scope:{ctx:$f}}}),fE=new X({}),mE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/configuration_auto.py#L538"}}),pE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),_E=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),uE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),bE=new X({}),vE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/tokenization_auto.py#L351"}}),CE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16399/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),ME=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),EE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),yE=new X({}),wE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),BE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16399/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),xh=new ikr({props:{$$slots:{default:[fCt]},$$scope:{ctx:$f}}}),xE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),kE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),RE=new X({}),SE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/processing_auto.py#L70"}}),IE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Gh=new ikr({props:{$$slots:{default:[mCt]},$$scope:{ctx:$f}}}),NE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),DE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),jE=new X({}),qE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L705"}}),OE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),VE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WE=new X({}),QE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L712"}}),UE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),YE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZE=new X({}),e5=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L727"}}),r5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),t5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),a5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n5=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s5=new X({}),l5=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L734"}}),d5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),c5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),f5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g5=new X({}),h5=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L741"}}),_5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),u5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),b5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T5=new X({}),F5=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L750"}}),M5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),E5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),y5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w5=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A5=new X({}),L5=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L784"}}),x5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),k5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),R5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S5=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P5=new X({}),$5=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L791"}}),N5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),D5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),j5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G5=new X({}),O5=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L777"}}),V5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),z5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),W5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q5=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H5=new X({}),U5=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L759"}}),Y5=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),K5=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Z5=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L766"}}),ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),sy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L800"}}),fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),gy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L839"}}),by=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Ty=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),My=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L846"}}),yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new X({}),xy=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L869"}}),Ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),Ny=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L853"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Gy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),Vy=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L860"}}),Wy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Hy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L878"}}),ew=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L885"}}),lw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),mw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L832"}}),hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),_w=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),vw=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L807"}}),Fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),ww=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L814"}}),Lw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),xw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Pw=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_auto.py#L823"}}),Iw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),Dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Gw=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),Xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Hw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Kw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),tA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),nA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),cA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),mA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),MA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),NA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),jA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),GA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),VA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),o0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),g0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),p0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),T0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),C0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),y0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),A0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),B0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),R0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),P0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),I0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),j0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),G0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),X0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),W0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),H0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),J0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),PL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),IL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),DL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),GL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),XL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),zL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),YL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),KL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),ZL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16399/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16399/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16399/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(fe.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),If=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),nE=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),sE=o("AutoConfig"),On=o(", "),Xn=a("a"),lE=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),iE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),pe=a("p"),K7=o("will create a model that is an instance of "),Oi=a("a"),Z7=o("BertModel"),e8=o("."),zo=l(),Ga=a("p"),o8=o("There is one class of "),jf=a("code"),r8=o("AutoModel"),h$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eke=l(),Xi=a("h2"),qf=a("a"),DQ=a("span"),f(dE.$$.fragment),p$e=l(),jQ=a("span"),_$e=o("Extending the Auto Classes"),oke=l(),zn=a("p"),u$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qQ=a("code"),b$e=o("NewModel"),v$e=o(", make sure you have a "),GQ=a("code"),T$e=o("NewModelConfig"),F$e=o(` then you can add those to the auto
classes like this:`),rke=l(),f(cE.$$.fragment),tke=l(),t8=a("p"),C$e=o("You will then be able to use the auto classes like you would usually do!"),ake=l(),f(Gf.$$.fragment),nke=l(),Vi=a("h2"),Of=a("a"),OQ=a("span"),f(fE.$$.fragment),M$e=l(),XQ=a("span"),E$e=o("AutoConfig"),ske=l(),Wo=a("div"),f(mE.$$.fragment),y$e=l(),gE=a("p"),w$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),a8=a("a"),A$e=o("from_pretrained()"),L$e=o(" class method."),B$e=l(),hE=a("p"),x$e=o("This class cannot be instantiated directly using "),VQ=a("code"),k$e=o("__init__()"),R$e=o(" (throws an error)."),S$e=l(),mo=a("div"),f(pE.$$.fragment),P$e=l(),zQ=a("p"),$$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),I$e=l(),zi=a("p"),N$e=o("The configuration class to instantiate is selected based on the "),WQ=a("code"),D$e=o("model_type"),j$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QQ=a("code"),q$e=o("pretrained_model_name_or_path"),G$e=o(":"),O$e=l(),v=a("ul"),Xf=a("li"),HQ=a("strong"),X$e=o("albert"),V$e=o(" \u2014 "),n8=a("a"),z$e=o("AlbertConfig"),W$e=o(" (ALBERT model)"),Q$e=l(),Vf=a("li"),UQ=a("strong"),H$e=o("bart"),U$e=o(" \u2014 "),s8=a("a"),J$e=o("BartConfig"),Y$e=o(" (BART model)"),K$e=l(),zf=a("li"),JQ=a("strong"),Z$e=o("beit"),eIe=o(" \u2014 "),l8=a("a"),oIe=o("BeitConfig"),rIe=o(" (BEiT model)"),tIe=l(),Wf=a("li"),YQ=a("strong"),aIe=o("bert"),nIe=o(" \u2014 "),i8=a("a"),sIe=o("BertConfig"),lIe=o(" (BERT model)"),iIe=l(),Qf=a("li"),KQ=a("strong"),dIe=o("bert-generation"),cIe=o(" \u2014 "),d8=a("a"),fIe=o("BertGenerationConfig"),mIe=o(" (Bert Generation model)"),gIe=l(),Hf=a("li"),ZQ=a("strong"),hIe=o("big_bird"),pIe=o(" \u2014 "),c8=a("a"),_Ie=o("BigBirdConfig"),uIe=o(" (BigBird model)"),bIe=l(),Uf=a("li"),eH=a("strong"),vIe=o("bigbird_pegasus"),TIe=o(" \u2014 "),f8=a("a"),FIe=o("BigBirdPegasusConfig"),CIe=o(" (BigBirdPegasus model)"),MIe=l(),Jf=a("li"),oH=a("strong"),EIe=o("blenderbot"),yIe=o(" \u2014 "),m8=a("a"),wIe=o("BlenderbotConfig"),AIe=o(" (Blenderbot model)"),LIe=l(),Yf=a("li"),rH=a("strong"),BIe=o("blenderbot-small"),xIe=o(" \u2014 "),g8=a("a"),kIe=o("BlenderbotSmallConfig"),RIe=o(" (BlenderbotSmall model)"),SIe=l(),Kf=a("li"),tH=a("strong"),PIe=o("camembert"),$Ie=o(" \u2014 "),h8=a("a"),IIe=o("CamembertConfig"),NIe=o(" (CamemBERT model)"),DIe=l(),Zf=a("li"),aH=a("strong"),jIe=o("canine"),qIe=o(" \u2014 "),p8=a("a"),GIe=o("CanineConfig"),OIe=o(" (Canine model)"),XIe=l(),em=a("li"),nH=a("strong"),VIe=o("clip"),zIe=o(" \u2014 "),_8=a("a"),WIe=o("CLIPConfig"),QIe=o(" (CLIP model)"),HIe=l(),om=a("li"),sH=a("strong"),UIe=o("convbert"),JIe=o(" \u2014 "),u8=a("a"),YIe=o("ConvBertConfig"),KIe=o(" (ConvBERT model)"),ZIe=l(),rm=a("li"),lH=a("strong"),eNe=o("convnext"),oNe=o(" \u2014 "),b8=a("a"),rNe=o("ConvNextConfig"),tNe=o(" (ConvNext model)"),aNe=l(),tm=a("li"),iH=a("strong"),nNe=o("ctrl"),sNe=o(" \u2014 "),v8=a("a"),lNe=o("CTRLConfig"),iNe=o(" (CTRL model)"),dNe=l(),am=a("li"),dH=a("strong"),cNe=o("data2vec-audio"),fNe=o(" \u2014 "),T8=a("a"),mNe=o("Data2VecAudioConfig"),gNe=o(" (Data2VecAudio model)"),hNe=l(),nm=a("li"),cH=a("strong"),pNe=o("data2vec-text"),_Ne=o(" \u2014 "),F8=a("a"),uNe=o("Data2VecTextConfig"),bNe=o(" (Data2VecText model)"),vNe=l(),sm=a("li"),fH=a("strong"),TNe=o("deberta"),FNe=o(" \u2014 "),C8=a("a"),CNe=o("DebertaConfig"),MNe=o(" (DeBERTa model)"),ENe=l(),lm=a("li"),mH=a("strong"),yNe=o("deberta-v2"),wNe=o(" \u2014 "),M8=a("a"),ANe=o("DebertaV2Config"),LNe=o(" (DeBERTa-v2 model)"),BNe=l(),im=a("li"),gH=a("strong"),xNe=o("decision_transformer"),kNe=o(" \u2014 "),E8=a("a"),RNe=o("DecisionTransformerConfig"),SNe=o(" (Decision Transformer model)"),PNe=l(),dm=a("li"),hH=a("strong"),$Ne=o("deit"),INe=o(" \u2014 "),y8=a("a"),NNe=o("DeiTConfig"),DNe=o(" (DeiT model)"),jNe=l(),cm=a("li"),pH=a("strong"),qNe=o("detr"),GNe=o(" \u2014 "),w8=a("a"),ONe=o("DetrConfig"),XNe=o(" (DETR model)"),VNe=l(),fm=a("li"),_H=a("strong"),zNe=o("distilbert"),WNe=o(" \u2014 "),A8=a("a"),QNe=o("DistilBertConfig"),HNe=o(" (DistilBERT model)"),UNe=l(),mm=a("li"),uH=a("strong"),JNe=o("dpr"),YNe=o(" \u2014 "),L8=a("a"),KNe=o("DPRConfig"),ZNe=o(" (DPR model)"),eDe=l(),gm=a("li"),bH=a("strong"),oDe=o("electra"),rDe=o(" \u2014 "),B8=a("a"),tDe=o("ElectraConfig"),aDe=o(" (ELECTRA model)"),nDe=l(),hm=a("li"),vH=a("strong"),sDe=o("encoder-decoder"),lDe=o(" \u2014 "),x8=a("a"),iDe=o("EncoderDecoderConfig"),dDe=o(" (Encoder decoder model)"),cDe=l(),pm=a("li"),TH=a("strong"),fDe=o("flaubert"),mDe=o(" \u2014 "),k8=a("a"),gDe=o("FlaubertConfig"),hDe=o(" (FlauBERT model)"),pDe=l(),_m=a("li"),FH=a("strong"),_De=o("fnet"),uDe=o(" \u2014 "),R8=a("a"),bDe=o("FNetConfig"),vDe=o(" (FNet model)"),TDe=l(),um=a("li"),CH=a("strong"),FDe=o("fsmt"),CDe=o(" \u2014 "),S8=a("a"),MDe=o("FSMTConfig"),EDe=o(" (FairSeq Machine-Translation model)"),yDe=l(),bm=a("li"),MH=a("strong"),wDe=o("funnel"),ADe=o(" \u2014 "),P8=a("a"),LDe=o("FunnelConfig"),BDe=o(" (Funnel Transformer model)"),xDe=l(),vm=a("li"),EH=a("strong"),kDe=o("glpn"),RDe=o(" \u2014 "),$8=a("a"),SDe=o("GLPNConfig"),PDe=o(" (GLPN model)"),$De=l(),Tm=a("li"),yH=a("strong"),IDe=o("gpt2"),NDe=o(" \u2014 "),I8=a("a"),DDe=o("GPT2Config"),jDe=o(" (OpenAI GPT-2 model)"),qDe=l(),Fm=a("li"),wH=a("strong"),GDe=o("gpt_neo"),ODe=o(" \u2014 "),N8=a("a"),XDe=o("GPTNeoConfig"),VDe=o(" (GPT Neo model)"),zDe=l(),Cm=a("li"),AH=a("strong"),WDe=o("gptj"),QDe=o(" \u2014 "),D8=a("a"),HDe=o("GPTJConfig"),UDe=o(" (GPT-J model)"),JDe=l(),Mm=a("li"),LH=a("strong"),YDe=o("hubert"),KDe=o(" \u2014 "),j8=a("a"),ZDe=o("HubertConfig"),eje=o(" (Hubert model)"),oje=l(),Em=a("li"),BH=a("strong"),rje=o("ibert"),tje=o(" \u2014 "),q8=a("a"),aje=o("IBertConfig"),nje=o(" (I-BERT model)"),sje=l(),ym=a("li"),xH=a("strong"),lje=o("imagegpt"),ije=o(" \u2014 "),G8=a("a"),dje=o("ImageGPTConfig"),cje=o(" (ImageGPT model)"),fje=l(),wm=a("li"),kH=a("strong"),mje=o("layoutlm"),gje=o(" \u2014 "),O8=a("a"),hje=o("LayoutLMConfig"),pje=o(" (LayoutLM model)"),_je=l(),Am=a("li"),RH=a("strong"),uje=o("layoutlmv2"),bje=o(" \u2014 "),X8=a("a"),vje=o("LayoutLMv2Config"),Tje=o(" (LayoutLMv2 model)"),Fje=l(),Lm=a("li"),SH=a("strong"),Cje=o("led"),Mje=o(" \u2014 "),V8=a("a"),Eje=o("LEDConfig"),yje=o(" (LED model)"),wje=l(),Bm=a("li"),PH=a("strong"),Aje=o("longformer"),Lje=o(" \u2014 "),z8=a("a"),Bje=o("LongformerConfig"),xje=o(" (Longformer model)"),kje=l(),xm=a("li"),$H=a("strong"),Rje=o("luke"),Sje=o(" \u2014 "),W8=a("a"),Pje=o("LukeConfig"),$je=o(" (LUKE model)"),Ije=l(),km=a("li"),IH=a("strong"),Nje=o("lxmert"),Dje=o(" \u2014 "),Q8=a("a"),jje=o("LxmertConfig"),qje=o(" (LXMERT model)"),Gje=l(),Rm=a("li"),NH=a("strong"),Oje=o("m2m_100"),Xje=o(" \u2014 "),H8=a("a"),Vje=o("M2M100Config"),zje=o(" (M2M100 model)"),Wje=l(),Sm=a("li"),DH=a("strong"),Qje=o("marian"),Hje=o(" \u2014 "),U8=a("a"),Uje=o("MarianConfig"),Jje=o(" (Marian model)"),Yje=l(),Pm=a("li"),jH=a("strong"),Kje=o("maskformer"),Zje=o(" \u2014 "),J8=a("a"),eqe=o("MaskFormerConfig"),oqe=o(" (MaskFormer model)"),rqe=l(),$m=a("li"),qH=a("strong"),tqe=o("mbart"),aqe=o(" \u2014 "),Y8=a("a"),nqe=o("MBartConfig"),sqe=o(" (mBART model)"),lqe=l(),Im=a("li"),GH=a("strong"),iqe=o("megatron-bert"),dqe=o(" \u2014 "),K8=a("a"),cqe=o("MegatronBertConfig"),fqe=o(" (MegatronBert model)"),mqe=l(),Nm=a("li"),OH=a("strong"),gqe=o("mobilebert"),hqe=o(" \u2014 "),Z8=a("a"),pqe=o("MobileBertConfig"),_qe=o(" (MobileBERT model)"),uqe=l(),Dm=a("li"),XH=a("strong"),bqe=o("mpnet"),vqe=o(" \u2014 "),eB=a("a"),Tqe=o("MPNetConfig"),Fqe=o(" (MPNet model)"),Cqe=l(),jm=a("li"),VH=a("strong"),Mqe=o("mt5"),Eqe=o(" \u2014 "),oB=a("a"),yqe=o("MT5Config"),wqe=o(" (mT5 model)"),Aqe=l(),qm=a("li"),zH=a("strong"),Lqe=o("nystromformer"),Bqe=o(" \u2014 "),rB=a("a"),xqe=o("NystromformerConfig"),kqe=o(" (Nystromformer model)"),Rqe=l(),Gm=a("li"),WH=a("strong"),Sqe=o("openai-gpt"),Pqe=o(" \u2014 "),tB=a("a"),$qe=o("OpenAIGPTConfig"),Iqe=o(" (OpenAI GPT model)"),Nqe=l(),Om=a("li"),QH=a("strong"),Dqe=o("pegasus"),jqe=o(" \u2014 "),aB=a("a"),qqe=o("PegasusConfig"),Gqe=o(" (Pegasus model)"),Oqe=l(),Xm=a("li"),HH=a("strong"),Xqe=o("perceiver"),Vqe=o(" \u2014 "),nB=a("a"),zqe=o("PerceiverConfig"),Wqe=o(" (Perceiver model)"),Qqe=l(),Vm=a("li"),UH=a("strong"),Hqe=o("plbart"),Uqe=o(" \u2014 "),sB=a("a"),Jqe=o("PLBartConfig"),Yqe=o(" (PLBart model)"),Kqe=l(),zm=a("li"),JH=a("strong"),Zqe=o("poolformer"),eGe=o(" \u2014 "),lB=a("a"),oGe=o("PoolFormerConfig"),rGe=o(" (PoolFormer model)"),tGe=l(),Wm=a("li"),YH=a("strong"),aGe=o("prophetnet"),nGe=o(" \u2014 "),iB=a("a"),sGe=o("ProphetNetConfig"),lGe=o(" (ProphetNet model)"),iGe=l(),Qm=a("li"),KH=a("strong"),dGe=o("qdqbert"),cGe=o(" \u2014 "),dB=a("a"),fGe=o("QDQBertConfig"),mGe=o(" (QDQBert model)"),gGe=l(),Hm=a("li"),ZH=a("strong"),hGe=o("rag"),pGe=o(" \u2014 "),cB=a("a"),_Ge=o("RagConfig"),uGe=o(" (RAG model)"),bGe=l(),Um=a("li"),eU=a("strong"),vGe=o("realm"),TGe=o(" \u2014 "),fB=a("a"),FGe=o("RealmConfig"),CGe=o(" (Realm model)"),MGe=l(),Jm=a("li"),oU=a("strong"),EGe=o("reformer"),yGe=o(" \u2014 "),mB=a("a"),wGe=o("ReformerConfig"),AGe=o(" (Reformer model)"),LGe=l(),Ym=a("li"),rU=a("strong"),BGe=o("rembert"),xGe=o(" \u2014 "),gB=a("a"),kGe=o("RemBertConfig"),RGe=o(" (RemBERT model)"),SGe=l(),Km=a("li"),tU=a("strong"),PGe=o("resnet"),$Ge=o(" \u2014 "),hB=a("a"),IGe=o("ResNetConfig"),NGe=o(" (ResNet model)"),DGe=l(),Zm=a("li"),aU=a("strong"),jGe=o("retribert"),qGe=o(" \u2014 "),pB=a("a"),GGe=o("RetriBertConfig"),OGe=o(" (RetriBERT model)"),XGe=l(),eg=a("li"),nU=a("strong"),VGe=o("roberta"),zGe=o(" \u2014 "),_B=a("a"),WGe=o("RobertaConfig"),QGe=o(" (RoBERTa model)"),HGe=l(),og=a("li"),sU=a("strong"),UGe=o("roformer"),JGe=o(" \u2014 "),uB=a("a"),YGe=o("RoFormerConfig"),KGe=o(" (RoFormer model)"),ZGe=l(),rg=a("li"),lU=a("strong"),eOe=o("segformer"),oOe=o(" \u2014 "),bB=a("a"),rOe=o("SegformerConfig"),tOe=o(" (SegFormer model)"),aOe=l(),tg=a("li"),iU=a("strong"),nOe=o("sew"),sOe=o(" \u2014 "),vB=a("a"),lOe=o("SEWConfig"),iOe=o(" (SEW model)"),dOe=l(),ag=a("li"),dU=a("strong"),cOe=o("sew-d"),fOe=o(" \u2014 "),TB=a("a"),mOe=o("SEWDConfig"),gOe=o(" (SEW-D model)"),hOe=l(),ng=a("li"),cU=a("strong"),pOe=o("speech-encoder-decoder"),_Oe=o(" \u2014 "),FB=a("a"),uOe=o("SpeechEncoderDecoderConfig"),bOe=o(" (Speech Encoder decoder model)"),vOe=l(),sg=a("li"),fU=a("strong"),TOe=o("speech_to_text"),FOe=o(" \u2014 "),CB=a("a"),COe=o("Speech2TextConfig"),MOe=o(" (Speech2Text model)"),EOe=l(),lg=a("li"),mU=a("strong"),yOe=o("speech_to_text_2"),wOe=o(" \u2014 "),MB=a("a"),AOe=o("Speech2Text2Config"),LOe=o(" (Speech2Text2 model)"),BOe=l(),ig=a("li"),gU=a("strong"),xOe=o("splinter"),kOe=o(" \u2014 "),EB=a("a"),ROe=o("SplinterConfig"),SOe=o(" (Splinter model)"),POe=l(),dg=a("li"),hU=a("strong"),$Oe=o("squeezebert"),IOe=o(" \u2014 "),yB=a("a"),NOe=o("SqueezeBertConfig"),DOe=o(" (SqueezeBERT model)"),jOe=l(),cg=a("li"),pU=a("strong"),qOe=o("swin"),GOe=o(" \u2014 "),wB=a("a"),OOe=o("SwinConfig"),XOe=o(" (Swin model)"),VOe=l(),fg=a("li"),_U=a("strong"),zOe=o("t5"),WOe=o(" \u2014 "),AB=a("a"),QOe=o("T5Config"),HOe=o(" (T5 model)"),UOe=l(),mg=a("li"),uU=a("strong"),JOe=o("tapas"),YOe=o(" \u2014 "),LB=a("a"),KOe=o("TapasConfig"),ZOe=o(" (TAPAS model)"),eXe=l(),gg=a("li"),bU=a("strong"),oXe=o("transfo-xl"),rXe=o(" \u2014 "),BB=a("a"),tXe=o("TransfoXLConfig"),aXe=o(" (Transformer-XL model)"),nXe=l(),hg=a("li"),vU=a("strong"),sXe=o("trocr"),lXe=o(" \u2014 "),xB=a("a"),iXe=o("TrOCRConfig"),dXe=o(" (TrOCR model)"),cXe=l(),pg=a("li"),TU=a("strong"),fXe=o("unispeech"),mXe=o(" \u2014 "),kB=a("a"),gXe=o("UniSpeechConfig"),hXe=o(" (UniSpeech model)"),pXe=l(),_g=a("li"),FU=a("strong"),_Xe=o("unispeech-sat"),uXe=o(" \u2014 "),RB=a("a"),bXe=o("UniSpeechSatConfig"),vXe=o(" (UniSpeechSat model)"),TXe=l(),ug=a("li"),CU=a("strong"),FXe=o("van"),CXe=o(" \u2014 "),SB=a("a"),MXe=o("VanConfig"),EXe=o(" (VAN model)"),yXe=l(),bg=a("li"),MU=a("strong"),wXe=o("vilt"),AXe=o(" \u2014 "),PB=a("a"),LXe=o("ViltConfig"),BXe=o(" (ViLT model)"),xXe=l(),vg=a("li"),EU=a("strong"),kXe=o("vision-encoder-decoder"),RXe=o(" \u2014 "),$B=a("a"),SXe=o("VisionEncoderDecoderConfig"),PXe=o(" (Vision Encoder decoder model)"),$Xe=l(),Tg=a("li"),yU=a("strong"),IXe=o("vision-text-dual-encoder"),NXe=o(" \u2014 "),IB=a("a"),DXe=o("VisionTextDualEncoderConfig"),jXe=o(" (VisionTextDualEncoder model)"),qXe=l(),Fg=a("li"),wU=a("strong"),GXe=o("visual_bert"),OXe=o(" \u2014 "),NB=a("a"),XXe=o("VisualBertConfig"),VXe=o(" (VisualBert model)"),zXe=l(),Cg=a("li"),AU=a("strong"),WXe=o("vit"),QXe=o(" \u2014 "),DB=a("a"),HXe=o("ViTConfig"),UXe=o(" (ViT model)"),JXe=l(),Mg=a("li"),LU=a("strong"),YXe=o("vit_mae"),KXe=o(" \u2014 "),jB=a("a"),ZXe=o("ViTMAEConfig"),eVe=o(" (ViTMAE model)"),oVe=l(),Eg=a("li"),BU=a("strong"),rVe=o("wav2vec2"),tVe=o(" \u2014 "),qB=a("a"),aVe=o("Wav2Vec2Config"),nVe=o(" (Wav2Vec2 model)"),sVe=l(),yg=a("li"),xU=a("strong"),lVe=o("wavlm"),iVe=o(" \u2014 "),GB=a("a"),dVe=o("WavLMConfig"),cVe=o(" (WavLM model)"),fVe=l(),wg=a("li"),kU=a("strong"),mVe=o("xglm"),gVe=o(" \u2014 "),OB=a("a"),hVe=o("XGLMConfig"),pVe=o(" (XGLM model)"),_Ve=l(),Ag=a("li"),RU=a("strong"),uVe=o("xlm"),bVe=o(" \u2014 "),XB=a("a"),vVe=o("XLMConfig"),TVe=o(" (XLM model)"),FVe=l(),Lg=a("li"),SU=a("strong"),CVe=o("xlm-prophetnet"),MVe=o(" \u2014 "),VB=a("a"),EVe=o("XLMProphetNetConfig"),yVe=o(" (XLMProphetNet model)"),wVe=l(),Bg=a("li"),PU=a("strong"),AVe=o("xlm-roberta"),LVe=o(" \u2014 "),zB=a("a"),BVe=o("XLMRobertaConfig"),xVe=o(" (XLM-RoBERTa model)"),kVe=l(),xg=a("li"),$U=a("strong"),RVe=o("xlm-roberta-xl"),SVe=o(" \u2014 "),WB=a("a"),PVe=o("XLMRobertaXLConfig"),$Ve=o(" (XLM-RoBERTa-XL model)"),IVe=l(),kg=a("li"),IU=a("strong"),NVe=o("xlnet"),DVe=o(" \u2014 "),QB=a("a"),jVe=o("XLNetConfig"),qVe=o(" (XLNet model)"),GVe=l(),Rg=a("li"),NU=a("strong"),OVe=o("yoso"),XVe=o(" \u2014 "),HB=a("a"),VVe=o("YosoConfig"),zVe=o(" (YOSO model)"),WVe=l(),DU=a("p"),QVe=o("Examples:"),HVe=l(),f(_E.$$.fragment),UVe=l(),Sg=a("div"),f(uE.$$.fragment),JVe=l(),jU=a("p"),YVe=o("Register a new configuration for this class."),lke=l(),Wi=a("h2"),Pg=a("a"),qU=a("span"),f(bE.$$.fragment),KVe=l(),GU=a("span"),ZVe=o("AutoTokenizer"),ike=l(),Qo=a("div"),f(vE.$$.fragment),eze=l(),TE=a("p"),oze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UB=a("a"),rze=o("AutoTokenizer.from_pretrained()"),tze=o(" class method."),aze=l(),FE=a("p"),nze=o("This class cannot be instantiated directly using "),OU=a("code"),sze=o("__init__()"),lze=o(" (throws an error)."),ize=l(),go=a("div"),f(CE.$$.fragment),dze=l(),XU=a("p"),cze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fze=l(),Oa=a("p"),mze=o("The tokenizer class to instantiate is selected based on the "),VU=a("code"),gze=o("model_type"),hze=o(` property of the config object (either
passed as an argument or loaded from `),zU=a("code"),pze=o("pretrained_model_name_or_path"),_ze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WU=a("code"),uze=o("pretrained_model_name_or_path"),bze=o(":"),vze=l(),E=a("ul"),Wn=a("li"),QU=a("strong"),Tze=o("albert"),Fze=o(" \u2014 "),JB=a("a"),Cze=o("AlbertTokenizer"),Mze=o(" or "),YB=a("a"),Eze=o("AlbertTokenizerFast"),yze=o(" (ALBERT model)"),wze=l(),Qn=a("li"),HU=a("strong"),Aze=o("bart"),Lze=o(" \u2014 "),KB=a("a"),Bze=o("BartTokenizer"),xze=o(" or "),ZB=a("a"),kze=o("BartTokenizerFast"),Rze=o(" (BART model)"),Sze=l(),Hn=a("li"),UU=a("strong"),Pze=o("barthez"),$ze=o(" \u2014 "),ex=a("a"),Ize=o("BarthezTokenizer"),Nze=o(" or "),ox=a("a"),Dze=o("BarthezTokenizerFast"),jze=o(" (BARThez model)"),qze=l(),$g=a("li"),JU=a("strong"),Gze=o("bartpho"),Oze=o(" \u2014 "),rx=a("a"),Xze=o("BartphoTokenizer"),Vze=o(" (BARTpho model)"),zze=l(),Un=a("li"),YU=a("strong"),Wze=o("bert"),Qze=o(" \u2014 "),tx=a("a"),Hze=o("BertTokenizer"),Uze=o(" or "),ax=a("a"),Jze=o("BertTokenizerFast"),Yze=o(" (BERT model)"),Kze=l(),Ig=a("li"),KU=a("strong"),Zze=o("bert-generation"),eWe=o(" \u2014 "),nx=a("a"),oWe=o("BertGenerationTokenizer"),rWe=o(" (Bert Generation model)"),tWe=l(),Ng=a("li"),ZU=a("strong"),aWe=o("bert-japanese"),nWe=o(" \u2014 "),sx=a("a"),sWe=o("BertJapaneseTokenizer"),lWe=o(" (BertJapanese model)"),iWe=l(),Dg=a("li"),eJ=a("strong"),dWe=o("bertweet"),cWe=o(" \u2014 "),lx=a("a"),fWe=o("BertweetTokenizer"),mWe=o(" (Bertweet model)"),gWe=l(),Jn=a("li"),oJ=a("strong"),hWe=o("big_bird"),pWe=o(" \u2014 "),ix=a("a"),_We=o("BigBirdTokenizer"),uWe=o(" or "),dx=a("a"),bWe=o("BigBirdTokenizerFast"),vWe=o(" (BigBird model)"),TWe=l(),Yn=a("li"),rJ=a("strong"),FWe=o("bigbird_pegasus"),CWe=o(" \u2014 "),cx=a("a"),MWe=o("PegasusTokenizer"),EWe=o(" or "),fx=a("a"),yWe=o("PegasusTokenizerFast"),wWe=o(" (BigBirdPegasus model)"),AWe=l(),Kn=a("li"),tJ=a("strong"),LWe=o("blenderbot"),BWe=o(" \u2014 "),mx=a("a"),xWe=o("BlenderbotTokenizer"),kWe=o(" or "),gx=a("a"),RWe=o("BlenderbotTokenizerFast"),SWe=o(" (Blenderbot model)"),PWe=l(),jg=a("li"),aJ=a("strong"),$We=o("blenderbot-small"),IWe=o(" \u2014 "),hx=a("a"),NWe=o("BlenderbotSmallTokenizer"),DWe=o(" (BlenderbotSmall model)"),jWe=l(),qg=a("li"),nJ=a("strong"),qWe=o("byt5"),GWe=o(" \u2014 "),px=a("a"),OWe=o("ByT5Tokenizer"),XWe=o(" (ByT5 model)"),VWe=l(),Zn=a("li"),sJ=a("strong"),zWe=o("camembert"),WWe=o(" \u2014 "),_x=a("a"),QWe=o("CamembertTokenizer"),HWe=o(" or "),ux=a("a"),UWe=o("CamembertTokenizerFast"),JWe=o(" (CamemBERT model)"),YWe=l(),Gg=a("li"),lJ=a("strong"),KWe=o("canine"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("CanineTokenizer"),oQe=o(" (Canine model)"),rQe=l(),es=a("li"),iJ=a("strong"),tQe=o("clip"),aQe=o(" \u2014 "),vx=a("a"),nQe=o("CLIPTokenizer"),sQe=o(" or "),Tx=a("a"),lQe=o("CLIPTokenizerFast"),iQe=o(" (CLIP model)"),dQe=l(),os=a("li"),dJ=a("strong"),cQe=o("convbert"),fQe=o(" \u2014 "),Fx=a("a"),mQe=o("ConvBertTokenizer"),gQe=o(" or "),Cx=a("a"),hQe=o("ConvBertTokenizerFast"),pQe=o(" (ConvBERT model)"),_Qe=l(),rs=a("li"),cJ=a("strong"),uQe=o("cpm"),bQe=o(" \u2014 "),Mx=a("a"),vQe=o("CpmTokenizer"),TQe=o(" or "),fJ=a("code"),FQe=o("CpmTokenizerFast"),CQe=o(" (CPM model)"),MQe=l(),Og=a("li"),mJ=a("strong"),EQe=o("ctrl"),yQe=o(" \u2014 "),Ex=a("a"),wQe=o("CTRLTokenizer"),AQe=o(" (CTRL model)"),LQe=l(),ts=a("li"),gJ=a("strong"),BQe=o("deberta"),xQe=o(" \u2014 "),yx=a("a"),kQe=o("DebertaTokenizer"),RQe=o(" or "),wx=a("a"),SQe=o("DebertaTokenizerFast"),PQe=o(" (DeBERTa model)"),$Qe=l(),Xg=a("li"),hJ=a("strong"),IQe=o("deberta-v2"),NQe=o(" \u2014 "),Ax=a("a"),DQe=o("DebertaV2Tokenizer"),jQe=o(" (DeBERTa-v2 model)"),qQe=l(),as=a("li"),pJ=a("strong"),GQe=o("distilbert"),OQe=o(" \u2014 "),Lx=a("a"),XQe=o("DistilBertTokenizer"),VQe=o(" or "),Bx=a("a"),zQe=o("DistilBertTokenizerFast"),WQe=o(" (DistilBERT model)"),QQe=l(),ns=a("li"),_J=a("strong"),HQe=o("dpr"),UQe=o(" \u2014 "),xx=a("a"),JQe=o("DPRQuestionEncoderTokenizer"),YQe=o(" or "),kx=a("a"),KQe=o("DPRQuestionEncoderTokenizerFast"),ZQe=o(" (DPR model)"),eHe=l(),ss=a("li"),uJ=a("strong"),oHe=o("electra"),rHe=o(" \u2014 "),Rx=a("a"),tHe=o("ElectraTokenizer"),aHe=o(" or "),Sx=a("a"),nHe=o("ElectraTokenizerFast"),sHe=o(" (ELECTRA model)"),lHe=l(),Vg=a("li"),bJ=a("strong"),iHe=o("flaubert"),dHe=o(" \u2014 "),Px=a("a"),cHe=o("FlaubertTokenizer"),fHe=o(" (FlauBERT model)"),mHe=l(),ls=a("li"),vJ=a("strong"),gHe=o("fnet"),hHe=o(" \u2014 "),$x=a("a"),pHe=o("FNetTokenizer"),_He=o(" or "),Ix=a("a"),uHe=o("FNetTokenizerFast"),bHe=o(" (FNet model)"),vHe=l(),zg=a("li"),TJ=a("strong"),THe=o("fsmt"),FHe=o(" \u2014 "),Nx=a("a"),CHe=o("FSMTTokenizer"),MHe=o(" (FairSeq Machine-Translation model)"),EHe=l(),is=a("li"),FJ=a("strong"),yHe=o("funnel"),wHe=o(" \u2014 "),Dx=a("a"),AHe=o("FunnelTokenizer"),LHe=o(" or "),jx=a("a"),BHe=o("FunnelTokenizerFast"),xHe=o(" (Funnel Transformer model)"),kHe=l(),ds=a("li"),CJ=a("strong"),RHe=o("gpt2"),SHe=o(" \u2014 "),qx=a("a"),PHe=o("GPT2Tokenizer"),$He=o(" or "),Gx=a("a"),IHe=o("GPT2TokenizerFast"),NHe=o(" (OpenAI GPT-2 model)"),DHe=l(),cs=a("li"),MJ=a("strong"),jHe=o("gpt_neo"),qHe=o(" \u2014 "),Ox=a("a"),GHe=o("GPT2Tokenizer"),OHe=o(" or "),Xx=a("a"),XHe=o("GPT2TokenizerFast"),VHe=o(" (GPT Neo model)"),zHe=l(),fs=a("li"),EJ=a("strong"),WHe=o("herbert"),QHe=o(" \u2014 "),Vx=a("a"),HHe=o("HerbertTokenizer"),UHe=o(" or "),zx=a("a"),JHe=o("HerbertTokenizerFast"),YHe=o(" (HerBERT model)"),KHe=l(),Wg=a("li"),yJ=a("strong"),ZHe=o("hubert"),eUe=o(" \u2014 "),Wx=a("a"),oUe=o("Wav2Vec2CTCTokenizer"),rUe=o(" (Hubert model)"),tUe=l(),ms=a("li"),wJ=a("strong"),aUe=o("ibert"),nUe=o(" \u2014 "),Qx=a("a"),sUe=o("RobertaTokenizer"),lUe=o(" or "),Hx=a("a"),iUe=o("RobertaTokenizerFast"),dUe=o(" (I-BERT model)"),cUe=l(),gs=a("li"),AJ=a("strong"),fUe=o("layoutlm"),mUe=o(" \u2014 "),Ux=a("a"),gUe=o("LayoutLMTokenizer"),hUe=o(" or "),Jx=a("a"),pUe=o("LayoutLMTokenizerFast"),_Ue=o(" (LayoutLM model)"),uUe=l(),hs=a("li"),LJ=a("strong"),bUe=o("layoutlmv2"),vUe=o(" \u2014 "),Yx=a("a"),TUe=o("LayoutLMv2Tokenizer"),FUe=o(" or "),Kx=a("a"),CUe=o("LayoutLMv2TokenizerFast"),MUe=o(" (LayoutLMv2 model)"),EUe=l(),ps=a("li"),BJ=a("strong"),yUe=o("layoutxlm"),wUe=o(" \u2014 "),Zx=a("a"),AUe=o("LayoutXLMTokenizer"),LUe=o(" or "),ek=a("a"),BUe=o("LayoutXLMTokenizerFast"),xUe=o(" (LayoutXLM model)"),kUe=l(),_s=a("li"),xJ=a("strong"),RUe=o("led"),SUe=o(" \u2014 "),ok=a("a"),PUe=o("LEDTokenizer"),$Ue=o(" or "),rk=a("a"),IUe=o("LEDTokenizerFast"),NUe=o(" (LED model)"),DUe=l(),us=a("li"),kJ=a("strong"),jUe=o("longformer"),qUe=o(" \u2014 "),tk=a("a"),GUe=o("LongformerTokenizer"),OUe=o(" or "),ak=a("a"),XUe=o("LongformerTokenizerFast"),VUe=o(" (Longformer model)"),zUe=l(),Qg=a("li"),RJ=a("strong"),WUe=o("luke"),QUe=o(" \u2014 "),nk=a("a"),HUe=o("LukeTokenizer"),UUe=o(" (LUKE model)"),JUe=l(),bs=a("li"),SJ=a("strong"),YUe=o("lxmert"),KUe=o(" \u2014 "),sk=a("a"),ZUe=o("LxmertTokenizer"),eJe=o(" or "),lk=a("a"),oJe=o("LxmertTokenizerFast"),rJe=o(" (LXMERT model)"),tJe=l(),Hg=a("li"),PJ=a("strong"),aJe=o("m2m_100"),nJe=o(" \u2014 "),ik=a("a"),sJe=o("M2M100Tokenizer"),lJe=o(" (M2M100 model)"),iJe=l(),Ug=a("li"),$J=a("strong"),dJe=o("marian"),cJe=o(" \u2014 "),dk=a("a"),fJe=o("MarianTokenizer"),mJe=o(" (Marian model)"),gJe=l(),vs=a("li"),IJ=a("strong"),hJe=o("mbart"),pJe=o(" \u2014 "),ck=a("a"),_Je=o("MBartTokenizer"),uJe=o(" or "),fk=a("a"),bJe=o("MBartTokenizerFast"),vJe=o(" (mBART model)"),TJe=l(),Ts=a("li"),NJ=a("strong"),FJe=o("mbart50"),CJe=o(" \u2014 "),mk=a("a"),MJe=o("MBart50Tokenizer"),EJe=o(" or "),gk=a("a"),yJe=o("MBart50TokenizerFast"),wJe=o(" (mBART-50 model)"),AJe=l(),Jg=a("li"),DJ=a("strong"),LJe=o("mluke"),BJe=o(" \u2014 "),hk=a("a"),xJe=o("MLukeTokenizer"),kJe=o(" (mLUKE model)"),RJe=l(),Fs=a("li"),jJ=a("strong"),SJe=o("mobilebert"),PJe=o(" \u2014 "),pk=a("a"),$Je=o("MobileBertTokenizer"),IJe=o(" or "),_k=a("a"),NJe=o("MobileBertTokenizerFast"),DJe=o(" (MobileBERT model)"),jJe=l(),Cs=a("li"),qJ=a("strong"),qJe=o("mpnet"),GJe=o(" \u2014 "),uk=a("a"),OJe=o("MPNetTokenizer"),XJe=o(" or "),bk=a("a"),VJe=o("MPNetTokenizerFast"),zJe=o(" (MPNet model)"),WJe=l(),Ms=a("li"),GJ=a("strong"),QJe=o("mt5"),HJe=o(" \u2014 "),vk=a("a"),UJe=o("MT5Tokenizer"),JJe=o(" or "),Tk=a("a"),YJe=o("MT5TokenizerFast"),KJe=o(" (mT5 model)"),ZJe=l(),Es=a("li"),OJ=a("strong"),eYe=o("openai-gpt"),oYe=o(" \u2014 "),Fk=a("a"),rYe=o("OpenAIGPTTokenizer"),tYe=o(" or "),Ck=a("a"),aYe=o("OpenAIGPTTokenizerFast"),nYe=o(" (OpenAI GPT model)"),sYe=l(),ys=a("li"),XJ=a("strong"),lYe=o("pegasus"),iYe=o(" \u2014 "),Mk=a("a"),dYe=o("PegasusTokenizer"),cYe=o(" or "),Ek=a("a"),fYe=o("PegasusTokenizerFast"),mYe=o(" (Pegasus model)"),gYe=l(),Yg=a("li"),VJ=a("strong"),hYe=o("perceiver"),pYe=o(" \u2014 "),yk=a("a"),_Ye=o("PerceiverTokenizer"),uYe=o(" (Perceiver model)"),bYe=l(),Kg=a("li"),zJ=a("strong"),vYe=o("phobert"),TYe=o(" \u2014 "),wk=a("a"),FYe=o("PhobertTokenizer"),CYe=o(" (PhoBERT model)"),MYe=l(),Zg=a("li"),WJ=a("strong"),EYe=o("plbart"),yYe=o(" \u2014 "),Ak=a("a"),wYe=o("PLBartTokenizer"),AYe=o(" (PLBart model)"),LYe=l(),eh=a("li"),QJ=a("strong"),BYe=o("prophetnet"),xYe=o(" \u2014 "),Lk=a("a"),kYe=o("ProphetNetTokenizer"),RYe=o(" (ProphetNet model)"),SYe=l(),ws=a("li"),HJ=a("strong"),PYe=o("qdqbert"),$Ye=o(" \u2014 "),Bk=a("a"),IYe=o("BertTokenizer"),NYe=o(" or "),xk=a("a"),DYe=o("BertTokenizerFast"),jYe=o(" (QDQBert model)"),qYe=l(),oh=a("li"),UJ=a("strong"),GYe=o("rag"),OYe=o(" \u2014 "),kk=a("a"),XYe=o("RagTokenizer"),VYe=o(" (RAG model)"),zYe=l(),As=a("li"),JJ=a("strong"),WYe=o("realm"),QYe=o(" \u2014 "),Rk=a("a"),HYe=o("RealmTokenizer"),UYe=o(" or "),Sk=a("a"),JYe=o("RealmTokenizerFast"),YYe=o(" (Realm model)"),KYe=l(),Ls=a("li"),YJ=a("strong"),ZYe=o("reformer"),eKe=o(" \u2014 "),Pk=a("a"),oKe=o("ReformerTokenizer"),rKe=o(" or "),$k=a("a"),tKe=o("ReformerTokenizerFast"),aKe=o(" (Reformer model)"),nKe=l(),Bs=a("li"),KJ=a("strong"),sKe=o("rembert"),lKe=o(" \u2014 "),Ik=a("a"),iKe=o("RemBertTokenizer"),dKe=o(" or "),Nk=a("a"),cKe=o("RemBertTokenizerFast"),fKe=o(" (RemBERT model)"),mKe=l(),xs=a("li"),ZJ=a("strong"),gKe=o("retribert"),hKe=o(" \u2014 "),Dk=a("a"),pKe=o("RetriBertTokenizer"),_Ke=o(" or "),jk=a("a"),uKe=o("RetriBertTokenizerFast"),bKe=o(" (RetriBERT model)"),vKe=l(),ks=a("li"),eY=a("strong"),TKe=o("roberta"),FKe=o(" \u2014 "),qk=a("a"),CKe=o("RobertaTokenizer"),MKe=o(" or "),Gk=a("a"),EKe=o("RobertaTokenizerFast"),yKe=o(" (RoBERTa model)"),wKe=l(),Rs=a("li"),oY=a("strong"),AKe=o("roformer"),LKe=o(" \u2014 "),Ok=a("a"),BKe=o("RoFormerTokenizer"),xKe=o(" or "),Xk=a("a"),kKe=o("RoFormerTokenizerFast"),RKe=o(" (RoFormer model)"),SKe=l(),rh=a("li"),rY=a("strong"),PKe=o("speech_to_text"),$Ke=o(" \u2014 "),Vk=a("a"),IKe=o("Speech2TextTokenizer"),NKe=o(" (Speech2Text model)"),DKe=l(),th=a("li"),tY=a("strong"),jKe=o("speech_to_text_2"),qKe=o(" \u2014 "),zk=a("a"),GKe=o("Speech2Text2Tokenizer"),OKe=o(" (Speech2Text2 model)"),XKe=l(),Ss=a("li"),aY=a("strong"),VKe=o("splinter"),zKe=o(" \u2014 "),Wk=a("a"),WKe=o("SplinterTokenizer"),QKe=o(" or "),Qk=a("a"),HKe=o("SplinterTokenizerFast"),UKe=o(" (Splinter model)"),JKe=l(),Ps=a("li"),nY=a("strong"),YKe=o("squeezebert"),KKe=o(" \u2014 "),Hk=a("a"),ZKe=o("SqueezeBertTokenizer"),eZe=o(" or "),Uk=a("a"),oZe=o("SqueezeBertTokenizerFast"),rZe=o(" (SqueezeBERT model)"),tZe=l(),$s=a("li"),sY=a("strong"),aZe=o("t5"),nZe=o(" \u2014 "),Jk=a("a"),sZe=o("T5Tokenizer"),lZe=o(" or "),Yk=a("a"),iZe=o("T5TokenizerFast"),dZe=o(" (T5 model)"),cZe=l(),ah=a("li"),lY=a("strong"),fZe=o("tapas"),mZe=o(" \u2014 "),Kk=a("a"),gZe=o("TapasTokenizer"),hZe=o(" (TAPAS model)"),pZe=l(),nh=a("li"),iY=a("strong"),_Ze=o("transfo-xl"),uZe=o(" \u2014 "),Zk=a("a"),bZe=o("TransfoXLTokenizer"),vZe=o(" (Transformer-XL model)"),TZe=l(),sh=a("li"),dY=a("strong"),FZe=o("wav2vec2"),CZe=o(" \u2014 "),eR=a("a"),MZe=o("Wav2Vec2CTCTokenizer"),EZe=o(" (Wav2Vec2 model)"),yZe=l(),lh=a("li"),cY=a("strong"),wZe=o("wav2vec2_phoneme"),AZe=o(" \u2014 "),oR=a("a"),LZe=o("Wav2Vec2PhonemeCTCTokenizer"),BZe=o(" (Wav2Vec2Phoneme model)"),xZe=l(),Is=a("li"),fY=a("strong"),kZe=o("xglm"),RZe=o(" \u2014 "),rR=a("a"),SZe=o("XGLMTokenizer"),PZe=o(" or "),tR=a("a"),$Ze=o("XGLMTokenizerFast"),IZe=o(" (XGLM model)"),NZe=l(),ih=a("li"),mY=a("strong"),DZe=o("xlm"),jZe=o(" \u2014 "),aR=a("a"),qZe=o("XLMTokenizer"),GZe=o(" (XLM model)"),OZe=l(),dh=a("li"),gY=a("strong"),XZe=o("xlm-prophetnet"),VZe=o(" \u2014 "),nR=a("a"),zZe=o("XLMProphetNetTokenizer"),WZe=o(" (XLMProphetNet model)"),QZe=l(),Ns=a("li"),hY=a("strong"),HZe=o("xlm-roberta"),UZe=o(" \u2014 "),sR=a("a"),JZe=o("XLMRobertaTokenizer"),YZe=o(" or "),lR=a("a"),KZe=o("XLMRobertaTokenizerFast"),ZZe=o(" (XLM-RoBERTa model)"),eeo=l(),Ds=a("li"),pY=a("strong"),oeo=o("xlnet"),reo=o(" \u2014 "),iR=a("a"),teo=o("XLNetTokenizer"),aeo=o(" or "),dR=a("a"),neo=o("XLNetTokenizerFast"),seo=o(" (XLNet model)"),leo=l(),_Y=a("p"),ieo=o("Examples:"),deo=l(),f(ME.$$.fragment),ceo=l(),ch=a("div"),f(EE.$$.fragment),feo=l(),uY=a("p"),meo=o("Register a new tokenizer in this mapping."),dke=l(),Qi=a("h2"),fh=a("a"),bY=a("span"),f(yE.$$.fragment),geo=l(),vY=a("span"),heo=o("AutoFeatureExtractor"),cke=l(),Ho=a("div"),f(wE.$$.fragment),peo=l(),AE=a("p"),_eo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cR=a("a"),ueo=o("AutoFeatureExtractor.from_pretrained()"),beo=o(" class method."),veo=l(),LE=a("p"),Teo=o("This class cannot be instantiated directly using "),TY=a("code"),Feo=o("__init__()"),Ceo=o(" (throws an error)."),Meo=l(),$e=a("div"),f(BE.$$.fragment),Eeo=l(),FY=a("p"),yeo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),weo=l(),Xa=a("p"),Aeo=o("The feature extractor class to instantiate is selected based on the "),CY=a("code"),Leo=o("model_type"),Beo=o(` property of the config object
(either passed as an argument or loaded from `),MY=a("code"),xeo=o("pretrained_model_name_or_path"),keo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),EY=a("code"),Reo=o("pretrained_model_name_or_path"),Seo=o(":"),Peo=l(),re=a("ul"),mh=a("li"),yY=a("strong"),$eo=o("beit"),Ieo=o(" \u2014 "),fR=a("a"),Neo=o("BeitFeatureExtractor"),Deo=o(" (BEiT model)"),jeo=l(),gh=a("li"),wY=a("strong"),qeo=o("clip"),Geo=o(" \u2014 "),mR=a("a"),Oeo=o("CLIPFeatureExtractor"),Xeo=o(" (CLIP model)"),Veo=l(),hh=a("li"),AY=a("strong"),zeo=o("convnext"),Weo=o(" \u2014 "),gR=a("a"),Qeo=o("ConvNextFeatureExtractor"),Heo=o(" (ConvNext model)"),Ueo=l(),ph=a("li"),LY=a("strong"),Jeo=o("deit"),Yeo=o(" \u2014 "),hR=a("a"),Keo=o("DeiTFeatureExtractor"),Zeo=o(" (DeiT model)"),eoo=l(),_h=a("li"),BY=a("strong"),ooo=o("detr"),roo=o(" \u2014 "),pR=a("a"),too=o("DetrFeatureExtractor"),aoo=o(" (DETR model)"),noo=l(),uh=a("li"),xY=a("strong"),soo=o("hubert"),loo=o(" \u2014 "),_R=a("a"),ioo=o("Wav2Vec2FeatureExtractor"),doo=o(" (Hubert model)"),coo=l(),bh=a("li"),kY=a("strong"),foo=o("layoutlmv2"),moo=o(" \u2014 "),uR=a("a"),goo=o("LayoutLMv2FeatureExtractor"),hoo=o(" (LayoutLMv2 model)"),poo=l(),vh=a("li"),RY=a("strong"),_oo=o("maskformer"),uoo=o(" \u2014 "),bR=a("a"),boo=o("MaskFormerFeatureExtractor"),voo=o(" (MaskFormer model)"),Too=l(),Th=a("li"),SY=a("strong"),Foo=o("perceiver"),Coo=o(" \u2014 "),vR=a("a"),Moo=o("PerceiverFeatureExtractor"),Eoo=o(" (Perceiver model)"),yoo=l(),Fh=a("li"),PY=a("strong"),woo=o("poolformer"),Aoo=o(" \u2014 "),TR=a("a"),Loo=o("PoolFormerFeatureExtractor"),Boo=o(" (PoolFormer model)"),xoo=l(),Ch=a("li"),$Y=a("strong"),koo=o("resnet"),Roo=o(" \u2014 "),FR=a("a"),Soo=o("ConvNextFeatureExtractor"),Poo=o(" (ResNet model)"),$oo=l(),Mh=a("li"),IY=a("strong"),Ioo=o("segformer"),Noo=o(" \u2014 "),CR=a("a"),Doo=o("SegformerFeatureExtractor"),joo=o(" (SegFormer model)"),qoo=l(),Eh=a("li"),NY=a("strong"),Goo=o("speech_to_text"),Ooo=o(" \u2014 "),MR=a("a"),Xoo=o("Speech2TextFeatureExtractor"),Voo=o(" (Speech2Text model)"),zoo=l(),yh=a("li"),DY=a("strong"),Woo=o("swin"),Qoo=o(" \u2014 "),ER=a("a"),Hoo=o("ViTFeatureExtractor"),Uoo=o(" (Swin model)"),Joo=l(),wh=a("li"),jY=a("strong"),Yoo=o("van"),Koo=o(" \u2014 "),yR=a("a"),Zoo=o("ConvNextFeatureExtractor"),ero=o(" (VAN model)"),oro=l(),Ah=a("li"),qY=a("strong"),rro=o("vit"),tro=o(" \u2014 "),wR=a("a"),aro=o("ViTFeatureExtractor"),nro=o(" (ViT model)"),sro=l(),Lh=a("li"),GY=a("strong"),lro=o("vit_mae"),iro=o(" \u2014 "),AR=a("a"),dro=o("ViTFeatureExtractor"),cro=o(" (ViTMAE model)"),fro=l(),Bh=a("li"),OY=a("strong"),mro=o("wav2vec2"),gro=o(" \u2014 "),LR=a("a"),hro=o("Wav2Vec2FeatureExtractor"),pro=o(" (Wav2Vec2 model)"),_ro=l(),f(xh.$$.fragment),uro=l(),XY=a("p"),bro=o("Examples:"),vro=l(),f(xE.$$.fragment),Tro=l(),kh=a("div"),f(kE.$$.fragment),Fro=l(),VY=a("p"),Cro=o("Register a new feature extractor for this class."),fke=l(),Hi=a("h2"),Rh=a("a"),zY=a("span"),f(RE.$$.fragment),Mro=l(),WY=a("span"),Ero=o("AutoProcessor"),mke=l(),Uo=a("div"),f(SE.$$.fragment),yro=l(),PE=a("p"),wro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BR=a("a"),Aro=o("AutoProcessor.from_pretrained()"),Lro=o(" class method."),Bro=l(),$E=a("p"),xro=o("This class cannot be instantiated directly using "),QY=a("code"),kro=o("__init__()"),Rro=o(" (throws an error)."),Sro=l(),Ie=a("div"),f(IE.$$.fragment),Pro=l(),HY=a("p"),$ro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Iro=l(),Ui=a("p"),Nro=o("The processor class to instantiate is selected based on the "),UY=a("code"),Dro=o("model_type"),jro=o(` property of the config object (either
passed as an argument or loaded from `),JY=a("code"),qro=o("pretrained_model_name_or_path"),Gro=o(" if possible):"),Oro=l(),xe=a("ul"),Sh=a("li"),YY=a("strong"),Xro=o("clip"),Vro=o(" \u2014 "),xR=a("a"),zro=o("CLIPProcessor"),Wro=o(" (CLIP model)"),Qro=l(),Ph=a("li"),KY=a("strong"),Hro=o("layoutlmv2"),Uro=o(" \u2014 "),kR=a("a"),Jro=o("LayoutLMv2Processor"),Yro=o(" (LayoutLMv2 model)"),Kro=l(),$h=a("li"),ZY=a("strong"),Zro=o("layoutxlm"),eto=o(" \u2014 "),RR=a("a"),oto=o("LayoutXLMProcessor"),rto=o(" (LayoutXLM model)"),tto=l(),Ih=a("li"),eK=a("strong"),ato=o("speech_to_text"),nto=o(" \u2014 "),SR=a("a"),sto=o("Speech2TextProcessor"),lto=o(" (Speech2Text model)"),ito=l(),Nh=a("li"),oK=a("strong"),dto=o("speech_to_text_2"),cto=o(" \u2014 "),PR=a("a"),fto=o("Speech2Text2Processor"),mto=o(" (Speech2Text2 model)"),gto=l(),Dh=a("li"),rK=a("strong"),hto=o("trocr"),pto=o(" \u2014 "),$R=a("a"),_to=o("TrOCRProcessor"),uto=o(" (TrOCR model)"),bto=l(),jh=a("li"),tK=a("strong"),vto=o("vision-text-dual-encoder"),Tto=o(" \u2014 "),IR=a("a"),Fto=o("VisionTextDualEncoderProcessor"),Cto=o(" (VisionTextDualEncoder model)"),Mto=l(),qh=a("li"),aK=a("strong"),Eto=o("wav2vec2"),yto=o(" \u2014 "),NR=a("a"),wto=o("Wav2Vec2Processor"),Ato=o(" (Wav2Vec2 model)"),Lto=l(),f(Gh.$$.fragment),Bto=l(),nK=a("p"),xto=o("Examples:"),kto=l(),f(NE.$$.fragment),Rto=l(),Oh=a("div"),f(DE.$$.fragment),Sto=l(),sK=a("p"),Pto=o("Register a new processor for this class."),gke=l(),Ji=a("h2"),Xh=a("a"),lK=a("span"),f(jE.$$.fragment),$to=l(),iK=a("span"),Ito=o("AutoModel"),hke=l(),Jo=a("div"),f(qE.$$.fragment),Nto=l(),Yi=a("p"),Dto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dK=a("code"),jto=o("from_pretrained()"),qto=o("class method or the "),cK=a("code"),Gto=o("from_config()"),Oto=o(`class
method.`),Xto=l(),GE=a("p"),Vto=o("This class cannot be instantiated directly using "),fK=a("code"),zto=o("__init__()"),Wto=o(" (throws an error)."),Qto=l(),Vr=a("div"),f(OE.$$.fragment),Hto=l(),mK=a("p"),Uto=o("Instantiates one of the base model classes of the library from a configuration."),Jto=l(),Ki=a("p"),Yto=o(`Note:
Loading a model from its configuration file does `),gK=a("strong"),Kto=o("not"),Zto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("code"),eao=o("from_pretrained()"),oao=o("to load the model weights."),rao=l(),pK=a("p"),tao=o("Examples:"),aao=l(),f(XE.$$.fragment),nao=l(),Ne=a("div"),f(VE.$$.fragment),sao=l(),_K=a("p"),lao=o("Instantiate one of the base model classes of the library from a pretrained model."),iao=l(),Va=a("p"),dao=o("The model class to instantiate is selected based on the "),uK=a("code"),cao=o("model_type"),fao=o(` property of the config object (either
passed as an argument or loaded from `),bK=a("code"),mao=o("pretrained_model_name_or_path"),gao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vK=a("code"),hao=o("pretrained_model_name_or_path"),pao=o(":"),_ao=l(),F=a("ul"),Vh=a("li"),TK=a("strong"),uao=o("albert"),bao=o(" \u2014 "),DR=a("a"),vao=o("AlbertModel"),Tao=o(" (ALBERT model)"),Fao=l(),zh=a("li"),FK=a("strong"),Cao=o("bart"),Mao=o(" \u2014 "),jR=a("a"),Eao=o("BartModel"),yao=o(" (BART model)"),wao=l(),Wh=a("li"),CK=a("strong"),Aao=o("beit"),Lao=o(" \u2014 "),qR=a("a"),Bao=o("BeitModel"),xao=o(" (BEiT model)"),kao=l(),Qh=a("li"),MK=a("strong"),Rao=o("bert"),Sao=o(" \u2014 "),GR=a("a"),Pao=o("BertModel"),$ao=o(" (BERT model)"),Iao=l(),Hh=a("li"),EK=a("strong"),Nao=o("bert-generation"),Dao=o(" \u2014 "),OR=a("a"),jao=o("BertGenerationEncoder"),qao=o(" (Bert Generation model)"),Gao=l(),Uh=a("li"),yK=a("strong"),Oao=o("big_bird"),Xao=o(" \u2014 "),XR=a("a"),Vao=o("BigBirdModel"),zao=o(" (BigBird model)"),Wao=l(),Jh=a("li"),wK=a("strong"),Qao=o("bigbird_pegasus"),Hao=o(" \u2014 "),VR=a("a"),Uao=o("BigBirdPegasusModel"),Jao=o(" (BigBirdPegasus model)"),Yao=l(),Yh=a("li"),AK=a("strong"),Kao=o("blenderbot"),Zao=o(" \u2014 "),zR=a("a"),eno=o("BlenderbotModel"),ono=o(" (Blenderbot model)"),rno=l(),Kh=a("li"),LK=a("strong"),tno=o("blenderbot-small"),ano=o(" \u2014 "),WR=a("a"),nno=o("BlenderbotSmallModel"),sno=o(" (BlenderbotSmall model)"),lno=l(),Zh=a("li"),BK=a("strong"),ino=o("camembert"),dno=o(" \u2014 "),QR=a("a"),cno=o("CamembertModel"),fno=o(" (CamemBERT model)"),mno=l(),ep=a("li"),xK=a("strong"),gno=o("canine"),hno=o(" \u2014 "),HR=a("a"),pno=o("CanineModel"),_no=o(" (Canine model)"),uno=l(),op=a("li"),kK=a("strong"),bno=o("clip"),vno=o(" \u2014 "),UR=a("a"),Tno=o("CLIPModel"),Fno=o(" (CLIP model)"),Cno=l(),rp=a("li"),RK=a("strong"),Mno=o("convbert"),Eno=o(" \u2014 "),JR=a("a"),yno=o("ConvBertModel"),wno=o(" (ConvBERT model)"),Ano=l(),tp=a("li"),SK=a("strong"),Lno=o("convnext"),Bno=o(" \u2014 "),YR=a("a"),xno=o("ConvNextModel"),kno=o(" (ConvNext model)"),Rno=l(),ap=a("li"),PK=a("strong"),Sno=o("ctrl"),Pno=o(" \u2014 "),KR=a("a"),$no=o("CTRLModel"),Ino=o(" (CTRL model)"),Nno=l(),np=a("li"),$K=a("strong"),Dno=o("data2vec-audio"),jno=o(" \u2014 "),ZR=a("a"),qno=o("Data2VecAudioModel"),Gno=o(" (Data2VecAudio model)"),Ono=l(),sp=a("li"),IK=a("strong"),Xno=o("data2vec-text"),Vno=o(" \u2014 "),eS=a("a"),zno=o("Data2VecTextModel"),Wno=o(" (Data2VecText model)"),Qno=l(),lp=a("li"),NK=a("strong"),Hno=o("deberta"),Uno=o(" \u2014 "),oS=a("a"),Jno=o("DebertaModel"),Yno=o(" (DeBERTa model)"),Kno=l(),ip=a("li"),DK=a("strong"),Zno=o("deberta-v2"),eso=o(" \u2014 "),rS=a("a"),oso=o("DebertaV2Model"),rso=o(" (DeBERTa-v2 model)"),tso=l(),dp=a("li"),jK=a("strong"),aso=o("decision_transformer"),nso=o(" \u2014 "),tS=a("a"),sso=o("DecisionTransformerModel"),lso=o(" (Decision Transformer model)"),iso=l(),cp=a("li"),qK=a("strong"),dso=o("deit"),cso=o(" \u2014 "),aS=a("a"),fso=o("DeiTModel"),mso=o(" (DeiT model)"),gso=l(),fp=a("li"),GK=a("strong"),hso=o("detr"),pso=o(" \u2014 "),nS=a("a"),_so=o("DetrModel"),uso=o(" (DETR model)"),bso=l(),mp=a("li"),OK=a("strong"),vso=o("distilbert"),Tso=o(" \u2014 "),sS=a("a"),Fso=o("DistilBertModel"),Cso=o(" (DistilBERT model)"),Mso=l(),gp=a("li"),XK=a("strong"),Eso=o("dpr"),yso=o(" \u2014 "),lS=a("a"),wso=o("DPRQuestionEncoder"),Aso=o(" (DPR model)"),Lso=l(),hp=a("li"),VK=a("strong"),Bso=o("electra"),xso=o(" \u2014 "),iS=a("a"),kso=o("ElectraModel"),Rso=o(" (ELECTRA model)"),Sso=l(),pp=a("li"),zK=a("strong"),Pso=o("flaubert"),$so=o(" \u2014 "),dS=a("a"),Iso=o("FlaubertModel"),Nso=o(" (FlauBERT model)"),Dso=l(),_p=a("li"),WK=a("strong"),jso=o("fnet"),qso=o(" \u2014 "),cS=a("a"),Gso=o("FNetModel"),Oso=o(" (FNet model)"),Xso=l(),up=a("li"),QK=a("strong"),Vso=o("fsmt"),zso=o(" \u2014 "),fS=a("a"),Wso=o("FSMTModel"),Qso=o(" (FairSeq Machine-Translation model)"),Hso=l(),js=a("li"),HK=a("strong"),Uso=o("funnel"),Jso=o(" \u2014 "),mS=a("a"),Yso=o("FunnelModel"),Kso=o(" or "),gS=a("a"),Zso=o("FunnelBaseModel"),elo=o(" (Funnel Transformer model)"),olo=l(),bp=a("li"),UK=a("strong"),rlo=o("glpn"),tlo=o(" \u2014 "),hS=a("a"),alo=o("GLPNModel"),nlo=o(" (GLPN model)"),slo=l(),vp=a("li"),JK=a("strong"),llo=o("gpt2"),ilo=o(" \u2014 "),pS=a("a"),dlo=o("GPT2Model"),clo=o(" (OpenAI GPT-2 model)"),flo=l(),Tp=a("li"),YK=a("strong"),mlo=o("gpt_neo"),glo=o(" \u2014 "),_S=a("a"),hlo=o("GPTNeoModel"),plo=o(" (GPT Neo model)"),_lo=l(),Fp=a("li"),KK=a("strong"),ulo=o("gptj"),blo=o(" \u2014 "),uS=a("a"),vlo=o("GPTJModel"),Tlo=o(" (GPT-J model)"),Flo=l(),Cp=a("li"),ZK=a("strong"),Clo=o("hubert"),Mlo=o(" \u2014 "),bS=a("a"),Elo=o("HubertModel"),ylo=o(" (Hubert model)"),wlo=l(),Mp=a("li"),eZ=a("strong"),Alo=o("ibert"),Llo=o(" \u2014 "),vS=a("a"),Blo=o("IBertModel"),xlo=o(" (I-BERT model)"),klo=l(),Ep=a("li"),oZ=a("strong"),Rlo=o("imagegpt"),Slo=o(" \u2014 "),TS=a("a"),Plo=o("ImageGPTModel"),$lo=o(" (ImageGPT model)"),Ilo=l(),yp=a("li"),rZ=a("strong"),Nlo=o("layoutlm"),Dlo=o(" \u2014 "),FS=a("a"),jlo=o("LayoutLMModel"),qlo=o(" (LayoutLM model)"),Glo=l(),wp=a("li"),tZ=a("strong"),Olo=o("layoutlmv2"),Xlo=o(" \u2014 "),CS=a("a"),Vlo=o("LayoutLMv2Model"),zlo=o(" (LayoutLMv2 model)"),Wlo=l(),Ap=a("li"),aZ=a("strong"),Qlo=o("led"),Hlo=o(" \u2014 "),MS=a("a"),Ulo=o("LEDModel"),Jlo=o(" (LED model)"),Ylo=l(),Lp=a("li"),nZ=a("strong"),Klo=o("longformer"),Zlo=o(" \u2014 "),ES=a("a"),eio=o("LongformerModel"),oio=o(" (Longformer model)"),rio=l(),Bp=a("li"),sZ=a("strong"),tio=o("luke"),aio=o(" \u2014 "),yS=a("a"),nio=o("LukeModel"),sio=o(" (LUKE model)"),lio=l(),xp=a("li"),lZ=a("strong"),iio=o("lxmert"),dio=o(" \u2014 "),wS=a("a"),cio=o("LxmertModel"),fio=o(" (LXMERT model)"),mio=l(),kp=a("li"),iZ=a("strong"),gio=o("m2m_100"),hio=o(" \u2014 "),AS=a("a"),pio=o("M2M100Model"),_io=o(" (M2M100 model)"),uio=l(),Rp=a("li"),dZ=a("strong"),bio=o("marian"),vio=o(" \u2014 "),LS=a("a"),Tio=o("MarianModel"),Fio=o(" (Marian model)"),Cio=l(),Sp=a("li"),cZ=a("strong"),Mio=o("maskformer"),Eio=o(" \u2014 "),BS=a("a"),yio=o("MaskFormerModel"),wio=o(" (MaskFormer model)"),Aio=l(),Pp=a("li"),fZ=a("strong"),Lio=o("mbart"),Bio=o(" \u2014 "),xS=a("a"),xio=o("MBartModel"),kio=o(" (mBART model)"),Rio=l(),$p=a("li"),mZ=a("strong"),Sio=o("megatron-bert"),Pio=o(" \u2014 "),kS=a("a"),$io=o("MegatronBertModel"),Iio=o(" (MegatronBert model)"),Nio=l(),Ip=a("li"),gZ=a("strong"),Dio=o("mobilebert"),jio=o(" \u2014 "),RS=a("a"),qio=o("MobileBertModel"),Gio=o(" (MobileBERT model)"),Oio=l(),Np=a("li"),hZ=a("strong"),Xio=o("mpnet"),Vio=o(" \u2014 "),SS=a("a"),zio=o("MPNetModel"),Wio=o(" (MPNet model)"),Qio=l(),Dp=a("li"),pZ=a("strong"),Hio=o("mt5"),Uio=o(" \u2014 "),PS=a("a"),Jio=o("MT5Model"),Yio=o(" (mT5 model)"),Kio=l(),jp=a("li"),_Z=a("strong"),Zio=o("nystromformer"),edo=o(" \u2014 "),$S=a("a"),odo=o("NystromformerModel"),rdo=o(" (Nystromformer model)"),tdo=l(),qp=a("li"),uZ=a("strong"),ado=o("openai-gpt"),ndo=o(" \u2014 "),IS=a("a"),sdo=o("OpenAIGPTModel"),ldo=o(" (OpenAI GPT model)"),ido=l(),Gp=a("li"),bZ=a("strong"),ddo=o("pegasus"),cdo=o(" \u2014 "),NS=a("a"),fdo=o("PegasusModel"),mdo=o(" (Pegasus model)"),gdo=l(),Op=a("li"),vZ=a("strong"),hdo=o("perceiver"),pdo=o(" \u2014 "),DS=a("a"),_do=o("PerceiverModel"),udo=o(" (Perceiver model)"),bdo=l(),Xp=a("li"),TZ=a("strong"),vdo=o("plbart"),Tdo=o(" \u2014 "),jS=a("a"),Fdo=o("PLBartModel"),Cdo=o(" (PLBart model)"),Mdo=l(),Vp=a("li"),FZ=a("strong"),Edo=o("poolformer"),ydo=o(" \u2014 "),qS=a("a"),wdo=o("PoolFormerModel"),Ado=o(" (PoolFormer model)"),Ldo=l(),zp=a("li"),CZ=a("strong"),Bdo=o("prophetnet"),xdo=o(" \u2014 "),GS=a("a"),kdo=o("ProphetNetModel"),Rdo=o(" (ProphetNet model)"),Sdo=l(),Wp=a("li"),MZ=a("strong"),Pdo=o("qdqbert"),$do=o(" \u2014 "),OS=a("a"),Ido=o("QDQBertModel"),Ndo=o(" (QDQBert model)"),Ddo=l(),Qp=a("li"),EZ=a("strong"),jdo=o("reformer"),qdo=o(" \u2014 "),XS=a("a"),Gdo=o("ReformerModel"),Odo=o(" (Reformer model)"),Xdo=l(),Hp=a("li"),yZ=a("strong"),Vdo=o("rembert"),zdo=o(" \u2014 "),VS=a("a"),Wdo=o("RemBertModel"),Qdo=o(" (RemBERT model)"),Hdo=l(),Up=a("li"),wZ=a("strong"),Udo=o("resnet"),Jdo=o(" \u2014 "),zS=a("a"),Ydo=o("ResNetModel"),Kdo=o(" (ResNet model)"),Zdo=l(),Jp=a("li"),AZ=a("strong"),eco=o("retribert"),oco=o(" \u2014 "),WS=a("a"),rco=o("RetriBertModel"),tco=o(" (RetriBERT model)"),aco=l(),Yp=a("li"),LZ=a("strong"),nco=o("roberta"),sco=o(" \u2014 "),QS=a("a"),lco=o("RobertaModel"),ico=o(" (RoBERTa model)"),dco=l(),Kp=a("li"),BZ=a("strong"),cco=o("roformer"),fco=o(" \u2014 "),HS=a("a"),mco=o("RoFormerModel"),gco=o(" (RoFormer model)"),hco=l(),Zp=a("li"),xZ=a("strong"),pco=o("segformer"),_co=o(" \u2014 "),US=a("a"),uco=o("SegformerModel"),bco=o(" (SegFormer model)"),vco=l(),e_=a("li"),kZ=a("strong"),Tco=o("sew"),Fco=o(" \u2014 "),JS=a("a"),Cco=o("SEWModel"),Mco=o(" (SEW model)"),Eco=l(),o_=a("li"),RZ=a("strong"),yco=o("sew-d"),wco=o(" \u2014 "),YS=a("a"),Aco=o("SEWDModel"),Lco=o(" (SEW-D model)"),Bco=l(),r_=a("li"),SZ=a("strong"),xco=o("speech_to_text"),kco=o(" \u2014 "),KS=a("a"),Rco=o("Speech2TextModel"),Sco=o(" (Speech2Text model)"),Pco=l(),t_=a("li"),PZ=a("strong"),$co=o("splinter"),Ico=o(" \u2014 "),ZS=a("a"),Nco=o("SplinterModel"),Dco=o(" (Splinter model)"),jco=l(),a_=a("li"),$Z=a("strong"),qco=o("squeezebert"),Gco=o(" \u2014 "),eP=a("a"),Oco=o("SqueezeBertModel"),Xco=o(" (SqueezeBERT model)"),Vco=l(),n_=a("li"),IZ=a("strong"),zco=o("swin"),Wco=o(" \u2014 "),oP=a("a"),Qco=o("SwinModel"),Hco=o(" (Swin model)"),Uco=l(),s_=a("li"),NZ=a("strong"),Jco=o("t5"),Yco=o(" \u2014 "),rP=a("a"),Kco=o("T5Model"),Zco=o(" (T5 model)"),efo=l(),l_=a("li"),DZ=a("strong"),ofo=o("tapas"),rfo=o(" \u2014 "),tP=a("a"),tfo=o("TapasModel"),afo=o(" (TAPAS model)"),nfo=l(),i_=a("li"),jZ=a("strong"),sfo=o("transfo-xl"),lfo=o(" \u2014 "),aP=a("a"),ifo=o("TransfoXLModel"),dfo=o(" (Transformer-XL model)"),cfo=l(),d_=a("li"),qZ=a("strong"),ffo=o("unispeech"),mfo=o(" \u2014 "),nP=a("a"),gfo=o("UniSpeechModel"),hfo=o(" (UniSpeech model)"),pfo=l(),c_=a("li"),GZ=a("strong"),_fo=o("unispeech-sat"),ufo=o(" \u2014 "),sP=a("a"),bfo=o("UniSpeechSatModel"),vfo=o(" (UniSpeechSat model)"),Tfo=l(),f_=a("li"),OZ=a("strong"),Ffo=o("van"),Cfo=o(" \u2014 "),lP=a("a"),Mfo=o("VanModel"),Efo=o(" (VAN model)"),yfo=l(),m_=a("li"),XZ=a("strong"),wfo=o("vilt"),Afo=o(" \u2014 "),iP=a("a"),Lfo=o("ViltModel"),Bfo=o(" (ViLT model)"),xfo=l(),g_=a("li"),VZ=a("strong"),kfo=o("vision-text-dual-encoder"),Rfo=o(" \u2014 "),dP=a("a"),Sfo=o("VisionTextDualEncoderModel"),Pfo=o(" (VisionTextDualEncoder model)"),$fo=l(),h_=a("li"),zZ=a("strong"),Ifo=o("visual_bert"),Nfo=o(" \u2014 "),cP=a("a"),Dfo=o("VisualBertModel"),jfo=o(" (VisualBert model)"),qfo=l(),p_=a("li"),WZ=a("strong"),Gfo=o("vit"),Ofo=o(" \u2014 "),fP=a("a"),Xfo=o("ViTModel"),Vfo=o(" (ViT model)"),zfo=l(),__=a("li"),QZ=a("strong"),Wfo=o("vit_mae"),Qfo=o(" \u2014 "),mP=a("a"),Hfo=o("ViTMAEModel"),Ufo=o(" (ViTMAE model)"),Jfo=l(),u_=a("li"),HZ=a("strong"),Yfo=o("wav2vec2"),Kfo=o(" \u2014 "),gP=a("a"),Zfo=o("Wav2Vec2Model"),emo=o(" (Wav2Vec2 model)"),omo=l(),b_=a("li"),UZ=a("strong"),rmo=o("wavlm"),tmo=o(" \u2014 "),hP=a("a"),amo=o("WavLMModel"),nmo=o(" (WavLM model)"),smo=l(),v_=a("li"),JZ=a("strong"),lmo=o("xglm"),imo=o(" \u2014 "),pP=a("a"),dmo=o("XGLMModel"),cmo=o(" (XGLM model)"),fmo=l(),T_=a("li"),YZ=a("strong"),mmo=o("xlm"),gmo=o(" \u2014 "),_P=a("a"),hmo=o("XLMModel"),pmo=o(" (XLM model)"),_mo=l(),F_=a("li"),KZ=a("strong"),umo=o("xlm-prophetnet"),bmo=o(" \u2014 "),uP=a("a"),vmo=o("XLMProphetNetModel"),Tmo=o(" (XLMProphetNet model)"),Fmo=l(),C_=a("li"),ZZ=a("strong"),Cmo=o("xlm-roberta"),Mmo=o(" \u2014 "),bP=a("a"),Emo=o("XLMRobertaModel"),ymo=o(" (XLM-RoBERTa model)"),wmo=l(),M_=a("li"),eee=a("strong"),Amo=o("xlm-roberta-xl"),Lmo=o(" \u2014 "),vP=a("a"),Bmo=o("XLMRobertaXLModel"),xmo=o(" (XLM-RoBERTa-XL model)"),kmo=l(),E_=a("li"),oee=a("strong"),Rmo=o("xlnet"),Smo=o(" \u2014 "),TP=a("a"),Pmo=o("XLNetModel"),$mo=o(" (XLNet model)"),Imo=l(),y_=a("li"),ree=a("strong"),Nmo=o("yoso"),Dmo=o(" \u2014 "),FP=a("a"),jmo=o("YosoModel"),qmo=o(" (YOSO model)"),Gmo=l(),w_=a("p"),Omo=o("The model is set in evaluation mode by default using "),tee=a("code"),Xmo=o("model.eval()"),Vmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aee=a("code"),zmo=o("model.train()"),Wmo=l(),nee=a("p"),Qmo=o("Examples:"),Hmo=l(),f(zE.$$.fragment),pke=l(),Zi=a("h2"),A_=a("a"),see=a("span"),f(WE.$$.fragment),Umo=l(),lee=a("span"),Jmo=o("AutoModelForPreTraining"),_ke=l(),Yo=a("div"),f(QE.$$.fragment),Ymo=l(),ed=a("p"),Kmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iee=a("code"),Zmo=o("from_pretrained()"),ego=o("class method or the "),dee=a("code"),ogo=o("from_config()"),rgo=o(`class
method.`),tgo=l(),HE=a("p"),ago=o("This class cannot be instantiated directly using "),cee=a("code"),ngo=o("__init__()"),sgo=o(" (throws an error)."),lgo=l(),zr=a("div"),f(UE.$$.fragment),igo=l(),fee=a("p"),dgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cgo=l(),od=a("p"),fgo=o(`Note:
Loading a model from its configuration file does `),mee=a("strong"),mgo=o("not"),ggo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("code"),hgo=o("from_pretrained()"),pgo=o("to load the model weights."),_go=l(),hee=a("p"),ugo=o("Examples:"),bgo=l(),f(JE.$$.fragment),vgo=l(),De=a("div"),f(YE.$$.fragment),Tgo=l(),pee=a("p"),Fgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cgo=l(),za=a("p"),Mgo=o("The model class to instantiate is selected based on the "),_ee=a("code"),Ego=o("model_type"),ygo=o(` property of the config object (either
passed as an argument or loaded from `),uee=a("code"),wgo=o("pretrained_model_name_or_path"),Ago=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bee=a("code"),Lgo=o("pretrained_model_name_or_path"),Bgo=o(":"),xgo=l(),k=a("ul"),L_=a("li"),vee=a("strong"),kgo=o("albert"),Rgo=o(" \u2014 "),CP=a("a"),Sgo=o("AlbertForPreTraining"),Pgo=o(" (ALBERT model)"),$go=l(),B_=a("li"),Tee=a("strong"),Igo=o("bart"),Ngo=o(" \u2014 "),MP=a("a"),Dgo=o("BartForConditionalGeneration"),jgo=o(" (BART model)"),qgo=l(),x_=a("li"),Fee=a("strong"),Ggo=o("bert"),Ogo=o(" \u2014 "),EP=a("a"),Xgo=o("BertForPreTraining"),Vgo=o(" (BERT model)"),zgo=l(),k_=a("li"),Cee=a("strong"),Wgo=o("big_bird"),Qgo=o(" \u2014 "),yP=a("a"),Hgo=o("BigBirdForPreTraining"),Ugo=o(" (BigBird model)"),Jgo=l(),R_=a("li"),Mee=a("strong"),Ygo=o("camembert"),Kgo=o(" \u2014 "),wP=a("a"),Zgo=o("CamembertForMaskedLM"),eho=o(" (CamemBERT model)"),oho=l(),S_=a("li"),Eee=a("strong"),rho=o("ctrl"),tho=o(" \u2014 "),AP=a("a"),aho=o("CTRLLMHeadModel"),nho=o(" (CTRL model)"),sho=l(),P_=a("li"),yee=a("strong"),lho=o("data2vec-text"),iho=o(" \u2014 "),LP=a("a"),dho=o("Data2VecTextForMaskedLM"),cho=o(" (Data2VecText model)"),fho=l(),$_=a("li"),wee=a("strong"),mho=o("deberta"),gho=o(" \u2014 "),BP=a("a"),hho=o("DebertaForMaskedLM"),pho=o(" (DeBERTa model)"),_ho=l(),I_=a("li"),Aee=a("strong"),uho=o("deberta-v2"),bho=o(" \u2014 "),xP=a("a"),vho=o("DebertaV2ForMaskedLM"),Tho=o(" (DeBERTa-v2 model)"),Fho=l(),N_=a("li"),Lee=a("strong"),Cho=o("distilbert"),Mho=o(" \u2014 "),kP=a("a"),Eho=o("DistilBertForMaskedLM"),yho=o(" (DistilBERT model)"),who=l(),D_=a("li"),Bee=a("strong"),Aho=o("electra"),Lho=o(" \u2014 "),RP=a("a"),Bho=o("ElectraForPreTraining"),xho=o(" (ELECTRA model)"),kho=l(),j_=a("li"),xee=a("strong"),Rho=o("flaubert"),Sho=o(" \u2014 "),SP=a("a"),Pho=o("FlaubertWithLMHeadModel"),$ho=o(" (FlauBERT model)"),Iho=l(),q_=a("li"),kee=a("strong"),Nho=o("fnet"),Dho=o(" \u2014 "),PP=a("a"),jho=o("FNetForPreTraining"),qho=o(" (FNet model)"),Gho=l(),G_=a("li"),Ree=a("strong"),Oho=o("fsmt"),Xho=o(" \u2014 "),$P=a("a"),Vho=o("FSMTForConditionalGeneration"),zho=o(" (FairSeq Machine-Translation model)"),Who=l(),O_=a("li"),See=a("strong"),Qho=o("funnel"),Hho=o(" \u2014 "),IP=a("a"),Uho=o("FunnelForPreTraining"),Jho=o(" (Funnel Transformer model)"),Yho=l(),X_=a("li"),Pee=a("strong"),Kho=o("gpt2"),Zho=o(" \u2014 "),NP=a("a"),epo=o("GPT2LMHeadModel"),opo=o(" (OpenAI GPT-2 model)"),rpo=l(),V_=a("li"),$ee=a("strong"),tpo=o("ibert"),apo=o(" \u2014 "),DP=a("a"),npo=o("IBertForMaskedLM"),spo=o(" (I-BERT model)"),lpo=l(),z_=a("li"),Iee=a("strong"),ipo=o("layoutlm"),dpo=o(" \u2014 "),jP=a("a"),cpo=o("LayoutLMForMaskedLM"),fpo=o(" (LayoutLM model)"),mpo=l(),W_=a("li"),Nee=a("strong"),gpo=o("longformer"),hpo=o(" \u2014 "),qP=a("a"),ppo=o("LongformerForMaskedLM"),_po=o(" (Longformer model)"),upo=l(),Q_=a("li"),Dee=a("strong"),bpo=o("lxmert"),vpo=o(" \u2014 "),GP=a("a"),Tpo=o("LxmertForPreTraining"),Fpo=o(" (LXMERT model)"),Cpo=l(),H_=a("li"),jee=a("strong"),Mpo=o("megatron-bert"),Epo=o(" \u2014 "),OP=a("a"),ypo=o("MegatronBertForPreTraining"),wpo=o(" (MegatronBert model)"),Apo=l(),U_=a("li"),qee=a("strong"),Lpo=o("mobilebert"),Bpo=o(" \u2014 "),XP=a("a"),xpo=o("MobileBertForPreTraining"),kpo=o(" (MobileBERT model)"),Rpo=l(),J_=a("li"),Gee=a("strong"),Spo=o("mpnet"),Ppo=o(" \u2014 "),VP=a("a"),$po=o("MPNetForMaskedLM"),Ipo=o(" (MPNet model)"),Npo=l(),Y_=a("li"),Oee=a("strong"),Dpo=o("openai-gpt"),jpo=o(" \u2014 "),zP=a("a"),qpo=o("OpenAIGPTLMHeadModel"),Gpo=o(" (OpenAI GPT model)"),Opo=l(),K_=a("li"),Xee=a("strong"),Xpo=o("retribert"),Vpo=o(" \u2014 "),WP=a("a"),zpo=o("RetriBertModel"),Wpo=o(" (RetriBERT model)"),Qpo=l(),Z_=a("li"),Vee=a("strong"),Hpo=o("roberta"),Upo=o(" \u2014 "),QP=a("a"),Jpo=o("RobertaForMaskedLM"),Ypo=o(" (RoBERTa model)"),Kpo=l(),eu=a("li"),zee=a("strong"),Zpo=o("squeezebert"),e_o=o(" \u2014 "),HP=a("a"),o_o=o("SqueezeBertForMaskedLM"),r_o=o(" (SqueezeBERT model)"),t_o=l(),ou=a("li"),Wee=a("strong"),a_o=o("t5"),n_o=o(" \u2014 "),UP=a("a"),s_o=o("T5ForConditionalGeneration"),l_o=o(" (T5 model)"),i_o=l(),ru=a("li"),Qee=a("strong"),d_o=o("tapas"),c_o=o(" \u2014 "),JP=a("a"),f_o=o("TapasForMaskedLM"),m_o=o(" (TAPAS model)"),g_o=l(),tu=a("li"),Hee=a("strong"),h_o=o("transfo-xl"),p_o=o(" \u2014 "),YP=a("a"),__o=o("TransfoXLLMHeadModel"),u_o=o(" (Transformer-XL model)"),b_o=l(),au=a("li"),Uee=a("strong"),v_o=o("unispeech"),T_o=o(" \u2014 "),KP=a("a"),F_o=o("UniSpeechForPreTraining"),C_o=o(" (UniSpeech model)"),M_o=l(),nu=a("li"),Jee=a("strong"),E_o=o("unispeech-sat"),y_o=o(" \u2014 "),ZP=a("a"),w_o=o("UniSpeechSatForPreTraining"),A_o=o(" (UniSpeechSat model)"),L_o=l(),su=a("li"),Yee=a("strong"),B_o=o("visual_bert"),x_o=o(" \u2014 "),e$=a("a"),k_o=o("VisualBertForPreTraining"),R_o=o(" (VisualBert model)"),S_o=l(),lu=a("li"),Kee=a("strong"),P_o=o("vit_mae"),$_o=o(" \u2014 "),o$=a("a"),I_o=o("ViTMAEForPreTraining"),N_o=o(" (ViTMAE model)"),D_o=l(),iu=a("li"),Zee=a("strong"),j_o=o("wav2vec2"),q_o=o(" \u2014 "),r$=a("a"),G_o=o("Wav2Vec2ForPreTraining"),O_o=o(" (Wav2Vec2 model)"),X_o=l(),du=a("li"),eoe=a("strong"),V_o=o("xlm"),z_o=o(" \u2014 "),t$=a("a"),W_o=o("XLMWithLMHeadModel"),Q_o=o(" (XLM model)"),H_o=l(),cu=a("li"),ooe=a("strong"),U_o=o("xlm-roberta"),J_o=o(" \u2014 "),a$=a("a"),Y_o=o("XLMRobertaForMaskedLM"),K_o=o(" (XLM-RoBERTa model)"),Z_o=l(),fu=a("li"),roe=a("strong"),euo=o("xlm-roberta-xl"),ouo=o(" \u2014 "),n$=a("a"),ruo=o("XLMRobertaXLForMaskedLM"),tuo=o(" (XLM-RoBERTa-XL model)"),auo=l(),mu=a("li"),toe=a("strong"),nuo=o("xlnet"),suo=o(" \u2014 "),s$=a("a"),luo=o("XLNetLMHeadModel"),iuo=o(" (XLNet model)"),duo=l(),gu=a("p"),cuo=o("The model is set in evaluation mode by default using "),aoe=a("code"),fuo=o("model.eval()"),muo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),noe=a("code"),guo=o("model.train()"),huo=l(),soe=a("p"),puo=o("Examples:"),_uo=l(),f(KE.$$.fragment),uke=l(),rd=a("h2"),hu=a("a"),loe=a("span"),f(ZE.$$.fragment),uuo=l(),ioe=a("span"),buo=o("AutoModelForCausalLM"),bke=l(),Ko=a("div"),f(e5.$$.fragment),vuo=l(),td=a("p"),Tuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),doe=a("code"),Fuo=o("from_pretrained()"),Cuo=o("class method or the "),coe=a("code"),Muo=o("from_config()"),Euo=o(`class
method.`),yuo=l(),o5=a("p"),wuo=o("This class cannot be instantiated directly using "),foe=a("code"),Auo=o("__init__()"),Luo=o(" (throws an error)."),Buo=l(),Wr=a("div"),f(r5.$$.fragment),xuo=l(),moe=a("p"),kuo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ruo=l(),ad=a("p"),Suo=o(`Note:
Loading a model from its configuration file does `),goe=a("strong"),Puo=o("not"),$uo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("code"),Iuo=o("from_pretrained()"),Nuo=o("to load the model weights."),Duo=l(),poe=a("p"),juo=o("Examples:"),quo=l(),f(t5.$$.fragment),Guo=l(),je=a("div"),f(a5.$$.fragment),Ouo=l(),_oe=a("p"),Xuo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vuo=l(),Wa=a("p"),zuo=o("The model class to instantiate is selected based on the "),uoe=a("code"),Wuo=o("model_type"),Quo=o(` property of the config object (either
passed as an argument or loaded from `),boe=a("code"),Huo=o("pretrained_model_name_or_path"),Uuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=a("code"),Juo=o("pretrained_model_name_or_path"),Yuo=o(":"),Kuo=l(),$=a("ul"),pu=a("li"),Toe=a("strong"),Zuo=o("bart"),e1o=o(" \u2014 "),l$=a("a"),o1o=o("BartForCausalLM"),r1o=o(" (BART model)"),t1o=l(),_u=a("li"),Foe=a("strong"),a1o=o("bert"),n1o=o(" \u2014 "),i$=a("a"),s1o=o("BertLMHeadModel"),l1o=o(" (BERT model)"),i1o=l(),uu=a("li"),Coe=a("strong"),d1o=o("bert-generation"),c1o=o(" \u2014 "),d$=a("a"),f1o=o("BertGenerationDecoder"),m1o=o(" (Bert Generation model)"),g1o=l(),bu=a("li"),Moe=a("strong"),h1o=o("big_bird"),p1o=o(" \u2014 "),c$=a("a"),_1o=o("BigBirdForCausalLM"),u1o=o(" (BigBird model)"),b1o=l(),vu=a("li"),Eoe=a("strong"),v1o=o("bigbird_pegasus"),T1o=o(" \u2014 "),f$=a("a"),F1o=o("BigBirdPegasusForCausalLM"),C1o=o(" (BigBirdPegasus model)"),M1o=l(),Tu=a("li"),yoe=a("strong"),E1o=o("blenderbot"),y1o=o(" \u2014 "),m$=a("a"),w1o=o("BlenderbotForCausalLM"),A1o=o(" (Blenderbot model)"),L1o=l(),Fu=a("li"),woe=a("strong"),B1o=o("blenderbot-small"),x1o=o(" \u2014 "),g$=a("a"),k1o=o("BlenderbotSmallForCausalLM"),R1o=o(" (BlenderbotSmall model)"),S1o=l(),Cu=a("li"),Aoe=a("strong"),P1o=o("camembert"),$1o=o(" \u2014 "),h$=a("a"),I1o=o("CamembertForCausalLM"),N1o=o(" (CamemBERT model)"),D1o=l(),Mu=a("li"),Loe=a("strong"),j1o=o("ctrl"),q1o=o(" \u2014 "),p$=a("a"),G1o=o("CTRLLMHeadModel"),O1o=o(" (CTRL model)"),X1o=l(),Eu=a("li"),Boe=a("strong"),V1o=o("data2vec-text"),z1o=o(" \u2014 "),_$=a("a"),W1o=o("Data2VecTextForCausalLM"),Q1o=o(" (Data2VecText model)"),H1o=l(),yu=a("li"),xoe=a("strong"),U1o=o("electra"),J1o=o(" \u2014 "),u$=a("a"),Y1o=o("ElectraForCausalLM"),K1o=o(" (ELECTRA model)"),Z1o=l(),wu=a("li"),koe=a("strong"),e9o=o("gpt2"),o9o=o(" \u2014 "),b$=a("a"),r9o=o("GPT2LMHeadModel"),t9o=o(" (OpenAI GPT-2 model)"),a9o=l(),Au=a("li"),Roe=a("strong"),n9o=o("gpt_neo"),s9o=o(" \u2014 "),v$=a("a"),l9o=o("GPTNeoForCausalLM"),i9o=o(" (GPT Neo model)"),d9o=l(),Lu=a("li"),Soe=a("strong"),c9o=o("gptj"),f9o=o(" \u2014 "),T$=a("a"),m9o=o("GPTJForCausalLM"),g9o=o(" (GPT-J model)"),h9o=l(),Bu=a("li"),Poe=a("strong"),p9o=o("marian"),_9o=o(" \u2014 "),F$=a("a"),u9o=o("MarianForCausalLM"),b9o=o(" (Marian model)"),v9o=l(),xu=a("li"),$oe=a("strong"),T9o=o("mbart"),F9o=o(" \u2014 "),C$=a("a"),C9o=o("MBartForCausalLM"),M9o=o(" (mBART model)"),E9o=l(),ku=a("li"),Ioe=a("strong"),y9o=o("megatron-bert"),w9o=o(" \u2014 "),M$=a("a"),A9o=o("MegatronBertForCausalLM"),L9o=o(" (MegatronBert model)"),B9o=l(),Ru=a("li"),Noe=a("strong"),x9o=o("openai-gpt"),k9o=o(" \u2014 "),E$=a("a"),R9o=o("OpenAIGPTLMHeadModel"),S9o=o(" (OpenAI GPT model)"),P9o=l(),Su=a("li"),Doe=a("strong"),$9o=o("pegasus"),I9o=o(" \u2014 "),y$=a("a"),N9o=o("PegasusForCausalLM"),D9o=o(" (Pegasus model)"),j9o=l(),Pu=a("li"),joe=a("strong"),q9o=o("plbart"),G9o=o(" \u2014 "),w$=a("a"),O9o=o("PLBartForCausalLM"),X9o=o(" (PLBart model)"),V9o=l(),$u=a("li"),qoe=a("strong"),z9o=o("prophetnet"),W9o=o(" \u2014 "),A$=a("a"),Q9o=o("ProphetNetForCausalLM"),H9o=o(" (ProphetNet model)"),U9o=l(),Iu=a("li"),Goe=a("strong"),J9o=o("qdqbert"),Y9o=o(" \u2014 "),L$=a("a"),K9o=o("QDQBertLMHeadModel"),Z9o=o(" (QDQBert model)"),ebo=l(),Nu=a("li"),Ooe=a("strong"),obo=o("reformer"),rbo=o(" \u2014 "),B$=a("a"),tbo=o("ReformerModelWithLMHead"),abo=o(" (Reformer model)"),nbo=l(),Du=a("li"),Xoe=a("strong"),sbo=o("rembert"),lbo=o(" \u2014 "),x$=a("a"),ibo=o("RemBertForCausalLM"),dbo=o(" (RemBERT model)"),cbo=l(),ju=a("li"),Voe=a("strong"),fbo=o("roberta"),mbo=o(" \u2014 "),k$=a("a"),gbo=o("RobertaForCausalLM"),hbo=o(" (RoBERTa model)"),pbo=l(),qu=a("li"),zoe=a("strong"),_bo=o("roformer"),ubo=o(" \u2014 "),R$=a("a"),bbo=o("RoFormerForCausalLM"),vbo=o(" (RoFormer model)"),Tbo=l(),Gu=a("li"),Woe=a("strong"),Fbo=o("speech_to_text_2"),Cbo=o(" \u2014 "),S$=a("a"),Mbo=o("Speech2Text2ForCausalLM"),Ebo=o(" (Speech2Text2 model)"),ybo=l(),Ou=a("li"),Qoe=a("strong"),wbo=o("transfo-xl"),Abo=o(" \u2014 "),P$=a("a"),Lbo=o("TransfoXLLMHeadModel"),Bbo=o(" (Transformer-XL model)"),xbo=l(),Xu=a("li"),Hoe=a("strong"),kbo=o("trocr"),Rbo=o(" \u2014 "),$$=a("a"),Sbo=o("TrOCRForCausalLM"),Pbo=o(" (TrOCR model)"),$bo=l(),Vu=a("li"),Uoe=a("strong"),Ibo=o("xglm"),Nbo=o(" \u2014 "),I$=a("a"),Dbo=o("XGLMForCausalLM"),jbo=o(" (XGLM model)"),qbo=l(),zu=a("li"),Joe=a("strong"),Gbo=o("xlm"),Obo=o(" \u2014 "),N$=a("a"),Xbo=o("XLMWithLMHeadModel"),Vbo=o(" (XLM model)"),zbo=l(),Wu=a("li"),Yoe=a("strong"),Wbo=o("xlm-prophetnet"),Qbo=o(" \u2014 "),D$=a("a"),Hbo=o("XLMProphetNetForCausalLM"),Ubo=o(" (XLMProphetNet model)"),Jbo=l(),Qu=a("li"),Koe=a("strong"),Ybo=o("xlm-roberta"),Kbo=o(" \u2014 "),j$=a("a"),Zbo=o("XLMRobertaForCausalLM"),e3o=o(" (XLM-RoBERTa model)"),o3o=l(),Hu=a("li"),Zoe=a("strong"),r3o=o("xlm-roberta-xl"),t3o=o(" \u2014 "),q$=a("a"),a3o=o("XLMRobertaXLForCausalLM"),n3o=o(" (XLM-RoBERTa-XL model)"),s3o=l(),Uu=a("li"),ere=a("strong"),l3o=o("xlnet"),i3o=o(" \u2014 "),G$=a("a"),d3o=o("XLNetLMHeadModel"),c3o=o(" (XLNet model)"),f3o=l(),Ju=a("p"),m3o=o("The model is set in evaluation mode by default using "),ore=a("code"),g3o=o("model.eval()"),h3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),p3o=o("model.train()"),_3o=l(),tre=a("p"),u3o=o("Examples:"),b3o=l(),f(n5.$$.fragment),vke=l(),nd=a("h2"),Yu=a("a"),are=a("span"),f(s5.$$.fragment),v3o=l(),nre=a("span"),T3o=o("AutoModelForMaskedLM"),Tke=l(),Zo=a("div"),f(l5.$$.fragment),F3o=l(),sd=a("p"),C3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sre=a("code"),M3o=o("from_pretrained()"),E3o=o("class method or the "),lre=a("code"),y3o=o("from_config()"),w3o=o(`class
method.`),A3o=l(),i5=a("p"),L3o=o("This class cannot be instantiated directly using "),ire=a("code"),B3o=o("__init__()"),x3o=o(" (throws an error)."),k3o=l(),Qr=a("div"),f(d5.$$.fragment),R3o=l(),dre=a("p"),S3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P3o=l(),ld=a("p"),$3o=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),I3o=o("not"),N3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("code"),D3o=o("from_pretrained()"),j3o=o("to load the model weights."),q3o=l(),mre=a("p"),G3o=o("Examples:"),O3o=l(),f(c5.$$.fragment),X3o=l(),qe=a("div"),f(f5.$$.fragment),V3o=l(),gre=a("p"),z3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W3o=l(),Qa=a("p"),Q3o=o("The model class to instantiate is selected based on the "),hre=a("code"),H3o=o("model_type"),U3o=o(` property of the config object (either
passed as an argument or loaded from `),pre=a("code"),J3o=o("pretrained_model_name_or_path"),Y3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=a("code"),K3o=o("pretrained_model_name_or_path"),Z3o=o(":"),e2o=l(),I=a("ul"),Ku=a("li"),ure=a("strong"),o2o=o("albert"),r2o=o(" \u2014 "),O$=a("a"),t2o=o("AlbertForMaskedLM"),a2o=o(" (ALBERT model)"),n2o=l(),Zu=a("li"),bre=a("strong"),s2o=o("bart"),l2o=o(" \u2014 "),X$=a("a"),i2o=o("BartForConditionalGeneration"),d2o=o(" (BART model)"),c2o=l(),e1=a("li"),vre=a("strong"),f2o=o("bert"),m2o=o(" \u2014 "),V$=a("a"),g2o=o("BertForMaskedLM"),h2o=o(" (BERT model)"),p2o=l(),o1=a("li"),Tre=a("strong"),_2o=o("big_bird"),u2o=o(" \u2014 "),z$=a("a"),b2o=o("BigBirdForMaskedLM"),v2o=o(" (BigBird model)"),T2o=l(),r1=a("li"),Fre=a("strong"),F2o=o("camembert"),C2o=o(" \u2014 "),W$=a("a"),M2o=o("CamembertForMaskedLM"),E2o=o(" (CamemBERT model)"),y2o=l(),t1=a("li"),Cre=a("strong"),w2o=o("convbert"),A2o=o(" \u2014 "),Q$=a("a"),L2o=o("ConvBertForMaskedLM"),B2o=o(" (ConvBERT model)"),x2o=l(),a1=a("li"),Mre=a("strong"),k2o=o("data2vec-text"),R2o=o(" \u2014 "),H$=a("a"),S2o=o("Data2VecTextForMaskedLM"),P2o=o(" (Data2VecText model)"),$2o=l(),n1=a("li"),Ere=a("strong"),I2o=o("deberta"),N2o=o(" \u2014 "),U$=a("a"),D2o=o("DebertaForMaskedLM"),j2o=o(" (DeBERTa model)"),q2o=l(),s1=a("li"),yre=a("strong"),G2o=o("deberta-v2"),O2o=o(" \u2014 "),J$=a("a"),X2o=o("DebertaV2ForMaskedLM"),V2o=o(" (DeBERTa-v2 model)"),z2o=l(),l1=a("li"),wre=a("strong"),W2o=o("distilbert"),Q2o=o(" \u2014 "),Y$=a("a"),H2o=o("DistilBertForMaskedLM"),U2o=o(" (DistilBERT model)"),J2o=l(),i1=a("li"),Are=a("strong"),Y2o=o("electra"),K2o=o(" \u2014 "),K$=a("a"),Z2o=o("ElectraForMaskedLM"),evo=o(" (ELECTRA model)"),ovo=l(),d1=a("li"),Lre=a("strong"),rvo=o("flaubert"),tvo=o(" \u2014 "),Z$=a("a"),avo=o("FlaubertWithLMHeadModel"),nvo=o(" (FlauBERT model)"),svo=l(),c1=a("li"),Bre=a("strong"),lvo=o("fnet"),ivo=o(" \u2014 "),eI=a("a"),dvo=o("FNetForMaskedLM"),cvo=o(" (FNet model)"),fvo=l(),f1=a("li"),xre=a("strong"),mvo=o("funnel"),gvo=o(" \u2014 "),oI=a("a"),hvo=o("FunnelForMaskedLM"),pvo=o(" (Funnel Transformer model)"),_vo=l(),m1=a("li"),kre=a("strong"),uvo=o("ibert"),bvo=o(" \u2014 "),rI=a("a"),vvo=o("IBertForMaskedLM"),Tvo=o(" (I-BERT model)"),Fvo=l(),g1=a("li"),Rre=a("strong"),Cvo=o("layoutlm"),Mvo=o(" \u2014 "),tI=a("a"),Evo=o("LayoutLMForMaskedLM"),yvo=o(" (LayoutLM model)"),wvo=l(),h1=a("li"),Sre=a("strong"),Avo=o("longformer"),Lvo=o(" \u2014 "),aI=a("a"),Bvo=o("LongformerForMaskedLM"),xvo=o(" (Longformer model)"),kvo=l(),p1=a("li"),Pre=a("strong"),Rvo=o("mbart"),Svo=o(" \u2014 "),nI=a("a"),Pvo=o("MBartForConditionalGeneration"),$vo=o(" (mBART model)"),Ivo=l(),_1=a("li"),$re=a("strong"),Nvo=o("megatron-bert"),Dvo=o(" \u2014 "),sI=a("a"),jvo=o("MegatronBertForMaskedLM"),qvo=o(" (MegatronBert model)"),Gvo=l(),u1=a("li"),Ire=a("strong"),Ovo=o("mobilebert"),Xvo=o(" \u2014 "),lI=a("a"),Vvo=o("MobileBertForMaskedLM"),zvo=o(" (MobileBERT model)"),Wvo=l(),b1=a("li"),Nre=a("strong"),Qvo=o("mpnet"),Hvo=o(" \u2014 "),iI=a("a"),Uvo=o("MPNetForMaskedLM"),Jvo=o(" (MPNet model)"),Yvo=l(),v1=a("li"),Dre=a("strong"),Kvo=o("nystromformer"),Zvo=o(" \u2014 "),dI=a("a"),e6o=o("NystromformerForMaskedLM"),o6o=o(" (Nystromformer model)"),r6o=l(),T1=a("li"),jre=a("strong"),t6o=o("perceiver"),a6o=o(" \u2014 "),cI=a("a"),n6o=o("PerceiverForMaskedLM"),s6o=o(" (Perceiver model)"),l6o=l(),F1=a("li"),qre=a("strong"),i6o=o("qdqbert"),d6o=o(" \u2014 "),fI=a("a"),c6o=o("QDQBertForMaskedLM"),f6o=o(" (QDQBert model)"),m6o=l(),C1=a("li"),Gre=a("strong"),g6o=o("reformer"),h6o=o(" \u2014 "),mI=a("a"),p6o=o("ReformerForMaskedLM"),_6o=o(" (Reformer model)"),u6o=l(),M1=a("li"),Ore=a("strong"),b6o=o("rembert"),v6o=o(" \u2014 "),gI=a("a"),T6o=o("RemBertForMaskedLM"),F6o=o(" (RemBERT model)"),C6o=l(),E1=a("li"),Xre=a("strong"),M6o=o("roberta"),E6o=o(" \u2014 "),hI=a("a"),y6o=o("RobertaForMaskedLM"),w6o=o(" (RoBERTa model)"),A6o=l(),y1=a("li"),Vre=a("strong"),L6o=o("roformer"),B6o=o(" \u2014 "),pI=a("a"),x6o=o("RoFormerForMaskedLM"),k6o=o(" (RoFormer model)"),R6o=l(),w1=a("li"),zre=a("strong"),S6o=o("squeezebert"),P6o=o(" \u2014 "),_I=a("a"),$6o=o("SqueezeBertForMaskedLM"),I6o=o(" (SqueezeBERT model)"),N6o=l(),A1=a("li"),Wre=a("strong"),D6o=o("tapas"),j6o=o(" \u2014 "),uI=a("a"),q6o=o("TapasForMaskedLM"),G6o=o(" (TAPAS model)"),O6o=l(),L1=a("li"),Qre=a("strong"),X6o=o("wav2vec2"),V6o=o(" \u2014 "),Hre=a("code"),z6o=o("Wav2Vec2ForMaskedLM"),W6o=o("(Wav2Vec2 model)"),Q6o=l(),B1=a("li"),Ure=a("strong"),H6o=o("xlm"),U6o=o(" \u2014 "),bI=a("a"),J6o=o("XLMWithLMHeadModel"),Y6o=o(" (XLM model)"),K6o=l(),x1=a("li"),Jre=a("strong"),Z6o=o("xlm-roberta"),eTo=o(" \u2014 "),vI=a("a"),oTo=o("XLMRobertaForMaskedLM"),rTo=o(" (XLM-RoBERTa model)"),tTo=l(),k1=a("li"),Yre=a("strong"),aTo=o("xlm-roberta-xl"),nTo=o(" \u2014 "),TI=a("a"),sTo=o("XLMRobertaXLForMaskedLM"),lTo=o(" (XLM-RoBERTa-XL model)"),iTo=l(),R1=a("li"),Kre=a("strong"),dTo=o("yoso"),cTo=o(" \u2014 "),FI=a("a"),fTo=o("YosoForMaskedLM"),mTo=o(" (YOSO model)"),gTo=l(),S1=a("p"),hTo=o("The model is set in evaluation mode by default using "),Zre=a("code"),pTo=o("model.eval()"),_To=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=a("code"),uTo=o("model.train()"),bTo=l(),ote=a("p"),vTo=o("Examples:"),TTo=l(),f(m5.$$.fragment),Fke=l(),id=a("h2"),P1=a("a"),rte=a("span"),f(g5.$$.fragment),FTo=l(),tte=a("span"),CTo=o("AutoModelForSeq2SeqLM"),Cke=l(),er=a("div"),f(h5.$$.fragment),MTo=l(),dd=a("p"),ETo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ate=a("code"),yTo=o("from_pretrained()"),wTo=o("class method or the "),nte=a("code"),ATo=o("from_config()"),LTo=o(`class
method.`),BTo=l(),p5=a("p"),xTo=o("This class cannot be instantiated directly using "),ste=a("code"),kTo=o("__init__()"),RTo=o(" (throws an error)."),STo=l(),Hr=a("div"),f(_5.$$.fragment),PTo=l(),lte=a("p"),$To=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ITo=l(),cd=a("p"),NTo=o(`Note:
Loading a model from its configuration file does `),ite=a("strong"),DTo=o("not"),jTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dte=a("code"),qTo=o("from_pretrained()"),GTo=o("to load the model weights."),OTo=l(),cte=a("p"),XTo=o("Examples:"),VTo=l(),f(u5.$$.fragment),zTo=l(),Ge=a("div"),f(b5.$$.fragment),WTo=l(),fte=a("p"),QTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HTo=l(),Ha=a("p"),UTo=o("The model class to instantiate is selected based on the "),mte=a("code"),JTo=o("model_type"),YTo=o(` property of the config object (either
passed as an argument or loaded from `),gte=a("code"),KTo=o("pretrained_model_name_or_path"),ZTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hte=a("code"),eFo=o("pretrained_model_name_or_path"),oFo=o(":"),rFo=l(),se=a("ul"),$1=a("li"),pte=a("strong"),tFo=o("bart"),aFo=o(" \u2014 "),CI=a("a"),nFo=o("BartForConditionalGeneration"),sFo=o(" (BART model)"),lFo=l(),I1=a("li"),_te=a("strong"),iFo=o("bigbird_pegasus"),dFo=o(" \u2014 "),MI=a("a"),cFo=o("BigBirdPegasusForConditionalGeneration"),fFo=o(" (BigBirdPegasus model)"),mFo=l(),N1=a("li"),ute=a("strong"),gFo=o("blenderbot"),hFo=o(" \u2014 "),EI=a("a"),pFo=o("BlenderbotForConditionalGeneration"),_Fo=o(" (Blenderbot model)"),uFo=l(),D1=a("li"),bte=a("strong"),bFo=o("blenderbot-small"),vFo=o(" \u2014 "),yI=a("a"),TFo=o("BlenderbotSmallForConditionalGeneration"),FFo=o(" (BlenderbotSmall model)"),CFo=l(),j1=a("li"),vte=a("strong"),MFo=o("encoder-decoder"),EFo=o(" \u2014 "),wI=a("a"),yFo=o("EncoderDecoderModel"),wFo=o(" (Encoder decoder model)"),AFo=l(),q1=a("li"),Tte=a("strong"),LFo=o("fsmt"),BFo=o(" \u2014 "),AI=a("a"),xFo=o("FSMTForConditionalGeneration"),kFo=o(" (FairSeq Machine-Translation model)"),RFo=l(),G1=a("li"),Fte=a("strong"),SFo=o("led"),PFo=o(" \u2014 "),LI=a("a"),$Fo=o("LEDForConditionalGeneration"),IFo=o(" (LED model)"),NFo=l(),O1=a("li"),Cte=a("strong"),DFo=o("m2m_100"),jFo=o(" \u2014 "),BI=a("a"),qFo=o("M2M100ForConditionalGeneration"),GFo=o(" (M2M100 model)"),OFo=l(),X1=a("li"),Mte=a("strong"),XFo=o("marian"),VFo=o(" \u2014 "),xI=a("a"),zFo=o("MarianMTModel"),WFo=o(" (Marian model)"),QFo=l(),V1=a("li"),Ete=a("strong"),HFo=o("mbart"),UFo=o(" \u2014 "),kI=a("a"),JFo=o("MBartForConditionalGeneration"),YFo=o(" (mBART model)"),KFo=l(),z1=a("li"),yte=a("strong"),ZFo=o("mt5"),eCo=o(" \u2014 "),RI=a("a"),oCo=o("MT5ForConditionalGeneration"),rCo=o(" (mT5 model)"),tCo=l(),W1=a("li"),wte=a("strong"),aCo=o("pegasus"),nCo=o(" \u2014 "),SI=a("a"),sCo=o("PegasusForConditionalGeneration"),lCo=o(" (Pegasus model)"),iCo=l(),Q1=a("li"),Ate=a("strong"),dCo=o("plbart"),cCo=o(" \u2014 "),PI=a("a"),fCo=o("PLBartForConditionalGeneration"),mCo=o(" (PLBart model)"),gCo=l(),H1=a("li"),Lte=a("strong"),hCo=o("prophetnet"),pCo=o(" \u2014 "),$I=a("a"),_Co=o("ProphetNetForConditionalGeneration"),uCo=o(" (ProphetNet model)"),bCo=l(),U1=a("li"),Bte=a("strong"),vCo=o("t5"),TCo=o(" \u2014 "),II=a("a"),FCo=o("T5ForConditionalGeneration"),CCo=o(" (T5 model)"),MCo=l(),J1=a("li"),xte=a("strong"),ECo=o("xlm-prophetnet"),yCo=o(" \u2014 "),NI=a("a"),wCo=o("XLMProphetNetForConditionalGeneration"),ACo=o(" (XLMProphetNet model)"),LCo=l(),Y1=a("p"),BCo=o("The model is set in evaluation mode by default using "),kte=a("code"),xCo=o("model.eval()"),kCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rte=a("code"),RCo=o("model.train()"),SCo=l(),Ste=a("p"),PCo=o("Examples:"),$Co=l(),f(v5.$$.fragment),Mke=l(),fd=a("h2"),K1=a("a"),Pte=a("span"),f(T5.$$.fragment),ICo=l(),$te=a("span"),NCo=o("AutoModelForSequenceClassification"),Eke=l(),or=a("div"),f(F5.$$.fragment),DCo=l(),md=a("p"),jCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=a("code"),qCo=o("from_pretrained()"),GCo=o("class method or the "),Nte=a("code"),OCo=o("from_config()"),XCo=o(`class
method.`),VCo=l(),C5=a("p"),zCo=o("This class cannot be instantiated directly using "),Dte=a("code"),WCo=o("__init__()"),QCo=o(" (throws an error)."),HCo=l(),Ur=a("div"),f(M5.$$.fragment),UCo=l(),jte=a("p"),JCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YCo=l(),gd=a("p"),KCo=o(`Note:
Loading a model from its configuration file does `),qte=a("strong"),ZCo=o("not"),eMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=a("code"),oMo=o("from_pretrained()"),rMo=o("to load the model weights."),tMo=l(),Ote=a("p"),aMo=o("Examples:"),nMo=l(),f(E5.$$.fragment),sMo=l(),Oe=a("div"),f(y5.$$.fragment),lMo=l(),Xte=a("p"),iMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dMo=l(),Ua=a("p"),cMo=o("The model class to instantiate is selected based on the "),Vte=a("code"),fMo=o("model_type"),mMo=o(` property of the config object (either
passed as an argument or loaded from `),zte=a("code"),gMo=o("pretrained_model_name_or_path"),hMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wte=a("code"),pMo=o("pretrained_model_name_or_path"),_Mo=o(":"),uMo=l(),A=a("ul"),Z1=a("li"),Qte=a("strong"),bMo=o("albert"),vMo=o(" \u2014 "),DI=a("a"),TMo=o("AlbertForSequenceClassification"),FMo=o(" (ALBERT model)"),CMo=l(),e9=a("li"),Hte=a("strong"),MMo=o("bart"),EMo=o(" \u2014 "),jI=a("a"),yMo=o("BartForSequenceClassification"),wMo=o(" (BART model)"),AMo=l(),o9=a("li"),Ute=a("strong"),LMo=o("bert"),BMo=o(" \u2014 "),qI=a("a"),xMo=o("BertForSequenceClassification"),kMo=o(" (BERT model)"),RMo=l(),r9=a("li"),Jte=a("strong"),SMo=o("big_bird"),PMo=o(" \u2014 "),GI=a("a"),$Mo=o("BigBirdForSequenceClassification"),IMo=o(" (BigBird model)"),NMo=l(),t9=a("li"),Yte=a("strong"),DMo=o("bigbird_pegasus"),jMo=o(" \u2014 "),OI=a("a"),qMo=o("BigBirdPegasusForSequenceClassification"),GMo=o(" (BigBirdPegasus model)"),OMo=l(),a9=a("li"),Kte=a("strong"),XMo=o("camembert"),VMo=o(" \u2014 "),XI=a("a"),zMo=o("CamembertForSequenceClassification"),WMo=o(" (CamemBERT model)"),QMo=l(),n9=a("li"),Zte=a("strong"),HMo=o("canine"),UMo=o(" \u2014 "),VI=a("a"),JMo=o("CanineForSequenceClassification"),YMo=o(" (Canine model)"),KMo=l(),s9=a("li"),eae=a("strong"),ZMo=o("convbert"),e4o=o(" \u2014 "),zI=a("a"),o4o=o("ConvBertForSequenceClassification"),r4o=o(" (ConvBERT model)"),t4o=l(),l9=a("li"),oae=a("strong"),a4o=o("ctrl"),n4o=o(" \u2014 "),WI=a("a"),s4o=o("CTRLForSequenceClassification"),l4o=o(" (CTRL model)"),i4o=l(),i9=a("li"),rae=a("strong"),d4o=o("data2vec-text"),c4o=o(" \u2014 "),QI=a("a"),f4o=o("Data2VecTextForSequenceClassification"),m4o=o(" (Data2VecText model)"),g4o=l(),d9=a("li"),tae=a("strong"),h4o=o("deberta"),p4o=o(" \u2014 "),HI=a("a"),_4o=o("DebertaForSequenceClassification"),u4o=o(" (DeBERTa model)"),b4o=l(),c9=a("li"),aae=a("strong"),v4o=o("deberta-v2"),T4o=o(" \u2014 "),UI=a("a"),F4o=o("DebertaV2ForSequenceClassification"),C4o=o(" (DeBERTa-v2 model)"),M4o=l(),f9=a("li"),nae=a("strong"),E4o=o("distilbert"),y4o=o(" \u2014 "),JI=a("a"),w4o=o("DistilBertForSequenceClassification"),A4o=o(" (DistilBERT model)"),L4o=l(),m9=a("li"),sae=a("strong"),B4o=o("electra"),x4o=o(" \u2014 "),YI=a("a"),k4o=o("ElectraForSequenceClassification"),R4o=o(" (ELECTRA model)"),S4o=l(),g9=a("li"),lae=a("strong"),P4o=o("flaubert"),$4o=o(" \u2014 "),KI=a("a"),I4o=o("FlaubertForSequenceClassification"),N4o=o(" (FlauBERT model)"),D4o=l(),h9=a("li"),iae=a("strong"),j4o=o("fnet"),q4o=o(" \u2014 "),ZI=a("a"),G4o=o("FNetForSequenceClassification"),O4o=o(" (FNet model)"),X4o=l(),p9=a("li"),dae=a("strong"),V4o=o("funnel"),z4o=o(" \u2014 "),eN=a("a"),W4o=o("FunnelForSequenceClassification"),Q4o=o(" (Funnel Transformer model)"),H4o=l(),_9=a("li"),cae=a("strong"),U4o=o("gpt2"),J4o=o(" \u2014 "),oN=a("a"),Y4o=o("GPT2ForSequenceClassification"),K4o=o(" (OpenAI GPT-2 model)"),Z4o=l(),u9=a("li"),fae=a("strong"),eEo=o("gpt_neo"),oEo=o(" \u2014 "),rN=a("a"),rEo=o("GPTNeoForSequenceClassification"),tEo=o(" (GPT Neo model)"),aEo=l(),b9=a("li"),mae=a("strong"),nEo=o("gptj"),sEo=o(" \u2014 "),tN=a("a"),lEo=o("GPTJForSequenceClassification"),iEo=o(" (GPT-J model)"),dEo=l(),v9=a("li"),gae=a("strong"),cEo=o("ibert"),fEo=o(" \u2014 "),aN=a("a"),mEo=o("IBertForSequenceClassification"),gEo=o(" (I-BERT model)"),hEo=l(),T9=a("li"),hae=a("strong"),pEo=o("layoutlm"),_Eo=o(" \u2014 "),nN=a("a"),uEo=o("LayoutLMForSequenceClassification"),bEo=o(" (LayoutLM model)"),vEo=l(),F9=a("li"),pae=a("strong"),TEo=o("layoutlmv2"),FEo=o(" \u2014 "),sN=a("a"),CEo=o("LayoutLMv2ForSequenceClassification"),MEo=o(" (LayoutLMv2 model)"),EEo=l(),C9=a("li"),_ae=a("strong"),yEo=o("led"),wEo=o(" \u2014 "),lN=a("a"),AEo=o("LEDForSequenceClassification"),LEo=o(" (LED model)"),BEo=l(),M9=a("li"),uae=a("strong"),xEo=o("longformer"),kEo=o(" \u2014 "),iN=a("a"),REo=o("LongformerForSequenceClassification"),SEo=o(" (Longformer model)"),PEo=l(),E9=a("li"),bae=a("strong"),$Eo=o("mbart"),IEo=o(" \u2014 "),dN=a("a"),NEo=o("MBartForSequenceClassification"),DEo=o(" (mBART model)"),jEo=l(),y9=a("li"),vae=a("strong"),qEo=o("megatron-bert"),GEo=o(" \u2014 "),cN=a("a"),OEo=o("MegatronBertForSequenceClassification"),XEo=o(" (MegatronBert model)"),VEo=l(),w9=a("li"),Tae=a("strong"),zEo=o("mobilebert"),WEo=o(" \u2014 "),fN=a("a"),QEo=o("MobileBertForSequenceClassification"),HEo=o(" (MobileBERT model)"),UEo=l(),A9=a("li"),Fae=a("strong"),JEo=o("mpnet"),YEo=o(" \u2014 "),mN=a("a"),KEo=o("MPNetForSequenceClassification"),ZEo=o(" (MPNet model)"),e5o=l(),L9=a("li"),Cae=a("strong"),o5o=o("nystromformer"),r5o=o(" \u2014 "),gN=a("a"),t5o=o("NystromformerForSequenceClassification"),a5o=o(" (Nystromformer model)"),n5o=l(),B9=a("li"),Mae=a("strong"),s5o=o("openai-gpt"),l5o=o(" \u2014 "),hN=a("a"),i5o=o("OpenAIGPTForSequenceClassification"),d5o=o(" (OpenAI GPT model)"),c5o=l(),x9=a("li"),Eae=a("strong"),f5o=o("perceiver"),m5o=o(" \u2014 "),pN=a("a"),g5o=o("PerceiverForSequenceClassification"),h5o=o(" (Perceiver model)"),p5o=l(),k9=a("li"),yae=a("strong"),_5o=o("plbart"),u5o=o(" \u2014 "),_N=a("a"),b5o=o("PLBartForSequenceClassification"),v5o=o(" (PLBart model)"),T5o=l(),R9=a("li"),wae=a("strong"),F5o=o("qdqbert"),C5o=o(" \u2014 "),uN=a("a"),M5o=o("QDQBertForSequenceClassification"),E5o=o(" (QDQBert model)"),y5o=l(),S9=a("li"),Aae=a("strong"),w5o=o("reformer"),A5o=o(" \u2014 "),bN=a("a"),L5o=o("ReformerForSequenceClassification"),B5o=o(" (Reformer model)"),x5o=l(),P9=a("li"),Lae=a("strong"),k5o=o("rembert"),R5o=o(" \u2014 "),vN=a("a"),S5o=o("RemBertForSequenceClassification"),P5o=o(" (RemBERT model)"),$5o=l(),$9=a("li"),Bae=a("strong"),I5o=o("roberta"),N5o=o(" \u2014 "),TN=a("a"),D5o=o("RobertaForSequenceClassification"),j5o=o(" (RoBERTa model)"),q5o=l(),I9=a("li"),xae=a("strong"),G5o=o("roformer"),O5o=o(" \u2014 "),FN=a("a"),X5o=o("RoFormerForSequenceClassification"),V5o=o(" (RoFormer model)"),z5o=l(),N9=a("li"),kae=a("strong"),W5o=o("squeezebert"),Q5o=o(" \u2014 "),CN=a("a"),H5o=o("SqueezeBertForSequenceClassification"),U5o=o(" (SqueezeBERT model)"),J5o=l(),D9=a("li"),Rae=a("strong"),Y5o=o("tapas"),K5o=o(" \u2014 "),MN=a("a"),Z5o=o("TapasForSequenceClassification"),eyo=o(" (TAPAS model)"),oyo=l(),j9=a("li"),Sae=a("strong"),ryo=o("transfo-xl"),tyo=o(" \u2014 "),EN=a("a"),ayo=o("TransfoXLForSequenceClassification"),nyo=o(" (Transformer-XL model)"),syo=l(),q9=a("li"),Pae=a("strong"),lyo=o("xlm"),iyo=o(" \u2014 "),yN=a("a"),dyo=o("XLMForSequenceClassification"),cyo=o(" (XLM model)"),fyo=l(),G9=a("li"),$ae=a("strong"),myo=o("xlm-roberta"),gyo=o(" \u2014 "),wN=a("a"),hyo=o("XLMRobertaForSequenceClassification"),pyo=o(" (XLM-RoBERTa model)"),_yo=l(),O9=a("li"),Iae=a("strong"),uyo=o("xlm-roberta-xl"),byo=o(" \u2014 "),AN=a("a"),vyo=o("XLMRobertaXLForSequenceClassification"),Tyo=o(" (XLM-RoBERTa-XL model)"),Fyo=l(),X9=a("li"),Nae=a("strong"),Cyo=o("xlnet"),Myo=o(" \u2014 "),LN=a("a"),Eyo=o("XLNetForSequenceClassification"),yyo=o(" (XLNet model)"),wyo=l(),V9=a("li"),Dae=a("strong"),Ayo=o("yoso"),Lyo=o(" \u2014 "),BN=a("a"),Byo=o("YosoForSequenceClassification"),xyo=o(" (YOSO model)"),kyo=l(),z9=a("p"),Ryo=o("The model is set in evaluation mode by default using "),jae=a("code"),Syo=o("model.eval()"),Pyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qae=a("code"),$yo=o("model.train()"),Iyo=l(),Gae=a("p"),Nyo=o("Examples:"),Dyo=l(),f(w5.$$.fragment),yke=l(),hd=a("h2"),W9=a("a"),Oae=a("span"),f(A5.$$.fragment),jyo=l(),Xae=a("span"),qyo=o("AutoModelForMultipleChoice"),wke=l(),rr=a("div"),f(L5.$$.fragment),Gyo=l(),pd=a("p"),Oyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Vae=a("code"),Xyo=o("from_pretrained()"),Vyo=o("class method or the "),zae=a("code"),zyo=o("from_config()"),Wyo=o(`class
method.`),Qyo=l(),B5=a("p"),Hyo=o("This class cannot be instantiated directly using "),Wae=a("code"),Uyo=o("__init__()"),Jyo=o(" (throws an error)."),Yyo=l(),Jr=a("div"),f(x5.$$.fragment),Kyo=l(),Qae=a("p"),Zyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ewo=l(),_d=a("p"),owo=o(`Note:
Loading a model from its configuration file does `),Hae=a("strong"),rwo=o("not"),two=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uae=a("code"),awo=o("from_pretrained()"),nwo=o("to load the model weights."),swo=l(),Jae=a("p"),lwo=o("Examples:"),iwo=l(),f(k5.$$.fragment),dwo=l(),Xe=a("div"),f(R5.$$.fragment),cwo=l(),Yae=a("p"),fwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mwo=l(),Ja=a("p"),gwo=o("The model class to instantiate is selected based on the "),Kae=a("code"),hwo=o("model_type"),pwo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),_wo=o("pretrained_model_name_or_path"),uwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),bwo=o("pretrained_model_name_or_path"),vwo=o(":"),Two=l(),G=a("ul"),Q9=a("li"),one=a("strong"),Fwo=o("albert"),Cwo=o(" \u2014 "),xN=a("a"),Mwo=o("AlbertForMultipleChoice"),Ewo=o(" (ALBERT model)"),ywo=l(),H9=a("li"),rne=a("strong"),wwo=o("bert"),Awo=o(" \u2014 "),kN=a("a"),Lwo=o("BertForMultipleChoice"),Bwo=o(" (BERT model)"),xwo=l(),U9=a("li"),tne=a("strong"),kwo=o("big_bird"),Rwo=o(" \u2014 "),RN=a("a"),Swo=o("BigBirdForMultipleChoice"),Pwo=o(" (BigBird model)"),$wo=l(),J9=a("li"),ane=a("strong"),Iwo=o("camembert"),Nwo=o(" \u2014 "),SN=a("a"),Dwo=o("CamembertForMultipleChoice"),jwo=o(" (CamemBERT model)"),qwo=l(),Y9=a("li"),nne=a("strong"),Gwo=o("canine"),Owo=o(" \u2014 "),PN=a("a"),Xwo=o("CanineForMultipleChoice"),Vwo=o(" (Canine model)"),zwo=l(),K9=a("li"),sne=a("strong"),Wwo=o("convbert"),Qwo=o(" \u2014 "),$N=a("a"),Hwo=o("ConvBertForMultipleChoice"),Uwo=o(" (ConvBERT model)"),Jwo=l(),Z9=a("li"),lne=a("strong"),Ywo=o("data2vec-text"),Kwo=o(" \u2014 "),IN=a("a"),Zwo=o("Data2VecTextForMultipleChoice"),eAo=o(" (Data2VecText model)"),oAo=l(),eb=a("li"),ine=a("strong"),rAo=o("distilbert"),tAo=o(" \u2014 "),NN=a("a"),aAo=o("DistilBertForMultipleChoice"),nAo=o(" (DistilBERT model)"),sAo=l(),ob=a("li"),dne=a("strong"),lAo=o("electra"),iAo=o(" \u2014 "),DN=a("a"),dAo=o("ElectraForMultipleChoice"),cAo=o(" (ELECTRA model)"),fAo=l(),rb=a("li"),cne=a("strong"),mAo=o("flaubert"),gAo=o(" \u2014 "),jN=a("a"),hAo=o("FlaubertForMultipleChoice"),pAo=o(" (FlauBERT model)"),_Ao=l(),tb=a("li"),fne=a("strong"),uAo=o("fnet"),bAo=o(" \u2014 "),qN=a("a"),vAo=o("FNetForMultipleChoice"),TAo=o(" (FNet model)"),FAo=l(),ab=a("li"),mne=a("strong"),CAo=o("funnel"),MAo=o(" \u2014 "),GN=a("a"),EAo=o("FunnelForMultipleChoice"),yAo=o(" (Funnel Transformer model)"),wAo=l(),nb=a("li"),gne=a("strong"),AAo=o("ibert"),LAo=o(" \u2014 "),ON=a("a"),BAo=o("IBertForMultipleChoice"),xAo=o(" (I-BERT model)"),kAo=l(),sb=a("li"),hne=a("strong"),RAo=o("longformer"),SAo=o(" \u2014 "),XN=a("a"),PAo=o("LongformerForMultipleChoice"),$Ao=o(" (Longformer model)"),IAo=l(),lb=a("li"),pne=a("strong"),NAo=o("megatron-bert"),DAo=o(" \u2014 "),VN=a("a"),jAo=o("MegatronBertForMultipleChoice"),qAo=o(" (MegatronBert model)"),GAo=l(),ib=a("li"),_ne=a("strong"),OAo=o("mobilebert"),XAo=o(" \u2014 "),zN=a("a"),VAo=o("MobileBertForMultipleChoice"),zAo=o(" (MobileBERT model)"),WAo=l(),db=a("li"),une=a("strong"),QAo=o("mpnet"),HAo=o(" \u2014 "),WN=a("a"),UAo=o("MPNetForMultipleChoice"),JAo=o(" (MPNet model)"),YAo=l(),cb=a("li"),bne=a("strong"),KAo=o("nystromformer"),ZAo=o(" \u2014 "),QN=a("a"),e0o=o("NystromformerForMultipleChoice"),o0o=o(" (Nystromformer model)"),r0o=l(),fb=a("li"),vne=a("strong"),t0o=o("qdqbert"),a0o=o(" \u2014 "),HN=a("a"),n0o=o("QDQBertForMultipleChoice"),s0o=o(" (QDQBert model)"),l0o=l(),mb=a("li"),Tne=a("strong"),i0o=o("rembert"),d0o=o(" \u2014 "),UN=a("a"),c0o=o("RemBertForMultipleChoice"),f0o=o(" (RemBERT model)"),m0o=l(),gb=a("li"),Fne=a("strong"),g0o=o("roberta"),h0o=o(" \u2014 "),JN=a("a"),p0o=o("RobertaForMultipleChoice"),_0o=o(" (RoBERTa model)"),u0o=l(),hb=a("li"),Cne=a("strong"),b0o=o("roformer"),v0o=o(" \u2014 "),YN=a("a"),T0o=o("RoFormerForMultipleChoice"),F0o=o(" (RoFormer model)"),C0o=l(),pb=a("li"),Mne=a("strong"),M0o=o("squeezebert"),E0o=o(" \u2014 "),KN=a("a"),y0o=o("SqueezeBertForMultipleChoice"),w0o=o(" (SqueezeBERT model)"),A0o=l(),_b=a("li"),Ene=a("strong"),L0o=o("xlm"),B0o=o(" \u2014 "),ZN=a("a"),x0o=o("XLMForMultipleChoice"),k0o=o(" (XLM model)"),R0o=l(),ub=a("li"),yne=a("strong"),S0o=o("xlm-roberta"),P0o=o(" \u2014 "),eD=a("a"),$0o=o("XLMRobertaForMultipleChoice"),I0o=o(" (XLM-RoBERTa model)"),N0o=l(),bb=a("li"),wne=a("strong"),D0o=o("xlm-roberta-xl"),j0o=o(" \u2014 "),oD=a("a"),q0o=o("XLMRobertaXLForMultipleChoice"),G0o=o(" (XLM-RoBERTa-XL model)"),O0o=l(),vb=a("li"),Ane=a("strong"),X0o=o("xlnet"),V0o=o(" \u2014 "),rD=a("a"),z0o=o("XLNetForMultipleChoice"),W0o=o(" (XLNet model)"),Q0o=l(),Tb=a("li"),Lne=a("strong"),H0o=o("yoso"),U0o=o(" \u2014 "),tD=a("a"),J0o=o("YosoForMultipleChoice"),Y0o=o(" (YOSO model)"),K0o=l(),Fb=a("p"),Z0o=o("The model is set in evaluation mode by default using "),Bne=a("code"),eLo=o("model.eval()"),oLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=a("code"),rLo=o("model.train()"),tLo=l(),kne=a("p"),aLo=o("Examples:"),nLo=l(),f(S5.$$.fragment),Ake=l(),ud=a("h2"),Cb=a("a"),Rne=a("span"),f(P5.$$.fragment),sLo=l(),Sne=a("span"),lLo=o("AutoModelForNextSentencePrediction"),Lke=l(),tr=a("div"),f($5.$$.fragment),iLo=l(),bd=a("p"),dLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pne=a("code"),cLo=o("from_pretrained()"),fLo=o("class method or the "),$ne=a("code"),mLo=o("from_config()"),gLo=o(`class
method.`),hLo=l(),I5=a("p"),pLo=o("This class cannot be instantiated directly using "),Ine=a("code"),_Lo=o("__init__()"),uLo=o(" (throws an error)."),bLo=l(),Yr=a("div"),f(N5.$$.fragment),vLo=l(),Nne=a("p"),TLo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FLo=l(),vd=a("p"),CLo=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),MLo=o("not"),ELo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=a("code"),yLo=o("from_pretrained()"),wLo=o("to load the model weights."),ALo=l(),qne=a("p"),LLo=o("Examples:"),BLo=l(),f(D5.$$.fragment),xLo=l(),Ve=a("div"),f(j5.$$.fragment),kLo=l(),Gne=a("p"),RLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SLo=l(),Ya=a("p"),PLo=o("The model class to instantiate is selected based on the "),One=a("code"),$Lo=o("model_type"),ILo=o(` property of the config object (either
passed as an argument or loaded from `),Xne=a("code"),NLo=o("pretrained_model_name_or_path"),DLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=a("code"),jLo=o("pretrained_model_name_or_path"),qLo=o(":"),GLo=l(),da=a("ul"),Mb=a("li"),zne=a("strong"),OLo=o("bert"),XLo=o(" \u2014 "),aD=a("a"),VLo=o("BertForNextSentencePrediction"),zLo=o(" (BERT model)"),WLo=l(),Eb=a("li"),Wne=a("strong"),QLo=o("fnet"),HLo=o(" \u2014 "),nD=a("a"),ULo=o("FNetForNextSentencePrediction"),JLo=o(" (FNet model)"),YLo=l(),yb=a("li"),Qne=a("strong"),KLo=o("megatron-bert"),ZLo=o(" \u2014 "),sD=a("a"),e7o=o("MegatronBertForNextSentencePrediction"),o7o=o(" (MegatronBert model)"),r7o=l(),wb=a("li"),Hne=a("strong"),t7o=o("mobilebert"),a7o=o(" \u2014 "),lD=a("a"),n7o=o("MobileBertForNextSentencePrediction"),s7o=o(" (MobileBERT model)"),l7o=l(),Ab=a("li"),Une=a("strong"),i7o=o("qdqbert"),d7o=o(" \u2014 "),iD=a("a"),c7o=o("QDQBertForNextSentencePrediction"),f7o=o(" (QDQBert model)"),m7o=l(),Lb=a("p"),g7o=o("The model is set in evaluation mode by default using "),Jne=a("code"),h7o=o("model.eval()"),p7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yne=a("code"),_7o=o("model.train()"),u7o=l(),Kne=a("p"),b7o=o("Examples:"),v7o=l(),f(q5.$$.fragment),Bke=l(),Td=a("h2"),Bb=a("a"),Zne=a("span"),f(G5.$$.fragment),T7o=l(),ese=a("span"),F7o=o("AutoModelForTokenClassification"),xke=l(),ar=a("div"),f(O5.$$.fragment),C7o=l(),Fd=a("p"),M7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ose=a("code"),E7o=o("from_pretrained()"),y7o=o("class method or the "),rse=a("code"),w7o=o("from_config()"),A7o=o(`class
method.`),L7o=l(),X5=a("p"),B7o=o("This class cannot be instantiated directly using "),tse=a("code"),x7o=o("__init__()"),k7o=o(" (throws an error)."),R7o=l(),Kr=a("div"),f(V5.$$.fragment),S7o=l(),ase=a("p"),P7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$7o=l(),Cd=a("p"),I7o=o(`Note:
Loading a model from its configuration file does `),nse=a("strong"),N7o=o("not"),D7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=a("code"),j7o=o("from_pretrained()"),q7o=o("to load the model weights."),G7o=l(),lse=a("p"),O7o=o("Examples:"),X7o=l(),f(z5.$$.fragment),V7o=l(),ze=a("div"),f(W5.$$.fragment),z7o=l(),ise=a("p"),W7o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Q7o=l(),Ka=a("p"),H7o=o("The model class to instantiate is selected based on the "),dse=a("code"),U7o=o("model_type"),J7o=o(` property of the config object (either
passed as an argument or loaded from `),cse=a("code"),Y7o=o("pretrained_model_name_or_path"),K7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=a("code"),Z7o=o("pretrained_model_name_or_path"),e8o=o(":"),o8o=l(),j=a("ul"),xb=a("li"),mse=a("strong"),r8o=o("albert"),t8o=o(" \u2014 "),dD=a("a"),a8o=o("AlbertForTokenClassification"),n8o=o(" (ALBERT model)"),s8o=l(),kb=a("li"),gse=a("strong"),l8o=o("bert"),i8o=o(" \u2014 "),cD=a("a"),d8o=o("BertForTokenClassification"),c8o=o(" (BERT model)"),f8o=l(),Rb=a("li"),hse=a("strong"),m8o=o("big_bird"),g8o=o(" \u2014 "),fD=a("a"),h8o=o("BigBirdForTokenClassification"),p8o=o(" (BigBird model)"),_8o=l(),Sb=a("li"),pse=a("strong"),u8o=o("camembert"),b8o=o(" \u2014 "),mD=a("a"),v8o=o("CamembertForTokenClassification"),T8o=o(" (CamemBERT model)"),F8o=l(),Pb=a("li"),_se=a("strong"),C8o=o("canine"),M8o=o(" \u2014 "),gD=a("a"),E8o=o("CanineForTokenClassification"),y8o=o(" (Canine model)"),w8o=l(),$b=a("li"),use=a("strong"),A8o=o("convbert"),L8o=o(" \u2014 "),hD=a("a"),B8o=o("ConvBertForTokenClassification"),x8o=o(" (ConvBERT model)"),k8o=l(),Ib=a("li"),bse=a("strong"),R8o=o("data2vec-text"),S8o=o(" \u2014 "),pD=a("a"),P8o=o("Data2VecTextForTokenClassification"),$8o=o(" (Data2VecText model)"),I8o=l(),Nb=a("li"),vse=a("strong"),N8o=o("deberta"),D8o=o(" \u2014 "),_D=a("a"),j8o=o("DebertaForTokenClassification"),q8o=o(" (DeBERTa model)"),G8o=l(),Db=a("li"),Tse=a("strong"),O8o=o("deberta-v2"),X8o=o(" \u2014 "),uD=a("a"),V8o=o("DebertaV2ForTokenClassification"),z8o=o(" (DeBERTa-v2 model)"),W8o=l(),jb=a("li"),Fse=a("strong"),Q8o=o("distilbert"),H8o=o(" \u2014 "),bD=a("a"),U8o=o("DistilBertForTokenClassification"),J8o=o(" (DistilBERT model)"),Y8o=l(),qb=a("li"),Cse=a("strong"),K8o=o("electra"),Z8o=o(" \u2014 "),vD=a("a"),eBo=o("ElectraForTokenClassification"),oBo=o(" (ELECTRA model)"),rBo=l(),Gb=a("li"),Mse=a("strong"),tBo=o("flaubert"),aBo=o(" \u2014 "),TD=a("a"),nBo=o("FlaubertForTokenClassification"),sBo=o(" (FlauBERT model)"),lBo=l(),Ob=a("li"),Ese=a("strong"),iBo=o("fnet"),dBo=o(" \u2014 "),FD=a("a"),cBo=o("FNetForTokenClassification"),fBo=o(" (FNet model)"),mBo=l(),Xb=a("li"),yse=a("strong"),gBo=o("funnel"),hBo=o(" \u2014 "),CD=a("a"),pBo=o("FunnelForTokenClassification"),_Bo=o(" (Funnel Transformer model)"),uBo=l(),Vb=a("li"),wse=a("strong"),bBo=o("gpt2"),vBo=o(" \u2014 "),MD=a("a"),TBo=o("GPT2ForTokenClassification"),FBo=o(" (OpenAI GPT-2 model)"),CBo=l(),zb=a("li"),Ase=a("strong"),MBo=o("ibert"),EBo=o(" \u2014 "),ED=a("a"),yBo=o("IBertForTokenClassification"),wBo=o(" (I-BERT model)"),ABo=l(),Wb=a("li"),Lse=a("strong"),LBo=o("layoutlm"),BBo=o(" \u2014 "),yD=a("a"),xBo=o("LayoutLMForTokenClassification"),kBo=o(" (LayoutLM model)"),RBo=l(),Qb=a("li"),Bse=a("strong"),SBo=o("layoutlmv2"),PBo=o(" \u2014 "),wD=a("a"),$Bo=o("LayoutLMv2ForTokenClassification"),IBo=o(" (LayoutLMv2 model)"),NBo=l(),Hb=a("li"),xse=a("strong"),DBo=o("longformer"),jBo=o(" \u2014 "),AD=a("a"),qBo=o("LongformerForTokenClassification"),GBo=o(" (Longformer model)"),OBo=l(),Ub=a("li"),kse=a("strong"),XBo=o("megatron-bert"),VBo=o(" \u2014 "),LD=a("a"),zBo=o("MegatronBertForTokenClassification"),WBo=o(" (MegatronBert model)"),QBo=l(),Jb=a("li"),Rse=a("strong"),HBo=o("mobilebert"),UBo=o(" \u2014 "),BD=a("a"),JBo=o("MobileBertForTokenClassification"),YBo=o(" (MobileBERT model)"),KBo=l(),Yb=a("li"),Sse=a("strong"),ZBo=o("mpnet"),exo=o(" \u2014 "),xD=a("a"),oxo=o("MPNetForTokenClassification"),rxo=o(" (MPNet model)"),txo=l(),Kb=a("li"),Pse=a("strong"),axo=o("nystromformer"),nxo=o(" \u2014 "),kD=a("a"),sxo=o("NystromformerForTokenClassification"),lxo=o(" (Nystromformer model)"),ixo=l(),Zb=a("li"),$se=a("strong"),dxo=o("qdqbert"),cxo=o(" \u2014 "),RD=a("a"),fxo=o("QDQBertForTokenClassification"),mxo=o(" (QDQBert model)"),gxo=l(),e3=a("li"),Ise=a("strong"),hxo=o("rembert"),pxo=o(" \u2014 "),SD=a("a"),_xo=o("RemBertForTokenClassification"),uxo=o(" (RemBERT model)"),bxo=l(),o3=a("li"),Nse=a("strong"),vxo=o("roberta"),Txo=o(" \u2014 "),PD=a("a"),Fxo=o("RobertaForTokenClassification"),Cxo=o(" (RoBERTa model)"),Mxo=l(),r3=a("li"),Dse=a("strong"),Exo=o("roformer"),yxo=o(" \u2014 "),$D=a("a"),wxo=o("RoFormerForTokenClassification"),Axo=o(" (RoFormer model)"),Lxo=l(),t3=a("li"),jse=a("strong"),Bxo=o("squeezebert"),xxo=o(" \u2014 "),ID=a("a"),kxo=o("SqueezeBertForTokenClassification"),Rxo=o(" (SqueezeBERT model)"),Sxo=l(),a3=a("li"),qse=a("strong"),Pxo=o("xlm"),$xo=o(" \u2014 "),ND=a("a"),Ixo=o("XLMForTokenClassification"),Nxo=o(" (XLM model)"),Dxo=l(),n3=a("li"),Gse=a("strong"),jxo=o("xlm-roberta"),qxo=o(" \u2014 "),DD=a("a"),Gxo=o("XLMRobertaForTokenClassification"),Oxo=o(" (XLM-RoBERTa model)"),Xxo=l(),s3=a("li"),Ose=a("strong"),Vxo=o("xlm-roberta-xl"),zxo=o(" \u2014 "),jD=a("a"),Wxo=o("XLMRobertaXLForTokenClassification"),Qxo=o(" (XLM-RoBERTa-XL model)"),Hxo=l(),l3=a("li"),Xse=a("strong"),Uxo=o("xlnet"),Jxo=o(" \u2014 "),qD=a("a"),Yxo=o("XLNetForTokenClassification"),Kxo=o(" (XLNet model)"),Zxo=l(),i3=a("li"),Vse=a("strong"),eko=o("yoso"),oko=o(" \u2014 "),GD=a("a"),rko=o("YosoForTokenClassification"),tko=o(" (YOSO model)"),ako=l(),d3=a("p"),nko=o("The model is set in evaluation mode by default using "),zse=a("code"),sko=o("model.eval()"),lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=a("code"),iko=o("model.train()"),dko=l(),Qse=a("p"),cko=o("Examples:"),fko=l(),f(Q5.$$.fragment),kke=l(),Md=a("h2"),c3=a("a"),Hse=a("span"),f(H5.$$.fragment),mko=l(),Use=a("span"),gko=o("AutoModelForQuestionAnswering"),Rke=l(),nr=a("div"),f(U5.$$.fragment),hko=l(),Ed=a("p"),pko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jse=a("code"),_ko=o("from_pretrained()"),uko=o("class method or the "),Yse=a("code"),bko=o("from_config()"),vko=o(`class
method.`),Tko=l(),J5=a("p"),Fko=o("This class cannot be instantiated directly using "),Kse=a("code"),Cko=o("__init__()"),Mko=o(" (throws an error)."),Eko=l(),Zr=a("div"),f(Y5.$$.fragment),yko=l(),Zse=a("p"),wko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ako=l(),yd=a("p"),Lko=o(`Note:
Loading a model from its configuration file does `),ele=a("strong"),Bko=o("not"),xko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("code"),kko=o("from_pretrained()"),Rko=o("to load the model weights."),Sko=l(),rle=a("p"),Pko=o("Examples:"),$ko=l(),f(K5.$$.fragment),Iko=l(),We=a("div"),f(Z5.$$.fragment),Nko=l(),tle=a("p"),Dko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jko=l(),Za=a("p"),qko=o("The model class to instantiate is selected based on the "),ale=a("code"),Gko=o("model_type"),Oko=o(` property of the config object (either
passed as an argument or loaded from `),nle=a("code"),Xko=o("pretrained_model_name_or_path"),Vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=a("code"),zko=o("pretrained_model_name_or_path"),Wko=o(":"),Qko=l(),R=a("ul"),f3=a("li"),lle=a("strong"),Hko=o("albert"),Uko=o(" \u2014 "),OD=a("a"),Jko=o("AlbertForQuestionAnswering"),Yko=o(" (ALBERT model)"),Kko=l(),m3=a("li"),ile=a("strong"),Zko=o("bart"),eRo=o(" \u2014 "),XD=a("a"),oRo=o("BartForQuestionAnswering"),rRo=o(" (BART model)"),tRo=l(),g3=a("li"),dle=a("strong"),aRo=o("bert"),nRo=o(" \u2014 "),VD=a("a"),sRo=o("BertForQuestionAnswering"),lRo=o(" (BERT model)"),iRo=l(),h3=a("li"),cle=a("strong"),dRo=o("big_bird"),cRo=o(" \u2014 "),zD=a("a"),fRo=o("BigBirdForQuestionAnswering"),mRo=o(" (BigBird model)"),gRo=l(),p3=a("li"),fle=a("strong"),hRo=o("bigbird_pegasus"),pRo=o(" \u2014 "),WD=a("a"),_Ro=o("BigBirdPegasusForQuestionAnswering"),uRo=o(" (BigBirdPegasus model)"),bRo=l(),_3=a("li"),mle=a("strong"),vRo=o("camembert"),TRo=o(" \u2014 "),QD=a("a"),FRo=o("CamembertForQuestionAnswering"),CRo=o(" (CamemBERT model)"),MRo=l(),u3=a("li"),gle=a("strong"),ERo=o("canine"),yRo=o(" \u2014 "),HD=a("a"),wRo=o("CanineForQuestionAnswering"),ARo=o(" (Canine model)"),LRo=l(),b3=a("li"),hle=a("strong"),BRo=o("convbert"),xRo=o(" \u2014 "),UD=a("a"),kRo=o("ConvBertForQuestionAnswering"),RRo=o(" (ConvBERT model)"),SRo=l(),v3=a("li"),ple=a("strong"),PRo=o("data2vec-text"),$Ro=o(" \u2014 "),JD=a("a"),IRo=o("Data2VecTextForQuestionAnswering"),NRo=o(" (Data2VecText model)"),DRo=l(),T3=a("li"),_le=a("strong"),jRo=o("deberta"),qRo=o(" \u2014 "),YD=a("a"),GRo=o("DebertaForQuestionAnswering"),ORo=o(" (DeBERTa model)"),XRo=l(),F3=a("li"),ule=a("strong"),VRo=o("deberta-v2"),zRo=o(" \u2014 "),KD=a("a"),WRo=o("DebertaV2ForQuestionAnswering"),QRo=o(" (DeBERTa-v2 model)"),HRo=l(),C3=a("li"),ble=a("strong"),URo=o("distilbert"),JRo=o(" \u2014 "),ZD=a("a"),YRo=o("DistilBertForQuestionAnswering"),KRo=o(" (DistilBERT model)"),ZRo=l(),M3=a("li"),vle=a("strong"),eSo=o("electra"),oSo=o(" \u2014 "),ej=a("a"),rSo=o("ElectraForQuestionAnswering"),tSo=o(" (ELECTRA model)"),aSo=l(),E3=a("li"),Tle=a("strong"),nSo=o("flaubert"),sSo=o(" \u2014 "),oj=a("a"),lSo=o("FlaubertForQuestionAnsweringSimple"),iSo=o(" (FlauBERT model)"),dSo=l(),y3=a("li"),Fle=a("strong"),cSo=o("fnet"),fSo=o(" \u2014 "),rj=a("a"),mSo=o("FNetForQuestionAnswering"),gSo=o(" (FNet model)"),hSo=l(),w3=a("li"),Cle=a("strong"),pSo=o("funnel"),_So=o(" \u2014 "),tj=a("a"),uSo=o("FunnelForQuestionAnswering"),bSo=o(" (Funnel Transformer model)"),vSo=l(),A3=a("li"),Mle=a("strong"),TSo=o("gptj"),FSo=o(" \u2014 "),aj=a("a"),CSo=o("GPTJForQuestionAnswering"),MSo=o(" (GPT-J model)"),ESo=l(),L3=a("li"),Ele=a("strong"),ySo=o("ibert"),wSo=o(" \u2014 "),nj=a("a"),ASo=o("IBertForQuestionAnswering"),LSo=o(" (I-BERT model)"),BSo=l(),B3=a("li"),yle=a("strong"),xSo=o("layoutlmv2"),kSo=o(" \u2014 "),sj=a("a"),RSo=o("LayoutLMv2ForQuestionAnswering"),SSo=o(" (LayoutLMv2 model)"),PSo=l(),x3=a("li"),wle=a("strong"),$So=o("led"),ISo=o(" \u2014 "),lj=a("a"),NSo=o("LEDForQuestionAnswering"),DSo=o(" (LED model)"),jSo=l(),k3=a("li"),Ale=a("strong"),qSo=o("longformer"),GSo=o(" \u2014 "),ij=a("a"),OSo=o("LongformerForQuestionAnswering"),XSo=o(" (Longformer model)"),VSo=l(),R3=a("li"),Lle=a("strong"),zSo=o("lxmert"),WSo=o(" \u2014 "),dj=a("a"),QSo=o("LxmertForQuestionAnswering"),HSo=o(" (LXMERT model)"),USo=l(),S3=a("li"),Ble=a("strong"),JSo=o("mbart"),YSo=o(" \u2014 "),cj=a("a"),KSo=o("MBartForQuestionAnswering"),ZSo=o(" (mBART model)"),ePo=l(),P3=a("li"),xle=a("strong"),oPo=o("megatron-bert"),rPo=o(" \u2014 "),fj=a("a"),tPo=o("MegatronBertForQuestionAnswering"),aPo=o(" (MegatronBert model)"),nPo=l(),$3=a("li"),kle=a("strong"),sPo=o("mobilebert"),lPo=o(" \u2014 "),mj=a("a"),iPo=o("MobileBertForQuestionAnswering"),dPo=o(" (MobileBERT model)"),cPo=l(),I3=a("li"),Rle=a("strong"),fPo=o("mpnet"),mPo=o(" \u2014 "),gj=a("a"),gPo=o("MPNetForQuestionAnswering"),hPo=o(" (MPNet model)"),pPo=l(),N3=a("li"),Sle=a("strong"),_Po=o("nystromformer"),uPo=o(" \u2014 "),hj=a("a"),bPo=o("NystromformerForQuestionAnswering"),vPo=o(" (Nystromformer model)"),TPo=l(),D3=a("li"),Ple=a("strong"),FPo=o("qdqbert"),CPo=o(" \u2014 "),pj=a("a"),MPo=o("QDQBertForQuestionAnswering"),EPo=o(" (QDQBert model)"),yPo=l(),j3=a("li"),$le=a("strong"),wPo=o("reformer"),APo=o(" \u2014 "),_j=a("a"),LPo=o("ReformerForQuestionAnswering"),BPo=o(" (Reformer model)"),xPo=l(),q3=a("li"),Ile=a("strong"),kPo=o("rembert"),RPo=o(" \u2014 "),uj=a("a"),SPo=o("RemBertForQuestionAnswering"),PPo=o(" (RemBERT model)"),$Po=l(),G3=a("li"),Nle=a("strong"),IPo=o("roberta"),NPo=o(" \u2014 "),bj=a("a"),DPo=o("RobertaForQuestionAnswering"),jPo=o(" (RoBERTa model)"),qPo=l(),O3=a("li"),Dle=a("strong"),GPo=o("roformer"),OPo=o(" \u2014 "),vj=a("a"),XPo=o("RoFormerForQuestionAnswering"),VPo=o(" (RoFormer model)"),zPo=l(),X3=a("li"),jle=a("strong"),WPo=o("splinter"),QPo=o(" \u2014 "),Tj=a("a"),HPo=o("SplinterForQuestionAnswering"),UPo=o(" (Splinter model)"),JPo=l(),V3=a("li"),qle=a("strong"),YPo=o("squeezebert"),KPo=o(" \u2014 "),Fj=a("a"),ZPo=o("SqueezeBertForQuestionAnswering"),e$o=o(" (SqueezeBERT model)"),o$o=l(),z3=a("li"),Gle=a("strong"),r$o=o("xlm"),t$o=o(" \u2014 "),Cj=a("a"),a$o=o("XLMForQuestionAnsweringSimple"),n$o=o(" (XLM model)"),s$o=l(),W3=a("li"),Ole=a("strong"),l$o=o("xlm-roberta"),i$o=o(" \u2014 "),Mj=a("a"),d$o=o("XLMRobertaForQuestionAnswering"),c$o=o(" (XLM-RoBERTa model)"),f$o=l(),Q3=a("li"),Xle=a("strong"),m$o=o("xlm-roberta-xl"),g$o=o(" \u2014 "),Ej=a("a"),h$o=o("XLMRobertaXLForQuestionAnswering"),p$o=o(" (XLM-RoBERTa-XL model)"),_$o=l(),H3=a("li"),Vle=a("strong"),u$o=o("xlnet"),b$o=o(" \u2014 "),yj=a("a"),v$o=o("XLNetForQuestionAnsweringSimple"),T$o=o(" (XLNet model)"),F$o=l(),U3=a("li"),zle=a("strong"),C$o=o("yoso"),M$o=o(" \u2014 "),wj=a("a"),E$o=o("YosoForQuestionAnswering"),y$o=o(" (YOSO model)"),w$o=l(),J3=a("p"),A$o=o("The model is set in evaluation mode by default using "),Wle=a("code"),L$o=o("model.eval()"),B$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=a("code"),x$o=o("model.train()"),k$o=l(),Hle=a("p"),R$o=o("Examples:"),S$o=l(),f(ey.$$.fragment),Ske=l(),wd=a("h2"),Y3=a("a"),Ule=a("span"),f(oy.$$.fragment),P$o=l(),Jle=a("span"),$$o=o("AutoModelForTableQuestionAnswering"),Pke=l(),sr=a("div"),f(ry.$$.fragment),I$o=l(),Ad=a("p"),N$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yle=a("code"),D$o=o("from_pretrained()"),j$o=o("class method or the "),Kle=a("code"),q$o=o("from_config()"),G$o=o(`class
method.`),O$o=l(),ty=a("p"),X$o=o("This class cannot be instantiated directly using "),Zle=a("code"),V$o=o("__init__()"),z$o=o(" (throws an error)."),W$o=l(),et=a("div"),f(ay.$$.fragment),Q$o=l(),eie=a("p"),H$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U$o=l(),Ld=a("p"),J$o=o(`Note:
Loading a model from its configuration file does `),oie=a("strong"),Y$o=o("not"),K$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rie=a("code"),Z$o=o("from_pretrained()"),eIo=o("to load the model weights."),oIo=l(),tie=a("p"),rIo=o("Examples:"),tIo=l(),f(ny.$$.fragment),aIo=l(),Qe=a("div"),f(sy.$$.fragment),nIo=l(),aie=a("p"),sIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lIo=l(),en=a("p"),iIo=o("The model class to instantiate is selected based on the "),nie=a("code"),dIo=o("model_type"),cIo=o(` property of the config object (either
passed as an argument or loaded from `),sie=a("code"),fIo=o("pretrained_model_name_or_path"),mIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=a("code"),gIo=o("pretrained_model_name_or_path"),hIo=o(":"),pIo=l(),iie=a("ul"),K3=a("li"),die=a("strong"),_Io=o("tapas"),uIo=o(" \u2014 "),Aj=a("a"),bIo=o("TapasForQuestionAnswering"),vIo=o(" (TAPAS model)"),TIo=l(),Z3=a("p"),FIo=o("The model is set in evaluation mode by default using "),cie=a("code"),CIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),EIo=o("model.train()"),yIo=l(),mie=a("p"),wIo=o("Examples:"),AIo=l(),f(ly.$$.fragment),$ke=l(),Bd=a("h2"),e2=a("a"),gie=a("span"),f(iy.$$.fragment),LIo=l(),hie=a("span"),BIo=o("AutoModelForImageClassification"),Ike=l(),lr=a("div"),f(dy.$$.fragment),xIo=l(),xd=a("p"),kIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pie=a("code"),RIo=o("from_pretrained()"),SIo=o("class method or the "),_ie=a("code"),PIo=o("from_config()"),$Io=o(`class
method.`),IIo=l(),cy=a("p"),NIo=o("This class cannot be instantiated directly using "),uie=a("code"),DIo=o("__init__()"),jIo=o(" (throws an error)."),qIo=l(),ot=a("div"),f(fy.$$.fragment),GIo=l(),bie=a("p"),OIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XIo=l(),kd=a("p"),VIo=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),zIo=o("not"),WIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tie=a("code"),QIo=o("from_pretrained()"),HIo=o("to load the model weights."),UIo=l(),Fie=a("p"),JIo=o("Examples:"),YIo=l(),f(my.$$.fragment),KIo=l(),He=a("div"),f(gy.$$.fragment),ZIo=l(),Cie=a("p"),eNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oNo=l(),on=a("p"),rNo=o("The model class to instantiate is selected based on the "),Mie=a("code"),tNo=o("model_type"),aNo=o(` property of the config object (either
passed as an argument or loaded from `),Eie=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),lNo=o("pretrained_model_name_or_path"),iNo=o(":"),dNo=l(),me=a("ul"),o2=a("li"),wie=a("strong"),cNo=o("beit"),fNo=o(" \u2014 "),Lj=a("a"),mNo=o("BeitForImageClassification"),gNo=o(" (BEiT model)"),hNo=l(),r2=a("li"),Aie=a("strong"),pNo=o("convnext"),_No=o(" \u2014 "),Bj=a("a"),uNo=o("ConvNextForImageClassification"),bNo=o(" (ConvNext model)"),vNo=l(),qs=a("li"),Lie=a("strong"),TNo=o("deit"),FNo=o(" \u2014 "),xj=a("a"),CNo=o("DeiTForImageClassification"),MNo=o(" or "),kj=a("a"),ENo=o("DeiTForImageClassificationWithTeacher"),yNo=o(" (DeiT model)"),wNo=l(),t2=a("li"),Bie=a("strong"),ANo=o("imagegpt"),LNo=o(" \u2014 "),Rj=a("a"),BNo=o("ImageGPTForImageClassification"),xNo=o(" (ImageGPT model)"),kNo=l(),ma=a("li"),xie=a("strong"),RNo=o("perceiver"),SNo=o(" \u2014 "),Sj=a("a"),PNo=o("PerceiverForImageClassificationLearned"),$No=o(" or "),Pj=a("a"),INo=o("PerceiverForImageClassificationFourier"),NNo=o(" or "),$j=a("a"),DNo=o("PerceiverForImageClassificationConvProcessing"),jNo=o(" (Perceiver model)"),qNo=l(),a2=a("li"),kie=a("strong"),GNo=o("poolformer"),ONo=o(" \u2014 "),Ij=a("a"),XNo=o("PoolFormerForImageClassification"),VNo=o(" (PoolFormer model)"),zNo=l(),n2=a("li"),Rie=a("strong"),WNo=o("resnet"),QNo=o(" \u2014 "),Nj=a("a"),HNo=o("ResNetForImageClassification"),UNo=o(" (ResNet model)"),JNo=l(),s2=a("li"),Sie=a("strong"),YNo=o("segformer"),KNo=o(" \u2014 "),Dj=a("a"),ZNo=o("SegformerForImageClassification"),eDo=o(" (SegFormer model)"),oDo=l(),l2=a("li"),Pie=a("strong"),rDo=o("swin"),tDo=o(" \u2014 "),jj=a("a"),aDo=o("SwinForImageClassification"),nDo=o(" (Swin model)"),sDo=l(),i2=a("li"),$ie=a("strong"),lDo=o("van"),iDo=o(" \u2014 "),qj=a("a"),dDo=o("VanForImageClassification"),cDo=o(" (VAN model)"),fDo=l(),d2=a("li"),Iie=a("strong"),mDo=o("vit"),gDo=o(" \u2014 "),Gj=a("a"),hDo=o("ViTForImageClassification"),pDo=o(" (ViT model)"),_Do=l(),c2=a("p"),uDo=o("The model is set in evaluation mode by default using "),Nie=a("code"),bDo=o("model.eval()"),vDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),TDo=o("model.train()"),FDo=l(),jie=a("p"),CDo=o("Examples:"),MDo=l(),f(hy.$$.fragment),Nke=l(),Rd=a("h2"),f2=a("a"),qie=a("span"),f(py.$$.fragment),EDo=l(),Gie=a("span"),yDo=o("AutoModelForVision2Seq"),Dke=l(),ir=a("div"),f(_y.$$.fragment),wDo=l(),Sd=a("p"),ADo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oie=a("code"),LDo=o("from_pretrained()"),BDo=o("class method or the "),Xie=a("code"),xDo=o("from_config()"),kDo=o(`class
method.`),RDo=l(),uy=a("p"),SDo=o("This class cannot be instantiated directly using "),Vie=a("code"),PDo=o("__init__()"),$Do=o(" (throws an error)."),IDo=l(),rt=a("div"),f(by.$$.fragment),NDo=l(),zie=a("p"),DDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jDo=l(),Pd=a("p"),qDo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),GDo=o("not"),ODo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=a("code"),XDo=o("from_pretrained()"),VDo=o("to load the model weights."),zDo=l(),Hie=a("p"),WDo=o("Examples:"),QDo=l(),f(vy.$$.fragment),HDo=l(),Ue=a("div"),f(Ty.$$.fragment),UDo=l(),Uie=a("p"),JDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YDo=l(),rn=a("p"),KDo=o("The model class to instantiate is selected based on the "),Jie=a("code"),ZDo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),njo=l(),Zie=a("ul"),m2=a("li"),ede=a("strong"),sjo=o("vision-encoder-decoder"),ljo=o(" \u2014 "),Oj=a("a"),ijo=o("VisionEncoderDecoderModel"),djo=o(" (Vision Encoder decoder model)"),cjo=l(),g2=a("p"),fjo=o("The model is set in evaluation mode by default using "),ode=a("code"),mjo=o("model.eval()"),gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),hjo=o("model.train()"),pjo=l(),tde=a("p"),_jo=o("Examples:"),ujo=l(),f(Fy.$$.fragment),jke=l(),$d=a("h2"),h2=a("a"),ade=a("span"),f(Cy.$$.fragment),bjo=l(),nde=a("span"),vjo=o("AutoModelForAudioClassification"),qke=l(),dr=a("div"),f(My.$$.fragment),Tjo=l(),Id=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sde=a("code"),Cjo=o("from_pretrained()"),Mjo=o("class method or the "),lde=a("code"),Ejo=o("from_config()"),yjo=o(`class
method.`),wjo=l(),Ey=a("p"),Ajo=o("This class cannot be instantiated directly using "),ide=a("code"),Ljo=o("__init__()"),Bjo=o(" (throws an error)."),xjo=l(),tt=a("div"),f(yy.$$.fragment),kjo=l(),dde=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Sjo=l(),Nd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),$jo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=a("code"),Njo=o("from_pretrained()"),Djo=o("to load the model weights."),jjo=l(),mde=a("p"),qjo=o("Examples:"),Gjo=l(),f(wy.$$.fragment),Ojo=l(),Je=a("div"),f(Ay.$$.fragment),Xjo=l(),gde=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zjo=l(),tn=a("p"),Wjo=o("The model class to instantiate is selected based on the "),hde=a("code"),Qjo=o("model_type"),Hjo=o(` property of the config object (either
passed as an argument or loaded from `),pde=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_de=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(":"),Zjo=l(),ke=a("ul"),p2=a("li"),ude=a("strong"),eqo=o("data2vec-audio"),oqo=o(" \u2014 "),Xj=a("a"),rqo=o("Data2VecAudioForSequenceClassification"),tqo=o(" (Data2VecAudio model)"),aqo=l(),_2=a("li"),bde=a("strong"),nqo=o("hubert"),sqo=o(" \u2014 "),Vj=a("a"),lqo=o("HubertForSequenceClassification"),iqo=o(" (Hubert model)"),dqo=l(),u2=a("li"),vde=a("strong"),cqo=o("sew"),fqo=o(" \u2014 "),zj=a("a"),mqo=o("SEWForSequenceClassification"),gqo=o(" (SEW model)"),hqo=l(),b2=a("li"),Tde=a("strong"),pqo=o("sew-d"),_qo=o(" \u2014 "),Wj=a("a"),uqo=o("SEWDForSequenceClassification"),bqo=o(" (SEW-D model)"),vqo=l(),v2=a("li"),Fde=a("strong"),Tqo=o("unispeech"),Fqo=o(" \u2014 "),Qj=a("a"),Cqo=o("UniSpeechForSequenceClassification"),Mqo=o(" (UniSpeech model)"),Eqo=l(),T2=a("li"),Cde=a("strong"),yqo=o("unispeech-sat"),wqo=o(" \u2014 "),Hj=a("a"),Aqo=o("UniSpeechSatForSequenceClassification"),Lqo=o(" (UniSpeechSat model)"),Bqo=l(),F2=a("li"),Mde=a("strong"),xqo=o("wav2vec2"),kqo=o(" \u2014 "),Uj=a("a"),Rqo=o("Wav2Vec2ForSequenceClassification"),Sqo=o(" (Wav2Vec2 model)"),Pqo=l(),C2=a("li"),Ede=a("strong"),$qo=o("wavlm"),Iqo=o(" \u2014 "),Jj=a("a"),Nqo=o("WavLMForSequenceClassification"),Dqo=o(" (WavLM model)"),jqo=l(),M2=a("p"),qqo=o("The model is set in evaluation mode by default using "),yde=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),Xqo=o("model.train()"),Vqo=l(),Ade=a("p"),zqo=o("Examples:"),Wqo=l(),f(Ly.$$.fragment),Gke=l(),Dd=a("h2"),E2=a("a"),Lde=a("span"),f(By.$$.fragment),Qqo=l(),Bde=a("span"),Hqo=o("AutoModelForAudioFrameClassification"),Oke=l(),cr=a("div"),f(xy.$$.fragment),Uqo=l(),jd=a("p"),Jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xde=a("code"),Yqo=o("from_pretrained()"),Kqo=o("class method or the "),kde=a("code"),Zqo=o("from_config()"),eGo=o(`class
method.`),oGo=l(),ky=a("p"),rGo=o("This class cannot be instantiated directly using "),Rde=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),at=a("div"),f(Ry.$$.fragment),sGo=l(),Sde=a("p"),lGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iGo=l(),qd=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),cGo=o("not"),fGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=a("code"),mGo=o("from_pretrained()"),gGo=o("to load the model weights."),hGo=l(),Ide=a("p"),pGo=o("Examples:"),_Go=l(),f(Sy.$$.fragment),uGo=l(),Ye=a("div"),f(Py.$$.fragment),bGo=l(),Nde=a("p"),vGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TGo=l(),an=a("p"),FGo=o("The model class to instantiate is selected based on the "),Dde=a("code"),CGo=o("model_type"),MGo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),EGo=o("pretrained_model_name_or_path"),yGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(":"),LGo=l(),nn=a("ul"),y2=a("li"),Gde=a("strong"),BGo=o("data2vec-audio"),xGo=o(" \u2014 "),Yj=a("a"),kGo=o("Data2VecAudioForAudioFrameClassification"),RGo=o(" (Data2VecAudio model)"),SGo=l(),w2=a("li"),Ode=a("strong"),PGo=o("unispeech-sat"),$Go=o(" \u2014 "),Kj=a("a"),IGo=o("UniSpeechSatForAudioFrameClassification"),NGo=o(" (UniSpeechSat model)"),DGo=l(),A2=a("li"),Xde=a("strong"),jGo=o("wav2vec2"),qGo=o(" \u2014 "),Zj=a("a"),GGo=o("Wav2Vec2ForAudioFrameClassification"),OGo=o(" (Wav2Vec2 model)"),XGo=l(),L2=a("li"),Vde=a("strong"),VGo=o("wavlm"),zGo=o(" \u2014 "),eq=a("a"),WGo=o("WavLMForAudioFrameClassification"),QGo=o(" (WavLM model)"),HGo=l(),B2=a("p"),UGo=o("The model is set in evaluation mode by default using "),zde=a("code"),JGo=o("model.eval()"),YGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),KGo=o("model.train()"),ZGo=l(),Qde=a("p"),eOo=o("Examples:"),oOo=l(),f($y.$$.fragment),Xke=l(),Gd=a("h2"),x2=a("a"),Hde=a("span"),f(Iy.$$.fragment),rOo=l(),Ude=a("span"),tOo=o("AutoModelForCTC"),Vke=l(),fr=a("div"),f(Ny.$$.fragment),aOo=l(),Od=a("p"),nOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jde=a("code"),sOo=o("from_pretrained()"),lOo=o("class method or the "),Yde=a("code"),iOo=o("from_config()"),dOo=o(`class
method.`),cOo=l(),Dy=a("p"),fOo=o("This class cannot be instantiated directly using "),Kde=a("code"),mOo=o("__init__()"),gOo=o(" (throws an error)."),hOo=l(),nt=a("div"),f(jy.$$.fragment),pOo=l(),Zde=a("p"),_Oo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uOo=l(),Xd=a("p"),bOo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),vOo=o("not"),TOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),FOo=o("from_pretrained()"),COo=o("to load the model weights."),MOo=l(),rce=a("p"),EOo=o("Examples:"),yOo=l(),f(qy.$$.fragment),wOo=l(),Ke=a("div"),f(Gy.$$.fragment),AOo=l(),tce=a("p"),LOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),BOo=l(),sn=a("p"),xOo=o("The model class to instantiate is selected based on the "),ace=a("code"),kOo=o("model_type"),ROo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),SOo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),$Oo=o("pretrained_model_name_or_path"),IOo=o(":"),NOo=l(),Re=a("ul"),k2=a("li"),lce=a("strong"),DOo=o("data2vec-audio"),jOo=o(" \u2014 "),oq=a("a"),qOo=o("Data2VecAudioForCTC"),GOo=o(" (Data2VecAudio model)"),OOo=l(),R2=a("li"),ice=a("strong"),XOo=o("hubert"),VOo=o(" \u2014 "),rq=a("a"),zOo=o("HubertForCTC"),WOo=o(" (Hubert model)"),QOo=l(),S2=a("li"),dce=a("strong"),HOo=o("sew"),UOo=o(" \u2014 "),tq=a("a"),JOo=o("SEWForCTC"),YOo=o(" (SEW model)"),KOo=l(),P2=a("li"),cce=a("strong"),ZOo=o("sew-d"),eXo=o(" \u2014 "),aq=a("a"),oXo=o("SEWDForCTC"),rXo=o(" (SEW-D model)"),tXo=l(),$2=a("li"),fce=a("strong"),aXo=o("unispeech"),nXo=o(" \u2014 "),nq=a("a"),sXo=o("UniSpeechForCTC"),lXo=o(" (UniSpeech model)"),iXo=l(),I2=a("li"),mce=a("strong"),dXo=o("unispeech-sat"),cXo=o(" \u2014 "),sq=a("a"),fXo=o("UniSpeechSatForCTC"),mXo=o(" (UniSpeechSat model)"),gXo=l(),N2=a("li"),gce=a("strong"),hXo=o("wav2vec2"),pXo=o(" \u2014 "),lq=a("a"),_Xo=o("Wav2Vec2ForCTC"),uXo=o(" (Wav2Vec2 model)"),bXo=l(),D2=a("li"),hce=a("strong"),vXo=o("wavlm"),TXo=o(" \u2014 "),iq=a("a"),FXo=o("WavLMForCTC"),CXo=o(" (WavLM model)"),MXo=l(),j2=a("p"),EXo=o("The model is set in evaluation mode by default using "),pce=a("code"),yXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=a("code"),AXo=o("model.train()"),LXo=l(),uce=a("p"),BXo=o("Examples:"),xXo=l(),f(Oy.$$.fragment),zke=l(),Vd=a("h2"),q2=a("a"),bce=a("span"),f(Xy.$$.fragment),kXo=l(),vce=a("span"),RXo=o("AutoModelForSpeechSeq2Seq"),Wke=l(),mr=a("div"),f(Vy.$$.fragment),SXo=l(),zd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tce=a("code"),$Xo=o("from_pretrained()"),IXo=o("class method or the "),Fce=a("code"),NXo=o("from_config()"),DXo=o(`class
method.`),jXo=l(),zy=a("p"),qXo=o("This class cannot be instantiated directly using "),Cce=a("code"),GXo=o("__init__()"),OXo=o(" (throws an error)."),XXo=l(),st=a("div"),f(Wy.$$.fragment),VXo=l(),Mce=a("p"),zXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WXo=l(),Wd=a("p"),QXo=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=a("code"),JXo=o("from_pretrained()"),YXo=o("to load the model weights."),KXo=l(),wce=a("p"),ZXo=o("Examples:"),eVo=l(),f(Qy.$$.fragment),oVo=l(),Ze=a("div"),f(Hy.$$.fragment),rVo=l(),Ace=a("p"),tVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aVo=l(),ln=a("p"),nVo=o("The model class to instantiate is selected based on the "),Lce=a("code"),sVo=o("model_type"),lVo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),cVo=o("pretrained_model_name_or_path"),fVo=o(":"),mVo=l(),Uy=a("ul"),G2=a("li"),kce=a("strong"),gVo=o("speech-encoder-decoder"),hVo=o(" \u2014 "),dq=a("a"),pVo=o("SpeechEncoderDecoderModel"),_Vo=o(" (Speech Encoder decoder model)"),uVo=l(),O2=a("li"),Rce=a("strong"),bVo=o("speech_to_text"),vVo=o(" \u2014 "),cq=a("a"),TVo=o("Speech2TextForConditionalGeneration"),FVo=o(" (Speech2Text model)"),CVo=l(),X2=a("p"),MVo=o("The model is set in evaluation mode by default using "),Sce=a("code"),EVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),wVo=o("model.train()"),AVo=l(),$ce=a("p"),LVo=o("Examples:"),BVo=l(),f(Jy.$$.fragment),Qke=l(),Qd=a("h2"),V2=a("a"),Ice=a("span"),f(Yy.$$.fragment),xVo=l(),Nce=a("span"),kVo=o("AutoModelForAudioXVector"),Hke=l(),gr=a("div"),f(Ky.$$.fragment),RVo=l(),Hd=a("p"),SVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dce=a("code"),PVo=o("from_pretrained()"),$Vo=o("class method or the "),jce=a("code"),IVo=o("from_config()"),NVo=o(`class
method.`),DVo=l(),Zy=a("p"),jVo=o("This class cannot be instantiated directly using "),qce=a("code"),qVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),lt=a("div"),f(ew.$$.fragment),XVo=l(),Gce=a("p"),VVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zVo=l(),Ud=a("p"),WVo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),QVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=a("code"),UVo=o("from_pretrained()"),JVo=o("to load the model weights."),YVo=l(),Vce=a("p"),KVo=o("Examples:"),ZVo=l(),f(ow.$$.fragment),ezo=l(),eo=a("div"),f(rw.$$.fragment),ozo=l(),zce=a("p"),rzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tzo=l(),dn=a("p"),azo=o("The model class to instantiate is selected based on the "),Wce=a("code"),nzo=o("model_type"),szo=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),lzo=o("pretrained_model_name_or_path"),izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(":"),fzo=l(),cn=a("ul"),z2=a("li"),Uce=a("strong"),mzo=o("data2vec-audio"),gzo=o(" \u2014 "),fq=a("a"),hzo=o("Data2VecAudioForXVector"),pzo=o(" (Data2VecAudio model)"),_zo=l(),W2=a("li"),Jce=a("strong"),uzo=o("unispeech-sat"),bzo=o(" \u2014 "),mq=a("a"),vzo=o("UniSpeechSatForXVector"),Tzo=o(" (UniSpeechSat model)"),Fzo=l(),Q2=a("li"),Yce=a("strong"),Czo=o("wav2vec2"),Mzo=o(" \u2014 "),gq=a("a"),Ezo=o("Wav2Vec2ForXVector"),yzo=o(" (Wav2Vec2 model)"),wzo=l(),H2=a("li"),Kce=a("strong"),Azo=o("wavlm"),Lzo=o(" \u2014 "),hq=a("a"),Bzo=o("WavLMForXVector"),xzo=o(" (WavLM model)"),kzo=l(),U2=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Zce=a("code"),Szo=o("model.eval()"),Pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),$zo=o("model.train()"),Izo=l(),ofe=a("p"),Nzo=o("Examples:"),Dzo=l(),f(tw.$$.fragment),Uke=l(),Jd=a("h2"),J2=a("a"),rfe=a("span"),f(aw.$$.fragment),jzo=l(),tfe=a("span"),qzo=o("AutoModelForMaskedImageModeling"),Jke=l(),hr=a("div"),f(nw.$$.fragment),Gzo=l(),Yd=a("p"),Ozo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),afe=a("code"),Xzo=o("from_pretrained()"),Vzo=o("class method or the "),nfe=a("code"),zzo=o("from_config()"),Wzo=o(`class
method.`),Qzo=l(),sw=a("p"),Hzo=o("This class cannot be instantiated directly using "),sfe=a("code"),Uzo=o("__init__()"),Jzo=o(" (throws an error)."),Yzo=l(),it=a("div"),f(lw.$$.fragment),Kzo=l(),lfe=a("p"),Zzo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eWo=l(),Kd=a("p"),oWo=o(`Note:
Loading a model from its configuration file does `),ife=a("strong"),rWo=o("not"),tWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dfe=a("code"),aWo=o("from_pretrained()"),nWo=o("to load the model weights."),sWo=l(),cfe=a("p"),lWo=o("Examples:"),iWo=l(),f(iw.$$.fragment),dWo=l(),oo=a("div"),f(dw.$$.fragment),cWo=l(),ffe=a("p"),fWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mWo=l(),fn=a("p"),gWo=o("The model class to instantiate is selected based on the "),mfe=a("code"),hWo=o("model_type"),pWo=o(` property of the config object (either
passed as an argument or loaded from `),gfe=a("code"),_Wo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(":"),TWo=l(),Zd=a("ul"),Y2=a("li"),pfe=a("strong"),FWo=o("deit"),CWo=o(" \u2014 "),pq=a("a"),MWo=o("DeiTForMaskedImageModeling"),EWo=o(" (DeiT model)"),yWo=l(),K2=a("li"),_fe=a("strong"),wWo=o("swin"),AWo=o(" \u2014 "),_q=a("a"),LWo=o("SwinForMaskedImageModeling"),BWo=o(" (Swin model)"),xWo=l(),Z2=a("li"),ufe=a("strong"),kWo=o("vit"),RWo=o(" \u2014 "),uq=a("a"),SWo=o("ViTForMaskedImageModeling"),PWo=o(" (ViT model)"),$Wo=l(),ev=a("p"),IWo=o("The model is set in evaluation mode by default using "),bfe=a("code"),NWo=o("model.eval()"),DWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),jWo=o("model.train()"),qWo=l(),Tfe=a("p"),GWo=o("Examples:"),OWo=l(),f(cw.$$.fragment),Yke=l(),ec=a("h2"),ov=a("a"),Ffe=a("span"),f(fw.$$.fragment),XWo=l(),Cfe=a("span"),VWo=o("AutoModelForObjectDetection"),Kke=l(),pr=a("div"),f(mw.$$.fragment),zWo=l(),oc=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Mfe=a("code"),QWo=o("from_pretrained()"),HWo=o("class method or the "),Efe=a("code"),UWo=o("from_config()"),JWo=o(`class
method.`),YWo=l(),gw=a("p"),KWo=o("This class cannot be instantiated directly using "),yfe=a("code"),ZWo=o("__init__()"),eQo=o(" (throws an error)."),oQo=l(),dt=a("div"),f(hw.$$.fragment),rQo=l(),wfe=a("p"),tQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aQo=l(),rc=a("p"),nQo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),sQo=o("not"),lQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=a("code"),iQo=o("from_pretrained()"),dQo=o("to load the model weights."),cQo=l(),Bfe=a("p"),fQo=o("Examples:"),mQo=l(),f(pw.$$.fragment),gQo=l(),ro=a("div"),f(_w.$$.fragment),hQo=l(),xfe=a("p"),pQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_Qo=l(),mn=a("p"),uQo=o("The model class to instantiate is selected based on the "),kfe=a("code"),bQo=o("model_type"),vQo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),TQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),CQo=o("pretrained_model_name_or_path"),MQo=o(":"),EQo=l(),Pfe=a("ul"),rv=a("li"),$fe=a("strong"),yQo=o("detr"),wQo=o(" \u2014 "),bq=a("a"),AQo=o("DetrForObjectDetection"),LQo=o(" (DETR model)"),BQo=l(),tv=a("p"),xQo=o("The model is set in evaluation mode by default using "),Ife=a("code"),kQo=o("model.eval()"),RQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),SQo=o("model.train()"),PQo=l(),Dfe=a("p"),$Qo=o("Examples:"),IQo=l(),f(uw.$$.fragment),Zke=l(),tc=a("h2"),av=a("a"),jfe=a("span"),f(bw.$$.fragment),NQo=l(),qfe=a("span"),DQo=o("AutoModelForImageSegmentation"),eRe=l(),_r=a("div"),f(vw.$$.fragment),jQo=l(),ac=a("p"),qQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Gfe=a("code"),GQo=o("from_pretrained()"),OQo=o("class method or the "),Ofe=a("code"),XQo=o("from_config()"),VQo=o(`class
method.`),zQo=l(),Tw=a("p"),WQo=o("This class cannot be instantiated directly using "),Xfe=a("code"),QQo=o("__init__()"),HQo=o(" (throws an error)."),UQo=l(),ct=a("div"),f(Fw.$$.fragment),JQo=l(),Vfe=a("p"),YQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),KQo=l(),nc=a("p"),ZQo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),eHo=o("not"),oHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=a("code"),rHo=o("from_pretrained()"),tHo=o("to load the model weights."),aHo=l(),Qfe=a("p"),nHo=o("Examples:"),sHo=l(),f(Cw.$$.fragment),lHo=l(),to=a("div"),f(Mw.$$.fragment),iHo=l(),Hfe=a("p"),dHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cHo=l(),gn=a("p"),fHo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),mHo=o("model_type"),gHo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),hHo=o("pretrained_model_name_or_path"),pHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),_Ho=o("pretrained_model_name_or_path"),uHo=o(":"),bHo=l(),Kfe=a("ul"),nv=a("li"),Zfe=a("strong"),vHo=o("detr"),THo=o(" \u2014 "),vq=a("a"),FHo=o("DetrForSegmentation"),CHo=o(" (DETR model)"),MHo=l(),sv=a("p"),EHo=o("The model is set in evaluation mode by default using "),eme=a("code"),yHo=o("model.eval()"),wHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),AHo=o("model.train()"),LHo=l(),rme=a("p"),BHo=o("Examples:"),xHo=l(),f(Ew.$$.fragment),oRe=l(),sc=a("h2"),lv=a("a"),tme=a("span"),f(yw.$$.fragment),kHo=l(),ame=a("span"),RHo=o("AutoModelForSemanticSegmentation"),rRe=l(),ur=a("div"),f(ww.$$.fragment),SHo=l(),lc=a("p"),PHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nme=a("code"),$Ho=o("from_pretrained()"),IHo=o("class method or the "),sme=a("code"),NHo=o("from_config()"),DHo=o(`class
method.`),jHo=l(),Aw=a("p"),qHo=o("This class cannot be instantiated directly using "),lme=a("code"),GHo=o("__init__()"),OHo=o(" (throws an error)."),XHo=l(),ft=a("div"),f(Lw.$$.fragment),VHo=l(),ime=a("p"),zHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WHo=l(),ic=a("p"),QHo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),HHo=o("not"),UHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=a("code"),JHo=o("from_pretrained()"),YHo=o("to load the model weights."),KHo=l(),fme=a("p"),ZHo=o("Examples:"),eUo=l(),f(Bw.$$.fragment),oUo=l(),ao=a("div"),f(xw.$$.fragment),rUo=l(),mme=a("p"),tUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),aUo=l(),hn=a("p"),nUo=o("The model class to instantiate is selected based on the "),gme=a("code"),sUo=o("model_type"),lUo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(":"),mUo=l(),kw=a("ul"),iv=a("li"),_me=a("strong"),gUo=o("beit"),hUo=o(" \u2014 "),Tq=a("a"),pUo=o("BeitForSemanticSegmentation"),_Uo=o(" (BEiT model)"),uUo=l(),dv=a("li"),ume=a("strong"),bUo=o("segformer"),vUo=o(" \u2014 "),Fq=a("a"),TUo=o("SegformerForSemanticSegmentation"),FUo=o(" (SegFormer model)"),CUo=l(),cv=a("p"),MUo=o("The model is set in evaluation mode by default using "),bme=a("code"),EUo=o("model.eval()"),yUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),wUo=o("model.train()"),AUo=l(),Tme=a("p"),LUo=o("Examples:"),BUo=l(),f(Rw.$$.fragment),tRe=l(),dc=a("h2"),fv=a("a"),Fme=a("span"),f(Sw.$$.fragment),xUo=l(),Cme=a("span"),kUo=o("AutoModelForInstanceSegmentation"),aRe=l(),br=a("div"),f(Pw.$$.fragment),RUo=l(),cc=a("p"),SUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Mme=a("code"),PUo=o("from_pretrained()"),$Uo=o("class method or the "),Eme=a("code"),IUo=o("from_config()"),NUo=o(`class
method.`),DUo=l(),$w=a("p"),jUo=o("This class cannot be instantiated directly using "),yme=a("code"),qUo=o("__init__()"),GUo=o(" (throws an error)."),OUo=l(),mt=a("div"),f(Iw.$$.fragment),XUo=l(),wme=a("p"),VUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zUo=l(),fc=a("p"),WUo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),QUo=o("not"),HUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=a("code"),UUo=o("from_pretrained()"),JUo=o("to load the model weights."),YUo=l(),Bme=a("p"),KUo=o("Examples:"),ZUo=l(),f(Nw.$$.fragment),eJo=l(),no=a("div"),f(Dw.$$.fragment),oJo=l(),xme=a("p"),rJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tJo=l(),pn=a("p"),aJo=o("The model class to instantiate is selected based on the "),kme=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),Pme=a("ul"),mv=a("li"),$me=a("strong"),mJo=o("maskformer"),gJo=o(" \u2014 "),Cq=a("a"),hJo=o("MaskFormerForInstanceSegmentation"),pJo=o(" (MaskFormer model)"),_Jo=l(),gv=a("p"),uJo=o("The model is set in evaluation mode by default using "),Ime=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=a("code"),TJo=o("model.train()"),FJo=l(),Dme=a("p"),CJo=o("Examples:"),MJo=l(),f(jw.$$.fragment),nRe=l(),mc=a("h2"),hv=a("a"),jme=a("span"),f(qw.$$.fragment),EJo=l(),qme=a("span"),yJo=o("TFAutoModel"),sRe=l(),vr=a("div"),f(Gw.$$.fragment),wJo=l(),gc=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gme=a("code"),LJo=o("from_pretrained()"),BJo=o("class method or the "),Ome=a("code"),xJo=o("from_config()"),kJo=o(`class
method.`),RJo=l(),Ow=a("p"),SJo=o("This class cannot be instantiated directly using "),Xme=a("code"),PJo=o("__init__()"),$Jo=o(" (throws an error)."),IJo=l(),gt=a("div"),f(Xw.$$.fragment),NJo=l(),Vme=a("p"),DJo=o("Instantiates one of the base model classes of the library from a configuration."),jJo=l(),hc=a("p"),qJo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),GJo=o("not"),OJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),XJo=o("from_pretrained()"),VJo=o("to load the model weights."),zJo=l(),Qme=a("p"),WJo=o("Examples:"),QJo=l(),f(Vw.$$.fragment),HJo=l(),ho=a("div"),f(zw.$$.fragment),UJo=l(),Hme=a("p"),JJo=o("Instantiate one of the base model classes of the library from a pretrained model."),YJo=l(),_n=a("p"),KJo=o("The model class to instantiate is selected based on the "),Ume=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),B=a("ul"),pv=a("li"),Kme=a("strong"),sYo=o("albert"),lYo=o(" \u2014 "),Mq=a("a"),iYo=o("TFAlbertModel"),dYo=o(" (ALBERT model)"),cYo=l(),_v=a("li"),Zme=a("strong"),fYo=o("bart"),mYo=o(" \u2014 "),Eq=a("a"),gYo=o("TFBartModel"),hYo=o(" (BART model)"),pYo=l(),uv=a("li"),ege=a("strong"),_Yo=o("bert"),uYo=o(" \u2014 "),yq=a("a"),bYo=o("TFBertModel"),vYo=o(" (BERT model)"),TYo=l(),bv=a("li"),oge=a("strong"),FYo=o("blenderbot"),CYo=o(" \u2014 "),wq=a("a"),MYo=o("TFBlenderbotModel"),EYo=o(" (Blenderbot model)"),yYo=l(),vv=a("li"),rge=a("strong"),wYo=o("blenderbot-small"),AYo=o(" \u2014 "),Aq=a("a"),LYo=o("TFBlenderbotSmallModel"),BYo=o(" (BlenderbotSmall model)"),xYo=l(),Tv=a("li"),tge=a("strong"),kYo=o("camembert"),RYo=o(" \u2014 "),Lq=a("a"),SYo=o("TFCamembertModel"),PYo=o(" (CamemBERT model)"),$Yo=l(),Fv=a("li"),age=a("strong"),IYo=o("clip"),NYo=o(" \u2014 "),Bq=a("a"),DYo=o("TFCLIPModel"),jYo=o(" (CLIP model)"),qYo=l(),Cv=a("li"),nge=a("strong"),GYo=o("convbert"),OYo=o(" \u2014 "),xq=a("a"),XYo=o("TFConvBertModel"),VYo=o(" (ConvBERT model)"),zYo=l(),Mv=a("li"),sge=a("strong"),WYo=o("convnext"),QYo=o(" \u2014 "),kq=a("a"),HYo=o("TFConvNextModel"),UYo=o(" (ConvNext model)"),JYo=l(),Ev=a("li"),lge=a("strong"),YYo=o("ctrl"),KYo=o(" \u2014 "),Rq=a("a"),ZYo=o("TFCTRLModel"),eKo=o(" (CTRL model)"),oKo=l(),yv=a("li"),ige=a("strong"),rKo=o("deberta"),tKo=o(" \u2014 "),Sq=a("a"),aKo=o("TFDebertaModel"),nKo=o(" (DeBERTa model)"),sKo=l(),wv=a("li"),dge=a("strong"),lKo=o("deberta-v2"),iKo=o(" \u2014 "),Pq=a("a"),dKo=o("TFDebertaV2Model"),cKo=o(" (DeBERTa-v2 model)"),fKo=l(),Av=a("li"),cge=a("strong"),mKo=o("distilbert"),gKo=o(" \u2014 "),$q=a("a"),hKo=o("TFDistilBertModel"),pKo=o(" (DistilBERT model)"),_Ko=l(),Lv=a("li"),fge=a("strong"),uKo=o("dpr"),bKo=o(" \u2014 "),Iq=a("a"),vKo=o("TFDPRQuestionEncoder"),TKo=o(" (DPR model)"),FKo=l(),Bv=a("li"),mge=a("strong"),CKo=o("electra"),MKo=o(" \u2014 "),Nq=a("a"),EKo=o("TFElectraModel"),yKo=o(" (ELECTRA model)"),wKo=l(),xv=a("li"),gge=a("strong"),AKo=o("flaubert"),LKo=o(" \u2014 "),Dq=a("a"),BKo=o("TFFlaubertModel"),xKo=o(" (FlauBERT model)"),kKo=l(),Gs=a("li"),hge=a("strong"),RKo=o("funnel"),SKo=o(" \u2014 "),jq=a("a"),PKo=o("TFFunnelModel"),$Ko=o(" or "),qq=a("a"),IKo=o("TFFunnelBaseModel"),NKo=o(" (Funnel Transformer model)"),DKo=l(),kv=a("li"),pge=a("strong"),jKo=o("gpt2"),qKo=o(" \u2014 "),Gq=a("a"),GKo=o("TFGPT2Model"),OKo=o(" (OpenAI GPT-2 model)"),XKo=l(),Rv=a("li"),_ge=a("strong"),VKo=o("hubert"),zKo=o(" \u2014 "),Oq=a("a"),WKo=o("TFHubertModel"),QKo=o(" (Hubert model)"),HKo=l(),Sv=a("li"),uge=a("strong"),UKo=o("layoutlm"),JKo=o(" \u2014 "),Xq=a("a"),YKo=o("TFLayoutLMModel"),KKo=o(" (LayoutLM model)"),ZKo=l(),Pv=a("li"),bge=a("strong"),eZo=o("led"),oZo=o(" \u2014 "),Vq=a("a"),rZo=o("TFLEDModel"),tZo=o(" (LED model)"),aZo=l(),$v=a("li"),vge=a("strong"),nZo=o("longformer"),sZo=o(" \u2014 "),zq=a("a"),lZo=o("TFLongformerModel"),iZo=o(" (Longformer model)"),dZo=l(),Iv=a("li"),Tge=a("strong"),cZo=o("lxmert"),fZo=o(" \u2014 "),Wq=a("a"),mZo=o("TFLxmertModel"),gZo=o(" (LXMERT model)"),hZo=l(),Nv=a("li"),Fge=a("strong"),pZo=o("marian"),_Zo=o(" \u2014 "),Qq=a("a"),uZo=o("TFMarianModel"),bZo=o(" (Marian model)"),vZo=l(),Dv=a("li"),Cge=a("strong"),TZo=o("mbart"),FZo=o(" \u2014 "),Hq=a("a"),CZo=o("TFMBartModel"),MZo=o(" (mBART model)"),EZo=l(),jv=a("li"),Mge=a("strong"),yZo=o("mobilebert"),wZo=o(" \u2014 "),Uq=a("a"),AZo=o("TFMobileBertModel"),LZo=o(" (MobileBERT model)"),BZo=l(),qv=a("li"),Ege=a("strong"),xZo=o("mpnet"),kZo=o(" \u2014 "),Jq=a("a"),RZo=o("TFMPNetModel"),SZo=o(" (MPNet model)"),PZo=l(),Gv=a("li"),yge=a("strong"),$Zo=o("mt5"),IZo=o(" \u2014 "),Yq=a("a"),NZo=o("TFMT5Model"),DZo=o(" (mT5 model)"),jZo=l(),Ov=a("li"),wge=a("strong"),qZo=o("openai-gpt"),GZo=o(" \u2014 "),Kq=a("a"),OZo=o("TFOpenAIGPTModel"),XZo=o(" (OpenAI GPT model)"),VZo=l(),Xv=a("li"),Age=a("strong"),zZo=o("pegasus"),WZo=o(" \u2014 "),Zq=a("a"),QZo=o("TFPegasusModel"),HZo=o(" (Pegasus model)"),UZo=l(),Vv=a("li"),Lge=a("strong"),JZo=o("rembert"),YZo=o(" \u2014 "),eG=a("a"),KZo=o("TFRemBertModel"),ZZo=o(" (RemBERT model)"),eer=l(),zv=a("li"),Bge=a("strong"),oer=o("roberta"),rer=o(" \u2014 "),oG=a("a"),ter=o("TFRobertaModel"),aer=o(" (RoBERTa model)"),ner=l(),Wv=a("li"),xge=a("strong"),ser=o("roformer"),ler=o(" \u2014 "),rG=a("a"),ier=o("TFRoFormerModel"),der=o(" (RoFormer model)"),cer=l(),Qv=a("li"),kge=a("strong"),fer=o("speech_to_text"),mer=o(" \u2014 "),tG=a("a"),ger=o("TFSpeech2TextModel"),her=o(" (Speech2Text model)"),per=l(),Hv=a("li"),Rge=a("strong"),_er=o("t5"),uer=o(" \u2014 "),aG=a("a"),ber=o("TFT5Model"),ver=o(" (T5 model)"),Ter=l(),Uv=a("li"),Sge=a("strong"),Fer=o("tapas"),Cer=o(" \u2014 "),nG=a("a"),Mer=o("TFTapasModel"),Eer=o(" (TAPAS model)"),yer=l(),Jv=a("li"),Pge=a("strong"),wer=o("transfo-xl"),Aer=o(" \u2014 "),sG=a("a"),Ler=o("TFTransfoXLModel"),Ber=o(" (Transformer-XL model)"),xer=l(),Yv=a("li"),$ge=a("strong"),ker=o("vit"),Rer=o(" \u2014 "),lG=a("a"),Ser=o("TFViTModel"),Per=o(" (ViT model)"),$er=l(),Kv=a("li"),Ige=a("strong"),Ier=o("wav2vec2"),Ner=o(" \u2014 "),iG=a("a"),Der=o("TFWav2Vec2Model"),jer=o(" (Wav2Vec2 model)"),qer=l(),Zv=a("li"),Nge=a("strong"),Ger=o("xlm"),Oer=o(" \u2014 "),dG=a("a"),Xer=o("TFXLMModel"),Ver=o(" (XLM model)"),zer=l(),e6=a("li"),Dge=a("strong"),Wer=o("xlm-roberta"),Qer=o(" \u2014 "),cG=a("a"),Her=o("TFXLMRobertaModel"),Uer=o(" (XLM-RoBERTa model)"),Jer=l(),o6=a("li"),jge=a("strong"),Yer=o("xlnet"),Ker=o(" \u2014 "),fG=a("a"),Zer=o("TFXLNetModel"),eor=o(" (XLNet model)"),oor=l(),qge=a("p"),ror=o("Examples:"),tor=l(),f(Ww.$$.fragment),lRe=l(),pc=a("h2"),r6=a("a"),Gge=a("span"),f(Qw.$$.fragment),aor=l(),Oge=a("span"),nor=o("TFAutoModelForPreTraining"),iRe=l(),Tr=a("div"),f(Hw.$$.fragment),sor=l(),_c=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xge=a("code"),ior=o("from_pretrained()"),dor=o("class method or the "),Vge=a("code"),cor=o("from_config()"),mor=o(`class
method.`),gor=l(),Uw=a("p"),hor=o("This class cannot be instantiated directly using "),zge=a("code"),por=o("__init__()"),_or=o(" (throws an error)."),uor=l(),ht=a("div"),f(Jw.$$.fragment),bor=l(),Wge=a("p"),vor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tor=l(),uc=a("p"),For=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),Cor=o("not"),Mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=a("code"),Eor=o("from_pretrained()"),yor=o("to load the model weights."),wor=l(),Uge=a("p"),Aor=o("Examples:"),Lor=l(),f(Yw.$$.fragment),Bor=l(),po=a("div"),f(Kw.$$.fragment),xor=l(),Jge=a("p"),kor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ror=l(),un=a("p"),Sor=o("The model class to instantiate is selected based on the "),Yge=a("code"),Por=o("model_type"),$or=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),Ior=o("pretrained_model_name_or_path"),Nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Dor=o("pretrained_model_name_or_path"),jor=o(":"),qor=l(),H=a("ul"),t6=a("li"),ehe=a("strong"),Gor=o("albert"),Oor=o(" \u2014 "),mG=a("a"),Xor=o("TFAlbertForPreTraining"),Vor=o(" (ALBERT model)"),zor=l(),a6=a("li"),ohe=a("strong"),Wor=o("bart"),Qor=o(" \u2014 "),gG=a("a"),Hor=o("TFBartForConditionalGeneration"),Uor=o(" (BART model)"),Jor=l(),n6=a("li"),rhe=a("strong"),Yor=o("bert"),Kor=o(" \u2014 "),hG=a("a"),Zor=o("TFBertForPreTraining"),err=o(" (BERT model)"),orr=l(),s6=a("li"),the=a("strong"),rrr=o("camembert"),trr=o(" \u2014 "),pG=a("a"),arr=o("TFCamembertForMaskedLM"),nrr=o(" (CamemBERT model)"),srr=l(),l6=a("li"),ahe=a("strong"),lrr=o("ctrl"),irr=o(" \u2014 "),_G=a("a"),drr=o("TFCTRLLMHeadModel"),crr=o(" (CTRL model)"),frr=l(),i6=a("li"),nhe=a("strong"),mrr=o("distilbert"),grr=o(" \u2014 "),uG=a("a"),hrr=o("TFDistilBertForMaskedLM"),prr=o(" (DistilBERT model)"),_rr=l(),d6=a("li"),she=a("strong"),urr=o("electra"),brr=o(" \u2014 "),bG=a("a"),vrr=o("TFElectraForPreTraining"),Trr=o(" (ELECTRA model)"),Frr=l(),c6=a("li"),lhe=a("strong"),Crr=o("flaubert"),Mrr=o(" \u2014 "),vG=a("a"),Err=o("TFFlaubertWithLMHeadModel"),yrr=o(" (FlauBERT model)"),wrr=l(),f6=a("li"),ihe=a("strong"),Arr=o("funnel"),Lrr=o(" \u2014 "),TG=a("a"),Brr=o("TFFunnelForPreTraining"),xrr=o(" (Funnel Transformer model)"),krr=l(),m6=a("li"),dhe=a("strong"),Rrr=o("gpt2"),Srr=o(" \u2014 "),FG=a("a"),Prr=o("TFGPT2LMHeadModel"),$rr=o(" (OpenAI GPT-2 model)"),Irr=l(),g6=a("li"),che=a("strong"),Nrr=o("layoutlm"),Drr=o(" \u2014 "),CG=a("a"),jrr=o("TFLayoutLMForMaskedLM"),qrr=o(" (LayoutLM model)"),Grr=l(),h6=a("li"),fhe=a("strong"),Orr=o("lxmert"),Xrr=o(" \u2014 "),MG=a("a"),Vrr=o("TFLxmertForPreTraining"),zrr=o(" (LXMERT model)"),Wrr=l(),p6=a("li"),mhe=a("strong"),Qrr=o("mobilebert"),Hrr=o(" \u2014 "),EG=a("a"),Urr=o("TFMobileBertForPreTraining"),Jrr=o(" (MobileBERT model)"),Yrr=l(),_6=a("li"),ghe=a("strong"),Krr=o("mpnet"),Zrr=o(" \u2014 "),yG=a("a"),etr=o("TFMPNetForMaskedLM"),otr=o(" (MPNet model)"),rtr=l(),u6=a("li"),hhe=a("strong"),ttr=o("openai-gpt"),atr=o(" \u2014 "),wG=a("a"),ntr=o("TFOpenAIGPTLMHeadModel"),str=o(" (OpenAI GPT model)"),ltr=l(),b6=a("li"),phe=a("strong"),itr=o("roberta"),dtr=o(" \u2014 "),AG=a("a"),ctr=o("TFRobertaForMaskedLM"),ftr=o(" (RoBERTa model)"),mtr=l(),v6=a("li"),_he=a("strong"),gtr=o("t5"),htr=o(" \u2014 "),LG=a("a"),ptr=o("TFT5ForConditionalGeneration"),_tr=o(" (T5 model)"),utr=l(),T6=a("li"),uhe=a("strong"),btr=o("tapas"),vtr=o(" \u2014 "),BG=a("a"),Ttr=o("TFTapasForMaskedLM"),Ftr=o(" (TAPAS model)"),Ctr=l(),F6=a("li"),bhe=a("strong"),Mtr=o("transfo-xl"),Etr=o(" \u2014 "),xG=a("a"),ytr=o("TFTransfoXLLMHeadModel"),wtr=o(" (Transformer-XL model)"),Atr=l(),C6=a("li"),vhe=a("strong"),Ltr=o("xlm"),Btr=o(" \u2014 "),kG=a("a"),xtr=o("TFXLMWithLMHeadModel"),ktr=o(" (XLM model)"),Rtr=l(),M6=a("li"),The=a("strong"),Str=o("xlm-roberta"),Ptr=o(" \u2014 "),RG=a("a"),$tr=o("TFXLMRobertaForMaskedLM"),Itr=o(" (XLM-RoBERTa model)"),Ntr=l(),E6=a("li"),Fhe=a("strong"),Dtr=o("xlnet"),jtr=o(" \u2014 "),SG=a("a"),qtr=o("TFXLNetLMHeadModel"),Gtr=o(" (XLNet model)"),Otr=l(),Che=a("p"),Xtr=o("Examples:"),Vtr=l(),f(Zw.$$.fragment),dRe=l(),bc=a("h2"),y6=a("a"),Mhe=a("span"),f(eA.$$.fragment),ztr=l(),Ehe=a("span"),Wtr=o("TFAutoModelForCausalLM"),cRe=l(),Fr=a("div"),f(oA.$$.fragment),Qtr=l(),vc=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yhe=a("code"),Utr=o("from_pretrained()"),Jtr=o("class method or the "),whe=a("code"),Ytr=o("from_config()"),Ktr=o(`class
method.`),Ztr=l(),rA=a("p"),ear=o("This class cannot be instantiated directly using "),Ahe=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),pt=a("div"),f(tA.$$.fragment),aar=l(),Lhe=a("p"),nar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sar=l(),Tc=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=a("code"),car=o("from_pretrained()"),far=o("to load the model weights."),mar=l(),khe=a("p"),gar=o("Examples:"),har=l(),f(aA.$$.fragment),par=l(),_o=a("div"),f(nA.$$.fragment),_ar=l(),Rhe=a("p"),uar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bar=l(),bn=a("p"),Tar=o("The model class to instantiate is selected based on the "),She=a("code"),Far=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),yar=o("pretrained_model_name_or_path"),war=o(":"),Aar=l(),ge=a("ul"),w6=a("li"),Ihe=a("strong"),Lar=o("bert"),Bar=o(" \u2014 "),PG=a("a"),xar=o("TFBertLMHeadModel"),kar=o(" (BERT model)"),Rar=l(),A6=a("li"),Nhe=a("strong"),Sar=o("camembert"),Par=o(" \u2014 "),$G=a("a"),$ar=o("TFCamembertForCausalLM"),Iar=o(" (CamemBERT model)"),Nar=l(),L6=a("li"),Dhe=a("strong"),Dar=o("ctrl"),jar=o(" \u2014 "),IG=a("a"),qar=o("TFCTRLLMHeadModel"),Gar=o(" (CTRL model)"),Oar=l(),B6=a("li"),jhe=a("strong"),Xar=o("gpt2"),Var=o(" \u2014 "),NG=a("a"),zar=o("TFGPT2LMHeadModel"),War=o(" (OpenAI GPT-2 model)"),Qar=l(),x6=a("li"),qhe=a("strong"),Har=o("openai-gpt"),Uar=o(" \u2014 "),DG=a("a"),Jar=o("TFOpenAIGPTLMHeadModel"),Yar=o(" (OpenAI GPT model)"),Kar=l(),k6=a("li"),Ghe=a("strong"),Zar=o("rembert"),enr=o(" \u2014 "),jG=a("a"),onr=o("TFRemBertForCausalLM"),rnr=o(" (RemBERT model)"),tnr=l(),R6=a("li"),Ohe=a("strong"),anr=o("roberta"),nnr=o(" \u2014 "),qG=a("a"),snr=o("TFRobertaForCausalLM"),lnr=o(" (RoBERTa model)"),inr=l(),S6=a("li"),Xhe=a("strong"),dnr=o("roformer"),cnr=o(" \u2014 "),GG=a("a"),fnr=o("TFRoFormerForCausalLM"),mnr=o(" (RoFormer model)"),gnr=l(),P6=a("li"),Vhe=a("strong"),hnr=o("transfo-xl"),pnr=o(" \u2014 "),OG=a("a"),_nr=o("TFTransfoXLLMHeadModel"),unr=o(" (Transformer-XL model)"),bnr=l(),$6=a("li"),zhe=a("strong"),vnr=o("xlm"),Tnr=o(" \u2014 "),XG=a("a"),Fnr=o("TFXLMWithLMHeadModel"),Cnr=o(" (XLM model)"),Mnr=l(),I6=a("li"),Whe=a("strong"),Enr=o("xlnet"),ynr=o(" \u2014 "),VG=a("a"),wnr=o("TFXLNetLMHeadModel"),Anr=o(" (XLNet model)"),Lnr=l(),Qhe=a("p"),Bnr=o("Examples:"),xnr=l(),f(sA.$$.fragment),fRe=l(),Fc=a("h2"),N6=a("a"),Hhe=a("span"),f(lA.$$.fragment),knr=l(),Uhe=a("span"),Rnr=o("TFAutoModelForImageClassification"),mRe=l(),Cr=a("div"),f(iA.$$.fragment),Snr=l(),Cc=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jhe=a("code"),$nr=o("from_pretrained()"),Inr=o("class method or the "),Yhe=a("code"),Nnr=o("from_config()"),Dnr=o(`class
method.`),jnr=l(),dA=a("p"),qnr=o("This class cannot be instantiated directly using "),Khe=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Xnr=l(),_t=a("div"),f(cA.$$.fragment),Vnr=l(),Zhe=a("p"),znr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wnr=l(),Mc=a("p"),Qnr=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ope=a("code"),Jnr=o("from_pretrained()"),Ynr=o("to load the model weights."),Knr=l(),rpe=a("p"),Znr=o("Examples:"),esr=l(),f(fA.$$.fragment),osr=l(),uo=a("div"),f(mA.$$.fragment),rsr=l(),tpe=a("p"),tsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),asr=l(),vn=a("p"),nsr=o("The model class to instantiate is selected based on the "),ape=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(":"),msr=l(),gA=a("ul"),D6=a("li"),lpe=a("strong"),gsr=o("convnext"),hsr=o(" \u2014 "),zG=a("a"),psr=o("TFConvNextForImageClassification"),_sr=o(" (ConvNext model)"),usr=l(),j6=a("li"),ipe=a("strong"),bsr=o("vit"),vsr=o(" \u2014 "),WG=a("a"),Tsr=o("TFViTForImageClassification"),Fsr=o(" (ViT model)"),Csr=l(),dpe=a("p"),Msr=o("Examples:"),Esr=l(),f(hA.$$.fragment),gRe=l(),Ec=a("h2"),q6=a("a"),cpe=a("span"),f(pA.$$.fragment),ysr=l(),fpe=a("span"),wsr=o("TFAutoModelForMaskedLM"),hRe=l(),Mr=a("div"),f(_A.$$.fragment),Asr=l(),yc=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mpe=a("code"),Bsr=o("from_pretrained()"),xsr=o("class method or the "),gpe=a("code"),ksr=o("from_config()"),Rsr=o(`class
method.`),Ssr=l(),uA=a("p"),Psr=o("This class cannot be instantiated directly using "),hpe=a("code"),$sr=o("__init__()"),Isr=o(" (throws an error)."),Nsr=l(),ut=a("div"),f(bA.$$.fragment),Dsr=l(),ppe=a("p"),jsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qsr=l(),wc=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),Osr=o("not"),Xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=a("code"),Vsr=o("from_pretrained()"),zsr=o("to load the model weights."),Wsr=l(),bpe=a("p"),Qsr=o("Examples:"),Hsr=l(),f(vA.$$.fragment),Usr=l(),bo=a("div"),f(TA.$$.fragment),Jsr=l(),vpe=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ksr=l(),Tn=a("p"),Zsr=o("The model class to instantiate is selected based on the "),Tpe=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),J=a("ul"),G6=a("li"),Mpe=a("strong"),llr=o("albert"),ilr=o(" \u2014 "),QG=a("a"),dlr=o("TFAlbertForMaskedLM"),clr=o(" (ALBERT model)"),flr=l(),O6=a("li"),Epe=a("strong"),mlr=o("bert"),glr=o(" \u2014 "),HG=a("a"),hlr=o("TFBertForMaskedLM"),plr=o(" (BERT model)"),_lr=l(),X6=a("li"),ype=a("strong"),ulr=o("camembert"),blr=o(" \u2014 "),UG=a("a"),vlr=o("TFCamembertForMaskedLM"),Tlr=o(" (CamemBERT model)"),Flr=l(),V6=a("li"),wpe=a("strong"),Clr=o("convbert"),Mlr=o(" \u2014 "),JG=a("a"),Elr=o("TFConvBertForMaskedLM"),ylr=o(" (ConvBERT model)"),wlr=l(),z6=a("li"),Ape=a("strong"),Alr=o("deberta"),Llr=o(" \u2014 "),YG=a("a"),Blr=o("TFDebertaForMaskedLM"),xlr=o(" (DeBERTa model)"),klr=l(),W6=a("li"),Lpe=a("strong"),Rlr=o("deberta-v2"),Slr=o(" \u2014 "),KG=a("a"),Plr=o("TFDebertaV2ForMaskedLM"),$lr=o(" (DeBERTa-v2 model)"),Ilr=l(),Q6=a("li"),Bpe=a("strong"),Nlr=o("distilbert"),Dlr=o(" \u2014 "),ZG=a("a"),jlr=o("TFDistilBertForMaskedLM"),qlr=o(" (DistilBERT model)"),Glr=l(),H6=a("li"),xpe=a("strong"),Olr=o("electra"),Xlr=o(" \u2014 "),eO=a("a"),Vlr=o("TFElectraForMaskedLM"),zlr=o(" (ELECTRA model)"),Wlr=l(),U6=a("li"),kpe=a("strong"),Qlr=o("flaubert"),Hlr=o(" \u2014 "),oO=a("a"),Ulr=o("TFFlaubertWithLMHeadModel"),Jlr=o(" (FlauBERT model)"),Ylr=l(),J6=a("li"),Rpe=a("strong"),Klr=o("funnel"),Zlr=o(" \u2014 "),rO=a("a"),eir=o("TFFunnelForMaskedLM"),oir=o(" (Funnel Transformer model)"),rir=l(),Y6=a("li"),Spe=a("strong"),tir=o("layoutlm"),air=o(" \u2014 "),tO=a("a"),nir=o("TFLayoutLMForMaskedLM"),sir=o(" (LayoutLM model)"),lir=l(),K6=a("li"),Ppe=a("strong"),iir=o("longformer"),dir=o(" \u2014 "),aO=a("a"),cir=o("TFLongformerForMaskedLM"),fir=o(" (Longformer model)"),mir=l(),Z6=a("li"),$pe=a("strong"),gir=o("mobilebert"),hir=o(" \u2014 "),nO=a("a"),pir=o("TFMobileBertForMaskedLM"),_ir=o(" (MobileBERT model)"),uir=l(),eT=a("li"),Ipe=a("strong"),bir=o("mpnet"),vir=o(" \u2014 "),sO=a("a"),Tir=o("TFMPNetForMaskedLM"),Fir=o(" (MPNet model)"),Cir=l(),oT=a("li"),Npe=a("strong"),Mir=o("rembert"),Eir=o(" \u2014 "),lO=a("a"),yir=o("TFRemBertForMaskedLM"),wir=o(" (RemBERT model)"),Air=l(),rT=a("li"),Dpe=a("strong"),Lir=o("roberta"),Bir=o(" \u2014 "),iO=a("a"),xir=o("TFRobertaForMaskedLM"),kir=o(" (RoBERTa model)"),Rir=l(),tT=a("li"),jpe=a("strong"),Sir=o("roformer"),Pir=o(" \u2014 "),dO=a("a"),$ir=o("TFRoFormerForMaskedLM"),Iir=o(" (RoFormer model)"),Nir=l(),aT=a("li"),qpe=a("strong"),Dir=o("tapas"),jir=o(" \u2014 "),cO=a("a"),qir=o("TFTapasForMaskedLM"),Gir=o(" (TAPAS model)"),Oir=l(),nT=a("li"),Gpe=a("strong"),Xir=o("xlm"),Vir=o(" \u2014 "),fO=a("a"),zir=o("TFXLMWithLMHeadModel"),Wir=o(" (XLM model)"),Qir=l(),sT=a("li"),Ope=a("strong"),Hir=o("xlm-roberta"),Uir=o(" \u2014 "),mO=a("a"),Jir=o("TFXLMRobertaForMaskedLM"),Yir=o(" (XLM-RoBERTa model)"),Kir=l(),Xpe=a("p"),Zir=o("Examples:"),edr=l(),f(FA.$$.fragment),pRe=l(),Ac=a("h2"),lT=a("a"),Vpe=a("span"),f(CA.$$.fragment),odr=l(),zpe=a("span"),rdr=o("TFAutoModelForSeq2SeqLM"),_Re=l(),Er=a("div"),f(MA.$$.fragment),tdr=l(),Lc=a("p"),adr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wpe=a("code"),ndr=o("from_pretrained()"),sdr=o("class method or the "),Qpe=a("code"),ldr=o("from_config()"),idr=o(`class
method.`),ddr=l(),EA=a("p"),cdr=o("This class cannot be instantiated directly using "),Hpe=a("code"),fdr=o("__init__()"),mdr=o(" (throws an error)."),gdr=l(),bt=a("div"),f(yA.$$.fragment),hdr=l(),Upe=a("p"),pdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_dr=l(),Bc=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),bdr=o("not"),vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=a("code"),Tdr=o("from_pretrained()"),Fdr=o("to load the model weights."),Cdr=l(),Kpe=a("p"),Mdr=o("Examples:"),Edr=l(),f(wA.$$.fragment),ydr=l(),vo=a("div"),f(AA.$$.fragment),wdr=l(),Zpe=a("p"),Adr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ldr=l(),Fn=a("p"),Bdr=o("The model class to instantiate is selected based on the "),e_e=a("code"),xdr=o("model_type"),kdr=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),Rdr=o("pretrained_model_name_or_path"),Sdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),Pdr=o("pretrained_model_name_or_path"),$dr=o(":"),Idr=l(),_e=a("ul"),iT=a("li"),t_e=a("strong"),Ndr=o("bart"),Ddr=o(" \u2014 "),gO=a("a"),jdr=o("TFBartForConditionalGeneration"),qdr=o(" (BART model)"),Gdr=l(),dT=a("li"),a_e=a("strong"),Odr=o("blenderbot"),Xdr=o(" \u2014 "),hO=a("a"),Vdr=o("TFBlenderbotForConditionalGeneration"),zdr=o(" (Blenderbot model)"),Wdr=l(),cT=a("li"),n_e=a("strong"),Qdr=o("blenderbot-small"),Hdr=o(" \u2014 "),pO=a("a"),Udr=o("TFBlenderbotSmallForConditionalGeneration"),Jdr=o(" (BlenderbotSmall model)"),Ydr=l(),fT=a("li"),s_e=a("strong"),Kdr=o("encoder-decoder"),Zdr=o(" \u2014 "),_O=a("a"),ecr=o("TFEncoderDecoderModel"),ocr=o(" (Encoder decoder model)"),rcr=l(),mT=a("li"),l_e=a("strong"),tcr=o("led"),acr=o(" \u2014 "),uO=a("a"),ncr=o("TFLEDForConditionalGeneration"),scr=o(" (LED model)"),lcr=l(),gT=a("li"),i_e=a("strong"),icr=o("marian"),dcr=o(" \u2014 "),bO=a("a"),ccr=o("TFMarianMTModel"),fcr=o(" (Marian model)"),mcr=l(),hT=a("li"),d_e=a("strong"),gcr=o("mbart"),hcr=o(" \u2014 "),vO=a("a"),pcr=o("TFMBartForConditionalGeneration"),_cr=o(" (mBART model)"),ucr=l(),pT=a("li"),c_e=a("strong"),bcr=o("mt5"),vcr=o(" \u2014 "),TO=a("a"),Tcr=o("TFMT5ForConditionalGeneration"),Fcr=o(" (mT5 model)"),Ccr=l(),_T=a("li"),f_e=a("strong"),Mcr=o("pegasus"),Ecr=o(" \u2014 "),FO=a("a"),ycr=o("TFPegasusForConditionalGeneration"),wcr=o(" (Pegasus model)"),Acr=l(),uT=a("li"),m_e=a("strong"),Lcr=o("t5"),Bcr=o(" \u2014 "),CO=a("a"),xcr=o("TFT5ForConditionalGeneration"),kcr=o(" (T5 model)"),Rcr=l(),g_e=a("p"),Scr=o("Examples:"),Pcr=l(),f(LA.$$.fragment),uRe=l(),xc=a("h2"),bT=a("a"),h_e=a("span"),f(BA.$$.fragment),$cr=l(),p_e=a("span"),Icr=o("TFAutoModelForSequenceClassification"),bRe=l(),yr=a("div"),f(xA.$$.fragment),Ncr=l(),kc=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),__e=a("code"),jcr=o("from_pretrained()"),qcr=o("class method or the "),u_e=a("code"),Gcr=o("from_config()"),Ocr=o(`class
method.`),Xcr=l(),kA=a("p"),Vcr=o("This class cannot be instantiated directly using "),b_e=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),vt=a("div"),f(RA.$$.fragment),Hcr=l(),v_e=a("p"),Ucr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jcr=l(),Rc=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=a("code"),efr=o("from_pretrained()"),ofr=o("to load the model weights."),rfr=l(),C_e=a("p"),tfr=o("Examples:"),afr=l(),f(SA.$$.fragment),nfr=l(),To=a("div"),f(PA.$$.fragment),sfr=l(),M_e=a("p"),lfr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ifr=l(),Cn=a("p"),dfr=o("The model class to instantiate is selected based on the "),E_e=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(":"),_fr=l(),V=a("ul"),vT=a("li"),A_e=a("strong"),ufr=o("albert"),bfr=o(" \u2014 "),MO=a("a"),vfr=o("TFAlbertForSequenceClassification"),Tfr=o(" (ALBERT model)"),Ffr=l(),TT=a("li"),L_e=a("strong"),Cfr=o("bert"),Mfr=o(" \u2014 "),EO=a("a"),Efr=o("TFBertForSequenceClassification"),yfr=o(" (BERT model)"),wfr=l(),FT=a("li"),B_e=a("strong"),Afr=o("camembert"),Lfr=o(" \u2014 "),yO=a("a"),Bfr=o("TFCamembertForSequenceClassification"),xfr=o(" (CamemBERT model)"),kfr=l(),CT=a("li"),x_e=a("strong"),Rfr=o("convbert"),Sfr=o(" \u2014 "),wO=a("a"),Pfr=o("TFConvBertForSequenceClassification"),$fr=o(" (ConvBERT model)"),Ifr=l(),MT=a("li"),k_e=a("strong"),Nfr=o("ctrl"),Dfr=o(" \u2014 "),AO=a("a"),jfr=o("TFCTRLForSequenceClassification"),qfr=o(" (CTRL model)"),Gfr=l(),ET=a("li"),R_e=a("strong"),Ofr=o("deberta"),Xfr=o(" \u2014 "),LO=a("a"),Vfr=o("TFDebertaForSequenceClassification"),zfr=o(" (DeBERTa model)"),Wfr=l(),yT=a("li"),S_e=a("strong"),Qfr=o("deberta-v2"),Hfr=o(" \u2014 "),BO=a("a"),Ufr=o("TFDebertaV2ForSequenceClassification"),Jfr=o(" (DeBERTa-v2 model)"),Yfr=l(),wT=a("li"),P_e=a("strong"),Kfr=o("distilbert"),Zfr=o(" \u2014 "),xO=a("a"),emr=o("TFDistilBertForSequenceClassification"),omr=o(" (DistilBERT model)"),rmr=l(),AT=a("li"),$_e=a("strong"),tmr=o("electra"),amr=o(" \u2014 "),kO=a("a"),nmr=o("TFElectraForSequenceClassification"),smr=o(" (ELECTRA model)"),lmr=l(),LT=a("li"),I_e=a("strong"),imr=o("flaubert"),dmr=o(" \u2014 "),RO=a("a"),cmr=o("TFFlaubertForSequenceClassification"),fmr=o(" (FlauBERT model)"),mmr=l(),BT=a("li"),N_e=a("strong"),gmr=o("funnel"),hmr=o(" \u2014 "),SO=a("a"),pmr=o("TFFunnelForSequenceClassification"),_mr=o(" (Funnel Transformer model)"),umr=l(),xT=a("li"),D_e=a("strong"),bmr=o("gpt2"),vmr=o(" \u2014 "),PO=a("a"),Tmr=o("TFGPT2ForSequenceClassification"),Fmr=o(" (OpenAI GPT-2 model)"),Cmr=l(),kT=a("li"),j_e=a("strong"),Mmr=o("layoutlm"),Emr=o(" \u2014 "),$O=a("a"),ymr=o("TFLayoutLMForSequenceClassification"),wmr=o(" (LayoutLM model)"),Amr=l(),RT=a("li"),q_e=a("strong"),Lmr=o("longformer"),Bmr=o(" \u2014 "),IO=a("a"),xmr=o("TFLongformerForSequenceClassification"),kmr=o(" (Longformer model)"),Rmr=l(),ST=a("li"),G_e=a("strong"),Smr=o("mobilebert"),Pmr=o(" \u2014 "),NO=a("a"),$mr=o("TFMobileBertForSequenceClassification"),Imr=o(" (MobileBERT model)"),Nmr=l(),PT=a("li"),O_e=a("strong"),Dmr=o("mpnet"),jmr=o(" \u2014 "),DO=a("a"),qmr=o("TFMPNetForSequenceClassification"),Gmr=o(" (MPNet model)"),Omr=l(),$T=a("li"),X_e=a("strong"),Xmr=o("openai-gpt"),Vmr=o(" \u2014 "),jO=a("a"),zmr=o("TFOpenAIGPTForSequenceClassification"),Wmr=o(" (OpenAI GPT model)"),Qmr=l(),IT=a("li"),V_e=a("strong"),Hmr=o("rembert"),Umr=o(" \u2014 "),qO=a("a"),Jmr=o("TFRemBertForSequenceClassification"),Ymr=o(" (RemBERT model)"),Kmr=l(),NT=a("li"),z_e=a("strong"),Zmr=o("roberta"),egr=o(" \u2014 "),GO=a("a"),ogr=o("TFRobertaForSequenceClassification"),rgr=o(" (RoBERTa model)"),tgr=l(),DT=a("li"),W_e=a("strong"),agr=o("roformer"),ngr=o(" \u2014 "),OO=a("a"),sgr=o("TFRoFormerForSequenceClassification"),lgr=o(" (RoFormer model)"),igr=l(),jT=a("li"),Q_e=a("strong"),dgr=o("tapas"),cgr=o(" \u2014 "),XO=a("a"),fgr=o("TFTapasForSequenceClassification"),mgr=o(" (TAPAS model)"),ggr=l(),qT=a("li"),H_e=a("strong"),hgr=o("transfo-xl"),pgr=o(" \u2014 "),VO=a("a"),_gr=o("TFTransfoXLForSequenceClassification"),ugr=o(" (Transformer-XL model)"),bgr=l(),GT=a("li"),U_e=a("strong"),vgr=o("xlm"),Tgr=o(" \u2014 "),zO=a("a"),Fgr=o("TFXLMForSequenceClassification"),Cgr=o(" (XLM model)"),Mgr=l(),OT=a("li"),J_e=a("strong"),Egr=o("xlm-roberta"),ygr=o(" \u2014 "),WO=a("a"),wgr=o("TFXLMRobertaForSequenceClassification"),Agr=o(" (XLM-RoBERTa model)"),Lgr=l(),XT=a("li"),Y_e=a("strong"),Bgr=o("xlnet"),xgr=o(" \u2014 "),QO=a("a"),kgr=o("TFXLNetForSequenceClassification"),Rgr=o(" (XLNet model)"),Sgr=l(),K_e=a("p"),Pgr=o("Examples:"),$gr=l(),f($A.$$.fragment),vRe=l(),Sc=a("h2"),VT=a("a"),Z_e=a("span"),f(IA.$$.fragment),Igr=l(),eue=a("span"),Ngr=o("TFAutoModelForMultipleChoice"),TRe=l(),wr=a("div"),f(NA.$$.fragment),Dgr=l(),Pc=a("p"),jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oue=a("code"),qgr=o("from_pretrained()"),Ggr=o("class method or the "),rue=a("code"),Ogr=o("from_config()"),Xgr=o(`class
method.`),Vgr=l(),DA=a("p"),zgr=o("This class cannot be instantiated directly using "),tue=a("code"),Wgr=o("__init__()"),Qgr=o(" (throws an error)."),Hgr=l(),Tt=a("div"),f(jA.$$.fragment),Ugr=l(),aue=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ygr=l(),$c=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sue=a("code"),ohr=o("from_pretrained()"),rhr=o("to load the model weights."),thr=l(),lue=a("p"),ahr=o("Examples:"),nhr=l(),f(qA.$$.fragment),shr=l(),Fo=a("div"),f(GA.$$.fragment),lhr=l(),iue=a("p"),ihr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dhr=l(),Mn=a("p"),chr=o("The model class to instantiate is selected based on the "),due=a("code"),fhr=o("model_type"),mhr=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(":"),uhr=l(),ae=a("ul"),zT=a("li"),mue=a("strong"),bhr=o("albert"),vhr=o(" \u2014 "),HO=a("a"),Thr=o("TFAlbertForMultipleChoice"),Fhr=o(" (ALBERT model)"),Chr=l(),WT=a("li"),gue=a("strong"),Mhr=o("bert"),Ehr=o(" \u2014 "),UO=a("a"),yhr=o("TFBertForMultipleChoice"),whr=o(" (BERT model)"),Ahr=l(),QT=a("li"),hue=a("strong"),Lhr=o("camembert"),Bhr=o(" \u2014 "),JO=a("a"),xhr=o("TFCamembertForMultipleChoice"),khr=o(" (CamemBERT model)"),Rhr=l(),HT=a("li"),pue=a("strong"),Shr=o("convbert"),Phr=o(" \u2014 "),YO=a("a"),$hr=o("TFConvBertForMultipleChoice"),Ihr=o(" (ConvBERT model)"),Nhr=l(),UT=a("li"),_ue=a("strong"),Dhr=o("distilbert"),jhr=o(" \u2014 "),KO=a("a"),qhr=o("TFDistilBertForMultipleChoice"),Ghr=o(" (DistilBERT model)"),Ohr=l(),JT=a("li"),uue=a("strong"),Xhr=o("electra"),Vhr=o(" \u2014 "),ZO=a("a"),zhr=o("TFElectraForMultipleChoice"),Whr=o(" (ELECTRA model)"),Qhr=l(),YT=a("li"),bue=a("strong"),Hhr=o("flaubert"),Uhr=o(" \u2014 "),eX=a("a"),Jhr=o("TFFlaubertForMultipleChoice"),Yhr=o(" (FlauBERT model)"),Khr=l(),KT=a("li"),vue=a("strong"),Zhr=o("funnel"),epr=o(" \u2014 "),oX=a("a"),opr=o("TFFunnelForMultipleChoice"),rpr=o(" (Funnel Transformer model)"),tpr=l(),ZT=a("li"),Tue=a("strong"),apr=o("longformer"),npr=o(" \u2014 "),rX=a("a"),spr=o("TFLongformerForMultipleChoice"),lpr=o(" (Longformer model)"),ipr=l(),eF=a("li"),Fue=a("strong"),dpr=o("mobilebert"),cpr=o(" \u2014 "),tX=a("a"),fpr=o("TFMobileBertForMultipleChoice"),mpr=o(" (MobileBERT model)"),gpr=l(),oF=a("li"),Cue=a("strong"),hpr=o("mpnet"),ppr=o(" \u2014 "),aX=a("a"),_pr=o("TFMPNetForMultipleChoice"),upr=o(" (MPNet model)"),bpr=l(),rF=a("li"),Mue=a("strong"),vpr=o("rembert"),Tpr=o(" \u2014 "),nX=a("a"),Fpr=o("TFRemBertForMultipleChoice"),Cpr=o(" (RemBERT model)"),Mpr=l(),tF=a("li"),Eue=a("strong"),Epr=o("roberta"),ypr=o(" \u2014 "),sX=a("a"),wpr=o("TFRobertaForMultipleChoice"),Apr=o(" (RoBERTa model)"),Lpr=l(),aF=a("li"),yue=a("strong"),Bpr=o("roformer"),xpr=o(" \u2014 "),lX=a("a"),kpr=o("TFRoFormerForMultipleChoice"),Rpr=o(" (RoFormer model)"),Spr=l(),nF=a("li"),wue=a("strong"),Ppr=o("xlm"),$pr=o(" \u2014 "),iX=a("a"),Ipr=o("TFXLMForMultipleChoice"),Npr=o(" (XLM model)"),Dpr=l(),sF=a("li"),Aue=a("strong"),jpr=o("xlm-roberta"),qpr=o(" \u2014 "),dX=a("a"),Gpr=o("TFXLMRobertaForMultipleChoice"),Opr=o(" (XLM-RoBERTa model)"),Xpr=l(),lF=a("li"),Lue=a("strong"),Vpr=o("xlnet"),zpr=o(" \u2014 "),cX=a("a"),Wpr=o("TFXLNetForMultipleChoice"),Qpr=o(" (XLNet model)"),Hpr=l(),Bue=a("p"),Upr=o("Examples:"),Jpr=l(),f(OA.$$.fragment),FRe=l(),Ic=a("h2"),iF=a("a"),xue=a("span"),f(XA.$$.fragment),Ypr=l(),kue=a("span"),Kpr=o("TFAutoModelForTableQuestionAnswering"),CRe=l(),Ar=a("div"),f(VA.$$.fragment),Zpr=l(),Nc=a("p"),e_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rue=a("code"),o_r=o("from_pretrained()"),r_r=o("class method or the "),Sue=a("code"),t_r=o("from_config()"),a_r=o(`class
method.`),n_r=l(),zA=a("p"),s_r=o("This class cannot be instantiated directly using "),Pue=a("code"),l_r=o("__init__()"),i_r=o(" (throws an error)."),d_r=l(),Ft=a("div"),f(WA.$$.fragment),c_r=l(),$ue=a("p"),f_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),m_r=l(),Dc=a("p"),g_r=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),h_r=o("not"),p_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=a("code"),__r=o("from_pretrained()"),u_r=o("to load the model weights."),b_r=l(),Due=a("p"),v_r=o("Examples:"),T_r=l(),f(QA.$$.fragment),F_r=l(),Co=a("div"),f(HA.$$.fragment),C_r=l(),jue=a("p"),M_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E_r=l(),En=a("p"),y_r=o("The model class to instantiate is selected based on the "),que=a("code"),w_r=o("model_type"),A_r=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),L_r=o("pretrained_model_name_or_path"),B_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),x_r=o("pretrained_model_name_or_path"),k_r=o(":"),R_r=l(),Xue=a("ul"),dF=a("li"),Vue=a("strong"),S_r=o("tapas"),P_r=o(" \u2014 "),fX=a("a"),$_r=o("TFTapasForQuestionAnswering"),I_r=o(" (TAPAS model)"),N_r=l(),zue=a("p"),D_r=o("Examples:"),j_r=l(),f(UA.$$.fragment),MRe=l(),jc=a("h2"),cF=a("a"),Wue=a("span"),f(JA.$$.fragment),q_r=l(),Que=a("span"),G_r=o("TFAutoModelForTokenClassification"),ERe=l(),Lr=a("div"),f(YA.$$.fragment),O_r=l(),qc=a("p"),X_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hue=a("code"),V_r=o("from_pretrained()"),z_r=o("class method or the "),Uue=a("code"),W_r=o("from_config()"),Q_r=o(`class
method.`),H_r=l(),KA=a("p"),U_r=o("This class cannot be instantiated directly using "),Jue=a("code"),J_r=o("__init__()"),Y_r=o(" (throws an error)."),K_r=l(),Ct=a("div"),f(ZA.$$.fragment),Z_r=l(),Yue=a("p"),eur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),our=l(),Gc=a("p"),rur=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),tur=o("not"),aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=a("code"),nur=o("from_pretrained()"),sur=o("to load the model weights."),lur=l(),e1e=a("p"),iur=o("Examples:"),dur=l(),f(e0.$$.fragment),cur=l(),Mo=a("div"),f(o0.$$.fragment),fur=l(),o1e=a("p"),mur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gur=l(),yn=a("p"),hur=o("The model class to instantiate is selected based on the "),r1e=a("code"),pur=o("model_type"),_ur=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),uur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),vur=o("pretrained_model_name_or_path"),Tur=o(":"),Fur=l(),Y=a("ul"),fF=a("li"),n1e=a("strong"),Cur=o("albert"),Mur=o(" \u2014 "),mX=a("a"),Eur=o("TFAlbertForTokenClassification"),yur=o(" (ALBERT model)"),wur=l(),mF=a("li"),s1e=a("strong"),Aur=o("bert"),Lur=o(" \u2014 "),gX=a("a"),Bur=o("TFBertForTokenClassification"),xur=o(" (BERT model)"),kur=l(),gF=a("li"),l1e=a("strong"),Rur=o("camembert"),Sur=o(" \u2014 "),hX=a("a"),Pur=o("TFCamembertForTokenClassification"),$ur=o(" (CamemBERT model)"),Iur=l(),hF=a("li"),i1e=a("strong"),Nur=o("convbert"),Dur=o(" \u2014 "),pX=a("a"),jur=o("TFConvBertForTokenClassification"),qur=o(" (ConvBERT model)"),Gur=l(),pF=a("li"),d1e=a("strong"),Our=o("deberta"),Xur=o(" \u2014 "),_X=a("a"),Vur=o("TFDebertaForTokenClassification"),zur=o(" (DeBERTa model)"),Wur=l(),_F=a("li"),c1e=a("strong"),Qur=o("deberta-v2"),Hur=o(" \u2014 "),uX=a("a"),Uur=o("TFDebertaV2ForTokenClassification"),Jur=o(" (DeBERTa-v2 model)"),Yur=l(),uF=a("li"),f1e=a("strong"),Kur=o("distilbert"),Zur=o(" \u2014 "),bX=a("a"),e1r=o("TFDistilBertForTokenClassification"),o1r=o(" (DistilBERT model)"),r1r=l(),bF=a("li"),m1e=a("strong"),t1r=o("electra"),a1r=o(" \u2014 "),vX=a("a"),n1r=o("TFElectraForTokenClassification"),s1r=o(" (ELECTRA model)"),l1r=l(),vF=a("li"),g1e=a("strong"),i1r=o("flaubert"),d1r=o(" \u2014 "),TX=a("a"),c1r=o("TFFlaubertForTokenClassification"),f1r=o(" (FlauBERT model)"),m1r=l(),TF=a("li"),h1e=a("strong"),g1r=o("funnel"),h1r=o(" \u2014 "),FX=a("a"),p1r=o("TFFunnelForTokenClassification"),_1r=o(" (Funnel Transformer model)"),u1r=l(),FF=a("li"),p1e=a("strong"),b1r=o("layoutlm"),v1r=o(" \u2014 "),CX=a("a"),T1r=o("TFLayoutLMForTokenClassification"),F1r=o(" (LayoutLM model)"),C1r=l(),CF=a("li"),_1e=a("strong"),M1r=o("longformer"),E1r=o(" \u2014 "),MX=a("a"),y1r=o("TFLongformerForTokenClassification"),w1r=o(" (Longformer model)"),A1r=l(),MF=a("li"),u1e=a("strong"),L1r=o("mobilebert"),B1r=o(" \u2014 "),EX=a("a"),x1r=o("TFMobileBertForTokenClassification"),k1r=o(" (MobileBERT model)"),R1r=l(),EF=a("li"),b1e=a("strong"),S1r=o("mpnet"),P1r=o(" \u2014 "),yX=a("a"),$1r=o("TFMPNetForTokenClassification"),I1r=o(" (MPNet model)"),N1r=l(),yF=a("li"),v1e=a("strong"),D1r=o("rembert"),j1r=o(" \u2014 "),wX=a("a"),q1r=o("TFRemBertForTokenClassification"),G1r=o(" (RemBERT model)"),O1r=l(),wF=a("li"),T1e=a("strong"),X1r=o("roberta"),V1r=o(" \u2014 "),AX=a("a"),z1r=o("TFRobertaForTokenClassification"),W1r=o(" (RoBERTa model)"),Q1r=l(),AF=a("li"),F1e=a("strong"),H1r=o("roformer"),U1r=o(" \u2014 "),LX=a("a"),J1r=o("TFRoFormerForTokenClassification"),Y1r=o(" (RoFormer model)"),K1r=l(),LF=a("li"),C1e=a("strong"),Z1r=o("xlm"),e9r=o(" \u2014 "),BX=a("a"),o9r=o("TFXLMForTokenClassification"),r9r=o(" (XLM model)"),t9r=l(),BF=a("li"),M1e=a("strong"),a9r=o("xlm-roberta"),n9r=o(" \u2014 "),xX=a("a"),s9r=o("TFXLMRobertaForTokenClassification"),l9r=o(" (XLM-RoBERTa model)"),i9r=l(),xF=a("li"),E1e=a("strong"),d9r=o("xlnet"),c9r=o(" \u2014 "),kX=a("a"),f9r=o("TFXLNetForTokenClassification"),m9r=o(" (XLNet model)"),g9r=l(),y1e=a("p"),h9r=o("Examples:"),p9r=l(),f(r0.$$.fragment),yRe=l(),Oc=a("h2"),kF=a("a"),w1e=a("span"),f(t0.$$.fragment),_9r=l(),A1e=a("span"),u9r=o("TFAutoModelForQuestionAnswering"),wRe=l(),Br=a("div"),f(a0.$$.fragment),b9r=l(),Xc=a("p"),v9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),L1e=a("code"),T9r=o("from_pretrained()"),F9r=o("class method or the "),B1e=a("code"),C9r=o("from_config()"),M9r=o(`class
method.`),E9r=l(),n0=a("p"),y9r=o("This class cannot be instantiated directly using "),x1e=a("code"),w9r=o("__init__()"),A9r=o(" (throws an error)."),L9r=l(),Mt=a("div"),f(s0.$$.fragment),B9r=l(),k1e=a("p"),x9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k9r=l(),Vc=a("p"),R9r=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),S9r=o("not"),P9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S1e=a("code"),$9r=o("from_pretrained()"),I9r=o("to load the model weights."),N9r=l(),P1e=a("p"),D9r=o("Examples:"),j9r=l(),f(l0.$$.fragment),q9r=l(),Eo=a("div"),f(i0.$$.fragment),G9r=l(),$1e=a("p"),O9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X9r=l(),wn=a("p"),V9r=o("The model class to instantiate is selected based on the "),I1e=a("code"),z9r=o("model_type"),W9r=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),Q9r=o("pretrained_model_name_or_path"),H9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(":"),Y9r=l(),Z=a("ul"),RF=a("li"),j1e=a("strong"),K9r=o("albert"),Z9r=o(" \u2014 "),RX=a("a"),ebr=o("TFAlbertForQuestionAnswering"),obr=o(" (ALBERT model)"),rbr=l(),SF=a("li"),q1e=a("strong"),tbr=o("bert"),abr=o(" \u2014 "),SX=a("a"),nbr=o("TFBertForQuestionAnswering"),sbr=o(" (BERT model)"),lbr=l(),PF=a("li"),G1e=a("strong"),ibr=o("camembert"),dbr=o(" \u2014 "),PX=a("a"),cbr=o("TFCamembertForQuestionAnswering"),fbr=o(" (CamemBERT model)"),mbr=l(),$F=a("li"),O1e=a("strong"),gbr=o("convbert"),hbr=o(" \u2014 "),$X=a("a"),pbr=o("TFConvBertForQuestionAnswering"),_br=o(" (ConvBERT model)"),ubr=l(),IF=a("li"),X1e=a("strong"),bbr=o("deberta"),vbr=o(" \u2014 "),IX=a("a"),Tbr=o("TFDebertaForQuestionAnswering"),Fbr=o(" (DeBERTa model)"),Cbr=l(),NF=a("li"),V1e=a("strong"),Mbr=o("deberta-v2"),Ebr=o(" \u2014 "),NX=a("a"),ybr=o("TFDebertaV2ForQuestionAnswering"),wbr=o(" (DeBERTa-v2 model)"),Abr=l(),DF=a("li"),z1e=a("strong"),Lbr=o("distilbert"),Bbr=o(" \u2014 "),DX=a("a"),xbr=o("TFDistilBertForQuestionAnswering"),kbr=o(" (DistilBERT model)"),Rbr=l(),jF=a("li"),W1e=a("strong"),Sbr=o("electra"),Pbr=o(" \u2014 "),jX=a("a"),$br=o("TFElectraForQuestionAnswering"),Ibr=o(" (ELECTRA model)"),Nbr=l(),qF=a("li"),Q1e=a("strong"),Dbr=o("flaubert"),jbr=o(" \u2014 "),qX=a("a"),qbr=o("TFFlaubertForQuestionAnsweringSimple"),Gbr=o(" (FlauBERT model)"),Obr=l(),GF=a("li"),H1e=a("strong"),Xbr=o("funnel"),Vbr=o(" \u2014 "),GX=a("a"),zbr=o("TFFunnelForQuestionAnswering"),Wbr=o(" (Funnel Transformer model)"),Qbr=l(),OF=a("li"),U1e=a("strong"),Hbr=o("longformer"),Ubr=o(" \u2014 "),OX=a("a"),Jbr=o("TFLongformerForQuestionAnswering"),Ybr=o(" (Longformer model)"),Kbr=l(),XF=a("li"),J1e=a("strong"),Zbr=o("mobilebert"),e3r=o(" \u2014 "),XX=a("a"),o3r=o("TFMobileBertForQuestionAnswering"),r3r=o(" (MobileBERT model)"),t3r=l(),VF=a("li"),Y1e=a("strong"),a3r=o("mpnet"),n3r=o(" \u2014 "),VX=a("a"),s3r=o("TFMPNetForQuestionAnswering"),l3r=o(" (MPNet model)"),i3r=l(),zF=a("li"),K1e=a("strong"),d3r=o("rembert"),c3r=o(" \u2014 "),zX=a("a"),f3r=o("TFRemBertForQuestionAnswering"),m3r=o(" (RemBERT model)"),g3r=l(),WF=a("li"),Z1e=a("strong"),h3r=o("roberta"),p3r=o(" \u2014 "),WX=a("a"),_3r=o("TFRobertaForQuestionAnswering"),u3r=o(" (RoBERTa model)"),b3r=l(),QF=a("li"),e9e=a("strong"),v3r=o("roformer"),T3r=o(" \u2014 "),QX=a("a"),F3r=o("TFRoFormerForQuestionAnswering"),C3r=o(" (RoFormer model)"),M3r=l(),HF=a("li"),o9e=a("strong"),E3r=o("xlm"),y3r=o(" \u2014 "),HX=a("a"),w3r=o("TFXLMForQuestionAnsweringSimple"),A3r=o(" (XLM model)"),L3r=l(),UF=a("li"),r9e=a("strong"),B3r=o("xlm-roberta"),x3r=o(" \u2014 "),UX=a("a"),k3r=o("TFXLMRobertaForQuestionAnswering"),R3r=o(" (XLM-RoBERTa model)"),S3r=l(),JF=a("li"),t9e=a("strong"),P3r=o("xlnet"),$3r=o(" \u2014 "),JX=a("a"),I3r=o("TFXLNetForQuestionAnsweringSimple"),N3r=o(" (XLNet model)"),D3r=l(),a9e=a("p"),j3r=o("Examples:"),q3r=l(),f(d0.$$.fragment),ARe=l(),zc=a("h2"),YF=a("a"),n9e=a("span"),f(c0.$$.fragment),G3r=l(),s9e=a("span"),O3r=o("TFAutoModelForVision2Seq"),LRe=l(),xr=a("div"),f(f0.$$.fragment),X3r=l(),Wc=a("p"),V3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l9e=a("code"),z3r=o("from_pretrained()"),W3r=o("class method or the "),i9e=a("code"),Q3r=o("from_config()"),H3r=o(`class
method.`),U3r=l(),m0=a("p"),J3r=o("This class cannot be instantiated directly using "),d9e=a("code"),Y3r=o("__init__()"),K3r=o(" (throws an error)."),Z3r=l(),Et=a("div"),f(g0.$$.fragment),e2r=l(),c9e=a("p"),o2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r2r=l(),Qc=a("p"),t2r=o(`Note:
Loading a model from its configuration file does `),f9e=a("strong"),a2r=o("not"),n2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m9e=a("code"),s2r=o("from_pretrained()"),l2r=o("to load the model weights."),i2r=l(),g9e=a("p"),d2r=o("Examples:"),c2r=l(),f(h0.$$.fragment),f2r=l(),yo=a("div"),f(p0.$$.fragment),m2r=l(),h9e=a("p"),g2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h2r=l(),An=a("p"),p2r=o("The model class to instantiate is selected based on the "),p9e=a("code"),_2r=o("model_type"),u2r=o(` property of the config object (either
passed as an argument or loaded from `),_9e=a("code"),b2r=o("pretrained_model_name_or_path"),v2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=a("code"),T2r=o("pretrained_model_name_or_path"),F2r=o(":"),C2r=l(),b9e=a("ul"),KF=a("li"),v9e=a("strong"),M2r=o("vision-encoder-decoder"),E2r=o(" \u2014 "),YX=a("a"),y2r=o("TFVisionEncoderDecoderModel"),w2r=o(" (Vision Encoder decoder model)"),A2r=l(),T9e=a("p"),L2r=o("Examples:"),B2r=l(),f(_0.$$.fragment),BRe=l(),Hc=a("h2"),ZF=a("a"),F9e=a("span"),f(u0.$$.fragment),x2r=l(),C9e=a("span"),k2r=o("TFAutoModelForSpeechSeq2Seq"),xRe=l(),kr=a("div"),f(b0.$$.fragment),R2r=l(),Uc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M9e=a("code"),P2r=o("from_pretrained()"),$2r=o("class method or the "),E9e=a("code"),I2r=o("from_config()"),N2r=o(`class
method.`),D2r=l(),v0=a("p"),j2r=o("This class cannot be instantiated directly using "),y9e=a("code"),q2r=o("__init__()"),G2r=o(" (throws an error)."),O2r=l(),yt=a("div"),f(T0.$$.fragment),X2r=l(),w9e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z2r=l(),Jc=a("p"),W2r=o(`Note:
Loading a model from its configuration file does `),A9e=a("strong"),Q2r=o("not"),H2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L9e=a("code"),U2r=o("from_pretrained()"),J2r=o("to load the model weights."),Y2r=l(),B9e=a("p"),K2r=o("Examples:"),Z2r=l(),f(F0.$$.fragment),evr=l(),wo=a("div"),f(C0.$$.fragment),ovr=l(),x9e=a("p"),rvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tvr=l(),Ln=a("p"),avr=o("The model class to instantiate is selected based on the "),k9e=a("code"),nvr=o("model_type"),svr=o(` property of the config object (either
passed as an argument or loaded from `),R9e=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(":"),fvr=l(),P9e=a("ul"),eC=a("li"),$9e=a("strong"),mvr=o("speech_to_text"),gvr=o(" \u2014 "),KX=a("a"),hvr=o("TFSpeech2TextForConditionalGeneration"),pvr=o(" (Speech2Text model)"),_vr=l(),I9e=a("p"),uvr=o("Examples:"),bvr=l(),f(M0.$$.fragment),kRe=l(),Yc=a("h2"),oC=a("a"),N9e=a("span"),f(E0.$$.fragment),vvr=l(),D9e=a("span"),Tvr=o("FlaxAutoModel"),RRe=l(),Rr=a("div"),f(y0.$$.fragment),Fvr=l(),Kc=a("p"),Cvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),j9e=a("code"),Mvr=o("from_pretrained()"),Evr=o("class method or the "),q9e=a("code"),yvr=o("from_config()"),wvr=o(`class
method.`),Avr=l(),w0=a("p"),Lvr=o("This class cannot be instantiated directly using "),G9e=a("code"),Bvr=o("__init__()"),xvr=o(" (throws an error)."),kvr=l(),wt=a("div"),f(A0.$$.fragment),Rvr=l(),O9e=a("p"),Svr=o("Instantiates one of the base model classes of the library from a configuration."),Pvr=l(),Zc=a("p"),$vr=o(`Note:
Loading a model from its configuration file does `),X9e=a("strong"),Ivr=o("not"),Nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V9e=a("code"),Dvr=o("from_pretrained()"),jvr=o("to load the model weights."),qvr=l(),z9e=a("p"),Gvr=o("Examples:"),Ovr=l(),f(L0.$$.fragment),Xvr=l(),Ao=a("div"),f(B0.$$.fragment),Vvr=l(),W9e=a("p"),zvr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wvr=l(),Bn=a("p"),Qvr=o("The model class to instantiate is selected based on the "),Q9e=a("code"),Hvr=o("model_type"),Uvr=o(` property of the config object (either
passed as an argument or loaded from `),H9e=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(":"),e6r=l(),z=a("ul"),rC=a("li"),J9e=a("strong"),o6r=o("albert"),r6r=o(" \u2014 "),ZX=a("a"),t6r=o("FlaxAlbertModel"),a6r=o(" (ALBERT model)"),n6r=l(),tC=a("li"),Y9e=a("strong"),s6r=o("bart"),l6r=o(" \u2014 "),eV=a("a"),i6r=o("FlaxBartModel"),d6r=o(" (BART model)"),c6r=l(),aC=a("li"),K9e=a("strong"),f6r=o("beit"),m6r=o(" \u2014 "),oV=a("a"),g6r=o("FlaxBeitModel"),h6r=o(" (BEiT model)"),p6r=l(),nC=a("li"),Z9e=a("strong"),_6r=o("bert"),u6r=o(" \u2014 "),rV=a("a"),b6r=o("FlaxBertModel"),v6r=o(" (BERT model)"),T6r=l(),sC=a("li"),ebe=a("strong"),F6r=o("big_bird"),C6r=o(" \u2014 "),tV=a("a"),M6r=o("FlaxBigBirdModel"),E6r=o(" (BigBird model)"),y6r=l(),lC=a("li"),obe=a("strong"),w6r=o("blenderbot"),A6r=o(" \u2014 "),aV=a("a"),L6r=o("FlaxBlenderbotModel"),B6r=o(" (Blenderbot model)"),x6r=l(),iC=a("li"),rbe=a("strong"),k6r=o("blenderbot-small"),R6r=o(" \u2014 "),nV=a("a"),S6r=o("FlaxBlenderbotSmallModel"),P6r=o(" (BlenderbotSmall model)"),$6r=l(),dC=a("li"),tbe=a("strong"),I6r=o("clip"),N6r=o(" \u2014 "),sV=a("a"),D6r=o("FlaxCLIPModel"),j6r=o(" (CLIP model)"),q6r=l(),cC=a("li"),abe=a("strong"),G6r=o("distilbert"),O6r=o(" \u2014 "),lV=a("a"),X6r=o("FlaxDistilBertModel"),V6r=o(" (DistilBERT model)"),z6r=l(),fC=a("li"),nbe=a("strong"),W6r=o("electra"),Q6r=o(" \u2014 "),iV=a("a"),H6r=o("FlaxElectraModel"),U6r=o(" (ELECTRA model)"),J6r=l(),mC=a("li"),sbe=a("strong"),Y6r=o("gpt2"),K6r=o(" \u2014 "),dV=a("a"),Z6r=o("FlaxGPT2Model"),eTr=o(" (OpenAI GPT-2 model)"),oTr=l(),gC=a("li"),lbe=a("strong"),rTr=o("gpt_neo"),tTr=o(" \u2014 "),cV=a("a"),aTr=o("FlaxGPTNeoModel"),nTr=o(" (GPT Neo model)"),sTr=l(),hC=a("li"),ibe=a("strong"),lTr=o("gptj"),iTr=o(" \u2014 "),fV=a("a"),dTr=o("FlaxGPTJModel"),cTr=o(" (GPT-J model)"),fTr=l(),pC=a("li"),dbe=a("strong"),mTr=o("marian"),gTr=o(" \u2014 "),mV=a("a"),hTr=o("FlaxMarianModel"),pTr=o(" (Marian model)"),_Tr=l(),_C=a("li"),cbe=a("strong"),uTr=o("mbart"),bTr=o(" \u2014 "),gV=a("a"),vTr=o("FlaxMBartModel"),TTr=o(" (mBART model)"),FTr=l(),uC=a("li"),fbe=a("strong"),CTr=o("mt5"),MTr=o(" \u2014 "),hV=a("a"),ETr=o("FlaxMT5Model"),yTr=o(" (mT5 model)"),wTr=l(),bC=a("li"),mbe=a("strong"),ATr=o("pegasus"),LTr=o(" \u2014 "),pV=a("a"),BTr=o("FlaxPegasusModel"),xTr=o(" (Pegasus model)"),kTr=l(),vC=a("li"),gbe=a("strong"),RTr=o("roberta"),STr=o(" \u2014 "),_V=a("a"),PTr=o("FlaxRobertaModel"),$Tr=o(" (RoBERTa model)"),ITr=l(),TC=a("li"),hbe=a("strong"),NTr=o("roformer"),DTr=o(" \u2014 "),uV=a("a"),jTr=o("FlaxRoFormerModel"),qTr=o(" (RoFormer model)"),GTr=l(),FC=a("li"),pbe=a("strong"),OTr=o("t5"),XTr=o(" \u2014 "),bV=a("a"),VTr=o("FlaxT5Model"),zTr=o(" (T5 model)"),WTr=l(),CC=a("li"),_be=a("strong"),QTr=o("vision-text-dual-encoder"),HTr=o(" \u2014 "),vV=a("a"),UTr=o("FlaxVisionTextDualEncoderModel"),JTr=o(" (VisionTextDualEncoder model)"),YTr=l(),MC=a("li"),ube=a("strong"),KTr=o("vit"),ZTr=o(" \u2014 "),TV=a("a"),eFr=o("FlaxViTModel"),oFr=o(" (ViT model)"),rFr=l(),EC=a("li"),bbe=a("strong"),tFr=o("wav2vec2"),aFr=o(" \u2014 "),FV=a("a"),nFr=o("FlaxWav2Vec2Model"),sFr=o(" (Wav2Vec2 model)"),lFr=l(),yC=a("li"),vbe=a("strong"),iFr=o("xglm"),dFr=o(" \u2014 "),CV=a("a"),cFr=o("FlaxXGLMModel"),fFr=o(" (XGLM model)"),mFr=l(),wC=a("li"),Tbe=a("strong"),gFr=o("xlm-roberta"),hFr=o(" \u2014 "),MV=a("a"),pFr=o("FlaxXLMRobertaModel"),_Fr=o(" (XLM-RoBERTa model)"),uFr=l(),Fbe=a("p"),bFr=o("Examples:"),vFr=l(),f(x0.$$.fragment),SRe=l(),ef=a("h2"),AC=a("a"),Cbe=a("span"),f(k0.$$.fragment),TFr=l(),Mbe=a("span"),FFr=o("FlaxAutoModelForCausalLM"),PRe=l(),Sr=a("div"),f(R0.$$.fragment),CFr=l(),of=a("p"),MFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ebe=a("code"),EFr=o("from_pretrained()"),yFr=o("class method or the "),ybe=a("code"),wFr=o("from_config()"),AFr=o(`class
method.`),LFr=l(),S0=a("p"),BFr=o("This class cannot be instantiated directly using "),wbe=a("code"),xFr=o("__init__()"),kFr=o(" (throws an error)."),RFr=l(),At=a("div"),f(P0.$$.fragment),SFr=l(),Abe=a("p"),PFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Fr=l(),rf=a("p"),IFr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),NFr=o("not"),DFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=a("code"),jFr=o("from_pretrained()"),qFr=o("to load the model weights."),GFr=l(),xbe=a("p"),OFr=o("Examples:"),XFr=l(),f($0.$$.fragment),VFr=l(),Lo=a("div"),f(I0.$$.fragment),zFr=l(),kbe=a("p"),WFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QFr=l(),xn=a("p"),HFr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),UFr=o("model_type"),JFr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),YFr=o("pretrained_model_name_or_path"),KFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),ZFr=o("pretrained_model_name_or_path"),eCr=o(":"),oCr=l(),ca=a("ul"),LC=a("li"),$be=a("strong"),rCr=o("bart"),tCr=o(" \u2014 "),EV=a("a"),aCr=o("FlaxBartForCausalLM"),nCr=o(" (BART model)"),sCr=l(),BC=a("li"),Ibe=a("strong"),lCr=o("gpt2"),iCr=o(" \u2014 "),yV=a("a"),dCr=o("FlaxGPT2LMHeadModel"),cCr=o(" (OpenAI GPT-2 model)"),fCr=l(),xC=a("li"),Nbe=a("strong"),mCr=o("gpt_neo"),gCr=o(" \u2014 "),wV=a("a"),hCr=o("FlaxGPTNeoForCausalLM"),pCr=o(" (GPT Neo model)"),_Cr=l(),kC=a("li"),Dbe=a("strong"),uCr=o("gptj"),bCr=o(" \u2014 "),AV=a("a"),vCr=o("FlaxGPTJForCausalLM"),TCr=o(" (GPT-J model)"),FCr=l(),RC=a("li"),jbe=a("strong"),CCr=o("xglm"),MCr=o(" \u2014 "),LV=a("a"),ECr=o("FlaxXGLMForCausalLM"),yCr=o(" (XGLM model)"),wCr=l(),qbe=a("p"),ACr=o("Examples:"),LCr=l(),f(N0.$$.fragment),$Re=l(),tf=a("h2"),SC=a("a"),Gbe=a("span"),f(D0.$$.fragment),BCr=l(),Obe=a("span"),xCr=o("FlaxAutoModelForPreTraining"),IRe=l(),Pr=a("div"),f(j0.$$.fragment),kCr=l(),af=a("p"),RCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xbe=a("code"),SCr=o("from_pretrained()"),PCr=o("class method or the "),Vbe=a("code"),$Cr=o("from_config()"),ICr=o(`class
method.`),NCr=l(),q0=a("p"),DCr=o("This class cannot be instantiated directly using "),zbe=a("code"),jCr=o("__init__()"),qCr=o(" (throws an error)."),GCr=l(),Lt=a("div"),f(G0.$$.fragment),OCr=l(),Wbe=a("p"),XCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VCr=l(),nf=a("p"),zCr=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),WCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=a("code"),HCr=o("from_pretrained()"),UCr=o("to load the model weights."),JCr=l(),Ube=a("p"),YCr=o("Examples:"),KCr=l(),f(O0.$$.fragment),ZCr=l(),Bo=a("div"),f(X0.$$.fragment),eMr=l(),Jbe=a("p"),oMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rMr=l(),kn=a("p"),tMr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),aMr=o("model_type"),nMr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(":"),cMr=l(),ce=a("ul"),PC=a("li"),e3e=a("strong"),fMr=o("albert"),mMr=o(" \u2014 "),BV=a("a"),gMr=o("FlaxAlbertForPreTraining"),hMr=o(" (ALBERT model)"),pMr=l(),$C=a("li"),o3e=a("strong"),_Mr=o("bart"),uMr=o(" \u2014 "),xV=a("a"),bMr=o("FlaxBartForConditionalGeneration"),vMr=o(" (BART model)"),TMr=l(),IC=a("li"),r3e=a("strong"),FMr=o("bert"),CMr=o(" \u2014 "),kV=a("a"),MMr=o("FlaxBertForPreTraining"),EMr=o(" (BERT model)"),yMr=l(),NC=a("li"),t3e=a("strong"),wMr=o("big_bird"),AMr=o(" \u2014 "),RV=a("a"),LMr=o("FlaxBigBirdForPreTraining"),BMr=o(" (BigBird model)"),xMr=l(),DC=a("li"),a3e=a("strong"),kMr=o("electra"),RMr=o(" \u2014 "),SV=a("a"),SMr=o("FlaxElectraForPreTraining"),PMr=o(" (ELECTRA model)"),$Mr=l(),jC=a("li"),n3e=a("strong"),IMr=o("mbart"),NMr=o(" \u2014 "),PV=a("a"),DMr=o("FlaxMBartForConditionalGeneration"),jMr=o(" (mBART model)"),qMr=l(),qC=a("li"),s3e=a("strong"),GMr=o("mt5"),OMr=o(" \u2014 "),$V=a("a"),XMr=o("FlaxMT5ForConditionalGeneration"),VMr=o(" (mT5 model)"),zMr=l(),GC=a("li"),l3e=a("strong"),WMr=o("roberta"),QMr=o(" \u2014 "),IV=a("a"),HMr=o("FlaxRobertaForMaskedLM"),UMr=o(" (RoBERTa model)"),JMr=l(),OC=a("li"),i3e=a("strong"),YMr=o("roformer"),KMr=o(" \u2014 "),NV=a("a"),ZMr=o("FlaxRoFormerForMaskedLM"),e4r=o(" (RoFormer model)"),o4r=l(),XC=a("li"),d3e=a("strong"),r4r=o("t5"),t4r=o(" \u2014 "),DV=a("a"),a4r=o("FlaxT5ForConditionalGeneration"),n4r=o(" (T5 model)"),s4r=l(),VC=a("li"),c3e=a("strong"),l4r=o("wav2vec2"),i4r=o(" \u2014 "),jV=a("a"),d4r=o("FlaxWav2Vec2ForPreTraining"),c4r=o(" (Wav2Vec2 model)"),f4r=l(),zC=a("li"),f3e=a("strong"),m4r=o("xlm-roberta"),g4r=o(" \u2014 "),qV=a("a"),h4r=o("FlaxXLMRobertaForMaskedLM"),p4r=o(" (XLM-RoBERTa model)"),_4r=l(),m3e=a("p"),u4r=o("Examples:"),b4r=l(),f(V0.$$.fragment),NRe=l(),sf=a("h2"),WC=a("a"),g3e=a("span"),f(z0.$$.fragment),v4r=l(),h3e=a("span"),T4r=o("FlaxAutoModelForMaskedLM"),DRe=l(),$r=a("div"),f(W0.$$.fragment),F4r=l(),lf=a("p"),C4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),p3e=a("code"),M4r=o("from_pretrained()"),E4r=o("class method or the "),_3e=a("code"),y4r=o("from_config()"),w4r=o(`class
method.`),A4r=l(),Q0=a("p"),L4r=o("This class cannot be instantiated directly using "),u3e=a("code"),B4r=o("__init__()"),x4r=o(" (throws an error)."),k4r=l(),Bt=a("div"),f(H0.$$.fragment),R4r=l(),b3e=a("p"),S4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P4r=l(),df=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),I4r=o("not"),N4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T3e=a("code"),D4r=o("from_pretrained()"),j4r=o("to load the model weights."),q4r=l(),F3e=a("p"),G4r=o("Examples:"),O4r=l(),f(U0.$$.fragment),X4r=l(),xo=a("div"),f(J0.$$.fragment),V4r=l(),C3e=a("p"),z4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W4r=l(),Rn=a("p"),Q4r=o("The model class to instantiate is selected based on the "),M3e=a("code"),H4r=o("model_type"),U4r=o(` property of the config object (either
passed as an argument or loaded from `),E3e=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y3e=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(":"),eEr=l(),ue=a("ul"),QC=a("li"),w3e=a("strong"),oEr=o("albert"),rEr=o(" \u2014 "),GV=a("a"),tEr=o("FlaxAlbertForMaskedLM"),aEr=o(" (ALBERT model)"),nEr=l(),HC=a("li"),A3e=a("strong"),sEr=o("bart"),lEr=o(" \u2014 "),OV=a("a"),iEr=o("FlaxBartForConditionalGeneration"),dEr=o(" (BART model)"),cEr=l(),UC=a("li"),L3e=a("strong"),fEr=o("bert"),mEr=o(" \u2014 "),XV=a("a"),gEr=o("FlaxBertForMaskedLM"),hEr=o(" (BERT model)"),pEr=l(),JC=a("li"),B3e=a("strong"),_Er=o("big_bird"),uEr=o(" \u2014 "),VV=a("a"),bEr=o("FlaxBigBirdForMaskedLM"),vEr=o(" (BigBird model)"),TEr=l(),YC=a("li"),x3e=a("strong"),FEr=o("distilbert"),CEr=o(" \u2014 "),zV=a("a"),MEr=o("FlaxDistilBertForMaskedLM"),EEr=o(" (DistilBERT model)"),yEr=l(),KC=a("li"),k3e=a("strong"),wEr=o("electra"),AEr=o(" \u2014 "),WV=a("a"),LEr=o("FlaxElectraForMaskedLM"),BEr=o(" (ELECTRA model)"),xEr=l(),ZC=a("li"),R3e=a("strong"),kEr=o("mbart"),REr=o(" \u2014 "),QV=a("a"),SEr=o("FlaxMBartForConditionalGeneration"),PEr=o(" (mBART model)"),$Er=l(),eM=a("li"),S3e=a("strong"),IEr=o("roberta"),NEr=o(" \u2014 "),HV=a("a"),DEr=o("FlaxRobertaForMaskedLM"),jEr=o(" (RoBERTa model)"),qEr=l(),oM=a("li"),P3e=a("strong"),GEr=o("roformer"),OEr=o(" \u2014 "),UV=a("a"),XEr=o("FlaxRoFormerForMaskedLM"),VEr=o(" (RoFormer model)"),zEr=l(),rM=a("li"),$3e=a("strong"),WEr=o("xlm-roberta"),QEr=o(" \u2014 "),JV=a("a"),HEr=o("FlaxXLMRobertaForMaskedLM"),UEr=o(" (XLM-RoBERTa model)"),JEr=l(),I3e=a("p"),YEr=o("Examples:"),KEr=l(),f(Y0.$$.fragment),jRe=l(),cf=a("h2"),tM=a("a"),N3e=a("span"),f(K0.$$.fragment),ZEr=l(),D3e=a("span"),e5r=o("FlaxAutoModelForSeq2SeqLM"),qRe=l(),Ir=a("div"),f(Z0.$$.fragment),o5r=l(),ff=a("p"),r5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),j3e=a("code"),t5r=o("from_pretrained()"),a5r=o("class method or the "),q3e=a("code"),n5r=o("from_config()"),s5r=o(`class
method.`),l5r=l(),eL=a("p"),i5r=o("This class cannot be instantiated directly using "),G3e=a("code"),d5r=o("__init__()"),c5r=o(" (throws an error)."),f5r=l(),xt=a("div"),f(oL.$$.fragment),m5r=l(),O3e=a("p"),g5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h5r=l(),mf=a("p"),p5r=o(`Note:
Loading a model from its configuration file does `),X3e=a("strong"),_5r=o("not"),u5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V3e=a("code"),b5r=o("from_pretrained()"),v5r=o("to load the model weights."),T5r=l(),z3e=a("p"),F5r=o("Examples:"),C5r=l(),f(rL.$$.fragment),M5r=l(),ko=a("div"),f(tL.$$.fragment),E5r=l(),W3e=a("p"),y5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w5r=l(),Sn=a("p"),A5r=o("The model class to instantiate is selected based on the "),Q3e=a("code"),L5r=o("model_type"),B5r=o(` property of the config object (either
passed as an argument or loaded from `),H3e=a("code"),x5r=o("pretrained_model_name_or_path"),k5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=a("code"),R5r=o("pretrained_model_name_or_path"),S5r=o(":"),P5r=l(),Me=a("ul"),aM=a("li"),J3e=a("strong"),$5r=o("bart"),I5r=o(" \u2014 "),YV=a("a"),N5r=o("FlaxBartForConditionalGeneration"),D5r=o(" (BART model)"),j5r=l(),nM=a("li"),Y3e=a("strong"),q5r=o("blenderbot"),G5r=o(" \u2014 "),KV=a("a"),O5r=o("FlaxBlenderbotForConditionalGeneration"),X5r=o(" (Blenderbot model)"),V5r=l(),sM=a("li"),K3e=a("strong"),z5r=o("blenderbot-small"),W5r=o(" \u2014 "),ZV=a("a"),Q5r=o("FlaxBlenderbotSmallForConditionalGeneration"),H5r=o(" (BlenderbotSmall model)"),U5r=l(),lM=a("li"),Z3e=a("strong"),J5r=o("encoder-decoder"),Y5r=o(" \u2014 "),ez=a("a"),K5r=o("FlaxEncoderDecoderModel"),Z5r=o(" (Encoder decoder model)"),eyr=l(),iM=a("li"),e2e=a("strong"),oyr=o("marian"),ryr=o(" \u2014 "),oz=a("a"),tyr=o("FlaxMarianMTModel"),ayr=o(" (Marian model)"),nyr=l(),dM=a("li"),o2e=a("strong"),syr=o("mbart"),lyr=o(" \u2014 "),rz=a("a"),iyr=o("FlaxMBartForConditionalGeneration"),dyr=o(" (mBART model)"),cyr=l(),cM=a("li"),r2e=a("strong"),fyr=o("mt5"),myr=o(" \u2014 "),tz=a("a"),gyr=o("FlaxMT5ForConditionalGeneration"),hyr=o(" (mT5 model)"),pyr=l(),fM=a("li"),t2e=a("strong"),_yr=o("pegasus"),uyr=o(" \u2014 "),az=a("a"),byr=o("FlaxPegasusForConditionalGeneration"),vyr=o(" (Pegasus model)"),Tyr=l(),mM=a("li"),a2e=a("strong"),Fyr=o("t5"),Cyr=o(" \u2014 "),nz=a("a"),Myr=o("FlaxT5ForConditionalGeneration"),Eyr=o(" (T5 model)"),yyr=l(),n2e=a("p"),wyr=o("Examples:"),Ayr=l(),f(aL.$$.fragment),GRe=l(),gf=a("h2"),gM=a("a"),s2e=a("span"),f(nL.$$.fragment),Lyr=l(),l2e=a("span"),Byr=o("FlaxAutoModelForSequenceClassification"),ORe=l(),Nr=a("div"),f(sL.$$.fragment),xyr=l(),hf=a("p"),kyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),i2e=a("code"),Ryr=o("from_pretrained()"),Syr=o("class method or the "),d2e=a("code"),Pyr=o("from_config()"),$yr=o(`class
method.`),Iyr=l(),lL=a("p"),Nyr=o("This class cannot be instantiated directly using "),c2e=a("code"),Dyr=o("__init__()"),jyr=o(" (throws an error)."),qyr=l(),kt=a("div"),f(iL.$$.fragment),Gyr=l(),f2e=a("p"),Oyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xyr=l(),pf=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),zyr=o("not"),Wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g2e=a("code"),Qyr=o("from_pretrained()"),Hyr=o("to load the model weights."),Uyr=l(),h2e=a("p"),Jyr=o("Examples:"),Yyr=l(),f(dL.$$.fragment),Kyr=l(),Ro=a("div"),f(cL.$$.fragment),Zyr=l(),p2e=a("p"),ewr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),owr=l(),Pn=a("p"),rwr=o("The model class to instantiate is selected based on the "),_2e=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),be=a("ul"),hM=a("li"),v2e=a("strong"),cwr=o("albert"),fwr=o(" \u2014 "),sz=a("a"),mwr=o("FlaxAlbertForSequenceClassification"),gwr=o(" (ALBERT model)"),hwr=l(),pM=a("li"),T2e=a("strong"),pwr=o("bart"),_wr=o(" \u2014 "),lz=a("a"),uwr=o("FlaxBartForSequenceClassification"),bwr=o(" (BART model)"),vwr=l(),_M=a("li"),F2e=a("strong"),Twr=o("bert"),Fwr=o(" \u2014 "),iz=a("a"),Cwr=o("FlaxBertForSequenceClassification"),Mwr=o(" (BERT model)"),Ewr=l(),uM=a("li"),C2e=a("strong"),ywr=o("big_bird"),wwr=o(" \u2014 "),dz=a("a"),Awr=o("FlaxBigBirdForSequenceClassification"),Lwr=o(" (BigBird model)"),Bwr=l(),bM=a("li"),M2e=a("strong"),xwr=o("distilbert"),kwr=o(" \u2014 "),cz=a("a"),Rwr=o("FlaxDistilBertForSequenceClassification"),Swr=o(" (DistilBERT model)"),Pwr=l(),vM=a("li"),E2e=a("strong"),$wr=o("electra"),Iwr=o(" \u2014 "),fz=a("a"),Nwr=o("FlaxElectraForSequenceClassification"),Dwr=o(" (ELECTRA model)"),jwr=l(),TM=a("li"),y2e=a("strong"),qwr=o("mbart"),Gwr=o(" \u2014 "),mz=a("a"),Owr=o("FlaxMBartForSequenceClassification"),Xwr=o(" (mBART model)"),Vwr=l(),FM=a("li"),w2e=a("strong"),zwr=o("roberta"),Wwr=o(" \u2014 "),gz=a("a"),Qwr=o("FlaxRobertaForSequenceClassification"),Hwr=o(" (RoBERTa model)"),Uwr=l(),CM=a("li"),A2e=a("strong"),Jwr=o("roformer"),Ywr=o(" \u2014 "),hz=a("a"),Kwr=o("FlaxRoFormerForSequenceClassification"),Zwr=o(" (RoFormer model)"),eAr=l(),MM=a("li"),L2e=a("strong"),oAr=o("xlm-roberta"),rAr=o(" \u2014 "),pz=a("a"),tAr=o("FlaxXLMRobertaForSequenceClassification"),aAr=o(" (XLM-RoBERTa model)"),nAr=l(),B2e=a("p"),sAr=o("Examples:"),lAr=l(),f(fL.$$.fragment),XRe=l(),_f=a("h2"),EM=a("a"),x2e=a("span"),f(mL.$$.fragment),iAr=l(),k2e=a("span"),dAr=o("FlaxAutoModelForQuestionAnswering"),VRe=l(),Dr=a("div"),f(gL.$$.fragment),cAr=l(),uf=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R2e=a("code"),mAr=o("from_pretrained()"),gAr=o("class method or the "),S2e=a("code"),hAr=o("from_config()"),pAr=o(`class
method.`),_Ar=l(),hL=a("p"),uAr=o("This class cannot be instantiated directly using "),P2e=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),TAr=l(),Rt=a("div"),f(pL.$$.fragment),FAr=l(),$2e=a("p"),CAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MAr=l(),bf=a("p"),EAr=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),yAr=o("not"),wAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=a("code"),AAr=o("from_pretrained()"),LAr=o("to load the model weights."),BAr=l(),D2e=a("p"),xAr=o("Examples:"),kAr=l(),f(_L.$$.fragment),RAr=l(),So=a("div"),f(uL.$$.fragment),SAr=l(),j2e=a("p"),PAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Ar=l(),$n=a("p"),IAr=o("The model class to instantiate is selected based on the "),q2e=a("code"),NAr=o("model_type"),DAr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),jAr=o("pretrained_model_name_or_path"),qAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),XAr=l(),ve=a("ul"),yM=a("li"),X2e=a("strong"),VAr=o("albert"),zAr=o(" \u2014 "),_z=a("a"),WAr=o("FlaxAlbertForQuestionAnswering"),QAr=o(" (ALBERT model)"),HAr=l(),wM=a("li"),V2e=a("strong"),UAr=o("bart"),JAr=o(" \u2014 "),uz=a("a"),YAr=o("FlaxBartForQuestionAnswering"),KAr=o(" (BART model)"),ZAr=l(),AM=a("li"),z2e=a("strong"),e0r=o("bert"),o0r=o(" \u2014 "),bz=a("a"),r0r=o("FlaxBertForQuestionAnswering"),t0r=o(" (BERT model)"),a0r=l(),LM=a("li"),W2e=a("strong"),n0r=o("big_bird"),s0r=o(" \u2014 "),vz=a("a"),l0r=o("FlaxBigBirdForQuestionAnswering"),i0r=o(" (BigBird model)"),d0r=l(),BM=a("li"),Q2e=a("strong"),c0r=o("distilbert"),f0r=o(" \u2014 "),Tz=a("a"),m0r=o("FlaxDistilBertForQuestionAnswering"),g0r=o(" (DistilBERT model)"),h0r=l(),xM=a("li"),H2e=a("strong"),p0r=o("electra"),_0r=o(" \u2014 "),Fz=a("a"),u0r=o("FlaxElectraForQuestionAnswering"),b0r=o(" (ELECTRA model)"),v0r=l(),kM=a("li"),U2e=a("strong"),T0r=o("mbart"),F0r=o(" \u2014 "),Cz=a("a"),C0r=o("FlaxMBartForQuestionAnswering"),M0r=o(" (mBART model)"),E0r=l(),RM=a("li"),J2e=a("strong"),y0r=o("roberta"),w0r=o(" \u2014 "),Mz=a("a"),A0r=o("FlaxRobertaForQuestionAnswering"),L0r=o(" (RoBERTa model)"),B0r=l(),SM=a("li"),Y2e=a("strong"),x0r=o("roformer"),k0r=o(" \u2014 "),Ez=a("a"),R0r=o("FlaxRoFormerForQuestionAnswering"),S0r=o(" (RoFormer model)"),P0r=l(),PM=a("li"),K2e=a("strong"),$0r=o("xlm-roberta"),I0r=o(" \u2014 "),yz=a("a"),N0r=o("FlaxXLMRobertaForQuestionAnswering"),D0r=o(" (XLM-RoBERTa model)"),j0r=l(),Z2e=a("p"),q0r=o("Examples:"),G0r=l(),f(bL.$$.fragment),zRe=l(),vf=a("h2"),$M=a("a"),eve=a("span"),f(vL.$$.fragment),O0r=l(),ove=a("span"),X0r=o("FlaxAutoModelForTokenClassification"),WRe=l(),jr=a("div"),f(TL.$$.fragment),V0r=l(),Tf=a("p"),z0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rve=a("code"),W0r=o("from_pretrained()"),Q0r=o("class method or the "),tve=a("code"),H0r=o("from_config()"),U0r=o(`class
method.`),J0r=l(),FL=a("p"),Y0r=o("This class cannot be instantiated directly using "),ave=a("code"),K0r=o("__init__()"),Z0r=o(" (throws an error)."),eLr=l(),St=a("div"),f(CL.$$.fragment),oLr=l(),nve=a("p"),rLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tLr=l(),Ff=a("p"),aLr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),nLr=o("not"),sLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=a("code"),lLr=o("from_pretrained()"),iLr=o("to load the model weights."),dLr=l(),ive=a("p"),cLr=o("Examples:"),fLr=l(),f(ML.$$.fragment),mLr=l(),Po=a("div"),f(EL.$$.fragment),gLr=l(),dve=a("p"),hLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pLr=l(),In=a("p"),_Lr=o("The model class to instantiate is selected based on the "),cve=a("code"),uLr=o("model_type"),bLr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),vLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),FLr=o("pretrained_model_name_or_path"),CLr=o(":"),MLr=l(),Se=a("ul"),IM=a("li"),gve=a("strong"),ELr=o("albert"),yLr=o(" \u2014 "),wz=a("a"),wLr=o("FlaxAlbertForTokenClassification"),ALr=o(" (ALBERT model)"),LLr=l(),NM=a("li"),hve=a("strong"),BLr=o("bert"),xLr=o(" \u2014 "),Az=a("a"),kLr=o("FlaxBertForTokenClassification"),RLr=o(" (BERT model)"),SLr=l(),DM=a("li"),pve=a("strong"),PLr=o("big_bird"),$Lr=o(" \u2014 "),Lz=a("a"),ILr=o("FlaxBigBirdForTokenClassification"),NLr=o(" (BigBird model)"),DLr=l(),jM=a("li"),_ve=a("strong"),jLr=o("distilbert"),qLr=o(" \u2014 "),Bz=a("a"),GLr=o("FlaxDistilBertForTokenClassification"),OLr=o(" (DistilBERT model)"),XLr=l(),qM=a("li"),uve=a("strong"),VLr=o("electra"),zLr=o(" \u2014 "),xz=a("a"),WLr=o("FlaxElectraForTokenClassification"),QLr=o(" (ELECTRA model)"),HLr=l(),GM=a("li"),bve=a("strong"),ULr=o("roberta"),JLr=o(" \u2014 "),kz=a("a"),YLr=o("FlaxRobertaForTokenClassification"),KLr=o(" (RoBERTa model)"),ZLr=l(),OM=a("li"),vve=a("strong"),e7r=o("roformer"),o7r=o(" \u2014 "),Rz=a("a"),r7r=o("FlaxRoFormerForTokenClassification"),t7r=o(" (RoFormer model)"),a7r=l(),XM=a("li"),Tve=a("strong"),n7r=o("xlm-roberta"),s7r=o(" \u2014 "),Sz=a("a"),l7r=o("FlaxXLMRobertaForTokenClassification"),i7r=o(" (XLM-RoBERTa model)"),d7r=l(),Fve=a("p"),c7r=o("Examples:"),f7r=l(),f(yL.$$.fragment),QRe=l(),Cf=a("h2"),VM=a("a"),Cve=a("span"),f(wL.$$.fragment),m7r=l(),Mve=a("span"),g7r=o("FlaxAutoModelForMultipleChoice"),HRe=l(),qr=a("div"),f(AL.$$.fragment),h7r=l(),Mf=a("p"),p7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Eve=a("code"),_7r=o("from_pretrained()"),u7r=o("class method or the "),yve=a("code"),b7r=o("from_config()"),v7r=o(`class
method.`),T7r=l(),LL=a("p"),F7r=o("This class cannot be instantiated directly using "),wve=a("code"),C7r=o("__init__()"),M7r=o(" (throws an error)."),E7r=l(),Pt=a("div"),f(BL.$$.fragment),y7r=l(),Ave=a("p"),w7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A7r=l(),Ef=a("p"),L7r=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),B7r=o("not"),x7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bve=a("code"),k7r=o("from_pretrained()"),R7r=o("to load the model weights."),S7r=l(),xve=a("p"),P7r=o("Examples:"),$7r=l(),f(xL.$$.fragment),I7r=l(),$o=a("div"),f(kL.$$.fragment),N7r=l(),kve=a("p"),D7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j7r=l(),Nn=a("p"),q7r=o("The model class to instantiate is selected based on the "),Rve=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),X7r=o("pretrained_model_name_or_path"),V7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),z7r=o("pretrained_model_name_or_path"),W7r=o(":"),Q7r=l(),Pe=a("ul"),zM=a("li"),$ve=a("strong"),H7r=o("albert"),U7r=o(" \u2014 "),Pz=a("a"),J7r=o("FlaxAlbertForMultipleChoice"),Y7r=o(" (ALBERT model)"),K7r=l(),WM=a("li"),Ive=a("strong"),Z7r=o("bert"),e8r=o(" \u2014 "),$z=a("a"),o8r=o("FlaxBertForMultipleChoice"),r8r=o(" (BERT model)"),t8r=l(),QM=a("li"),Nve=a("strong"),a8r=o("big_bird"),n8r=o(" \u2014 "),Iz=a("a"),s8r=o("FlaxBigBirdForMultipleChoice"),l8r=o(" (BigBird model)"),i8r=l(),HM=a("li"),Dve=a("strong"),d8r=o("distilbert"),c8r=o(" \u2014 "),Nz=a("a"),f8r=o("FlaxDistilBertForMultipleChoice"),m8r=o(" (DistilBERT model)"),g8r=l(),UM=a("li"),jve=a("strong"),h8r=o("electra"),p8r=o(" \u2014 "),Dz=a("a"),_8r=o("FlaxElectraForMultipleChoice"),u8r=o(" (ELECTRA model)"),b8r=l(),JM=a("li"),qve=a("strong"),v8r=o("roberta"),T8r=o(" \u2014 "),jz=a("a"),F8r=o("FlaxRobertaForMultipleChoice"),C8r=o(" (RoBERTa model)"),M8r=l(),YM=a("li"),Gve=a("strong"),E8r=o("roformer"),y8r=o(" \u2014 "),qz=a("a"),w8r=o("FlaxRoFormerForMultipleChoice"),A8r=o(" (RoFormer model)"),L8r=l(),KM=a("li"),Ove=a("strong"),B8r=o("xlm-roberta"),x8r=o(" \u2014 "),Gz=a("a"),k8r=o("FlaxXLMRobertaForMultipleChoice"),R8r=o(" (XLM-RoBERTa model)"),S8r=l(),Xve=a("p"),P8r=o("Examples:"),$8r=l(),f(RL.$$.fragment),URe=l(),yf=a("h2"),ZM=a("a"),Vve=a("span"),f(SL.$$.fragment),I8r=l(),zve=a("span"),N8r=o("FlaxAutoModelForNextSentencePrediction"),JRe=l(),Gr=a("div"),f(PL.$$.fragment),D8r=l(),wf=a("p"),j8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wve=a("code"),q8r=o("from_pretrained()"),G8r=o("class method or the "),Qve=a("code"),O8r=o("from_config()"),X8r=o(`class
method.`),V8r=l(),$L=a("p"),z8r=o("This class cannot be instantiated directly using "),Hve=a("code"),W8r=o("__init__()"),Q8r=o(" (throws an error)."),H8r=l(),$t=a("div"),f(IL.$$.fragment),U8r=l(),Uve=a("p"),J8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y8r=l(),Af=a("p"),K8r=o(`Note:
Loading a model from its configuration file does `),Jve=a("strong"),Z8r=o("not"),eBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yve=a("code"),oBr=o("from_pretrained()"),rBr=o("to load the model weights."),tBr=l(),Kve=a("p"),aBr=o("Examples:"),nBr=l(),f(NL.$$.fragment),sBr=l(),Io=a("div"),f(DL.$$.fragment),lBr=l(),Zve=a("p"),iBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dBr=l(),Dn=a("p"),cBr=o("The model class to instantiate is selected based on the "),e6e=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),pBr=o("pretrained_model_name_or_path"),_Br=o(":"),uBr=l(),t6e=a("ul"),e4=a("li"),a6e=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),Oz=a("a"),TBr=o("FlaxBertForNextSentencePrediction"),FBr=o(" (BERT model)"),CBr=l(),n6e=a("p"),MBr=o("Examples:"),EBr=l(),f(jL.$$.fragment),YRe=l(),Lf=a("h2"),o4=a("a"),s6e=a("span"),f(qL.$$.fragment),yBr=l(),l6e=a("span"),wBr=o("FlaxAutoModelForImageClassification"),KRe=l(),Or=a("div"),f(GL.$$.fragment),ABr=l(),Bf=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),i6e=a("code"),BBr=o("from_pretrained()"),xBr=o("class method or the "),d6e=a("code"),kBr=o("from_config()"),RBr=o(`class
method.`),SBr=l(),OL=a("p"),PBr=o("This class cannot be instantiated directly using "),c6e=a("code"),$Br=o("__init__()"),IBr=o(" (throws an error)."),NBr=l(),It=a("div"),f(XL.$$.fragment),DBr=l(),f6e=a("p"),jBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qBr=l(),xf=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),OBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g6e=a("code"),VBr=o("from_pretrained()"),zBr=o("to load the model weights."),WBr=l(),h6e=a("p"),QBr=o("Examples:"),HBr=l(),f(VL.$$.fragment),UBr=l(),No=a("div"),f(zL.$$.fragment),JBr=l(),p6e=a("p"),YBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KBr=l(),jn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),_6e=a("code"),exr=o("model_type"),oxr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(":"),sxr=l(),WL=a("ul"),r4=a("li"),v6e=a("strong"),lxr=o("beit"),ixr=o(" \u2014 "),Xz=a("a"),dxr=o("FlaxBeitForImageClassification"),cxr=o(" (BEiT model)"),fxr=l(),t4=a("li"),T6e=a("strong"),mxr=o("vit"),gxr=o(" \u2014 "),Vz=a("a"),hxr=o("FlaxViTForImageClassification"),pxr=o(" (ViT model)"),_xr=l(),F6e=a("p"),uxr=o("Examples:"),bxr=l(),f(QL.$$.fragment),ZRe=l(),kf=a("h2"),a4=a("a"),C6e=a("span"),f(HL.$$.fragment),vxr=l(),M6e=a("span"),Txr=o("FlaxAutoModelForVision2Seq"),eSe=l(),Xr=a("div"),f(UL.$$.fragment),Fxr=l(),Rf=a("p"),Cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),E6e=a("code"),Mxr=o("from_pretrained()"),Exr=o("class method or the "),y6e=a("code"),yxr=o("from_config()"),wxr=o(`class
method.`),Axr=l(),JL=a("p"),Lxr=o("This class cannot be instantiated directly using "),w6e=a("code"),Bxr=o("__init__()"),xxr=o(" (throws an error)."),kxr=l(),Nt=a("div"),f(YL.$$.fragment),Rxr=l(),A6e=a("p"),Sxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pxr=l(),Sf=a("p"),$xr=o(`Note:
Loading a model from its configuration file does `),L6e=a("strong"),Ixr=o("not"),Nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=a("code"),Dxr=o("from_pretrained()"),jxr=o("to load the model weights."),qxr=l(),x6e=a("p"),Gxr=o("Examples:"),Oxr=l(),f(KL.$$.fragment),Xxr=l(),Do=a("div"),f(ZL.$$.fragment),Vxr=l(),k6e=a("p"),zxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wxr=l(),qn=a("p"),Qxr=o("The model class to instantiate is selected based on the "),R6e=a("code"),Hxr=o("model_type"),Uxr=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),Jxr=o("pretrained_model_name_or_path"),Yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(":"),ekr=l(),$6e=a("ul"),n4=a("li"),I6e=a("strong"),okr=o("vision-encoder-decoder"),rkr=o(" \u2014 "),zz=a("a"),tkr=o("FlaxVisionEncoderDecoderModel"),akr=o(" (Vision Encoder decoder model)"),nkr=l(),N6e=a("p"),skr=o("Examples:"),lkr=l(),f(e7.$$.fragment),this.h()},l(c){const u=iCt('[data-svelte="svelte-1phssyn"]',document.head);K=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var o7=s(de);Ee=n(o7,"A",{id:!0,class:!0,href:!0});var D6e=s(Ee);lo=n(D6e,"SPAN",{});var j6e=s(lo);m(fe.$$.fragment,j6e),j6e.forEach(t),D6e.forEach(t),Ce=i(o7),Vo=n(o7,"SPAN",{});var dkr=s(Vo);Ii=r(dkr,"Auto Classes"),dkr.forEach(t),o7.forEach(t),If=i(c),fa=n(c,"P",{});var rSe=s(fa);Ni=r(rSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(rSe,"CODE",{});var ckr=s(Di);nE=r(ckr,"from_pretrained()"),ckr.forEach(t),Nf=r(rSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),rSe.forEach(t),Be=i(c),co=n(c,"P",{});var s4=s(co);ji=r(s4,"Instantiating one of "),Gn=n(s4,"A",{href:!0});var fkr=s(Gn);sE=r(fkr,"AutoConfig"),fkr.forEach(t),On=r(s4,", "),Xn=n(s4,"A",{href:!0});var mkr=s(Xn);lE=r(mkr,"AutoModel"),mkr.forEach(t),qi=r(s4,`, and
`),Vn=n(s4,"A",{href:!0});var gkr=s(Vn);iE=r(gkr,"AutoTokenizer"),gkr.forEach(t),Gi=r(s4," will directly create a class of the relevant architecture. For instance"),s4.forEach(t),Df=i(c),m(qa.$$.fragment,c),fo=i(c),pe=n(c,"P",{});var tSe=s(pe);K7=r(tSe,"will create a model that is an instance of "),Oi=n(tSe,"A",{href:!0});var hkr=s(Oi);Z7=r(hkr,"BertModel"),hkr.forEach(t),e8=r(tSe,"."),tSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var aSe=s(Ga);o8=r(aSe,"There is one class of "),jf=n(aSe,"CODE",{});var pkr=s(jf);r8=r(pkr,"AutoModel"),pkr.forEach(t),h$e=r(aSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),aSe.forEach(t),eke=i(c),Xi=n(c,"H2",{class:!0});var nSe=s(Xi);qf=n(nSe,"A",{id:!0,class:!0,href:!0});var _kr=s(qf);DQ=n(_kr,"SPAN",{});var ukr=s(DQ);m(dE.$$.fragment,ukr),ukr.forEach(t),_kr.forEach(t),p$e=i(nSe),jQ=n(nSe,"SPAN",{});var bkr=s(jQ);_$e=r(bkr,"Extending the Auto Classes"),bkr.forEach(t),nSe.forEach(t),oke=i(c),zn=n(c,"P",{});var Wz=s(zn);u$e=r(Wz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qQ=n(Wz,"CODE",{});var vkr=s(qQ);b$e=r(vkr,"NewModel"),vkr.forEach(t),v$e=r(Wz,", make sure you have a "),GQ=n(Wz,"CODE",{});var Tkr=s(GQ);T$e=r(Tkr,"NewModelConfig"),Tkr.forEach(t),F$e=r(Wz,` then you can add those to the auto
classes like this:`),Wz.forEach(t),rke=i(c),m(cE.$$.fragment,c),tke=i(c),t8=n(c,"P",{});var Fkr=s(t8);C$e=r(Fkr,"You will then be able to use the auto classes like you would usually do!"),Fkr.forEach(t),ake=i(c),m(Gf.$$.fragment,c),nke=i(c),Vi=n(c,"H2",{class:!0});var sSe=s(Vi);Of=n(sSe,"A",{id:!0,class:!0,href:!0});var Ckr=s(Of);OQ=n(Ckr,"SPAN",{});var Mkr=s(OQ);m(fE.$$.fragment,Mkr),Mkr.forEach(t),Ckr.forEach(t),M$e=i(sSe),XQ=n(sSe,"SPAN",{});var Ekr=s(XQ);E$e=r(Ekr,"AutoConfig"),Ekr.forEach(t),sSe.forEach(t),ske=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(mE.$$.fragment,Os),y$e=i(Os),gE=n(Os,"P",{});var lSe=s(gE);w$e=r(lSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),a8=n(lSe,"A",{href:!0});var ykr=s(a8);A$e=r(ykr,"from_pretrained()"),ykr.forEach(t),L$e=r(lSe," class method."),lSe.forEach(t),B$e=i(Os),hE=n(Os,"P",{});var iSe=s(hE);x$e=r(iSe,"This class cannot be instantiated directly using "),VQ=n(iSe,"CODE",{});var wkr=s(VQ);k$e=r(wkr,"__init__()"),wkr.forEach(t),R$e=r(iSe," (throws an error)."),iSe.forEach(t),S$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(pE.$$.fragment,ga),P$e=i(ga),zQ=n(ga,"P",{});var Akr=s(zQ);$$e=r(Akr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Akr.forEach(t),I$e=i(ga),zi=n(ga,"P",{});var Qz=s(zi);N$e=r(Qz,"The configuration class to instantiate is selected based on the "),WQ=n(Qz,"CODE",{});var Lkr=s(WQ);D$e=r(Lkr,"model_type"),Lkr.forEach(t),j$e=r(Qz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QQ=n(Qz,"CODE",{});var Bkr=s(QQ);q$e=r(Bkr,"pretrained_model_name_or_path"),Bkr.forEach(t),G$e=r(Qz,":"),Qz.forEach(t),O$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var q6e=s(Xf);HQ=n(q6e,"STRONG",{});var xkr=s(HQ);X$e=r(xkr,"albert"),xkr.forEach(t),V$e=r(q6e," \u2014 "),n8=n(q6e,"A",{href:!0});var kkr=s(n8);z$e=r(kkr,"AlbertConfig"),kkr.forEach(t),W$e=r(q6e," (ALBERT model)"),q6e.forEach(t),Q$e=i(T),Vf=n(T,"LI",{});var G6e=s(Vf);UQ=n(G6e,"STRONG",{});var Rkr=s(UQ);H$e=r(Rkr,"bart"),Rkr.forEach(t),U$e=r(G6e," \u2014 "),s8=n(G6e,"A",{href:!0});var Skr=s(s8);J$e=r(Skr,"BartConfig"),Skr.forEach(t),Y$e=r(G6e," (BART model)"),G6e.forEach(t),K$e=i(T),zf=n(T,"LI",{});var O6e=s(zf);JQ=n(O6e,"STRONG",{});var Pkr=s(JQ);Z$e=r(Pkr,"beit"),Pkr.forEach(t),eIe=r(O6e," \u2014 "),l8=n(O6e,"A",{href:!0});var $kr=s(l8);oIe=r($kr,"BeitConfig"),$kr.forEach(t),rIe=r(O6e," (BEiT model)"),O6e.forEach(t),tIe=i(T),Wf=n(T,"LI",{});var X6e=s(Wf);YQ=n(X6e,"STRONG",{});var Ikr=s(YQ);aIe=r(Ikr,"bert"),Ikr.forEach(t),nIe=r(X6e," \u2014 "),i8=n(X6e,"A",{href:!0});var Nkr=s(i8);sIe=r(Nkr,"BertConfig"),Nkr.forEach(t),lIe=r(X6e," (BERT model)"),X6e.forEach(t),iIe=i(T),Qf=n(T,"LI",{});var V6e=s(Qf);KQ=n(V6e,"STRONG",{});var Dkr=s(KQ);dIe=r(Dkr,"bert-generation"),Dkr.forEach(t),cIe=r(V6e," \u2014 "),d8=n(V6e,"A",{href:!0});var jkr=s(d8);fIe=r(jkr,"BertGenerationConfig"),jkr.forEach(t),mIe=r(V6e," (Bert Generation model)"),V6e.forEach(t),gIe=i(T),Hf=n(T,"LI",{});var z6e=s(Hf);ZQ=n(z6e,"STRONG",{});var qkr=s(ZQ);hIe=r(qkr,"big_bird"),qkr.forEach(t),pIe=r(z6e," \u2014 "),c8=n(z6e,"A",{href:!0});var Gkr=s(c8);_Ie=r(Gkr,"BigBirdConfig"),Gkr.forEach(t),uIe=r(z6e," (BigBird model)"),z6e.forEach(t),bIe=i(T),Uf=n(T,"LI",{});var W6e=s(Uf);eH=n(W6e,"STRONG",{});var Okr=s(eH);vIe=r(Okr,"bigbird_pegasus"),Okr.forEach(t),TIe=r(W6e," \u2014 "),f8=n(W6e,"A",{href:!0});var Xkr=s(f8);FIe=r(Xkr,"BigBirdPegasusConfig"),Xkr.forEach(t),CIe=r(W6e," (BigBirdPegasus model)"),W6e.forEach(t),MIe=i(T),Jf=n(T,"LI",{});var Q6e=s(Jf);oH=n(Q6e,"STRONG",{});var Vkr=s(oH);EIe=r(Vkr,"blenderbot"),Vkr.forEach(t),yIe=r(Q6e," \u2014 "),m8=n(Q6e,"A",{href:!0});var zkr=s(m8);wIe=r(zkr,"BlenderbotConfig"),zkr.forEach(t),AIe=r(Q6e," (Blenderbot model)"),Q6e.forEach(t),LIe=i(T),Yf=n(T,"LI",{});var H6e=s(Yf);rH=n(H6e,"STRONG",{});var Wkr=s(rH);BIe=r(Wkr,"blenderbot-small"),Wkr.forEach(t),xIe=r(H6e," \u2014 "),g8=n(H6e,"A",{href:!0});var Qkr=s(g8);kIe=r(Qkr,"BlenderbotSmallConfig"),Qkr.forEach(t),RIe=r(H6e," (BlenderbotSmall model)"),H6e.forEach(t),SIe=i(T),Kf=n(T,"LI",{});var U6e=s(Kf);tH=n(U6e,"STRONG",{});var Hkr=s(tH);PIe=r(Hkr,"camembert"),Hkr.forEach(t),$Ie=r(U6e," \u2014 "),h8=n(U6e,"A",{href:!0});var Ukr=s(h8);IIe=r(Ukr,"CamembertConfig"),Ukr.forEach(t),NIe=r(U6e," (CamemBERT model)"),U6e.forEach(t),DIe=i(T),Zf=n(T,"LI",{});var J6e=s(Zf);aH=n(J6e,"STRONG",{});var Jkr=s(aH);jIe=r(Jkr,"canine"),Jkr.forEach(t),qIe=r(J6e," \u2014 "),p8=n(J6e,"A",{href:!0});var Ykr=s(p8);GIe=r(Ykr,"CanineConfig"),Ykr.forEach(t),OIe=r(J6e," (Canine model)"),J6e.forEach(t),XIe=i(T),em=n(T,"LI",{});var Y6e=s(em);nH=n(Y6e,"STRONG",{});var Kkr=s(nH);VIe=r(Kkr,"clip"),Kkr.forEach(t),zIe=r(Y6e," \u2014 "),_8=n(Y6e,"A",{href:!0});var Zkr=s(_8);WIe=r(Zkr,"CLIPConfig"),Zkr.forEach(t),QIe=r(Y6e," (CLIP model)"),Y6e.forEach(t),HIe=i(T),om=n(T,"LI",{});var K6e=s(om);sH=n(K6e,"STRONG",{});var eRr=s(sH);UIe=r(eRr,"convbert"),eRr.forEach(t),JIe=r(K6e," \u2014 "),u8=n(K6e,"A",{href:!0});var oRr=s(u8);YIe=r(oRr,"ConvBertConfig"),oRr.forEach(t),KIe=r(K6e," (ConvBERT model)"),K6e.forEach(t),ZIe=i(T),rm=n(T,"LI",{});var Z6e=s(rm);lH=n(Z6e,"STRONG",{});var rRr=s(lH);eNe=r(rRr,"convnext"),rRr.forEach(t),oNe=r(Z6e," \u2014 "),b8=n(Z6e,"A",{href:!0});var tRr=s(b8);rNe=r(tRr,"ConvNextConfig"),tRr.forEach(t),tNe=r(Z6e," (ConvNext model)"),Z6e.forEach(t),aNe=i(T),tm=n(T,"LI",{});var eTe=s(tm);iH=n(eTe,"STRONG",{});var aRr=s(iH);nNe=r(aRr,"ctrl"),aRr.forEach(t),sNe=r(eTe," \u2014 "),v8=n(eTe,"A",{href:!0});var nRr=s(v8);lNe=r(nRr,"CTRLConfig"),nRr.forEach(t),iNe=r(eTe," (CTRL model)"),eTe.forEach(t),dNe=i(T),am=n(T,"LI",{});var oTe=s(am);dH=n(oTe,"STRONG",{});var sRr=s(dH);cNe=r(sRr,"data2vec-audio"),sRr.forEach(t),fNe=r(oTe," \u2014 "),T8=n(oTe,"A",{href:!0});var lRr=s(T8);mNe=r(lRr,"Data2VecAudioConfig"),lRr.forEach(t),gNe=r(oTe," (Data2VecAudio model)"),oTe.forEach(t),hNe=i(T),nm=n(T,"LI",{});var rTe=s(nm);cH=n(rTe,"STRONG",{});var iRr=s(cH);pNe=r(iRr,"data2vec-text"),iRr.forEach(t),_Ne=r(rTe," \u2014 "),F8=n(rTe,"A",{href:!0});var dRr=s(F8);uNe=r(dRr,"Data2VecTextConfig"),dRr.forEach(t),bNe=r(rTe," (Data2VecText model)"),rTe.forEach(t),vNe=i(T),sm=n(T,"LI",{});var tTe=s(sm);fH=n(tTe,"STRONG",{});var cRr=s(fH);TNe=r(cRr,"deberta"),cRr.forEach(t),FNe=r(tTe," \u2014 "),C8=n(tTe,"A",{href:!0});var fRr=s(C8);CNe=r(fRr,"DebertaConfig"),fRr.forEach(t),MNe=r(tTe," (DeBERTa model)"),tTe.forEach(t),ENe=i(T),lm=n(T,"LI",{});var aTe=s(lm);mH=n(aTe,"STRONG",{});var mRr=s(mH);yNe=r(mRr,"deberta-v2"),mRr.forEach(t),wNe=r(aTe," \u2014 "),M8=n(aTe,"A",{href:!0});var gRr=s(M8);ANe=r(gRr,"DebertaV2Config"),gRr.forEach(t),LNe=r(aTe," (DeBERTa-v2 model)"),aTe.forEach(t),BNe=i(T),im=n(T,"LI",{});var nTe=s(im);gH=n(nTe,"STRONG",{});var hRr=s(gH);xNe=r(hRr,"decision_transformer"),hRr.forEach(t),kNe=r(nTe," \u2014 "),E8=n(nTe,"A",{href:!0});var pRr=s(E8);RNe=r(pRr,"DecisionTransformerConfig"),pRr.forEach(t),SNe=r(nTe," (Decision Transformer model)"),nTe.forEach(t),PNe=i(T),dm=n(T,"LI",{});var sTe=s(dm);hH=n(sTe,"STRONG",{});var _Rr=s(hH);$Ne=r(_Rr,"deit"),_Rr.forEach(t),INe=r(sTe," \u2014 "),y8=n(sTe,"A",{href:!0});var uRr=s(y8);NNe=r(uRr,"DeiTConfig"),uRr.forEach(t),DNe=r(sTe," (DeiT model)"),sTe.forEach(t),jNe=i(T),cm=n(T,"LI",{});var lTe=s(cm);pH=n(lTe,"STRONG",{});var bRr=s(pH);qNe=r(bRr,"detr"),bRr.forEach(t),GNe=r(lTe," \u2014 "),w8=n(lTe,"A",{href:!0});var vRr=s(w8);ONe=r(vRr,"DetrConfig"),vRr.forEach(t),XNe=r(lTe," (DETR model)"),lTe.forEach(t),VNe=i(T),fm=n(T,"LI",{});var iTe=s(fm);_H=n(iTe,"STRONG",{});var TRr=s(_H);zNe=r(TRr,"distilbert"),TRr.forEach(t),WNe=r(iTe," \u2014 "),A8=n(iTe,"A",{href:!0});var FRr=s(A8);QNe=r(FRr,"DistilBertConfig"),FRr.forEach(t),HNe=r(iTe," (DistilBERT model)"),iTe.forEach(t),UNe=i(T),mm=n(T,"LI",{});var dTe=s(mm);uH=n(dTe,"STRONG",{});var CRr=s(uH);JNe=r(CRr,"dpr"),CRr.forEach(t),YNe=r(dTe," \u2014 "),L8=n(dTe,"A",{href:!0});var MRr=s(L8);KNe=r(MRr,"DPRConfig"),MRr.forEach(t),ZNe=r(dTe," (DPR model)"),dTe.forEach(t),eDe=i(T),gm=n(T,"LI",{});var cTe=s(gm);bH=n(cTe,"STRONG",{});var ERr=s(bH);oDe=r(ERr,"electra"),ERr.forEach(t),rDe=r(cTe," \u2014 "),B8=n(cTe,"A",{href:!0});var yRr=s(B8);tDe=r(yRr,"ElectraConfig"),yRr.forEach(t),aDe=r(cTe," (ELECTRA model)"),cTe.forEach(t),nDe=i(T),hm=n(T,"LI",{});var fTe=s(hm);vH=n(fTe,"STRONG",{});var wRr=s(vH);sDe=r(wRr,"encoder-decoder"),wRr.forEach(t),lDe=r(fTe," \u2014 "),x8=n(fTe,"A",{href:!0});var ARr=s(x8);iDe=r(ARr,"EncoderDecoderConfig"),ARr.forEach(t),dDe=r(fTe," (Encoder decoder model)"),fTe.forEach(t),cDe=i(T),pm=n(T,"LI",{});var mTe=s(pm);TH=n(mTe,"STRONG",{});var LRr=s(TH);fDe=r(LRr,"flaubert"),LRr.forEach(t),mDe=r(mTe," \u2014 "),k8=n(mTe,"A",{href:!0});var BRr=s(k8);gDe=r(BRr,"FlaubertConfig"),BRr.forEach(t),hDe=r(mTe," (FlauBERT model)"),mTe.forEach(t),pDe=i(T),_m=n(T,"LI",{});var gTe=s(_m);FH=n(gTe,"STRONG",{});var xRr=s(FH);_De=r(xRr,"fnet"),xRr.forEach(t),uDe=r(gTe," \u2014 "),R8=n(gTe,"A",{href:!0});var kRr=s(R8);bDe=r(kRr,"FNetConfig"),kRr.forEach(t),vDe=r(gTe," (FNet model)"),gTe.forEach(t),TDe=i(T),um=n(T,"LI",{});var hTe=s(um);CH=n(hTe,"STRONG",{});var RRr=s(CH);FDe=r(RRr,"fsmt"),RRr.forEach(t),CDe=r(hTe," \u2014 "),S8=n(hTe,"A",{href:!0});var SRr=s(S8);MDe=r(SRr,"FSMTConfig"),SRr.forEach(t),EDe=r(hTe," (FairSeq Machine-Translation model)"),hTe.forEach(t),yDe=i(T),bm=n(T,"LI",{});var pTe=s(bm);MH=n(pTe,"STRONG",{});var PRr=s(MH);wDe=r(PRr,"funnel"),PRr.forEach(t),ADe=r(pTe," \u2014 "),P8=n(pTe,"A",{href:!0});var $Rr=s(P8);LDe=r($Rr,"FunnelConfig"),$Rr.forEach(t),BDe=r(pTe," (Funnel Transformer model)"),pTe.forEach(t),xDe=i(T),vm=n(T,"LI",{});var _Te=s(vm);EH=n(_Te,"STRONG",{});var IRr=s(EH);kDe=r(IRr,"glpn"),IRr.forEach(t),RDe=r(_Te," \u2014 "),$8=n(_Te,"A",{href:!0});var NRr=s($8);SDe=r(NRr,"GLPNConfig"),NRr.forEach(t),PDe=r(_Te," (GLPN model)"),_Te.forEach(t),$De=i(T),Tm=n(T,"LI",{});var uTe=s(Tm);yH=n(uTe,"STRONG",{});var DRr=s(yH);IDe=r(DRr,"gpt2"),DRr.forEach(t),NDe=r(uTe," \u2014 "),I8=n(uTe,"A",{href:!0});var jRr=s(I8);DDe=r(jRr,"GPT2Config"),jRr.forEach(t),jDe=r(uTe," (OpenAI GPT-2 model)"),uTe.forEach(t),qDe=i(T),Fm=n(T,"LI",{});var bTe=s(Fm);wH=n(bTe,"STRONG",{});var qRr=s(wH);GDe=r(qRr,"gpt_neo"),qRr.forEach(t),ODe=r(bTe," \u2014 "),N8=n(bTe,"A",{href:!0});var GRr=s(N8);XDe=r(GRr,"GPTNeoConfig"),GRr.forEach(t),VDe=r(bTe," (GPT Neo model)"),bTe.forEach(t),zDe=i(T),Cm=n(T,"LI",{});var vTe=s(Cm);AH=n(vTe,"STRONG",{});var ORr=s(AH);WDe=r(ORr,"gptj"),ORr.forEach(t),QDe=r(vTe," \u2014 "),D8=n(vTe,"A",{href:!0});var XRr=s(D8);HDe=r(XRr,"GPTJConfig"),XRr.forEach(t),UDe=r(vTe," (GPT-J model)"),vTe.forEach(t),JDe=i(T),Mm=n(T,"LI",{});var TTe=s(Mm);LH=n(TTe,"STRONG",{});var VRr=s(LH);YDe=r(VRr,"hubert"),VRr.forEach(t),KDe=r(TTe," \u2014 "),j8=n(TTe,"A",{href:!0});var zRr=s(j8);ZDe=r(zRr,"HubertConfig"),zRr.forEach(t),eje=r(TTe," (Hubert model)"),TTe.forEach(t),oje=i(T),Em=n(T,"LI",{});var FTe=s(Em);BH=n(FTe,"STRONG",{});var WRr=s(BH);rje=r(WRr,"ibert"),WRr.forEach(t),tje=r(FTe," \u2014 "),q8=n(FTe,"A",{href:!0});var QRr=s(q8);aje=r(QRr,"IBertConfig"),QRr.forEach(t),nje=r(FTe," (I-BERT model)"),FTe.forEach(t),sje=i(T),ym=n(T,"LI",{});var CTe=s(ym);xH=n(CTe,"STRONG",{});var HRr=s(xH);lje=r(HRr,"imagegpt"),HRr.forEach(t),ije=r(CTe," \u2014 "),G8=n(CTe,"A",{href:!0});var URr=s(G8);dje=r(URr,"ImageGPTConfig"),URr.forEach(t),cje=r(CTe," (ImageGPT model)"),CTe.forEach(t),fje=i(T),wm=n(T,"LI",{});var MTe=s(wm);kH=n(MTe,"STRONG",{});var JRr=s(kH);mje=r(JRr,"layoutlm"),JRr.forEach(t),gje=r(MTe," \u2014 "),O8=n(MTe,"A",{href:!0});var YRr=s(O8);hje=r(YRr,"LayoutLMConfig"),YRr.forEach(t),pje=r(MTe," (LayoutLM model)"),MTe.forEach(t),_je=i(T),Am=n(T,"LI",{});var ETe=s(Am);RH=n(ETe,"STRONG",{});var KRr=s(RH);uje=r(KRr,"layoutlmv2"),KRr.forEach(t),bje=r(ETe," \u2014 "),X8=n(ETe,"A",{href:!0});var ZRr=s(X8);vje=r(ZRr,"LayoutLMv2Config"),ZRr.forEach(t),Tje=r(ETe," (LayoutLMv2 model)"),ETe.forEach(t),Fje=i(T),Lm=n(T,"LI",{});var yTe=s(Lm);SH=n(yTe,"STRONG",{});var eSr=s(SH);Cje=r(eSr,"led"),eSr.forEach(t),Mje=r(yTe," \u2014 "),V8=n(yTe,"A",{href:!0});var oSr=s(V8);Eje=r(oSr,"LEDConfig"),oSr.forEach(t),yje=r(yTe," (LED model)"),yTe.forEach(t),wje=i(T),Bm=n(T,"LI",{});var wTe=s(Bm);PH=n(wTe,"STRONG",{});var rSr=s(PH);Aje=r(rSr,"longformer"),rSr.forEach(t),Lje=r(wTe," \u2014 "),z8=n(wTe,"A",{href:!0});var tSr=s(z8);Bje=r(tSr,"LongformerConfig"),tSr.forEach(t),xje=r(wTe," (Longformer model)"),wTe.forEach(t),kje=i(T),xm=n(T,"LI",{});var ATe=s(xm);$H=n(ATe,"STRONG",{});var aSr=s($H);Rje=r(aSr,"luke"),aSr.forEach(t),Sje=r(ATe," \u2014 "),W8=n(ATe,"A",{href:!0});var nSr=s(W8);Pje=r(nSr,"LukeConfig"),nSr.forEach(t),$je=r(ATe," (LUKE model)"),ATe.forEach(t),Ije=i(T),km=n(T,"LI",{});var LTe=s(km);IH=n(LTe,"STRONG",{});var sSr=s(IH);Nje=r(sSr,"lxmert"),sSr.forEach(t),Dje=r(LTe," \u2014 "),Q8=n(LTe,"A",{href:!0});var lSr=s(Q8);jje=r(lSr,"LxmertConfig"),lSr.forEach(t),qje=r(LTe," (LXMERT model)"),LTe.forEach(t),Gje=i(T),Rm=n(T,"LI",{});var BTe=s(Rm);NH=n(BTe,"STRONG",{});var iSr=s(NH);Oje=r(iSr,"m2m_100"),iSr.forEach(t),Xje=r(BTe," \u2014 "),H8=n(BTe,"A",{href:!0});var dSr=s(H8);Vje=r(dSr,"M2M100Config"),dSr.forEach(t),zje=r(BTe," (M2M100 model)"),BTe.forEach(t),Wje=i(T),Sm=n(T,"LI",{});var xTe=s(Sm);DH=n(xTe,"STRONG",{});var cSr=s(DH);Qje=r(cSr,"marian"),cSr.forEach(t),Hje=r(xTe," \u2014 "),U8=n(xTe,"A",{href:!0});var fSr=s(U8);Uje=r(fSr,"MarianConfig"),fSr.forEach(t),Jje=r(xTe," (Marian model)"),xTe.forEach(t),Yje=i(T),Pm=n(T,"LI",{});var kTe=s(Pm);jH=n(kTe,"STRONG",{});var mSr=s(jH);Kje=r(mSr,"maskformer"),mSr.forEach(t),Zje=r(kTe," \u2014 "),J8=n(kTe,"A",{href:!0});var gSr=s(J8);eqe=r(gSr,"MaskFormerConfig"),gSr.forEach(t),oqe=r(kTe," (MaskFormer model)"),kTe.forEach(t),rqe=i(T),$m=n(T,"LI",{});var RTe=s($m);qH=n(RTe,"STRONG",{});var hSr=s(qH);tqe=r(hSr,"mbart"),hSr.forEach(t),aqe=r(RTe," \u2014 "),Y8=n(RTe,"A",{href:!0});var pSr=s(Y8);nqe=r(pSr,"MBartConfig"),pSr.forEach(t),sqe=r(RTe," (mBART model)"),RTe.forEach(t),lqe=i(T),Im=n(T,"LI",{});var STe=s(Im);GH=n(STe,"STRONG",{});var _Sr=s(GH);iqe=r(_Sr,"megatron-bert"),_Sr.forEach(t),dqe=r(STe," \u2014 "),K8=n(STe,"A",{href:!0});var uSr=s(K8);cqe=r(uSr,"MegatronBertConfig"),uSr.forEach(t),fqe=r(STe," (MegatronBert model)"),STe.forEach(t),mqe=i(T),Nm=n(T,"LI",{});var PTe=s(Nm);OH=n(PTe,"STRONG",{});var bSr=s(OH);gqe=r(bSr,"mobilebert"),bSr.forEach(t),hqe=r(PTe," \u2014 "),Z8=n(PTe,"A",{href:!0});var vSr=s(Z8);pqe=r(vSr,"MobileBertConfig"),vSr.forEach(t),_qe=r(PTe," (MobileBERT model)"),PTe.forEach(t),uqe=i(T),Dm=n(T,"LI",{});var $Te=s(Dm);XH=n($Te,"STRONG",{});var TSr=s(XH);bqe=r(TSr,"mpnet"),TSr.forEach(t),vqe=r($Te," \u2014 "),eB=n($Te,"A",{href:!0});var FSr=s(eB);Tqe=r(FSr,"MPNetConfig"),FSr.forEach(t),Fqe=r($Te," (MPNet model)"),$Te.forEach(t),Cqe=i(T),jm=n(T,"LI",{});var ITe=s(jm);VH=n(ITe,"STRONG",{});var CSr=s(VH);Mqe=r(CSr,"mt5"),CSr.forEach(t),Eqe=r(ITe," \u2014 "),oB=n(ITe,"A",{href:!0});var MSr=s(oB);yqe=r(MSr,"MT5Config"),MSr.forEach(t),wqe=r(ITe," (mT5 model)"),ITe.forEach(t),Aqe=i(T),qm=n(T,"LI",{});var NTe=s(qm);zH=n(NTe,"STRONG",{});var ESr=s(zH);Lqe=r(ESr,"nystromformer"),ESr.forEach(t),Bqe=r(NTe," \u2014 "),rB=n(NTe,"A",{href:!0});var ySr=s(rB);xqe=r(ySr,"NystromformerConfig"),ySr.forEach(t),kqe=r(NTe," (Nystromformer model)"),NTe.forEach(t),Rqe=i(T),Gm=n(T,"LI",{});var DTe=s(Gm);WH=n(DTe,"STRONG",{});var wSr=s(WH);Sqe=r(wSr,"openai-gpt"),wSr.forEach(t),Pqe=r(DTe," \u2014 "),tB=n(DTe,"A",{href:!0});var ASr=s(tB);$qe=r(ASr,"OpenAIGPTConfig"),ASr.forEach(t),Iqe=r(DTe," (OpenAI GPT model)"),DTe.forEach(t),Nqe=i(T),Om=n(T,"LI",{});var jTe=s(Om);QH=n(jTe,"STRONG",{});var LSr=s(QH);Dqe=r(LSr,"pegasus"),LSr.forEach(t),jqe=r(jTe," \u2014 "),aB=n(jTe,"A",{href:!0});var BSr=s(aB);qqe=r(BSr,"PegasusConfig"),BSr.forEach(t),Gqe=r(jTe," (Pegasus model)"),jTe.forEach(t),Oqe=i(T),Xm=n(T,"LI",{});var qTe=s(Xm);HH=n(qTe,"STRONG",{});var xSr=s(HH);Xqe=r(xSr,"perceiver"),xSr.forEach(t),Vqe=r(qTe," \u2014 "),nB=n(qTe,"A",{href:!0});var kSr=s(nB);zqe=r(kSr,"PerceiverConfig"),kSr.forEach(t),Wqe=r(qTe," (Perceiver model)"),qTe.forEach(t),Qqe=i(T),Vm=n(T,"LI",{});var GTe=s(Vm);UH=n(GTe,"STRONG",{});var RSr=s(UH);Hqe=r(RSr,"plbart"),RSr.forEach(t),Uqe=r(GTe," \u2014 "),sB=n(GTe,"A",{href:!0});var SSr=s(sB);Jqe=r(SSr,"PLBartConfig"),SSr.forEach(t),Yqe=r(GTe," (PLBart model)"),GTe.forEach(t),Kqe=i(T),zm=n(T,"LI",{});var OTe=s(zm);JH=n(OTe,"STRONG",{});var PSr=s(JH);Zqe=r(PSr,"poolformer"),PSr.forEach(t),eGe=r(OTe," \u2014 "),lB=n(OTe,"A",{href:!0});var $Sr=s(lB);oGe=r($Sr,"PoolFormerConfig"),$Sr.forEach(t),rGe=r(OTe," (PoolFormer model)"),OTe.forEach(t),tGe=i(T),Wm=n(T,"LI",{});var XTe=s(Wm);YH=n(XTe,"STRONG",{});var ISr=s(YH);aGe=r(ISr,"prophetnet"),ISr.forEach(t),nGe=r(XTe," \u2014 "),iB=n(XTe,"A",{href:!0});var NSr=s(iB);sGe=r(NSr,"ProphetNetConfig"),NSr.forEach(t),lGe=r(XTe," (ProphetNet model)"),XTe.forEach(t),iGe=i(T),Qm=n(T,"LI",{});var VTe=s(Qm);KH=n(VTe,"STRONG",{});var DSr=s(KH);dGe=r(DSr,"qdqbert"),DSr.forEach(t),cGe=r(VTe," \u2014 "),dB=n(VTe,"A",{href:!0});var jSr=s(dB);fGe=r(jSr,"QDQBertConfig"),jSr.forEach(t),mGe=r(VTe," (QDQBert model)"),VTe.forEach(t),gGe=i(T),Hm=n(T,"LI",{});var zTe=s(Hm);ZH=n(zTe,"STRONG",{});var qSr=s(ZH);hGe=r(qSr,"rag"),qSr.forEach(t),pGe=r(zTe," \u2014 "),cB=n(zTe,"A",{href:!0});var GSr=s(cB);_Ge=r(GSr,"RagConfig"),GSr.forEach(t),uGe=r(zTe," (RAG model)"),zTe.forEach(t),bGe=i(T),Um=n(T,"LI",{});var WTe=s(Um);eU=n(WTe,"STRONG",{});var OSr=s(eU);vGe=r(OSr,"realm"),OSr.forEach(t),TGe=r(WTe," \u2014 "),fB=n(WTe,"A",{href:!0});var XSr=s(fB);FGe=r(XSr,"RealmConfig"),XSr.forEach(t),CGe=r(WTe," (Realm model)"),WTe.forEach(t),MGe=i(T),Jm=n(T,"LI",{});var QTe=s(Jm);oU=n(QTe,"STRONG",{});var VSr=s(oU);EGe=r(VSr,"reformer"),VSr.forEach(t),yGe=r(QTe," \u2014 "),mB=n(QTe,"A",{href:!0});var zSr=s(mB);wGe=r(zSr,"ReformerConfig"),zSr.forEach(t),AGe=r(QTe," (Reformer model)"),QTe.forEach(t),LGe=i(T),Ym=n(T,"LI",{});var HTe=s(Ym);rU=n(HTe,"STRONG",{});var WSr=s(rU);BGe=r(WSr,"rembert"),WSr.forEach(t),xGe=r(HTe," \u2014 "),gB=n(HTe,"A",{href:!0});var QSr=s(gB);kGe=r(QSr,"RemBertConfig"),QSr.forEach(t),RGe=r(HTe," (RemBERT model)"),HTe.forEach(t),SGe=i(T),Km=n(T,"LI",{});var UTe=s(Km);tU=n(UTe,"STRONG",{});var HSr=s(tU);PGe=r(HSr,"resnet"),HSr.forEach(t),$Ge=r(UTe," \u2014 "),hB=n(UTe,"A",{href:!0});var USr=s(hB);IGe=r(USr,"ResNetConfig"),USr.forEach(t),NGe=r(UTe," (ResNet model)"),UTe.forEach(t),DGe=i(T),Zm=n(T,"LI",{});var JTe=s(Zm);aU=n(JTe,"STRONG",{});var JSr=s(aU);jGe=r(JSr,"retribert"),JSr.forEach(t),qGe=r(JTe," \u2014 "),pB=n(JTe,"A",{href:!0});var YSr=s(pB);GGe=r(YSr,"RetriBertConfig"),YSr.forEach(t),OGe=r(JTe," (RetriBERT model)"),JTe.forEach(t),XGe=i(T),eg=n(T,"LI",{});var YTe=s(eg);nU=n(YTe,"STRONG",{});var KSr=s(nU);VGe=r(KSr,"roberta"),KSr.forEach(t),zGe=r(YTe," \u2014 "),_B=n(YTe,"A",{href:!0});var ZSr=s(_B);WGe=r(ZSr,"RobertaConfig"),ZSr.forEach(t),QGe=r(YTe," (RoBERTa model)"),YTe.forEach(t),HGe=i(T),og=n(T,"LI",{});var KTe=s(og);sU=n(KTe,"STRONG",{});var ePr=s(sU);UGe=r(ePr,"roformer"),ePr.forEach(t),JGe=r(KTe," \u2014 "),uB=n(KTe,"A",{href:!0});var oPr=s(uB);YGe=r(oPr,"RoFormerConfig"),oPr.forEach(t),KGe=r(KTe," (RoFormer model)"),KTe.forEach(t),ZGe=i(T),rg=n(T,"LI",{});var ZTe=s(rg);lU=n(ZTe,"STRONG",{});var rPr=s(lU);eOe=r(rPr,"segformer"),rPr.forEach(t),oOe=r(ZTe," \u2014 "),bB=n(ZTe,"A",{href:!0});var tPr=s(bB);rOe=r(tPr,"SegformerConfig"),tPr.forEach(t),tOe=r(ZTe," (SegFormer model)"),ZTe.forEach(t),aOe=i(T),tg=n(T,"LI",{});var eFe=s(tg);iU=n(eFe,"STRONG",{});var aPr=s(iU);nOe=r(aPr,"sew"),aPr.forEach(t),sOe=r(eFe," \u2014 "),vB=n(eFe,"A",{href:!0});var nPr=s(vB);lOe=r(nPr,"SEWConfig"),nPr.forEach(t),iOe=r(eFe," (SEW model)"),eFe.forEach(t),dOe=i(T),ag=n(T,"LI",{});var oFe=s(ag);dU=n(oFe,"STRONG",{});var sPr=s(dU);cOe=r(sPr,"sew-d"),sPr.forEach(t),fOe=r(oFe," \u2014 "),TB=n(oFe,"A",{href:!0});var lPr=s(TB);mOe=r(lPr,"SEWDConfig"),lPr.forEach(t),gOe=r(oFe," (SEW-D model)"),oFe.forEach(t),hOe=i(T),ng=n(T,"LI",{});var rFe=s(ng);cU=n(rFe,"STRONG",{});var iPr=s(cU);pOe=r(iPr,"speech-encoder-decoder"),iPr.forEach(t),_Oe=r(rFe," \u2014 "),FB=n(rFe,"A",{href:!0});var dPr=s(FB);uOe=r(dPr,"SpeechEncoderDecoderConfig"),dPr.forEach(t),bOe=r(rFe," (Speech Encoder decoder model)"),rFe.forEach(t),vOe=i(T),sg=n(T,"LI",{});var tFe=s(sg);fU=n(tFe,"STRONG",{});var cPr=s(fU);TOe=r(cPr,"speech_to_text"),cPr.forEach(t),FOe=r(tFe," \u2014 "),CB=n(tFe,"A",{href:!0});var fPr=s(CB);COe=r(fPr,"Speech2TextConfig"),fPr.forEach(t),MOe=r(tFe," (Speech2Text model)"),tFe.forEach(t),EOe=i(T),lg=n(T,"LI",{});var aFe=s(lg);mU=n(aFe,"STRONG",{});var mPr=s(mU);yOe=r(mPr,"speech_to_text_2"),mPr.forEach(t),wOe=r(aFe," \u2014 "),MB=n(aFe,"A",{href:!0});var gPr=s(MB);AOe=r(gPr,"Speech2Text2Config"),gPr.forEach(t),LOe=r(aFe," (Speech2Text2 model)"),aFe.forEach(t),BOe=i(T),ig=n(T,"LI",{});var nFe=s(ig);gU=n(nFe,"STRONG",{});var hPr=s(gU);xOe=r(hPr,"splinter"),hPr.forEach(t),kOe=r(nFe," \u2014 "),EB=n(nFe,"A",{href:!0});var pPr=s(EB);ROe=r(pPr,"SplinterConfig"),pPr.forEach(t),SOe=r(nFe," (Splinter model)"),nFe.forEach(t),POe=i(T),dg=n(T,"LI",{});var sFe=s(dg);hU=n(sFe,"STRONG",{});var _Pr=s(hU);$Oe=r(_Pr,"squeezebert"),_Pr.forEach(t),IOe=r(sFe," \u2014 "),yB=n(sFe,"A",{href:!0});var uPr=s(yB);NOe=r(uPr,"SqueezeBertConfig"),uPr.forEach(t),DOe=r(sFe," (SqueezeBERT model)"),sFe.forEach(t),jOe=i(T),cg=n(T,"LI",{});var lFe=s(cg);pU=n(lFe,"STRONG",{});var bPr=s(pU);qOe=r(bPr,"swin"),bPr.forEach(t),GOe=r(lFe," \u2014 "),wB=n(lFe,"A",{href:!0});var vPr=s(wB);OOe=r(vPr,"SwinConfig"),vPr.forEach(t),XOe=r(lFe," (Swin model)"),lFe.forEach(t),VOe=i(T),fg=n(T,"LI",{});var iFe=s(fg);_U=n(iFe,"STRONG",{});var TPr=s(_U);zOe=r(TPr,"t5"),TPr.forEach(t),WOe=r(iFe," \u2014 "),AB=n(iFe,"A",{href:!0});var FPr=s(AB);QOe=r(FPr,"T5Config"),FPr.forEach(t),HOe=r(iFe," (T5 model)"),iFe.forEach(t),UOe=i(T),mg=n(T,"LI",{});var dFe=s(mg);uU=n(dFe,"STRONG",{});var CPr=s(uU);JOe=r(CPr,"tapas"),CPr.forEach(t),YOe=r(dFe," \u2014 "),LB=n(dFe,"A",{href:!0});var MPr=s(LB);KOe=r(MPr,"TapasConfig"),MPr.forEach(t),ZOe=r(dFe," (TAPAS model)"),dFe.forEach(t),eXe=i(T),gg=n(T,"LI",{});var cFe=s(gg);bU=n(cFe,"STRONG",{});var EPr=s(bU);oXe=r(EPr,"transfo-xl"),EPr.forEach(t),rXe=r(cFe," \u2014 "),BB=n(cFe,"A",{href:!0});var yPr=s(BB);tXe=r(yPr,"TransfoXLConfig"),yPr.forEach(t),aXe=r(cFe," (Transformer-XL model)"),cFe.forEach(t),nXe=i(T),hg=n(T,"LI",{});var fFe=s(hg);vU=n(fFe,"STRONG",{});var wPr=s(vU);sXe=r(wPr,"trocr"),wPr.forEach(t),lXe=r(fFe," \u2014 "),xB=n(fFe,"A",{href:!0});var APr=s(xB);iXe=r(APr,"TrOCRConfig"),APr.forEach(t),dXe=r(fFe," (TrOCR model)"),fFe.forEach(t),cXe=i(T),pg=n(T,"LI",{});var mFe=s(pg);TU=n(mFe,"STRONG",{});var LPr=s(TU);fXe=r(LPr,"unispeech"),LPr.forEach(t),mXe=r(mFe," \u2014 "),kB=n(mFe,"A",{href:!0});var BPr=s(kB);gXe=r(BPr,"UniSpeechConfig"),BPr.forEach(t),hXe=r(mFe," (UniSpeech model)"),mFe.forEach(t),pXe=i(T),_g=n(T,"LI",{});var gFe=s(_g);FU=n(gFe,"STRONG",{});var xPr=s(FU);_Xe=r(xPr,"unispeech-sat"),xPr.forEach(t),uXe=r(gFe," \u2014 "),RB=n(gFe,"A",{href:!0});var kPr=s(RB);bXe=r(kPr,"UniSpeechSatConfig"),kPr.forEach(t),vXe=r(gFe," (UniSpeechSat model)"),gFe.forEach(t),TXe=i(T),ug=n(T,"LI",{});var hFe=s(ug);CU=n(hFe,"STRONG",{});var RPr=s(CU);FXe=r(RPr,"van"),RPr.forEach(t),CXe=r(hFe," \u2014 "),SB=n(hFe,"A",{href:!0});var SPr=s(SB);MXe=r(SPr,"VanConfig"),SPr.forEach(t),EXe=r(hFe," (VAN model)"),hFe.forEach(t),yXe=i(T),bg=n(T,"LI",{});var pFe=s(bg);MU=n(pFe,"STRONG",{});var PPr=s(MU);wXe=r(PPr,"vilt"),PPr.forEach(t),AXe=r(pFe," \u2014 "),PB=n(pFe,"A",{href:!0});var $Pr=s(PB);LXe=r($Pr,"ViltConfig"),$Pr.forEach(t),BXe=r(pFe," (ViLT model)"),pFe.forEach(t),xXe=i(T),vg=n(T,"LI",{});var _Fe=s(vg);EU=n(_Fe,"STRONG",{});var IPr=s(EU);kXe=r(IPr,"vision-encoder-decoder"),IPr.forEach(t),RXe=r(_Fe," \u2014 "),$B=n(_Fe,"A",{href:!0});var NPr=s($B);SXe=r(NPr,"VisionEncoderDecoderConfig"),NPr.forEach(t),PXe=r(_Fe," (Vision Encoder decoder model)"),_Fe.forEach(t),$Xe=i(T),Tg=n(T,"LI",{});var uFe=s(Tg);yU=n(uFe,"STRONG",{});var DPr=s(yU);IXe=r(DPr,"vision-text-dual-encoder"),DPr.forEach(t),NXe=r(uFe," \u2014 "),IB=n(uFe,"A",{href:!0});var jPr=s(IB);DXe=r(jPr,"VisionTextDualEncoderConfig"),jPr.forEach(t),jXe=r(uFe," (VisionTextDualEncoder model)"),uFe.forEach(t),qXe=i(T),Fg=n(T,"LI",{});var bFe=s(Fg);wU=n(bFe,"STRONG",{});var qPr=s(wU);GXe=r(qPr,"visual_bert"),qPr.forEach(t),OXe=r(bFe," \u2014 "),NB=n(bFe,"A",{href:!0});var GPr=s(NB);XXe=r(GPr,"VisualBertConfig"),GPr.forEach(t),VXe=r(bFe," (VisualBert model)"),bFe.forEach(t),zXe=i(T),Cg=n(T,"LI",{});var vFe=s(Cg);AU=n(vFe,"STRONG",{});var OPr=s(AU);WXe=r(OPr,"vit"),OPr.forEach(t),QXe=r(vFe," \u2014 "),DB=n(vFe,"A",{href:!0});var XPr=s(DB);HXe=r(XPr,"ViTConfig"),XPr.forEach(t),UXe=r(vFe," (ViT model)"),vFe.forEach(t),JXe=i(T),Mg=n(T,"LI",{});var TFe=s(Mg);LU=n(TFe,"STRONG",{});var VPr=s(LU);YXe=r(VPr,"vit_mae"),VPr.forEach(t),KXe=r(TFe," \u2014 "),jB=n(TFe,"A",{href:!0});var zPr=s(jB);ZXe=r(zPr,"ViTMAEConfig"),zPr.forEach(t),eVe=r(TFe," (ViTMAE model)"),TFe.forEach(t),oVe=i(T),Eg=n(T,"LI",{});var FFe=s(Eg);BU=n(FFe,"STRONG",{});var WPr=s(BU);rVe=r(WPr,"wav2vec2"),WPr.forEach(t),tVe=r(FFe," \u2014 "),qB=n(FFe,"A",{href:!0});var QPr=s(qB);aVe=r(QPr,"Wav2Vec2Config"),QPr.forEach(t),nVe=r(FFe," (Wav2Vec2 model)"),FFe.forEach(t),sVe=i(T),yg=n(T,"LI",{});var CFe=s(yg);xU=n(CFe,"STRONG",{});var HPr=s(xU);lVe=r(HPr,"wavlm"),HPr.forEach(t),iVe=r(CFe," \u2014 "),GB=n(CFe,"A",{href:!0});var UPr=s(GB);dVe=r(UPr,"WavLMConfig"),UPr.forEach(t),cVe=r(CFe," (WavLM model)"),CFe.forEach(t),fVe=i(T),wg=n(T,"LI",{});var MFe=s(wg);kU=n(MFe,"STRONG",{});var JPr=s(kU);mVe=r(JPr,"xglm"),JPr.forEach(t),gVe=r(MFe," \u2014 "),OB=n(MFe,"A",{href:!0});var YPr=s(OB);hVe=r(YPr,"XGLMConfig"),YPr.forEach(t),pVe=r(MFe," (XGLM model)"),MFe.forEach(t),_Ve=i(T),Ag=n(T,"LI",{});var EFe=s(Ag);RU=n(EFe,"STRONG",{});var KPr=s(RU);uVe=r(KPr,"xlm"),KPr.forEach(t),bVe=r(EFe," \u2014 "),XB=n(EFe,"A",{href:!0});var ZPr=s(XB);vVe=r(ZPr,"XLMConfig"),ZPr.forEach(t),TVe=r(EFe," (XLM model)"),EFe.forEach(t),FVe=i(T),Lg=n(T,"LI",{});var yFe=s(Lg);SU=n(yFe,"STRONG",{});var e$r=s(SU);CVe=r(e$r,"xlm-prophetnet"),e$r.forEach(t),MVe=r(yFe," \u2014 "),VB=n(yFe,"A",{href:!0});var o$r=s(VB);EVe=r(o$r,"XLMProphetNetConfig"),o$r.forEach(t),yVe=r(yFe," (XLMProphetNet model)"),yFe.forEach(t),wVe=i(T),Bg=n(T,"LI",{});var wFe=s(Bg);PU=n(wFe,"STRONG",{});var r$r=s(PU);AVe=r(r$r,"xlm-roberta"),r$r.forEach(t),LVe=r(wFe," \u2014 "),zB=n(wFe,"A",{href:!0});var t$r=s(zB);BVe=r(t$r,"XLMRobertaConfig"),t$r.forEach(t),xVe=r(wFe," (XLM-RoBERTa model)"),wFe.forEach(t),kVe=i(T),xg=n(T,"LI",{});var AFe=s(xg);$U=n(AFe,"STRONG",{});var a$r=s($U);RVe=r(a$r,"xlm-roberta-xl"),a$r.forEach(t),SVe=r(AFe," \u2014 "),WB=n(AFe,"A",{href:!0});var n$r=s(WB);PVe=r(n$r,"XLMRobertaXLConfig"),n$r.forEach(t),$Ve=r(AFe," (XLM-RoBERTa-XL model)"),AFe.forEach(t),IVe=i(T),kg=n(T,"LI",{});var LFe=s(kg);IU=n(LFe,"STRONG",{});var s$r=s(IU);NVe=r(s$r,"xlnet"),s$r.forEach(t),DVe=r(LFe," \u2014 "),QB=n(LFe,"A",{href:!0});var l$r=s(QB);jVe=r(l$r,"XLNetConfig"),l$r.forEach(t),qVe=r(LFe," (XLNet model)"),LFe.forEach(t),GVe=i(T),Rg=n(T,"LI",{});var BFe=s(Rg);NU=n(BFe,"STRONG",{});var i$r=s(NU);OVe=r(i$r,"yoso"),i$r.forEach(t),XVe=r(BFe," \u2014 "),HB=n(BFe,"A",{href:!0});var d$r=s(HB);VVe=r(d$r,"YosoConfig"),d$r.forEach(t),zVe=r(BFe," (YOSO model)"),BFe.forEach(t),T.forEach(t),WVe=i(ga),DU=n(ga,"P",{});var c$r=s(DU);QVe=r(c$r,"Examples:"),c$r.forEach(t),HVe=i(ga),m(_E.$$.fragment,ga),ga.forEach(t),UVe=i(Os),Sg=n(Os,"DIV",{class:!0});var dSe=s(Sg);m(uE.$$.fragment,dSe),JVe=i(dSe),jU=n(dSe,"P",{});var f$r=s(jU);YVe=r(f$r,"Register a new configuration for this class."),f$r.forEach(t),dSe.forEach(t),Os.forEach(t),lke=i(c),Wi=n(c,"H2",{class:!0});var cSe=s(Wi);Pg=n(cSe,"A",{id:!0,class:!0,href:!0});var m$r=s(Pg);qU=n(m$r,"SPAN",{});var g$r=s(qU);m(bE.$$.fragment,g$r),g$r.forEach(t),m$r.forEach(t),KVe=i(cSe),GU=n(cSe,"SPAN",{});var h$r=s(GU);ZVe=r(h$r,"AutoTokenizer"),h$r.forEach(t),cSe.forEach(t),ike=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(vE.$$.fragment,Xs),eze=i(Xs),TE=n(Xs,"P",{});var fSe=s(TE);oze=r(fSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UB=n(fSe,"A",{href:!0});var p$r=s(UB);rze=r(p$r,"AutoTokenizer.from_pretrained()"),p$r.forEach(t),tze=r(fSe," class method."),fSe.forEach(t),aze=i(Xs),FE=n(Xs,"P",{});var mSe=s(FE);nze=r(mSe,"This class cannot be instantiated directly using "),OU=n(mSe,"CODE",{});var _$r=s(OU);sze=r(_$r,"__init__()"),_$r.forEach(t),lze=r(mSe," (throws an error)."),mSe.forEach(t),ize=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(CE.$$.fragment,ha),dze=i(ha),XU=n(ha,"P",{});var u$r=s(XU);cze=r(u$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),u$r.forEach(t),fze=i(ha),Oa=n(ha,"P",{});var l4=s(Oa);mze=r(l4,"The tokenizer class to instantiate is selected based on the "),VU=n(l4,"CODE",{});var b$r=s(VU);gze=r(b$r,"model_type"),b$r.forEach(t),hze=r(l4,` property of the config object (either
passed as an argument or loaded from `),zU=n(l4,"CODE",{});var v$r=s(zU);pze=r(v$r,"pretrained_model_name_or_path"),v$r.forEach(t),_ze=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WU=n(l4,"CODE",{});var T$r=s(WU);uze=r(T$r,"pretrained_model_name_or_path"),T$r.forEach(t),bze=r(l4,":"),l4.forEach(t),vze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var r7=s(Wn);QU=n(r7,"STRONG",{});var F$r=s(QU);Tze=r(F$r,"albert"),F$r.forEach(t),Fze=r(r7," \u2014 "),JB=n(r7,"A",{href:!0});var C$r=s(JB);Cze=r(C$r,"AlbertTokenizer"),C$r.forEach(t),Mze=r(r7," or "),YB=n(r7,"A",{href:!0});var M$r=s(YB);Eze=r(M$r,"AlbertTokenizerFast"),M$r.forEach(t),yze=r(r7," (ALBERT model)"),r7.forEach(t),wze=i(y),Qn=n(y,"LI",{});var t7=s(Qn);HU=n(t7,"STRONG",{});var E$r=s(HU);Aze=r(E$r,"bart"),E$r.forEach(t),Lze=r(t7," \u2014 "),KB=n(t7,"A",{href:!0});var y$r=s(KB);Bze=r(y$r,"BartTokenizer"),y$r.forEach(t),xze=r(t7," or "),ZB=n(t7,"A",{href:!0});var w$r=s(ZB);kze=r(w$r,"BartTokenizerFast"),w$r.forEach(t),Rze=r(t7," (BART model)"),t7.forEach(t),Sze=i(y),Hn=n(y,"LI",{});var a7=s(Hn);UU=n(a7,"STRONG",{});var A$r=s(UU);Pze=r(A$r,"barthez"),A$r.forEach(t),$ze=r(a7," \u2014 "),ex=n(a7,"A",{href:!0});var L$r=s(ex);Ize=r(L$r,"BarthezTokenizer"),L$r.forEach(t),Nze=r(a7," or "),ox=n(a7,"A",{href:!0});var B$r=s(ox);Dze=r(B$r,"BarthezTokenizerFast"),B$r.forEach(t),jze=r(a7," (BARThez model)"),a7.forEach(t),qze=i(y),$g=n(y,"LI",{});var xFe=s($g);JU=n(xFe,"STRONG",{});var x$r=s(JU);Gze=r(x$r,"bartpho"),x$r.forEach(t),Oze=r(xFe," \u2014 "),rx=n(xFe,"A",{href:!0});var k$r=s(rx);Xze=r(k$r,"BartphoTokenizer"),k$r.forEach(t),Vze=r(xFe," (BARTpho model)"),xFe.forEach(t),zze=i(y),Un=n(y,"LI",{});var n7=s(Un);YU=n(n7,"STRONG",{});var R$r=s(YU);Wze=r(R$r,"bert"),R$r.forEach(t),Qze=r(n7," \u2014 "),tx=n(n7,"A",{href:!0});var S$r=s(tx);Hze=r(S$r,"BertTokenizer"),S$r.forEach(t),Uze=r(n7," or "),ax=n(n7,"A",{href:!0});var P$r=s(ax);Jze=r(P$r,"BertTokenizerFast"),P$r.forEach(t),Yze=r(n7," (BERT model)"),n7.forEach(t),Kze=i(y),Ig=n(y,"LI",{});var kFe=s(Ig);KU=n(kFe,"STRONG",{});var $$r=s(KU);Zze=r($$r,"bert-generation"),$$r.forEach(t),eWe=r(kFe," \u2014 "),nx=n(kFe,"A",{href:!0});var I$r=s(nx);oWe=r(I$r,"BertGenerationTokenizer"),I$r.forEach(t),rWe=r(kFe," (Bert Generation model)"),kFe.forEach(t),tWe=i(y),Ng=n(y,"LI",{});var RFe=s(Ng);ZU=n(RFe,"STRONG",{});var N$r=s(ZU);aWe=r(N$r,"bert-japanese"),N$r.forEach(t),nWe=r(RFe," \u2014 "),sx=n(RFe,"A",{href:!0});var D$r=s(sx);sWe=r(D$r,"BertJapaneseTokenizer"),D$r.forEach(t),lWe=r(RFe," (BertJapanese model)"),RFe.forEach(t),iWe=i(y),Dg=n(y,"LI",{});var SFe=s(Dg);eJ=n(SFe,"STRONG",{});var j$r=s(eJ);dWe=r(j$r,"bertweet"),j$r.forEach(t),cWe=r(SFe," \u2014 "),lx=n(SFe,"A",{href:!0});var q$r=s(lx);fWe=r(q$r,"BertweetTokenizer"),q$r.forEach(t),mWe=r(SFe," (Bertweet model)"),SFe.forEach(t),gWe=i(y),Jn=n(y,"LI",{});var s7=s(Jn);oJ=n(s7,"STRONG",{});var G$r=s(oJ);hWe=r(G$r,"big_bird"),G$r.forEach(t),pWe=r(s7," \u2014 "),ix=n(s7,"A",{href:!0});var O$r=s(ix);_We=r(O$r,"BigBirdTokenizer"),O$r.forEach(t),uWe=r(s7," or "),dx=n(s7,"A",{href:!0});var X$r=s(dx);bWe=r(X$r,"BigBirdTokenizerFast"),X$r.forEach(t),vWe=r(s7," (BigBird model)"),s7.forEach(t),TWe=i(y),Yn=n(y,"LI",{});var l7=s(Yn);rJ=n(l7,"STRONG",{});var V$r=s(rJ);FWe=r(V$r,"bigbird_pegasus"),V$r.forEach(t),CWe=r(l7," \u2014 "),cx=n(l7,"A",{href:!0});var z$r=s(cx);MWe=r(z$r,"PegasusTokenizer"),z$r.forEach(t),EWe=r(l7," or "),fx=n(l7,"A",{href:!0});var W$r=s(fx);yWe=r(W$r,"PegasusTokenizerFast"),W$r.forEach(t),wWe=r(l7," (BigBirdPegasus model)"),l7.forEach(t),AWe=i(y),Kn=n(y,"LI",{});var i7=s(Kn);tJ=n(i7,"STRONG",{});var Q$r=s(tJ);LWe=r(Q$r,"blenderbot"),Q$r.forEach(t),BWe=r(i7," \u2014 "),mx=n(i7,"A",{href:!0});var H$r=s(mx);xWe=r(H$r,"BlenderbotTokenizer"),H$r.forEach(t),kWe=r(i7," or "),gx=n(i7,"A",{href:!0});var U$r=s(gx);RWe=r(U$r,"BlenderbotTokenizerFast"),U$r.forEach(t),SWe=r(i7," (Blenderbot model)"),i7.forEach(t),PWe=i(y),jg=n(y,"LI",{});var PFe=s(jg);aJ=n(PFe,"STRONG",{});var J$r=s(aJ);$We=r(J$r,"blenderbot-small"),J$r.forEach(t),IWe=r(PFe," \u2014 "),hx=n(PFe,"A",{href:!0});var Y$r=s(hx);NWe=r(Y$r,"BlenderbotSmallTokenizer"),Y$r.forEach(t),DWe=r(PFe," (BlenderbotSmall model)"),PFe.forEach(t),jWe=i(y),qg=n(y,"LI",{});var $Fe=s(qg);nJ=n($Fe,"STRONG",{});var K$r=s(nJ);qWe=r(K$r,"byt5"),K$r.forEach(t),GWe=r($Fe," \u2014 "),px=n($Fe,"A",{href:!0});var Z$r=s(px);OWe=r(Z$r,"ByT5Tokenizer"),Z$r.forEach(t),XWe=r($Fe," (ByT5 model)"),$Fe.forEach(t),VWe=i(y),Zn=n(y,"LI",{});var d7=s(Zn);sJ=n(d7,"STRONG",{});var eIr=s(sJ);zWe=r(eIr,"camembert"),eIr.forEach(t),WWe=r(d7," \u2014 "),_x=n(d7,"A",{href:!0});var oIr=s(_x);QWe=r(oIr,"CamembertTokenizer"),oIr.forEach(t),HWe=r(d7," or "),ux=n(d7,"A",{href:!0});var rIr=s(ux);UWe=r(rIr,"CamembertTokenizerFast"),rIr.forEach(t),JWe=r(d7," (CamemBERT model)"),d7.forEach(t),YWe=i(y),Gg=n(y,"LI",{});var IFe=s(Gg);lJ=n(IFe,"STRONG",{});var tIr=s(lJ);KWe=r(tIr,"canine"),tIr.forEach(t),ZWe=r(IFe," \u2014 "),bx=n(IFe,"A",{href:!0});var aIr=s(bx);eQe=r(aIr,"CanineTokenizer"),aIr.forEach(t),oQe=r(IFe," (Canine model)"),IFe.forEach(t),rQe=i(y),es=n(y,"LI",{});var c7=s(es);iJ=n(c7,"STRONG",{});var nIr=s(iJ);tQe=r(nIr,"clip"),nIr.forEach(t),aQe=r(c7," \u2014 "),vx=n(c7,"A",{href:!0});var sIr=s(vx);nQe=r(sIr,"CLIPTokenizer"),sIr.forEach(t),sQe=r(c7," or "),Tx=n(c7,"A",{href:!0});var lIr=s(Tx);lQe=r(lIr,"CLIPTokenizerFast"),lIr.forEach(t),iQe=r(c7," (CLIP model)"),c7.forEach(t),dQe=i(y),os=n(y,"LI",{});var f7=s(os);dJ=n(f7,"STRONG",{});var iIr=s(dJ);cQe=r(iIr,"convbert"),iIr.forEach(t),fQe=r(f7," \u2014 "),Fx=n(f7,"A",{href:!0});var dIr=s(Fx);mQe=r(dIr,"ConvBertTokenizer"),dIr.forEach(t),gQe=r(f7," or "),Cx=n(f7,"A",{href:!0});var cIr=s(Cx);hQe=r(cIr,"ConvBertTokenizerFast"),cIr.forEach(t),pQe=r(f7," (ConvBERT model)"),f7.forEach(t),_Qe=i(y),rs=n(y,"LI",{});var m7=s(rs);cJ=n(m7,"STRONG",{});var fIr=s(cJ);uQe=r(fIr,"cpm"),fIr.forEach(t),bQe=r(m7," \u2014 "),Mx=n(m7,"A",{href:!0});var mIr=s(Mx);vQe=r(mIr,"CpmTokenizer"),mIr.forEach(t),TQe=r(m7," or "),fJ=n(m7,"CODE",{});var gIr=s(fJ);FQe=r(gIr,"CpmTokenizerFast"),gIr.forEach(t),CQe=r(m7," (CPM model)"),m7.forEach(t),MQe=i(y),Og=n(y,"LI",{});var NFe=s(Og);mJ=n(NFe,"STRONG",{});var hIr=s(mJ);EQe=r(hIr,"ctrl"),hIr.forEach(t),yQe=r(NFe," \u2014 "),Ex=n(NFe,"A",{href:!0});var pIr=s(Ex);wQe=r(pIr,"CTRLTokenizer"),pIr.forEach(t),AQe=r(NFe," (CTRL model)"),NFe.forEach(t),LQe=i(y),ts=n(y,"LI",{});var g7=s(ts);gJ=n(g7,"STRONG",{});var _Ir=s(gJ);BQe=r(_Ir,"deberta"),_Ir.forEach(t),xQe=r(g7," \u2014 "),yx=n(g7,"A",{href:!0});var uIr=s(yx);kQe=r(uIr,"DebertaTokenizer"),uIr.forEach(t),RQe=r(g7," or "),wx=n(g7,"A",{href:!0});var bIr=s(wx);SQe=r(bIr,"DebertaTokenizerFast"),bIr.forEach(t),PQe=r(g7," (DeBERTa model)"),g7.forEach(t),$Qe=i(y),Xg=n(y,"LI",{});var DFe=s(Xg);hJ=n(DFe,"STRONG",{});var vIr=s(hJ);IQe=r(vIr,"deberta-v2"),vIr.forEach(t),NQe=r(DFe," \u2014 "),Ax=n(DFe,"A",{href:!0});var TIr=s(Ax);DQe=r(TIr,"DebertaV2Tokenizer"),TIr.forEach(t),jQe=r(DFe," (DeBERTa-v2 model)"),DFe.forEach(t),qQe=i(y),as=n(y,"LI",{});var h7=s(as);pJ=n(h7,"STRONG",{});var FIr=s(pJ);GQe=r(FIr,"distilbert"),FIr.forEach(t),OQe=r(h7," \u2014 "),Lx=n(h7,"A",{href:!0});var CIr=s(Lx);XQe=r(CIr,"DistilBertTokenizer"),CIr.forEach(t),VQe=r(h7," or "),Bx=n(h7,"A",{href:!0});var MIr=s(Bx);zQe=r(MIr,"DistilBertTokenizerFast"),MIr.forEach(t),WQe=r(h7," (DistilBERT model)"),h7.forEach(t),QQe=i(y),ns=n(y,"LI",{});var p7=s(ns);_J=n(p7,"STRONG",{});var EIr=s(_J);HQe=r(EIr,"dpr"),EIr.forEach(t),UQe=r(p7," \u2014 "),xx=n(p7,"A",{href:!0});var yIr=s(xx);JQe=r(yIr,"DPRQuestionEncoderTokenizer"),yIr.forEach(t),YQe=r(p7," or "),kx=n(p7,"A",{href:!0});var wIr=s(kx);KQe=r(wIr,"DPRQuestionEncoderTokenizerFast"),wIr.forEach(t),ZQe=r(p7," (DPR model)"),p7.forEach(t),eHe=i(y),ss=n(y,"LI",{});var _7=s(ss);uJ=n(_7,"STRONG",{});var AIr=s(uJ);oHe=r(AIr,"electra"),AIr.forEach(t),rHe=r(_7," \u2014 "),Rx=n(_7,"A",{href:!0});var LIr=s(Rx);tHe=r(LIr,"ElectraTokenizer"),LIr.forEach(t),aHe=r(_7," or "),Sx=n(_7,"A",{href:!0});var BIr=s(Sx);nHe=r(BIr,"ElectraTokenizerFast"),BIr.forEach(t),sHe=r(_7," (ELECTRA model)"),_7.forEach(t),lHe=i(y),Vg=n(y,"LI",{});var jFe=s(Vg);bJ=n(jFe,"STRONG",{});var xIr=s(bJ);iHe=r(xIr,"flaubert"),xIr.forEach(t),dHe=r(jFe," \u2014 "),Px=n(jFe,"A",{href:!0});var kIr=s(Px);cHe=r(kIr,"FlaubertTokenizer"),kIr.forEach(t),fHe=r(jFe," (FlauBERT model)"),jFe.forEach(t),mHe=i(y),ls=n(y,"LI",{});var u7=s(ls);vJ=n(u7,"STRONG",{});var RIr=s(vJ);gHe=r(RIr,"fnet"),RIr.forEach(t),hHe=r(u7," \u2014 "),$x=n(u7,"A",{href:!0});var SIr=s($x);pHe=r(SIr,"FNetTokenizer"),SIr.forEach(t),_He=r(u7," or "),Ix=n(u7,"A",{href:!0});var PIr=s(Ix);uHe=r(PIr,"FNetTokenizerFast"),PIr.forEach(t),bHe=r(u7," (FNet model)"),u7.forEach(t),vHe=i(y),zg=n(y,"LI",{});var qFe=s(zg);TJ=n(qFe,"STRONG",{});var $Ir=s(TJ);THe=r($Ir,"fsmt"),$Ir.forEach(t),FHe=r(qFe," \u2014 "),Nx=n(qFe,"A",{href:!0});var IIr=s(Nx);CHe=r(IIr,"FSMTTokenizer"),IIr.forEach(t),MHe=r(qFe," (FairSeq Machine-Translation model)"),qFe.forEach(t),EHe=i(y),is=n(y,"LI",{});var b7=s(is);FJ=n(b7,"STRONG",{});var NIr=s(FJ);yHe=r(NIr,"funnel"),NIr.forEach(t),wHe=r(b7," \u2014 "),Dx=n(b7,"A",{href:!0});var DIr=s(Dx);AHe=r(DIr,"FunnelTokenizer"),DIr.forEach(t),LHe=r(b7," or "),jx=n(b7,"A",{href:!0});var jIr=s(jx);BHe=r(jIr,"FunnelTokenizerFast"),jIr.forEach(t),xHe=r(b7," (Funnel Transformer model)"),b7.forEach(t),kHe=i(y),ds=n(y,"LI",{});var v7=s(ds);CJ=n(v7,"STRONG",{});var qIr=s(CJ);RHe=r(qIr,"gpt2"),qIr.forEach(t),SHe=r(v7," \u2014 "),qx=n(v7,"A",{href:!0});var GIr=s(qx);PHe=r(GIr,"GPT2Tokenizer"),GIr.forEach(t),$He=r(v7," or "),Gx=n(v7,"A",{href:!0});var OIr=s(Gx);IHe=r(OIr,"GPT2TokenizerFast"),OIr.forEach(t),NHe=r(v7," (OpenAI GPT-2 model)"),v7.forEach(t),DHe=i(y),cs=n(y,"LI",{});var T7=s(cs);MJ=n(T7,"STRONG",{});var XIr=s(MJ);jHe=r(XIr,"gpt_neo"),XIr.forEach(t),qHe=r(T7," \u2014 "),Ox=n(T7,"A",{href:!0});var VIr=s(Ox);GHe=r(VIr,"GPT2Tokenizer"),VIr.forEach(t),OHe=r(T7," or "),Xx=n(T7,"A",{href:!0});var zIr=s(Xx);XHe=r(zIr,"GPT2TokenizerFast"),zIr.forEach(t),VHe=r(T7," (GPT Neo model)"),T7.forEach(t),zHe=i(y),fs=n(y,"LI",{});var F7=s(fs);EJ=n(F7,"STRONG",{});var WIr=s(EJ);WHe=r(WIr,"herbert"),WIr.forEach(t),QHe=r(F7," \u2014 "),Vx=n(F7,"A",{href:!0});var QIr=s(Vx);HHe=r(QIr,"HerbertTokenizer"),QIr.forEach(t),UHe=r(F7," or "),zx=n(F7,"A",{href:!0});var HIr=s(zx);JHe=r(HIr,"HerbertTokenizerFast"),HIr.forEach(t),YHe=r(F7," (HerBERT model)"),F7.forEach(t),KHe=i(y),Wg=n(y,"LI",{});var GFe=s(Wg);yJ=n(GFe,"STRONG",{});var UIr=s(yJ);ZHe=r(UIr,"hubert"),UIr.forEach(t),eUe=r(GFe," \u2014 "),Wx=n(GFe,"A",{href:!0});var JIr=s(Wx);oUe=r(JIr,"Wav2Vec2CTCTokenizer"),JIr.forEach(t),rUe=r(GFe," (Hubert model)"),GFe.forEach(t),tUe=i(y),ms=n(y,"LI",{});var C7=s(ms);wJ=n(C7,"STRONG",{});var YIr=s(wJ);aUe=r(YIr,"ibert"),YIr.forEach(t),nUe=r(C7," \u2014 "),Qx=n(C7,"A",{href:!0});var KIr=s(Qx);sUe=r(KIr,"RobertaTokenizer"),KIr.forEach(t),lUe=r(C7," or "),Hx=n(C7,"A",{href:!0});var ZIr=s(Hx);iUe=r(ZIr,"RobertaTokenizerFast"),ZIr.forEach(t),dUe=r(C7," (I-BERT model)"),C7.forEach(t),cUe=i(y),gs=n(y,"LI",{});var M7=s(gs);AJ=n(M7,"STRONG",{});var eNr=s(AJ);fUe=r(eNr,"layoutlm"),eNr.forEach(t),mUe=r(M7," \u2014 "),Ux=n(M7,"A",{href:!0});var oNr=s(Ux);gUe=r(oNr,"LayoutLMTokenizer"),oNr.forEach(t),hUe=r(M7," or "),Jx=n(M7,"A",{href:!0});var rNr=s(Jx);pUe=r(rNr,"LayoutLMTokenizerFast"),rNr.forEach(t),_Ue=r(M7," (LayoutLM model)"),M7.forEach(t),uUe=i(y),hs=n(y,"LI",{});var E7=s(hs);LJ=n(E7,"STRONG",{});var tNr=s(LJ);bUe=r(tNr,"layoutlmv2"),tNr.forEach(t),vUe=r(E7," \u2014 "),Yx=n(E7,"A",{href:!0});var aNr=s(Yx);TUe=r(aNr,"LayoutLMv2Tokenizer"),aNr.forEach(t),FUe=r(E7," or "),Kx=n(E7,"A",{href:!0});var nNr=s(Kx);CUe=r(nNr,"LayoutLMv2TokenizerFast"),nNr.forEach(t),MUe=r(E7," (LayoutLMv2 model)"),E7.forEach(t),EUe=i(y),ps=n(y,"LI",{});var y7=s(ps);BJ=n(y7,"STRONG",{});var sNr=s(BJ);yUe=r(sNr,"layoutxlm"),sNr.forEach(t),wUe=r(y7," \u2014 "),Zx=n(y7,"A",{href:!0});var lNr=s(Zx);AUe=r(lNr,"LayoutXLMTokenizer"),lNr.forEach(t),LUe=r(y7," or "),ek=n(y7,"A",{href:!0});var iNr=s(ek);BUe=r(iNr,"LayoutXLMTokenizerFast"),iNr.forEach(t),xUe=r(y7," (LayoutXLM model)"),y7.forEach(t),kUe=i(y),_s=n(y,"LI",{});var w7=s(_s);xJ=n(w7,"STRONG",{});var dNr=s(xJ);RUe=r(dNr,"led"),dNr.forEach(t),SUe=r(w7," \u2014 "),ok=n(w7,"A",{href:!0});var cNr=s(ok);PUe=r(cNr,"LEDTokenizer"),cNr.forEach(t),$Ue=r(w7," or "),rk=n(w7,"A",{href:!0});var fNr=s(rk);IUe=r(fNr,"LEDTokenizerFast"),fNr.forEach(t),NUe=r(w7," (LED model)"),w7.forEach(t),DUe=i(y),us=n(y,"LI",{});var A7=s(us);kJ=n(A7,"STRONG",{});var mNr=s(kJ);jUe=r(mNr,"longformer"),mNr.forEach(t),qUe=r(A7," \u2014 "),tk=n(A7,"A",{href:!0});var gNr=s(tk);GUe=r(gNr,"LongformerTokenizer"),gNr.forEach(t),OUe=r(A7," or "),ak=n(A7,"A",{href:!0});var hNr=s(ak);XUe=r(hNr,"LongformerTokenizerFast"),hNr.forEach(t),VUe=r(A7," (Longformer model)"),A7.forEach(t),zUe=i(y),Qg=n(y,"LI",{});var OFe=s(Qg);RJ=n(OFe,"STRONG",{});var pNr=s(RJ);WUe=r(pNr,"luke"),pNr.forEach(t),QUe=r(OFe," \u2014 "),nk=n(OFe,"A",{href:!0});var _Nr=s(nk);HUe=r(_Nr,"LukeTokenizer"),_Nr.forEach(t),UUe=r(OFe," (LUKE model)"),OFe.forEach(t),JUe=i(y),bs=n(y,"LI",{});var L7=s(bs);SJ=n(L7,"STRONG",{});var uNr=s(SJ);YUe=r(uNr,"lxmert"),uNr.forEach(t),KUe=r(L7," \u2014 "),sk=n(L7,"A",{href:!0});var bNr=s(sk);ZUe=r(bNr,"LxmertTokenizer"),bNr.forEach(t),eJe=r(L7," or "),lk=n(L7,"A",{href:!0});var vNr=s(lk);oJe=r(vNr,"LxmertTokenizerFast"),vNr.forEach(t),rJe=r(L7," (LXMERT model)"),L7.forEach(t),tJe=i(y),Hg=n(y,"LI",{});var XFe=s(Hg);PJ=n(XFe,"STRONG",{});var TNr=s(PJ);aJe=r(TNr,"m2m_100"),TNr.forEach(t),nJe=r(XFe," \u2014 "),ik=n(XFe,"A",{href:!0});var FNr=s(ik);sJe=r(FNr,"M2M100Tokenizer"),FNr.forEach(t),lJe=r(XFe," (M2M100 model)"),XFe.forEach(t),iJe=i(y),Ug=n(y,"LI",{});var VFe=s(Ug);$J=n(VFe,"STRONG",{});var CNr=s($J);dJe=r(CNr,"marian"),CNr.forEach(t),cJe=r(VFe," \u2014 "),dk=n(VFe,"A",{href:!0});var MNr=s(dk);fJe=r(MNr,"MarianTokenizer"),MNr.forEach(t),mJe=r(VFe," (Marian model)"),VFe.forEach(t),gJe=i(y),vs=n(y,"LI",{});var B7=s(vs);IJ=n(B7,"STRONG",{});var ENr=s(IJ);hJe=r(ENr,"mbart"),ENr.forEach(t),pJe=r(B7," \u2014 "),ck=n(B7,"A",{href:!0});var yNr=s(ck);_Je=r(yNr,"MBartTokenizer"),yNr.forEach(t),uJe=r(B7," or "),fk=n(B7,"A",{href:!0});var wNr=s(fk);bJe=r(wNr,"MBartTokenizerFast"),wNr.forEach(t),vJe=r(B7," (mBART model)"),B7.forEach(t),TJe=i(y),Ts=n(y,"LI",{});var x7=s(Ts);NJ=n(x7,"STRONG",{});var ANr=s(NJ);FJe=r(ANr,"mbart50"),ANr.forEach(t),CJe=r(x7," \u2014 "),mk=n(x7,"A",{href:!0});var LNr=s(mk);MJe=r(LNr,"MBart50Tokenizer"),LNr.forEach(t),EJe=r(x7," or "),gk=n(x7,"A",{href:!0});var BNr=s(gk);yJe=r(BNr,"MBart50TokenizerFast"),BNr.forEach(t),wJe=r(x7," (mBART-50 model)"),x7.forEach(t),AJe=i(y),Jg=n(y,"LI",{});var zFe=s(Jg);DJ=n(zFe,"STRONG",{});var xNr=s(DJ);LJe=r(xNr,"mluke"),xNr.forEach(t),BJe=r(zFe," \u2014 "),hk=n(zFe,"A",{href:!0});var kNr=s(hk);xJe=r(kNr,"MLukeTokenizer"),kNr.forEach(t),kJe=r(zFe," (mLUKE model)"),zFe.forEach(t),RJe=i(y),Fs=n(y,"LI",{});var k7=s(Fs);jJ=n(k7,"STRONG",{});var RNr=s(jJ);SJe=r(RNr,"mobilebert"),RNr.forEach(t),PJe=r(k7," \u2014 "),pk=n(k7,"A",{href:!0});var SNr=s(pk);$Je=r(SNr,"MobileBertTokenizer"),SNr.forEach(t),IJe=r(k7," or "),_k=n(k7,"A",{href:!0});var PNr=s(_k);NJe=r(PNr,"MobileBertTokenizerFast"),PNr.forEach(t),DJe=r(k7," (MobileBERT model)"),k7.forEach(t),jJe=i(y),Cs=n(y,"LI",{});var R7=s(Cs);qJ=n(R7,"STRONG",{});var $Nr=s(qJ);qJe=r($Nr,"mpnet"),$Nr.forEach(t),GJe=r(R7," \u2014 "),uk=n(R7,"A",{href:!0});var INr=s(uk);OJe=r(INr,"MPNetTokenizer"),INr.forEach(t),XJe=r(R7," or "),bk=n(R7,"A",{href:!0});var NNr=s(bk);VJe=r(NNr,"MPNetTokenizerFast"),NNr.forEach(t),zJe=r(R7," (MPNet model)"),R7.forEach(t),WJe=i(y),Ms=n(y,"LI",{});var S7=s(Ms);GJ=n(S7,"STRONG",{});var DNr=s(GJ);QJe=r(DNr,"mt5"),DNr.forEach(t),HJe=r(S7," \u2014 "),vk=n(S7,"A",{href:!0});var jNr=s(vk);UJe=r(jNr,"MT5Tokenizer"),jNr.forEach(t),JJe=r(S7," or "),Tk=n(S7,"A",{href:!0});var qNr=s(Tk);YJe=r(qNr,"MT5TokenizerFast"),qNr.forEach(t),KJe=r(S7," (mT5 model)"),S7.forEach(t),ZJe=i(y),Es=n(y,"LI",{});var P7=s(Es);OJ=n(P7,"STRONG",{});var GNr=s(OJ);eYe=r(GNr,"openai-gpt"),GNr.forEach(t),oYe=r(P7," \u2014 "),Fk=n(P7,"A",{href:!0});var ONr=s(Fk);rYe=r(ONr,"OpenAIGPTTokenizer"),ONr.forEach(t),tYe=r(P7," or "),Ck=n(P7,"A",{href:!0});var XNr=s(Ck);aYe=r(XNr,"OpenAIGPTTokenizerFast"),XNr.forEach(t),nYe=r(P7," (OpenAI GPT model)"),P7.forEach(t),sYe=i(y),ys=n(y,"LI",{});var $7=s(ys);XJ=n($7,"STRONG",{});var VNr=s(XJ);lYe=r(VNr,"pegasus"),VNr.forEach(t),iYe=r($7," \u2014 "),Mk=n($7,"A",{href:!0});var zNr=s(Mk);dYe=r(zNr,"PegasusTokenizer"),zNr.forEach(t),cYe=r($7," or "),Ek=n($7,"A",{href:!0});var WNr=s(Ek);fYe=r(WNr,"PegasusTokenizerFast"),WNr.forEach(t),mYe=r($7," (Pegasus model)"),$7.forEach(t),gYe=i(y),Yg=n(y,"LI",{});var WFe=s(Yg);VJ=n(WFe,"STRONG",{});var QNr=s(VJ);hYe=r(QNr,"perceiver"),QNr.forEach(t),pYe=r(WFe," \u2014 "),yk=n(WFe,"A",{href:!0});var HNr=s(yk);_Ye=r(HNr,"PerceiverTokenizer"),HNr.forEach(t),uYe=r(WFe," (Perceiver model)"),WFe.forEach(t),bYe=i(y),Kg=n(y,"LI",{});var QFe=s(Kg);zJ=n(QFe,"STRONG",{});var UNr=s(zJ);vYe=r(UNr,"phobert"),UNr.forEach(t),TYe=r(QFe," \u2014 "),wk=n(QFe,"A",{href:!0});var JNr=s(wk);FYe=r(JNr,"PhobertTokenizer"),JNr.forEach(t),CYe=r(QFe," (PhoBERT model)"),QFe.forEach(t),MYe=i(y),Zg=n(y,"LI",{});var HFe=s(Zg);WJ=n(HFe,"STRONG",{});var YNr=s(WJ);EYe=r(YNr,"plbart"),YNr.forEach(t),yYe=r(HFe," \u2014 "),Ak=n(HFe,"A",{href:!0});var KNr=s(Ak);wYe=r(KNr,"PLBartTokenizer"),KNr.forEach(t),AYe=r(HFe," (PLBart model)"),HFe.forEach(t),LYe=i(y),eh=n(y,"LI",{});var UFe=s(eh);QJ=n(UFe,"STRONG",{});var ZNr=s(QJ);BYe=r(ZNr,"prophetnet"),ZNr.forEach(t),xYe=r(UFe," \u2014 "),Lk=n(UFe,"A",{href:!0});var eDr=s(Lk);kYe=r(eDr,"ProphetNetTokenizer"),eDr.forEach(t),RYe=r(UFe," (ProphetNet model)"),UFe.forEach(t),SYe=i(y),ws=n(y,"LI",{});var I7=s(ws);HJ=n(I7,"STRONG",{});var oDr=s(HJ);PYe=r(oDr,"qdqbert"),oDr.forEach(t),$Ye=r(I7," \u2014 "),Bk=n(I7,"A",{href:!0});var rDr=s(Bk);IYe=r(rDr,"BertTokenizer"),rDr.forEach(t),NYe=r(I7," or "),xk=n(I7,"A",{href:!0});var tDr=s(xk);DYe=r(tDr,"BertTokenizerFast"),tDr.forEach(t),jYe=r(I7," (QDQBert model)"),I7.forEach(t),qYe=i(y),oh=n(y,"LI",{});var JFe=s(oh);UJ=n(JFe,"STRONG",{});var aDr=s(UJ);GYe=r(aDr,"rag"),aDr.forEach(t),OYe=r(JFe," \u2014 "),kk=n(JFe,"A",{href:!0});var nDr=s(kk);XYe=r(nDr,"RagTokenizer"),nDr.forEach(t),VYe=r(JFe," (RAG model)"),JFe.forEach(t),zYe=i(y),As=n(y,"LI",{});var N7=s(As);JJ=n(N7,"STRONG",{});var sDr=s(JJ);WYe=r(sDr,"realm"),sDr.forEach(t),QYe=r(N7," \u2014 "),Rk=n(N7,"A",{href:!0});var lDr=s(Rk);HYe=r(lDr,"RealmTokenizer"),lDr.forEach(t),UYe=r(N7," or "),Sk=n(N7,"A",{href:!0});var iDr=s(Sk);JYe=r(iDr,"RealmTokenizerFast"),iDr.forEach(t),YYe=r(N7," (Realm model)"),N7.forEach(t),KYe=i(y),Ls=n(y,"LI",{});var D7=s(Ls);YJ=n(D7,"STRONG",{});var dDr=s(YJ);ZYe=r(dDr,"reformer"),dDr.forEach(t),eKe=r(D7," \u2014 "),Pk=n(D7,"A",{href:!0});var cDr=s(Pk);oKe=r(cDr,"ReformerTokenizer"),cDr.forEach(t),rKe=r(D7," or "),$k=n(D7,"A",{href:!0});var fDr=s($k);tKe=r(fDr,"ReformerTokenizerFast"),fDr.forEach(t),aKe=r(D7," (Reformer model)"),D7.forEach(t),nKe=i(y),Bs=n(y,"LI",{});var j7=s(Bs);KJ=n(j7,"STRONG",{});var mDr=s(KJ);sKe=r(mDr,"rembert"),mDr.forEach(t),lKe=r(j7," \u2014 "),Ik=n(j7,"A",{href:!0});var gDr=s(Ik);iKe=r(gDr,"RemBertTokenizer"),gDr.forEach(t),dKe=r(j7," or "),Nk=n(j7,"A",{href:!0});var hDr=s(Nk);cKe=r(hDr,"RemBertTokenizerFast"),hDr.forEach(t),fKe=r(j7," (RemBERT model)"),j7.forEach(t),mKe=i(y),xs=n(y,"LI",{});var q7=s(xs);ZJ=n(q7,"STRONG",{});var pDr=s(ZJ);gKe=r(pDr,"retribert"),pDr.forEach(t),hKe=r(q7," \u2014 "),Dk=n(q7,"A",{href:!0});var _Dr=s(Dk);pKe=r(_Dr,"RetriBertTokenizer"),_Dr.forEach(t),_Ke=r(q7," or "),jk=n(q7,"A",{href:!0});var uDr=s(jk);uKe=r(uDr,"RetriBertTokenizerFast"),uDr.forEach(t),bKe=r(q7," (RetriBERT model)"),q7.forEach(t),vKe=i(y),ks=n(y,"LI",{});var G7=s(ks);eY=n(G7,"STRONG",{});var bDr=s(eY);TKe=r(bDr,"roberta"),bDr.forEach(t),FKe=r(G7," \u2014 "),qk=n(G7,"A",{href:!0});var vDr=s(qk);CKe=r(vDr,"RobertaTokenizer"),vDr.forEach(t),MKe=r(G7," or "),Gk=n(G7,"A",{href:!0});var TDr=s(Gk);EKe=r(TDr,"RobertaTokenizerFast"),TDr.forEach(t),yKe=r(G7," (RoBERTa model)"),G7.forEach(t),wKe=i(y),Rs=n(y,"LI",{});var O7=s(Rs);oY=n(O7,"STRONG",{});var FDr=s(oY);AKe=r(FDr,"roformer"),FDr.forEach(t),LKe=r(O7," \u2014 "),Ok=n(O7,"A",{href:!0});var CDr=s(Ok);BKe=r(CDr,"RoFormerTokenizer"),CDr.forEach(t),xKe=r(O7," or "),Xk=n(O7,"A",{href:!0});var MDr=s(Xk);kKe=r(MDr,"RoFormerTokenizerFast"),MDr.forEach(t),RKe=r(O7," (RoFormer model)"),O7.forEach(t),SKe=i(y),rh=n(y,"LI",{});var YFe=s(rh);rY=n(YFe,"STRONG",{});var EDr=s(rY);PKe=r(EDr,"speech_to_text"),EDr.forEach(t),$Ke=r(YFe," \u2014 "),Vk=n(YFe,"A",{href:!0});var yDr=s(Vk);IKe=r(yDr,"Speech2TextTokenizer"),yDr.forEach(t),NKe=r(YFe," (Speech2Text model)"),YFe.forEach(t),DKe=i(y),th=n(y,"LI",{});var KFe=s(th);tY=n(KFe,"STRONG",{});var wDr=s(tY);jKe=r(wDr,"speech_to_text_2"),wDr.forEach(t),qKe=r(KFe," \u2014 "),zk=n(KFe,"A",{href:!0});var ADr=s(zk);GKe=r(ADr,"Speech2Text2Tokenizer"),ADr.forEach(t),OKe=r(KFe," (Speech2Text2 model)"),KFe.forEach(t),XKe=i(y),Ss=n(y,"LI",{});var X7=s(Ss);aY=n(X7,"STRONG",{});var LDr=s(aY);VKe=r(LDr,"splinter"),LDr.forEach(t),zKe=r(X7," \u2014 "),Wk=n(X7,"A",{href:!0});var BDr=s(Wk);WKe=r(BDr,"SplinterTokenizer"),BDr.forEach(t),QKe=r(X7," or "),Qk=n(X7,"A",{href:!0});var xDr=s(Qk);HKe=r(xDr,"SplinterTokenizerFast"),xDr.forEach(t),UKe=r(X7," (Splinter model)"),X7.forEach(t),JKe=i(y),Ps=n(y,"LI",{});var V7=s(Ps);nY=n(V7,"STRONG",{});var kDr=s(nY);YKe=r(kDr,"squeezebert"),kDr.forEach(t),KKe=r(V7," \u2014 "),Hk=n(V7,"A",{href:!0});var RDr=s(Hk);ZKe=r(RDr,"SqueezeBertTokenizer"),RDr.forEach(t),eZe=r(V7," or "),Uk=n(V7,"A",{href:!0});var SDr=s(Uk);oZe=r(SDr,"SqueezeBertTokenizerFast"),SDr.forEach(t),rZe=r(V7," (SqueezeBERT model)"),V7.forEach(t),tZe=i(y),$s=n(y,"LI",{});var z7=s($s);sY=n(z7,"STRONG",{});var PDr=s(sY);aZe=r(PDr,"t5"),PDr.forEach(t),nZe=r(z7," \u2014 "),Jk=n(z7,"A",{href:!0});var $Dr=s(Jk);sZe=r($Dr,"T5Tokenizer"),$Dr.forEach(t),lZe=r(z7," or "),Yk=n(z7,"A",{href:!0});var IDr=s(Yk);iZe=r(IDr,"T5TokenizerFast"),IDr.forEach(t),dZe=r(z7," (T5 model)"),z7.forEach(t),cZe=i(y),ah=n(y,"LI",{});var ZFe=s(ah);lY=n(ZFe,"STRONG",{});var NDr=s(lY);fZe=r(NDr,"tapas"),NDr.forEach(t),mZe=r(ZFe," \u2014 "),Kk=n(ZFe,"A",{href:!0});var DDr=s(Kk);gZe=r(DDr,"TapasTokenizer"),DDr.forEach(t),hZe=r(ZFe," (TAPAS model)"),ZFe.forEach(t),pZe=i(y),nh=n(y,"LI",{});var eCe=s(nh);iY=n(eCe,"STRONG",{});var jDr=s(iY);_Ze=r(jDr,"transfo-xl"),jDr.forEach(t),uZe=r(eCe," \u2014 "),Zk=n(eCe,"A",{href:!0});var qDr=s(Zk);bZe=r(qDr,"TransfoXLTokenizer"),qDr.forEach(t),vZe=r(eCe," (Transformer-XL model)"),eCe.forEach(t),TZe=i(y),sh=n(y,"LI",{});var oCe=s(sh);dY=n(oCe,"STRONG",{});var GDr=s(dY);FZe=r(GDr,"wav2vec2"),GDr.forEach(t),CZe=r(oCe," \u2014 "),eR=n(oCe,"A",{href:!0});var ODr=s(eR);MZe=r(ODr,"Wav2Vec2CTCTokenizer"),ODr.forEach(t),EZe=r(oCe," (Wav2Vec2 model)"),oCe.forEach(t),yZe=i(y),lh=n(y,"LI",{});var rCe=s(lh);cY=n(rCe,"STRONG",{});var XDr=s(cY);wZe=r(XDr,"wav2vec2_phoneme"),XDr.forEach(t),AZe=r(rCe," \u2014 "),oR=n(rCe,"A",{href:!0});var VDr=s(oR);LZe=r(VDr,"Wav2Vec2PhonemeCTCTokenizer"),VDr.forEach(t),BZe=r(rCe," (Wav2Vec2Phoneme model)"),rCe.forEach(t),xZe=i(y),Is=n(y,"LI",{});var W7=s(Is);fY=n(W7,"STRONG",{});var zDr=s(fY);kZe=r(zDr,"xglm"),zDr.forEach(t),RZe=r(W7," \u2014 "),rR=n(W7,"A",{href:!0});var WDr=s(rR);SZe=r(WDr,"XGLMTokenizer"),WDr.forEach(t),PZe=r(W7," or "),tR=n(W7,"A",{href:!0});var QDr=s(tR);$Ze=r(QDr,"XGLMTokenizerFast"),QDr.forEach(t),IZe=r(W7," (XGLM model)"),W7.forEach(t),NZe=i(y),ih=n(y,"LI",{});var tCe=s(ih);mY=n(tCe,"STRONG",{});var HDr=s(mY);DZe=r(HDr,"xlm"),HDr.forEach(t),jZe=r(tCe," \u2014 "),aR=n(tCe,"A",{href:!0});var UDr=s(aR);qZe=r(UDr,"XLMTokenizer"),UDr.forEach(t),GZe=r(tCe," (XLM model)"),tCe.forEach(t),OZe=i(y),dh=n(y,"LI",{});var aCe=s(dh);gY=n(aCe,"STRONG",{});var JDr=s(gY);XZe=r(JDr,"xlm-prophetnet"),JDr.forEach(t),VZe=r(aCe," \u2014 "),nR=n(aCe,"A",{href:!0});var YDr=s(nR);zZe=r(YDr,"XLMProphetNetTokenizer"),YDr.forEach(t),WZe=r(aCe," (XLMProphetNet model)"),aCe.forEach(t),QZe=i(y),Ns=n(y,"LI",{});var Q7=s(Ns);hY=n(Q7,"STRONG",{});var KDr=s(hY);HZe=r(KDr,"xlm-roberta"),KDr.forEach(t),UZe=r(Q7," \u2014 "),sR=n(Q7,"A",{href:!0});var ZDr=s(sR);JZe=r(ZDr,"XLMRobertaTokenizer"),ZDr.forEach(t),YZe=r(Q7," or "),lR=n(Q7,"A",{href:!0});var ejr=s(lR);KZe=r(ejr,"XLMRobertaTokenizerFast"),ejr.forEach(t),ZZe=r(Q7," (XLM-RoBERTa model)"),Q7.forEach(t),eeo=i(y),Ds=n(y,"LI",{});var H7=s(Ds);pY=n(H7,"STRONG",{});var ojr=s(pY);oeo=r(ojr,"xlnet"),ojr.forEach(t),reo=r(H7," \u2014 "),iR=n(H7,"A",{href:!0});var rjr=s(iR);teo=r(rjr,"XLNetTokenizer"),rjr.forEach(t),aeo=r(H7," or "),dR=n(H7,"A",{href:!0});var tjr=s(dR);neo=r(tjr,"XLNetTokenizerFast"),tjr.forEach(t),seo=r(H7," (XLNet model)"),H7.forEach(t),y.forEach(t),leo=i(ha),_Y=n(ha,"P",{});var ajr=s(_Y);ieo=r(ajr,"Examples:"),ajr.forEach(t),deo=i(ha),m(ME.$$.fragment,ha),ha.forEach(t),ceo=i(Xs),ch=n(Xs,"DIV",{class:!0});var gSe=s(ch);m(EE.$$.fragment,gSe),feo=i(gSe),uY=n(gSe,"P",{});var njr=s(uY);meo=r(njr,"Register a new tokenizer in this mapping."),njr.forEach(t),gSe.forEach(t),Xs.forEach(t),dke=i(c),Qi=n(c,"H2",{class:!0});var hSe=s(Qi);fh=n(hSe,"A",{id:!0,class:!0,href:!0});var sjr=s(fh);bY=n(sjr,"SPAN",{});var ljr=s(bY);m(yE.$$.fragment,ljr),ljr.forEach(t),sjr.forEach(t),geo=i(hSe),vY=n(hSe,"SPAN",{});var ijr=s(vY);heo=r(ijr,"AutoFeatureExtractor"),ijr.forEach(t),hSe.forEach(t),cke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(wE.$$.fragment,Vs),peo=i(Vs),AE=n(Vs,"P",{});var pSe=s(AE);_eo=r(pSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cR=n(pSe,"A",{href:!0});var djr=s(cR);ueo=r(djr,"AutoFeatureExtractor.from_pretrained()"),djr.forEach(t),beo=r(pSe," class method."),pSe.forEach(t),veo=i(Vs),LE=n(Vs,"P",{});var _Se=s(LE);Teo=r(_Se,"This class cannot be instantiated directly using "),TY=n(_Se,"CODE",{});var cjr=s(TY);Feo=r(cjr,"__init__()"),cjr.forEach(t),Ceo=r(_Se," (throws an error)."),_Se.forEach(t),Meo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(BE.$$.fragment,Dt),Eeo=i(Dt),FY=n(Dt,"P",{});var fjr=s(FY);yeo=r(fjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fjr.forEach(t),weo=i(Dt),Xa=n(Dt,"P",{});var i4=s(Xa);Aeo=r(i4,"The feature extractor class to instantiate is selected based on the "),CY=n(i4,"CODE",{});var mjr=s(CY);Leo=r(mjr,"model_type"),mjr.forEach(t),Beo=r(i4,` property of the config object
(either passed as an argument or loaded from `),MY=n(i4,"CODE",{});var gjr=s(MY);xeo=r(gjr,"pretrained_model_name_or_path"),gjr.forEach(t),keo=r(i4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),EY=n(i4,"CODE",{});var hjr=s(EY);Reo=r(hjr,"pretrained_model_name_or_path"),hjr.forEach(t),Seo=r(i4,":"),i4.forEach(t),Peo=i(Dt),re=n(Dt,"UL",{});var ne=s(re);mh=n(ne,"LI",{});var nCe=s(mh);yY=n(nCe,"STRONG",{});var pjr=s(yY);$eo=r(pjr,"beit"),pjr.forEach(t),Ieo=r(nCe," \u2014 "),fR=n(nCe,"A",{href:!0});var _jr=s(fR);Neo=r(_jr,"BeitFeatureExtractor"),_jr.forEach(t),Deo=r(nCe," (BEiT model)"),nCe.forEach(t),jeo=i(ne),gh=n(ne,"LI",{});var sCe=s(gh);wY=n(sCe,"STRONG",{});var ujr=s(wY);qeo=r(ujr,"clip"),ujr.forEach(t),Geo=r(sCe," \u2014 "),mR=n(sCe,"A",{href:!0});var bjr=s(mR);Oeo=r(bjr,"CLIPFeatureExtractor"),bjr.forEach(t),Xeo=r(sCe," (CLIP model)"),sCe.forEach(t),Veo=i(ne),hh=n(ne,"LI",{});var lCe=s(hh);AY=n(lCe,"STRONG",{});var vjr=s(AY);zeo=r(vjr,"convnext"),vjr.forEach(t),Weo=r(lCe," \u2014 "),gR=n(lCe,"A",{href:!0});var Tjr=s(gR);Qeo=r(Tjr,"ConvNextFeatureExtractor"),Tjr.forEach(t),Heo=r(lCe," (ConvNext model)"),lCe.forEach(t),Ueo=i(ne),ph=n(ne,"LI",{});var iCe=s(ph);LY=n(iCe,"STRONG",{});var Fjr=s(LY);Jeo=r(Fjr,"deit"),Fjr.forEach(t),Yeo=r(iCe," \u2014 "),hR=n(iCe,"A",{href:!0});var Cjr=s(hR);Keo=r(Cjr,"DeiTFeatureExtractor"),Cjr.forEach(t),Zeo=r(iCe," (DeiT model)"),iCe.forEach(t),eoo=i(ne),_h=n(ne,"LI",{});var dCe=s(_h);BY=n(dCe,"STRONG",{});var Mjr=s(BY);ooo=r(Mjr,"detr"),Mjr.forEach(t),roo=r(dCe," \u2014 "),pR=n(dCe,"A",{href:!0});var Ejr=s(pR);too=r(Ejr,"DetrFeatureExtractor"),Ejr.forEach(t),aoo=r(dCe," (DETR model)"),dCe.forEach(t),noo=i(ne),uh=n(ne,"LI",{});var cCe=s(uh);xY=n(cCe,"STRONG",{});var yjr=s(xY);soo=r(yjr,"hubert"),yjr.forEach(t),loo=r(cCe," \u2014 "),_R=n(cCe,"A",{href:!0});var wjr=s(_R);ioo=r(wjr,"Wav2Vec2FeatureExtractor"),wjr.forEach(t),doo=r(cCe," (Hubert model)"),cCe.forEach(t),coo=i(ne),bh=n(ne,"LI",{});var fCe=s(bh);kY=n(fCe,"STRONG",{});var Ajr=s(kY);foo=r(Ajr,"layoutlmv2"),Ajr.forEach(t),moo=r(fCe," \u2014 "),uR=n(fCe,"A",{href:!0});var Ljr=s(uR);goo=r(Ljr,"LayoutLMv2FeatureExtractor"),Ljr.forEach(t),hoo=r(fCe," (LayoutLMv2 model)"),fCe.forEach(t),poo=i(ne),vh=n(ne,"LI",{});var mCe=s(vh);RY=n(mCe,"STRONG",{});var Bjr=s(RY);_oo=r(Bjr,"maskformer"),Bjr.forEach(t),uoo=r(mCe," \u2014 "),bR=n(mCe,"A",{href:!0});var xjr=s(bR);boo=r(xjr,"MaskFormerFeatureExtractor"),xjr.forEach(t),voo=r(mCe," (MaskFormer model)"),mCe.forEach(t),Too=i(ne),Th=n(ne,"LI",{});var gCe=s(Th);SY=n(gCe,"STRONG",{});var kjr=s(SY);Foo=r(kjr,"perceiver"),kjr.forEach(t),Coo=r(gCe," \u2014 "),vR=n(gCe,"A",{href:!0});var Rjr=s(vR);Moo=r(Rjr,"PerceiverFeatureExtractor"),Rjr.forEach(t),Eoo=r(gCe," (Perceiver model)"),gCe.forEach(t),yoo=i(ne),Fh=n(ne,"LI",{});var hCe=s(Fh);PY=n(hCe,"STRONG",{});var Sjr=s(PY);woo=r(Sjr,"poolformer"),Sjr.forEach(t),Aoo=r(hCe," \u2014 "),TR=n(hCe,"A",{href:!0});var Pjr=s(TR);Loo=r(Pjr,"PoolFormerFeatureExtractor"),Pjr.forEach(t),Boo=r(hCe," (PoolFormer model)"),hCe.forEach(t),xoo=i(ne),Ch=n(ne,"LI",{});var pCe=s(Ch);$Y=n(pCe,"STRONG",{});var $jr=s($Y);koo=r($jr,"resnet"),$jr.forEach(t),Roo=r(pCe," \u2014 "),FR=n(pCe,"A",{href:!0});var Ijr=s(FR);Soo=r(Ijr,"ConvNextFeatureExtractor"),Ijr.forEach(t),Poo=r(pCe," (ResNet model)"),pCe.forEach(t),$oo=i(ne),Mh=n(ne,"LI",{});var _Ce=s(Mh);IY=n(_Ce,"STRONG",{});var Njr=s(IY);Ioo=r(Njr,"segformer"),Njr.forEach(t),Noo=r(_Ce," \u2014 "),CR=n(_Ce,"A",{href:!0});var Djr=s(CR);Doo=r(Djr,"SegformerFeatureExtractor"),Djr.forEach(t),joo=r(_Ce," (SegFormer model)"),_Ce.forEach(t),qoo=i(ne),Eh=n(ne,"LI",{});var uCe=s(Eh);NY=n(uCe,"STRONG",{});var jjr=s(NY);Goo=r(jjr,"speech_to_text"),jjr.forEach(t),Ooo=r(uCe," \u2014 "),MR=n(uCe,"A",{href:!0});var qjr=s(MR);Xoo=r(qjr,"Speech2TextFeatureExtractor"),qjr.forEach(t),Voo=r(uCe," (Speech2Text model)"),uCe.forEach(t),zoo=i(ne),yh=n(ne,"LI",{});var bCe=s(yh);DY=n(bCe,"STRONG",{});var Gjr=s(DY);Woo=r(Gjr,"swin"),Gjr.forEach(t),Qoo=r(bCe," \u2014 "),ER=n(bCe,"A",{href:!0});var Ojr=s(ER);Hoo=r(Ojr,"ViTFeatureExtractor"),Ojr.forEach(t),Uoo=r(bCe," (Swin model)"),bCe.forEach(t),Joo=i(ne),wh=n(ne,"LI",{});var vCe=s(wh);jY=n(vCe,"STRONG",{});var Xjr=s(jY);Yoo=r(Xjr,"van"),Xjr.forEach(t),Koo=r(vCe," \u2014 "),yR=n(vCe,"A",{href:!0});var Vjr=s(yR);Zoo=r(Vjr,"ConvNextFeatureExtractor"),Vjr.forEach(t),ero=r(vCe," (VAN model)"),vCe.forEach(t),oro=i(ne),Ah=n(ne,"LI",{});var TCe=s(Ah);qY=n(TCe,"STRONG",{});var zjr=s(qY);rro=r(zjr,"vit"),zjr.forEach(t),tro=r(TCe," \u2014 "),wR=n(TCe,"A",{href:!0});var Wjr=s(wR);aro=r(Wjr,"ViTFeatureExtractor"),Wjr.forEach(t),nro=r(TCe," (ViT model)"),TCe.forEach(t),sro=i(ne),Lh=n(ne,"LI",{});var FCe=s(Lh);GY=n(FCe,"STRONG",{});var Qjr=s(GY);lro=r(Qjr,"vit_mae"),Qjr.forEach(t),iro=r(FCe," \u2014 "),AR=n(FCe,"A",{href:!0});var Hjr=s(AR);dro=r(Hjr,"ViTFeatureExtractor"),Hjr.forEach(t),cro=r(FCe," (ViTMAE model)"),FCe.forEach(t),fro=i(ne),Bh=n(ne,"LI",{});var CCe=s(Bh);OY=n(CCe,"STRONG",{});var Ujr=s(OY);mro=r(Ujr,"wav2vec2"),Ujr.forEach(t),gro=r(CCe," \u2014 "),LR=n(CCe,"A",{href:!0});var Jjr=s(LR);hro=r(Jjr,"Wav2Vec2FeatureExtractor"),Jjr.forEach(t),pro=r(CCe," (Wav2Vec2 model)"),CCe.forEach(t),ne.forEach(t),_ro=i(Dt),m(xh.$$.fragment,Dt),uro=i(Dt),XY=n(Dt,"P",{});var Yjr=s(XY);bro=r(Yjr,"Examples:"),Yjr.forEach(t),vro=i(Dt),m(xE.$$.fragment,Dt),Dt.forEach(t),Tro=i(Vs),kh=n(Vs,"DIV",{class:!0});var uSe=s(kh);m(kE.$$.fragment,uSe),Fro=i(uSe),VY=n(uSe,"P",{});var Kjr=s(VY);Cro=r(Kjr,"Register a new feature extractor for this class."),Kjr.forEach(t),uSe.forEach(t),Vs.forEach(t),fke=i(c),Hi=n(c,"H2",{class:!0});var bSe=s(Hi);Rh=n(bSe,"A",{id:!0,class:!0,href:!0});var Zjr=s(Rh);zY=n(Zjr,"SPAN",{});var eqr=s(zY);m(RE.$$.fragment,eqr),eqr.forEach(t),Zjr.forEach(t),Mro=i(bSe),WY=n(bSe,"SPAN",{});var oqr=s(WY);Ero=r(oqr,"AutoProcessor"),oqr.forEach(t),bSe.forEach(t),mke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(SE.$$.fragment,zs),yro=i(zs),PE=n(zs,"P",{});var vSe=s(PE);wro=r(vSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BR=n(vSe,"A",{href:!0});var rqr=s(BR);Aro=r(rqr,"AutoProcessor.from_pretrained()"),rqr.forEach(t),Lro=r(vSe," class method."),vSe.forEach(t),Bro=i(zs),$E=n(zs,"P",{});var TSe=s($E);xro=r(TSe,"This class cannot be instantiated directly using "),QY=n(TSe,"CODE",{});var tqr=s(QY);kro=r(tqr,"__init__()"),tqr.forEach(t),Rro=r(TSe," (throws an error)."),TSe.forEach(t),Sro=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(IE.$$.fragment,jt),Pro=i(jt),HY=n(jt,"P",{});var aqr=s(HY);$ro=r(aqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aqr.forEach(t),Iro=i(jt),Ui=n(jt,"P",{});var Hz=s(Ui);Nro=r(Hz,"The processor class to instantiate is selected based on the "),UY=n(Hz,"CODE",{});var nqr=s(UY);Dro=r(nqr,"model_type"),nqr.forEach(t),jro=r(Hz,` property of the config object (either
passed as an argument or loaded from `),JY=n(Hz,"CODE",{});var sqr=s(JY);qro=r(sqr,"pretrained_model_name_or_path"),sqr.forEach(t),Gro=r(Hz," if possible):"),Hz.forEach(t),Oro=i(jt),xe=n(jt,"UL",{});var jo=s(xe);Sh=n(jo,"LI",{});var MCe=s(Sh);YY=n(MCe,"STRONG",{});var lqr=s(YY);Xro=r(lqr,"clip"),lqr.forEach(t),Vro=r(MCe," \u2014 "),xR=n(MCe,"A",{href:!0});var iqr=s(xR);zro=r(iqr,"CLIPProcessor"),iqr.forEach(t),Wro=r(MCe," (CLIP model)"),MCe.forEach(t),Qro=i(jo),Ph=n(jo,"LI",{});var ECe=s(Ph);KY=n(ECe,"STRONG",{});var dqr=s(KY);Hro=r(dqr,"layoutlmv2"),dqr.forEach(t),Uro=r(ECe," \u2014 "),kR=n(ECe,"A",{href:!0});var cqr=s(kR);Jro=r(cqr,"LayoutLMv2Processor"),cqr.forEach(t),Yro=r(ECe," (LayoutLMv2 model)"),ECe.forEach(t),Kro=i(jo),$h=n(jo,"LI",{});var yCe=s($h);ZY=n(yCe,"STRONG",{});var fqr=s(ZY);Zro=r(fqr,"layoutxlm"),fqr.forEach(t),eto=r(yCe," \u2014 "),RR=n(yCe,"A",{href:!0});var mqr=s(RR);oto=r(mqr,"LayoutXLMProcessor"),mqr.forEach(t),rto=r(yCe," (LayoutXLM model)"),yCe.forEach(t),tto=i(jo),Ih=n(jo,"LI",{});var wCe=s(Ih);eK=n(wCe,"STRONG",{});var gqr=s(eK);ato=r(gqr,"speech_to_text"),gqr.forEach(t),nto=r(wCe," \u2014 "),SR=n(wCe,"A",{href:!0});var hqr=s(SR);sto=r(hqr,"Speech2TextProcessor"),hqr.forEach(t),lto=r(wCe," (Speech2Text model)"),wCe.forEach(t),ito=i(jo),Nh=n(jo,"LI",{});var ACe=s(Nh);oK=n(ACe,"STRONG",{});var pqr=s(oK);dto=r(pqr,"speech_to_text_2"),pqr.forEach(t),cto=r(ACe," \u2014 "),PR=n(ACe,"A",{href:!0});var _qr=s(PR);fto=r(_qr,"Speech2Text2Processor"),_qr.forEach(t),mto=r(ACe," (Speech2Text2 model)"),ACe.forEach(t),gto=i(jo),Dh=n(jo,"LI",{});var LCe=s(Dh);rK=n(LCe,"STRONG",{});var uqr=s(rK);hto=r(uqr,"trocr"),uqr.forEach(t),pto=r(LCe," \u2014 "),$R=n(LCe,"A",{href:!0});var bqr=s($R);_to=r(bqr,"TrOCRProcessor"),bqr.forEach(t),uto=r(LCe," (TrOCR model)"),LCe.forEach(t),bto=i(jo),jh=n(jo,"LI",{});var BCe=s(jh);tK=n(BCe,"STRONG",{});var vqr=s(tK);vto=r(vqr,"vision-text-dual-encoder"),vqr.forEach(t),Tto=r(BCe," \u2014 "),IR=n(BCe,"A",{href:!0});var Tqr=s(IR);Fto=r(Tqr,"VisionTextDualEncoderProcessor"),Tqr.forEach(t),Cto=r(BCe," (VisionTextDualEncoder model)"),BCe.forEach(t),Mto=i(jo),qh=n(jo,"LI",{});var xCe=s(qh);aK=n(xCe,"STRONG",{});var Fqr=s(aK);Eto=r(Fqr,"wav2vec2"),Fqr.forEach(t),yto=r(xCe," \u2014 "),NR=n(xCe,"A",{href:!0});var Cqr=s(NR);wto=r(Cqr,"Wav2Vec2Processor"),Cqr.forEach(t),Ato=r(xCe," (Wav2Vec2 model)"),xCe.forEach(t),jo.forEach(t),Lto=i(jt),m(Gh.$$.fragment,jt),Bto=i(jt),nK=n(jt,"P",{});var Mqr=s(nK);xto=r(Mqr,"Examples:"),Mqr.forEach(t),kto=i(jt),m(NE.$$.fragment,jt),jt.forEach(t),Rto=i(zs),Oh=n(zs,"DIV",{class:!0});var FSe=s(Oh);m(DE.$$.fragment,FSe),Sto=i(FSe),sK=n(FSe,"P",{});var Eqr=s(sK);Pto=r(Eqr,"Register a new processor for this class."),Eqr.forEach(t),FSe.forEach(t),zs.forEach(t),gke=i(c),Ji=n(c,"H2",{class:!0});var CSe=s(Ji);Xh=n(CSe,"A",{id:!0,class:!0,href:!0});var yqr=s(Xh);lK=n(yqr,"SPAN",{});var wqr=s(lK);m(jE.$$.fragment,wqr),wqr.forEach(t),yqr.forEach(t),$to=i(CSe),iK=n(CSe,"SPAN",{});var Aqr=s(iK);Ito=r(Aqr,"AutoModel"),Aqr.forEach(t),CSe.forEach(t),hke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(qE.$$.fragment,Ws),Nto=i(Ws),Yi=n(Ws,"P",{});var Uz=s(Yi);Dto=r(Uz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dK=n(Uz,"CODE",{});var Lqr=s(dK);jto=r(Lqr,"from_pretrained()"),Lqr.forEach(t),qto=r(Uz,"class method or the "),cK=n(Uz,"CODE",{});var Bqr=s(cK);Gto=r(Bqr,"from_config()"),Bqr.forEach(t),Oto=r(Uz,`class
method.`),Uz.forEach(t),Xto=i(Ws),GE=n(Ws,"P",{});var MSe=s(GE);Vto=r(MSe,"This class cannot be instantiated directly using "),fK=n(MSe,"CODE",{});var xqr=s(fK);zto=r(xqr,"__init__()"),xqr.forEach(t),Wto=r(MSe," (throws an error)."),MSe.forEach(t),Qto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(OE.$$.fragment,Qs),Hto=i(Qs),mK=n(Qs,"P",{});var kqr=s(mK);Uto=r(kqr,"Instantiates one of the base model classes of the library from a configuration."),kqr.forEach(t),Jto=i(Qs),Ki=n(Qs,"P",{});var Jz=s(Ki);Yto=r(Jz,`Note:
Loading a model from its configuration file does `),gK=n(Jz,"STRONG",{});var Rqr=s(gK);Kto=r(Rqr,"not"),Rqr.forEach(t),Zto=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Jz,"CODE",{});var Sqr=s(hK);eao=r(Sqr,"from_pretrained()"),Sqr.forEach(t),oao=r(Jz,"to load the model weights."),Jz.forEach(t),rao=i(Qs),pK=n(Qs,"P",{});var Pqr=s(pK);tao=r(Pqr,"Examples:"),Pqr.forEach(t),aao=i(Qs),m(XE.$$.fragment,Qs),Qs.forEach(t),nao=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);m(VE.$$.fragment,qt),sao=i(qt),_K=n(qt,"P",{});var $qr=s(_K);lao=r($qr,"Instantiate one of the base model classes of the library from a pretrained model."),$qr.forEach(t),iao=i(qt),Va=n(qt,"P",{});var d4=s(Va);dao=r(d4,"The model class to instantiate is selected based on the "),uK=n(d4,"CODE",{});var Iqr=s(uK);cao=r(Iqr,"model_type"),Iqr.forEach(t),fao=r(d4,` property of the config object (either
passed as an argument or loaded from `),bK=n(d4,"CODE",{});var Nqr=s(bK);mao=r(Nqr,"pretrained_model_name_or_path"),Nqr.forEach(t),gao=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vK=n(d4,"CODE",{});var Dqr=s(vK);hao=r(Dqr,"pretrained_model_name_or_path"),Dqr.forEach(t),pao=r(d4,":"),d4.forEach(t),_ao=i(qt),F=n(qt,"UL",{});var C=s(F);Vh=n(C,"LI",{});var kCe=s(Vh);TK=n(kCe,"STRONG",{});var jqr=s(TK);uao=r(jqr,"albert"),jqr.forEach(t),bao=r(kCe," \u2014 "),DR=n(kCe,"A",{href:!0});var qqr=s(DR);vao=r(qqr,"AlbertModel"),qqr.forEach(t),Tao=r(kCe," (ALBERT model)"),kCe.forEach(t),Fao=i(C),zh=n(C,"LI",{});var RCe=s(zh);FK=n(RCe,"STRONG",{});var Gqr=s(FK);Cao=r(Gqr,"bart"),Gqr.forEach(t),Mao=r(RCe," \u2014 "),jR=n(RCe,"A",{href:!0});var Oqr=s(jR);Eao=r(Oqr,"BartModel"),Oqr.forEach(t),yao=r(RCe," (BART model)"),RCe.forEach(t),wao=i(C),Wh=n(C,"LI",{});var SCe=s(Wh);CK=n(SCe,"STRONG",{});var Xqr=s(CK);Aao=r(Xqr,"beit"),Xqr.forEach(t),Lao=r(SCe," \u2014 "),qR=n(SCe,"A",{href:!0});var Vqr=s(qR);Bao=r(Vqr,"BeitModel"),Vqr.forEach(t),xao=r(SCe," (BEiT model)"),SCe.forEach(t),kao=i(C),Qh=n(C,"LI",{});var PCe=s(Qh);MK=n(PCe,"STRONG",{});var zqr=s(MK);Rao=r(zqr,"bert"),zqr.forEach(t),Sao=r(PCe," \u2014 "),GR=n(PCe,"A",{href:!0});var Wqr=s(GR);Pao=r(Wqr,"BertModel"),Wqr.forEach(t),$ao=r(PCe," (BERT model)"),PCe.forEach(t),Iao=i(C),Hh=n(C,"LI",{});var $Ce=s(Hh);EK=n($Ce,"STRONG",{});var Qqr=s(EK);Nao=r(Qqr,"bert-generation"),Qqr.forEach(t),Dao=r($Ce," \u2014 "),OR=n($Ce,"A",{href:!0});var Hqr=s(OR);jao=r(Hqr,"BertGenerationEncoder"),Hqr.forEach(t),qao=r($Ce," (Bert Generation model)"),$Ce.forEach(t),Gao=i(C),Uh=n(C,"LI",{});var ICe=s(Uh);yK=n(ICe,"STRONG",{});var Uqr=s(yK);Oao=r(Uqr,"big_bird"),Uqr.forEach(t),Xao=r(ICe," \u2014 "),XR=n(ICe,"A",{href:!0});var Jqr=s(XR);Vao=r(Jqr,"BigBirdModel"),Jqr.forEach(t),zao=r(ICe," (BigBird model)"),ICe.forEach(t),Wao=i(C),Jh=n(C,"LI",{});var NCe=s(Jh);wK=n(NCe,"STRONG",{});var Yqr=s(wK);Qao=r(Yqr,"bigbird_pegasus"),Yqr.forEach(t),Hao=r(NCe," \u2014 "),VR=n(NCe,"A",{href:!0});var Kqr=s(VR);Uao=r(Kqr,"BigBirdPegasusModel"),Kqr.forEach(t),Jao=r(NCe," (BigBirdPegasus model)"),NCe.forEach(t),Yao=i(C),Yh=n(C,"LI",{});var DCe=s(Yh);AK=n(DCe,"STRONG",{});var Zqr=s(AK);Kao=r(Zqr,"blenderbot"),Zqr.forEach(t),Zao=r(DCe," \u2014 "),zR=n(DCe,"A",{href:!0});var eGr=s(zR);eno=r(eGr,"BlenderbotModel"),eGr.forEach(t),ono=r(DCe," (Blenderbot model)"),DCe.forEach(t),rno=i(C),Kh=n(C,"LI",{});var jCe=s(Kh);LK=n(jCe,"STRONG",{});var oGr=s(LK);tno=r(oGr,"blenderbot-small"),oGr.forEach(t),ano=r(jCe," \u2014 "),WR=n(jCe,"A",{href:!0});var rGr=s(WR);nno=r(rGr,"BlenderbotSmallModel"),rGr.forEach(t),sno=r(jCe," (BlenderbotSmall model)"),jCe.forEach(t),lno=i(C),Zh=n(C,"LI",{});var qCe=s(Zh);BK=n(qCe,"STRONG",{});var tGr=s(BK);ino=r(tGr,"camembert"),tGr.forEach(t),dno=r(qCe," \u2014 "),QR=n(qCe,"A",{href:!0});var aGr=s(QR);cno=r(aGr,"CamembertModel"),aGr.forEach(t),fno=r(qCe," (CamemBERT model)"),qCe.forEach(t),mno=i(C),ep=n(C,"LI",{});var GCe=s(ep);xK=n(GCe,"STRONG",{});var nGr=s(xK);gno=r(nGr,"canine"),nGr.forEach(t),hno=r(GCe," \u2014 "),HR=n(GCe,"A",{href:!0});var sGr=s(HR);pno=r(sGr,"CanineModel"),sGr.forEach(t),_no=r(GCe," (Canine model)"),GCe.forEach(t),uno=i(C),op=n(C,"LI",{});var OCe=s(op);kK=n(OCe,"STRONG",{});var lGr=s(kK);bno=r(lGr,"clip"),lGr.forEach(t),vno=r(OCe," \u2014 "),UR=n(OCe,"A",{href:!0});var iGr=s(UR);Tno=r(iGr,"CLIPModel"),iGr.forEach(t),Fno=r(OCe," (CLIP model)"),OCe.forEach(t),Cno=i(C),rp=n(C,"LI",{});var XCe=s(rp);RK=n(XCe,"STRONG",{});var dGr=s(RK);Mno=r(dGr,"convbert"),dGr.forEach(t),Eno=r(XCe," \u2014 "),JR=n(XCe,"A",{href:!0});var cGr=s(JR);yno=r(cGr,"ConvBertModel"),cGr.forEach(t),wno=r(XCe," (ConvBERT model)"),XCe.forEach(t),Ano=i(C),tp=n(C,"LI",{});var VCe=s(tp);SK=n(VCe,"STRONG",{});var fGr=s(SK);Lno=r(fGr,"convnext"),fGr.forEach(t),Bno=r(VCe," \u2014 "),YR=n(VCe,"A",{href:!0});var mGr=s(YR);xno=r(mGr,"ConvNextModel"),mGr.forEach(t),kno=r(VCe," (ConvNext model)"),VCe.forEach(t),Rno=i(C),ap=n(C,"LI",{});var zCe=s(ap);PK=n(zCe,"STRONG",{});var gGr=s(PK);Sno=r(gGr,"ctrl"),gGr.forEach(t),Pno=r(zCe," \u2014 "),KR=n(zCe,"A",{href:!0});var hGr=s(KR);$no=r(hGr,"CTRLModel"),hGr.forEach(t),Ino=r(zCe," (CTRL model)"),zCe.forEach(t),Nno=i(C),np=n(C,"LI",{});var WCe=s(np);$K=n(WCe,"STRONG",{});var pGr=s($K);Dno=r(pGr,"data2vec-audio"),pGr.forEach(t),jno=r(WCe," \u2014 "),ZR=n(WCe,"A",{href:!0});var _Gr=s(ZR);qno=r(_Gr,"Data2VecAudioModel"),_Gr.forEach(t),Gno=r(WCe," (Data2VecAudio model)"),WCe.forEach(t),Ono=i(C),sp=n(C,"LI",{});var QCe=s(sp);IK=n(QCe,"STRONG",{});var uGr=s(IK);Xno=r(uGr,"data2vec-text"),uGr.forEach(t),Vno=r(QCe," \u2014 "),eS=n(QCe,"A",{href:!0});var bGr=s(eS);zno=r(bGr,"Data2VecTextModel"),bGr.forEach(t),Wno=r(QCe," (Data2VecText model)"),QCe.forEach(t),Qno=i(C),lp=n(C,"LI",{});var HCe=s(lp);NK=n(HCe,"STRONG",{});var vGr=s(NK);Hno=r(vGr,"deberta"),vGr.forEach(t),Uno=r(HCe," \u2014 "),oS=n(HCe,"A",{href:!0});var TGr=s(oS);Jno=r(TGr,"DebertaModel"),TGr.forEach(t),Yno=r(HCe," (DeBERTa model)"),HCe.forEach(t),Kno=i(C),ip=n(C,"LI",{});var UCe=s(ip);DK=n(UCe,"STRONG",{});var FGr=s(DK);Zno=r(FGr,"deberta-v2"),FGr.forEach(t),eso=r(UCe," \u2014 "),rS=n(UCe,"A",{href:!0});var CGr=s(rS);oso=r(CGr,"DebertaV2Model"),CGr.forEach(t),rso=r(UCe," (DeBERTa-v2 model)"),UCe.forEach(t),tso=i(C),dp=n(C,"LI",{});var JCe=s(dp);jK=n(JCe,"STRONG",{});var MGr=s(jK);aso=r(MGr,"decision_transformer"),MGr.forEach(t),nso=r(JCe," \u2014 "),tS=n(JCe,"A",{href:!0});var EGr=s(tS);sso=r(EGr,"DecisionTransformerModel"),EGr.forEach(t),lso=r(JCe," (Decision Transformer model)"),JCe.forEach(t),iso=i(C),cp=n(C,"LI",{});var YCe=s(cp);qK=n(YCe,"STRONG",{});var yGr=s(qK);dso=r(yGr,"deit"),yGr.forEach(t),cso=r(YCe," \u2014 "),aS=n(YCe,"A",{href:!0});var wGr=s(aS);fso=r(wGr,"DeiTModel"),wGr.forEach(t),mso=r(YCe," (DeiT model)"),YCe.forEach(t),gso=i(C),fp=n(C,"LI",{});var KCe=s(fp);GK=n(KCe,"STRONG",{});var AGr=s(GK);hso=r(AGr,"detr"),AGr.forEach(t),pso=r(KCe," \u2014 "),nS=n(KCe,"A",{href:!0});var LGr=s(nS);_so=r(LGr,"DetrModel"),LGr.forEach(t),uso=r(KCe," (DETR model)"),KCe.forEach(t),bso=i(C),mp=n(C,"LI",{});var ZCe=s(mp);OK=n(ZCe,"STRONG",{});var BGr=s(OK);vso=r(BGr,"distilbert"),BGr.forEach(t),Tso=r(ZCe," \u2014 "),sS=n(ZCe,"A",{href:!0});var xGr=s(sS);Fso=r(xGr,"DistilBertModel"),xGr.forEach(t),Cso=r(ZCe," (DistilBERT model)"),ZCe.forEach(t),Mso=i(C),gp=n(C,"LI",{});var eMe=s(gp);XK=n(eMe,"STRONG",{});var kGr=s(XK);Eso=r(kGr,"dpr"),kGr.forEach(t),yso=r(eMe," \u2014 "),lS=n(eMe,"A",{href:!0});var RGr=s(lS);wso=r(RGr,"DPRQuestionEncoder"),RGr.forEach(t),Aso=r(eMe," (DPR model)"),eMe.forEach(t),Lso=i(C),hp=n(C,"LI",{});var oMe=s(hp);VK=n(oMe,"STRONG",{});var SGr=s(VK);Bso=r(SGr,"electra"),SGr.forEach(t),xso=r(oMe," \u2014 "),iS=n(oMe,"A",{href:!0});var PGr=s(iS);kso=r(PGr,"ElectraModel"),PGr.forEach(t),Rso=r(oMe," (ELECTRA model)"),oMe.forEach(t),Sso=i(C),pp=n(C,"LI",{});var rMe=s(pp);zK=n(rMe,"STRONG",{});var $Gr=s(zK);Pso=r($Gr,"flaubert"),$Gr.forEach(t),$so=r(rMe," \u2014 "),dS=n(rMe,"A",{href:!0});var IGr=s(dS);Iso=r(IGr,"FlaubertModel"),IGr.forEach(t),Nso=r(rMe," (FlauBERT model)"),rMe.forEach(t),Dso=i(C),_p=n(C,"LI",{});var tMe=s(_p);WK=n(tMe,"STRONG",{});var NGr=s(WK);jso=r(NGr,"fnet"),NGr.forEach(t),qso=r(tMe," \u2014 "),cS=n(tMe,"A",{href:!0});var DGr=s(cS);Gso=r(DGr,"FNetModel"),DGr.forEach(t),Oso=r(tMe," (FNet model)"),tMe.forEach(t),Xso=i(C),up=n(C,"LI",{});var aMe=s(up);QK=n(aMe,"STRONG",{});var jGr=s(QK);Vso=r(jGr,"fsmt"),jGr.forEach(t),zso=r(aMe," \u2014 "),fS=n(aMe,"A",{href:!0});var qGr=s(fS);Wso=r(qGr,"FSMTModel"),qGr.forEach(t),Qso=r(aMe," (FairSeq Machine-Translation model)"),aMe.forEach(t),Hso=i(C),js=n(C,"LI",{});var U7=s(js);HK=n(U7,"STRONG",{});var GGr=s(HK);Uso=r(GGr,"funnel"),GGr.forEach(t),Jso=r(U7," \u2014 "),mS=n(U7,"A",{href:!0});var OGr=s(mS);Yso=r(OGr,"FunnelModel"),OGr.forEach(t),Kso=r(U7," or "),gS=n(U7,"A",{href:!0});var XGr=s(gS);Zso=r(XGr,"FunnelBaseModel"),XGr.forEach(t),elo=r(U7," (Funnel Transformer model)"),U7.forEach(t),olo=i(C),bp=n(C,"LI",{});var nMe=s(bp);UK=n(nMe,"STRONG",{});var VGr=s(UK);rlo=r(VGr,"glpn"),VGr.forEach(t),tlo=r(nMe," \u2014 "),hS=n(nMe,"A",{href:!0});var zGr=s(hS);alo=r(zGr,"GLPNModel"),zGr.forEach(t),nlo=r(nMe," (GLPN model)"),nMe.forEach(t),slo=i(C),vp=n(C,"LI",{});var sMe=s(vp);JK=n(sMe,"STRONG",{});var WGr=s(JK);llo=r(WGr,"gpt2"),WGr.forEach(t),ilo=r(sMe," \u2014 "),pS=n(sMe,"A",{href:!0});var QGr=s(pS);dlo=r(QGr,"GPT2Model"),QGr.forEach(t),clo=r(sMe," (OpenAI GPT-2 model)"),sMe.forEach(t),flo=i(C),Tp=n(C,"LI",{});var lMe=s(Tp);YK=n(lMe,"STRONG",{});var HGr=s(YK);mlo=r(HGr,"gpt_neo"),HGr.forEach(t),glo=r(lMe," \u2014 "),_S=n(lMe,"A",{href:!0});var UGr=s(_S);hlo=r(UGr,"GPTNeoModel"),UGr.forEach(t),plo=r(lMe," (GPT Neo model)"),lMe.forEach(t),_lo=i(C),Fp=n(C,"LI",{});var iMe=s(Fp);KK=n(iMe,"STRONG",{});var JGr=s(KK);ulo=r(JGr,"gptj"),JGr.forEach(t),blo=r(iMe," \u2014 "),uS=n(iMe,"A",{href:!0});var YGr=s(uS);vlo=r(YGr,"GPTJModel"),YGr.forEach(t),Tlo=r(iMe," (GPT-J model)"),iMe.forEach(t),Flo=i(C),Cp=n(C,"LI",{});var dMe=s(Cp);ZK=n(dMe,"STRONG",{});var KGr=s(ZK);Clo=r(KGr,"hubert"),KGr.forEach(t),Mlo=r(dMe," \u2014 "),bS=n(dMe,"A",{href:!0});var ZGr=s(bS);Elo=r(ZGr,"HubertModel"),ZGr.forEach(t),ylo=r(dMe," (Hubert model)"),dMe.forEach(t),wlo=i(C),Mp=n(C,"LI",{});var cMe=s(Mp);eZ=n(cMe,"STRONG",{});var eOr=s(eZ);Alo=r(eOr,"ibert"),eOr.forEach(t),Llo=r(cMe," \u2014 "),vS=n(cMe,"A",{href:!0});var oOr=s(vS);Blo=r(oOr,"IBertModel"),oOr.forEach(t),xlo=r(cMe," (I-BERT model)"),cMe.forEach(t),klo=i(C),Ep=n(C,"LI",{});var fMe=s(Ep);oZ=n(fMe,"STRONG",{});var rOr=s(oZ);Rlo=r(rOr,"imagegpt"),rOr.forEach(t),Slo=r(fMe," \u2014 "),TS=n(fMe,"A",{href:!0});var tOr=s(TS);Plo=r(tOr,"ImageGPTModel"),tOr.forEach(t),$lo=r(fMe," (ImageGPT model)"),fMe.forEach(t),Ilo=i(C),yp=n(C,"LI",{});var mMe=s(yp);rZ=n(mMe,"STRONG",{});var aOr=s(rZ);Nlo=r(aOr,"layoutlm"),aOr.forEach(t),Dlo=r(mMe," \u2014 "),FS=n(mMe,"A",{href:!0});var nOr=s(FS);jlo=r(nOr,"LayoutLMModel"),nOr.forEach(t),qlo=r(mMe," (LayoutLM model)"),mMe.forEach(t),Glo=i(C),wp=n(C,"LI",{});var gMe=s(wp);tZ=n(gMe,"STRONG",{});var sOr=s(tZ);Olo=r(sOr,"layoutlmv2"),sOr.forEach(t),Xlo=r(gMe," \u2014 "),CS=n(gMe,"A",{href:!0});var lOr=s(CS);Vlo=r(lOr,"LayoutLMv2Model"),lOr.forEach(t),zlo=r(gMe," (LayoutLMv2 model)"),gMe.forEach(t),Wlo=i(C),Ap=n(C,"LI",{});var hMe=s(Ap);aZ=n(hMe,"STRONG",{});var iOr=s(aZ);Qlo=r(iOr,"led"),iOr.forEach(t),Hlo=r(hMe," \u2014 "),MS=n(hMe,"A",{href:!0});var dOr=s(MS);Ulo=r(dOr,"LEDModel"),dOr.forEach(t),Jlo=r(hMe," (LED model)"),hMe.forEach(t),Ylo=i(C),Lp=n(C,"LI",{});var pMe=s(Lp);nZ=n(pMe,"STRONG",{});var cOr=s(nZ);Klo=r(cOr,"longformer"),cOr.forEach(t),Zlo=r(pMe," \u2014 "),ES=n(pMe,"A",{href:!0});var fOr=s(ES);eio=r(fOr,"LongformerModel"),fOr.forEach(t),oio=r(pMe," (Longformer model)"),pMe.forEach(t),rio=i(C),Bp=n(C,"LI",{});var _Me=s(Bp);sZ=n(_Me,"STRONG",{});var mOr=s(sZ);tio=r(mOr,"luke"),mOr.forEach(t),aio=r(_Me," \u2014 "),yS=n(_Me,"A",{href:!0});var gOr=s(yS);nio=r(gOr,"LukeModel"),gOr.forEach(t),sio=r(_Me," (LUKE model)"),_Me.forEach(t),lio=i(C),xp=n(C,"LI",{});var uMe=s(xp);lZ=n(uMe,"STRONG",{});var hOr=s(lZ);iio=r(hOr,"lxmert"),hOr.forEach(t),dio=r(uMe," \u2014 "),wS=n(uMe,"A",{href:!0});var pOr=s(wS);cio=r(pOr,"LxmertModel"),pOr.forEach(t),fio=r(uMe," (LXMERT model)"),uMe.forEach(t),mio=i(C),kp=n(C,"LI",{});var bMe=s(kp);iZ=n(bMe,"STRONG",{});var _Or=s(iZ);gio=r(_Or,"m2m_100"),_Or.forEach(t),hio=r(bMe," \u2014 "),AS=n(bMe,"A",{href:!0});var uOr=s(AS);pio=r(uOr,"M2M100Model"),uOr.forEach(t),_io=r(bMe," (M2M100 model)"),bMe.forEach(t),uio=i(C),Rp=n(C,"LI",{});var vMe=s(Rp);dZ=n(vMe,"STRONG",{});var bOr=s(dZ);bio=r(bOr,"marian"),bOr.forEach(t),vio=r(vMe," \u2014 "),LS=n(vMe,"A",{href:!0});var vOr=s(LS);Tio=r(vOr,"MarianModel"),vOr.forEach(t),Fio=r(vMe," (Marian model)"),vMe.forEach(t),Cio=i(C),Sp=n(C,"LI",{});var TMe=s(Sp);cZ=n(TMe,"STRONG",{});var TOr=s(cZ);Mio=r(TOr,"maskformer"),TOr.forEach(t),Eio=r(TMe," \u2014 "),BS=n(TMe,"A",{href:!0});var FOr=s(BS);yio=r(FOr,"MaskFormerModel"),FOr.forEach(t),wio=r(TMe," (MaskFormer model)"),TMe.forEach(t),Aio=i(C),Pp=n(C,"LI",{});var FMe=s(Pp);fZ=n(FMe,"STRONG",{});var COr=s(fZ);Lio=r(COr,"mbart"),COr.forEach(t),Bio=r(FMe," \u2014 "),xS=n(FMe,"A",{href:!0});var MOr=s(xS);xio=r(MOr,"MBartModel"),MOr.forEach(t),kio=r(FMe," (mBART model)"),FMe.forEach(t),Rio=i(C),$p=n(C,"LI",{});var CMe=s($p);mZ=n(CMe,"STRONG",{});var EOr=s(mZ);Sio=r(EOr,"megatron-bert"),EOr.forEach(t),Pio=r(CMe," \u2014 "),kS=n(CMe,"A",{href:!0});var yOr=s(kS);$io=r(yOr,"MegatronBertModel"),yOr.forEach(t),Iio=r(CMe," (MegatronBert model)"),CMe.forEach(t),Nio=i(C),Ip=n(C,"LI",{});var MMe=s(Ip);gZ=n(MMe,"STRONG",{});var wOr=s(gZ);Dio=r(wOr,"mobilebert"),wOr.forEach(t),jio=r(MMe," \u2014 "),RS=n(MMe,"A",{href:!0});var AOr=s(RS);qio=r(AOr,"MobileBertModel"),AOr.forEach(t),Gio=r(MMe," (MobileBERT model)"),MMe.forEach(t),Oio=i(C),Np=n(C,"LI",{});var EMe=s(Np);hZ=n(EMe,"STRONG",{});var LOr=s(hZ);Xio=r(LOr,"mpnet"),LOr.forEach(t),Vio=r(EMe," \u2014 "),SS=n(EMe,"A",{href:!0});var BOr=s(SS);zio=r(BOr,"MPNetModel"),BOr.forEach(t),Wio=r(EMe," (MPNet model)"),EMe.forEach(t),Qio=i(C),Dp=n(C,"LI",{});var yMe=s(Dp);pZ=n(yMe,"STRONG",{});var xOr=s(pZ);Hio=r(xOr,"mt5"),xOr.forEach(t),Uio=r(yMe," \u2014 "),PS=n(yMe,"A",{href:!0});var kOr=s(PS);Jio=r(kOr,"MT5Model"),kOr.forEach(t),Yio=r(yMe," (mT5 model)"),yMe.forEach(t),Kio=i(C),jp=n(C,"LI",{});var wMe=s(jp);_Z=n(wMe,"STRONG",{});var ROr=s(_Z);Zio=r(ROr,"nystromformer"),ROr.forEach(t),edo=r(wMe," \u2014 "),$S=n(wMe,"A",{href:!0});var SOr=s($S);odo=r(SOr,"NystromformerModel"),SOr.forEach(t),rdo=r(wMe," (Nystromformer model)"),wMe.forEach(t),tdo=i(C),qp=n(C,"LI",{});var AMe=s(qp);uZ=n(AMe,"STRONG",{});var POr=s(uZ);ado=r(POr,"openai-gpt"),POr.forEach(t),ndo=r(AMe," \u2014 "),IS=n(AMe,"A",{href:!0});var $Or=s(IS);sdo=r($Or,"OpenAIGPTModel"),$Or.forEach(t),ldo=r(AMe," (OpenAI GPT model)"),AMe.forEach(t),ido=i(C),Gp=n(C,"LI",{});var LMe=s(Gp);bZ=n(LMe,"STRONG",{});var IOr=s(bZ);ddo=r(IOr,"pegasus"),IOr.forEach(t),cdo=r(LMe," \u2014 "),NS=n(LMe,"A",{href:!0});var NOr=s(NS);fdo=r(NOr,"PegasusModel"),NOr.forEach(t),mdo=r(LMe," (Pegasus model)"),LMe.forEach(t),gdo=i(C),Op=n(C,"LI",{});var BMe=s(Op);vZ=n(BMe,"STRONG",{});var DOr=s(vZ);hdo=r(DOr,"perceiver"),DOr.forEach(t),pdo=r(BMe," \u2014 "),DS=n(BMe,"A",{href:!0});var jOr=s(DS);_do=r(jOr,"PerceiverModel"),jOr.forEach(t),udo=r(BMe," (Perceiver model)"),BMe.forEach(t),bdo=i(C),Xp=n(C,"LI",{});var xMe=s(Xp);TZ=n(xMe,"STRONG",{});var qOr=s(TZ);vdo=r(qOr,"plbart"),qOr.forEach(t),Tdo=r(xMe," \u2014 "),jS=n(xMe,"A",{href:!0});var GOr=s(jS);Fdo=r(GOr,"PLBartModel"),GOr.forEach(t),Cdo=r(xMe," (PLBart model)"),xMe.forEach(t),Mdo=i(C),Vp=n(C,"LI",{});var kMe=s(Vp);FZ=n(kMe,"STRONG",{});var OOr=s(FZ);Edo=r(OOr,"poolformer"),OOr.forEach(t),ydo=r(kMe," \u2014 "),qS=n(kMe,"A",{href:!0});var XOr=s(qS);wdo=r(XOr,"PoolFormerModel"),XOr.forEach(t),Ado=r(kMe," (PoolFormer model)"),kMe.forEach(t),Ldo=i(C),zp=n(C,"LI",{});var RMe=s(zp);CZ=n(RMe,"STRONG",{});var VOr=s(CZ);Bdo=r(VOr,"prophetnet"),VOr.forEach(t),xdo=r(RMe," \u2014 "),GS=n(RMe,"A",{href:!0});var zOr=s(GS);kdo=r(zOr,"ProphetNetModel"),zOr.forEach(t),Rdo=r(RMe," (ProphetNet model)"),RMe.forEach(t),Sdo=i(C),Wp=n(C,"LI",{});var SMe=s(Wp);MZ=n(SMe,"STRONG",{});var WOr=s(MZ);Pdo=r(WOr,"qdqbert"),WOr.forEach(t),$do=r(SMe," \u2014 "),OS=n(SMe,"A",{href:!0});var QOr=s(OS);Ido=r(QOr,"QDQBertModel"),QOr.forEach(t),Ndo=r(SMe," (QDQBert model)"),SMe.forEach(t),Ddo=i(C),Qp=n(C,"LI",{});var PMe=s(Qp);EZ=n(PMe,"STRONG",{});var HOr=s(EZ);jdo=r(HOr,"reformer"),HOr.forEach(t),qdo=r(PMe," \u2014 "),XS=n(PMe,"A",{href:!0});var UOr=s(XS);Gdo=r(UOr,"ReformerModel"),UOr.forEach(t),Odo=r(PMe," (Reformer model)"),PMe.forEach(t),Xdo=i(C),Hp=n(C,"LI",{});var $Me=s(Hp);yZ=n($Me,"STRONG",{});var JOr=s(yZ);Vdo=r(JOr,"rembert"),JOr.forEach(t),zdo=r($Me," \u2014 "),VS=n($Me,"A",{href:!0});var YOr=s(VS);Wdo=r(YOr,"RemBertModel"),YOr.forEach(t),Qdo=r($Me," (RemBERT model)"),$Me.forEach(t),Hdo=i(C),Up=n(C,"LI",{});var IMe=s(Up);wZ=n(IMe,"STRONG",{});var KOr=s(wZ);Udo=r(KOr,"resnet"),KOr.forEach(t),Jdo=r(IMe," \u2014 "),zS=n(IMe,"A",{href:!0});var ZOr=s(zS);Ydo=r(ZOr,"ResNetModel"),ZOr.forEach(t),Kdo=r(IMe," (ResNet model)"),IMe.forEach(t),Zdo=i(C),Jp=n(C,"LI",{});var NMe=s(Jp);AZ=n(NMe,"STRONG",{});var eXr=s(AZ);eco=r(eXr,"retribert"),eXr.forEach(t),oco=r(NMe," \u2014 "),WS=n(NMe,"A",{href:!0});var oXr=s(WS);rco=r(oXr,"RetriBertModel"),oXr.forEach(t),tco=r(NMe," (RetriBERT model)"),NMe.forEach(t),aco=i(C),Yp=n(C,"LI",{});var DMe=s(Yp);LZ=n(DMe,"STRONG",{});var rXr=s(LZ);nco=r(rXr,"roberta"),rXr.forEach(t),sco=r(DMe," \u2014 "),QS=n(DMe,"A",{href:!0});var tXr=s(QS);lco=r(tXr,"RobertaModel"),tXr.forEach(t),ico=r(DMe," (RoBERTa model)"),DMe.forEach(t),dco=i(C),Kp=n(C,"LI",{});var jMe=s(Kp);BZ=n(jMe,"STRONG",{});var aXr=s(BZ);cco=r(aXr,"roformer"),aXr.forEach(t),fco=r(jMe," \u2014 "),HS=n(jMe,"A",{href:!0});var nXr=s(HS);mco=r(nXr,"RoFormerModel"),nXr.forEach(t),gco=r(jMe," (RoFormer model)"),jMe.forEach(t),hco=i(C),Zp=n(C,"LI",{});var qMe=s(Zp);xZ=n(qMe,"STRONG",{});var sXr=s(xZ);pco=r(sXr,"segformer"),sXr.forEach(t),_co=r(qMe," \u2014 "),US=n(qMe,"A",{href:!0});var lXr=s(US);uco=r(lXr,"SegformerModel"),lXr.forEach(t),bco=r(qMe," (SegFormer model)"),qMe.forEach(t),vco=i(C),e_=n(C,"LI",{});var GMe=s(e_);kZ=n(GMe,"STRONG",{});var iXr=s(kZ);Tco=r(iXr,"sew"),iXr.forEach(t),Fco=r(GMe," \u2014 "),JS=n(GMe,"A",{href:!0});var dXr=s(JS);Cco=r(dXr,"SEWModel"),dXr.forEach(t),Mco=r(GMe," (SEW model)"),GMe.forEach(t),Eco=i(C),o_=n(C,"LI",{});var OMe=s(o_);RZ=n(OMe,"STRONG",{});var cXr=s(RZ);yco=r(cXr,"sew-d"),cXr.forEach(t),wco=r(OMe," \u2014 "),YS=n(OMe,"A",{href:!0});var fXr=s(YS);Aco=r(fXr,"SEWDModel"),fXr.forEach(t),Lco=r(OMe," (SEW-D model)"),OMe.forEach(t),Bco=i(C),r_=n(C,"LI",{});var XMe=s(r_);SZ=n(XMe,"STRONG",{});var mXr=s(SZ);xco=r(mXr,"speech_to_text"),mXr.forEach(t),kco=r(XMe," \u2014 "),KS=n(XMe,"A",{href:!0});var gXr=s(KS);Rco=r(gXr,"Speech2TextModel"),gXr.forEach(t),Sco=r(XMe," (Speech2Text model)"),XMe.forEach(t),Pco=i(C),t_=n(C,"LI",{});var VMe=s(t_);PZ=n(VMe,"STRONG",{});var hXr=s(PZ);$co=r(hXr,"splinter"),hXr.forEach(t),Ico=r(VMe," \u2014 "),ZS=n(VMe,"A",{href:!0});var pXr=s(ZS);Nco=r(pXr,"SplinterModel"),pXr.forEach(t),Dco=r(VMe," (Splinter model)"),VMe.forEach(t),jco=i(C),a_=n(C,"LI",{});var zMe=s(a_);$Z=n(zMe,"STRONG",{});var _Xr=s($Z);qco=r(_Xr,"squeezebert"),_Xr.forEach(t),Gco=r(zMe," \u2014 "),eP=n(zMe,"A",{href:!0});var uXr=s(eP);Oco=r(uXr,"SqueezeBertModel"),uXr.forEach(t),Xco=r(zMe," (SqueezeBERT model)"),zMe.forEach(t),Vco=i(C),n_=n(C,"LI",{});var WMe=s(n_);IZ=n(WMe,"STRONG",{});var bXr=s(IZ);zco=r(bXr,"swin"),bXr.forEach(t),Wco=r(WMe," \u2014 "),oP=n(WMe,"A",{href:!0});var vXr=s(oP);Qco=r(vXr,"SwinModel"),vXr.forEach(t),Hco=r(WMe," (Swin model)"),WMe.forEach(t),Uco=i(C),s_=n(C,"LI",{});var QMe=s(s_);NZ=n(QMe,"STRONG",{});var TXr=s(NZ);Jco=r(TXr,"t5"),TXr.forEach(t),Yco=r(QMe," \u2014 "),rP=n(QMe,"A",{href:!0});var FXr=s(rP);Kco=r(FXr,"T5Model"),FXr.forEach(t),Zco=r(QMe," (T5 model)"),QMe.forEach(t),efo=i(C),l_=n(C,"LI",{});var HMe=s(l_);DZ=n(HMe,"STRONG",{});var CXr=s(DZ);ofo=r(CXr,"tapas"),CXr.forEach(t),rfo=r(HMe," \u2014 "),tP=n(HMe,"A",{href:!0});var MXr=s(tP);tfo=r(MXr,"TapasModel"),MXr.forEach(t),afo=r(HMe," (TAPAS model)"),HMe.forEach(t),nfo=i(C),i_=n(C,"LI",{});var UMe=s(i_);jZ=n(UMe,"STRONG",{});var EXr=s(jZ);sfo=r(EXr,"transfo-xl"),EXr.forEach(t),lfo=r(UMe," \u2014 "),aP=n(UMe,"A",{href:!0});var yXr=s(aP);ifo=r(yXr,"TransfoXLModel"),yXr.forEach(t),dfo=r(UMe," (Transformer-XL model)"),UMe.forEach(t),cfo=i(C),d_=n(C,"LI",{});var JMe=s(d_);qZ=n(JMe,"STRONG",{});var wXr=s(qZ);ffo=r(wXr,"unispeech"),wXr.forEach(t),mfo=r(JMe," \u2014 "),nP=n(JMe,"A",{href:!0});var AXr=s(nP);gfo=r(AXr,"UniSpeechModel"),AXr.forEach(t),hfo=r(JMe," (UniSpeech model)"),JMe.forEach(t),pfo=i(C),c_=n(C,"LI",{});var YMe=s(c_);GZ=n(YMe,"STRONG",{});var LXr=s(GZ);_fo=r(LXr,"unispeech-sat"),LXr.forEach(t),ufo=r(YMe," \u2014 "),sP=n(YMe,"A",{href:!0});var BXr=s(sP);bfo=r(BXr,"UniSpeechSatModel"),BXr.forEach(t),vfo=r(YMe," (UniSpeechSat model)"),YMe.forEach(t),Tfo=i(C),f_=n(C,"LI",{});var KMe=s(f_);OZ=n(KMe,"STRONG",{});var xXr=s(OZ);Ffo=r(xXr,"van"),xXr.forEach(t),Cfo=r(KMe," \u2014 "),lP=n(KMe,"A",{href:!0});var kXr=s(lP);Mfo=r(kXr,"VanModel"),kXr.forEach(t),Efo=r(KMe," (VAN model)"),KMe.forEach(t),yfo=i(C),m_=n(C,"LI",{});var ZMe=s(m_);XZ=n(ZMe,"STRONG",{});var RXr=s(XZ);wfo=r(RXr,"vilt"),RXr.forEach(t),Afo=r(ZMe," \u2014 "),iP=n(ZMe,"A",{href:!0});var SXr=s(iP);Lfo=r(SXr,"ViltModel"),SXr.forEach(t),Bfo=r(ZMe," (ViLT model)"),ZMe.forEach(t),xfo=i(C),g_=n(C,"LI",{});var e4e=s(g_);VZ=n(e4e,"STRONG",{});var PXr=s(VZ);kfo=r(PXr,"vision-text-dual-encoder"),PXr.forEach(t),Rfo=r(e4e," \u2014 "),dP=n(e4e,"A",{href:!0});var $Xr=s(dP);Sfo=r($Xr,"VisionTextDualEncoderModel"),$Xr.forEach(t),Pfo=r(e4e," (VisionTextDualEncoder model)"),e4e.forEach(t),$fo=i(C),h_=n(C,"LI",{});var o4e=s(h_);zZ=n(o4e,"STRONG",{});var IXr=s(zZ);Ifo=r(IXr,"visual_bert"),IXr.forEach(t),Nfo=r(o4e," \u2014 "),cP=n(o4e,"A",{href:!0});var NXr=s(cP);Dfo=r(NXr,"VisualBertModel"),NXr.forEach(t),jfo=r(o4e," (VisualBert model)"),o4e.forEach(t),qfo=i(C),p_=n(C,"LI",{});var r4e=s(p_);WZ=n(r4e,"STRONG",{});var DXr=s(WZ);Gfo=r(DXr,"vit"),DXr.forEach(t),Ofo=r(r4e," \u2014 "),fP=n(r4e,"A",{href:!0});var jXr=s(fP);Xfo=r(jXr,"ViTModel"),jXr.forEach(t),Vfo=r(r4e," (ViT model)"),r4e.forEach(t),zfo=i(C),__=n(C,"LI",{});var t4e=s(__);QZ=n(t4e,"STRONG",{});var qXr=s(QZ);Wfo=r(qXr,"vit_mae"),qXr.forEach(t),Qfo=r(t4e," \u2014 "),mP=n(t4e,"A",{href:!0});var GXr=s(mP);Hfo=r(GXr,"ViTMAEModel"),GXr.forEach(t),Ufo=r(t4e," (ViTMAE model)"),t4e.forEach(t),Jfo=i(C),u_=n(C,"LI",{});var a4e=s(u_);HZ=n(a4e,"STRONG",{});var OXr=s(HZ);Yfo=r(OXr,"wav2vec2"),OXr.forEach(t),Kfo=r(a4e," \u2014 "),gP=n(a4e,"A",{href:!0});var XXr=s(gP);Zfo=r(XXr,"Wav2Vec2Model"),XXr.forEach(t),emo=r(a4e," (Wav2Vec2 model)"),a4e.forEach(t),omo=i(C),b_=n(C,"LI",{});var n4e=s(b_);UZ=n(n4e,"STRONG",{});var VXr=s(UZ);rmo=r(VXr,"wavlm"),VXr.forEach(t),tmo=r(n4e," \u2014 "),hP=n(n4e,"A",{href:!0});var zXr=s(hP);amo=r(zXr,"WavLMModel"),zXr.forEach(t),nmo=r(n4e," (WavLM model)"),n4e.forEach(t),smo=i(C),v_=n(C,"LI",{});var s4e=s(v_);JZ=n(s4e,"STRONG",{});var WXr=s(JZ);lmo=r(WXr,"xglm"),WXr.forEach(t),imo=r(s4e," \u2014 "),pP=n(s4e,"A",{href:!0});var QXr=s(pP);dmo=r(QXr,"XGLMModel"),QXr.forEach(t),cmo=r(s4e," (XGLM model)"),s4e.forEach(t),fmo=i(C),T_=n(C,"LI",{});var l4e=s(T_);YZ=n(l4e,"STRONG",{});var HXr=s(YZ);mmo=r(HXr,"xlm"),HXr.forEach(t),gmo=r(l4e," \u2014 "),_P=n(l4e,"A",{href:!0});var UXr=s(_P);hmo=r(UXr,"XLMModel"),UXr.forEach(t),pmo=r(l4e," (XLM model)"),l4e.forEach(t),_mo=i(C),F_=n(C,"LI",{});var i4e=s(F_);KZ=n(i4e,"STRONG",{});var JXr=s(KZ);umo=r(JXr,"xlm-prophetnet"),JXr.forEach(t),bmo=r(i4e," \u2014 "),uP=n(i4e,"A",{href:!0});var YXr=s(uP);vmo=r(YXr,"XLMProphetNetModel"),YXr.forEach(t),Tmo=r(i4e," (XLMProphetNet model)"),i4e.forEach(t),Fmo=i(C),C_=n(C,"LI",{});var d4e=s(C_);ZZ=n(d4e,"STRONG",{});var KXr=s(ZZ);Cmo=r(KXr,"xlm-roberta"),KXr.forEach(t),Mmo=r(d4e," \u2014 "),bP=n(d4e,"A",{href:!0});var ZXr=s(bP);Emo=r(ZXr,"XLMRobertaModel"),ZXr.forEach(t),ymo=r(d4e," (XLM-RoBERTa model)"),d4e.forEach(t),wmo=i(C),M_=n(C,"LI",{});var c4e=s(M_);eee=n(c4e,"STRONG",{});var eVr=s(eee);Amo=r(eVr,"xlm-roberta-xl"),eVr.forEach(t),Lmo=r(c4e," \u2014 "),vP=n(c4e,"A",{href:!0});var oVr=s(vP);Bmo=r(oVr,"XLMRobertaXLModel"),oVr.forEach(t),xmo=r(c4e," (XLM-RoBERTa-XL model)"),c4e.forEach(t),kmo=i(C),E_=n(C,"LI",{});var f4e=s(E_);oee=n(f4e,"STRONG",{});var rVr=s(oee);Rmo=r(rVr,"xlnet"),rVr.forEach(t),Smo=r(f4e," \u2014 "),TP=n(f4e,"A",{href:!0});var tVr=s(TP);Pmo=r(tVr,"XLNetModel"),tVr.forEach(t),$mo=r(f4e," (XLNet model)"),f4e.forEach(t),Imo=i(C),y_=n(C,"LI",{});var m4e=s(y_);ree=n(m4e,"STRONG",{});var aVr=s(ree);Nmo=r(aVr,"yoso"),aVr.forEach(t),Dmo=r(m4e," \u2014 "),FP=n(m4e,"A",{href:!0});var nVr=s(FP);jmo=r(nVr,"YosoModel"),nVr.forEach(t),qmo=r(m4e," (YOSO model)"),m4e.forEach(t),C.forEach(t),Gmo=i(qt),w_=n(qt,"P",{});var g4e=s(w_);Omo=r(g4e,"The model is set in evaluation mode by default using "),tee=n(g4e,"CODE",{});var sVr=s(tee);Xmo=r(sVr,"model.eval()"),sVr.forEach(t),Vmo=r(g4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aee=n(g4e,"CODE",{});var lVr=s(aee);zmo=r(lVr,"model.train()"),lVr.forEach(t),g4e.forEach(t),Wmo=i(qt),nee=n(qt,"P",{});var iVr=s(nee);Qmo=r(iVr,"Examples:"),iVr.forEach(t),Hmo=i(qt),m(zE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),pke=i(c),Zi=n(c,"H2",{class:!0});var ESe=s(Zi);A_=n(ESe,"A",{id:!0,class:!0,href:!0});var dVr=s(A_);see=n(dVr,"SPAN",{});var cVr=s(see);m(WE.$$.fragment,cVr),cVr.forEach(t),dVr.forEach(t),Umo=i(ESe),lee=n(ESe,"SPAN",{});var fVr=s(lee);Jmo=r(fVr,"AutoModelForPreTraining"),fVr.forEach(t),ESe.forEach(t),_ke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(QE.$$.fragment,Hs),Ymo=i(Hs),ed=n(Hs,"P",{});var Yz=s(ed);Kmo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iee=n(Yz,"CODE",{});var mVr=s(iee);Zmo=r(mVr,"from_pretrained()"),mVr.forEach(t),ego=r(Yz,"class method or the "),dee=n(Yz,"CODE",{});var gVr=s(dee);ogo=r(gVr,"from_config()"),gVr.forEach(t),rgo=r(Yz,`class
method.`),Yz.forEach(t),tgo=i(Hs),HE=n(Hs,"P",{});var ySe=s(HE);ago=r(ySe,"This class cannot be instantiated directly using "),cee=n(ySe,"CODE",{});var hVr=s(cee);ngo=r(hVr,"__init__()"),hVr.forEach(t),sgo=r(ySe," (throws an error)."),ySe.forEach(t),lgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(UE.$$.fragment,Us),igo=i(Us),fee=n(Us,"P",{});var pVr=s(fee);dgo=r(pVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pVr.forEach(t),cgo=i(Us),od=n(Us,"P",{});var Kz=s(od);fgo=r(Kz,`Note:
Loading a model from its configuration file does `),mee=n(Kz,"STRONG",{});var _Vr=s(mee);mgo=r(_Vr,"not"),_Vr.forEach(t),ggo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Kz,"CODE",{});var uVr=s(gee);hgo=r(uVr,"from_pretrained()"),uVr.forEach(t),pgo=r(Kz,"to load the model weights."),Kz.forEach(t),_go=i(Us),hee=n(Us,"P",{});var bVr=s(hee);ugo=r(bVr,"Examples:"),bVr.forEach(t),bgo=i(Us),m(JE.$$.fragment,Us),Us.forEach(t),vgo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);m(YE.$$.fragment,Gt),Tgo=i(Gt),pee=n(Gt,"P",{});var vVr=s(pee);Fgo=r(vVr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vVr.forEach(t),Cgo=i(Gt),za=n(Gt,"P",{});var c4=s(za);Mgo=r(c4,"The model class to instantiate is selected based on the "),_ee=n(c4,"CODE",{});var TVr=s(_ee);Ego=r(TVr,"model_type"),TVr.forEach(t),ygo=r(c4,` property of the config object (either
passed as an argument or loaded from `),uee=n(c4,"CODE",{});var FVr=s(uee);wgo=r(FVr,"pretrained_model_name_or_path"),FVr.forEach(t),Ago=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bee=n(c4,"CODE",{});var CVr=s(bee);Lgo=r(CVr,"pretrained_model_name_or_path"),CVr.forEach(t),Bgo=r(c4,":"),c4.forEach(t),xgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);L_=n(S,"LI",{});var h4e=s(L_);vee=n(h4e,"STRONG",{});var MVr=s(vee);kgo=r(MVr,"albert"),MVr.forEach(t),Rgo=r(h4e," \u2014 "),CP=n(h4e,"A",{href:!0});var EVr=s(CP);Sgo=r(EVr,"AlbertForPreTraining"),EVr.forEach(t),Pgo=r(h4e," (ALBERT model)"),h4e.forEach(t),$go=i(S),B_=n(S,"LI",{});var p4e=s(B_);Tee=n(p4e,"STRONG",{});var yVr=s(Tee);Igo=r(yVr,"bart"),yVr.forEach(t),Ngo=r(p4e," \u2014 "),MP=n(p4e,"A",{href:!0});var wVr=s(MP);Dgo=r(wVr,"BartForConditionalGeneration"),wVr.forEach(t),jgo=r(p4e," (BART model)"),p4e.forEach(t),qgo=i(S),x_=n(S,"LI",{});var _4e=s(x_);Fee=n(_4e,"STRONG",{});var AVr=s(Fee);Ggo=r(AVr,"bert"),AVr.forEach(t),Ogo=r(_4e," \u2014 "),EP=n(_4e,"A",{href:!0});var LVr=s(EP);Xgo=r(LVr,"BertForPreTraining"),LVr.forEach(t),Vgo=r(_4e," (BERT model)"),_4e.forEach(t),zgo=i(S),k_=n(S,"LI",{});var u4e=s(k_);Cee=n(u4e,"STRONG",{});var BVr=s(Cee);Wgo=r(BVr,"big_bird"),BVr.forEach(t),Qgo=r(u4e," \u2014 "),yP=n(u4e,"A",{href:!0});var xVr=s(yP);Hgo=r(xVr,"BigBirdForPreTraining"),xVr.forEach(t),Ugo=r(u4e," (BigBird model)"),u4e.forEach(t),Jgo=i(S),R_=n(S,"LI",{});var b4e=s(R_);Mee=n(b4e,"STRONG",{});var kVr=s(Mee);Ygo=r(kVr,"camembert"),kVr.forEach(t),Kgo=r(b4e," \u2014 "),wP=n(b4e,"A",{href:!0});var RVr=s(wP);Zgo=r(RVr,"CamembertForMaskedLM"),RVr.forEach(t),eho=r(b4e," (CamemBERT model)"),b4e.forEach(t),oho=i(S),S_=n(S,"LI",{});var v4e=s(S_);Eee=n(v4e,"STRONG",{});var SVr=s(Eee);rho=r(SVr,"ctrl"),SVr.forEach(t),tho=r(v4e," \u2014 "),AP=n(v4e,"A",{href:!0});var PVr=s(AP);aho=r(PVr,"CTRLLMHeadModel"),PVr.forEach(t),nho=r(v4e," (CTRL model)"),v4e.forEach(t),sho=i(S),P_=n(S,"LI",{});var T4e=s(P_);yee=n(T4e,"STRONG",{});var $Vr=s(yee);lho=r($Vr,"data2vec-text"),$Vr.forEach(t),iho=r(T4e," \u2014 "),LP=n(T4e,"A",{href:!0});var IVr=s(LP);dho=r(IVr,"Data2VecTextForMaskedLM"),IVr.forEach(t),cho=r(T4e," (Data2VecText model)"),T4e.forEach(t),fho=i(S),$_=n(S,"LI",{});var F4e=s($_);wee=n(F4e,"STRONG",{});var NVr=s(wee);mho=r(NVr,"deberta"),NVr.forEach(t),gho=r(F4e," \u2014 "),BP=n(F4e,"A",{href:!0});var DVr=s(BP);hho=r(DVr,"DebertaForMaskedLM"),DVr.forEach(t),pho=r(F4e," (DeBERTa model)"),F4e.forEach(t),_ho=i(S),I_=n(S,"LI",{});var C4e=s(I_);Aee=n(C4e,"STRONG",{});var jVr=s(Aee);uho=r(jVr,"deberta-v2"),jVr.forEach(t),bho=r(C4e," \u2014 "),xP=n(C4e,"A",{href:!0});var qVr=s(xP);vho=r(qVr,"DebertaV2ForMaskedLM"),qVr.forEach(t),Tho=r(C4e," (DeBERTa-v2 model)"),C4e.forEach(t),Fho=i(S),N_=n(S,"LI",{});var M4e=s(N_);Lee=n(M4e,"STRONG",{});var GVr=s(Lee);Cho=r(GVr,"distilbert"),GVr.forEach(t),Mho=r(M4e," \u2014 "),kP=n(M4e,"A",{href:!0});var OVr=s(kP);Eho=r(OVr,"DistilBertForMaskedLM"),OVr.forEach(t),yho=r(M4e," (DistilBERT model)"),M4e.forEach(t),who=i(S),D_=n(S,"LI",{});var E4e=s(D_);Bee=n(E4e,"STRONG",{});var XVr=s(Bee);Aho=r(XVr,"electra"),XVr.forEach(t),Lho=r(E4e," \u2014 "),RP=n(E4e,"A",{href:!0});var VVr=s(RP);Bho=r(VVr,"ElectraForPreTraining"),VVr.forEach(t),xho=r(E4e," (ELECTRA model)"),E4e.forEach(t),kho=i(S),j_=n(S,"LI",{});var y4e=s(j_);xee=n(y4e,"STRONG",{});var zVr=s(xee);Rho=r(zVr,"flaubert"),zVr.forEach(t),Sho=r(y4e," \u2014 "),SP=n(y4e,"A",{href:!0});var WVr=s(SP);Pho=r(WVr,"FlaubertWithLMHeadModel"),WVr.forEach(t),$ho=r(y4e," (FlauBERT model)"),y4e.forEach(t),Iho=i(S),q_=n(S,"LI",{});var w4e=s(q_);kee=n(w4e,"STRONG",{});var QVr=s(kee);Nho=r(QVr,"fnet"),QVr.forEach(t),Dho=r(w4e," \u2014 "),PP=n(w4e,"A",{href:!0});var HVr=s(PP);jho=r(HVr,"FNetForPreTraining"),HVr.forEach(t),qho=r(w4e," (FNet model)"),w4e.forEach(t),Gho=i(S),G_=n(S,"LI",{});var A4e=s(G_);Ree=n(A4e,"STRONG",{});var UVr=s(Ree);Oho=r(UVr,"fsmt"),UVr.forEach(t),Xho=r(A4e," \u2014 "),$P=n(A4e,"A",{href:!0});var JVr=s($P);Vho=r(JVr,"FSMTForConditionalGeneration"),JVr.forEach(t),zho=r(A4e," (FairSeq Machine-Translation model)"),A4e.forEach(t),Who=i(S),O_=n(S,"LI",{});var L4e=s(O_);See=n(L4e,"STRONG",{});var YVr=s(See);Qho=r(YVr,"funnel"),YVr.forEach(t),Hho=r(L4e," \u2014 "),IP=n(L4e,"A",{href:!0});var KVr=s(IP);Uho=r(KVr,"FunnelForPreTraining"),KVr.forEach(t),Jho=r(L4e," (Funnel Transformer model)"),L4e.forEach(t),Yho=i(S),X_=n(S,"LI",{});var B4e=s(X_);Pee=n(B4e,"STRONG",{});var ZVr=s(Pee);Kho=r(ZVr,"gpt2"),ZVr.forEach(t),Zho=r(B4e," \u2014 "),NP=n(B4e,"A",{href:!0});var ezr=s(NP);epo=r(ezr,"GPT2LMHeadModel"),ezr.forEach(t),opo=r(B4e," (OpenAI GPT-2 model)"),B4e.forEach(t),rpo=i(S),V_=n(S,"LI",{});var x4e=s(V_);$ee=n(x4e,"STRONG",{});var ozr=s($ee);tpo=r(ozr,"ibert"),ozr.forEach(t),apo=r(x4e," \u2014 "),DP=n(x4e,"A",{href:!0});var rzr=s(DP);npo=r(rzr,"IBertForMaskedLM"),rzr.forEach(t),spo=r(x4e," (I-BERT model)"),x4e.forEach(t),lpo=i(S),z_=n(S,"LI",{});var k4e=s(z_);Iee=n(k4e,"STRONG",{});var tzr=s(Iee);ipo=r(tzr,"layoutlm"),tzr.forEach(t),dpo=r(k4e," \u2014 "),jP=n(k4e,"A",{href:!0});var azr=s(jP);cpo=r(azr,"LayoutLMForMaskedLM"),azr.forEach(t),fpo=r(k4e," (LayoutLM model)"),k4e.forEach(t),mpo=i(S),W_=n(S,"LI",{});var R4e=s(W_);Nee=n(R4e,"STRONG",{});var nzr=s(Nee);gpo=r(nzr,"longformer"),nzr.forEach(t),hpo=r(R4e," \u2014 "),qP=n(R4e,"A",{href:!0});var szr=s(qP);ppo=r(szr,"LongformerForMaskedLM"),szr.forEach(t),_po=r(R4e," (Longformer model)"),R4e.forEach(t),upo=i(S),Q_=n(S,"LI",{});var S4e=s(Q_);Dee=n(S4e,"STRONG",{});var lzr=s(Dee);bpo=r(lzr,"lxmert"),lzr.forEach(t),vpo=r(S4e," \u2014 "),GP=n(S4e,"A",{href:!0});var izr=s(GP);Tpo=r(izr,"LxmertForPreTraining"),izr.forEach(t),Fpo=r(S4e," (LXMERT model)"),S4e.forEach(t),Cpo=i(S),H_=n(S,"LI",{});var P4e=s(H_);jee=n(P4e,"STRONG",{});var dzr=s(jee);Mpo=r(dzr,"megatron-bert"),dzr.forEach(t),Epo=r(P4e," \u2014 "),OP=n(P4e,"A",{href:!0});var czr=s(OP);ypo=r(czr,"MegatronBertForPreTraining"),czr.forEach(t),wpo=r(P4e," (MegatronBert model)"),P4e.forEach(t),Apo=i(S),U_=n(S,"LI",{});var $4e=s(U_);qee=n($4e,"STRONG",{});var fzr=s(qee);Lpo=r(fzr,"mobilebert"),fzr.forEach(t),Bpo=r($4e," \u2014 "),XP=n($4e,"A",{href:!0});var mzr=s(XP);xpo=r(mzr,"MobileBertForPreTraining"),mzr.forEach(t),kpo=r($4e," (MobileBERT model)"),$4e.forEach(t),Rpo=i(S),J_=n(S,"LI",{});var I4e=s(J_);Gee=n(I4e,"STRONG",{});var gzr=s(Gee);Spo=r(gzr,"mpnet"),gzr.forEach(t),Ppo=r(I4e," \u2014 "),VP=n(I4e,"A",{href:!0});var hzr=s(VP);$po=r(hzr,"MPNetForMaskedLM"),hzr.forEach(t),Ipo=r(I4e," (MPNet model)"),I4e.forEach(t),Npo=i(S),Y_=n(S,"LI",{});var N4e=s(Y_);Oee=n(N4e,"STRONG",{});var pzr=s(Oee);Dpo=r(pzr,"openai-gpt"),pzr.forEach(t),jpo=r(N4e," \u2014 "),zP=n(N4e,"A",{href:!0});var _zr=s(zP);qpo=r(_zr,"OpenAIGPTLMHeadModel"),_zr.forEach(t),Gpo=r(N4e," (OpenAI GPT model)"),N4e.forEach(t),Opo=i(S),K_=n(S,"LI",{});var D4e=s(K_);Xee=n(D4e,"STRONG",{});var uzr=s(Xee);Xpo=r(uzr,"retribert"),uzr.forEach(t),Vpo=r(D4e," \u2014 "),WP=n(D4e,"A",{href:!0});var bzr=s(WP);zpo=r(bzr,"RetriBertModel"),bzr.forEach(t),Wpo=r(D4e," (RetriBERT model)"),D4e.forEach(t),Qpo=i(S),Z_=n(S,"LI",{});var j4e=s(Z_);Vee=n(j4e,"STRONG",{});var vzr=s(Vee);Hpo=r(vzr,"roberta"),vzr.forEach(t),Upo=r(j4e," \u2014 "),QP=n(j4e,"A",{href:!0});var Tzr=s(QP);Jpo=r(Tzr,"RobertaForMaskedLM"),Tzr.forEach(t),Ypo=r(j4e," (RoBERTa model)"),j4e.forEach(t),Kpo=i(S),eu=n(S,"LI",{});var q4e=s(eu);zee=n(q4e,"STRONG",{});var Fzr=s(zee);Zpo=r(Fzr,"squeezebert"),Fzr.forEach(t),e_o=r(q4e," \u2014 "),HP=n(q4e,"A",{href:!0});var Czr=s(HP);o_o=r(Czr,"SqueezeBertForMaskedLM"),Czr.forEach(t),r_o=r(q4e," (SqueezeBERT model)"),q4e.forEach(t),t_o=i(S),ou=n(S,"LI",{});var G4e=s(ou);Wee=n(G4e,"STRONG",{});var Mzr=s(Wee);a_o=r(Mzr,"t5"),Mzr.forEach(t),n_o=r(G4e," \u2014 "),UP=n(G4e,"A",{href:!0});var Ezr=s(UP);s_o=r(Ezr,"T5ForConditionalGeneration"),Ezr.forEach(t),l_o=r(G4e," (T5 model)"),G4e.forEach(t),i_o=i(S),ru=n(S,"LI",{});var O4e=s(ru);Qee=n(O4e,"STRONG",{});var yzr=s(Qee);d_o=r(yzr,"tapas"),yzr.forEach(t),c_o=r(O4e," \u2014 "),JP=n(O4e,"A",{href:!0});var wzr=s(JP);f_o=r(wzr,"TapasForMaskedLM"),wzr.forEach(t),m_o=r(O4e," (TAPAS model)"),O4e.forEach(t),g_o=i(S),tu=n(S,"LI",{});var X4e=s(tu);Hee=n(X4e,"STRONG",{});var Azr=s(Hee);h_o=r(Azr,"transfo-xl"),Azr.forEach(t),p_o=r(X4e," \u2014 "),YP=n(X4e,"A",{href:!0});var Lzr=s(YP);__o=r(Lzr,"TransfoXLLMHeadModel"),Lzr.forEach(t),u_o=r(X4e," (Transformer-XL model)"),X4e.forEach(t),b_o=i(S),au=n(S,"LI",{});var V4e=s(au);Uee=n(V4e,"STRONG",{});var Bzr=s(Uee);v_o=r(Bzr,"unispeech"),Bzr.forEach(t),T_o=r(V4e," \u2014 "),KP=n(V4e,"A",{href:!0});var xzr=s(KP);F_o=r(xzr,"UniSpeechForPreTraining"),xzr.forEach(t),C_o=r(V4e," (UniSpeech model)"),V4e.forEach(t),M_o=i(S),nu=n(S,"LI",{});var z4e=s(nu);Jee=n(z4e,"STRONG",{});var kzr=s(Jee);E_o=r(kzr,"unispeech-sat"),kzr.forEach(t),y_o=r(z4e," \u2014 "),ZP=n(z4e,"A",{href:!0});var Rzr=s(ZP);w_o=r(Rzr,"UniSpeechSatForPreTraining"),Rzr.forEach(t),A_o=r(z4e," (UniSpeechSat model)"),z4e.forEach(t),L_o=i(S),su=n(S,"LI",{});var W4e=s(su);Yee=n(W4e,"STRONG",{});var Szr=s(Yee);B_o=r(Szr,"visual_bert"),Szr.forEach(t),x_o=r(W4e," \u2014 "),e$=n(W4e,"A",{href:!0});var Pzr=s(e$);k_o=r(Pzr,"VisualBertForPreTraining"),Pzr.forEach(t),R_o=r(W4e," (VisualBert model)"),W4e.forEach(t),S_o=i(S),lu=n(S,"LI",{});var Q4e=s(lu);Kee=n(Q4e,"STRONG",{});var $zr=s(Kee);P_o=r($zr,"vit_mae"),$zr.forEach(t),$_o=r(Q4e," \u2014 "),o$=n(Q4e,"A",{href:!0});var Izr=s(o$);I_o=r(Izr,"ViTMAEForPreTraining"),Izr.forEach(t),N_o=r(Q4e," (ViTMAE model)"),Q4e.forEach(t),D_o=i(S),iu=n(S,"LI",{});var H4e=s(iu);Zee=n(H4e,"STRONG",{});var Nzr=s(Zee);j_o=r(Nzr,"wav2vec2"),Nzr.forEach(t),q_o=r(H4e," \u2014 "),r$=n(H4e,"A",{href:!0});var Dzr=s(r$);G_o=r(Dzr,"Wav2Vec2ForPreTraining"),Dzr.forEach(t),O_o=r(H4e," (Wav2Vec2 model)"),H4e.forEach(t),X_o=i(S),du=n(S,"LI",{});var U4e=s(du);eoe=n(U4e,"STRONG",{});var jzr=s(eoe);V_o=r(jzr,"xlm"),jzr.forEach(t),z_o=r(U4e," \u2014 "),t$=n(U4e,"A",{href:!0});var qzr=s(t$);W_o=r(qzr,"XLMWithLMHeadModel"),qzr.forEach(t),Q_o=r(U4e," (XLM model)"),U4e.forEach(t),H_o=i(S),cu=n(S,"LI",{});var J4e=s(cu);ooe=n(J4e,"STRONG",{});var Gzr=s(ooe);U_o=r(Gzr,"xlm-roberta"),Gzr.forEach(t),J_o=r(J4e," \u2014 "),a$=n(J4e,"A",{href:!0});var Ozr=s(a$);Y_o=r(Ozr,"XLMRobertaForMaskedLM"),Ozr.forEach(t),K_o=r(J4e," (XLM-RoBERTa model)"),J4e.forEach(t),Z_o=i(S),fu=n(S,"LI",{});var Y4e=s(fu);roe=n(Y4e,"STRONG",{});var Xzr=s(roe);euo=r(Xzr,"xlm-roberta-xl"),Xzr.forEach(t),ouo=r(Y4e," \u2014 "),n$=n(Y4e,"A",{href:!0});var Vzr=s(n$);ruo=r(Vzr,"XLMRobertaXLForMaskedLM"),Vzr.forEach(t),tuo=r(Y4e," (XLM-RoBERTa-XL model)"),Y4e.forEach(t),auo=i(S),mu=n(S,"LI",{});var K4e=s(mu);toe=n(K4e,"STRONG",{});var zzr=s(toe);nuo=r(zzr,"xlnet"),zzr.forEach(t),suo=r(K4e," \u2014 "),s$=n(K4e,"A",{href:!0});var Wzr=s(s$);luo=r(Wzr,"XLNetLMHeadModel"),Wzr.forEach(t),iuo=r(K4e," (XLNet model)"),K4e.forEach(t),S.forEach(t),duo=i(Gt),gu=n(Gt,"P",{});var Z4e=s(gu);cuo=r(Z4e,"The model is set in evaluation mode by default using "),aoe=n(Z4e,"CODE",{});var Qzr=s(aoe);fuo=r(Qzr,"model.eval()"),Qzr.forEach(t),muo=r(Z4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),noe=n(Z4e,"CODE",{});var Hzr=s(noe);guo=r(Hzr,"model.train()"),Hzr.forEach(t),Z4e.forEach(t),huo=i(Gt),soe=n(Gt,"P",{});var Uzr=s(soe);puo=r(Uzr,"Examples:"),Uzr.forEach(t),_uo=i(Gt),m(KE.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),uke=i(c),rd=n(c,"H2",{class:!0});var wSe=s(rd);hu=n(wSe,"A",{id:!0,class:!0,href:!0});var Jzr=s(hu);loe=n(Jzr,"SPAN",{});var Yzr=s(loe);m(ZE.$$.fragment,Yzr),Yzr.forEach(t),Jzr.forEach(t),uuo=i(wSe),ioe=n(wSe,"SPAN",{});var Kzr=s(ioe);buo=r(Kzr,"AutoModelForCausalLM"),Kzr.forEach(t),wSe.forEach(t),bke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(e5.$$.fragment,Js),vuo=i(Js),td=n(Js,"P",{});var Zz=s(td);Tuo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),doe=n(Zz,"CODE",{});var Zzr=s(doe);Fuo=r(Zzr,"from_pretrained()"),Zzr.forEach(t),Cuo=r(Zz,"class method or the "),coe=n(Zz,"CODE",{});var eWr=s(coe);Muo=r(eWr,"from_config()"),eWr.forEach(t),Euo=r(Zz,`class
method.`),Zz.forEach(t),yuo=i(Js),o5=n(Js,"P",{});var ASe=s(o5);wuo=r(ASe,"This class cannot be instantiated directly using "),foe=n(ASe,"CODE",{});var oWr=s(foe);Auo=r(oWr,"__init__()"),oWr.forEach(t),Luo=r(ASe," (throws an error)."),ASe.forEach(t),Buo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(r5.$$.fragment,Ys),xuo=i(Ys),moe=n(Ys,"P",{});var rWr=s(moe);kuo=r(rWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rWr.forEach(t),Ruo=i(Ys),ad=n(Ys,"P",{});var eW=s(ad);Suo=r(eW,`Note:
Loading a model from its configuration file does `),goe=n(eW,"STRONG",{});var tWr=s(goe);Puo=r(tWr,"not"),tWr.forEach(t),$uo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(eW,"CODE",{});var aWr=s(hoe);Iuo=r(aWr,"from_pretrained()"),aWr.forEach(t),Nuo=r(eW,"to load the model weights."),eW.forEach(t),Duo=i(Ys),poe=n(Ys,"P",{});var nWr=s(poe);juo=r(nWr,"Examples:"),nWr.forEach(t),quo=i(Ys),m(t5.$$.fragment,Ys),Ys.forEach(t),Guo=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(a5.$$.fragment,Ot),Ouo=i(Ot),_oe=n(Ot,"P",{});var sWr=s(_oe);Xuo=r(sWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sWr.forEach(t),Vuo=i(Ot),Wa=n(Ot,"P",{});var f4=s(Wa);zuo=r(f4,"The model class to instantiate is selected based on the "),uoe=n(f4,"CODE",{});var lWr=s(uoe);Wuo=r(lWr,"model_type"),lWr.forEach(t),Quo=r(f4,` property of the config object (either
passed as an argument or loaded from `),boe=n(f4,"CODE",{});var iWr=s(boe);Huo=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),Uuo=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=n(f4,"CODE",{});var dWr=s(voe);Juo=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),Yuo=r(f4,":"),f4.forEach(t),Kuo=i(Ot),$=n(Ot,"UL",{});var N=s($);pu=n(N,"LI",{});var eEe=s(pu);Toe=n(eEe,"STRONG",{});var cWr=s(Toe);Zuo=r(cWr,"bart"),cWr.forEach(t),e1o=r(eEe," \u2014 "),l$=n(eEe,"A",{href:!0});var fWr=s(l$);o1o=r(fWr,"BartForCausalLM"),fWr.forEach(t),r1o=r(eEe," (BART model)"),eEe.forEach(t),t1o=i(N),_u=n(N,"LI",{});var oEe=s(_u);Foe=n(oEe,"STRONG",{});var mWr=s(Foe);a1o=r(mWr,"bert"),mWr.forEach(t),n1o=r(oEe," \u2014 "),i$=n(oEe,"A",{href:!0});var gWr=s(i$);s1o=r(gWr,"BertLMHeadModel"),gWr.forEach(t),l1o=r(oEe," (BERT model)"),oEe.forEach(t),i1o=i(N),uu=n(N,"LI",{});var rEe=s(uu);Coe=n(rEe,"STRONG",{});var hWr=s(Coe);d1o=r(hWr,"bert-generation"),hWr.forEach(t),c1o=r(rEe," \u2014 "),d$=n(rEe,"A",{href:!0});var pWr=s(d$);f1o=r(pWr,"BertGenerationDecoder"),pWr.forEach(t),m1o=r(rEe," (Bert Generation model)"),rEe.forEach(t),g1o=i(N),bu=n(N,"LI",{});var tEe=s(bu);Moe=n(tEe,"STRONG",{});var _Wr=s(Moe);h1o=r(_Wr,"big_bird"),_Wr.forEach(t),p1o=r(tEe," \u2014 "),c$=n(tEe,"A",{href:!0});var uWr=s(c$);_1o=r(uWr,"BigBirdForCausalLM"),uWr.forEach(t),u1o=r(tEe," (BigBird model)"),tEe.forEach(t),b1o=i(N),vu=n(N,"LI",{});var aEe=s(vu);Eoe=n(aEe,"STRONG",{});var bWr=s(Eoe);v1o=r(bWr,"bigbird_pegasus"),bWr.forEach(t),T1o=r(aEe," \u2014 "),f$=n(aEe,"A",{href:!0});var vWr=s(f$);F1o=r(vWr,"BigBirdPegasusForCausalLM"),vWr.forEach(t),C1o=r(aEe," (BigBirdPegasus model)"),aEe.forEach(t),M1o=i(N),Tu=n(N,"LI",{});var nEe=s(Tu);yoe=n(nEe,"STRONG",{});var TWr=s(yoe);E1o=r(TWr,"blenderbot"),TWr.forEach(t),y1o=r(nEe," \u2014 "),m$=n(nEe,"A",{href:!0});var FWr=s(m$);w1o=r(FWr,"BlenderbotForCausalLM"),FWr.forEach(t),A1o=r(nEe," (Blenderbot model)"),nEe.forEach(t),L1o=i(N),Fu=n(N,"LI",{});var sEe=s(Fu);woe=n(sEe,"STRONG",{});var CWr=s(woe);B1o=r(CWr,"blenderbot-small"),CWr.forEach(t),x1o=r(sEe," \u2014 "),g$=n(sEe,"A",{href:!0});var MWr=s(g$);k1o=r(MWr,"BlenderbotSmallForCausalLM"),MWr.forEach(t),R1o=r(sEe," (BlenderbotSmall model)"),sEe.forEach(t),S1o=i(N),Cu=n(N,"LI",{});var lEe=s(Cu);Aoe=n(lEe,"STRONG",{});var EWr=s(Aoe);P1o=r(EWr,"camembert"),EWr.forEach(t),$1o=r(lEe," \u2014 "),h$=n(lEe,"A",{href:!0});var yWr=s(h$);I1o=r(yWr,"CamembertForCausalLM"),yWr.forEach(t),N1o=r(lEe," (CamemBERT model)"),lEe.forEach(t),D1o=i(N),Mu=n(N,"LI",{});var iEe=s(Mu);Loe=n(iEe,"STRONG",{});var wWr=s(Loe);j1o=r(wWr,"ctrl"),wWr.forEach(t),q1o=r(iEe," \u2014 "),p$=n(iEe,"A",{href:!0});var AWr=s(p$);G1o=r(AWr,"CTRLLMHeadModel"),AWr.forEach(t),O1o=r(iEe," (CTRL model)"),iEe.forEach(t),X1o=i(N),Eu=n(N,"LI",{});var dEe=s(Eu);Boe=n(dEe,"STRONG",{});var LWr=s(Boe);V1o=r(LWr,"data2vec-text"),LWr.forEach(t),z1o=r(dEe," \u2014 "),_$=n(dEe,"A",{href:!0});var BWr=s(_$);W1o=r(BWr,"Data2VecTextForCausalLM"),BWr.forEach(t),Q1o=r(dEe," (Data2VecText model)"),dEe.forEach(t),H1o=i(N),yu=n(N,"LI",{});var cEe=s(yu);xoe=n(cEe,"STRONG",{});var xWr=s(xoe);U1o=r(xWr,"electra"),xWr.forEach(t),J1o=r(cEe," \u2014 "),u$=n(cEe,"A",{href:!0});var kWr=s(u$);Y1o=r(kWr,"ElectraForCausalLM"),kWr.forEach(t),K1o=r(cEe," (ELECTRA model)"),cEe.forEach(t),Z1o=i(N),wu=n(N,"LI",{});var fEe=s(wu);koe=n(fEe,"STRONG",{});var RWr=s(koe);e9o=r(RWr,"gpt2"),RWr.forEach(t),o9o=r(fEe," \u2014 "),b$=n(fEe,"A",{href:!0});var SWr=s(b$);r9o=r(SWr,"GPT2LMHeadModel"),SWr.forEach(t),t9o=r(fEe," (OpenAI GPT-2 model)"),fEe.forEach(t),a9o=i(N),Au=n(N,"LI",{});var mEe=s(Au);Roe=n(mEe,"STRONG",{});var PWr=s(Roe);n9o=r(PWr,"gpt_neo"),PWr.forEach(t),s9o=r(mEe," \u2014 "),v$=n(mEe,"A",{href:!0});var $Wr=s(v$);l9o=r($Wr,"GPTNeoForCausalLM"),$Wr.forEach(t),i9o=r(mEe," (GPT Neo model)"),mEe.forEach(t),d9o=i(N),Lu=n(N,"LI",{});var gEe=s(Lu);Soe=n(gEe,"STRONG",{});var IWr=s(Soe);c9o=r(IWr,"gptj"),IWr.forEach(t),f9o=r(gEe," \u2014 "),T$=n(gEe,"A",{href:!0});var NWr=s(T$);m9o=r(NWr,"GPTJForCausalLM"),NWr.forEach(t),g9o=r(gEe," (GPT-J model)"),gEe.forEach(t),h9o=i(N),Bu=n(N,"LI",{});var hEe=s(Bu);Poe=n(hEe,"STRONG",{});var DWr=s(Poe);p9o=r(DWr,"marian"),DWr.forEach(t),_9o=r(hEe," \u2014 "),F$=n(hEe,"A",{href:!0});var jWr=s(F$);u9o=r(jWr,"MarianForCausalLM"),jWr.forEach(t),b9o=r(hEe," (Marian model)"),hEe.forEach(t),v9o=i(N),xu=n(N,"LI",{});var pEe=s(xu);$oe=n(pEe,"STRONG",{});var qWr=s($oe);T9o=r(qWr,"mbart"),qWr.forEach(t),F9o=r(pEe," \u2014 "),C$=n(pEe,"A",{href:!0});var GWr=s(C$);C9o=r(GWr,"MBartForCausalLM"),GWr.forEach(t),M9o=r(pEe," (mBART model)"),pEe.forEach(t),E9o=i(N),ku=n(N,"LI",{});var _Ee=s(ku);Ioe=n(_Ee,"STRONG",{});var OWr=s(Ioe);y9o=r(OWr,"megatron-bert"),OWr.forEach(t),w9o=r(_Ee," \u2014 "),M$=n(_Ee,"A",{href:!0});var XWr=s(M$);A9o=r(XWr,"MegatronBertForCausalLM"),XWr.forEach(t),L9o=r(_Ee," (MegatronBert model)"),_Ee.forEach(t),B9o=i(N),Ru=n(N,"LI",{});var uEe=s(Ru);Noe=n(uEe,"STRONG",{});var VWr=s(Noe);x9o=r(VWr,"openai-gpt"),VWr.forEach(t),k9o=r(uEe," \u2014 "),E$=n(uEe,"A",{href:!0});var zWr=s(E$);R9o=r(zWr,"OpenAIGPTLMHeadModel"),zWr.forEach(t),S9o=r(uEe," (OpenAI GPT model)"),uEe.forEach(t),P9o=i(N),Su=n(N,"LI",{});var bEe=s(Su);Doe=n(bEe,"STRONG",{});var WWr=s(Doe);$9o=r(WWr,"pegasus"),WWr.forEach(t),I9o=r(bEe," \u2014 "),y$=n(bEe,"A",{href:!0});var QWr=s(y$);N9o=r(QWr,"PegasusForCausalLM"),QWr.forEach(t),D9o=r(bEe," (Pegasus model)"),bEe.forEach(t),j9o=i(N),Pu=n(N,"LI",{});var vEe=s(Pu);joe=n(vEe,"STRONG",{});var HWr=s(joe);q9o=r(HWr,"plbart"),HWr.forEach(t),G9o=r(vEe," \u2014 "),w$=n(vEe,"A",{href:!0});var UWr=s(w$);O9o=r(UWr,"PLBartForCausalLM"),UWr.forEach(t),X9o=r(vEe," (PLBart model)"),vEe.forEach(t),V9o=i(N),$u=n(N,"LI",{});var TEe=s($u);qoe=n(TEe,"STRONG",{});var JWr=s(qoe);z9o=r(JWr,"prophetnet"),JWr.forEach(t),W9o=r(TEe," \u2014 "),A$=n(TEe,"A",{href:!0});var YWr=s(A$);Q9o=r(YWr,"ProphetNetForCausalLM"),YWr.forEach(t),H9o=r(TEe," (ProphetNet model)"),TEe.forEach(t),U9o=i(N),Iu=n(N,"LI",{});var FEe=s(Iu);Goe=n(FEe,"STRONG",{});var KWr=s(Goe);J9o=r(KWr,"qdqbert"),KWr.forEach(t),Y9o=r(FEe," \u2014 "),L$=n(FEe,"A",{href:!0});var ZWr=s(L$);K9o=r(ZWr,"QDQBertLMHeadModel"),ZWr.forEach(t),Z9o=r(FEe," (QDQBert model)"),FEe.forEach(t),ebo=i(N),Nu=n(N,"LI",{});var CEe=s(Nu);Ooe=n(CEe,"STRONG",{});var eQr=s(Ooe);obo=r(eQr,"reformer"),eQr.forEach(t),rbo=r(CEe," \u2014 "),B$=n(CEe,"A",{href:!0});var oQr=s(B$);tbo=r(oQr,"ReformerModelWithLMHead"),oQr.forEach(t),abo=r(CEe," (Reformer model)"),CEe.forEach(t),nbo=i(N),Du=n(N,"LI",{});var MEe=s(Du);Xoe=n(MEe,"STRONG",{});var rQr=s(Xoe);sbo=r(rQr,"rembert"),rQr.forEach(t),lbo=r(MEe," \u2014 "),x$=n(MEe,"A",{href:!0});var tQr=s(x$);ibo=r(tQr,"RemBertForCausalLM"),tQr.forEach(t),dbo=r(MEe," (RemBERT model)"),MEe.forEach(t),cbo=i(N),ju=n(N,"LI",{});var EEe=s(ju);Voe=n(EEe,"STRONG",{});var aQr=s(Voe);fbo=r(aQr,"roberta"),aQr.forEach(t),mbo=r(EEe," \u2014 "),k$=n(EEe,"A",{href:!0});var nQr=s(k$);gbo=r(nQr,"RobertaForCausalLM"),nQr.forEach(t),hbo=r(EEe," (RoBERTa model)"),EEe.forEach(t),pbo=i(N),qu=n(N,"LI",{});var yEe=s(qu);zoe=n(yEe,"STRONG",{});var sQr=s(zoe);_bo=r(sQr,"roformer"),sQr.forEach(t),ubo=r(yEe," \u2014 "),R$=n(yEe,"A",{href:!0});var lQr=s(R$);bbo=r(lQr,"RoFormerForCausalLM"),lQr.forEach(t),vbo=r(yEe," (RoFormer model)"),yEe.forEach(t),Tbo=i(N),Gu=n(N,"LI",{});var wEe=s(Gu);Woe=n(wEe,"STRONG",{});var iQr=s(Woe);Fbo=r(iQr,"speech_to_text_2"),iQr.forEach(t),Cbo=r(wEe," \u2014 "),S$=n(wEe,"A",{href:!0});var dQr=s(S$);Mbo=r(dQr,"Speech2Text2ForCausalLM"),dQr.forEach(t),Ebo=r(wEe," (Speech2Text2 model)"),wEe.forEach(t),ybo=i(N),Ou=n(N,"LI",{});var AEe=s(Ou);Qoe=n(AEe,"STRONG",{});var cQr=s(Qoe);wbo=r(cQr,"transfo-xl"),cQr.forEach(t),Abo=r(AEe," \u2014 "),P$=n(AEe,"A",{href:!0});var fQr=s(P$);Lbo=r(fQr,"TransfoXLLMHeadModel"),fQr.forEach(t),Bbo=r(AEe," (Transformer-XL model)"),AEe.forEach(t),xbo=i(N),Xu=n(N,"LI",{});var LEe=s(Xu);Hoe=n(LEe,"STRONG",{});var mQr=s(Hoe);kbo=r(mQr,"trocr"),mQr.forEach(t),Rbo=r(LEe," \u2014 "),$$=n(LEe,"A",{href:!0});var gQr=s($$);Sbo=r(gQr,"TrOCRForCausalLM"),gQr.forEach(t),Pbo=r(LEe," (TrOCR model)"),LEe.forEach(t),$bo=i(N),Vu=n(N,"LI",{});var BEe=s(Vu);Uoe=n(BEe,"STRONG",{});var hQr=s(Uoe);Ibo=r(hQr,"xglm"),hQr.forEach(t),Nbo=r(BEe," \u2014 "),I$=n(BEe,"A",{href:!0});var pQr=s(I$);Dbo=r(pQr,"XGLMForCausalLM"),pQr.forEach(t),jbo=r(BEe," (XGLM model)"),BEe.forEach(t),qbo=i(N),zu=n(N,"LI",{});var xEe=s(zu);Joe=n(xEe,"STRONG",{});var _Qr=s(Joe);Gbo=r(_Qr,"xlm"),_Qr.forEach(t),Obo=r(xEe," \u2014 "),N$=n(xEe,"A",{href:!0});var uQr=s(N$);Xbo=r(uQr,"XLMWithLMHeadModel"),uQr.forEach(t),Vbo=r(xEe," (XLM model)"),xEe.forEach(t),zbo=i(N),Wu=n(N,"LI",{});var kEe=s(Wu);Yoe=n(kEe,"STRONG",{});var bQr=s(Yoe);Wbo=r(bQr,"xlm-prophetnet"),bQr.forEach(t),Qbo=r(kEe," \u2014 "),D$=n(kEe,"A",{href:!0});var vQr=s(D$);Hbo=r(vQr,"XLMProphetNetForCausalLM"),vQr.forEach(t),Ubo=r(kEe," (XLMProphetNet model)"),kEe.forEach(t),Jbo=i(N),Qu=n(N,"LI",{});var REe=s(Qu);Koe=n(REe,"STRONG",{});var TQr=s(Koe);Ybo=r(TQr,"xlm-roberta"),TQr.forEach(t),Kbo=r(REe," \u2014 "),j$=n(REe,"A",{href:!0});var FQr=s(j$);Zbo=r(FQr,"XLMRobertaForCausalLM"),FQr.forEach(t),e3o=r(REe," (XLM-RoBERTa model)"),REe.forEach(t),o3o=i(N),Hu=n(N,"LI",{});var SEe=s(Hu);Zoe=n(SEe,"STRONG",{});var CQr=s(Zoe);r3o=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),t3o=r(SEe," \u2014 "),q$=n(SEe,"A",{href:!0});var MQr=s(q$);a3o=r(MQr,"XLMRobertaXLForCausalLM"),MQr.forEach(t),n3o=r(SEe," (XLM-RoBERTa-XL model)"),SEe.forEach(t),s3o=i(N),Uu=n(N,"LI",{});var PEe=s(Uu);ere=n(PEe,"STRONG",{});var EQr=s(ere);l3o=r(EQr,"xlnet"),EQr.forEach(t),i3o=r(PEe," \u2014 "),G$=n(PEe,"A",{href:!0});var yQr=s(G$);d3o=r(yQr,"XLNetLMHeadModel"),yQr.forEach(t),c3o=r(PEe," (XLNet model)"),PEe.forEach(t),N.forEach(t),f3o=i(Ot),Ju=n(Ot,"P",{});var $Ee=s(Ju);m3o=r($Ee,"The model is set in evaluation mode by default using "),ore=n($Ee,"CODE",{});var wQr=s(ore);g3o=r(wQr,"model.eval()"),wQr.forEach(t),h3o=r($Ee,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=n($Ee,"CODE",{});var AQr=s(rre);p3o=r(AQr,"model.train()"),AQr.forEach(t),$Ee.forEach(t),_3o=i(Ot),tre=n(Ot,"P",{});var LQr=s(tre);u3o=r(LQr,"Examples:"),LQr.forEach(t),b3o=i(Ot),m(n5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),vke=i(c),nd=n(c,"H2",{class:!0});var LSe=s(nd);Yu=n(LSe,"A",{id:!0,class:!0,href:!0});var BQr=s(Yu);are=n(BQr,"SPAN",{});var xQr=s(are);m(s5.$$.fragment,xQr),xQr.forEach(t),BQr.forEach(t),v3o=i(LSe),nre=n(LSe,"SPAN",{});var kQr=s(nre);T3o=r(kQr,"AutoModelForMaskedLM"),kQr.forEach(t),LSe.forEach(t),Tke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(l5.$$.fragment,Ks),F3o=i(Ks),sd=n(Ks,"P",{});var oW=s(sd);C3o=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sre=n(oW,"CODE",{});var RQr=s(sre);M3o=r(RQr,"from_pretrained()"),RQr.forEach(t),E3o=r(oW,"class method or the "),lre=n(oW,"CODE",{});var SQr=s(lre);y3o=r(SQr,"from_config()"),SQr.forEach(t),w3o=r(oW,`class
method.`),oW.forEach(t),A3o=i(Ks),i5=n(Ks,"P",{});var BSe=s(i5);L3o=r(BSe,"This class cannot be instantiated directly using "),ire=n(BSe,"CODE",{});var PQr=s(ire);B3o=r(PQr,"__init__()"),PQr.forEach(t),x3o=r(BSe," (throws an error)."),BSe.forEach(t),k3o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(d5.$$.fragment,Zs),R3o=i(Zs),dre=n(Zs,"P",{});var $Qr=s(dre);S3o=r($Qr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Qr.forEach(t),P3o=i(Zs),ld=n(Zs,"P",{});var rW=s(ld);$3o=r(rW,`Note:
Loading a model from its configuration file does `),cre=n(rW,"STRONG",{});var IQr=s(cre);I3o=r(IQr,"not"),IQr.forEach(t),N3o=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(rW,"CODE",{});var NQr=s(fre);D3o=r(NQr,"from_pretrained()"),NQr.forEach(t),j3o=r(rW,"to load the model weights."),rW.forEach(t),q3o=i(Zs),mre=n(Zs,"P",{});var DQr=s(mre);G3o=r(DQr,"Examples:"),DQr.forEach(t),O3o=i(Zs),m(c5.$$.fragment,Zs),Zs.forEach(t),X3o=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(f5.$$.fragment,Xt),V3o=i(Xt),gre=n(Xt,"P",{});var jQr=s(gre);z3o=r(jQr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jQr.forEach(t),W3o=i(Xt),Qa=n(Xt,"P",{});var m4=s(Qa);Q3o=r(m4,"The model class to instantiate is selected based on the "),hre=n(m4,"CODE",{});var qQr=s(hre);H3o=r(qQr,"model_type"),qQr.forEach(t),U3o=r(m4,` property of the config object (either
passed as an argument or loaded from `),pre=n(m4,"CODE",{});var GQr=s(pre);J3o=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),Y3o=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=n(m4,"CODE",{});var OQr=s(_re);K3o=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),Z3o=r(m4,":"),m4.forEach(t),e2o=i(Xt),I=n(Xt,"UL",{});var D=s(I);Ku=n(D,"LI",{});var IEe=s(Ku);ure=n(IEe,"STRONG",{});var XQr=s(ure);o2o=r(XQr,"albert"),XQr.forEach(t),r2o=r(IEe," \u2014 "),O$=n(IEe,"A",{href:!0});var VQr=s(O$);t2o=r(VQr,"AlbertForMaskedLM"),VQr.forEach(t),a2o=r(IEe," (ALBERT model)"),IEe.forEach(t),n2o=i(D),Zu=n(D,"LI",{});var NEe=s(Zu);bre=n(NEe,"STRONG",{});var zQr=s(bre);s2o=r(zQr,"bart"),zQr.forEach(t),l2o=r(NEe," \u2014 "),X$=n(NEe,"A",{href:!0});var WQr=s(X$);i2o=r(WQr,"BartForConditionalGeneration"),WQr.forEach(t),d2o=r(NEe," (BART model)"),NEe.forEach(t),c2o=i(D),e1=n(D,"LI",{});var DEe=s(e1);vre=n(DEe,"STRONG",{});var QQr=s(vre);f2o=r(QQr,"bert"),QQr.forEach(t),m2o=r(DEe," \u2014 "),V$=n(DEe,"A",{href:!0});var HQr=s(V$);g2o=r(HQr,"BertForMaskedLM"),HQr.forEach(t),h2o=r(DEe," (BERT model)"),DEe.forEach(t),p2o=i(D),o1=n(D,"LI",{});var jEe=s(o1);Tre=n(jEe,"STRONG",{});var UQr=s(Tre);_2o=r(UQr,"big_bird"),UQr.forEach(t),u2o=r(jEe," \u2014 "),z$=n(jEe,"A",{href:!0});var JQr=s(z$);b2o=r(JQr,"BigBirdForMaskedLM"),JQr.forEach(t),v2o=r(jEe," (BigBird model)"),jEe.forEach(t),T2o=i(D),r1=n(D,"LI",{});var qEe=s(r1);Fre=n(qEe,"STRONG",{});var YQr=s(Fre);F2o=r(YQr,"camembert"),YQr.forEach(t),C2o=r(qEe," \u2014 "),W$=n(qEe,"A",{href:!0});var KQr=s(W$);M2o=r(KQr,"CamembertForMaskedLM"),KQr.forEach(t),E2o=r(qEe," (CamemBERT model)"),qEe.forEach(t),y2o=i(D),t1=n(D,"LI",{});var GEe=s(t1);Cre=n(GEe,"STRONG",{});var ZQr=s(Cre);w2o=r(ZQr,"convbert"),ZQr.forEach(t),A2o=r(GEe," \u2014 "),Q$=n(GEe,"A",{href:!0});var eHr=s(Q$);L2o=r(eHr,"ConvBertForMaskedLM"),eHr.forEach(t),B2o=r(GEe," (ConvBERT model)"),GEe.forEach(t),x2o=i(D),a1=n(D,"LI",{});var OEe=s(a1);Mre=n(OEe,"STRONG",{});var oHr=s(Mre);k2o=r(oHr,"data2vec-text"),oHr.forEach(t),R2o=r(OEe," \u2014 "),H$=n(OEe,"A",{href:!0});var rHr=s(H$);S2o=r(rHr,"Data2VecTextForMaskedLM"),rHr.forEach(t),P2o=r(OEe," (Data2VecText model)"),OEe.forEach(t),$2o=i(D),n1=n(D,"LI",{});var XEe=s(n1);Ere=n(XEe,"STRONG",{});var tHr=s(Ere);I2o=r(tHr,"deberta"),tHr.forEach(t),N2o=r(XEe," \u2014 "),U$=n(XEe,"A",{href:!0});var aHr=s(U$);D2o=r(aHr,"DebertaForMaskedLM"),aHr.forEach(t),j2o=r(XEe," (DeBERTa model)"),XEe.forEach(t),q2o=i(D),s1=n(D,"LI",{});var VEe=s(s1);yre=n(VEe,"STRONG",{});var nHr=s(yre);G2o=r(nHr,"deberta-v2"),nHr.forEach(t),O2o=r(VEe," \u2014 "),J$=n(VEe,"A",{href:!0});var sHr=s(J$);X2o=r(sHr,"DebertaV2ForMaskedLM"),sHr.forEach(t),V2o=r(VEe," (DeBERTa-v2 model)"),VEe.forEach(t),z2o=i(D),l1=n(D,"LI",{});var zEe=s(l1);wre=n(zEe,"STRONG",{});var lHr=s(wre);W2o=r(lHr,"distilbert"),lHr.forEach(t),Q2o=r(zEe," \u2014 "),Y$=n(zEe,"A",{href:!0});var iHr=s(Y$);H2o=r(iHr,"DistilBertForMaskedLM"),iHr.forEach(t),U2o=r(zEe," (DistilBERT model)"),zEe.forEach(t),J2o=i(D),i1=n(D,"LI",{});var WEe=s(i1);Are=n(WEe,"STRONG",{});var dHr=s(Are);Y2o=r(dHr,"electra"),dHr.forEach(t),K2o=r(WEe," \u2014 "),K$=n(WEe,"A",{href:!0});var cHr=s(K$);Z2o=r(cHr,"ElectraForMaskedLM"),cHr.forEach(t),evo=r(WEe," (ELECTRA model)"),WEe.forEach(t),ovo=i(D),d1=n(D,"LI",{});var QEe=s(d1);Lre=n(QEe,"STRONG",{});var fHr=s(Lre);rvo=r(fHr,"flaubert"),fHr.forEach(t),tvo=r(QEe," \u2014 "),Z$=n(QEe,"A",{href:!0});var mHr=s(Z$);avo=r(mHr,"FlaubertWithLMHeadModel"),mHr.forEach(t),nvo=r(QEe," (FlauBERT model)"),QEe.forEach(t),svo=i(D),c1=n(D,"LI",{});var HEe=s(c1);Bre=n(HEe,"STRONG",{});var gHr=s(Bre);lvo=r(gHr,"fnet"),gHr.forEach(t),ivo=r(HEe," \u2014 "),eI=n(HEe,"A",{href:!0});var hHr=s(eI);dvo=r(hHr,"FNetForMaskedLM"),hHr.forEach(t),cvo=r(HEe," (FNet model)"),HEe.forEach(t),fvo=i(D),f1=n(D,"LI",{});var UEe=s(f1);xre=n(UEe,"STRONG",{});var pHr=s(xre);mvo=r(pHr,"funnel"),pHr.forEach(t),gvo=r(UEe," \u2014 "),oI=n(UEe,"A",{href:!0});var _Hr=s(oI);hvo=r(_Hr,"FunnelForMaskedLM"),_Hr.forEach(t),pvo=r(UEe," (Funnel Transformer model)"),UEe.forEach(t),_vo=i(D),m1=n(D,"LI",{});var JEe=s(m1);kre=n(JEe,"STRONG",{});var uHr=s(kre);uvo=r(uHr,"ibert"),uHr.forEach(t),bvo=r(JEe," \u2014 "),rI=n(JEe,"A",{href:!0});var bHr=s(rI);vvo=r(bHr,"IBertForMaskedLM"),bHr.forEach(t),Tvo=r(JEe," (I-BERT model)"),JEe.forEach(t),Fvo=i(D),g1=n(D,"LI",{});var YEe=s(g1);Rre=n(YEe,"STRONG",{});var vHr=s(Rre);Cvo=r(vHr,"layoutlm"),vHr.forEach(t),Mvo=r(YEe," \u2014 "),tI=n(YEe,"A",{href:!0});var THr=s(tI);Evo=r(THr,"LayoutLMForMaskedLM"),THr.forEach(t),yvo=r(YEe," (LayoutLM model)"),YEe.forEach(t),wvo=i(D),h1=n(D,"LI",{});var KEe=s(h1);Sre=n(KEe,"STRONG",{});var FHr=s(Sre);Avo=r(FHr,"longformer"),FHr.forEach(t),Lvo=r(KEe," \u2014 "),aI=n(KEe,"A",{href:!0});var CHr=s(aI);Bvo=r(CHr,"LongformerForMaskedLM"),CHr.forEach(t),xvo=r(KEe," (Longformer model)"),KEe.forEach(t),kvo=i(D),p1=n(D,"LI",{});var ZEe=s(p1);Pre=n(ZEe,"STRONG",{});var MHr=s(Pre);Rvo=r(MHr,"mbart"),MHr.forEach(t),Svo=r(ZEe," \u2014 "),nI=n(ZEe,"A",{href:!0});var EHr=s(nI);Pvo=r(EHr,"MBartForConditionalGeneration"),EHr.forEach(t),$vo=r(ZEe," (mBART model)"),ZEe.forEach(t),Ivo=i(D),_1=n(D,"LI",{});var e5e=s(_1);$re=n(e5e,"STRONG",{});var yHr=s($re);Nvo=r(yHr,"megatron-bert"),yHr.forEach(t),Dvo=r(e5e," \u2014 "),sI=n(e5e,"A",{href:!0});var wHr=s(sI);jvo=r(wHr,"MegatronBertForMaskedLM"),wHr.forEach(t),qvo=r(e5e," (MegatronBert model)"),e5e.forEach(t),Gvo=i(D),u1=n(D,"LI",{});var o5e=s(u1);Ire=n(o5e,"STRONG",{});var AHr=s(Ire);Ovo=r(AHr,"mobilebert"),AHr.forEach(t),Xvo=r(o5e," \u2014 "),lI=n(o5e,"A",{href:!0});var LHr=s(lI);Vvo=r(LHr,"MobileBertForMaskedLM"),LHr.forEach(t),zvo=r(o5e," (MobileBERT model)"),o5e.forEach(t),Wvo=i(D),b1=n(D,"LI",{});var r5e=s(b1);Nre=n(r5e,"STRONG",{});var BHr=s(Nre);Qvo=r(BHr,"mpnet"),BHr.forEach(t),Hvo=r(r5e," \u2014 "),iI=n(r5e,"A",{href:!0});var xHr=s(iI);Uvo=r(xHr,"MPNetForMaskedLM"),xHr.forEach(t),Jvo=r(r5e," (MPNet model)"),r5e.forEach(t),Yvo=i(D),v1=n(D,"LI",{});var t5e=s(v1);Dre=n(t5e,"STRONG",{});var kHr=s(Dre);Kvo=r(kHr,"nystromformer"),kHr.forEach(t),Zvo=r(t5e," \u2014 "),dI=n(t5e,"A",{href:!0});var RHr=s(dI);e6o=r(RHr,"NystromformerForMaskedLM"),RHr.forEach(t),o6o=r(t5e," (Nystromformer model)"),t5e.forEach(t),r6o=i(D),T1=n(D,"LI",{});var a5e=s(T1);jre=n(a5e,"STRONG",{});var SHr=s(jre);t6o=r(SHr,"perceiver"),SHr.forEach(t),a6o=r(a5e," \u2014 "),cI=n(a5e,"A",{href:!0});var PHr=s(cI);n6o=r(PHr,"PerceiverForMaskedLM"),PHr.forEach(t),s6o=r(a5e," (Perceiver model)"),a5e.forEach(t),l6o=i(D),F1=n(D,"LI",{});var n5e=s(F1);qre=n(n5e,"STRONG",{});var $Hr=s(qre);i6o=r($Hr,"qdqbert"),$Hr.forEach(t),d6o=r(n5e," \u2014 "),fI=n(n5e,"A",{href:!0});var IHr=s(fI);c6o=r(IHr,"QDQBertForMaskedLM"),IHr.forEach(t),f6o=r(n5e," (QDQBert model)"),n5e.forEach(t),m6o=i(D),C1=n(D,"LI",{});var s5e=s(C1);Gre=n(s5e,"STRONG",{});var NHr=s(Gre);g6o=r(NHr,"reformer"),NHr.forEach(t),h6o=r(s5e," \u2014 "),mI=n(s5e,"A",{href:!0});var DHr=s(mI);p6o=r(DHr,"ReformerForMaskedLM"),DHr.forEach(t),_6o=r(s5e," (Reformer model)"),s5e.forEach(t),u6o=i(D),M1=n(D,"LI",{});var l5e=s(M1);Ore=n(l5e,"STRONG",{});var jHr=s(Ore);b6o=r(jHr,"rembert"),jHr.forEach(t),v6o=r(l5e," \u2014 "),gI=n(l5e,"A",{href:!0});var qHr=s(gI);T6o=r(qHr,"RemBertForMaskedLM"),qHr.forEach(t),F6o=r(l5e," (RemBERT model)"),l5e.forEach(t),C6o=i(D),E1=n(D,"LI",{});var i5e=s(E1);Xre=n(i5e,"STRONG",{});var GHr=s(Xre);M6o=r(GHr,"roberta"),GHr.forEach(t),E6o=r(i5e," \u2014 "),hI=n(i5e,"A",{href:!0});var OHr=s(hI);y6o=r(OHr,"RobertaForMaskedLM"),OHr.forEach(t),w6o=r(i5e," (RoBERTa model)"),i5e.forEach(t),A6o=i(D),y1=n(D,"LI",{});var d5e=s(y1);Vre=n(d5e,"STRONG",{});var XHr=s(Vre);L6o=r(XHr,"roformer"),XHr.forEach(t),B6o=r(d5e," \u2014 "),pI=n(d5e,"A",{href:!0});var VHr=s(pI);x6o=r(VHr,"RoFormerForMaskedLM"),VHr.forEach(t),k6o=r(d5e," (RoFormer model)"),d5e.forEach(t),R6o=i(D),w1=n(D,"LI",{});var c5e=s(w1);zre=n(c5e,"STRONG",{});var zHr=s(zre);S6o=r(zHr,"squeezebert"),zHr.forEach(t),P6o=r(c5e," \u2014 "),_I=n(c5e,"A",{href:!0});var WHr=s(_I);$6o=r(WHr,"SqueezeBertForMaskedLM"),WHr.forEach(t),I6o=r(c5e," (SqueezeBERT model)"),c5e.forEach(t),N6o=i(D),A1=n(D,"LI",{});var f5e=s(A1);Wre=n(f5e,"STRONG",{});var QHr=s(Wre);D6o=r(QHr,"tapas"),QHr.forEach(t),j6o=r(f5e," \u2014 "),uI=n(f5e,"A",{href:!0});var HHr=s(uI);q6o=r(HHr,"TapasForMaskedLM"),HHr.forEach(t),G6o=r(f5e," (TAPAS model)"),f5e.forEach(t),O6o=i(D),L1=n(D,"LI",{});var m5e=s(L1);Qre=n(m5e,"STRONG",{});var UHr=s(Qre);X6o=r(UHr,"wav2vec2"),UHr.forEach(t),V6o=r(m5e," \u2014 "),Hre=n(m5e,"CODE",{});var JHr=s(Hre);z6o=r(JHr,"Wav2Vec2ForMaskedLM"),JHr.forEach(t),W6o=r(m5e,"(Wav2Vec2 model)"),m5e.forEach(t),Q6o=i(D),B1=n(D,"LI",{});var g5e=s(B1);Ure=n(g5e,"STRONG",{});var YHr=s(Ure);H6o=r(YHr,"xlm"),YHr.forEach(t),U6o=r(g5e," \u2014 "),bI=n(g5e,"A",{href:!0});var KHr=s(bI);J6o=r(KHr,"XLMWithLMHeadModel"),KHr.forEach(t),Y6o=r(g5e," (XLM model)"),g5e.forEach(t),K6o=i(D),x1=n(D,"LI",{});var h5e=s(x1);Jre=n(h5e,"STRONG",{});var ZHr=s(Jre);Z6o=r(ZHr,"xlm-roberta"),ZHr.forEach(t),eTo=r(h5e," \u2014 "),vI=n(h5e,"A",{href:!0});var eUr=s(vI);oTo=r(eUr,"XLMRobertaForMaskedLM"),eUr.forEach(t),rTo=r(h5e," (XLM-RoBERTa model)"),h5e.forEach(t),tTo=i(D),k1=n(D,"LI",{});var p5e=s(k1);Yre=n(p5e,"STRONG",{});var oUr=s(Yre);aTo=r(oUr,"xlm-roberta-xl"),oUr.forEach(t),nTo=r(p5e," \u2014 "),TI=n(p5e,"A",{href:!0});var rUr=s(TI);sTo=r(rUr,"XLMRobertaXLForMaskedLM"),rUr.forEach(t),lTo=r(p5e," (XLM-RoBERTa-XL model)"),p5e.forEach(t),iTo=i(D),R1=n(D,"LI",{});var _5e=s(R1);Kre=n(_5e,"STRONG",{});var tUr=s(Kre);dTo=r(tUr,"yoso"),tUr.forEach(t),cTo=r(_5e," \u2014 "),FI=n(_5e,"A",{href:!0});var aUr=s(FI);fTo=r(aUr,"YosoForMaskedLM"),aUr.forEach(t),mTo=r(_5e," (YOSO model)"),_5e.forEach(t),D.forEach(t),gTo=i(Xt),S1=n(Xt,"P",{});var u5e=s(S1);hTo=r(u5e,"The model is set in evaluation mode by default using "),Zre=n(u5e,"CODE",{});var nUr=s(Zre);pTo=r(nUr,"model.eval()"),nUr.forEach(t),_To=r(u5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=n(u5e,"CODE",{});var sUr=s(ete);uTo=r(sUr,"model.train()"),sUr.forEach(t),u5e.forEach(t),bTo=i(Xt),ote=n(Xt,"P",{});var lUr=s(ote);vTo=r(lUr,"Examples:"),lUr.forEach(t),TTo=i(Xt),m(m5.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Fke=i(c),id=n(c,"H2",{class:!0});var xSe=s(id);P1=n(xSe,"A",{id:!0,class:!0,href:!0});var iUr=s(P1);rte=n(iUr,"SPAN",{});var dUr=s(rte);m(g5.$$.fragment,dUr),dUr.forEach(t),iUr.forEach(t),FTo=i(xSe),tte=n(xSe,"SPAN",{});var cUr=s(tte);CTo=r(cUr,"AutoModelForSeq2SeqLM"),cUr.forEach(t),xSe.forEach(t),Cke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(h5.$$.fragment,el),MTo=i(el),dd=n(el,"P",{});var tW=s(dd);ETo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ate=n(tW,"CODE",{});var fUr=s(ate);yTo=r(fUr,"from_pretrained()"),fUr.forEach(t),wTo=r(tW,"class method or the "),nte=n(tW,"CODE",{});var mUr=s(nte);ATo=r(mUr,"from_config()"),mUr.forEach(t),LTo=r(tW,`class
method.`),tW.forEach(t),BTo=i(el),p5=n(el,"P",{});var kSe=s(p5);xTo=r(kSe,"This class cannot be instantiated directly using "),ste=n(kSe,"CODE",{});var gUr=s(ste);kTo=r(gUr,"__init__()"),gUr.forEach(t),RTo=r(kSe," (throws an error)."),kSe.forEach(t),STo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(_5.$$.fragment,ol),PTo=i(ol),lte=n(ol,"P",{});var hUr=s(lte);$To=r(hUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hUr.forEach(t),ITo=i(ol),cd=n(ol,"P",{});var aW=s(cd);NTo=r(aW,`Note:
Loading a model from its configuration file does `),ite=n(aW,"STRONG",{});var pUr=s(ite);DTo=r(pUr,"not"),pUr.forEach(t),jTo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dte=n(aW,"CODE",{});var _Ur=s(dte);qTo=r(_Ur,"from_pretrained()"),_Ur.forEach(t),GTo=r(aW,"to load the model weights."),aW.forEach(t),OTo=i(ol),cte=n(ol,"P",{});var uUr=s(cte);XTo=r(uUr,"Examples:"),uUr.forEach(t),VTo=i(ol),m(u5.$$.fragment,ol),ol.forEach(t),zTo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(b5.$$.fragment,Vt),WTo=i(Vt),fte=n(Vt,"P",{});var bUr=s(fte);QTo=r(bUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bUr.forEach(t),HTo=i(Vt),Ha=n(Vt,"P",{});var g4=s(Ha);UTo=r(g4,"The model class to instantiate is selected based on the "),mte=n(g4,"CODE",{});var vUr=s(mte);JTo=r(vUr,"model_type"),vUr.forEach(t),YTo=r(g4,` property of the config object (either
passed as an argument or loaded from `),gte=n(g4,"CODE",{});var TUr=s(gte);KTo=r(TUr,"pretrained_model_name_or_path"),TUr.forEach(t),ZTo=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hte=n(g4,"CODE",{});var FUr=s(hte);eFo=r(FUr,"pretrained_model_name_or_path"),FUr.forEach(t),oFo=r(g4,":"),g4.forEach(t),rFo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);$1=n(ie,"LI",{});var b5e=s($1);pte=n(b5e,"STRONG",{});var CUr=s(pte);tFo=r(CUr,"bart"),CUr.forEach(t),aFo=r(b5e," \u2014 "),CI=n(b5e,"A",{href:!0});var MUr=s(CI);nFo=r(MUr,"BartForConditionalGeneration"),MUr.forEach(t),sFo=r(b5e," (BART model)"),b5e.forEach(t),lFo=i(ie),I1=n(ie,"LI",{});var v5e=s(I1);_te=n(v5e,"STRONG",{});var EUr=s(_te);iFo=r(EUr,"bigbird_pegasus"),EUr.forEach(t),dFo=r(v5e," \u2014 "),MI=n(v5e,"A",{href:!0});var yUr=s(MI);cFo=r(yUr,"BigBirdPegasusForConditionalGeneration"),yUr.forEach(t),fFo=r(v5e," (BigBirdPegasus model)"),v5e.forEach(t),mFo=i(ie),N1=n(ie,"LI",{});var T5e=s(N1);ute=n(T5e,"STRONG",{});var wUr=s(ute);gFo=r(wUr,"blenderbot"),wUr.forEach(t),hFo=r(T5e," \u2014 "),EI=n(T5e,"A",{href:!0});var AUr=s(EI);pFo=r(AUr,"BlenderbotForConditionalGeneration"),AUr.forEach(t),_Fo=r(T5e," (Blenderbot model)"),T5e.forEach(t),uFo=i(ie),D1=n(ie,"LI",{});var F5e=s(D1);bte=n(F5e,"STRONG",{});var LUr=s(bte);bFo=r(LUr,"blenderbot-small"),LUr.forEach(t),vFo=r(F5e," \u2014 "),yI=n(F5e,"A",{href:!0});var BUr=s(yI);TFo=r(BUr,"BlenderbotSmallForConditionalGeneration"),BUr.forEach(t),FFo=r(F5e," (BlenderbotSmall model)"),F5e.forEach(t),CFo=i(ie),j1=n(ie,"LI",{});var C5e=s(j1);vte=n(C5e,"STRONG",{});var xUr=s(vte);MFo=r(xUr,"encoder-decoder"),xUr.forEach(t),EFo=r(C5e," \u2014 "),wI=n(C5e,"A",{href:!0});var kUr=s(wI);yFo=r(kUr,"EncoderDecoderModel"),kUr.forEach(t),wFo=r(C5e," (Encoder decoder model)"),C5e.forEach(t),AFo=i(ie),q1=n(ie,"LI",{});var M5e=s(q1);Tte=n(M5e,"STRONG",{});var RUr=s(Tte);LFo=r(RUr,"fsmt"),RUr.forEach(t),BFo=r(M5e," \u2014 "),AI=n(M5e,"A",{href:!0});var SUr=s(AI);xFo=r(SUr,"FSMTForConditionalGeneration"),SUr.forEach(t),kFo=r(M5e," (FairSeq Machine-Translation model)"),M5e.forEach(t),RFo=i(ie),G1=n(ie,"LI",{});var E5e=s(G1);Fte=n(E5e,"STRONG",{});var PUr=s(Fte);SFo=r(PUr,"led"),PUr.forEach(t),PFo=r(E5e," \u2014 "),LI=n(E5e,"A",{href:!0});var $Ur=s(LI);$Fo=r($Ur,"LEDForConditionalGeneration"),$Ur.forEach(t),IFo=r(E5e," (LED model)"),E5e.forEach(t),NFo=i(ie),O1=n(ie,"LI",{});var y5e=s(O1);Cte=n(y5e,"STRONG",{});var IUr=s(Cte);DFo=r(IUr,"m2m_100"),IUr.forEach(t),jFo=r(y5e," \u2014 "),BI=n(y5e,"A",{href:!0});var NUr=s(BI);qFo=r(NUr,"M2M100ForConditionalGeneration"),NUr.forEach(t),GFo=r(y5e," (M2M100 model)"),y5e.forEach(t),OFo=i(ie),X1=n(ie,"LI",{});var w5e=s(X1);Mte=n(w5e,"STRONG",{});var DUr=s(Mte);XFo=r(DUr,"marian"),DUr.forEach(t),VFo=r(w5e," \u2014 "),xI=n(w5e,"A",{href:!0});var jUr=s(xI);zFo=r(jUr,"MarianMTModel"),jUr.forEach(t),WFo=r(w5e," (Marian model)"),w5e.forEach(t),QFo=i(ie),V1=n(ie,"LI",{});var A5e=s(V1);Ete=n(A5e,"STRONG",{});var qUr=s(Ete);HFo=r(qUr,"mbart"),qUr.forEach(t),UFo=r(A5e," \u2014 "),kI=n(A5e,"A",{href:!0});var GUr=s(kI);JFo=r(GUr,"MBartForConditionalGeneration"),GUr.forEach(t),YFo=r(A5e," (mBART model)"),A5e.forEach(t),KFo=i(ie),z1=n(ie,"LI",{});var L5e=s(z1);yte=n(L5e,"STRONG",{});var OUr=s(yte);ZFo=r(OUr,"mt5"),OUr.forEach(t),eCo=r(L5e," \u2014 "),RI=n(L5e,"A",{href:!0});var XUr=s(RI);oCo=r(XUr,"MT5ForConditionalGeneration"),XUr.forEach(t),rCo=r(L5e," (mT5 model)"),L5e.forEach(t),tCo=i(ie),W1=n(ie,"LI",{});var B5e=s(W1);wte=n(B5e,"STRONG",{});var VUr=s(wte);aCo=r(VUr,"pegasus"),VUr.forEach(t),nCo=r(B5e," \u2014 "),SI=n(B5e,"A",{href:!0});var zUr=s(SI);sCo=r(zUr,"PegasusForConditionalGeneration"),zUr.forEach(t),lCo=r(B5e," (Pegasus model)"),B5e.forEach(t),iCo=i(ie),Q1=n(ie,"LI",{});var x5e=s(Q1);Ate=n(x5e,"STRONG",{});var WUr=s(Ate);dCo=r(WUr,"plbart"),WUr.forEach(t),cCo=r(x5e," \u2014 "),PI=n(x5e,"A",{href:!0});var QUr=s(PI);fCo=r(QUr,"PLBartForConditionalGeneration"),QUr.forEach(t),mCo=r(x5e," (PLBart model)"),x5e.forEach(t),gCo=i(ie),H1=n(ie,"LI",{});var k5e=s(H1);Lte=n(k5e,"STRONG",{});var HUr=s(Lte);hCo=r(HUr,"prophetnet"),HUr.forEach(t),pCo=r(k5e," \u2014 "),$I=n(k5e,"A",{href:!0});var UUr=s($I);_Co=r(UUr,"ProphetNetForConditionalGeneration"),UUr.forEach(t),uCo=r(k5e," (ProphetNet model)"),k5e.forEach(t),bCo=i(ie),U1=n(ie,"LI",{});var R5e=s(U1);Bte=n(R5e,"STRONG",{});var JUr=s(Bte);vCo=r(JUr,"t5"),JUr.forEach(t),TCo=r(R5e," \u2014 "),II=n(R5e,"A",{href:!0});var YUr=s(II);FCo=r(YUr,"T5ForConditionalGeneration"),YUr.forEach(t),CCo=r(R5e," (T5 model)"),R5e.forEach(t),MCo=i(ie),J1=n(ie,"LI",{});var S5e=s(J1);xte=n(S5e,"STRONG",{});var KUr=s(xte);ECo=r(KUr,"xlm-prophetnet"),KUr.forEach(t),yCo=r(S5e," \u2014 "),NI=n(S5e,"A",{href:!0});var ZUr=s(NI);wCo=r(ZUr,"XLMProphetNetForConditionalGeneration"),ZUr.forEach(t),ACo=r(S5e," (XLMProphetNet model)"),S5e.forEach(t),ie.forEach(t),LCo=i(Vt),Y1=n(Vt,"P",{});var P5e=s(Y1);BCo=r(P5e,"The model is set in evaluation mode by default using "),kte=n(P5e,"CODE",{});var eJr=s(kte);xCo=r(eJr,"model.eval()"),eJr.forEach(t),kCo=r(P5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rte=n(P5e,"CODE",{});var oJr=s(Rte);RCo=r(oJr,"model.train()"),oJr.forEach(t),P5e.forEach(t),SCo=i(Vt),Ste=n(Vt,"P",{});var rJr=s(Ste);PCo=r(rJr,"Examples:"),rJr.forEach(t),$Co=i(Vt),m(v5.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Mke=i(c),fd=n(c,"H2",{class:!0});var RSe=s(fd);K1=n(RSe,"A",{id:!0,class:!0,href:!0});var tJr=s(K1);Pte=n(tJr,"SPAN",{});var aJr=s(Pte);m(T5.$$.fragment,aJr),aJr.forEach(t),tJr.forEach(t),ICo=i(RSe),$te=n(RSe,"SPAN",{});var nJr=s($te);NCo=r(nJr,"AutoModelForSequenceClassification"),nJr.forEach(t),RSe.forEach(t),Eke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(F5.$$.fragment,rl),DCo=i(rl),md=n(rl,"P",{});var nW=s(md);jCo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=n(nW,"CODE",{});var sJr=s(Ite);qCo=r(sJr,"from_pretrained()"),sJr.forEach(t),GCo=r(nW,"class method or the "),Nte=n(nW,"CODE",{});var lJr=s(Nte);OCo=r(lJr,"from_config()"),lJr.forEach(t),XCo=r(nW,`class
method.`),nW.forEach(t),VCo=i(rl),C5=n(rl,"P",{});var SSe=s(C5);zCo=r(SSe,"This class cannot be instantiated directly using "),Dte=n(SSe,"CODE",{});var iJr=s(Dte);WCo=r(iJr,"__init__()"),iJr.forEach(t),QCo=r(SSe," (throws an error)."),SSe.forEach(t),HCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(M5.$$.fragment,tl),UCo=i(tl),jte=n(tl,"P",{});var dJr=s(jte);JCo=r(dJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dJr.forEach(t),YCo=i(tl),gd=n(tl,"P",{});var sW=s(gd);KCo=r(sW,`Note:
Loading a model from its configuration file does `),qte=n(sW,"STRONG",{});var cJr=s(qte);ZCo=r(cJr,"not"),cJr.forEach(t),eMo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=n(sW,"CODE",{});var fJr=s(Gte);oMo=r(fJr,"from_pretrained()"),fJr.forEach(t),rMo=r(sW,"to load the model weights."),sW.forEach(t),tMo=i(tl),Ote=n(tl,"P",{});var mJr=s(Ote);aMo=r(mJr,"Examples:"),mJr.forEach(t),nMo=i(tl),m(E5.$$.fragment,tl),tl.forEach(t),sMo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(y5.$$.fragment,zt),lMo=i(zt),Xte=n(zt,"P",{});var gJr=s(Xte);iMo=r(gJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gJr.forEach(t),dMo=i(zt),Ua=n(zt,"P",{});var h4=s(Ua);cMo=r(h4,"The model class to instantiate is selected based on the "),Vte=n(h4,"CODE",{});var hJr=s(Vte);fMo=r(hJr,"model_type"),hJr.forEach(t),mMo=r(h4,` property of the config object (either
passed as an argument or loaded from `),zte=n(h4,"CODE",{});var pJr=s(zte);gMo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),hMo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wte=n(h4,"CODE",{});var _Jr=s(Wte);pMo=r(_Jr,"pretrained_model_name_or_path"),_Jr.forEach(t),_Mo=r(h4,":"),h4.forEach(t),uMo=i(zt),A=n(zt,"UL",{});var L=s(A);Z1=n(L,"LI",{});var $5e=s(Z1);Qte=n($5e,"STRONG",{});var uJr=s(Qte);bMo=r(uJr,"albert"),uJr.forEach(t),vMo=r($5e," \u2014 "),DI=n($5e,"A",{href:!0});var bJr=s(DI);TMo=r(bJr,"AlbertForSequenceClassification"),bJr.forEach(t),FMo=r($5e," (ALBERT model)"),$5e.forEach(t),CMo=i(L),e9=n(L,"LI",{});var I5e=s(e9);Hte=n(I5e,"STRONG",{});var vJr=s(Hte);MMo=r(vJr,"bart"),vJr.forEach(t),EMo=r(I5e," \u2014 "),jI=n(I5e,"A",{href:!0});var TJr=s(jI);yMo=r(TJr,"BartForSequenceClassification"),TJr.forEach(t),wMo=r(I5e," (BART model)"),I5e.forEach(t),AMo=i(L),o9=n(L,"LI",{});var N5e=s(o9);Ute=n(N5e,"STRONG",{});var FJr=s(Ute);LMo=r(FJr,"bert"),FJr.forEach(t),BMo=r(N5e," \u2014 "),qI=n(N5e,"A",{href:!0});var CJr=s(qI);xMo=r(CJr,"BertForSequenceClassification"),CJr.forEach(t),kMo=r(N5e," (BERT model)"),N5e.forEach(t),RMo=i(L),r9=n(L,"LI",{});var D5e=s(r9);Jte=n(D5e,"STRONG",{});var MJr=s(Jte);SMo=r(MJr,"big_bird"),MJr.forEach(t),PMo=r(D5e," \u2014 "),GI=n(D5e,"A",{href:!0});var EJr=s(GI);$Mo=r(EJr,"BigBirdForSequenceClassification"),EJr.forEach(t),IMo=r(D5e," (BigBird model)"),D5e.forEach(t),NMo=i(L),t9=n(L,"LI",{});var j5e=s(t9);Yte=n(j5e,"STRONG",{});var yJr=s(Yte);DMo=r(yJr,"bigbird_pegasus"),yJr.forEach(t),jMo=r(j5e," \u2014 "),OI=n(j5e,"A",{href:!0});var wJr=s(OI);qMo=r(wJr,"BigBirdPegasusForSequenceClassification"),wJr.forEach(t),GMo=r(j5e," (BigBirdPegasus model)"),j5e.forEach(t),OMo=i(L),a9=n(L,"LI",{});var q5e=s(a9);Kte=n(q5e,"STRONG",{});var AJr=s(Kte);XMo=r(AJr,"camembert"),AJr.forEach(t),VMo=r(q5e," \u2014 "),XI=n(q5e,"A",{href:!0});var LJr=s(XI);zMo=r(LJr,"CamembertForSequenceClassification"),LJr.forEach(t),WMo=r(q5e," (CamemBERT model)"),q5e.forEach(t),QMo=i(L),n9=n(L,"LI",{});var G5e=s(n9);Zte=n(G5e,"STRONG",{});var BJr=s(Zte);HMo=r(BJr,"canine"),BJr.forEach(t),UMo=r(G5e," \u2014 "),VI=n(G5e,"A",{href:!0});var xJr=s(VI);JMo=r(xJr,"CanineForSequenceClassification"),xJr.forEach(t),YMo=r(G5e," (Canine model)"),G5e.forEach(t),KMo=i(L),s9=n(L,"LI",{});var O5e=s(s9);eae=n(O5e,"STRONG",{});var kJr=s(eae);ZMo=r(kJr,"convbert"),kJr.forEach(t),e4o=r(O5e," \u2014 "),zI=n(O5e,"A",{href:!0});var RJr=s(zI);o4o=r(RJr,"ConvBertForSequenceClassification"),RJr.forEach(t),r4o=r(O5e," (ConvBERT model)"),O5e.forEach(t),t4o=i(L),l9=n(L,"LI",{});var X5e=s(l9);oae=n(X5e,"STRONG",{});var SJr=s(oae);a4o=r(SJr,"ctrl"),SJr.forEach(t),n4o=r(X5e," \u2014 "),WI=n(X5e,"A",{href:!0});var PJr=s(WI);s4o=r(PJr,"CTRLForSequenceClassification"),PJr.forEach(t),l4o=r(X5e," (CTRL model)"),X5e.forEach(t),i4o=i(L),i9=n(L,"LI",{});var V5e=s(i9);rae=n(V5e,"STRONG",{});var $Jr=s(rae);d4o=r($Jr,"data2vec-text"),$Jr.forEach(t),c4o=r(V5e," \u2014 "),QI=n(V5e,"A",{href:!0});var IJr=s(QI);f4o=r(IJr,"Data2VecTextForSequenceClassification"),IJr.forEach(t),m4o=r(V5e," (Data2VecText model)"),V5e.forEach(t),g4o=i(L),d9=n(L,"LI",{});var z5e=s(d9);tae=n(z5e,"STRONG",{});var NJr=s(tae);h4o=r(NJr,"deberta"),NJr.forEach(t),p4o=r(z5e," \u2014 "),HI=n(z5e,"A",{href:!0});var DJr=s(HI);_4o=r(DJr,"DebertaForSequenceClassification"),DJr.forEach(t),u4o=r(z5e," (DeBERTa model)"),z5e.forEach(t),b4o=i(L),c9=n(L,"LI",{});var W5e=s(c9);aae=n(W5e,"STRONG",{});var jJr=s(aae);v4o=r(jJr,"deberta-v2"),jJr.forEach(t),T4o=r(W5e," \u2014 "),UI=n(W5e,"A",{href:!0});var qJr=s(UI);F4o=r(qJr,"DebertaV2ForSequenceClassification"),qJr.forEach(t),C4o=r(W5e," (DeBERTa-v2 model)"),W5e.forEach(t),M4o=i(L),f9=n(L,"LI",{});var Q5e=s(f9);nae=n(Q5e,"STRONG",{});var GJr=s(nae);E4o=r(GJr,"distilbert"),GJr.forEach(t),y4o=r(Q5e," \u2014 "),JI=n(Q5e,"A",{href:!0});var OJr=s(JI);w4o=r(OJr,"DistilBertForSequenceClassification"),OJr.forEach(t),A4o=r(Q5e," (DistilBERT model)"),Q5e.forEach(t),L4o=i(L),m9=n(L,"LI",{});var H5e=s(m9);sae=n(H5e,"STRONG",{});var XJr=s(sae);B4o=r(XJr,"electra"),XJr.forEach(t),x4o=r(H5e," \u2014 "),YI=n(H5e,"A",{href:!0});var VJr=s(YI);k4o=r(VJr,"ElectraForSequenceClassification"),VJr.forEach(t),R4o=r(H5e," (ELECTRA model)"),H5e.forEach(t),S4o=i(L),g9=n(L,"LI",{});var U5e=s(g9);lae=n(U5e,"STRONG",{});var zJr=s(lae);P4o=r(zJr,"flaubert"),zJr.forEach(t),$4o=r(U5e," \u2014 "),KI=n(U5e,"A",{href:!0});var WJr=s(KI);I4o=r(WJr,"FlaubertForSequenceClassification"),WJr.forEach(t),N4o=r(U5e," (FlauBERT model)"),U5e.forEach(t),D4o=i(L),h9=n(L,"LI",{});var J5e=s(h9);iae=n(J5e,"STRONG",{});var QJr=s(iae);j4o=r(QJr,"fnet"),QJr.forEach(t),q4o=r(J5e," \u2014 "),ZI=n(J5e,"A",{href:!0});var HJr=s(ZI);G4o=r(HJr,"FNetForSequenceClassification"),HJr.forEach(t),O4o=r(J5e," (FNet model)"),J5e.forEach(t),X4o=i(L),p9=n(L,"LI",{});var Y5e=s(p9);dae=n(Y5e,"STRONG",{});var UJr=s(dae);V4o=r(UJr,"funnel"),UJr.forEach(t),z4o=r(Y5e," \u2014 "),eN=n(Y5e,"A",{href:!0});var JJr=s(eN);W4o=r(JJr,"FunnelForSequenceClassification"),JJr.forEach(t),Q4o=r(Y5e," (Funnel Transformer model)"),Y5e.forEach(t),H4o=i(L),_9=n(L,"LI",{});var K5e=s(_9);cae=n(K5e,"STRONG",{});var YJr=s(cae);U4o=r(YJr,"gpt2"),YJr.forEach(t),J4o=r(K5e," \u2014 "),oN=n(K5e,"A",{href:!0});var KJr=s(oN);Y4o=r(KJr,"GPT2ForSequenceClassification"),KJr.forEach(t),K4o=r(K5e," (OpenAI GPT-2 model)"),K5e.forEach(t),Z4o=i(L),u9=n(L,"LI",{});var Z5e=s(u9);fae=n(Z5e,"STRONG",{});var ZJr=s(fae);eEo=r(ZJr,"gpt_neo"),ZJr.forEach(t),oEo=r(Z5e," \u2014 "),rN=n(Z5e,"A",{href:!0});var eYr=s(rN);rEo=r(eYr,"GPTNeoForSequenceClassification"),eYr.forEach(t),tEo=r(Z5e," (GPT Neo model)"),Z5e.forEach(t),aEo=i(L),b9=n(L,"LI",{});var eye=s(b9);mae=n(eye,"STRONG",{});var oYr=s(mae);nEo=r(oYr,"gptj"),oYr.forEach(t),sEo=r(eye," \u2014 "),tN=n(eye,"A",{href:!0});var rYr=s(tN);lEo=r(rYr,"GPTJForSequenceClassification"),rYr.forEach(t),iEo=r(eye," (GPT-J model)"),eye.forEach(t),dEo=i(L),v9=n(L,"LI",{});var oye=s(v9);gae=n(oye,"STRONG",{});var tYr=s(gae);cEo=r(tYr,"ibert"),tYr.forEach(t),fEo=r(oye," \u2014 "),aN=n(oye,"A",{href:!0});var aYr=s(aN);mEo=r(aYr,"IBertForSequenceClassification"),aYr.forEach(t),gEo=r(oye," (I-BERT model)"),oye.forEach(t),hEo=i(L),T9=n(L,"LI",{});var rye=s(T9);hae=n(rye,"STRONG",{});var nYr=s(hae);pEo=r(nYr,"layoutlm"),nYr.forEach(t),_Eo=r(rye," \u2014 "),nN=n(rye,"A",{href:!0});var sYr=s(nN);uEo=r(sYr,"LayoutLMForSequenceClassification"),sYr.forEach(t),bEo=r(rye," (LayoutLM model)"),rye.forEach(t),vEo=i(L),F9=n(L,"LI",{});var tye=s(F9);pae=n(tye,"STRONG",{});var lYr=s(pae);TEo=r(lYr,"layoutlmv2"),lYr.forEach(t),FEo=r(tye," \u2014 "),sN=n(tye,"A",{href:!0});var iYr=s(sN);CEo=r(iYr,"LayoutLMv2ForSequenceClassification"),iYr.forEach(t),MEo=r(tye," (LayoutLMv2 model)"),tye.forEach(t),EEo=i(L),C9=n(L,"LI",{});var aye=s(C9);_ae=n(aye,"STRONG",{});var dYr=s(_ae);yEo=r(dYr,"led"),dYr.forEach(t),wEo=r(aye," \u2014 "),lN=n(aye,"A",{href:!0});var cYr=s(lN);AEo=r(cYr,"LEDForSequenceClassification"),cYr.forEach(t),LEo=r(aye," (LED model)"),aye.forEach(t),BEo=i(L),M9=n(L,"LI",{});var nye=s(M9);uae=n(nye,"STRONG",{});var fYr=s(uae);xEo=r(fYr,"longformer"),fYr.forEach(t),kEo=r(nye," \u2014 "),iN=n(nye,"A",{href:!0});var mYr=s(iN);REo=r(mYr,"LongformerForSequenceClassification"),mYr.forEach(t),SEo=r(nye," (Longformer model)"),nye.forEach(t),PEo=i(L),E9=n(L,"LI",{});var sye=s(E9);bae=n(sye,"STRONG",{});var gYr=s(bae);$Eo=r(gYr,"mbart"),gYr.forEach(t),IEo=r(sye," \u2014 "),dN=n(sye,"A",{href:!0});var hYr=s(dN);NEo=r(hYr,"MBartForSequenceClassification"),hYr.forEach(t),DEo=r(sye," (mBART model)"),sye.forEach(t),jEo=i(L),y9=n(L,"LI",{});var lye=s(y9);vae=n(lye,"STRONG",{});var pYr=s(vae);qEo=r(pYr,"megatron-bert"),pYr.forEach(t),GEo=r(lye," \u2014 "),cN=n(lye,"A",{href:!0});var _Yr=s(cN);OEo=r(_Yr,"MegatronBertForSequenceClassification"),_Yr.forEach(t),XEo=r(lye," (MegatronBert model)"),lye.forEach(t),VEo=i(L),w9=n(L,"LI",{});var iye=s(w9);Tae=n(iye,"STRONG",{});var uYr=s(Tae);zEo=r(uYr,"mobilebert"),uYr.forEach(t),WEo=r(iye," \u2014 "),fN=n(iye,"A",{href:!0});var bYr=s(fN);QEo=r(bYr,"MobileBertForSequenceClassification"),bYr.forEach(t),HEo=r(iye," (MobileBERT model)"),iye.forEach(t),UEo=i(L),A9=n(L,"LI",{});var dye=s(A9);Fae=n(dye,"STRONG",{});var vYr=s(Fae);JEo=r(vYr,"mpnet"),vYr.forEach(t),YEo=r(dye," \u2014 "),mN=n(dye,"A",{href:!0});var TYr=s(mN);KEo=r(TYr,"MPNetForSequenceClassification"),TYr.forEach(t),ZEo=r(dye," (MPNet model)"),dye.forEach(t),e5o=i(L),L9=n(L,"LI",{});var cye=s(L9);Cae=n(cye,"STRONG",{});var FYr=s(Cae);o5o=r(FYr,"nystromformer"),FYr.forEach(t),r5o=r(cye," \u2014 "),gN=n(cye,"A",{href:!0});var CYr=s(gN);t5o=r(CYr,"NystromformerForSequenceClassification"),CYr.forEach(t),a5o=r(cye," (Nystromformer model)"),cye.forEach(t),n5o=i(L),B9=n(L,"LI",{});var fye=s(B9);Mae=n(fye,"STRONG",{});var MYr=s(Mae);s5o=r(MYr,"openai-gpt"),MYr.forEach(t),l5o=r(fye," \u2014 "),hN=n(fye,"A",{href:!0});var EYr=s(hN);i5o=r(EYr,"OpenAIGPTForSequenceClassification"),EYr.forEach(t),d5o=r(fye," (OpenAI GPT model)"),fye.forEach(t),c5o=i(L),x9=n(L,"LI",{});var mye=s(x9);Eae=n(mye,"STRONG",{});var yYr=s(Eae);f5o=r(yYr,"perceiver"),yYr.forEach(t),m5o=r(mye," \u2014 "),pN=n(mye,"A",{href:!0});var wYr=s(pN);g5o=r(wYr,"PerceiverForSequenceClassification"),wYr.forEach(t),h5o=r(mye," (Perceiver model)"),mye.forEach(t),p5o=i(L),k9=n(L,"LI",{});var gye=s(k9);yae=n(gye,"STRONG",{});var AYr=s(yae);_5o=r(AYr,"plbart"),AYr.forEach(t),u5o=r(gye," \u2014 "),_N=n(gye,"A",{href:!0});var LYr=s(_N);b5o=r(LYr,"PLBartForSequenceClassification"),LYr.forEach(t),v5o=r(gye," (PLBart model)"),gye.forEach(t),T5o=i(L),R9=n(L,"LI",{});var hye=s(R9);wae=n(hye,"STRONG",{});var BYr=s(wae);F5o=r(BYr,"qdqbert"),BYr.forEach(t),C5o=r(hye," \u2014 "),uN=n(hye,"A",{href:!0});var xYr=s(uN);M5o=r(xYr,"QDQBertForSequenceClassification"),xYr.forEach(t),E5o=r(hye," (QDQBert model)"),hye.forEach(t),y5o=i(L),S9=n(L,"LI",{});var pye=s(S9);Aae=n(pye,"STRONG",{});var kYr=s(Aae);w5o=r(kYr,"reformer"),kYr.forEach(t),A5o=r(pye," \u2014 "),bN=n(pye,"A",{href:!0});var RYr=s(bN);L5o=r(RYr,"ReformerForSequenceClassification"),RYr.forEach(t),B5o=r(pye," (Reformer model)"),pye.forEach(t),x5o=i(L),P9=n(L,"LI",{});var _ye=s(P9);Lae=n(_ye,"STRONG",{});var SYr=s(Lae);k5o=r(SYr,"rembert"),SYr.forEach(t),R5o=r(_ye," \u2014 "),vN=n(_ye,"A",{href:!0});var PYr=s(vN);S5o=r(PYr,"RemBertForSequenceClassification"),PYr.forEach(t),P5o=r(_ye," (RemBERT model)"),_ye.forEach(t),$5o=i(L),$9=n(L,"LI",{});var uye=s($9);Bae=n(uye,"STRONG",{});var $Yr=s(Bae);I5o=r($Yr,"roberta"),$Yr.forEach(t),N5o=r(uye," \u2014 "),TN=n(uye,"A",{href:!0});var IYr=s(TN);D5o=r(IYr,"RobertaForSequenceClassification"),IYr.forEach(t),j5o=r(uye," (RoBERTa model)"),uye.forEach(t),q5o=i(L),I9=n(L,"LI",{});var bye=s(I9);xae=n(bye,"STRONG",{});var NYr=s(xae);G5o=r(NYr,"roformer"),NYr.forEach(t),O5o=r(bye," \u2014 "),FN=n(bye,"A",{href:!0});var DYr=s(FN);X5o=r(DYr,"RoFormerForSequenceClassification"),DYr.forEach(t),V5o=r(bye," (RoFormer model)"),bye.forEach(t),z5o=i(L),N9=n(L,"LI",{});var vye=s(N9);kae=n(vye,"STRONG",{});var jYr=s(kae);W5o=r(jYr,"squeezebert"),jYr.forEach(t),Q5o=r(vye," \u2014 "),CN=n(vye,"A",{href:!0});var qYr=s(CN);H5o=r(qYr,"SqueezeBertForSequenceClassification"),qYr.forEach(t),U5o=r(vye," (SqueezeBERT model)"),vye.forEach(t),J5o=i(L),D9=n(L,"LI",{});var Tye=s(D9);Rae=n(Tye,"STRONG",{});var GYr=s(Rae);Y5o=r(GYr,"tapas"),GYr.forEach(t),K5o=r(Tye," \u2014 "),MN=n(Tye,"A",{href:!0});var OYr=s(MN);Z5o=r(OYr,"TapasForSequenceClassification"),OYr.forEach(t),eyo=r(Tye," (TAPAS model)"),Tye.forEach(t),oyo=i(L),j9=n(L,"LI",{});var Fye=s(j9);Sae=n(Fye,"STRONG",{});var XYr=s(Sae);ryo=r(XYr,"transfo-xl"),XYr.forEach(t),tyo=r(Fye," \u2014 "),EN=n(Fye,"A",{href:!0});var VYr=s(EN);ayo=r(VYr,"TransfoXLForSequenceClassification"),VYr.forEach(t),nyo=r(Fye," (Transformer-XL model)"),Fye.forEach(t),syo=i(L),q9=n(L,"LI",{});var Cye=s(q9);Pae=n(Cye,"STRONG",{});var zYr=s(Pae);lyo=r(zYr,"xlm"),zYr.forEach(t),iyo=r(Cye," \u2014 "),yN=n(Cye,"A",{href:!0});var WYr=s(yN);dyo=r(WYr,"XLMForSequenceClassification"),WYr.forEach(t),cyo=r(Cye," (XLM model)"),Cye.forEach(t),fyo=i(L),G9=n(L,"LI",{});var Mye=s(G9);$ae=n(Mye,"STRONG",{});var QYr=s($ae);myo=r(QYr,"xlm-roberta"),QYr.forEach(t),gyo=r(Mye," \u2014 "),wN=n(Mye,"A",{href:!0});var HYr=s(wN);hyo=r(HYr,"XLMRobertaForSequenceClassification"),HYr.forEach(t),pyo=r(Mye," (XLM-RoBERTa model)"),Mye.forEach(t),_yo=i(L),O9=n(L,"LI",{});var Eye=s(O9);Iae=n(Eye,"STRONG",{});var UYr=s(Iae);uyo=r(UYr,"xlm-roberta-xl"),UYr.forEach(t),byo=r(Eye," \u2014 "),AN=n(Eye,"A",{href:!0});var JYr=s(AN);vyo=r(JYr,"XLMRobertaXLForSequenceClassification"),JYr.forEach(t),Tyo=r(Eye," (XLM-RoBERTa-XL model)"),Eye.forEach(t),Fyo=i(L),X9=n(L,"LI",{});var yye=s(X9);Nae=n(yye,"STRONG",{});var YYr=s(Nae);Cyo=r(YYr,"xlnet"),YYr.forEach(t),Myo=r(yye," \u2014 "),LN=n(yye,"A",{href:!0});var KYr=s(LN);Eyo=r(KYr,"XLNetForSequenceClassification"),KYr.forEach(t),yyo=r(yye," (XLNet model)"),yye.forEach(t),wyo=i(L),V9=n(L,"LI",{});var wye=s(V9);Dae=n(wye,"STRONG",{});var ZYr=s(Dae);Ayo=r(ZYr,"yoso"),ZYr.forEach(t),Lyo=r(wye," \u2014 "),BN=n(wye,"A",{href:!0});var eKr=s(BN);Byo=r(eKr,"YosoForSequenceClassification"),eKr.forEach(t),xyo=r(wye," (YOSO model)"),wye.forEach(t),L.forEach(t),kyo=i(zt),z9=n(zt,"P",{});var Aye=s(z9);Ryo=r(Aye,"The model is set in evaluation mode by default using "),jae=n(Aye,"CODE",{});var oKr=s(jae);Syo=r(oKr,"model.eval()"),oKr.forEach(t),Pyo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qae=n(Aye,"CODE",{});var rKr=s(qae);$yo=r(rKr,"model.train()"),rKr.forEach(t),Aye.forEach(t),Iyo=i(zt),Gae=n(zt,"P",{});var tKr=s(Gae);Nyo=r(tKr,"Examples:"),tKr.forEach(t),Dyo=i(zt),m(w5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),yke=i(c),hd=n(c,"H2",{class:!0});var PSe=s(hd);W9=n(PSe,"A",{id:!0,class:!0,href:!0});var aKr=s(W9);Oae=n(aKr,"SPAN",{});var nKr=s(Oae);m(A5.$$.fragment,nKr),nKr.forEach(t),aKr.forEach(t),jyo=i(PSe),Xae=n(PSe,"SPAN",{});var sKr=s(Xae);qyo=r(sKr,"AutoModelForMultipleChoice"),sKr.forEach(t),PSe.forEach(t),wke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(L5.$$.fragment,al),Gyo=i(al),pd=n(al,"P",{});var lW=s(pd);Oyo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Vae=n(lW,"CODE",{});var lKr=s(Vae);Xyo=r(lKr,"from_pretrained()"),lKr.forEach(t),Vyo=r(lW,"class method or the "),zae=n(lW,"CODE",{});var iKr=s(zae);zyo=r(iKr,"from_config()"),iKr.forEach(t),Wyo=r(lW,`class
method.`),lW.forEach(t),Qyo=i(al),B5=n(al,"P",{});var $Se=s(B5);Hyo=r($Se,"This class cannot be instantiated directly using "),Wae=n($Se,"CODE",{});var dKr=s(Wae);Uyo=r(dKr,"__init__()"),dKr.forEach(t),Jyo=r($Se," (throws an error)."),$Se.forEach(t),Yyo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(x5.$$.fragment,nl),Kyo=i(nl),Qae=n(nl,"P",{});var cKr=s(Qae);Zyo=r(cKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cKr.forEach(t),ewo=i(nl),_d=n(nl,"P",{});var iW=s(_d);owo=r(iW,`Note:
Loading a model from its configuration file does `),Hae=n(iW,"STRONG",{});var fKr=s(Hae);rwo=r(fKr,"not"),fKr.forEach(t),two=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uae=n(iW,"CODE",{});var mKr=s(Uae);awo=r(mKr,"from_pretrained()"),mKr.forEach(t),nwo=r(iW,"to load the model weights."),iW.forEach(t),swo=i(nl),Jae=n(nl,"P",{});var gKr=s(Jae);lwo=r(gKr,"Examples:"),gKr.forEach(t),iwo=i(nl),m(k5.$$.fragment,nl),nl.forEach(t),dwo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(R5.$$.fragment,Wt),cwo=i(Wt),Yae=n(Wt,"P",{});var hKr=s(Yae);fwo=r(hKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hKr.forEach(t),mwo=i(Wt),Ja=n(Wt,"P",{});var p4=s(Ja);gwo=r(p4,"The model class to instantiate is selected based on the "),Kae=n(p4,"CODE",{});var pKr=s(Kae);hwo=r(pKr,"model_type"),pKr.forEach(t),pwo=r(p4,` property of the config object (either
passed as an argument or loaded from `),Zae=n(p4,"CODE",{});var _Kr=s(Zae);_wo=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),uwo=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(p4,"CODE",{});var uKr=s(ene);bwo=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),vwo=r(p4,":"),p4.forEach(t),Two=i(Wt),G=n(Wt,"UL",{});var O=s(G);Q9=n(O,"LI",{});var Lye=s(Q9);one=n(Lye,"STRONG",{});var bKr=s(one);Fwo=r(bKr,"albert"),bKr.forEach(t),Cwo=r(Lye," \u2014 "),xN=n(Lye,"A",{href:!0});var vKr=s(xN);Mwo=r(vKr,"AlbertForMultipleChoice"),vKr.forEach(t),Ewo=r(Lye," (ALBERT model)"),Lye.forEach(t),ywo=i(O),H9=n(O,"LI",{});var Bye=s(H9);rne=n(Bye,"STRONG",{});var TKr=s(rne);wwo=r(TKr,"bert"),TKr.forEach(t),Awo=r(Bye," \u2014 "),kN=n(Bye,"A",{href:!0});var FKr=s(kN);Lwo=r(FKr,"BertForMultipleChoice"),FKr.forEach(t),Bwo=r(Bye," (BERT model)"),Bye.forEach(t),xwo=i(O),U9=n(O,"LI",{});var xye=s(U9);tne=n(xye,"STRONG",{});var CKr=s(tne);kwo=r(CKr,"big_bird"),CKr.forEach(t),Rwo=r(xye," \u2014 "),RN=n(xye,"A",{href:!0});var MKr=s(RN);Swo=r(MKr,"BigBirdForMultipleChoice"),MKr.forEach(t),Pwo=r(xye," (BigBird model)"),xye.forEach(t),$wo=i(O),J9=n(O,"LI",{});var kye=s(J9);ane=n(kye,"STRONG",{});var EKr=s(ane);Iwo=r(EKr,"camembert"),EKr.forEach(t),Nwo=r(kye," \u2014 "),SN=n(kye,"A",{href:!0});var yKr=s(SN);Dwo=r(yKr,"CamembertForMultipleChoice"),yKr.forEach(t),jwo=r(kye," (CamemBERT model)"),kye.forEach(t),qwo=i(O),Y9=n(O,"LI",{});var Rye=s(Y9);nne=n(Rye,"STRONG",{});var wKr=s(nne);Gwo=r(wKr,"canine"),wKr.forEach(t),Owo=r(Rye," \u2014 "),PN=n(Rye,"A",{href:!0});var AKr=s(PN);Xwo=r(AKr,"CanineForMultipleChoice"),AKr.forEach(t),Vwo=r(Rye," (Canine model)"),Rye.forEach(t),zwo=i(O),K9=n(O,"LI",{});var Sye=s(K9);sne=n(Sye,"STRONG",{});var LKr=s(sne);Wwo=r(LKr,"convbert"),LKr.forEach(t),Qwo=r(Sye," \u2014 "),$N=n(Sye,"A",{href:!0});var BKr=s($N);Hwo=r(BKr,"ConvBertForMultipleChoice"),BKr.forEach(t),Uwo=r(Sye," (ConvBERT model)"),Sye.forEach(t),Jwo=i(O),Z9=n(O,"LI",{});var Pye=s(Z9);lne=n(Pye,"STRONG",{});var xKr=s(lne);Ywo=r(xKr,"data2vec-text"),xKr.forEach(t),Kwo=r(Pye," \u2014 "),IN=n(Pye,"A",{href:!0});var kKr=s(IN);Zwo=r(kKr,"Data2VecTextForMultipleChoice"),kKr.forEach(t),eAo=r(Pye," (Data2VecText model)"),Pye.forEach(t),oAo=i(O),eb=n(O,"LI",{});var $ye=s(eb);ine=n($ye,"STRONG",{});var RKr=s(ine);rAo=r(RKr,"distilbert"),RKr.forEach(t),tAo=r($ye," \u2014 "),NN=n($ye,"A",{href:!0});var SKr=s(NN);aAo=r(SKr,"DistilBertForMultipleChoice"),SKr.forEach(t),nAo=r($ye," (DistilBERT model)"),$ye.forEach(t),sAo=i(O),ob=n(O,"LI",{});var Iye=s(ob);dne=n(Iye,"STRONG",{});var PKr=s(dne);lAo=r(PKr,"electra"),PKr.forEach(t),iAo=r(Iye," \u2014 "),DN=n(Iye,"A",{href:!0});var $Kr=s(DN);dAo=r($Kr,"ElectraForMultipleChoice"),$Kr.forEach(t),cAo=r(Iye," (ELECTRA model)"),Iye.forEach(t),fAo=i(O),rb=n(O,"LI",{});var Nye=s(rb);cne=n(Nye,"STRONG",{});var IKr=s(cne);mAo=r(IKr,"flaubert"),IKr.forEach(t),gAo=r(Nye," \u2014 "),jN=n(Nye,"A",{href:!0});var NKr=s(jN);hAo=r(NKr,"FlaubertForMultipleChoice"),NKr.forEach(t),pAo=r(Nye," (FlauBERT model)"),Nye.forEach(t),_Ao=i(O),tb=n(O,"LI",{});var Dye=s(tb);fne=n(Dye,"STRONG",{});var DKr=s(fne);uAo=r(DKr,"fnet"),DKr.forEach(t),bAo=r(Dye," \u2014 "),qN=n(Dye,"A",{href:!0});var jKr=s(qN);vAo=r(jKr,"FNetForMultipleChoice"),jKr.forEach(t),TAo=r(Dye," (FNet model)"),Dye.forEach(t),FAo=i(O),ab=n(O,"LI",{});var jye=s(ab);mne=n(jye,"STRONG",{});var qKr=s(mne);CAo=r(qKr,"funnel"),qKr.forEach(t),MAo=r(jye," \u2014 "),GN=n(jye,"A",{href:!0});var GKr=s(GN);EAo=r(GKr,"FunnelForMultipleChoice"),GKr.forEach(t),yAo=r(jye," (Funnel Transformer model)"),jye.forEach(t),wAo=i(O),nb=n(O,"LI",{});var qye=s(nb);gne=n(qye,"STRONG",{});var OKr=s(gne);AAo=r(OKr,"ibert"),OKr.forEach(t),LAo=r(qye," \u2014 "),ON=n(qye,"A",{href:!0});var XKr=s(ON);BAo=r(XKr,"IBertForMultipleChoice"),XKr.forEach(t),xAo=r(qye," (I-BERT model)"),qye.forEach(t),kAo=i(O),sb=n(O,"LI",{});var Gye=s(sb);hne=n(Gye,"STRONG",{});var VKr=s(hne);RAo=r(VKr,"longformer"),VKr.forEach(t),SAo=r(Gye," \u2014 "),XN=n(Gye,"A",{href:!0});var zKr=s(XN);PAo=r(zKr,"LongformerForMultipleChoice"),zKr.forEach(t),$Ao=r(Gye," (Longformer model)"),Gye.forEach(t),IAo=i(O),lb=n(O,"LI",{});var Oye=s(lb);pne=n(Oye,"STRONG",{});var WKr=s(pne);NAo=r(WKr,"megatron-bert"),WKr.forEach(t),DAo=r(Oye," \u2014 "),VN=n(Oye,"A",{href:!0});var QKr=s(VN);jAo=r(QKr,"MegatronBertForMultipleChoice"),QKr.forEach(t),qAo=r(Oye," (MegatronBert model)"),Oye.forEach(t),GAo=i(O),ib=n(O,"LI",{});var Xye=s(ib);_ne=n(Xye,"STRONG",{});var HKr=s(_ne);OAo=r(HKr,"mobilebert"),HKr.forEach(t),XAo=r(Xye," \u2014 "),zN=n(Xye,"A",{href:!0});var UKr=s(zN);VAo=r(UKr,"MobileBertForMultipleChoice"),UKr.forEach(t),zAo=r(Xye," (MobileBERT model)"),Xye.forEach(t),WAo=i(O),db=n(O,"LI",{});var Vye=s(db);une=n(Vye,"STRONG",{});var JKr=s(une);QAo=r(JKr,"mpnet"),JKr.forEach(t),HAo=r(Vye," \u2014 "),WN=n(Vye,"A",{href:!0});var YKr=s(WN);UAo=r(YKr,"MPNetForMultipleChoice"),YKr.forEach(t),JAo=r(Vye," (MPNet model)"),Vye.forEach(t),YAo=i(O),cb=n(O,"LI",{});var zye=s(cb);bne=n(zye,"STRONG",{});var KKr=s(bne);KAo=r(KKr,"nystromformer"),KKr.forEach(t),ZAo=r(zye," \u2014 "),QN=n(zye,"A",{href:!0});var ZKr=s(QN);e0o=r(ZKr,"NystromformerForMultipleChoice"),ZKr.forEach(t),o0o=r(zye," (Nystromformer model)"),zye.forEach(t),r0o=i(O),fb=n(O,"LI",{});var Wye=s(fb);vne=n(Wye,"STRONG",{});var eZr=s(vne);t0o=r(eZr,"qdqbert"),eZr.forEach(t),a0o=r(Wye," \u2014 "),HN=n(Wye,"A",{href:!0});var oZr=s(HN);n0o=r(oZr,"QDQBertForMultipleChoice"),oZr.forEach(t),s0o=r(Wye," (QDQBert model)"),Wye.forEach(t),l0o=i(O),mb=n(O,"LI",{});var Qye=s(mb);Tne=n(Qye,"STRONG",{});var rZr=s(Tne);i0o=r(rZr,"rembert"),rZr.forEach(t),d0o=r(Qye," \u2014 "),UN=n(Qye,"A",{href:!0});var tZr=s(UN);c0o=r(tZr,"RemBertForMultipleChoice"),tZr.forEach(t),f0o=r(Qye," (RemBERT model)"),Qye.forEach(t),m0o=i(O),gb=n(O,"LI",{});var Hye=s(gb);Fne=n(Hye,"STRONG",{});var aZr=s(Fne);g0o=r(aZr,"roberta"),aZr.forEach(t),h0o=r(Hye," \u2014 "),JN=n(Hye,"A",{href:!0});var nZr=s(JN);p0o=r(nZr,"RobertaForMultipleChoice"),nZr.forEach(t),_0o=r(Hye," (RoBERTa model)"),Hye.forEach(t),u0o=i(O),hb=n(O,"LI",{});var Uye=s(hb);Cne=n(Uye,"STRONG",{});var sZr=s(Cne);b0o=r(sZr,"roformer"),sZr.forEach(t),v0o=r(Uye," \u2014 "),YN=n(Uye,"A",{href:!0});var lZr=s(YN);T0o=r(lZr,"RoFormerForMultipleChoice"),lZr.forEach(t),F0o=r(Uye," (RoFormer model)"),Uye.forEach(t),C0o=i(O),pb=n(O,"LI",{});var Jye=s(pb);Mne=n(Jye,"STRONG",{});var iZr=s(Mne);M0o=r(iZr,"squeezebert"),iZr.forEach(t),E0o=r(Jye," \u2014 "),KN=n(Jye,"A",{href:!0});var dZr=s(KN);y0o=r(dZr,"SqueezeBertForMultipleChoice"),dZr.forEach(t),w0o=r(Jye," (SqueezeBERT model)"),Jye.forEach(t),A0o=i(O),_b=n(O,"LI",{});var Yye=s(_b);Ene=n(Yye,"STRONG",{});var cZr=s(Ene);L0o=r(cZr,"xlm"),cZr.forEach(t),B0o=r(Yye," \u2014 "),ZN=n(Yye,"A",{href:!0});var fZr=s(ZN);x0o=r(fZr,"XLMForMultipleChoice"),fZr.forEach(t),k0o=r(Yye," (XLM model)"),Yye.forEach(t),R0o=i(O),ub=n(O,"LI",{});var Kye=s(ub);yne=n(Kye,"STRONG",{});var mZr=s(yne);S0o=r(mZr,"xlm-roberta"),mZr.forEach(t),P0o=r(Kye," \u2014 "),eD=n(Kye,"A",{href:!0});var gZr=s(eD);$0o=r(gZr,"XLMRobertaForMultipleChoice"),gZr.forEach(t),I0o=r(Kye," (XLM-RoBERTa model)"),Kye.forEach(t),N0o=i(O),bb=n(O,"LI",{});var Zye=s(bb);wne=n(Zye,"STRONG",{});var hZr=s(wne);D0o=r(hZr,"xlm-roberta-xl"),hZr.forEach(t),j0o=r(Zye," \u2014 "),oD=n(Zye,"A",{href:!0});var pZr=s(oD);q0o=r(pZr,"XLMRobertaXLForMultipleChoice"),pZr.forEach(t),G0o=r(Zye," (XLM-RoBERTa-XL model)"),Zye.forEach(t),O0o=i(O),vb=n(O,"LI",{});var ewe=s(vb);Ane=n(ewe,"STRONG",{});var _Zr=s(Ane);X0o=r(_Zr,"xlnet"),_Zr.forEach(t),V0o=r(ewe," \u2014 "),rD=n(ewe,"A",{href:!0});var uZr=s(rD);z0o=r(uZr,"XLNetForMultipleChoice"),uZr.forEach(t),W0o=r(ewe," (XLNet model)"),ewe.forEach(t),Q0o=i(O),Tb=n(O,"LI",{});var owe=s(Tb);Lne=n(owe,"STRONG",{});var bZr=s(Lne);H0o=r(bZr,"yoso"),bZr.forEach(t),U0o=r(owe," \u2014 "),tD=n(owe,"A",{href:!0});var vZr=s(tD);J0o=r(vZr,"YosoForMultipleChoice"),vZr.forEach(t),Y0o=r(owe," (YOSO model)"),owe.forEach(t),O.forEach(t),K0o=i(Wt),Fb=n(Wt,"P",{});var rwe=s(Fb);Z0o=r(rwe,"The model is set in evaluation mode by default using "),Bne=n(rwe,"CODE",{});var TZr=s(Bne);eLo=r(TZr,"model.eval()"),TZr.forEach(t),oLo=r(rwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=n(rwe,"CODE",{});var FZr=s(xne);rLo=r(FZr,"model.train()"),FZr.forEach(t),rwe.forEach(t),tLo=i(Wt),kne=n(Wt,"P",{});var CZr=s(kne);aLo=r(CZr,"Examples:"),CZr.forEach(t),nLo=i(Wt),m(S5.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Ake=i(c),ud=n(c,"H2",{class:!0});var ISe=s(ud);Cb=n(ISe,"A",{id:!0,class:!0,href:!0});var MZr=s(Cb);Rne=n(MZr,"SPAN",{});var EZr=s(Rne);m(P5.$$.fragment,EZr),EZr.forEach(t),MZr.forEach(t),sLo=i(ISe),Sne=n(ISe,"SPAN",{});var yZr=s(Sne);lLo=r(yZr,"AutoModelForNextSentencePrediction"),yZr.forEach(t),ISe.forEach(t),Lke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m($5.$$.fragment,sl),iLo=i(sl),bd=n(sl,"P",{});var dW=s(bd);dLo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pne=n(dW,"CODE",{});var wZr=s(Pne);cLo=r(wZr,"from_pretrained()"),wZr.forEach(t),fLo=r(dW,"class method or the "),$ne=n(dW,"CODE",{});var AZr=s($ne);mLo=r(AZr,"from_config()"),AZr.forEach(t),gLo=r(dW,`class
method.`),dW.forEach(t),hLo=i(sl),I5=n(sl,"P",{});var NSe=s(I5);pLo=r(NSe,"This class cannot be instantiated directly using "),Ine=n(NSe,"CODE",{});var LZr=s(Ine);_Lo=r(LZr,"__init__()"),LZr.forEach(t),uLo=r(NSe," (throws an error)."),NSe.forEach(t),bLo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(N5.$$.fragment,ll),vLo=i(ll),Nne=n(ll,"P",{});var BZr=s(Nne);TLo=r(BZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BZr.forEach(t),FLo=i(ll),vd=n(ll,"P",{});var cW=s(vd);CLo=r(cW,`Note:
Loading a model from its configuration file does `),Dne=n(cW,"STRONG",{});var xZr=s(Dne);MLo=r(xZr,"not"),xZr.forEach(t),ELo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=n(cW,"CODE",{});var kZr=s(jne);yLo=r(kZr,"from_pretrained()"),kZr.forEach(t),wLo=r(cW,"to load the model weights."),cW.forEach(t),ALo=i(ll),qne=n(ll,"P",{});var RZr=s(qne);LLo=r(RZr,"Examples:"),RZr.forEach(t),BLo=i(ll),m(D5.$$.fragment,ll),ll.forEach(t),xLo=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(j5.$$.fragment,Qt),kLo=i(Qt),Gne=n(Qt,"P",{});var SZr=s(Gne);RLo=r(SZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SZr.forEach(t),SLo=i(Qt),Ya=n(Qt,"P",{});var _4=s(Ya);PLo=r(_4,"The model class to instantiate is selected based on the "),One=n(_4,"CODE",{});var PZr=s(One);$Lo=r(PZr,"model_type"),PZr.forEach(t),ILo=r(_4,` property of the config object (either
passed as an argument or loaded from `),Xne=n(_4,"CODE",{});var $Zr=s(Xne);NLo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),DLo=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=n(_4,"CODE",{});var IZr=s(Vne);jLo=r(IZr,"pretrained_model_name_or_path"),IZr.forEach(t),qLo=r(_4,":"),_4.forEach(t),GLo=i(Qt),da=n(Qt,"UL",{});var il=s(da);Mb=n(il,"LI",{});var twe=s(Mb);zne=n(twe,"STRONG",{});var NZr=s(zne);OLo=r(NZr,"bert"),NZr.forEach(t),XLo=r(twe," \u2014 "),aD=n(twe,"A",{href:!0});var DZr=s(aD);VLo=r(DZr,"BertForNextSentencePrediction"),DZr.forEach(t),zLo=r(twe," (BERT model)"),twe.forEach(t),WLo=i(il),Eb=n(il,"LI",{});var awe=s(Eb);Wne=n(awe,"STRONG",{});var jZr=s(Wne);QLo=r(jZr,"fnet"),jZr.forEach(t),HLo=r(awe," \u2014 "),nD=n(awe,"A",{href:!0});var qZr=s(nD);ULo=r(qZr,"FNetForNextSentencePrediction"),qZr.forEach(t),JLo=r(awe," (FNet model)"),awe.forEach(t),YLo=i(il),yb=n(il,"LI",{});var nwe=s(yb);Qne=n(nwe,"STRONG",{});var GZr=s(Qne);KLo=r(GZr,"megatron-bert"),GZr.forEach(t),ZLo=r(nwe," \u2014 "),sD=n(nwe,"A",{href:!0});var OZr=s(sD);e7o=r(OZr,"MegatronBertForNextSentencePrediction"),OZr.forEach(t),o7o=r(nwe," (MegatronBert model)"),nwe.forEach(t),r7o=i(il),wb=n(il,"LI",{});var swe=s(wb);Hne=n(swe,"STRONG",{});var XZr=s(Hne);t7o=r(XZr,"mobilebert"),XZr.forEach(t),a7o=r(swe," \u2014 "),lD=n(swe,"A",{href:!0});var VZr=s(lD);n7o=r(VZr,"MobileBertForNextSentencePrediction"),VZr.forEach(t),s7o=r(swe," (MobileBERT model)"),swe.forEach(t),l7o=i(il),Ab=n(il,"LI",{});var lwe=s(Ab);Une=n(lwe,"STRONG",{});var zZr=s(Une);i7o=r(zZr,"qdqbert"),zZr.forEach(t),d7o=r(lwe," \u2014 "),iD=n(lwe,"A",{href:!0});var WZr=s(iD);c7o=r(WZr,"QDQBertForNextSentencePrediction"),WZr.forEach(t),f7o=r(lwe," (QDQBert model)"),lwe.forEach(t),il.forEach(t),m7o=i(Qt),Lb=n(Qt,"P",{});var iwe=s(Lb);g7o=r(iwe,"The model is set in evaluation mode by default using "),Jne=n(iwe,"CODE",{});var QZr=s(Jne);h7o=r(QZr,"model.eval()"),QZr.forEach(t),p7o=r(iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yne=n(iwe,"CODE",{});var HZr=s(Yne);_7o=r(HZr,"model.train()"),HZr.forEach(t),iwe.forEach(t),u7o=i(Qt),Kne=n(Qt,"P",{});var UZr=s(Kne);b7o=r(UZr,"Examples:"),UZr.forEach(t),v7o=i(Qt),m(q5.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Bke=i(c),Td=n(c,"H2",{class:!0});var DSe=s(Td);Bb=n(DSe,"A",{id:!0,class:!0,href:!0});var JZr=s(Bb);Zne=n(JZr,"SPAN",{});var YZr=s(Zne);m(G5.$$.fragment,YZr),YZr.forEach(t),JZr.forEach(t),T7o=i(DSe),ese=n(DSe,"SPAN",{});var KZr=s(ese);F7o=r(KZr,"AutoModelForTokenClassification"),KZr.forEach(t),DSe.forEach(t),xke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(O5.$$.fragment,dl),C7o=i(dl),Fd=n(dl,"P",{});var fW=s(Fd);M7o=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ose=n(fW,"CODE",{});var ZZr=s(ose);E7o=r(ZZr,"from_pretrained()"),ZZr.forEach(t),y7o=r(fW,"class method or the "),rse=n(fW,"CODE",{});var eet=s(rse);w7o=r(eet,"from_config()"),eet.forEach(t),A7o=r(fW,`class
method.`),fW.forEach(t),L7o=i(dl),X5=n(dl,"P",{});var jSe=s(X5);B7o=r(jSe,"This class cannot be instantiated directly using "),tse=n(jSe,"CODE",{});var oet=s(tse);x7o=r(oet,"__init__()"),oet.forEach(t),k7o=r(jSe," (throws an error)."),jSe.forEach(t),R7o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(V5.$$.fragment,cl),S7o=i(cl),ase=n(cl,"P",{});var ret=s(ase);P7o=r(ret,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ret.forEach(t),$7o=i(cl),Cd=n(cl,"P",{});var mW=s(Cd);I7o=r(mW,`Note:
Loading a model from its configuration file does `),nse=n(mW,"STRONG",{});var tet=s(nse);N7o=r(tet,"not"),tet.forEach(t),D7o=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=n(mW,"CODE",{});var aet=s(sse);j7o=r(aet,"from_pretrained()"),aet.forEach(t),q7o=r(mW,"to load the model weights."),mW.forEach(t),G7o=i(cl),lse=n(cl,"P",{});var net=s(lse);O7o=r(net,"Examples:"),net.forEach(t),X7o=i(cl),m(z5.$$.fragment,cl),cl.forEach(t),V7o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(W5.$$.fragment,Ht),z7o=i(Ht),ise=n(Ht,"P",{});var set=s(ise);W7o=r(set,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),set.forEach(t),Q7o=i(Ht),Ka=n(Ht,"P",{});var u4=s(Ka);H7o=r(u4,"The model class to instantiate is selected based on the "),dse=n(u4,"CODE",{});var iet=s(dse);U7o=r(iet,"model_type"),iet.forEach(t),J7o=r(u4,` property of the config object (either
passed as an argument or loaded from `),cse=n(u4,"CODE",{});var det=s(cse);Y7o=r(det,"pretrained_model_name_or_path"),det.forEach(t),K7o=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=n(u4,"CODE",{});var cet=s(fse);Z7o=r(cet,"pretrained_model_name_or_path"),cet.forEach(t),e8o=r(u4,":"),u4.forEach(t),o8o=i(Ht),j=n(Ht,"UL",{});var q=s(j);xb=n(q,"LI",{});var dwe=s(xb);mse=n(dwe,"STRONG",{});var fet=s(mse);r8o=r(fet,"albert"),fet.forEach(t),t8o=r(dwe," \u2014 "),dD=n(dwe,"A",{href:!0});var met=s(dD);a8o=r(met,"AlbertForTokenClassification"),met.forEach(t),n8o=r(dwe," (ALBERT model)"),dwe.forEach(t),s8o=i(q),kb=n(q,"LI",{});var cwe=s(kb);gse=n(cwe,"STRONG",{});var get=s(gse);l8o=r(get,"bert"),get.forEach(t),i8o=r(cwe," \u2014 "),cD=n(cwe,"A",{href:!0});var het=s(cD);d8o=r(het,"BertForTokenClassification"),het.forEach(t),c8o=r(cwe," (BERT model)"),cwe.forEach(t),f8o=i(q),Rb=n(q,"LI",{});var fwe=s(Rb);hse=n(fwe,"STRONG",{});var pet=s(hse);m8o=r(pet,"big_bird"),pet.forEach(t),g8o=r(fwe," \u2014 "),fD=n(fwe,"A",{href:!0});var _et=s(fD);h8o=r(_et,"BigBirdForTokenClassification"),_et.forEach(t),p8o=r(fwe," (BigBird model)"),fwe.forEach(t),_8o=i(q),Sb=n(q,"LI",{});var mwe=s(Sb);pse=n(mwe,"STRONG",{});var uet=s(pse);u8o=r(uet,"camembert"),uet.forEach(t),b8o=r(mwe," \u2014 "),mD=n(mwe,"A",{href:!0});var bet=s(mD);v8o=r(bet,"CamembertForTokenClassification"),bet.forEach(t),T8o=r(mwe," (CamemBERT model)"),mwe.forEach(t),F8o=i(q),Pb=n(q,"LI",{});var gwe=s(Pb);_se=n(gwe,"STRONG",{});var vet=s(_se);C8o=r(vet,"canine"),vet.forEach(t),M8o=r(gwe," \u2014 "),gD=n(gwe,"A",{href:!0});var Tet=s(gD);E8o=r(Tet,"CanineForTokenClassification"),Tet.forEach(t),y8o=r(gwe," (Canine model)"),gwe.forEach(t),w8o=i(q),$b=n(q,"LI",{});var hwe=s($b);use=n(hwe,"STRONG",{});var Fet=s(use);A8o=r(Fet,"convbert"),Fet.forEach(t),L8o=r(hwe," \u2014 "),hD=n(hwe,"A",{href:!0});var Cet=s(hD);B8o=r(Cet,"ConvBertForTokenClassification"),Cet.forEach(t),x8o=r(hwe," (ConvBERT model)"),hwe.forEach(t),k8o=i(q),Ib=n(q,"LI",{});var pwe=s(Ib);bse=n(pwe,"STRONG",{});var Met=s(bse);R8o=r(Met,"data2vec-text"),Met.forEach(t),S8o=r(pwe," \u2014 "),pD=n(pwe,"A",{href:!0});var Eet=s(pD);P8o=r(Eet,"Data2VecTextForTokenClassification"),Eet.forEach(t),$8o=r(pwe," (Data2VecText model)"),pwe.forEach(t),I8o=i(q),Nb=n(q,"LI",{});var _we=s(Nb);vse=n(_we,"STRONG",{});var yet=s(vse);N8o=r(yet,"deberta"),yet.forEach(t),D8o=r(_we," \u2014 "),_D=n(_we,"A",{href:!0});var wet=s(_D);j8o=r(wet,"DebertaForTokenClassification"),wet.forEach(t),q8o=r(_we," (DeBERTa model)"),_we.forEach(t),G8o=i(q),Db=n(q,"LI",{});var uwe=s(Db);Tse=n(uwe,"STRONG",{});var Aet=s(Tse);O8o=r(Aet,"deberta-v2"),Aet.forEach(t),X8o=r(uwe," \u2014 "),uD=n(uwe,"A",{href:!0});var Let=s(uD);V8o=r(Let,"DebertaV2ForTokenClassification"),Let.forEach(t),z8o=r(uwe," (DeBERTa-v2 model)"),uwe.forEach(t),W8o=i(q),jb=n(q,"LI",{});var bwe=s(jb);Fse=n(bwe,"STRONG",{});var Bet=s(Fse);Q8o=r(Bet,"distilbert"),Bet.forEach(t),H8o=r(bwe," \u2014 "),bD=n(bwe,"A",{href:!0});var xet=s(bD);U8o=r(xet,"DistilBertForTokenClassification"),xet.forEach(t),J8o=r(bwe," (DistilBERT model)"),bwe.forEach(t),Y8o=i(q),qb=n(q,"LI",{});var vwe=s(qb);Cse=n(vwe,"STRONG",{});var ket=s(Cse);K8o=r(ket,"electra"),ket.forEach(t),Z8o=r(vwe," \u2014 "),vD=n(vwe,"A",{href:!0});var Ret=s(vD);eBo=r(Ret,"ElectraForTokenClassification"),Ret.forEach(t),oBo=r(vwe," (ELECTRA model)"),vwe.forEach(t),rBo=i(q),Gb=n(q,"LI",{});var Twe=s(Gb);Mse=n(Twe,"STRONG",{});var Set=s(Mse);tBo=r(Set,"flaubert"),Set.forEach(t),aBo=r(Twe," \u2014 "),TD=n(Twe,"A",{href:!0});var Pet=s(TD);nBo=r(Pet,"FlaubertForTokenClassification"),Pet.forEach(t),sBo=r(Twe," (FlauBERT model)"),Twe.forEach(t),lBo=i(q),Ob=n(q,"LI",{});var Fwe=s(Ob);Ese=n(Fwe,"STRONG",{});var $et=s(Ese);iBo=r($et,"fnet"),$et.forEach(t),dBo=r(Fwe," \u2014 "),FD=n(Fwe,"A",{href:!0});var Iet=s(FD);cBo=r(Iet,"FNetForTokenClassification"),Iet.forEach(t),fBo=r(Fwe," (FNet model)"),Fwe.forEach(t),mBo=i(q),Xb=n(q,"LI",{});var Cwe=s(Xb);yse=n(Cwe,"STRONG",{});var Net=s(yse);gBo=r(Net,"funnel"),Net.forEach(t),hBo=r(Cwe," \u2014 "),CD=n(Cwe,"A",{href:!0});var Det=s(CD);pBo=r(Det,"FunnelForTokenClassification"),Det.forEach(t),_Bo=r(Cwe," (Funnel Transformer model)"),Cwe.forEach(t),uBo=i(q),Vb=n(q,"LI",{});var Mwe=s(Vb);wse=n(Mwe,"STRONG",{});var jet=s(wse);bBo=r(jet,"gpt2"),jet.forEach(t),vBo=r(Mwe," \u2014 "),MD=n(Mwe,"A",{href:!0});var qet=s(MD);TBo=r(qet,"GPT2ForTokenClassification"),qet.forEach(t),FBo=r(Mwe," (OpenAI GPT-2 model)"),Mwe.forEach(t),CBo=i(q),zb=n(q,"LI",{});var Ewe=s(zb);Ase=n(Ewe,"STRONG",{});var Get=s(Ase);MBo=r(Get,"ibert"),Get.forEach(t),EBo=r(Ewe," \u2014 "),ED=n(Ewe,"A",{href:!0});var Oet=s(ED);yBo=r(Oet,"IBertForTokenClassification"),Oet.forEach(t),wBo=r(Ewe," (I-BERT model)"),Ewe.forEach(t),ABo=i(q),Wb=n(q,"LI",{});var ywe=s(Wb);Lse=n(ywe,"STRONG",{});var Xet=s(Lse);LBo=r(Xet,"layoutlm"),Xet.forEach(t),BBo=r(ywe," \u2014 "),yD=n(ywe,"A",{href:!0});var Vet=s(yD);xBo=r(Vet,"LayoutLMForTokenClassification"),Vet.forEach(t),kBo=r(ywe," (LayoutLM model)"),ywe.forEach(t),RBo=i(q),Qb=n(q,"LI",{});var wwe=s(Qb);Bse=n(wwe,"STRONG",{});var zet=s(Bse);SBo=r(zet,"layoutlmv2"),zet.forEach(t),PBo=r(wwe," \u2014 "),wD=n(wwe,"A",{href:!0});var Wet=s(wD);$Bo=r(Wet,"LayoutLMv2ForTokenClassification"),Wet.forEach(t),IBo=r(wwe," (LayoutLMv2 model)"),wwe.forEach(t),NBo=i(q),Hb=n(q,"LI",{});var Awe=s(Hb);xse=n(Awe,"STRONG",{});var Qet=s(xse);DBo=r(Qet,"longformer"),Qet.forEach(t),jBo=r(Awe," \u2014 "),AD=n(Awe,"A",{href:!0});var Het=s(AD);qBo=r(Het,"LongformerForTokenClassification"),Het.forEach(t),GBo=r(Awe," (Longformer model)"),Awe.forEach(t),OBo=i(q),Ub=n(q,"LI",{});var Lwe=s(Ub);kse=n(Lwe,"STRONG",{});var Uet=s(kse);XBo=r(Uet,"megatron-bert"),Uet.forEach(t),VBo=r(Lwe," \u2014 "),LD=n(Lwe,"A",{href:!0});var Jet=s(LD);zBo=r(Jet,"MegatronBertForTokenClassification"),Jet.forEach(t),WBo=r(Lwe," (MegatronBert model)"),Lwe.forEach(t),QBo=i(q),Jb=n(q,"LI",{});var Bwe=s(Jb);Rse=n(Bwe,"STRONG",{});var Yet=s(Rse);HBo=r(Yet,"mobilebert"),Yet.forEach(t),UBo=r(Bwe," \u2014 "),BD=n(Bwe,"A",{href:!0});var Ket=s(BD);JBo=r(Ket,"MobileBertForTokenClassification"),Ket.forEach(t),YBo=r(Bwe," (MobileBERT model)"),Bwe.forEach(t),KBo=i(q),Yb=n(q,"LI",{});var xwe=s(Yb);Sse=n(xwe,"STRONG",{});var Zet=s(Sse);ZBo=r(Zet,"mpnet"),Zet.forEach(t),exo=r(xwe," \u2014 "),xD=n(xwe,"A",{href:!0});var eot=s(xD);oxo=r(eot,"MPNetForTokenClassification"),eot.forEach(t),rxo=r(xwe," (MPNet model)"),xwe.forEach(t),txo=i(q),Kb=n(q,"LI",{});var kwe=s(Kb);Pse=n(kwe,"STRONG",{});var oot=s(Pse);axo=r(oot,"nystromformer"),oot.forEach(t),nxo=r(kwe," \u2014 "),kD=n(kwe,"A",{href:!0});var rot=s(kD);sxo=r(rot,"NystromformerForTokenClassification"),rot.forEach(t),lxo=r(kwe," (Nystromformer model)"),kwe.forEach(t),ixo=i(q),Zb=n(q,"LI",{});var Rwe=s(Zb);$se=n(Rwe,"STRONG",{});var tot=s($se);dxo=r(tot,"qdqbert"),tot.forEach(t),cxo=r(Rwe," \u2014 "),RD=n(Rwe,"A",{href:!0});var aot=s(RD);fxo=r(aot,"QDQBertForTokenClassification"),aot.forEach(t),mxo=r(Rwe," (QDQBert model)"),Rwe.forEach(t),gxo=i(q),e3=n(q,"LI",{});var Swe=s(e3);Ise=n(Swe,"STRONG",{});var not=s(Ise);hxo=r(not,"rembert"),not.forEach(t),pxo=r(Swe," \u2014 "),SD=n(Swe,"A",{href:!0});var sot=s(SD);_xo=r(sot,"RemBertForTokenClassification"),sot.forEach(t),uxo=r(Swe," (RemBERT model)"),Swe.forEach(t),bxo=i(q),o3=n(q,"LI",{});var Pwe=s(o3);Nse=n(Pwe,"STRONG",{});var lot=s(Nse);vxo=r(lot,"roberta"),lot.forEach(t),Txo=r(Pwe," \u2014 "),PD=n(Pwe,"A",{href:!0});var iot=s(PD);Fxo=r(iot,"RobertaForTokenClassification"),iot.forEach(t),Cxo=r(Pwe," (RoBERTa model)"),Pwe.forEach(t),Mxo=i(q),r3=n(q,"LI",{});var $we=s(r3);Dse=n($we,"STRONG",{});var dot=s(Dse);Exo=r(dot,"roformer"),dot.forEach(t),yxo=r($we," \u2014 "),$D=n($we,"A",{href:!0});var cot=s($D);wxo=r(cot,"RoFormerForTokenClassification"),cot.forEach(t),Axo=r($we," (RoFormer model)"),$we.forEach(t),Lxo=i(q),t3=n(q,"LI",{});var Iwe=s(t3);jse=n(Iwe,"STRONG",{});var fot=s(jse);Bxo=r(fot,"squeezebert"),fot.forEach(t),xxo=r(Iwe," \u2014 "),ID=n(Iwe,"A",{href:!0});var mot=s(ID);kxo=r(mot,"SqueezeBertForTokenClassification"),mot.forEach(t),Rxo=r(Iwe," (SqueezeBERT model)"),Iwe.forEach(t),Sxo=i(q),a3=n(q,"LI",{});var Nwe=s(a3);qse=n(Nwe,"STRONG",{});var got=s(qse);Pxo=r(got,"xlm"),got.forEach(t),$xo=r(Nwe," \u2014 "),ND=n(Nwe,"A",{href:!0});var hot=s(ND);Ixo=r(hot,"XLMForTokenClassification"),hot.forEach(t),Nxo=r(Nwe," (XLM model)"),Nwe.forEach(t),Dxo=i(q),n3=n(q,"LI",{});var Dwe=s(n3);Gse=n(Dwe,"STRONG",{});var pot=s(Gse);jxo=r(pot,"xlm-roberta"),pot.forEach(t),qxo=r(Dwe," \u2014 "),DD=n(Dwe,"A",{href:!0});var _ot=s(DD);Gxo=r(_ot,"XLMRobertaForTokenClassification"),_ot.forEach(t),Oxo=r(Dwe," (XLM-RoBERTa model)"),Dwe.forEach(t),Xxo=i(q),s3=n(q,"LI",{});var jwe=s(s3);Ose=n(jwe,"STRONG",{});var uot=s(Ose);Vxo=r(uot,"xlm-roberta-xl"),uot.forEach(t),zxo=r(jwe," \u2014 "),jD=n(jwe,"A",{href:!0});var bot=s(jD);Wxo=r(bot,"XLMRobertaXLForTokenClassification"),bot.forEach(t),Qxo=r(jwe," (XLM-RoBERTa-XL model)"),jwe.forEach(t),Hxo=i(q),l3=n(q,"LI",{});var qwe=s(l3);Xse=n(qwe,"STRONG",{});var vot=s(Xse);Uxo=r(vot,"xlnet"),vot.forEach(t),Jxo=r(qwe," \u2014 "),qD=n(qwe,"A",{href:!0});var Tot=s(qD);Yxo=r(Tot,"XLNetForTokenClassification"),Tot.forEach(t),Kxo=r(qwe," (XLNet model)"),qwe.forEach(t),Zxo=i(q),i3=n(q,"LI",{});var Gwe=s(i3);Vse=n(Gwe,"STRONG",{});var Fot=s(Vse);eko=r(Fot,"yoso"),Fot.forEach(t),oko=r(Gwe," \u2014 "),GD=n(Gwe,"A",{href:!0});var Cot=s(GD);rko=r(Cot,"YosoForTokenClassification"),Cot.forEach(t),tko=r(Gwe," (YOSO model)"),Gwe.forEach(t),q.forEach(t),ako=i(Ht),d3=n(Ht,"P",{});var Owe=s(d3);nko=r(Owe,"The model is set in evaluation mode by default using "),zse=n(Owe,"CODE",{});var Mot=s(zse);sko=r(Mot,"model.eval()"),Mot.forEach(t),lko=r(Owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=n(Owe,"CODE",{});var Eot=s(Wse);iko=r(Eot,"model.train()"),Eot.forEach(t),Owe.forEach(t),dko=i(Ht),Qse=n(Ht,"P",{});var yot=s(Qse);cko=r(yot,"Examples:"),yot.forEach(t),fko=i(Ht),m(Q5.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),kke=i(c),Md=n(c,"H2",{class:!0});var qSe=s(Md);c3=n(qSe,"A",{id:!0,class:!0,href:!0});var wot=s(c3);Hse=n(wot,"SPAN",{});var Aot=s(Hse);m(H5.$$.fragment,Aot),Aot.forEach(t),wot.forEach(t),mko=i(qSe),Use=n(qSe,"SPAN",{});var Lot=s(Use);gko=r(Lot,"AutoModelForQuestionAnswering"),Lot.forEach(t),qSe.forEach(t),Rke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(U5.$$.fragment,fl),hko=i(fl),Ed=n(fl,"P",{});var gW=s(Ed);pko=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jse=n(gW,"CODE",{});var Bot=s(Jse);_ko=r(Bot,"from_pretrained()"),Bot.forEach(t),uko=r(gW,"class method or the "),Yse=n(gW,"CODE",{});var xot=s(Yse);bko=r(xot,"from_config()"),xot.forEach(t),vko=r(gW,`class
method.`),gW.forEach(t),Tko=i(fl),J5=n(fl,"P",{});var GSe=s(J5);Fko=r(GSe,"This class cannot be instantiated directly using "),Kse=n(GSe,"CODE",{});var kot=s(Kse);Cko=r(kot,"__init__()"),kot.forEach(t),Mko=r(GSe," (throws an error)."),GSe.forEach(t),Eko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Y5.$$.fragment,ml),yko=i(ml),Zse=n(ml,"P",{});var Rot=s(Zse);wko=r(Rot,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rot.forEach(t),Ako=i(ml),yd=n(ml,"P",{});var hW=s(yd);Lko=r(hW,`Note:
Loading a model from its configuration file does `),ele=n(hW,"STRONG",{});var Sot=s(ele);Bko=r(Sot,"not"),Sot.forEach(t),xko=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=n(hW,"CODE",{});var Pot=s(ole);kko=r(Pot,"from_pretrained()"),Pot.forEach(t),Rko=r(hW,"to load the model weights."),hW.forEach(t),Sko=i(ml),rle=n(ml,"P",{});var $ot=s(rle);Pko=r($ot,"Examples:"),$ot.forEach(t),$ko=i(ml),m(K5.$$.fragment,ml),ml.forEach(t),Iko=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(Z5.$$.fragment,Ut),Nko=i(Ut),tle=n(Ut,"P",{});var Iot=s(tle);Dko=r(Iot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Iot.forEach(t),jko=i(Ut),Za=n(Ut,"P",{});var b4=s(Za);qko=r(b4,"The model class to instantiate is selected based on the "),ale=n(b4,"CODE",{});var Not=s(ale);Gko=r(Not,"model_type"),Not.forEach(t),Oko=r(b4,` property of the config object (either
passed as an argument or loaded from `),nle=n(b4,"CODE",{});var Dot=s(nle);Xko=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),Vko=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=n(b4,"CODE",{});var jot=s(sle);zko=r(jot,"pretrained_model_name_or_path"),jot.forEach(t),Wko=r(b4,":"),b4.forEach(t),Qko=i(Ut),R=n(Ut,"UL",{});var P=s(R);f3=n(P,"LI",{});var Xwe=s(f3);lle=n(Xwe,"STRONG",{});var qot=s(lle);Hko=r(qot,"albert"),qot.forEach(t),Uko=r(Xwe," \u2014 "),OD=n(Xwe,"A",{href:!0});var Got=s(OD);Jko=r(Got,"AlbertForQuestionAnswering"),Got.forEach(t),Yko=r(Xwe," (ALBERT model)"),Xwe.forEach(t),Kko=i(P),m3=n(P,"LI",{});var Vwe=s(m3);ile=n(Vwe,"STRONG",{});var Oot=s(ile);Zko=r(Oot,"bart"),Oot.forEach(t),eRo=r(Vwe," \u2014 "),XD=n(Vwe,"A",{href:!0});var Xot=s(XD);oRo=r(Xot,"BartForQuestionAnswering"),Xot.forEach(t),rRo=r(Vwe," (BART model)"),Vwe.forEach(t),tRo=i(P),g3=n(P,"LI",{});var zwe=s(g3);dle=n(zwe,"STRONG",{});var Vot=s(dle);aRo=r(Vot,"bert"),Vot.forEach(t),nRo=r(zwe," \u2014 "),VD=n(zwe,"A",{href:!0});var zot=s(VD);sRo=r(zot,"BertForQuestionAnswering"),zot.forEach(t),lRo=r(zwe," (BERT model)"),zwe.forEach(t),iRo=i(P),h3=n(P,"LI",{});var Wwe=s(h3);cle=n(Wwe,"STRONG",{});var Wot=s(cle);dRo=r(Wot,"big_bird"),Wot.forEach(t),cRo=r(Wwe," \u2014 "),zD=n(Wwe,"A",{href:!0});var Qot=s(zD);fRo=r(Qot,"BigBirdForQuestionAnswering"),Qot.forEach(t),mRo=r(Wwe," (BigBird model)"),Wwe.forEach(t),gRo=i(P),p3=n(P,"LI",{});var Qwe=s(p3);fle=n(Qwe,"STRONG",{});var Hot=s(fle);hRo=r(Hot,"bigbird_pegasus"),Hot.forEach(t),pRo=r(Qwe," \u2014 "),WD=n(Qwe,"A",{href:!0});var Uot=s(WD);_Ro=r(Uot,"BigBirdPegasusForQuestionAnswering"),Uot.forEach(t),uRo=r(Qwe," (BigBirdPegasus model)"),Qwe.forEach(t),bRo=i(P),_3=n(P,"LI",{});var Hwe=s(_3);mle=n(Hwe,"STRONG",{});var Jot=s(mle);vRo=r(Jot,"camembert"),Jot.forEach(t),TRo=r(Hwe," \u2014 "),QD=n(Hwe,"A",{href:!0});var Yot=s(QD);FRo=r(Yot,"CamembertForQuestionAnswering"),Yot.forEach(t),CRo=r(Hwe," (CamemBERT model)"),Hwe.forEach(t),MRo=i(P),u3=n(P,"LI",{});var Uwe=s(u3);gle=n(Uwe,"STRONG",{});var Kot=s(gle);ERo=r(Kot,"canine"),Kot.forEach(t),yRo=r(Uwe," \u2014 "),HD=n(Uwe,"A",{href:!0});var Zot=s(HD);wRo=r(Zot,"CanineForQuestionAnswering"),Zot.forEach(t),ARo=r(Uwe," (Canine model)"),Uwe.forEach(t),LRo=i(P),b3=n(P,"LI",{});var Jwe=s(b3);hle=n(Jwe,"STRONG",{});var ert=s(hle);BRo=r(ert,"convbert"),ert.forEach(t),xRo=r(Jwe," \u2014 "),UD=n(Jwe,"A",{href:!0});var ort=s(UD);kRo=r(ort,"ConvBertForQuestionAnswering"),ort.forEach(t),RRo=r(Jwe," (ConvBERT model)"),Jwe.forEach(t),SRo=i(P),v3=n(P,"LI",{});var Ywe=s(v3);ple=n(Ywe,"STRONG",{});var rrt=s(ple);PRo=r(rrt,"data2vec-text"),rrt.forEach(t),$Ro=r(Ywe," \u2014 "),JD=n(Ywe,"A",{href:!0});var trt=s(JD);IRo=r(trt,"Data2VecTextForQuestionAnswering"),trt.forEach(t),NRo=r(Ywe," (Data2VecText model)"),Ywe.forEach(t),DRo=i(P),T3=n(P,"LI",{});var Kwe=s(T3);_le=n(Kwe,"STRONG",{});var art=s(_le);jRo=r(art,"deberta"),art.forEach(t),qRo=r(Kwe," \u2014 "),YD=n(Kwe,"A",{href:!0});var nrt=s(YD);GRo=r(nrt,"DebertaForQuestionAnswering"),nrt.forEach(t),ORo=r(Kwe," (DeBERTa model)"),Kwe.forEach(t),XRo=i(P),F3=n(P,"LI",{});var Zwe=s(F3);ule=n(Zwe,"STRONG",{});var srt=s(ule);VRo=r(srt,"deberta-v2"),srt.forEach(t),zRo=r(Zwe," \u2014 "),KD=n(Zwe,"A",{href:!0});var lrt=s(KD);WRo=r(lrt,"DebertaV2ForQuestionAnswering"),lrt.forEach(t),QRo=r(Zwe," (DeBERTa-v2 model)"),Zwe.forEach(t),HRo=i(P),C3=n(P,"LI",{});var eAe=s(C3);ble=n(eAe,"STRONG",{});var irt=s(ble);URo=r(irt,"distilbert"),irt.forEach(t),JRo=r(eAe," \u2014 "),ZD=n(eAe,"A",{href:!0});var drt=s(ZD);YRo=r(drt,"DistilBertForQuestionAnswering"),drt.forEach(t),KRo=r(eAe," (DistilBERT model)"),eAe.forEach(t),ZRo=i(P),M3=n(P,"LI",{});var oAe=s(M3);vle=n(oAe,"STRONG",{});var crt=s(vle);eSo=r(crt,"electra"),crt.forEach(t),oSo=r(oAe," \u2014 "),ej=n(oAe,"A",{href:!0});var frt=s(ej);rSo=r(frt,"ElectraForQuestionAnswering"),frt.forEach(t),tSo=r(oAe," (ELECTRA model)"),oAe.forEach(t),aSo=i(P),E3=n(P,"LI",{});var rAe=s(E3);Tle=n(rAe,"STRONG",{});var mrt=s(Tle);nSo=r(mrt,"flaubert"),mrt.forEach(t),sSo=r(rAe," \u2014 "),oj=n(rAe,"A",{href:!0});var grt=s(oj);lSo=r(grt,"FlaubertForQuestionAnsweringSimple"),grt.forEach(t),iSo=r(rAe," (FlauBERT model)"),rAe.forEach(t),dSo=i(P),y3=n(P,"LI",{});var tAe=s(y3);Fle=n(tAe,"STRONG",{});var hrt=s(Fle);cSo=r(hrt,"fnet"),hrt.forEach(t),fSo=r(tAe," \u2014 "),rj=n(tAe,"A",{href:!0});var prt=s(rj);mSo=r(prt,"FNetForQuestionAnswering"),prt.forEach(t),gSo=r(tAe," (FNet model)"),tAe.forEach(t),hSo=i(P),w3=n(P,"LI",{});var aAe=s(w3);Cle=n(aAe,"STRONG",{});var _rt=s(Cle);pSo=r(_rt,"funnel"),_rt.forEach(t),_So=r(aAe," \u2014 "),tj=n(aAe,"A",{href:!0});var urt=s(tj);uSo=r(urt,"FunnelForQuestionAnswering"),urt.forEach(t),bSo=r(aAe," (Funnel Transformer model)"),aAe.forEach(t),vSo=i(P),A3=n(P,"LI",{});var nAe=s(A3);Mle=n(nAe,"STRONG",{});var brt=s(Mle);TSo=r(brt,"gptj"),brt.forEach(t),FSo=r(nAe," \u2014 "),aj=n(nAe,"A",{href:!0});var vrt=s(aj);CSo=r(vrt,"GPTJForQuestionAnswering"),vrt.forEach(t),MSo=r(nAe," (GPT-J model)"),nAe.forEach(t),ESo=i(P),L3=n(P,"LI",{});var sAe=s(L3);Ele=n(sAe,"STRONG",{});var Trt=s(Ele);ySo=r(Trt,"ibert"),Trt.forEach(t),wSo=r(sAe," \u2014 "),nj=n(sAe,"A",{href:!0});var Frt=s(nj);ASo=r(Frt,"IBertForQuestionAnswering"),Frt.forEach(t),LSo=r(sAe," (I-BERT model)"),sAe.forEach(t),BSo=i(P),B3=n(P,"LI",{});var lAe=s(B3);yle=n(lAe,"STRONG",{});var Crt=s(yle);xSo=r(Crt,"layoutlmv2"),Crt.forEach(t),kSo=r(lAe," \u2014 "),sj=n(lAe,"A",{href:!0});var Mrt=s(sj);RSo=r(Mrt,"LayoutLMv2ForQuestionAnswering"),Mrt.forEach(t),SSo=r(lAe," (LayoutLMv2 model)"),lAe.forEach(t),PSo=i(P),x3=n(P,"LI",{});var iAe=s(x3);wle=n(iAe,"STRONG",{});var Ert=s(wle);$So=r(Ert,"led"),Ert.forEach(t),ISo=r(iAe," \u2014 "),lj=n(iAe,"A",{href:!0});var yrt=s(lj);NSo=r(yrt,"LEDForQuestionAnswering"),yrt.forEach(t),DSo=r(iAe," (LED model)"),iAe.forEach(t),jSo=i(P),k3=n(P,"LI",{});var dAe=s(k3);Ale=n(dAe,"STRONG",{});var wrt=s(Ale);qSo=r(wrt,"longformer"),wrt.forEach(t),GSo=r(dAe," \u2014 "),ij=n(dAe,"A",{href:!0});var Art=s(ij);OSo=r(Art,"LongformerForQuestionAnswering"),Art.forEach(t),XSo=r(dAe," (Longformer model)"),dAe.forEach(t),VSo=i(P),R3=n(P,"LI",{});var cAe=s(R3);Lle=n(cAe,"STRONG",{});var Lrt=s(Lle);zSo=r(Lrt,"lxmert"),Lrt.forEach(t),WSo=r(cAe," \u2014 "),dj=n(cAe,"A",{href:!0});var Brt=s(dj);QSo=r(Brt,"LxmertForQuestionAnswering"),Brt.forEach(t),HSo=r(cAe," (LXMERT model)"),cAe.forEach(t),USo=i(P),S3=n(P,"LI",{});var fAe=s(S3);Ble=n(fAe,"STRONG",{});var xrt=s(Ble);JSo=r(xrt,"mbart"),xrt.forEach(t),YSo=r(fAe," \u2014 "),cj=n(fAe,"A",{href:!0});var krt=s(cj);KSo=r(krt,"MBartForQuestionAnswering"),krt.forEach(t),ZSo=r(fAe," (mBART model)"),fAe.forEach(t),ePo=i(P),P3=n(P,"LI",{});var mAe=s(P3);xle=n(mAe,"STRONG",{});var Rrt=s(xle);oPo=r(Rrt,"megatron-bert"),Rrt.forEach(t),rPo=r(mAe," \u2014 "),fj=n(mAe,"A",{href:!0});var Srt=s(fj);tPo=r(Srt,"MegatronBertForQuestionAnswering"),Srt.forEach(t),aPo=r(mAe," (MegatronBert model)"),mAe.forEach(t),nPo=i(P),$3=n(P,"LI",{});var gAe=s($3);kle=n(gAe,"STRONG",{});var Prt=s(kle);sPo=r(Prt,"mobilebert"),Prt.forEach(t),lPo=r(gAe," \u2014 "),mj=n(gAe,"A",{href:!0});var $rt=s(mj);iPo=r($rt,"MobileBertForQuestionAnswering"),$rt.forEach(t),dPo=r(gAe," (MobileBERT model)"),gAe.forEach(t),cPo=i(P),I3=n(P,"LI",{});var hAe=s(I3);Rle=n(hAe,"STRONG",{});var Irt=s(Rle);fPo=r(Irt,"mpnet"),Irt.forEach(t),mPo=r(hAe," \u2014 "),gj=n(hAe,"A",{href:!0});var Nrt=s(gj);gPo=r(Nrt,"MPNetForQuestionAnswering"),Nrt.forEach(t),hPo=r(hAe," (MPNet model)"),hAe.forEach(t),pPo=i(P),N3=n(P,"LI",{});var pAe=s(N3);Sle=n(pAe,"STRONG",{});var Drt=s(Sle);_Po=r(Drt,"nystromformer"),Drt.forEach(t),uPo=r(pAe," \u2014 "),hj=n(pAe,"A",{href:!0});var jrt=s(hj);bPo=r(jrt,"NystromformerForQuestionAnswering"),jrt.forEach(t),vPo=r(pAe," (Nystromformer model)"),pAe.forEach(t),TPo=i(P),D3=n(P,"LI",{});var _Ae=s(D3);Ple=n(_Ae,"STRONG",{});var qrt=s(Ple);FPo=r(qrt,"qdqbert"),qrt.forEach(t),CPo=r(_Ae," \u2014 "),pj=n(_Ae,"A",{href:!0});var Grt=s(pj);MPo=r(Grt,"QDQBertForQuestionAnswering"),Grt.forEach(t),EPo=r(_Ae," (QDQBert model)"),_Ae.forEach(t),yPo=i(P),j3=n(P,"LI",{});var uAe=s(j3);$le=n(uAe,"STRONG",{});var Ort=s($le);wPo=r(Ort,"reformer"),Ort.forEach(t),APo=r(uAe," \u2014 "),_j=n(uAe,"A",{href:!0});var Xrt=s(_j);LPo=r(Xrt,"ReformerForQuestionAnswering"),Xrt.forEach(t),BPo=r(uAe," (Reformer model)"),uAe.forEach(t),xPo=i(P),q3=n(P,"LI",{});var bAe=s(q3);Ile=n(bAe,"STRONG",{});var Vrt=s(Ile);kPo=r(Vrt,"rembert"),Vrt.forEach(t),RPo=r(bAe," \u2014 "),uj=n(bAe,"A",{href:!0});var zrt=s(uj);SPo=r(zrt,"RemBertForQuestionAnswering"),zrt.forEach(t),PPo=r(bAe," (RemBERT model)"),bAe.forEach(t),$Po=i(P),G3=n(P,"LI",{});var vAe=s(G3);Nle=n(vAe,"STRONG",{});var Wrt=s(Nle);IPo=r(Wrt,"roberta"),Wrt.forEach(t),NPo=r(vAe," \u2014 "),bj=n(vAe,"A",{href:!0});var Qrt=s(bj);DPo=r(Qrt,"RobertaForQuestionAnswering"),Qrt.forEach(t),jPo=r(vAe," (RoBERTa model)"),vAe.forEach(t),qPo=i(P),O3=n(P,"LI",{});var TAe=s(O3);Dle=n(TAe,"STRONG",{});var Hrt=s(Dle);GPo=r(Hrt,"roformer"),Hrt.forEach(t),OPo=r(TAe," \u2014 "),vj=n(TAe,"A",{href:!0});var Urt=s(vj);XPo=r(Urt,"RoFormerForQuestionAnswering"),Urt.forEach(t),VPo=r(TAe," (RoFormer model)"),TAe.forEach(t),zPo=i(P),X3=n(P,"LI",{});var FAe=s(X3);jle=n(FAe,"STRONG",{});var Jrt=s(jle);WPo=r(Jrt,"splinter"),Jrt.forEach(t),QPo=r(FAe," \u2014 "),Tj=n(FAe,"A",{href:!0});var Yrt=s(Tj);HPo=r(Yrt,"SplinterForQuestionAnswering"),Yrt.forEach(t),UPo=r(FAe," (Splinter model)"),FAe.forEach(t),JPo=i(P),V3=n(P,"LI",{});var CAe=s(V3);qle=n(CAe,"STRONG",{});var Krt=s(qle);YPo=r(Krt,"squeezebert"),Krt.forEach(t),KPo=r(CAe," \u2014 "),Fj=n(CAe,"A",{href:!0});var Zrt=s(Fj);ZPo=r(Zrt,"SqueezeBertForQuestionAnswering"),Zrt.forEach(t),e$o=r(CAe," (SqueezeBERT model)"),CAe.forEach(t),o$o=i(P),z3=n(P,"LI",{});var MAe=s(z3);Gle=n(MAe,"STRONG",{});var ett=s(Gle);r$o=r(ett,"xlm"),ett.forEach(t),t$o=r(MAe," \u2014 "),Cj=n(MAe,"A",{href:!0});var ott=s(Cj);a$o=r(ott,"XLMForQuestionAnsweringSimple"),ott.forEach(t),n$o=r(MAe," (XLM model)"),MAe.forEach(t),s$o=i(P),W3=n(P,"LI",{});var EAe=s(W3);Ole=n(EAe,"STRONG",{});var rtt=s(Ole);l$o=r(rtt,"xlm-roberta"),rtt.forEach(t),i$o=r(EAe," \u2014 "),Mj=n(EAe,"A",{href:!0});var ttt=s(Mj);d$o=r(ttt,"XLMRobertaForQuestionAnswering"),ttt.forEach(t),c$o=r(EAe," (XLM-RoBERTa model)"),EAe.forEach(t),f$o=i(P),Q3=n(P,"LI",{});var yAe=s(Q3);Xle=n(yAe,"STRONG",{});var att=s(Xle);m$o=r(att,"xlm-roberta-xl"),att.forEach(t),g$o=r(yAe," \u2014 "),Ej=n(yAe,"A",{href:!0});var ntt=s(Ej);h$o=r(ntt,"XLMRobertaXLForQuestionAnswering"),ntt.forEach(t),p$o=r(yAe," (XLM-RoBERTa-XL model)"),yAe.forEach(t),_$o=i(P),H3=n(P,"LI",{});var wAe=s(H3);Vle=n(wAe,"STRONG",{});var stt=s(Vle);u$o=r(stt,"xlnet"),stt.forEach(t),b$o=r(wAe," \u2014 "),yj=n(wAe,"A",{href:!0});var ltt=s(yj);v$o=r(ltt,"XLNetForQuestionAnsweringSimple"),ltt.forEach(t),T$o=r(wAe," (XLNet model)"),wAe.forEach(t),F$o=i(P),U3=n(P,"LI",{});var AAe=s(U3);zle=n(AAe,"STRONG",{});var itt=s(zle);C$o=r(itt,"yoso"),itt.forEach(t),M$o=r(AAe," \u2014 "),wj=n(AAe,"A",{href:!0});var dtt=s(wj);E$o=r(dtt,"YosoForQuestionAnswering"),dtt.forEach(t),y$o=r(AAe," (YOSO model)"),AAe.forEach(t),P.forEach(t),w$o=i(Ut),J3=n(Ut,"P",{});var LAe=s(J3);A$o=r(LAe,"The model is set in evaluation mode by default using "),Wle=n(LAe,"CODE",{});var ctt=s(Wle);L$o=r(ctt,"model.eval()"),ctt.forEach(t),B$o=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=n(LAe,"CODE",{});var ftt=s(Qle);x$o=r(ftt,"model.train()"),ftt.forEach(t),LAe.forEach(t),k$o=i(Ut),Hle=n(Ut,"P",{});var mtt=s(Hle);R$o=r(mtt,"Examples:"),mtt.forEach(t),S$o=i(Ut),m(ey.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Ske=i(c),wd=n(c,"H2",{class:!0});var OSe=s(wd);Y3=n(OSe,"A",{id:!0,class:!0,href:!0});var gtt=s(Y3);Ule=n(gtt,"SPAN",{});var htt=s(Ule);m(oy.$$.fragment,htt),htt.forEach(t),gtt.forEach(t),P$o=i(OSe),Jle=n(OSe,"SPAN",{});var ptt=s(Jle);$$o=r(ptt,"AutoModelForTableQuestionAnswering"),ptt.forEach(t),OSe.forEach(t),Pke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(ry.$$.fragment,gl),I$o=i(gl),Ad=n(gl,"P",{});var pW=s(Ad);N$o=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yle=n(pW,"CODE",{});var _tt=s(Yle);D$o=r(_tt,"from_pretrained()"),_tt.forEach(t),j$o=r(pW,"class method or the "),Kle=n(pW,"CODE",{});var utt=s(Kle);q$o=r(utt,"from_config()"),utt.forEach(t),G$o=r(pW,`class
method.`),pW.forEach(t),O$o=i(gl),ty=n(gl,"P",{});var XSe=s(ty);X$o=r(XSe,"This class cannot be instantiated directly using "),Zle=n(XSe,"CODE",{});var btt=s(Zle);V$o=r(btt,"__init__()"),btt.forEach(t),z$o=r(XSe," (throws an error)."),XSe.forEach(t),W$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(ay.$$.fragment,hl),Q$o=i(hl),eie=n(hl,"P",{});var vtt=s(eie);H$o=r(vtt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vtt.forEach(t),U$o=i(hl),Ld=n(hl,"P",{});var _W=s(Ld);J$o=r(_W,`Note:
Loading a model from its configuration file does `),oie=n(_W,"STRONG",{});var Ttt=s(oie);Y$o=r(Ttt,"not"),Ttt.forEach(t),K$o=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),rie=n(_W,"CODE",{});var Ftt=s(rie);Z$o=r(Ftt,"from_pretrained()"),Ftt.forEach(t),eIo=r(_W,"to load the model weights."),_W.forEach(t),oIo=i(hl),tie=n(hl,"P",{});var Ctt=s(tie);rIo=r(Ctt,"Examples:"),Ctt.forEach(t),tIo=i(hl),m(ny.$$.fragment,hl),hl.forEach(t),aIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(sy.$$.fragment,Jt),nIo=i(Jt),aie=n(Jt,"P",{});var Mtt=s(aie);sIo=r(Mtt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mtt.forEach(t),lIo=i(Jt),en=n(Jt,"P",{});var v4=s(en);iIo=r(v4,"The model class to instantiate is selected based on the "),nie=n(v4,"CODE",{});var Ett=s(nie);dIo=r(Ett,"model_type"),Ett.forEach(t),cIo=r(v4,` property of the config object (either
passed as an argument or loaded from `),sie=n(v4,"CODE",{});var ytt=s(sie);fIo=r(ytt,"pretrained_model_name_or_path"),ytt.forEach(t),mIo=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=n(v4,"CODE",{});var wtt=s(lie);gIo=r(wtt,"pretrained_model_name_or_path"),wtt.forEach(t),hIo=r(v4,":"),v4.forEach(t),pIo=i(Jt),iie=n(Jt,"UL",{});var Att=s(iie);K3=n(Att,"LI",{});var BAe=s(K3);die=n(BAe,"STRONG",{});var Ltt=s(die);_Io=r(Ltt,"tapas"),Ltt.forEach(t),uIo=r(BAe," \u2014 "),Aj=n(BAe,"A",{href:!0});var Btt=s(Aj);bIo=r(Btt,"TapasForQuestionAnswering"),Btt.forEach(t),vIo=r(BAe," (TAPAS model)"),BAe.forEach(t),Att.forEach(t),TIo=i(Jt),Z3=n(Jt,"P",{});var xAe=s(Z3);FIo=r(xAe,"The model is set in evaluation mode by default using "),cie=n(xAe,"CODE",{});var xtt=s(cie);CIo=r(xtt,"model.eval()"),xtt.forEach(t),MIo=r(xAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(xAe,"CODE",{});var ktt=s(fie);EIo=r(ktt,"model.train()"),ktt.forEach(t),xAe.forEach(t),yIo=i(Jt),mie=n(Jt,"P",{});var Rtt=s(mie);wIo=r(Rtt,"Examples:"),Rtt.forEach(t),AIo=i(Jt),m(ly.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),$ke=i(c),Bd=n(c,"H2",{class:!0});var VSe=s(Bd);e2=n(VSe,"A",{id:!0,class:!0,href:!0});var Stt=s(e2);gie=n(Stt,"SPAN",{});var Ptt=s(gie);m(iy.$$.fragment,Ptt),Ptt.forEach(t),Stt.forEach(t),LIo=i(VSe),hie=n(VSe,"SPAN",{});var $tt=s(hie);BIo=r($tt,"AutoModelForImageClassification"),$tt.forEach(t),VSe.forEach(t),Ike=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(dy.$$.fragment,pl),xIo=i(pl),xd=n(pl,"P",{});var uW=s(xd);kIo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pie=n(uW,"CODE",{});var Itt=s(pie);RIo=r(Itt,"from_pretrained()"),Itt.forEach(t),SIo=r(uW,"class method or the "),_ie=n(uW,"CODE",{});var Ntt=s(_ie);PIo=r(Ntt,"from_config()"),Ntt.forEach(t),$Io=r(uW,`class
method.`),uW.forEach(t),IIo=i(pl),cy=n(pl,"P",{});var zSe=s(cy);NIo=r(zSe,"This class cannot be instantiated directly using "),uie=n(zSe,"CODE",{});var Dtt=s(uie);DIo=r(Dtt,"__init__()"),Dtt.forEach(t),jIo=r(zSe," (throws an error)."),zSe.forEach(t),qIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(fy.$$.fragment,_l),GIo=i(_l),bie=n(_l,"P",{});var jtt=s(bie);OIo=r(jtt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jtt.forEach(t),XIo=i(_l),kd=n(_l,"P",{});var bW=s(kd);VIo=r(bW,`Note:
Loading a model from its configuration file does `),vie=n(bW,"STRONG",{});var qtt=s(vie);zIo=r(qtt,"not"),qtt.forEach(t),WIo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tie=n(bW,"CODE",{});var Gtt=s(Tie);QIo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),HIo=r(bW,"to load the model weights."),bW.forEach(t),UIo=i(_l),Fie=n(_l,"P",{});var Ott=s(Fie);JIo=r(Ott,"Examples:"),Ott.forEach(t),YIo=i(_l),m(my.$$.fragment,_l),_l.forEach(t),KIo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(gy.$$.fragment,Yt),ZIo=i(Yt),Cie=n(Yt,"P",{});var Xtt=s(Cie);eNo=r(Xtt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xtt.forEach(t),oNo=i(Yt),on=n(Yt,"P",{});var T4=s(on);rNo=r(T4,"The model class to instantiate is selected based on the "),Mie=n(T4,"CODE",{});var Vtt=s(Mie);tNo=r(Vtt,"model_type"),Vtt.forEach(t),aNo=r(T4,` property of the config object (either
passed as an argument or loaded from `),Eie=n(T4,"CODE",{});var ztt=s(Eie);nNo=r(ztt,"pretrained_model_name_or_path"),ztt.forEach(t),sNo=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(T4,"CODE",{});var Wtt=s(yie);lNo=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),iNo=r(T4,":"),T4.forEach(t),dNo=i(Yt),me=n(Yt,"UL",{});var Te=s(me);o2=n(Te,"LI",{});var kAe=s(o2);wie=n(kAe,"STRONG",{});var Qtt=s(wie);cNo=r(Qtt,"beit"),Qtt.forEach(t),fNo=r(kAe," \u2014 "),Lj=n(kAe,"A",{href:!0});var Htt=s(Lj);mNo=r(Htt,"BeitForImageClassification"),Htt.forEach(t),gNo=r(kAe," (BEiT model)"),kAe.forEach(t),hNo=i(Te),r2=n(Te,"LI",{});var RAe=s(r2);Aie=n(RAe,"STRONG",{});var Utt=s(Aie);pNo=r(Utt,"convnext"),Utt.forEach(t),_No=r(RAe," \u2014 "),Bj=n(RAe,"A",{href:!0});var Jtt=s(Bj);uNo=r(Jtt,"ConvNextForImageClassification"),Jtt.forEach(t),bNo=r(RAe," (ConvNext model)"),RAe.forEach(t),vNo=i(Te),qs=n(Te,"LI",{});var J7=s(qs);Lie=n(J7,"STRONG",{});var Ytt=s(Lie);TNo=r(Ytt,"deit"),Ytt.forEach(t),FNo=r(J7," \u2014 "),xj=n(J7,"A",{href:!0});var Ktt=s(xj);CNo=r(Ktt,"DeiTForImageClassification"),Ktt.forEach(t),MNo=r(J7," or "),kj=n(J7,"A",{href:!0});var Ztt=s(kj);ENo=r(Ztt,"DeiTForImageClassificationWithTeacher"),Ztt.forEach(t),yNo=r(J7," (DeiT model)"),J7.forEach(t),wNo=i(Te),t2=n(Te,"LI",{});var SAe=s(t2);Bie=n(SAe,"STRONG",{});var eat=s(Bie);ANo=r(eat,"imagegpt"),eat.forEach(t),LNo=r(SAe," \u2014 "),Rj=n(SAe,"A",{href:!0});var oat=s(Rj);BNo=r(oat,"ImageGPTForImageClassification"),oat.forEach(t),xNo=r(SAe," (ImageGPT model)"),SAe.forEach(t),kNo=i(Te),ma=n(Te,"LI",{});var Pf=s(ma);xie=n(Pf,"STRONG",{});var rat=s(xie);RNo=r(rat,"perceiver"),rat.forEach(t),SNo=r(Pf," \u2014 "),Sj=n(Pf,"A",{href:!0});var tat=s(Sj);PNo=r(tat,"PerceiverForImageClassificationLearned"),tat.forEach(t),$No=r(Pf," or "),Pj=n(Pf,"A",{href:!0});var aat=s(Pj);INo=r(aat,"PerceiverForImageClassificationFourier"),aat.forEach(t),NNo=r(Pf," or "),$j=n(Pf,"A",{href:!0});var nat=s($j);DNo=r(nat,"PerceiverForImageClassificationConvProcessing"),nat.forEach(t),jNo=r(Pf," (Perceiver model)"),Pf.forEach(t),qNo=i(Te),a2=n(Te,"LI",{});var PAe=s(a2);kie=n(PAe,"STRONG",{});var sat=s(kie);GNo=r(sat,"poolformer"),sat.forEach(t),ONo=r(PAe," \u2014 "),Ij=n(PAe,"A",{href:!0});var lat=s(Ij);XNo=r(lat,"PoolFormerForImageClassification"),lat.forEach(t),VNo=r(PAe," (PoolFormer model)"),PAe.forEach(t),zNo=i(Te),n2=n(Te,"LI",{});var $Ae=s(n2);Rie=n($Ae,"STRONG",{});var iat=s(Rie);WNo=r(iat,"resnet"),iat.forEach(t),QNo=r($Ae," \u2014 "),Nj=n($Ae,"A",{href:!0});var dat=s(Nj);HNo=r(dat,"ResNetForImageClassification"),dat.forEach(t),UNo=r($Ae," (ResNet model)"),$Ae.forEach(t),JNo=i(Te),s2=n(Te,"LI",{});var IAe=s(s2);Sie=n(IAe,"STRONG",{});var cat=s(Sie);YNo=r(cat,"segformer"),cat.forEach(t),KNo=r(IAe," \u2014 "),Dj=n(IAe,"A",{href:!0});var fat=s(Dj);ZNo=r(fat,"SegformerForImageClassification"),fat.forEach(t),eDo=r(IAe," (SegFormer model)"),IAe.forEach(t),oDo=i(Te),l2=n(Te,"LI",{});var NAe=s(l2);Pie=n(NAe,"STRONG",{});var mat=s(Pie);rDo=r(mat,"swin"),mat.forEach(t),tDo=r(NAe," \u2014 "),jj=n(NAe,"A",{href:!0});var gat=s(jj);aDo=r(gat,"SwinForImageClassification"),gat.forEach(t),nDo=r(NAe," (Swin model)"),NAe.forEach(t),sDo=i(Te),i2=n(Te,"LI",{});var DAe=s(i2);$ie=n(DAe,"STRONG",{});var hat=s($ie);lDo=r(hat,"van"),hat.forEach(t),iDo=r(DAe," \u2014 "),qj=n(DAe,"A",{href:!0});var pat=s(qj);dDo=r(pat,"VanForImageClassification"),pat.forEach(t),cDo=r(DAe," (VAN model)"),DAe.forEach(t),fDo=i(Te),d2=n(Te,"LI",{});var jAe=s(d2);Iie=n(jAe,"STRONG",{});var _at=s(Iie);mDo=r(_at,"vit"),_at.forEach(t),gDo=r(jAe," \u2014 "),Gj=n(jAe,"A",{href:!0});var uat=s(Gj);hDo=r(uat,"ViTForImageClassification"),uat.forEach(t),pDo=r(jAe," (ViT model)"),jAe.forEach(t),Te.forEach(t),_Do=i(Yt),c2=n(Yt,"P",{});var qAe=s(c2);uDo=r(qAe,"The model is set in evaluation mode by default using "),Nie=n(qAe,"CODE",{});var bat=s(Nie);bDo=r(bat,"model.eval()"),bat.forEach(t),vDo=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(qAe,"CODE",{});var vat=s(Die);TDo=r(vat,"model.train()"),vat.forEach(t),qAe.forEach(t),FDo=i(Yt),jie=n(Yt,"P",{});var Tat=s(jie);CDo=r(Tat,"Examples:"),Tat.forEach(t),MDo=i(Yt),m(hy.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Nke=i(c),Rd=n(c,"H2",{class:!0});var WSe=s(Rd);f2=n(WSe,"A",{id:!0,class:!0,href:!0});var Fat=s(f2);qie=n(Fat,"SPAN",{});var Cat=s(qie);m(py.$$.fragment,Cat),Cat.forEach(t),Fat.forEach(t),EDo=i(WSe),Gie=n(WSe,"SPAN",{});var Mat=s(Gie);yDo=r(Mat,"AutoModelForVision2Seq"),Mat.forEach(t),WSe.forEach(t),Dke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(_y.$$.fragment,ul),wDo=i(ul),Sd=n(ul,"P",{});var vW=s(Sd);ADo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oie=n(vW,"CODE",{});var Eat=s(Oie);LDo=r(Eat,"from_pretrained()"),Eat.forEach(t),BDo=r(vW,"class method or the "),Xie=n(vW,"CODE",{});var yat=s(Xie);xDo=r(yat,"from_config()"),yat.forEach(t),kDo=r(vW,`class
method.`),vW.forEach(t),RDo=i(ul),uy=n(ul,"P",{});var QSe=s(uy);SDo=r(QSe,"This class cannot be instantiated directly using "),Vie=n(QSe,"CODE",{});var wat=s(Vie);PDo=r(wat,"__init__()"),wat.forEach(t),$Do=r(QSe," (throws an error)."),QSe.forEach(t),IDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(by.$$.fragment,bl),NDo=i(bl),zie=n(bl,"P",{});var Aat=s(zie);DDo=r(Aat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Aat.forEach(t),jDo=i(bl),Pd=n(bl,"P",{});var TW=s(Pd);qDo=r(TW,`Note:
Loading a model from its configuration file does `),Wie=n(TW,"STRONG",{});var Lat=s(Wie);GDo=r(Lat,"not"),Lat.forEach(t),ODo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=n(TW,"CODE",{});var Bat=s(Qie);XDo=r(Bat,"from_pretrained()"),Bat.forEach(t),VDo=r(TW,"to load the model weights."),TW.forEach(t),zDo=i(bl),Hie=n(bl,"P",{});var xat=s(Hie);WDo=r(xat,"Examples:"),xat.forEach(t),QDo=i(bl),m(vy.$$.fragment,bl),bl.forEach(t),HDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Ty.$$.fragment,Kt),UDo=i(Kt),Uie=n(Kt,"P",{});var kat=s(Uie);JDo=r(kat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kat.forEach(t),YDo=i(Kt),rn=n(Kt,"P",{});var F4=s(rn);KDo=r(F4,"The model class to instantiate is selected based on the "),Jie=n(F4,"CODE",{});var Rat=s(Jie);ZDo=r(Rat,"model_type"),Rat.forEach(t),ejo=r(F4,` property of the config object (either
passed as an argument or loaded from `),Yie=n(F4,"CODE",{});var Sat=s(Yie);ojo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),rjo=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(F4,"CODE",{});var Pat=s(Kie);tjo=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),ajo=r(F4,":"),F4.forEach(t),njo=i(Kt),Zie=n(Kt,"UL",{});var $at=s(Zie);m2=n($at,"LI",{});var GAe=s(m2);ede=n(GAe,"STRONG",{});var Iat=s(ede);sjo=r(Iat,"vision-encoder-decoder"),Iat.forEach(t),ljo=r(GAe," \u2014 "),Oj=n(GAe,"A",{href:!0});var Nat=s(Oj);ijo=r(Nat,"VisionEncoderDecoderModel"),Nat.forEach(t),djo=r(GAe," (Vision Encoder decoder model)"),GAe.forEach(t),$at.forEach(t),cjo=i(Kt),g2=n(Kt,"P",{});var OAe=s(g2);fjo=r(OAe,"The model is set in evaluation mode by default using "),ode=n(OAe,"CODE",{});var Dat=s(ode);mjo=r(Dat,"model.eval()"),Dat.forEach(t),gjo=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(OAe,"CODE",{});var jat=s(rde);hjo=r(jat,"model.train()"),jat.forEach(t),OAe.forEach(t),pjo=i(Kt),tde=n(Kt,"P",{});var qat=s(tde);_jo=r(qat,"Examples:"),qat.forEach(t),ujo=i(Kt),m(Fy.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),jke=i(c),$d=n(c,"H2",{class:!0});var HSe=s($d);h2=n(HSe,"A",{id:!0,class:!0,href:!0});var Gat=s(h2);ade=n(Gat,"SPAN",{});var Oat=s(ade);m(Cy.$$.fragment,Oat),Oat.forEach(t),Gat.forEach(t),bjo=i(HSe),nde=n(HSe,"SPAN",{});var Xat=s(nde);vjo=r(Xat,"AutoModelForAudioClassification"),Xat.forEach(t),HSe.forEach(t),qke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(My.$$.fragment,vl),Tjo=i(vl),Id=n(vl,"P",{});var FW=s(Id);Fjo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sde=n(FW,"CODE",{});var Vat=s(sde);Cjo=r(Vat,"from_pretrained()"),Vat.forEach(t),Mjo=r(FW,"class method or the "),lde=n(FW,"CODE",{});var zat=s(lde);Ejo=r(zat,"from_config()"),zat.forEach(t),yjo=r(FW,`class
method.`),FW.forEach(t),wjo=i(vl),Ey=n(vl,"P",{});var USe=s(Ey);Ajo=r(USe,"This class cannot be instantiated directly using "),ide=n(USe,"CODE",{});var Wat=s(ide);Ljo=r(Wat,"__init__()"),Wat.forEach(t),Bjo=r(USe," (throws an error)."),USe.forEach(t),xjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(yy.$$.fragment,Tl),kjo=i(Tl),dde=n(Tl,"P",{});var Qat=s(dde);Rjo=r(Qat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qat.forEach(t),Sjo=i(Tl),Nd=n(Tl,"P",{});var CW=s(Nd);Pjo=r(CW,`Note:
Loading a model from its configuration file does `),cde=n(CW,"STRONG",{});var Hat=s(cde);$jo=r(Hat,"not"),Hat.forEach(t),Ijo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fde=n(CW,"CODE",{});var Uat=s(fde);Njo=r(Uat,"from_pretrained()"),Uat.forEach(t),Djo=r(CW,"to load the model weights."),CW.forEach(t),jjo=i(Tl),mde=n(Tl,"P",{});var Jat=s(mde);qjo=r(Jat,"Examples:"),Jat.forEach(t),Gjo=i(Tl),m(wy.$$.fragment,Tl),Tl.forEach(t),Ojo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(Ay.$$.fragment,Zt),Xjo=i(Zt),gde=n(Zt,"P",{});var Yat=s(gde);Vjo=r(Yat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Yat.forEach(t),zjo=i(Zt),tn=n(Zt,"P",{});var C4=s(tn);Wjo=r(C4,"The model class to instantiate is selected based on the "),hde=n(C4,"CODE",{});var Kat=s(hde);Qjo=r(Kat,"model_type"),Kat.forEach(t),Hjo=r(C4,` property of the config object (either
passed as an argument or loaded from `),pde=n(C4,"CODE",{});var Zat=s(pde);Ujo=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),Jjo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_de=n(C4,"CODE",{});var ent=s(_de);Yjo=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),Kjo=r(C4,":"),C4.forEach(t),Zjo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);p2=n(qo,"LI",{});var XAe=s(p2);ude=n(XAe,"STRONG",{});var ont=s(ude);eqo=r(ont,"data2vec-audio"),ont.forEach(t),oqo=r(XAe," \u2014 "),Xj=n(XAe,"A",{href:!0});var rnt=s(Xj);rqo=r(rnt,"Data2VecAudioForSequenceClassification"),rnt.forEach(t),tqo=r(XAe," (Data2VecAudio model)"),XAe.forEach(t),aqo=i(qo),_2=n(qo,"LI",{});var VAe=s(_2);bde=n(VAe,"STRONG",{});var tnt=s(bde);nqo=r(tnt,"hubert"),tnt.forEach(t),sqo=r(VAe," \u2014 "),Vj=n(VAe,"A",{href:!0});var ant=s(Vj);lqo=r(ant,"HubertForSequenceClassification"),ant.forEach(t),iqo=r(VAe," (Hubert model)"),VAe.forEach(t),dqo=i(qo),u2=n(qo,"LI",{});var zAe=s(u2);vde=n(zAe,"STRONG",{});var nnt=s(vde);cqo=r(nnt,"sew"),nnt.forEach(t),fqo=r(zAe," \u2014 "),zj=n(zAe,"A",{href:!0});var snt=s(zj);mqo=r(snt,"SEWForSequenceClassification"),snt.forEach(t),gqo=r(zAe," (SEW model)"),zAe.forEach(t),hqo=i(qo),b2=n(qo,"LI",{});var WAe=s(b2);Tde=n(WAe,"STRONG",{});var lnt=s(Tde);pqo=r(lnt,"sew-d"),lnt.forEach(t),_qo=r(WAe," \u2014 "),Wj=n(WAe,"A",{href:!0});var int=s(Wj);uqo=r(int,"SEWDForSequenceClassification"),int.forEach(t),bqo=r(WAe," (SEW-D model)"),WAe.forEach(t),vqo=i(qo),v2=n(qo,"LI",{});var QAe=s(v2);Fde=n(QAe,"STRONG",{});var dnt=s(Fde);Tqo=r(dnt,"unispeech"),dnt.forEach(t),Fqo=r(QAe," \u2014 "),Qj=n(QAe,"A",{href:!0});var cnt=s(Qj);Cqo=r(cnt,"UniSpeechForSequenceClassification"),cnt.forEach(t),Mqo=r(QAe," (UniSpeech model)"),QAe.forEach(t),Eqo=i(qo),T2=n(qo,"LI",{});var HAe=s(T2);Cde=n(HAe,"STRONG",{});var fnt=s(Cde);yqo=r(fnt,"unispeech-sat"),fnt.forEach(t),wqo=r(HAe," \u2014 "),Hj=n(HAe,"A",{href:!0});var mnt=s(Hj);Aqo=r(mnt,"UniSpeechSatForSequenceClassification"),mnt.forEach(t),Lqo=r(HAe," (UniSpeechSat model)"),HAe.forEach(t),Bqo=i(qo),F2=n(qo,"LI",{});var UAe=s(F2);Mde=n(UAe,"STRONG",{});var gnt=s(Mde);xqo=r(gnt,"wav2vec2"),gnt.forEach(t),kqo=r(UAe," \u2014 "),Uj=n(UAe,"A",{href:!0});var hnt=s(Uj);Rqo=r(hnt,"Wav2Vec2ForSequenceClassification"),hnt.forEach(t),Sqo=r(UAe," (Wav2Vec2 model)"),UAe.forEach(t),Pqo=i(qo),C2=n(qo,"LI",{});var JAe=s(C2);Ede=n(JAe,"STRONG",{});var pnt=s(Ede);$qo=r(pnt,"wavlm"),pnt.forEach(t),Iqo=r(JAe," \u2014 "),Jj=n(JAe,"A",{href:!0});var _nt=s(Jj);Nqo=r(_nt,"WavLMForSequenceClassification"),_nt.forEach(t),Dqo=r(JAe," (WavLM model)"),JAe.forEach(t),qo.forEach(t),jqo=i(Zt),M2=n(Zt,"P",{});var YAe=s(M2);qqo=r(YAe,"The model is set in evaluation mode by default using "),yde=n(YAe,"CODE",{});var unt=s(yde);Gqo=r(unt,"model.eval()"),unt.forEach(t),Oqo=r(YAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(YAe,"CODE",{});var bnt=s(wde);Xqo=r(bnt,"model.train()"),bnt.forEach(t),YAe.forEach(t),Vqo=i(Zt),Ade=n(Zt,"P",{});var vnt=s(Ade);zqo=r(vnt,"Examples:"),vnt.forEach(t),Wqo=i(Zt),m(Ly.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Gke=i(c),Dd=n(c,"H2",{class:!0});var JSe=s(Dd);E2=n(JSe,"A",{id:!0,class:!0,href:!0});var Tnt=s(E2);Lde=n(Tnt,"SPAN",{});var Fnt=s(Lde);m(By.$$.fragment,Fnt),Fnt.forEach(t),Tnt.forEach(t),Qqo=i(JSe),Bde=n(JSe,"SPAN",{});var Cnt=s(Bde);Hqo=r(Cnt,"AutoModelForAudioFrameClassification"),Cnt.forEach(t),JSe.forEach(t),Oke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(xy.$$.fragment,Fl),Uqo=i(Fl),jd=n(Fl,"P",{});var MW=s(jd);Jqo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xde=n(MW,"CODE",{});var Mnt=s(xde);Yqo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),Kqo=r(MW,"class method or the "),kde=n(MW,"CODE",{});var Ent=s(kde);Zqo=r(Ent,"from_config()"),Ent.forEach(t),eGo=r(MW,`class
method.`),MW.forEach(t),oGo=i(Fl),ky=n(Fl,"P",{});var YSe=s(ky);rGo=r(YSe,"This class cannot be instantiated directly using "),Rde=n(YSe,"CODE",{});var ynt=s(Rde);tGo=r(ynt,"__init__()"),ynt.forEach(t),aGo=r(YSe," (throws an error)."),YSe.forEach(t),nGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Ry.$$.fragment,Cl),sGo=i(Cl),Sde=n(Cl,"P",{});var wnt=s(Sde);lGo=r(wnt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wnt.forEach(t),iGo=i(Cl),qd=n(Cl,"P",{});var EW=s(qd);dGo=r(EW,`Note:
Loading a model from its configuration file does `),Pde=n(EW,"STRONG",{});var Ant=s(Pde);cGo=r(Ant,"not"),Ant.forEach(t),fGo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=n(EW,"CODE",{});var Lnt=s($de);mGo=r(Lnt,"from_pretrained()"),Lnt.forEach(t),gGo=r(EW,"to load the model weights."),EW.forEach(t),hGo=i(Cl),Ide=n(Cl,"P",{});var Bnt=s(Ide);pGo=r(Bnt,"Examples:"),Bnt.forEach(t),_Go=i(Cl),m(Sy.$$.fragment,Cl),Cl.forEach(t),uGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Py.$$.fragment,ea),bGo=i(ea),Nde=n(ea,"P",{});var xnt=s(Nde);vGo=r(xnt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xnt.forEach(t),TGo=i(ea),an=n(ea,"P",{});var M4=s(an);FGo=r(M4,"The model class to instantiate is selected based on the "),Dde=n(M4,"CODE",{});var knt=s(Dde);CGo=r(knt,"model_type"),knt.forEach(t),MGo=r(M4,` property of the config object (either
passed as an argument or loaded from `),jde=n(M4,"CODE",{});var Rnt=s(jde);EGo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),yGo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(M4,"CODE",{});var Snt=s(qde);wGo=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),AGo=r(M4,":"),M4.forEach(t),LGo=i(ea),nn=n(ea,"UL",{});var E4=s(nn);y2=n(E4,"LI",{});var KAe=s(y2);Gde=n(KAe,"STRONG",{});var Pnt=s(Gde);BGo=r(Pnt,"data2vec-audio"),Pnt.forEach(t),xGo=r(KAe," \u2014 "),Yj=n(KAe,"A",{href:!0});var $nt=s(Yj);kGo=r($nt,"Data2VecAudioForAudioFrameClassification"),$nt.forEach(t),RGo=r(KAe," (Data2VecAudio model)"),KAe.forEach(t),SGo=i(E4),w2=n(E4,"LI",{});var ZAe=s(w2);Ode=n(ZAe,"STRONG",{});var Int=s(Ode);PGo=r(Int,"unispeech-sat"),Int.forEach(t),$Go=r(ZAe," \u2014 "),Kj=n(ZAe,"A",{href:!0});var Nnt=s(Kj);IGo=r(Nnt,"UniSpeechSatForAudioFrameClassification"),Nnt.forEach(t),NGo=r(ZAe," (UniSpeechSat model)"),ZAe.forEach(t),DGo=i(E4),A2=n(E4,"LI",{});var e0e=s(A2);Xde=n(e0e,"STRONG",{});var Dnt=s(Xde);jGo=r(Dnt,"wav2vec2"),Dnt.forEach(t),qGo=r(e0e," \u2014 "),Zj=n(e0e,"A",{href:!0});var jnt=s(Zj);GGo=r(jnt,"Wav2Vec2ForAudioFrameClassification"),jnt.forEach(t),OGo=r(e0e," (Wav2Vec2 model)"),e0e.forEach(t),XGo=i(E4),L2=n(E4,"LI",{});var o0e=s(L2);Vde=n(o0e,"STRONG",{});var qnt=s(Vde);VGo=r(qnt,"wavlm"),qnt.forEach(t),zGo=r(o0e," \u2014 "),eq=n(o0e,"A",{href:!0});var Gnt=s(eq);WGo=r(Gnt,"WavLMForAudioFrameClassification"),Gnt.forEach(t),QGo=r(o0e," (WavLM model)"),o0e.forEach(t),E4.forEach(t),HGo=i(ea),B2=n(ea,"P",{});var r0e=s(B2);UGo=r(r0e,"The model is set in evaluation mode by default using "),zde=n(r0e,"CODE",{});var Ont=s(zde);JGo=r(Ont,"model.eval()"),Ont.forEach(t),YGo=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(r0e,"CODE",{});var Xnt=s(Wde);KGo=r(Xnt,"model.train()"),Xnt.forEach(t),r0e.forEach(t),ZGo=i(ea),Qde=n(ea,"P",{});var Vnt=s(Qde);eOo=r(Vnt,"Examples:"),Vnt.forEach(t),oOo=i(ea),m($y.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Xke=i(c),Gd=n(c,"H2",{class:!0});var KSe=s(Gd);x2=n(KSe,"A",{id:!0,class:!0,href:!0});var znt=s(x2);Hde=n(znt,"SPAN",{});var Wnt=s(Hde);m(Iy.$$.fragment,Wnt),Wnt.forEach(t),znt.forEach(t),rOo=i(KSe),Ude=n(KSe,"SPAN",{});var Qnt=s(Ude);tOo=r(Qnt,"AutoModelForCTC"),Qnt.forEach(t),KSe.forEach(t),Vke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Ny.$$.fragment,Ml),aOo=i(Ml),Od=n(Ml,"P",{});var yW=s(Od);nOo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jde=n(yW,"CODE",{});var Hnt=s(Jde);sOo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),lOo=r(yW,"class method or the "),Yde=n(yW,"CODE",{});var Unt=s(Yde);iOo=r(Unt,"from_config()"),Unt.forEach(t),dOo=r(yW,`class
method.`),yW.forEach(t),cOo=i(Ml),Dy=n(Ml,"P",{});var ZSe=s(Dy);fOo=r(ZSe,"This class cannot be instantiated directly using "),Kde=n(ZSe,"CODE",{});var Jnt=s(Kde);mOo=r(Jnt,"__init__()"),Jnt.forEach(t),gOo=r(ZSe," (throws an error)."),ZSe.forEach(t),hOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(jy.$$.fragment,El),pOo=i(El),Zde=n(El,"P",{});var Ynt=s(Zde);_Oo=r(Ynt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ynt.forEach(t),uOo=i(El),Xd=n(El,"P",{});var wW=s(Xd);bOo=r(wW,`Note:
Loading a model from its configuration file does `),ece=n(wW,"STRONG",{});var Knt=s(ece);vOo=r(Knt,"not"),Knt.forEach(t),TOo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=n(wW,"CODE",{});var Znt=s(oce);FOo=r(Znt,"from_pretrained()"),Znt.forEach(t),COo=r(wW,"to load the model weights."),wW.forEach(t),MOo=i(El),rce=n(El,"P",{});var est=s(rce);EOo=r(est,"Examples:"),est.forEach(t),yOo=i(El),m(qy.$$.fragment,El),El.forEach(t),wOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Gy.$$.fragment,oa),AOo=i(oa),tce=n(oa,"P",{});var ost=s(tce);LOo=r(ost,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ost.forEach(t),BOo=i(oa),sn=n(oa,"P",{});var y4=s(sn);xOo=r(y4,"The model class to instantiate is selected based on the "),ace=n(y4,"CODE",{});var rst=s(ace);kOo=r(rst,"model_type"),rst.forEach(t),ROo=r(y4,` property of the config object (either
passed as an argument or loaded from `),nce=n(y4,"CODE",{});var tst=s(nce);SOo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),POo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(y4,"CODE",{});var ast=s(sce);$Oo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),IOo=r(y4,":"),y4.forEach(t),NOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);k2=n(Go,"LI",{});var t0e=s(k2);lce=n(t0e,"STRONG",{});var nst=s(lce);DOo=r(nst,"data2vec-audio"),nst.forEach(t),jOo=r(t0e," \u2014 "),oq=n(t0e,"A",{href:!0});var sst=s(oq);qOo=r(sst,"Data2VecAudioForCTC"),sst.forEach(t),GOo=r(t0e," (Data2VecAudio model)"),t0e.forEach(t),OOo=i(Go),R2=n(Go,"LI",{});var a0e=s(R2);ice=n(a0e,"STRONG",{});var lst=s(ice);XOo=r(lst,"hubert"),lst.forEach(t),VOo=r(a0e," \u2014 "),rq=n(a0e,"A",{href:!0});var ist=s(rq);zOo=r(ist,"HubertForCTC"),ist.forEach(t),WOo=r(a0e," (Hubert model)"),a0e.forEach(t),QOo=i(Go),S2=n(Go,"LI",{});var n0e=s(S2);dce=n(n0e,"STRONG",{});var dst=s(dce);HOo=r(dst,"sew"),dst.forEach(t),UOo=r(n0e," \u2014 "),tq=n(n0e,"A",{href:!0});var cst=s(tq);JOo=r(cst,"SEWForCTC"),cst.forEach(t),YOo=r(n0e," (SEW model)"),n0e.forEach(t),KOo=i(Go),P2=n(Go,"LI",{});var s0e=s(P2);cce=n(s0e,"STRONG",{});var fst=s(cce);ZOo=r(fst,"sew-d"),fst.forEach(t),eXo=r(s0e," \u2014 "),aq=n(s0e,"A",{href:!0});var mst=s(aq);oXo=r(mst,"SEWDForCTC"),mst.forEach(t),rXo=r(s0e," (SEW-D model)"),s0e.forEach(t),tXo=i(Go),$2=n(Go,"LI",{});var l0e=s($2);fce=n(l0e,"STRONG",{});var gst=s(fce);aXo=r(gst,"unispeech"),gst.forEach(t),nXo=r(l0e," \u2014 "),nq=n(l0e,"A",{href:!0});var hst=s(nq);sXo=r(hst,"UniSpeechForCTC"),hst.forEach(t),lXo=r(l0e," (UniSpeech model)"),l0e.forEach(t),iXo=i(Go),I2=n(Go,"LI",{});var i0e=s(I2);mce=n(i0e,"STRONG",{});var pst=s(mce);dXo=r(pst,"unispeech-sat"),pst.forEach(t),cXo=r(i0e," \u2014 "),sq=n(i0e,"A",{href:!0});var _st=s(sq);fXo=r(_st,"UniSpeechSatForCTC"),_st.forEach(t),mXo=r(i0e," (UniSpeechSat model)"),i0e.forEach(t),gXo=i(Go),N2=n(Go,"LI",{});var d0e=s(N2);gce=n(d0e,"STRONG",{});var ust=s(gce);hXo=r(ust,"wav2vec2"),ust.forEach(t),pXo=r(d0e," \u2014 "),lq=n(d0e,"A",{href:!0});var bst=s(lq);_Xo=r(bst,"Wav2Vec2ForCTC"),bst.forEach(t),uXo=r(d0e," (Wav2Vec2 model)"),d0e.forEach(t),bXo=i(Go),D2=n(Go,"LI",{});var c0e=s(D2);hce=n(c0e,"STRONG",{});var vst=s(hce);vXo=r(vst,"wavlm"),vst.forEach(t),TXo=r(c0e," \u2014 "),iq=n(c0e,"A",{href:!0});var Tst=s(iq);FXo=r(Tst,"WavLMForCTC"),Tst.forEach(t),CXo=r(c0e," (WavLM model)"),c0e.forEach(t),Go.forEach(t),MXo=i(oa),j2=n(oa,"P",{});var f0e=s(j2);EXo=r(f0e,"The model is set in evaluation mode by default using "),pce=n(f0e,"CODE",{});var Fst=s(pce);yXo=r(Fst,"model.eval()"),Fst.forEach(t),wXo=r(f0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=n(f0e,"CODE",{});var Cst=s(_ce);AXo=r(Cst,"model.train()"),Cst.forEach(t),f0e.forEach(t),LXo=i(oa),uce=n(oa,"P",{});var Mst=s(uce);BXo=r(Mst,"Examples:"),Mst.forEach(t),xXo=i(oa),m(Oy.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),zke=i(c),Vd=n(c,"H2",{class:!0});var ePe=s(Vd);q2=n(ePe,"A",{id:!0,class:!0,href:!0});var Est=s(q2);bce=n(Est,"SPAN",{});var yst=s(bce);m(Xy.$$.fragment,yst),yst.forEach(t),Est.forEach(t),kXo=i(ePe),vce=n(ePe,"SPAN",{});var wst=s(vce);RXo=r(wst,"AutoModelForSpeechSeq2Seq"),wst.forEach(t),ePe.forEach(t),Wke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Vy.$$.fragment,yl),SXo=i(yl),zd=n(yl,"P",{});var AW=s(zd);PXo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tce=n(AW,"CODE",{});var Ast=s(Tce);$Xo=r(Ast,"from_pretrained()"),Ast.forEach(t),IXo=r(AW,"class method or the "),Fce=n(AW,"CODE",{});var Lst=s(Fce);NXo=r(Lst,"from_config()"),Lst.forEach(t),DXo=r(AW,`class
method.`),AW.forEach(t),jXo=i(yl),zy=n(yl,"P",{});var oPe=s(zy);qXo=r(oPe,"This class cannot be instantiated directly using "),Cce=n(oPe,"CODE",{});var Bst=s(Cce);GXo=r(Bst,"__init__()"),Bst.forEach(t),OXo=r(oPe," (throws an error)."),oPe.forEach(t),XXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Wy.$$.fragment,wl),VXo=i(wl),Mce=n(wl,"P",{});var xst=s(Mce);zXo=r(xst,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xst.forEach(t),WXo=i(wl),Wd=n(wl,"P",{});var LW=s(Wd);QXo=r(LW,`Note:
Loading a model from its configuration file does `),Ece=n(LW,"STRONG",{});var kst=s(Ece);HXo=r(kst,"not"),kst.forEach(t),UXo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=n(LW,"CODE",{});var Rst=s(yce);JXo=r(Rst,"from_pretrained()"),Rst.forEach(t),YXo=r(LW,"to load the model weights."),LW.forEach(t),KXo=i(wl),wce=n(wl,"P",{});var Sst=s(wce);ZXo=r(Sst,"Examples:"),Sst.forEach(t),eVo=i(wl),m(Qy.$$.fragment,wl),wl.forEach(t),oVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Hy.$$.fragment,ra),rVo=i(ra),Ace=n(ra,"P",{});var Pst=s(Ace);tVo=r(Pst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pst.forEach(t),aVo=i(ra),ln=n(ra,"P",{});var w4=s(ln);nVo=r(w4,"The model class to instantiate is selected based on the "),Lce=n(w4,"CODE",{});var $st=s(Lce);sVo=r($st,"model_type"),$st.forEach(t),lVo=r(w4,` property of the config object (either
passed as an argument or loaded from `),Bce=n(w4,"CODE",{});var Ist=s(Bce);iVo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),dVo=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(w4,"CODE",{});var Nst=s(xce);cVo=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),fVo=r(w4,":"),w4.forEach(t),mVo=i(ra),Uy=n(ra,"UL",{});var rPe=s(Uy);G2=n(rPe,"LI",{});var m0e=s(G2);kce=n(m0e,"STRONG",{});var Dst=s(kce);gVo=r(Dst,"speech-encoder-decoder"),Dst.forEach(t),hVo=r(m0e," \u2014 "),dq=n(m0e,"A",{href:!0});var jst=s(dq);pVo=r(jst,"SpeechEncoderDecoderModel"),jst.forEach(t),_Vo=r(m0e," (Speech Encoder decoder model)"),m0e.forEach(t),uVo=i(rPe),O2=n(rPe,"LI",{});var g0e=s(O2);Rce=n(g0e,"STRONG",{});var qst=s(Rce);bVo=r(qst,"speech_to_text"),qst.forEach(t),vVo=r(g0e," \u2014 "),cq=n(g0e,"A",{href:!0});var Gst=s(cq);TVo=r(Gst,"Speech2TextForConditionalGeneration"),Gst.forEach(t),FVo=r(g0e," (Speech2Text model)"),g0e.forEach(t),rPe.forEach(t),CVo=i(ra),X2=n(ra,"P",{});var h0e=s(X2);MVo=r(h0e,"The model is set in evaluation mode by default using "),Sce=n(h0e,"CODE",{});var Ost=s(Sce);EVo=r(Ost,"model.eval()"),Ost.forEach(t),yVo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(h0e,"CODE",{});var Xst=s(Pce);wVo=r(Xst,"model.train()"),Xst.forEach(t),h0e.forEach(t),AVo=i(ra),$ce=n(ra,"P",{});var Vst=s($ce);LVo=r(Vst,"Examples:"),Vst.forEach(t),BVo=i(ra),m(Jy.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Qke=i(c),Qd=n(c,"H2",{class:!0});var tPe=s(Qd);V2=n(tPe,"A",{id:!0,class:!0,href:!0});var zst=s(V2);Ice=n(zst,"SPAN",{});var Wst=s(Ice);m(Yy.$$.fragment,Wst),Wst.forEach(t),zst.forEach(t),xVo=i(tPe),Nce=n(tPe,"SPAN",{});var Qst=s(Nce);kVo=r(Qst,"AutoModelForAudioXVector"),Qst.forEach(t),tPe.forEach(t),Hke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Ky.$$.fragment,Al),RVo=i(Al),Hd=n(Al,"P",{});var BW=s(Hd);SVo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dce=n(BW,"CODE",{});var Hst=s(Dce);PVo=r(Hst,"from_pretrained()"),Hst.forEach(t),$Vo=r(BW,"class method or the "),jce=n(BW,"CODE",{});var Ust=s(jce);IVo=r(Ust,"from_config()"),Ust.forEach(t),NVo=r(BW,`class
method.`),BW.forEach(t),DVo=i(Al),Zy=n(Al,"P",{});var aPe=s(Zy);jVo=r(aPe,"This class cannot be instantiated directly using "),qce=n(aPe,"CODE",{});var Jst=s(qce);qVo=r(Jst,"__init__()"),Jst.forEach(t),GVo=r(aPe," (throws an error)."),aPe.forEach(t),OVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(ew.$$.fragment,Ll),XVo=i(Ll),Gce=n(Ll,"P",{});var Yst=s(Gce);VVo=r(Yst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yst.forEach(t),zVo=i(Ll),Ud=n(Ll,"P",{});var xW=s(Ud);WVo=r(xW,`Note:
Loading a model from its configuration file does `),Oce=n(xW,"STRONG",{});var Kst=s(Oce);QVo=r(Kst,"not"),Kst.forEach(t),HVo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=n(xW,"CODE",{});var Zst=s(Xce);UVo=r(Zst,"from_pretrained()"),Zst.forEach(t),JVo=r(xW,"to load the model weights."),xW.forEach(t),YVo=i(Ll),Vce=n(Ll,"P",{});var elt=s(Vce);KVo=r(elt,"Examples:"),elt.forEach(t),ZVo=i(Ll),m(ow.$$.fragment,Ll),Ll.forEach(t),ezo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(rw.$$.fragment,ta),ozo=i(ta),zce=n(ta,"P",{});var olt=s(zce);rzo=r(olt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),olt.forEach(t),tzo=i(ta),dn=n(ta,"P",{});var A4=s(dn);azo=r(A4,"The model class to instantiate is selected based on the "),Wce=n(A4,"CODE",{});var rlt=s(Wce);nzo=r(rlt,"model_type"),rlt.forEach(t),szo=r(A4,` property of the config object (either
passed as an argument or loaded from `),Qce=n(A4,"CODE",{});var tlt=s(Qce);lzo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),izo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=n(A4,"CODE",{});var alt=s(Hce);dzo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),czo=r(A4,":"),A4.forEach(t),fzo=i(ta),cn=n(ta,"UL",{});var L4=s(cn);z2=n(L4,"LI",{});var p0e=s(z2);Uce=n(p0e,"STRONG",{});var nlt=s(Uce);mzo=r(nlt,"data2vec-audio"),nlt.forEach(t),gzo=r(p0e," \u2014 "),fq=n(p0e,"A",{href:!0});var slt=s(fq);hzo=r(slt,"Data2VecAudioForXVector"),slt.forEach(t),pzo=r(p0e," (Data2VecAudio model)"),p0e.forEach(t),_zo=i(L4),W2=n(L4,"LI",{});var _0e=s(W2);Jce=n(_0e,"STRONG",{});var llt=s(Jce);uzo=r(llt,"unispeech-sat"),llt.forEach(t),bzo=r(_0e," \u2014 "),mq=n(_0e,"A",{href:!0});var ilt=s(mq);vzo=r(ilt,"UniSpeechSatForXVector"),ilt.forEach(t),Tzo=r(_0e," (UniSpeechSat model)"),_0e.forEach(t),Fzo=i(L4),Q2=n(L4,"LI",{});var u0e=s(Q2);Yce=n(u0e,"STRONG",{});var dlt=s(Yce);Czo=r(dlt,"wav2vec2"),dlt.forEach(t),Mzo=r(u0e," \u2014 "),gq=n(u0e,"A",{href:!0});var clt=s(gq);Ezo=r(clt,"Wav2Vec2ForXVector"),clt.forEach(t),yzo=r(u0e," (Wav2Vec2 model)"),u0e.forEach(t),wzo=i(L4),H2=n(L4,"LI",{});var b0e=s(H2);Kce=n(b0e,"STRONG",{});var flt=s(Kce);Azo=r(flt,"wavlm"),flt.forEach(t),Lzo=r(b0e," \u2014 "),hq=n(b0e,"A",{href:!0});var mlt=s(hq);Bzo=r(mlt,"WavLMForXVector"),mlt.forEach(t),xzo=r(b0e," (WavLM model)"),b0e.forEach(t),L4.forEach(t),kzo=i(ta),U2=n(ta,"P",{});var v0e=s(U2);Rzo=r(v0e,"The model is set in evaluation mode by default using "),Zce=n(v0e,"CODE",{});var glt=s(Zce);Szo=r(glt,"model.eval()"),glt.forEach(t),Pzo=r(v0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(v0e,"CODE",{});var hlt=s(efe);$zo=r(hlt,"model.train()"),hlt.forEach(t),v0e.forEach(t),Izo=i(ta),ofe=n(ta,"P",{});var plt=s(ofe);Nzo=r(plt,"Examples:"),plt.forEach(t),Dzo=i(ta),m(tw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Uke=i(c),Jd=n(c,"H2",{class:!0});var nPe=s(Jd);J2=n(nPe,"A",{id:!0,class:!0,href:!0});var _lt=s(J2);rfe=n(_lt,"SPAN",{});var ult=s(rfe);m(aw.$$.fragment,ult),ult.forEach(t),_lt.forEach(t),jzo=i(nPe),tfe=n(nPe,"SPAN",{});var blt=s(tfe);qzo=r(blt,"AutoModelForMaskedImageModeling"),blt.forEach(t),nPe.forEach(t),Jke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(nw.$$.fragment,Bl),Gzo=i(Bl),Yd=n(Bl,"P",{});var kW=s(Yd);Ozo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),afe=n(kW,"CODE",{});var vlt=s(afe);Xzo=r(vlt,"from_pretrained()"),vlt.forEach(t),Vzo=r(kW,"class method or the "),nfe=n(kW,"CODE",{});var Tlt=s(nfe);zzo=r(Tlt,"from_config()"),Tlt.forEach(t),Wzo=r(kW,`class
method.`),kW.forEach(t),Qzo=i(Bl),sw=n(Bl,"P",{});var sPe=s(sw);Hzo=r(sPe,"This class cannot be instantiated directly using "),sfe=n(sPe,"CODE",{});var Flt=s(sfe);Uzo=r(Flt,"__init__()"),Flt.forEach(t),Jzo=r(sPe," (throws an error)."),sPe.forEach(t),Yzo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(lw.$$.fragment,xl),Kzo=i(xl),lfe=n(xl,"P",{});var Clt=s(lfe);Zzo=r(Clt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Clt.forEach(t),eWo=i(xl),Kd=n(xl,"P",{});var RW=s(Kd);oWo=r(RW,`Note:
Loading a model from its configuration file does `),ife=n(RW,"STRONG",{});var Mlt=s(ife);rWo=r(Mlt,"not"),Mlt.forEach(t),tWo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dfe=n(RW,"CODE",{});var Elt=s(dfe);aWo=r(Elt,"from_pretrained()"),Elt.forEach(t),nWo=r(RW,"to load the model weights."),RW.forEach(t),sWo=i(xl),cfe=n(xl,"P",{});var ylt=s(cfe);lWo=r(ylt,"Examples:"),ylt.forEach(t),iWo=i(xl),m(iw.$$.fragment,xl),xl.forEach(t),dWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(dw.$$.fragment,aa),cWo=i(aa),ffe=n(aa,"P",{});var wlt=s(ffe);fWo=r(wlt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wlt.forEach(t),mWo=i(aa),fn=n(aa,"P",{});var B4=s(fn);gWo=r(B4,"The model class to instantiate is selected based on the "),mfe=n(B4,"CODE",{});var Alt=s(mfe);hWo=r(Alt,"model_type"),Alt.forEach(t),pWo=r(B4,` property of the config object (either
passed as an argument or loaded from `),gfe=n(B4,"CODE",{});var Llt=s(gfe);_Wo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),uWo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hfe=n(B4,"CODE",{});var Blt=s(hfe);bWo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),vWo=r(B4,":"),B4.forEach(t),TWo=i(aa),Zd=n(aa,"UL",{});var SW=s(Zd);Y2=n(SW,"LI",{});var T0e=s(Y2);pfe=n(T0e,"STRONG",{});var xlt=s(pfe);FWo=r(xlt,"deit"),xlt.forEach(t),CWo=r(T0e," \u2014 "),pq=n(T0e,"A",{href:!0});var klt=s(pq);MWo=r(klt,"DeiTForMaskedImageModeling"),klt.forEach(t),EWo=r(T0e," (DeiT model)"),T0e.forEach(t),yWo=i(SW),K2=n(SW,"LI",{});var F0e=s(K2);_fe=n(F0e,"STRONG",{});var Rlt=s(_fe);wWo=r(Rlt,"swin"),Rlt.forEach(t),AWo=r(F0e," \u2014 "),_q=n(F0e,"A",{href:!0});var Slt=s(_q);LWo=r(Slt,"SwinForMaskedImageModeling"),Slt.forEach(t),BWo=r(F0e," (Swin model)"),F0e.forEach(t),xWo=i(SW),Z2=n(SW,"LI",{});var C0e=s(Z2);ufe=n(C0e,"STRONG",{});var Plt=s(ufe);kWo=r(Plt,"vit"),Plt.forEach(t),RWo=r(C0e," \u2014 "),uq=n(C0e,"A",{href:!0});var $lt=s(uq);SWo=r($lt,"ViTForMaskedImageModeling"),$lt.forEach(t),PWo=r(C0e," (ViT model)"),C0e.forEach(t),SW.forEach(t),$Wo=i(aa),ev=n(aa,"P",{});var M0e=s(ev);IWo=r(M0e,"The model is set in evaluation mode by default using "),bfe=n(M0e,"CODE",{});var Ilt=s(bfe);NWo=r(Ilt,"model.eval()"),Ilt.forEach(t),DWo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(M0e,"CODE",{});var Nlt=s(vfe);jWo=r(Nlt,"model.train()"),Nlt.forEach(t),M0e.forEach(t),qWo=i(aa),Tfe=n(aa,"P",{});var Dlt=s(Tfe);GWo=r(Dlt,"Examples:"),Dlt.forEach(t),OWo=i(aa),m(cw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Yke=i(c),ec=n(c,"H2",{class:!0});var lPe=s(ec);ov=n(lPe,"A",{id:!0,class:!0,href:!0});var jlt=s(ov);Ffe=n(jlt,"SPAN",{});var qlt=s(Ffe);m(fw.$$.fragment,qlt),qlt.forEach(t),jlt.forEach(t),XWo=i(lPe),Cfe=n(lPe,"SPAN",{});var Glt=s(Cfe);VWo=r(Glt,"AutoModelForObjectDetection"),Glt.forEach(t),lPe.forEach(t),Kke=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(mw.$$.fragment,kl),zWo=i(kl),oc=n(kl,"P",{});var PW=s(oc);WWo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Mfe=n(PW,"CODE",{});var Olt=s(Mfe);QWo=r(Olt,"from_pretrained()"),Olt.forEach(t),HWo=r(PW,"class method or the "),Efe=n(PW,"CODE",{});var Xlt=s(Efe);UWo=r(Xlt,"from_config()"),Xlt.forEach(t),JWo=r(PW,`class
method.`),PW.forEach(t),YWo=i(kl),gw=n(kl,"P",{});var iPe=s(gw);KWo=r(iPe,"This class cannot be instantiated directly using "),yfe=n(iPe,"CODE",{});var Vlt=s(yfe);ZWo=r(Vlt,"__init__()"),Vlt.forEach(t),eQo=r(iPe," (throws an error)."),iPe.forEach(t),oQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(hw.$$.fragment,Rl),rQo=i(Rl),wfe=n(Rl,"P",{});var zlt=s(wfe);tQo=r(zlt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zlt.forEach(t),aQo=i(Rl),rc=n(Rl,"P",{});var $W=s(rc);nQo=r($W,`Note:
Loading a model from its configuration file does `),Afe=n($W,"STRONG",{});var Wlt=s(Afe);sQo=r(Wlt,"not"),Wlt.forEach(t),lQo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=n($W,"CODE",{});var Qlt=s(Lfe);iQo=r(Qlt,"from_pretrained()"),Qlt.forEach(t),dQo=r($W,"to load the model weights."),$W.forEach(t),cQo=i(Rl),Bfe=n(Rl,"P",{});var Hlt=s(Bfe);fQo=r(Hlt,"Examples:"),Hlt.forEach(t),mQo=i(Rl),m(pw.$$.fragment,Rl),Rl.forEach(t),gQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(_w.$$.fragment,na),hQo=i(na),xfe=n(na,"P",{});var Ult=s(xfe);pQo=r(Ult,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ult.forEach(t),_Qo=i(na),mn=n(na,"P",{});var x4=s(mn);uQo=r(x4,"The model class to instantiate is selected based on the "),kfe=n(x4,"CODE",{});var Jlt=s(kfe);bQo=r(Jlt,"model_type"),Jlt.forEach(t),vQo=r(x4,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(x4,"CODE",{});var Ylt=s(Rfe);TQo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),FQo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(x4,"CODE",{});var Klt=s(Sfe);CQo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),MQo=r(x4,":"),x4.forEach(t),EQo=i(na),Pfe=n(na,"UL",{});var Zlt=s(Pfe);rv=n(Zlt,"LI",{});var E0e=s(rv);$fe=n(E0e,"STRONG",{});var eit=s($fe);yQo=r(eit,"detr"),eit.forEach(t),wQo=r(E0e," \u2014 "),bq=n(E0e,"A",{href:!0});var oit=s(bq);AQo=r(oit,"DetrForObjectDetection"),oit.forEach(t),LQo=r(E0e," (DETR model)"),E0e.forEach(t),Zlt.forEach(t),BQo=i(na),tv=n(na,"P",{});var y0e=s(tv);xQo=r(y0e,"The model is set in evaluation mode by default using "),Ife=n(y0e,"CODE",{});var rit=s(Ife);kQo=r(rit,"model.eval()"),rit.forEach(t),RQo=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(y0e,"CODE",{});var tit=s(Nfe);SQo=r(tit,"model.train()"),tit.forEach(t),y0e.forEach(t),PQo=i(na),Dfe=n(na,"P",{});var ait=s(Dfe);$Qo=r(ait,"Examples:"),ait.forEach(t),IQo=i(na),m(uw.$$.fragment,na),na.forEach(t),kl.forEach(t),Zke=i(c),tc=n(c,"H2",{class:!0});var dPe=s(tc);av=n(dPe,"A",{id:!0,class:!0,href:!0});var nit=s(av);jfe=n(nit,"SPAN",{});var sit=s(jfe);m(bw.$$.fragment,sit),sit.forEach(t),nit.forEach(t),NQo=i(dPe),qfe=n(dPe,"SPAN",{});var lit=s(qfe);DQo=r(lit,"AutoModelForImageSegmentation"),lit.forEach(t),dPe.forEach(t),eRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(vw.$$.fragment,Sl),jQo=i(Sl),ac=n(Sl,"P",{});var IW=s(ac);qQo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Gfe=n(IW,"CODE",{});var iit=s(Gfe);GQo=r(iit,"from_pretrained()"),iit.forEach(t),OQo=r(IW,"class method or the "),Ofe=n(IW,"CODE",{});var dit=s(Ofe);XQo=r(dit,"from_config()"),dit.forEach(t),VQo=r(IW,`class
method.`),IW.forEach(t),zQo=i(Sl),Tw=n(Sl,"P",{});var cPe=s(Tw);WQo=r(cPe,"This class cannot be instantiated directly using "),Xfe=n(cPe,"CODE",{});var cit=s(Xfe);QQo=r(cit,"__init__()"),cit.forEach(t),HQo=r(cPe," (throws an error)."),cPe.forEach(t),UQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(Fw.$$.fragment,Pl),JQo=i(Pl),Vfe=n(Pl,"P",{});var fit=s(Vfe);YQo=r(fit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fit.forEach(t),KQo=i(Pl),nc=n(Pl,"P",{});var NW=s(nc);ZQo=r(NW,`Note:
Loading a model from its configuration file does `),zfe=n(NW,"STRONG",{});var mit=s(zfe);eHo=r(mit,"not"),mit.forEach(t),oHo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=n(NW,"CODE",{});var git=s(Wfe);rHo=r(git,"from_pretrained()"),git.forEach(t),tHo=r(NW,"to load the model weights."),NW.forEach(t),aHo=i(Pl),Qfe=n(Pl,"P",{});var hit=s(Qfe);nHo=r(hit,"Examples:"),hit.forEach(t),sHo=i(Pl),m(Cw.$$.fragment,Pl),Pl.forEach(t),lHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(Mw.$$.fragment,sa),iHo=i(sa),Hfe=n(sa,"P",{});var pit=s(Hfe);dHo=r(pit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pit.forEach(t),cHo=i(sa),gn=n(sa,"P",{});var k4=s(gn);fHo=r(k4,"The model class to instantiate is selected based on the "),Ufe=n(k4,"CODE",{});var _it=s(Ufe);mHo=r(_it,"model_type"),_it.forEach(t),gHo=r(k4,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(k4,"CODE",{});var uit=s(Jfe);hHo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),pHo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(k4,"CODE",{});var bit=s(Yfe);_Ho=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),uHo=r(k4,":"),k4.forEach(t),bHo=i(sa),Kfe=n(sa,"UL",{});var vit=s(Kfe);nv=n(vit,"LI",{});var w0e=s(nv);Zfe=n(w0e,"STRONG",{});var Tit=s(Zfe);vHo=r(Tit,"detr"),Tit.forEach(t),THo=r(w0e," \u2014 "),vq=n(w0e,"A",{href:!0});var Fit=s(vq);FHo=r(Fit,"DetrForSegmentation"),Fit.forEach(t),CHo=r(w0e," (DETR model)"),w0e.forEach(t),vit.forEach(t),MHo=i(sa),sv=n(sa,"P",{});var A0e=s(sv);EHo=r(A0e,"The model is set in evaluation mode by default using "),eme=n(A0e,"CODE",{});var Cit=s(eme);yHo=r(Cit,"model.eval()"),Cit.forEach(t),wHo=r(A0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(A0e,"CODE",{});var Mit=s(ome);AHo=r(Mit,"model.train()"),Mit.forEach(t),A0e.forEach(t),LHo=i(sa),rme=n(sa,"P",{});var Eit=s(rme);BHo=r(Eit,"Examples:"),Eit.forEach(t),xHo=i(sa),m(Ew.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),oRe=i(c),sc=n(c,"H2",{class:!0});var fPe=s(sc);lv=n(fPe,"A",{id:!0,class:!0,href:!0});var yit=s(lv);tme=n(yit,"SPAN",{});var wit=s(tme);m(yw.$$.fragment,wit),wit.forEach(t),yit.forEach(t),kHo=i(fPe),ame=n(fPe,"SPAN",{});var Ait=s(ame);RHo=r(Ait,"AutoModelForSemanticSegmentation"),Ait.forEach(t),fPe.forEach(t),rRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(ww.$$.fragment,$l),SHo=i($l),lc=n($l,"P",{});var DW=s(lc);PHo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nme=n(DW,"CODE",{});var Lit=s(nme);$Ho=r(Lit,"from_pretrained()"),Lit.forEach(t),IHo=r(DW,"class method or the "),sme=n(DW,"CODE",{});var Bit=s(sme);NHo=r(Bit,"from_config()"),Bit.forEach(t),DHo=r(DW,`class
method.`),DW.forEach(t),jHo=i($l),Aw=n($l,"P",{});var mPe=s(Aw);qHo=r(mPe,"This class cannot be instantiated directly using "),lme=n(mPe,"CODE",{});var xit=s(lme);GHo=r(xit,"__init__()"),xit.forEach(t),OHo=r(mPe," (throws an error)."),mPe.forEach(t),XHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(Lw.$$.fragment,Il),VHo=i(Il),ime=n(Il,"P",{});var kit=s(ime);zHo=r(kit,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kit.forEach(t),WHo=i(Il),ic=n(Il,"P",{});var jW=s(ic);QHo=r(jW,`Note:
Loading a model from its configuration file does `),dme=n(jW,"STRONG",{});var Rit=s(dme);HHo=r(Rit,"not"),Rit.forEach(t),UHo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=n(jW,"CODE",{});var Sit=s(cme);JHo=r(Sit,"from_pretrained()"),Sit.forEach(t),YHo=r(jW,"to load the model weights."),jW.forEach(t),KHo=i(Il),fme=n(Il,"P",{});var Pit=s(fme);ZHo=r(Pit,"Examples:"),Pit.forEach(t),eUo=i(Il),m(Bw.$$.fragment,Il),Il.forEach(t),oUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(xw.$$.fragment,la),rUo=i(la),mme=n(la,"P",{});var $it=s(mme);tUo=r($it,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$it.forEach(t),aUo=i(la),hn=n(la,"P",{});var R4=s(hn);nUo=r(R4,"The model class to instantiate is selected based on the "),gme=n(R4,"CODE",{});var Iit=s(gme);sUo=r(Iit,"model_type"),Iit.forEach(t),lUo=r(R4,` property of the config object (either
passed as an argument or loaded from `),hme=n(R4,"CODE",{});var Nit=s(hme);iUo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),dUo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(R4,"CODE",{});var Dit=s(pme);cUo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),fUo=r(R4,":"),R4.forEach(t),mUo=i(la),kw=n(la,"UL",{});var gPe=s(kw);iv=n(gPe,"LI",{});var L0e=s(iv);_me=n(L0e,"STRONG",{});var jit=s(_me);gUo=r(jit,"beit"),jit.forEach(t),hUo=r(L0e," \u2014 "),Tq=n(L0e,"A",{href:!0});var qit=s(Tq);pUo=r(qit,"BeitForSemanticSegmentation"),qit.forEach(t),_Uo=r(L0e," (BEiT model)"),L0e.forEach(t),uUo=i(gPe),dv=n(gPe,"LI",{});var B0e=s(dv);ume=n(B0e,"STRONG",{});var Git=s(ume);bUo=r(Git,"segformer"),Git.forEach(t),vUo=r(B0e," \u2014 "),Fq=n(B0e,"A",{href:!0});var Oit=s(Fq);TUo=r(Oit,"SegformerForSemanticSegmentation"),Oit.forEach(t),FUo=r(B0e," (SegFormer model)"),B0e.forEach(t),gPe.forEach(t),CUo=i(la),cv=n(la,"P",{});var x0e=s(cv);MUo=r(x0e,"The model is set in evaluation mode by default using "),bme=n(x0e,"CODE",{});var Xit=s(bme);EUo=r(Xit,"model.eval()"),Xit.forEach(t),yUo=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(x0e,"CODE",{});var Vit=s(vme);wUo=r(Vit,"model.train()"),Vit.forEach(t),x0e.forEach(t),AUo=i(la),Tme=n(la,"P",{});var zit=s(Tme);LUo=r(zit,"Examples:"),zit.forEach(t),BUo=i(la),m(Rw.$$.fragment,la),la.forEach(t),$l.forEach(t),tRe=i(c),dc=n(c,"H2",{class:!0});var hPe=s(dc);fv=n(hPe,"A",{id:!0,class:!0,href:!0});var Wit=s(fv);Fme=n(Wit,"SPAN",{});var Qit=s(Fme);m(Sw.$$.fragment,Qit),Qit.forEach(t),Wit.forEach(t),xUo=i(hPe),Cme=n(hPe,"SPAN",{});var Hit=s(Cme);kUo=r(Hit,"AutoModelForInstanceSegmentation"),Hit.forEach(t),hPe.forEach(t),aRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(Pw.$$.fragment,Nl),RUo=i(Nl),cc=n(Nl,"P",{});var qW=s(cc);SUo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Mme=n(qW,"CODE",{});var Uit=s(Mme);PUo=r(Uit,"from_pretrained()"),Uit.forEach(t),$Uo=r(qW,"class method or the "),Eme=n(qW,"CODE",{});var Jit=s(Eme);IUo=r(Jit,"from_config()"),Jit.forEach(t),NUo=r(qW,`class
method.`),qW.forEach(t),DUo=i(Nl),$w=n(Nl,"P",{});var pPe=s($w);jUo=r(pPe,"This class cannot be instantiated directly using "),yme=n(pPe,"CODE",{});var Yit=s(yme);qUo=r(Yit,"__init__()"),Yit.forEach(t),GUo=r(pPe," (throws an error)."),pPe.forEach(t),OUo=i(Nl),mt=n(Nl,"DIV",{class:!0});var Dl=s(mt);m(Iw.$$.fragment,Dl),XUo=i(Dl),wme=n(Dl,"P",{});var Kit=s(wme);VUo=r(Kit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Kit.forEach(t),zUo=i(Dl),fc=n(Dl,"P",{});var GW=s(fc);WUo=r(GW,`Note:
Loading a model from its configuration file does `),Ame=n(GW,"STRONG",{});var Zit=s(Ame);QUo=r(Zit,"not"),Zit.forEach(t),HUo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=n(GW,"CODE",{});var edt=s(Lme);UUo=r(edt,"from_pretrained()"),edt.forEach(t),JUo=r(GW,"to load the model weights."),GW.forEach(t),YUo=i(Dl),Bme=n(Dl,"P",{});var odt=s(Bme);KUo=r(odt,"Examples:"),odt.forEach(t),ZUo=i(Dl),m(Nw.$$.fragment,Dl),Dl.forEach(t),eJo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(Dw.$$.fragment,ia),oJo=i(ia),xme=n(ia,"P",{});var rdt=s(xme);rJo=r(rdt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rdt.forEach(t),tJo=i(ia),pn=n(ia,"P",{});var S4=s(pn);aJo=r(S4,"The model class to instantiate is selected based on the "),kme=n(S4,"CODE",{});var tdt=s(kme);nJo=r(tdt,"model_type"),tdt.forEach(t),sJo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Rme=n(S4,"CODE",{});var adt=s(Rme);lJo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),iJo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(S4,"CODE",{});var ndt=s(Sme);dJo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),cJo=r(S4,":"),S4.forEach(t),fJo=i(ia),Pme=n(ia,"UL",{});var sdt=s(Pme);mv=n(sdt,"LI",{});var k0e=s(mv);$me=n(k0e,"STRONG",{});var ldt=s($me);mJo=r(ldt,"maskformer"),ldt.forEach(t),gJo=r(k0e," \u2014 "),Cq=n(k0e,"A",{href:!0});var idt=s(Cq);hJo=r(idt,"MaskFormerForInstanceSegmentation"),idt.forEach(t),pJo=r(k0e," (MaskFormer model)"),k0e.forEach(t),sdt.forEach(t),_Jo=i(ia),gv=n(ia,"P",{});var R0e=s(gv);uJo=r(R0e,"The model is set in evaluation mode by default using "),Ime=n(R0e,"CODE",{});var ddt=s(Ime);bJo=r(ddt,"model.eval()"),ddt.forEach(t),vJo=r(R0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=n(R0e,"CODE",{});var cdt=s(Nme);TJo=r(cdt,"model.train()"),cdt.forEach(t),R0e.forEach(t),FJo=i(ia),Dme=n(ia,"P",{});var fdt=s(Dme);CJo=r(fdt,"Examples:"),fdt.forEach(t),MJo=i(ia),m(jw.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),nRe=i(c),mc=n(c,"H2",{class:!0});var _Pe=s(mc);hv=n(_Pe,"A",{id:!0,class:!0,href:!0});var mdt=s(hv);jme=n(mdt,"SPAN",{});var gdt=s(jme);m(qw.$$.fragment,gdt),gdt.forEach(t),mdt.forEach(t),EJo=i(_Pe),qme=n(_Pe,"SPAN",{});var hdt=s(qme);yJo=r(hdt,"TFAutoModel"),hdt.forEach(t),_Pe.forEach(t),sRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(Gw.$$.fragment,jl),wJo=i(jl),gc=n(jl,"P",{});var OW=s(gc);AJo=r(OW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gme=n(OW,"CODE",{});var pdt=s(Gme);LJo=r(pdt,"from_pretrained()"),pdt.forEach(t),BJo=r(OW,"class method or the "),Ome=n(OW,"CODE",{});var _dt=s(Ome);xJo=r(_dt,"from_config()"),_dt.forEach(t),kJo=r(OW,`class
method.`),OW.forEach(t),RJo=i(jl),Ow=n(jl,"P",{});var uPe=s(Ow);SJo=r(uPe,"This class cannot be instantiated directly using "),Xme=n(uPe,"CODE",{});var udt=s(Xme);PJo=r(udt,"__init__()"),udt.forEach(t),$Jo=r(uPe," (throws an error)."),uPe.forEach(t),IJo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(Xw.$$.fragment,ql),NJo=i(ql),Vme=n(ql,"P",{});var bdt=s(Vme);DJo=r(bdt,"Instantiates one of the base model classes of the library from a configuration."),bdt.forEach(t),jJo=i(ql),hc=n(ql,"P",{});var XW=s(hc);qJo=r(XW,`Note:
Loading a model from its configuration file does `),zme=n(XW,"STRONG",{});var vdt=s(zme);GJo=r(vdt,"not"),vdt.forEach(t),OJo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=n(XW,"CODE",{});var Tdt=s(Wme);XJo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),VJo=r(XW,"to load the model weights."),XW.forEach(t),zJo=i(ql),Qme=n(ql,"P",{});var Fdt=s(Qme);WJo=r(Fdt,"Examples:"),Fdt.forEach(t),QJo=i(ql),m(Vw.$$.fragment,ql),ql.forEach(t),HJo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(zw.$$.fragment,pa),UJo=i(pa),Hme=n(pa,"P",{});var Cdt=s(Hme);JJo=r(Cdt,"Instantiate one of the base model classes of the library from a pretrained model."),Cdt.forEach(t),YJo=i(pa),_n=n(pa,"P",{});var P4=s(_n);KJo=r(P4,"The model class to instantiate is selected based on the "),Ume=n(P4,"CODE",{});var Mdt=s(Ume);ZJo=r(Mdt,"model_type"),Mdt.forEach(t),eYo=r(P4,` property of the config object (either
passed as an argument or loaded from `),Jme=n(P4,"CODE",{});var Edt=s(Jme);oYo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),rYo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(P4,"CODE",{});var ydt=s(Yme);tYo=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),aYo=r(P4,":"),P4.forEach(t),nYo=i(pa),B=n(pa,"UL",{});var x=s(B);pv=n(x,"LI",{});var S0e=s(pv);Kme=n(S0e,"STRONG",{});var wdt=s(Kme);sYo=r(wdt,"albert"),wdt.forEach(t),lYo=r(S0e," \u2014 "),Mq=n(S0e,"A",{href:!0});var Adt=s(Mq);iYo=r(Adt,"TFAlbertModel"),Adt.forEach(t),dYo=r(S0e," (ALBERT model)"),S0e.forEach(t),cYo=i(x),_v=n(x,"LI",{});var P0e=s(_v);Zme=n(P0e,"STRONG",{});var Ldt=s(Zme);fYo=r(Ldt,"bart"),Ldt.forEach(t),mYo=r(P0e," \u2014 "),Eq=n(P0e,"A",{href:!0});var Bdt=s(Eq);gYo=r(Bdt,"TFBartModel"),Bdt.forEach(t),hYo=r(P0e," (BART model)"),P0e.forEach(t),pYo=i(x),uv=n(x,"LI",{});var $0e=s(uv);ege=n($0e,"STRONG",{});var xdt=s(ege);_Yo=r(xdt,"bert"),xdt.forEach(t),uYo=r($0e," \u2014 "),yq=n($0e,"A",{href:!0});var kdt=s(yq);bYo=r(kdt,"TFBertModel"),kdt.forEach(t),vYo=r($0e," (BERT model)"),$0e.forEach(t),TYo=i(x),bv=n(x,"LI",{});var I0e=s(bv);oge=n(I0e,"STRONG",{});var Rdt=s(oge);FYo=r(Rdt,"blenderbot"),Rdt.forEach(t),CYo=r(I0e," \u2014 "),wq=n(I0e,"A",{href:!0});var Sdt=s(wq);MYo=r(Sdt,"TFBlenderbotModel"),Sdt.forEach(t),EYo=r(I0e," (Blenderbot model)"),I0e.forEach(t),yYo=i(x),vv=n(x,"LI",{});var N0e=s(vv);rge=n(N0e,"STRONG",{});var Pdt=s(rge);wYo=r(Pdt,"blenderbot-small"),Pdt.forEach(t),AYo=r(N0e," \u2014 "),Aq=n(N0e,"A",{href:!0});var $dt=s(Aq);LYo=r($dt,"TFBlenderbotSmallModel"),$dt.forEach(t),BYo=r(N0e," (BlenderbotSmall model)"),N0e.forEach(t),xYo=i(x),Tv=n(x,"LI",{});var D0e=s(Tv);tge=n(D0e,"STRONG",{});var Idt=s(tge);kYo=r(Idt,"camembert"),Idt.forEach(t),RYo=r(D0e," \u2014 "),Lq=n(D0e,"A",{href:!0});var Ndt=s(Lq);SYo=r(Ndt,"TFCamembertModel"),Ndt.forEach(t),PYo=r(D0e," (CamemBERT model)"),D0e.forEach(t),$Yo=i(x),Fv=n(x,"LI",{});var j0e=s(Fv);age=n(j0e,"STRONG",{});var Ddt=s(age);IYo=r(Ddt,"clip"),Ddt.forEach(t),NYo=r(j0e," \u2014 "),Bq=n(j0e,"A",{href:!0});var jdt=s(Bq);DYo=r(jdt,"TFCLIPModel"),jdt.forEach(t),jYo=r(j0e," (CLIP model)"),j0e.forEach(t),qYo=i(x),Cv=n(x,"LI",{});var q0e=s(Cv);nge=n(q0e,"STRONG",{});var qdt=s(nge);GYo=r(qdt,"convbert"),qdt.forEach(t),OYo=r(q0e," \u2014 "),xq=n(q0e,"A",{href:!0});var Gdt=s(xq);XYo=r(Gdt,"TFConvBertModel"),Gdt.forEach(t),VYo=r(q0e," (ConvBERT model)"),q0e.forEach(t),zYo=i(x),Mv=n(x,"LI",{});var G0e=s(Mv);sge=n(G0e,"STRONG",{});var Odt=s(sge);WYo=r(Odt,"convnext"),Odt.forEach(t),QYo=r(G0e," \u2014 "),kq=n(G0e,"A",{href:!0});var Xdt=s(kq);HYo=r(Xdt,"TFConvNextModel"),Xdt.forEach(t),UYo=r(G0e," (ConvNext model)"),G0e.forEach(t),JYo=i(x),Ev=n(x,"LI",{});var O0e=s(Ev);lge=n(O0e,"STRONG",{});var Vdt=s(lge);YYo=r(Vdt,"ctrl"),Vdt.forEach(t),KYo=r(O0e," \u2014 "),Rq=n(O0e,"A",{href:!0});var zdt=s(Rq);ZYo=r(zdt,"TFCTRLModel"),zdt.forEach(t),eKo=r(O0e," (CTRL model)"),O0e.forEach(t),oKo=i(x),yv=n(x,"LI",{});var X0e=s(yv);ige=n(X0e,"STRONG",{});var Wdt=s(ige);rKo=r(Wdt,"deberta"),Wdt.forEach(t),tKo=r(X0e," \u2014 "),Sq=n(X0e,"A",{href:!0});var Qdt=s(Sq);aKo=r(Qdt,"TFDebertaModel"),Qdt.forEach(t),nKo=r(X0e," (DeBERTa model)"),X0e.forEach(t),sKo=i(x),wv=n(x,"LI",{});var V0e=s(wv);dge=n(V0e,"STRONG",{});var Hdt=s(dge);lKo=r(Hdt,"deberta-v2"),Hdt.forEach(t),iKo=r(V0e," \u2014 "),Pq=n(V0e,"A",{href:!0});var Udt=s(Pq);dKo=r(Udt,"TFDebertaV2Model"),Udt.forEach(t),cKo=r(V0e," (DeBERTa-v2 model)"),V0e.forEach(t),fKo=i(x),Av=n(x,"LI",{});var z0e=s(Av);cge=n(z0e,"STRONG",{});var Jdt=s(cge);mKo=r(Jdt,"distilbert"),Jdt.forEach(t),gKo=r(z0e," \u2014 "),$q=n(z0e,"A",{href:!0});var Ydt=s($q);hKo=r(Ydt,"TFDistilBertModel"),Ydt.forEach(t),pKo=r(z0e," (DistilBERT model)"),z0e.forEach(t),_Ko=i(x),Lv=n(x,"LI",{});var W0e=s(Lv);fge=n(W0e,"STRONG",{});var Kdt=s(fge);uKo=r(Kdt,"dpr"),Kdt.forEach(t),bKo=r(W0e," \u2014 "),Iq=n(W0e,"A",{href:!0});var Zdt=s(Iq);vKo=r(Zdt,"TFDPRQuestionEncoder"),Zdt.forEach(t),TKo=r(W0e," (DPR model)"),W0e.forEach(t),FKo=i(x),Bv=n(x,"LI",{});var Q0e=s(Bv);mge=n(Q0e,"STRONG",{});var ect=s(mge);CKo=r(ect,"electra"),ect.forEach(t),MKo=r(Q0e," \u2014 "),Nq=n(Q0e,"A",{href:!0});var oct=s(Nq);EKo=r(oct,"TFElectraModel"),oct.forEach(t),yKo=r(Q0e," (ELECTRA model)"),Q0e.forEach(t),wKo=i(x),xv=n(x,"LI",{});var H0e=s(xv);gge=n(H0e,"STRONG",{});var rct=s(gge);AKo=r(rct,"flaubert"),rct.forEach(t),LKo=r(H0e," \u2014 "),Dq=n(H0e,"A",{href:!0});var tct=s(Dq);BKo=r(tct,"TFFlaubertModel"),tct.forEach(t),xKo=r(H0e," (FlauBERT model)"),H0e.forEach(t),kKo=i(x),Gs=n(x,"LI",{});var Y7=s(Gs);hge=n(Y7,"STRONG",{});var act=s(hge);RKo=r(act,"funnel"),act.forEach(t),SKo=r(Y7," \u2014 "),jq=n(Y7,"A",{href:!0});var nct=s(jq);PKo=r(nct,"TFFunnelModel"),nct.forEach(t),$Ko=r(Y7," or "),qq=n(Y7,"A",{href:!0});var sct=s(qq);IKo=r(sct,"TFFunnelBaseModel"),sct.forEach(t),NKo=r(Y7," (Funnel Transformer model)"),Y7.forEach(t),DKo=i(x),kv=n(x,"LI",{});var U0e=s(kv);pge=n(U0e,"STRONG",{});var lct=s(pge);jKo=r(lct,"gpt2"),lct.forEach(t),qKo=r(U0e," \u2014 "),Gq=n(U0e,"A",{href:!0});var ict=s(Gq);GKo=r(ict,"TFGPT2Model"),ict.forEach(t),OKo=r(U0e," (OpenAI GPT-2 model)"),U0e.forEach(t),XKo=i(x),Rv=n(x,"LI",{});var J0e=s(Rv);_ge=n(J0e,"STRONG",{});var dct=s(_ge);VKo=r(dct,"hubert"),dct.forEach(t),zKo=r(J0e," \u2014 "),Oq=n(J0e,"A",{href:!0});var cct=s(Oq);WKo=r(cct,"TFHubertModel"),cct.forEach(t),QKo=r(J0e," (Hubert model)"),J0e.forEach(t),HKo=i(x),Sv=n(x,"LI",{});var Y0e=s(Sv);uge=n(Y0e,"STRONG",{});var fct=s(uge);UKo=r(fct,"layoutlm"),fct.forEach(t),JKo=r(Y0e," \u2014 "),Xq=n(Y0e,"A",{href:!0});var mct=s(Xq);YKo=r(mct,"TFLayoutLMModel"),mct.forEach(t),KKo=r(Y0e," (LayoutLM model)"),Y0e.forEach(t),ZKo=i(x),Pv=n(x,"LI",{});var K0e=s(Pv);bge=n(K0e,"STRONG",{});var gct=s(bge);eZo=r(gct,"led"),gct.forEach(t),oZo=r(K0e," \u2014 "),Vq=n(K0e,"A",{href:!0});var hct=s(Vq);rZo=r(hct,"TFLEDModel"),hct.forEach(t),tZo=r(K0e," (LED model)"),K0e.forEach(t),aZo=i(x),$v=n(x,"LI",{});var Z0e=s($v);vge=n(Z0e,"STRONG",{});var pct=s(vge);nZo=r(pct,"longformer"),pct.forEach(t),sZo=r(Z0e," \u2014 "),zq=n(Z0e,"A",{href:!0});var _ct=s(zq);lZo=r(_ct,"TFLongformerModel"),_ct.forEach(t),iZo=r(Z0e," (Longformer model)"),Z0e.forEach(t),dZo=i(x),Iv=n(x,"LI",{});var eLe=s(Iv);Tge=n(eLe,"STRONG",{});var uct=s(Tge);cZo=r(uct,"lxmert"),uct.forEach(t),fZo=r(eLe," \u2014 "),Wq=n(eLe,"A",{href:!0});var bct=s(Wq);mZo=r(bct,"TFLxmertModel"),bct.forEach(t),gZo=r(eLe," (LXMERT model)"),eLe.forEach(t),hZo=i(x),Nv=n(x,"LI",{});var oLe=s(Nv);Fge=n(oLe,"STRONG",{});var vct=s(Fge);pZo=r(vct,"marian"),vct.forEach(t),_Zo=r(oLe," \u2014 "),Qq=n(oLe,"A",{href:!0});var Tct=s(Qq);uZo=r(Tct,"TFMarianModel"),Tct.forEach(t),bZo=r(oLe," (Marian model)"),oLe.forEach(t),vZo=i(x),Dv=n(x,"LI",{});var rLe=s(Dv);Cge=n(rLe,"STRONG",{});var Fct=s(Cge);TZo=r(Fct,"mbart"),Fct.forEach(t),FZo=r(rLe," \u2014 "),Hq=n(rLe,"A",{href:!0});var Cct=s(Hq);CZo=r(Cct,"TFMBartModel"),Cct.forEach(t),MZo=r(rLe," (mBART model)"),rLe.forEach(t),EZo=i(x),jv=n(x,"LI",{});var tLe=s(jv);Mge=n(tLe,"STRONG",{});var Mct=s(Mge);yZo=r(Mct,"mobilebert"),Mct.forEach(t),wZo=r(tLe," \u2014 "),Uq=n(tLe,"A",{href:!0});var Ect=s(Uq);AZo=r(Ect,"TFMobileBertModel"),Ect.forEach(t),LZo=r(tLe," (MobileBERT model)"),tLe.forEach(t),BZo=i(x),qv=n(x,"LI",{});var aLe=s(qv);Ege=n(aLe,"STRONG",{});var yct=s(Ege);xZo=r(yct,"mpnet"),yct.forEach(t),kZo=r(aLe," \u2014 "),Jq=n(aLe,"A",{href:!0});var wct=s(Jq);RZo=r(wct,"TFMPNetModel"),wct.forEach(t),SZo=r(aLe," (MPNet model)"),aLe.forEach(t),PZo=i(x),Gv=n(x,"LI",{});var nLe=s(Gv);yge=n(nLe,"STRONG",{});var Act=s(yge);$Zo=r(Act,"mt5"),Act.forEach(t),IZo=r(nLe," \u2014 "),Yq=n(nLe,"A",{href:!0});var Lct=s(Yq);NZo=r(Lct,"TFMT5Model"),Lct.forEach(t),DZo=r(nLe," (mT5 model)"),nLe.forEach(t),jZo=i(x),Ov=n(x,"LI",{});var sLe=s(Ov);wge=n(sLe,"STRONG",{});var Bct=s(wge);qZo=r(Bct,"openai-gpt"),Bct.forEach(t),GZo=r(sLe," \u2014 "),Kq=n(sLe,"A",{href:!0});var xct=s(Kq);OZo=r(xct,"TFOpenAIGPTModel"),xct.forEach(t),XZo=r(sLe," (OpenAI GPT model)"),sLe.forEach(t),VZo=i(x),Xv=n(x,"LI",{});var lLe=s(Xv);Age=n(lLe,"STRONG",{});var kct=s(Age);zZo=r(kct,"pegasus"),kct.forEach(t),WZo=r(lLe," \u2014 "),Zq=n(lLe,"A",{href:!0});var Rct=s(Zq);QZo=r(Rct,"TFPegasusModel"),Rct.forEach(t),HZo=r(lLe," (Pegasus model)"),lLe.forEach(t),UZo=i(x),Vv=n(x,"LI",{});var iLe=s(Vv);Lge=n(iLe,"STRONG",{});var Sct=s(Lge);JZo=r(Sct,"rembert"),Sct.forEach(t),YZo=r(iLe," \u2014 "),eG=n(iLe,"A",{href:!0});var Pct=s(eG);KZo=r(Pct,"TFRemBertModel"),Pct.forEach(t),ZZo=r(iLe," (RemBERT model)"),iLe.forEach(t),eer=i(x),zv=n(x,"LI",{});var dLe=s(zv);Bge=n(dLe,"STRONG",{});var $ct=s(Bge);oer=r($ct,"roberta"),$ct.forEach(t),rer=r(dLe," \u2014 "),oG=n(dLe,"A",{href:!0});var Ict=s(oG);ter=r(Ict,"TFRobertaModel"),Ict.forEach(t),aer=r(dLe," (RoBERTa model)"),dLe.forEach(t),ner=i(x),Wv=n(x,"LI",{});var cLe=s(Wv);xge=n(cLe,"STRONG",{});var Nct=s(xge);ser=r(Nct,"roformer"),Nct.forEach(t),ler=r(cLe," \u2014 "),rG=n(cLe,"A",{href:!0});var Dct=s(rG);ier=r(Dct,"TFRoFormerModel"),Dct.forEach(t),der=r(cLe," (RoFormer model)"),cLe.forEach(t),cer=i(x),Qv=n(x,"LI",{});var fLe=s(Qv);kge=n(fLe,"STRONG",{});var jct=s(kge);fer=r(jct,"speech_to_text"),jct.forEach(t),mer=r(fLe," \u2014 "),tG=n(fLe,"A",{href:!0});var qct=s(tG);ger=r(qct,"TFSpeech2TextModel"),qct.forEach(t),her=r(fLe," (Speech2Text model)"),fLe.forEach(t),per=i(x),Hv=n(x,"LI",{});var mLe=s(Hv);Rge=n(mLe,"STRONG",{});var Gct=s(Rge);_er=r(Gct,"t5"),Gct.forEach(t),uer=r(mLe," \u2014 "),aG=n(mLe,"A",{href:!0});var Oct=s(aG);ber=r(Oct,"TFT5Model"),Oct.forEach(t),ver=r(mLe," (T5 model)"),mLe.forEach(t),Ter=i(x),Uv=n(x,"LI",{});var gLe=s(Uv);Sge=n(gLe,"STRONG",{});var Xct=s(Sge);Fer=r(Xct,"tapas"),Xct.forEach(t),Cer=r(gLe," \u2014 "),nG=n(gLe,"A",{href:!0});var Vct=s(nG);Mer=r(Vct,"TFTapasModel"),Vct.forEach(t),Eer=r(gLe," (TAPAS model)"),gLe.forEach(t),yer=i(x),Jv=n(x,"LI",{});var hLe=s(Jv);Pge=n(hLe,"STRONG",{});var zct=s(Pge);wer=r(zct,"transfo-xl"),zct.forEach(t),Aer=r(hLe," \u2014 "),sG=n(hLe,"A",{href:!0});var Wct=s(sG);Ler=r(Wct,"TFTransfoXLModel"),Wct.forEach(t),Ber=r(hLe," (Transformer-XL model)"),hLe.forEach(t),xer=i(x),Yv=n(x,"LI",{});var pLe=s(Yv);$ge=n(pLe,"STRONG",{});var Qct=s($ge);ker=r(Qct,"vit"),Qct.forEach(t),Rer=r(pLe," \u2014 "),lG=n(pLe,"A",{href:!0});var Hct=s(lG);Ser=r(Hct,"TFViTModel"),Hct.forEach(t),Per=r(pLe," (ViT model)"),pLe.forEach(t),$er=i(x),Kv=n(x,"LI",{});var _Le=s(Kv);Ige=n(_Le,"STRONG",{});var Uct=s(Ige);Ier=r(Uct,"wav2vec2"),Uct.forEach(t),Ner=r(_Le," \u2014 "),iG=n(_Le,"A",{href:!0});var Jct=s(iG);Der=r(Jct,"TFWav2Vec2Model"),Jct.forEach(t),jer=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),qer=i(x),Zv=n(x,"LI",{});var uLe=s(Zv);Nge=n(uLe,"STRONG",{});var Yct=s(Nge);Ger=r(Yct,"xlm"),Yct.forEach(t),Oer=r(uLe," \u2014 "),dG=n(uLe,"A",{href:!0});var Kct=s(dG);Xer=r(Kct,"TFXLMModel"),Kct.forEach(t),Ver=r(uLe," (XLM model)"),uLe.forEach(t),zer=i(x),e6=n(x,"LI",{});var bLe=s(e6);Dge=n(bLe,"STRONG",{});var Zct=s(Dge);Wer=r(Zct,"xlm-roberta"),Zct.forEach(t),Qer=r(bLe," \u2014 "),cG=n(bLe,"A",{href:!0});var eft=s(cG);Her=r(eft,"TFXLMRobertaModel"),eft.forEach(t),Uer=r(bLe," (XLM-RoBERTa model)"),bLe.forEach(t),Jer=i(x),o6=n(x,"LI",{});var vLe=s(o6);jge=n(vLe,"STRONG",{});var oft=s(jge);Yer=r(oft,"xlnet"),oft.forEach(t),Ker=r(vLe," \u2014 "),fG=n(vLe,"A",{href:!0});var rft=s(fG);Zer=r(rft,"TFXLNetModel"),rft.forEach(t),eor=r(vLe," (XLNet model)"),vLe.forEach(t),x.forEach(t),oor=i(pa),qge=n(pa,"P",{});var tft=s(qge);ror=r(tft,"Examples:"),tft.forEach(t),tor=i(pa),m(Ww.$$.fragment,pa),pa.forEach(t),jl.forEach(t),lRe=i(c),pc=n(c,"H2",{class:!0});var bPe=s(pc);r6=n(bPe,"A",{id:!0,class:!0,href:!0});var aft=s(r6);Gge=n(aft,"SPAN",{});var nft=s(Gge);m(Qw.$$.fragment,nft),nft.forEach(t),aft.forEach(t),aor=i(bPe),Oge=n(bPe,"SPAN",{});var sft=s(Oge);nor=r(sft,"TFAutoModelForPreTraining"),sft.forEach(t),bPe.forEach(t),iRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(Hw.$$.fragment,Gl),sor=i(Gl),_c=n(Gl,"P",{});var VW=s(_c);lor=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xge=n(VW,"CODE",{});var lft=s(Xge);ior=r(lft,"from_pretrained()"),lft.forEach(t),dor=r(VW,"class method or the "),Vge=n(VW,"CODE",{});var ift=s(Vge);cor=r(ift,"from_config()"),ift.forEach(t),mor=r(VW,`class
method.`),VW.forEach(t),gor=i(Gl),Uw=n(Gl,"P",{});var vPe=s(Uw);hor=r(vPe,"This class cannot be instantiated directly using "),zge=n(vPe,"CODE",{});var dft=s(zge);por=r(dft,"__init__()"),dft.forEach(t),_or=r(vPe," (throws an error)."),vPe.forEach(t),uor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(Jw.$$.fragment,Ol),bor=i(Ol),Wge=n(Ol,"P",{});var cft=s(Wge);vor=r(cft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cft.forEach(t),Tor=i(Ol),uc=n(Ol,"P",{});var zW=s(uc);For=r(zW,`Note:
Loading a model from its configuration file does `),Qge=n(zW,"STRONG",{});var fft=s(Qge);Cor=r(fft,"not"),fft.forEach(t),Mor=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=n(zW,"CODE",{});var mft=s(Hge);Eor=r(mft,"from_pretrained()"),mft.forEach(t),yor=r(zW,"to load the model weights."),zW.forEach(t),wor=i(Ol),Uge=n(Ol,"P",{});var gft=s(Uge);Aor=r(gft,"Examples:"),gft.forEach(t),Lor=i(Ol),m(Yw.$$.fragment,Ol),Ol.forEach(t),Bor=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(Kw.$$.fragment,_a),xor=i(_a),Jge=n(_a,"P",{});var hft=s(Jge);kor=r(hft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hft.forEach(t),Ror=i(_a),un=n(_a,"P",{});var $4=s(un);Sor=r($4,"The model class to instantiate is selected based on the "),Yge=n($4,"CODE",{});var pft=s(Yge);Por=r(pft,"model_type"),pft.forEach(t),$or=r($4,` property of the config object (either
passed as an argument or loaded from `),Kge=n($4,"CODE",{});var _ft=s(Kge);Ior=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),Nor=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n($4,"CODE",{});var uft=s(Zge);Dor=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),jor=r($4,":"),$4.forEach(t),qor=i(_a),H=n(_a,"UL",{});var U=s(H);t6=n(U,"LI",{});var TLe=s(t6);ehe=n(TLe,"STRONG",{});var bft=s(ehe);Gor=r(bft,"albert"),bft.forEach(t),Oor=r(TLe," \u2014 "),mG=n(TLe,"A",{href:!0});var vft=s(mG);Xor=r(vft,"TFAlbertForPreTraining"),vft.forEach(t),Vor=r(TLe," (ALBERT model)"),TLe.forEach(t),zor=i(U),a6=n(U,"LI",{});var FLe=s(a6);ohe=n(FLe,"STRONG",{});var Tft=s(ohe);Wor=r(Tft,"bart"),Tft.forEach(t),Qor=r(FLe," \u2014 "),gG=n(FLe,"A",{href:!0});var Fft=s(gG);Hor=r(Fft,"TFBartForConditionalGeneration"),Fft.forEach(t),Uor=r(FLe," (BART model)"),FLe.forEach(t),Jor=i(U),n6=n(U,"LI",{});var CLe=s(n6);rhe=n(CLe,"STRONG",{});var Cft=s(rhe);Yor=r(Cft,"bert"),Cft.forEach(t),Kor=r(CLe," \u2014 "),hG=n(CLe,"A",{href:!0});var Mft=s(hG);Zor=r(Mft,"TFBertForPreTraining"),Mft.forEach(t),err=r(CLe," (BERT model)"),CLe.forEach(t),orr=i(U),s6=n(U,"LI",{});var MLe=s(s6);the=n(MLe,"STRONG",{});var Eft=s(the);rrr=r(Eft,"camembert"),Eft.forEach(t),trr=r(MLe," \u2014 "),pG=n(MLe,"A",{href:!0});var yft=s(pG);arr=r(yft,"TFCamembertForMaskedLM"),yft.forEach(t),nrr=r(MLe," (CamemBERT model)"),MLe.forEach(t),srr=i(U),l6=n(U,"LI",{});var ELe=s(l6);ahe=n(ELe,"STRONG",{});var wft=s(ahe);lrr=r(wft,"ctrl"),wft.forEach(t),irr=r(ELe," \u2014 "),_G=n(ELe,"A",{href:!0});var Aft=s(_G);drr=r(Aft,"TFCTRLLMHeadModel"),Aft.forEach(t),crr=r(ELe," (CTRL model)"),ELe.forEach(t),frr=i(U),i6=n(U,"LI",{});var yLe=s(i6);nhe=n(yLe,"STRONG",{});var Lft=s(nhe);mrr=r(Lft,"distilbert"),Lft.forEach(t),grr=r(yLe," \u2014 "),uG=n(yLe,"A",{href:!0});var Bft=s(uG);hrr=r(Bft,"TFDistilBertForMaskedLM"),Bft.forEach(t),prr=r(yLe," (DistilBERT model)"),yLe.forEach(t),_rr=i(U),d6=n(U,"LI",{});var wLe=s(d6);she=n(wLe,"STRONG",{});var xft=s(she);urr=r(xft,"electra"),xft.forEach(t),brr=r(wLe," \u2014 "),bG=n(wLe,"A",{href:!0});var kft=s(bG);vrr=r(kft,"TFElectraForPreTraining"),kft.forEach(t),Trr=r(wLe," (ELECTRA model)"),wLe.forEach(t),Frr=i(U),c6=n(U,"LI",{});var ALe=s(c6);lhe=n(ALe,"STRONG",{});var Rft=s(lhe);Crr=r(Rft,"flaubert"),Rft.forEach(t),Mrr=r(ALe," \u2014 "),vG=n(ALe,"A",{href:!0});var Sft=s(vG);Err=r(Sft,"TFFlaubertWithLMHeadModel"),Sft.forEach(t),yrr=r(ALe," (FlauBERT model)"),ALe.forEach(t),wrr=i(U),f6=n(U,"LI",{});var LLe=s(f6);ihe=n(LLe,"STRONG",{});var Pft=s(ihe);Arr=r(Pft,"funnel"),Pft.forEach(t),Lrr=r(LLe," \u2014 "),TG=n(LLe,"A",{href:!0});var $ft=s(TG);Brr=r($ft,"TFFunnelForPreTraining"),$ft.forEach(t),xrr=r(LLe," (Funnel Transformer model)"),LLe.forEach(t),krr=i(U),m6=n(U,"LI",{});var BLe=s(m6);dhe=n(BLe,"STRONG",{});var Ift=s(dhe);Rrr=r(Ift,"gpt2"),Ift.forEach(t),Srr=r(BLe," \u2014 "),FG=n(BLe,"A",{href:!0});var Nft=s(FG);Prr=r(Nft,"TFGPT2LMHeadModel"),Nft.forEach(t),$rr=r(BLe," (OpenAI GPT-2 model)"),BLe.forEach(t),Irr=i(U),g6=n(U,"LI",{});var xLe=s(g6);che=n(xLe,"STRONG",{});var Dft=s(che);Nrr=r(Dft,"layoutlm"),Dft.forEach(t),Drr=r(xLe," \u2014 "),CG=n(xLe,"A",{href:!0});var jft=s(CG);jrr=r(jft,"TFLayoutLMForMaskedLM"),jft.forEach(t),qrr=r(xLe," (LayoutLM model)"),xLe.forEach(t),Grr=i(U),h6=n(U,"LI",{});var kLe=s(h6);fhe=n(kLe,"STRONG",{});var qft=s(fhe);Orr=r(qft,"lxmert"),qft.forEach(t),Xrr=r(kLe," \u2014 "),MG=n(kLe,"A",{href:!0});var Gft=s(MG);Vrr=r(Gft,"TFLxmertForPreTraining"),Gft.forEach(t),zrr=r(kLe," (LXMERT model)"),kLe.forEach(t),Wrr=i(U),p6=n(U,"LI",{});var RLe=s(p6);mhe=n(RLe,"STRONG",{});var Oft=s(mhe);Qrr=r(Oft,"mobilebert"),Oft.forEach(t),Hrr=r(RLe," \u2014 "),EG=n(RLe,"A",{href:!0});var Xft=s(EG);Urr=r(Xft,"TFMobileBertForPreTraining"),Xft.forEach(t),Jrr=r(RLe," (MobileBERT model)"),RLe.forEach(t),Yrr=i(U),_6=n(U,"LI",{});var SLe=s(_6);ghe=n(SLe,"STRONG",{});var Vft=s(ghe);Krr=r(Vft,"mpnet"),Vft.forEach(t),Zrr=r(SLe," \u2014 "),yG=n(SLe,"A",{href:!0});var zft=s(yG);etr=r(zft,"TFMPNetForMaskedLM"),zft.forEach(t),otr=r(SLe," (MPNet model)"),SLe.forEach(t),rtr=i(U),u6=n(U,"LI",{});var PLe=s(u6);hhe=n(PLe,"STRONG",{});var Wft=s(hhe);ttr=r(Wft,"openai-gpt"),Wft.forEach(t),atr=r(PLe," \u2014 "),wG=n(PLe,"A",{href:!0});var Qft=s(wG);ntr=r(Qft,"TFOpenAIGPTLMHeadModel"),Qft.forEach(t),str=r(PLe," (OpenAI GPT model)"),PLe.forEach(t),ltr=i(U),b6=n(U,"LI",{});var $Le=s(b6);phe=n($Le,"STRONG",{});var Hft=s(phe);itr=r(Hft,"roberta"),Hft.forEach(t),dtr=r($Le," \u2014 "),AG=n($Le,"A",{href:!0});var Uft=s(AG);ctr=r(Uft,"TFRobertaForMaskedLM"),Uft.forEach(t),ftr=r($Le," (RoBERTa model)"),$Le.forEach(t),mtr=i(U),v6=n(U,"LI",{});var ILe=s(v6);_he=n(ILe,"STRONG",{});var Jft=s(_he);gtr=r(Jft,"t5"),Jft.forEach(t),htr=r(ILe," \u2014 "),LG=n(ILe,"A",{href:!0});var Yft=s(LG);ptr=r(Yft,"TFT5ForConditionalGeneration"),Yft.forEach(t),_tr=r(ILe," (T5 model)"),ILe.forEach(t),utr=i(U),T6=n(U,"LI",{});var NLe=s(T6);uhe=n(NLe,"STRONG",{});var Kft=s(uhe);btr=r(Kft,"tapas"),Kft.forEach(t),vtr=r(NLe," \u2014 "),BG=n(NLe,"A",{href:!0});var Zft=s(BG);Ttr=r(Zft,"TFTapasForMaskedLM"),Zft.forEach(t),Ftr=r(NLe," (TAPAS model)"),NLe.forEach(t),Ctr=i(U),F6=n(U,"LI",{});var DLe=s(F6);bhe=n(DLe,"STRONG",{});var emt=s(bhe);Mtr=r(emt,"transfo-xl"),emt.forEach(t),Etr=r(DLe," \u2014 "),xG=n(DLe,"A",{href:!0});var omt=s(xG);ytr=r(omt,"TFTransfoXLLMHeadModel"),omt.forEach(t),wtr=r(DLe," (Transformer-XL model)"),DLe.forEach(t),Atr=i(U),C6=n(U,"LI",{});var jLe=s(C6);vhe=n(jLe,"STRONG",{});var rmt=s(vhe);Ltr=r(rmt,"xlm"),rmt.forEach(t),Btr=r(jLe," \u2014 "),kG=n(jLe,"A",{href:!0});var tmt=s(kG);xtr=r(tmt,"TFXLMWithLMHeadModel"),tmt.forEach(t),ktr=r(jLe," (XLM model)"),jLe.forEach(t),Rtr=i(U),M6=n(U,"LI",{});var qLe=s(M6);The=n(qLe,"STRONG",{});var amt=s(The);Str=r(amt,"xlm-roberta"),amt.forEach(t),Ptr=r(qLe," \u2014 "),RG=n(qLe,"A",{href:!0});var nmt=s(RG);$tr=r(nmt,"TFXLMRobertaForMaskedLM"),nmt.forEach(t),Itr=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),Ntr=i(U),E6=n(U,"LI",{});var GLe=s(E6);Fhe=n(GLe,"STRONG",{});var smt=s(Fhe);Dtr=r(smt,"xlnet"),smt.forEach(t),jtr=r(GLe," \u2014 "),SG=n(GLe,"A",{href:!0});var lmt=s(SG);qtr=r(lmt,"TFXLNetLMHeadModel"),lmt.forEach(t),Gtr=r(GLe," (XLNet model)"),GLe.forEach(t),U.forEach(t),Otr=i(_a),Che=n(_a,"P",{});var imt=s(Che);Xtr=r(imt,"Examples:"),imt.forEach(t),Vtr=i(_a),m(Zw.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),dRe=i(c),bc=n(c,"H2",{class:!0});var TPe=s(bc);y6=n(TPe,"A",{id:!0,class:!0,href:!0});var dmt=s(y6);Mhe=n(dmt,"SPAN",{});var cmt=s(Mhe);m(eA.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),ztr=i(TPe),Ehe=n(TPe,"SPAN",{});var fmt=s(Ehe);Wtr=r(fmt,"TFAutoModelForCausalLM"),fmt.forEach(t),TPe.forEach(t),cRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(oA.$$.fragment,Xl),Qtr=i(Xl),vc=n(Xl,"P",{});var WW=s(vc);Htr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yhe=n(WW,"CODE",{});var mmt=s(yhe);Utr=r(mmt,"from_pretrained()"),mmt.forEach(t),Jtr=r(WW,"class method or the "),whe=n(WW,"CODE",{});var gmt=s(whe);Ytr=r(gmt,"from_config()"),gmt.forEach(t),Ktr=r(WW,`class
method.`),WW.forEach(t),Ztr=i(Xl),rA=n(Xl,"P",{});var FPe=s(rA);ear=r(FPe,"This class cannot be instantiated directly using "),Ahe=n(FPe,"CODE",{});var hmt=s(Ahe);oar=r(hmt,"__init__()"),hmt.forEach(t),rar=r(FPe," (throws an error)."),FPe.forEach(t),tar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(tA.$$.fragment,Vl),aar=i(Vl),Lhe=n(Vl,"P",{});var pmt=s(Lhe);nar=r(pmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pmt.forEach(t),sar=i(Vl),Tc=n(Vl,"P",{});var QW=s(Tc);lar=r(QW,`Note:
Loading a model from its configuration file does `),Bhe=n(QW,"STRONG",{});var _mt=s(Bhe);iar=r(_mt,"not"),_mt.forEach(t),dar=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=n(QW,"CODE",{});var umt=s(xhe);car=r(umt,"from_pretrained()"),umt.forEach(t),far=r(QW,"to load the model weights."),QW.forEach(t),mar=i(Vl),khe=n(Vl,"P",{});var bmt=s(khe);gar=r(bmt,"Examples:"),bmt.forEach(t),har=i(Vl),m(aA.$$.fragment,Vl),Vl.forEach(t),par=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(nA.$$.fragment,ua),_ar=i(ua),Rhe=n(ua,"P",{});var vmt=s(Rhe);uar=r(vmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vmt.forEach(t),bar=i(ua),bn=n(ua,"P",{});var I4=s(bn);Tar=r(I4,"The model class to instantiate is selected based on the "),She=n(I4,"CODE",{});var Tmt=s(She);Far=r(Tmt,"model_type"),Tmt.forEach(t),Car=r(I4,` property of the config object (either
passed as an argument or loaded from `),Phe=n(I4,"CODE",{});var Fmt=s(Phe);Mar=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),Ear=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(I4,"CODE",{});var Cmt=s($he);yar=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),war=r(I4,":"),I4.forEach(t),Aar=i(ua),ge=n(ua,"UL",{});var Fe=s(ge);w6=n(Fe,"LI",{});var OLe=s(w6);Ihe=n(OLe,"STRONG",{});var Mmt=s(Ihe);Lar=r(Mmt,"bert"),Mmt.forEach(t),Bar=r(OLe," \u2014 "),PG=n(OLe,"A",{href:!0});var Emt=s(PG);xar=r(Emt,"TFBertLMHeadModel"),Emt.forEach(t),kar=r(OLe," (BERT model)"),OLe.forEach(t),Rar=i(Fe),A6=n(Fe,"LI",{});var XLe=s(A6);Nhe=n(XLe,"STRONG",{});var ymt=s(Nhe);Sar=r(ymt,"camembert"),ymt.forEach(t),Par=r(XLe," \u2014 "),$G=n(XLe,"A",{href:!0});var wmt=s($G);$ar=r(wmt,"TFCamembertForCausalLM"),wmt.forEach(t),Iar=r(XLe," (CamemBERT model)"),XLe.forEach(t),Nar=i(Fe),L6=n(Fe,"LI",{});var VLe=s(L6);Dhe=n(VLe,"STRONG",{});var Amt=s(Dhe);Dar=r(Amt,"ctrl"),Amt.forEach(t),jar=r(VLe," \u2014 "),IG=n(VLe,"A",{href:!0});var Lmt=s(IG);qar=r(Lmt,"TFCTRLLMHeadModel"),Lmt.forEach(t),Gar=r(VLe," (CTRL model)"),VLe.forEach(t),Oar=i(Fe),B6=n(Fe,"LI",{});var zLe=s(B6);jhe=n(zLe,"STRONG",{});var Bmt=s(jhe);Xar=r(Bmt,"gpt2"),Bmt.forEach(t),Var=r(zLe," \u2014 "),NG=n(zLe,"A",{href:!0});var xmt=s(NG);zar=r(xmt,"TFGPT2LMHeadModel"),xmt.forEach(t),War=r(zLe," (OpenAI GPT-2 model)"),zLe.forEach(t),Qar=i(Fe),x6=n(Fe,"LI",{});var WLe=s(x6);qhe=n(WLe,"STRONG",{});var kmt=s(qhe);Har=r(kmt,"openai-gpt"),kmt.forEach(t),Uar=r(WLe," \u2014 "),DG=n(WLe,"A",{href:!0});var Rmt=s(DG);Jar=r(Rmt,"TFOpenAIGPTLMHeadModel"),Rmt.forEach(t),Yar=r(WLe," (OpenAI GPT model)"),WLe.forEach(t),Kar=i(Fe),k6=n(Fe,"LI",{});var QLe=s(k6);Ghe=n(QLe,"STRONG",{});var Smt=s(Ghe);Zar=r(Smt,"rembert"),Smt.forEach(t),enr=r(QLe," \u2014 "),jG=n(QLe,"A",{href:!0});var Pmt=s(jG);onr=r(Pmt,"TFRemBertForCausalLM"),Pmt.forEach(t),rnr=r(QLe," (RemBERT model)"),QLe.forEach(t),tnr=i(Fe),R6=n(Fe,"LI",{});var HLe=s(R6);Ohe=n(HLe,"STRONG",{});var $mt=s(Ohe);anr=r($mt,"roberta"),$mt.forEach(t),nnr=r(HLe," \u2014 "),qG=n(HLe,"A",{href:!0});var Imt=s(qG);snr=r(Imt,"TFRobertaForCausalLM"),Imt.forEach(t),lnr=r(HLe," (RoBERTa model)"),HLe.forEach(t),inr=i(Fe),S6=n(Fe,"LI",{});var ULe=s(S6);Xhe=n(ULe,"STRONG",{});var Nmt=s(Xhe);dnr=r(Nmt,"roformer"),Nmt.forEach(t),cnr=r(ULe," \u2014 "),GG=n(ULe,"A",{href:!0});var Dmt=s(GG);fnr=r(Dmt,"TFRoFormerForCausalLM"),Dmt.forEach(t),mnr=r(ULe," (RoFormer model)"),ULe.forEach(t),gnr=i(Fe),P6=n(Fe,"LI",{});var JLe=s(P6);Vhe=n(JLe,"STRONG",{});var jmt=s(Vhe);hnr=r(jmt,"transfo-xl"),jmt.forEach(t),pnr=r(JLe," \u2014 "),OG=n(JLe,"A",{href:!0});var qmt=s(OG);_nr=r(qmt,"TFTransfoXLLMHeadModel"),qmt.forEach(t),unr=r(JLe," (Transformer-XL model)"),JLe.forEach(t),bnr=i(Fe),$6=n(Fe,"LI",{});var YLe=s($6);zhe=n(YLe,"STRONG",{});var Gmt=s(zhe);vnr=r(Gmt,"xlm"),Gmt.forEach(t),Tnr=r(YLe," \u2014 "),XG=n(YLe,"A",{href:!0});var Omt=s(XG);Fnr=r(Omt,"TFXLMWithLMHeadModel"),Omt.forEach(t),Cnr=r(YLe," (XLM model)"),YLe.forEach(t),Mnr=i(Fe),I6=n(Fe,"LI",{});var KLe=s(I6);Whe=n(KLe,"STRONG",{});var Xmt=s(Whe);Enr=r(Xmt,"xlnet"),Xmt.forEach(t),ynr=r(KLe," \u2014 "),VG=n(KLe,"A",{href:!0});var Vmt=s(VG);wnr=r(Vmt,"TFXLNetLMHeadModel"),Vmt.forEach(t),Anr=r(KLe," (XLNet model)"),KLe.forEach(t),Fe.forEach(t),Lnr=i(ua),Qhe=n(ua,"P",{});var zmt=s(Qhe);Bnr=r(zmt,"Examples:"),zmt.forEach(t),xnr=i(ua),m(sA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),fRe=i(c),Fc=n(c,"H2",{class:!0});var CPe=s(Fc);N6=n(CPe,"A",{id:!0,class:!0,href:!0});var Wmt=s(N6);Hhe=n(Wmt,"SPAN",{});var Qmt=s(Hhe);m(lA.$$.fragment,Qmt),Qmt.forEach(t),Wmt.forEach(t),knr=i(CPe),Uhe=n(CPe,"SPAN",{});var Hmt=s(Uhe);Rnr=r(Hmt,"TFAutoModelForImageClassification"),Hmt.forEach(t),CPe.forEach(t),mRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(iA.$$.fragment,zl),Snr=i(zl),Cc=n(zl,"P",{});var HW=s(Cc);Pnr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jhe=n(HW,"CODE",{});var Umt=s(Jhe);$nr=r(Umt,"from_pretrained()"),Umt.forEach(t),Inr=r(HW,"class method or the "),Yhe=n(HW,"CODE",{});var Jmt=s(Yhe);Nnr=r(Jmt,"from_config()"),Jmt.forEach(t),Dnr=r(HW,`class
method.`),HW.forEach(t),jnr=i(zl),dA=n(zl,"P",{});var MPe=s(dA);qnr=r(MPe,"This class cannot be instantiated directly using "),Khe=n(MPe,"CODE",{});var Ymt=s(Khe);Gnr=r(Ymt,"__init__()"),Ymt.forEach(t),Onr=r(MPe," (throws an error)."),MPe.forEach(t),Xnr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(cA.$$.fragment,Wl),Vnr=i(Wl),Zhe=n(Wl,"P",{});var Kmt=s(Zhe);znr=r(Kmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kmt.forEach(t),Wnr=i(Wl),Mc=n(Wl,"P",{});var UW=s(Mc);Qnr=r(UW,`Note:
Loading a model from its configuration file does `),epe=n(UW,"STRONG",{});var Zmt=s(epe);Hnr=r(Zmt,"not"),Zmt.forEach(t),Unr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ope=n(UW,"CODE",{});var egt=s(ope);Jnr=r(egt,"from_pretrained()"),egt.forEach(t),Ynr=r(UW,"to load the model weights."),UW.forEach(t),Knr=i(Wl),rpe=n(Wl,"P",{});var ogt=s(rpe);Znr=r(ogt,"Examples:"),ogt.forEach(t),esr=i(Wl),m(fA.$$.fragment,Wl),Wl.forEach(t),osr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(mA.$$.fragment,ba),rsr=i(ba),tpe=n(ba,"P",{});var rgt=s(tpe);tsr=r(rgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rgt.forEach(t),asr=i(ba),vn=n(ba,"P",{});var N4=s(vn);nsr=r(N4,"The model class to instantiate is selected based on the "),ape=n(N4,"CODE",{});var tgt=s(ape);ssr=r(tgt,"model_type"),tgt.forEach(t),lsr=r(N4,` property of the config object (either
passed as an argument or loaded from `),npe=n(N4,"CODE",{});var agt=s(npe);isr=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),dsr=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(N4,"CODE",{});var ngt=s(spe);csr=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),fsr=r(N4,":"),N4.forEach(t),msr=i(ba),gA=n(ba,"UL",{});var EPe=s(gA);D6=n(EPe,"LI",{});var ZLe=s(D6);lpe=n(ZLe,"STRONG",{});var sgt=s(lpe);gsr=r(sgt,"convnext"),sgt.forEach(t),hsr=r(ZLe," \u2014 "),zG=n(ZLe,"A",{href:!0});var lgt=s(zG);psr=r(lgt,"TFConvNextForImageClassification"),lgt.forEach(t),_sr=r(ZLe," (ConvNext model)"),ZLe.forEach(t),usr=i(EPe),j6=n(EPe,"LI",{});var e7e=s(j6);ipe=n(e7e,"STRONG",{});var igt=s(ipe);bsr=r(igt,"vit"),igt.forEach(t),vsr=r(e7e," \u2014 "),WG=n(e7e,"A",{href:!0});var dgt=s(WG);Tsr=r(dgt,"TFViTForImageClassification"),dgt.forEach(t),Fsr=r(e7e," (ViT model)"),e7e.forEach(t),EPe.forEach(t),Csr=i(ba),dpe=n(ba,"P",{});var cgt=s(dpe);Msr=r(cgt,"Examples:"),cgt.forEach(t),Esr=i(ba),m(hA.$$.fragment,ba),ba.forEach(t),zl.forEach(t),gRe=i(c),Ec=n(c,"H2",{class:!0});var yPe=s(Ec);q6=n(yPe,"A",{id:!0,class:!0,href:!0});var fgt=s(q6);cpe=n(fgt,"SPAN",{});var mgt=s(cpe);m(pA.$$.fragment,mgt),mgt.forEach(t),fgt.forEach(t),ysr=i(yPe),fpe=n(yPe,"SPAN",{});var ggt=s(fpe);wsr=r(ggt,"TFAutoModelForMaskedLM"),ggt.forEach(t),yPe.forEach(t),hRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(_A.$$.fragment,Ql),Asr=i(Ql),yc=n(Ql,"P",{});var JW=s(yc);Lsr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mpe=n(JW,"CODE",{});var hgt=s(mpe);Bsr=r(hgt,"from_pretrained()"),hgt.forEach(t),xsr=r(JW,"class method or the "),gpe=n(JW,"CODE",{});var pgt=s(gpe);ksr=r(pgt,"from_config()"),pgt.forEach(t),Rsr=r(JW,`class
method.`),JW.forEach(t),Ssr=i(Ql),uA=n(Ql,"P",{});var wPe=s(uA);Psr=r(wPe,"This class cannot be instantiated directly using "),hpe=n(wPe,"CODE",{});var _gt=s(hpe);$sr=r(_gt,"__init__()"),_gt.forEach(t),Isr=r(wPe," (throws an error)."),wPe.forEach(t),Nsr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(bA.$$.fragment,Hl),Dsr=i(Hl),ppe=n(Hl,"P",{});var ugt=s(ppe);jsr=r(ugt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ugt.forEach(t),qsr=i(Hl),wc=n(Hl,"P",{});var YW=s(wc);Gsr=r(YW,`Note:
Loading a model from its configuration file does `),_pe=n(YW,"STRONG",{});var bgt=s(_pe);Osr=r(bgt,"not"),bgt.forEach(t),Xsr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),upe=n(YW,"CODE",{});var vgt=s(upe);Vsr=r(vgt,"from_pretrained()"),vgt.forEach(t),zsr=r(YW,"to load the model weights."),YW.forEach(t),Wsr=i(Hl),bpe=n(Hl,"P",{});var Tgt=s(bpe);Qsr=r(Tgt,"Examples:"),Tgt.forEach(t),Hsr=i(Hl),m(vA.$$.fragment,Hl),Hl.forEach(t),Usr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(TA.$$.fragment,va),Jsr=i(va),vpe=n(va,"P",{});var Fgt=s(vpe);Ysr=r(Fgt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fgt.forEach(t),Ksr=i(va),Tn=n(va,"P",{});var D4=s(Tn);Zsr=r(D4,"The model class to instantiate is selected based on the "),Tpe=n(D4,"CODE",{});var Cgt=s(Tpe);elr=r(Cgt,"model_type"),Cgt.forEach(t),olr=r(D4,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(D4,"CODE",{});var Mgt=s(Fpe);rlr=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),tlr=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(D4,"CODE",{});var Egt=s(Cpe);alr=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),nlr=r(D4,":"),D4.forEach(t),slr=i(va),J=n(va,"UL",{});var ee=s(J);G6=n(ee,"LI",{});var o7e=s(G6);Mpe=n(o7e,"STRONG",{});var ygt=s(Mpe);llr=r(ygt,"albert"),ygt.forEach(t),ilr=r(o7e," \u2014 "),QG=n(o7e,"A",{href:!0});var wgt=s(QG);dlr=r(wgt,"TFAlbertForMaskedLM"),wgt.forEach(t),clr=r(o7e," (ALBERT model)"),o7e.forEach(t),flr=i(ee),O6=n(ee,"LI",{});var r7e=s(O6);Epe=n(r7e,"STRONG",{});var Agt=s(Epe);mlr=r(Agt,"bert"),Agt.forEach(t),glr=r(r7e," \u2014 "),HG=n(r7e,"A",{href:!0});var Lgt=s(HG);hlr=r(Lgt,"TFBertForMaskedLM"),Lgt.forEach(t),plr=r(r7e," (BERT model)"),r7e.forEach(t),_lr=i(ee),X6=n(ee,"LI",{});var t7e=s(X6);ype=n(t7e,"STRONG",{});var Bgt=s(ype);ulr=r(Bgt,"camembert"),Bgt.forEach(t),blr=r(t7e," \u2014 "),UG=n(t7e,"A",{href:!0});var xgt=s(UG);vlr=r(xgt,"TFCamembertForMaskedLM"),xgt.forEach(t),Tlr=r(t7e," (CamemBERT model)"),t7e.forEach(t),Flr=i(ee),V6=n(ee,"LI",{});var a7e=s(V6);wpe=n(a7e,"STRONG",{});var kgt=s(wpe);Clr=r(kgt,"convbert"),kgt.forEach(t),Mlr=r(a7e," \u2014 "),JG=n(a7e,"A",{href:!0});var Rgt=s(JG);Elr=r(Rgt,"TFConvBertForMaskedLM"),Rgt.forEach(t),ylr=r(a7e," (ConvBERT model)"),a7e.forEach(t),wlr=i(ee),z6=n(ee,"LI",{});var n7e=s(z6);Ape=n(n7e,"STRONG",{});var Sgt=s(Ape);Alr=r(Sgt,"deberta"),Sgt.forEach(t),Llr=r(n7e," \u2014 "),YG=n(n7e,"A",{href:!0});var Pgt=s(YG);Blr=r(Pgt,"TFDebertaForMaskedLM"),Pgt.forEach(t),xlr=r(n7e," (DeBERTa model)"),n7e.forEach(t),klr=i(ee),W6=n(ee,"LI",{});var s7e=s(W6);Lpe=n(s7e,"STRONG",{});var $gt=s(Lpe);Rlr=r($gt,"deberta-v2"),$gt.forEach(t),Slr=r(s7e," \u2014 "),KG=n(s7e,"A",{href:!0});var Igt=s(KG);Plr=r(Igt,"TFDebertaV2ForMaskedLM"),Igt.forEach(t),$lr=r(s7e," (DeBERTa-v2 model)"),s7e.forEach(t),Ilr=i(ee),Q6=n(ee,"LI",{});var l7e=s(Q6);Bpe=n(l7e,"STRONG",{});var Ngt=s(Bpe);Nlr=r(Ngt,"distilbert"),Ngt.forEach(t),Dlr=r(l7e," \u2014 "),ZG=n(l7e,"A",{href:!0});var Dgt=s(ZG);jlr=r(Dgt,"TFDistilBertForMaskedLM"),Dgt.forEach(t),qlr=r(l7e," (DistilBERT model)"),l7e.forEach(t),Glr=i(ee),H6=n(ee,"LI",{});var i7e=s(H6);xpe=n(i7e,"STRONG",{});var jgt=s(xpe);Olr=r(jgt,"electra"),jgt.forEach(t),Xlr=r(i7e," \u2014 "),eO=n(i7e,"A",{href:!0});var qgt=s(eO);Vlr=r(qgt,"TFElectraForMaskedLM"),qgt.forEach(t),zlr=r(i7e," (ELECTRA model)"),i7e.forEach(t),Wlr=i(ee),U6=n(ee,"LI",{});var d7e=s(U6);kpe=n(d7e,"STRONG",{});var Ggt=s(kpe);Qlr=r(Ggt,"flaubert"),Ggt.forEach(t),Hlr=r(d7e," \u2014 "),oO=n(d7e,"A",{href:!0});var Ogt=s(oO);Ulr=r(Ogt,"TFFlaubertWithLMHeadModel"),Ogt.forEach(t),Jlr=r(d7e," (FlauBERT model)"),d7e.forEach(t),Ylr=i(ee),J6=n(ee,"LI",{});var c7e=s(J6);Rpe=n(c7e,"STRONG",{});var Xgt=s(Rpe);Klr=r(Xgt,"funnel"),Xgt.forEach(t),Zlr=r(c7e," \u2014 "),rO=n(c7e,"A",{href:!0});var Vgt=s(rO);eir=r(Vgt,"TFFunnelForMaskedLM"),Vgt.forEach(t),oir=r(c7e," (Funnel Transformer model)"),c7e.forEach(t),rir=i(ee),Y6=n(ee,"LI",{});var f7e=s(Y6);Spe=n(f7e,"STRONG",{});var zgt=s(Spe);tir=r(zgt,"layoutlm"),zgt.forEach(t),air=r(f7e," \u2014 "),tO=n(f7e,"A",{href:!0});var Wgt=s(tO);nir=r(Wgt,"TFLayoutLMForMaskedLM"),Wgt.forEach(t),sir=r(f7e," (LayoutLM model)"),f7e.forEach(t),lir=i(ee),K6=n(ee,"LI",{});var m7e=s(K6);Ppe=n(m7e,"STRONG",{});var Qgt=s(Ppe);iir=r(Qgt,"longformer"),Qgt.forEach(t),dir=r(m7e," \u2014 "),aO=n(m7e,"A",{href:!0});var Hgt=s(aO);cir=r(Hgt,"TFLongformerForMaskedLM"),Hgt.forEach(t),fir=r(m7e," (Longformer model)"),m7e.forEach(t),mir=i(ee),Z6=n(ee,"LI",{});var g7e=s(Z6);$pe=n(g7e,"STRONG",{});var Ugt=s($pe);gir=r(Ugt,"mobilebert"),Ugt.forEach(t),hir=r(g7e," \u2014 "),nO=n(g7e,"A",{href:!0});var Jgt=s(nO);pir=r(Jgt,"TFMobileBertForMaskedLM"),Jgt.forEach(t),_ir=r(g7e," (MobileBERT model)"),g7e.forEach(t),uir=i(ee),eT=n(ee,"LI",{});var h7e=s(eT);Ipe=n(h7e,"STRONG",{});var Ygt=s(Ipe);bir=r(Ygt,"mpnet"),Ygt.forEach(t),vir=r(h7e," \u2014 "),sO=n(h7e,"A",{href:!0});var Kgt=s(sO);Tir=r(Kgt,"TFMPNetForMaskedLM"),Kgt.forEach(t),Fir=r(h7e," (MPNet model)"),h7e.forEach(t),Cir=i(ee),oT=n(ee,"LI",{});var p7e=s(oT);Npe=n(p7e,"STRONG",{});var Zgt=s(Npe);Mir=r(Zgt,"rembert"),Zgt.forEach(t),Eir=r(p7e," \u2014 "),lO=n(p7e,"A",{href:!0});var eht=s(lO);yir=r(eht,"TFRemBertForMaskedLM"),eht.forEach(t),wir=r(p7e," (RemBERT model)"),p7e.forEach(t),Air=i(ee),rT=n(ee,"LI",{});var _7e=s(rT);Dpe=n(_7e,"STRONG",{});var oht=s(Dpe);Lir=r(oht,"roberta"),oht.forEach(t),Bir=r(_7e," \u2014 "),iO=n(_7e,"A",{href:!0});var rht=s(iO);xir=r(rht,"TFRobertaForMaskedLM"),rht.forEach(t),kir=r(_7e," (RoBERTa model)"),_7e.forEach(t),Rir=i(ee),tT=n(ee,"LI",{});var u7e=s(tT);jpe=n(u7e,"STRONG",{});var tht=s(jpe);Sir=r(tht,"roformer"),tht.forEach(t),Pir=r(u7e," \u2014 "),dO=n(u7e,"A",{href:!0});var aht=s(dO);$ir=r(aht,"TFRoFormerForMaskedLM"),aht.forEach(t),Iir=r(u7e," (RoFormer model)"),u7e.forEach(t),Nir=i(ee),aT=n(ee,"LI",{});var b7e=s(aT);qpe=n(b7e,"STRONG",{});var nht=s(qpe);Dir=r(nht,"tapas"),nht.forEach(t),jir=r(b7e," \u2014 "),cO=n(b7e,"A",{href:!0});var sht=s(cO);qir=r(sht,"TFTapasForMaskedLM"),sht.forEach(t),Gir=r(b7e," (TAPAS model)"),b7e.forEach(t),Oir=i(ee),nT=n(ee,"LI",{});var v7e=s(nT);Gpe=n(v7e,"STRONG",{});var lht=s(Gpe);Xir=r(lht,"xlm"),lht.forEach(t),Vir=r(v7e," \u2014 "),fO=n(v7e,"A",{href:!0});var iht=s(fO);zir=r(iht,"TFXLMWithLMHeadModel"),iht.forEach(t),Wir=r(v7e," (XLM model)"),v7e.forEach(t),Qir=i(ee),sT=n(ee,"LI",{});var T7e=s(sT);Ope=n(T7e,"STRONG",{});var dht=s(Ope);Hir=r(dht,"xlm-roberta"),dht.forEach(t),Uir=r(T7e," \u2014 "),mO=n(T7e,"A",{href:!0});var cht=s(mO);Jir=r(cht,"TFXLMRobertaForMaskedLM"),cht.forEach(t),Yir=r(T7e," (XLM-RoBERTa model)"),T7e.forEach(t),ee.forEach(t),Kir=i(va),Xpe=n(va,"P",{});var fht=s(Xpe);Zir=r(fht,"Examples:"),fht.forEach(t),edr=i(va),m(FA.$$.fragment,va),va.forEach(t),Ql.forEach(t),pRe=i(c),Ac=n(c,"H2",{class:!0});var APe=s(Ac);lT=n(APe,"A",{id:!0,class:!0,href:!0});var mht=s(lT);Vpe=n(mht,"SPAN",{});var ght=s(Vpe);m(CA.$$.fragment,ght),ght.forEach(t),mht.forEach(t),odr=i(APe),zpe=n(APe,"SPAN",{});var hht=s(zpe);rdr=r(hht,"TFAutoModelForSeq2SeqLM"),hht.forEach(t),APe.forEach(t),_Re=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(MA.$$.fragment,Ul),tdr=i(Ul),Lc=n(Ul,"P",{});var KW=s(Lc);adr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wpe=n(KW,"CODE",{});var pht=s(Wpe);ndr=r(pht,"from_pretrained()"),pht.forEach(t),sdr=r(KW,"class method or the "),Qpe=n(KW,"CODE",{});var _ht=s(Qpe);ldr=r(_ht,"from_config()"),_ht.forEach(t),idr=r(KW,`class
method.`),KW.forEach(t),ddr=i(Ul),EA=n(Ul,"P",{});var LPe=s(EA);cdr=r(LPe,"This class cannot be instantiated directly using "),Hpe=n(LPe,"CODE",{});var uht=s(Hpe);fdr=r(uht,"__init__()"),uht.forEach(t),mdr=r(LPe," (throws an error)."),LPe.forEach(t),gdr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(yA.$$.fragment,Jl),hdr=i(Jl),Upe=n(Jl,"P",{});var bht=s(Upe);pdr=r(bht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bht.forEach(t),_dr=i(Jl),Bc=n(Jl,"P",{});var ZW=s(Bc);udr=r(ZW,`Note:
Loading a model from its configuration file does `),Jpe=n(ZW,"STRONG",{});var vht=s(Jpe);bdr=r(vht,"not"),vht.forEach(t),vdr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=n(ZW,"CODE",{});var Tht=s(Ype);Tdr=r(Tht,"from_pretrained()"),Tht.forEach(t),Fdr=r(ZW,"to load the model weights."),ZW.forEach(t),Cdr=i(Jl),Kpe=n(Jl,"P",{});var Fht=s(Kpe);Mdr=r(Fht,"Examples:"),Fht.forEach(t),Edr=i(Jl),m(wA.$$.fragment,Jl),Jl.forEach(t),ydr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(AA.$$.fragment,Ta),wdr=i(Ta),Zpe=n(Ta,"P",{});var Cht=s(Zpe);Adr=r(Cht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cht.forEach(t),Ldr=i(Ta),Fn=n(Ta,"P",{});var j4=s(Fn);Bdr=r(j4,"The model class to instantiate is selected based on the "),e_e=n(j4,"CODE",{});var Mht=s(e_e);xdr=r(Mht,"model_type"),Mht.forEach(t),kdr=r(j4,` property of the config object (either
passed as an argument or loaded from `),o_e=n(j4,"CODE",{});var Eht=s(o_e);Rdr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),Sdr=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(j4,"CODE",{});var yht=s(r_e);Pdr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),$dr=r(j4,":"),j4.forEach(t),Idr=i(Ta),_e=n(Ta,"UL",{});var ye=s(_e);iT=n(ye,"LI",{});var F7e=s(iT);t_e=n(F7e,"STRONG",{});var wht=s(t_e);Ndr=r(wht,"bart"),wht.forEach(t),Ddr=r(F7e," \u2014 "),gO=n(F7e,"A",{href:!0});var Aht=s(gO);jdr=r(Aht,"TFBartForConditionalGeneration"),Aht.forEach(t),qdr=r(F7e," (BART model)"),F7e.forEach(t),Gdr=i(ye),dT=n(ye,"LI",{});var C7e=s(dT);a_e=n(C7e,"STRONG",{});var Lht=s(a_e);Odr=r(Lht,"blenderbot"),Lht.forEach(t),Xdr=r(C7e," \u2014 "),hO=n(C7e,"A",{href:!0});var Bht=s(hO);Vdr=r(Bht,"TFBlenderbotForConditionalGeneration"),Bht.forEach(t),zdr=r(C7e," (Blenderbot model)"),C7e.forEach(t),Wdr=i(ye),cT=n(ye,"LI",{});var M7e=s(cT);n_e=n(M7e,"STRONG",{});var xht=s(n_e);Qdr=r(xht,"blenderbot-small"),xht.forEach(t),Hdr=r(M7e," \u2014 "),pO=n(M7e,"A",{href:!0});var kht=s(pO);Udr=r(kht,"TFBlenderbotSmallForConditionalGeneration"),kht.forEach(t),Jdr=r(M7e," (BlenderbotSmall model)"),M7e.forEach(t),Ydr=i(ye),fT=n(ye,"LI",{});var E7e=s(fT);s_e=n(E7e,"STRONG",{});var Rht=s(s_e);Kdr=r(Rht,"encoder-decoder"),Rht.forEach(t),Zdr=r(E7e," \u2014 "),_O=n(E7e,"A",{href:!0});var Sht=s(_O);ecr=r(Sht,"TFEncoderDecoderModel"),Sht.forEach(t),ocr=r(E7e," (Encoder decoder model)"),E7e.forEach(t),rcr=i(ye),mT=n(ye,"LI",{});var y7e=s(mT);l_e=n(y7e,"STRONG",{});var Pht=s(l_e);tcr=r(Pht,"led"),Pht.forEach(t),acr=r(y7e," \u2014 "),uO=n(y7e,"A",{href:!0});var $ht=s(uO);ncr=r($ht,"TFLEDForConditionalGeneration"),$ht.forEach(t),scr=r(y7e," (LED model)"),y7e.forEach(t),lcr=i(ye),gT=n(ye,"LI",{});var w7e=s(gT);i_e=n(w7e,"STRONG",{});var Iht=s(i_e);icr=r(Iht,"marian"),Iht.forEach(t),dcr=r(w7e," \u2014 "),bO=n(w7e,"A",{href:!0});var Nht=s(bO);ccr=r(Nht,"TFMarianMTModel"),Nht.forEach(t),fcr=r(w7e," (Marian model)"),w7e.forEach(t),mcr=i(ye),hT=n(ye,"LI",{});var A7e=s(hT);d_e=n(A7e,"STRONG",{});var Dht=s(d_e);gcr=r(Dht,"mbart"),Dht.forEach(t),hcr=r(A7e," \u2014 "),vO=n(A7e,"A",{href:!0});var jht=s(vO);pcr=r(jht,"TFMBartForConditionalGeneration"),jht.forEach(t),_cr=r(A7e," (mBART model)"),A7e.forEach(t),ucr=i(ye),pT=n(ye,"LI",{});var L7e=s(pT);c_e=n(L7e,"STRONG",{});var qht=s(c_e);bcr=r(qht,"mt5"),qht.forEach(t),vcr=r(L7e," \u2014 "),TO=n(L7e,"A",{href:!0});var Ght=s(TO);Tcr=r(Ght,"TFMT5ForConditionalGeneration"),Ght.forEach(t),Fcr=r(L7e," (mT5 model)"),L7e.forEach(t),Ccr=i(ye),_T=n(ye,"LI",{});var B7e=s(_T);f_e=n(B7e,"STRONG",{});var Oht=s(f_e);Mcr=r(Oht,"pegasus"),Oht.forEach(t),Ecr=r(B7e," \u2014 "),FO=n(B7e,"A",{href:!0});var Xht=s(FO);ycr=r(Xht,"TFPegasusForConditionalGeneration"),Xht.forEach(t),wcr=r(B7e," (Pegasus model)"),B7e.forEach(t),Acr=i(ye),uT=n(ye,"LI",{});var x7e=s(uT);m_e=n(x7e,"STRONG",{});var Vht=s(m_e);Lcr=r(Vht,"t5"),Vht.forEach(t),Bcr=r(x7e," \u2014 "),CO=n(x7e,"A",{href:!0});var zht=s(CO);xcr=r(zht,"TFT5ForConditionalGeneration"),zht.forEach(t),kcr=r(x7e," (T5 model)"),x7e.forEach(t),ye.forEach(t),Rcr=i(Ta),g_e=n(Ta,"P",{});var Wht=s(g_e);Scr=r(Wht,"Examples:"),Wht.forEach(t),Pcr=i(Ta),m(LA.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),uRe=i(c),xc=n(c,"H2",{class:!0});var BPe=s(xc);bT=n(BPe,"A",{id:!0,class:!0,href:!0});var Qht=s(bT);h_e=n(Qht,"SPAN",{});var Hht=s(h_e);m(BA.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),$cr=i(BPe),p_e=n(BPe,"SPAN",{});var Uht=s(p_e);Icr=r(Uht,"TFAutoModelForSequenceClassification"),Uht.forEach(t),BPe.forEach(t),bRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(xA.$$.fragment,Yl),Ncr=i(Yl),kc=n(Yl,"P",{});var eQ=s(kc);Dcr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),__e=n(eQ,"CODE",{});var Jht=s(__e);jcr=r(Jht,"from_pretrained()"),Jht.forEach(t),qcr=r(eQ,"class method or the "),u_e=n(eQ,"CODE",{});var Yht=s(u_e);Gcr=r(Yht,"from_config()"),Yht.forEach(t),Ocr=r(eQ,`class
method.`),eQ.forEach(t),Xcr=i(Yl),kA=n(Yl,"P",{});var xPe=s(kA);Vcr=r(xPe,"This class cannot be instantiated directly using "),b_e=n(xPe,"CODE",{});var Kht=s(b_e);zcr=r(Kht,"__init__()"),Kht.forEach(t),Wcr=r(xPe," (throws an error)."),xPe.forEach(t),Qcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(RA.$$.fragment,Kl),Hcr=i(Kl),v_e=n(Kl,"P",{});var Zht=s(v_e);Ucr=r(Zht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zht.forEach(t),Jcr=i(Kl),Rc=n(Kl,"P",{});var oQ=s(Rc);Ycr=r(oQ,`Note:
Loading a model from its configuration file does `),T_e=n(oQ,"STRONG",{});var ept=s(T_e);Kcr=r(ept,"not"),ept.forEach(t),Zcr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=n(oQ,"CODE",{});var opt=s(F_e);efr=r(opt,"from_pretrained()"),opt.forEach(t),ofr=r(oQ,"to load the model weights."),oQ.forEach(t),rfr=i(Kl),C_e=n(Kl,"P",{});var rpt=s(C_e);tfr=r(rpt,"Examples:"),rpt.forEach(t),afr=i(Kl),m(SA.$$.fragment,Kl),Kl.forEach(t),nfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(PA.$$.fragment,Fa),sfr=i(Fa),M_e=n(Fa,"P",{});var tpt=s(M_e);lfr=r(tpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tpt.forEach(t),ifr=i(Fa),Cn=n(Fa,"P",{});var q4=s(Cn);dfr=r(q4,"The model class to instantiate is selected based on the "),E_e=n(q4,"CODE",{});var apt=s(E_e);cfr=r(apt,"model_type"),apt.forEach(t),ffr=r(q4,` property of the config object (either
passed as an argument or loaded from `),y_e=n(q4,"CODE",{});var npt=s(y_e);mfr=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),gfr=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(q4,"CODE",{});var spt=s(w_e);hfr=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),pfr=r(q4,":"),q4.forEach(t),_fr=i(Fa),V=n(Fa,"UL",{});var W=s(V);vT=n(W,"LI",{});var k7e=s(vT);A_e=n(k7e,"STRONG",{});var lpt=s(A_e);ufr=r(lpt,"albert"),lpt.forEach(t),bfr=r(k7e," \u2014 "),MO=n(k7e,"A",{href:!0});var ipt=s(MO);vfr=r(ipt,"TFAlbertForSequenceClassification"),ipt.forEach(t),Tfr=r(k7e," (ALBERT model)"),k7e.forEach(t),Ffr=i(W),TT=n(W,"LI",{});var R7e=s(TT);L_e=n(R7e,"STRONG",{});var dpt=s(L_e);Cfr=r(dpt,"bert"),dpt.forEach(t),Mfr=r(R7e," \u2014 "),EO=n(R7e,"A",{href:!0});var cpt=s(EO);Efr=r(cpt,"TFBertForSequenceClassification"),cpt.forEach(t),yfr=r(R7e," (BERT model)"),R7e.forEach(t),wfr=i(W),FT=n(W,"LI",{});var S7e=s(FT);B_e=n(S7e,"STRONG",{});var fpt=s(B_e);Afr=r(fpt,"camembert"),fpt.forEach(t),Lfr=r(S7e," \u2014 "),yO=n(S7e,"A",{href:!0});var mpt=s(yO);Bfr=r(mpt,"TFCamembertForSequenceClassification"),mpt.forEach(t),xfr=r(S7e," (CamemBERT model)"),S7e.forEach(t),kfr=i(W),CT=n(W,"LI",{});var P7e=s(CT);x_e=n(P7e,"STRONG",{});var gpt=s(x_e);Rfr=r(gpt,"convbert"),gpt.forEach(t),Sfr=r(P7e," \u2014 "),wO=n(P7e,"A",{href:!0});var hpt=s(wO);Pfr=r(hpt,"TFConvBertForSequenceClassification"),hpt.forEach(t),$fr=r(P7e," (ConvBERT model)"),P7e.forEach(t),Ifr=i(W),MT=n(W,"LI",{});var $7e=s(MT);k_e=n($7e,"STRONG",{});var ppt=s(k_e);Nfr=r(ppt,"ctrl"),ppt.forEach(t),Dfr=r($7e," \u2014 "),AO=n($7e,"A",{href:!0});var _pt=s(AO);jfr=r(_pt,"TFCTRLForSequenceClassification"),_pt.forEach(t),qfr=r($7e," (CTRL model)"),$7e.forEach(t),Gfr=i(W),ET=n(W,"LI",{});var I7e=s(ET);R_e=n(I7e,"STRONG",{});var upt=s(R_e);Ofr=r(upt,"deberta"),upt.forEach(t),Xfr=r(I7e," \u2014 "),LO=n(I7e,"A",{href:!0});var bpt=s(LO);Vfr=r(bpt,"TFDebertaForSequenceClassification"),bpt.forEach(t),zfr=r(I7e," (DeBERTa model)"),I7e.forEach(t),Wfr=i(W),yT=n(W,"LI",{});var N7e=s(yT);S_e=n(N7e,"STRONG",{});var vpt=s(S_e);Qfr=r(vpt,"deberta-v2"),vpt.forEach(t),Hfr=r(N7e," \u2014 "),BO=n(N7e,"A",{href:!0});var Tpt=s(BO);Ufr=r(Tpt,"TFDebertaV2ForSequenceClassification"),Tpt.forEach(t),Jfr=r(N7e," (DeBERTa-v2 model)"),N7e.forEach(t),Yfr=i(W),wT=n(W,"LI",{});var D7e=s(wT);P_e=n(D7e,"STRONG",{});var Fpt=s(P_e);Kfr=r(Fpt,"distilbert"),Fpt.forEach(t),Zfr=r(D7e," \u2014 "),xO=n(D7e,"A",{href:!0});var Cpt=s(xO);emr=r(Cpt,"TFDistilBertForSequenceClassification"),Cpt.forEach(t),omr=r(D7e," (DistilBERT model)"),D7e.forEach(t),rmr=i(W),AT=n(W,"LI",{});var j7e=s(AT);$_e=n(j7e,"STRONG",{});var Mpt=s($_e);tmr=r(Mpt,"electra"),Mpt.forEach(t),amr=r(j7e," \u2014 "),kO=n(j7e,"A",{href:!0});var Ept=s(kO);nmr=r(Ept,"TFElectraForSequenceClassification"),Ept.forEach(t),smr=r(j7e," (ELECTRA model)"),j7e.forEach(t),lmr=i(W),LT=n(W,"LI",{});var q7e=s(LT);I_e=n(q7e,"STRONG",{});var ypt=s(I_e);imr=r(ypt,"flaubert"),ypt.forEach(t),dmr=r(q7e," \u2014 "),RO=n(q7e,"A",{href:!0});var wpt=s(RO);cmr=r(wpt,"TFFlaubertForSequenceClassification"),wpt.forEach(t),fmr=r(q7e," (FlauBERT model)"),q7e.forEach(t),mmr=i(W),BT=n(W,"LI",{});var G7e=s(BT);N_e=n(G7e,"STRONG",{});var Apt=s(N_e);gmr=r(Apt,"funnel"),Apt.forEach(t),hmr=r(G7e," \u2014 "),SO=n(G7e,"A",{href:!0});var Lpt=s(SO);pmr=r(Lpt,"TFFunnelForSequenceClassification"),Lpt.forEach(t),_mr=r(G7e," (Funnel Transformer model)"),G7e.forEach(t),umr=i(W),xT=n(W,"LI",{});var O7e=s(xT);D_e=n(O7e,"STRONG",{});var Bpt=s(D_e);bmr=r(Bpt,"gpt2"),Bpt.forEach(t),vmr=r(O7e," \u2014 "),PO=n(O7e,"A",{href:!0});var xpt=s(PO);Tmr=r(xpt,"TFGPT2ForSequenceClassification"),xpt.forEach(t),Fmr=r(O7e," (OpenAI GPT-2 model)"),O7e.forEach(t),Cmr=i(W),kT=n(W,"LI",{});var X7e=s(kT);j_e=n(X7e,"STRONG",{});var kpt=s(j_e);Mmr=r(kpt,"layoutlm"),kpt.forEach(t),Emr=r(X7e," \u2014 "),$O=n(X7e,"A",{href:!0});var Rpt=s($O);ymr=r(Rpt,"TFLayoutLMForSequenceClassification"),Rpt.forEach(t),wmr=r(X7e," (LayoutLM model)"),X7e.forEach(t),Amr=i(W),RT=n(W,"LI",{});var V7e=s(RT);q_e=n(V7e,"STRONG",{});var Spt=s(q_e);Lmr=r(Spt,"longformer"),Spt.forEach(t),Bmr=r(V7e," \u2014 "),IO=n(V7e,"A",{href:!0});var Ppt=s(IO);xmr=r(Ppt,"TFLongformerForSequenceClassification"),Ppt.forEach(t),kmr=r(V7e," (Longformer model)"),V7e.forEach(t),Rmr=i(W),ST=n(W,"LI",{});var z7e=s(ST);G_e=n(z7e,"STRONG",{});var $pt=s(G_e);Smr=r($pt,"mobilebert"),$pt.forEach(t),Pmr=r(z7e," \u2014 "),NO=n(z7e,"A",{href:!0});var Ipt=s(NO);$mr=r(Ipt,"TFMobileBertForSequenceClassification"),Ipt.forEach(t),Imr=r(z7e," (MobileBERT model)"),z7e.forEach(t),Nmr=i(W),PT=n(W,"LI",{});var W7e=s(PT);O_e=n(W7e,"STRONG",{});var Npt=s(O_e);Dmr=r(Npt,"mpnet"),Npt.forEach(t),jmr=r(W7e," \u2014 "),DO=n(W7e,"A",{href:!0});var Dpt=s(DO);qmr=r(Dpt,"TFMPNetForSequenceClassification"),Dpt.forEach(t),Gmr=r(W7e," (MPNet model)"),W7e.forEach(t),Omr=i(W),$T=n(W,"LI",{});var Q7e=s($T);X_e=n(Q7e,"STRONG",{});var jpt=s(X_e);Xmr=r(jpt,"openai-gpt"),jpt.forEach(t),Vmr=r(Q7e," \u2014 "),jO=n(Q7e,"A",{href:!0});var qpt=s(jO);zmr=r(qpt,"TFOpenAIGPTForSequenceClassification"),qpt.forEach(t),Wmr=r(Q7e," (OpenAI GPT model)"),Q7e.forEach(t),Qmr=i(W),IT=n(W,"LI",{});var H7e=s(IT);V_e=n(H7e,"STRONG",{});var Gpt=s(V_e);Hmr=r(Gpt,"rembert"),Gpt.forEach(t),Umr=r(H7e," \u2014 "),qO=n(H7e,"A",{href:!0});var Opt=s(qO);Jmr=r(Opt,"TFRemBertForSequenceClassification"),Opt.forEach(t),Ymr=r(H7e," (RemBERT model)"),H7e.forEach(t),Kmr=i(W),NT=n(W,"LI",{});var U7e=s(NT);z_e=n(U7e,"STRONG",{});var Xpt=s(z_e);Zmr=r(Xpt,"roberta"),Xpt.forEach(t),egr=r(U7e," \u2014 "),GO=n(U7e,"A",{href:!0});var Vpt=s(GO);ogr=r(Vpt,"TFRobertaForSequenceClassification"),Vpt.forEach(t),rgr=r(U7e," (RoBERTa model)"),U7e.forEach(t),tgr=i(W),DT=n(W,"LI",{});var J7e=s(DT);W_e=n(J7e,"STRONG",{});var zpt=s(W_e);agr=r(zpt,"roformer"),zpt.forEach(t),ngr=r(J7e," \u2014 "),OO=n(J7e,"A",{href:!0});var Wpt=s(OO);sgr=r(Wpt,"TFRoFormerForSequenceClassification"),Wpt.forEach(t),lgr=r(J7e," (RoFormer model)"),J7e.forEach(t),igr=i(W),jT=n(W,"LI",{});var Y7e=s(jT);Q_e=n(Y7e,"STRONG",{});var Qpt=s(Q_e);dgr=r(Qpt,"tapas"),Qpt.forEach(t),cgr=r(Y7e," \u2014 "),XO=n(Y7e,"A",{href:!0});var Hpt=s(XO);fgr=r(Hpt,"TFTapasForSequenceClassification"),Hpt.forEach(t),mgr=r(Y7e," (TAPAS model)"),Y7e.forEach(t),ggr=i(W),qT=n(W,"LI",{});var K7e=s(qT);H_e=n(K7e,"STRONG",{});var Upt=s(H_e);hgr=r(Upt,"transfo-xl"),Upt.forEach(t),pgr=r(K7e," \u2014 "),VO=n(K7e,"A",{href:!0});var Jpt=s(VO);_gr=r(Jpt,"TFTransfoXLForSequenceClassification"),Jpt.forEach(t),ugr=r(K7e," (Transformer-XL model)"),K7e.forEach(t),bgr=i(W),GT=n(W,"LI",{});var Z7e=s(GT);U_e=n(Z7e,"STRONG",{});var Ypt=s(U_e);vgr=r(Ypt,"xlm"),Ypt.forEach(t),Tgr=r(Z7e," \u2014 "),zO=n(Z7e,"A",{href:!0});var Kpt=s(zO);Fgr=r(Kpt,"TFXLMForSequenceClassification"),Kpt.forEach(t),Cgr=r(Z7e," (XLM model)"),Z7e.forEach(t),Mgr=i(W),OT=n(W,"LI",{});var e8e=s(OT);J_e=n(e8e,"STRONG",{});var Zpt=s(J_e);Egr=r(Zpt,"xlm-roberta"),Zpt.forEach(t),ygr=r(e8e," \u2014 "),WO=n(e8e,"A",{href:!0});var e_t=s(WO);wgr=r(e_t,"TFXLMRobertaForSequenceClassification"),e_t.forEach(t),Agr=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),Lgr=i(W),XT=n(W,"LI",{});var o8e=s(XT);Y_e=n(o8e,"STRONG",{});var o_t=s(Y_e);Bgr=r(o_t,"xlnet"),o_t.forEach(t),xgr=r(o8e," \u2014 "),QO=n(o8e,"A",{href:!0});var r_t=s(QO);kgr=r(r_t,"TFXLNetForSequenceClassification"),r_t.forEach(t),Rgr=r(o8e," (XLNet model)"),o8e.forEach(t),W.forEach(t),Sgr=i(Fa),K_e=n(Fa,"P",{});var t_t=s(K_e);Pgr=r(t_t,"Examples:"),t_t.forEach(t),$gr=i(Fa),m($A.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),vRe=i(c),Sc=n(c,"H2",{class:!0});var kPe=s(Sc);VT=n(kPe,"A",{id:!0,class:!0,href:!0});var a_t=s(VT);Z_e=n(a_t,"SPAN",{});var n_t=s(Z_e);m(IA.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),Igr=i(kPe),eue=n(kPe,"SPAN",{});var s_t=s(eue);Ngr=r(s_t,"TFAutoModelForMultipleChoice"),s_t.forEach(t),kPe.forEach(t),TRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(NA.$$.fragment,Zl),Dgr=i(Zl),Pc=n(Zl,"P",{});var rQ=s(Pc);jgr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oue=n(rQ,"CODE",{});var l_t=s(oue);qgr=r(l_t,"from_pretrained()"),l_t.forEach(t),Ggr=r(rQ,"class method or the "),rue=n(rQ,"CODE",{});var i_t=s(rue);Ogr=r(i_t,"from_config()"),i_t.forEach(t),Xgr=r(rQ,`class
method.`),rQ.forEach(t),Vgr=i(Zl),DA=n(Zl,"P",{});var RPe=s(DA);zgr=r(RPe,"This class cannot be instantiated directly using "),tue=n(RPe,"CODE",{});var d_t=s(tue);Wgr=r(d_t,"__init__()"),d_t.forEach(t),Qgr=r(RPe," (throws an error)."),RPe.forEach(t),Hgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(jA.$$.fragment,ei),Ugr=i(ei),aue=n(ei,"P",{});var c_t=s(aue);Jgr=r(c_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c_t.forEach(t),Ygr=i(ei),$c=n(ei,"P",{});var tQ=s($c);Kgr=r(tQ,`Note:
Loading a model from its configuration file does `),nue=n(tQ,"STRONG",{});var f_t=s(nue);Zgr=r(f_t,"not"),f_t.forEach(t),ehr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sue=n(tQ,"CODE",{});var m_t=s(sue);ohr=r(m_t,"from_pretrained()"),m_t.forEach(t),rhr=r(tQ,"to load the model weights."),tQ.forEach(t),thr=i(ei),lue=n(ei,"P",{});var g_t=s(lue);ahr=r(g_t,"Examples:"),g_t.forEach(t),nhr=i(ei),m(qA.$$.fragment,ei),ei.forEach(t),shr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(GA.$$.fragment,Ca),lhr=i(Ca),iue=n(Ca,"P",{});var h_t=s(iue);ihr=r(h_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h_t.forEach(t),dhr=i(Ca),Mn=n(Ca,"P",{});var G4=s(Mn);chr=r(G4,"The model class to instantiate is selected based on the "),due=n(G4,"CODE",{});var p_t=s(due);fhr=r(p_t,"model_type"),p_t.forEach(t),mhr=r(G4,` property of the config object (either
passed as an argument or loaded from `),cue=n(G4,"CODE",{});var __t=s(cue);ghr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),hhr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(G4,"CODE",{});var u_t=s(fue);phr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),_hr=r(G4,":"),G4.forEach(t),uhr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);zT=n(le,"LI",{});var r8e=s(zT);mue=n(r8e,"STRONG",{});var b_t=s(mue);bhr=r(b_t,"albert"),b_t.forEach(t),vhr=r(r8e," \u2014 "),HO=n(r8e,"A",{href:!0});var v_t=s(HO);Thr=r(v_t,"TFAlbertForMultipleChoice"),v_t.forEach(t),Fhr=r(r8e," (ALBERT model)"),r8e.forEach(t),Chr=i(le),WT=n(le,"LI",{});var t8e=s(WT);gue=n(t8e,"STRONG",{});var T_t=s(gue);Mhr=r(T_t,"bert"),T_t.forEach(t),Ehr=r(t8e," \u2014 "),UO=n(t8e,"A",{href:!0});var F_t=s(UO);yhr=r(F_t,"TFBertForMultipleChoice"),F_t.forEach(t),whr=r(t8e," (BERT model)"),t8e.forEach(t),Ahr=i(le),QT=n(le,"LI",{});var a8e=s(QT);hue=n(a8e,"STRONG",{});var C_t=s(hue);Lhr=r(C_t,"camembert"),C_t.forEach(t),Bhr=r(a8e," \u2014 "),JO=n(a8e,"A",{href:!0});var M_t=s(JO);xhr=r(M_t,"TFCamembertForMultipleChoice"),M_t.forEach(t),khr=r(a8e," (CamemBERT model)"),a8e.forEach(t),Rhr=i(le),HT=n(le,"LI",{});var n8e=s(HT);pue=n(n8e,"STRONG",{});var E_t=s(pue);Shr=r(E_t,"convbert"),E_t.forEach(t),Phr=r(n8e," \u2014 "),YO=n(n8e,"A",{href:!0});var y_t=s(YO);$hr=r(y_t,"TFConvBertForMultipleChoice"),y_t.forEach(t),Ihr=r(n8e," (ConvBERT model)"),n8e.forEach(t),Nhr=i(le),UT=n(le,"LI",{});var s8e=s(UT);_ue=n(s8e,"STRONG",{});var w_t=s(_ue);Dhr=r(w_t,"distilbert"),w_t.forEach(t),jhr=r(s8e," \u2014 "),KO=n(s8e,"A",{href:!0});var A_t=s(KO);qhr=r(A_t,"TFDistilBertForMultipleChoice"),A_t.forEach(t),Ghr=r(s8e," (DistilBERT model)"),s8e.forEach(t),Ohr=i(le),JT=n(le,"LI",{});var l8e=s(JT);uue=n(l8e,"STRONG",{});var L_t=s(uue);Xhr=r(L_t,"electra"),L_t.forEach(t),Vhr=r(l8e," \u2014 "),ZO=n(l8e,"A",{href:!0});var B_t=s(ZO);zhr=r(B_t,"TFElectraForMultipleChoice"),B_t.forEach(t),Whr=r(l8e," (ELECTRA model)"),l8e.forEach(t),Qhr=i(le),YT=n(le,"LI",{});var i8e=s(YT);bue=n(i8e,"STRONG",{});var x_t=s(bue);Hhr=r(x_t,"flaubert"),x_t.forEach(t),Uhr=r(i8e," \u2014 "),eX=n(i8e,"A",{href:!0});var k_t=s(eX);Jhr=r(k_t,"TFFlaubertForMultipleChoice"),k_t.forEach(t),Yhr=r(i8e," (FlauBERT model)"),i8e.forEach(t),Khr=i(le),KT=n(le,"LI",{});var d8e=s(KT);vue=n(d8e,"STRONG",{});var R_t=s(vue);Zhr=r(R_t,"funnel"),R_t.forEach(t),epr=r(d8e," \u2014 "),oX=n(d8e,"A",{href:!0});var S_t=s(oX);opr=r(S_t,"TFFunnelForMultipleChoice"),S_t.forEach(t),rpr=r(d8e," (Funnel Transformer model)"),d8e.forEach(t),tpr=i(le),ZT=n(le,"LI",{});var c8e=s(ZT);Tue=n(c8e,"STRONG",{});var P_t=s(Tue);apr=r(P_t,"longformer"),P_t.forEach(t),npr=r(c8e," \u2014 "),rX=n(c8e,"A",{href:!0});var $_t=s(rX);spr=r($_t,"TFLongformerForMultipleChoice"),$_t.forEach(t),lpr=r(c8e," (Longformer model)"),c8e.forEach(t),ipr=i(le),eF=n(le,"LI",{});var f8e=s(eF);Fue=n(f8e,"STRONG",{});var I_t=s(Fue);dpr=r(I_t,"mobilebert"),I_t.forEach(t),cpr=r(f8e," \u2014 "),tX=n(f8e,"A",{href:!0});var N_t=s(tX);fpr=r(N_t,"TFMobileBertForMultipleChoice"),N_t.forEach(t),mpr=r(f8e," (MobileBERT model)"),f8e.forEach(t),gpr=i(le),oF=n(le,"LI",{});var m8e=s(oF);Cue=n(m8e,"STRONG",{});var D_t=s(Cue);hpr=r(D_t,"mpnet"),D_t.forEach(t),ppr=r(m8e," \u2014 "),aX=n(m8e,"A",{href:!0});var j_t=s(aX);_pr=r(j_t,"TFMPNetForMultipleChoice"),j_t.forEach(t),upr=r(m8e," (MPNet model)"),m8e.forEach(t),bpr=i(le),rF=n(le,"LI",{});var g8e=s(rF);Mue=n(g8e,"STRONG",{});var q_t=s(Mue);vpr=r(q_t,"rembert"),q_t.forEach(t),Tpr=r(g8e," \u2014 "),nX=n(g8e,"A",{href:!0});var G_t=s(nX);Fpr=r(G_t,"TFRemBertForMultipleChoice"),G_t.forEach(t),Cpr=r(g8e," (RemBERT model)"),g8e.forEach(t),Mpr=i(le),tF=n(le,"LI",{});var h8e=s(tF);Eue=n(h8e,"STRONG",{});var O_t=s(Eue);Epr=r(O_t,"roberta"),O_t.forEach(t),ypr=r(h8e," \u2014 "),sX=n(h8e,"A",{href:!0});var X_t=s(sX);wpr=r(X_t,"TFRobertaForMultipleChoice"),X_t.forEach(t),Apr=r(h8e," (RoBERTa model)"),h8e.forEach(t),Lpr=i(le),aF=n(le,"LI",{});var p8e=s(aF);yue=n(p8e,"STRONG",{});var V_t=s(yue);Bpr=r(V_t,"roformer"),V_t.forEach(t),xpr=r(p8e," \u2014 "),lX=n(p8e,"A",{href:!0});var z_t=s(lX);kpr=r(z_t,"TFRoFormerForMultipleChoice"),z_t.forEach(t),Rpr=r(p8e," (RoFormer model)"),p8e.forEach(t),Spr=i(le),nF=n(le,"LI",{});var _8e=s(nF);wue=n(_8e,"STRONG",{});var W_t=s(wue);Ppr=r(W_t,"xlm"),W_t.forEach(t),$pr=r(_8e," \u2014 "),iX=n(_8e,"A",{href:!0});var Q_t=s(iX);Ipr=r(Q_t,"TFXLMForMultipleChoice"),Q_t.forEach(t),Npr=r(_8e," (XLM model)"),_8e.forEach(t),Dpr=i(le),sF=n(le,"LI",{});var u8e=s(sF);Aue=n(u8e,"STRONG",{});var H_t=s(Aue);jpr=r(H_t,"xlm-roberta"),H_t.forEach(t),qpr=r(u8e," \u2014 "),dX=n(u8e,"A",{href:!0});var U_t=s(dX);Gpr=r(U_t,"TFXLMRobertaForMultipleChoice"),U_t.forEach(t),Opr=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),Xpr=i(le),lF=n(le,"LI",{});var b8e=s(lF);Lue=n(b8e,"STRONG",{});var J_t=s(Lue);Vpr=r(J_t,"xlnet"),J_t.forEach(t),zpr=r(b8e," \u2014 "),cX=n(b8e,"A",{href:!0});var Y_t=s(cX);Wpr=r(Y_t,"TFXLNetForMultipleChoice"),Y_t.forEach(t),Qpr=r(b8e," (XLNet model)"),b8e.forEach(t),le.forEach(t),Hpr=i(Ca),Bue=n(Ca,"P",{});var K_t=s(Bue);Upr=r(K_t,"Examples:"),K_t.forEach(t),Jpr=i(Ca),m(OA.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),FRe=i(c),Ic=n(c,"H2",{class:!0});var SPe=s(Ic);iF=n(SPe,"A",{id:!0,class:!0,href:!0});var Z_t=s(iF);xue=n(Z_t,"SPAN",{});var eut=s(xue);m(XA.$$.fragment,eut),eut.forEach(t),Z_t.forEach(t),Ypr=i(SPe),kue=n(SPe,"SPAN",{});var out=s(kue);Kpr=r(out,"TFAutoModelForTableQuestionAnswering"),out.forEach(t),SPe.forEach(t),CRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(VA.$$.fragment,oi),Zpr=i(oi),Nc=n(oi,"P",{});var aQ=s(Nc);e_r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Rue=n(aQ,"CODE",{});var rut=s(Rue);o_r=r(rut,"from_pretrained()"),rut.forEach(t),r_r=r(aQ,"class method or the "),Sue=n(aQ,"CODE",{});var tut=s(Sue);t_r=r(tut,"from_config()"),tut.forEach(t),a_r=r(aQ,`class
method.`),aQ.forEach(t),n_r=i(oi),zA=n(oi,"P",{});var PPe=s(zA);s_r=r(PPe,"This class cannot be instantiated directly using "),Pue=n(PPe,"CODE",{});var aut=s(Pue);l_r=r(aut,"__init__()"),aut.forEach(t),i_r=r(PPe," (throws an error)."),PPe.forEach(t),d_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(WA.$$.fragment,ri),c_r=i(ri),$ue=n(ri,"P",{});var nut=s($ue);f_r=r(nut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nut.forEach(t),m_r=i(ri),Dc=n(ri,"P",{});var nQ=s(Dc);g_r=r(nQ,`Note:
Loading a model from its configuration file does `),Iue=n(nQ,"STRONG",{});var sut=s(Iue);h_r=r(sut,"not"),sut.forEach(t),p_r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=n(nQ,"CODE",{});var lut=s(Nue);__r=r(lut,"from_pretrained()"),lut.forEach(t),u_r=r(nQ,"to load the model weights."),nQ.forEach(t),b_r=i(ri),Due=n(ri,"P",{});var iut=s(Due);v_r=r(iut,"Examples:"),iut.forEach(t),T_r=i(ri),m(QA.$$.fragment,ri),ri.forEach(t),F_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(HA.$$.fragment,Ma),C_r=i(Ma),jue=n(Ma,"P",{});var dut=s(jue);M_r=r(dut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dut.forEach(t),E_r=i(Ma),En=n(Ma,"P",{});var O4=s(En);y_r=r(O4,"The model class to instantiate is selected based on the "),que=n(O4,"CODE",{});var cut=s(que);w_r=r(cut,"model_type"),cut.forEach(t),A_r=r(O4,` property of the config object (either
passed as an argument or loaded from `),Gue=n(O4,"CODE",{});var fut=s(Gue);L_r=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),B_r=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(O4,"CODE",{});var mut=s(Oue);x_r=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),k_r=r(O4,":"),O4.forEach(t),R_r=i(Ma),Xue=n(Ma,"UL",{});var gut=s(Xue);dF=n(gut,"LI",{});var v8e=s(dF);Vue=n(v8e,"STRONG",{});var hut=s(Vue);S_r=r(hut,"tapas"),hut.forEach(t),P_r=r(v8e," \u2014 "),fX=n(v8e,"A",{href:!0});var put=s(fX);$_r=r(put,"TFTapasForQuestionAnswering"),put.forEach(t),I_r=r(v8e," (TAPAS model)"),v8e.forEach(t),gut.forEach(t),N_r=i(Ma),zue=n(Ma,"P",{});var _ut=s(zue);D_r=r(_ut,"Examples:"),_ut.forEach(t),j_r=i(Ma),m(UA.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),MRe=i(c),jc=n(c,"H2",{class:!0});var $Pe=s(jc);cF=n($Pe,"A",{id:!0,class:!0,href:!0});var uut=s(cF);Wue=n(uut,"SPAN",{});var but=s(Wue);m(JA.$$.fragment,but),but.forEach(t),uut.forEach(t),q_r=i($Pe),Que=n($Pe,"SPAN",{});var vut=s(Que);G_r=r(vut,"TFAutoModelForTokenClassification"),vut.forEach(t),$Pe.forEach(t),ERe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(YA.$$.fragment,ti),O_r=i(ti),qc=n(ti,"P",{});var sQ=s(qc);X_r=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hue=n(sQ,"CODE",{});var Tut=s(Hue);V_r=r(Tut,"from_pretrained()"),Tut.forEach(t),z_r=r(sQ,"class method or the "),Uue=n(sQ,"CODE",{});var Fut=s(Uue);W_r=r(Fut,"from_config()"),Fut.forEach(t),Q_r=r(sQ,`class
method.`),sQ.forEach(t),H_r=i(ti),KA=n(ti,"P",{});var IPe=s(KA);U_r=r(IPe,"This class cannot be instantiated directly using "),Jue=n(IPe,"CODE",{});var Cut=s(Jue);J_r=r(Cut,"__init__()"),Cut.forEach(t),Y_r=r(IPe," (throws an error)."),IPe.forEach(t),K_r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(ZA.$$.fragment,ai),Z_r=i(ai),Yue=n(ai,"P",{});var Mut=s(Yue);eur=r(Mut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mut.forEach(t),our=i(ai),Gc=n(ai,"P",{});var lQ=s(Gc);rur=r(lQ,`Note:
Loading a model from its configuration file does `),Kue=n(lQ,"STRONG",{});var Eut=s(Kue);tur=r(Eut,"not"),Eut.forEach(t),aur=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zue=n(lQ,"CODE",{});var yut=s(Zue);nur=r(yut,"from_pretrained()"),yut.forEach(t),sur=r(lQ,"to load the model weights."),lQ.forEach(t),lur=i(ai),e1e=n(ai,"P",{});var wut=s(e1e);iur=r(wut,"Examples:"),wut.forEach(t),dur=i(ai),m(e0.$$.fragment,ai),ai.forEach(t),cur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(o0.$$.fragment,Ea),fur=i(Ea),o1e=n(Ea,"P",{});var Aut=s(o1e);mur=r(Aut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Aut.forEach(t),gur=i(Ea),yn=n(Ea,"P",{});var X4=s(yn);hur=r(X4,"The model class to instantiate is selected based on the "),r1e=n(X4,"CODE",{});var Lut=s(r1e);pur=r(Lut,"model_type"),Lut.forEach(t),_ur=r(X4,` property of the config object (either
passed as an argument or loaded from `),t1e=n(X4,"CODE",{});var But=s(t1e);uur=r(But,"pretrained_model_name_or_path"),But.forEach(t),bur=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(X4,"CODE",{});var xut=s(a1e);vur=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),Tur=r(X4,":"),X4.forEach(t),Fur=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);fF=n(oe,"LI",{});var T8e=s(fF);n1e=n(T8e,"STRONG",{});var kut=s(n1e);Cur=r(kut,"albert"),kut.forEach(t),Mur=r(T8e," \u2014 "),mX=n(T8e,"A",{href:!0});var Rut=s(mX);Eur=r(Rut,"TFAlbertForTokenClassification"),Rut.forEach(t),yur=r(T8e," (ALBERT model)"),T8e.forEach(t),wur=i(oe),mF=n(oe,"LI",{});var F8e=s(mF);s1e=n(F8e,"STRONG",{});var Sut=s(s1e);Aur=r(Sut,"bert"),Sut.forEach(t),Lur=r(F8e," \u2014 "),gX=n(F8e,"A",{href:!0});var Put=s(gX);Bur=r(Put,"TFBertForTokenClassification"),Put.forEach(t),xur=r(F8e," (BERT model)"),F8e.forEach(t),kur=i(oe),gF=n(oe,"LI",{});var C8e=s(gF);l1e=n(C8e,"STRONG",{});var $ut=s(l1e);Rur=r($ut,"camembert"),$ut.forEach(t),Sur=r(C8e," \u2014 "),hX=n(C8e,"A",{href:!0});var Iut=s(hX);Pur=r(Iut,"TFCamembertForTokenClassification"),Iut.forEach(t),$ur=r(C8e," (CamemBERT model)"),C8e.forEach(t),Iur=i(oe),hF=n(oe,"LI",{});var M8e=s(hF);i1e=n(M8e,"STRONG",{});var Nut=s(i1e);Nur=r(Nut,"convbert"),Nut.forEach(t),Dur=r(M8e," \u2014 "),pX=n(M8e,"A",{href:!0});var Dut=s(pX);jur=r(Dut,"TFConvBertForTokenClassification"),Dut.forEach(t),qur=r(M8e," (ConvBERT model)"),M8e.forEach(t),Gur=i(oe),pF=n(oe,"LI",{});var E8e=s(pF);d1e=n(E8e,"STRONG",{});var jut=s(d1e);Our=r(jut,"deberta"),jut.forEach(t),Xur=r(E8e," \u2014 "),_X=n(E8e,"A",{href:!0});var qut=s(_X);Vur=r(qut,"TFDebertaForTokenClassification"),qut.forEach(t),zur=r(E8e," (DeBERTa model)"),E8e.forEach(t),Wur=i(oe),_F=n(oe,"LI",{});var y8e=s(_F);c1e=n(y8e,"STRONG",{});var Gut=s(c1e);Qur=r(Gut,"deberta-v2"),Gut.forEach(t),Hur=r(y8e," \u2014 "),uX=n(y8e,"A",{href:!0});var Out=s(uX);Uur=r(Out,"TFDebertaV2ForTokenClassification"),Out.forEach(t),Jur=r(y8e," (DeBERTa-v2 model)"),y8e.forEach(t),Yur=i(oe),uF=n(oe,"LI",{});var w8e=s(uF);f1e=n(w8e,"STRONG",{});var Xut=s(f1e);Kur=r(Xut,"distilbert"),Xut.forEach(t),Zur=r(w8e," \u2014 "),bX=n(w8e,"A",{href:!0});var Vut=s(bX);e1r=r(Vut,"TFDistilBertForTokenClassification"),Vut.forEach(t),o1r=r(w8e," (DistilBERT model)"),w8e.forEach(t),r1r=i(oe),bF=n(oe,"LI",{});var A8e=s(bF);m1e=n(A8e,"STRONG",{});var zut=s(m1e);t1r=r(zut,"electra"),zut.forEach(t),a1r=r(A8e," \u2014 "),vX=n(A8e,"A",{href:!0});var Wut=s(vX);n1r=r(Wut,"TFElectraForTokenClassification"),Wut.forEach(t),s1r=r(A8e," (ELECTRA model)"),A8e.forEach(t),l1r=i(oe),vF=n(oe,"LI",{});var L8e=s(vF);g1e=n(L8e,"STRONG",{});var Qut=s(g1e);i1r=r(Qut,"flaubert"),Qut.forEach(t),d1r=r(L8e," \u2014 "),TX=n(L8e,"A",{href:!0});var Hut=s(TX);c1r=r(Hut,"TFFlaubertForTokenClassification"),Hut.forEach(t),f1r=r(L8e," (FlauBERT model)"),L8e.forEach(t),m1r=i(oe),TF=n(oe,"LI",{});var B8e=s(TF);h1e=n(B8e,"STRONG",{});var Uut=s(h1e);g1r=r(Uut,"funnel"),Uut.forEach(t),h1r=r(B8e," \u2014 "),FX=n(B8e,"A",{href:!0});var Jut=s(FX);p1r=r(Jut,"TFFunnelForTokenClassification"),Jut.forEach(t),_1r=r(B8e," (Funnel Transformer model)"),B8e.forEach(t),u1r=i(oe),FF=n(oe,"LI",{});var x8e=s(FF);p1e=n(x8e,"STRONG",{});var Yut=s(p1e);b1r=r(Yut,"layoutlm"),Yut.forEach(t),v1r=r(x8e," \u2014 "),CX=n(x8e,"A",{href:!0});var Kut=s(CX);T1r=r(Kut,"TFLayoutLMForTokenClassification"),Kut.forEach(t),F1r=r(x8e," (LayoutLM model)"),x8e.forEach(t),C1r=i(oe),CF=n(oe,"LI",{});var k8e=s(CF);_1e=n(k8e,"STRONG",{});var Zut=s(_1e);M1r=r(Zut,"longformer"),Zut.forEach(t),E1r=r(k8e," \u2014 "),MX=n(k8e,"A",{href:!0});var e1t=s(MX);y1r=r(e1t,"TFLongformerForTokenClassification"),e1t.forEach(t),w1r=r(k8e," (Longformer model)"),k8e.forEach(t),A1r=i(oe),MF=n(oe,"LI",{});var R8e=s(MF);u1e=n(R8e,"STRONG",{});var o1t=s(u1e);L1r=r(o1t,"mobilebert"),o1t.forEach(t),B1r=r(R8e," \u2014 "),EX=n(R8e,"A",{href:!0});var r1t=s(EX);x1r=r(r1t,"TFMobileBertForTokenClassification"),r1t.forEach(t),k1r=r(R8e," (MobileBERT model)"),R8e.forEach(t),R1r=i(oe),EF=n(oe,"LI",{});var S8e=s(EF);b1e=n(S8e,"STRONG",{});var t1t=s(b1e);S1r=r(t1t,"mpnet"),t1t.forEach(t),P1r=r(S8e," \u2014 "),yX=n(S8e,"A",{href:!0});var a1t=s(yX);$1r=r(a1t,"TFMPNetForTokenClassification"),a1t.forEach(t),I1r=r(S8e," (MPNet model)"),S8e.forEach(t),N1r=i(oe),yF=n(oe,"LI",{});var P8e=s(yF);v1e=n(P8e,"STRONG",{});var n1t=s(v1e);D1r=r(n1t,"rembert"),n1t.forEach(t),j1r=r(P8e," \u2014 "),wX=n(P8e,"A",{href:!0});var s1t=s(wX);q1r=r(s1t,"TFRemBertForTokenClassification"),s1t.forEach(t),G1r=r(P8e," (RemBERT model)"),P8e.forEach(t),O1r=i(oe),wF=n(oe,"LI",{});var $8e=s(wF);T1e=n($8e,"STRONG",{});var l1t=s(T1e);X1r=r(l1t,"roberta"),l1t.forEach(t),V1r=r($8e," \u2014 "),AX=n($8e,"A",{href:!0});var i1t=s(AX);z1r=r(i1t,"TFRobertaForTokenClassification"),i1t.forEach(t),W1r=r($8e," (RoBERTa model)"),$8e.forEach(t),Q1r=i(oe),AF=n(oe,"LI",{});var I8e=s(AF);F1e=n(I8e,"STRONG",{});var d1t=s(F1e);H1r=r(d1t,"roformer"),d1t.forEach(t),U1r=r(I8e," \u2014 "),LX=n(I8e,"A",{href:!0});var c1t=s(LX);J1r=r(c1t,"TFRoFormerForTokenClassification"),c1t.forEach(t),Y1r=r(I8e," (RoFormer model)"),I8e.forEach(t),K1r=i(oe),LF=n(oe,"LI",{});var N8e=s(LF);C1e=n(N8e,"STRONG",{});var f1t=s(C1e);Z1r=r(f1t,"xlm"),f1t.forEach(t),e9r=r(N8e," \u2014 "),BX=n(N8e,"A",{href:!0});var m1t=s(BX);o9r=r(m1t,"TFXLMForTokenClassification"),m1t.forEach(t),r9r=r(N8e," (XLM model)"),N8e.forEach(t),t9r=i(oe),BF=n(oe,"LI",{});var D8e=s(BF);M1e=n(D8e,"STRONG",{});var g1t=s(M1e);a9r=r(g1t,"xlm-roberta"),g1t.forEach(t),n9r=r(D8e," \u2014 "),xX=n(D8e,"A",{href:!0});var h1t=s(xX);s9r=r(h1t,"TFXLMRobertaForTokenClassification"),h1t.forEach(t),l9r=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),i9r=i(oe),xF=n(oe,"LI",{});var j8e=s(xF);E1e=n(j8e,"STRONG",{});var p1t=s(E1e);d9r=r(p1t,"xlnet"),p1t.forEach(t),c9r=r(j8e," \u2014 "),kX=n(j8e,"A",{href:!0});var _1t=s(kX);f9r=r(_1t,"TFXLNetForTokenClassification"),_1t.forEach(t),m9r=r(j8e," (XLNet model)"),j8e.forEach(t),oe.forEach(t),g9r=i(Ea),y1e=n(Ea,"P",{});var u1t=s(y1e);h9r=r(u1t,"Examples:"),u1t.forEach(t),p9r=i(Ea),m(r0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),yRe=i(c),Oc=n(c,"H2",{class:!0});var NPe=s(Oc);kF=n(NPe,"A",{id:!0,class:!0,href:!0});var b1t=s(kF);w1e=n(b1t,"SPAN",{});var v1t=s(w1e);m(t0.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),_9r=i(NPe),A1e=n(NPe,"SPAN",{});var T1t=s(A1e);u9r=r(T1t,"TFAutoModelForQuestionAnswering"),T1t.forEach(t),NPe.forEach(t),wRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(a0.$$.fragment,ni),b9r=i(ni),Xc=n(ni,"P",{});var iQ=s(Xc);v9r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),L1e=n(iQ,"CODE",{});var F1t=s(L1e);T9r=r(F1t,"from_pretrained()"),F1t.forEach(t),F9r=r(iQ,"class method or the "),B1e=n(iQ,"CODE",{});var C1t=s(B1e);C9r=r(C1t,"from_config()"),C1t.forEach(t),M9r=r(iQ,`class
method.`),iQ.forEach(t),E9r=i(ni),n0=n(ni,"P",{});var DPe=s(n0);y9r=r(DPe,"This class cannot be instantiated directly using "),x1e=n(DPe,"CODE",{});var M1t=s(x1e);w9r=r(M1t,"__init__()"),M1t.forEach(t),A9r=r(DPe," (throws an error)."),DPe.forEach(t),L9r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(s0.$$.fragment,si),B9r=i(si),k1e=n(si,"P",{});var E1t=s(k1e);x9r=r(E1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E1t.forEach(t),k9r=i(si),Vc=n(si,"P",{});var dQ=s(Vc);R9r=r(dQ,`Note:
Loading a model from its configuration file does `),R1e=n(dQ,"STRONG",{});var y1t=s(R1e);S9r=r(y1t,"not"),y1t.forEach(t),P9r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),S1e=n(dQ,"CODE",{});var w1t=s(S1e);$9r=r(w1t,"from_pretrained()"),w1t.forEach(t),I9r=r(dQ,"to load the model weights."),dQ.forEach(t),N9r=i(si),P1e=n(si,"P",{});var A1t=s(P1e);D9r=r(A1t,"Examples:"),A1t.forEach(t),j9r=i(si),m(l0.$$.fragment,si),si.forEach(t),q9r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(i0.$$.fragment,ya),G9r=i(ya),$1e=n(ya,"P",{});var L1t=s($1e);O9r=r(L1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L1t.forEach(t),X9r=i(ya),wn=n(ya,"P",{});var V4=s(wn);V9r=r(V4,"The model class to instantiate is selected based on the "),I1e=n(V4,"CODE",{});var B1t=s(I1e);z9r=r(B1t,"model_type"),B1t.forEach(t),W9r=r(V4,` property of the config object (either
passed as an argument or loaded from `),N1e=n(V4,"CODE",{});var x1t=s(N1e);Q9r=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),H9r=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(V4,"CODE",{});var k1t=s(D1e);U9r=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),J9r=r(V4,":"),V4.forEach(t),Y9r=i(ya),Z=n(ya,"UL",{});var te=s(Z);RF=n(te,"LI",{});var q8e=s(RF);j1e=n(q8e,"STRONG",{});var R1t=s(j1e);K9r=r(R1t,"albert"),R1t.forEach(t),Z9r=r(q8e," \u2014 "),RX=n(q8e,"A",{href:!0});var S1t=s(RX);ebr=r(S1t,"TFAlbertForQuestionAnswering"),S1t.forEach(t),obr=r(q8e," (ALBERT model)"),q8e.forEach(t),rbr=i(te),SF=n(te,"LI",{});var G8e=s(SF);q1e=n(G8e,"STRONG",{});var P1t=s(q1e);tbr=r(P1t,"bert"),P1t.forEach(t),abr=r(G8e," \u2014 "),SX=n(G8e,"A",{href:!0});var $1t=s(SX);nbr=r($1t,"TFBertForQuestionAnswering"),$1t.forEach(t),sbr=r(G8e," (BERT model)"),G8e.forEach(t),lbr=i(te),PF=n(te,"LI",{});var O8e=s(PF);G1e=n(O8e,"STRONG",{});var I1t=s(G1e);ibr=r(I1t,"camembert"),I1t.forEach(t),dbr=r(O8e," \u2014 "),PX=n(O8e,"A",{href:!0});var N1t=s(PX);cbr=r(N1t,"TFCamembertForQuestionAnswering"),N1t.forEach(t),fbr=r(O8e," (CamemBERT model)"),O8e.forEach(t),mbr=i(te),$F=n(te,"LI",{});var X8e=s($F);O1e=n(X8e,"STRONG",{});var D1t=s(O1e);gbr=r(D1t,"convbert"),D1t.forEach(t),hbr=r(X8e," \u2014 "),$X=n(X8e,"A",{href:!0});var j1t=s($X);pbr=r(j1t,"TFConvBertForQuestionAnswering"),j1t.forEach(t),_br=r(X8e," (ConvBERT model)"),X8e.forEach(t),ubr=i(te),IF=n(te,"LI",{});var V8e=s(IF);X1e=n(V8e,"STRONG",{});var q1t=s(X1e);bbr=r(q1t,"deberta"),q1t.forEach(t),vbr=r(V8e," \u2014 "),IX=n(V8e,"A",{href:!0});var G1t=s(IX);Tbr=r(G1t,"TFDebertaForQuestionAnswering"),G1t.forEach(t),Fbr=r(V8e," (DeBERTa model)"),V8e.forEach(t),Cbr=i(te),NF=n(te,"LI",{});var z8e=s(NF);V1e=n(z8e,"STRONG",{});var O1t=s(V1e);Mbr=r(O1t,"deberta-v2"),O1t.forEach(t),Ebr=r(z8e," \u2014 "),NX=n(z8e,"A",{href:!0});var X1t=s(NX);ybr=r(X1t,"TFDebertaV2ForQuestionAnswering"),X1t.forEach(t),wbr=r(z8e," (DeBERTa-v2 model)"),z8e.forEach(t),Abr=i(te),DF=n(te,"LI",{});var W8e=s(DF);z1e=n(W8e,"STRONG",{});var V1t=s(z1e);Lbr=r(V1t,"distilbert"),V1t.forEach(t),Bbr=r(W8e," \u2014 "),DX=n(W8e,"A",{href:!0});var z1t=s(DX);xbr=r(z1t,"TFDistilBertForQuestionAnswering"),z1t.forEach(t),kbr=r(W8e," (DistilBERT model)"),W8e.forEach(t),Rbr=i(te),jF=n(te,"LI",{});var Q8e=s(jF);W1e=n(Q8e,"STRONG",{});var W1t=s(W1e);Sbr=r(W1t,"electra"),W1t.forEach(t),Pbr=r(Q8e," \u2014 "),jX=n(Q8e,"A",{href:!0});var Q1t=s(jX);$br=r(Q1t,"TFElectraForQuestionAnswering"),Q1t.forEach(t),Ibr=r(Q8e," (ELECTRA model)"),Q8e.forEach(t),Nbr=i(te),qF=n(te,"LI",{});var H8e=s(qF);Q1e=n(H8e,"STRONG",{});var H1t=s(Q1e);Dbr=r(H1t,"flaubert"),H1t.forEach(t),jbr=r(H8e," \u2014 "),qX=n(H8e,"A",{href:!0});var U1t=s(qX);qbr=r(U1t,"TFFlaubertForQuestionAnsweringSimple"),U1t.forEach(t),Gbr=r(H8e," (FlauBERT model)"),H8e.forEach(t),Obr=i(te),GF=n(te,"LI",{});var U8e=s(GF);H1e=n(U8e,"STRONG",{});var J1t=s(H1e);Xbr=r(J1t,"funnel"),J1t.forEach(t),Vbr=r(U8e," \u2014 "),GX=n(U8e,"A",{href:!0});var Y1t=s(GX);zbr=r(Y1t,"TFFunnelForQuestionAnswering"),Y1t.forEach(t),Wbr=r(U8e," (Funnel Transformer model)"),U8e.forEach(t),Qbr=i(te),OF=n(te,"LI",{});var J8e=s(OF);U1e=n(J8e,"STRONG",{});var K1t=s(U1e);Hbr=r(K1t,"longformer"),K1t.forEach(t),Ubr=r(J8e," \u2014 "),OX=n(J8e,"A",{href:!0});var Z1t=s(OX);Jbr=r(Z1t,"TFLongformerForQuestionAnswering"),Z1t.forEach(t),Ybr=r(J8e," (Longformer model)"),J8e.forEach(t),Kbr=i(te),XF=n(te,"LI",{});var Y8e=s(XF);J1e=n(Y8e,"STRONG",{});var e9t=s(J1e);Zbr=r(e9t,"mobilebert"),e9t.forEach(t),e3r=r(Y8e," \u2014 "),XX=n(Y8e,"A",{href:!0});var o9t=s(XX);o3r=r(o9t,"TFMobileBertForQuestionAnswering"),o9t.forEach(t),r3r=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),t3r=i(te),VF=n(te,"LI",{});var K8e=s(VF);Y1e=n(K8e,"STRONG",{});var r9t=s(Y1e);a3r=r(r9t,"mpnet"),r9t.forEach(t),n3r=r(K8e," \u2014 "),VX=n(K8e,"A",{href:!0});var t9t=s(VX);s3r=r(t9t,"TFMPNetForQuestionAnswering"),t9t.forEach(t),l3r=r(K8e," (MPNet model)"),K8e.forEach(t),i3r=i(te),zF=n(te,"LI",{});var Z8e=s(zF);K1e=n(Z8e,"STRONG",{});var a9t=s(K1e);d3r=r(a9t,"rembert"),a9t.forEach(t),c3r=r(Z8e," \u2014 "),zX=n(Z8e,"A",{href:!0});var n9t=s(zX);f3r=r(n9t,"TFRemBertForQuestionAnswering"),n9t.forEach(t),m3r=r(Z8e," (RemBERT model)"),Z8e.forEach(t),g3r=i(te),WF=n(te,"LI",{});var eBe=s(WF);Z1e=n(eBe,"STRONG",{});var s9t=s(Z1e);h3r=r(s9t,"roberta"),s9t.forEach(t),p3r=r(eBe," \u2014 "),WX=n(eBe,"A",{href:!0});var l9t=s(WX);_3r=r(l9t,"TFRobertaForQuestionAnswering"),l9t.forEach(t),u3r=r(eBe," (RoBERTa model)"),eBe.forEach(t),b3r=i(te),QF=n(te,"LI",{});var oBe=s(QF);e9e=n(oBe,"STRONG",{});var i9t=s(e9e);v3r=r(i9t,"roformer"),i9t.forEach(t),T3r=r(oBe," \u2014 "),QX=n(oBe,"A",{href:!0});var d9t=s(QX);F3r=r(d9t,"TFRoFormerForQuestionAnswering"),d9t.forEach(t),C3r=r(oBe," (RoFormer model)"),oBe.forEach(t),M3r=i(te),HF=n(te,"LI",{});var rBe=s(HF);o9e=n(rBe,"STRONG",{});var c9t=s(o9e);E3r=r(c9t,"xlm"),c9t.forEach(t),y3r=r(rBe," \u2014 "),HX=n(rBe,"A",{href:!0});var f9t=s(HX);w3r=r(f9t,"TFXLMForQuestionAnsweringSimple"),f9t.forEach(t),A3r=r(rBe," (XLM model)"),rBe.forEach(t),L3r=i(te),UF=n(te,"LI",{});var tBe=s(UF);r9e=n(tBe,"STRONG",{});var m9t=s(r9e);B3r=r(m9t,"xlm-roberta"),m9t.forEach(t),x3r=r(tBe," \u2014 "),UX=n(tBe,"A",{href:!0});var g9t=s(UX);k3r=r(g9t,"TFXLMRobertaForQuestionAnswering"),g9t.forEach(t),R3r=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),S3r=i(te),JF=n(te,"LI",{});var aBe=s(JF);t9e=n(aBe,"STRONG",{});var h9t=s(t9e);P3r=r(h9t,"xlnet"),h9t.forEach(t),$3r=r(aBe," \u2014 "),JX=n(aBe,"A",{href:!0});var p9t=s(JX);I3r=r(p9t,"TFXLNetForQuestionAnsweringSimple"),p9t.forEach(t),N3r=r(aBe," (XLNet model)"),aBe.forEach(t),te.forEach(t),D3r=i(ya),a9e=n(ya,"P",{});var _9t=s(a9e);j3r=r(_9t,"Examples:"),_9t.forEach(t),q3r=i(ya),m(d0.$$.fragment,ya),ya.forEach(t),ni.forEach(t),ARe=i(c),zc=n(c,"H2",{class:!0});var jPe=s(zc);YF=n(jPe,"A",{id:!0,class:!0,href:!0});var u9t=s(YF);n9e=n(u9t,"SPAN",{});var b9t=s(n9e);m(c0.$$.fragment,b9t),b9t.forEach(t),u9t.forEach(t),G3r=i(jPe),s9e=n(jPe,"SPAN",{});var v9t=s(s9e);O3r=r(v9t,"TFAutoModelForVision2Seq"),v9t.forEach(t),jPe.forEach(t),LRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(f0.$$.fragment,li),X3r=i(li),Wc=n(li,"P",{});var cQ=s(Wc);V3r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l9e=n(cQ,"CODE",{});var T9t=s(l9e);z3r=r(T9t,"from_pretrained()"),T9t.forEach(t),W3r=r(cQ,"class method or the "),i9e=n(cQ,"CODE",{});var F9t=s(i9e);Q3r=r(F9t,"from_config()"),F9t.forEach(t),H3r=r(cQ,`class
method.`),cQ.forEach(t),U3r=i(li),m0=n(li,"P",{});var qPe=s(m0);J3r=r(qPe,"This class cannot be instantiated directly using "),d9e=n(qPe,"CODE",{});var C9t=s(d9e);Y3r=r(C9t,"__init__()"),C9t.forEach(t),K3r=r(qPe," (throws an error)."),qPe.forEach(t),Z3r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(g0.$$.fragment,ii),e2r=i(ii),c9e=n(ii,"P",{});var M9t=s(c9e);o2r=r(M9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M9t.forEach(t),r2r=i(ii),Qc=n(ii,"P",{});var fQ=s(Qc);t2r=r(fQ,`Note:
Loading a model from its configuration file does `),f9e=n(fQ,"STRONG",{});var E9t=s(f9e);a2r=r(E9t,"not"),E9t.forEach(t),n2r=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),m9e=n(fQ,"CODE",{});var y9t=s(m9e);s2r=r(y9t,"from_pretrained()"),y9t.forEach(t),l2r=r(fQ,"to load the model weights."),fQ.forEach(t),i2r=i(ii),g9e=n(ii,"P",{});var w9t=s(g9e);d2r=r(w9t,"Examples:"),w9t.forEach(t),c2r=i(ii),m(h0.$$.fragment,ii),ii.forEach(t),f2r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(p0.$$.fragment,wa),m2r=i(wa),h9e=n(wa,"P",{});var A9t=s(h9e);g2r=r(A9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A9t.forEach(t),h2r=i(wa),An=n(wa,"P",{});var z4=s(An);p2r=r(z4,"The model class to instantiate is selected based on the "),p9e=n(z4,"CODE",{});var L9t=s(p9e);_2r=r(L9t,"model_type"),L9t.forEach(t),u2r=r(z4,` property of the config object (either
passed as an argument or loaded from `),_9e=n(z4,"CODE",{});var B9t=s(_9e);b2r=r(B9t,"pretrained_model_name_or_path"),B9t.forEach(t),v2r=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u9e=n(z4,"CODE",{});var x9t=s(u9e);T2r=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),F2r=r(z4,":"),z4.forEach(t),C2r=i(wa),b9e=n(wa,"UL",{});var k9t=s(b9e);KF=n(k9t,"LI",{});var nBe=s(KF);v9e=n(nBe,"STRONG",{});var R9t=s(v9e);M2r=r(R9t,"vision-encoder-decoder"),R9t.forEach(t),E2r=r(nBe," \u2014 "),YX=n(nBe,"A",{href:!0});var S9t=s(YX);y2r=r(S9t,"TFVisionEncoderDecoderModel"),S9t.forEach(t),w2r=r(nBe," (Vision Encoder decoder model)"),nBe.forEach(t),k9t.forEach(t),A2r=i(wa),T9e=n(wa,"P",{});var P9t=s(T9e);L2r=r(P9t,"Examples:"),P9t.forEach(t),B2r=i(wa),m(_0.$$.fragment,wa),wa.forEach(t),li.forEach(t),BRe=i(c),Hc=n(c,"H2",{class:!0});var GPe=s(Hc);ZF=n(GPe,"A",{id:!0,class:!0,href:!0});var $9t=s(ZF);F9e=n($9t,"SPAN",{});var I9t=s(F9e);m(u0.$$.fragment,I9t),I9t.forEach(t),$9t.forEach(t),x2r=i(GPe),C9e=n(GPe,"SPAN",{});var N9t=s(C9e);k2r=r(N9t,"TFAutoModelForSpeechSeq2Seq"),N9t.forEach(t),GPe.forEach(t),xRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(b0.$$.fragment,di),R2r=i(di),Uc=n(di,"P",{});var mQ=s(Uc);S2r=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M9e=n(mQ,"CODE",{});var D9t=s(M9e);P2r=r(D9t,"from_pretrained()"),D9t.forEach(t),$2r=r(mQ,"class method or the "),E9e=n(mQ,"CODE",{});var j9t=s(E9e);I2r=r(j9t,"from_config()"),j9t.forEach(t),N2r=r(mQ,`class
method.`),mQ.forEach(t),D2r=i(di),v0=n(di,"P",{});var OPe=s(v0);j2r=r(OPe,"This class cannot be instantiated directly using "),y9e=n(OPe,"CODE",{});var q9t=s(y9e);q2r=r(q9t,"__init__()"),q9t.forEach(t),G2r=r(OPe," (throws an error)."),OPe.forEach(t),O2r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(T0.$$.fragment,ci),X2r=i(ci),w9e=n(ci,"P",{});var G9t=s(w9e);V2r=r(G9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),G9t.forEach(t),z2r=i(ci),Jc=n(ci,"P",{});var gQ=s(Jc);W2r=r(gQ,`Note:
Loading a model from its configuration file does `),A9e=n(gQ,"STRONG",{});var O9t=s(A9e);Q2r=r(O9t,"not"),O9t.forEach(t),H2r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),L9e=n(gQ,"CODE",{});var X9t=s(L9e);U2r=r(X9t,"from_pretrained()"),X9t.forEach(t),J2r=r(gQ,"to load the model weights."),gQ.forEach(t),Y2r=i(ci),B9e=n(ci,"P",{});var V9t=s(B9e);K2r=r(V9t,"Examples:"),V9t.forEach(t),Z2r=i(ci),m(F0.$$.fragment,ci),ci.forEach(t),evr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(C0.$$.fragment,Aa),ovr=i(Aa),x9e=n(Aa,"P",{});var z9t=s(x9e);rvr=r(z9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z9t.forEach(t),tvr=i(Aa),Ln=n(Aa,"P",{});var W4=s(Ln);avr=r(W4,"The model class to instantiate is selected based on the "),k9e=n(W4,"CODE",{});var W9t=s(k9e);nvr=r(W9t,"model_type"),W9t.forEach(t),svr=r(W4,` property of the config object (either
passed as an argument or loaded from `),R9e=n(W4,"CODE",{});var Q9t=s(R9e);lvr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),ivr=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S9e=n(W4,"CODE",{});var H9t=s(S9e);dvr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),cvr=r(W4,":"),W4.forEach(t),fvr=i(Aa),P9e=n(Aa,"UL",{});var U9t=s(P9e);eC=n(U9t,"LI",{});var sBe=s(eC);$9e=n(sBe,"STRONG",{});var J9t=s($9e);mvr=r(J9t,"speech_to_text"),J9t.forEach(t),gvr=r(sBe," \u2014 "),KX=n(sBe,"A",{href:!0});var Y9t=s(KX);hvr=r(Y9t,"TFSpeech2TextForConditionalGeneration"),Y9t.forEach(t),pvr=r(sBe," (Speech2Text model)"),sBe.forEach(t),U9t.forEach(t),_vr=i(Aa),I9e=n(Aa,"P",{});var K9t=s(I9e);uvr=r(K9t,"Examples:"),K9t.forEach(t),bvr=i(Aa),m(M0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),kRe=i(c),Yc=n(c,"H2",{class:!0});var XPe=s(Yc);oC=n(XPe,"A",{id:!0,class:!0,href:!0});var Z9t=s(oC);N9e=n(Z9t,"SPAN",{});var ebt=s(N9e);m(E0.$$.fragment,ebt),ebt.forEach(t),Z9t.forEach(t),vvr=i(XPe),D9e=n(XPe,"SPAN",{});var obt=s(D9e);Tvr=r(obt,"FlaxAutoModel"),obt.forEach(t),XPe.forEach(t),RRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(y0.$$.fragment,fi),Fvr=i(fi),Kc=n(fi,"P",{});var hQ=s(Kc);Cvr=r(hQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),j9e=n(hQ,"CODE",{});var rbt=s(j9e);Mvr=r(rbt,"from_pretrained()"),rbt.forEach(t),Evr=r(hQ,"class method or the "),q9e=n(hQ,"CODE",{});var tbt=s(q9e);yvr=r(tbt,"from_config()"),tbt.forEach(t),wvr=r(hQ,`class
method.`),hQ.forEach(t),Avr=i(fi),w0=n(fi,"P",{});var VPe=s(w0);Lvr=r(VPe,"This class cannot be instantiated directly using "),G9e=n(VPe,"CODE",{});var abt=s(G9e);Bvr=r(abt,"__init__()"),abt.forEach(t),xvr=r(VPe," (throws an error)."),VPe.forEach(t),kvr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(A0.$$.fragment,mi),Rvr=i(mi),O9e=n(mi,"P",{});var nbt=s(O9e);Svr=r(nbt,"Instantiates one of the base model classes of the library from a configuration."),nbt.forEach(t),Pvr=i(mi),Zc=n(mi,"P",{});var pQ=s(Zc);$vr=r(pQ,`Note:
Loading a model from its configuration file does `),X9e=n(pQ,"STRONG",{});var sbt=s(X9e);Ivr=r(sbt,"not"),sbt.forEach(t),Nvr=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V9e=n(pQ,"CODE",{});var lbt=s(V9e);Dvr=r(lbt,"from_pretrained()"),lbt.forEach(t),jvr=r(pQ,"to load the model weights."),pQ.forEach(t),qvr=i(mi),z9e=n(mi,"P",{});var ibt=s(z9e);Gvr=r(ibt,"Examples:"),ibt.forEach(t),Ovr=i(mi),m(L0.$$.fragment,mi),mi.forEach(t),Xvr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(B0.$$.fragment,La),Vvr=i(La),W9e=n(La,"P",{});var dbt=s(W9e);zvr=r(dbt,"Instantiate one of the base model classes of the library from a pretrained model."),dbt.forEach(t),Wvr=i(La),Bn=n(La,"P",{});var Q4=s(Bn);Qvr=r(Q4,"The model class to instantiate is selected based on the "),Q9e=n(Q4,"CODE",{});var cbt=s(Q9e);Hvr=r(cbt,"model_type"),cbt.forEach(t),Uvr=r(Q4,` property of the config object (either
passed as an argument or loaded from `),H9e=n(Q4,"CODE",{});var fbt=s(H9e);Jvr=r(fbt,"pretrained_model_name_or_path"),fbt.forEach(t),Yvr=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=n(Q4,"CODE",{});var mbt=s(U9e);Kvr=r(mbt,"pretrained_model_name_or_path"),mbt.forEach(t),Zvr=r(Q4,":"),Q4.forEach(t),e6r=i(La),z=n(La,"UL",{});var Q=s(z);rC=n(Q,"LI",{});var lBe=s(rC);J9e=n(lBe,"STRONG",{});var gbt=s(J9e);o6r=r(gbt,"albert"),gbt.forEach(t),r6r=r(lBe," \u2014 "),ZX=n(lBe,"A",{href:!0});var hbt=s(ZX);t6r=r(hbt,"FlaxAlbertModel"),hbt.forEach(t),a6r=r(lBe," (ALBERT model)"),lBe.forEach(t),n6r=i(Q),tC=n(Q,"LI",{});var iBe=s(tC);Y9e=n(iBe,"STRONG",{});var pbt=s(Y9e);s6r=r(pbt,"bart"),pbt.forEach(t),l6r=r(iBe," \u2014 "),eV=n(iBe,"A",{href:!0});var _bt=s(eV);i6r=r(_bt,"FlaxBartModel"),_bt.forEach(t),d6r=r(iBe," (BART model)"),iBe.forEach(t),c6r=i(Q),aC=n(Q,"LI",{});var dBe=s(aC);K9e=n(dBe,"STRONG",{});var ubt=s(K9e);f6r=r(ubt,"beit"),ubt.forEach(t),m6r=r(dBe," \u2014 "),oV=n(dBe,"A",{href:!0});var bbt=s(oV);g6r=r(bbt,"FlaxBeitModel"),bbt.forEach(t),h6r=r(dBe," (BEiT model)"),dBe.forEach(t),p6r=i(Q),nC=n(Q,"LI",{});var cBe=s(nC);Z9e=n(cBe,"STRONG",{});var vbt=s(Z9e);_6r=r(vbt,"bert"),vbt.forEach(t),u6r=r(cBe," \u2014 "),rV=n(cBe,"A",{href:!0});var Tbt=s(rV);b6r=r(Tbt,"FlaxBertModel"),Tbt.forEach(t),v6r=r(cBe," (BERT model)"),cBe.forEach(t),T6r=i(Q),sC=n(Q,"LI",{});var fBe=s(sC);ebe=n(fBe,"STRONG",{});var Fbt=s(ebe);F6r=r(Fbt,"big_bird"),Fbt.forEach(t),C6r=r(fBe," \u2014 "),tV=n(fBe,"A",{href:!0});var Cbt=s(tV);M6r=r(Cbt,"FlaxBigBirdModel"),Cbt.forEach(t),E6r=r(fBe," (BigBird model)"),fBe.forEach(t),y6r=i(Q),lC=n(Q,"LI",{});var mBe=s(lC);obe=n(mBe,"STRONG",{});var Mbt=s(obe);w6r=r(Mbt,"blenderbot"),Mbt.forEach(t),A6r=r(mBe," \u2014 "),aV=n(mBe,"A",{href:!0});var Ebt=s(aV);L6r=r(Ebt,"FlaxBlenderbotModel"),Ebt.forEach(t),B6r=r(mBe," (Blenderbot model)"),mBe.forEach(t),x6r=i(Q),iC=n(Q,"LI",{});var gBe=s(iC);rbe=n(gBe,"STRONG",{});var ybt=s(rbe);k6r=r(ybt,"blenderbot-small"),ybt.forEach(t),R6r=r(gBe," \u2014 "),nV=n(gBe,"A",{href:!0});var wbt=s(nV);S6r=r(wbt,"FlaxBlenderbotSmallModel"),wbt.forEach(t),P6r=r(gBe," (BlenderbotSmall model)"),gBe.forEach(t),$6r=i(Q),dC=n(Q,"LI",{});var hBe=s(dC);tbe=n(hBe,"STRONG",{});var Abt=s(tbe);I6r=r(Abt,"clip"),Abt.forEach(t),N6r=r(hBe," \u2014 "),sV=n(hBe,"A",{href:!0});var Lbt=s(sV);D6r=r(Lbt,"FlaxCLIPModel"),Lbt.forEach(t),j6r=r(hBe," (CLIP model)"),hBe.forEach(t),q6r=i(Q),cC=n(Q,"LI",{});var pBe=s(cC);abe=n(pBe,"STRONG",{});var Bbt=s(abe);G6r=r(Bbt,"distilbert"),Bbt.forEach(t),O6r=r(pBe," \u2014 "),lV=n(pBe,"A",{href:!0});var xbt=s(lV);X6r=r(xbt,"FlaxDistilBertModel"),xbt.forEach(t),V6r=r(pBe," (DistilBERT model)"),pBe.forEach(t),z6r=i(Q),fC=n(Q,"LI",{});var _Be=s(fC);nbe=n(_Be,"STRONG",{});var kbt=s(nbe);W6r=r(kbt,"electra"),kbt.forEach(t),Q6r=r(_Be," \u2014 "),iV=n(_Be,"A",{href:!0});var Rbt=s(iV);H6r=r(Rbt,"FlaxElectraModel"),Rbt.forEach(t),U6r=r(_Be," (ELECTRA model)"),_Be.forEach(t),J6r=i(Q),mC=n(Q,"LI",{});var uBe=s(mC);sbe=n(uBe,"STRONG",{});var Sbt=s(sbe);Y6r=r(Sbt,"gpt2"),Sbt.forEach(t),K6r=r(uBe," \u2014 "),dV=n(uBe,"A",{href:!0});var Pbt=s(dV);Z6r=r(Pbt,"FlaxGPT2Model"),Pbt.forEach(t),eTr=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),oTr=i(Q),gC=n(Q,"LI",{});var bBe=s(gC);lbe=n(bBe,"STRONG",{});var $bt=s(lbe);rTr=r($bt,"gpt_neo"),$bt.forEach(t),tTr=r(bBe," \u2014 "),cV=n(bBe,"A",{href:!0});var Ibt=s(cV);aTr=r(Ibt,"FlaxGPTNeoModel"),Ibt.forEach(t),nTr=r(bBe," (GPT Neo model)"),bBe.forEach(t),sTr=i(Q),hC=n(Q,"LI",{});var vBe=s(hC);ibe=n(vBe,"STRONG",{});var Nbt=s(ibe);lTr=r(Nbt,"gptj"),Nbt.forEach(t),iTr=r(vBe," \u2014 "),fV=n(vBe,"A",{href:!0});var Dbt=s(fV);dTr=r(Dbt,"FlaxGPTJModel"),Dbt.forEach(t),cTr=r(vBe," (GPT-J model)"),vBe.forEach(t),fTr=i(Q),pC=n(Q,"LI",{});var TBe=s(pC);dbe=n(TBe,"STRONG",{});var jbt=s(dbe);mTr=r(jbt,"marian"),jbt.forEach(t),gTr=r(TBe," \u2014 "),mV=n(TBe,"A",{href:!0});var qbt=s(mV);hTr=r(qbt,"FlaxMarianModel"),qbt.forEach(t),pTr=r(TBe," (Marian model)"),TBe.forEach(t),_Tr=i(Q),_C=n(Q,"LI",{});var FBe=s(_C);cbe=n(FBe,"STRONG",{});var Gbt=s(cbe);uTr=r(Gbt,"mbart"),Gbt.forEach(t),bTr=r(FBe," \u2014 "),gV=n(FBe,"A",{href:!0});var Obt=s(gV);vTr=r(Obt,"FlaxMBartModel"),Obt.forEach(t),TTr=r(FBe," (mBART model)"),FBe.forEach(t),FTr=i(Q),uC=n(Q,"LI",{});var CBe=s(uC);fbe=n(CBe,"STRONG",{});var Xbt=s(fbe);CTr=r(Xbt,"mt5"),Xbt.forEach(t),MTr=r(CBe," \u2014 "),hV=n(CBe,"A",{href:!0});var Vbt=s(hV);ETr=r(Vbt,"FlaxMT5Model"),Vbt.forEach(t),yTr=r(CBe," (mT5 model)"),CBe.forEach(t),wTr=i(Q),bC=n(Q,"LI",{});var MBe=s(bC);mbe=n(MBe,"STRONG",{});var zbt=s(mbe);ATr=r(zbt,"pegasus"),zbt.forEach(t),LTr=r(MBe," \u2014 "),pV=n(MBe,"A",{href:!0});var Wbt=s(pV);BTr=r(Wbt,"FlaxPegasusModel"),Wbt.forEach(t),xTr=r(MBe," (Pegasus model)"),MBe.forEach(t),kTr=i(Q),vC=n(Q,"LI",{});var EBe=s(vC);gbe=n(EBe,"STRONG",{});var Qbt=s(gbe);RTr=r(Qbt,"roberta"),Qbt.forEach(t),STr=r(EBe," \u2014 "),_V=n(EBe,"A",{href:!0});var Hbt=s(_V);PTr=r(Hbt,"FlaxRobertaModel"),Hbt.forEach(t),$Tr=r(EBe," (RoBERTa model)"),EBe.forEach(t),ITr=i(Q),TC=n(Q,"LI",{});var yBe=s(TC);hbe=n(yBe,"STRONG",{});var Ubt=s(hbe);NTr=r(Ubt,"roformer"),Ubt.forEach(t),DTr=r(yBe," \u2014 "),uV=n(yBe,"A",{href:!0});var Jbt=s(uV);jTr=r(Jbt,"FlaxRoFormerModel"),Jbt.forEach(t),qTr=r(yBe," (RoFormer model)"),yBe.forEach(t),GTr=i(Q),FC=n(Q,"LI",{});var wBe=s(FC);pbe=n(wBe,"STRONG",{});var Ybt=s(pbe);OTr=r(Ybt,"t5"),Ybt.forEach(t),XTr=r(wBe," \u2014 "),bV=n(wBe,"A",{href:!0});var Kbt=s(bV);VTr=r(Kbt,"FlaxT5Model"),Kbt.forEach(t),zTr=r(wBe," (T5 model)"),wBe.forEach(t),WTr=i(Q),CC=n(Q,"LI",{});var ABe=s(CC);_be=n(ABe,"STRONG",{});var Zbt=s(_be);QTr=r(Zbt,"vision-text-dual-encoder"),Zbt.forEach(t),HTr=r(ABe," \u2014 "),vV=n(ABe,"A",{href:!0});var e3t=s(vV);UTr=r(e3t,"FlaxVisionTextDualEncoderModel"),e3t.forEach(t),JTr=r(ABe," (VisionTextDualEncoder model)"),ABe.forEach(t),YTr=i(Q),MC=n(Q,"LI",{});var LBe=s(MC);ube=n(LBe,"STRONG",{});var o3t=s(ube);KTr=r(o3t,"vit"),o3t.forEach(t),ZTr=r(LBe," \u2014 "),TV=n(LBe,"A",{href:!0});var r3t=s(TV);eFr=r(r3t,"FlaxViTModel"),r3t.forEach(t),oFr=r(LBe," (ViT model)"),LBe.forEach(t),rFr=i(Q),EC=n(Q,"LI",{});var BBe=s(EC);bbe=n(BBe,"STRONG",{});var t3t=s(bbe);tFr=r(t3t,"wav2vec2"),t3t.forEach(t),aFr=r(BBe," \u2014 "),FV=n(BBe,"A",{href:!0});var a3t=s(FV);nFr=r(a3t,"FlaxWav2Vec2Model"),a3t.forEach(t),sFr=r(BBe," (Wav2Vec2 model)"),BBe.forEach(t),lFr=i(Q),yC=n(Q,"LI",{});var xBe=s(yC);vbe=n(xBe,"STRONG",{});var n3t=s(vbe);iFr=r(n3t,"xglm"),n3t.forEach(t),dFr=r(xBe," \u2014 "),CV=n(xBe,"A",{href:!0});var s3t=s(CV);cFr=r(s3t,"FlaxXGLMModel"),s3t.forEach(t),fFr=r(xBe," (XGLM model)"),xBe.forEach(t),mFr=i(Q),wC=n(Q,"LI",{});var kBe=s(wC);Tbe=n(kBe,"STRONG",{});var l3t=s(Tbe);gFr=r(l3t,"xlm-roberta"),l3t.forEach(t),hFr=r(kBe," \u2014 "),MV=n(kBe,"A",{href:!0});var i3t=s(MV);pFr=r(i3t,"FlaxXLMRobertaModel"),i3t.forEach(t),_Fr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Q.forEach(t),uFr=i(La),Fbe=n(La,"P",{});var d3t=s(Fbe);bFr=r(d3t,"Examples:"),d3t.forEach(t),vFr=i(La),m(x0.$$.fragment,La),La.forEach(t),fi.forEach(t),SRe=i(c),ef=n(c,"H2",{class:!0});var zPe=s(ef);AC=n(zPe,"A",{id:!0,class:!0,href:!0});var c3t=s(AC);Cbe=n(c3t,"SPAN",{});var f3t=s(Cbe);m(k0.$$.fragment,f3t),f3t.forEach(t),c3t.forEach(t),TFr=i(zPe),Mbe=n(zPe,"SPAN",{});var m3t=s(Mbe);FFr=r(m3t,"FlaxAutoModelForCausalLM"),m3t.forEach(t),zPe.forEach(t),PRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(R0.$$.fragment,gi),CFr=i(gi),of=n(gi,"P",{});var _Q=s(of);MFr=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ebe=n(_Q,"CODE",{});var g3t=s(Ebe);EFr=r(g3t,"from_pretrained()"),g3t.forEach(t),yFr=r(_Q,"class method or the "),ybe=n(_Q,"CODE",{});var h3t=s(ybe);wFr=r(h3t,"from_config()"),h3t.forEach(t),AFr=r(_Q,`class
method.`),_Q.forEach(t),LFr=i(gi),S0=n(gi,"P",{});var WPe=s(S0);BFr=r(WPe,"This class cannot be instantiated directly using "),wbe=n(WPe,"CODE",{});var p3t=s(wbe);xFr=r(p3t,"__init__()"),p3t.forEach(t),kFr=r(WPe," (throws an error)."),WPe.forEach(t),RFr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(P0.$$.fragment,hi),SFr=i(hi),Abe=n(hi,"P",{});var _3t=s(Abe);PFr=r(_3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_3t.forEach(t),$Fr=i(hi),rf=n(hi,"P",{});var uQ=s(rf);IFr=r(uQ,`Note:
Loading a model from its configuration file does `),Lbe=n(uQ,"STRONG",{});var u3t=s(Lbe);NFr=r(u3t,"not"),u3t.forEach(t),DFr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=n(uQ,"CODE",{});var b3t=s(Bbe);jFr=r(b3t,"from_pretrained()"),b3t.forEach(t),qFr=r(uQ,"to load the model weights."),uQ.forEach(t),GFr=i(hi),xbe=n(hi,"P",{});var v3t=s(xbe);OFr=r(v3t,"Examples:"),v3t.forEach(t),XFr=i(hi),m($0.$$.fragment,hi),hi.forEach(t),VFr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(I0.$$.fragment,Ba),zFr=i(Ba),kbe=n(Ba,"P",{});var T3t=s(kbe);WFr=r(T3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T3t.forEach(t),QFr=i(Ba),xn=n(Ba,"P",{});var H4=s(xn);HFr=r(H4,"The model class to instantiate is selected based on the "),Rbe=n(H4,"CODE",{});var F3t=s(Rbe);UFr=r(F3t,"model_type"),F3t.forEach(t),JFr=r(H4,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(H4,"CODE",{});var C3t=s(Sbe);YFr=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),KFr=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(H4,"CODE",{});var M3t=s(Pbe);ZFr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),eCr=r(H4,":"),H4.forEach(t),oCr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);LC=n(pi,"LI",{});var RBe=s(LC);$be=n(RBe,"STRONG",{});var E3t=s($be);rCr=r(E3t,"bart"),E3t.forEach(t),tCr=r(RBe," \u2014 "),EV=n(RBe,"A",{href:!0});var y3t=s(EV);aCr=r(y3t,"FlaxBartForCausalLM"),y3t.forEach(t),nCr=r(RBe," (BART model)"),RBe.forEach(t),sCr=i(pi),BC=n(pi,"LI",{});var SBe=s(BC);Ibe=n(SBe,"STRONG",{});var w3t=s(Ibe);lCr=r(w3t,"gpt2"),w3t.forEach(t),iCr=r(SBe," \u2014 "),yV=n(SBe,"A",{href:!0});var A3t=s(yV);dCr=r(A3t,"FlaxGPT2LMHeadModel"),A3t.forEach(t),cCr=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),fCr=i(pi),xC=n(pi,"LI",{});var PBe=s(xC);Nbe=n(PBe,"STRONG",{});var L3t=s(Nbe);mCr=r(L3t,"gpt_neo"),L3t.forEach(t),gCr=r(PBe," \u2014 "),wV=n(PBe,"A",{href:!0});var B3t=s(wV);hCr=r(B3t,"FlaxGPTNeoForCausalLM"),B3t.forEach(t),pCr=r(PBe," (GPT Neo model)"),PBe.forEach(t),_Cr=i(pi),kC=n(pi,"LI",{});var $Be=s(kC);Dbe=n($Be,"STRONG",{});var x3t=s(Dbe);uCr=r(x3t,"gptj"),x3t.forEach(t),bCr=r($Be," \u2014 "),AV=n($Be,"A",{href:!0});var k3t=s(AV);vCr=r(k3t,"FlaxGPTJForCausalLM"),k3t.forEach(t),TCr=r($Be," (GPT-J model)"),$Be.forEach(t),FCr=i(pi),RC=n(pi,"LI",{});var IBe=s(RC);jbe=n(IBe,"STRONG",{});var R3t=s(jbe);CCr=r(R3t,"xglm"),R3t.forEach(t),MCr=r(IBe," \u2014 "),LV=n(IBe,"A",{href:!0});var S3t=s(LV);ECr=r(S3t,"FlaxXGLMForCausalLM"),S3t.forEach(t),yCr=r(IBe," (XGLM model)"),IBe.forEach(t),pi.forEach(t),wCr=i(Ba),qbe=n(Ba,"P",{});var P3t=s(qbe);ACr=r(P3t,"Examples:"),P3t.forEach(t),LCr=i(Ba),m(N0.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),$Re=i(c),tf=n(c,"H2",{class:!0});var QPe=s(tf);SC=n(QPe,"A",{id:!0,class:!0,href:!0});var $3t=s(SC);Gbe=n($3t,"SPAN",{});var I3t=s(Gbe);m(D0.$$.fragment,I3t),I3t.forEach(t),$3t.forEach(t),BCr=i(QPe),Obe=n(QPe,"SPAN",{});var N3t=s(Obe);xCr=r(N3t,"FlaxAutoModelForPreTraining"),N3t.forEach(t),QPe.forEach(t),IRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(j0.$$.fragment,_i),kCr=i(_i),af=n(_i,"P",{});var bQ=s(af);RCr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xbe=n(bQ,"CODE",{});var D3t=s(Xbe);SCr=r(D3t,"from_pretrained()"),D3t.forEach(t),PCr=r(bQ,"class method or the "),Vbe=n(bQ,"CODE",{});var j3t=s(Vbe);$Cr=r(j3t,"from_config()"),j3t.forEach(t),ICr=r(bQ,`class
method.`),bQ.forEach(t),NCr=i(_i),q0=n(_i,"P",{});var HPe=s(q0);DCr=r(HPe,"This class cannot be instantiated directly using "),zbe=n(HPe,"CODE",{});var q3t=s(zbe);jCr=r(q3t,"__init__()"),q3t.forEach(t),qCr=r(HPe," (throws an error)."),HPe.forEach(t),GCr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(G0.$$.fragment,ui),OCr=i(ui),Wbe=n(ui,"P",{});var G3t=s(Wbe);XCr=r(G3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),G3t.forEach(t),VCr=i(ui),nf=n(ui,"P",{});var vQ=s(nf);zCr=r(vQ,`Note:
Loading a model from its configuration file does `),Qbe=n(vQ,"STRONG",{});var O3t=s(Qbe);WCr=r(O3t,"not"),O3t.forEach(t),QCr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=n(vQ,"CODE",{});var X3t=s(Hbe);HCr=r(X3t,"from_pretrained()"),X3t.forEach(t),UCr=r(vQ,"to load the model weights."),vQ.forEach(t),JCr=i(ui),Ube=n(ui,"P",{});var V3t=s(Ube);YCr=r(V3t,"Examples:"),V3t.forEach(t),KCr=i(ui),m(O0.$$.fragment,ui),ui.forEach(t),ZCr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(X0.$$.fragment,xa),eMr=i(xa),Jbe=n(xa,"P",{});var z3t=s(Jbe);oMr=r(z3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z3t.forEach(t),rMr=i(xa),kn=n(xa,"P",{});var U4=s(kn);tMr=r(U4,"The model class to instantiate is selected based on the "),Ybe=n(U4,"CODE",{});var W3t=s(Ybe);aMr=r(W3t,"model_type"),W3t.forEach(t),nMr=r(U4,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(U4,"CODE",{});var Q3t=s(Kbe);sMr=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),lMr=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(U4,"CODE",{});var H3t=s(Zbe);iMr=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),dMr=r(U4,":"),U4.forEach(t),cMr=i(xa),ce=n(xa,"UL",{});var he=s(ce);PC=n(he,"LI",{});var NBe=s(PC);e3e=n(NBe,"STRONG",{});var U3t=s(e3e);fMr=r(U3t,"albert"),U3t.forEach(t),mMr=r(NBe," \u2014 "),BV=n(NBe,"A",{href:!0});var J3t=s(BV);gMr=r(J3t,"FlaxAlbertForPreTraining"),J3t.forEach(t),hMr=r(NBe," (ALBERT model)"),NBe.forEach(t),pMr=i(he),$C=n(he,"LI",{});var DBe=s($C);o3e=n(DBe,"STRONG",{});var Y3t=s(o3e);_Mr=r(Y3t,"bart"),Y3t.forEach(t),uMr=r(DBe," \u2014 "),xV=n(DBe,"A",{href:!0});var K3t=s(xV);bMr=r(K3t,"FlaxBartForConditionalGeneration"),K3t.forEach(t),vMr=r(DBe," (BART model)"),DBe.forEach(t),TMr=i(he),IC=n(he,"LI",{});var jBe=s(IC);r3e=n(jBe,"STRONG",{});var Z3t=s(r3e);FMr=r(Z3t,"bert"),Z3t.forEach(t),CMr=r(jBe," \u2014 "),kV=n(jBe,"A",{href:!0});var e2t=s(kV);MMr=r(e2t,"FlaxBertForPreTraining"),e2t.forEach(t),EMr=r(jBe," (BERT model)"),jBe.forEach(t),yMr=i(he),NC=n(he,"LI",{});var qBe=s(NC);t3e=n(qBe,"STRONG",{});var o2t=s(t3e);wMr=r(o2t,"big_bird"),o2t.forEach(t),AMr=r(qBe," \u2014 "),RV=n(qBe,"A",{href:!0});var r2t=s(RV);LMr=r(r2t,"FlaxBigBirdForPreTraining"),r2t.forEach(t),BMr=r(qBe," (BigBird model)"),qBe.forEach(t),xMr=i(he),DC=n(he,"LI",{});var GBe=s(DC);a3e=n(GBe,"STRONG",{});var t2t=s(a3e);kMr=r(t2t,"electra"),t2t.forEach(t),RMr=r(GBe," \u2014 "),SV=n(GBe,"A",{href:!0});var a2t=s(SV);SMr=r(a2t,"FlaxElectraForPreTraining"),a2t.forEach(t),PMr=r(GBe," (ELECTRA model)"),GBe.forEach(t),$Mr=i(he),jC=n(he,"LI",{});var OBe=s(jC);n3e=n(OBe,"STRONG",{});var n2t=s(n3e);IMr=r(n2t,"mbart"),n2t.forEach(t),NMr=r(OBe," \u2014 "),PV=n(OBe,"A",{href:!0});var s2t=s(PV);DMr=r(s2t,"FlaxMBartForConditionalGeneration"),s2t.forEach(t),jMr=r(OBe," (mBART model)"),OBe.forEach(t),qMr=i(he),qC=n(he,"LI",{});var XBe=s(qC);s3e=n(XBe,"STRONG",{});var l2t=s(s3e);GMr=r(l2t,"mt5"),l2t.forEach(t),OMr=r(XBe," \u2014 "),$V=n(XBe,"A",{href:!0});var i2t=s($V);XMr=r(i2t,"FlaxMT5ForConditionalGeneration"),i2t.forEach(t),VMr=r(XBe," (mT5 model)"),XBe.forEach(t),zMr=i(he),GC=n(he,"LI",{});var VBe=s(GC);l3e=n(VBe,"STRONG",{});var d2t=s(l3e);WMr=r(d2t,"roberta"),d2t.forEach(t),QMr=r(VBe," \u2014 "),IV=n(VBe,"A",{href:!0});var c2t=s(IV);HMr=r(c2t,"FlaxRobertaForMaskedLM"),c2t.forEach(t),UMr=r(VBe," (RoBERTa model)"),VBe.forEach(t),JMr=i(he),OC=n(he,"LI",{});var zBe=s(OC);i3e=n(zBe,"STRONG",{});var f2t=s(i3e);YMr=r(f2t,"roformer"),f2t.forEach(t),KMr=r(zBe," \u2014 "),NV=n(zBe,"A",{href:!0});var m2t=s(NV);ZMr=r(m2t,"FlaxRoFormerForMaskedLM"),m2t.forEach(t),e4r=r(zBe," (RoFormer model)"),zBe.forEach(t),o4r=i(he),XC=n(he,"LI",{});var WBe=s(XC);d3e=n(WBe,"STRONG",{});var g2t=s(d3e);r4r=r(g2t,"t5"),g2t.forEach(t),t4r=r(WBe," \u2014 "),DV=n(WBe,"A",{href:!0});var h2t=s(DV);a4r=r(h2t,"FlaxT5ForConditionalGeneration"),h2t.forEach(t),n4r=r(WBe," (T5 model)"),WBe.forEach(t),s4r=i(he),VC=n(he,"LI",{});var QBe=s(VC);c3e=n(QBe,"STRONG",{});var p2t=s(c3e);l4r=r(p2t,"wav2vec2"),p2t.forEach(t),i4r=r(QBe," \u2014 "),jV=n(QBe,"A",{href:!0});var _2t=s(jV);d4r=r(_2t,"FlaxWav2Vec2ForPreTraining"),_2t.forEach(t),c4r=r(QBe," (Wav2Vec2 model)"),QBe.forEach(t),f4r=i(he),zC=n(he,"LI",{});var HBe=s(zC);f3e=n(HBe,"STRONG",{});var u2t=s(f3e);m4r=r(u2t,"xlm-roberta"),u2t.forEach(t),g4r=r(HBe," \u2014 "),qV=n(HBe,"A",{href:!0});var b2t=s(qV);h4r=r(b2t,"FlaxXLMRobertaForMaskedLM"),b2t.forEach(t),p4r=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),he.forEach(t),_4r=i(xa),m3e=n(xa,"P",{});var v2t=s(m3e);u4r=r(v2t,"Examples:"),v2t.forEach(t),b4r=i(xa),m(V0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),NRe=i(c),sf=n(c,"H2",{class:!0});var UPe=s(sf);WC=n(UPe,"A",{id:!0,class:!0,href:!0});var T2t=s(WC);g3e=n(T2t,"SPAN",{});var F2t=s(g3e);m(z0.$$.fragment,F2t),F2t.forEach(t),T2t.forEach(t),v4r=i(UPe),h3e=n(UPe,"SPAN",{});var C2t=s(h3e);T4r=r(C2t,"FlaxAutoModelForMaskedLM"),C2t.forEach(t),UPe.forEach(t),DRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(W0.$$.fragment,bi),F4r=i(bi),lf=n(bi,"P",{});var TQ=s(lf);C4r=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),p3e=n(TQ,"CODE",{});var M2t=s(p3e);M4r=r(M2t,"from_pretrained()"),M2t.forEach(t),E4r=r(TQ,"class method or the "),_3e=n(TQ,"CODE",{});var E2t=s(_3e);y4r=r(E2t,"from_config()"),E2t.forEach(t),w4r=r(TQ,`class
method.`),TQ.forEach(t),A4r=i(bi),Q0=n(bi,"P",{});var JPe=s(Q0);L4r=r(JPe,"This class cannot be instantiated directly using "),u3e=n(JPe,"CODE",{});var y2t=s(u3e);B4r=r(y2t,"__init__()"),y2t.forEach(t),x4r=r(JPe," (throws an error)."),JPe.forEach(t),k4r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(H0.$$.fragment,vi),R4r=i(vi),b3e=n(vi,"P",{});var w2t=s(b3e);S4r=r(w2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),w2t.forEach(t),P4r=i(vi),df=n(vi,"P",{});var FQ=s(df);$4r=r(FQ,`Note:
Loading a model from its configuration file does `),v3e=n(FQ,"STRONG",{});var A2t=s(v3e);I4r=r(A2t,"not"),A2t.forEach(t),N4r=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),T3e=n(FQ,"CODE",{});var L2t=s(T3e);D4r=r(L2t,"from_pretrained()"),L2t.forEach(t),j4r=r(FQ,"to load the model weights."),FQ.forEach(t),q4r=i(vi),F3e=n(vi,"P",{});var B2t=s(F3e);G4r=r(B2t,"Examples:"),B2t.forEach(t),O4r=i(vi),m(U0.$$.fragment,vi),vi.forEach(t),X4r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(J0.$$.fragment,ka),V4r=i(ka),C3e=n(ka,"P",{});var x2t=s(C3e);z4r=r(x2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x2t.forEach(t),W4r=i(ka),Rn=n(ka,"P",{});var J4=s(Rn);Q4r=r(J4,"The model class to instantiate is selected based on the "),M3e=n(J4,"CODE",{});var k2t=s(M3e);H4r=r(k2t,"model_type"),k2t.forEach(t),U4r=r(J4,` property of the config object (either
passed as an argument or loaded from `),E3e=n(J4,"CODE",{});var R2t=s(E3e);J4r=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),Y4r=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y3e=n(J4,"CODE",{});var S2t=s(y3e);K4r=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),Z4r=r(J4,":"),J4.forEach(t),eEr=i(ka),ue=n(ka,"UL",{});var we=s(ue);QC=n(we,"LI",{});var UBe=s(QC);w3e=n(UBe,"STRONG",{});var P2t=s(w3e);oEr=r(P2t,"albert"),P2t.forEach(t),rEr=r(UBe," \u2014 "),GV=n(UBe,"A",{href:!0});var $2t=s(GV);tEr=r($2t,"FlaxAlbertForMaskedLM"),$2t.forEach(t),aEr=r(UBe," (ALBERT model)"),UBe.forEach(t),nEr=i(we),HC=n(we,"LI",{});var JBe=s(HC);A3e=n(JBe,"STRONG",{});var I2t=s(A3e);sEr=r(I2t,"bart"),I2t.forEach(t),lEr=r(JBe," \u2014 "),OV=n(JBe,"A",{href:!0});var N2t=s(OV);iEr=r(N2t,"FlaxBartForConditionalGeneration"),N2t.forEach(t),dEr=r(JBe," (BART model)"),JBe.forEach(t),cEr=i(we),UC=n(we,"LI",{});var YBe=s(UC);L3e=n(YBe,"STRONG",{});var D2t=s(L3e);fEr=r(D2t,"bert"),D2t.forEach(t),mEr=r(YBe," \u2014 "),XV=n(YBe,"A",{href:!0});var j2t=s(XV);gEr=r(j2t,"FlaxBertForMaskedLM"),j2t.forEach(t),hEr=r(YBe," (BERT model)"),YBe.forEach(t),pEr=i(we),JC=n(we,"LI",{});var KBe=s(JC);B3e=n(KBe,"STRONG",{});var q2t=s(B3e);_Er=r(q2t,"big_bird"),q2t.forEach(t),uEr=r(KBe," \u2014 "),VV=n(KBe,"A",{href:!0});var G2t=s(VV);bEr=r(G2t,"FlaxBigBirdForMaskedLM"),G2t.forEach(t),vEr=r(KBe," (BigBird model)"),KBe.forEach(t),TEr=i(we),YC=n(we,"LI",{});var ZBe=s(YC);x3e=n(ZBe,"STRONG",{});var O2t=s(x3e);FEr=r(O2t,"distilbert"),O2t.forEach(t),CEr=r(ZBe," \u2014 "),zV=n(ZBe,"A",{href:!0});var X2t=s(zV);MEr=r(X2t,"FlaxDistilBertForMaskedLM"),X2t.forEach(t),EEr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),yEr=i(we),KC=n(we,"LI",{});var exe=s(KC);k3e=n(exe,"STRONG",{});var V2t=s(k3e);wEr=r(V2t,"electra"),V2t.forEach(t),AEr=r(exe," \u2014 "),WV=n(exe,"A",{href:!0});var z2t=s(WV);LEr=r(z2t,"FlaxElectraForMaskedLM"),z2t.forEach(t),BEr=r(exe," (ELECTRA model)"),exe.forEach(t),xEr=i(we),ZC=n(we,"LI",{});var oxe=s(ZC);R3e=n(oxe,"STRONG",{});var W2t=s(R3e);kEr=r(W2t,"mbart"),W2t.forEach(t),REr=r(oxe," \u2014 "),QV=n(oxe,"A",{href:!0});var Q2t=s(QV);SEr=r(Q2t,"FlaxMBartForConditionalGeneration"),Q2t.forEach(t),PEr=r(oxe," (mBART model)"),oxe.forEach(t),$Er=i(we),eM=n(we,"LI",{});var rxe=s(eM);S3e=n(rxe,"STRONG",{});var H2t=s(S3e);IEr=r(H2t,"roberta"),H2t.forEach(t),NEr=r(rxe," \u2014 "),HV=n(rxe,"A",{href:!0});var U2t=s(HV);DEr=r(U2t,"FlaxRobertaForMaskedLM"),U2t.forEach(t),jEr=r(rxe," (RoBERTa model)"),rxe.forEach(t),qEr=i(we),oM=n(we,"LI",{});var txe=s(oM);P3e=n(txe,"STRONG",{});var J2t=s(P3e);GEr=r(J2t,"roformer"),J2t.forEach(t),OEr=r(txe," \u2014 "),UV=n(txe,"A",{href:!0});var Y2t=s(UV);XEr=r(Y2t,"FlaxRoFormerForMaskedLM"),Y2t.forEach(t),VEr=r(txe," (RoFormer model)"),txe.forEach(t),zEr=i(we),rM=n(we,"LI",{});var axe=s(rM);$3e=n(axe,"STRONG",{});var K2t=s($3e);WEr=r(K2t,"xlm-roberta"),K2t.forEach(t),QEr=r(axe," \u2014 "),JV=n(axe,"A",{href:!0});var Z2t=s(JV);HEr=r(Z2t,"FlaxXLMRobertaForMaskedLM"),Z2t.forEach(t),UEr=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),we.forEach(t),JEr=i(ka),I3e=n(ka,"P",{});var evt=s(I3e);YEr=r(evt,"Examples:"),evt.forEach(t),KEr=i(ka),m(Y0.$$.fragment,ka),ka.forEach(t),bi.forEach(t),jRe=i(c),cf=n(c,"H2",{class:!0});var YPe=s(cf);tM=n(YPe,"A",{id:!0,class:!0,href:!0});var ovt=s(tM);N3e=n(ovt,"SPAN",{});var rvt=s(N3e);m(K0.$$.fragment,rvt),rvt.forEach(t),ovt.forEach(t),ZEr=i(YPe),D3e=n(YPe,"SPAN",{});var tvt=s(D3e);e5r=r(tvt,"FlaxAutoModelForSeq2SeqLM"),tvt.forEach(t),YPe.forEach(t),qRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(Z0.$$.fragment,Ti),o5r=i(Ti),ff=n(Ti,"P",{});var CQ=s(ff);r5r=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),j3e=n(CQ,"CODE",{});var avt=s(j3e);t5r=r(avt,"from_pretrained()"),avt.forEach(t),a5r=r(CQ,"class method or the "),q3e=n(CQ,"CODE",{});var nvt=s(q3e);n5r=r(nvt,"from_config()"),nvt.forEach(t),s5r=r(CQ,`class
method.`),CQ.forEach(t),l5r=i(Ti),eL=n(Ti,"P",{});var KPe=s(eL);i5r=r(KPe,"This class cannot be instantiated directly using "),G3e=n(KPe,"CODE",{});var svt=s(G3e);d5r=r(svt,"__init__()"),svt.forEach(t),c5r=r(KPe," (throws an error)."),KPe.forEach(t),f5r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(oL.$$.fragment,Fi),m5r=i(Fi),O3e=n(Fi,"P",{});var lvt=s(O3e);g5r=r(lvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lvt.forEach(t),h5r=i(Fi),mf=n(Fi,"P",{});var MQ=s(mf);p5r=r(MQ,`Note:
Loading a model from its configuration file does `),X3e=n(MQ,"STRONG",{});var ivt=s(X3e);_5r=r(ivt,"not"),ivt.forEach(t),u5r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V3e=n(MQ,"CODE",{});var dvt=s(V3e);b5r=r(dvt,"from_pretrained()"),dvt.forEach(t),v5r=r(MQ,"to load the model weights."),MQ.forEach(t),T5r=i(Fi),z3e=n(Fi,"P",{});var cvt=s(z3e);F5r=r(cvt,"Examples:"),cvt.forEach(t),C5r=i(Fi),m(rL.$$.fragment,Fi),Fi.forEach(t),M5r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(tL.$$.fragment,Ra),E5r=i(Ra),W3e=n(Ra,"P",{});var fvt=s(W3e);y5r=r(fvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fvt.forEach(t),w5r=i(Ra),Sn=n(Ra,"P",{});var Y4=s(Sn);A5r=r(Y4,"The model class to instantiate is selected based on the "),Q3e=n(Y4,"CODE",{});var mvt=s(Q3e);L5r=r(mvt,"model_type"),mvt.forEach(t),B5r=r(Y4,` property of the config object (either
passed as an argument or loaded from `),H3e=n(Y4,"CODE",{});var gvt=s(H3e);x5r=r(gvt,"pretrained_model_name_or_path"),gvt.forEach(t),k5r=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=n(Y4,"CODE",{});var hvt=s(U3e);R5r=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),S5r=r(Y4,":"),Y4.forEach(t),P5r=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);aM=n(so,"LI",{});var nxe=s(aM);J3e=n(nxe,"STRONG",{});var pvt=s(J3e);$5r=r(pvt,"bart"),pvt.forEach(t),I5r=r(nxe," \u2014 "),YV=n(nxe,"A",{href:!0});var _vt=s(YV);N5r=r(_vt,"FlaxBartForConditionalGeneration"),_vt.forEach(t),D5r=r(nxe," (BART model)"),nxe.forEach(t),j5r=i(so),nM=n(so,"LI",{});var sxe=s(nM);Y3e=n(sxe,"STRONG",{});var uvt=s(Y3e);q5r=r(uvt,"blenderbot"),uvt.forEach(t),G5r=r(sxe," \u2014 "),KV=n(sxe,"A",{href:!0});var bvt=s(KV);O5r=r(bvt,"FlaxBlenderbotForConditionalGeneration"),bvt.forEach(t),X5r=r(sxe," (Blenderbot model)"),sxe.forEach(t),V5r=i(so),sM=n(so,"LI",{});var lxe=s(sM);K3e=n(lxe,"STRONG",{});var vvt=s(K3e);z5r=r(vvt,"blenderbot-small"),vvt.forEach(t),W5r=r(lxe," \u2014 "),ZV=n(lxe,"A",{href:!0});var Tvt=s(ZV);Q5r=r(Tvt,"FlaxBlenderbotSmallForConditionalGeneration"),Tvt.forEach(t),H5r=r(lxe," (BlenderbotSmall model)"),lxe.forEach(t),U5r=i(so),lM=n(so,"LI",{});var ixe=s(lM);Z3e=n(ixe,"STRONG",{});var Fvt=s(Z3e);J5r=r(Fvt,"encoder-decoder"),Fvt.forEach(t),Y5r=r(ixe," \u2014 "),ez=n(ixe,"A",{href:!0});var Cvt=s(ez);K5r=r(Cvt,"FlaxEncoderDecoderModel"),Cvt.forEach(t),Z5r=r(ixe," (Encoder decoder model)"),ixe.forEach(t),eyr=i(so),iM=n(so,"LI",{});var dxe=s(iM);e2e=n(dxe,"STRONG",{});var Mvt=s(e2e);oyr=r(Mvt,"marian"),Mvt.forEach(t),ryr=r(dxe," \u2014 "),oz=n(dxe,"A",{href:!0});var Evt=s(oz);tyr=r(Evt,"FlaxMarianMTModel"),Evt.forEach(t),ayr=r(dxe," (Marian model)"),dxe.forEach(t),nyr=i(so),dM=n(so,"LI",{});var cxe=s(dM);o2e=n(cxe,"STRONG",{});var yvt=s(o2e);syr=r(yvt,"mbart"),yvt.forEach(t),lyr=r(cxe," \u2014 "),rz=n(cxe,"A",{href:!0});var wvt=s(rz);iyr=r(wvt,"FlaxMBartForConditionalGeneration"),wvt.forEach(t),dyr=r(cxe," (mBART model)"),cxe.forEach(t),cyr=i(so),cM=n(so,"LI",{});var fxe=s(cM);r2e=n(fxe,"STRONG",{});var Avt=s(r2e);fyr=r(Avt,"mt5"),Avt.forEach(t),myr=r(fxe," \u2014 "),tz=n(fxe,"A",{href:!0});var Lvt=s(tz);gyr=r(Lvt,"FlaxMT5ForConditionalGeneration"),Lvt.forEach(t),hyr=r(fxe," (mT5 model)"),fxe.forEach(t),pyr=i(so),fM=n(so,"LI",{});var mxe=s(fM);t2e=n(mxe,"STRONG",{});var Bvt=s(t2e);_yr=r(Bvt,"pegasus"),Bvt.forEach(t),uyr=r(mxe," \u2014 "),az=n(mxe,"A",{href:!0});var xvt=s(az);byr=r(xvt,"FlaxPegasusForConditionalGeneration"),xvt.forEach(t),vyr=r(mxe," (Pegasus model)"),mxe.forEach(t),Tyr=i(so),mM=n(so,"LI",{});var gxe=s(mM);a2e=n(gxe,"STRONG",{});var kvt=s(a2e);Fyr=r(kvt,"t5"),kvt.forEach(t),Cyr=r(gxe," \u2014 "),nz=n(gxe,"A",{href:!0});var Rvt=s(nz);Myr=r(Rvt,"FlaxT5ForConditionalGeneration"),Rvt.forEach(t),Eyr=r(gxe," (T5 model)"),gxe.forEach(t),so.forEach(t),yyr=i(Ra),n2e=n(Ra,"P",{});var Svt=s(n2e);wyr=r(Svt,"Examples:"),Svt.forEach(t),Ayr=i(Ra),m(aL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),GRe=i(c),gf=n(c,"H2",{class:!0});var ZPe=s(gf);gM=n(ZPe,"A",{id:!0,class:!0,href:!0});var Pvt=s(gM);s2e=n(Pvt,"SPAN",{});var $vt=s(s2e);m(nL.$$.fragment,$vt),$vt.forEach(t),Pvt.forEach(t),Lyr=i(ZPe),l2e=n(ZPe,"SPAN",{});var Ivt=s(l2e);Byr=r(Ivt,"FlaxAutoModelForSequenceClassification"),Ivt.forEach(t),ZPe.forEach(t),ORe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(sL.$$.fragment,Ci),xyr=i(Ci),hf=n(Ci,"P",{});var EQ=s(hf);kyr=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),i2e=n(EQ,"CODE",{});var Nvt=s(i2e);Ryr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),Syr=r(EQ,"class method or the "),d2e=n(EQ,"CODE",{});var Dvt=s(d2e);Pyr=r(Dvt,"from_config()"),Dvt.forEach(t),$yr=r(EQ,`class
method.`),EQ.forEach(t),Iyr=i(Ci),lL=n(Ci,"P",{});var e$e=s(lL);Nyr=r(e$e,"This class cannot be instantiated directly using "),c2e=n(e$e,"CODE",{});var jvt=s(c2e);Dyr=r(jvt,"__init__()"),jvt.forEach(t),jyr=r(e$e," (throws an error)."),e$e.forEach(t),qyr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(iL.$$.fragment,Mi),Gyr=i(Mi),f2e=n(Mi,"P",{});var qvt=s(f2e);Oyr=r(qvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qvt.forEach(t),Xyr=i(Mi),pf=n(Mi,"P",{});var yQ=s(pf);Vyr=r(yQ,`Note:
Loading a model from its configuration file does `),m2e=n(yQ,"STRONG",{});var Gvt=s(m2e);zyr=r(Gvt,"not"),Gvt.forEach(t),Wyr=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g2e=n(yQ,"CODE",{});var Ovt=s(g2e);Qyr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),Hyr=r(yQ,"to load the model weights."),yQ.forEach(t),Uyr=i(Mi),h2e=n(Mi,"P",{});var Xvt=s(h2e);Jyr=r(Xvt,"Examples:"),Xvt.forEach(t),Yyr=i(Mi),m(dL.$$.fragment,Mi),Mi.forEach(t),Kyr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(cL.$$.fragment,Sa),Zyr=i(Sa),p2e=n(Sa,"P",{});var Vvt=s(p2e);ewr=r(Vvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vvt.forEach(t),owr=i(Sa),Pn=n(Sa,"P",{});var K4=s(Pn);rwr=r(K4,"The model class to instantiate is selected based on the "),_2e=n(K4,"CODE",{});var zvt=s(_2e);twr=r(zvt,"model_type"),zvt.forEach(t),awr=r(K4,` property of the config object (either
passed as an argument or loaded from `),u2e=n(K4,"CODE",{});var Wvt=s(u2e);nwr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),swr=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n(K4,"CODE",{});var Qvt=s(b2e);lwr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),iwr=r(K4,":"),K4.forEach(t),dwr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);hM=n(Ae,"LI",{});var hxe=s(hM);v2e=n(hxe,"STRONG",{});var Hvt=s(v2e);cwr=r(Hvt,"albert"),Hvt.forEach(t),fwr=r(hxe," \u2014 "),sz=n(hxe,"A",{href:!0});var Uvt=s(sz);mwr=r(Uvt,"FlaxAlbertForSequenceClassification"),Uvt.forEach(t),gwr=r(hxe," (ALBERT model)"),hxe.forEach(t),hwr=i(Ae),pM=n(Ae,"LI",{});var pxe=s(pM);T2e=n(pxe,"STRONG",{});var Jvt=s(T2e);pwr=r(Jvt,"bart"),Jvt.forEach(t),_wr=r(pxe," \u2014 "),lz=n(pxe,"A",{href:!0});var Yvt=s(lz);uwr=r(Yvt,"FlaxBartForSequenceClassification"),Yvt.forEach(t),bwr=r(pxe," (BART model)"),pxe.forEach(t),vwr=i(Ae),_M=n(Ae,"LI",{});var _xe=s(_M);F2e=n(_xe,"STRONG",{});var Kvt=s(F2e);Twr=r(Kvt,"bert"),Kvt.forEach(t),Fwr=r(_xe," \u2014 "),iz=n(_xe,"A",{href:!0});var Zvt=s(iz);Cwr=r(Zvt,"FlaxBertForSequenceClassification"),Zvt.forEach(t),Mwr=r(_xe," (BERT model)"),_xe.forEach(t),Ewr=i(Ae),uM=n(Ae,"LI",{});var uxe=s(uM);C2e=n(uxe,"STRONG",{});var e6t=s(C2e);ywr=r(e6t,"big_bird"),e6t.forEach(t),wwr=r(uxe," \u2014 "),dz=n(uxe,"A",{href:!0});var o6t=s(dz);Awr=r(o6t,"FlaxBigBirdForSequenceClassification"),o6t.forEach(t),Lwr=r(uxe," (BigBird model)"),uxe.forEach(t),Bwr=i(Ae),bM=n(Ae,"LI",{});var bxe=s(bM);M2e=n(bxe,"STRONG",{});var r6t=s(M2e);xwr=r(r6t,"distilbert"),r6t.forEach(t),kwr=r(bxe," \u2014 "),cz=n(bxe,"A",{href:!0});var t6t=s(cz);Rwr=r(t6t,"FlaxDistilBertForSequenceClassification"),t6t.forEach(t),Swr=r(bxe," (DistilBERT model)"),bxe.forEach(t),Pwr=i(Ae),vM=n(Ae,"LI",{});var vxe=s(vM);E2e=n(vxe,"STRONG",{});var a6t=s(E2e);$wr=r(a6t,"electra"),a6t.forEach(t),Iwr=r(vxe," \u2014 "),fz=n(vxe,"A",{href:!0});var n6t=s(fz);Nwr=r(n6t,"FlaxElectraForSequenceClassification"),n6t.forEach(t),Dwr=r(vxe," (ELECTRA model)"),vxe.forEach(t),jwr=i(Ae),TM=n(Ae,"LI",{});var Txe=s(TM);y2e=n(Txe,"STRONG",{});var s6t=s(y2e);qwr=r(s6t,"mbart"),s6t.forEach(t),Gwr=r(Txe," \u2014 "),mz=n(Txe,"A",{href:!0});var l6t=s(mz);Owr=r(l6t,"FlaxMBartForSequenceClassification"),l6t.forEach(t),Xwr=r(Txe," (mBART model)"),Txe.forEach(t),Vwr=i(Ae),FM=n(Ae,"LI",{});var Fxe=s(FM);w2e=n(Fxe,"STRONG",{});var i6t=s(w2e);zwr=r(i6t,"roberta"),i6t.forEach(t),Wwr=r(Fxe," \u2014 "),gz=n(Fxe,"A",{href:!0});var d6t=s(gz);Qwr=r(d6t,"FlaxRobertaForSequenceClassification"),d6t.forEach(t),Hwr=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),Uwr=i(Ae),CM=n(Ae,"LI",{});var Cxe=s(CM);A2e=n(Cxe,"STRONG",{});var c6t=s(A2e);Jwr=r(c6t,"roformer"),c6t.forEach(t),Ywr=r(Cxe," \u2014 "),hz=n(Cxe,"A",{href:!0});var f6t=s(hz);Kwr=r(f6t,"FlaxRoFormerForSequenceClassification"),f6t.forEach(t),Zwr=r(Cxe," (RoFormer model)"),Cxe.forEach(t),eAr=i(Ae),MM=n(Ae,"LI",{});var Mxe=s(MM);L2e=n(Mxe,"STRONG",{});var m6t=s(L2e);oAr=r(m6t,"xlm-roberta"),m6t.forEach(t),rAr=r(Mxe," \u2014 "),pz=n(Mxe,"A",{href:!0});var g6t=s(pz);tAr=r(g6t,"FlaxXLMRobertaForSequenceClassification"),g6t.forEach(t),aAr=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Ae.forEach(t),nAr=i(Sa),B2e=n(Sa,"P",{});var h6t=s(B2e);sAr=r(h6t,"Examples:"),h6t.forEach(t),lAr=i(Sa),m(fL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),XRe=i(c),_f=n(c,"H2",{class:!0});var o$e=s(_f);EM=n(o$e,"A",{id:!0,class:!0,href:!0});var p6t=s(EM);x2e=n(p6t,"SPAN",{});var _6t=s(x2e);m(mL.$$.fragment,_6t),_6t.forEach(t),p6t.forEach(t),iAr=i(o$e),k2e=n(o$e,"SPAN",{});var u6t=s(k2e);dAr=r(u6t,"FlaxAutoModelForQuestionAnswering"),u6t.forEach(t),o$e.forEach(t),VRe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(gL.$$.fragment,Ei),cAr=i(Ei),uf=n(Ei,"P",{});var wQ=s(uf);fAr=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R2e=n(wQ,"CODE",{});var b6t=s(R2e);mAr=r(b6t,"from_pretrained()"),b6t.forEach(t),gAr=r(wQ,"class method or the "),S2e=n(wQ,"CODE",{});var v6t=s(S2e);hAr=r(v6t,"from_config()"),v6t.forEach(t),pAr=r(wQ,`class
method.`),wQ.forEach(t),_Ar=i(Ei),hL=n(Ei,"P",{});var r$e=s(hL);uAr=r(r$e,"This class cannot be instantiated directly using "),P2e=n(r$e,"CODE",{});var T6t=s(P2e);bAr=r(T6t,"__init__()"),T6t.forEach(t),vAr=r(r$e," (throws an error)."),r$e.forEach(t),TAr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(pL.$$.fragment,yi),FAr=i(yi),$2e=n(yi,"P",{});var F6t=s($2e);CAr=r(F6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),F6t.forEach(t),MAr=i(yi),bf=n(yi,"P",{});var AQ=s(bf);EAr=r(AQ,`Note:
Loading a model from its configuration file does `),I2e=n(AQ,"STRONG",{});var C6t=s(I2e);yAr=r(C6t,"not"),C6t.forEach(t),wAr=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=n(AQ,"CODE",{});var M6t=s(N2e);AAr=r(M6t,"from_pretrained()"),M6t.forEach(t),LAr=r(AQ,"to load the model weights."),AQ.forEach(t),BAr=i(yi),D2e=n(yi,"P",{});var E6t=s(D2e);xAr=r(E6t,"Examples:"),E6t.forEach(t),kAr=i(yi),m(_L.$$.fragment,yi),yi.forEach(t),RAr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(uL.$$.fragment,Pa),SAr=i(Pa),j2e=n(Pa,"P",{});var y6t=s(j2e);PAr=r(y6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y6t.forEach(t),$Ar=i(Pa),$n=n(Pa,"P",{});var Z4=s($n);IAr=r(Z4,"The model class to instantiate is selected based on the "),q2e=n(Z4,"CODE",{});var w6t=s(q2e);NAr=r(w6t,"model_type"),w6t.forEach(t),DAr=r(Z4,` property of the config object (either
passed as an argument or loaded from `),G2e=n(Z4,"CODE",{});var A6t=s(G2e);jAr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),qAr=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(Z4,"CODE",{});var L6t=s(O2e);GAr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),OAr=r(Z4,":"),Z4.forEach(t),XAr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);yM=n(Le,"LI",{});var Exe=s(yM);X2e=n(Exe,"STRONG",{});var B6t=s(X2e);VAr=r(B6t,"albert"),B6t.forEach(t),zAr=r(Exe," \u2014 "),_z=n(Exe,"A",{href:!0});var x6t=s(_z);WAr=r(x6t,"FlaxAlbertForQuestionAnswering"),x6t.forEach(t),QAr=r(Exe," (ALBERT model)"),Exe.forEach(t),HAr=i(Le),wM=n(Le,"LI",{});var yxe=s(wM);V2e=n(yxe,"STRONG",{});var k6t=s(V2e);UAr=r(k6t,"bart"),k6t.forEach(t),JAr=r(yxe," \u2014 "),uz=n(yxe,"A",{href:!0});var R6t=s(uz);YAr=r(R6t,"FlaxBartForQuestionAnswering"),R6t.forEach(t),KAr=r(yxe," (BART model)"),yxe.forEach(t),ZAr=i(Le),AM=n(Le,"LI",{});var wxe=s(AM);z2e=n(wxe,"STRONG",{});var S6t=s(z2e);e0r=r(S6t,"bert"),S6t.forEach(t),o0r=r(wxe," \u2014 "),bz=n(wxe,"A",{href:!0});var P6t=s(bz);r0r=r(P6t,"FlaxBertForQuestionAnswering"),P6t.forEach(t),t0r=r(wxe," (BERT model)"),wxe.forEach(t),a0r=i(Le),LM=n(Le,"LI",{});var Axe=s(LM);W2e=n(Axe,"STRONG",{});var $6t=s(W2e);n0r=r($6t,"big_bird"),$6t.forEach(t),s0r=r(Axe," \u2014 "),vz=n(Axe,"A",{href:!0});var I6t=s(vz);l0r=r(I6t,"FlaxBigBirdForQuestionAnswering"),I6t.forEach(t),i0r=r(Axe," (BigBird model)"),Axe.forEach(t),d0r=i(Le),BM=n(Le,"LI",{});var Lxe=s(BM);Q2e=n(Lxe,"STRONG",{});var N6t=s(Q2e);c0r=r(N6t,"distilbert"),N6t.forEach(t),f0r=r(Lxe," \u2014 "),Tz=n(Lxe,"A",{href:!0});var D6t=s(Tz);m0r=r(D6t,"FlaxDistilBertForQuestionAnswering"),D6t.forEach(t),g0r=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),h0r=i(Le),xM=n(Le,"LI",{});var Bxe=s(xM);H2e=n(Bxe,"STRONG",{});var j6t=s(H2e);p0r=r(j6t,"electra"),j6t.forEach(t),_0r=r(Bxe," \u2014 "),Fz=n(Bxe,"A",{href:!0});var q6t=s(Fz);u0r=r(q6t,"FlaxElectraForQuestionAnswering"),q6t.forEach(t),b0r=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),v0r=i(Le),kM=n(Le,"LI",{});var xxe=s(kM);U2e=n(xxe,"STRONG",{});var G6t=s(U2e);T0r=r(G6t,"mbart"),G6t.forEach(t),F0r=r(xxe," \u2014 "),Cz=n(xxe,"A",{href:!0});var O6t=s(Cz);C0r=r(O6t,"FlaxMBartForQuestionAnswering"),O6t.forEach(t),M0r=r(xxe," (mBART model)"),xxe.forEach(t),E0r=i(Le),RM=n(Le,"LI",{});var kxe=s(RM);J2e=n(kxe,"STRONG",{});var X6t=s(J2e);y0r=r(X6t,"roberta"),X6t.forEach(t),w0r=r(kxe," \u2014 "),Mz=n(kxe,"A",{href:!0});var V6t=s(Mz);A0r=r(V6t,"FlaxRobertaForQuestionAnswering"),V6t.forEach(t),L0r=r(kxe," (RoBERTa model)"),kxe.forEach(t),B0r=i(Le),SM=n(Le,"LI",{});var Rxe=s(SM);Y2e=n(Rxe,"STRONG",{});var z6t=s(Y2e);x0r=r(z6t,"roformer"),z6t.forEach(t),k0r=r(Rxe," \u2014 "),Ez=n(Rxe,"A",{href:!0});var W6t=s(Ez);R0r=r(W6t,"FlaxRoFormerForQuestionAnswering"),W6t.forEach(t),S0r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),P0r=i(Le),PM=n(Le,"LI",{});var Sxe=s(PM);K2e=n(Sxe,"STRONG",{});var Q6t=s(K2e);$0r=r(Q6t,"xlm-roberta"),Q6t.forEach(t),I0r=r(Sxe," \u2014 "),yz=n(Sxe,"A",{href:!0});var H6t=s(yz);N0r=r(H6t,"FlaxXLMRobertaForQuestionAnswering"),H6t.forEach(t),D0r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Le.forEach(t),j0r=i(Pa),Z2e=n(Pa,"P",{});var U6t=s(Z2e);q0r=r(U6t,"Examples:"),U6t.forEach(t),G0r=i(Pa),m(bL.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),zRe=i(c),vf=n(c,"H2",{class:!0});var t$e=s(vf);$M=n(t$e,"A",{id:!0,class:!0,href:!0});var J6t=s($M);eve=n(J6t,"SPAN",{});var Y6t=s(eve);m(vL.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),O0r=i(t$e),ove=n(t$e,"SPAN",{});var K6t=s(ove);X0r=r(K6t,"FlaxAutoModelForTokenClassification"),K6t.forEach(t),t$e.forEach(t),WRe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(TL.$$.fragment,wi),V0r=i(wi),Tf=n(wi,"P",{});var LQ=s(Tf);z0r=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rve=n(LQ,"CODE",{});var Z6t=s(rve);W0r=r(Z6t,"from_pretrained()"),Z6t.forEach(t),Q0r=r(LQ,"class method or the "),tve=n(LQ,"CODE",{});var eTt=s(tve);H0r=r(eTt,"from_config()"),eTt.forEach(t),U0r=r(LQ,`class
method.`),LQ.forEach(t),J0r=i(wi),FL=n(wi,"P",{});var a$e=s(FL);Y0r=r(a$e,"This class cannot be instantiated directly using "),ave=n(a$e,"CODE",{});var oTt=s(ave);K0r=r(oTt,"__init__()"),oTt.forEach(t),Z0r=r(a$e," (throws an error)."),a$e.forEach(t),eLr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(CL.$$.fragment,Ai),oLr=i(Ai),nve=n(Ai,"P",{});var rTt=s(nve);rLr=r(rTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rTt.forEach(t),tLr=i(Ai),Ff=n(Ai,"P",{});var BQ=s(Ff);aLr=r(BQ,`Note:
Loading a model from its configuration file does `),sve=n(BQ,"STRONG",{});var tTt=s(sve);nLr=r(tTt,"not"),tTt.forEach(t),sLr=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=n(BQ,"CODE",{});var aTt=s(lve);lLr=r(aTt,"from_pretrained()"),aTt.forEach(t),iLr=r(BQ,"to load the model weights."),BQ.forEach(t),dLr=i(Ai),ive=n(Ai,"P",{});var nTt=s(ive);cLr=r(nTt,"Examples:"),nTt.forEach(t),fLr=i(Ai),m(ML.$$.fragment,Ai),Ai.forEach(t),mLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(EL.$$.fragment,$a),gLr=i($a),dve=n($a,"P",{});var sTt=s(dve);hLr=r(sTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sTt.forEach(t),pLr=i($a),In=n($a,"P",{});var eE=s(In);_Lr=r(eE,"The model class to instantiate is selected based on the "),cve=n(eE,"CODE",{});var lTt=s(cve);uLr=r(lTt,"model_type"),lTt.forEach(t),bLr=r(eE,` property of the config object (either
passed as an argument or loaded from `),fve=n(eE,"CODE",{});var iTt=s(fve);vLr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),TLr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(eE,"CODE",{});var dTt=s(mve);FLr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),CLr=r(eE,":"),eE.forEach(t),MLr=i($a),Se=n($a,"UL",{});var Oo=s(Se);IM=n(Oo,"LI",{});var Pxe=s(IM);gve=n(Pxe,"STRONG",{});var cTt=s(gve);ELr=r(cTt,"albert"),cTt.forEach(t),yLr=r(Pxe," \u2014 "),wz=n(Pxe,"A",{href:!0});var fTt=s(wz);wLr=r(fTt,"FlaxAlbertForTokenClassification"),fTt.forEach(t),ALr=r(Pxe," (ALBERT model)"),Pxe.forEach(t),LLr=i(Oo),NM=n(Oo,"LI",{});var $xe=s(NM);hve=n($xe,"STRONG",{});var mTt=s(hve);BLr=r(mTt,"bert"),mTt.forEach(t),xLr=r($xe," \u2014 "),Az=n($xe,"A",{href:!0});var gTt=s(Az);kLr=r(gTt,"FlaxBertForTokenClassification"),gTt.forEach(t),RLr=r($xe," (BERT model)"),$xe.forEach(t),SLr=i(Oo),DM=n(Oo,"LI",{});var Ixe=s(DM);pve=n(Ixe,"STRONG",{});var hTt=s(pve);PLr=r(hTt,"big_bird"),hTt.forEach(t),$Lr=r(Ixe," \u2014 "),Lz=n(Ixe,"A",{href:!0});var pTt=s(Lz);ILr=r(pTt,"FlaxBigBirdForTokenClassification"),pTt.forEach(t),NLr=r(Ixe," (BigBird model)"),Ixe.forEach(t),DLr=i(Oo),jM=n(Oo,"LI",{});var Nxe=s(jM);_ve=n(Nxe,"STRONG",{});var _Tt=s(_ve);jLr=r(_Tt,"distilbert"),_Tt.forEach(t),qLr=r(Nxe," \u2014 "),Bz=n(Nxe,"A",{href:!0});var uTt=s(Bz);GLr=r(uTt,"FlaxDistilBertForTokenClassification"),uTt.forEach(t),OLr=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),XLr=i(Oo),qM=n(Oo,"LI",{});var Dxe=s(qM);uve=n(Dxe,"STRONG",{});var bTt=s(uve);VLr=r(bTt,"electra"),bTt.forEach(t),zLr=r(Dxe," \u2014 "),xz=n(Dxe,"A",{href:!0});var vTt=s(xz);WLr=r(vTt,"FlaxElectraForTokenClassification"),vTt.forEach(t),QLr=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),HLr=i(Oo),GM=n(Oo,"LI",{});var jxe=s(GM);bve=n(jxe,"STRONG",{});var TTt=s(bve);ULr=r(TTt,"roberta"),TTt.forEach(t),JLr=r(jxe," \u2014 "),kz=n(jxe,"A",{href:!0});var FTt=s(kz);YLr=r(FTt,"FlaxRobertaForTokenClassification"),FTt.forEach(t),KLr=r(jxe," (RoBERTa model)"),jxe.forEach(t),ZLr=i(Oo),OM=n(Oo,"LI",{});var qxe=s(OM);vve=n(qxe,"STRONG",{});var CTt=s(vve);e7r=r(CTt,"roformer"),CTt.forEach(t),o7r=r(qxe," \u2014 "),Rz=n(qxe,"A",{href:!0});var MTt=s(Rz);r7r=r(MTt,"FlaxRoFormerForTokenClassification"),MTt.forEach(t),t7r=r(qxe," (RoFormer model)"),qxe.forEach(t),a7r=i(Oo),XM=n(Oo,"LI",{});var Gxe=s(XM);Tve=n(Gxe,"STRONG",{});var ETt=s(Tve);n7r=r(ETt,"xlm-roberta"),ETt.forEach(t),s7r=r(Gxe," \u2014 "),Sz=n(Gxe,"A",{href:!0});var yTt=s(Sz);l7r=r(yTt,"FlaxXLMRobertaForTokenClassification"),yTt.forEach(t),i7r=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),Oo.forEach(t),d7r=i($a),Fve=n($a,"P",{});var wTt=s(Fve);c7r=r(wTt,"Examples:"),wTt.forEach(t),f7r=i($a),m(yL.$$.fragment,$a),$a.forEach(t),wi.forEach(t),QRe=i(c),Cf=n(c,"H2",{class:!0});var n$e=s(Cf);VM=n(n$e,"A",{id:!0,class:!0,href:!0});var ATt=s(VM);Cve=n(ATt,"SPAN",{});var LTt=s(Cve);m(wL.$$.fragment,LTt),LTt.forEach(t),ATt.forEach(t),m7r=i(n$e),Mve=n(n$e,"SPAN",{});var BTt=s(Mve);g7r=r(BTt,"FlaxAutoModelForMultipleChoice"),BTt.forEach(t),n$e.forEach(t),HRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(AL.$$.fragment,Li),h7r=i(Li),Mf=n(Li,"P",{});var xQ=s(Mf);p7r=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Eve=n(xQ,"CODE",{});var xTt=s(Eve);_7r=r(xTt,"from_pretrained()"),xTt.forEach(t),u7r=r(xQ,"class method or the "),yve=n(xQ,"CODE",{});var kTt=s(yve);b7r=r(kTt,"from_config()"),kTt.forEach(t),v7r=r(xQ,`class
method.`),xQ.forEach(t),T7r=i(Li),LL=n(Li,"P",{});var s$e=s(LL);F7r=r(s$e,"This class cannot be instantiated directly using "),wve=n(s$e,"CODE",{});var RTt=s(wve);C7r=r(RTt,"__init__()"),RTt.forEach(t),M7r=r(s$e," (throws an error)."),s$e.forEach(t),E7r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(BL.$$.fragment,Bi),y7r=i(Bi),Ave=n(Bi,"P",{});var STt=s(Ave);w7r=r(STt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),STt.forEach(t),A7r=i(Bi),Ef=n(Bi,"P",{});var kQ=s(Ef);L7r=r(kQ,`Note:
Loading a model from its configuration file does `),Lve=n(kQ,"STRONG",{});var PTt=s(Lve);B7r=r(PTt,"not"),PTt.forEach(t),x7r=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bve=n(kQ,"CODE",{});var $Tt=s(Bve);k7r=r($Tt,"from_pretrained()"),$Tt.forEach(t),R7r=r(kQ,"to load the model weights."),kQ.forEach(t),S7r=i(Bi),xve=n(Bi,"P",{});var ITt=s(xve);P7r=r(ITt,"Examples:"),ITt.forEach(t),$7r=i(Bi),m(xL.$$.fragment,Bi),Bi.forEach(t),I7r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(kL.$$.fragment,Ia),N7r=i(Ia),kve=n(Ia,"P",{});var NTt=s(kve);D7r=r(NTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NTt.forEach(t),j7r=i(Ia),Nn=n(Ia,"P",{});var oE=s(Nn);q7r=r(oE,"The model class to instantiate is selected based on the "),Rve=n(oE,"CODE",{});var DTt=s(Rve);G7r=r(DTt,"model_type"),DTt.forEach(t),O7r=r(oE,` property of the config object (either
passed as an argument or loaded from `),Sve=n(oE,"CODE",{});var jTt=s(Sve);X7r=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),V7r=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(oE,"CODE",{});var qTt=s(Pve);z7r=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),W7r=r(oE,":"),oE.forEach(t),Q7r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);zM=n(Xo,"LI",{});var Oxe=s(zM);$ve=n(Oxe,"STRONG",{});var GTt=s($ve);H7r=r(GTt,"albert"),GTt.forEach(t),U7r=r(Oxe," \u2014 "),Pz=n(Oxe,"A",{href:!0});var OTt=s(Pz);J7r=r(OTt,"FlaxAlbertForMultipleChoice"),OTt.forEach(t),Y7r=r(Oxe," (ALBERT model)"),Oxe.forEach(t),K7r=i(Xo),WM=n(Xo,"LI",{});var Xxe=s(WM);Ive=n(Xxe,"STRONG",{});var XTt=s(Ive);Z7r=r(XTt,"bert"),XTt.forEach(t),e8r=r(Xxe," \u2014 "),$z=n(Xxe,"A",{href:!0});var VTt=s($z);o8r=r(VTt,"FlaxBertForMultipleChoice"),VTt.forEach(t),r8r=r(Xxe," (BERT model)"),Xxe.forEach(t),t8r=i(Xo),QM=n(Xo,"LI",{});var Vxe=s(QM);Nve=n(Vxe,"STRONG",{});var zTt=s(Nve);a8r=r(zTt,"big_bird"),zTt.forEach(t),n8r=r(Vxe," \u2014 "),Iz=n(Vxe,"A",{href:!0});var WTt=s(Iz);s8r=r(WTt,"FlaxBigBirdForMultipleChoice"),WTt.forEach(t),l8r=r(Vxe," (BigBird model)"),Vxe.forEach(t),i8r=i(Xo),HM=n(Xo,"LI",{});var zxe=s(HM);Dve=n(zxe,"STRONG",{});var QTt=s(Dve);d8r=r(QTt,"distilbert"),QTt.forEach(t),c8r=r(zxe," \u2014 "),Nz=n(zxe,"A",{href:!0});var HTt=s(Nz);f8r=r(HTt,"FlaxDistilBertForMultipleChoice"),HTt.forEach(t),m8r=r(zxe," (DistilBERT model)"),zxe.forEach(t),g8r=i(Xo),UM=n(Xo,"LI",{});var Wxe=s(UM);jve=n(Wxe,"STRONG",{});var UTt=s(jve);h8r=r(UTt,"electra"),UTt.forEach(t),p8r=r(Wxe," \u2014 "),Dz=n(Wxe,"A",{href:!0});var JTt=s(Dz);_8r=r(JTt,"FlaxElectraForMultipleChoice"),JTt.forEach(t),u8r=r(Wxe," (ELECTRA model)"),Wxe.forEach(t),b8r=i(Xo),JM=n(Xo,"LI",{});var Qxe=s(JM);qve=n(Qxe,"STRONG",{});var YTt=s(qve);v8r=r(YTt,"roberta"),YTt.forEach(t),T8r=r(Qxe," \u2014 "),jz=n(Qxe,"A",{href:!0});var KTt=s(jz);F8r=r(KTt,"FlaxRobertaForMultipleChoice"),KTt.forEach(t),C8r=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),M8r=i(Xo),YM=n(Xo,"LI",{});var Hxe=s(YM);Gve=n(Hxe,"STRONG",{});var ZTt=s(Gve);E8r=r(ZTt,"roformer"),ZTt.forEach(t),y8r=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var eFt=s(qz);w8r=r(eFt,"FlaxRoFormerForMultipleChoice"),eFt.forEach(t),A8r=r(Hxe," (RoFormer model)"),Hxe.forEach(t),L8r=i(Xo),KM=n(Xo,"LI",{});var Uxe=s(KM);Ove=n(Uxe,"STRONG",{});var oFt=s(Ove);B8r=r(oFt,"xlm-roberta"),oFt.forEach(t),x8r=r(Uxe," \u2014 "),Gz=n(Uxe,"A",{href:!0});var rFt=s(Gz);k8r=r(rFt,"FlaxXLMRobertaForMultipleChoice"),rFt.forEach(t),R8r=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),Xo.forEach(t),S8r=i(Ia),Xve=n(Ia,"P",{});var tFt=s(Xve);P8r=r(tFt,"Examples:"),tFt.forEach(t),$8r=i(Ia),m(RL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),URe=i(c),yf=n(c,"H2",{class:!0});var l$e=s(yf);ZM=n(l$e,"A",{id:!0,class:!0,href:!0});var aFt=s(ZM);Vve=n(aFt,"SPAN",{});var nFt=s(Vve);m(SL.$$.fragment,nFt),nFt.forEach(t),aFt.forEach(t),I8r=i(l$e),zve=n(l$e,"SPAN",{});var sFt=s(zve);N8r=r(sFt,"FlaxAutoModelForNextSentencePrediction"),sFt.forEach(t),l$e.forEach(t),JRe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(PL.$$.fragment,xi),D8r=i(xi),wf=n(xi,"P",{});var RQ=s(wf);j8r=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Wve=n(RQ,"CODE",{});var lFt=s(Wve);q8r=r(lFt,"from_pretrained()"),lFt.forEach(t),G8r=r(RQ,"class method or the "),Qve=n(RQ,"CODE",{});var iFt=s(Qve);O8r=r(iFt,"from_config()"),iFt.forEach(t),X8r=r(RQ,`class
method.`),RQ.forEach(t),V8r=i(xi),$L=n(xi,"P",{});var i$e=s($L);z8r=r(i$e,"This class cannot be instantiated directly using "),Hve=n(i$e,"CODE",{});var dFt=s(Hve);W8r=r(dFt,"__init__()"),dFt.forEach(t),Q8r=r(i$e," (throws an error)."),i$e.forEach(t),H8r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(IL.$$.fragment,ki),U8r=i(ki),Uve=n(ki,"P",{});var cFt=s(Uve);J8r=r(cFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cFt.forEach(t),Y8r=i(ki),Af=n(ki,"P",{});var SQ=s(Af);K8r=r(SQ,`Note:
Loading a model from its configuration file does `),Jve=n(SQ,"STRONG",{});var fFt=s(Jve);Z8r=r(fFt,"not"),fFt.forEach(t),eBr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yve=n(SQ,"CODE",{});var mFt=s(Yve);oBr=r(mFt,"from_pretrained()"),mFt.forEach(t),rBr=r(SQ,"to load the model weights."),SQ.forEach(t),tBr=i(ki),Kve=n(ki,"P",{});var gFt=s(Kve);aBr=r(gFt,"Examples:"),gFt.forEach(t),nBr=i(ki),m(NL.$$.fragment,ki),ki.forEach(t),sBr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(DL.$$.fragment,Na),lBr=i(Na),Zve=n(Na,"P",{});var hFt=s(Zve);iBr=r(hFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hFt.forEach(t),dBr=i(Na),Dn=n(Na,"P",{});var rE=s(Dn);cBr=r(rE,"The model class to instantiate is selected based on the "),e6e=n(rE,"CODE",{});var pFt=s(e6e);fBr=r(pFt,"model_type"),pFt.forEach(t),mBr=r(rE,` property of the config object (either
passed as an argument or loaded from `),o6e=n(rE,"CODE",{});var _Ft=s(o6e);gBr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),hBr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(rE,"CODE",{});var uFt=s(r6e);pBr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),_Br=r(rE,":"),rE.forEach(t),uBr=i(Na),t6e=n(Na,"UL",{});var bFt=s(t6e);e4=n(bFt,"LI",{});var Jxe=s(e4);a6e=n(Jxe,"STRONG",{});var vFt=s(a6e);bBr=r(vFt,"bert"),vFt.forEach(t),vBr=r(Jxe," \u2014 "),Oz=n(Jxe,"A",{href:!0});var TFt=s(Oz);TBr=r(TFt,"FlaxBertForNextSentencePrediction"),TFt.forEach(t),FBr=r(Jxe," (BERT model)"),Jxe.forEach(t),bFt.forEach(t),CBr=i(Na),n6e=n(Na,"P",{});var FFt=s(n6e);MBr=r(FFt,"Examples:"),FFt.forEach(t),EBr=i(Na),m(jL.$$.fragment,Na),Na.forEach(t),xi.forEach(t),YRe=i(c),Lf=n(c,"H2",{class:!0});var d$e=s(Lf);o4=n(d$e,"A",{id:!0,class:!0,href:!0});var CFt=s(o4);s6e=n(CFt,"SPAN",{});var MFt=s(s6e);m(qL.$$.fragment,MFt),MFt.forEach(t),CFt.forEach(t),yBr=i(d$e),l6e=n(d$e,"SPAN",{});var EFt=s(l6e);wBr=r(EFt,"FlaxAutoModelForImageClassification"),EFt.forEach(t),d$e.forEach(t),KRe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(GL.$$.fragment,Ri),ABr=i(Ri),Bf=n(Ri,"P",{});var PQ=s(Bf);LBr=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),i6e=n(PQ,"CODE",{});var yFt=s(i6e);BBr=r(yFt,"from_pretrained()"),yFt.forEach(t),xBr=r(PQ,"class method or the "),d6e=n(PQ,"CODE",{});var wFt=s(d6e);kBr=r(wFt,"from_config()"),wFt.forEach(t),RBr=r(PQ,`class
method.`),PQ.forEach(t),SBr=i(Ri),OL=n(Ri,"P",{});var c$e=s(OL);PBr=r(c$e,"This class cannot be instantiated directly using "),c6e=n(c$e,"CODE",{});var AFt=s(c6e);$Br=r(AFt,"__init__()"),AFt.forEach(t),IBr=r(c$e," (throws an error)."),c$e.forEach(t),NBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(XL.$$.fragment,Si),DBr=i(Si),f6e=n(Si,"P",{});var LFt=s(f6e);jBr=r(LFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LFt.forEach(t),qBr=i(Si),xf=n(Si,"P",{});var $Q=s(xf);GBr=r($Q,`Note:
Loading a model from its configuration file does `),m6e=n($Q,"STRONG",{});var BFt=s(m6e);OBr=r(BFt,"not"),BFt.forEach(t),XBr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),g6e=n($Q,"CODE",{});var xFt=s(g6e);VBr=r(xFt,"from_pretrained()"),xFt.forEach(t),zBr=r($Q,"to load the model weights."),$Q.forEach(t),WBr=i(Si),h6e=n(Si,"P",{});var kFt=s(h6e);QBr=r(kFt,"Examples:"),kFt.forEach(t),HBr=i(Si),m(VL.$$.fragment,Si),Si.forEach(t),UBr=i(Ri),No=n(Ri,"DIV",{class:!0});var Da=s(No);m(zL.$$.fragment,Da),JBr=i(Da),p6e=n(Da,"P",{});var RFt=s(p6e);YBr=r(RFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RFt.forEach(t),KBr=i(Da),jn=n(Da,"P",{});var tE=s(jn);ZBr=r(tE,"The model class to instantiate is selected based on the "),_6e=n(tE,"CODE",{});var SFt=s(_6e);exr=r(SFt,"model_type"),SFt.forEach(t),oxr=r(tE,` property of the config object (either
passed as an argument or loaded from `),u6e=n(tE,"CODE",{});var PFt=s(u6e);rxr=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),txr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(tE,"CODE",{});var $Ft=s(b6e);axr=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),nxr=r(tE,":"),tE.forEach(t),sxr=i(Da),WL=n(Da,"UL",{});var f$e=s(WL);r4=n(f$e,"LI",{});var Yxe=s(r4);v6e=n(Yxe,"STRONG",{});var IFt=s(v6e);lxr=r(IFt,"beit"),IFt.forEach(t),ixr=r(Yxe," \u2014 "),Xz=n(Yxe,"A",{href:!0});var NFt=s(Xz);dxr=r(NFt,"FlaxBeitForImageClassification"),NFt.forEach(t),cxr=r(Yxe," (BEiT model)"),Yxe.forEach(t),fxr=i(f$e),t4=n(f$e,"LI",{});var Kxe=s(t4);T6e=n(Kxe,"STRONG",{});var DFt=s(T6e);mxr=r(DFt,"vit"),DFt.forEach(t),gxr=r(Kxe," \u2014 "),Vz=n(Kxe,"A",{href:!0});var jFt=s(Vz);hxr=r(jFt,"FlaxViTForImageClassification"),jFt.forEach(t),pxr=r(Kxe," (ViT model)"),Kxe.forEach(t),f$e.forEach(t),_xr=i(Da),F6e=n(Da,"P",{});var qFt=s(F6e);uxr=r(qFt,"Examples:"),qFt.forEach(t),bxr=i(Da),m(QL.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),ZRe=i(c),kf=n(c,"H2",{class:!0});var m$e=s(kf);a4=n(m$e,"A",{id:!0,class:!0,href:!0});var GFt=s(a4);C6e=n(GFt,"SPAN",{});var OFt=s(C6e);m(HL.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),vxr=i(m$e),M6e=n(m$e,"SPAN",{});var XFt=s(M6e);Txr=r(XFt,"FlaxAutoModelForVision2Seq"),XFt.forEach(t),m$e.forEach(t),eSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(UL.$$.fragment,Pi),Fxr=i(Pi),Rf=n(Pi,"P",{});var IQ=s(Rf);Cxr=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),E6e=n(IQ,"CODE",{});var VFt=s(E6e);Mxr=r(VFt,"from_pretrained()"),VFt.forEach(t),Exr=r(IQ,"class method or the "),y6e=n(IQ,"CODE",{});var zFt=s(y6e);yxr=r(zFt,"from_config()"),zFt.forEach(t),wxr=r(IQ,`class
method.`),IQ.forEach(t),Axr=i(Pi),JL=n(Pi,"P",{});var g$e=s(JL);Lxr=r(g$e,"This class cannot be instantiated directly using "),w6e=n(g$e,"CODE",{});var WFt=s(w6e);Bxr=r(WFt,"__init__()"),WFt.forEach(t),xxr=r(g$e," (throws an error)."),g$e.forEach(t),kxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(YL.$$.fragment,$i),Rxr=i($i),A6e=n($i,"P",{});var QFt=s(A6e);Sxr=r(QFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QFt.forEach(t),Pxr=i($i),Sf=n($i,"P",{});var NQ=s(Sf);$xr=r(NQ,`Note:
Loading a model from its configuration file does `),L6e=n(NQ,"STRONG",{});var HFt=s(L6e);Ixr=r(HFt,"not"),HFt.forEach(t),Nxr=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),B6e=n(NQ,"CODE",{});var UFt=s(B6e);Dxr=r(UFt,"from_pretrained()"),UFt.forEach(t),jxr=r(NQ,"to load the model weights."),NQ.forEach(t),qxr=i($i),x6e=n($i,"P",{});var JFt=s(x6e);Gxr=r(JFt,"Examples:"),JFt.forEach(t),Oxr=i($i),m(KL.$$.fragment,$i),$i.forEach(t),Xxr=i(Pi),Do=n(Pi,"DIV",{class:!0});var ja=s(Do);m(ZL.$$.fragment,ja),Vxr=i(ja),k6e=n(ja,"P",{});var YFt=s(k6e);zxr=r(YFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YFt.forEach(t),Wxr=i(ja),qn=n(ja,"P",{});var aE=s(qn);Qxr=r(aE,"The model class to instantiate is selected based on the "),R6e=n(aE,"CODE",{});var KFt=s(R6e);Hxr=r(KFt,"model_type"),KFt.forEach(t),Uxr=r(aE,` property of the config object (either
passed as an argument or loaded from `),S6e=n(aE,"CODE",{});var ZFt=s(S6e);Jxr=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),Yxr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(aE,"CODE",{});var eCt=s(P6e);Kxr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),Zxr=r(aE,":"),aE.forEach(t),ekr=i(ja),$6e=n(ja,"UL",{});var oCt=s($6e);n4=n(oCt,"LI",{});var Zxe=s(n4);I6e=n(Zxe,"STRONG",{});var rCt=s(I6e);okr=r(rCt,"vision-encoder-decoder"),rCt.forEach(t),rkr=r(Zxe," \u2014 "),zz=n(Zxe,"A",{href:!0});var tCt=s(zz);tkr=r(tCt,"FlaxVisionEncoderDecoderModel"),tCt.forEach(t),akr=r(Zxe," (Vision Encoder decoder model)"),Zxe.forEach(t),oCt.forEach(t),nkr=i(ja),N6e=n(ja,"P",{});var aCt=s(N6e);skr=r(aCt,"Examples:"),aCt.forEach(t),lkr=i(ja),m(e7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(K,"name","hf:doc:metadata"),d(K,"content",JSON.stringify(hCt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(a8,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(n8,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertConfig"),d(s8,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartConfig"),d(l8,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitConfig"),d(i8,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertConfig"),d(d8,"href","/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(c8,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdConfig"),d(f8,"href","/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(m8,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(g8,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(h8,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertConfig"),d(p8,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineConfig"),d(_8,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPConfig"),d(u8,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertConfig"),d(b8,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextConfig"),d(v8,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLConfig"),d(T8,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(F8,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(C8,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaConfig"),d(M8,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(E8,"href","/docs/transformers/pr_16399/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(y8,"href","/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTConfig"),d(w8,"href","/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrConfig"),d(A8,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertConfig"),d(L8,"href","/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRConfig"),d(B8,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraConfig"),d(x8,"href","/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(k8,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertConfig"),d(R8,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetConfig"),d(S8,"href","/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTConfig"),d(P8,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelConfig"),d($8,"href","/docs/transformers/pr_16399/en/model_doc/glpn#transformers.GLPNConfig"),d(I8,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Config"),d(N8,"href","/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(D8,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJConfig"),d(j8,"href","/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertConfig"),d(q8,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertConfig"),d(G8,"href","/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(O8,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(X8,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(V8,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDConfig"),d(z8,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerConfig"),d(W8,"href","/docs/transformers/pr_16399/en/model_doc/luke#transformers.LukeConfig"),d(Q8,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertConfig"),d(H8,"href","/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100Config"),d(U8,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianConfig"),d(J8,"href","/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Y8,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartConfig"),d(K8,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Z8,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(eB,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetConfig"),d(oB,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Config"),d(rB,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(tB,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(aB,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusConfig"),d(nB,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverConfig"),d(sB,"href","/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartConfig"),d(lB,"href","/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(iB,"href","/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(dB,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(cB,"href","/docs/transformers/pr_16399/en/model_doc/rag#transformers.RagConfig"),d(fB,"href","/docs/transformers/pr_16399/en/model_doc/realm#transformers.RealmConfig"),d(mB,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerConfig"),d(gB,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertConfig"),d(hB,"href","/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetConfig"),d(pB,"href","/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertConfig"),d(_B,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaConfig"),d(uB,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerConfig"),d(bB,"href","/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerConfig"),d(vB,"href","/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWConfig"),d(TB,"href","/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDConfig"),d(FB,"href","/docs/transformers/pr_16399/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(CB,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(MB,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(EB,"href","/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterConfig"),d(yB,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(wB,"href","/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinConfig"),d(AB,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Config"),d(LB,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasConfig"),d(BB,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(xB,"href","/docs/transformers/pr_16399/en/model_doc/trocr#transformers.TrOCRConfig"),d(kB,"href","/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(RB,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(SB,"href","/docs/transformers/pr_16399/en/model_doc/van#transformers.VanConfig"),d(PB,"href","/docs/transformers/pr_16399/en/model_doc/vilt#transformers.ViltConfig"),d($B,"href","/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(IB,"href","/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(NB,"href","/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(DB,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTConfig"),d(jB,"href","/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(qB,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(GB,"href","/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMConfig"),d(OB,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMConfig"),d(XB,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMConfig"),d(VB,"href","/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(zB,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(WB,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(QB,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetConfig"),d(HB,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Sg,"class","docstring"),d(Wo,"class","docstring"),d(Pg,"id","transformers.AutoTokenizer"),d(Pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(UB,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(JB,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertTokenizer"),d(YB,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(KB,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartTokenizer"),d(ZB,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartTokenizerFast"),d(ex,"href","/docs/transformers/pr_16399/en/model_doc/barthez#transformers.BarthezTokenizer"),d(ox,"href","/docs/transformers/pr_16399/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(rx,"href","/docs/transformers/pr_16399/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(tx,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertTokenizer"),d(ax,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertTokenizerFast"),d(nx,"href","/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(sx,"href","/docs/transformers/pr_16399/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(lx,"href","/docs/transformers/pr_16399/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(ix,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(dx,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(cx,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(fx,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(mx,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(gx,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(hx,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(px,"href","/docs/transformers/pr_16399/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(_x,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertTokenizer"),d(ux,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(bx,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineTokenizer"),d(vx,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPTokenizer"),d(Tx,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Fx,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Cx,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Mx,"href","/docs/transformers/pr_16399/en/model_doc/cpm#transformers.CpmTokenizer"),d(Ex,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(yx,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaTokenizer"),d(wx,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ax,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Lx,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Bx,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(xx,"href","/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(kx,"href","/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Rx,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraTokenizer"),d(Sx,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Px,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d($x,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetTokenizer"),d(Ix,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Nx,"href","/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Dx,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelTokenizer"),d(jx,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(qx,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Gx,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Ox,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Xx,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Vx,"href","/docs/transformers/pr_16399/en/model_doc/herbert#transformers.HerbertTokenizer"),d(zx,"href","/docs/transformers/pr_16399/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Wx,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Qx,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Hx,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ux,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Jx,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Yx,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Kx,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Zx,"href","/docs/transformers/pr_16399/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ek,"href","/docs/transformers/pr_16399/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ok,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDTokenizer"),d(rk,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDTokenizerFast"),d(tk,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ak,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(nk,"href","/docs/transformers/pr_16399/en/model_doc/luke#transformers.LukeTokenizer"),d(sk,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(lk,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(ik,"href","/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(dk,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianTokenizer"),d(ck,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartTokenizer"),d(fk,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(mk,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(gk,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(hk,"href","/docs/transformers/pr_16399/en/model_doc/mluke#transformers.MLukeTokenizer"),d(pk,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(_k,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(uk,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(bk,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(vk,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.T5Tokenizer"),d(Tk,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Fk,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ck,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ek,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(yk,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(wk,"href","/docs/transformers/pr_16399/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Ak,"href","/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Lk,"href","/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Bk,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertTokenizer"),d(xk,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertTokenizerFast"),d(kk,"href","/docs/transformers/pr_16399/en/model_doc/rag#transformers.RagTokenizer"),d(Rk,"href","/docs/transformers/pr_16399/en/model_doc/realm#transformers.RealmTokenizer"),d(Sk,"href","/docs/transformers/pr_16399/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerTokenizer"),d($k,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Nk,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(jk,"href","/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(qk,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Gk,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Xk,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(zk,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Wk,"href","/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Qk,"href","/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Uk,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.T5Tokenizer"),d(Yk,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Kk,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasTokenizer"),d(Zk,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(eR,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(oR,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(rR,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMTokenizer"),d(tR,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(aR,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMTokenizer"),d(nR,"href","/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(sR,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(lR,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(iR,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(dR,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ch,"class","docstring"),d(Qo,"class","docstring"),d(fh,"id","transformers.AutoFeatureExtractor"),d(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(cR,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(fR,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(mR,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(gR,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(hR,"href","/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(pR,"href","/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(_R,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(uR,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(bR,"href","/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(kh,"class","docstring"),d(Ho,"class","docstring"),d(Rh,"id","transformers.AutoProcessor"),d(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(BR,"href","/docs/transformers/pr_16399/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(xR,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPProcessor"),d(kR,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(RR,"href","/docs/transformers/pr_16399/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(SR,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(PR,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d($R,"href","/docs/transformers/pr_16399/en/model_doc/trocr#transformers.TrOCRProcessor"),d(IR,"href","/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(NR,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Oh,"class","docstring"),d(Uo,"class","docstring"),d(Xh,"id","transformers.AutoModel"),d(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(DR,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertModel"),d(jR,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartModel"),d(qR,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitModel"),d(GR,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertModel"),d(OR,"href","/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(XR,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdModel"),d(VR,"href","/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(zR,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(WR,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(QR,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertModel"),d(HR,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineModel"),d(UR,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.CLIPModel"),d(JR,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertModel"),d(YR,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextModel"),d(KR,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLModel"),d(ZR,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(eS,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(oS,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaModel"),d(rS,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(tS,"href","/docs/transformers/pr_16399/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(aS,"href","/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTModel"),d(nS,"href","/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrModel"),d(sS,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertModel"),d(lS,"href","/docs/transformers/pr_16399/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(iS,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraModel"),d(dS,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertModel"),d(cS,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetModel"),d(fS,"href","/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTModel"),d(mS,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelModel"),d(gS,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelBaseModel"),d(hS,"href","/docs/transformers/pr_16399/en/model_doc/glpn#transformers.GLPNModel"),d(pS,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2Model"),d(_S,"href","/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(uS,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJModel"),d(bS,"href","/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertModel"),d(vS,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertModel"),d(TS,"href","/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(FS,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(CS,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(MS,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDModel"),d(ES,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerModel"),d(yS,"href","/docs/transformers/pr_16399/en/model_doc/luke#transformers.LukeModel"),d(wS,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertModel"),d(AS,"href","/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100Model"),d(LS,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianModel"),d(BS,"href","/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerModel"),d(xS,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartModel"),d(kS,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(RS,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertModel"),d(SS,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetModel"),d(PS,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5Model"),d($S,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerModel"),d(IS,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(NS,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusModel"),d(DS,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverModel"),d(jS,"href","/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartModel"),d(qS,"href","/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerModel"),d(GS,"href","/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(OS,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertModel"),d(XS,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerModel"),d(VS,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertModel"),d(zS,"href","/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetModel"),d(WS,"href","/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertModel"),d(QS,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaModel"),d(HS,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerModel"),d(US,"href","/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerModel"),d(JS,"href","/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWModel"),d(YS,"href","/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDModel"),d(KS,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(ZS,"href","/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterModel"),d(eP,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(oP,"href","/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinModel"),d(rP,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5Model"),d(tP,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasModel"),d(aP,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(nP,"href","/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechModel"),d(sP,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(lP,"href","/docs/transformers/pr_16399/en/model_doc/van#transformers.VanModel"),d(iP,"href","/docs/transformers/pr_16399/en/model_doc/vilt#transformers.ViltModel"),d(dP,"href","/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(cP,"href","/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertModel"),d(fP,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTModel"),d(mP,"href","/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(gP,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(hP,"href","/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMModel"),d(pP,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMModel"),d(_P,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMModel"),d(uP,"href","/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(bP,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(vP,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(TP,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetModel"),d(FP,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(A_,"id","transformers.AutoModelForPreTraining"),d(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(CP,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForPreTraining"),d(MP,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(EP,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForPreTraining"),d(yP,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(wP,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(AP,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(LP,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(BP,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(xP,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(kP,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(RP,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForPreTraining"),d(SP,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(PP,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForPreTraining"),d($P,"href","/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(IP,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(NP,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(DP,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jP,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(qP,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GP,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(OP,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(XP,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(VP,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(zP,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(WP,"href","/docs/transformers/pr_16399/en/model_doc/retribert#transformers.RetriBertModel"),d(QP,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(HP,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(UP,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(JP,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(YP,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(KP,"href","/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(ZP,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(e$,"href","/docs/transformers/pr_16399/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(o$,"href","/docs/transformers/pr_16399/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(r$,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(t$,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(a$,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(n$,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(s$,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(hu,"id","transformers.AutoModelForCausalLM"),d(hu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(l$,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForCausalLM"),d(i$,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertLMHeadModel"),d(d$,"href","/docs/transformers/pr_16399/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(c$,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(f$,"href","/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(m$,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(g$,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(h$,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(p$,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(_$,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(u$,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForCausalLM"),d(b$,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(v$,"href","/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(T$,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(F$,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianForCausalLM"),d(C$,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForCausalLM"),d(M$,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(E$,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(y$,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(w$,"href","/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(A$,"href","/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(L$,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(B$,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(x$,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(k$,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(R$,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(S$,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(P$,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($$,"href","/docs/transformers/pr_16399/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(I$,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(N$,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(D$,"href","/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(j$,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(q$,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(G$,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(Yu,"id","transformers.AutoModelForMaskedLM"),d(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yu,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(O$,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(X$,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(V$,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForMaskedLM"),d(z$,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(W$,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(H$,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(U$,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(J$,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(K$,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(eI,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(oI,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(rI,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(tI,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(aI,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(nI,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(sI,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(lI,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(iI,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(dI,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(cI,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(fI,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(gI,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(pI,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(_I,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(uI,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(bI,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(vI,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(TI,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(FI,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(P1,"id","transformers.AutoModelForSeq2SeqLM"),d(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(CI,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(MI,"href","/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(AI,"href","/docs/transformers/pr_16399/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16399/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.MarianMTModel"),d(kI,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d($I,"href","/docs/transformers/pr_16399/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(II,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_16399/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(K1,"id","transformers.AutoModelForSequenceClassification"),d(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(DI,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16399/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(W9,"id","transformers.AutoModelForMultipleChoice"),d(W9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W9,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(xN,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForMultipleChoice"),d($N,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(eD,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(oD,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(rD,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(tD,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(Cb,"id","transformers.AutoModelForNextSentencePrediction"),d(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(aD,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(nD,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Bb,"id","transformers.AutoModelForTokenClassification"),d(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(dD,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(cD,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForTokenClassification"),d(fD,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(mD,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(gD,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForTokenClassification"),d(hD,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(pD,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(_D,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(uD,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(bD,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(vD,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(TD,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(FD,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(CD,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(MD,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(ED,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(yD,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(wD,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(AD,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(LD,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(kD,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(RD,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(SD,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(PD,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d($D,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ID,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(ND,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(DD,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(jD,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(qD,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(GD,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(c3,"id","transformers.AutoModelForQuestionAnswering"),d(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c3,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(OD,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_16399/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_16399/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(rj,"href","/docs/transformers/pr_16399/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_16399/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_16399/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_16399/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_16399/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_16399/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_16399/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_16399/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_16399/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Mj,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(wj,"href","/docs/transformers/pr_16399/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(Y3,"id","transformers.AutoModelForTableQuestionAnswering"),d(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Aj,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(e2,"id","transformers.AutoModelForImageClassification"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(Lj,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitForImageClassification"),d(Bj,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(xj,"href","/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTForImageClassification"),d(kj,"href","/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Rj,"href","/docs/transformers/pr_16399/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Sj,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Pj,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d($j,"href","/docs/transformers/pr_16399/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Ij,"href","/docs/transformers/pr_16399/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Nj,"href","/docs/transformers/pr_16399/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Dj,"href","/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(jj,"href","/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinForImageClassification"),d(qj,"href","/docs/transformers/pr_16399/en/model_doc/van#transformers.VanForImageClassification"),d(Gj,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(f2,"id","transformers.AutoModelForVision2Seq"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Oj,"href","/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(h2,"id","transformers.AutoModelForAudioClassification"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Xj,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Vj,"href","/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(zj,"href","/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Uj,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Jj,"href","/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(E2,"id","transformers.AutoModelForAudioFrameClassification"),d(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(Yj,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Kj,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Zj,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(eq,"href","/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(x2,"id","transformers.AutoModelForCTC"),d(x2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(oq,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(rq,"href","/docs/transformers/pr_16399/en/model_doc/hubert#transformers.HubertForCTC"),d(tq,"href","/docs/transformers/pr_16399/en/model_doc/sew#transformers.SEWForCTC"),d(aq,"href","/docs/transformers/pr_16399/en/model_doc/sew-d#transformers.SEWDForCTC"),d(nq,"href","/docs/transformers/pr_16399/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(sq,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(lq,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(iq,"href","/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(q2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(dq,"href","/docs/transformers/pr_16399/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(cq,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(V2,"id","transformers.AutoModelForAudioXVector"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(fq,"href","/docs/transformers/pr_16399/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(mq,"href","/docs/transformers/pr_16399/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(gq,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(hq,"href","/docs/transformers/pr_16399/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(J2,"id","transformers.AutoModelForMaskedImageModeling"),d(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(pq,"href","/docs/transformers/pr_16399/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(_q,"href","/docs/transformers/pr_16399/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(uq,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(ov,"id","transformers.AutoModelForObjectDetection"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(bq,"href","/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(av,"id","transformers.AutoModelForImageSegmentation"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(vq,"href","/docs/transformers/pr_16399/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(lv,"id","transformers.AutoModelForSemanticSegmentation"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(Tq,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Fq,"href","/docs/transformers/pr_16399/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(fv,"id","transformers.AutoModelForInstanceSegmentation"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(mt,"class","docstring"),d(Cq,"href","/docs/transformers/pr_16399/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(hv,"id","transformers.TFAutoModel"),d(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hv,"href","#transformers.TFAutoModel"),d(mc,"class","relative group"),d(gt,"class","docstring"),d(Mq,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertModel"),d(Eq,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.TFBartModel"),d(yq,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertModel"),d(wq,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Aq,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Lq,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertModel"),d(Bq,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.TFCLIPModel"),d(xq,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertModel"),d(kq,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.TFConvNextModel"),d(Rq,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Sq,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaModel"),d(Pq,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d($q,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Iq,"href","/docs/transformers/pr_16399/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Nq,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraModel"),d(Dq,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(jq,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelModel"),d(qq,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Gq,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Oq,"href","/docs/transformers/pr_16399/en/model_doc/hubert#transformers.TFHubertModel"),d(Xq,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Vq,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.TFLEDModel"),d(zq,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerModel"),d(Wq,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Qq,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.TFMarianModel"),d(Hq,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.TFMBartModel"),d(Uq,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Jq,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Yq,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.TFMT5Model"),d(Kq,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Zq,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.TFPegasusModel"),d(eG,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertModel"),d(oG,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaModel"),d(rG,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerModel"),d(tG,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(aG,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.TFT5Model"),d(nG,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasModel"),d(sG,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(lG,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.TFViTModel"),d(iG,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(dG,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMModel"),d(cG,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(fG,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(r6,"id","transformers.TFAutoModelForPreTraining"),d(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r6,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(ht,"class","docstring"),d(mG,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(gG,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForPreTraining"),d(pG,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(_G,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(uG,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(bG,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(vG,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(TG,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(FG,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CG,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(MG,"href","/docs/transformers/pr_16399/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(EG,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(yG,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(wG,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(AG,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(LG,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(BG,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(xG,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(kG,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(RG,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(SG,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(y6,"id","transformers.TFAutoModelForCausalLM"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(pt,"class","docstring"),d(PG,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertLMHeadModel"),d($G,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(IG,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NG,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(DG,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(jG,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(qG,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(GG,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(OG,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(XG,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(VG,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(N6,"id","transformers.TFAutoModelForImageClassification"),d(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N6,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(_t,"class","docstring"),d(zG,"href","/docs/transformers/pr_16399/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(WG,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(q6,"id","transformers.TFAutoModelForMaskedLM"),d(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q6,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(ut,"class","docstring"),d(QG,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HG,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UG,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JG,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YG,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KG,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZG,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eO,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oO,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rO,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tO,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aO,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nO,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sO,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lO,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iO,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dO,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cO,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fO,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mO,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(lT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(gO,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hO,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(pO,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(_O,"href","/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(uO,"href","/docs/transformers/pr_16399/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(bO,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.TFMarianMTModel"),d(vO,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(TO,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(bT,"id","transformers.TFAutoModelForSequenceClassification"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(MO,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EO,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(yO,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wO,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AO,"href","/docs/transformers/pr_16399/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LO,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BO,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xO,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(kO,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(RO,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(PO,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($O,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16399/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(VO,"href","/docs/transformers/pr_16399/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zO,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WO,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QO,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(VT,"id","transformers.TFAutoModelForMultipleChoice"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(HO,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(UO,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(JO,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(YO,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(KO,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(ZO,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(eX,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(oX,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(rX,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(tX,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(aX,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(nX,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(lX,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(iX,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(dX,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(cX,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(iF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(fX,"href","/docs/transformers/pr_16399/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(cF,"id","transformers.TFAutoModelForTokenClassification"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.TFAutoModelForTokenClassification"),d(jc,"class","relative group"),d(Ct,"class","docstring"),d(mX,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(gX,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(hX,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(pX,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(_X,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(uX,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(bX,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(vX,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(TX,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(FX,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(CX,"href","/docs/transformers/pr_16399/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(MX,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(EX,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(yX,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(wX,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(LX,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(BX,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(xX,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(kX,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(kF,"id","transformers.TFAutoModelForQuestionAnswering"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(RX,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(SX,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(PX,"href","/docs/transformers/pr_16399/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d($X,"href","/docs/transformers/pr_16399/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_16399/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(NX,"href","/docs/transformers/pr_16399/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_16399/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(GX,"href","/docs/transformers/pr_16399/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_16399/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(XX,"href","/docs/transformers/pr_16399/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_16399/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_16399/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_16399/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(UX,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_16399/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(YF,"id","transformers.TFAutoModelForVision2Seq"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(YX,"href","/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(ZF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(KX,"href","/docs/transformers/pr_16399/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(oC,"id","transformers.FlaxAutoModel"),d(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oC,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(ZX,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertModel"),d(eV,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartModel"),d(oV,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.FlaxBeitModel"),d(rV,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertModel"),d(tV,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(aV,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(nV,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(sV,"href","/docs/transformers/pr_16399/en/model_doc/clip#transformers.FlaxCLIPModel"),d(lV,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(iV,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraModel"),d(dV,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(cV,"href","/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(fV,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(mV,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.FlaxMarianModel"),d(gV,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartModel"),d(hV,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.FlaxMT5Model"),d(pV,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(_V,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(uV,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(bV,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.FlaxT5Model"),d(vV,"href","/docs/transformers/pr_16399/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(TV,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.FlaxViTModel"),d(FV,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(CV,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(MV,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(AC,"id","transformers.FlaxAutoModelForCausalLM"),d(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AC,"href","#transformers.FlaxAutoModelForCausalLM"),d(ef,"class","relative group"),d(At,"class","docstring"),d(EV,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(yV,"href","/docs/transformers/pr_16399/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(wV,"href","/docs/transformers/pr_16399/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(AV,"href","/docs/transformers/pr_16399/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(LV,"href","/docs/transformers/pr_16399/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(SC,"id","transformers.FlaxAutoModelForPreTraining"),d(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SC,"href","#transformers.FlaxAutoModelForPreTraining"),d(tf,"class","relative group"),d(Lt,"class","docstring"),d(BV,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(xV,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(RV,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(SV,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(PV,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(NV,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(DV,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(jV,"href","/docs/transformers/pr_16399/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(qV,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(WC,"id","transformers.FlaxAutoModelForMaskedLM"),d(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sf,"class","relative group"),d(Bt,"class","docstring"),d(GV,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XV,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(VV,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(zV,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(QV,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(HV,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(UV,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(JV,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(tM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cf,"class","relative group"),d(xt,"class","docstring"),d(YV,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KV,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_16399/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_16399/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(oz,"href","/docs/transformers/pr_16399/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(rz,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_16399/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(az,"href","/docs/transformers/pr_16399/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_16399/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(gM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gf,"class","relative group"),d(kt,"class","docstring"),d(sz,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(EM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(_f,"class","relative group"),d(Rt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(uz,"href","/docs/transformers/pr_16399/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(bz,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vz,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Tz,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Fz,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Cz,"href","/docs/transformers/pr_16399/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Mz,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Ez,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d($M,"id","transformers.FlaxAutoModelForTokenClassification"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(St,"class","docstring"),d(wz,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Az,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(kz,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(VM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(Pt,"class","docstring"),d(Pz,"href","/docs/transformers/pr_16399/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d($z,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16399/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16399/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16399/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16399/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16399/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16399/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(ZM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d($t,"class","docstring"),d(Oz,"href","/docs/transformers/pr_16399/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(o4,"id","transformers.FlaxAutoModelForImageClassification"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(It,"class","docstring"),d(Xz,"href","/docs/transformers/pr_16399/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Vz,"href","/docs/transformers/pr_16399/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(a4,"id","transformers.FlaxAutoModelForVision2Seq"),d(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(kf,"class","relative group"),d(Nt,"class","docstring"),d(zz,"href","/docs/transformers/pr_16399/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,K),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(fe,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,If,u),b(c,fa,u),e(fa,Ni),e(fa,Di),e(Di,nE),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,sE),e(co,On),e(co,Xn),e(Xn,lE),e(co,qi),e(co,Vn),e(Vn,iE),e(co,Gi),b(c,Df,u),g(qa,c,u),b(c,fo,u),b(c,pe,u),e(pe,K7),e(pe,Oi),e(Oi,Z7),e(pe,e8),b(c,zo,u),b(c,Ga,u),e(Ga,o8),e(Ga,jf),e(jf,r8),e(Ga,h$e),b(c,eke,u),b(c,Xi,u),e(Xi,qf),e(qf,DQ),g(dE,DQ,null),e(Xi,p$e),e(Xi,jQ),e(jQ,_$e),b(c,oke,u),b(c,zn,u),e(zn,u$e),e(zn,qQ),e(qQ,b$e),e(zn,v$e),e(zn,GQ),e(GQ,T$e),e(zn,F$e),b(c,rke,u),g(cE,c,u),b(c,tke,u),b(c,t8,u),e(t8,C$e),b(c,ake,u),g(Gf,c,u),b(c,nke,u),b(c,Vi,u),e(Vi,Of),e(Of,OQ),g(fE,OQ,null),e(Vi,M$e),e(Vi,XQ),e(XQ,E$e),b(c,ske,u),b(c,Wo,u),g(mE,Wo,null),e(Wo,y$e),e(Wo,gE),e(gE,w$e),e(gE,a8),e(a8,A$e),e(gE,L$e),e(Wo,B$e),e(Wo,hE),e(hE,x$e),e(hE,VQ),e(VQ,k$e),e(hE,R$e),e(Wo,S$e),e(Wo,mo),g(pE,mo,null),e(mo,P$e),e(mo,zQ),e(zQ,$$e),e(mo,I$e),e(mo,zi),e(zi,N$e),e(zi,WQ),e(WQ,D$e),e(zi,j$e),e(zi,QQ),e(QQ,q$e),e(zi,G$e),e(mo,O$e),e(mo,v),e(v,Xf),e(Xf,HQ),e(HQ,X$e),e(Xf,V$e),e(Xf,n8),e(n8,z$e),e(Xf,W$e),e(v,Q$e),e(v,Vf),e(Vf,UQ),e(UQ,H$e),e(Vf,U$e),e(Vf,s8),e(s8,J$e),e(Vf,Y$e),e(v,K$e),e(v,zf),e(zf,JQ),e(JQ,Z$e),e(zf,eIe),e(zf,l8),e(l8,oIe),e(zf,rIe),e(v,tIe),e(v,Wf),e(Wf,YQ),e(YQ,aIe),e(Wf,nIe),e(Wf,i8),e(i8,sIe),e(Wf,lIe),e(v,iIe),e(v,Qf),e(Qf,KQ),e(KQ,dIe),e(Qf,cIe),e(Qf,d8),e(d8,fIe),e(Qf,mIe),e(v,gIe),e(v,Hf),e(Hf,ZQ),e(ZQ,hIe),e(Hf,pIe),e(Hf,c8),e(c8,_Ie),e(Hf,uIe),e(v,bIe),e(v,Uf),e(Uf,eH),e(eH,vIe),e(Uf,TIe),e(Uf,f8),e(f8,FIe),e(Uf,CIe),e(v,MIe),e(v,Jf),e(Jf,oH),e(oH,EIe),e(Jf,yIe),e(Jf,m8),e(m8,wIe),e(Jf,AIe),e(v,LIe),e(v,Yf),e(Yf,rH),e(rH,BIe),e(Yf,xIe),e(Yf,g8),e(g8,kIe),e(Yf,RIe),e(v,SIe),e(v,Kf),e(Kf,tH),e(tH,PIe),e(Kf,$Ie),e(Kf,h8),e(h8,IIe),e(Kf,NIe),e(v,DIe),e(v,Zf),e(Zf,aH),e(aH,jIe),e(Zf,qIe),e(Zf,p8),e(p8,GIe),e(Zf,OIe),e(v,XIe),e(v,em),e(em,nH),e(nH,VIe),e(em,zIe),e(em,_8),e(_8,WIe),e(em,QIe),e(v,HIe),e(v,om),e(om,sH),e(sH,UIe),e(om,JIe),e(om,u8),e(u8,YIe),e(om,KIe),e(v,ZIe),e(v,rm),e(rm,lH),e(lH,eNe),e(rm,oNe),e(rm,b8),e(b8,rNe),e(rm,tNe),e(v,aNe),e(v,tm),e(tm,iH),e(iH,nNe),e(tm,sNe),e(tm,v8),e(v8,lNe),e(tm,iNe),e(v,dNe),e(v,am),e(am,dH),e(dH,cNe),e(am,fNe),e(am,T8),e(T8,mNe),e(am,gNe),e(v,hNe),e(v,nm),e(nm,cH),e(cH,pNe),e(nm,_Ne),e(nm,F8),e(F8,uNe),e(nm,bNe),e(v,vNe),e(v,sm),e(sm,fH),e(fH,TNe),e(sm,FNe),e(sm,C8),e(C8,CNe),e(sm,MNe),e(v,ENe),e(v,lm),e(lm,mH),e(mH,yNe),e(lm,wNe),e(lm,M8),e(M8,ANe),e(lm,LNe),e(v,BNe),e(v,im),e(im,gH),e(gH,xNe),e(im,kNe),e(im,E8),e(E8,RNe),e(im,SNe),e(v,PNe),e(v,dm),e(dm,hH),e(hH,$Ne),e(dm,INe),e(dm,y8),e(y8,NNe),e(dm,DNe),e(v,jNe),e(v,cm),e(cm,pH),e(pH,qNe),e(cm,GNe),e(cm,w8),e(w8,ONe),e(cm,XNe),e(v,VNe),e(v,fm),e(fm,_H),e(_H,zNe),e(fm,WNe),e(fm,A8),e(A8,QNe),e(fm,HNe),e(v,UNe),e(v,mm),e(mm,uH),e(uH,JNe),e(mm,YNe),e(mm,L8),e(L8,KNe),e(mm,ZNe),e(v,eDe),e(v,gm),e(gm,bH),e(bH,oDe),e(gm,rDe),e(gm,B8),e(B8,tDe),e(gm,aDe),e(v,nDe),e(v,hm),e(hm,vH),e(vH,sDe),e(hm,lDe),e(hm,x8),e(x8,iDe),e(hm,dDe),e(v,cDe),e(v,pm),e(pm,TH),e(TH,fDe),e(pm,mDe),e(pm,k8),e(k8,gDe),e(pm,hDe),e(v,pDe),e(v,_m),e(_m,FH),e(FH,_De),e(_m,uDe),e(_m,R8),e(R8,bDe),e(_m,vDe),e(v,TDe),e(v,um),e(um,CH),e(CH,FDe),e(um,CDe),e(um,S8),e(S8,MDe),e(um,EDe),e(v,yDe),e(v,bm),e(bm,MH),e(MH,wDe),e(bm,ADe),e(bm,P8),e(P8,LDe),e(bm,BDe),e(v,xDe),e(v,vm),e(vm,EH),e(EH,kDe),e(vm,RDe),e(vm,$8),e($8,SDe),e(vm,PDe),e(v,$De),e(v,Tm),e(Tm,yH),e(yH,IDe),e(Tm,NDe),e(Tm,I8),e(I8,DDe),e(Tm,jDe),e(v,qDe),e(v,Fm),e(Fm,wH),e(wH,GDe),e(Fm,ODe),e(Fm,N8),e(N8,XDe),e(Fm,VDe),e(v,zDe),e(v,Cm),e(Cm,AH),e(AH,WDe),e(Cm,QDe),e(Cm,D8),e(D8,HDe),e(Cm,UDe),e(v,JDe),e(v,Mm),e(Mm,LH),e(LH,YDe),e(Mm,KDe),e(Mm,j8),e(j8,ZDe),e(Mm,eje),e(v,oje),e(v,Em),e(Em,BH),e(BH,rje),e(Em,tje),e(Em,q8),e(q8,aje),e(Em,nje),e(v,sje),e(v,ym),e(ym,xH),e(xH,lje),e(ym,ije),e(ym,G8),e(G8,dje),e(ym,cje),e(v,fje),e(v,wm),e(wm,kH),e(kH,mje),e(wm,gje),e(wm,O8),e(O8,hje),e(wm,pje),e(v,_je),e(v,Am),e(Am,RH),e(RH,uje),e(Am,bje),e(Am,X8),e(X8,vje),e(Am,Tje),e(v,Fje),e(v,Lm),e(Lm,SH),e(SH,Cje),e(Lm,Mje),e(Lm,V8),e(V8,Eje),e(Lm,yje),e(v,wje),e(v,Bm),e(Bm,PH),e(PH,Aje),e(Bm,Lje),e(Bm,z8),e(z8,Bje),e(Bm,xje),e(v,kje),e(v,xm),e(xm,$H),e($H,Rje),e(xm,Sje),e(xm,W8),e(W8,Pje),e(xm,$je),e(v,Ije),e(v,km),e(km,IH),e(IH,Nje),e(km,Dje),e(km,Q8),e(Q8,jje),e(km,qje),e(v,Gje),e(v,Rm),e(Rm,NH),e(NH,Oje),e(Rm,Xje),e(Rm,H8),e(H8,Vje),e(Rm,zje),e(v,Wje),e(v,Sm),e(Sm,DH),e(DH,Qje),e(Sm,Hje),e(Sm,U8),e(U8,Uje),e(Sm,Jje),e(v,Yje),e(v,Pm),e(Pm,jH),e(jH,Kje),e(Pm,Zje),e(Pm,J8),e(J8,eqe),e(Pm,oqe),e(v,rqe),e(v,$m),e($m,qH),e(qH,tqe),e($m,aqe),e($m,Y8),e(Y8,nqe),e($m,sqe),e(v,lqe),e(v,Im),e(Im,GH),e(GH,iqe),e(Im,dqe),e(Im,K8),e(K8,cqe),e(Im,fqe),e(v,mqe),e(v,Nm),e(Nm,OH),e(OH,gqe),e(Nm,hqe),e(Nm,Z8),e(Z8,pqe),e(Nm,_qe),e(v,uqe),e(v,Dm),e(Dm,XH),e(XH,bqe),e(Dm,vqe),e(Dm,eB),e(eB,Tqe),e(Dm,Fqe),e(v,Cqe),e(v,jm),e(jm,VH),e(VH,Mqe),e(jm,Eqe),e(jm,oB),e(oB,yqe),e(jm,wqe),e(v,Aqe),e(v,qm),e(qm,zH),e(zH,Lqe),e(qm,Bqe),e(qm,rB),e(rB,xqe),e(qm,kqe),e(v,Rqe),e(v,Gm),e(Gm,WH),e(WH,Sqe),e(Gm,Pqe),e(Gm,tB),e(tB,$qe),e(Gm,Iqe),e(v,Nqe),e(v,Om),e(Om,QH),e(QH,Dqe),e(Om,jqe),e(Om,aB),e(aB,qqe),e(Om,Gqe),e(v,Oqe),e(v,Xm),e(Xm,HH),e(HH,Xqe),e(Xm,Vqe),e(Xm,nB),e(nB,zqe),e(Xm,Wqe),e(v,Qqe),e(v,Vm),e(Vm,UH),e(UH,Hqe),e(Vm,Uqe),e(Vm,sB),e(sB,Jqe),e(Vm,Yqe),e(v,Kqe),e(v,zm),e(zm,JH),e(JH,Zqe),e(zm,eGe),e(zm,lB),e(lB,oGe),e(zm,rGe),e(v,tGe),e(v,Wm),e(Wm,YH),e(YH,aGe),e(Wm,nGe),e(Wm,iB),e(iB,sGe),e(Wm,lGe),e(v,iGe),e(v,Qm),e(Qm,KH),e(KH,dGe),e(Qm,cGe),e(Qm,dB),e(dB,fGe),e(Qm,mGe),e(v,gGe),e(v,Hm),e(Hm,ZH),e(ZH,hGe),e(Hm,pGe),e(Hm,cB),e(cB,_Ge),e(Hm,uGe),e(v,bGe),e(v,Um),e(Um,eU),e(eU,vGe),e(Um,TGe),e(Um,fB),e(fB,FGe),e(Um,CGe),e(v,MGe),e(v,Jm),e(Jm,oU),e(oU,EGe),e(Jm,yGe),e(Jm,mB),e(mB,wGe),e(Jm,AGe),e(v,LGe),e(v,Ym),e(Ym,rU),e(rU,BGe),e(Ym,xGe),e(Ym,gB),e(gB,kGe),e(Ym,RGe),e(v,SGe),e(v,Km),e(Km,tU),e(tU,PGe),e(Km,$Ge),e(Km,hB),e(hB,IGe),e(Km,NGe),e(v,DGe),e(v,Zm),e(Zm,aU),e(aU,jGe),e(Zm,qGe),e(Zm,pB),e(pB,GGe),e(Zm,OGe),e(v,XGe),e(v,eg),e(eg,nU),e(nU,VGe),e(eg,zGe),e(eg,_B),e(_B,WGe),e(eg,QGe),e(v,HGe),e(v,og),e(og,sU),e(sU,UGe),e(og,JGe),e(og,uB),e(uB,YGe),e(og,KGe),e(v,ZGe),e(v,rg),e(rg,lU),e(lU,eOe),e(rg,oOe),e(rg,bB),e(bB,rOe),e(rg,tOe),e(v,aOe),e(v,tg),e(tg,iU),e(iU,nOe),e(tg,sOe),e(tg,vB),e(vB,lOe),e(tg,iOe),e(v,dOe),e(v,ag),e(ag,dU),e(dU,cOe),e(ag,fOe),e(ag,TB),e(TB,mOe),e(ag,gOe),e(v,hOe),e(v,ng),e(ng,cU),e(cU,pOe),e(ng,_Oe),e(ng,FB),e(FB,uOe),e(ng,bOe),e(v,vOe),e(v,sg),e(sg,fU),e(fU,TOe),e(sg,FOe),e(sg,CB),e(CB,COe),e(sg,MOe),e(v,EOe),e(v,lg),e(lg,mU),e(mU,yOe),e(lg,wOe),e(lg,MB),e(MB,AOe),e(lg,LOe),e(v,BOe),e(v,ig),e(ig,gU),e(gU,xOe),e(ig,kOe),e(ig,EB),e(EB,ROe),e(ig,SOe),e(v,POe),e(v,dg),e(dg,hU),e(hU,$Oe),e(dg,IOe),e(dg,yB),e(yB,NOe),e(dg,DOe),e(v,jOe),e(v,cg),e(cg,pU),e(pU,qOe),e(cg,GOe),e(cg,wB),e(wB,OOe),e(cg,XOe),e(v,VOe),e(v,fg),e(fg,_U),e(_U,zOe),e(fg,WOe),e(fg,AB),e(AB,QOe),e(fg,HOe),e(v,UOe),e(v,mg),e(mg,uU),e(uU,JOe),e(mg,YOe),e(mg,LB),e(LB,KOe),e(mg,ZOe),e(v,eXe),e(v,gg),e(gg,bU),e(bU,oXe),e(gg,rXe),e(gg,BB),e(BB,tXe),e(gg,aXe),e(v,nXe),e(v,hg),e(hg,vU),e(vU,sXe),e(hg,lXe),e(hg,xB),e(xB,iXe),e(hg,dXe),e(v,cXe),e(v,pg),e(pg,TU),e(TU,fXe),e(pg,mXe),e(pg,kB),e(kB,gXe),e(pg,hXe),e(v,pXe),e(v,_g),e(_g,FU),e(FU,_Xe),e(_g,uXe),e(_g,RB),e(RB,bXe),e(_g,vXe),e(v,TXe),e(v,ug),e(ug,CU),e(CU,FXe),e(ug,CXe),e(ug,SB),e(SB,MXe),e(ug,EXe),e(v,yXe),e(v,bg),e(bg,MU),e(MU,wXe),e(bg,AXe),e(bg,PB),e(PB,LXe),e(bg,BXe),e(v,xXe),e(v,vg),e(vg,EU),e(EU,kXe),e(vg,RXe),e(vg,$B),e($B,SXe),e(vg,PXe),e(v,$Xe),e(v,Tg),e(Tg,yU),e(yU,IXe),e(Tg,NXe),e(Tg,IB),e(IB,DXe),e(Tg,jXe),e(v,qXe),e(v,Fg),e(Fg,wU),e(wU,GXe),e(Fg,OXe),e(Fg,NB),e(NB,XXe),e(Fg,VXe),e(v,zXe),e(v,Cg),e(Cg,AU),e(AU,WXe),e(Cg,QXe),e(Cg,DB),e(DB,HXe),e(Cg,UXe),e(v,JXe),e(v,Mg),e(Mg,LU),e(LU,YXe),e(Mg,KXe),e(Mg,jB),e(jB,ZXe),e(Mg,eVe),e(v,oVe),e(v,Eg),e(Eg,BU),e(BU,rVe),e(Eg,tVe),e(Eg,qB),e(qB,aVe),e(Eg,nVe),e(v,sVe),e(v,yg),e(yg,xU),e(xU,lVe),e(yg,iVe),e(yg,GB),e(GB,dVe),e(yg,cVe),e(v,fVe),e(v,wg),e(wg,kU),e(kU,mVe),e(wg,gVe),e(wg,OB),e(OB,hVe),e(wg,pVe),e(v,_Ve),e(v,Ag),e(Ag,RU),e(RU,uVe),e(Ag,bVe),e(Ag,XB),e(XB,vVe),e(Ag,TVe),e(v,FVe),e(v,Lg),e(Lg,SU),e(SU,CVe),e(Lg,MVe),e(Lg,VB),e(VB,EVe),e(Lg,yVe),e(v,wVe),e(v,Bg),e(Bg,PU),e(PU,AVe),e(Bg,LVe),e(Bg,zB),e(zB,BVe),e(Bg,xVe),e(v,kVe),e(v,xg),e(xg,$U),e($U,RVe),e(xg,SVe),e(xg,WB),e(WB,PVe),e(xg,$Ve),e(v,IVe),e(v,kg),e(kg,IU),e(IU,NVe),e(kg,DVe),e(kg,QB),e(QB,jVe),e(kg,qVe),e(v,GVe),e(v,Rg),e(Rg,NU),e(NU,OVe),e(Rg,XVe),e(Rg,HB),e(HB,VVe),e(Rg,zVe),e(mo,WVe),e(mo,DU),e(DU,QVe),e(mo,HVe),g(_E,mo,null),e(Wo,UVe),e(Wo,Sg),g(uE,Sg,null),e(Sg,JVe),e(Sg,jU),e(jU,YVe),b(c,lke,u),b(c,Wi,u),e(Wi,Pg),e(Pg,qU),g(bE,qU,null),e(Wi,KVe),e(Wi,GU),e(GU,ZVe),b(c,ike,u),b(c,Qo,u),g(vE,Qo,null),e(Qo,eze),e(Qo,TE),e(TE,oze),e(TE,UB),e(UB,rze),e(TE,tze),e(Qo,aze),e(Qo,FE),e(FE,nze),e(FE,OU),e(OU,sze),e(FE,lze),e(Qo,ize),e(Qo,go),g(CE,go,null),e(go,dze),e(go,XU),e(XU,cze),e(go,fze),e(go,Oa),e(Oa,mze),e(Oa,VU),e(VU,gze),e(Oa,hze),e(Oa,zU),e(zU,pze),e(Oa,_ze),e(Oa,WU),e(WU,uze),e(Oa,bze),e(go,vze),e(go,E),e(E,Wn),e(Wn,QU),e(QU,Tze),e(Wn,Fze),e(Wn,JB),e(JB,Cze),e(Wn,Mze),e(Wn,YB),e(YB,Eze),e(Wn,yze),e(E,wze),e(E,Qn),e(Qn,HU),e(HU,Aze),e(Qn,Lze),e(Qn,KB),e(KB,Bze),e(Qn,xze),e(Qn,ZB),e(ZB,kze),e(Qn,Rze),e(E,Sze),e(E,Hn),e(Hn,UU),e(UU,Pze),e(Hn,$ze),e(Hn,ex),e(ex,Ize),e(Hn,Nze),e(Hn,ox),e(ox,Dze),e(Hn,jze),e(E,qze),e(E,$g),e($g,JU),e(JU,Gze),e($g,Oze),e($g,rx),e(rx,Xze),e($g,Vze),e(E,zze),e(E,Un),e(Un,YU),e(YU,Wze),e(Un,Qze),e(Un,tx),e(tx,Hze),e(Un,Uze),e(Un,ax),e(ax,Jze),e(Un,Yze),e(E,Kze),e(E,Ig),e(Ig,KU),e(KU,Zze),e(Ig,eWe),e(Ig,nx),e(nx,oWe),e(Ig,rWe),e(E,tWe),e(E,Ng),e(Ng,ZU),e(ZU,aWe),e(Ng,nWe),e(Ng,sx),e(sx,sWe),e(Ng,lWe),e(E,iWe),e(E,Dg),e(Dg,eJ),e(eJ,dWe),e(Dg,cWe),e(Dg,lx),e(lx,fWe),e(Dg,mWe),e(E,gWe),e(E,Jn),e(Jn,oJ),e(oJ,hWe),e(Jn,pWe),e(Jn,ix),e(ix,_We),e(Jn,uWe),e(Jn,dx),e(dx,bWe),e(Jn,vWe),e(E,TWe),e(E,Yn),e(Yn,rJ),e(rJ,FWe),e(Yn,CWe),e(Yn,cx),e(cx,MWe),e(Yn,EWe),e(Yn,fx),e(fx,yWe),e(Yn,wWe),e(E,AWe),e(E,Kn),e(Kn,tJ),e(tJ,LWe),e(Kn,BWe),e(Kn,mx),e(mx,xWe),e(Kn,kWe),e(Kn,gx),e(gx,RWe),e(Kn,SWe),e(E,PWe),e(E,jg),e(jg,aJ),e(aJ,$We),e(jg,IWe),e(jg,hx),e(hx,NWe),e(jg,DWe),e(E,jWe),e(E,qg),e(qg,nJ),e(nJ,qWe),e(qg,GWe),e(qg,px),e(px,OWe),e(qg,XWe),e(E,VWe),e(E,Zn),e(Zn,sJ),e(sJ,zWe),e(Zn,WWe),e(Zn,_x),e(_x,QWe),e(Zn,HWe),e(Zn,ux),e(ux,UWe),e(Zn,JWe),e(E,YWe),e(E,Gg),e(Gg,lJ),e(lJ,KWe),e(Gg,ZWe),e(Gg,bx),e(bx,eQe),e(Gg,oQe),e(E,rQe),e(E,es),e(es,iJ),e(iJ,tQe),e(es,aQe),e(es,vx),e(vx,nQe),e(es,sQe),e(es,Tx),e(Tx,lQe),e(es,iQe),e(E,dQe),e(E,os),e(os,dJ),e(dJ,cQe),e(os,fQe),e(os,Fx),e(Fx,mQe),e(os,gQe),e(os,Cx),e(Cx,hQe),e(os,pQe),e(E,_Qe),e(E,rs),e(rs,cJ),e(cJ,uQe),e(rs,bQe),e(rs,Mx),e(Mx,vQe),e(rs,TQe),e(rs,fJ),e(fJ,FQe),e(rs,CQe),e(E,MQe),e(E,Og),e(Og,mJ),e(mJ,EQe),e(Og,yQe),e(Og,Ex),e(Ex,wQe),e(Og,AQe),e(E,LQe),e(E,ts),e(ts,gJ),e(gJ,BQe),e(ts,xQe),e(ts,yx),e(yx,kQe),e(ts,RQe),e(ts,wx),e(wx,SQe),e(ts,PQe),e(E,$Qe),e(E,Xg),e(Xg,hJ),e(hJ,IQe),e(Xg,NQe),e(Xg,Ax),e(Ax,DQe),e(Xg,jQe),e(E,qQe),e(E,as),e(as,pJ),e(pJ,GQe),e(as,OQe),e(as,Lx),e(Lx,XQe),e(as,VQe),e(as,Bx),e(Bx,zQe),e(as,WQe),e(E,QQe),e(E,ns),e(ns,_J),e(_J,HQe),e(ns,UQe),e(ns,xx),e(xx,JQe),e(ns,YQe),e(ns,kx),e(kx,KQe),e(ns,ZQe),e(E,eHe),e(E,ss),e(ss,uJ),e(uJ,oHe),e(ss,rHe),e(ss,Rx),e(Rx,tHe),e(ss,aHe),e(ss,Sx),e(Sx,nHe),e(ss,sHe),e(E,lHe),e(E,Vg),e(Vg,bJ),e(bJ,iHe),e(Vg,dHe),e(Vg,Px),e(Px,cHe),e(Vg,fHe),e(E,mHe),e(E,ls),e(ls,vJ),e(vJ,gHe),e(ls,hHe),e(ls,$x),e($x,pHe),e(ls,_He),e(ls,Ix),e(Ix,uHe),e(ls,bHe),e(E,vHe),e(E,zg),e(zg,TJ),e(TJ,THe),e(zg,FHe),e(zg,Nx),e(Nx,CHe),e(zg,MHe),e(E,EHe),e(E,is),e(is,FJ),e(FJ,yHe),e(is,wHe),e(is,Dx),e(Dx,AHe),e(is,LHe),e(is,jx),e(jx,BHe),e(is,xHe),e(E,kHe),e(E,ds),e(ds,CJ),e(CJ,RHe),e(ds,SHe),e(ds,qx),e(qx,PHe),e(ds,$He),e(ds,Gx),e(Gx,IHe),e(ds,NHe),e(E,DHe),e(E,cs),e(cs,MJ),e(MJ,jHe),e(cs,qHe),e(cs,Ox),e(Ox,GHe),e(cs,OHe),e(cs,Xx),e(Xx,XHe),e(cs,VHe),e(E,zHe),e(E,fs),e(fs,EJ),e(EJ,WHe),e(fs,QHe),e(fs,Vx),e(Vx,HHe),e(fs,UHe),e(fs,zx),e(zx,JHe),e(fs,YHe),e(E,KHe),e(E,Wg),e(Wg,yJ),e(yJ,ZHe),e(Wg,eUe),e(Wg,Wx),e(Wx,oUe),e(Wg,rUe),e(E,tUe),e(E,ms),e(ms,wJ),e(wJ,aUe),e(ms,nUe),e(ms,Qx),e(Qx,sUe),e(ms,lUe),e(ms,Hx),e(Hx,iUe),e(ms,dUe),e(E,cUe),e(E,gs),e(gs,AJ),e(AJ,fUe),e(gs,mUe),e(gs,Ux),e(Ux,gUe),e(gs,hUe),e(gs,Jx),e(Jx,pUe),e(gs,_Ue),e(E,uUe),e(E,hs),e(hs,LJ),e(LJ,bUe),e(hs,vUe),e(hs,Yx),e(Yx,TUe),e(hs,FUe),e(hs,Kx),e(Kx,CUe),e(hs,MUe),e(E,EUe),e(E,ps),e(ps,BJ),e(BJ,yUe),e(ps,wUe),e(ps,Zx),e(Zx,AUe),e(ps,LUe),e(ps,ek),e(ek,BUe),e(ps,xUe),e(E,kUe),e(E,_s),e(_s,xJ),e(xJ,RUe),e(_s,SUe),e(_s,ok),e(ok,PUe),e(_s,$Ue),e(_s,rk),e(rk,IUe),e(_s,NUe),e(E,DUe),e(E,us),e(us,kJ),e(kJ,jUe),e(us,qUe),e(us,tk),e(tk,GUe),e(us,OUe),e(us,ak),e(ak,XUe),e(us,VUe),e(E,zUe),e(E,Qg),e(Qg,RJ),e(RJ,WUe),e(Qg,QUe),e(Qg,nk),e(nk,HUe),e(Qg,UUe),e(E,JUe),e(E,bs),e(bs,SJ),e(SJ,YUe),e(bs,KUe),e(bs,sk),e(sk,ZUe),e(bs,eJe),e(bs,lk),e(lk,oJe),e(bs,rJe),e(E,tJe),e(E,Hg),e(Hg,PJ),e(PJ,aJe),e(Hg,nJe),e(Hg,ik),e(ik,sJe),e(Hg,lJe),e(E,iJe),e(E,Ug),e(Ug,$J),e($J,dJe),e(Ug,cJe),e(Ug,dk),e(dk,fJe),e(Ug,mJe),e(E,gJe),e(E,vs),e(vs,IJ),e(IJ,hJe),e(vs,pJe),e(vs,ck),e(ck,_Je),e(vs,uJe),e(vs,fk),e(fk,bJe),e(vs,vJe),e(E,TJe),e(E,Ts),e(Ts,NJ),e(NJ,FJe),e(Ts,CJe),e(Ts,mk),e(mk,MJe),e(Ts,EJe),e(Ts,gk),e(gk,yJe),e(Ts,wJe),e(E,AJe),e(E,Jg),e(Jg,DJ),e(DJ,LJe),e(Jg,BJe),e(Jg,hk),e(hk,xJe),e(Jg,kJe),e(E,RJe),e(E,Fs),e(Fs,jJ),e(jJ,SJe),e(Fs,PJe),e(Fs,pk),e(pk,$Je),e(Fs,IJe),e(Fs,_k),e(_k,NJe),e(Fs,DJe),e(E,jJe),e(E,Cs),e(Cs,qJ),e(qJ,qJe),e(Cs,GJe),e(Cs,uk),e(uk,OJe),e(Cs,XJe),e(Cs,bk),e(bk,VJe),e(Cs,zJe),e(E,WJe),e(E,Ms),e(Ms,GJ),e(GJ,QJe),e(Ms,HJe),e(Ms,vk),e(vk,UJe),e(Ms,JJe),e(Ms,Tk),e(Tk,YJe),e(Ms,KJe),e(E,ZJe),e(E,Es),e(Es,OJ),e(OJ,eYe),e(Es,oYe),e(Es,Fk),e(Fk,rYe),e(Es,tYe),e(Es,Ck),e(Ck,aYe),e(Es,nYe),e(E,sYe),e(E,ys),e(ys,XJ),e(XJ,lYe),e(ys,iYe),e(ys,Mk),e(Mk,dYe),e(ys,cYe),e(ys,Ek),e(Ek,fYe),e(ys,mYe),e(E,gYe),e(E,Yg),e(Yg,VJ),e(VJ,hYe),e(Yg,pYe),e(Yg,yk),e(yk,_Ye),e(Yg,uYe),e(E,bYe),e(E,Kg),e(Kg,zJ),e(zJ,vYe),e(Kg,TYe),e(Kg,wk),e(wk,FYe),e(Kg,CYe),e(E,MYe),e(E,Zg),e(Zg,WJ),e(WJ,EYe),e(Zg,yYe),e(Zg,Ak),e(Ak,wYe),e(Zg,AYe),e(E,LYe),e(E,eh),e(eh,QJ),e(QJ,BYe),e(eh,xYe),e(eh,Lk),e(Lk,kYe),e(eh,RYe),e(E,SYe),e(E,ws),e(ws,HJ),e(HJ,PYe),e(ws,$Ye),e(ws,Bk),e(Bk,IYe),e(ws,NYe),e(ws,xk),e(xk,DYe),e(ws,jYe),e(E,qYe),e(E,oh),e(oh,UJ),e(UJ,GYe),e(oh,OYe),e(oh,kk),e(kk,XYe),e(oh,VYe),e(E,zYe),e(E,As),e(As,JJ),e(JJ,WYe),e(As,QYe),e(As,Rk),e(Rk,HYe),e(As,UYe),e(As,Sk),e(Sk,JYe),e(As,YYe),e(E,KYe),e(E,Ls),e(Ls,YJ),e(YJ,ZYe),e(Ls,eKe),e(Ls,Pk),e(Pk,oKe),e(Ls,rKe),e(Ls,$k),e($k,tKe),e(Ls,aKe),e(E,nKe),e(E,Bs),e(Bs,KJ),e(KJ,sKe),e(Bs,lKe),e(Bs,Ik),e(Ik,iKe),e(Bs,dKe),e(Bs,Nk),e(Nk,cKe),e(Bs,fKe),e(E,mKe),e(E,xs),e(xs,ZJ),e(ZJ,gKe),e(xs,hKe),e(xs,Dk),e(Dk,pKe),e(xs,_Ke),e(xs,jk),e(jk,uKe),e(xs,bKe),e(E,vKe),e(E,ks),e(ks,eY),e(eY,TKe),e(ks,FKe),e(ks,qk),e(qk,CKe),e(ks,MKe),e(ks,Gk),e(Gk,EKe),e(ks,yKe),e(E,wKe),e(E,Rs),e(Rs,oY),e(oY,AKe),e(Rs,LKe),e(Rs,Ok),e(Ok,BKe),e(Rs,xKe),e(Rs,Xk),e(Xk,kKe),e(Rs,RKe),e(E,SKe),e(E,rh),e(rh,rY),e(rY,PKe),e(rh,$Ke),e(rh,Vk),e(Vk,IKe),e(rh,NKe),e(E,DKe),e(E,th),e(th,tY),e(tY,jKe),e(th,qKe),e(th,zk),e(zk,GKe),e(th,OKe),e(E,XKe),e(E,Ss),e(Ss,aY),e(aY,VKe),e(Ss,zKe),e(Ss,Wk),e(Wk,WKe),e(Ss,QKe),e(Ss,Qk),e(Qk,HKe),e(Ss,UKe),e(E,JKe),e(E,Ps),e(Ps,nY),e(nY,YKe),e(Ps,KKe),e(Ps,Hk),e(Hk,ZKe),e(Ps,eZe),e(Ps,Uk),e(Uk,oZe),e(Ps,rZe),e(E,tZe),e(E,$s),e($s,sY),e(sY,aZe),e($s,nZe),e($s,Jk),e(Jk,sZe),e($s,lZe),e($s,Yk),e(Yk,iZe),e($s,dZe),e(E,cZe),e(E,ah),e(ah,lY),e(lY,fZe),e(ah,mZe),e(ah,Kk),e(Kk,gZe),e(ah,hZe),e(E,pZe),e(E,nh),e(nh,iY),e(iY,_Ze),e(nh,uZe),e(nh,Zk),e(Zk,bZe),e(nh,vZe),e(E,TZe),e(E,sh),e(sh,dY),e(dY,FZe),e(sh,CZe),e(sh,eR),e(eR,MZe),e(sh,EZe),e(E,yZe),e(E,lh),e(lh,cY),e(cY,wZe),e(lh,AZe),e(lh,oR),e(oR,LZe),e(lh,BZe),e(E,xZe),e(E,Is),e(Is,fY),e(fY,kZe),e(Is,RZe),e(Is,rR),e(rR,SZe),e(Is,PZe),e(Is,tR),e(tR,$Ze),e(Is,IZe),e(E,NZe),e(E,ih),e(ih,mY),e(mY,DZe),e(ih,jZe),e(ih,aR),e(aR,qZe),e(ih,GZe),e(E,OZe),e(E,dh),e(dh,gY),e(gY,XZe),e(dh,VZe),e(dh,nR),e(nR,zZe),e(dh,WZe),e(E,QZe),e(E,Ns),e(Ns,hY),e(hY,HZe),e(Ns,UZe),e(Ns,sR),e(sR,JZe),e(Ns,YZe),e(Ns,lR),e(lR,KZe),e(Ns,ZZe),e(E,eeo),e(E,Ds),e(Ds,pY),e(pY,oeo),e(Ds,reo),e(Ds,iR),e(iR,teo),e(Ds,aeo),e(Ds,dR),e(dR,neo),e(Ds,seo),e(go,leo),e(go,_Y),e(_Y,ieo),e(go,deo),g(ME,go,null),e(Qo,ceo),e(Qo,ch),g(EE,ch,null),e(ch,feo),e(ch,uY),e(uY,meo),b(c,dke,u),b(c,Qi,u),e(Qi,fh),e(fh,bY),g(yE,bY,null),e(Qi,geo),e(Qi,vY),e(vY,heo),b(c,cke,u),b(c,Ho,u),g(wE,Ho,null),e(Ho,peo),e(Ho,AE),e(AE,_eo),e(AE,cR),e(cR,ueo),e(AE,beo),e(Ho,veo),e(Ho,LE),e(LE,Teo),e(LE,TY),e(TY,Feo),e(LE,Ceo),e(Ho,Meo),e(Ho,$e),g(BE,$e,null),e($e,Eeo),e($e,FY),e(FY,yeo),e($e,weo),e($e,Xa),e(Xa,Aeo),e(Xa,CY),e(CY,Leo),e(Xa,Beo),e(Xa,MY),e(MY,xeo),e(Xa,keo),e(Xa,EY),e(EY,Reo),e(Xa,Seo),e($e,Peo),e($e,re),e(re,mh),e(mh,yY),e(yY,$eo),e(mh,Ieo),e(mh,fR),e(fR,Neo),e(mh,Deo),e(re,jeo),e(re,gh),e(gh,wY),e(wY,qeo),e(gh,Geo),e(gh,mR),e(mR,Oeo),e(gh,Xeo),e(re,Veo),e(re,hh),e(hh,AY),e(AY,zeo),e(hh,Weo),e(hh,gR),e(gR,Qeo),e(hh,Heo),e(re,Ueo),e(re,ph),e(ph,LY),e(LY,Jeo),e(ph,Yeo),e(ph,hR),e(hR,Keo),e(ph,Zeo),e(re,eoo),e(re,_h),e(_h,BY),e(BY,ooo),e(_h,roo),e(_h,pR),e(pR,too),e(_h,aoo),e(re,noo),e(re,uh),e(uh,xY),e(xY,soo),e(uh,loo),e(uh,_R),e(_R,ioo),e(uh,doo),e(re,coo),e(re,bh),e(bh,kY),e(kY,foo),e(bh,moo),e(bh,uR),e(uR,goo),e(bh,hoo),e(re,poo),e(re,vh),e(vh,RY),e(RY,_oo),e(vh,uoo),e(vh,bR),e(bR,boo),e(vh,voo),e(re,Too),e(re,Th),e(Th,SY),e(SY,Foo),e(Th,Coo),e(Th,vR),e(vR,Moo),e(Th,Eoo),e(re,yoo),e(re,Fh),e(Fh,PY),e(PY,woo),e(Fh,Aoo),e(Fh,TR),e(TR,Loo),e(Fh,Boo),e(re,xoo),e(re,Ch),e(Ch,$Y),e($Y,koo),e(Ch,Roo),e(Ch,FR),e(FR,Soo),e(Ch,Poo),e(re,$oo),e(re,Mh),e(Mh,IY),e(IY,Ioo),e(Mh,Noo),e(Mh,CR),e(CR,Doo),e(Mh,joo),e(re,qoo),e(re,Eh),e(Eh,NY),e(NY,Goo),e(Eh,Ooo),e(Eh,MR),e(MR,Xoo),e(Eh,Voo),e(re,zoo),e(re,yh),e(yh,DY),e(DY,Woo),e(yh,Qoo),e(yh,ER),e(ER,Hoo),e(yh,Uoo),e(re,Joo),e(re,wh),e(wh,jY),e(jY,Yoo),e(wh,Koo),e(wh,yR),e(yR,Zoo),e(wh,ero),e(re,oro),e(re,Ah),e(Ah,qY),e(qY,rro),e(Ah,tro),e(Ah,wR),e(wR,aro),e(Ah,nro),e(re,sro),e(re,Lh),e(Lh,GY),e(GY,lro),e(Lh,iro),e(Lh,AR),e(AR,dro),e(Lh,cro),e(re,fro),e(re,Bh),e(Bh,OY),e(OY,mro),e(Bh,gro),e(Bh,LR),e(LR,hro),e(Bh,pro),e($e,_ro),g(xh,$e,null),e($e,uro),e($e,XY),e(XY,bro),e($e,vro),g(xE,$e,null),e(Ho,Tro),e(Ho,kh),g(kE,kh,null),e(kh,Fro),e(kh,VY),e(VY,Cro),b(c,fke,u),b(c,Hi,u),e(Hi,Rh),e(Rh,zY),g(RE,zY,null),e(Hi,Mro),e(Hi,WY),e(WY,Ero),b(c,mke,u),b(c,Uo,u),g(SE,Uo,null),e(Uo,yro),e(Uo,PE),e(PE,wro),e(PE,BR),e(BR,Aro),e(PE,Lro),e(Uo,Bro),e(Uo,$E),e($E,xro),e($E,QY),e(QY,kro),e($E,Rro),e(Uo,Sro),e(Uo,Ie),g(IE,Ie,null),e(Ie,Pro),e(Ie,HY),e(HY,$ro),e(Ie,Iro),e(Ie,Ui),e(Ui,Nro),e(Ui,UY),e(UY,Dro),e(Ui,jro),e(Ui,JY),e(JY,qro),e(Ui,Gro),e(Ie,Oro),e(Ie,xe),e(xe,Sh),e(Sh,YY),e(YY,Xro),e(Sh,Vro),e(Sh,xR),e(xR,zro),e(Sh,Wro),e(xe,Qro),e(xe,Ph),e(Ph,KY),e(KY,Hro),e(Ph,Uro),e(Ph,kR),e(kR,Jro),e(Ph,Yro),e(xe,Kro),e(xe,$h),e($h,ZY),e(ZY,Zro),e($h,eto),e($h,RR),e(RR,oto),e($h,rto),e(xe,tto),e(xe,Ih),e(Ih,eK),e(eK,ato),e(Ih,nto),e(Ih,SR),e(SR,sto),e(Ih,lto),e(xe,ito),e(xe,Nh),e(Nh,oK),e(oK,dto),e(Nh,cto),e(Nh,PR),e(PR,fto),e(Nh,mto),e(xe,gto),e(xe,Dh),e(Dh,rK),e(rK,hto),e(Dh,pto),e(Dh,$R),e($R,_to),e(Dh,uto),e(xe,bto),e(xe,jh),e(jh,tK),e(tK,vto),e(jh,Tto),e(jh,IR),e(IR,Fto),e(jh,Cto),e(xe,Mto),e(xe,qh),e(qh,aK),e(aK,Eto),e(qh,yto),e(qh,NR),e(NR,wto),e(qh,Ato),e(Ie,Lto),g(Gh,Ie,null),e(Ie,Bto),e(Ie,nK),e(nK,xto),e(Ie,kto),g(NE,Ie,null),e(Uo,Rto),e(Uo,Oh),g(DE,Oh,null),e(Oh,Sto),e(Oh,sK),e(sK,Pto),b(c,gke,u),b(c,Ji,u),e(Ji,Xh),e(Xh,lK),g(jE,lK,null),e(Ji,$to),e(Ji,iK),e(iK,Ito),b(c,hke,u),b(c,Jo,u),g(qE,Jo,null),e(Jo,Nto),e(Jo,Yi),e(Yi,Dto),e(Yi,dK),e(dK,jto),e(Yi,qto),e(Yi,cK),e(cK,Gto),e(Yi,Oto),e(Jo,Xto),e(Jo,GE),e(GE,Vto),e(GE,fK),e(fK,zto),e(GE,Wto),e(Jo,Qto),e(Jo,Vr),g(OE,Vr,null),e(Vr,Hto),e(Vr,mK),e(mK,Uto),e(Vr,Jto),e(Vr,Ki),e(Ki,Yto),e(Ki,gK),e(gK,Kto),e(Ki,Zto),e(Ki,hK),e(hK,eao),e(Ki,oao),e(Vr,rao),e(Vr,pK),e(pK,tao),e(Vr,aao),g(XE,Vr,null),e(Jo,nao),e(Jo,Ne),g(VE,Ne,null),e(Ne,sao),e(Ne,_K),e(_K,lao),e(Ne,iao),e(Ne,Va),e(Va,dao),e(Va,uK),e(uK,cao),e(Va,fao),e(Va,bK),e(bK,mao),e(Va,gao),e(Va,vK),e(vK,hao),e(Va,pao),e(Ne,_ao),e(Ne,F),e(F,Vh),e(Vh,TK),e(TK,uao),e(Vh,bao),e(Vh,DR),e(DR,vao),e(Vh,Tao),e(F,Fao),e(F,zh),e(zh,FK),e(FK,Cao),e(zh,Mao),e(zh,jR),e(jR,Eao),e(zh,yao),e(F,wao),e(F,Wh),e(Wh,CK),e(CK,Aao),e(Wh,Lao),e(Wh,qR),e(qR,Bao),e(Wh,xao),e(F,kao),e(F,Qh),e(Qh,MK),e(MK,Rao),e(Qh,Sao),e(Qh,GR),e(GR,Pao),e(Qh,$ao),e(F,Iao),e(F,Hh),e(Hh,EK),e(EK,Nao),e(Hh,Dao),e(Hh,OR),e(OR,jao),e(Hh,qao),e(F,Gao),e(F,Uh),e(Uh,yK),e(yK,Oao),e(Uh,Xao),e(Uh,XR),e(XR,Vao),e(Uh,zao),e(F,Wao),e(F,Jh),e(Jh,wK),e(wK,Qao),e(Jh,Hao),e(Jh,VR),e(VR,Uao),e(Jh,Jao),e(F,Yao),e(F,Yh),e(Yh,AK),e(AK,Kao),e(Yh,Zao),e(Yh,zR),e(zR,eno),e(Yh,ono),e(F,rno),e(F,Kh),e(Kh,LK),e(LK,tno),e(Kh,ano),e(Kh,WR),e(WR,nno),e(Kh,sno),e(F,lno),e(F,Zh),e(Zh,BK),e(BK,ino),e(Zh,dno),e(Zh,QR),e(QR,cno),e(Zh,fno),e(F,mno),e(F,ep),e(ep,xK),e(xK,gno),e(ep,hno),e(ep,HR),e(HR,pno),e(ep,_no),e(F,uno),e(F,op),e(op,kK),e(kK,bno),e(op,vno),e(op,UR),e(UR,Tno),e(op,Fno),e(F,Cno),e(F,rp),e(rp,RK),e(RK,Mno),e(rp,Eno),e(rp,JR),e(JR,yno),e(rp,wno),e(F,Ano),e(F,tp),e(tp,SK),e(SK,Lno),e(tp,Bno),e(tp,YR),e(YR,xno),e(tp,kno),e(F,Rno),e(F,ap),e(ap,PK),e(PK,Sno),e(ap,Pno),e(ap,KR),e(KR,$no),e(ap,Ino),e(F,Nno),e(F,np),e(np,$K),e($K,Dno),e(np,jno),e(np,ZR),e(ZR,qno),e(np,Gno),e(F,Ono),e(F,sp),e(sp,IK),e(IK,Xno),e(sp,Vno),e(sp,eS),e(eS,zno),e(sp,Wno),e(F,Qno),e(F,lp),e(lp,NK),e(NK,Hno),e(lp,Uno),e(lp,oS),e(oS,Jno),e(lp,Yno),e(F,Kno),e(F,ip),e(ip,DK),e(DK,Zno),e(ip,eso),e(ip,rS),e(rS,oso),e(ip,rso),e(F,tso),e(F,dp),e(dp,jK),e(jK,aso),e(dp,nso),e(dp,tS),e(tS,sso),e(dp,lso),e(F,iso),e(F,cp),e(cp,qK),e(qK,dso),e(cp,cso),e(cp,aS),e(aS,fso),e(cp,mso),e(F,gso),e(F,fp),e(fp,GK),e(GK,hso),e(fp,pso),e(fp,nS),e(nS,_so),e(fp,uso),e(F,bso),e(F,mp),e(mp,OK),e(OK,vso),e(mp,Tso),e(mp,sS),e(sS,Fso),e(mp,Cso),e(F,Mso),e(F,gp),e(gp,XK),e(XK,Eso),e(gp,yso),e(gp,lS),e(lS,wso),e(gp,Aso),e(F,Lso),e(F,hp),e(hp,VK),e(VK,Bso),e(hp,xso),e(hp,iS),e(iS,kso),e(hp,Rso),e(F,Sso),e(F,pp),e(pp,zK),e(zK,Pso),e(pp,$so),e(pp,dS),e(dS,Iso),e(pp,Nso),e(F,Dso),e(F,_p),e(_p,WK),e(WK,jso),e(_p,qso),e(_p,cS),e(cS,Gso),e(_p,Oso),e(F,Xso),e(F,up),e(up,QK),e(QK,Vso),e(up,zso),e(up,fS),e(fS,Wso),e(up,Qso),e(F,Hso),e(F,js),e(js,HK),e(HK,Uso),e(js,Jso),e(js,mS),e(mS,Yso),e(js,Kso),e(js,gS),e(gS,Zso),e(js,elo),e(F,olo),e(F,bp),e(bp,UK),e(UK,rlo),e(bp,tlo),e(bp,hS),e(hS,alo),e(bp,nlo),e(F,slo),e(F,vp),e(vp,JK),e(JK,llo),e(vp,ilo),e(vp,pS),e(pS,dlo),e(vp,clo),e(F,flo),e(F,Tp),e(Tp,YK),e(YK,mlo),e(Tp,glo),e(Tp,_S),e(_S,hlo),e(Tp,plo),e(F,_lo),e(F,Fp),e(Fp,KK),e(KK,ulo),e(Fp,blo),e(Fp,uS),e(uS,vlo),e(Fp,Tlo),e(F,Flo),e(F,Cp),e(Cp,ZK),e(ZK,Clo),e(Cp,Mlo),e(Cp,bS),e(bS,Elo),e(Cp,ylo),e(F,wlo),e(F,Mp),e(Mp,eZ),e(eZ,Alo),e(Mp,Llo),e(Mp,vS),e(vS,Blo),e(Mp,xlo),e(F,klo),e(F,Ep),e(Ep,oZ),e(oZ,Rlo),e(Ep,Slo),e(Ep,TS),e(TS,Plo),e(Ep,$lo),e(F,Ilo),e(F,yp),e(yp,rZ),e(rZ,Nlo),e(yp,Dlo),e(yp,FS),e(FS,jlo),e(yp,qlo),e(F,Glo),e(F,wp),e(wp,tZ),e(tZ,Olo),e(wp,Xlo),e(wp,CS),e(CS,Vlo),e(wp,zlo),e(F,Wlo),e(F,Ap),e(Ap,aZ),e(aZ,Qlo),e(Ap,Hlo),e(Ap,MS),e(MS,Ulo),e(Ap,Jlo),e(F,Ylo),e(F,Lp),e(Lp,nZ),e(nZ,Klo),e(Lp,Zlo),e(Lp,ES),e(ES,eio),e(Lp,oio),e(F,rio),e(F,Bp),e(Bp,sZ),e(sZ,tio),e(Bp,aio),e(Bp,yS),e(yS,nio),e(Bp,sio),e(F,lio),e(F,xp),e(xp,lZ),e(lZ,iio),e(xp,dio),e(xp,wS),e(wS,cio),e(xp,fio),e(F,mio),e(F,kp),e(kp,iZ),e(iZ,gio),e(kp,hio),e(kp,AS),e(AS,pio),e(kp,_io),e(F,uio),e(F,Rp),e(Rp,dZ),e(dZ,bio),e(Rp,vio),e(Rp,LS),e(LS,Tio),e(Rp,Fio),e(F,Cio),e(F,Sp),e(Sp,cZ),e(cZ,Mio),e(Sp,Eio),e(Sp,BS),e(BS,yio),e(Sp,wio),e(F,Aio),e(F,Pp),e(Pp,fZ),e(fZ,Lio),e(Pp,Bio),e(Pp,xS),e(xS,xio),e(Pp,kio),e(F,Rio),e(F,$p),e($p,mZ),e(mZ,Sio),e($p,Pio),e($p,kS),e(kS,$io),e($p,Iio),e(F,Nio),e(F,Ip),e(Ip,gZ),e(gZ,Dio),e(Ip,jio),e(Ip,RS),e(RS,qio),e(Ip,Gio),e(F,Oio),e(F,Np),e(Np,hZ),e(hZ,Xio),e(Np,Vio),e(Np,SS),e(SS,zio),e(Np,Wio),e(F,Qio),e(F,Dp),e(Dp,pZ),e(pZ,Hio),e(Dp,Uio),e(Dp,PS),e(PS,Jio),e(Dp,Yio),e(F,Kio),e(F,jp),e(jp,_Z),e(_Z,Zio),e(jp,edo),e(jp,$S),e($S,odo),e(jp,rdo),e(F,tdo),e(F,qp),e(qp,uZ),e(uZ,ado),e(qp,ndo),e(qp,IS),e(IS,sdo),e(qp,ldo),e(F,ido),e(F,Gp),e(Gp,bZ),e(bZ,ddo),e(Gp,cdo),e(Gp,NS),e(NS,fdo),e(Gp,mdo),e(F,gdo),e(F,Op),e(Op,vZ),e(vZ,hdo),e(Op,pdo),e(Op,DS),e(DS,_do),e(Op,udo),e(F,bdo),e(F,Xp),e(Xp,TZ),e(TZ,vdo),e(Xp,Tdo),e(Xp,jS),e(jS,Fdo),e(Xp,Cdo),e(F,Mdo),e(F,Vp),e(Vp,FZ),e(FZ,Edo),e(Vp,ydo),e(Vp,qS),e(qS,wdo),e(Vp,Ado),e(F,Ldo),e(F,zp),e(zp,CZ),e(CZ,Bdo),e(zp,xdo),e(zp,GS),e(GS,kdo),e(zp,Rdo),e(F,Sdo),e(F,Wp),e(Wp,MZ),e(MZ,Pdo),e(Wp,$do),e(Wp,OS),e(OS,Ido),e(Wp,Ndo),e(F,Ddo),e(F,Qp),e(Qp,EZ),e(EZ,jdo),e(Qp,qdo),e(Qp,XS),e(XS,Gdo),e(Qp,Odo),e(F,Xdo),e(F,Hp),e(Hp,yZ),e(yZ,Vdo),e(Hp,zdo),e(Hp,VS),e(VS,Wdo),e(Hp,Qdo),e(F,Hdo),e(F,Up),e(Up,wZ),e(wZ,Udo),e(Up,Jdo),e(Up,zS),e(zS,Ydo),e(Up,Kdo),e(F,Zdo),e(F,Jp),e(Jp,AZ),e(AZ,eco),e(Jp,oco),e(Jp,WS),e(WS,rco),e(Jp,tco),e(F,aco),e(F,Yp),e(Yp,LZ),e(LZ,nco),e(Yp,sco),e(Yp,QS),e(QS,lco),e(Yp,ico),e(F,dco),e(F,Kp),e(Kp,BZ),e(BZ,cco),e(Kp,fco),e(Kp,HS),e(HS,mco),e(Kp,gco),e(F,hco),e(F,Zp),e(Zp,xZ),e(xZ,pco),e(Zp,_co),e(Zp,US),e(US,uco),e(Zp,bco),e(F,vco),e(F,e_),e(e_,kZ),e(kZ,Tco),e(e_,Fco),e(e_,JS),e(JS,Cco),e(e_,Mco),e(F,Eco),e(F,o_),e(o_,RZ),e(RZ,yco),e(o_,wco),e(o_,YS),e(YS,Aco),e(o_,Lco),e(F,Bco),e(F,r_),e(r_,SZ),e(SZ,xco),e(r_,kco),e(r_,KS),e(KS,Rco),e(r_,Sco),e(F,Pco),e(F,t_),e(t_,PZ),e(PZ,$co),e(t_,Ico),e(t_,ZS),e(ZS,Nco),e(t_,Dco),e(F,jco),e(F,a_),e(a_,$Z),e($Z,qco),e(a_,Gco),e(a_,eP),e(eP,Oco),e(a_,Xco),e(F,Vco),e(F,n_),e(n_,IZ),e(IZ,zco),e(n_,Wco),e(n_,oP),e(oP,Qco),e(n_,Hco),e(F,Uco),e(F,s_),e(s_,NZ),e(NZ,Jco),e(s_,Yco),e(s_,rP),e(rP,Kco),e(s_,Zco),e(F,efo),e(F,l_),e(l_,DZ),e(DZ,ofo),e(l_,rfo),e(l_,tP),e(tP,tfo),e(l_,afo),e(F,nfo),e(F,i_),e(i_,jZ),e(jZ,sfo),e(i_,lfo),e(i_,aP),e(aP,ifo),e(i_,dfo),e(F,cfo),e(F,d_),e(d_,qZ),e(qZ,ffo),e(d_,mfo),e(d_,nP),e(nP,gfo),e(d_,hfo),e(F,pfo),e(F,c_),e(c_,GZ),e(GZ,_fo),e(c_,ufo),e(c_,sP),e(sP,bfo),e(c_,vfo),e(F,Tfo),e(F,f_),e(f_,OZ),e(OZ,Ffo),e(f_,Cfo),e(f_,lP),e(lP,Mfo),e(f_,Efo),e(F,yfo),e(F,m_),e(m_,XZ),e(XZ,wfo),e(m_,Afo),e(m_,iP),e(iP,Lfo),e(m_,Bfo),e(F,xfo),e(F,g_),e(g_,VZ),e(VZ,kfo),e(g_,Rfo),e(g_,dP),e(dP,Sfo),e(g_,Pfo),e(F,$fo),e(F,h_),e(h_,zZ),e(zZ,Ifo),e(h_,Nfo),e(h_,cP),e(cP,Dfo),e(h_,jfo),e(F,qfo),e(F,p_),e(p_,WZ),e(WZ,Gfo),e(p_,Ofo),e(p_,fP),e(fP,Xfo),e(p_,Vfo),e(F,zfo),e(F,__),e(__,QZ),e(QZ,Wfo),e(__,Qfo),e(__,mP),e(mP,Hfo),e(__,Ufo),e(F,Jfo),e(F,u_),e(u_,HZ),e(HZ,Yfo),e(u_,Kfo),e(u_,gP),e(gP,Zfo),e(u_,emo),e(F,omo),e(F,b_),e(b_,UZ),e(UZ,rmo),e(b_,tmo),e(b_,hP),e(hP,amo),e(b_,nmo),e(F,smo),e(F,v_),e(v_,JZ),e(JZ,lmo),e(v_,imo),e(v_,pP),e(pP,dmo),e(v_,cmo),e(F,fmo),e(F,T_),e(T_,YZ),e(YZ,mmo),e(T_,gmo),e(T_,_P),e(_P,hmo),e(T_,pmo),e(F,_mo),e(F,F_),e(F_,KZ),e(KZ,umo),e(F_,bmo),e(F_,uP),e(uP,vmo),e(F_,Tmo),e(F,Fmo),e(F,C_),e(C_,ZZ),e(ZZ,Cmo),e(C_,Mmo),e(C_,bP),e(bP,Emo),e(C_,ymo),e(F,wmo),e(F,M_),e(M_,eee),e(eee,Amo),e(M_,Lmo),e(M_,vP),e(vP,Bmo),e(M_,xmo),e(F,kmo),e(F,E_),e(E_,oee),e(oee,Rmo),e(E_,Smo),e(E_,TP),e(TP,Pmo),e(E_,$mo),e(F,Imo),e(F,y_),e(y_,ree),e(ree,Nmo),e(y_,Dmo),e(y_,FP),e(FP,jmo),e(y_,qmo),e(Ne,Gmo),e(Ne,w_),e(w_,Omo),e(w_,tee),e(tee,Xmo),e(w_,Vmo),e(w_,aee),e(aee,zmo),e(Ne,Wmo),e(Ne,nee),e(nee,Qmo),e(Ne,Hmo),g(zE,Ne,null),b(c,pke,u),b(c,Zi,u),e(Zi,A_),e(A_,see),g(WE,see,null),e(Zi,Umo),e(Zi,lee),e(lee,Jmo),b(c,_ke,u),b(c,Yo,u),g(QE,Yo,null),e(Yo,Ymo),e(Yo,ed),e(ed,Kmo),e(ed,iee),e(iee,Zmo),e(ed,ego),e(ed,dee),e(dee,ogo),e(ed,rgo),e(Yo,tgo),e(Yo,HE),e(HE,ago),e(HE,cee),e(cee,ngo),e(HE,sgo),e(Yo,lgo),e(Yo,zr),g(UE,zr,null),e(zr,igo),e(zr,fee),e(fee,dgo),e(zr,cgo),e(zr,od),e(od,fgo),e(od,mee),e(mee,mgo),e(od,ggo),e(od,gee),e(gee,hgo),e(od,pgo),e(zr,_go),e(zr,hee),e(hee,ugo),e(zr,bgo),g(JE,zr,null),e(Yo,vgo),e(Yo,De),g(YE,De,null),e(De,Tgo),e(De,pee),e(pee,Fgo),e(De,Cgo),e(De,za),e(za,Mgo),e(za,_ee),e(_ee,Ego),e(za,ygo),e(za,uee),e(uee,wgo),e(za,Ago),e(za,bee),e(bee,Lgo),e(za,Bgo),e(De,xgo),e(De,k),e(k,L_),e(L_,vee),e(vee,kgo),e(L_,Rgo),e(L_,CP),e(CP,Sgo),e(L_,Pgo),e(k,$go),e(k,B_),e(B_,Tee),e(Tee,Igo),e(B_,Ngo),e(B_,MP),e(MP,Dgo),e(B_,jgo),e(k,qgo),e(k,x_),e(x_,Fee),e(Fee,Ggo),e(x_,Ogo),e(x_,EP),e(EP,Xgo),e(x_,Vgo),e(k,zgo),e(k,k_),e(k_,Cee),e(Cee,Wgo),e(k_,Qgo),e(k_,yP),e(yP,Hgo),e(k_,Ugo),e(k,Jgo),e(k,R_),e(R_,Mee),e(Mee,Ygo),e(R_,Kgo),e(R_,wP),e(wP,Zgo),e(R_,eho),e(k,oho),e(k,S_),e(S_,Eee),e(Eee,rho),e(S_,tho),e(S_,AP),e(AP,aho),e(S_,nho),e(k,sho),e(k,P_),e(P_,yee),e(yee,lho),e(P_,iho),e(P_,LP),e(LP,dho),e(P_,cho),e(k,fho),e(k,$_),e($_,wee),e(wee,mho),e($_,gho),e($_,BP),e(BP,hho),e($_,pho),e(k,_ho),e(k,I_),e(I_,Aee),e(Aee,uho),e(I_,bho),e(I_,xP),e(xP,vho),e(I_,Tho),e(k,Fho),e(k,N_),e(N_,Lee),e(Lee,Cho),e(N_,Mho),e(N_,kP),e(kP,Eho),e(N_,yho),e(k,who),e(k,D_),e(D_,Bee),e(Bee,Aho),e(D_,Lho),e(D_,RP),e(RP,Bho),e(D_,xho),e(k,kho),e(k,j_),e(j_,xee),e(xee,Rho),e(j_,Sho),e(j_,SP),e(SP,Pho),e(j_,$ho),e(k,Iho),e(k,q_),e(q_,kee),e(kee,Nho),e(q_,Dho),e(q_,PP),e(PP,jho),e(q_,qho),e(k,Gho),e(k,G_),e(G_,Ree),e(Ree,Oho),e(G_,Xho),e(G_,$P),e($P,Vho),e(G_,zho),e(k,Who),e(k,O_),e(O_,See),e(See,Qho),e(O_,Hho),e(O_,IP),e(IP,Uho),e(O_,Jho),e(k,Yho),e(k,X_),e(X_,Pee),e(Pee,Kho),e(X_,Zho),e(X_,NP),e(NP,epo),e(X_,opo),e(k,rpo),e(k,V_),e(V_,$ee),e($ee,tpo),e(V_,apo),e(V_,DP),e(DP,npo),e(V_,spo),e(k,lpo),e(k,z_),e(z_,Iee),e(Iee,ipo),e(z_,dpo),e(z_,jP),e(jP,cpo),e(z_,fpo),e(k,mpo),e(k,W_),e(W_,Nee),e(Nee,gpo),e(W_,hpo),e(W_,qP),e(qP,ppo),e(W_,_po),e(k,upo),e(k,Q_),e(Q_,Dee),e(Dee,bpo),e(Q_,vpo),e(Q_,GP),e(GP,Tpo),e(Q_,Fpo),e(k,Cpo),e(k,H_),e(H_,jee),e(jee,Mpo),e(H_,Epo),e(H_,OP),e(OP,ypo),e(H_,wpo),e(k,Apo),e(k,U_),e(U_,qee),e(qee,Lpo),e(U_,Bpo),e(U_,XP),e(XP,xpo),e(U_,kpo),e(k,Rpo),e(k,J_),e(J_,Gee),e(Gee,Spo),e(J_,Ppo),e(J_,VP),e(VP,$po),e(J_,Ipo),e(k,Npo),e(k,Y_),e(Y_,Oee),e(Oee,Dpo),e(Y_,jpo),e(Y_,zP),e(zP,qpo),e(Y_,Gpo),e(k,Opo),e(k,K_),e(K_,Xee),e(Xee,Xpo),e(K_,Vpo),e(K_,WP),e(WP,zpo),e(K_,Wpo),e(k,Qpo),e(k,Z_),e(Z_,Vee),e(Vee,Hpo),e(Z_,Upo),e(Z_,QP),e(QP,Jpo),e(Z_,Ypo),e(k,Kpo),e(k,eu),e(eu,zee),e(zee,Zpo),e(eu,e_o),e(eu,HP),e(HP,o_o),e(eu,r_o),e(k,t_o),e(k,ou),e(ou,Wee),e(Wee,a_o),e(ou,n_o),e(ou,UP),e(UP,s_o),e(ou,l_o),e(k,i_o),e(k,ru),e(ru,Qee),e(Qee,d_o),e(ru,c_o),e(ru,JP),e(JP,f_o),e(ru,m_o),e(k,g_o),e(k,tu),e(tu,Hee),e(Hee,h_o),e(tu,p_o),e(tu,YP),e(YP,__o),e(tu,u_o),e(k,b_o),e(k,au),e(au,Uee),e(Uee,v_o),e(au,T_o),e(au,KP),e(KP,F_o),e(au,C_o),e(k,M_o),e(k,nu),e(nu,Jee),e(Jee,E_o),e(nu,y_o),e(nu,ZP),e(ZP,w_o),e(nu,A_o),e(k,L_o),e(k,su),e(su,Yee),e(Yee,B_o),e(su,x_o),e(su,e$),e(e$,k_o),e(su,R_o),e(k,S_o),e(k,lu),e(lu,Kee),e(Kee,P_o),e(lu,$_o),e(lu,o$),e(o$,I_o),e(lu,N_o),e(k,D_o),e(k,iu),e(iu,Zee),e(Zee,j_o),e(iu,q_o),e(iu,r$),e(r$,G_o),e(iu,O_o),e(k,X_o),e(k,du),e(du,eoe),e(eoe,V_o),e(du,z_o),e(du,t$),e(t$,W_o),e(du,Q_o),e(k,H_o),e(k,cu),e(cu,ooe),e(ooe,U_o),e(cu,J_o),e(cu,a$),e(a$,Y_o),e(cu,K_o),e(k,Z_o),e(k,fu),e(fu,roe),e(roe,euo),e(fu,ouo),e(fu,n$),e(n$,ruo),e(fu,tuo),e(k,auo),e(k,mu),e(mu,toe),e(toe,nuo),e(mu,suo),e(mu,s$),e(s$,luo),e(mu,iuo),e(De,duo),e(De,gu),e(gu,cuo),e(gu,aoe),e(aoe,fuo),e(gu,muo),e(gu,noe),e(noe,guo),e(De,huo),e(De,soe),e(soe,puo),e(De,_uo),g(KE,De,null),b(c,uke,u),b(c,rd,u),e(rd,hu),e(hu,loe),g(ZE,loe,null),e(rd,uuo),e(rd,ioe),e(ioe,buo),b(c,bke,u),b(c,Ko,u),g(e5,Ko,null),e(Ko,vuo),e(Ko,td),e(td,Tuo),e(td,doe),e(doe,Fuo),e(td,Cuo),e(td,coe),e(coe,Muo),e(td,Euo),e(Ko,yuo),e(Ko,o5),e(o5,wuo),e(o5,foe),e(foe,Auo),e(o5,Luo),e(Ko,Buo),e(Ko,Wr),g(r5,Wr,null),e(Wr,xuo),e(Wr,moe),e(moe,kuo),e(Wr,Ruo),e(Wr,ad),e(ad,Suo),e(ad,goe),e(goe,Puo),e(ad,$uo),e(ad,hoe),e(hoe,Iuo),e(ad,Nuo),e(Wr,Duo),e(Wr,poe),e(poe,juo),e(Wr,quo),g(t5,Wr,null),e(Ko,Guo),e(Ko,je),g(a5,je,null),e(je,Ouo),e(je,_oe),e(_oe,Xuo),e(je,Vuo),e(je,Wa),e(Wa,zuo),e(Wa,uoe),e(uoe,Wuo),e(Wa,Quo),e(Wa,boe),e(boe,Huo),e(Wa,Uuo),e(Wa,voe),e(voe,Juo),e(Wa,Yuo),e(je,Kuo),e(je,$),e($,pu),e(pu,Toe),e(Toe,Zuo),e(pu,e1o),e(pu,l$),e(l$,o1o),e(pu,r1o),e($,t1o),e($,_u),e(_u,Foe),e(Foe,a1o),e(_u,n1o),e(_u,i$),e(i$,s1o),e(_u,l1o),e($,i1o),e($,uu),e(uu,Coe),e(Coe,d1o),e(uu,c1o),e(uu,d$),e(d$,f1o),e(uu,m1o),e($,g1o),e($,bu),e(bu,Moe),e(Moe,h1o),e(bu,p1o),e(bu,c$),e(c$,_1o),e(bu,u1o),e($,b1o),e($,vu),e(vu,Eoe),e(Eoe,v1o),e(vu,T1o),e(vu,f$),e(f$,F1o),e(vu,C1o),e($,M1o),e($,Tu),e(Tu,yoe),e(yoe,E1o),e(Tu,y1o),e(Tu,m$),e(m$,w1o),e(Tu,A1o),e($,L1o),e($,Fu),e(Fu,woe),e(woe,B1o),e(Fu,x1o),e(Fu,g$),e(g$,k1o),e(Fu,R1o),e($,S1o),e($,Cu),e(Cu,Aoe),e(Aoe,P1o),e(Cu,$1o),e(Cu,h$),e(h$,I1o),e(Cu,N1o),e($,D1o),e($,Mu),e(Mu,Loe),e(Loe,j1o),e(Mu,q1o),e(Mu,p$),e(p$,G1o),e(Mu,O1o),e($,X1o),e($,Eu),e(Eu,Boe),e(Boe,V1o),e(Eu,z1o),e(Eu,_$),e(_$,W1o),e(Eu,Q1o),e($,H1o),e($,yu),e(yu,xoe),e(xoe,U1o),e(yu,J1o),e(yu,u$),e(u$,Y1o),e(yu,K1o),e($,Z1o),e($,wu),e(wu,koe),e(koe,e9o),e(wu,o9o),e(wu,b$),e(b$,r9o),e(wu,t9o),e($,a9o),e($,Au),e(Au,Roe),e(Roe,n9o),e(Au,s9o),e(Au,v$),e(v$,l9o),e(Au,i9o),e($,d9o),e($,Lu),e(Lu,Soe),e(Soe,c9o),e(Lu,f9o),e(Lu,T$),e(T$,m9o),e(Lu,g9o),e($,h9o),e($,Bu),e(Bu,Poe),e(Poe,p9o),e(Bu,_9o),e(Bu,F$),e(F$,u9o),e(Bu,b9o),e($,v9o),e($,xu),e(xu,$oe),e($oe,T9o),e(xu,F9o),e(xu,C$),e(C$,C9o),e(xu,M9o),e($,E9o),e($,ku),e(ku,Ioe),e(Ioe,y9o),e(ku,w9o),e(ku,M$),e(M$,A9o),e(ku,L9o),e($,B9o),e($,Ru),e(Ru,Noe),e(Noe,x9o),e(Ru,k9o),e(Ru,E$),e(E$,R9o),e(Ru,S9o),e($,P9o),e($,Su),e(Su,Doe),e(Doe,$9o),e(Su,I9o),e(Su,y$),e(y$,N9o),e(Su,D9o),e($,j9o),e($,Pu),e(Pu,joe),e(joe,q9o),e(Pu,G9o),e(Pu,w$),e(w$,O9o),e(Pu,X9o),e($,V9o),e($,$u),e($u,qoe),e(qoe,z9o),e($u,W9o),e($u,A$),e(A$,Q9o),e($u,H9o),e($,U9o),e($,Iu),e(Iu,Goe),e(Goe,J9o),e(Iu,Y9o),e(Iu,L$),e(L$,K9o),e(Iu,Z9o),e($,ebo),e($,Nu),e(Nu,Ooe),e(Ooe,obo),e(Nu,rbo),e(Nu,B$),e(B$,tbo),e(Nu,abo),e($,nbo),e($,Du),e(Du,Xoe),e(Xoe,sbo),e(Du,lbo),e(Du,x$),e(x$,ibo),e(Du,dbo),e($,cbo),e($,ju),e(ju,Voe),e(Voe,fbo),e(ju,mbo),e(ju,k$),e(k$,gbo),e(ju,hbo),e($,pbo),e($,qu),e(qu,zoe),e(zoe,_bo),e(qu,ubo),e(qu,R$),e(R$,bbo),e(qu,vbo),e($,Tbo),e($,Gu),e(Gu,Woe),e(Woe,Fbo),e(Gu,Cbo),e(Gu,S$),e(S$,Mbo),e(Gu,Ebo),e($,ybo),e($,Ou),e(Ou,Qoe),e(Qoe,wbo),e(Ou,Abo),e(Ou,P$),e(P$,Lbo),e(Ou,Bbo),e($,xbo),e($,Xu),e(Xu,Hoe),e(Hoe,kbo),e(Xu,Rbo),e(Xu,$$),e($$,Sbo),e(Xu,Pbo),e($,$bo),e($,Vu),e(Vu,Uoe),e(Uoe,Ibo),e(Vu,Nbo),e(Vu,I$),e(I$,Dbo),e(Vu,jbo),e($,qbo),e($,zu),e(zu,Joe),e(Joe,Gbo),e(zu,Obo),e(zu,N$),e(N$,Xbo),e(zu,Vbo),e($,zbo),e($,Wu),e(Wu,Yoe),e(Yoe,Wbo),e(Wu,Qbo),e(Wu,D$),e(D$,Hbo),e(Wu,Ubo),e($,Jbo),e($,Qu),e(Qu,Koe),e(Koe,Ybo),e(Qu,Kbo),e(Qu,j$),e(j$,Zbo),e(Qu,e3o),e($,o3o),e($,Hu),e(Hu,Zoe),e(Zoe,r3o),e(Hu,t3o),e(Hu,q$),e(q$,a3o),e(Hu,n3o),e($,s3o),e($,Uu),e(Uu,ere),e(ere,l3o),e(Uu,i3o),e(Uu,G$),e(G$,d3o),e(Uu,c3o),e(je,f3o),e(je,Ju),e(Ju,m3o),e(Ju,ore),e(ore,g3o),e(Ju,h3o),e(Ju,rre),e(rre,p3o),e(je,_3o),e(je,tre),e(tre,u3o),e(je,b3o),g(n5,je,null),b(c,vke,u),b(c,nd,u),e(nd,Yu),e(Yu,are),g(s5,are,null),e(nd,v3o),e(nd,nre),e(nre,T3o),b(c,Tke,u),b(c,Zo,u),g(l5,Zo,null),e(Zo,F3o),e(Zo,sd),e(sd,C3o),e(sd,sre),e(sre,M3o),e(sd,E3o),e(sd,lre),e(lre,y3o),e(sd,w3o),e(Zo,A3o),e(Zo,i5),e(i5,L3o),e(i5,ire),e(ire,B3o),e(i5,x3o),e(Zo,k3o),e(Zo,Qr),g(d5,Qr,null),e(Qr,R3o),e(Qr,dre),e(dre,S3o),e(Qr,P3o),e(Qr,ld),e(ld,$3o),e(ld,cre),e(cre,I3o),e(ld,N3o),e(ld,fre),e(fre,D3o),e(ld,j3o),e(Qr,q3o),e(Qr,mre),e(mre,G3o),e(Qr,O3o),g(c5,Qr,null),e(Zo,X3o),e(Zo,qe),g(f5,qe,null),e(qe,V3o),e(qe,gre),e(gre,z3o),e(qe,W3o),e(qe,Qa),e(Qa,Q3o),e(Qa,hre),e(hre,H3o),e(Qa,U3o),e(Qa,pre),e(pre,J3o),e(Qa,Y3o),e(Qa,_re),e(_re,K3o),e(Qa,Z3o),e(qe,e2o),e(qe,I),e(I,Ku),e(Ku,ure),e(ure,o2o),e(Ku,r2o),e(Ku,O$),e(O$,t2o),e(Ku,a2o),e(I,n2o),e(I,Zu),e(Zu,bre),e(bre,s2o),e(Zu,l2o),e(Zu,X$),e(X$,i2o),e(Zu,d2o),e(I,c2o),e(I,e1),e(e1,vre),e(vre,f2o),e(e1,m2o),e(e1,V$),e(V$,g2o),e(e1,h2o),e(I,p2o),e(I,o1),e(o1,Tre),e(Tre,_2o),e(o1,u2o),e(o1,z$),e(z$,b2o),e(o1,v2o),e(I,T2o),e(I,r1),e(r1,Fre),e(Fre,F2o),e(r1,C2o),e(r1,W$),e(W$,M2o),e(r1,E2o),e(I,y2o),e(I,t1),e(t1,Cre),e(Cre,w2o),e(t1,A2o),e(t1,Q$),e(Q$,L2o),e(t1,B2o),e(I,x2o),e(I,a1),e(a1,Mre),e(Mre,k2o),e(a1,R2o),e(a1,H$),e(H$,S2o),e(a1,P2o),e(I,$2o),e(I,n1),e(n1,Ere),e(Ere,I2o),e(n1,N2o),e(n1,U$),e(U$,D2o),e(n1,j2o),e(I,q2o),e(I,s1),e(s1,yre),e(yre,G2o),e(s1,O2o),e(s1,J$),e(J$,X2o),e(s1,V2o),e(I,z2o),e(I,l1),e(l1,wre),e(wre,W2o),e(l1,Q2o),e(l1,Y$),e(Y$,H2o),e(l1,U2o),e(I,J2o),e(I,i1),e(i1,Are),e(Are,Y2o),e(i1,K2o),e(i1,K$),e(K$,Z2o),e(i1,evo),e(I,ovo),e(I,d1),e(d1,Lre),e(Lre,rvo),e(d1,tvo),e(d1,Z$),e(Z$,avo),e(d1,nvo),e(I,svo),e(I,c1),e(c1,Bre),e(Bre,lvo),e(c1,ivo),e(c1,eI),e(eI,dvo),e(c1,cvo),e(I,fvo),e(I,f1),e(f1,xre),e(xre,mvo),e(f1,gvo),e(f1,oI),e(oI,hvo),e(f1,pvo),e(I,_vo),e(I,m1),e(m1,kre),e(kre,uvo),e(m1,bvo),e(m1,rI),e(rI,vvo),e(m1,Tvo),e(I,Fvo),e(I,g1),e(g1,Rre),e(Rre,Cvo),e(g1,Mvo),e(g1,tI),e(tI,Evo),e(g1,yvo),e(I,wvo),e(I,h1),e(h1,Sre),e(Sre,Avo),e(h1,Lvo),e(h1,aI),e(aI,Bvo),e(h1,xvo),e(I,kvo),e(I,p1),e(p1,Pre),e(Pre,Rvo),e(p1,Svo),e(p1,nI),e(nI,Pvo),e(p1,$vo),e(I,Ivo),e(I,_1),e(_1,$re),e($re,Nvo),e(_1,Dvo),e(_1,sI),e(sI,jvo),e(_1,qvo),e(I,Gvo),e(I,u1),e(u1,Ire),e(Ire,Ovo),e(u1,Xvo),e(u1,lI),e(lI,Vvo),e(u1,zvo),e(I,Wvo),e(I,b1),e(b1,Nre),e(Nre,Qvo),e(b1,Hvo),e(b1,iI),e(iI,Uvo),e(b1,Jvo),e(I,Yvo),e(I,v1),e(v1,Dre),e(Dre,Kvo),e(v1,Zvo),e(v1,dI),e(dI,e6o),e(v1,o6o),e(I,r6o),e(I,T1),e(T1,jre),e(jre,t6o),e(T1,a6o),e(T1,cI),e(cI,n6o),e(T1,s6o),e(I,l6o),e(I,F1),e(F1,qre),e(qre,i6o),e(F1,d6o),e(F1,fI),e(fI,c6o),e(F1,f6o),e(I,m6o),e(I,C1),e(C1,Gre),e(Gre,g6o),e(C1,h6o),e(C1,mI),e(mI,p6o),e(C1,_6o),e(I,u6o),e(I,M1),e(M1,Ore),e(Ore,b6o),e(M1,v6o),e(M1,gI),e(gI,T6o),e(M1,F6o),e(I,C6o),e(I,E1),e(E1,Xre),e(Xre,M6o),e(E1,E6o),e(E1,hI),e(hI,y6o),e(E1,w6o),e(I,A6o),e(I,y1),e(y1,Vre),e(Vre,L6o),e(y1,B6o),e(y1,pI),e(pI,x6o),e(y1,k6o),e(I,R6o),e(I,w1),e(w1,zre),e(zre,S6o),e(w1,P6o),e(w1,_I),e(_I,$6o),e(w1,I6o),e(I,N6o),e(I,A1),e(A1,Wre),e(Wre,D6o),e(A1,j6o),e(A1,uI),e(uI,q6o),e(A1,G6o),e(I,O6o),e(I,L1),e(L1,Qre),e(Qre,X6o),e(L1,V6o),e(L1,Hre),e(Hre,z6o),e(L1,W6o),e(I,Q6o),e(I,B1),e(B1,Ure),e(Ure,H6o),e(B1,U6o),e(B1,bI),e(bI,J6o),e(B1,Y6o),e(I,K6o),e(I,x1),e(x1,Jre),e(Jre,Z6o),e(x1,eTo),e(x1,vI),e(vI,oTo),e(x1,rTo),e(I,tTo),e(I,k1),e(k1,Yre),e(Yre,aTo),e(k1,nTo),e(k1,TI),e(TI,sTo),e(k1,lTo),e(I,iTo),e(I,R1),e(R1,Kre),e(Kre,dTo),e(R1,cTo),e(R1,FI),e(FI,fTo),e(R1,mTo),e(qe,gTo),e(qe,S1),e(S1,hTo),e(S1,Zre),e(Zre,pTo),e(S1,_To),e(S1,ete),e(ete,uTo),e(qe,bTo),e(qe,ote),e(ote,vTo),e(qe,TTo),g(m5,qe,null),b(c,Fke,u),b(c,id,u),e(id,P1),e(P1,rte),g(g5,rte,null),e(id,FTo),e(id,tte),e(tte,CTo),b(c,Cke,u),b(c,er,u),g(h5,er,null),e(er,MTo),e(er,dd),e(dd,ETo),e(dd,ate),e(ate,yTo),e(dd,wTo),e(dd,nte),e(nte,ATo),e(dd,LTo),e(er,BTo),e(er,p5),e(p5,xTo),e(p5,ste),e(ste,kTo),e(p5,RTo),e(er,STo),e(er,Hr),g(_5,Hr,null),e(Hr,PTo),e(Hr,lte),e(lte,$To),e(Hr,ITo),e(Hr,cd),e(cd,NTo),e(cd,ite),e(ite,DTo),e(cd,jTo),e(cd,dte),e(dte,qTo),e(cd,GTo),e(Hr,OTo),e(Hr,cte),e(cte,XTo),e(Hr,VTo),g(u5,Hr,null),e(er,zTo),e(er,Ge),g(b5,Ge,null),e(Ge,WTo),e(Ge,fte),e(fte,QTo),e(Ge,HTo),e(Ge,Ha),e(Ha,UTo),e(Ha,mte),e(mte,JTo),e(Ha,YTo),e(Ha,gte),e(gte,KTo),e(Ha,ZTo),e(Ha,hte),e(hte,eFo),e(Ha,oFo),e(Ge,rFo),e(Ge,se),e(se,$1),e($1,pte),e(pte,tFo),e($1,aFo),e($1,CI),e(CI,nFo),e($1,sFo),e(se,lFo),e(se,I1),e(I1,_te),e(_te,iFo),e(I1,dFo),e(I1,MI),e(MI,cFo),e(I1,fFo),e(se,mFo),e(se,N1),e(N1,ute),e(ute,gFo),e(N1,hFo),e(N1,EI),e(EI,pFo),e(N1,_Fo),e(se,uFo),e(se,D1),e(D1,bte),e(bte,bFo),e(D1,vFo),e(D1,yI),e(yI,TFo),e(D1,FFo),e(se,CFo),e(se,j1),e(j1,vte),e(vte,MFo),e(j1,EFo),e(j1,wI),e(wI,yFo),e(j1,wFo),e(se,AFo),e(se,q1),e(q1,Tte),e(Tte,LFo),e(q1,BFo),e(q1,AI),e(AI,xFo),e(q1,kFo),e(se,RFo),e(se,G1),e(G1,Fte),e(Fte,SFo),e(G1,PFo),e(G1,LI),e(LI,$Fo),e(G1,IFo),e(se,NFo),e(se,O1),e(O1,Cte),e(Cte,DFo),e(O1,jFo),e(O1,BI),e(BI,qFo),e(O1,GFo),e(se,OFo),e(se,X1),e(X1,Mte),e(Mte,XFo),e(X1,VFo),e(X1,xI),e(xI,zFo),e(X1,WFo),e(se,QFo),e(se,V1),e(V1,Ete),e(Ete,HFo),e(V1,UFo),e(V1,kI),e(kI,JFo),e(V1,YFo),e(se,KFo),e(se,z1),e(z1,yte),e(yte,ZFo),e(z1,eCo),e(z1,RI),e(RI,oCo),e(z1,rCo),e(se,tCo),e(se,W1),e(W1,wte),e(wte,aCo),e(W1,nCo),e(W1,SI),e(SI,sCo),e(W1,lCo),e(se,iCo),e(se,Q1),e(Q1,Ate),e(Ate,dCo),e(Q1,cCo),e(Q1,PI),e(PI,fCo),e(Q1,mCo),e(se,gCo),e(se,H1),e(H1,Lte),e(Lte,hCo),e(H1,pCo),e(H1,$I),e($I,_Co),e(H1,uCo),e(se,bCo),e(se,U1),e(U1,Bte),e(Bte,vCo),e(U1,TCo),e(U1,II),e(II,FCo),e(U1,CCo),e(se,MCo),e(se,J1),e(J1,xte),e(xte,ECo),e(J1,yCo),e(J1,NI),e(NI,wCo),e(J1,ACo),e(Ge,LCo),e(Ge,Y1),e(Y1,BCo),e(Y1,kte),e(kte,xCo),e(Y1,kCo),e(Y1,Rte),e(Rte,RCo),e(Ge,SCo),e(Ge,Ste),e(Ste,PCo),e(Ge,$Co),g(v5,Ge,null),b(c,Mke,u),b(c,fd,u),e(fd,K1),e(K1,Pte),g(T5,Pte,null),e(fd,ICo),e(fd,$te),e($te,NCo),b(c,Eke,u),b(c,or,u),g(F5,or,null),e(or,DCo),e(or,md),e(md,jCo),e(md,Ite),e(Ite,qCo),e(md,GCo),e(md,Nte),e(Nte,OCo),e(md,XCo),e(or,VCo),e(or,C5),e(C5,zCo),e(C5,Dte),e(Dte,WCo),e(C5,QCo),e(or,HCo),e(or,Ur),g(M5,Ur,null),e(Ur,UCo),e(Ur,jte),e(jte,JCo),e(Ur,YCo),e(Ur,gd),e(gd,KCo),e(gd,qte),e(qte,ZCo),e(gd,eMo),e(gd,Gte),e(Gte,oMo),e(gd,rMo),e(Ur,tMo),e(Ur,Ote),e(Ote,aMo),e(Ur,nMo),g(E5,Ur,null),e(or,sMo),e(or,Oe),g(y5,Oe,null),e(Oe,lMo),e(Oe,Xte),e(Xte,iMo),e(Oe,dMo),e(Oe,Ua),e(Ua,cMo),e(Ua,Vte),e(Vte,fMo),e(Ua,mMo),e(Ua,zte),e(zte,gMo),e(Ua,hMo),e(Ua,Wte),e(Wte,pMo),e(Ua,_Mo),e(Oe,uMo),e(Oe,A),e(A,Z1),e(Z1,Qte),e(Qte,bMo),e(Z1,vMo),e(Z1,DI),e(DI,TMo),e(Z1,FMo),e(A,CMo),e(A,e9),e(e9,Hte),e(Hte,MMo),e(e9,EMo),e(e9,jI),e(jI,yMo),e(e9,wMo),e(A,AMo),e(A,o9),e(o9,Ute),e(Ute,LMo),e(o9,BMo),e(o9,qI),e(qI,xMo),e(o9,kMo),e(A,RMo),e(A,r9),e(r9,Jte),e(Jte,SMo),e(r9,PMo),e(r9,GI),e(GI,$Mo),e(r9,IMo),e(A,NMo),e(A,t9),e(t9,Yte),e(Yte,DMo),e(t9,jMo),e(t9,OI),e(OI,qMo),e(t9,GMo),e(A,OMo),e(A,a9),e(a9,Kte),e(Kte,XMo),e(a9,VMo),e(a9,XI),e(XI,zMo),e(a9,WMo),e(A,QMo),e(A,n9),e(n9,Zte),e(Zte,HMo),e(n9,UMo),e(n9,VI),e(VI,JMo),e(n9,YMo),e(A,KMo),e(A,s9),e(s9,eae),e(eae,ZMo),e(s9,e4o),e(s9,zI),e(zI,o4o),e(s9,r4o),e(A,t4o),e(A,l9),e(l9,oae),e(oae,a4o),e(l9,n4o),e(l9,WI),e(WI,s4o),e(l9,l4o),e(A,i4o),e(A,i9),e(i9,rae),e(rae,d4o),e(i9,c4o),e(i9,QI),e(QI,f4o),e(i9,m4o),e(A,g4o),e(A,d9),e(d9,tae),e(tae,h4o),e(d9,p4o),e(d9,HI),e(HI,_4o),e(d9,u4o),e(A,b4o),e(A,c9),e(c9,aae),e(aae,v4o),e(c9,T4o),e(c9,UI),e(UI,F4o),e(c9,C4o),e(A,M4o),e(A,f9),e(f9,nae),e(nae,E4o),e(f9,y4o),e(f9,JI),e(JI,w4o),e(f9,A4o),e(A,L4o),e(A,m9),e(m9,sae),e(sae,B4o),e(m9,x4o),e(m9,YI),e(YI,k4o),e(m9,R4o),e(A,S4o),e(A,g9),e(g9,lae),e(lae,P4o),e(g9,$4o),e(g9,KI),e(KI,I4o),e(g9,N4o),e(A,D4o),e(A,h9),e(h9,iae),e(iae,j4o),e(h9,q4o),e(h9,ZI),e(ZI,G4o),e(h9,O4o),e(A,X4o),e(A,p9),e(p9,dae),e(dae,V4o),e(p9,z4o),e(p9,eN),e(eN,W4o),e(p9,Q4o),e(A,H4o),e(A,_9),e(_9,cae),e(cae,U4o),e(_9,J4o),e(_9,oN),e(oN,Y4o),e(_9,K4o),e(A,Z4o),e(A,u9),e(u9,fae),e(fae,eEo),e(u9,oEo),e(u9,rN),e(rN,rEo),e(u9,tEo),e(A,aEo),e(A,b9),e(b9,mae),e(mae,nEo),e(b9,sEo),e(b9,tN),e(tN,lEo),e(b9,iEo),e(A,dEo),e(A,v9),e(v9,gae),e(gae,cEo),e(v9,fEo),e(v9,aN),e(aN,mEo),e(v9,gEo),e(A,hEo),e(A,T9),e(T9,hae),e(hae,pEo),e(T9,_Eo),e(T9,nN),e(nN,uEo),e(T9,bEo),e(A,vEo),e(A,F9),e(F9,pae),e(pae,TEo),e(F9,FEo),e(F9,sN),e(sN,CEo),e(F9,MEo),e(A,EEo),e(A,C9),e(C9,_ae),e(_ae,yEo),e(C9,wEo),e(C9,lN),e(lN,AEo),e(C9,LEo),e(A,BEo),e(A,M9),e(M9,uae),e(uae,xEo),e(M9,kEo),e(M9,iN),e(iN,REo),e(M9,SEo),e(A,PEo),e(A,E9),e(E9,bae),e(bae,$Eo),e(E9,IEo),e(E9,dN),e(dN,NEo),e(E9,DEo),e(A,jEo),e(A,y9),e(y9,vae),e(vae,qEo),e(y9,GEo),e(y9,cN),e(cN,OEo),e(y9,XEo),e(A,VEo),e(A,w9),e(w9,Tae),e(Tae,zEo),e(w9,WEo),e(w9,fN),e(fN,QEo),e(w9,HEo),e(A,UEo),e(A,A9),e(A9,Fae),e(Fae,JEo),e(A9,YEo),e(A9,mN),e(mN,KEo),e(A9,ZEo),e(A,e5o),e(A,L9),e(L9,Cae),e(Cae,o5o),e(L9,r5o),e(L9,gN),e(gN,t5o),e(L9,a5o),e(A,n5o),e(A,B9),e(B9,Mae),e(Mae,s5o),e(B9,l5o),e(B9,hN),e(hN,i5o),e(B9,d5o),e(A,c5o),e(A,x9),e(x9,Eae),e(Eae,f5o),e(x9,m5o),e(x9,pN),e(pN,g5o),e(x9,h5o),e(A,p5o),e(A,k9),e(k9,yae),e(yae,_5o),e(k9,u5o),e(k9,_N),e(_N,b5o),e(k9,v5o),e(A,T5o),e(A,R9),e(R9,wae),e(wae,F5o),e(R9,C5o),e(R9,uN),e(uN,M5o),e(R9,E5o),e(A,y5o),e(A,S9),e(S9,Aae),e(Aae,w5o),e(S9,A5o),e(S9,bN),e(bN,L5o),e(S9,B5o),e(A,x5o),e(A,P9),e(P9,Lae),e(Lae,k5o),e(P9,R5o),e(P9,vN),e(vN,S5o),e(P9,P5o),e(A,$5o),e(A,$9),e($9,Bae),e(Bae,I5o),e($9,N5o),e($9,TN),e(TN,D5o),e($9,j5o),e(A,q5o),e(A,I9),e(I9,xae),e(xae,G5o),e(I9,O5o),e(I9,FN),e(FN,X5o),e(I9,V5o),e(A,z5o),e(A,N9),e(N9,kae),e(kae,W5o),e(N9,Q5o),e(N9,CN),e(CN,H5o),e(N9,U5o),e(A,J5o),e(A,D9),e(D9,Rae),e(Rae,Y5o),e(D9,K5o),e(D9,MN),e(MN,Z5o),e(D9,eyo),e(A,oyo),e(A,j9),e(j9,Sae),e(Sae,ryo),e(j9,tyo),e(j9,EN),e(EN,ayo),e(j9,nyo),e(A,syo),e(A,q9),e(q9,Pae),e(Pae,lyo),e(q9,iyo),e(q9,yN),e(yN,dyo),e(q9,cyo),e(A,fyo),e(A,G9),e(G9,$ae),e($ae,myo),e(G9,gyo),e(G9,wN),e(wN,hyo),e(G9,pyo),e(A,_yo),e(A,O9),e(O9,Iae),e(Iae,uyo),e(O9,byo),e(O9,AN),e(AN,vyo),e(O9,Tyo),e(A,Fyo),e(A,X9),e(X9,Nae),e(Nae,Cyo),e(X9,Myo),e(X9,LN),e(LN,Eyo),e(X9,yyo),e(A,wyo),e(A,V9),e(V9,Dae),e(Dae,Ayo),e(V9,Lyo),e(V9,BN),e(BN,Byo),e(V9,xyo),e(Oe,kyo),e(Oe,z9),e(z9,Ryo),e(z9,jae),e(jae,Syo),e(z9,Pyo),e(z9,qae),e(qae,$yo),e(Oe,Iyo),e(Oe,Gae),e(Gae,Nyo),e(Oe,Dyo),g(w5,Oe,null),b(c,yke,u),b(c,hd,u),e(hd,W9),e(W9,Oae),g(A5,Oae,null),e(hd,jyo),e(hd,Xae),e(Xae,qyo),b(c,wke,u),b(c,rr,u),g(L5,rr,null),e(rr,Gyo),e(rr,pd),e(pd,Oyo),e(pd,Vae),e(Vae,Xyo),e(pd,Vyo),e(pd,zae),e(zae,zyo),e(pd,Wyo),e(rr,Qyo),e(rr,B5),e(B5,Hyo),e(B5,Wae),e(Wae,Uyo),e(B5,Jyo),e(rr,Yyo),e(rr,Jr),g(x5,Jr,null),e(Jr,Kyo),e(Jr,Qae),e(Qae,Zyo),e(Jr,ewo),e(Jr,_d),e(_d,owo),e(_d,Hae),e(Hae,rwo),e(_d,two),e(_d,Uae),e(Uae,awo),e(_d,nwo),e(Jr,swo),e(Jr,Jae),e(Jae,lwo),e(Jr,iwo),g(k5,Jr,null),e(rr,dwo),e(rr,Xe),g(R5,Xe,null),e(Xe,cwo),e(Xe,Yae),e(Yae,fwo),e(Xe,mwo),e(Xe,Ja),e(Ja,gwo),e(Ja,Kae),e(Kae,hwo),e(Ja,pwo),e(Ja,Zae),e(Zae,_wo),e(Ja,uwo),e(Ja,ene),e(ene,bwo),e(Ja,vwo),e(Xe,Two),e(Xe,G),e(G,Q9),e(Q9,one),e(one,Fwo),e(Q9,Cwo),e(Q9,xN),e(xN,Mwo),e(Q9,Ewo),e(G,ywo),e(G,H9),e(H9,rne),e(rne,wwo),e(H9,Awo),e(H9,kN),e(kN,Lwo),e(H9,Bwo),e(G,xwo),e(G,U9),e(U9,tne),e(tne,kwo),e(U9,Rwo),e(U9,RN),e(RN,Swo),e(U9,Pwo),e(G,$wo),e(G,J9),e(J9,ane),e(ane,Iwo),e(J9,Nwo),e(J9,SN),e(SN,Dwo),e(J9,jwo),e(G,qwo),e(G,Y9),e(Y9,nne),e(nne,Gwo),e(Y9,Owo),e(Y9,PN),e(PN,Xwo),e(Y9,Vwo),e(G,zwo),e(G,K9),e(K9,sne),e(sne,Wwo),e(K9,Qwo),e(K9,$N),e($N,Hwo),e(K9,Uwo),e(G,Jwo),e(G,Z9),e(Z9,lne),e(lne,Ywo),e(Z9,Kwo),e(Z9,IN),e(IN,Zwo),e(Z9,eAo),e(G,oAo),e(G,eb),e(eb,ine),e(ine,rAo),e(eb,tAo),e(eb,NN),e(NN,aAo),e(eb,nAo),e(G,sAo),e(G,ob),e(ob,dne),e(dne,lAo),e(ob,iAo),e(ob,DN),e(DN,dAo),e(ob,cAo),e(G,fAo),e(G,rb),e(rb,cne),e(cne,mAo),e(rb,gAo),e(rb,jN),e(jN,hAo),e(rb,pAo),e(G,_Ao),e(G,tb),e(tb,fne),e(fne,uAo),e(tb,bAo),e(tb,qN),e(qN,vAo),e(tb,TAo),e(G,FAo),e(G,ab),e(ab,mne),e(mne,CAo),e(ab,MAo),e(ab,GN),e(GN,EAo),e(ab,yAo),e(G,wAo),e(G,nb),e(nb,gne),e(gne,AAo),e(nb,LAo),e(nb,ON),e(ON,BAo),e(nb,xAo),e(G,kAo),e(G,sb),e(sb,hne),e(hne,RAo),e(sb,SAo),e(sb,XN),e(XN,PAo),e(sb,$Ao),e(G,IAo),e(G,lb),e(lb,pne),e(pne,NAo),e(lb,DAo),e(lb,VN),e(VN,jAo),e(lb,qAo),e(G,GAo),e(G,ib),e(ib,_ne),e(_ne,OAo),e(ib,XAo),e(ib,zN),e(zN,VAo),e(ib,zAo),e(G,WAo),e(G,db),e(db,une),e(une,QAo),e(db,HAo),e(db,WN),e(WN,UAo),e(db,JAo),e(G,YAo),e(G,cb),e(cb,bne),e(bne,KAo),e(cb,ZAo),e(cb,QN),e(QN,e0o),e(cb,o0o),e(G,r0o),e(G,fb),e(fb,vne),e(vne,t0o),e(fb,a0o),e(fb,HN),e(HN,n0o),e(fb,s0o),e(G,l0o),e(G,mb),e(mb,Tne),e(Tne,i0o),e(mb,d0o),e(mb,UN),e(UN,c0o),e(mb,f0o),e(G,m0o),e(G,gb),e(gb,Fne),e(Fne,g0o),e(gb,h0o),e(gb,JN),e(JN,p0o),e(gb,_0o),e(G,u0o),e(G,hb),e(hb,Cne),e(Cne,b0o),e(hb,v0o),e(hb,YN),e(YN,T0o),e(hb,F0o),e(G,C0o),e(G,pb),e(pb,Mne),e(Mne,M0o),e(pb,E0o),e(pb,KN),e(KN,y0o),e(pb,w0o),e(G,A0o),e(G,_b),e(_b,Ene),e(Ene,L0o),e(_b,B0o),e(_b,ZN),e(ZN,x0o),e(_b,k0o),e(G,R0o),e(G,ub),e(ub,yne),e(yne,S0o),e(ub,P0o),e(ub,eD),e(eD,$0o),e(ub,I0o),e(G,N0o),e(G,bb),e(bb,wne),e(wne,D0o),e(bb,j0o),e(bb,oD),e(oD,q0o),e(bb,G0o),e(G,O0o),e(G,vb),e(vb,Ane),e(Ane,X0o),e(vb,V0o),e(vb,rD),e(rD,z0o),e(vb,W0o),e(G,Q0o),e(G,Tb),e(Tb,Lne),e(Lne,H0o),e(Tb,U0o),e(Tb,tD),e(tD,J0o),e(Tb,Y0o),e(Xe,K0o),e(Xe,Fb),e(Fb,Z0o),e(Fb,Bne),e(Bne,eLo),e(Fb,oLo),e(Fb,xne),e(xne,rLo),e(Xe,tLo),e(Xe,kne),e(kne,aLo),e(Xe,nLo),g(S5,Xe,null),b(c,Ake,u),b(c,ud,u),e(ud,Cb),e(Cb,Rne),g(P5,Rne,null),e(ud,sLo),e(ud,Sne),e(Sne,lLo),b(c,Lke,u),b(c,tr,u),g($5,tr,null),e(tr,iLo),e(tr,bd),e(bd,dLo),e(bd,Pne),e(Pne,cLo),e(bd,fLo),e(bd,$ne),e($ne,mLo),e(bd,gLo),e(tr,hLo),e(tr,I5),e(I5,pLo),e(I5,Ine),e(Ine,_Lo),e(I5,uLo),e(tr,bLo),e(tr,Yr),g(N5,Yr,null),e(Yr,vLo),e(Yr,Nne),e(Nne,TLo),e(Yr,FLo),e(Yr,vd),e(vd,CLo),e(vd,Dne),e(Dne,MLo),e(vd,ELo),e(vd,jne),e(jne,yLo),e(vd,wLo),e(Yr,ALo),e(Yr,qne),e(qne,LLo),e(Yr,BLo),g(D5,Yr,null),e(tr,xLo),e(tr,Ve),g(j5,Ve,null),e(Ve,kLo),e(Ve,Gne),e(Gne,RLo),e(Ve,SLo),e(Ve,Ya),e(Ya,PLo),e(Ya,One),e(One,$Lo),e(Ya,ILo),e(Ya,Xne),e(Xne,NLo),e(Ya,DLo),e(Ya,Vne),e(Vne,jLo),e(Ya,qLo),e(Ve,GLo),e(Ve,da),e(da,Mb),e(Mb,zne),e(zne,OLo),e(Mb,XLo),e(Mb,aD),e(aD,VLo),e(Mb,zLo),e(da,WLo),e(da,Eb),e(Eb,Wne),e(Wne,QLo),e(Eb,HLo),e(Eb,nD),e(nD,ULo),e(Eb,JLo),e(da,YLo),e(da,yb),e(yb,Qne),e(Qne,KLo),e(yb,ZLo),e(yb,sD),e(sD,e7o),e(yb,o7o),e(da,r7o),e(da,wb),e(wb,Hne),e(Hne,t7o),e(wb,a7o),e(wb,lD),e(lD,n7o),e(wb,s7o),e(da,l7o),e(da,Ab),e(Ab,Une),e(Une,i7o),e(Ab,d7o),e(Ab,iD),e(iD,c7o),e(Ab,f7o),e(Ve,m7o),e(Ve,Lb),e(Lb,g7o),e(Lb,Jne),e(Jne,h7o),e(Lb,p7o),e(Lb,Yne),e(Yne,_7o),e(Ve,u7o),e(Ve,Kne),e(Kne,b7o),e(Ve,v7o),g(q5,Ve,null),b(c,Bke,u),b(c,Td,u),e(Td,Bb),e(Bb,Zne),g(G5,Zne,null),e(Td,T7o),e(Td,ese),e(ese,F7o),b(c,xke,u),b(c,ar,u),g(O5,ar,null),e(ar,C7o),e(ar,Fd),e(Fd,M7o),e(Fd,ose),e(ose,E7o),e(Fd,y7o),e(Fd,rse),e(rse,w7o),e(Fd,A7o),e(ar,L7o),e(ar,X5),e(X5,B7o),e(X5,tse),e(tse,x7o),e(X5,k7o),e(ar,R7o),e(ar,Kr),g(V5,Kr,null),e(Kr,S7o),e(Kr,ase),e(ase,P7o),e(Kr,$7o),e(Kr,Cd),e(Cd,I7o),e(Cd,nse),e(nse,N7o),e(Cd,D7o),e(Cd,sse),e(sse,j7o),e(Cd,q7o),e(Kr,G7o),e(Kr,lse),e(lse,O7o),e(Kr,X7o),g(z5,Kr,null),e(ar,V7o),e(ar,ze),g(W5,ze,null),e(ze,z7o),e(ze,ise),e(ise,W7o),e(ze,Q7o),e(ze,Ka),e(Ka,H7o),e(Ka,dse),e(dse,U7o),e(Ka,J7o),e(Ka,cse),e(cse,Y7o),e(Ka,K7o),e(Ka,fse),e(fse,Z7o),e(Ka,e8o),e(ze,o8o),e(ze,j),e(j,xb),e(xb,mse),e(mse,r8o),e(xb,t8o),e(xb,dD),e(dD,a8o),e(xb,n8o),e(j,s8o),e(j,kb),e(kb,gse),e(gse,l8o),e(kb,i8o),e(kb,cD),e(cD,d8o),e(kb,c8o),e(j,f8o),e(j,Rb),e(Rb,hse),e(hse,m8o),e(Rb,g8o),e(Rb,fD),e(fD,h8o),e(Rb,p8o),e(j,_8o),e(j,Sb),e(Sb,pse),e(pse,u8o),e(Sb,b8o),e(Sb,mD),e(mD,v8o),e(Sb,T8o),e(j,F8o),e(j,Pb),e(Pb,_se),e(_se,C8o),e(Pb,M8o),e(Pb,gD),e(gD,E8o),e(Pb,y8o),e(j,w8o),e(j,$b),e($b,use),e(use,A8o),e($b,L8o),e($b,hD),e(hD,B8o),e($b,x8o),e(j,k8o),e(j,Ib),e(Ib,bse),e(bse,R8o),e(Ib,S8o),e(Ib,pD),e(pD,P8o),e(Ib,$8o),e(j,I8o),e(j,Nb),e(Nb,vse),e(vse,N8o),e(Nb,D8o),e(Nb,_D),e(_D,j8o),e(Nb,q8o),e(j,G8o),e(j,Db),e(Db,Tse),e(Tse,O8o),e(Db,X8o),e(Db,uD),e(uD,V8o),e(Db,z8o),e(j,W8o),e(j,jb),e(jb,Fse),e(Fse,Q8o),e(jb,H8o),e(jb,bD),e(bD,U8o),e(jb,J8o),e(j,Y8o),e(j,qb),e(qb,Cse),e(Cse,K8o),e(qb,Z8o),e(qb,vD),e(vD,eBo),e(qb,oBo),e(j,rBo),e(j,Gb),e(Gb,Mse),e(Mse,tBo),e(Gb,aBo),e(Gb,TD),e(TD,nBo),e(Gb,sBo),e(j,lBo),e(j,Ob),e(Ob,Ese),e(Ese,iBo),e(Ob,dBo),e(Ob,FD),e(FD,cBo),e(Ob,fBo),e(j,mBo),e(j,Xb),e(Xb,yse),e(yse,gBo),e(Xb,hBo),e(Xb,CD),e(CD,pBo),e(Xb,_Bo),e(j,uBo),e(j,Vb),e(Vb,wse),e(wse,bBo),e(Vb,vBo),e(Vb,MD),e(MD,TBo),e(Vb,FBo),e(j,CBo),e(j,zb),e(zb,Ase),e(Ase,MBo),e(zb,EBo),e(zb,ED),e(ED,yBo),e(zb,wBo),e(j,ABo),e(j,Wb),e(Wb,Lse),e(Lse,LBo),e(Wb,BBo),e(Wb,yD),e(yD,xBo),e(Wb,kBo),e(j,RBo),e(j,Qb),e(Qb,Bse),e(Bse,SBo),e(Qb,PBo),e(Qb,wD),e(wD,$Bo),e(Qb,IBo),e(j,NBo),e(j,Hb),e(Hb,xse),e(xse,DBo),e(Hb,jBo),e(Hb,AD),e(AD,qBo),e(Hb,GBo),e(j,OBo),e(j,Ub),e(Ub,kse),e(kse,XBo),e(Ub,VBo),e(Ub,LD),e(LD,zBo),e(Ub,WBo),e(j,QBo),e(j,Jb),e(Jb,Rse),e(Rse,HBo),e(Jb,UBo),e(Jb,BD),e(BD,JBo),e(Jb,YBo),e(j,KBo),e(j,Yb),e(Yb,Sse),e(Sse,ZBo),e(Yb,exo),e(Yb,xD),e(xD,oxo),e(Yb,rxo),e(j,txo),e(j,Kb),e(Kb,Pse),e(Pse,axo),e(Kb,nxo),e(Kb,kD),e(kD,sxo),e(Kb,lxo),e(j,ixo),e(j,Zb),e(Zb,$se),e($se,dxo),e(Zb,cxo),e(Zb,RD),e(RD,fxo),e(Zb,mxo),e(j,gxo),e(j,e3),e(e3,Ise),e(Ise,hxo),e(e3,pxo),e(e3,SD),e(SD,_xo),e(e3,uxo),e(j,bxo),e(j,o3),e(o3,Nse),e(Nse,vxo),e(o3,Txo),e(o3,PD),e(PD,Fxo),e(o3,Cxo),e(j,Mxo),e(j,r3),e(r3,Dse),e(Dse,Exo),e(r3,yxo),e(r3,$D),e($D,wxo),e(r3,Axo),e(j,Lxo),e(j,t3),e(t3,jse),e(jse,Bxo),e(t3,xxo),e(t3,ID),e(ID,kxo),e(t3,Rxo),e(j,Sxo),e(j,a3),e(a3,qse),e(qse,Pxo),e(a3,$xo),e(a3,ND),e(ND,Ixo),e(a3,Nxo),e(j,Dxo),e(j,n3),e(n3,Gse),e(Gse,jxo),e(n3,qxo),e(n3,DD),e(DD,Gxo),e(n3,Oxo),e(j,Xxo),e(j,s3),e(s3,Ose),e(Ose,Vxo),e(s3,zxo),e(s3,jD),e(jD,Wxo),e(s3,Qxo),e(j,Hxo),e(j,l3),e(l3,Xse),e(Xse,Uxo),e(l3,Jxo),e(l3,qD),e(qD,Yxo),e(l3,Kxo),e(j,Zxo),e(j,i3),e(i3,Vse),e(Vse,eko),e(i3,oko),e(i3,GD),e(GD,rko),e(i3,tko),e(ze,ako),e(ze,d3),e(d3,nko),e(d3,zse),e(zse,sko),e(d3,lko),e(d3,Wse),e(Wse,iko),e(ze,dko),e(ze,Qse),e(Qse,cko),e(ze,fko),g(Q5,ze,null),b(c,kke,u),b(c,Md,u),e(Md,c3),e(c3,Hse),g(H5,Hse,null),e(Md,mko),e(Md,Use),e(Use,gko),b(c,Rke,u),b(c,nr,u),g(U5,nr,null),e(nr,hko),e(nr,Ed),e(Ed,pko),e(Ed,Jse),e(Jse,_ko),e(Ed,uko),e(Ed,Yse),e(Yse,bko),e(Ed,vko),e(nr,Tko),e(nr,J5),e(J5,Fko),e(J5,Kse),e(Kse,Cko),e(J5,Mko),e(nr,Eko),e(nr,Zr),g(Y5,Zr,null),e(Zr,yko),e(Zr,Zse),e(Zse,wko),e(Zr,Ako),e(Zr,yd),e(yd,Lko),e(yd,ele),e(ele,Bko),e(yd,xko),e(yd,ole),e(ole,kko),e(yd,Rko),e(Zr,Sko),e(Zr,rle),e(rle,Pko),e(Zr,$ko),g(K5,Zr,null),e(nr,Iko),e(nr,We),g(Z5,We,null),e(We,Nko),e(We,tle),e(tle,Dko),e(We,jko),e(We,Za),e(Za,qko),e(Za,ale),e(ale,Gko),e(Za,Oko),e(Za,nle),e(nle,Xko),e(Za,Vko),e(Za,sle),e(sle,zko),e(Za,Wko),e(We,Qko),e(We,R),e(R,f3),e(f3,lle),e(lle,Hko),e(f3,Uko),e(f3,OD),e(OD,Jko),e(f3,Yko),e(R,Kko),e(R,m3),e(m3,ile),e(ile,Zko),e(m3,eRo),e(m3,XD),e(XD,oRo),e(m3,rRo),e(R,tRo),e(R,g3),e(g3,dle),e(dle,aRo),e(g3,nRo),e(g3,VD),e(VD,sRo),e(g3,lRo),e(R,iRo),e(R,h3),e(h3,cle),e(cle,dRo),e(h3,cRo),e(h3,zD),e(zD,fRo),e(h3,mRo),e(R,gRo),e(R,p3),e(p3,fle),e(fle,hRo),e(p3,pRo),e(p3,WD),e(WD,_Ro),e(p3,uRo),e(R,bRo),e(R,_3),e(_3,mle),e(mle,vRo),e(_3,TRo),e(_3,QD),e(QD,FRo),e(_3,CRo),e(R,MRo),e(R,u3),e(u3,gle),e(gle,ERo),e(u3,yRo),e(u3,HD),e(HD,wRo),e(u3,ARo),e(R,LRo),e(R,b3),e(b3,hle),e(hle,BRo),e(b3,xRo),e(b3,UD),e(UD,kRo),e(b3,RRo),e(R,SRo),e(R,v3),e(v3,ple),e(ple,PRo),e(v3,$Ro),e(v3,JD),e(JD,IRo),e(v3,NRo),e(R,DRo),e(R,T3),e(T3,_le),e(_le,jRo),e(T3,qRo),e(T3,YD),e(YD,GRo),e(T3,ORo),e(R,XRo),e(R,F3),e(F3,ule),e(ule,VRo),e(F3,zRo),e(F3,KD),e(KD,WRo),e(F3,QRo),e(R,HRo),e(R,C3),e(C3,ble),e(ble,URo),e(C3,JRo),e(C3,ZD),e(ZD,YRo),e(C3,KRo),e(R,ZRo),e(R,M3),e(M3,vle),e(vle,eSo),e(M3,oSo),e(M3,ej),e(ej,rSo),e(M3,tSo),e(R,aSo),e(R,E3),e(E3,Tle),e(Tle,nSo),e(E3,sSo),e(E3,oj),e(oj,lSo),e(E3,iSo),e(R,dSo),e(R,y3),e(y3,Fle),e(Fle,cSo),e(y3,fSo),e(y3,rj),e(rj,mSo),e(y3,gSo),e(R,hSo),e(R,w3),e(w3,Cle),e(Cle,pSo),e(w3,_So),e(w3,tj),e(tj,uSo),e(w3,bSo),e(R,vSo),e(R,A3),e(A3,Mle),e(Mle,TSo),e(A3,FSo),e(A3,aj),e(aj,CSo),e(A3,MSo),e(R,ESo),e(R,L3),e(L3,Ele),e(Ele,ySo),e(L3,wSo),e(L3,nj),e(nj,ASo),e(L3,LSo),e(R,BSo),e(R,B3),e(B3,yle),e(yle,xSo),e(B3,kSo),e(B3,sj),e(sj,RSo),e(B3,SSo),e(R,PSo),e(R,x3),e(x3,wle),e(wle,$So),e(x3,ISo),e(x3,lj),e(lj,NSo),e(x3,DSo),e(R,jSo),e(R,k3),e(k3,Ale),e(Ale,qSo),e(k3,GSo),e(k3,ij),e(ij,OSo),e(k3,XSo),e(R,VSo),e(R,R3),e(R3,Lle),e(Lle,zSo),e(R3,WSo),e(R3,dj),e(dj,QSo),e(R3,HSo),e(R,USo),e(R,S3),e(S3,Ble),e(Ble,JSo),e(S3,YSo),e(S3,cj),e(cj,KSo),e(S3,ZSo),e(R,ePo),e(R,P3),e(P3,xle),e(xle,oPo),e(P3,rPo),e(P3,fj),e(fj,tPo),e(P3,aPo),e(R,nPo),e(R,$3),e($3,kle),e(kle,sPo),e($3,lPo),e($3,mj),e(mj,iPo),e($3,dPo),e(R,cPo),e(R,I3),e(I3,Rle),e(Rle,fPo),e(I3,mPo),e(I3,gj),e(gj,gPo),e(I3,hPo),e(R,pPo),e(R,N3),e(N3,Sle),e(Sle,_Po),e(N3,uPo),e(N3,hj),e(hj,bPo),e(N3,vPo),e(R,TPo),e(R,D3),e(D3,Ple),e(Ple,FPo),e(D3,CPo),e(D3,pj),e(pj,MPo),e(D3,EPo),e(R,yPo),e(R,j3),e(j3,$le),e($le,wPo),e(j3,APo),e(j3,_j),e(_j,LPo),e(j3,BPo),e(R,xPo),e(R,q3),e(q3,Ile),e(Ile,kPo),e(q3,RPo),e(q3,uj),e(uj,SPo),e(q3,PPo),e(R,$Po),e(R,G3),e(G3,Nle),e(Nle,IPo),e(G3,NPo),e(G3,bj),e(bj,DPo),e(G3,jPo),e(R,qPo),e(R,O3),e(O3,Dle),e(Dle,GPo),e(O3,OPo),e(O3,vj),e(vj,XPo),e(O3,VPo),e(R,zPo),e(R,X3),e(X3,jle),e(jle,WPo),e(X3,QPo),e(X3,Tj),e(Tj,HPo),e(X3,UPo),e(R,JPo),e(R,V3),e(V3,qle),e(qle,YPo),e(V3,KPo),e(V3,Fj),e(Fj,ZPo),e(V3,e$o),e(R,o$o),e(R,z3),e(z3,Gle),e(Gle,r$o),e(z3,t$o),e(z3,Cj),e(Cj,a$o),e(z3,n$o),e(R,s$o),e(R,W3),e(W3,Ole),e(Ole,l$o),e(W3,i$o),e(W3,Mj),e(Mj,d$o),e(W3,c$o),e(R,f$o),e(R,Q3),e(Q3,Xle),e(Xle,m$o),e(Q3,g$o),e(Q3,Ej),e(Ej,h$o),e(Q3,p$o),e(R,_$o),e(R,H3),e(H3,Vle),e(Vle,u$o),e(H3,b$o),e(H3,yj),e(yj,v$o),e(H3,T$o),e(R,F$o),e(R,U3),e(U3,zle),e(zle,C$o),e(U3,M$o),e(U3,wj),e(wj,E$o),e(U3,y$o),e(We,w$o),e(We,J3),e(J3,A$o),e(J3,Wle),e(Wle,L$o),e(J3,B$o),e(J3,Qle),e(Qle,x$o),e(We,k$o),e(We,Hle),e(Hle,R$o),e(We,S$o),g(ey,We,null),b(c,Ske,u),b(c,wd,u),e(wd,Y3),e(Y3,Ule),g(oy,Ule,null),e(wd,P$o),e(wd,Jle),e(Jle,$$o),b(c,Pke,u),b(c,sr,u),g(ry,sr,null),e(sr,I$o),e(sr,Ad),e(Ad,N$o),e(Ad,Yle),e(Yle,D$o),e(Ad,j$o),e(Ad,Kle),e(Kle,q$o),e(Ad,G$o),e(sr,O$o),e(sr,ty),e(ty,X$o),e(ty,Zle),e(Zle,V$o),e(ty,z$o),e(sr,W$o),e(sr,et),g(ay,et,null),e(et,Q$o),e(et,eie),e(eie,H$o),e(et,U$o),e(et,Ld),e(Ld,J$o),e(Ld,oie),e(oie,Y$o),e(Ld,K$o),e(Ld,rie),e(rie,Z$o),e(Ld,eIo),e(et,oIo),e(et,tie),e(tie,rIo),e(et,tIo),g(ny,et,null),e(sr,aIo),e(sr,Qe),g(sy,Qe,null),e(Qe,nIo),e(Qe,aie),e(aie,sIo),e(Qe,lIo),e(Qe,en),e(en,iIo),e(en,nie),e(nie,dIo),e(en,cIo),e(en,sie),e(sie,fIo),e(en,mIo),e(en,lie),e(lie,gIo),e(en,hIo),e(Qe,pIo),e(Qe,iie),e(iie,K3),e(K3,die),e(die,_Io),e(K3,uIo),e(K3,Aj),e(Aj,bIo),e(K3,vIo),e(Qe,TIo),e(Qe,Z3),e(Z3,FIo),e(Z3,cie),e(cie,CIo),e(Z3,MIo),e(Z3,fie),e(fie,EIo),e(Qe,yIo),e(Qe,mie),e(mie,wIo),e(Qe,AIo),g(ly,Qe,null),b(c,$ke,u),b(c,Bd,u),e(Bd,e2),e(e2,gie),g(iy,gie,null),e(Bd,LIo),e(Bd,hie),e(hie,BIo),b(c,Ike,u),b(c,lr,u),g(dy,lr,null),e(lr,xIo),e(lr,xd),e(xd,kIo),e(xd,pie),e(pie,RIo),e(xd,SIo),e(xd,_ie),e(_ie,PIo),e(xd,$Io),e(lr,IIo),e(lr,cy),e(cy,NIo),e(cy,uie),e(uie,DIo),e(cy,jIo),e(lr,qIo),e(lr,ot),g(fy,ot,null),e(ot,GIo),e(ot,bie),e(bie,OIo),e(ot,XIo),e(ot,kd),e(kd,VIo),e(kd,vie),e(vie,zIo),e(kd,WIo),e(kd,Tie),e(Tie,QIo),e(kd,HIo),e(ot,UIo),e(ot,Fie),e(Fie,JIo),e(ot,YIo),g(my,ot,null),e(lr,KIo),e(lr,He),g(gy,He,null),e(He,ZIo),e(He,Cie),e(Cie,eNo),e(He,oNo),e(He,on),e(on,rNo),e(on,Mie),e(Mie,tNo),e(on,aNo),e(on,Eie),e(Eie,nNo),e(on,sNo),e(on,yie),e(yie,lNo),e(on,iNo),e(He,dNo),e(He,me),e(me,o2),e(o2,wie),e(wie,cNo),e(o2,fNo),e(o2,Lj),e(Lj,mNo),e(o2,gNo),e(me,hNo),e(me,r2),e(r2,Aie),e(Aie,pNo),e(r2,_No),e(r2,Bj),e(Bj,uNo),e(r2,bNo),e(me,vNo),e(me,qs),e(qs,Lie),e(Lie,TNo),e(qs,FNo),e(qs,xj),e(xj,CNo),e(qs,MNo),e(qs,kj),e(kj,ENo),e(qs,yNo),e(me,wNo),e(me,t2),e(t2,Bie),e(Bie,ANo),e(t2,LNo),e(t2,Rj),e(Rj,BNo),e(t2,xNo),e(me,kNo),e(me,ma),e(ma,xie),e(xie,RNo),e(ma,SNo),e(ma,Sj),e(Sj,PNo),e(ma,$No),e(ma,Pj),e(Pj,INo),e(ma,NNo),e(ma,$j),e($j,DNo),e(ma,jNo),e(me,qNo),e(me,a2),e(a2,kie),e(kie,GNo),e(a2,ONo),e(a2,Ij),e(Ij,XNo),e(a2,VNo),e(me,zNo),e(me,n2),e(n2,Rie),e(Rie,WNo),e(n2,QNo),e(n2,Nj),e(Nj,HNo),e(n2,UNo),e(me,JNo),e(me,s2),e(s2,Sie),e(Sie,YNo),e(s2,KNo),e(s2,Dj),e(Dj,ZNo),e(s2,eDo),e(me,oDo),e(me,l2),e(l2,Pie),e(Pie,rDo),e(l2,tDo),e(l2,jj),e(jj,aDo),e(l2,nDo),e(me,sDo),e(me,i2),e(i2,$ie),e($ie,lDo),e(i2,iDo),e(i2,qj),e(qj,dDo),e(i2,cDo),e(me,fDo),e(me,d2),e(d2,Iie),e(Iie,mDo),e(d2,gDo),e(d2,Gj),e(Gj,hDo),e(d2,pDo),e(He,_Do),e(He,c2),e(c2,uDo),e(c2,Nie),e(Nie,bDo),e(c2,vDo),e(c2,Die),e(Die,TDo),e(He,FDo),e(He,jie),e(jie,CDo),e(He,MDo),g(hy,He,null),b(c,Nke,u),b(c,Rd,u),e(Rd,f2),e(f2,qie),g(py,qie,null),e(Rd,EDo),e(Rd,Gie),e(Gie,yDo),b(c,Dke,u),b(c,ir,u),g(_y,ir,null),e(ir,wDo),e(ir,Sd),e(Sd,ADo),e(Sd,Oie),e(Oie,LDo),e(Sd,BDo),e(Sd,Xie),e(Xie,xDo),e(Sd,kDo),e(ir,RDo),e(ir,uy),e(uy,SDo),e(uy,Vie),e(Vie,PDo),e(uy,$Do),e(ir,IDo),e(ir,rt),g(by,rt,null),e(rt,NDo),e(rt,zie),e(zie,DDo),e(rt,jDo),e(rt,Pd),e(Pd,qDo),e(Pd,Wie),e(Wie,GDo),e(Pd,ODo),e(Pd,Qie),e(Qie,XDo),e(Pd,VDo),e(rt,zDo),e(rt,Hie),e(Hie,WDo),e(rt,QDo),g(vy,rt,null),e(ir,HDo),e(ir,Ue),g(Ty,Ue,null),e(Ue,UDo),e(Ue,Uie),e(Uie,JDo),e(Ue,YDo),e(Ue,rn),e(rn,KDo),e(rn,Jie),e(Jie,ZDo),e(rn,ejo),e(rn,Yie),e(Yie,ojo),e(rn,rjo),e(rn,Kie),e(Kie,tjo),e(rn,ajo),e(Ue,njo),e(Ue,Zie),e(Zie,m2),e(m2,ede),e(ede,sjo),e(m2,ljo),e(m2,Oj),e(Oj,ijo),e(m2,djo),e(Ue,cjo),e(Ue,g2),e(g2,fjo),e(g2,ode),e(ode,mjo),e(g2,gjo),e(g2,rde),e(rde,hjo),e(Ue,pjo),e(Ue,tde),e(tde,_jo),e(Ue,ujo),g(Fy,Ue,null),b(c,jke,u),b(c,$d,u),e($d,h2),e(h2,ade),g(Cy,ade,null),e($d,bjo),e($d,nde),e(nde,vjo),b(c,qke,u),b(c,dr,u),g(My,dr,null),e(dr,Tjo),e(dr,Id),e(Id,Fjo),e(Id,sde),e(sde,Cjo),e(Id,Mjo),e(Id,lde),e(lde,Ejo),e(Id,yjo),e(dr,wjo),e(dr,Ey),e(Ey,Ajo),e(Ey,ide),e(ide,Ljo),e(Ey,Bjo),e(dr,xjo),e(dr,tt),g(yy,tt,null),e(tt,kjo),e(tt,dde),e(dde,Rjo),e(tt,Sjo),e(tt,Nd),e(Nd,Pjo),e(Nd,cde),e(cde,$jo),e(Nd,Ijo),e(Nd,fde),e(fde,Njo),e(Nd,Djo),e(tt,jjo),e(tt,mde),e(mde,qjo),e(tt,Gjo),g(wy,tt,null),e(dr,Ojo),e(dr,Je),g(Ay,Je,null),e(Je,Xjo),e(Je,gde),e(gde,Vjo),e(Je,zjo),e(Je,tn),e(tn,Wjo),e(tn,hde),e(hde,Qjo),e(tn,Hjo),e(tn,pde),e(pde,Ujo),e(tn,Jjo),e(tn,_de),e(_de,Yjo),e(tn,Kjo),e(Je,Zjo),e(Je,ke),e(ke,p2),e(p2,ude),e(ude,eqo),e(p2,oqo),e(p2,Xj),e(Xj,rqo),e(p2,tqo),e(ke,aqo),e(ke,_2),e(_2,bde),e(bde,nqo),e(_2,sqo),e(_2,Vj),e(Vj,lqo),e(_2,iqo),e(ke,dqo),e(ke,u2),e(u2,vde),e(vde,cqo),e(u2,fqo),e(u2,zj),e(zj,mqo),e(u2,gqo),e(ke,hqo),e(ke,b2),e(b2,Tde),e(Tde,pqo),e(b2,_qo),e(b2,Wj),e(Wj,uqo),e(b2,bqo),e(ke,vqo),e(ke,v2),e(v2,Fde),e(Fde,Tqo),e(v2,Fqo),e(v2,Qj),e(Qj,Cqo),e(v2,Mqo),e(ke,Eqo),e(ke,T2),e(T2,Cde),e(Cde,yqo),e(T2,wqo),e(T2,Hj),e(Hj,Aqo),e(T2,Lqo),e(ke,Bqo),e(ke,F2),e(F2,Mde),e(Mde,xqo),e(F2,kqo),e(F2,Uj),e(Uj,Rqo),e(F2,Sqo),e(ke,Pqo),e(ke,C2),e(C2,Ede),e(Ede,$qo),e(C2,Iqo),e(C2,Jj),e(Jj,Nqo),e(C2,Dqo),e(Je,jqo),e(Je,M2),e(M2,qqo),e(M2,yde),e(yde,Gqo),e(M2,Oqo),e(M2,wde),e(wde,Xqo),e(Je,Vqo),e(Je,Ade),e(Ade,zqo),e(Je,Wqo),g(Ly,Je,null),b(c,Gke,u),b(c,Dd,u),e(Dd,E2),e(E2,Lde),g(By,Lde,null),e(Dd,Qqo),e(Dd,Bde),e(Bde,Hqo),b(c,Oke,u),b(c,cr,u),g(xy,cr,null),e(cr,Uqo),e(cr,jd),e(jd,Jqo),e(jd,xde),e(xde,Yqo),e(jd,Kqo),e(jd,kde),e(kde,Zqo),e(jd,eGo),e(cr,oGo),e(cr,ky),e(ky,rGo),e(ky,Rde),e(Rde,tGo),e(ky,aGo),e(cr,nGo),e(cr,at),g(Ry,at,null),e(at,sGo),e(at,Sde),e(Sde,lGo),e(at,iGo),e(at,qd),e(qd,dGo),e(qd,Pde),e(Pde,cGo),e(qd,fGo),e(qd,$de),e($de,mGo),e(qd,gGo),e(at,hGo),e(at,Ide),e(Ide,pGo),e(at,_Go),g(Sy,at,null),e(cr,uGo),e(cr,Ye),g(Py,Ye,null),e(Ye,bGo),e(Ye,Nde),e(Nde,vGo),e(Ye,TGo),e(Ye,an),e(an,FGo),e(an,Dde),e(Dde,CGo),e(an,MGo),e(an,jde),e(jde,EGo),e(an,yGo),e(an,qde),e(qde,wGo),e(an,AGo),e(Ye,LGo),e(Ye,nn),e(nn,y2),e(y2,Gde),e(Gde,BGo),e(y2,xGo),e(y2,Yj),e(Yj,kGo),e(y2,RGo),e(nn,SGo),e(nn,w2),e(w2,Ode),e(Ode,PGo),e(w2,$Go),e(w2,Kj),e(Kj,IGo),e(w2,NGo),e(nn,DGo),e(nn,A2),e(A2,Xde),e(Xde,jGo),e(A2,qGo),e(A2,Zj),e(Zj,GGo),e(A2,OGo),e(nn,XGo),e(nn,L2),e(L2,Vde),e(Vde,VGo),e(L2,zGo),e(L2,eq),e(eq,WGo),e(L2,QGo),e(Ye,HGo),e(Ye,B2),e(B2,UGo),e(B2,zde),e(zde,JGo),e(B2,YGo),e(B2,Wde),e(Wde,KGo),e(Ye,ZGo),e(Ye,Qde),e(Qde,eOo),e(Ye,oOo),g($y,Ye,null),b(c,Xke,u),b(c,Gd,u),e(Gd,x2),e(x2,Hde),g(Iy,Hde,null),e(Gd,rOo),e(Gd,Ude),e(Ude,tOo),b(c,Vke,u),b(c,fr,u),g(Ny,fr,null),e(fr,aOo),e(fr,Od),e(Od,nOo),e(Od,Jde),e(Jde,sOo),e(Od,lOo),e(Od,Yde),e(Yde,iOo),e(Od,dOo),e(fr,cOo),e(fr,Dy),e(Dy,fOo),e(Dy,Kde),e(Kde,mOo),e(Dy,gOo),e(fr,hOo),e(fr,nt),g(jy,nt,null),e(nt,pOo),e(nt,Zde),e(Zde,_Oo),e(nt,uOo),e(nt,Xd),e(Xd,bOo),e(Xd,ece),e(ece,vOo),e(Xd,TOo),e(Xd,oce),e(oce,FOo),e(Xd,COo),e(nt,MOo),e(nt,rce),e(rce,EOo),e(nt,yOo),g(qy,nt,null),e(fr,wOo),e(fr,Ke),g(Gy,Ke,null),e(Ke,AOo),e(Ke,tce),e(tce,LOo),e(Ke,BOo),e(Ke,sn),e(sn,xOo),e(sn,ace),e(ace,kOo),e(sn,ROo),e(sn,nce),e(nce,SOo),e(sn,POo),e(sn,sce),e(sce,$Oo),e(sn,IOo),e(Ke,NOo),e(Ke,Re),e(Re,k2),e(k2,lce),e(lce,DOo),e(k2,jOo),e(k2,oq),e(oq,qOo),e(k2,GOo),e(Re,OOo),e(Re,R2),e(R2,ice),e(ice,XOo),e(R2,VOo),e(R2,rq),e(rq,zOo),e(R2,WOo),e(Re,QOo),e(Re,S2),e(S2,dce),e(dce,HOo),e(S2,UOo),e(S2,tq),e(tq,JOo),e(S2,YOo),e(Re,KOo),e(Re,P2),e(P2,cce),e(cce,ZOo),e(P2,eXo),e(P2,aq),e(aq,oXo),e(P2,rXo),e(Re,tXo),e(Re,$2),e($2,fce),e(fce,aXo),e($2,nXo),e($2,nq),e(nq,sXo),e($2,lXo),e(Re,iXo),e(Re,I2),e(I2,mce),e(mce,dXo),e(I2,cXo),e(I2,sq),e(sq,fXo),e(I2,mXo),e(Re,gXo),e(Re,N2),e(N2,gce),e(gce,hXo),e(N2,pXo),e(N2,lq),e(lq,_Xo),e(N2,uXo),e(Re,bXo),e(Re,D2),e(D2,hce),e(hce,vXo),e(D2,TXo),e(D2,iq),e(iq,FXo),e(D2,CXo),e(Ke,MXo),e(Ke,j2),e(j2,EXo),e(j2,pce),e(pce,yXo),e(j2,wXo),e(j2,_ce),e(_ce,AXo),e(Ke,LXo),e(Ke,uce),e(uce,BXo),e(Ke,xXo),g(Oy,Ke,null),b(c,zke,u),b(c,Vd,u),e(Vd,q2),e(q2,bce),g(Xy,bce,null),e(Vd,kXo),e(Vd,vce),e(vce,RXo),b(c,Wke,u),b(c,mr,u),g(Vy,mr,null),e(mr,SXo),e(mr,zd),e(zd,PXo),e(zd,Tce),e(Tce,$Xo),e(zd,IXo),e(zd,Fce),e(Fce,NXo),e(zd,DXo),e(mr,jXo),e(mr,zy),e(zy,qXo),e(zy,Cce),e(Cce,GXo),e(zy,OXo),e(mr,XXo),e(mr,st),g(Wy,st,null),e(st,VXo),e(st,Mce),e(Mce,zXo),e(st,WXo),e(st,Wd),e(Wd,QXo),e(Wd,Ece),e(Ece,HXo),e(Wd,UXo),e(Wd,yce),e(yce,JXo),e(Wd,YXo),e(st,KXo),e(st,wce),e(wce,ZXo),e(st,eVo),g(Qy,st,null),e(mr,oVo),e(mr,Ze),g(Hy,Ze,null),e(Ze,rVo),e(Ze,Ace),e(Ace,tVo),e(Ze,aVo),e(Ze,ln),e(ln,nVo),e(ln,Lce),e(Lce,sVo),e(ln,lVo),e(ln,Bce),e(Bce,iVo),e(ln,dVo),e(ln,xce),e(xce,cVo),e(ln,fVo),e(Ze,mVo),e(Ze,Uy),e(Uy,G2),e(G2,kce),e(kce,gVo),e(G2,hVo),e(G2,dq),e(dq,pVo),e(G2,_Vo),e(Uy,uVo),e(Uy,O2),e(O2,Rce),e(Rce,bVo),e(O2,vVo),e(O2,cq),e(cq,TVo),e(O2,FVo),e(Ze,CVo),e(Ze,X2),e(X2,MVo),e(X2,Sce),e(Sce,EVo),e(X2,yVo),e(X2,Pce),e(Pce,wVo),e(Ze,AVo),e(Ze,$ce),e($ce,LVo),e(Ze,BVo),g(Jy,Ze,null),b(c,Qke,u),b(c,Qd,u),e(Qd,V2),e(V2,Ice),g(Yy,Ice,null),e(Qd,xVo),e(Qd,Nce),e(Nce,kVo),b(c,Hke,u),b(c,gr,u),g(Ky,gr,null),e(gr,RVo),e(gr,Hd),e(Hd,SVo),e(Hd,Dce),e(Dce,PVo),e(Hd,$Vo),e(Hd,jce),e(jce,IVo),e(Hd,NVo),e(gr,DVo),e(gr,Zy),e(Zy,jVo),e(Zy,qce),e(qce,qVo),e(Zy,GVo),e(gr,OVo),e(gr,lt),g(ew,lt,null),e(lt,XVo),e(lt,Gce),e(Gce,VVo),e(lt,zVo),e(lt,Ud),e(Ud,WVo),e(Ud,Oce),e(Oce,QVo),e(Ud,HVo),e(Ud,Xce),e(Xce,UVo),e(Ud,JVo),e(lt,YVo),e(lt,Vce),e(Vce,KVo),e(lt,ZVo),g(ow,lt,null),e(gr,ezo),e(gr,eo),g(rw,eo,null),e(eo,ozo),e(eo,zce),e(zce,rzo),e(eo,tzo),e(eo,dn),e(dn,azo),e(dn,Wce),e(Wce,nzo),e(dn,szo),e(dn,Qce),e(Qce,lzo),e(dn,izo),e(dn,Hce),e(Hce,dzo),e(dn,czo),e(eo,fzo),e(eo,cn),e(cn,z2),e(z2,Uce),e(Uce,mzo),e(z2,gzo),e(z2,fq),e(fq,hzo),e(z2,pzo),e(cn,_zo),e(cn,W2),e(W2,Jce),e(Jce,uzo),e(W2,bzo),e(W2,mq),e(mq,vzo),e(W2,Tzo),e(cn,Fzo),e(cn,Q2),e(Q2,Yce),e(Yce,Czo),e(Q2,Mzo),e(Q2,gq),e(gq,Ezo),e(Q2,yzo),e(cn,wzo),e(cn,H2),e(H2,Kce),e(Kce,Azo),e(H2,Lzo),e(H2,hq),e(hq,Bzo),e(H2,xzo),e(eo,kzo),e(eo,U2),e(U2,Rzo),e(U2,Zce),e(Zce,Szo),e(U2,Pzo),e(U2,efe),e(efe,$zo),e(eo,Izo),e(eo,ofe),e(ofe,Nzo),e(eo,Dzo),g(tw,eo,null),b(c,Uke,u),b(c,Jd,u),e(Jd,J2),e(J2,rfe),g(aw,rfe,null),e(Jd,jzo),e(Jd,tfe),e(tfe,qzo),b(c,Jke,u),b(c,hr,u),g(nw,hr,null),e(hr,Gzo),e(hr,Yd),e(Yd,Ozo),e(Yd,afe),e(afe,Xzo),e(Yd,Vzo),e(Yd,nfe),e(nfe,zzo),e(Yd,Wzo),e(hr,Qzo),e(hr,sw),e(sw,Hzo),e(sw,sfe),e(sfe,Uzo),e(sw,Jzo),e(hr,Yzo),e(hr,it),g(lw,it,null),e(it,Kzo),e(it,lfe),e(lfe,Zzo),e(it,eWo),e(it,Kd),e(Kd,oWo),e(Kd,ife),e(ife,rWo),e(Kd,tWo),e(Kd,dfe),e(dfe,aWo),e(Kd,nWo),e(it,sWo),e(it,cfe),e(cfe,lWo),e(it,iWo),g(iw,it,null),e(hr,dWo),e(hr,oo),g(dw,oo,null),e(oo,cWo),e(oo,ffe),e(ffe,fWo),e(oo,mWo),e(oo,fn),e(fn,gWo),e(fn,mfe),e(mfe,hWo),e(fn,pWo),e(fn,gfe),e(gfe,_Wo),e(fn,uWo),e(fn,hfe),e(hfe,bWo),e(fn,vWo),e(oo,TWo),e(oo,Zd),e(Zd,Y2),e(Y2,pfe),e(pfe,FWo),e(Y2,CWo),e(Y2,pq),e(pq,MWo),e(Y2,EWo),e(Zd,yWo),e(Zd,K2),e(K2,_fe),e(_fe,wWo),e(K2,AWo),e(K2,_q),e(_q,LWo),e(K2,BWo),e(Zd,xWo),e(Zd,Z2),e(Z2,ufe),e(ufe,kWo),e(Z2,RWo),e(Z2,uq),e(uq,SWo),e(Z2,PWo),e(oo,$Wo),e(oo,ev),e(ev,IWo),e(ev,bfe),e(bfe,NWo),e(ev,DWo),e(ev,vfe),e(vfe,jWo),e(oo,qWo),e(oo,Tfe),e(Tfe,GWo),e(oo,OWo),g(cw,oo,null),b(c,Yke,u),b(c,ec,u),e(ec,ov),e(ov,Ffe),g(fw,Ffe,null),e(ec,XWo),e(ec,Cfe),e(Cfe,VWo),b(c,Kke,u),b(c,pr,u),g(mw,pr,null),e(pr,zWo),e(pr,oc),e(oc,WWo),e(oc,Mfe),e(Mfe,QWo),e(oc,HWo),e(oc,Efe),e(Efe,UWo),e(oc,JWo),e(pr,YWo),e(pr,gw),e(gw,KWo),e(gw,yfe),e(yfe,ZWo),e(gw,eQo),e(pr,oQo),e(pr,dt),g(hw,dt,null),e(dt,rQo),e(dt,wfe),e(wfe,tQo),e(dt,aQo),e(dt,rc),e(rc,nQo),e(rc,Afe),e(Afe,sQo),e(rc,lQo),e(rc,Lfe),e(Lfe,iQo),e(rc,dQo),e(dt,cQo),e(dt,Bfe),e(Bfe,fQo),e(dt,mQo),g(pw,dt,null),e(pr,gQo),e(pr,ro),g(_w,ro,null),e(ro,hQo),e(ro,xfe),e(xfe,pQo),e(ro,_Qo),e(ro,mn),e(mn,uQo),e(mn,kfe),e(kfe,bQo),e(mn,vQo),e(mn,Rfe),e(Rfe,TQo),e(mn,FQo),e(mn,Sfe),e(Sfe,CQo),e(mn,MQo),e(ro,EQo),e(ro,Pfe),e(Pfe,rv),e(rv,$fe),e($fe,yQo),e(rv,wQo),e(rv,bq),e(bq,AQo),e(rv,LQo),e(ro,BQo),e(ro,tv),e(tv,xQo),e(tv,Ife),e(Ife,kQo),e(tv,RQo),e(tv,Nfe),e(Nfe,SQo),e(ro,PQo),e(ro,Dfe),e(Dfe,$Qo),e(ro,IQo),g(uw,ro,null),b(c,Zke,u),b(c,tc,u),e(tc,av),e(av,jfe),g(bw,jfe,null),e(tc,NQo),e(tc,qfe),e(qfe,DQo),b(c,eRe,u),b(c,_r,u),g(vw,_r,null),e(_r,jQo),e(_r,ac),e(ac,qQo),e(ac,Gfe),e(Gfe,GQo),e(ac,OQo),e(ac,Ofe),e(Ofe,XQo),e(ac,VQo),e(_r,zQo),e(_r,Tw),e(Tw,WQo),e(Tw,Xfe),e(Xfe,QQo),e(Tw,HQo),e(_r,UQo),e(_r,ct),g(Fw,ct,null),e(ct,JQo),e(ct,Vfe),e(Vfe,YQo),e(ct,KQo),e(ct,nc),e(nc,ZQo),e(nc,zfe),e(zfe,eHo),e(nc,oHo),e(nc,Wfe),e(Wfe,rHo),e(nc,tHo),e(ct,aHo),e(ct,Qfe),e(Qfe,nHo),e(ct,sHo),g(Cw,ct,null),e(_r,lHo),e(_r,to),g(Mw,to,null),e(to,iHo),e(to,Hfe),e(Hfe,dHo),e(to,cHo),e(to,gn),e(gn,fHo),e(gn,Ufe),e(Ufe,mHo),e(gn,gHo),e(gn,Jfe),e(Jfe,hHo),e(gn,pHo),e(gn,Yfe),e(Yfe,_Ho),e(gn,uHo),e(to,bHo),e(to,Kfe),e(Kfe,nv),e(nv,Zfe),e(Zfe,vHo),e(nv,THo),e(nv,vq),e(vq,FHo),e(nv,CHo),e(to,MHo),e(to,sv),e(sv,EHo),e(sv,eme),e(eme,yHo),e(sv,wHo),e(sv,ome),e(ome,AHo),e(to,LHo),e(to,rme),e(rme,BHo),e(to,xHo),g(Ew,to,null),b(c,oRe,u),b(c,sc,u),e(sc,lv),e(lv,tme),g(yw,tme,null),e(sc,kHo),e(sc,ame),e(ame,RHo),b(c,rRe,u),b(c,ur,u),g(ww,ur,null),e(ur,SHo),e(ur,lc),e(lc,PHo),e(lc,nme),e(nme,$Ho),e(lc,IHo),e(lc,sme),e(sme,NHo),e(lc,DHo),e(ur,jHo),e(ur,Aw),e(Aw,qHo),e(Aw,lme),e(lme,GHo),e(Aw,OHo),e(ur,XHo),e(ur,ft),g(Lw,ft,null),e(ft,VHo),e(ft,ime),e(ime,zHo),e(ft,WHo),e(ft,ic),e(ic,QHo),e(ic,dme),e(dme,HHo),e(ic,UHo),e(ic,cme),e(cme,JHo),e(ic,YHo),e(ft,KHo),e(ft,fme),e(fme,ZHo),e(ft,eUo),g(Bw,ft,null),e(ur,oUo),e(ur,ao),g(xw,ao,null),e(ao,rUo),e(ao,mme),e(mme,tUo),e(ao,aUo),e(ao,hn),e(hn,nUo),e(hn,gme),e(gme,sUo),e(hn,lUo),e(hn,hme),e(hme,iUo),e(hn,dUo),e(hn,pme),e(pme,cUo),e(hn,fUo),e(ao,mUo),e(ao,kw),e(kw,iv),e(iv,_me),e(_me,gUo),e(iv,hUo),e(iv,Tq),e(Tq,pUo),e(iv,_Uo),e(kw,uUo),e(kw,dv),e(dv,ume),e(ume,bUo),e(dv,vUo),e(dv,Fq),e(Fq,TUo),e(dv,FUo),e(ao,CUo),e(ao,cv),e(cv,MUo),e(cv,bme),e(bme,EUo),e(cv,yUo),e(cv,vme),e(vme,wUo),e(ao,AUo),e(ao,Tme),e(Tme,LUo),e(ao,BUo),g(Rw,ao,null),b(c,tRe,u),b(c,dc,u),e(dc,fv),e(fv,Fme),g(Sw,Fme,null),e(dc,xUo),e(dc,Cme),e(Cme,kUo),b(c,aRe,u),b(c,br,u),g(Pw,br,null),e(br,RUo),e(br,cc),e(cc,SUo),e(cc,Mme),e(Mme,PUo),e(cc,$Uo),e(cc,Eme),e(Eme,IUo),e(cc,NUo),e(br,DUo),e(br,$w),e($w,jUo),e($w,yme),e(yme,qUo),e($w,GUo),e(br,OUo),e(br,mt),g(Iw,mt,null),e(mt,XUo),e(mt,wme),e(wme,VUo),e(mt,zUo),e(mt,fc),e(fc,WUo),e(fc,Ame),e(Ame,QUo),e(fc,HUo),e(fc,Lme),e(Lme,UUo),e(fc,JUo),e(mt,YUo),e(mt,Bme),e(Bme,KUo),e(mt,ZUo),g(Nw,mt,null),e(br,eJo),e(br,no),g(Dw,no,null),e(no,oJo),e(no,xme),e(xme,rJo),e(no,tJo),e(no,pn),e(pn,aJo),e(pn,kme),e(kme,nJo),e(pn,sJo),e(pn,Rme),e(Rme,lJo),e(pn,iJo),e(pn,Sme),e(Sme,dJo),e(pn,cJo),e(no,fJo),e(no,Pme),e(Pme,mv),e(mv,$me),e($me,mJo),e(mv,gJo),e(mv,Cq),e(Cq,hJo),e(mv,pJo),e(no,_Jo),e(no,gv),e(gv,uJo),e(gv,Ime),e(Ime,bJo),e(gv,vJo),e(gv,Nme),e(Nme,TJo),e(no,FJo),e(no,Dme),e(Dme,CJo),e(no,MJo),g(jw,no,null),b(c,nRe,u),b(c,mc,u),e(mc,hv),e(hv,jme),g(qw,jme,null),e(mc,EJo),e(mc,qme),e(qme,yJo),b(c,sRe,u),b(c,vr,u),g(Gw,vr,null),e(vr,wJo),e(vr,gc),e(gc,AJo),e(gc,Gme),e(Gme,LJo),e(gc,BJo),e(gc,Ome),e(Ome,xJo),e(gc,kJo),e(vr,RJo),e(vr,Ow),e(Ow,SJo),e(Ow,Xme),e(Xme,PJo),e(Ow,$Jo),e(vr,IJo),e(vr,gt),g(Xw,gt,null),e(gt,NJo),e(gt,Vme),e(Vme,DJo),e(gt,jJo),e(gt,hc),e(hc,qJo),e(hc,zme),e(zme,GJo),e(hc,OJo),e(hc,Wme),e(Wme,XJo),e(hc,VJo),e(gt,zJo),e(gt,Qme),e(Qme,WJo),e(gt,QJo),g(Vw,gt,null),e(vr,HJo),e(vr,ho),g(zw,ho,null),e(ho,UJo),e(ho,Hme),e(Hme,JJo),e(ho,YJo),e(ho,_n),e(_n,KJo),e(_n,Ume),e(Ume,ZJo),e(_n,eYo),e(_n,Jme),e(Jme,oYo),e(_n,rYo),e(_n,Yme),e(Yme,tYo),e(_n,aYo),e(ho,nYo),e(ho,B),e(B,pv),e(pv,Kme),e(Kme,sYo),e(pv,lYo),e(pv,Mq),e(Mq,iYo),e(pv,dYo),e(B,cYo),e(B,_v),e(_v,Zme),e(Zme,fYo),e(_v,mYo),e(_v,Eq),e(Eq,gYo),e(_v,hYo),e(B,pYo),e(B,uv),e(uv,ege),e(ege,_Yo),e(uv,uYo),e(uv,yq),e(yq,bYo),e(uv,vYo),e(B,TYo),e(B,bv),e(bv,oge),e(oge,FYo),e(bv,CYo),e(bv,wq),e(wq,MYo),e(bv,EYo),e(B,yYo),e(B,vv),e(vv,rge),e(rge,wYo),e(vv,AYo),e(vv,Aq),e(Aq,LYo),e(vv,BYo),e(B,xYo),e(B,Tv),e(Tv,tge),e(tge,kYo),e(Tv,RYo),e(Tv,Lq),e(Lq,SYo),e(Tv,PYo),e(B,$Yo),e(B,Fv),e(Fv,age),e(age,IYo),e(Fv,NYo),e(Fv,Bq),e(Bq,DYo),e(Fv,jYo),e(B,qYo),e(B,Cv),e(Cv,nge),e(nge,GYo),e(Cv,OYo),e(Cv,xq),e(xq,XYo),e(Cv,VYo),e(B,zYo),e(B,Mv),e(Mv,sge),e(sge,WYo),e(Mv,QYo),e(Mv,kq),e(kq,HYo),e(Mv,UYo),e(B,JYo),e(B,Ev),e(Ev,lge),e(lge,YYo),e(Ev,KYo),e(Ev,Rq),e(Rq,ZYo),e(Ev,eKo),e(B,oKo),e(B,yv),e(yv,ige),e(ige,rKo),e(yv,tKo),e(yv,Sq),e(Sq,aKo),e(yv,nKo),e(B,sKo),e(B,wv),e(wv,dge),e(dge,lKo),e(wv,iKo),e(wv,Pq),e(Pq,dKo),e(wv,cKo),e(B,fKo),e(B,Av),e(Av,cge),e(cge,mKo),e(Av,gKo),e(Av,$q),e($q,hKo),e(Av,pKo),e(B,_Ko),e(B,Lv),e(Lv,fge),e(fge,uKo),e(Lv,bKo),e(Lv,Iq),e(Iq,vKo),e(Lv,TKo),e(B,FKo),e(B,Bv),e(Bv,mge),e(mge,CKo),e(Bv,MKo),e(Bv,Nq),e(Nq,EKo),e(Bv,yKo),e(B,wKo),e(B,xv),e(xv,gge),e(gge,AKo),e(xv,LKo),e(xv,Dq),e(Dq,BKo),e(xv,xKo),e(B,kKo),e(B,Gs),e(Gs,hge),e(hge,RKo),e(Gs,SKo),e(Gs,jq),e(jq,PKo),e(Gs,$Ko),e(Gs,qq),e(qq,IKo),e(Gs,NKo),e(B,DKo),e(B,kv),e(kv,pge),e(pge,jKo),e(kv,qKo),e(kv,Gq),e(Gq,GKo),e(kv,OKo),e(B,XKo),e(B,Rv),e(Rv,_ge),e(_ge,VKo),e(Rv,zKo),e(Rv,Oq),e(Oq,WKo),e(Rv,QKo),e(B,HKo),e(B,Sv),e(Sv,uge),e(uge,UKo),e(Sv,JKo),e(Sv,Xq),e(Xq,YKo),e(Sv,KKo),e(B,ZKo),e(B,Pv),e(Pv,bge),e(bge,eZo),e(Pv,oZo),e(Pv,Vq),e(Vq,rZo),e(Pv,tZo),e(B,aZo),e(B,$v),e($v,vge),e(vge,nZo),e($v,sZo),e($v,zq),e(zq,lZo),e($v,iZo),e(B,dZo),e(B,Iv),e(Iv,Tge),e(Tge,cZo),e(Iv,fZo),e(Iv,Wq),e(Wq,mZo),e(Iv,gZo),e(B,hZo),e(B,Nv),e(Nv,Fge),e(Fge,pZo),e(Nv,_Zo),e(Nv,Qq),e(Qq,uZo),e(Nv,bZo),e(B,vZo),e(B,Dv),e(Dv,Cge),e(Cge,TZo),e(Dv,FZo),e(Dv,Hq),e(Hq,CZo),e(Dv,MZo),e(B,EZo),e(B,jv),e(jv,Mge),e(Mge,yZo),e(jv,wZo),e(jv,Uq),e(Uq,AZo),e(jv,LZo),e(B,BZo),e(B,qv),e(qv,Ege),e(Ege,xZo),e(qv,kZo),e(qv,Jq),e(Jq,RZo),e(qv,SZo),e(B,PZo),e(B,Gv),e(Gv,yge),e(yge,$Zo),e(Gv,IZo),e(Gv,Yq),e(Yq,NZo),e(Gv,DZo),e(B,jZo),e(B,Ov),e(Ov,wge),e(wge,qZo),e(Ov,GZo),e(Ov,Kq),e(Kq,OZo),e(Ov,XZo),e(B,VZo),e(B,Xv),e(Xv,Age),e(Age,zZo),e(Xv,WZo),e(Xv,Zq),e(Zq,QZo),e(Xv,HZo),e(B,UZo),e(B,Vv),e(Vv,Lge),e(Lge,JZo),e(Vv,YZo),e(Vv,eG),e(eG,KZo),e(Vv,ZZo),e(B,eer),e(B,zv),e(zv,Bge),e(Bge,oer),e(zv,rer),e(zv,oG),e(oG,ter),e(zv,aer),e(B,ner),e(B,Wv),e(Wv,xge),e(xge,ser),e(Wv,ler),e(Wv,rG),e(rG,ier),e(Wv,der),e(B,cer),e(B,Qv),e(Qv,kge),e(kge,fer),e(Qv,mer),e(Qv,tG),e(tG,ger),e(Qv,her),e(B,per),e(B,Hv),e(Hv,Rge),e(Rge,_er),e(Hv,uer),e(Hv,aG),e(aG,ber),e(Hv,ver),e(B,Ter),e(B,Uv),e(Uv,Sge),e(Sge,Fer),e(Uv,Cer),e(Uv,nG),e(nG,Mer),e(Uv,Eer),e(B,yer),e(B,Jv),e(Jv,Pge),e(Pge,wer),e(Jv,Aer),e(Jv,sG),e(sG,Ler),e(Jv,Ber),e(B,xer),e(B,Yv),e(Yv,$ge),e($ge,ker),e(Yv,Rer),e(Yv,lG),e(lG,Ser),e(Yv,Per),e(B,$er),e(B,Kv),e(Kv,Ige),e(Ige,Ier),e(Kv,Ner),e(Kv,iG),e(iG,Der),e(Kv,jer),e(B,qer),e(B,Zv),e(Zv,Nge),e(Nge,Ger),e(Zv,Oer),e(Zv,dG),e(dG,Xer),e(Zv,Ver),e(B,zer),e(B,e6),e(e6,Dge),e(Dge,Wer),e(e6,Qer),e(e6,cG),e(cG,Her),e(e6,Uer),e(B,Jer),e(B,o6),e(o6,jge),e(jge,Yer),e(o6,Ker),e(o6,fG),e(fG,Zer),e(o6,eor),e(ho,oor),e(ho,qge),e(qge,ror),e(ho,tor),g(Ww,ho,null),b(c,lRe,u),b(c,pc,u),e(pc,r6),e(r6,Gge),g(Qw,Gge,null),e(pc,aor),e(pc,Oge),e(Oge,nor),b(c,iRe,u),b(c,Tr,u),g(Hw,Tr,null),e(Tr,sor),e(Tr,_c),e(_c,lor),e(_c,Xge),e(Xge,ior),e(_c,dor),e(_c,Vge),e(Vge,cor),e(_c,mor),e(Tr,gor),e(Tr,Uw),e(Uw,hor),e(Uw,zge),e(zge,por),e(Uw,_or),e(Tr,uor),e(Tr,ht),g(Jw,ht,null),e(ht,bor),e(ht,Wge),e(Wge,vor),e(ht,Tor),e(ht,uc),e(uc,For),e(uc,Qge),e(Qge,Cor),e(uc,Mor),e(uc,Hge),e(Hge,Eor),e(uc,yor),e(ht,wor),e(ht,Uge),e(Uge,Aor),e(ht,Lor),g(Yw,ht,null),e(Tr,Bor),e(Tr,po),g(Kw,po,null),e(po,xor),e(po,Jge),e(Jge,kor),e(po,Ror),e(po,un),e(un,Sor),e(un,Yge),e(Yge,Por),e(un,$or),e(un,Kge),e(Kge,Ior),e(un,Nor),e(un,Zge),e(Zge,Dor),e(un,jor),e(po,qor),e(po,H),e(H,t6),e(t6,ehe),e(ehe,Gor),e(t6,Oor),e(t6,mG),e(mG,Xor),e(t6,Vor),e(H,zor),e(H,a6),e(a6,ohe),e(ohe,Wor),e(a6,Qor),e(a6,gG),e(gG,Hor),e(a6,Uor),e(H,Jor),e(H,n6),e(n6,rhe),e(rhe,Yor),e(n6,Kor),e(n6,hG),e(hG,Zor),e(n6,err),e(H,orr),e(H,s6),e(s6,the),e(the,rrr),e(s6,trr),e(s6,pG),e(pG,arr),e(s6,nrr),e(H,srr),e(H,l6),e(l6,ahe),e(ahe,lrr),e(l6,irr),e(l6,_G),e(_G,drr),e(l6,crr),e(H,frr),e(H,i6),e(i6,nhe),e(nhe,mrr),e(i6,grr),e(i6,uG),e(uG,hrr),e(i6,prr),e(H,_rr),e(H,d6),e(d6,she),e(she,urr),e(d6,brr),e(d6,bG),e(bG,vrr),e(d6,Trr),e(H,Frr),e(H,c6),e(c6,lhe),e(lhe,Crr),e(c6,Mrr),e(c6,vG),e(vG,Err),e(c6,yrr),e(H,wrr),e(H,f6),e(f6,ihe),e(ihe,Arr),e(f6,Lrr),e(f6,TG),e(TG,Brr),e(f6,xrr),e(H,krr),e(H,m6),e(m6,dhe),e(dhe,Rrr),e(m6,Srr),e(m6,FG),e(FG,Prr),e(m6,$rr),e(H,Irr),e(H,g6),e(g6,che),e(che,Nrr),e(g6,Drr),e(g6,CG),e(CG,jrr),e(g6,qrr),e(H,Grr),e(H,h6),e(h6,fhe),e(fhe,Orr),e(h6,Xrr),e(h6,MG),e(MG,Vrr),e(h6,zrr),e(H,Wrr),e(H,p6),e(p6,mhe),e(mhe,Qrr),e(p6,Hrr),e(p6,EG),e(EG,Urr),e(p6,Jrr),e(H,Yrr),e(H,_6),e(_6,ghe),e(ghe,Krr),e(_6,Zrr),e(_6,yG),e(yG,etr),e(_6,otr),e(H,rtr),e(H,u6),e(u6,hhe),e(hhe,ttr),e(u6,atr),e(u6,wG),e(wG,ntr),e(u6,str),e(H,ltr),e(H,b6),e(b6,phe),e(phe,itr),e(b6,dtr),e(b6,AG),e(AG,ctr),e(b6,ftr),e(H,mtr),e(H,v6),e(v6,_he),e(_he,gtr),e(v6,htr),e(v6,LG),e(LG,ptr),e(v6,_tr),e(H,utr),e(H,T6),e(T6,uhe),e(uhe,btr),e(T6,vtr),e(T6,BG),e(BG,Ttr),e(T6,Ftr),e(H,Ctr),e(H,F6),e(F6,bhe),e(bhe,Mtr),e(F6,Etr),e(F6,xG),e(xG,ytr),e(F6,wtr),e(H,Atr),e(H,C6),e(C6,vhe),e(vhe,Ltr),e(C6,Btr),e(C6,kG),e(kG,xtr),e(C6,ktr),e(H,Rtr),e(H,M6),e(M6,The),e(The,Str),e(M6,Ptr),e(M6,RG),e(RG,$tr),e(M6,Itr),e(H,Ntr),e(H,E6),e(E6,Fhe),e(Fhe,Dtr),e(E6,jtr),e(E6,SG),e(SG,qtr),e(E6,Gtr),e(po,Otr),e(po,Che),e(Che,Xtr),e(po,Vtr),g(Zw,po,null),b(c,dRe,u),b(c,bc,u),e(bc,y6),e(y6,Mhe),g(eA,Mhe,null),e(bc,ztr),e(bc,Ehe),e(Ehe,Wtr),b(c,cRe,u),b(c,Fr,u),g(oA,Fr,null),e(Fr,Qtr),e(Fr,vc),e(vc,Htr),e(vc,yhe),e(yhe,Utr),e(vc,Jtr),e(vc,whe),e(whe,Ytr),e(vc,Ktr),e(Fr,Ztr),e(Fr,rA),e(rA,ear),e(rA,Ahe),e(Ahe,oar),e(rA,rar),e(Fr,tar),e(Fr,pt),g(tA,pt,null),e(pt,aar),e(pt,Lhe),e(Lhe,nar),e(pt,sar),e(pt,Tc),e(Tc,lar),e(Tc,Bhe),e(Bhe,iar),e(Tc,dar),e(Tc,xhe),e(xhe,car),e(Tc,far),e(pt,mar),e(pt,khe),e(khe,gar),e(pt,har),g(aA,pt,null),e(Fr,par),e(Fr,_o),g(nA,_o,null),e(_o,_ar),e(_o,Rhe),e(Rhe,uar),e(_o,bar),e(_o,bn),e(bn,Tar),e(bn,She),e(She,Far),e(bn,Car),e(bn,Phe),e(Phe,Mar),e(bn,Ear),e(bn,$he),e($he,yar),e(bn,war),e(_o,Aar),e(_o,ge),e(ge,w6),e(w6,Ihe),e(Ihe,Lar),e(w6,Bar),e(w6,PG),e(PG,xar),e(w6,kar),e(ge,Rar),e(ge,A6),e(A6,Nhe),e(Nhe,Sar),e(A6,Par),e(A6,$G),e($G,$ar),e(A6,Iar),e(ge,Nar),e(ge,L6),e(L6,Dhe),e(Dhe,Dar),e(L6,jar),e(L6,IG),e(IG,qar),e(L6,Gar),e(ge,Oar),e(ge,B6),e(B6,jhe),e(jhe,Xar),e(B6,Var),e(B6,NG),e(NG,zar),e(B6,War),e(ge,Qar),e(ge,x6),e(x6,qhe),e(qhe,Har),e(x6,Uar),e(x6,DG),e(DG,Jar),e(x6,Yar),e(ge,Kar),e(ge,k6),e(k6,Ghe),e(Ghe,Zar),e(k6,enr),e(k6,jG),e(jG,onr),e(k6,rnr),e(ge,tnr),e(ge,R6),e(R6,Ohe),e(Ohe,anr),e(R6,nnr),e(R6,qG),e(qG,snr),e(R6,lnr),e(ge,inr),e(ge,S6),e(S6,Xhe),e(Xhe,dnr),e(S6,cnr),e(S6,GG),e(GG,fnr),e(S6,mnr),e(ge,gnr),e(ge,P6),e(P6,Vhe),e(Vhe,hnr),e(P6,pnr),e(P6,OG),e(OG,_nr),e(P6,unr),e(ge,bnr),e(ge,$6),e($6,zhe),e(zhe,vnr),e($6,Tnr),e($6,XG),e(XG,Fnr),e($6,Cnr),e(ge,Mnr),e(ge,I6),e(I6,Whe),e(Whe,Enr),e(I6,ynr),e(I6,VG),e(VG,wnr),e(I6,Anr),e(_o,Lnr),e(_o,Qhe),e(Qhe,Bnr),e(_o,xnr),g(sA,_o,null),b(c,fRe,u),b(c,Fc,u),e(Fc,N6),e(N6,Hhe),g(lA,Hhe,null),e(Fc,knr),e(Fc,Uhe),e(Uhe,Rnr),b(c,mRe,u),b(c,Cr,u),g(iA,Cr,null),e(Cr,Snr),e(Cr,Cc),e(Cc,Pnr),e(Cc,Jhe),e(Jhe,$nr),e(Cc,Inr),e(Cc,Yhe),e(Yhe,Nnr),e(Cc,Dnr),e(Cr,jnr),e(Cr,dA),e(dA,qnr),e(dA,Khe),e(Khe,Gnr),e(dA,Onr),e(Cr,Xnr),e(Cr,_t),g(cA,_t,null),e(_t,Vnr),e(_t,Zhe),e(Zhe,znr),e(_t,Wnr),e(_t,Mc),e(Mc,Qnr),e(Mc,epe),e(epe,Hnr),e(Mc,Unr),e(Mc,ope),e(ope,Jnr),e(Mc,Ynr),e(_t,Knr),e(_t,rpe),e(rpe,Znr),e(_t,esr),g(fA,_t,null),e(Cr,osr),e(Cr,uo),g(mA,uo,null),e(uo,rsr),e(uo,tpe),e(tpe,tsr),e(uo,asr),e(uo,vn),e(vn,nsr),e(vn,ape),e(ape,ssr),e(vn,lsr),e(vn,npe),e(npe,isr),e(vn,dsr),e(vn,spe),e(spe,csr),e(vn,fsr),e(uo,msr),e(uo,gA),e(gA,D6),e(D6,lpe),e(lpe,gsr),e(D6,hsr),e(D6,zG),e(zG,psr),e(D6,_sr),e(gA,usr),e(gA,j6),e(j6,ipe),e(ipe,bsr),e(j6,vsr),e(j6,WG),e(WG,Tsr),e(j6,Fsr),e(uo,Csr),e(uo,dpe),e(dpe,Msr),e(uo,Esr),g(hA,uo,null),b(c,gRe,u),b(c,Ec,u),e(Ec,q6),e(q6,cpe),g(pA,cpe,null),e(Ec,ysr),e(Ec,fpe),e(fpe,wsr),b(c,hRe,u),b(c,Mr,u),g(_A,Mr,null),e(Mr,Asr),e(Mr,yc),e(yc,Lsr),e(yc,mpe),e(mpe,Bsr),e(yc,xsr),e(yc,gpe),e(gpe,ksr),e(yc,Rsr),e(Mr,Ssr),e(Mr,uA),e(uA,Psr),e(uA,hpe),e(hpe,$sr),e(uA,Isr),e(Mr,Nsr),e(Mr,ut),g(bA,ut,null),e(ut,Dsr),e(ut,ppe),e(ppe,jsr),e(ut,qsr),e(ut,wc),e(wc,Gsr),e(wc,_pe),e(_pe,Osr),e(wc,Xsr),e(wc,upe),e(upe,Vsr),e(wc,zsr),e(ut,Wsr),e(ut,bpe),e(bpe,Qsr),e(ut,Hsr),g(vA,ut,null),e(Mr,Usr),e(Mr,bo),g(TA,bo,null),e(bo,Jsr),e(bo,vpe),e(vpe,Ysr),e(bo,Ksr),e(bo,Tn),e(Tn,Zsr),e(Tn,Tpe),e(Tpe,elr),e(Tn,olr),e(Tn,Fpe),e(Fpe,rlr),e(Tn,tlr),e(Tn,Cpe),e(Cpe,alr),e(Tn,nlr),e(bo,slr),e(bo,J),e(J,G6),e(G6,Mpe),e(Mpe,llr),e(G6,ilr),e(G6,QG),e(QG,dlr),e(G6,clr),e(J,flr),e(J,O6),e(O6,Epe),e(Epe,mlr),e(O6,glr),e(O6,HG),e(HG,hlr),e(O6,plr),e(J,_lr),e(J,X6),e(X6,ype),e(ype,ulr),e(X6,blr),e(X6,UG),e(UG,vlr),e(X6,Tlr),e(J,Flr),e(J,V6),e(V6,wpe),e(wpe,Clr),e(V6,Mlr),e(V6,JG),e(JG,Elr),e(V6,ylr),e(J,wlr),e(J,z6),e(z6,Ape),e(Ape,Alr),e(z6,Llr),e(z6,YG),e(YG,Blr),e(z6,xlr),e(J,klr),e(J,W6),e(W6,Lpe),e(Lpe,Rlr),e(W6,Slr),e(W6,KG),e(KG,Plr),e(W6,$lr),e(J,Ilr),e(J,Q6),e(Q6,Bpe),e(Bpe,Nlr),e(Q6,Dlr),e(Q6,ZG),e(ZG,jlr),e(Q6,qlr),e(J,Glr),e(J,H6),e(H6,xpe),e(xpe,Olr),e(H6,Xlr),e(H6,eO),e(eO,Vlr),e(H6,zlr),e(J,Wlr),e(J,U6),e(U6,kpe),e(kpe,Qlr),e(U6,Hlr),e(U6,oO),e(oO,Ulr),e(U6,Jlr),e(J,Ylr),e(J,J6),e(J6,Rpe),e(Rpe,Klr),e(J6,Zlr),e(J6,rO),e(rO,eir),e(J6,oir),e(J,rir),e(J,Y6),e(Y6,Spe),e(Spe,tir),e(Y6,air),e(Y6,tO),e(tO,nir),e(Y6,sir),e(J,lir),e(J,K6),e(K6,Ppe),e(Ppe,iir),e(K6,dir),e(K6,aO),e(aO,cir),e(K6,fir),e(J,mir),e(J,Z6),e(Z6,$pe),e($pe,gir),e(Z6,hir),e(Z6,nO),e(nO,pir),e(Z6,_ir),e(J,uir),e(J,eT),e(eT,Ipe),e(Ipe,bir),e(eT,vir),e(eT,sO),e(sO,Tir),e(eT,Fir),e(J,Cir),e(J,oT),e(oT,Npe),e(Npe,Mir),e(oT,Eir),e(oT,lO),e(lO,yir),e(oT,wir),e(J,Air),e(J,rT),e(rT,Dpe),e(Dpe,Lir),e(rT,Bir),e(rT,iO),e(iO,xir),e(rT,kir),e(J,Rir),e(J,tT),e(tT,jpe),e(jpe,Sir),e(tT,Pir),e(tT,dO),e(dO,$ir),e(tT,Iir),e(J,Nir),e(J,aT),e(aT,qpe),e(qpe,Dir),e(aT,jir),e(aT,cO),e(cO,qir),e(aT,Gir),e(J,Oir),e(J,nT),e(nT,Gpe),e(Gpe,Xir),e(nT,Vir),e(nT,fO),e(fO,zir),e(nT,Wir),e(J,Qir),e(J,sT),e(sT,Ope),e(Ope,Hir),e(sT,Uir),e(sT,mO),e(mO,Jir),e(sT,Yir),e(bo,Kir),e(bo,Xpe),e(Xpe,Zir),e(bo,edr),g(FA,bo,null),b(c,pRe,u),b(c,Ac,u),e(Ac,lT),e(lT,Vpe),g(CA,Vpe,null),e(Ac,odr),e(Ac,zpe),e(zpe,rdr),b(c,_Re,u),b(c,Er,u),g(MA,Er,null),e(Er,tdr),e(Er,Lc),e(Lc,adr),e(Lc,Wpe),e(Wpe,ndr),e(Lc,sdr),e(Lc,Qpe),e(Qpe,ldr),e(Lc,idr),e(Er,ddr),e(Er,EA),e(EA,cdr),e(EA,Hpe),e(Hpe,fdr),e(EA,mdr),e(Er,gdr),e(Er,bt),g(yA,bt,null),e(bt,hdr),e(bt,Upe),e(Upe,pdr),e(bt,_dr),e(bt,Bc),e(Bc,udr),e(Bc,Jpe),e(Jpe,bdr),e(Bc,vdr),e(Bc,Ype),e(Ype,Tdr),e(Bc,Fdr),e(bt,Cdr),e(bt,Kpe),e(Kpe,Mdr),e(bt,Edr),g(wA,bt,null),e(Er,ydr),e(Er,vo),g(AA,vo,null),e(vo,wdr),e(vo,Zpe),e(Zpe,Adr),e(vo,Ldr),e(vo,Fn),e(Fn,Bdr),e(Fn,e_e),e(e_e,xdr),e(Fn,kdr),e(Fn,o_e),e(o_e,Rdr),e(Fn,Sdr),e(Fn,r_e),e(r_e,Pdr),e(Fn,$dr),e(vo,Idr),e(vo,_e),e(_e,iT),e(iT,t_e),e(t_e,Ndr),e(iT,Ddr),e(iT,gO),e(gO,jdr),e(iT,qdr),e(_e,Gdr),e(_e,dT),e(dT,a_e),e(a_e,Odr),e(dT,Xdr),e(dT,hO),e(hO,Vdr),e(dT,zdr),e(_e,Wdr),e(_e,cT),e(cT,n_e),e(n_e,Qdr),e(cT,Hdr),e(cT,pO),e(pO,Udr),e(cT,Jdr),e(_e,Ydr),e(_e,fT),e(fT,s_e),e(s_e,Kdr),e(fT,Zdr),e(fT,_O),e(_O,ecr),e(fT,ocr),e(_e,rcr),e(_e,mT),e(mT,l_e),e(l_e,tcr),e(mT,acr),e(mT,uO),e(uO,ncr),e(mT,scr),e(_e,lcr),e(_e,gT),e(gT,i_e),e(i_e,icr),e(gT,dcr),e(gT,bO),e(bO,ccr),e(gT,fcr),e(_e,mcr),e(_e,hT),e(hT,d_e),e(d_e,gcr),e(hT,hcr),e(hT,vO),e(vO,pcr),e(hT,_cr),e(_e,ucr),e(_e,pT),e(pT,c_e),e(c_e,bcr),e(pT,vcr),e(pT,TO),e(TO,Tcr),e(pT,Fcr),e(_e,Ccr),e(_e,_T),e(_T,f_e),e(f_e,Mcr),e(_T,Ecr),e(_T,FO),e(FO,ycr),e(_T,wcr),e(_e,Acr),e(_e,uT),e(uT,m_e),e(m_e,Lcr),e(uT,Bcr),e(uT,CO),e(CO,xcr),e(uT,kcr),e(vo,Rcr),e(vo,g_e),e(g_e,Scr),e(vo,Pcr),g(LA,vo,null),b(c,uRe,u),b(c,xc,u),e(xc,bT),e(bT,h_e),g(BA,h_e,null),e(xc,$cr),e(xc,p_e),e(p_e,Icr),b(c,bRe,u),b(c,yr,u),g(xA,yr,null),e(yr,Ncr),e(yr,kc),e(kc,Dcr),e(kc,__e),e(__e,jcr),e(kc,qcr),e(kc,u_e),e(u_e,Gcr),e(kc,Ocr),e(yr,Xcr),e(yr,kA),e(kA,Vcr),e(kA,b_e),e(b_e,zcr),e(kA,Wcr),e(yr,Qcr),e(yr,vt),g(RA,vt,null),e(vt,Hcr),e(vt,v_e),e(v_e,Ucr),e(vt,Jcr),e(vt,Rc),e(Rc,Ycr),e(Rc,T_e),e(T_e,Kcr),e(Rc,Zcr),e(Rc,F_e),e(F_e,efr),e(Rc,ofr),e(vt,rfr),e(vt,C_e),e(C_e,tfr),e(vt,afr),g(SA,vt,null),e(yr,nfr),e(yr,To),g(PA,To,null),e(To,sfr),e(To,M_e),e(M_e,lfr),e(To,ifr),e(To,Cn),e(Cn,dfr),e(Cn,E_e),e(E_e,cfr),e(Cn,ffr),e(Cn,y_e),e(y_e,mfr),e(Cn,gfr),e(Cn,w_e),e(w_e,hfr),e(Cn,pfr),e(To,_fr),e(To,V),e(V,vT),e(vT,A_e),e(A_e,ufr),e(vT,bfr),e(vT,MO),e(MO,vfr),e(vT,Tfr),e(V,Ffr),e(V,TT),e(TT,L_e),e(L_e,Cfr),e(TT,Mfr),e(TT,EO),e(EO,Efr),e(TT,yfr),e(V,wfr),e(V,FT),e(FT,B_e),e(B_e,Afr),e(FT,Lfr),e(FT,yO),e(yO,Bfr),e(FT,xfr),e(V,kfr),e(V,CT),e(CT,x_e),e(x_e,Rfr),e(CT,Sfr),e(CT,wO),e(wO,Pfr),e(CT,$fr),e(V,Ifr),e(V,MT),e(MT,k_e),e(k_e,Nfr),e(MT,Dfr),e(MT,AO),e(AO,jfr),e(MT,qfr),e(V,Gfr),e(V,ET),e(ET,R_e),e(R_e,Ofr),e(ET,Xfr),e(ET,LO),e(LO,Vfr),e(ET,zfr),e(V,Wfr),e(V,yT),e(yT,S_e),e(S_e,Qfr),e(yT,Hfr),e(yT,BO),e(BO,Ufr),e(yT,Jfr),e(V,Yfr),e(V,wT),e(wT,P_e),e(P_e,Kfr),e(wT,Zfr),e(wT,xO),e(xO,emr),e(wT,omr),e(V,rmr),e(V,AT),e(AT,$_e),e($_e,tmr),e(AT,amr),e(AT,kO),e(kO,nmr),e(AT,smr),e(V,lmr),e(V,LT),e(LT,I_e),e(I_e,imr),e(LT,dmr),e(LT,RO),e(RO,cmr),e(LT,fmr),e(V,mmr),e(V,BT),e(BT,N_e),e(N_e,gmr),e(BT,hmr),e(BT,SO),e(SO,pmr),e(BT,_mr),e(V,umr),e(V,xT),e(xT,D_e),e(D_e,bmr),e(xT,vmr),e(xT,PO),e(PO,Tmr),e(xT,Fmr),e(V,Cmr),e(V,kT),e(kT,j_e),e(j_e,Mmr),e(kT,Emr),e(kT,$O),e($O,ymr),e(kT,wmr),e(V,Amr),e(V,RT),e(RT,q_e),e(q_e,Lmr),e(RT,Bmr),e(RT,IO),e(IO,xmr),e(RT,kmr),e(V,Rmr),e(V,ST),e(ST,G_e),e(G_e,Smr),e(ST,Pmr),e(ST,NO),e(NO,$mr),e(ST,Imr),e(V,Nmr),e(V,PT),e(PT,O_e),e(O_e,Dmr),e(PT,jmr),e(PT,DO),e(DO,qmr),e(PT,Gmr),e(V,Omr),e(V,$T),e($T,X_e),e(X_e,Xmr),e($T,Vmr),e($T,jO),e(jO,zmr),e($T,Wmr),e(V,Qmr),e(V,IT),e(IT,V_e),e(V_e,Hmr),e(IT,Umr),e(IT,qO),e(qO,Jmr),e(IT,Ymr),e(V,Kmr),e(V,NT),e(NT,z_e),e(z_e,Zmr),e(NT,egr),e(NT,GO),e(GO,ogr),e(NT,rgr),e(V,tgr),e(V,DT),e(DT,W_e),e(W_e,agr),e(DT,ngr),e(DT,OO),e(OO,sgr),e(DT,lgr),e(V,igr),e(V,jT),e(jT,Q_e),e(Q_e,dgr),e(jT,cgr),e(jT,XO),e(XO,fgr),e(jT,mgr),e(V,ggr),e(V,qT),e(qT,H_e),e(H_e,hgr),e(qT,pgr),e(qT,VO),e(VO,_gr),e(qT,ugr),e(V,bgr),e(V,GT),e(GT,U_e),e(U_e,vgr),e(GT,Tgr),e(GT,zO),e(zO,Fgr),e(GT,Cgr),e(V,Mgr),e(V,OT),e(OT,J_e),e(J_e,Egr),e(OT,ygr),e(OT,WO),e(WO,wgr),e(OT,Agr),e(V,Lgr),e(V,XT),e(XT,Y_e),e(Y_e,Bgr),e(XT,xgr),e(XT,QO),e(QO,kgr),e(XT,Rgr),e(To,Sgr),e(To,K_e),e(K_e,Pgr),e(To,$gr),g($A,To,null),b(c,vRe,u),b(c,Sc,u),e(Sc,VT),e(VT,Z_e),g(IA,Z_e,null),e(Sc,Igr),e(Sc,eue),e(eue,Ngr),b(c,TRe,u),b(c,wr,u),g(NA,wr,null),e(wr,Dgr),e(wr,Pc),e(Pc,jgr),e(Pc,oue),e(oue,qgr),e(Pc,Ggr),e(Pc,rue),e(rue,Ogr),e(Pc,Xgr),e(wr,Vgr),e(wr,DA),e(DA,zgr),e(DA,tue),e(tue,Wgr),e(DA,Qgr),e(wr,Hgr),e(wr,Tt),g(jA,Tt,null),e(Tt,Ugr),e(Tt,aue),e(aue,Jgr),e(Tt,Ygr),e(Tt,$c),e($c,Kgr),e($c,nue),e(nue,Zgr),e($c,ehr),e($c,sue),e(sue,ohr),e($c,rhr),e(Tt,thr),e(Tt,lue),e(lue,ahr),e(Tt,nhr),g(qA,Tt,null),e(wr,shr),e(wr,Fo),g(GA,Fo,null),e(Fo,lhr),e(Fo,iue),e(iue,ihr),e(Fo,dhr),e(Fo,Mn),e(Mn,chr),e(Mn,due),e(due,fhr),e(Mn,mhr),e(Mn,cue),e(cue,ghr),e(Mn,hhr),e(Mn,fue),e(fue,phr),e(Mn,_hr),e(Fo,uhr),e(Fo,ae),e(ae,zT),e(zT,mue),e(mue,bhr),e(zT,vhr),e(zT,HO),e(HO,Thr),e(zT,Fhr),e(ae,Chr),e(ae,WT),e(WT,gue),e(gue,Mhr),e(WT,Ehr),e(WT,UO),e(UO,yhr),e(WT,whr),e(ae,Ahr),e(ae,QT),e(QT,hue),e(hue,Lhr),e(QT,Bhr),e(QT,JO),e(JO,xhr),e(QT,khr),e(ae,Rhr),e(ae,HT),e(HT,pue),e(pue,Shr),e(HT,Phr),e(HT,YO),e(YO,$hr),e(HT,Ihr),e(ae,Nhr),e(ae,UT),e(UT,_ue),e(_ue,Dhr),e(UT,jhr),e(UT,KO),e(KO,qhr),e(UT,Ghr),e(ae,Ohr),e(ae,JT),e(JT,uue),e(uue,Xhr),e(JT,Vhr),e(JT,ZO),e(ZO,zhr),e(JT,Whr),e(ae,Qhr),e(ae,YT),e(YT,bue),e(bue,Hhr),e(YT,Uhr),e(YT,eX),e(eX,Jhr),e(YT,Yhr),e(ae,Khr),e(ae,KT),e(KT,vue),e(vue,Zhr),e(KT,epr),e(KT,oX),e(oX,opr),e(KT,rpr),e(ae,tpr),e(ae,ZT),e(ZT,Tue),e(Tue,apr),e(ZT,npr),e(ZT,rX),e(rX,spr),e(ZT,lpr),e(ae,ipr),e(ae,eF),e(eF,Fue),e(Fue,dpr),e(eF,cpr),e(eF,tX),e(tX,fpr),e(eF,mpr),e(ae,gpr),e(ae,oF),e(oF,Cue),e(Cue,hpr),e(oF,ppr),e(oF,aX),e(aX,_pr),e(oF,upr),e(ae,bpr),e(ae,rF),e(rF,Mue),e(Mue,vpr),e(rF,Tpr),e(rF,nX),e(nX,Fpr),e(rF,Cpr),e(ae,Mpr),e(ae,tF),e(tF,Eue),e(Eue,Epr),e(tF,ypr),e(tF,sX),e(sX,wpr),e(tF,Apr),e(ae,Lpr),e(ae,aF),e(aF,yue),e(yue,Bpr),e(aF,xpr),e(aF,lX),e(lX,kpr),e(aF,Rpr),e(ae,Spr),e(ae,nF),e(nF,wue),e(wue,Ppr),e(nF,$pr),e(nF,iX),e(iX,Ipr),e(nF,Npr),e(ae,Dpr),e(ae,sF),e(sF,Aue),e(Aue,jpr),e(sF,qpr),e(sF,dX),e(dX,Gpr),e(sF,Opr),e(ae,Xpr),e(ae,lF),e(lF,Lue),e(Lue,Vpr),e(lF,zpr),e(lF,cX),e(cX,Wpr),e(lF,Qpr),e(Fo,Hpr),e(Fo,Bue),e(Bue,Upr),e(Fo,Jpr),g(OA,Fo,null),b(c,FRe,u),b(c,Ic,u),e(Ic,iF),e(iF,xue),g(XA,xue,null),e(Ic,Ypr),e(Ic,kue),e(kue,Kpr),b(c,CRe,u),b(c,Ar,u),g(VA,Ar,null),e(Ar,Zpr),e(Ar,Nc),e(Nc,e_r),e(Nc,Rue),e(Rue,o_r),e(Nc,r_r),e(Nc,Sue),e(Sue,t_r),e(Nc,a_r),e(Ar,n_r),e(Ar,zA),e(zA,s_r),e(zA,Pue),e(Pue,l_r),e(zA,i_r),e(Ar,d_r),e(Ar,Ft),g(WA,Ft,null),e(Ft,c_r),e(Ft,$ue),e($ue,f_r),e(Ft,m_r),e(Ft,Dc),e(Dc,g_r),e(Dc,Iue),e(Iue,h_r),e(Dc,p_r),e(Dc,Nue),e(Nue,__r),e(Dc,u_r),e(Ft,b_r),e(Ft,Due),e(Due,v_r),e(Ft,T_r),g(QA,Ft,null),e(Ar,F_r),e(Ar,Co),g(HA,Co,null),e(Co,C_r),e(Co,jue),e(jue,M_r),e(Co,E_r),e(Co,En),e(En,y_r),e(En,que),e(que,w_r),e(En,A_r),e(En,Gue),e(Gue,L_r),e(En,B_r),e(En,Oue),e(Oue,x_r),e(En,k_r),e(Co,R_r),e(Co,Xue),e(Xue,dF),e(dF,Vue),e(Vue,S_r),e(dF,P_r),e(dF,fX),e(fX,$_r),e(dF,I_r),e(Co,N_r),e(Co,zue),e(zue,D_r),e(Co,j_r),g(UA,Co,null),b(c,MRe,u),b(c,jc,u),e(jc,cF),e(cF,Wue),g(JA,Wue,null),e(jc,q_r),e(jc,Que),e(Que,G_r),b(c,ERe,u),b(c,Lr,u),g(YA,Lr,null),e(Lr,O_r),e(Lr,qc),e(qc,X_r),e(qc,Hue),e(Hue,V_r),e(qc,z_r),e(qc,Uue),e(Uue,W_r),e(qc,Q_r),e(Lr,H_r),e(Lr,KA),e(KA,U_r),e(KA,Jue),e(Jue,J_r),e(KA,Y_r),e(Lr,K_r),e(Lr,Ct),g(ZA,Ct,null),e(Ct,Z_r),e(Ct,Yue),e(Yue,eur),e(Ct,our),e(Ct,Gc),e(Gc,rur),e(Gc,Kue),e(Kue,tur),e(Gc,aur),e(Gc,Zue),e(Zue,nur),e(Gc,sur),e(Ct,lur),e(Ct,e1e),e(e1e,iur),e(Ct,dur),g(e0,Ct,null),e(Lr,cur),e(Lr,Mo),g(o0,Mo,null),e(Mo,fur),e(Mo,o1e),e(o1e,mur),e(Mo,gur),e(Mo,yn),e(yn,hur),e(yn,r1e),e(r1e,pur),e(yn,_ur),e(yn,t1e),e(t1e,uur),e(yn,bur),e(yn,a1e),e(a1e,vur),e(yn,Tur),e(Mo,Fur),e(Mo,Y),e(Y,fF),e(fF,n1e),e(n1e,Cur),e(fF,Mur),e(fF,mX),e(mX,Eur),e(fF,yur),e(Y,wur),e(Y,mF),e(mF,s1e),e(s1e,Aur),e(mF,Lur),e(mF,gX),e(gX,Bur),e(mF,xur),e(Y,kur),e(Y,gF),e(gF,l1e),e(l1e,Rur),e(gF,Sur),e(gF,hX),e(hX,Pur),e(gF,$ur),e(Y,Iur),e(Y,hF),e(hF,i1e),e(i1e,Nur),e(hF,Dur),e(hF,pX),e(pX,jur),e(hF,qur),e(Y,Gur),e(Y,pF),e(pF,d1e),e(d1e,Our),e(pF,Xur),e(pF,_X),e(_X,Vur),e(pF,zur),e(Y,Wur),e(Y,_F),e(_F,c1e),e(c1e,Qur),e(_F,Hur),e(_F,uX),e(uX,Uur),e(_F,Jur),e(Y,Yur),e(Y,uF),e(uF,f1e),e(f1e,Kur),e(uF,Zur),e(uF,bX),e(bX,e1r),e(uF,o1r),e(Y,r1r),e(Y,bF),e(bF,m1e),e(m1e,t1r),e(bF,a1r),e(bF,vX),e(vX,n1r),e(bF,s1r),e(Y,l1r),e(Y,vF),e(vF,g1e),e(g1e,i1r),e(vF,d1r),e(vF,TX),e(TX,c1r),e(vF,f1r),e(Y,m1r),e(Y,TF),e(TF,h1e),e(h1e,g1r),e(TF,h1r),e(TF,FX),e(FX,p1r),e(TF,_1r),e(Y,u1r),e(Y,FF),e(FF,p1e),e(p1e,b1r),e(FF,v1r),e(FF,CX),e(CX,T1r),e(FF,F1r),e(Y,C1r),e(Y,CF),e(CF,_1e),e(_1e,M1r),e(CF,E1r),e(CF,MX),e(MX,y1r),e(CF,w1r),e(Y,A1r),e(Y,MF),e(MF,u1e),e(u1e,L1r),e(MF,B1r),e(MF,EX),e(EX,x1r),e(MF,k1r),e(Y,R1r),e(Y,EF),e(EF,b1e),e(b1e,S1r),e(EF,P1r),e(EF,yX),e(yX,$1r),e(EF,I1r),e(Y,N1r),e(Y,yF),e(yF,v1e),e(v1e,D1r),e(yF,j1r),e(yF,wX),e(wX,q1r),e(yF,G1r),e(Y,O1r),e(Y,wF),e(wF,T1e),e(T1e,X1r),e(wF,V1r),e(wF,AX),e(AX,z1r),e(wF,W1r),e(Y,Q1r),e(Y,AF),e(AF,F1e),e(F1e,H1r),e(AF,U1r),e(AF,LX),e(LX,J1r),e(AF,Y1r),e(Y,K1r),e(Y,LF),e(LF,C1e),e(C1e,Z1r),e(LF,e9r),e(LF,BX),e(BX,o9r),e(LF,r9r),e(Y,t9r),e(Y,BF),e(BF,M1e),e(M1e,a9r),e(BF,n9r),e(BF,xX),e(xX,s9r),e(BF,l9r),e(Y,i9r),e(Y,xF),e(xF,E1e),e(E1e,d9r),e(xF,c9r),e(xF,kX),e(kX,f9r),e(xF,m9r),e(Mo,g9r),e(Mo,y1e),e(y1e,h9r),e(Mo,p9r),g(r0,Mo,null),b(c,yRe,u),b(c,Oc,u),e(Oc,kF),e(kF,w1e),g(t0,w1e,null),e(Oc,_9r),e(Oc,A1e),e(A1e,u9r),b(c,wRe,u),b(c,Br,u),g(a0,Br,null),e(Br,b9r),e(Br,Xc),e(Xc,v9r),e(Xc,L1e),e(L1e,T9r),e(Xc,F9r),e(Xc,B1e),e(B1e,C9r),e(Xc,M9r),e(Br,E9r),e(Br,n0),e(n0,y9r),e(n0,x1e),e(x1e,w9r),e(n0,A9r),e(Br,L9r),e(Br,Mt),g(s0,Mt,null),e(Mt,B9r),e(Mt,k1e),e(k1e,x9r),e(Mt,k9r),e(Mt,Vc),e(Vc,R9r),e(Vc,R1e),e(R1e,S9r),e(Vc,P9r),e(Vc,S1e),e(S1e,$9r),e(Vc,I9r),e(Mt,N9r),e(Mt,P1e),e(P1e,D9r),e(Mt,j9r),g(l0,Mt,null),e(Br,q9r),e(Br,Eo),g(i0,Eo,null),e(Eo,G9r),e(Eo,$1e),e($1e,O9r),e(Eo,X9r),e(Eo,wn),e(wn,V9r),e(wn,I1e),e(I1e,z9r),e(wn,W9r),e(wn,N1e),e(N1e,Q9r),e(wn,H9r),e(wn,D1e),e(D1e,U9r),e(wn,J9r),e(Eo,Y9r),e(Eo,Z),e(Z,RF),e(RF,j1e),e(j1e,K9r),e(RF,Z9r),e(RF,RX),e(RX,ebr),e(RF,obr),e(Z,rbr),e(Z,SF),e(SF,q1e),e(q1e,tbr),e(SF,abr),e(SF,SX),e(SX,nbr),e(SF,sbr),e(Z,lbr),e(Z,PF),e(PF,G1e),e(G1e,ibr),e(PF,dbr),e(PF,PX),e(PX,cbr),e(PF,fbr),e(Z,mbr),e(Z,$F),e($F,O1e),e(O1e,gbr),e($F,hbr),e($F,$X),e($X,pbr),e($F,_br),e(Z,ubr),e(Z,IF),e(IF,X1e),e(X1e,bbr),e(IF,vbr),e(IF,IX),e(IX,Tbr),e(IF,Fbr),e(Z,Cbr),e(Z,NF),e(NF,V1e),e(V1e,Mbr),e(NF,Ebr),e(NF,NX),e(NX,ybr),e(NF,wbr),e(Z,Abr),e(Z,DF),e(DF,z1e),e(z1e,Lbr),e(DF,Bbr),e(DF,DX),e(DX,xbr),e(DF,kbr),e(Z,Rbr),e(Z,jF),e(jF,W1e),e(W1e,Sbr),e(jF,Pbr),e(jF,jX),e(jX,$br),e(jF,Ibr),e(Z,Nbr),e(Z,qF),e(qF,Q1e),e(Q1e,Dbr),e(qF,jbr),e(qF,qX),e(qX,qbr),e(qF,Gbr),e(Z,Obr),e(Z,GF),e(GF,H1e),e(H1e,Xbr),e(GF,Vbr),e(GF,GX),e(GX,zbr),e(GF,Wbr),e(Z,Qbr),e(Z,OF),e(OF,U1e),e(U1e,Hbr),e(OF,Ubr),e(OF,OX),e(OX,Jbr),e(OF,Ybr),e(Z,Kbr),e(Z,XF),e(XF,J1e),e(J1e,Zbr),e(XF,e3r),e(XF,XX),e(XX,o3r),e(XF,r3r),e(Z,t3r),e(Z,VF),e(VF,Y1e),e(Y1e,a3r),e(VF,n3r),e(VF,VX),e(VX,s3r),e(VF,l3r),e(Z,i3r),e(Z,zF),e(zF,K1e),e(K1e,d3r),e(zF,c3r),e(zF,zX),e(zX,f3r),e(zF,m3r),e(Z,g3r),e(Z,WF),e(WF,Z1e),e(Z1e,h3r),e(WF,p3r),e(WF,WX),e(WX,_3r),e(WF,u3r),e(Z,b3r),e(Z,QF),e(QF,e9e),e(e9e,v3r),e(QF,T3r),e(QF,QX),e(QX,F3r),e(QF,C3r),e(Z,M3r),e(Z,HF),e(HF,o9e),e(o9e,E3r),e(HF,y3r),e(HF,HX),e(HX,w3r),e(HF,A3r),e(Z,L3r),e(Z,UF),e(UF,r9e),e(r9e,B3r),e(UF,x3r),e(UF,UX),e(UX,k3r),e(UF,R3r),e(Z,S3r),e(Z,JF),e(JF,t9e),e(t9e,P3r),e(JF,$3r),e(JF,JX),e(JX,I3r),e(JF,N3r),e(Eo,D3r),e(Eo,a9e),e(a9e,j3r),e(Eo,q3r),g(d0,Eo,null),b(c,ARe,u),b(c,zc,u),e(zc,YF),e(YF,n9e),g(c0,n9e,null),e(zc,G3r),e(zc,s9e),e(s9e,O3r),b(c,LRe,u),b(c,xr,u),g(f0,xr,null),e(xr,X3r),e(xr,Wc),e(Wc,V3r),e(Wc,l9e),e(l9e,z3r),e(Wc,W3r),e(Wc,i9e),e(i9e,Q3r),e(Wc,H3r),e(xr,U3r),e(xr,m0),e(m0,J3r),e(m0,d9e),e(d9e,Y3r),e(m0,K3r),e(xr,Z3r),e(xr,Et),g(g0,Et,null),e(Et,e2r),e(Et,c9e),e(c9e,o2r),e(Et,r2r),e(Et,Qc),e(Qc,t2r),e(Qc,f9e),e(f9e,a2r),e(Qc,n2r),e(Qc,m9e),e(m9e,s2r),e(Qc,l2r),e(Et,i2r),e(Et,g9e),e(g9e,d2r),e(Et,c2r),g(h0,Et,null),e(xr,f2r),e(xr,yo),g(p0,yo,null),e(yo,m2r),e(yo,h9e),e(h9e,g2r),e(yo,h2r),e(yo,An),e(An,p2r),e(An,p9e),e(p9e,_2r),e(An,u2r),e(An,_9e),e(_9e,b2r),e(An,v2r),e(An,u9e),e(u9e,T2r),e(An,F2r),e(yo,C2r),e(yo,b9e),e(b9e,KF),e(KF,v9e),e(v9e,M2r),e(KF,E2r),e(KF,YX),e(YX,y2r),e(KF,w2r),e(yo,A2r),e(yo,T9e),e(T9e,L2r),e(yo,B2r),g(_0,yo,null),b(c,BRe,u),b(c,Hc,u),e(Hc,ZF),e(ZF,F9e),g(u0,F9e,null),e(Hc,x2r),e(Hc,C9e),e(C9e,k2r),b(c,xRe,u),b(c,kr,u),g(b0,kr,null),e(kr,R2r),e(kr,Uc),e(Uc,S2r),e(Uc,M9e),e(M9e,P2r),e(Uc,$2r),e(Uc,E9e),e(E9e,I2r),e(Uc,N2r),e(kr,D2r),e(kr,v0),e(v0,j2r),e(v0,y9e),e(y9e,q2r),e(v0,G2r),e(kr,O2r),e(kr,yt),g(T0,yt,null),e(yt,X2r),e(yt,w9e),e(w9e,V2r),e(yt,z2r),e(yt,Jc),e(Jc,W2r),e(Jc,A9e),e(A9e,Q2r),e(Jc,H2r),e(Jc,L9e),e(L9e,U2r),e(Jc,J2r),e(yt,Y2r),e(yt,B9e),e(B9e,K2r),e(yt,Z2r),g(F0,yt,null),e(kr,evr),e(kr,wo),g(C0,wo,null),e(wo,ovr),e(wo,x9e),e(x9e,rvr),e(wo,tvr),e(wo,Ln),e(Ln,avr),e(Ln,k9e),e(k9e,nvr),e(Ln,svr),e(Ln,R9e),e(R9e,lvr),e(Ln,ivr),e(Ln,S9e),e(S9e,dvr),e(Ln,cvr),e(wo,fvr),e(wo,P9e),e(P9e,eC),e(eC,$9e),e($9e,mvr),e(eC,gvr),e(eC,KX),e(KX,hvr),e(eC,pvr),e(wo,_vr),e(wo,I9e),e(I9e,uvr),e(wo,bvr),g(M0,wo,null),b(c,kRe,u),b(c,Yc,u),e(Yc,oC),e(oC,N9e),g(E0,N9e,null),e(Yc,vvr),e(Yc,D9e),e(D9e,Tvr),b(c,RRe,u),b(c,Rr,u),g(y0,Rr,null),e(Rr,Fvr),e(Rr,Kc),e(Kc,Cvr),e(Kc,j9e),e(j9e,Mvr),e(Kc,Evr),e(Kc,q9e),e(q9e,yvr),e(Kc,wvr),e(Rr,Avr),e(Rr,w0),e(w0,Lvr),e(w0,G9e),e(G9e,Bvr),e(w0,xvr),e(Rr,kvr),e(Rr,wt),g(A0,wt,null),e(wt,Rvr),e(wt,O9e),e(O9e,Svr),e(wt,Pvr),e(wt,Zc),e(Zc,$vr),e(Zc,X9e),e(X9e,Ivr),e(Zc,Nvr),e(Zc,V9e),e(V9e,Dvr),e(Zc,jvr),e(wt,qvr),e(wt,z9e),e(z9e,Gvr),e(wt,Ovr),g(L0,wt,null),e(Rr,Xvr),e(Rr,Ao),g(B0,Ao,null),e(Ao,Vvr),e(Ao,W9e),e(W9e,zvr),e(Ao,Wvr),e(Ao,Bn),e(Bn,Qvr),e(Bn,Q9e),e(Q9e,Hvr),e(Bn,Uvr),e(Bn,H9e),e(H9e,Jvr),e(Bn,Yvr),e(Bn,U9e),e(U9e,Kvr),e(Bn,Zvr),e(Ao,e6r),e(Ao,z),e(z,rC),e(rC,J9e),e(J9e,o6r),e(rC,r6r),e(rC,ZX),e(ZX,t6r),e(rC,a6r),e(z,n6r),e(z,tC),e(tC,Y9e),e(Y9e,s6r),e(tC,l6r),e(tC,eV),e(eV,i6r),e(tC,d6r),e(z,c6r),e(z,aC),e(aC,K9e),e(K9e,f6r),e(aC,m6r),e(aC,oV),e(oV,g6r),e(aC,h6r),e(z,p6r),e(z,nC),e(nC,Z9e),e(Z9e,_6r),e(nC,u6r),e(nC,rV),e(rV,b6r),e(nC,v6r),e(z,T6r),e(z,sC),e(sC,ebe),e(ebe,F6r),e(sC,C6r),e(sC,tV),e(tV,M6r),e(sC,E6r),e(z,y6r),e(z,lC),e(lC,obe),e(obe,w6r),e(lC,A6r),e(lC,aV),e(aV,L6r),e(lC,B6r),e(z,x6r),e(z,iC),e(iC,rbe),e(rbe,k6r),e(iC,R6r),e(iC,nV),e(nV,S6r),e(iC,P6r),e(z,$6r),e(z,dC),e(dC,tbe),e(tbe,I6r),e(dC,N6r),e(dC,sV),e(sV,D6r),e(dC,j6r),e(z,q6r),e(z,cC),e(cC,abe),e(abe,G6r),e(cC,O6r),e(cC,lV),e(lV,X6r),e(cC,V6r),e(z,z6r),e(z,fC),e(fC,nbe),e(nbe,W6r),e(fC,Q6r),e(fC,iV),e(iV,H6r),e(fC,U6r),e(z,J6r),e(z,mC),e(mC,sbe),e(sbe,Y6r),e(mC,K6r),e(mC,dV),e(dV,Z6r),e(mC,eTr),e(z,oTr),e(z,gC),e(gC,lbe),e(lbe,rTr),e(gC,tTr),e(gC,cV),e(cV,aTr),e(gC,nTr),e(z,sTr),e(z,hC),e(hC,ibe),e(ibe,lTr),e(hC,iTr),e(hC,fV),e(fV,dTr),e(hC,cTr),e(z,fTr),e(z,pC),e(pC,dbe),e(dbe,mTr),e(pC,gTr),e(pC,mV),e(mV,hTr),e(pC,pTr),e(z,_Tr),e(z,_C),e(_C,cbe),e(cbe,uTr),e(_C,bTr),e(_C,gV),e(gV,vTr),e(_C,TTr),e(z,FTr),e(z,uC),e(uC,fbe),e(fbe,CTr),e(uC,MTr),e(uC,hV),e(hV,ETr),e(uC,yTr),e(z,wTr),e(z,bC),e(bC,mbe),e(mbe,ATr),e(bC,LTr),e(bC,pV),e(pV,BTr),e(bC,xTr),e(z,kTr),e(z,vC),e(vC,gbe),e(gbe,RTr),e(vC,STr),e(vC,_V),e(_V,PTr),e(vC,$Tr),e(z,ITr),e(z,TC),e(TC,hbe),e(hbe,NTr),e(TC,DTr),e(TC,uV),e(uV,jTr),e(TC,qTr),e(z,GTr),e(z,FC),e(FC,pbe),e(pbe,OTr),e(FC,XTr),e(FC,bV),e(bV,VTr),e(FC,zTr),e(z,WTr),e(z,CC),e(CC,_be),e(_be,QTr),e(CC,HTr),e(CC,vV),e(vV,UTr),e(CC,JTr),e(z,YTr),e(z,MC),e(MC,ube),e(ube,KTr),e(MC,ZTr),e(MC,TV),e(TV,eFr),e(MC,oFr),e(z,rFr),e(z,EC),e(EC,bbe),e(bbe,tFr),e(EC,aFr),e(EC,FV),e(FV,nFr),e(EC,sFr),e(z,lFr),e(z,yC),e(yC,vbe),e(vbe,iFr),e(yC,dFr),e(yC,CV),e(CV,cFr),e(yC,fFr),e(z,mFr),e(z,wC),e(wC,Tbe),e(Tbe,gFr),e(wC,hFr),e(wC,MV),e(MV,pFr),e(wC,_Fr),e(Ao,uFr),e(Ao,Fbe),e(Fbe,bFr),e(Ao,vFr),g(x0,Ao,null),b(c,SRe,u),b(c,ef,u),e(ef,AC),e(AC,Cbe),g(k0,Cbe,null),e(ef,TFr),e(ef,Mbe),e(Mbe,FFr),b(c,PRe,u),b(c,Sr,u),g(R0,Sr,null),e(Sr,CFr),e(Sr,of),e(of,MFr),e(of,Ebe),e(Ebe,EFr),e(of,yFr),e(of,ybe),e(ybe,wFr),e(of,AFr),e(Sr,LFr),e(Sr,S0),e(S0,BFr),e(S0,wbe),e(wbe,xFr),e(S0,kFr),e(Sr,RFr),e(Sr,At),g(P0,At,null),e(At,SFr),e(At,Abe),e(Abe,PFr),e(At,$Fr),e(At,rf),e(rf,IFr),e(rf,Lbe),e(Lbe,NFr),e(rf,DFr),e(rf,Bbe),e(Bbe,jFr),e(rf,qFr),e(At,GFr),e(At,xbe),e(xbe,OFr),e(At,XFr),g($0,At,null),e(Sr,VFr),e(Sr,Lo),g(I0,Lo,null),e(Lo,zFr),e(Lo,kbe),e(kbe,WFr),e(Lo,QFr),e(Lo,xn),e(xn,HFr),e(xn,Rbe),e(Rbe,UFr),e(xn,JFr),e(xn,Sbe),e(Sbe,YFr),e(xn,KFr),e(xn,Pbe),e(Pbe,ZFr),e(xn,eCr),e(Lo,oCr),e(Lo,ca),e(ca,LC),e(LC,$be),e($be,rCr),e(LC,tCr),e(LC,EV),e(EV,aCr),e(LC,nCr),e(ca,sCr),e(ca,BC),e(BC,Ibe),e(Ibe,lCr),e(BC,iCr),e(BC,yV),e(yV,dCr),e(BC,cCr),e(ca,fCr),e(ca,xC),e(xC,Nbe),e(Nbe,mCr),e(xC,gCr),e(xC,wV),e(wV,hCr),e(xC,pCr),e(ca,_Cr),e(ca,kC),e(kC,Dbe),e(Dbe,uCr),e(kC,bCr),e(kC,AV),e(AV,vCr),e(kC,TCr),e(ca,FCr),e(ca,RC),e(RC,jbe),e(jbe,CCr),e(RC,MCr),e(RC,LV),e(LV,ECr),e(RC,yCr),e(Lo,wCr),e(Lo,qbe),e(qbe,ACr),e(Lo,LCr),g(N0,Lo,null),b(c,$Re,u),b(c,tf,u),e(tf,SC),e(SC,Gbe),g(D0,Gbe,null),e(tf,BCr),e(tf,Obe),e(Obe,xCr),b(c,IRe,u),b(c,Pr,u),g(j0,Pr,null),e(Pr,kCr),e(Pr,af),e(af,RCr),e(af,Xbe),e(Xbe,SCr),e(af,PCr),e(af,Vbe),e(Vbe,$Cr),e(af,ICr),e(Pr,NCr),e(Pr,q0),e(q0,DCr),e(q0,zbe),e(zbe,jCr),e(q0,qCr),e(Pr,GCr),e(Pr,Lt),g(G0,Lt,null),e(Lt,OCr),e(Lt,Wbe),e(Wbe,XCr),e(Lt,VCr),e(Lt,nf),e(nf,zCr),e(nf,Qbe),e(Qbe,WCr),e(nf,QCr),e(nf,Hbe),e(Hbe,HCr),e(nf,UCr),e(Lt,JCr),e(Lt,Ube),e(Ube,YCr),e(Lt,KCr),g(O0,Lt,null),e(Pr,ZCr),e(Pr,Bo),g(X0,Bo,null),e(Bo,eMr),e(Bo,Jbe),e(Jbe,oMr),e(Bo,rMr),e(Bo,kn),e(kn,tMr),e(kn,Ybe),e(Ybe,aMr),e(kn,nMr),e(kn,Kbe),e(Kbe,sMr),e(kn,lMr),e(kn,Zbe),e(Zbe,iMr),e(kn,dMr),e(Bo,cMr),e(Bo,ce),e(ce,PC),e(PC,e3e),e(e3e,fMr),e(PC,mMr),e(PC,BV),e(BV,gMr),e(PC,hMr),e(ce,pMr),e(ce,$C),e($C,o3e),e(o3e,_Mr),e($C,uMr),e($C,xV),e(xV,bMr),e($C,vMr),e(ce,TMr),e(ce,IC),e(IC,r3e),e(r3e,FMr),e(IC,CMr),e(IC,kV),e(kV,MMr),e(IC,EMr),e(ce,yMr),e(ce,NC),e(NC,t3e),e(t3e,wMr),e(NC,AMr),e(NC,RV),e(RV,LMr),e(NC,BMr),e(ce,xMr),e(ce,DC),e(DC,a3e),e(a3e,kMr),e(DC,RMr),e(DC,SV),e(SV,SMr),e(DC,PMr),e(ce,$Mr),e(ce,jC),e(jC,n3e),e(n3e,IMr),e(jC,NMr),e(jC,PV),e(PV,DMr),e(jC,jMr),e(ce,qMr),e(ce,qC),e(qC,s3e),e(s3e,GMr),e(qC,OMr),e(qC,$V),e($V,XMr),e(qC,VMr),e(ce,zMr),e(ce,GC),e(GC,l3e),e(l3e,WMr),e(GC,QMr),e(GC,IV),e(IV,HMr),e(GC,UMr),e(ce,JMr),e(ce,OC),e(OC,i3e),e(i3e,YMr),e(OC,KMr),e(OC,NV),e(NV,ZMr),e(OC,e4r),e(ce,o4r),e(ce,XC),e(XC,d3e),e(d3e,r4r),e(XC,t4r),e(XC,DV),e(DV,a4r),e(XC,n4r),e(ce,s4r),e(ce,VC),e(VC,c3e),e(c3e,l4r),e(VC,i4r),e(VC,jV),e(jV,d4r),e(VC,c4r),e(ce,f4r),e(ce,zC),e(zC,f3e),e(f3e,m4r),e(zC,g4r),e(zC,qV),e(qV,h4r),e(zC,p4r),e(Bo,_4r),e(Bo,m3e),e(m3e,u4r),e(Bo,b4r),g(V0,Bo,null),b(c,NRe,u),b(c,sf,u),e(sf,WC),e(WC,g3e),g(z0,g3e,null),e(sf,v4r),e(sf,h3e),e(h3e,T4r),b(c,DRe,u),b(c,$r,u),g(W0,$r,null),e($r,F4r),e($r,lf),e(lf,C4r),e(lf,p3e),e(p3e,M4r),e(lf,E4r),e(lf,_3e),e(_3e,y4r),e(lf,w4r),e($r,A4r),e($r,Q0),e(Q0,L4r),e(Q0,u3e),e(u3e,B4r),e(Q0,x4r),e($r,k4r),e($r,Bt),g(H0,Bt,null),e(Bt,R4r),e(Bt,b3e),e(b3e,S4r),e(Bt,P4r),e(Bt,df),e(df,$4r),e(df,v3e),e(v3e,I4r),e(df,N4r),e(df,T3e),e(T3e,D4r),e(df,j4r),e(Bt,q4r),e(Bt,F3e),e(F3e,G4r),e(Bt,O4r),g(U0,Bt,null),e($r,X4r),e($r,xo),g(J0,xo,null),e(xo,V4r),e(xo,C3e),e(C3e,z4r),e(xo,W4r),e(xo,Rn),e(Rn,Q4r),e(Rn,M3e),e(M3e,H4r),e(Rn,U4r),e(Rn,E3e),e(E3e,J4r),e(Rn,Y4r),e(Rn,y3e),e(y3e,K4r),e(Rn,Z4r),e(xo,eEr),e(xo,ue),e(ue,QC),e(QC,w3e),e(w3e,oEr),e(QC,rEr),e(QC,GV),e(GV,tEr),e(QC,aEr),e(ue,nEr),e(ue,HC),e(HC,A3e),e(A3e,sEr),e(HC,lEr),e(HC,OV),e(OV,iEr),e(HC,dEr),e(ue,cEr),e(ue,UC),e(UC,L3e),e(L3e,fEr),e(UC,mEr),e(UC,XV),e(XV,gEr),e(UC,hEr),e(ue,pEr),e(ue,JC),e(JC,B3e),e(B3e,_Er),e(JC,uEr),e(JC,VV),e(VV,bEr),e(JC,vEr),e(ue,TEr),e(ue,YC),e(YC,x3e),e(x3e,FEr),e(YC,CEr),e(YC,zV),e(zV,MEr),e(YC,EEr),e(ue,yEr),e(ue,KC),e(KC,k3e),e(k3e,wEr),e(KC,AEr),e(KC,WV),e(WV,LEr),e(KC,BEr),e(ue,xEr),e(ue,ZC),e(ZC,R3e),e(R3e,kEr),e(ZC,REr),e(ZC,QV),e(QV,SEr),e(ZC,PEr),e(ue,$Er),e(ue,eM),e(eM,S3e),e(S3e,IEr),e(eM,NEr),e(eM,HV),e(HV,DEr),e(eM,jEr),e(ue,qEr),e(ue,oM),e(oM,P3e),e(P3e,GEr),e(oM,OEr),e(oM,UV),e(UV,XEr),e(oM,VEr),e(ue,zEr),e(ue,rM),e(rM,$3e),e($3e,WEr),e(rM,QEr),e(rM,JV),e(JV,HEr),e(rM,UEr),e(xo,JEr),e(xo,I3e),e(I3e,YEr),e(xo,KEr),g(Y0,xo,null),b(c,jRe,u),b(c,cf,u),e(cf,tM),e(tM,N3e),g(K0,N3e,null),e(cf,ZEr),e(cf,D3e),e(D3e,e5r),b(c,qRe,u),b(c,Ir,u),g(Z0,Ir,null),e(Ir,o5r),e(Ir,ff),e(ff,r5r),e(ff,j3e),e(j3e,t5r),e(ff,a5r),e(ff,q3e),e(q3e,n5r),e(ff,s5r),e(Ir,l5r),e(Ir,eL),e(eL,i5r),e(eL,G3e),e(G3e,d5r),e(eL,c5r),e(Ir,f5r),e(Ir,xt),g(oL,xt,null),e(xt,m5r),e(xt,O3e),e(O3e,g5r),e(xt,h5r),e(xt,mf),e(mf,p5r),e(mf,X3e),e(X3e,_5r),e(mf,u5r),e(mf,V3e),e(V3e,b5r),e(mf,v5r),e(xt,T5r),e(xt,z3e),e(z3e,F5r),e(xt,C5r),g(rL,xt,null),e(Ir,M5r),e(Ir,ko),g(tL,ko,null),e(ko,E5r),e(ko,W3e),e(W3e,y5r),e(ko,w5r),e(ko,Sn),e(Sn,A5r),e(Sn,Q3e),e(Q3e,L5r),e(Sn,B5r),e(Sn,H3e),e(H3e,x5r),e(Sn,k5r),e(Sn,U3e),e(U3e,R5r),e(Sn,S5r),e(ko,P5r),e(ko,Me),e(Me,aM),e(aM,J3e),e(J3e,$5r),e(aM,I5r),e(aM,YV),e(YV,N5r),e(aM,D5r),e(Me,j5r),e(Me,nM),e(nM,Y3e),e(Y3e,q5r),e(nM,G5r),e(nM,KV),e(KV,O5r),e(nM,X5r),e(Me,V5r),e(Me,sM),e(sM,K3e),e(K3e,z5r),e(sM,W5r),e(sM,ZV),e(ZV,Q5r),e(sM,H5r),e(Me,U5r),e(Me,lM),e(lM,Z3e),e(Z3e,J5r),e(lM,Y5r),e(lM,ez),e(ez,K5r),e(lM,Z5r),e(Me,eyr),e(Me,iM),e(iM,e2e),e(e2e,oyr),e(iM,ryr),e(iM,oz),e(oz,tyr),e(iM,ayr),e(Me,nyr),e(Me,dM),e(dM,o2e),e(o2e,syr),e(dM,lyr),e(dM,rz),e(rz,iyr),e(dM,dyr),e(Me,cyr),e(Me,cM),e(cM,r2e),e(r2e,fyr),e(cM,myr),e(cM,tz),e(tz,gyr),e(cM,hyr),e(Me,pyr),e(Me,fM),e(fM,t2e),e(t2e,_yr),e(fM,uyr),e(fM,az),e(az,byr),e(fM,vyr),e(Me,Tyr),e(Me,mM),e(mM,a2e),e(a2e,Fyr),e(mM,Cyr),e(mM,nz),e(nz,Myr),e(mM,Eyr),e(ko,yyr),e(ko,n2e),e(n2e,wyr),e(ko,Ayr),g(aL,ko,null),b(c,GRe,u),b(c,gf,u),e(gf,gM),e(gM,s2e),g(nL,s2e,null),e(gf,Lyr),e(gf,l2e),e(l2e,Byr),b(c,ORe,u),b(c,Nr,u),g(sL,Nr,null),e(Nr,xyr),e(Nr,hf),e(hf,kyr),e(hf,i2e),e(i2e,Ryr),e(hf,Syr),e(hf,d2e),e(d2e,Pyr),e(hf,$yr),e(Nr,Iyr),e(Nr,lL),e(lL,Nyr),e(lL,c2e),e(c2e,Dyr),e(lL,jyr),e(Nr,qyr),e(Nr,kt),g(iL,kt,null),e(kt,Gyr),e(kt,f2e),e(f2e,Oyr),e(kt,Xyr),e(kt,pf),e(pf,Vyr),e(pf,m2e),e(m2e,zyr),e(pf,Wyr),e(pf,g2e),e(g2e,Qyr),e(pf,Hyr),e(kt,Uyr),e(kt,h2e),e(h2e,Jyr),e(kt,Yyr),g(dL,kt,null),e(Nr,Kyr),e(Nr,Ro),g(cL,Ro,null),e(Ro,Zyr),e(Ro,p2e),e(p2e,ewr),e(Ro,owr),e(Ro,Pn),e(Pn,rwr),e(Pn,_2e),e(_2e,twr),e(Pn,awr),e(Pn,u2e),e(u2e,nwr),e(Pn,swr),e(Pn,b2e),e(b2e,lwr),e(Pn,iwr),e(Ro,dwr),e(Ro,be),e(be,hM),e(hM,v2e),e(v2e,cwr),e(hM,fwr),e(hM,sz),e(sz,mwr),e(hM,gwr),e(be,hwr),e(be,pM),e(pM,T2e),e(T2e,pwr),e(pM,_wr),e(pM,lz),e(lz,uwr),e(pM,bwr),e(be,vwr),e(be,_M),e(_M,F2e),e(F2e,Twr),e(_M,Fwr),e(_M,iz),e(iz,Cwr),e(_M,Mwr),e(be,Ewr),e(be,uM),e(uM,C2e),e(C2e,ywr),e(uM,wwr),e(uM,dz),e(dz,Awr),e(uM,Lwr),e(be,Bwr),e(be,bM),e(bM,M2e),e(M2e,xwr),e(bM,kwr),e(bM,cz),e(cz,Rwr),e(bM,Swr),e(be,Pwr),e(be,vM),e(vM,E2e),e(E2e,$wr),e(vM,Iwr),e(vM,fz),e(fz,Nwr),e(vM,Dwr),e(be,jwr),e(be,TM),e(TM,y2e),e(y2e,qwr),e(TM,Gwr),e(TM,mz),e(mz,Owr),e(TM,Xwr),e(be,Vwr),e(be,FM),e(FM,w2e),e(w2e,zwr),e(FM,Wwr),e(FM,gz),e(gz,Qwr),e(FM,Hwr),e(be,Uwr),e(be,CM),e(CM,A2e),e(A2e,Jwr),e(CM,Ywr),e(CM,hz),e(hz,Kwr),e(CM,Zwr),e(be,eAr),e(be,MM),e(MM,L2e),e(L2e,oAr),e(MM,rAr),e(MM,pz),e(pz,tAr),e(MM,aAr),e(Ro,nAr),e(Ro,B2e),e(B2e,sAr),e(Ro,lAr),g(fL,Ro,null),b(c,XRe,u),b(c,_f,u),e(_f,EM),e(EM,x2e),g(mL,x2e,null),e(_f,iAr),e(_f,k2e),e(k2e,dAr),b(c,VRe,u),b(c,Dr,u),g(gL,Dr,null),e(Dr,cAr),e(Dr,uf),e(uf,fAr),e(uf,R2e),e(R2e,mAr),e(uf,gAr),e(uf,S2e),e(S2e,hAr),e(uf,pAr),e(Dr,_Ar),e(Dr,hL),e(hL,uAr),e(hL,P2e),e(P2e,bAr),e(hL,vAr),e(Dr,TAr),e(Dr,Rt),g(pL,Rt,null),e(Rt,FAr),e(Rt,$2e),e($2e,CAr),e(Rt,MAr),e(Rt,bf),e(bf,EAr),e(bf,I2e),e(I2e,yAr),e(bf,wAr),e(bf,N2e),e(N2e,AAr),e(bf,LAr),e(Rt,BAr),e(Rt,D2e),e(D2e,xAr),e(Rt,kAr),g(_L,Rt,null),e(Dr,RAr),e(Dr,So),g(uL,So,null),e(So,SAr),e(So,j2e),e(j2e,PAr),e(So,$Ar),e(So,$n),e($n,IAr),e($n,q2e),e(q2e,NAr),e($n,DAr),e($n,G2e),e(G2e,jAr),e($n,qAr),e($n,O2e),e(O2e,GAr),e($n,OAr),e(So,XAr),e(So,ve),e(ve,yM),e(yM,X2e),e(X2e,VAr),e(yM,zAr),e(yM,_z),e(_z,WAr),e(yM,QAr),e(ve,HAr),e(ve,wM),e(wM,V2e),e(V2e,UAr),e(wM,JAr),e(wM,uz),e(uz,YAr),e(wM,KAr),e(ve,ZAr),e(ve,AM),e(AM,z2e),e(z2e,e0r),e(AM,o0r),e(AM,bz),e(bz,r0r),e(AM,t0r),e(ve,a0r),e(ve,LM),e(LM,W2e),e(W2e,n0r),e(LM,s0r),e(LM,vz),e(vz,l0r),e(LM,i0r),e(ve,d0r),e(ve,BM),e(BM,Q2e),e(Q2e,c0r),e(BM,f0r),e(BM,Tz),e(Tz,m0r),e(BM,g0r),e(ve,h0r),e(ve,xM),e(xM,H2e),e(H2e,p0r),e(xM,_0r),e(xM,Fz),e(Fz,u0r),e(xM,b0r),e(ve,v0r),e(ve,kM),e(kM,U2e),e(U2e,T0r),e(kM,F0r),e(kM,Cz),e(Cz,C0r),e(kM,M0r),e(ve,E0r),e(ve,RM),e(RM,J2e),e(J2e,y0r),e(RM,w0r),e(RM,Mz),e(Mz,A0r),e(RM,L0r),e(ve,B0r),e(ve,SM),e(SM,Y2e),e(Y2e,x0r),e(SM,k0r),e(SM,Ez),e(Ez,R0r),e(SM,S0r),e(ve,P0r),e(ve,PM),e(PM,K2e),e(K2e,$0r),e(PM,I0r),e(PM,yz),e(yz,N0r),e(PM,D0r),e(So,j0r),e(So,Z2e),e(Z2e,q0r),e(So,G0r),g(bL,So,null),b(c,zRe,u),b(c,vf,u),e(vf,$M),e($M,eve),g(vL,eve,null),e(vf,O0r),e(vf,ove),e(ove,X0r),b(c,WRe,u),b(c,jr,u),g(TL,jr,null),e(jr,V0r),e(jr,Tf),e(Tf,z0r),e(Tf,rve),e(rve,W0r),e(Tf,Q0r),e(Tf,tve),e(tve,H0r),e(Tf,U0r),e(jr,J0r),e(jr,FL),e(FL,Y0r),e(FL,ave),e(ave,K0r),e(FL,Z0r),e(jr,eLr),e(jr,St),g(CL,St,null),e(St,oLr),e(St,nve),e(nve,rLr),e(St,tLr),e(St,Ff),e(Ff,aLr),e(Ff,sve),e(sve,nLr),e(Ff,sLr),e(Ff,lve),e(lve,lLr),e(Ff,iLr),e(St,dLr),e(St,ive),e(ive,cLr),e(St,fLr),g(ML,St,null),e(jr,mLr),e(jr,Po),g(EL,Po,null),e(Po,gLr),e(Po,dve),e(dve,hLr),e(Po,pLr),e(Po,In),e(In,_Lr),e(In,cve),e(cve,uLr),e(In,bLr),e(In,fve),e(fve,vLr),e(In,TLr),e(In,mve),e(mve,FLr),e(In,CLr),e(Po,MLr),e(Po,Se),e(Se,IM),e(IM,gve),e(gve,ELr),e(IM,yLr),e(IM,wz),e(wz,wLr),e(IM,ALr),e(Se,LLr),e(Se,NM),e(NM,hve),e(hve,BLr),e(NM,xLr),e(NM,Az),e(Az,kLr),e(NM,RLr),e(Se,SLr),e(Se,DM),e(DM,pve),e(pve,PLr),e(DM,$Lr),e(DM,Lz),e(Lz,ILr),e(DM,NLr),e(Se,DLr),e(Se,jM),e(jM,_ve),e(_ve,jLr),e(jM,qLr),e(jM,Bz),e(Bz,GLr),e(jM,OLr),e(Se,XLr),e(Se,qM),e(qM,uve),e(uve,VLr),e(qM,zLr),e(qM,xz),e(xz,WLr),e(qM,QLr),e(Se,HLr),e(Se,GM),e(GM,bve),e(bve,ULr),e(GM,JLr),e(GM,kz),e(kz,YLr),e(GM,KLr),e(Se,ZLr),e(Se,OM),e(OM,vve),e(vve,e7r),e(OM,o7r),e(OM,Rz),e(Rz,r7r),e(OM,t7r),e(Se,a7r),e(Se,XM),e(XM,Tve),e(Tve,n7r),e(XM,s7r),e(XM,Sz),e(Sz,l7r),e(XM,i7r),e(Po,d7r),e(Po,Fve),e(Fve,c7r),e(Po,f7r),g(yL,Po,null),b(c,QRe,u),b(c,Cf,u),e(Cf,VM),e(VM,Cve),g(wL,Cve,null),e(Cf,m7r),e(Cf,Mve),e(Mve,g7r),b(c,HRe,u),b(c,qr,u),g(AL,qr,null),e(qr,h7r),e(qr,Mf),e(Mf,p7r),e(Mf,Eve),e(Eve,_7r),e(Mf,u7r),e(Mf,yve),e(yve,b7r),e(Mf,v7r),e(qr,T7r),e(qr,LL),e(LL,F7r),e(LL,wve),e(wve,C7r),e(LL,M7r),e(qr,E7r),e(qr,Pt),g(BL,Pt,null),e(Pt,y7r),e(Pt,Ave),e(Ave,w7r),e(Pt,A7r),e(Pt,Ef),e(Ef,L7r),e(Ef,Lve),e(Lve,B7r),e(Ef,x7r),e(Ef,Bve),e(Bve,k7r),e(Ef,R7r),e(Pt,S7r),e(Pt,xve),e(xve,P7r),e(Pt,$7r),g(xL,Pt,null),e(qr,I7r),e(qr,$o),g(kL,$o,null),e($o,N7r),e($o,kve),e(kve,D7r),e($o,j7r),e($o,Nn),e(Nn,q7r),e(Nn,Rve),e(Rve,G7r),e(Nn,O7r),e(Nn,Sve),e(Sve,X7r),e(Nn,V7r),e(Nn,Pve),e(Pve,z7r),e(Nn,W7r),e($o,Q7r),e($o,Pe),e(Pe,zM),e(zM,$ve),e($ve,H7r),e(zM,U7r),e(zM,Pz),e(Pz,J7r),e(zM,Y7r),e(Pe,K7r),e(Pe,WM),e(WM,Ive),e(Ive,Z7r),e(WM,e8r),e(WM,$z),e($z,o8r),e(WM,r8r),e(Pe,t8r),e(Pe,QM),e(QM,Nve),e(Nve,a8r),e(QM,n8r),e(QM,Iz),e(Iz,s8r),e(QM,l8r),e(Pe,i8r),e(Pe,HM),e(HM,Dve),e(Dve,d8r),e(HM,c8r),e(HM,Nz),e(Nz,f8r),e(HM,m8r),e(Pe,g8r),e(Pe,UM),e(UM,jve),e(jve,h8r),e(UM,p8r),e(UM,Dz),e(Dz,_8r),e(UM,u8r),e(Pe,b8r),e(Pe,JM),e(JM,qve),e(qve,v8r),e(JM,T8r),e(JM,jz),e(jz,F8r),e(JM,C8r),e(Pe,M8r),e(Pe,YM),e(YM,Gve),e(Gve,E8r),e(YM,y8r),e(YM,qz),e(qz,w8r),e(YM,A8r),e(Pe,L8r),e(Pe,KM),e(KM,Ove),e(Ove,B8r),e(KM,x8r),e(KM,Gz),e(Gz,k8r),e(KM,R8r),e($o,S8r),e($o,Xve),e(Xve,P8r),e($o,$8r),g(RL,$o,null),b(c,URe,u),b(c,yf,u),e(yf,ZM),e(ZM,Vve),g(SL,Vve,null),e(yf,I8r),e(yf,zve),e(zve,N8r),b(c,JRe,u),b(c,Gr,u),g(PL,Gr,null),e(Gr,D8r),e(Gr,wf),e(wf,j8r),e(wf,Wve),e(Wve,q8r),e(wf,G8r),e(wf,Qve),e(Qve,O8r),e(wf,X8r),e(Gr,V8r),e(Gr,$L),e($L,z8r),e($L,Hve),e(Hve,W8r),e($L,Q8r),e(Gr,H8r),e(Gr,$t),g(IL,$t,null),e($t,U8r),e($t,Uve),e(Uve,J8r),e($t,Y8r),e($t,Af),e(Af,K8r),e(Af,Jve),e(Jve,Z8r),e(Af,eBr),e(Af,Yve),e(Yve,oBr),e(Af,rBr),e($t,tBr),e($t,Kve),e(Kve,aBr),e($t,nBr),g(NL,$t,null),e(Gr,sBr),e(Gr,Io),g(DL,Io,null),e(Io,lBr),e(Io,Zve),e(Zve,iBr),e(Io,dBr),e(Io,Dn),e(Dn,cBr),e(Dn,e6e),e(e6e,fBr),e(Dn,mBr),e(Dn,o6e),e(o6e,gBr),e(Dn,hBr),e(Dn,r6e),e(r6e,pBr),e(Dn,_Br),e(Io,uBr),e(Io,t6e),e(t6e,e4),e(e4,a6e),e(a6e,bBr),e(e4,vBr),e(e4,Oz),e(Oz,TBr),e(e4,FBr),e(Io,CBr),e(Io,n6e),e(n6e,MBr),e(Io,EBr),g(jL,Io,null),b(c,YRe,u),b(c,Lf,u),e(Lf,o4),e(o4,s6e),g(qL,s6e,null),e(Lf,yBr),e(Lf,l6e),e(l6e,wBr),b(c,KRe,u),b(c,Or,u),g(GL,Or,null),e(Or,ABr),e(Or,Bf),e(Bf,LBr),e(Bf,i6e),e(i6e,BBr),e(Bf,xBr),e(Bf,d6e),e(d6e,kBr),e(Bf,RBr),e(Or,SBr),e(Or,OL),e(OL,PBr),e(OL,c6e),e(c6e,$Br),e(OL,IBr),e(Or,NBr),e(Or,It),g(XL,It,null),e(It,DBr),e(It,f6e),e(f6e,jBr),e(It,qBr),e(It,xf),e(xf,GBr),e(xf,m6e),e(m6e,OBr),e(xf,XBr),e(xf,g6e),e(g6e,VBr),e(xf,zBr),e(It,WBr),e(It,h6e),e(h6e,QBr),e(It,HBr),g(VL,It,null),e(Or,UBr),e(Or,No),g(zL,No,null),e(No,JBr),e(No,p6e),e(p6e,YBr),e(No,KBr),e(No,jn),e(jn,ZBr),e(jn,_6e),e(_6e,exr),e(jn,oxr),e(jn,u6e),e(u6e,rxr),e(jn,txr),e(jn,b6e),e(b6e,axr),e(jn,nxr),e(No,sxr),e(No,WL),e(WL,r4),e(r4,v6e),e(v6e,lxr),e(r4,ixr),e(r4,Xz),e(Xz,dxr),e(r4,cxr),e(WL,fxr),e(WL,t4),e(t4,T6e),e(T6e,mxr),e(t4,gxr),e(t4,Vz),e(Vz,hxr),e(t4,pxr),e(No,_xr),e(No,F6e),e(F6e,uxr),e(No,bxr),g(QL,No,null),b(c,ZRe,u),b(c,kf,u),e(kf,a4),e(a4,C6e),g(HL,C6e,null),e(kf,vxr),e(kf,M6e),e(M6e,Txr),b(c,eSe,u),b(c,Xr,u),g(UL,Xr,null),e(Xr,Fxr),e(Xr,Rf),e(Rf,Cxr),e(Rf,E6e),e(E6e,Mxr),e(Rf,Exr),e(Rf,y6e),e(y6e,yxr),e(Rf,wxr),e(Xr,Axr),e(Xr,JL),e(JL,Lxr),e(JL,w6e),e(w6e,Bxr),e(JL,xxr),e(Xr,kxr),e(Xr,Nt),g(YL,Nt,null),e(Nt,Rxr),e(Nt,A6e),e(A6e,Sxr),e(Nt,Pxr),e(Nt,Sf),e(Sf,$xr),e(Sf,L6e),e(L6e,Ixr),e(Sf,Nxr),e(Sf,B6e),e(B6e,Dxr),e(Sf,jxr),e(Nt,qxr),e(Nt,x6e),e(x6e,Gxr),e(Nt,Oxr),g(KL,Nt,null),e(Xr,Xxr),e(Xr,Do),g(ZL,Do,null),e(Do,Vxr),e(Do,k6e),e(k6e,zxr),e(Do,Wxr),e(Do,qn),e(qn,Qxr),e(qn,R6e),e(R6e,Hxr),e(qn,Uxr),e(qn,S6e),e(S6e,Jxr),e(qn,Yxr),e(qn,P6e),e(P6e,Kxr),e(qn,Zxr),e(Do,ekr),e(Do,$6e),e($6e,n4),e(n4,I6e),e(I6e,okr),e(n4,rkr),e(n4,zz),e(zz,tkr),e(n4,akr),e(Do,nkr),e(Do,N6e),e(N6e,skr),e(Do,lkr),g(e7,Do,null),oSe=!0},p(c,[u]){const o7={};u&2&&(o7.$$scope={dirty:u,ctx:c}),Gf.$set(o7);const D6e={};u&2&&(D6e.$$scope={dirty:u,ctx:c}),xh.$set(D6e);const j6e={};u&2&&(j6e.$$scope={dirty:u,ctx:c}),Gh.$set(j6e)},i(c){oSe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(Gf.$$.fragment,c),h(fE.$$.fragment,c),h(mE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(BE.$$.fragment,c),h(xh.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(IE.$$.fragment,c),h(Gh.$$.fragment,c),h(NE.$$.fragment,c),h(DE.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(F5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(y5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(R5.$$.fragment,c),h(S5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(N5.$$.fragment,c),h(D5.$$.fragment,c),h(j5.$$.fragment,c),h(q5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(z5.$$.fragment,c),h(W5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(jL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),oSe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(Gf.$$.fragment,c),p(fE.$$.fragment,c),p(mE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(BE.$$.fragment,c),p(xh.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(IE.$$.fragment,c),p(Gh.$$.fragment,c),p(NE.$$.fragment,c),p(DE.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(F5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(y5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(R5.$$.fragment,c),p(S5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(N5.$$.fragment,c),p(D5.$$.fragment,c),p(j5.$$.fragment,c),p(q5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(z5.$$.fragment,c),p(W5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(jL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),oSe=!1},d(c){t(K),c&&t(io),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(Df),_(qa,c),c&&t(fo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(eke),c&&t(Xi),_(dE),c&&t(oke),c&&t(zn),c&&t(rke),_(cE,c),c&&t(tke),c&&t(t8),c&&t(ake),_(Gf,c),c&&t(nke),c&&t(Vi),_(fE),c&&t(ske),c&&t(Wo),_(mE),_(pE),_(_E),_(uE),c&&t(lke),c&&t(Wi),_(bE),c&&t(ike),c&&t(Qo),_(vE),_(CE),_(ME),_(EE),c&&t(dke),c&&t(Qi),_(yE),c&&t(cke),c&&t(Ho),_(wE),_(BE),_(xh),_(xE),_(kE),c&&t(fke),c&&t(Hi),_(RE),c&&t(mke),c&&t(Uo),_(SE),_(IE),_(Gh),_(NE),_(DE),c&&t(gke),c&&t(Ji),_(jE),c&&t(hke),c&&t(Jo),_(qE),_(OE),_(XE),_(VE),_(zE),c&&t(pke),c&&t(Zi),_(WE),c&&t(_ke),c&&t(Yo),_(QE),_(UE),_(JE),_(YE),_(KE),c&&t(uke),c&&t(rd),_(ZE),c&&t(bke),c&&t(Ko),_(e5),_(r5),_(t5),_(a5),_(n5),c&&t(vke),c&&t(nd),_(s5),c&&t(Tke),c&&t(Zo),_(l5),_(d5),_(c5),_(f5),_(m5),c&&t(Fke),c&&t(id),_(g5),c&&t(Cke),c&&t(er),_(h5),_(_5),_(u5),_(b5),_(v5),c&&t(Mke),c&&t(fd),_(T5),c&&t(Eke),c&&t(or),_(F5),_(M5),_(E5),_(y5),_(w5),c&&t(yke),c&&t(hd),_(A5),c&&t(wke),c&&t(rr),_(L5),_(x5),_(k5),_(R5),_(S5),c&&t(Ake),c&&t(ud),_(P5),c&&t(Lke),c&&t(tr),_($5),_(N5),_(D5),_(j5),_(q5),c&&t(Bke),c&&t(Td),_(G5),c&&t(xke),c&&t(ar),_(O5),_(V5),_(z5),_(W5),_(Q5),c&&t(kke),c&&t(Md),_(H5),c&&t(Rke),c&&t(nr),_(U5),_(Y5),_(K5),_(Z5),_(ey),c&&t(Ske),c&&t(wd),_(oy),c&&t(Pke),c&&t(sr),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t($ke),c&&t(Bd),_(iy),c&&t(Ike),c&&t(lr),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(Nke),c&&t(Rd),_(py),c&&t(Dke),c&&t(ir),_(_y),_(by),_(vy),_(Ty),_(Fy),c&&t(jke),c&&t($d),_(Cy),c&&t(qke),c&&t(dr),_(My),_(yy),_(wy),_(Ay),_(Ly),c&&t(Gke),c&&t(Dd),_(By),c&&t(Oke),c&&t(cr),_(xy),_(Ry),_(Sy),_(Py),_($y),c&&t(Xke),c&&t(Gd),_(Iy),c&&t(Vke),c&&t(fr),_(Ny),_(jy),_(qy),_(Gy),_(Oy),c&&t(zke),c&&t(Vd),_(Xy),c&&t(Wke),c&&t(mr),_(Vy),_(Wy),_(Qy),_(Hy),_(Jy),c&&t(Qke),c&&t(Qd),_(Yy),c&&t(Hke),c&&t(gr),_(Ky),_(ew),_(ow),_(rw),_(tw),c&&t(Uke),c&&t(Jd),_(aw),c&&t(Jke),c&&t(hr),_(nw),_(lw),_(iw),_(dw),_(cw),c&&t(Yke),c&&t(ec),_(fw),c&&t(Kke),c&&t(pr),_(mw),_(hw),_(pw),_(_w),_(uw),c&&t(Zke),c&&t(tc),_(bw),c&&t(eRe),c&&t(_r),_(vw),_(Fw),_(Cw),_(Mw),_(Ew),c&&t(oRe),c&&t(sc),_(yw),c&&t(rRe),c&&t(ur),_(ww),_(Lw),_(Bw),_(xw),_(Rw),c&&t(tRe),c&&t(dc),_(Sw),c&&t(aRe),c&&t(br),_(Pw),_(Iw),_(Nw),_(Dw),_(jw),c&&t(nRe),c&&t(mc),_(qw),c&&t(sRe),c&&t(vr),_(Gw),_(Xw),_(Vw),_(zw),_(Ww),c&&t(lRe),c&&t(pc),_(Qw),c&&t(iRe),c&&t(Tr),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),c&&t(dRe),c&&t(bc),_(eA),c&&t(cRe),c&&t(Fr),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(fRe),c&&t(Fc),_(lA),c&&t(mRe),c&&t(Cr),_(iA),_(cA),_(fA),_(mA),_(hA),c&&t(gRe),c&&t(Ec),_(pA),c&&t(hRe),c&&t(Mr),_(_A),_(bA),_(vA),_(TA),_(FA),c&&t(pRe),c&&t(Ac),_(CA),c&&t(_Re),c&&t(Er),_(MA),_(yA),_(wA),_(AA),_(LA),c&&t(uRe),c&&t(xc),_(BA),c&&t(bRe),c&&t(yr),_(xA),_(RA),_(SA),_(PA),_($A),c&&t(vRe),c&&t(Sc),_(IA),c&&t(TRe),c&&t(wr),_(NA),_(jA),_(qA),_(GA),_(OA),c&&t(FRe),c&&t(Ic),_(XA),c&&t(CRe),c&&t(Ar),_(VA),_(WA),_(QA),_(HA),_(UA),c&&t(MRe),c&&t(jc),_(JA),c&&t(ERe),c&&t(Lr),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(yRe),c&&t(Oc),_(t0),c&&t(wRe),c&&t(Br),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(ARe),c&&t(zc),_(c0),c&&t(LRe),c&&t(xr),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(BRe),c&&t(Hc),_(u0),c&&t(xRe),c&&t(kr),_(b0),_(T0),_(F0),_(C0),_(M0),c&&t(kRe),c&&t(Yc),_(E0),c&&t(RRe),c&&t(Rr),_(y0),_(A0),_(L0),_(B0),_(x0),c&&t(SRe),c&&t(ef),_(k0),c&&t(PRe),c&&t(Sr),_(R0),_(P0),_($0),_(I0),_(N0),c&&t($Re),c&&t(tf),_(D0),c&&t(IRe),c&&t(Pr),_(j0),_(G0),_(O0),_(X0),_(V0),c&&t(NRe),c&&t(sf),_(z0),c&&t(DRe),c&&t($r),_(W0),_(H0),_(U0),_(J0),_(Y0),c&&t(jRe),c&&t(cf),_(K0),c&&t(qRe),c&&t(Ir),_(Z0),_(oL),_(rL),_(tL),_(aL),c&&t(GRe),c&&t(gf),_(nL),c&&t(ORe),c&&t(Nr),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(XRe),c&&t(_f),_(mL),c&&t(VRe),c&&t(Dr),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(zRe),c&&t(vf),_(vL),c&&t(WRe),c&&t(jr),_(TL),_(CL),_(ML),_(EL),_(yL),c&&t(QRe),c&&t(Cf),_(wL),c&&t(HRe),c&&t(qr),_(AL),_(BL),_(xL),_(kL),_(RL),c&&t(URe),c&&t(yf),_(SL),c&&t(JRe),c&&t(Gr),_(PL),_(IL),_(NL),_(DL),_(jL),c&&t(YRe),c&&t(Lf),_(qL),c&&t(KRe),c&&t(Or),_(GL),_(XL),_(VL),_(zL),_(QL),c&&t(ZRe),c&&t(kf),_(HL),c&&t(eSe),c&&t(Xr),_(UL),_(YL),_(KL),_(ZL),_(e7)}}}const hCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function pCt($f){return dCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class FCt extends nCt{constructor(K){super();sCt(this,K,pCt,gCt,lCt,{})}}export{FCt as default,hCt as metadata};
