import{S as Pl,i as Fl,s as wl,e as r,k as i,w as _,t as n,L as bl,c as a,d as o,m as c,a as s,x as v,h as l,b as d,M as El,J as e,g as f,y as P,q as F,o as w,B as b}from"../../chunks/vendor-9e2b328e.js";import{T as Bs}from"../../chunks/Tip-76f97a76.js";import{D as Ze}from"../../chunks/Docstring-50fd6873.js";import{C as Us}from"../../chunks/CodeBlock-88e23343.js";import{I as Lo}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function yl(Q){let h,E;return{c(){h=r("p"),E=n(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(p){h=a(p,"P",{});var g=s(h);E=l(g,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),g.forEach(o)},m(p,g){f(p,h,g),e(h,E)},d(p){p&&o(h)}}}function $l(Q){let h,E,p,g,I;return{c(){h=r("p"),E=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),p=r("code"),g=n("Module"),I=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(u){h=a(u,"P",{});var y=s(h);E=l(y,"Although the recipe for forward pass needs to be defined within this function, one should call the "),p=a(y,"CODE",{});var q=s(p);g=l(q,"Module"),q.forEach(o),I=l(y,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),y.forEach(o)},m(u,y){f(u,h,y),e(h,E),e(h,p),e(p,g),e(h,I)},d(u){u&&o(h)}}}function Tl(Q){let h,E,p,g,I;return{c(){h=r("p"),E=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),p=r("code"),g=n("Module"),I=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(u){h=a(u,"P",{});var y=s(h);E=l(y,"Although the recipe for forward pass needs to be defined within this function, one should call the "),p=a(y,"CODE",{});var q=s(p);g=l(q,"Module"),q.forEach(o),I=l(y,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),y.forEach(o)},m(u,y){f(u,h,y),e(h,E),e(h,p),e(p,g),e(h,I)},d(u){u&&o(h)}}}function xl(Q){let h,E,p,g,I,u,y,q,or,Et,ee,ce,No,be,tr,qo,rr,yt,de,ar,Ee,sr,nr,$t,Qe,lr,Tt,eo,So,ir,xt,me,cr,ye,dr,mr,It,$e,Vs,kt,oo,fr,Ct,O,Te,hr,xe,pr,gr,ur,Ie,_r,to,vr,Pr,Fr,Oo,wr,Mt,fe,Ro,k,ro,Ho,br,Er,Bo,Uo,yr,$r,Vo,Go,Tr,xr,ao,Wo,Ir,kr,so,Jo,Cr,Mr,C,M,no,jr,zr,Yo,Ar,Dr,Ko,Lr,Nr,lo,qr,Sr,io,Or,Rr,j,co,Hr,Br,Xo,Ur,Vr,Zo,Gr,Wr,mo,Jr,Yr,fo,Kr,Xr,z,ho,Zr,Qr,Qo,ea,oa,et,ta,ra,po,aa,sa,go,na,la,A,uo,ia,ca,ot,da,ma,tt,fa,ha,_o,pa,ga,vo,ua,_a,D,Po,va,Pa,rt,Fa,wa,at,ba,Ea,Fo,ya,$a,wo,Ta,jt,R,xa,ke,Ia,ka,Ce,Ca,Ma,zt,oe,he,st,Me,ja,nt,za,At,$,je,Aa,te,Da,bo,La,Na,ze,qa,Sa,Oa,re,Ra,Eo,Ha,Ba,yo,Ua,Va,Ga,lt,Wa,Ja,Ae,Dt,ae,pe,it,De,Ya,ct,Ka,Lt,L,Le,Xa,dt,Za,Qa,Ne,es,$o,os,ts,rs,H,qe,as,mt,ss,ns,ge,Nt,se,ue,ft,Se,ls,ht,is,qt,S,Oe,cs,Re,ds,He,ms,fs,hs,T,Be,ps,ne,gs,To,us,_s,pt,vs,Ps,Fs,_e,ws,gt,bs,Es,Ue,St,le,ve,ut,Ve,ys,_t,$s,Ot,N,Ge,Ts,vt,xs,Is,We,ks,Je,Cs,Ms,js,x,Ye,zs,ie,As,xo,Ds,Ls,Pt,Ns,qs,Ss,Pe,Os,Ft,Rs,Hs,Ke,Rt;return u=new Lo({}),be=new Lo({}),Me=new Lo({}),je=new Ze({props:{name:"class transformers.PoolFormerConfig",anchor:"transformers.PoolFormerConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 16"},{name:"stride",val:" = 16"},{name:"pool_size",val:" = 3"},{name:"mlp_ratio",val:" = 4.0"},{name:"depths",val:" = [2, 2, 6, 2]"},{name:"hidden_sizes",val:" = [64, 128, 320, 512]"},{name:"patch_sizes",val:" = [7, 3, 3, 3]"},{name:"strides",val:" = [4, 2, 2, 2]"},{name:"padding",val:" = [2, 1, 1, 1]"},{name:"num_encoder_blocks",val:" = 4"},{name:"drop_path_rate",val:" = 0.0"},{name:"hidden_act",val:" = 'gelu'"},{name:"use_layer_scale",val:" = True"},{name:"layer_scale_init_value",val:" = 1e-05"},{name:"initializer_range",val:" = 0.02"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/configuration_poolformer.py#L29",parametersDescription:[{anchor:"transformers.PoolFormerConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of channels in the input image.`,name:"num_channels"},{anchor:"transformers.PoolFormerConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size of the input patch.`,name:"patch_size"},{anchor:"transformers.PoolFormerConfig.stride",description:`<strong>stride</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The stride of the input patch.`,name:"stride"},{anchor:"transformers.PoolFormerConfig.pool_size",description:`<strong>pool_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The size of the pooling window.`,name:"pool_size"},{anchor:"transformers.PoolFormerConfig.mlp_ratio",description:`<strong>mlp_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 4.0) &#x2014;
The ratio of the number of channels in the output of the MLP to the number of channels in the input.`,name:"mlp_ratio"},{anchor:"transformers.PoolFormerConfig.depths",description:`<strong>depths</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[2, 2, 6, 2]</code>) &#x2014;
The depth of each encoder block.`,name:"depths"},{anchor:"transformers.PoolFormerConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[64, 128, 320, 512]</code>) &#x2014;
The hidden sizes of each encoder block.`,name:"hidden_sizes"},{anchor:"transformers.PoolFormerConfig.patch_sizes",description:`<strong>patch_sizes</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[7, 3, 3, 3]</code>) &#x2014;
The size of the input patch for each encoder block.`,name:"patch_sizes"},{anchor:"transformers.PoolFormerConfig.strides",description:`<strong>strides</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[4, 2, 2, 2]</code>) &#x2014;
The stride of the input patch for each encoder block.`,name:"strides"},{anchor:"transformers.PoolFormerConfig.padding",description:`<strong>padding</strong> (<code>list</code>, <em>optional</em>, defaults to <code>[2, 1, 1, 1]</code>) &#x2014;
The padding of the input patch for each encoder block.`,name:"padding"},{anchor:"transformers.PoolFormerConfig.num_encoder_blocks",description:`<strong>num_encoder_blocks</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of encoder blocks.`,name:"num_encoder_blocks"},{anchor:"transformers.PoolFormerConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout rate for the dropout layers.`,name:"drop_path_rate"},{anchor:"transformers.PoolFormerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The activation function for the hidden layers.`,name:"hidden_act"},{anchor:"transformers.PoolFormerConfig.use_layer_scale",description:`<strong>use_layer_scale</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use layer scale.`,name:"use_layer_scale"},{anchor:"transformers.PoolFormerConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.PoolFormerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The initializer range for the weights.`,name:"initializer_range"}]}}),Ae=new Us({props:{code:`from transformers import PoolFormerModel, PoolFormerConfig

# Initializing a PoolFormer sail/poolformer_s12 style configuration
configuration = PoolFormerConfig()

# Initializing a model from the sail/poolformer_s12 style configuration
model = PoolFormerModel(configuration)

# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PoolFormerModel, PoolFormerConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a PoolFormer sail/poolformer_s12 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = PoolFormerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the sail/poolformer_s12 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PoolFormerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),De=new Lo({}),Le=new Ze({props:{name:"class transformers.PoolFormerFeatureExtractor",anchor:"transformers.PoolFormerFeatureExtractor",parameters:[{name:"do_resize_and_center_crop",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = 3"},{name:"crop_pct",val:" = 0.9"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/feature_extraction_poolformer.py#L38",parametersDescription:[{anchor:"transformers.PoolFormerFeatureExtractor.do_resize_and_center_crop",description:`<strong>do_resize_and_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the shortest edge of the image and center crop the input to a certain <code>size</code>.`,name:"do_resize_and_center_crop"},{anchor:"transformers.PoolFormerFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code> or <code>Tuple(int)</code>, <em>optional</em>, defaults to 224) &#x2014;
Center crop the input to the given size. If a tuple is provided, it should be (width, height). If only an
integer is provided, then the input will be center cropped to (size, size). Only has an effect if
<code>do_resize_and_center_crop</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.PoolFormerFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize_and_center_crop</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.PoolFormerFeatureExtractor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>, defaults to <code>0.9</code>) &#x2014;
The percentage of the image to crop from the center. Only has an effect if <code>do_resize_and_center_crop</code> is
set to <code>True</code>.`,name:"crop_pct"},{anchor:"transformers.PoolFormerFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with <code>image_mean</code> and <code>image_std</code>.`,name:"do_normalize"},{anchor:"transformers.PoolFormerFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.PoolFormerFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}]}}),qe=new Ze({props:{name:"__call__",anchor:"transformers.PoolFormerFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"return_tensors",val:": typing.Union[str, transformers.file_utils.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/feature_extraction_poolformer.py#L89",parametersDescription:[{anchor:"transformers.PoolFormerFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.PoolFormerFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_15792/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>, defaults to <code>&apos;np&apos;</code>) &#x2014;
If set, will return tensors of a particular framework. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return NumPy <code>np.ndarray</code> objects.</li>
<li><code>&apos;jax&apos;</code>: Return JAX <code>jnp.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15792/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model, of shape (batch_size, num_channels, height,
width).</li>
</ul>
`}}),ge=new Bs({props:{warning:"&lcub;true}",$$slots:{default:[yl]},$$scope:{ctx:Q}}}),Se=new Lo({}),Oe=new Ze({props:{name:"class transformers.PoolFormerModel",anchor:"transformers.PoolFormerModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/modeling_poolformer.py#L360",parametersDescription:[{anchor:"transformers.PoolFormerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Be=new Ze({props:{name:"forward",anchor:"transformers.PoolFormerModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/modeling_poolformer.py#L373",parametersDescription:[{anchor:"transformers.PoolFormerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor">PoolFormerFeatureExtractor</a>. See
<a href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor.__call__">PoolFormerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"}],returnDescription:`
<p>A <code>transformers.models.poolformer.modeling_poolformer.PoolFormerModelOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerConfig"
>PoolFormerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</p>
</li>
</ul>
`}}),_e=new Bs({props:{$$slots:{default:[$l]},$$scope:{ctx:Q}}}),Ue=new Us({props:{code:`from transformers import PoolFormerFeatureExtractor, PoolFormerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = PoolFormerFeatureExtractor.from_pretrained("sail/poolformer_s12")
model = PoolFormerModel.from_pretrained("sail/poolformer_s12")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PoolFormerFeatureExtractor, PoolFormerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PoolFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PoolFormerModel.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">197</span>, <span class="hljs-number">768</span>]`}}),Ve=new Lo({}),Ge=new Ze({props:{name:"class transformers.PoolFormerForImageClassification",anchor:"transformers.PoolFormerForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/modeling_poolformer.py#L423",parametersDescription:[{anchor:"transformers.PoolFormerForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ye=new Ze({props:{name:"forward",anchor:"transformers.PoolFormerForImageClassification.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15792/src/transformers/models/poolformer/modeling_poolformer.py#L439",parametersDescription:[{anchor:"transformers.PoolFormerForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor">PoolFormerFeatureExtractor</a>. See
<a href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor.__call__">PoolFormerFeatureExtractor.<strong>call</strong>()</a> for details.`,name:"pixel_values"},{anchor:"transformers.PoolFormerForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.models.poolformer.modeling_poolformer.PoolFormerClassifierOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerConfig"
>PoolFormerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
</ul>
`}}),Pe=new Bs({props:{$$slots:{default:[Tl]},$$scope:{ctx:Q}}}),Ke=new Us({props:{code:`from transformers import PoolFormerFeatureExtractor, PoolFormerForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = PoolFormerFeatureExtractor.from_pretrained("sail/poolformer_s12")
model = PoolFormerForImageClassification.from_pretrained("sail/poolformer_s12")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label]),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> PoolFormerFeatureExtractor, PoolFormerForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = PoolFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = PoolFormerForImageClassification.from_pretrained(<span class="hljs-string">&quot;sail/poolformer_s12&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
<span class="hljs-string">&#x27;tabby, tabby cat&#x27;</span>`}}),{c(){h=r("meta"),E=i(),p=r("h1"),g=r("a"),I=r("span"),_(u.$$.fragment),y=i(),q=r("span"),or=n("PoolFormer"),Et=i(),ee=r("h2"),ce=r("a"),No=r("span"),_(be.$$.fragment),tr=i(),qo=r("span"),rr=n("Overview"),yt=i(),de=r("p"),ar=n("The PoolFormer model was proposed in "),Ee=r("a"),sr=n("MetaFormer is Actually What You Need for Vision"),nr=n("  by Sea AI Labs. Instead of designing complicated token mixer to achieve SOTA performance, the target of this work is to demonstrate the competence of transformer models largely stem from the general architecture MetaFormer."),$t=i(),Qe=r("p"),lr=n("The abstract from the paper is the following:"),Tt=i(),eo=r("p"),So=r("em"),ir=n("Transformers have shown great potential in computer vision tasks. A common belief is their attention-based token mixer module contributes most to their competence. However, recent works show the attention-based module in transformers can be replaced by spatial MLPs and the resulted models still perform quite well. Based on this observation, we hypothesize that the general architecture of the transformers, instead of the specific token mixer module, is more essential to the model\u2019s performance. To verify this, we deliberately replace the attention module in transformers with an embarrassingly simple spatial pooling operator to conduct only the most basic token mixing. Surprisingly, we observe that the derived model, termed as PoolFormer, achieves competitive performance on multiple computer vision tasks. For example, on ImageNet-1K, PoolFormer achieves 82.1% top-1 accuracy, surpassing well-tuned vision transformer/MLP-like baselines DeiT-B/ResMLP-B24 by 0.3%/1.1% accuracy with 35%/52% fewer parameters and 48%/60% fewer MACs. The effectiveness of PoolFormer verifies our hypothesis and urges us to initiate the concept of \u201CMetaFormer\u201D, a general architecture abstracted from transformers without specifying the token mixer. Based on the extensive experiments, we argue that MetaFormer is the key player in achieving superior results for recent transformer and MLP-like models on vision tasks. This work calls for more future research dedicated to improving MetaFormer instead of focusing on the token mixer modules. Additionally, our proposed PoolFormer could serve as a starting baseline for future MetaFormer architecture design."),xt=i(),me=r("p"),cr=n("The figure below illustrates the architecture of SegFormer. Taken from the "),ye=r("a"),dr=n("original paper"),mr=n("."),It=i(),$e=r("img"),kt=i(),oo=r("p"),fr=n("Tips:"),Ct=i(),O=r("ul"),Te=r("li"),hr=n("PoolFormer has a hierarchical architecture, where instead of Attention, a simple Average Pooling layer is present. All checkpoints of the model can be found on the "),xe=r("a"),pr=n("hub"),gr=n("."),ur=i(),Ie=r("li"),_r=n("One can use "),to=r("a"),vr=n("PoolFormerFeatureExtractor"),Pr=n(" to prepare images for the model."),Fr=i(),Oo=r("li"),wr=n("As most models, PoolFormer comes in different sizes, the details of which can be found in the table below."),Mt=i(),fe=r("table"),Ro=r("thead"),k=r("tr"),ro=r("th"),Ho=r("strong"),br=n("Model variant"),Er=i(),Bo=r("th"),Uo=r("strong"),yr=n("Depths"),$r=i(),Vo=r("th"),Go=r("strong"),Tr=n("Hidden sizes"),xr=i(),ao=r("th"),Wo=r("strong"),Ir=n("Params (M)"),kr=i(),so=r("th"),Jo=r("strong"),Cr=n("ImageNet-1k Top 1"),Mr=i(),C=r("tbody"),M=r("tr"),no=r("td"),jr=n("s12"),zr=i(),Yo=r("td"),Ar=n("[2, 2, 6, 2]"),Dr=i(),Ko=r("td"),Lr=n("[64, 128, 320, 512]"),Nr=i(),lo=r("td"),qr=n("12"),Sr=i(),io=r("td"),Or=n("77.2"),Rr=i(),j=r("tr"),co=r("td"),Hr=n("s24"),Br=i(),Xo=r("td"),Ur=n("[4, 4, 12, 4]"),Vr=i(),Zo=r("td"),Gr=n("[64, 128, 320, 512]"),Wr=i(),mo=r("td"),Jr=n("21"),Yr=i(),fo=r("td"),Kr=n("80.3"),Xr=i(),z=r("tr"),ho=r("td"),Zr=n("s36"),Qr=i(),Qo=r("td"),ea=n("[6, 6, 18, 6]"),oa=i(),et=r("td"),ta=n("[64, 128, 320, 512]"),ra=i(),po=r("td"),aa=n("31"),sa=i(),go=r("td"),na=n("81.4"),la=i(),A=r("tr"),uo=r("td"),ia=n("m36"),ca=i(),ot=r("td"),da=n("[6, 6, 18, 6]"),ma=i(),tt=r("td"),fa=n("[96, 192, 384, 768]"),ha=i(),_o=r("td"),pa=n("56"),ga=i(),vo=r("td"),ua=n("82.1"),_a=i(),D=r("tr"),Po=r("td"),va=n("m48"),Pa=i(),rt=r("td"),Fa=n("[8, 8, 24, 8]"),wa=i(),at=r("td"),ba=n("[96, 192, 384, 768]"),Ea=i(),Fo=r("td"),ya=n("73"),$a=i(),wo=r("td"),Ta=n("82.5"),jt=i(),R=r("p"),xa=n("This model was contributed by "),ke=r("a"),Ia=n("heytanay"),ka=n(". The original code can be found "),Ce=r("a"),Ca=n("here"),Ma=n("."),zt=i(),oe=r("h2"),he=r("a"),st=r("span"),_(Me.$$.fragment),ja=i(),nt=r("span"),za=n("PoolFormerConfig"),At=i(),$=r("div"),_(je.$$.fragment),Aa=i(),te=r("p"),Da=n("This is the configuration class to store the configuration of "),bo=r("a"),La=n("PoolFormerModel"),Na=n(`. It is used to instantiate a
PoolFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the PoolFormer
`),ze=r("a"),qa=n("sail/poolformer_s12"),Sa=n(" architecture."),Oa=i(),re=r("p"),Ra=n("Configuration objects inherit from "),Eo=r("a"),Ha=n("PretrainedConfig"),Ba=n(` and can be used to control the model outputs. Read the
documentation from `),yo=r("a"),Ua=n("PretrainedConfig"),Va=n(" for more information."),Ga=i(),lt=r("p"),Wa=n("Example:"),Ja=i(),_(Ae.$$.fragment),Dt=i(),ae=r("h2"),pe=r("a"),it=r("span"),_(De.$$.fragment),Ya=i(),ct=r("span"),Ka=n("PoolFormerFeatureExtractor"),Lt=i(),L=r("div"),_(Le.$$.fragment),Xa=i(),dt=r("p"),Za=n("Constructs a PoolFormer feature extractor."),Qa=i(),Ne=r("p"),es=n("This feature extractor inherits from "),$o=r("a"),os=n("FeatureExtractionMixin"),ts=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),rs=i(),H=r("div"),_(qe.$$.fragment),as=i(),mt=r("p"),ss=n("Main method to prepare for the model one or several image(s)."),ns=i(),_(ge.$$.fragment),Nt=i(),se=r("h2"),ue=r("a"),ft=r("span"),_(Se.$$.fragment),ls=i(),ht=r("span"),is=n("PoolFormerModel"),qt=i(),S=r("div"),_(Oe.$$.fragment),cs=i(),Re=r("p"),ds=n(`The bare PoolFormer Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),He=r("a"),ms=n("torch.nn.Module"),fs=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),hs=i(),T=r("div"),_(Be.$$.fragment),ps=i(),ne=r("p"),gs=n("The "),To=r("a"),us=n("PoolFormerModel"),_s=n(" forward method, overrides the "),pt=r("code"),vs=n("__call__"),Ps=n(" special method."),Fs=i(),_(_e.$$.fragment),ws=i(),gt=r("p"),bs=n("Example:"),Es=i(),_(Ue.$$.fragment),St=i(),le=r("h2"),ve=r("a"),ut=r("span"),_(Ve.$$.fragment),ys=i(),_t=r("span"),$s=n("PoolFormerForImageClassification"),Ot=i(),N=r("div"),_(Ge.$$.fragment),Ts=i(),vt=r("p"),xs=n("PoolFormer Model transformer with an image classification head on top"),Is=i(),We=r("p"),ks=n("This model is a PyTorch "),Je=r("a"),Cs=n("torch.nn.Module"),Ms=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),js=i(),x=r("div"),_(Ye.$$.fragment),zs=i(),ie=r("p"),As=n("The "),xo=r("a"),Ds=n("PoolFormerForImageClassification"),Ls=n(" forward method, overrides the "),Pt=r("code"),Ns=n("__call__"),qs=n(" special method."),Ss=i(),_(Pe.$$.fragment),Os=i(),Ft=r("p"),Rs=n("Example:"),Hs=i(),_(Ke.$$.fragment),this.h()},l(t){const m=bl('[data-svelte="svelte-1phssyn"]',document.head);h=a(m,"META",{name:!0,content:!0}),m.forEach(o),E=c(t),p=a(t,"H1",{class:!0});var Xe=s(p);g=a(Xe,"A",{id:!0,class:!0,href:!0});var wt=s(g);I=a(wt,"SPAN",{});var bt=s(I);v(u.$$.fragment,bt),bt.forEach(o),wt.forEach(o),y=c(Xe),q=a(Xe,"SPAN",{});var Gs=s(q);or=l(Gs,"PoolFormer"),Gs.forEach(o),Xe.forEach(o),Et=c(t),ee=a(t,"H2",{class:!0});var Ht=s(ee);ce=a(Ht,"A",{id:!0,class:!0,href:!0});var Ws=s(ce);No=a(Ws,"SPAN",{});var Js=s(No);v(be.$$.fragment,Js),Js.forEach(o),Ws.forEach(o),tr=c(Ht),qo=a(Ht,"SPAN",{});var Ys=s(qo);rr=l(Ys,"Overview"),Ys.forEach(o),Ht.forEach(o),yt=c(t),de=a(t,"P",{});var Bt=s(de);ar=l(Bt,"The PoolFormer model was proposed in "),Ee=a(Bt,"A",{href:!0,rel:!0});var Ks=s(Ee);sr=l(Ks,"MetaFormer is Actually What You Need for Vision"),Ks.forEach(o),nr=l(Bt,"  by Sea AI Labs. Instead of designing complicated token mixer to achieve SOTA performance, the target of this work is to demonstrate the competence of transformer models largely stem from the general architecture MetaFormer."),Bt.forEach(o),$t=c(t),Qe=a(t,"P",{});var Xs=s(Qe);lr=l(Xs,"The abstract from the paper is the following:"),Xs.forEach(o),Tt=c(t),eo=a(t,"P",{});var Zs=s(eo);So=a(Zs,"EM",{});var Qs=s(So);ir=l(Qs,"Transformers have shown great potential in computer vision tasks. A common belief is their attention-based token mixer module contributes most to their competence. However, recent works show the attention-based module in transformers can be replaced by spatial MLPs and the resulted models still perform quite well. Based on this observation, we hypothesize that the general architecture of the transformers, instead of the specific token mixer module, is more essential to the model\u2019s performance. To verify this, we deliberately replace the attention module in transformers with an embarrassingly simple spatial pooling operator to conduct only the most basic token mixing. Surprisingly, we observe that the derived model, termed as PoolFormer, achieves competitive performance on multiple computer vision tasks. For example, on ImageNet-1K, PoolFormer achieves 82.1% top-1 accuracy, surpassing well-tuned vision transformer/MLP-like baselines DeiT-B/ResMLP-B24 by 0.3%/1.1% accuracy with 35%/52% fewer parameters and 48%/60% fewer MACs. The effectiveness of PoolFormer verifies our hypothesis and urges us to initiate the concept of \u201CMetaFormer\u201D, a general architecture abstracted from transformers without specifying the token mixer. Based on the extensive experiments, we argue that MetaFormer is the key player in achieving superior results for recent transformer and MLP-like models on vision tasks. This work calls for more future research dedicated to improving MetaFormer instead of focusing on the token mixer modules. Additionally, our proposed PoolFormer could serve as a starting baseline for future MetaFormer architecture design."),Qs.forEach(o),Zs.forEach(o),xt=c(t),me=a(t,"P",{});var Ut=s(me);cr=l(Ut,"The figure below illustrates the architecture of SegFormer. Taken from the "),ye=a(Ut,"A",{href:!0,rel:!0});var en=s(ye);dr=l(en,"original paper"),en.forEach(o),mr=l(Ut,"."),Ut.forEach(o),It=c(t),$e=a(t,"IMG",{width:!0,src:!0}),kt=c(t),oo=a(t,"P",{});var on=s(oo);fr=l(on,"Tips:"),on.forEach(o),Ct=c(t),O=a(t,"UL",{});var Io=s(O);Te=a(Io,"LI",{});var Vt=s(Te);hr=l(Vt,"PoolFormer has a hierarchical architecture, where instead of Attention, a simple Average Pooling layer is present. All checkpoints of the model can be found on the "),xe=a(Vt,"A",{href:!0,rel:!0});var tn=s(xe);pr=l(tn,"hub"),tn.forEach(o),gr=l(Vt,"."),Vt.forEach(o),ur=c(Io),Ie=a(Io,"LI",{});var Gt=s(Ie);_r=l(Gt,"One can use "),to=a(Gt,"A",{href:!0});var rn=s(to);vr=l(rn,"PoolFormerFeatureExtractor"),rn.forEach(o),Pr=l(Gt," to prepare images for the model."),Gt.forEach(o),Fr=c(Io),Oo=a(Io,"LI",{});var an=s(Oo);wr=l(an,"As most models, PoolFormer comes in different sizes, the details of which can be found in the table below."),an.forEach(o),Io.forEach(o),Mt=c(t),fe=a(t,"TABLE",{});var Wt=s(fe);Ro=a(Wt,"THEAD",{});var sn=s(Ro);k=a(sn,"TR",{});var B=s(k);ro=a(B,"TH",{align:!0});var nn=s(ro);Ho=a(nn,"STRONG",{});var ln=s(Ho);br=l(ln,"Model variant"),ln.forEach(o),nn.forEach(o),Er=c(B),Bo=a(B,"TH",{});var cn=s(Bo);Uo=a(cn,"STRONG",{});var dn=s(Uo);yr=l(dn,"Depths"),dn.forEach(o),cn.forEach(o),$r=c(B),Vo=a(B,"TH",{});var mn=s(Vo);Go=a(mn,"STRONG",{});var fn=s(Go);Tr=l(fn,"Hidden sizes"),fn.forEach(o),mn.forEach(o),xr=c(B),ao=a(B,"TH",{align:!0});var hn=s(ao);Wo=a(hn,"STRONG",{});var pn=s(Wo);Ir=l(pn,"Params (M)"),pn.forEach(o),hn.forEach(o),kr=c(B),so=a(B,"TH",{align:!0});var gn=s(so);Jo=a(gn,"STRONG",{});var un=s(Jo);Cr=l(un,"ImageNet-1k Top 1"),un.forEach(o),gn.forEach(o),B.forEach(o),sn.forEach(o),Mr=c(Wt),C=a(Wt,"TBODY",{});var U=s(C);M=a(U,"TR",{});var V=s(M);no=a(V,"TD",{align:!0});var _n=s(no);jr=l(_n,"s12"),_n.forEach(o),zr=c(V),Yo=a(V,"TD",{});var vn=s(Yo);Ar=l(vn,"[2, 2, 6, 2]"),vn.forEach(o),Dr=c(V),Ko=a(V,"TD",{});var Pn=s(Ko);Lr=l(Pn,"[64, 128, 320, 512]"),Pn.forEach(o),Nr=c(V),lo=a(V,"TD",{align:!0});var Fn=s(lo);qr=l(Fn,"12"),Fn.forEach(o),Sr=c(V),io=a(V,"TD",{align:!0});var wn=s(io);Or=l(wn,"77.2"),wn.forEach(o),V.forEach(o),Rr=c(U),j=a(U,"TR",{});var G=s(j);co=a(G,"TD",{align:!0});var bn=s(co);Hr=l(bn,"s24"),bn.forEach(o),Br=c(G),Xo=a(G,"TD",{});var En=s(Xo);Ur=l(En,"[4, 4, 12, 4]"),En.forEach(o),Vr=c(G),Zo=a(G,"TD",{});var yn=s(Zo);Gr=l(yn,"[64, 128, 320, 512]"),yn.forEach(o),Wr=c(G),mo=a(G,"TD",{align:!0});var $n=s(mo);Jr=l($n,"21"),$n.forEach(o),Yr=c(G),fo=a(G,"TD",{align:!0});var Tn=s(fo);Kr=l(Tn,"80.3"),Tn.forEach(o),G.forEach(o),Xr=c(U),z=a(U,"TR",{});var W=s(z);ho=a(W,"TD",{align:!0});var xn=s(ho);Zr=l(xn,"s36"),xn.forEach(o),Qr=c(W),Qo=a(W,"TD",{});var In=s(Qo);ea=l(In,"[6, 6, 18, 6]"),In.forEach(o),oa=c(W),et=a(W,"TD",{});var kn=s(et);ta=l(kn,"[64, 128, 320, 512]"),kn.forEach(o),ra=c(W),po=a(W,"TD",{align:!0});var Cn=s(po);aa=l(Cn,"31"),Cn.forEach(o),sa=c(W),go=a(W,"TD",{align:!0});var Mn=s(go);na=l(Mn,"81.4"),Mn.forEach(o),W.forEach(o),la=c(U),A=a(U,"TR",{});var J=s(A);uo=a(J,"TD",{align:!0});var jn=s(uo);ia=l(jn,"m36"),jn.forEach(o),ca=c(J),ot=a(J,"TD",{});var zn=s(ot);da=l(zn,"[6, 6, 18, 6]"),zn.forEach(o),ma=c(J),tt=a(J,"TD",{});var An=s(tt);fa=l(An,"[96, 192, 384, 768]"),An.forEach(o),ha=c(J),_o=a(J,"TD",{align:!0});var Dn=s(_o);pa=l(Dn,"56"),Dn.forEach(o),ga=c(J),vo=a(J,"TD",{align:!0});var Ln=s(vo);ua=l(Ln,"82.1"),Ln.forEach(o),J.forEach(o),_a=c(U),D=a(U,"TR",{});var Y=s(D);Po=a(Y,"TD",{align:!0});var Nn=s(Po);va=l(Nn,"m48"),Nn.forEach(o),Pa=c(Y),rt=a(Y,"TD",{});var qn=s(rt);Fa=l(qn,"[8, 8, 24, 8]"),qn.forEach(o),wa=c(Y),at=a(Y,"TD",{});var Sn=s(at);ba=l(Sn,"[96, 192, 384, 768]"),Sn.forEach(o),Ea=c(Y),Fo=a(Y,"TD",{align:!0});var On=s(Fo);ya=l(On,"73"),On.forEach(o),$a=c(Y),wo=a(Y,"TD",{align:!0});var Rn=s(wo);Ta=l(Rn,"82.5"),Rn.forEach(o),Y.forEach(o),U.forEach(o),Wt.forEach(o),jt=c(t),R=a(t,"P",{});var ko=s(R);xa=l(ko,"This model was contributed by "),ke=a(ko,"A",{href:!0,rel:!0});var Hn=s(ke);Ia=l(Hn,"heytanay"),Hn.forEach(o),ka=l(ko,". The original code can be found "),Ce=a(ko,"A",{href:!0,rel:!0});var Bn=s(Ce);Ca=l(Bn,"here"),Bn.forEach(o),Ma=l(ko,"."),ko.forEach(o),zt=c(t),oe=a(t,"H2",{class:!0});var Jt=s(oe);he=a(Jt,"A",{id:!0,class:!0,href:!0});var Un=s(he);st=a(Un,"SPAN",{});var Vn=s(st);v(Me.$$.fragment,Vn),Vn.forEach(o),Un.forEach(o),ja=c(Jt),nt=a(Jt,"SPAN",{});var Gn=s(nt);za=l(Gn,"PoolFormerConfig"),Gn.forEach(o),Jt.forEach(o),At=c(t),$=a(t,"DIV",{class:!0});var K=s($);v(je.$$.fragment,K),Aa=c(K),te=a(K,"P",{});var Co=s(te);Da=l(Co,"This is the configuration class to store the configuration of "),bo=a(Co,"A",{href:!0});var Wn=s(bo);La=l(Wn,"PoolFormerModel"),Wn.forEach(o),Na=l(Co,`. It is used to instantiate a
PoolFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the PoolFormer
`),ze=a(Co,"A",{href:!0,rel:!0});var Jn=s(ze);qa=l(Jn,"sail/poolformer_s12"),Jn.forEach(o),Sa=l(Co," architecture."),Co.forEach(o),Oa=c(K),re=a(K,"P",{});var Mo=s(re);Ra=l(Mo,"Configuration objects inherit from "),Eo=a(Mo,"A",{href:!0});var Yn=s(Eo);Ha=l(Yn,"PretrainedConfig"),Yn.forEach(o),Ba=l(Mo,` and can be used to control the model outputs. Read the
documentation from `),yo=a(Mo,"A",{href:!0});var Kn=s(yo);Ua=l(Kn,"PretrainedConfig"),Kn.forEach(o),Va=l(Mo," for more information."),Mo.forEach(o),Ga=c(K),lt=a(K,"P",{});var Xn=s(lt);Wa=l(Xn,"Example:"),Xn.forEach(o),Ja=c(K),v(Ae.$$.fragment,K),K.forEach(o),Dt=c(t),ae=a(t,"H2",{class:!0});var Yt=s(ae);pe=a(Yt,"A",{id:!0,class:!0,href:!0});var Zn=s(pe);it=a(Zn,"SPAN",{});var Qn=s(it);v(De.$$.fragment,Qn),Qn.forEach(o),Zn.forEach(o),Ya=c(Yt),ct=a(Yt,"SPAN",{});var el=s(ct);Ka=l(el,"PoolFormerFeatureExtractor"),el.forEach(o),Yt.forEach(o),Lt=c(t),L=a(t,"DIV",{class:!0});var Fe=s(L);v(Le.$$.fragment,Fe),Xa=c(Fe),dt=a(Fe,"P",{});var ol=s(dt);Za=l(ol,"Constructs a PoolFormer feature extractor."),ol.forEach(o),Qa=c(Fe),Ne=a(Fe,"P",{});var Kt=s(Ne);es=l(Kt,"This feature extractor inherits from "),$o=a(Kt,"A",{href:!0});var tl=s($o);os=l(tl,"FeatureExtractionMixin"),tl.forEach(o),ts=l(Kt,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Kt.forEach(o),rs=c(Fe),H=a(Fe,"DIV",{class:!0});var jo=s(H);v(qe.$$.fragment,jo),as=c(jo),mt=a(jo,"P",{});var rl=s(mt);ss=l(rl,"Main method to prepare for the model one or several image(s)."),rl.forEach(o),ns=c(jo),v(ge.$$.fragment,jo),jo.forEach(o),Fe.forEach(o),Nt=c(t),se=a(t,"H2",{class:!0});var Xt=s(se);ue=a(Xt,"A",{id:!0,class:!0,href:!0});var al=s(ue);ft=a(al,"SPAN",{});var sl=s(ft);v(Se.$$.fragment,sl),sl.forEach(o),al.forEach(o),ls=c(Xt),ht=a(Xt,"SPAN",{});var nl=s(ht);is=l(nl,"PoolFormerModel"),nl.forEach(o),Xt.forEach(o),qt=c(t),S=a(t,"DIV",{class:!0});var zo=s(S);v(Oe.$$.fragment,zo),cs=c(zo),Re=a(zo,"P",{});var Zt=s(Re);ds=l(Zt,`The bare PoolFormer Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),He=a(Zt,"A",{href:!0,rel:!0});var ll=s(He);ms=l(ll,"torch.nn.Module"),ll.forEach(o),fs=l(Zt,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Zt.forEach(o),hs=c(zo),T=a(zo,"DIV",{class:!0});var X=s(T);v(Be.$$.fragment,X),ps=c(X),ne=a(X,"P",{});var Ao=s(ne);gs=l(Ao,"The "),To=a(Ao,"A",{href:!0});var il=s(To);us=l(il,"PoolFormerModel"),il.forEach(o),_s=l(Ao," forward method, overrides the "),pt=a(Ao,"CODE",{});var cl=s(pt);vs=l(cl,"__call__"),cl.forEach(o),Ps=l(Ao," special method."),Ao.forEach(o),Fs=c(X),v(_e.$$.fragment,X),ws=c(X),gt=a(X,"P",{});var dl=s(gt);bs=l(dl,"Example:"),dl.forEach(o),Es=c(X),v(Ue.$$.fragment,X),X.forEach(o),zo.forEach(o),St=c(t),le=a(t,"H2",{class:!0});var Qt=s(le);ve=a(Qt,"A",{id:!0,class:!0,href:!0});var ml=s(ve);ut=a(ml,"SPAN",{});var fl=s(ut);v(Ve.$$.fragment,fl),fl.forEach(o),ml.forEach(o),ys=c(Qt),_t=a(Qt,"SPAN",{});var hl=s(_t);$s=l(hl,"PoolFormerForImageClassification"),hl.forEach(o),Qt.forEach(o),Ot=c(t),N=a(t,"DIV",{class:!0});var we=s(N);v(Ge.$$.fragment,we),Ts=c(we),vt=a(we,"P",{});var pl=s(vt);xs=l(pl,"PoolFormer Model transformer with an image classification head on top"),pl.forEach(o),Is=c(we),We=a(we,"P",{});var er=s(We);ks=l(er,"This model is a PyTorch "),Je=a(er,"A",{href:!0,rel:!0});var gl=s(Je);Cs=l(gl,"torch.nn.Module"),gl.forEach(o),Ms=l(er,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),er.forEach(o),js=c(we),x=a(we,"DIV",{class:!0});var Z=s(x);v(Ye.$$.fragment,Z),zs=c(Z),ie=a(Z,"P",{});var Do=s(ie);As=l(Do,"The "),xo=a(Do,"A",{href:!0});var ul=s(xo);Ds=l(ul,"PoolFormerForImageClassification"),ul.forEach(o),Ls=l(Do," forward method, overrides the "),Pt=a(Do,"CODE",{});var _l=s(Pt);Ns=l(_l,"__call__"),_l.forEach(o),qs=l(Do," special method."),Do.forEach(o),Ss=c(Z),v(Pe.$$.fragment,Z),Os=c(Z),Ft=a(Z,"P",{});var vl=s(Ft);Rs=l(vl,"Example:"),vl.forEach(o),Hs=c(Z),v(Ke.$$.fragment,Z),Z.forEach(o),we.forEach(o),this.h()},h(){d(h,"name","hf:doc:metadata"),d(h,"content",JSON.stringify(Il)),d(g,"id","poolformer"),d(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g,"href","#poolformer"),d(p,"class","relative group"),d(ce,"id","overview"),d(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ce,"href","#overview"),d(ee,"class","relative group"),d(Ee,"href","https://arxiv.org/abs/2111.11418"),d(Ee,"rel","nofollow"),d(ye,"href","https://arxiv.org/abs/2111.11418"),d(ye,"rel","nofollow"),d($e,"width","600"),El($e.src,Vs="https://user-images.githubusercontent.com/15921929/142746124-1ab7635d-2536-4a0e-ad43-b4fe2c5a525d.png")||d($e,"src",Vs),d(xe,"href","https://huggingface.co/models?other=poolformer"),d(xe,"rel","nofollow"),d(to,"href","/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(ro,"align","center"),d(ao,"align","center"),d(so,"align","center"),d(no,"align","center"),d(lo,"align","center"),d(io,"align","center"),d(co,"align","center"),d(mo,"align","center"),d(fo,"align","center"),d(ho,"align","center"),d(po,"align","center"),d(go,"align","center"),d(uo,"align","center"),d(_o,"align","center"),d(vo,"align","center"),d(Po,"align","center"),d(Fo,"align","center"),d(wo,"align","center"),d(ke,"href","https://huggingface.co/heytanay"),d(ke,"rel","nofollow"),d(Ce,"href","https://github.com/sail-sg/poolformer"),d(Ce,"rel","nofollow"),d(he,"id","transformers.PoolFormerConfig"),d(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(he,"href","#transformers.PoolFormerConfig"),d(oe,"class","relative group"),d(bo,"href","/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerModel"),d(ze,"href","https://huggingface.co/sail/poolformer_s12"),d(ze,"rel","nofollow"),d(Eo,"href","/docs/transformers/pr_15792/en/main_classes/configuration#transformers.PretrainedConfig"),d(yo,"href","/docs/transformers/pr_15792/en/main_classes/configuration#transformers.PretrainedConfig"),d($,"class","docstring"),d(pe,"id","transformers.PoolFormerFeatureExtractor"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#transformers.PoolFormerFeatureExtractor"),d(ae,"class","relative group"),d($o,"href","/docs/transformers/pr_15792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(H,"class","docstring"),d(L,"class","docstring"),d(ue,"id","transformers.PoolFormerModel"),d(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ue,"href","#transformers.PoolFormerModel"),d(se,"class","relative group"),d(He,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(He,"rel","nofollow"),d(To,"href","/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerModel"),d(T,"class","docstring"),d(S,"class","docstring"),d(ve,"id","transformers.PoolFormerForImageClassification"),d(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ve,"href","#transformers.PoolFormerForImageClassification"),d(le,"class","relative group"),d(Je,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Je,"rel","nofollow"),d(xo,"href","/docs/transformers/pr_15792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(x,"class","docstring"),d(N,"class","docstring")},m(t,m){e(document.head,h),f(t,E,m),f(t,p,m),e(p,g),e(g,I),P(u,I,null),e(p,y),e(p,q),e(q,or),f(t,Et,m),f(t,ee,m),e(ee,ce),e(ce,No),P(be,No,null),e(ee,tr),e(ee,qo),e(qo,rr),f(t,yt,m),f(t,de,m),e(de,ar),e(de,Ee),e(Ee,sr),e(de,nr),f(t,$t,m),f(t,Qe,m),e(Qe,lr),f(t,Tt,m),f(t,eo,m),e(eo,So),e(So,ir),f(t,xt,m),f(t,me,m),e(me,cr),e(me,ye),e(ye,dr),e(me,mr),f(t,It,m),f(t,$e,m),f(t,kt,m),f(t,oo,m),e(oo,fr),f(t,Ct,m),f(t,O,m),e(O,Te),e(Te,hr),e(Te,xe),e(xe,pr),e(Te,gr),e(O,ur),e(O,Ie),e(Ie,_r),e(Ie,to),e(to,vr),e(Ie,Pr),e(O,Fr),e(O,Oo),e(Oo,wr),f(t,Mt,m),f(t,fe,m),e(fe,Ro),e(Ro,k),e(k,ro),e(ro,Ho),e(Ho,br),e(k,Er),e(k,Bo),e(Bo,Uo),e(Uo,yr),e(k,$r),e(k,Vo),e(Vo,Go),e(Go,Tr),e(k,xr),e(k,ao),e(ao,Wo),e(Wo,Ir),e(k,kr),e(k,so),e(so,Jo),e(Jo,Cr),e(fe,Mr),e(fe,C),e(C,M),e(M,no),e(no,jr),e(M,zr),e(M,Yo),e(Yo,Ar),e(M,Dr),e(M,Ko),e(Ko,Lr),e(M,Nr),e(M,lo),e(lo,qr),e(M,Sr),e(M,io),e(io,Or),e(C,Rr),e(C,j),e(j,co),e(co,Hr),e(j,Br),e(j,Xo),e(Xo,Ur),e(j,Vr),e(j,Zo),e(Zo,Gr),e(j,Wr),e(j,mo),e(mo,Jr),e(j,Yr),e(j,fo),e(fo,Kr),e(C,Xr),e(C,z),e(z,ho),e(ho,Zr),e(z,Qr),e(z,Qo),e(Qo,ea),e(z,oa),e(z,et),e(et,ta),e(z,ra),e(z,po),e(po,aa),e(z,sa),e(z,go),e(go,na),e(C,la),e(C,A),e(A,uo),e(uo,ia),e(A,ca),e(A,ot),e(ot,da),e(A,ma),e(A,tt),e(tt,fa),e(A,ha),e(A,_o),e(_o,pa),e(A,ga),e(A,vo),e(vo,ua),e(C,_a),e(C,D),e(D,Po),e(Po,va),e(D,Pa),e(D,rt),e(rt,Fa),e(D,wa),e(D,at),e(at,ba),e(D,Ea),e(D,Fo),e(Fo,ya),e(D,$a),e(D,wo),e(wo,Ta),f(t,jt,m),f(t,R,m),e(R,xa),e(R,ke),e(ke,Ia),e(R,ka),e(R,Ce),e(Ce,Ca),e(R,Ma),f(t,zt,m),f(t,oe,m),e(oe,he),e(he,st),P(Me,st,null),e(oe,ja),e(oe,nt),e(nt,za),f(t,At,m),f(t,$,m),P(je,$,null),e($,Aa),e($,te),e(te,Da),e(te,bo),e(bo,La),e(te,Na),e(te,ze),e(ze,qa),e(te,Sa),e($,Oa),e($,re),e(re,Ra),e(re,Eo),e(Eo,Ha),e(re,Ba),e(re,yo),e(yo,Ua),e(re,Va),e($,Ga),e($,lt),e(lt,Wa),e($,Ja),P(Ae,$,null),f(t,Dt,m),f(t,ae,m),e(ae,pe),e(pe,it),P(De,it,null),e(ae,Ya),e(ae,ct),e(ct,Ka),f(t,Lt,m),f(t,L,m),P(Le,L,null),e(L,Xa),e(L,dt),e(dt,Za),e(L,Qa),e(L,Ne),e(Ne,es),e(Ne,$o),e($o,os),e(Ne,ts),e(L,rs),e(L,H),P(qe,H,null),e(H,as),e(H,mt),e(mt,ss),e(H,ns),P(ge,H,null),f(t,Nt,m),f(t,se,m),e(se,ue),e(ue,ft),P(Se,ft,null),e(se,ls),e(se,ht),e(ht,is),f(t,qt,m),f(t,S,m),P(Oe,S,null),e(S,cs),e(S,Re),e(Re,ds),e(Re,He),e(He,ms),e(Re,fs),e(S,hs),e(S,T),P(Be,T,null),e(T,ps),e(T,ne),e(ne,gs),e(ne,To),e(To,us),e(ne,_s),e(ne,pt),e(pt,vs),e(ne,Ps),e(T,Fs),P(_e,T,null),e(T,ws),e(T,gt),e(gt,bs),e(T,Es),P(Ue,T,null),f(t,St,m),f(t,le,m),e(le,ve),e(ve,ut),P(Ve,ut,null),e(le,ys),e(le,_t),e(_t,$s),f(t,Ot,m),f(t,N,m),P(Ge,N,null),e(N,Ts),e(N,vt),e(vt,xs),e(N,Is),e(N,We),e(We,ks),e(We,Je),e(Je,Cs),e(We,Ms),e(N,js),e(N,x),P(Ye,x,null),e(x,zs),e(x,ie),e(ie,As),e(ie,xo),e(xo,Ds),e(ie,Ls),e(ie,Pt),e(Pt,Ns),e(ie,qs),e(x,Ss),P(Pe,x,null),e(x,Os),e(x,Ft),e(Ft,Rs),e(x,Hs),P(Ke,x,null),Rt=!0},p(t,[m]){const Xe={};m&2&&(Xe.$$scope={dirty:m,ctx:t}),ge.$set(Xe);const wt={};m&2&&(wt.$$scope={dirty:m,ctx:t}),_e.$set(wt);const bt={};m&2&&(bt.$$scope={dirty:m,ctx:t}),Pe.$set(bt)},i(t){Rt||(F(u.$$.fragment,t),F(be.$$.fragment,t),F(Me.$$.fragment,t),F(je.$$.fragment,t),F(Ae.$$.fragment,t),F(De.$$.fragment,t),F(Le.$$.fragment,t),F(qe.$$.fragment,t),F(ge.$$.fragment,t),F(Se.$$.fragment,t),F(Oe.$$.fragment,t),F(Be.$$.fragment,t),F(_e.$$.fragment,t),F(Ue.$$.fragment,t),F(Ve.$$.fragment,t),F(Ge.$$.fragment,t),F(Ye.$$.fragment,t),F(Pe.$$.fragment,t),F(Ke.$$.fragment,t),Rt=!0)},o(t){w(u.$$.fragment,t),w(be.$$.fragment,t),w(Me.$$.fragment,t),w(je.$$.fragment,t),w(Ae.$$.fragment,t),w(De.$$.fragment,t),w(Le.$$.fragment,t),w(qe.$$.fragment,t),w(ge.$$.fragment,t),w(Se.$$.fragment,t),w(Oe.$$.fragment,t),w(Be.$$.fragment,t),w(_e.$$.fragment,t),w(Ue.$$.fragment,t),w(Ve.$$.fragment,t),w(Ge.$$.fragment,t),w(Ye.$$.fragment,t),w(Pe.$$.fragment,t),w(Ke.$$.fragment,t),Rt=!1},d(t){o(h),t&&o(E),t&&o(p),b(u),t&&o(Et),t&&o(ee),b(be),t&&o(yt),t&&o(de),t&&o($t),t&&o(Qe),t&&o(Tt),t&&o(eo),t&&o(xt),t&&o(me),t&&o(It),t&&o($e),t&&o(kt),t&&o(oo),t&&o(Ct),t&&o(O),t&&o(Mt),t&&o(fe),t&&o(jt),t&&o(R),t&&o(zt),t&&o(oe),b(Me),t&&o(At),t&&o($),b(je),b(Ae),t&&o(Dt),t&&o(ae),b(De),t&&o(Lt),t&&o(L),b(Le),b(qe),b(ge),t&&o(Nt),t&&o(se),b(Se),t&&o(qt),t&&o(S),b(Oe),b(Be),b(_e),b(Ue),t&&o(St),t&&o(le),b(Ve),t&&o(Ot),t&&o(N),b(Ge),b(Ye),b(Pe),b(Ke)}}}const Il={local:"poolformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.PoolFormerConfig",title:"PoolFormerConfig"},{local:"transformers.PoolFormerFeatureExtractor",title:"PoolFormerFeatureExtractor"},{local:"transformers.PoolFormerModel",title:"PoolFormerModel"},{local:"transformers.PoolFormerForImageClassification",title:"PoolFormerForImageClassification"}],title:"PoolFormer"};function kl(Q,h,E){let{fw:p}=h;return Q.$$set=g=>{"fw"in g&&E(0,p=g.fw)},[p]}class Ll extends Pl{constructor(h){super();Fl(this,h,kl,xl,wl,{fw:0})}}export{Ll as default,Il as metadata};
