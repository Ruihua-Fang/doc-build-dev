import{S as uFt,i as bFt,s as vFt,e as a,k as l,w as f,t as o,M as TFt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as Q7r}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function FFt(Ii){let J,Pe,de,ge,io,fe,Te,Vo,ji,If,ca,Di,Ni,zE,jf,Le,co,qi,On,WE,Gn,Xn,QE,Oi,Vn,HE,Gi,Df,Na;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),ge=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Te=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),ca=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),zE=o(")."),jf=l(),Le=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),WE=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),QE=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),HE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),Na=o(")."),this.h()},l(fo){J=n(fo,"P",{});var he=s(J);Pe=r(he,"If your "),de=n(he,"CODE",{});var N8=s(de);ge=r(N8,"NewModelConfig"),N8.forEach(t),io=r(he," is a subclass of "),fe=n(he,"CODE",{});var Xi=s(fe);Te=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(he,`, make sure its
`),ji=n(he,"CODE",{});var q8=s(ji);If=r(q8,"model_type"),q8.forEach(t),ca=r(he," attribute is set to the same key you use when registering the config (here "),Di=n(he,"CODE",{});var O8=s(Di);Ni=r(O8,'"new-model"'),O8.forEach(t),zE=r(he,")."),he.forEach(t),jf=i(fo),Le=n(fo,"P",{});var zo=s(Le);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var qa=s(qi);On=r(qa,"NewModel"),qa.forEach(t),WE=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var G8=s(Gn);Xn=r(G8,"PreTrainedModel"),G8.forEach(t),QE=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Nf=s(Oi);Vn=r(Nf,"config_class"),Nf.forEach(t),HE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var X8=s(Gi);Df=r(X8,"NewModelConfig"),X8.forEach(t),Na=r(zo,")."),zo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel")},m(fo,he){b(fo,J,he),e(J,Pe),e(J,de),e(de,ge),e(J,io),e(J,fe),e(fe,Te),e(J,Vo),e(J,ji),e(ji,If),e(J,ca),e(J,Di),e(Di,Ni),e(J,zE),b(fo,jf,he),b(fo,Le,he),e(Le,co),e(Le,qi),e(qi,On),e(Le,WE),e(Le,Gn),e(Gn,Xn),e(Le,QE),e(Le,Oi),e(Oi,Vn),e(Le,HE),e(Le,Gi),e(Gi,Df),e(Le,Na)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Le)}}}function CFt(Ii){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function MFt(Ii){let J,Pe,de,ge,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),ge=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Te=s(J);Pe=r(Te,"Passing "),de=n(Te,"CODE",{});var Vo=s(de);ge=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Te," is required when you want to use a private model."),Te.forEach(t)},m(fe,Te){b(fe,J,Te),e(J,Pe),e(J,de),e(de,ge),e(J,io)},d(fe){fe&&t(J)}}}function EFt(Ii){let J,Pe,de,ge,io,fe,Te,Vo,ji,If,ca,Di,Ni,zE,jf,Le,co,qi,On,WE,Gn,Xn,QE,Oi,Vn,HE,Gi,Df,Na,fo,he,N8,Xi,q8,O8,zo,qa,G8,Nf,X8,gPe,ZBe,Vi,qf,mQ,UE,hPe,gQ,pPe,exe,zn,_Pe,hQ,uPe,bPe,pQ,vPe,TPe,oxe,JE,rxe,V8,FPe,txe,Of,axe,zi,Gf,_Q,YE,CPe,uQ,MPe,nxe,Wo,KE,EPe,ZE,yPe,z8,wPe,APe,LPe,e3,BPe,bQ,xPe,kPe,RPe,mo,o3,SPe,vQ,PPe,$Pe,Wi,IPe,TQ,jPe,DPe,FQ,NPe,qPe,OPe,v,Xf,CQ,GPe,XPe,W8,VPe,zPe,WPe,Vf,MQ,QPe,HPe,Q8,UPe,JPe,YPe,zf,EQ,KPe,ZPe,H8,e$e,o$e,r$e,Wf,yQ,t$e,a$e,U8,n$e,s$e,l$e,Qf,wQ,i$e,d$e,J8,c$e,f$e,m$e,Hf,AQ,g$e,h$e,Y8,p$e,_$e,u$e,Uf,LQ,b$e,v$e,K8,T$e,F$e,C$e,Jf,BQ,M$e,E$e,Z8,y$e,w$e,A$e,Yf,xQ,L$e,B$e,e7,x$e,k$e,R$e,Kf,kQ,S$e,P$e,o7,$$e,I$e,j$e,Zf,RQ,D$e,N$e,r7,q$e,O$e,G$e,em,SQ,X$e,V$e,t7,z$e,W$e,Q$e,om,PQ,H$e,U$e,a7,J$e,Y$e,K$e,rm,$Q,Z$e,eIe,n7,oIe,rIe,tIe,tm,IQ,aIe,nIe,s7,sIe,lIe,iIe,am,jQ,dIe,cIe,l7,fIe,mIe,gIe,nm,DQ,hIe,pIe,i7,_Ie,uIe,bIe,sm,NQ,vIe,TIe,d7,FIe,CIe,MIe,lm,qQ,EIe,yIe,c7,wIe,AIe,LIe,im,OQ,BIe,xIe,f7,kIe,RIe,SIe,dm,GQ,PIe,$Ie,m7,IIe,jIe,DIe,cm,XQ,NIe,qIe,g7,OIe,GIe,XIe,fm,VQ,VIe,zIe,h7,WIe,QIe,HIe,mm,zQ,UIe,JIe,p7,YIe,KIe,ZIe,gm,WQ,eje,oje,_7,rje,tje,aje,hm,QQ,nje,sje,u7,lje,ije,dje,pm,HQ,cje,fje,b7,mje,gje,hje,_m,UQ,pje,_je,v7,uje,bje,vje,um,JQ,Tje,Fje,T7,Cje,Mje,Eje,bm,YQ,yje,wje,F7,Aje,Lje,Bje,vm,KQ,xje,kje,C7,Rje,Sje,Pje,Tm,ZQ,$je,Ije,M7,jje,Dje,Nje,Fm,eH,qje,Oje,E7,Gje,Xje,Vje,Cm,oH,zje,Wje,y7,Qje,Hje,Uje,Mm,rH,Jje,Yje,w7,Kje,Zje,eDe,Em,tH,oDe,rDe,A7,tDe,aDe,nDe,ym,aH,sDe,lDe,L7,iDe,dDe,cDe,wm,nH,fDe,mDe,B7,gDe,hDe,pDe,Am,sH,_De,uDe,x7,bDe,vDe,TDe,Lm,lH,FDe,CDe,k7,MDe,EDe,yDe,Bm,iH,wDe,ADe,R7,LDe,BDe,xDe,xm,dH,kDe,RDe,S7,SDe,PDe,$De,km,cH,IDe,jDe,P7,DDe,NDe,qDe,Rm,fH,ODe,GDe,$7,XDe,VDe,zDe,Sm,mH,WDe,QDe,I7,HDe,UDe,JDe,Pm,gH,YDe,KDe,j7,ZDe,eNe,oNe,$m,hH,rNe,tNe,D7,aNe,nNe,sNe,Im,pH,lNe,iNe,N7,dNe,cNe,fNe,jm,_H,mNe,gNe,q7,hNe,pNe,_Ne,Dm,uH,uNe,bNe,O7,vNe,TNe,FNe,Nm,bH,CNe,MNe,G7,ENe,yNe,wNe,qm,vH,ANe,LNe,X7,BNe,xNe,kNe,Om,TH,RNe,SNe,V7,PNe,$Ne,INe,Gm,FH,jNe,DNe,z7,NNe,qNe,ONe,Xm,CH,GNe,XNe,W7,VNe,zNe,WNe,Vm,MH,QNe,HNe,Q7,UNe,JNe,YNe,zm,EH,KNe,ZNe,H7,eqe,oqe,rqe,Wm,yH,tqe,aqe,U7,nqe,sqe,lqe,Qm,wH,iqe,dqe,J7,cqe,fqe,mqe,Hm,AH,gqe,hqe,Y7,pqe,_qe,uqe,Um,LH,bqe,vqe,K7,Tqe,Fqe,Cqe,Jm,BH,Mqe,Eqe,Z7,yqe,wqe,Aqe,Ym,xH,Lqe,Bqe,eB,xqe,kqe,Rqe,Km,kH,Sqe,Pqe,oB,$qe,Iqe,jqe,Zm,RH,Dqe,Nqe,rB,qqe,Oqe,Gqe,eg,SH,Xqe,Vqe,tB,zqe,Wqe,Qqe,og,PH,Hqe,Uqe,aB,Jqe,Yqe,Kqe,rg,$H,Zqe,eOe,nB,oOe,rOe,tOe,tg,IH,aOe,nOe,sB,sOe,lOe,iOe,ag,jH,dOe,cOe,lB,fOe,mOe,gOe,ng,DH,hOe,pOe,iB,_Oe,uOe,bOe,sg,NH,vOe,TOe,dB,FOe,COe,MOe,lg,qH,EOe,yOe,cB,wOe,AOe,LOe,ig,OH,BOe,xOe,fB,kOe,ROe,SOe,dg,GH,POe,$Oe,mB,IOe,jOe,DOe,cg,XH,NOe,qOe,gB,OOe,GOe,XOe,fg,VH,VOe,zOe,hB,WOe,QOe,HOe,mg,zH,UOe,JOe,pB,YOe,KOe,ZOe,gg,WH,eGe,oGe,_B,rGe,tGe,aGe,hg,QH,nGe,sGe,uB,lGe,iGe,dGe,pg,HH,cGe,fGe,bB,mGe,gGe,hGe,_g,UH,pGe,_Ge,vB,uGe,bGe,vGe,ug,JH,TGe,FGe,TB,CGe,MGe,EGe,bg,YH,yGe,wGe,FB,AGe,LGe,BGe,vg,KH,xGe,kGe,CB,RGe,SGe,PGe,Tg,ZH,$Ge,IGe,MB,jGe,DGe,NGe,Fg,eU,qGe,OGe,EB,GGe,XGe,VGe,Cg,oU,zGe,WGe,yB,QGe,HGe,UGe,Mg,rU,JGe,YGe,wB,KGe,ZGe,eXe,Eg,tU,oXe,rXe,AB,tXe,aXe,nXe,yg,aU,sXe,lXe,LB,iXe,dXe,cXe,wg,nU,fXe,mXe,BB,gXe,hXe,pXe,Ag,sU,_Xe,uXe,xB,bXe,vXe,TXe,Lg,lU,FXe,CXe,kB,MXe,EXe,yXe,iU,wXe,AXe,r3,LXe,Bg,t3,BXe,dU,xXe,sxe,Qi,xg,cU,a3,kXe,fU,RXe,lxe,Qo,n3,SXe,s3,PXe,RB,$Xe,IXe,jXe,l3,DXe,mU,NXe,qXe,OXe,go,i3,GXe,gU,XXe,VXe,Oa,zXe,hU,WXe,QXe,pU,HXe,UXe,_U,JXe,YXe,KXe,E,Wn,uU,ZXe,eVe,SB,oVe,rVe,PB,tVe,aVe,nVe,Qn,bU,sVe,lVe,$B,iVe,dVe,IB,cVe,fVe,mVe,Hn,vU,gVe,hVe,jB,pVe,_Ve,DB,uVe,bVe,vVe,kg,TU,TVe,FVe,NB,CVe,MVe,EVe,Un,FU,yVe,wVe,qB,AVe,LVe,OB,BVe,xVe,kVe,Rg,CU,RVe,SVe,GB,PVe,$Ve,IVe,Sg,MU,jVe,DVe,XB,NVe,qVe,OVe,Pg,EU,GVe,XVe,VB,VVe,zVe,WVe,Jn,yU,QVe,HVe,zB,UVe,JVe,WB,YVe,KVe,ZVe,Yn,wU,eze,oze,QB,rze,tze,HB,aze,nze,sze,Kn,AU,lze,ize,UB,dze,cze,JB,fze,mze,gze,$g,LU,hze,pze,YB,_ze,uze,bze,Ig,BU,vze,Tze,KB,Fze,Cze,Mze,Zn,xU,Eze,yze,ZB,wze,Aze,ex,Lze,Bze,xze,jg,kU,kze,Rze,ox,Sze,Pze,$ze,es,RU,Ize,jze,rx,Dze,Nze,tx,qze,Oze,Gze,os,SU,Xze,Vze,ax,zze,Wze,nx,Qze,Hze,Uze,rs,PU,Jze,Yze,sx,Kze,Zze,$U,eWe,oWe,rWe,Dg,IU,tWe,aWe,lx,nWe,sWe,lWe,ts,jU,iWe,dWe,ix,cWe,fWe,dx,mWe,gWe,hWe,as,DU,pWe,_We,cx,uWe,bWe,fx,vWe,TWe,FWe,ns,NU,CWe,MWe,mx,EWe,yWe,gx,wWe,AWe,LWe,ss,qU,BWe,xWe,hx,kWe,RWe,px,SWe,PWe,$We,ls,OU,IWe,jWe,_x,DWe,NWe,ux,qWe,OWe,GWe,Ng,GU,XWe,VWe,bx,zWe,WWe,QWe,is,XU,HWe,UWe,vx,JWe,YWe,Tx,KWe,ZWe,eQe,qg,VU,oQe,rQe,Fx,tQe,aQe,nQe,ds,zU,sQe,lQe,Cx,iQe,dQe,Mx,cQe,fQe,mQe,cs,WU,gQe,hQe,Ex,pQe,_Qe,yx,uQe,bQe,vQe,fs,QU,TQe,FQe,wx,CQe,MQe,Ax,EQe,yQe,wQe,ms,HU,AQe,LQe,Lx,BQe,xQe,Bx,kQe,RQe,SQe,Og,UU,PQe,$Qe,xx,IQe,jQe,DQe,gs,JU,NQe,qQe,kx,OQe,GQe,Rx,XQe,VQe,zQe,hs,YU,WQe,QQe,Sx,HQe,UQe,Px,JQe,YQe,KQe,ps,KU,ZQe,eHe,$x,oHe,rHe,Ix,tHe,aHe,nHe,_s,ZU,sHe,lHe,jx,iHe,dHe,Dx,cHe,fHe,mHe,us,eJ,gHe,hHe,Nx,pHe,_He,qx,uHe,bHe,vHe,bs,oJ,THe,FHe,Ox,CHe,MHe,Gx,EHe,yHe,wHe,Gg,rJ,AHe,LHe,Xx,BHe,xHe,kHe,vs,tJ,RHe,SHe,Vx,PHe,$He,zx,IHe,jHe,DHe,Xg,aJ,NHe,qHe,Wx,OHe,GHe,XHe,Vg,nJ,VHe,zHe,Qx,WHe,QHe,HHe,Ts,sJ,UHe,JHe,Hx,YHe,KHe,Ux,ZHe,eUe,oUe,Fs,lJ,rUe,tUe,Jx,aUe,nUe,Yx,sUe,lUe,iUe,zg,iJ,dUe,cUe,Kx,fUe,mUe,gUe,Cs,dJ,hUe,pUe,Zx,_Ue,uUe,ek,bUe,vUe,TUe,Ms,cJ,FUe,CUe,ok,MUe,EUe,rk,yUe,wUe,AUe,Es,fJ,LUe,BUe,tk,xUe,kUe,ak,RUe,SUe,PUe,ys,mJ,$Ue,IUe,nk,jUe,DUe,sk,NUe,qUe,OUe,ws,gJ,GUe,XUe,lk,VUe,zUe,ik,WUe,QUe,HUe,Wg,hJ,UUe,JUe,dk,YUe,KUe,ZUe,Qg,pJ,eJe,oJe,ck,rJe,tJe,aJe,Hg,_J,nJe,sJe,fk,lJe,iJe,dJe,Ug,uJ,cJe,fJe,mk,mJe,gJe,hJe,As,bJ,pJe,_Je,gk,uJe,bJe,hk,vJe,TJe,FJe,Jg,vJ,CJe,MJe,pk,EJe,yJe,wJe,Ls,TJ,AJe,LJe,_k,BJe,xJe,uk,kJe,RJe,SJe,Bs,FJ,PJe,$Je,bk,IJe,jJe,vk,DJe,NJe,qJe,xs,CJ,OJe,GJe,Tk,XJe,VJe,Fk,zJe,WJe,QJe,ks,MJ,HJe,UJe,Ck,JJe,YJe,Mk,KJe,ZJe,eYe,Rs,EJ,oYe,rYe,Ek,tYe,aYe,yk,nYe,sYe,lYe,Ss,yJ,iYe,dYe,wk,cYe,fYe,Ak,mYe,gYe,hYe,Yg,wJ,pYe,_Ye,Lk,uYe,bYe,vYe,Kg,AJ,TYe,FYe,Bk,CYe,MYe,EYe,Ps,LJ,yYe,wYe,xk,AYe,LYe,kk,BYe,xYe,kYe,$s,BJ,RYe,SYe,Rk,PYe,$Ye,Sk,IYe,jYe,DYe,Is,xJ,NYe,qYe,Pk,OYe,GYe,$k,XYe,VYe,zYe,Zg,kJ,WYe,QYe,Ik,HYe,UYe,JYe,eh,RJ,YYe,KYe,jk,ZYe,eKe,oKe,oh,SJ,rKe,tKe,Dk,aKe,nKe,sKe,rh,PJ,lKe,iKe,Nk,dKe,cKe,fKe,js,$J,mKe,gKe,qk,hKe,pKe,Ok,_Ke,uKe,bKe,th,IJ,vKe,TKe,Gk,FKe,CKe,MKe,ah,jJ,EKe,yKe,Xk,wKe,AKe,LKe,Ds,DJ,BKe,xKe,Vk,kKe,RKe,zk,SKe,PKe,$Ke,Ns,NJ,IKe,jKe,Wk,DKe,NKe,Qk,qKe,OKe,GKe,qJ,XKe,VKe,d3,zKe,nh,c3,WKe,OJ,QKe,ixe,Hi,sh,GJ,f3,HKe,XJ,UKe,dxe,Ho,m3,JKe,g3,YKe,Hk,KKe,ZKe,eZe,h3,oZe,VJ,rZe,tZe,aZe,$e,p3,nZe,zJ,sZe,lZe,Ga,iZe,WJ,dZe,cZe,QJ,fZe,mZe,HJ,gZe,hZe,pZe,ae,lh,UJ,_Ze,uZe,Uk,bZe,vZe,TZe,ih,JJ,FZe,CZe,Jk,MZe,EZe,yZe,dh,YJ,wZe,AZe,Yk,LZe,BZe,xZe,ch,KJ,kZe,RZe,Kk,SZe,PZe,$Ze,fh,ZJ,IZe,jZe,Zk,DZe,NZe,qZe,mh,eY,OZe,GZe,eR,XZe,VZe,zZe,gh,oY,WZe,QZe,oR,HZe,UZe,JZe,hh,rY,YZe,KZe,rR,ZZe,eeo,oeo,ph,tY,reo,teo,tR,aeo,neo,seo,_h,aY,leo,ieo,aR,deo,ceo,feo,uh,nY,meo,geo,nR,heo,peo,_eo,bh,sY,ueo,beo,sR,veo,Teo,Feo,vh,lY,Ceo,Meo,lR,Eeo,yeo,weo,Th,iY,Aeo,Leo,iR,Beo,xeo,keo,Fh,dY,Reo,Seo,dR,Peo,$eo,Ieo,Ch,cY,jeo,Deo,cR,Neo,qeo,Oeo,Mh,Geo,fY,Xeo,Veo,_3,zeo,Eh,u3,Weo,mY,Qeo,cxe,Ui,yh,gY,b3,Heo,hY,Ueo,fxe,Uo,v3,Jeo,T3,Yeo,fR,Keo,Zeo,eoo,F3,ooo,pY,roo,too,aoo,Ie,C3,noo,_Y,soo,loo,Ji,ioo,uY,doo,coo,bY,foo,moo,goo,Be,wh,vY,hoo,poo,mR,_oo,uoo,boo,Ah,TY,voo,Too,gR,Foo,Coo,Moo,Lh,FY,Eoo,yoo,hR,woo,Aoo,Loo,Bh,CY,Boo,xoo,pR,koo,Roo,Soo,xh,MY,Poo,$oo,_R,Ioo,joo,Doo,kh,EY,Noo,qoo,uR,Ooo,Goo,Xoo,Rh,yY,Voo,zoo,bR,Woo,Qoo,Hoo,Sh,wY,Uoo,Joo,vR,Yoo,Koo,Zoo,Ph,ero,AY,oro,rro,M3,tro,$h,E3,aro,LY,nro,mxe,Yi,Ih,BY,y3,sro,xY,lro,gxe,Jo,w3,iro,Ki,dro,kY,cro,fro,RY,mro,gro,hro,A3,pro,SY,_ro,uro,bro,Vr,L3,vro,PY,Tro,Fro,Zi,Cro,$Y,Mro,Ero,IY,yro,wro,Aro,jY,Lro,Bro,B3,xro,je,x3,kro,DY,Rro,Sro,Xa,Pro,NY,$ro,Iro,qY,jro,Dro,OY,Nro,qro,Oro,F,jh,GY,Gro,Xro,TR,Vro,zro,Wro,Dh,XY,Qro,Hro,FR,Uro,Jro,Yro,Nh,VY,Kro,Zro,CR,eto,oto,rto,qh,zY,tto,ato,MR,nto,sto,lto,Oh,WY,ito,dto,ER,cto,fto,mto,Gh,QY,gto,hto,yR,pto,_to,uto,Xh,HY,bto,vto,wR,Tto,Fto,Cto,Vh,UY,Mto,Eto,AR,yto,wto,Ato,zh,JY,Lto,Bto,LR,xto,kto,Rto,Wh,YY,Sto,Pto,BR,$to,Ito,jto,Qh,KY,Dto,Nto,xR,qto,Oto,Gto,Hh,ZY,Xto,Vto,kR,zto,Wto,Qto,Uh,eK,Hto,Uto,RR,Jto,Yto,Kto,Jh,oK,Zto,eao,SR,oao,rao,tao,Yh,rK,aao,nao,PR,sao,lao,iao,Kh,tK,dao,cao,$R,fao,mao,gao,Zh,aK,hao,pao,IR,_ao,uao,bao,ep,nK,vao,Tao,jR,Fao,Cao,Mao,op,sK,Eao,yao,DR,wao,Aao,Lao,rp,lK,Bao,xao,NR,kao,Rao,Sao,tp,iK,Pao,$ao,qR,Iao,jao,Dao,ap,dK,Nao,qao,OR,Oao,Gao,Xao,np,cK,Vao,zao,GR,Wao,Qao,Hao,sp,fK,Uao,Jao,XR,Yao,Kao,Zao,lp,mK,eno,ono,VR,rno,tno,ano,ip,gK,nno,sno,zR,lno,ino,dno,dp,hK,cno,fno,WR,mno,gno,hno,qs,pK,pno,_no,QR,uno,bno,HR,vno,Tno,Fno,cp,_K,Cno,Mno,UR,Eno,yno,wno,fp,uK,Ano,Lno,JR,Bno,xno,kno,mp,bK,Rno,Sno,YR,Pno,$no,Ino,gp,vK,jno,Dno,KR,Nno,qno,Ono,hp,TK,Gno,Xno,ZR,Vno,zno,Wno,pp,FK,Qno,Hno,eS,Uno,Jno,Yno,_p,CK,Kno,Zno,oS,eso,oso,rso,up,MK,tso,aso,rS,nso,sso,lso,bp,EK,iso,dso,tS,cso,fso,mso,vp,yK,gso,hso,aS,pso,_so,uso,Tp,wK,bso,vso,nS,Tso,Fso,Cso,Fp,AK,Mso,Eso,sS,yso,wso,Aso,Cp,LK,Lso,Bso,lS,xso,kso,Rso,Mp,BK,Sso,Pso,iS,$so,Iso,jso,Ep,xK,Dso,Nso,dS,qso,Oso,Gso,yp,kK,Xso,Vso,cS,zso,Wso,Qso,wp,RK,Hso,Uso,fS,Jso,Yso,Kso,Ap,SK,Zso,elo,mS,olo,rlo,tlo,Lp,PK,alo,nlo,gS,slo,llo,ilo,Bp,$K,dlo,clo,hS,flo,mlo,glo,xp,IK,hlo,plo,pS,_lo,ulo,blo,kp,jK,vlo,Tlo,_S,Flo,Clo,Mlo,Rp,DK,Elo,ylo,uS,wlo,Alo,Llo,Sp,NK,Blo,xlo,bS,klo,Rlo,Slo,Pp,qK,Plo,$lo,vS,Ilo,jlo,Dlo,$p,OK,Nlo,qlo,TS,Olo,Glo,Xlo,Ip,GK,Vlo,zlo,FS,Wlo,Qlo,Hlo,jp,XK,Ulo,Jlo,CS,Ylo,Klo,Zlo,Dp,VK,eio,oio,MS,rio,tio,aio,Np,zK,nio,sio,ES,lio,iio,dio,qp,WK,cio,fio,yS,mio,gio,hio,Op,QK,pio,_io,wS,uio,bio,vio,Gp,HK,Tio,Fio,AS,Cio,Mio,Eio,Xp,UK,yio,wio,LS,Aio,Lio,Bio,Vp,JK,xio,kio,BS,Rio,Sio,Pio,zp,YK,$io,Iio,xS,jio,Dio,Nio,Wp,KK,qio,Oio,kS,Gio,Xio,Vio,Qp,ZK,zio,Wio,RS,Qio,Hio,Uio,Hp,eZ,Jio,Yio,SS,Kio,Zio,edo,Up,oZ,odo,rdo,PS,tdo,ado,ndo,Jp,rZ,sdo,ldo,$S,ido,ddo,cdo,Yp,tZ,fdo,mdo,IS,gdo,hdo,pdo,Kp,aZ,_do,udo,jS,bdo,vdo,Tdo,Zp,nZ,Fdo,Cdo,DS,Mdo,Edo,ydo,e_,sZ,wdo,Ado,NS,Ldo,Bdo,xdo,o_,lZ,kdo,Rdo,qS,Sdo,Pdo,$do,r_,iZ,Ido,jdo,OS,Ddo,Ndo,qdo,t_,dZ,Odo,Gdo,GS,Xdo,Vdo,zdo,a_,cZ,Wdo,Qdo,XS,Hdo,Udo,Jdo,n_,fZ,Ydo,Kdo,VS,Zdo,eco,oco,s_,mZ,rco,tco,zS,aco,nco,sco,l_,gZ,lco,ico,WS,dco,cco,fco,i_,hZ,mco,gco,QS,hco,pco,_co,d_,pZ,uco,bco,HS,vco,Tco,Fco,c_,_Z,Cco,Mco,US,Eco,yco,wco,f_,uZ,Aco,Lco,JS,Bco,xco,kco,m_,bZ,Rco,Sco,YS,Pco,$co,Ico,g_,vZ,jco,Dco,KS,Nco,qco,Oco,h_,TZ,Gco,Xco,ZS,Vco,zco,Wco,p_,Qco,FZ,Hco,Uco,CZ,Jco,Yco,MZ,Kco,Zco,k3,hxe,ed,__,EZ,R3,efo,yZ,ofo,pxe,Yo,S3,rfo,od,tfo,wZ,afo,nfo,AZ,sfo,lfo,ifo,P3,dfo,LZ,cfo,ffo,mfo,zr,$3,gfo,BZ,hfo,pfo,rd,_fo,xZ,ufo,bfo,kZ,vfo,Tfo,Ffo,RZ,Cfo,Mfo,I3,Efo,De,j3,yfo,SZ,wfo,Afo,Va,Lfo,PZ,Bfo,xfo,$Z,kfo,Rfo,IZ,Sfo,Pfo,$fo,k,u_,jZ,Ifo,jfo,eP,Dfo,Nfo,qfo,b_,DZ,Ofo,Gfo,oP,Xfo,Vfo,zfo,v_,NZ,Wfo,Qfo,rP,Hfo,Ufo,Jfo,T_,qZ,Yfo,Kfo,tP,Zfo,emo,omo,F_,OZ,rmo,tmo,aP,amo,nmo,smo,C_,GZ,lmo,imo,nP,dmo,cmo,fmo,M_,XZ,mmo,gmo,sP,hmo,pmo,_mo,E_,VZ,umo,bmo,lP,vmo,Tmo,Fmo,y_,zZ,Cmo,Mmo,iP,Emo,ymo,wmo,w_,WZ,Amo,Lmo,dP,Bmo,xmo,kmo,A_,QZ,Rmo,Smo,cP,Pmo,$mo,Imo,L_,HZ,jmo,Dmo,fP,Nmo,qmo,Omo,B_,UZ,Gmo,Xmo,mP,Vmo,zmo,Wmo,x_,JZ,Qmo,Hmo,gP,Umo,Jmo,Ymo,k_,YZ,Kmo,Zmo,hP,ego,ogo,rgo,R_,KZ,tgo,ago,pP,ngo,sgo,lgo,S_,ZZ,igo,dgo,_P,cgo,fgo,mgo,P_,eee,ggo,hgo,uP,pgo,_go,ugo,$_,oee,bgo,vgo,bP,Tgo,Fgo,Cgo,I_,ree,Mgo,Ego,vP,ygo,wgo,Ago,j_,tee,Lgo,Bgo,TP,xgo,kgo,Rgo,D_,aee,Sgo,Pgo,FP,$go,Igo,jgo,N_,nee,Dgo,Ngo,CP,qgo,Ogo,Ggo,q_,see,Xgo,Vgo,MP,zgo,Wgo,Qgo,O_,lee,Hgo,Ugo,EP,Jgo,Ygo,Kgo,G_,iee,Zgo,eho,yP,oho,rho,tho,X_,dee,aho,nho,wP,sho,lho,iho,V_,cee,dho,cho,AP,fho,mho,gho,z_,fee,hho,pho,LP,_ho,uho,bho,W_,mee,vho,Tho,BP,Fho,Cho,Mho,Q_,gee,Eho,yho,xP,who,Aho,Lho,H_,hee,Bho,xho,kP,kho,Rho,Sho,U_,pee,Pho,$ho,RP,Iho,jho,Dho,J_,_ee,Nho,qho,SP,Oho,Gho,Xho,Y_,uee,Vho,zho,PP,Who,Qho,Hho,K_,bee,Uho,Jho,$P,Yho,Kho,Zho,Z_,vee,epo,opo,IP,rpo,tpo,apo,eu,Tee,npo,spo,jP,lpo,ipo,dpo,ou,Fee,cpo,fpo,DP,mpo,gpo,hpo,ru,ppo,Cee,_po,upo,Mee,bpo,vpo,Eee,Tpo,Fpo,D3,_xe,td,tu,yee,N3,Cpo,wee,Mpo,uxe,Ko,q3,Epo,ad,ypo,Aee,wpo,Apo,Lee,Lpo,Bpo,xpo,O3,kpo,Bee,Rpo,Spo,Ppo,Wr,G3,$po,xee,Ipo,jpo,nd,Dpo,kee,Npo,qpo,Ree,Opo,Gpo,Xpo,See,Vpo,zpo,X3,Wpo,Ne,V3,Qpo,Pee,Hpo,Upo,za,Jpo,$ee,Ypo,Kpo,Iee,Zpo,e_o,jee,o_o,r_o,t_o,$,au,Dee,a_o,n_o,NP,s_o,l_o,i_o,nu,Nee,d_o,c_o,qP,f_o,m_o,g_o,su,qee,h_o,p_o,OP,__o,u_o,b_o,lu,Oee,v_o,T_o,GP,F_o,C_o,M_o,iu,Gee,E_o,y_o,XP,w_o,A_o,L_o,du,Xee,B_o,x_o,VP,k_o,R_o,S_o,cu,Vee,P_o,$_o,zP,I_o,j_o,D_o,fu,zee,N_o,q_o,WP,O_o,G_o,X_o,mu,Wee,V_o,z_o,QP,W_o,Q_o,H_o,gu,Qee,U_o,J_o,HP,Y_o,K_o,Z_o,hu,Hee,euo,ouo,UP,ruo,tuo,auo,pu,Uee,nuo,suo,JP,luo,iuo,duo,_u,Jee,cuo,fuo,YP,muo,guo,huo,uu,Yee,puo,_uo,KP,uuo,buo,vuo,bu,Kee,Tuo,Fuo,ZP,Cuo,Muo,Euo,vu,Zee,yuo,wuo,e$,Auo,Luo,Buo,Tu,eoe,xuo,kuo,o$,Ruo,Suo,Puo,Fu,ooe,$uo,Iuo,r$,juo,Duo,Nuo,Cu,roe,quo,Ouo,t$,Guo,Xuo,Vuo,Mu,toe,zuo,Wuo,a$,Quo,Huo,Uuo,Eu,aoe,Juo,Yuo,n$,Kuo,Zuo,e5o,yu,noe,o5o,r5o,s$,t5o,a5o,n5o,wu,soe,s5o,l5o,l$,i5o,d5o,c5o,Au,loe,f5o,m5o,i$,g5o,h5o,p5o,Lu,ioe,_5o,u5o,d$,b5o,v5o,T5o,Bu,doe,F5o,C5o,c$,M5o,E5o,y5o,xu,coe,w5o,A5o,f$,L5o,B5o,x5o,ku,foe,k5o,R5o,m$,S5o,P5o,$5o,Ru,moe,I5o,j5o,g$,D5o,N5o,q5o,Su,goe,O5o,G5o,h$,X5o,V5o,z5o,Pu,hoe,W5o,Q5o,p$,H5o,U5o,J5o,$u,poe,Y5o,K5o,_$,Z5o,e2o,o2o,Iu,_oe,r2o,t2o,u$,a2o,n2o,s2o,ju,uoe,l2o,i2o,b$,d2o,c2o,f2o,Du,boe,m2o,g2o,v$,h2o,p2o,_2o,Nu,u2o,voe,b2o,v2o,Toe,T2o,F2o,Foe,C2o,M2o,z3,bxe,sd,qu,Coe,W3,E2o,Moe,y2o,vxe,Zo,Q3,w2o,ld,A2o,Eoe,L2o,B2o,yoe,x2o,k2o,R2o,H3,S2o,woe,P2o,$2o,I2o,Qr,U3,j2o,Aoe,D2o,N2o,id,q2o,Loe,O2o,G2o,Boe,X2o,V2o,z2o,xoe,W2o,Q2o,J3,H2o,qe,Y3,U2o,koe,J2o,Y2o,Wa,K2o,Roe,Z2o,e1o,Soe,o1o,r1o,Poe,t1o,a1o,n1o,I,Ou,$oe,s1o,l1o,T$,i1o,d1o,c1o,Gu,Ioe,f1o,m1o,F$,g1o,h1o,p1o,Xu,joe,_1o,u1o,C$,b1o,v1o,T1o,Vu,Doe,F1o,C1o,M$,M1o,E1o,y1o,zu,Noe,w1o,A1o,E$,L1o,B1o,x1o,Wu,qoe,k1o,R1o,y$,S1o,P1o,$1o,Qu,Ooe,I1o,j1o,w$,D1o,N1o,q1o,Hu,Goe,O1o,G1o,A$,X1o,V1o,z1o,Uu,Xoe,W1o,Q1o,L$,H1o,U1o,J1o,Ju,Voe,Y1o,K1o,B$,Z1o,ebo,obo,Yu,zoe,rbo,tbo,x$,abo,nbo,sbo,Ku,Woe,lbo,ibo,k$,dbo,cbo,fbo,Zu,Qoe,mbo,gbo,R$,hbo,pbo,_bo,e5,Hoe,ubo,bbo,S$,vbo,Tbo,Fbo,o5,Uoe,Cbo,Mbo,P$,Ebo,ybo,wbo,r5,Joe,Abo,Lbo,$$,Bbo,xbo,kbo,t5,Yoe,Rbo,Sbo,I$,Pbo,$bo,Ibo,a5,Koe,jbo,Dbo,j$,Nbo,qbo,Obo,n5,Zoe,Gbo,Xbo,D$,Vbo,zbo,Wbo,s5,ere,Qbo,Hbo,N$,Ubo,Jbo,Ybo,l5,ore,Kbo,Zbo,q$,evo,ovo,rvo,i5,rre,tvo,avo,O$,nvo,svo,lvo,d5,tre,ivo,dvo,G$,cvo,fvo,mvo,c5,are,gvo,hvo,X$,pvo,_vo,uvo,f5,nre,bvo,vvo,V$,Tvo,Fvo,Cvo,m5,sre,Mvo,Evo,z$,yvo,wvo,Avo,g5,lre,Lvo,Bvo,W$,xvo,kvo,Rvo,h5,ire,Svo,Pvo,Q$,$vo,Ivo,jvo,p5,dre,Dvo,Nvo,H$,qvo,Ovo,Gvo,_5,cre,Xvo,Vvo,U$,zvo,Wvo,Qvo,u5,fre,Hvo,Uvo,mre,Jvo,Yvo,Kvo,b5,gre,Zvo,eTo,J$,oTo,rTo,tTo,v5,hre,aTo,nTo,Y$,sTo,lTo,iTo,T5,pre,dTo,cTo,K$,fTo,mTo,gTo,F5,_re,hTo,pTo,Z$,_To,uTo,bTo,C5,vTo,ure,TTo,FTo,bre,CTo,MTo,vre,ETo,yTo,K3,Txe,dd,M5,Tre,Z3,wTo,Fre,ATo,Fxe,er,ey,LTo,cd,BTo,Cre,xTo,kTo,Mre,RTo,STo,PTo,oy,$To,Ere,ITo,jTo,DTo,Hr,ry,NTo,yre,qTo,OTo,fd,GTo,wre,XTo,VTo,Are,zTo,WTo,QTo,Lre,HTo,UTo,ty,JTo,Oe,ay,YTo,Bre,KTo,ZTo,Qa,eFo,xre,oFo,rFo,kre,tFo,aFo,Rre,nFo,sFo,lFo,ne,E5,Sre,iFo,dFo,eI,cFo,fFo,mFo,y5,Pre,gFo,hFo,oI,pFo,_Fo,uFo,w5,$re,bFo,vFo,rI,TFo,FFo,CFo,A5,Ire,MFo,EFo,tI,yFo,wFo,AFo,L5,jre,LFo,BFo,aI,xFo,kFo,RFo,B5,Dre,SFo,PFo,nI,$Fo,IFo,jFo,x5,Nre,DFo,NFo,sI,qFo,OFo,GFo,k5,qre,XFo,VFo,lI,zFo,WFo,QFo,R5,Ore,HFo,UFo,iI,JFo,YFo,KFo,S5,Gre,ZFo,e9o,dI,o9o,r9o,t9o,P5,Xre,a9o,n9o,cI,s9o,l9o,i9o,$5,Vre,d9o,c9o,fI,f9o,m9o,g9o,I5,zre,h9o,p9o,mI,_9o,u9o,b9o,j5,Wre,v9o,T9o,gI,F9o,C9o,M9o,D5,Qre,E9o,y9o,hI,w9o,A9o,L9o,N5,Hre,B9o,x9o,pI,k9o,R9o,S9o,q5,P9o,Ure,$9o,I9o,Jre,j9o,D9o,Yre,N9o,q9o,ny,Cxe,md,O5,Kre,sy,O9o,Zre,G9o,Mxe,or,ly,X9o,gd,V9o,ete,z9o,W9o,ote,Q9o,H9o,U9o,iy,J9o,rte,Y9o,K9o,Z9o,Ur,dy,eCo,tte,oCo,rCo,hd,tCo,ate,aCo,nCo,nte,sCo,lCo,iCo,ste,dCo,cCo,cy,fCo,Ge,fy,mCo,lte,gCo,hCo,Ha,pCo,ite,_Co,uCo,dte,bCo,vCo,cte,TCo,FCo,CCo,A,G5,fte,MCo,ECo,_I,yCo,wCo,ACo,X5,mte,LCo,BCo,uI,xCo,kCo,RCo,V5,gte,SCo,PCo,bI,$Co,ICo,jCo,z5,hte,DCo,NCo,vI,qCo,OCo,GCo,W5,pte,XCo,VCo,TI,zCo,WCo,QCo,Q5,_te,HCo,UCo,FI,JCo,YCo,KCo,H5,ute,ZCo,eMo,CI,oMo,rMo,tMo,U5,bte,aMo,nMo,MI,sMo,lMo,iMo,J5,vte,dMo,cMo,EI,fMo,mMo,gMo,Y5,Tte,hMo,pMo,yI,_Mo,uMo,bMo,K5,Fte,vMo,TMo,wI,FMo,CMo,MMo,Z5,Cte,EMo,yMo,AI,wMo,AMo,LMo,e2,Mte,BMo,xMo,LI,kMo,RMo,SMo,o2,Ete,PMo,$Mo,BI,IMo,jMo,DMo,r2,yte,NMo,qMo,xI,OMo,GMo,XMo,t2,wte,VMo,zMo,kI,WMo,QMo,HMo,a2,Ate,UMo,JMo,RI,YMo,KMo,ZMo,n2,Lte,e4o,o4o,SI,r4o,t4o,a4o,s2,Bte,n4o,s4o,PI,l4o,i4o,d4o,l2,xte,c4o,f4o,$I,m4o,g4o,h4o,i2,kte,p4o,_4o,II,u4o,b4o,v4o,d2,Rte,T4o,F4o,jI,C4o,M4o,E4o,c2,Ste,y4o,w4o,DI,A4o,L4o,B4o,f2,Pte,x4o,k4o,NI,R4o,S4o,P4o,m2,$te,$4o,I4o,qI,j4o,D4o,N4o,g2,Ite,q4o,O4o,OI,G4o,X4o,V4o,h2,jte,z4o,W4o,GI,Q4o,H4o,U4o,p2,Dte,J4o,Y4o,XI,K4o,Z4o,eEo,_2,Nte,oEo,rEo,VI,tEo,aEo,nEo,u2,qte,sEo,lEo,zI,iEo,dEo,cEo,b2,Ote,fEo,mEo,WI,gEo,hEo,pEo,v2,Gte,_Eo,uEo,QI,bEo,vEo,TEo,T2,Xte,FEo,CEo,HI,MEo,EEo,yEo,F2,Vte,wEo,AEo,UI,LEo,BEo,xEo,C2,zte,kEo,REo,JI,SEo,PEo,$Eo,M2,Wte,IEo,jEo,YI,DEo,NEo,qEo,E2,Qte,OEo,GEo,KI,XEo,VEo,zEo,y2,Hte,WEo,QEo,ZI,HEo,UEo,JEo,w2,Ute,YEo,KEo,ej,ZEo,e3o,o3o,A2,Jte,r3o,t3o,oj,a3o,n3o,s3o,L2,Yte,l3o,i3o,rj,d3o,c3o,f3o,B2,Kte,m3o,g3o,tj,h3o,p3o,_3o,x2,Zte,u3o,b3o,aj,v3o,T3o,F3o,k2,eae,C3o,M3o,nj,E3o,y3o,w3o,R2,oae,A3o,L3o,sj,B3o,x3o,k3o,S2,rae,R3o,S3o,lj,P3o,$3o,I3o,P2,j3o,tae,D3o,N3o,aae,q3o,O3o,nae,G3o,X3o,my,Exe,pd,$2,sae,gy,V3o,lae,z3o,yxe,rr,hy,W3o,_d,Q3o,iae,H3o,U3o,dae,J3o,Y3o,K3o,py,Z3o,cae,eyo,oyo,ryo,Jr,_y,tyo,fae,ayo,nyo,ud,syo,mae,lyo,iyo,gae,dyo,cyo,fyo,hae,myo,gyo,uy,hyo,Xe,by,pyo,pae,_yo,uyo,Ua,byo,_ae,vyo,Tyo,uae,Fyo,Cyo,bae,Myo,Eyo,yyo,O,I2,vae,wyo,Ayo,ij,Lyo,Byo,xyo,j2,Tae,kyo,Ryo,dj,Syo,Pyo,$yo,D2,Fae,Iyo,jyo,cj,Dyo,Nyo,qyo,N2,Cae,Oyo,Gyo,fj,Xyo,Vyo,zyo,q2,Mae,Wyo,Qyo,mj,Hyo,Uyo,Jyo,O2,Eae,Yyo,Kyo,gj,Zyo,ewo,owo,G2,yae,rwo,two,hj,awo,nwo,swo,X2,wae,lwo,iwo,pj,dwo,cwo,fwo,V2,Aae,mwo,gwo,_j,hwo,pwo,_wo,z2,Lae,uwo,bwo,uj,vwo,Two,Fwo,W2,Bae,Cwo,Mwo,bj,Ewo,ywo,wwo,Q2,xae,Awo,Lwo,vj,Bwo,xwo,kwo,H2,kae,Rwo,Swo,Tj,Pwo,$wo,Iwo,U2,Rae,jwo,Dwo,Fj,Nwo,qwo,Owo,J2,Sae,Gwo,Xwo,Cj,Vwo,zwo,Wwo,Y2,Pae,Qwo,Hwo,Mj,Uwo,Jwo,Ywo,K2,$ae,Kwo,Zwo,Ej,e6o,o6o,r6o,Z2,Iae,t6o,a6o,yj,n6o,s6o,l6o,e1,jae,i6o,d6o,wj,c6o,f6o,m6o,o1,Dae,g6o,h6o,Aj,p6o,_6o,u6o,r1,Nae,b6o,v6o,Lj,T6o,F6o,C6o,t1,qae,M6o,E6o,Bj,y6o,w6o,A6o,a1,Oae,L6o,B6o,xj,x6o,k6o,R6o,n1,Gae,S6o,P6o,kj,$6o,I6o,j6o,s1,Xae,D6o,N6o,Rj,q6o,O6o,G6o,l1,Vae,X6o,V6o,Sj,z6o,W6o,Q6o,i1,zae,H6o,U6o,Pj,J6o,Y6o,K6o,d1,Wae,Z6o,eAo,$j,oAo,rAo,tAo,c1,aAo,Qae,nAo,sAo,Hae,lAo,iAo,Uae,dAo,cAo,vy,wxe,bd,f1,Jae,Ty,fAo,Yae,mAo,Axe,tr,Fy,gAo,vd,hAo,Kae,pAo,_Ao,Zae,uAo,bAo,vAo,Cy,TAo,ene,FAo,CAo,MAo,Yr,My,EAo,one,yAo,wAo,Td,AAo,rne,LAo,BAo,tne,xAo,kAo,RAo,ane,SAo,PAo,Ey,$Ao,Ve,yy,IAo,nne,jAo,DAo,Ja,NAo,sne,qAo,OAo,lne,GAo,XAo,ine,VAo,zAo,WAo,da,m1,dne,QAo,HAo,Ij,UAo,JAo,YAo,g1,cne,KAo,ZAo,jj,e0o,o0o,r0o,h1,fne,t0o,a0o,Dj,n0o,s0o,l0o,p1,mne,i0o,d0o,Nj,c0o,f0o,m0o,_1,gne,g0o,h0o,qj,p0o,_0o,u0o,u1,b0o,hne,v0o,T0o,pne,F0o,C0o,_ne,M0o,E0o,wy,Lxe,Fd,b1,une,Ay,y0o,bne,w0o,Bxe,ar,Ly,A0o,Cd,L0o,vne,B0o,x0o,Tne,k0o,R0o,S0o,By,P0o,Fne,$0o,I0o,j0o,Kr,xy,D0o,Cne,N0o,q0o,Md,O0o,Mne,G0o,X0o,Ene,V0o,z0o,W0o,yne,Q0o,H0o,ky,U0o,ze,Ry,J0o,wne,Y0o,K0o,Ya,Z0o,Ane,eLo,oLo,Lne,rLo,tLo,Bne,aLo,nLo,sLo,N,v1,xne,lLo,iLo,Oj,dLo,cLo,fLo,T1,kne,mLo,gLo,Gj,hLo,pLo,_Lo,F1,Rne,uLo,bLo,Xj,vLo,TLo,FLo,C1,Sne,CLo,MLo,Vj,ELo,yLo,wLo,M1,Pne,ALo,LLo,zj,BLo,xLo,kLo,E1,$ne,RLo,SLo,Wj,PLo,$Lo,ILo,y1,Ine,jLo,DLo,Qj,NLo,qLo,OLo,w1,jne,GLo,XLo,Hj,VLo,zLo,WLo,A1,Dne,QLo,HLo,Uj,ULo,JLo,YLo,L1,Nne,KLo,ZLo,Jj,e8o,o8o,r8o,B1,qne,t8o,a8o,Yj,n8o,s8o,l8o,x1,One,i8o,d8o,Kj,c8o,f8o,m8o,k1,Gne,g8o,h8o,Zj,p8o,_8o,u8o,R1,Xne,b8o,v8o,eD,T8o,F8o,C8o,S1,Vne,M8o,E8o,oD,y8o,w8o,A8o,P1,zne,L8o,B8o,rD,x8o,k8o,R8o,$1,Wne,S8o,P8o,tD,$8o,I8o,j8o,I1,Qne,D8o,N8o,aD,q8o,O8o,G8o,j1,Hne,X8o,V8o,nD,z8o,W8o,Q8o,D1,Une,H8o,U8o,sD,J8o,Y8o,K8o,N1,Jne,Z8o,e7o,lD,o7o,r7o,t7o,q1,Yne,a7o,n7o,iD,s7o,l7o,i7o,O1,Kne,d7o,c7o,dD,f7o,m7o,g7o,G1,Zne,h7o,p7o,cD,_7o,u7o,b7o,X1,ese,v7o,T7o,fD,F7o,C7o,M7o,V1,ose,E7o,y7o,mD,w7o,A7o,L7o,z1,rse,B7o,x7o,gD,k7o,R7o,S7o,W1,tse,P7o,$7o,hD,I7o,j7o,D7o,Q1,ase,N7o,q7o,pD,O7o,G7o,X7o,H1,nse,V7o,z7o,_D,W7o,Q7o,H7o,U1,sse,U7o,J7o,uD,Y7o,K7o,Z7o,J1,lse,eBo,oBo,bD,rBo,tBo,aBo,Y1,ise,nBo,sBo,vD,lBo,iBo,dBo,K1,cBo,dse,fBo,mBo,cse,gBo,hBo,fse,pBo,_Bo,Sy,xxe,Ed,Z1,mse,Py,uBo,gse,bBo,kxe,nr,$y,vBo,yd,TBo,hse,FBo,CBo,pse,MBo,EBo,yBo,Iy,wBo,_se,ABo,LBo,BBo,Zr,jy,xBo,use,kBo,RBo,wd,SBo,bse,PBo,$Bo,vse,IBo,jBo,DBo,Tse,NBo,qBo,Dy,OBo,We,Ny,GBo,Fse,XBo,VBo,Ka,zBo,Cse,WBo,QBo,Mse,HBo,UBo,Ese,JBo,YBo,KBo,R,eb,yse,ZBo,exo,TD,oxo,rxo,txo,ob,wse,axo,nxo,FD,sxo,lxo,ixo,rb,Ase,dxo,cxo,CD,fxo,mxo,gxo,tb,Lse,hxo,pxo,MD,_xo,uxo,bxo,ab,Bse,vxo,Txo,ED,Fxo,Cxo,Mxo,nb,xse,Exo,yxo,yD,wxo,Axo,Lxo,sb,kse,Bxo,xxo,wD,kxo,Rxo,Sxo,lb,Rse,Pxo,$xo,AD,Ixo,jxo,Dxo,ib,Sse,Nxo,qxo,LD,Oxo,Gxo,Xxo,db,Pse,Vxo,zxo,BD,Wxo,Qxo,Hxo,cb,$se,Uxo,Jxo,xD,Yxo,Kxo,Zxo,fb,Ise,eko,oko,kD,rko,tko,ako,mb,jse,nko,sko,RD,lko,iko,dko,gb,Dse,cko,fko,SD,mko,gko,hko,hb,Nse,pko,_ko,PD,uko,bko,vko,pb,qse,Tko,Fko,$D,Cko,Mko,Eko,_b,Ose,yko,wko,ID,Ako,Lko,Bko,ub,Gse,xko,kko,jD,Rko,Sko,Pko,bb,Xse,$ko,Iko,DD,jko,Dko,Nko,vb,Vse,qko,Oko,ND,Gko,Xko,Vko,Tb,zse,zko,Wko,qD,Qko,Hko,Uko,Fb,Wse,Jko,Yko,OD,Kko,Zko,eRo,Cb,Qse,oRo,rRo,GD,tRo,aRo,nRo,Mb,Hse,sRo,lRo,XD,iRo,dRo,cRo,Eb,Use,fRo,mRo,VD,gRo,hRo,pRo,yb,Jse,_Ro,uRo,zD,bRo,vRo,TRo,wb,Yse,FRo,CRo,WD,MRo,ERo,yRo,Ab,Kse,wRo,ARo,QD,LRo,BRo,xRo,Lb,Zse,kRo,RRo,HD,SRo,PRo,$Ro,Bb,ele,IRo,jRo,UD,DRo,NRo,qRo,xb,ole,ORo,GRo,JD,XRo,VRo,zRo,kb,rle,WRo,QRo,YD,HRo,URo,JRo,Rb,tle,YRo,KRo,KD,ZRo,eSo,oSo,Sb,ale,rSo,tSo,ZD,aSo,nSo,sSo,Pb,nle,lSo,iSo,eN,dSo,cSo,fSo,$b,sle,mSo,gSo,oN,hSo,pSo,_So,Ib,lle,uSo,bSo,rN,vSo,TSo,FSo,jb,ile,CSo,MSo,tN,ESo,ySo,wSo,Db,dle,ASo,LSo,aN,BSo,xSo,kSo,Nb,RSo,cle,SSo,PSo,fle,$So,ISo,mle,jSo,DSo,qy,Rxe,Ad,qb,gle,Oy,NSo,hle,qSo,Sxe,sr,Gy,OSo,Ld,GSo,ple,XSo,VSo,_le,zSo,WSo,QSo,Xy,HSo,ule,USo,JSo,YSo,et,Vy,KSo,ble,ZSo,ePo,Bd,oPo,vle,rPo,tPo,Tle,aPo,nPo,sPo,Fle,lPo,iPo,zy,dPo,Qe,Wy,cPo,Cle,fPo,mPo,Za,gPo,Mle,hPo,pPo,Ele,_Po,uPo,yle,bPo,vPo,TPo,wle,Ob,Ale,FPo,CPo,nN,MPo,EPo,yPo,Gb,wPo,Lle,APo,LPo,Ble,BPo,xPo,xle,kPo,RPo,Qy,Pxe,xd,Xb,kle,Hy,SPo,Rle,PPo,$xe,lr,Uy,$Po,kd,IPo,Sle,jPo,DPo,Ple,NPo,qPo,OPo,Jy,GPo,$le,XPo,VPo,zPo,ot,Yy,WPo,Ile,QPo,HPo,Rd,UPo,jle,JPo,YPo,Dle,KPo,ZPo,e$o,Nle,o$o,r$o,Ky,t$o,He,Zy,a$o,qle,n$o,s$o,en,l$o,Ole,i$o,d$o,Gle,c$o,f$o,Xle,m$o,g$o,h$o,Fe,Vb,Vle,p$o,_$o,sN,u$o,b$o,v$o,zb,zle,T$o,F$o,lN,C$o,M$o,E$o,Os,Wle,y$o,w$o,iN,A$o,L$o,dN,B$o,x$o,k$o,Wb,Qle,R$o,S$o,cN,P$o,$$o,I$o,fa,Hle,j$o,D$o,fN,N$o,q$o,mN,O$o,G$o,gN,X$o,V$o,z$o,Qb,Ule,W$o,Q$o,hN,H$o,U$o,J$o,Hb,Jle,Y$o,K$o,pN,Z$o,eIo,oIo,Ub,Yle,rIo,tIo,_N,aIo,nIo,sIo,Jb,Kle,lIo,iIo,uN,dIo,cIo,fIo,Yb,mIo,Zle,gIo,hIo,eie,pIo,_Io,oie,uIo,bIo,ew,Ixe,Sd,Kb,rie,ow,vIo,tie,TIo,jxe,ir,rw,FIo,Pd,CIo,aie,MIo,EIo,nie,yIo,wIo,AIo,tw,LIo,sie,BIo,xIo,kIo,rt,aw,RIo,lie,SIo,PIo,$d,$Io,iie,IIo,jIo,die,DIo,NIo,qIo,cie,OIo,GIo,nw,XIo,Ue,sw,VIo,fie,zIo,WIo,on,QIo,mie,HIo,UIo,gie,JIo,YIo,hie,KIo,ZIo,ejo,pie,Zb,_ie,ojo,rjo,bN,tjo,ajo,njo,ev,sjo,uie,ljo,ijo,bie,djo,cjo,vie,fjo,mjo,lw,Dxe,Id,ov,Tie,iw,gjo,Fie,hjo,Nxe,dr,dw,pjo,jd,_jo,Cie,ujo,bjo,Mie,vjo,Tjo,Fjo,cw,Cjo,Eie,Mjo,Ejo,yjo,tt,fw,wjo,yie,Ajo,Ljo,Dd,Bjo,wie,xjo,kjo,Aie,Rjo,Sjo,Pjo,Lie,$jo,Ijo,mw,jjo,Je,gw,Djo,Bie,Njo,qjo,rn,Ojo,xie,Gjo,Xjo,kie,Vjo,zjo,Rie,Wjo,Qjo,Hjo,xe,rv,Sie,Ujo,Jjo,vN,Yjo,Kjo,Zjo,tv,Pie,eDo,oDo,TN,rDo,tDo,aDo,av,$ie,nDo,sDo,FN,lDo,iDo,dDo,nv,Iie,cDo,fDo,CN,mDo,gDo,hDo,sv,jie,pDo,_Do,MN,uDo,bDo,vDo,lv,Die,TDo,FDo,EN,CDo,MDo,EDo,iv,Nie,yDo,wDo,yN,ADo,LDo,BDo,dv,qie,xDo,kDo,wN,RDo,SDo,PDo,cv,$Do,Oie,IDo,jDo,Gie,DDo,NDo,Xie,qDo,ODo,hw,qxe,Nd,fv,Vie,pw,GDo,zie,XDo,Oxe,cr,_w,VDo,qd,zDo,Wie,WDo,QDo,Qie,HDo,UDo,JDo,uw,YDo,Hie,KDo,ZDo,eNo,at,bw,oNo,Uie,rNo,tNo,Od,aNo,Jie,nNo,sNo,Yie,lNo,iNo,dNo,Kie,cNo,fNo,vw,mNo,Ye,Tw,gNo,Zie,hNo,pNo,tn,_No,ede,uNo,bNo,ode,vNo,TNo,rde,FNo,CNo,MNo,an,mv,tde,ENo,yNo,AN,wNo,ANo,LNo,gv,ade,BNo,xNo,LN,kNo,RNo,SNo,hv,nde,PNo,$No,BN,INo,jNo,DNo,pv,sde,NNo,qNo,xN,ONo,GNo,XNo,_v,VNo,lde,zNo,WNo,ide,QNo,HNo,dde,UNo,JNo,Fw,Gxe,Gd,uv,cde,Cw,YNo,fde,KNo,Xxe,fr,Mw,ZNo,Xd,eqo,mde,oqo,rqo,gde,tqo,aqo,nqo,Ew,sqo,hde,lqo,iqo,dqo,nt,yw,cqo,pde,fqo,mqo,Vd,gqo,_de,hqo,pqo,ude,_qo,uqo,bqo,bde,vqo,Tqo,ww,Fqo,Ke,Aw,Cqo,vde,Mqo,Eqo,nn,yqo,Tde,wqo,Aqo,Fde,Lqo,Bqo,Cde,xqo,kqo,Rqo,ke,bv,Mde,Sqo,Pqo,kN,$qo,Iqo,jqo,vv,Ede,Dqo,Nqo,RN,qqo,Oqo,Gqo,Tv,yde,Xqo,Vqo,SN,zqo,Wqo,Qqo,Fv,wde,Hqo,Uqo,PN,Jqo,Yqo,Kqo,Cv,Ade,Zqo,eOo,$N,oOo,rOo,tOo,Mv,Lde,aOo,nOo,IN,sOo,lOo,iOo,Ev,Bde,dOo,cOo,jN,fOo,mOo,gOo,yv,xde,hOo,pOo,DN,_Oo,uOo,bOo,wv,vOo,kde,TOo,FOo,Rde,COo,MOo,Sde,EOo,yOo,Lw,Vxe,zd,Av,Pde,Bw,wOo,$de,AOo,zxe,mr,xw,LOo,Wd,BOo,Ide,xOo,kOo,jde,ROo,SOo,POo,kw,$Oo,Dde,IOo,jOo,DOo,st,Rw,NOo,Nde,qOo,OOo,Qd,GOo,qde,XOo,VOo,Ode,zOo,WOo,QOo,Gde,HOo,UOo,Sw,JOo,Ze,Pw,YOo,Xde,KOo,ZOo,sn,eGo,Vde,oGo,rGo,zde,tGo,aGo,Wde,nGo,sGo,lGo,$w,Lv,Qde,iGo,dGo,NN,cGo,fGo,mGo,Bv,Hde,gGo,hGo,qN,pGo,_Go,uGo,xv,bGo,Ude,vGo,TGo,Jde,FGo,CGo,Yde,MGo,EGo,Iw,Wxe,Hd,kv,Kde,jw,yGo,Zde,wGo,Qxe,gr,Dw,AGo,Ud,LGo,ece,BGo,xGo,oce,kGo,RGo,SGo,Nw,PGo,rce,$Go,IGo,jGo,lt,qw,DGo,tce,NGo,qGo,Jd,OGo,ace,GGo,XGo,nce,VGo,zGo,WGo,sce,QGo,HGo,Ow,UGo,eo,Gw,JGo,lce,YGo,KGo,ln,ZGo,ice,eXo,oXo,dce,rXo,tXo,cce,aXo,nXo,sXo,dn,Rv,fce,lXo,iXo,ON,dXo,cXo,fXo,Sv,mce,mXo,gXo,GN,hXo,pXo,_Xo,Pv,gce,uXo,bXo,XN,vXo,TXo,FXo,$v,hce,CXo,MXo,VN,EXo,yXo,wXo,Iv,AXo,pce,LXo,BXo,_ce,xXo,kXo,uce,RXo,SXo,Xw,Hxe,Yd,jv,bce,Vw,PXo,vce,$Xo,Uxe,hr,zw,IXo,Kd,jXo,Tce,DXo,NXo,Fce,qXo,OXo,GXo,Ww,XXo,Cce,VXo,zXo,WXo,it,Qw,QXo,Mce,HXo,UXo,Zd,JXo,Ece,YXo,KXo,yce,ZXo,eVo,oVo,wce,rVo,tVo,Hw,aVo,oo,Uw,nVo,Ace,sVo,lVo,cn,iVo,Lce,dVo,cVo,Bce,fVo,mVo,xce,gVo,hVo,pVo,ec,Dv,kce,_Vo,uVo,zN,bVo,vVo,TVo,Nv,Rce,FVo,CVo,WN,MVo,EVo,yVo,qv,Sce,wVo,AVo,QN,LVo,BVo,xVo,Ov,kVo,Pce,RVo,SVo,$ce,PVo,$Vo,Ice,IVo,jVo,Jw,Jxe,oc,Gv,jce,Yw,DVo,Dce,NVo,Yxe,pr,Kw,qVo,rc,OVo,Nce,GVo,XVo,qce,VVo,zVo,WVo,Zw,QVo,Oce,HVo,UVo,JVo,dt,e6,YVo,Gce,KVo,ZVo,tc,ezo,Xce,ozo,rzo,Vce,tzo,azo,nzo,zce,szo,lzo,o6,izo,ro,r6,dzo,Wce,czo,fzo,fn,mzo,Qce,gzo,hzo,Hce,pzo,_zo,Uce,uzo,bzo,vzo,Jce,Xv,Yce,Tzo,Fzo,HN,Czo,Mzo,Ezo,Vv,yzo,Kce,wzo,Azo,Zce,Lzo,Bzo,efe,xzo,kzo,t6,Kxe,ac,zv,ofe,a6,Rzo,rfe,Szo,Zxe,_r,n6,Pzo,nc,$zo,tfe,Izo,jzo,afe,Dzo,Nzo,qzo,s6,Ozo,nfe,Gzo,Xzo,Vzo,ct,l6,zzo,sfe,Wzo,Qzo,sc,Hzo,lfe,Uzo,Jzo,ife,Yzo,Kzo,Zzo,dfe,eWo,oWo,i6,rWo,to,d6,tWo,cfe,aWo,nWo,mn,sWo,ffe,lWo,iWo,mfe,dWo,cWo,gfe,fWo,mWo,gWo,hfe,Wv,pfe,hWo,pWo,UN,_Wo,uWo,bWo,Qv,vWo,_fe,TWo,FWo,ufe,CWo,MWo,bfe,EWo,yWo,c6,eke,lc,Hv,vfe,f6,wWo,Tfe,AWo,oke,ur,m6,LWo,ic,BWo,Ffe,xWo,kWo,Cfe,RWo,SWo,PWo,g6,$Wo,Mfe,IWo,jWo,DWo,ft,h6,NWo,Efe,qWo,OWo,dc,GWo,yfe,XWo,VWo,wfe,zWo,WWo,QWo,Afe,HWo,UWo,p6,JWo,ao,_6,YWo,Lfe,KWo,ZWo,gn,eQo,Bfe,oQo,rQo,xfe,tQo,aQo,kfe,nQo,sQo,lQo,u6,Uv,Rfe,iQo,dQo,JN,cQo,fQo,mQo,Jv,Sfe,gQo,hQo,YN,pQo,_Qo,uQo,Yv,bQo,Pfe,vQo,TQo,$fe,FQo,CQo,Ife,MQo,EQo,b6,rke,cc,Kv,jfe,v6,yQo,Dfe,wQo,tke,br,T6,AQo,fc,LQo,Nfe,BQo,xQo,qfe,kQo,RQo,SQo,F6,PQo,Ofe,$Qo,IQo,jQo,mt,C6,DQo,Gfe,NQo,qQo,mc,OQo,Xfe,GQo,XQo,Vfe,VQo,zQo,WQo,zfe,QQo,HQo,M6,UQo,no,E6,JQo,Wfe,YQo,KQo,hn,ZQo,Qfe,eHo,oHo,Hfe,rHo,tHo,Ufe,aHo,nHo,sHo,Jfe,Zv,Yfe,lHo,iHo,KN,dHo,cHo,fHo,eT,mHo,Kfe,gHo,hHo,Zfe,pHo,_Ho,eme,uHo,bHo,y6,ake,gc,oT,ome,w6,vHo,rme,THo,nke,vr,A6,FHo,hc,CHo,tme,MHo,EHo,ame,yHo,wHo,AHo,L6,LHo,nme,BHo,xHo,kHo,gt,B6,RHo,sme,SHo,PHo,pc,$Ho,lme,IHo,jHo,ime,DHo,NHo,qHo,dme,OHo,GHo,x6,XHo,ho,k6,VHo,cme,zHo,WHo,pn,QHo,fme,HHo,UHo,mme,JHo,YHo,gme,KHo,ZHo,eUo,B,rT,hme,oUo,rUo,ZN,tUo,aUo,nUo,tT,pme,sUo,lUo,eq,iUo,dUo,cUo,aT,_me,fUo,mUo,oq,gUo,hUo,pUo,nT,ume,_Uo,uUo,rq,bUo,vUo,TUo,sT,bme,FUo,CUo,tq,MUo,EUo,yUo,lT,vme,wUo,AUo,aq,LUo,BUo,xUo,iT,Tme,kUo,RUo,nq,SUo,PUo,$Uo,dT,Fme,IUo,jUo,sq,DUo,NUo,qUo,cT,Cme,OUo,GUo,lq,XUo,VUo,zUo,fT,Mme,WUo,QUo,iq,HUo,UUo,JUo,mT,Eme,YUo,KUo,dq,ZUo,eJo,oJo,gT,yme,rJo,tJo,cq,aJo,nJo,sJo,hT,wme,lJo,iJo,fq,dJo,cJo,fJo,pT,Ame,mJo,gJo,mq,hJo,pJo,_Jo,_T,Lme,uJo,bJo,gq,vJo,TJo,FJo,uT,Bme,CJo,MJo,hq,EJo,yJo,wJo,Gs,xme,AJo,LJo,pq,BJo,xJo,_q,kJo,RJo,SJo,bT,kme,PJo,$Jo,uq,IJo,jJo,DJo,vT,Rme,NJo,qJo,bq,OJo,GJo,XJo,TT,Sme,VJo,zJo,vq,WJo,QJo,HJo,FT,Pme,UJo,JJo,Tq,YJo,KJo,ZJo,CT,$me,eYo,oYo,Fq,rYo,tYo,aYo,MT,Ime,nYo,sYo,Cq,lYo,iYo,dYo,ET,jme,cYo,fYo,Mq,mYo,gYo,hYo,yT,Dme,pYo,_Yo,Eq,uYo,bYo,vYo,wT,Nme,TYo,FYo,yq,CYo,MYo,EYo,AT,qme,yYo,wYo,wq,AYo,LYo,BYo,LT,Ome,xYo,kYo,Aq,RYo,SYo,PYo,BT,Gme,$Yo,IYo,Lq,jYo,DYo,NYo,xT,Xme,qYo,OYo,Bq,GYo,XYo,VYo,kT,Vme,zYo,WYo,xq,QYo,HYo,UYo,RT,zme,JYo,YYo,kq,KYo,ZYo,eKo,ST,Wme,oKo,rKo,Rq,tKo,aKo,nKo,PT,Qme,sKo,lKo,Sq,iKo,dKo,cKo,$T,Hme,fKo,mKo,Pq,gKo,hKo,pKo,IT,Ume,_Ko,uKo,$q,bKo,vKo,TKo,jT,Jme,FKo,CKo,Iq,MKo,EKo,yKo,DT,Yme,wKo,AKo,jq,LKo,BKo,xKo,NT,Kme,kKo,RKo,Dq,SKo,PKo,$Ko,qT,Zme,IKo,jKo,Nq,DKo,NKo,qKo,OT,ege,OKo,GKo,qq,XKo,VKo,zKo,GT,oge,WKo,QKo,Oq,HKo,UKo,JKo,rge,YKo,KKo,R6,ske,_c,XT,tge,S6,ZKo,age,eZo,lke,Tr,P6,oZo,uc,rZo,nge,tZo,aZo,sge,nZo,sZo,lZo,$6,iZo,lge,dZo,cZo,fZo,ht,I6,mZo,ige,gZo,hZo,bc,pZo,dge,_Zo,uZo,cge,bZo,vZo,TZo,fge,FZo,CZo,j6,MZo,po,D6,EZo,mge,yZo,wZo,_n,AZo,gge,LZo,BZo,hge,xZo,kZo,pge,RZo,SZo,PZo,H,VT,_ge,$Zo,IZo,Gq,jZo,DZo,NZo,zT,uge,qZo,OZo,Xq,GZo,XZo,VZo,WT,bge,zZo,WZo,Vq,QZo,HZo,UZo,QT,vge,JZo,YZo,zq,KZo,ZZo,eer,HT,Tge,oer,rer,Wq,ter,aer,ner,UT,Fge,ser,ler,Qq,ier,der,cer,JT,Cge,fer,mer,Hq,ger,her,per,YT,Mge,_er,uer,Uq,ber,ver,Ter,KT,Ege,Fer,Cer,Jq,Mer,Eer,yer,ZT,yge,wer,Aer,Yq,Ler,Ber,xer,eF,wge,ker,Rer,Kq,Ser,Per,$er,oF,Age,Ier,jer,Zq,Der,Ner,qer,rF,Lge,Oer,Ger,eO,Xer,Ver,zer,tF,Bge,Wer,Qer,oO,Her,Uer,Jer,aF,xge,Yer,Ker,rO,Zer,eor,oor,nF,kge,ror,tor,tO,aor,nor,sor,sF,Rge,lor,ior,aO,dor,cor,mor,lF,Sge,gor,hor,nO,por,_or,uor,iF,Pge,bor,vor,sO,Tor,For,Cor,dF,$ge,Mor,Eor,lO,yor,wor,Aor,cF,Ige,Lor,Bor,iO,xor,kor,Ror,fF,jge,Sor,Por,dO,$or,Ior,jor,Dge,Dor,Nor,N6,ike,vc,mF,Nge,q6,qor,qge,Oor,dke,Fr,O6,Gor,Tc,Xor,Oge,Vor,zor,Gge,Wor,Qor,Hor,G6,Uor,Xge,Jor,Yor,Kor,pt,X6,Zor,Vge,err,orr,Fc,rrr,zge,trr,arr,Wge,nrr,srr,lrr,Qge,irr,drr,V6,crr,_o,z6,frr,Hge,mrr,grr,un,hrr,Uge,prr,_rr,Jge,urr,brr,Yge,vrr,Trr,Frr,pe,gF,Kge,Crr,Mrr,cO,Err,yrr,wrr,hF,Zge,Arr,Lrr,fO,Brr,xrr,krr,pF,ehe,Rrr,Srr,mO,Prr,$rr,Irr,_F,ohe,jrr,Drr,gO,Nrr,qrr,Orr,uF,rhe,Grr,Xrr,hO,Vrr,zrr,Wrr,bF,the,Qrr,Hrr,pO,Urr,Jrr,Yrr,vF,ahe,Krr,Zrr,_O,etr,otr,rtr,TF,nhe,ttr,atr,uO,ntr,str,ltr,FF,she,itr,dtr,bO,ctr,ftr,mtr,CF,lhe,gtr,htr,vO,ptr,_tr,utr,ihe,btr,vtr,W6,cke,Cc,MF,dhe,Q6,Ttr,che,Ftr,fke,Cr,H6,Ctr,Mc,Mtr,fhe,Etr,ytr,mhe,wtr,Atr,Ltr,U6,Btr,ghe,xtr,ktr,Rtr,_t,J6,Str,hhe,Ptr,$tr,Ec,Itr,phe,jtr,Dtr,_he,Ntr,qtr,Otr,uhe,Gtr,Xtr,Y6,Vtr,uo,K6,ztr,bhe,Wtr,Qtr,bn,Htr,vhe,Utr,Jtr,The,Ytr,Ktr,Fhe,Ztr,ear,oar,Z6,EF,Che,rar,tar,TO,aar,nar,sar,yF,Mhe,lar,iar,FO,dar,car,far,Ehe,mar,gar,eA,mke,yc,wF,yhe,oA,har,whe,par,gke,Mr,rA,_ar,wc,uar,Ahe,bar,Tar,Lhe,Far,Car,Mar,tA,Ear,Bhe,yar,war,Aar,ut,aA,Lar,xhe,Bar,xar,Ac,kar,khe,Rar,Sar,Rhe,Par,$ar,Iar,She,jar,Dar,nA,Nar,bo,sA,qar,Phe,Oar,Gar,vn,Xar,$he,Var,zar,Ihe,War,Qar,jhe,Har,Uar,Jar,Y,AF,Dhe,Yar,Kar,CO,Zar,enr,onr,LF,Nhe,rnr,tnr,MO,anr,nnr,snr,BF,qhe,lnr,inr,EO,dnr,cnr,fnr,xF,Ohe,mnr,gnr,yO,hnr,pnr,_nr,kF,Ghe,unr,bnr,wO,vnr,Tnr,Fnr,RF,Xhe,Cnr,Mnr,AO,Enr,ynr,wnr,SF,Vhe,Anr,Lnr,LO,Bnr,xnr,knr,PF,zhe,Rnr,Snr,BO,Pnr,$nr,Inr,$F,Whe,jnr,Dnr,xO,Nnr,qnr,Onr,IF,Qhe,Gnr,Xnr,kO,Vnr,znr,Wnr,jF,Hhe,Qnr,Hnr,RO,Unr,Jnr,Ynr,DF,Uhe,Knr,Znr,SO,esr,osr,rsr,NF,Jhe,tsr,asr,PO,nsr,ssr,lsr,qF,Yhe,isr,dsr,$O,csr,fsr,msr,OF,Khe,gsr,hsr,IO,psr,_sr,usr,GF,Zhe,bsr,vsr,jO,Tsr,Fsr,Csr,XF,epe,Msr,Esr,DO,ysr,wsr,Asr,VF,ope,Lsr,Bsr,NO,xsr,ksr,Rsr,zF,rpe,Ssr,Psr,qO,$sr,Isr,jsr,WF,tpe,Dsr,Nsr,OO,qsr,Osr,Gsr,ape,Xsr,Vsr,lA,hke,Lc,QF,npe,iA,zsr,spe,Wsr,pke,Er,dA,Qsr,Bc,Hsr,lpe,Usr,Jsr,ipe,Ysr,Ksr,Zsr,cA,elr,dpe,olr,rlr,tlr,bt,fA,alr,cpe,nlr,slr,xc,llr,fpe,ilr,dlr,mpe,clr,flr,mlr,gpe,glr,hlr,mA,plr,vo,gA,_lr,hpe,ulr,blr,Tn,vlr,ppe,Tlr,Flr,_pe,Clr,Mlr,upe,Elr,ylr,wlr,_e,HF,bpe,Alr,Llr,GO,Blr,xlr,klr,UF,vpe,Rlr,Slr,XO,Plr,$lr,Ilr,JF,Tpe,jlr,Dlr,VO,Nlr,qlr,Olr,YF,Fpe,Glr,Xlr,zO,Vlr,zlr,Wlr,KF,Cpe,Qlr,Hlr,WO,Ulr,Jlr,Ylr,ZF,Mpe,Klr,Zlr,QO,eir,oir,rir,e9,Epe,tir,air,HO,nir,sir,lir,o9,ype,iir,dir,UO,cir,fir,mir,r9,wpe,gir,hir,JO,pir,_ir,uir,t9,Ape,bir,vir,YO,Tir,Fir,Cir,Lpe,Mir,Eir,hA,_ke,kc,a9,Bpe,pA,yir,xpe,wir,uke,yr,_A,Air,Rc,Lir,kpe,Bir,xir,Rpe,kir,Rir,Sir,uA,Pir,Spe,$ir,Iir,jir,vt,bA,Dir,Ppe,Nir,qir,Sc,Oir,$pe,Gir,Xir,Ipe,Vir,zir,Wir,jpe,Qir,Hir,vA,Uir,To,TA,Jir,Dpe,Yir,Kir,Fn,Zir,Npe,edr,odr,qpe,rdr,tdr,Ope,adr,ndr,sdr,V,n9,Gpe,ldr,idr,KO,ddr,cdr,fdr,s9,Xpe,mdr,gdr,ZO,hdr,pdr,_dr,l9,Vpe,udr,bdr,eG,vdr,Tdr,Fdr,i9,zpe,Cdr,Mdr,oG,Edr,ydr,wdr,d9,Wpe,Adr,Ldr,rG,Bdr,xdr,kdr,c9,Qpe,Rdr,Sdr,tG,Pdr,$dr,Idr,f9,Hpe,jdr,Ddr,aG,Ndr,qdr,Odr,m9,Upe,Gdr,Xdr,nG,Vdr,zdr,Wdr,g9,Jpe,Qdr,Hdr,sG,Udr,Jdr,Ydr,h9,Ype,Kdr,Zdr,lG,ecr,ocr,rcr,p9,Kpe,tcr,acr,iG,ncr,scr,lcr,_9,Zpe,icr,dcr,dG,ccr,fcr,mcr,u9,e_e,gcr,hcr,cG,pcr,_cr,ucr,b9,o_e,bcr,vcr,fG,Tcr,Fcr,Ccr,v9,r_e,Mcr,Ecr,mG,ycr,wcr,Acr,T9,t_e,Lcr,Bcr,gG,xcr,kcr,Rcr,F9,a_e,Scr,Pcr,hG,$cr,Icr,jcr,C9,n_e,Dcr,Ncr,pG,qcr,Ocr,Gcr,M9,s_e,Xcr,Vcr,_G,zcr,Wcr,Qcr,E9,l_e,Hcr,Ucr,uG,Jcr,Ycr,Kcr,y9,i_e,Zcr,efr,bG,ofr,rfr,tfr,w9,d_e,afr,nfr,vG,sfr,lfr,ifr,A9,c_e,dfr,cfr,TG,ffr,mfr,gfr,L9,f_e,hfr,pfr,FG,_fr,ufr,bfr,B9,m_e,vfr,Tfr,CG,Ffr,Cfr,Mfr,g_e,Efr,yfr,FA,bke,Pc,x9,h_e,CA,wfr,p_e,Afr,vke,wr,MA,Lfr,$c,Bfr,__e,xfr,kfr,u_e,Rfr,Sfr,Pfr,EA,$fr,b_e,Ifr,jfr,Dfr,Tt,yA,Nfr,v_e,qfr,Ofr,Ic,Gfr,T_e,Xfr,Vfr,F_e,zfr,Wfr,Qfr,C_e,Hfr,Ufr,wA,Jfr,Fo,AA,Yfr,M_e,Kfr,Zfr,Cn,emr,E_e,omr,rmr,y_e,tmr,amr,w_e,nmr,smr,lmr,te,k9,A_e,imr,dmr,MG,cmr,fmr,mmr,R9,L_e,gmr,hmr,EG,pmr,_mr,umr,S9,B_e,bmr,vmr,yG,Tmr,Fmr,Cmr,P9,x_e,Mmr,Emr,wG,ymr,wmr,Amr,$9,k_e,Lmr,Bmr,AG,xmr,kmr,Rmr,I9,R_e,Smr,Pmr,LG,$mr,Imr,jmr,j9,S_e,Dmr,Nmr,BG,qmr,Omr,Gmr,D9,P_e,Xmr,Vmr,xG,zmr,Wmr,Qmr,N9,$_e,Hmr,Umr,kG,Jmr,Ymr,Kmr,q9,I_e,Zmr,egr,RG,ogr,rgr,tgr,O9,j_e,agr,ngr,SG,sgr,lgr,igr,G9,D_e,dgr,cgr,PG,fgr,mgr,ggr,X9,N_e,hgr,pgr,$G,_gr,ugr,bgr,V9,q_e,vgr,Tgr,IG,Fgr,Cgr,Mgr,z9,O_e,Egr,ygr,jG,wgr,Agr,Lgr,W9,G_e,Bgr,xgr,DG,kgr,Rgr,Sgr,Q9,X_e,Pgr,$gr,NG,Igr,jgr,Dgr,V_e,Ngr,qgr,LA,Tke,jc,H9,z_e,BA,Ogr,W_e,Ggr,Fke,Ar,xA,Xgr,Dc,Vgr,Q_e,zgr,Wgr,H_e,Qgr,Hgr,Ugr,kA,Jgr,U_e,Ygr,Kgr,Zgr,Ft,RA,ehr,J_e,ohr,rhr,Nc,thr,Y_e,ahr,nhr,K_e,shr,lhr,ihr,Z_e,dhr,chr,SA,fhr,Co,PA,mhr,eue,ghr,hhr,Mn,phr,oue,_hr,uhr,rue,bhr,vhr,tue,Thr,Fhr,Chr,aue,U9,nue,Mhr,Ehr,qG,yhr,whr,Ahr,sue,Lhr,Bhr,$A,Cke,qc,J9,lue,IA,xhr,iue,khr,Mke,Lr,jA,Rhr,Oc,Shr,due,Phr,$hr,cue,Ihr,jhr,Dhr,DA,Nhr,fue,qhr,Ohr,Ghr,Ct,NA,Xhr,mue,Vhr,zhr,Gc,Whr,gue,Qhr,Hhr,hue,Uhr,Jhr,Yhr,pue,Khr,Zhr,qA,epr,Mo,OA,opr,_ue,rpr,tpr,En,apr,uue,npr,spr,bue,lpr,ipr,vue,dpr,cpr,fpr,K,Y9,Tue,mpr,gpr,OG,hpr,ppr,_pr,K9,Fue,upr,bpr,GG,vpr,Tpr,Fpr,Z9,Cue,Cpr,Mpr,XG,Epr,ypr,wpr,eC,Mue,Apr,Lpr,VG,Bpr,xpr,kpr,oC,Eue,Rpr,Spr,zG,Ppr,$pr,Ipr,rC,yue,jpr,Dpr,WG,Npr,qpr,Opr,tC,wue,Gpr,Xpr,QG,Vpr,zpr,Wpr,aC,Aue,Qpr,Hpr,HG,Upr,Jpr,Ypr,nC,Lue,Kpr,Zpr,UG,e_r,o_r,r_r,sC,Bue,t_r,a_r,JG,n_r,s_r,l_r,lC,xue,i_r,d_r,YG,c_r,f_r,m_r,iC,kue,g_r,h_r,KG,p_r,__r,u_r,dC,Rue,b_r,v_r,ZG,T_r,F_r,C_r,cC,Sue,M_r,E_r,eX,y_r,w_r,A_r,fC,Pue,L_r,B_r,oX,x_r,k_r,R_r,mC,$ue,S_r,P_r,rX,$_r,I_r,j_r,gC,Iue,D_r,N_r,tX,q_r,O_r,G_r,hC,jue,X_r,V_r,aX,z_r,W_r,Q_r,pC,Due,H_r,U_r,nX,J_r,Y_r,K_r,_C,Nue,Z_r,eur,sX,our,rur,tur,que,aur,nur,GA,Eke,Xc,uC,Oue,XA,sur,Gue,lur,yke,Br,VA,iur,Vc,dur,Xue,cur,fur,Vue,mur,gur,hur,zA,pur,zue,_ur,uur,bur,Mt,WA,vur,Wue,Tur,Fur,zc,Cur,Que,Mur,Eur,Hue,yur,wur,Aur,Uue,Lur,Bur,QA,xur,Eo,HA,kur,Jue,Rur,Sur,yn,Pur,Yue,$ur,Iur,Kue,jur,Dur,Zue,Nur,qur,Our,Z,bC,e5e,Gur,Xur,lX,Vur,zur,Wur,vC,o5e,Qur,Hur,iX,Uur,Jur,Yur,TC,r5e,Kur,Zur,dX,e5r,o5r,r5r,FC,t5e,t5r,a5r,cX,n5r,s5r,l5r,CC,a5e,i5r,d5r,fX,c5r,f5r,m5r,MC,n5e,g5r,h5r,mX,p5r,_5r,u5r,EC,s5e,b5r,v5r,gX,T5r,F5r,C5r,yC,l5e,M5r,E5r,hX,y5r,w5r,A5r,wC,i5e,L5r,B5r,pX,x5r,k5r,R5r,AC,d5e,S5r,P5r,_X,$5r,I5r,j5r,LC,c5e,D5r,N5r,uX,q5r,O5r,G5r,BC,f5e,X5r,V5r,bX,z5r,W5r,Q5r,xC,m5e,H5r,U5r,vX,J5r,Y5r,K5r,kC,g5e,Z5r,e2r,TX,o2r,r2r,t2r,RC,h5e,a2r,n2r,FX,s2r,l2r,i2r,SC,p5e,d2r,c2r,CX,f2r,m2r,g2r,PC,_5e,h2r,p2r,MX,_2r,u2r,b2r,$C,u5e,v2r,T2r,EX,F2r,C2r,M2r,IC,b5e,E2r,y2r,yX,w2r,A2r,L2r,v5e,B2r,x2r,UA,wke,Wc,jC,T5e,JA,k2r,F5e,R2r,Ake,xr,YA,S2r,Qc,P2r,C5e,$2r,I2r,M5e,j2r,D2r,N2r,KA,q2r,E5e,O2r,G2r,X2r,Et,ZA,V2r,y5e,z2r,W2r,Hc,Q2r,w5e,H2r,U2r,A5e,J2r,Y2r,K2r,L5e,Z2r,e1r,e0,o1r,yo,o0,r1r,B5e,t1r,a1r,wn,n1r,x5e,s1r,l1r,k5e,i1r,d1r,R5e,c1r,f1r,m1r,S5e,DC,P5e,g1r,h1r,wX,p1r,_1r,u1r,$5e,b1r,v1r,r0,Lke,Uc,NC,I5e,t0,T1r,j5e,F1r,Bke,kr,a0,C1r,Jc,M1r,D5e,E1r,y1r,N5e,w1r,A1r,L1r,n0,B1r,q5e,x1r,k1r,R1r,yt,s0,S1r,O5e,P1r,$1r,Yc,I1r,G5e,j1r,D1r,X5e,N1r,q1r,O1r,V5e,G1r,X1r,l0,V1r,wo,i0,z1r,z5e,W1r,Q1r,An,H1r,W5e,U1r,J1r,Q5e,Y1r,K1r,H5e,Z1r,ebr,obr,U5e,qC,J5e,rbr,tbr,AX,abr,nbr,sbr,Y5e,lbr,ibr,d0,xke,Kc,OC,K5e,c0,dbr,Z5e,cbr,kke,Rr,f0,fbr,Zc,mbr,e2e,gbr,hbr,o2e,pbr,_br,ubr,m0,bbr,r2e,vbr,Tbr,Fbr,wt,g0,Cbr,t2e,Mbr,Ebr,ef,ybr,a2e,wbr,Abr,n2e,Lbr,Bbr,xbr,s2e,kbr,Rbr,h0,Sbr,Ao,p0,Pbr,l2e,$br,Ibr,Ln,jbr,i2e,Dbr,Nbr,d2e,qbr,Obr,c2e,Gbr,Xbr,Vbr,z,GC,f2e,zbr,Wbr,LX,Qbr,Hbr,Ubr,XC,m2e,Jbr,Ybr,BX,Kbr,Zbr,evr,VC,g2e,ovr,rvr,xX,tvr,avr,nvr,zC,h2e,svr,lvr,kX,ivr,dvr,cvr,WC,p2e,fvr,mvr,RX,gvr,hvr,pvr,QC,_2e,_vr,uvr,SX,bvr,vvr,Tvr,HC,u2e,Fvr,Cvr,PX,Mvr,Evr,yvr,UC,b2e,wvr,Avr,$X,Lvr,Bvr,xvr,JC,v2e,kvr,Rvr,IX,Svr,Pvr,$vr,YC,T2e,Ivr,jvr,jX,Dvr,Nvr,qvr,KC,F2e,Ovr,Gvr,DX,Xvr,Vvr,zvr,ZC,C2e,Wvr,Qvr,NX,Hvr,Uvr,Jvr,eM,M2e,Yvr,Kvr,qX,Zvr,eTr,oTr,oM,E2e,rTr,tTr,OX,aTr,nTr,sTr,rM,y2e,lTr,iTr,GX,dTr,cTr,fTr,tM,w2e,mTr,gTr,XX,hTr,pTr,_Tr,aM,A2e,uTr,bTr,VX,vTr,TTr,FTr,nM,L2e,CTr,MTr,zX,ETr,yTr,wTr,sM,B2e,ATr,LTr,WX,BTr,xTr,kTr,lM,x2e,RTr,STr,QX,PTr,$Tr,ITr,iM,k2e,jTr,DTr,HX,NTr,qTr,OTr,dM,R2e,GTr,XTr,UX,VTr,zTr,WTr,cM,S2e,QTr,HTr,JX,UTr,JTr,YTr,fM,P2e,KTr,ZTr,YX,eFr,oFr,rFr,mM,$2e,tFr,aFr,KX,nFr,sFr,lFr,I2e,iFr,dFr,_0,Rke,of,gM,j2e,u0,cFr,D2e,fFr,Ske,Sr,b0,mFr,rf,gFr,N2e,hFr,pFr,q2e,_Fr,uFr,bFr,v0,vFr,O2e,TFr,FFr,CFr,At,T0,MFr,G2e,EFr,yFr,tf,wFr,X2e,AFr,LFr,V2e,BFr,xFr,kFr,z2e,RFr,SFr,F0,PFr,Lo,C0,$Fr,W2e,IFr,jFr,Bn,DFr,Q2e,NFr,qFr,H2e,OFr,GFr,U2e,XFr,VFr,zFr,xn,hM,J2e,WFr,QFr,ZX,HFr,UFr,JFr,pM,Y2e,YFr,KFr,eV,ZFr,e9r,o9r,_M,K2e,r9r,t9r,oV,a9r,n9r,s9r,uM,Z2e,l9r,i9r,rV,d9r,c9r,f9r,e1e,m9r,g9r,M0,Pke,af,bM,o1e,E0,h9r,r1e,p9r,$ke,Pr,y0,_9r,nf,u9r,t1e,b9r,v9r,a1e,T9r,F9r,C9r,w0,M9r,n1e,E9r,y9r,w9r,Lt,A0,A9r,s1e,L9r,B9r,sf,x9r,l1e,k9r,R9r,i1e,S9r,P9r,$9r,d1e,I9r,j9r,L0,D9r,Bo,B0,N9r,c1e,q9r,O9r,kn,G9r,f1e,X9r,V9r,m1e,z9r,W9r,g1e,Q9r,H9r,U9r,ce,vM,h1e,J9r,Y9r,tV,K9r,Z9r,eCr,TM,p1e,oCr,rCr,aV,tCr,aCr,nCr,FM,_1e,sCr,lCr,nV,iCr,dCr,cCr,CM,u1e,fCr,mCr,sV,gCr,hCr,pCr,MM,b1e,_Cr,uCr,lV,bCr,vCr,TCr,EM,v1e,FCr,CCr,iV,MCr,ECr,yCr,yM,T1e,wCr,ACr,dV,LCr,BCr,xCr,wM,F1e,kCr,RCr,cV,SCr,PCr,$Cr,AM,C1e,ICr,jCr,fV,DCr,NCr,qCr,LM,M1e,OCr,GCr,mV,XCr,VCr,zCr,BM,E1e,WCr,QCr,gV,HCr,UCr,JCr,xM,y1e,YCr,KCr,hV,ZCr,eMr,oMr,w1e,rMr,tMr,x0,Ike,lf,kM,A1e,k0,aMr,L1e,nMr,jke,$r,R0,sMr,df,lMr,B1e,iMr,dMr,x1e,cMr,fMr,mMr,S0,gMr,k1e,hMr,pMr,_Mr,Bt,P0,uMr,R1e,bMr,vMr,cf,TMr,S1e,FMr,CMr,P1e,MMr,EMr,yMr,$1e,wMr,AMr,$0,LMr,xo,I0,BMr,I1e,xMr,kMr,Rn,RMr,j1e,SMr,PMr,D1e,$Mr,IMr,N1e,jMr,DMr,NMr,ue,RM,q1e,qMr,OMr,pV,GMr,XMr,VMr,SM,O1e,zMr,WMr,_V,QMr,HMr,UMr,PM,G1e,JMr,YMr,uV,KMr,ZMr,e4r,$M,X1e,o4r,r4r,bV,t4r,a4r,n4r,IM,V1e,s4r,l4r,vV,i4r,d4r,c4r,jM,z1e,f4r,m4r,TV,g4r,h4r,p4r,DM,W1e,_4r,u4r,FV,b4r,v4r,T4r,NM,Q1e,F4r,C4r,CV,M4r,E4r,y4r,qM,H1e,w4r,A4r,MV,L4r,B4r,x4r,OM,U1e,k4r,R4r,EV,S4r,P4r,$4r,J1e,I4r,j4r,j0,Dke,ff,GM,Y1e,D0,D4r,K1e,N4r,Nke,Ir,N0,q4r,mf,O4r,Z1e,G4r,X4r,ebe,V4r,z4r,W4r,q0,Q4r,obe,H4r,U4r,J4r,xt,O0,Y4r,rbe,K4r,Z4r,gf,eEr,tbe,oEr,rEr,abe,tEr,aEr,nEr,nbe,sEr,lEr,G0,iEr,ko,X0,dEr,sbe,cEr,fEr,Sn,mEr,lbe,gEr,hEr,ibe,pEr,_Er,dbe,uEr,bEr,vEr,Ce,XM,cbe,TEr,FEr,yV,CEr,MEr,EEr,VM,fbe,yEr,wEr,wV,AEr,LEr,BEr,zM,mbe,xEr,kEr,AV,REr,SEr,PEr,WM,gbe,$Er,IEr,LV,jEr,DEr,NEr,QM,hbe,qEr,OEr,BV,GEr,XEr,VEr,HM,pbe,zEr,WEr,xV,QEr,HEr,UEr,UM,_be,JEr,YEr,kV,KEr,ZEr,e3r,JM,ube,o3r,r3r,RV,t3r,a3r,n3r,YM,bbe,s3r,l3r,SV,i3r,d3r,c3r,vbe,f3r,m3r,V0,qke,hf,KM,Tbe,z0,g3r,Fbe,h3r,Oke,jr,W0,p3r,pf,_3r,Cbe,u3r,b3r,Mbe,v3r,T3r,F3r,Q0,C3r,Ebe,M3r,E3r,y3r,kt,H0,w3r,ybe,A3r,L3r,_f,B3r,wbe,x3r,k3r,Abe,R3r,S3r,P3r,Lbe,$3r,I3r,U0,j3r,Ro,J0,D3r,Bbe,N3r,q3r,Pn,O3r,xbe,G3r,X3r,kbe,V3r,z3r,Rbe,W3r,Q3r,H3r,be,ZM,Sbe,U3r,J3r,PV,Y3r,K3r,Z3r,e4,Pbe,eyr,oyr,$V,ryr,tyr,ayr,o4,$be,nyr,syr,IV,lyr,iyr,dyr,r4,Ibe,cyr,fyr,jV,myr,gyr,hyr,t4,jbe,pyr,_yr,DV,uyr,byr,vyr,a4,Dbe,Tyr,Fyr,NV,Cyr,Myr,Eyr,n4,Nbe,yyr,wyr,qV,Ayr,Lyr,Byr,s4,qbe,xyr,kyr,OV,Ryr,Syr,Pyr,l4,Obe,$yr,Iyr,GV,jyr,Dyr,Nyr,i4,Gbe,qyr,Oyr,XV,Gyr,Xyr,Vyr,Xbe,zyr,Wyr,Y0,Gke,uf,d4,Vbe,K0,Qyr,zbe,Hyr,Xke,Dr,Z0,Uyr,bf,Jyr,Wbe,Yyr,Kyr,Qbe,Zyr,ewr,owr,eL,rwr,Hbe,twr,awr,nwr,Rt,oL,swr,Ube,lwr,iwr,vf,dwr,Jbe,cwr,fwr,Ybe,mwr,gwr,hwr,Kbe,pwr,_wr,rL,uwr,So,tL,bwr,Zbe,vwr,Twr,$n,Fwr,eve,Cwr,Mwr,ove,Ewr,ywr,rve,wwr,Awr,Lwr,ve,c4,tve,Bwr,xwr,VV,kwr,Rwr,Swr,f4,ave,Pwr,$wr,zV,Iwr,jwr,Dwr,m4,nve,Nwr,qwr,WV,Owr,Gwr,Xwr,g4,sve,Vwr,zwr,QV,Wwr,Qwr,Hwr,h4,lve,Uwr,Jwr,HV,Ywr,Kwr,Zwr,p4,ive,e6r,o6r,UV,r6r,t6r,a6r,_4,dve,n6r,s6r,JV,l6r,i6r,d6r,u4,cve,c6r,f6r,YV,m6r,g6r,h6r,b4,fve,p6r,_6r,KV,u6r,b6r,v6r,v4,mve,T6r,F6r,ZV,C6r,M6r,E6r,gve,y6r,w6r,aL,Vke,Tf,T4,hve,nL,A6r,pve,L6r,zke,Nr,sL,B6r,Ff,x6r,_ve,k6r,R6r,uve,S6r,P6r,$6r,lL,I6r,bve,j6r,D6r,N6r,St,iL,q6r,vve,O6r,G6r,Cf,X6r,Tve,V6r,z6r,Fve,W6r,Q6r,H6r,Cve,U6r,J6r,dL,Y6r,Po,cL,K6r,Mve,Z6r,eAr,In,oAr,Eve,rAr,tAr,yve,aAr,nAr,wve,sAr,lAr,iAr,Re,F4,Ave,dAr,cAr,ez,fAr,mAr,gAr,C4,Lve,hAr,pAr,oz,_Ar,uAr,bAr,M4,Bve,vAr,TAr,rz,FAr,CAr,MAr,E4,xve,EAr,yAr,tz,wAr,AAr,LAr,y4,kve,BAr,xAr,az,kAr,RAr,SAr,w4,Rve,PAr,$Ar,nz,IAr,jAr,DAr,A4,Sve,NAr,qAr,sz,OAr,GAr,XAr,L4,Pve,VAr,zAr,lz,WAr,QAr,HAr,$ve,UAr,JAr,fL,Wke,Mf,B4,Ive,mL,YAr,jve,KAr,Qke,qr,gL,ZAr,Ef,e0r,Dve,o0r,r0r,Nve,t0r,a0r,n0r,hL,s0r,qve,l0r,i0r,d0r,Pt,pL,c0r,Ove,f0r,m0r,yf,g0r,Gve,h0r,p0r,Xve,_0r,u0r,b0r,Vve,v0r,T0r,_L,F0r,$o,uL,C0r,zve,M0r,E0r,jn,y0r,Wve,w0r,A0r,Qve,L0r,B0r,Hve,x0r,k0r,R0r,Se,x4,Uve,S0r,P0r,iz,$0r,I0r,j0r,k4,Jve,D0r,N0r,dz,q0r,O0r,G0r,R4,Yve,X0r,V0r,cz,z0r,W0r,Q0r,S4,Kve,H0r,U0r,fz,J0r,Y0r,K0r,P4,Zve,Z0r,eLr,mz,oLr,rLr,tLr,$4,eTe,aLr,nLr,gz,sLr,lLr,iLr,I4,oTe,dLr,cLr,hz,fLr,mLr,gLr,j4,rTe,hLr,pLr,pz,_Lr,uLr,bLr,tTe,vLr,TLr,bL,Hke,wf,D4,aTe,vL,FLr,nTe,CLr,Uke,Or,TL,MLr,Af,ELr,sTe,yLr,wLr,lTe,ALr,LLr,BLr,FL,xLr,iTe,kLr,RLr,SLr,$t,CL,PLr,dTe,$Lr,ILr,Lf,jLr,cTe,DLr,NLr,fTe,qLr,OLr,GLr,mTe,XLr,VLr,ML,zLr,Io,EL,WLr,gTe,QLr,HLr,Dn,ULr,hTe,JLr,YLr,pTe,KLr,ZLr,_Te,e8r,o8r,r8r,uTe,N4,bTe,t8r,a8r,_z,n8r,s8r,l8r,vTe,i8r,d8r,yL,Jke,Bf,q4,TTe,wL,c8r,FTe,f8r,Yke,Gr,AL,m8r,xf,g8r,CTe,h8r,p8r,MTe,_8r,u8r,b8r,LL,v8r,ETe,T8r,F8r,C8r,It,BL,M8r,yTe,E8r,y8r,kf,w8r,wTe,A8r,L8r,ATe,B8r,x8r,k8r,LTe,R8r,S8r,xL,P8r,jo,kL,$8r,BTe,I8r,j8r,Nn,D8r,xTe,N8r,q8r,kTe,O8r,G8r,RTe,X8r,V8r,z8r,RL,O4,STe,W8r,Q8r,uz,H8r,U8r,J8r,G4,PTe,Y8r,K8r,bz,Z8r,e7r,o7r,$Te,r7r,t7r,SL,Kke,Rf,X4,ITe,PL,a7r,jTe,n7r,Zke,Xr,$L,s7r,Sf,l7r,DTe,i7r,d7r,NTe,c7r,f7r,m7r,IL,g7r,qTe,h7r,p7r,_7r,jt,jL,u7r,OTe,b7r,v7r,Pf,T7r,GTe,F7r,C7r,XTe,M7r,E7r,y7r,VTe,w7r,A7r,DL,L7r,Do,NL,B7r,zTe,x7r,k7r,qn,R7r,WTe,S7r,P7r,QTe,$7r,I7r,HTe,j7r,D7r,N7r,UTe,V4,JTe,q7r,O7r,vz,G7r,X7r,V7r,YTe,z7r,W7r,qL,eRe;return fe=new X({}),Na=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),UE=new X({}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new Q7r({props:{warning:"&lcub;true}",$$slots:{default:[FFt]},$$scope:{ctx:Ii}}}),YE=new X({}),KE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L526"}}),o3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),r3=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),t3=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),a3=new X({}),n3=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L358"}}),i3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L372",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15529/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),d3=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),c3=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L568",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),f3=new X({}),m3=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),p3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15529/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Mh=new Q7r({props:{$$slots:{default:[CFt]},$$scope:{ctx:Ii}}}),_3=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),u3=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),b3=new X({}),v3=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L71"}}),C3=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Ph=new Q7r({props:{$$slots:{default:[MFt]},$$scope:{ctx:Ii}}}),M3=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),E3=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),y3=new X({}),w3=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L697"}}),L3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),x3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R3=new X({}),S3=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L704"}}),$3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),j3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new X({}),q3=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L719"}}),G3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),V3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W3=new X({}),Q3=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L726"}}),U3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Y3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new X({}),ey=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L733"}}),ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L742"}}),dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L776"}}),_y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L783"}}),My=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L769"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L751"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Gy=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L758"}}),Vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L792"}}),Yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L831"}}),aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),sw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L838"}}),fw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L861"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),Mw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L845"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),xw=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L852"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L870"}}),qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),zw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L877"}}),Qw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L824"}}),e6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),r6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new X({}),n6=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L799"}}),l6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),d6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new X({}),m6=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L806"}}),h6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),_6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v6=new X({}),T6=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L815"}}),C6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),E6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w6=new X({}),A6=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),B6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),k6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S6=new X({}),P6=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),I6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),D6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new X({}),O6=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),X6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),z6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new X({}),H6=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),J6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Y6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),K6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),fA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),MA=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),xA=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),jA=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),NA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),VA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),WA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),HA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),ZA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),o0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),s0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),g0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),p0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),T0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),C0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),y0=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),A0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),B0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),R0=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),P0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),I0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),N0=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),O0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),X0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),W0=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),H0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),J0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),pL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L314"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L323"}}),jL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),NL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),ge=a("a"),io=a("span"),f(fe.$$.fragment),Te=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),ca=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),zE=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),WE=o("AutoConfig"),Gn=o(", "),Xn=a("a"),QE=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),HE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Na.$$.fragment),fo=l(),he=a("p"),N8=o("will create a model that is an instance of "),Xi=a("a"),q8=o("BertModel"),O8=o("."),zo=l(),qa=a("p"),G8=o("There is one class of "),Nf=a("code"),X8=o("AutoModel"),gPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZBe=l(),Vi=a("h2"),qf=a("a"),mQ=a("span"),f(UE.$$.fragment),hPe=l(),gQ=a("span"),pPe=o("Extending the Auto Classes"),exe=l(),zn=a("p"),_Pe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hQ=a("code"),uPe=o("NewModel"),bPe=o(", make sure you have a "),pQ=a("code"),vPe=o("NewModelConfig"),TPe=o(` then you can add those to the auto
classes like this:`),oxe=l(),f(JE.$$.fragment),rxe=l(),V8=a("p"),FPe=o("You will then be able to use the auto classes like you would usually do!"),txe=l(),f(Of.$$.fragment),axe=l(),zi=a("h2"),Gf=a("a"),_Q=a("span"),f(YE.$$.fragment),CPe=l(),uQ=a("span"),MPe=o("AutoConfig"),nxe=l(),Wo=a("div"),f(KE.$$.fragment),EPe=l(),ZE=a("p"),yPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),z8=a("a"),wPe=o("from_pretrained()"),APe=o(" class method."),LPe=l(),e3=a("p"),BPe=o("This class cannot be instantiated directly using "),bQ=a("code"),xPe=o("__init__()"),kPe=o(" (throws an error)."),RPe=l(),mo=a("div"),f(o3.$$.fragment),SPe=l(),vQ=a("p"),PPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Pe=l(),Wi=a("p"),IPe=o("The configuration class to instantiate is selected based on the "),TQ=a("code"),jPe=o("model_type"),DPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FQ=a("code"),NPe=o("pretrained_model_name_or_path"),qPe=o(":"),OPe=l(),v=a("ul"),Xf=a("li"),CQ=a("strong"),GPe=o("albert"),XPe=o(" \u2014 "),W8=a("a"),VPe=o("AlbertConfig"),zPe=o(" (ALBERT model)"),WPe=l(),Vf=a("li"),MQ=a("strong"),QPe=o("bart"),HPe=o(" \u2014 "),Q8=a("a"),UPe=o("BartConfig"),JPe=o(" (BART model)"),YPe=l(),zf=a("li"),EQ=a("strong"),KPe=o("beit"),ZPe=o(" \u2014 "),H8=a("a"),e$e=o("BeitConfig"),o$e=o(" (BEiT model)"),r$e=l(),Wf=a("li"),yQ=a("strong"),t$e=o("bert"),a$e=o(" \u2014 "),U8=a("a"),n$e=o("BertConfig"),s$e=o(" (BERT model)"),l$e=l(),Qf=a("li"),wQ=a("strong"),i$e=o("bert-generation"),d$e=o(" \u2014 "),J8=a("a"),c$e=o("BertGenerationConfig"),f$e=o(" (Bert Generation model)"),m$e=l(),Hf=a("li"),AQ=a("strong"),g$e=o("big_bird"),h$e=o(" \u2014 "),Y8=a("a"),p$e=o("BigBirdConfig"),_$e=o(" (BigBird model)"),u$e=l(),Uf=a("li"),LQ=a("strong"),b$e=o("bigbird_pegasus"),v$e=o(" \u2014 "),K8=a("a"),T$e=o("BigBirdPegasusConfig"),F$e=o(" (BigBirdPegasus model)"),C$e=l(),Jf=a("li"),BQ=a("strong"),M$e=o("blenderbot"),E$e=o(" \u2014 "),Z8=a("a"),y$e=o("BlenderbotConfig"),w$e=o(" (Blenderbot model)"),A$e=l(),Yf=a("li"),xQ=a("strong"),L$e=o("blenderbot-small"),B$e=o(" \u2014 "),e7=a("a"),x$e=o("BlenderbotSmallConfig"),k$e=o(" (BlenderbotSmall model)"),R$e=l(),Kf=a("li"),kQ=a("strong"),S$e=o("camembert"),P$e=o(" \u2014 "),o7=a("a"),$$e=o("CamembertConfig"),I$e=o(" (CamemBERT model)"),j$e=l(),Zf=a("li"),RQ=a("strong"),D$e=o("canine"),N$e=o(" \u2014 "),r7=a("a"),q$e=o("CanineConfig"),O$e=o(" (Canine model)"),G$e=l(),em=a("li"),SQ=a("strong"),X$e=o("clip"),V$e=o(" \u2014 "),t7=a("a"),z$e=o("CLIPConfig"),W$e=o(" (CLIP model)"),Q$e=l(),om=a("li"),PQ=a("strong"),H$e=o("convbert"),U$e=o(" \u2014 "),a7=a("a"),J$e=o("ConvBertConfig"),Y$e=o(" (ConvBERT model)"),K$e=l(),rm=a("li"),$Q=a("strong"),Z$e=o("convnext"),eIe=o(" \u2014 "),n7=a("a"),oIe=o("ConvNextConfig"),rIe=o(" (ConvNext model)"),tIe=l(),tm=a("li"),IQ=a("strong"),aIe=o("ctrl"),nIe=o(" \u2014 "),s7=a("a"),sIe=o("CTRLConfig"),lIe=o(" (CTRL model)"),iIe=l(),am=a("li"),jQ=a("strong"),dIe=o("data2vec-audio"),cIe=o(" \u2014 "),l7=a("a"),fIe=o("Data2VecAudioConfig"),mIe=o(" (Data2VecAudio model)"),gIe=l(),nm=a("li"),DQ=a("strong"),hIe=o("data2vec-text"),pIe=o(" \u2014 "),i7=a("a"),_Ie=o("Data2VecTextConfig"),uIe=o(" (Data2VecText model)"),bIe=l(),sm=a("li"),NQ=a("strong"),vIe=o("deberta"),TIe=o(" \u2014 "),d7=a("a"),FIe=o("DebertaConfig"),CIe=o(" (DeBERTa model)"),MIe=l(),lm=a("li"),qQ=a("strong"),EIe=o("deberta-v2"),yIe=o(" \u2014 "),c7=a("a"),wIe=o("DebertaV2Config"),AIe=o(" (DeBERTa-v2 model)"),LIe=l(),im=a("li"),OQ=a("strong"),BIe=o("deit"),xIe=o(" \u2014 "),f7=a("a"),kIe=o("DeiTConfig"),RIe=o(" (DeiT model)"),SIe=l(),dm=a("li"),GQ=a("strong"),PIe=o("detr"),$Ie=o(" \u2014 "),m7=a("a"),IIe=o("DetrConfig"),jIe=o(" (DETR model)"),DIe=l(),cm=a("li"),XQ=a("strong"),NIe=o("distilbert"),qIe=o(" \u2014 "),g7=a("a"),OIe=o("DistilBertConfig"),GIe=o(" (DistilBERT model)"),XIe=l(),fm=a("li"),VQ=a("strong"),VIe=o("dpr"),zIe=o(" \u2014 "),h7=a("a"),WIe=o("DPRConfig"),QIe=o(" (DPR model)"),HIe=l(),mm=a("li"),zQ=a("strong"),UIe=o("electra"),JIe=o(" \u2014 "),p7=a("a"),YIe=o("ElectraConfig"),KIe=o(" (ELECTRA model)"),ZIe=l(),gm=a("li"),WQ=a("strong"),eje=o("encoder-decoder"),oje=o(" \u2014 "),_7=a("a"),rje=o("EncoderDecoderConfig"),tje=o(" (Encoder decoder model)"),aje=l(),hm=a("li"),QQ=a("strong"),nje=o("flaubert"),sje=o(" \u2014 "),u7=a("a"),lje=o("FlaubertConfig"),ije=o(" (FlauBERT model)"),dje=l(),pm=a("li"),HQ=a("strong"),cje=o("fnet"),fje=o(" \u2014 "),b7=a("a"),mje=o("FNetConfig"),gje=o(" (FNet model)"),hje=l(),_m=a("li"),UQ=a("strong"),pje=o("fsmt"),_je=o(" \u2014 "),v7=a("a"),uje=o("FSMTConfig"),bje=o(" (FairSeq Machine-Translation model)"),vje=l(),um=a("li"),JQ=a("strong"),Tje=o("funnel"),Fje=o(" \u2014 "),T7=a("a"),Cje=o("FunnelConfig"),Mje=o(" (Funnel Transformer model)"),Eje=l(),bm=a("li"),YQ=a("strong"),yje=o("gpt2"),wje=o(" \u2014 "),F7=a("a"),Aje=o("GPT2Config"),Lje=o(" (OpenAI GPT-2 model)"),Bje=l(),vm=a("li"),KQ=a("strong"),xje=o("gpt_neo"),kje=o(" \u2014 "),C7=a("a"),Rje=o("GPTNeoConfig"),Sje=o(" (GPT Neo model)"),Pje=l(),Tm=a("li"),ZQ=a("strong"),$je=o("gptj"),Ije=o(" \u2014 "),M7=a("a"),jje=o("GPTJConfig"),Dje=o(" (GPT-J model)"),Nje=l(),Fm=a("li"),eH=a("strong"),qje=o("hubert"),Oje=o(" \u2014 "),E7=a("a"),Gje=o("HubertConfig"),Xje=o(" (Hubert model)"),Vje=l(),Cm=a("li"),oH=a("strong"),zje=o("ibert"),Wje=o(" \u2014 "),y7=a("a"),Qje=o("IBertConfig"),Hje=o(" (I-BERT model)"),Uje=l(),Mm=a("li"),rH=a("strong"),Jje=o("imagegpt"),Yje=o(" \u2014 "),w7=a("a"),Kje=o("ImageGPTConfig"),Zje=o(" (ImageGPT model)"),eDe=l(),Em=a("li"),tH=a("strong"),oDe=o("layoutlm"),rDe=o(" \u2014 "),A7=a("a"),tDe=o("LayoutLMConfig"),aDe=o(" (LayoutLM model)"),nDe=l(),ym=a("li"),aH=a("strong"),sDe=o("layoutlmv2"),lDe=o(" \u2014 "),L7=a("a"),iDe=o("LayoutLMv2Config"),dDe=o(" (LayoutLMv2 model)"),cDe=l(),wm=a("li"),nH=a("strong"),fDe=o("led"),mDe=o(" \u2014 "),B7=a("a"),gDe=o("LEDConfig"),hDe=o(" (LED model)"),pDe=l(),Am=a("li"),sH=a("strong"),_De=o("longformer"),uDe=o(" \u2014 "),x7=a("a"),bDe=o("LongformerConfig"),vDe=o(" (Longformer model)"),TDe=l(),Lm=a("li"),lH=a("strong"),FDe=o("luke"),CDe=o(" \u2014 "),k7=a("a"),MDe=o("LukeConfig"),EDe=o(" (LUKE model)"),yDe=l(),Bm=a("li"),iH=a("strong"),wDe=o("lxmert"),ADe=o(" \u2014 "),R7=a("a"),LDe=o("LxmertConfig"),BDe=o(" (LXMERT model)"),xDe=l(),xm=a("li"),dH=a("strong"),kDe=o("m2m_100"),RDe=o(" \u2014 "),S7=a("a"),SDe=o("M2M100Config"),PDe=o(" (M2M100 model)"),$De=l(),km=a("li"),cH=a("strong"),IDe=o("marian"),jDe=o(" \u2014 "),P7=a("a"),DDe=o("MarianConfig"),NDe=o(" (Marian model)"),qDe=l(),Rm=a("li"),fH=a("strong"),ODe=o("maskformer"),GDe=o(" \u2014 "),$7=a("a"),XDe=o("MaskFormerConfig"),VDe=o(" (MaskFormer model)"),zDe=l(),Sm=a("li"),mH=a("strong"),WDe=o("mbart"),QDe=o(" \u2014 "),I7=a("a"),HDe=o("MBartConfig"),UDe=o(" (mBART model)"),JDe=l(),Pm=a("li"),gH=a("strong"),YDe=o("megatron-bert"),KDe=o(" \u2014 "),j7=a("a"),ZDe=o("MegatronBertConfig"),eNe=o(" (MegatronBert model)"),oNe=l(),$m=a("li"),hH=a("strong"),rNe=o("mobilebert"),tNe=o(" \u2014 "),D7=a("a"),aNe=o("MobileBertConfig"),nNe=o(" (MobileBERT model)"),sNe=l(),Im=a("li"),pH=a("strong"),lNe=o("mpnet"),iNe=o(" \u2014 "),N7=a("a"),dNe=o("MPNetConfig"),cNe=o(" (MPNet model)"),fNe=l(),jm=a("li"),_H=a("strong"),mNe=o("mt5"),gNe=o(" \u2014 "),q7=a("a"),hNe=o("MT5Config"),pNe=o(" (mT5 model)"),_Ne=l(),Dm=a("li"),uH=a("strong"),uNe=o("nystromformer"),bNe=o(" \u2014 "),O7=a("a"),vNe=o("NystromformerConfig"),TNe=o(" (Nystromformer model)"),FNe=l(),Nm=a("li"),bH=a("strong"),CNe=o("openai-gpt"),MNe=o(" \u2014 "),G7=a("a"),ENe=o("OpenAIGPTConfig"),yNe=o(" (OpenAI GPT model)"),wNe=l(),qm=a("li"),vH=a("strong"),ANe=o("pegasus"),LNe=o(" \u2014 "),X7=a("a"),BNe=o("PegasusConfig"),xNe=o(" (Pegasus model)"),kNe=l(),Om=a("li"),TH=a("strong"),RNe=o("perceiver"),SNe=o(" \u2014 "),V7=a("a"),PNe=o("PerceiverConfig"),$Ne=o(" (Perceiver model)"),INe=l(),Gm=a("li"),FH=a("strong"),jNe=o("plbart"),DNe=o(" \u2014 "),z7=a("a"),NNe=o("PLBartConfig"),qNe=o(" (PLBart model)"),ONe=l(),Xm=a("li"),CH=a("strong"),GNe=o("poolformer"),XNe=o(" \u2014 "),W7=a("a"),VNe=o("PoolFormerConfig"),zNe=o(" (PoolFormer model)"),WNe=l(),Vm=a("li"),MH=a("strong"),QNe=o("prophetnet"),HNe=o(" \u2014 "),Q7=a("a"),UNe=o("ProphetNetConfig"),JNe=o(" (ProphetNet model)"),YNe=l(),zm=a("li"),EH=a("strong"),KNe=o("qdqbert"),ZNe=o(" \u2014 "),H7=a("a"),eqe=o("QDQBertConfig"),oqe=o(" (QDQBert model)"),rqe=l(),Wm=a("li"),yH=a("strong"),tqe=o("rag"),aqe=o(" \u2014 "),U7=a("a"),nqe=o("RagConfig"),sqe=o(" (RAG model)"),lqe=l(),Qm=a("li"),wH=a("strong"),iqe=o("realm"),dqe=o(" \u2014 "),J7=a("a"),cqe=o("RealmConfig"),fqe=o(" (Realm model)"),mqe=l(),Hm=a("li"),AH=a("strong"),gqe=o("reformer"),hqe=o(" \u2014 "),Y7=a("a"),pqe=o("ReformerConfig"),_qe=o(" (Reformer model)"),uqe=l(),Um=a("li"),LH=a("strong"),bqe=o("rembert"),vqe=o(" \u2014 "),K7=a("a"),Tqe=o("RemBertConfig"),Fqe=o(" (RemBERT model)"),Cqe=l(),Jm=a("li"),BH=a("strong"),Mqe=o("retribert"),Eqe=o(" \u2014 "),Z7=a("a"),yqe=o("RetriBertConfig"),wqe=o(" (RetriBERT model)"),Aqe=l(),Ym=a("li"),xH=a("strong"),Lqe=o("roberta"),Bqe=o(" \u2014 "),eB=a("a"),xqe=o("RobertaConfig"),kqe=o(" (RoBERTa model)"),Rqe=l(),Km=a("li"),kH=a("strong"),Sqe=o("roformer"),Pqe=o(" \u2014 "),oB=a("a"),$qe=o("RoFormerConfig"),Iqe=o(" (RoFormer model)"),jqe=l(),Zm=a("li"),RH=a("strong"),Dqe=o("segformer"),Nqe=o(" \u2014 "),rB=a("a"),qqe=o("SegformerConfig"),Oqe=o(" (SegFormer model)"),Gqe=l(),eg=a("li"),SH=a("strong"),Xqe=o("sew"),Vqe=o(" \u2014 "),tB=a("a"),zqe=o("SEWConfig"),Wqe=o(" (SEW model)"),Qqe=l(),og=a("li"),PH=a("strong"),Hqe=o("sew-d"),Uqe=o(" \u2014 "),aB=a("a"),Jqe=o("SEWDConfig"),Yqe=o(" (SEW-D model)"),Kqe=l(),rg=a("li"),$H=a("strong"),Zqe=o("speech-encoder-decoder"),eOe=o(" \u2014 "),nB=a("a"),oOe=o("SpeechEncoderDecoderConfig"),rOe=o(" (Speech Encoder decoder model)"),tOe=l(),tg=a("li"),IH=a("strong"),aOe=o("speech_to_text"),nOe=o(" \u2014 "),sB=a("a"),sOe=o("Speech2TextConfig"),lOe=o(" (Speech2Text model)"),iOe=l(),ag=a("li"),jH=a("strong"),dOe=o("speech_to_text_2"),cOe=o(" \u2014 "),lB=a("a"),fOe=o("Speech2Text2Config"),mOe=o(" (Speech2Text2 model)"),gOe=l(),ng=a("li"),DH=a("strong"),hOe=o("splinter"),pOe=o(" \u2014 "),iB=a("a"),_Oe=o("SplinterConfig"),uOe=o(" (Splinter model)"),bOe=l(),sg=a("li"),NH=a("strong"),vOe=o("squeezebert"),TOe=o(" \u2014 "),dB=a("a"),FOe=o("SqueezeBertConfig"),COe=o(" (SqueezeBERT model)"),MOe=l(),lg=a("li"),qH=a("strong"),EOe=o("swin"),yOe=o(" \u2014 "),cB=a("a"),wOe=o("SwinConfig"),AOe=o(" (Swin model)"),LOe=l(),ig=a("li"),OH=a("strong"),BOe=o("t5"),xOe=o(" \u2014 "),fB=a("a"),kOe=o("T5Config"),ROe=o(" (T5 model)"),SOe=l(),dg=a("li"),GH=a("strong"),POe=o("tapas"),$Oe=o(" \u2014 "),mB=a("a"),IOe=o("TapasConfig"),jOe=o(" (TAPAS model)"),DOe=l(),cg=a("li"),XH=a("strong"),NOe=o("transfo-xl"),qOe=o(" \u2014 "),gB=a("a"),OOe=o("TransfoXLConfig"),GOe=o(" (Transformer-XL model)"),XOe=l(),fg=a("li"),VH=a("strong"),VOe=o("trocr"),zOe=o(" \u2014 "),hB=a("a"),WOe=o("TrOCRConfig"),QOe=o(" (TrOCR model)"),HOe=l(),mg=a("li"),zH=a("strong"),UOe=o("unispeech"),JOe=o(" \u2014 "),pB=a("a"),YOe=o("UniSpeechConfig"),KOe=o(" (UniSpeech model)"),ZOe=l(),gg=a("li"),WH=a("strong"),eGe=o("unispeech-sat"),oGe=o(" \u2014 "),_B=a("a"),rGe=o("UniSpeechSatConfig"),tGe=o(" (UniSpeechSat model)"),aGe=l(),hg=a("li"),QH=a("strong"),nGe=o("vilt"),sGe=o(" \u2014 "),uB=a("a"),lGe=o("ViltConfig"),iGe=o(" (ViLT model)"),dGe=l(),pg=a("li"),HH=a("strong"),cGe=o("vision-encoder-decoder"),fGe=o(" \u2014 "),bB=a("a"),mGe=o("VisionEncoderDecoderConfig"),gGe=o(" (Vision Encoder decoder model)"),hGe=l(),_g=a("li"),UH=a("strong"),pGe=o("vision-text-dual-encoder"),_Ge=o(" \u2014 "),vB=a("a"),uGe=o("VisionTextDualEncoderConfig"),bGe=o(" (VisionTextDualEncoder model)"),vGe=l(),ug=a("li"),JH=a("strong"),TGe=o("visual_bert"),FGe=o(" \u2014 "),TB=a("a"),CGe=o("VisualBertConfig"),MGe=o(" (VisualBert model)"),EGe=l(),bg=a("li"),YH=a("strong"),yGe=o("vit"),wGe=o(" \u2014 "),FB=a("a"),AGe=o("ViTConfig"),LGe=o(" (ViT model)"),BGe=l(),vg=a("li"),KH=a("strong"),xGe=o("vit_mae"),kGe=o(" \u2014 "),CB=a("a"),RGe=o("ViTMAEConfig"),SGe=o(" (ViTMAE model)"),PGe=l(),Tg=a("li"),ZH=a("strong"),$Ge=o("wav2vec2"),IGe=o(" \u2014 "),MB=a("a"),jGe=o("Wav2Vec2Config"),DGe=o(" (Wav2Vec2 model)"),NGe=l(),Fg=a("li"),eU=a("strong"),qGe=o("wavlm"),OGe=o(" \u2014 "),EB=a("a"),GGe=o("WavLMConfig"),XGe=o(" (WavLM model)"),VGe=l(),Cg=a("li"),oU=a("strong"),zGe=o("xglm"),WGe=o(" \u2014 "),yB=a("a"),QGe=o("XGLMConfig"),HGe=o(" (XGLM model)"),UGe=l(),Mg=a("li"),rU=a("strong"),JGe=o("xlm"),YGe=o(" \u2014 "),wB=a("a"),KGe=o("XLMConfig"),ZGe=o(" (XLM model)"),eXe=l(),Eg=a("li"),tU=a("strong"),oXe=o("xlm-prophetnet"),rXe=o(" \u2014 "),AB=a("a"),tXe=o("XLMProphetNetConfig"),aXe=o(" (XLMProphetNet model)"),nXe=l(),yg=a("li"),aU=a("strong"),sXe=o("xlm-roberta"),lXe=o(" \u2014 "),LB=a("a"),iXe=o("XLMRobertaConfig"),dXe=o(" (XLM-RoBERTa model)"),cXe=l(),wg=a("li"),nU=a("strong"),fXe=o("xlm-roberta-xl"),mXe=o(" \u2014 "),BB=a("a"),gXe=o("XLMRobertaXLConfig"),hXe=o(" (XLM-RoBERTa-XL model)"),pXe=l(),Ag=a("li"),sU=a("strong"),_Xe=o("xlnet"),uXe=o(" \u2014 "),xB=a("a"),bXe=o("XLNetConfig"),vXe=o(" (XLNet model)"),TXe=l(),Lg=a("li"),lU=a("strong"),FXe=o("yoso"),CXe=o(" \u2014 "),kB=a("a"),MXe=o("YosoConfig"),EXe=o(" (YOSO model)"),yXe=l(),iU=a("p"),wXe=o("Examples:"),AXe=l(),f(r3.$$.fragment),LXe=l(),Bg=a("div"),f(t3.$$.fragment),BXe=l(),dU=a("p"),xXe=o("Register a new configuration for this class."),sxe=l(),Qi=a("h2"),xg=a("a"),cU=a("span"),f(a3.$$.fragment),kXe=l(),fU=a("span"),RXe=o("AutoTokenizer"),lxe=l(),Qo=a("div"),f(n3.$$.fragment),SXe=l(),s3=a("p"),PXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RB=a("a"),$Xe=o("AutoTokenizer.from_pretrained()"),IXe=o(" class method."),jXe=l(),l3=a("p"),DXe=o("This class cannot be instantiated directly using "),mU=a("code"),NXe=o("__init__()"),qXe=o(" (throws an error)."),OXe=l(),go=a("div"),f(i3.$$.fragment),GXe=l(),gU=a("p"),XXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),VXe=l(),Oa=a("p"),zXe=o("The tokenizer class to instantiate is selected based on the "),hU=a("code"),WXe=o("model_type"),QXe=o(` property of the config object (either
passed as an argument or loaded from `),pU=a("code"),HXe=o("pretrained_model_name_or_path"),UXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_U=a("code"),JXe=o("pretrained_model_name_or_path"),YXe=o(":"),KXe=l(),E=a("ul"),Wn=a("li"),uU=a("strong"),ZXe=o("albert"),eVe=o(" \u2014 "),SB=a("a"),oVe=o("AlbertTokenizer"),rVe=o(" or "),PB=a("a"),tVe=o("AlbertTokenizerFast"),aVe=o(" (ALBERT model)"),nVe=l(),Qn=a("li"),bU=a("strong"),sVe=o("bart"),lVe=o(" \u2014 "),$B=a("a"),iVe=o("BartTokenizer"),dVe=o(" or "),IB=a("a"),cVe=o("BartTokenizerFast"),fVe=o(" (BART model)"),mVe=l(),Hn=a("li"),vU=a("strong"),gVe=o("barthez"),hVe=o(" \u2014 "),jB=a("a"),pVe=o("BarthezTokenizer"),_Ve=o(" or "),DB=a("a"),uVe=o("BarthezTokenizerFast"),bVe=o(" (BARThez model)"),vVe=l(),kg=a("li"),TU=a("strong"),TVe=o("bartpho"),FVe=o(" \u2014 "),NB=a("a"),CVe=o("BartphoTokenizer"),MVe=o(" (BARTpho model)"),EVe=l(),Un=a("li"),FU=a("strong"),yVe=o("bert"),wVe=o(" \u2014 "),qB=a("a"),AVe=o("BertTokenizer"),LVe=o(" or "),OB=a("a"),BVe=o("BertTokenizerFast"),xVe=o(" (BERT model)"),kVe=l(),Rg=a("li"),CU=a("strong"),RVe=o("bert-generation"),SVe=o(" \u2014 "),GB=a("a"),PVe=o("BertGenerationTokenizer"),$Ve=o(" (Bert Generation model)"),IVe=l(),Sg=a("li"),MU=a("strong"),jVe=o("bert-japanese"),DVe=o(" \u2014 "),XB=a("a"),NVe=o("BertJapaneseTokenizer"),qVe=o(" (BertJapanese model)"),OVe=l(),Pg=a("li"),EU=a("strong"),GVe=o("bertweet"),XVe=o(" \u2014 "),VB=a("a"),VVe=o("BertweetTokenizer"),zVe=o(" (Bertweet model)"),WVe=l(),Jn=a("li"),yU=a("strong"),QVe=o("big_bird"),HVe=o(" \u2014 "),zB=a("a"),UVe=o("BigBirdTokenizer"),JVe=o(" or "),WB=a("a"),YVe=o("BigBirdTokenizerFast"),KVe=o(" (BigBird model)"),ZVe=l(),Yn=a("li"),wU=a("strong"),eze=o("bigbird_pegasus"),oze=o(" \u2014 "),QB=a("a"),rze=o("PegasusTokenizer"),tze=o(" or "),HB=a("a"),aze=o("PegasusTokenizerFast"),nze=o(" (BigBirdPegasus model)"),sze=l(),Kn=a("li"),AU=a("strong"),lze=o("blenderbot"),ize=o(" \u2014 "),UB=a("a"),dze=o("BlenderbotTokenizer"),cze=o(" or "),JB=a("a"),fze=o("BlenderbotTokenizerFast"),mze=o(" (Blenderbot model)"),gze=l(),$g=a("li"),LU=a("strong"),hze=o("blenderbot-small"),pze=o(" \u2014 "),YB=a("a"),_ze=o("BlenderbotSmallTokenizer"),uze=o(" (BlenderbotSmall model)"),bze=l(),Ig=a("li"),BU=a("strong"),vze=o("byt5"),Tze=o(" \u2014 "),KB=a("a"),Fze=o("ByT5Tokenizer"),Cze=o(" (ByT5 model)"),Mze=l(),Zn=a("li"),xU=a("strong"),Eze=o("camembert"),yze=o(" \u2014 "),ZB=a("a"),wze=o("CamembertTokenizer"),Aze=o(" or "),ex=a("a"),Lze=o("CamembertTokenizerFast"),Bze=o(" (CamemBERT model)"),xze=l(),jg=a("li"),kU=a("strong"),kze=o("canine"),Rze=o(" \u2014 "),ox=a("a"),Sze=o("CanineTokenizer"),Pze=o(" (Canine model)"),$ze=l(),es=a("li"),RU=a("strong"),Ize=o("clip"),jze=o(" \u2014 "),rx=a("a"),Dze=o("CLIPTokenizer"),Nze=o(" or "),tx=a("a"),qze=o("CLIPTokenizerFast"),Oze=o(" (CLIP model)"),Gze=l(),os=a("li"),SU=a("strong"),Xze=o("convbert"),Vze=o(" \u2014 "),ax=a("a"),zze=o("ConvBertTokenizer"),Wze=o(" or "),nx=a("a"),Qze=o("ConvBertTokenizerFast"),Hze=o(" (ConvBERT model)"),Uze=l(),rs=a("li"),PU=a("strong"),Jze=o("cpm"),Yze=o(" \u2014 "),sx=a("a"),Kze=o("CpmTokenizer"),Zze=o(" or "),$U=a("code"),eWe=o("CpmTokenizerFast"),oWe=o(" (CPM model)"),rWe=l(),Dg=a("li"),IU=a("strong"),tWe=o("ctrl"),aWe=o(" \u2014 "),lx=a("a"),nWe=o("CTRLTokenizer"),sWe=o(" (CTRL model)"),lWe=l(),ts=a("li"),jU=a("strong"),iWe=o("deberta"),dWe=o(" \u2014 "),ix=a("a"),cWe=o("DebertaTokenizer"),fWe=o(" or "),dx=a("a"),mWe=o("DebertaTokenizerFast"),gWe=o(" (DeBERTa model)"),hWe=l(),as=a("li"),DU=a("strong"),pWe=o("deberta-v2"),_We=o(" \u2014 "),cx=a("a"),uWe=o("DebertaV2Tokenizer"),bWe=o(" or "),fx=a("a"),vWe=o("DebertaV2TokenizerFast"),TWe=o(" (DeBERTa-v2 model)"),FWe=l(),ns=a("li"),NU=a("strong"),CWe=o("distilbert"),MWe=o(" \u2014 "),mx=a("a"),EWe=o("DistilBertTokenizer"),yWe=o(" or "),gx=a("a"),wWe=o("DistilBertTokenizerFast"),AWe=o(" (DistilBERT model)"),LWe=l(),ss=a("li"),qU=a("strong"),BWe=o("dpr"),xWe=o(" \u2014 "),hx=a("a"),kWe=o("DPRQuestionEncoderTokenizer"),RWe=o(" or "),px=a("a"),SWe=o("DPRQuestionEncoderTokenizerFast"),PWe=o(" (DPR model)"),$We=l(),ls=a("li"),OU=a("strong"),IWe=o("electra"),jWe=o(" \u2014 "),_x=a("a"),DWe=o("ElectraTokenizer"),NWe=o(" or "),ux=a("a"),qWe=o("ElectraTokenizerFast"),OWe=o(" (ELECTRA model)"),GWe=l(),Ng=a("li"),GU=a("strong"),XWe=o("flaubert"),VWe=o(" \u2014 "),bx=a("a"),zWe=o("FlaubertTokenizer"),WWe=o(" (FlauBERT model)"),QWe=l(),is=a("li"),XU=a("strong"),HWe=o("fnet"),UWe=o(" \u2014 "),vx=a("a"),JWe=o("FNetTokenizer"),YWe=o(" or "),Tx=a("a"),KWe=o("FNetTokenizerFast"),ZWe=o(" (FNet model)"),eQe=l(),qg=a("li"),VU=a("strong"),oQe=o("fsmt"),rQe=o(" \u2014 "),Fx=a("a"),tQe=o("FSMTTokenizer"),aQe=o(" (FairSeq Machine-Translation model)"),nQe=l(),ds=a("li"),zU=a("strong"),sQe=o("funnel"),lQe=o(" \u2014 "),Cx=a("a"),iQe=o("FunnelTokenizer"),dQe=o(" or "),Mx=a("a"),cQe=o("FunnelTokenizerFast"),fQe=o(" (Funnel Transformer model)"),mQe=l(),cs=a("li"),WU=a("strong"),gQe=o("gpt2"),hQe=o(" \u2014 "),Ex=a("a"),pQe=o("GPT2Tokenizer"),_Qe=o(" or "),yx=a("a"),uQe=o("GPT2TokenizerFast"),bQe=o(" (OpenAI GPT-2 model)"),vQe=l(),fs=a("li"),QU=a("strong"),TQe=o("gpt_neo"),FQe=o(" \u2014 "),wx=a("a"),CQe=o("GPT2Tokenizer"),MQe=o(" or "),Ax=a("a"),EQe=o("GPT2TokenizerFast"),yQe=o(" (GPT Neo model)"),wQe=l(),ms=a("li"),HU=a("strong"),AQe=o("herbert"),LQe=o(" \u2014 "),Lx=a("a"),BQe=o("HerbertTokenizer"),xQe=o(" or "),Bx=a("a"),kQe=o("HerbertTokenizerFast"),RQe=o(" (HerBERT model)"),SQe=l(),Og=a("li"),UU=a("strong"),PQe=o("hubert"),$Qe=o(" \u2014 "),xx=a("a"),IQe=o("Wav2Vec2CTCTokenizer"),jQe=o(" (Hubert model)"),DQe=l(),gs=a("li"),JU=a("strong"),NQe=o("ibert"),qQe=o(" \u2014 "),kx=a("a"),OQe=o("RobertaTokenizer"),GQe=o(" or "),Rx=a("a"),XQe=o("RobertaTokenizerFast"),VQe=o(" (I-BERT model)"),zQe=l(),hs=a("li"),YU=a("strong"),WQe=o("layoutlm"),QQe=o(" \u2014 "),Sx=a("a"),HQe=o("LayoutLMTokenizer"),UQe=o(" or "),Px=a("a"),JQe=o("LayoutLMTokenizerFast"),YQe=o(" (LayoutLM model)"),KQe=l(),ps=a("li"),KU=a("strong"),ZQe=o("layoutlmv2"),eHe=o(" \u2014 "),$x=a("a"),oHe=o("LayoutLMv2Tokenizer"),rHe=o(" or "),Ix=a("a"),tHe=o("LayoutLMv2TokenizerFast"),aHe=o(" (LayoutLMv2 model)"),nHe=l(),_s=a("li"),ZU=a("strong"),sHe=o("layoutxlm"),lHe=o(" \u2014 "),jx=a("a"),iHe=o("LayoutXLMTokenizer"),dHe=o(" or "),Dx=a("a"),cHe=o("LayoutXLMTokenizerFast"),fHe=o(" (LayoutXLM model)"),mHe=l(),us=a("li"),eJ=a("strong"),gHe=o("led"),hHe=o(" \u2014 "),Nx=a("a"),pHe=o("LEDTokenizer"),_He=o(" or "),qx=a("a"),uHe=o("LEDTokenizerFast"),bHe=o(" (LED model)"),vHe=l(),bs=a("li"),oJ=a("strong"),THe=o("longformer"),FHe=o(" \u2014 "),Ox=a("a"),CHe=o("LongformerTokenizer"),MHe=o(" or "),Gx=a("a"),EHe=o("LongformerTokenizerFast"),yHe=o(" (Longformer model)"),wHe=l(),Gg=a("li"),rJ=a("strong"),AHe=o("luke"),LHe=o(" \u2014 "),Xx=a("a"),BHe=o("LukeTokenizer"),xHe=o(" (LUKE model)"),kHe=l(),vs=a("li"),tJ=a("strong"),RHe=o("lxmert"),SHe=o(" \u2014 "),Vx=a("a"),PHe=o("LxmertTokenizer"),$He=o(" or "),zx=a("a"),IHe=o("LxmertTokenizerFast"),jHe=o(" (LXMERT model)"),DHe=l(),Xg=a("li"),aJ=a("strong"),NHe=o("m2m_100"),qHe=o(" \u2014 "),Wx=a("a"),OHe=o("M2M100Tokenizer"),GHe=o(" (M2M100 model)"),XHe=l(),Vg=a("li"),nJ=a("strong"),VHe=o("marian"),zHe=o(" \u2014 "),Qx=a("a"),WHe=o("MarianTokenizer"),QHe=o(" (Marian model)"),HHe=l(),Ts=a("li"),sJ=a("strong"),UHe=o("mbart"),JHe=o(" \u2014 "),Hx=a("a"),YHe=o("MBartTokenizer"),KHe=o(" or "),Ux=a("a"),ZHe=o("MBartTokenizerFast"),eUe=o(" (mBART model)"),oUe=l(),Fs=a("li"),lJ=a("strong"),rUe=o("mbart50"),tUe=o(" \u2014 "),Jx=a("a"),aUe=o("MBart50Tokenizer"),nUe=o(" or "),Yx=a("a"),sUe=o("MBart50TokenizerFast"),lUe=o(" (mBART-50 model)"),iUe=l(),zg=a("li"),iJ=a("strong"),dUe=o("mluke"),cUe=o(" \u2014 "),Kx=a("a"),fUe=o("MLukeTokenizer"),mUe=o(" (mLUKE model)"),gUe=l(),Cs=a("li"),dJ=a("strong"),hUe=o("mobilebert"),pUe=o(" \u2014 "),Zx=a("a"),_Ue=o("MobileBertTokenizer"),uUe=o(" or "),ek=a("a"),bUe=o("MobileBertTokenizerFast"),vUe=o(" (MobileBERT model)"),TUe=l(),Ms=a("li"),cJ=a("strong"),FUe=o("mpnet"),CUe=o(" \u2014 "),ok=a("a"),MUe=o("MPNetTokenizer"),EUe=o(" or "),rk=a("a"),yUe=o("MPNetTokenizerFast"),wUe=o(" (MPNet model)"),AUe=l(),Es=a("li"),fJ=a("strong"),LUe=o("mt5"),BUe=o(" \u2014 "),tk=a("a"),xUe=o("MT5Tokenizer"),kUe=o(" or "),ak=a("a"),RUe=o("MT5TokenizerFast"),SUe=o(" (mT5 model)"),PUe=l(),ys=a("li"),mJ=a("strong"),$Ue=o("openai-gpt"),IUe=o(" \u2014 "),nk=a("a"),jUe=o("OpenAIGPTTokenizer"),DUe=o(" or "),sk=a("a"),NUe=o("OpenAIGPTTokenizerFast"),qUe=o(" (OpenAI GPT model)"),OUe=l(),ws=a("li"),gJ=a("strong"),GUe=o("pegasus"),XUe=o(" \u2014 "),lk=a("a"),VUe=o("PegasusTokenizer"),zUe=o(" or "),ik=a("a"),WUe=o("PegasusTokenizerFast"),QUe=o(" (Pegasus model)"),HUe=l(),Wg=a("li"),hJ=a("strong"),UUe=o("perceiver"),JUe=o(" \u2014 "),dk=a("a"),YUe=o("PerceiverTokenizer"),KUe=o(" (Perceiver model)"),ZUe=l(),Qg=a("li"),pJ=a("strong"),eJe=o("phobert"),oJe=o(" \u2014 "),ck=a("a"),rJe=o("PhobertTokenizer"),tJe=o(" (PhoBERT model)"),aJe=l(),Hg=a("li"),_J=a("strong"),nJe=o("plbart"),sJe=o(" \u2014 "),fk=a("a"),lJe=o("PLBartTokenizer"),iJe=o(" (PLBart model)"),dJe=l(),Ug=a("li"),uJ=a("strong"),cJe=o("prophetnet"),fJe=o(" \u2014 "),mk=a("a"),mJe=o("ProphetNetTokenizer"),gJe=o(" (ProphetNet model)"),hJe=l(),As=a("li"),bJ=a("strong"),pJe=o("qdqbert"),_Je=o(" \u2014 "),gk=a("a"),uJe=o("BertTokenizer"),bJe=o(" or "),hk=a("a"),vJe=o("BertTokenizerFast"),TJe=o(" (QDQBert model)"),FJe=l(),Jg=a("li"),vJ=a("strong"),CJe=o("rag"),MJe=o(" \u2014 "),pk=a("a"),EJe=o("RagTokenizer"),yJe=o(" (RAG model)"),wJe=l(),Ls=a("li"),TJ=a("strong"),AJe=o("realm"),LJe=o(" \u2014 "),_k=a("a"),BJe=o("RealmTokenizer"),xJe=o(" or "),uk=a("a"),kJe=o("RealmTokenizerFast"),RJe=o(" (Realm model)"),SJe=l(),Bs=a("li"),FJ=a("strong"),PJe=o("reformer"),$Je=o(" \u2014 "),bk=a("a"),IJe=o("ReformerTokenizer"),jJe=o(" or "),vk=a("a"),DJe=o("ReformerTokenizerFast"),NJe=o(" (Reformer model)"),qJe=l(),xs=a("li"),CJ=a("strong"),OJe=o("rembert"),GJe=o(" \u2014 "),Tk=a("a"),XJe=o("RemBertTokenizer"),VJe=o(" or "),Fk=a("a"),zJe=o("RemBertTokenizerFast"),WJe=o(" (RemBERT model)"),QJe=l(),ks=a("li"),MJ=a("strong"),HJe=o("retribert"),UJe=o(" \u2014 "),Ck=a("a"),JJe=o("RetriBertTokenizer"),YJe=o(" or "),Mk=a("a"),KJe=o("RetriBertTokenizerFast"),ZJe=o(" (RetriBERT model)"),eYe=l(),Rs=a("li"),EJ=a("strong"),oYe=o("roberta"),rYe=o(" \u2014 "),Ek=a("a"),tYe=o("RobertaTokenizer"),aYe=o(" or "),yk=a("a"),nYe=o("RobertaTokenizerFast"),sYe=o(" (RoBERTa model)"),lYe=l(),Ss=a("li"),yJ=a("strong"),iYe=o("roformer"),dYe=o(" \u2014 "),wk=a("a"),cYe=o("RoFormerTokenizer"),fYe=o(" or "),Ak=a("a"),mYe=o("RoFormerTokenizerFast"),gYe=o(" (RoFormer model)"),hYe=l(),Yg=a("li"),wJ=a("strong"),pYe=o("speech_to_text"),_Ye=o(" \u2014 "),Lk=a("a"),uYe=o("Speech2TextTokenizer"),bYe=o(" (Speech2Text model)"),vYe=l(),Kg=a("li"),AJ=a("strong"),TYe=o("speech_to_text_2"),FYe=o(" \u2014 "),Bk=a("a"),CYe=o("Speech2Text2Tokenizer"),MYe=o(" (Speech2Text2 model)"),EYe=l(),Ps=a("li"),LJ=a("strong"),yYe=o("splinter"),wYe=o(" \u2014 "),xk=a("a"),AYe=o("SplinterTokenizer"),LYe=o(" or "),kk=a("a"),BYe=o("SplinterTokenizerFast"),xYe=o(" (Splinter model)"),kYe=l(),$s=a("li"),BJ=a("strong"),RYe=o("squeezebert"),SYe=o(" \u2014 "),Rk=a("a"),PYe=o("SqueezeBertTokenizer"),$Ye=o(" or "),Sk=a("a"),IYe=o("SqueezeBertTokenizerFast"),jYe=o(" (SqueezeBERT model)"),DYe=l(),Is=a("li"),xJ=a("strong"),NYe=o("t5"),qYe=o(" \u2014 "),Pk=a("a"),OYe=o("T5Tokenizer"),GYe=o(" or "),$k=a("a"),XYe=o("T5TokenizerFast"),VYe=o(" (T5 model)"),zYe=l(),Zg=a("li"),kJ=a("strong"),WYe=o("tapas"),QYe=o(" \u2014 "),Ik=a("a"),HYe=o("TapasTokenizer"),UYe=o(" (TAPAS model)"),JYe=l(),eh=a("li"),RJ=a("strong"),YYe=o("transfo-xl"),KYe=o(" \u2014 "),jk=a("a"),ZYe=o("TransfoXLTokenizer"),eKe=o(" (Transformer-XL model)"),oKe=l(),oh=a("li"),SJ=a("strong"),rKe=o("wav2vec2"),tKe=o(" \u2014 "),Dk=a("a"),aKe=o("Wav2Vec2CTCTokenizer"),nKe=o(" (Wav2Vec2 model)"),sKe=l(),rh=a("li"),PJ=a("strong"),lKe=o("wav2vec2_phoneme"),iKe=o(" \u2014 "),Nk=a("a"),dKe=o("Wav2Vec2PhonemeCTCTokenizer"),cKe=o(" (Wav2Vec2Phoneme model)"),fKe=l(),js=a("li"),$J=a("strong"),mKe=o("xglm"),gKe=o(" \u2014 "),qk=a("a"),hKe=o("XGLMTokenizer"),pKe=o(" or "),Ok=a("a"),_Ke=o("XGLMTokenizerFast"),uKe=o(" (XGLM model)"),bKe=l(),th=a("li"),IJ=a("strong"),vKe=o("xlm"),TKe=o(" \u2014 "),Gk=a("a"),FKe=o("XLMTokenizer"),CKe=o(" (XLM model)"),MKe=l(),ah=a("li"),jJ=a("strong"),EKe=o("xlm-prophetnet"),yKe=o(" \u2014 "),Xk=a("a"),wKe=o("XLMProphetNetTokenizer"),AKe=o(" (XLMProphetNet model)"),LKe=l(),Ds=a("li"),DJ=a("strong"),BKe=o("xlm-roberta"),xKe=o(" \u2014 "),Vk=a("a"),kKe=o("XLMRobertaTokenizer"),RKe=o(" or "),zk=a("a"),SKe=o("XLMRobertaTokenizerFast"),PKe=o(" (XLM-RoBERTa model)"),$Ke=l(),Ns=a("li"),NJ=a("strong"),IKe=o("xlnet"),jKe=o(" \u2014 "),Wk=a("a"),DKe=o("XLNetTokenizer"),NKe=o(" or "),Qk=a("a"),qKe=o("XLNetTokenizerFast"),OKe=o(" (XLNet model)"),GKe=l(),qJ=a("p"),XKe=o("Examples:"),VKe=l(),f(d3.$$.fragment),zKe=l(),nh=a("div"),f(c3.$$.fragment),WKe=l(),OJ=a("p"),QKe=o("Register a new tokenizer in this mapping."),ixe=l(),Hi=a("h2"),sh=a("a"),GJ=a("span"),f(f3.$$.fragment),HKe=l(),XJ=a("span"),UKe=o("AutoFeatureExtractor"),dxe=l(),Ho=a("div"),f(m3.$$.fragment),JKe=l(),g3=a("p"),YKe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hk=a("a"),KKe=o("AutoFeatureExtractor.from_pretrained()"),ZKe=o(" class method."),eZe=l(),h3=a("p"),oZe=o("This class cannot be instantiated directly using "),VJ=a("code"),rZe=o("__init__()"),tZe=o(" (throws an error)."),aZe=l(),$e=a("div"),f(p3.$$.fragment),nZe=l(),zJ=a("p"),sZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lZe=l(),Ga=a("p"),iZe=o("The feature extractor class to instantiate is selected based on the "),WJ=a("code"),dZe=o("model_type"),cZe=o(` property of the config object
(either passed as an argument or loaded from `),QJ=a("code"),fZe=o("pretrained_model_name_or_path"),mZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),HJ=a("code"),gZe=o("pretrained_model_name_or_path"),hZe=o(":"),pZe=l(),ae=a("ul"),lh=a("li"),UJ=a("strong"),_Ze=o("beit"),uZe=o(" \u2014 "),Uk=a("a"),bZe=o("BeitFeatureExtractor"),vZe=o(" (BEiT model)"),TZe=l(),ih=a("li"),JJ=a("strong"),FZe=o("clip"),CZe=o(" \u2014 "),Jk=a("a"),MZe=o("CLIPFeatureExtractor"),EZe=o(" (CLIP model)"),yZe=l(),dh=a("li"),YJ=a("strong"),wZe=o("convnext"),AZe=o(" \u2014 "),Yk=a("a"),LZe=o("ConvNextFeatureExtractor"),BZe=o(" (ConvNext model)"),xZe=l(),ch=a("li"),KJ=a("strong"),kZe=o("deit"),RZe=o(" \u2014 "),Kk=a("a"),SZe=o("DeiTFeatureExtractor"),PZe=o(" (DeiT model)"),$Ze=l(),fh=a("li"),ZJ=a("strong"),IZe=o("detr"),jZe=o(" \u2014 "),Zk=a("a"),DZe=o("DetrFeatureExtractor"),NZe=o(" (DETR model)"),qZe=l(),mh=a("li"),eY=a("strong"),OZe=o("hubert"),GZe=o(" \u2014 "),eR=a("a"),XZe=o("Wav2Vec2FeatureExtractor"),VZe=o(" (Hubert model)"),zZe=l(),gh=a("li"),oY=a("strong"),WZe=o("layoutlmv2"),QZe=o(" \u2014 "),oR=a("a"),HZe=o("LayoutLMv2FeatureExtractor"),UZe=o(" (LayoutLMv2 model)"),JZe=l(),hh=a("li"),rY=a("strong"),YZe=o("maskformer"),KZe=o(" \u2014 "),rR=a("a"),ZZe=o("MaskFormerFeatureExtractor"),eeo=o(" (MaskFormer model)"),oeo=l(),ph=a("li"),tY=a("strong"),reo=o("perceiver"),teo=o(" \u2014 "),tR=a("a"),aeo=o("PerceiverFeatureExtractor"),neo=o(" (Perceiver model)"),seo=l(),_h=a("li"),aY=a("strong"),leo=o("poolformer"),ieo=o(" \u2014 "),aR=a("a"),deo=o("PoolFormerFeatureExtractor"),ceo=o(" (PoolFormer model)"),feo=l(),uh=a("li"),nY=a("strong"),meo=o("segformer"),geo=o(" \u2014 "),nR=a("a"),heo=o("SegformerFeatureExtractor"),peo=o(" (SegFormer model)"),_eo=l(),bh=a("li"),sY=a("strong"),ueo=o("speech_to_text"),beo=o(" \u2014 "),sR=a("a"),veo=o("Speech2TextFeatureExtractor"),Teo=o(" (Speech2Text model)"),Feo=l(),vh=a("li"),lY=a("strong"),Ceo=o("swin"),Meo=o(" \u2014 "),lR=a("a"),Eeo=o("ViTFeatureExtractor"),yeo=o(" (Swin model)"),weo=l(),Th=a("li"),iY=a("strong"),Aeo=o("vit"),Leo=o(" \u2014 "),iR=a("a"),Beo=o("ViTFeatureExtractor"),xeo=o(" (ViT model)"),keo=l(),Fh=a("li"),dY=a("strong"),Reo=o("vit_mae"),Seo=o(" \u2014 "),dR=a("a"),Peo=o("ViTFeatureExtractor"),$eo=o(" (ViTMAE model)"),Ieo=l(),Ch=a("li"),cY=a("strong"),jeo=o("wav2vec2"),Deo=o(" \u2014 "),cR=a("a"),Neo=o("Wav2Vec2FeatureExtractor"),qeo=o(" (Wav2Vec2 model)"),Oeo=l(),f(Mh.$$.fragment),Geo=l(),fY=a("p"),Xeo=o("Examples:"),Veo=l(),f(_3.$$.fragment),zeo=l(),Eh=a("div"),f(u3.$$.fragment),Weo=l(),mY=a("p"),Qeo=o("Register a new feature extractor for this class."),cxe=l(),Ui=a("h2"),yh=a("a"),gY=a("span"),f(b3.$$.fragment),Heo=l(),hY=a("span"),Ueo=o("AutoProcessor"),fxe=l(),Uo=a("div"),f(v3.$$.fragment),Jeo=l(),T3=a("p"),Yeo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fR=a("a"),Keo=o("AutoProcessor.from_pretrained()"),Zeo=o(" class method."),eoo=l(),F3=a("p"),ooo=o("This class cannot be instantiated directly using "),pY=a("code"),roo=o("__init__()"),too=o(" (throws an error)."),aoo=l(),Ie=a("div"),f(C3.$$.fragment),noo=l(),_Y=a("p"),soo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),loo=l(),Ji=a("p"),ioo=o("The processor class to instantiate is selected based on the "),uY=a("code"),doo=o("model_type"),coo=o(` property of the config object (either
passed as an argument or loaded from `),bY=a("code"),foo=o("pretrained_model_name_or_path"),moo=o(" if possible):"),goo=l(),Be=a("ul"),wh=a("li"),vY=a("strong"),hoo=o("clip"),poo=o(" \u2014 "),mR=a("a"),_oo=o("CLIPProcessor"),uoo=o(" (CLIP model)"),boo=l(),Ah=a("li"),TY=a("strong"),voo=o("layoutlmv2"),Too=o(" \u2014 "),gR=a("a"),Foo=o("LayoutLMv2Processor"),Coo=o(" (LayoutLMv2 model)"),Moo=l(),Lh=a("li"),FY=a("strong"),Eoo=o("layoutxlm"),yoo=o(" \u2014 "),hR=a("a"),woo=o("LayoutXLMProcessor"),Aoo=o(" (LayoutXLM model)"),Loo=l(),Bh=a("li"),CY=a("strong"),Boo=o("speech_to_text"),xoo=o(" \u2014 "),pR=a("a"),koo=o("Speech2TextProcessor"),Roo=o(" (Speech2Text model)"),Soo=l(),xh=a("li"),MY=a("strong"),Poo=o("speech_to_text_2"),$oo=o(" \u2014 "),_R=a("a"),Ioo=o("Speech2Text2Processor"),joo=o(" (Speech2Text2 model)"),Doo=l(),kh=a("li"),EY=a("strong"),Noo=o("trocr"),qoo=o(" \u2014 "),uR=a("a"),Ooo=o("TrOCRProcessor"),Goo=o(" (TrOCR model)"),Xoo=l(),Rh=a("li"),yY=a("strong"),Voo=o("vision-text-dual-encoder"),zoo=o(" \u2014 "),bR=a("a"),Woo=o("VisionTextDualEncoderProcessor"),Qoo=o(" (VisionTextDualEncoder model)"),Hoo=l(),Sh=a("li"),wY=a("strong"),Uoo=o("wav2vec2"),Joo=o(" \u2014 "),vR=a("a"),Yoo=o("Wav2Vec2Processor"),Koo=o(" (Wav2Vec2 model)"),Zoo=l(),f(Ph.$$.fragment),ero=l(),AY=a("p"),oro=o("Examples:"),rro=l(),f(M3.$$.fragment),tro=l(),$h=a("div"),f(E3.$$.fragment),aro=l(),LY=a("p"),nro=o("Register a new processor for this class."),mxe=l(),Yi=a("h2"),Ih=a("a"),BY=a("span"),f(y3.$$.fragment),sro=l(),xY=a("span"),lro=o("AutoModel"),gxe=l(),Jo=a("div"),f(w3.$$.fragment),iro=l(),Ki=a("p"),dro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=a("code"),cro=o("from_pretrained()"),fro=o("class method or the "),RY=a("code"),mro=o("from_config()"),gro=o(`class
method.`),hro=l(),A3=a("p"),pro=o("This class cannot be instantiated directly using "),SY=a("code"),_ro=o("__init__()"),uro=o(" (throws an error)."),bro=l(),Vr=a("div"),f(L3.$$.fragment),vro=l(),PY=a("p"),Tro=o("Instantiates one of the base model classes of the library from a configuration."),Fro=l(),Zi=a("p"),Cro=o(`Note:
Loading a model from its configuration file does `),$Y=a("strong"),Mro=o("not"),Ero=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("code"),yro=o("from_pretrained()"),wro=o("to load the model weights."),Aro=l(),jY=a("p"),Lro=o("Examples:"),Bro=l(),f(B3.$$.fragment),xro=l(),je=a("div"),f(x3.$$.fragment),kro=l(),DY=a("p"),Rro=o("Instantiate one of the base model classes of the library from a pretrained model."),Sro=l(),Xa=a("p"),Pro=o("The model class to instantiate is selected based on the "),NY=a("code"),$ro=o("model_type"),Iro=o(` property of the config object (either
passed as an argument or loaded from `),qY=a("code"),jro=o("pretrained_model_name_or_path"),Dro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OY=a("code"),Nro=o("pretrained_model_name_or_path"),qro=o(":"),Oro=l(),F=a("ul"),jh=a("li"),GY=a("strong"),Gro=o("albert"),Xro=o(" \u2014 "),TR=a("a"),Vro=o("AlbertModel"),zro=o(" (ALBERT model)"),Wro=l(),Dh=a("li"),XY=a("strong"),Qro=o("bart"),Hro=o(" \u2014 "),FR=a("a"),Uro=o("BartModel"),Jro=o(" (BART model)"),Yro=l(),Nh=a("li"),VY=a("strong"),Kro=o("beit"),Zro=o(" \u2014 "),CR=a("a"),eto=o("BeitModel"),oto=o(" (BEiT model)"),rto=l(),qh=a("li"),zY=a("strong"),tto=o("bert"),ato=o(" \u2014 "),MR=a("a"),nto=o("BertModel"),sto=o(" (BERT model)"),lto=l(),Oh=a("li"),WY=a("strong"),ito=o("bert-generation"),dto=o(" \u2014 "),ER=a("a"),cto=o("BertGenerationEncoder"),fto=o(" (Bert Generation model)"),mto=l(),Gh=a("li"),QY=a("strong"),gto=o("big_bird"),hto=o(" \u2014 "),yR=a("a"),pto=o("BigBirdModel"),_to=o(" (BigBird model)"),uto=l(),Xh=a("li"),HY=a("strong"),bto=o("bigbird_pegasus"),vto=o(" \u2014 "),wR=a("a"),Tto=o("BigBirdPegasusModel"),Fto=o(" (BigBirdPegasus model)"),Cto=l(),Vh=a("li"),UY=a("strong"),Mto=o("blenderbot"),Eto=o(" \u2014 "),AR=a("a"),yto=o("BlenderbotModel"),wto=o(" (Blenderbot model)"),Ato=l(),zh=a("li"),JY=a("strong"),Lto=o("blenderbot-small"),Bto=o(" \u2014 "),LR=a("a"),xto=o("BlenderbotSmallModel"),kto=o(" (BlenderbotSmall model)"),Rto=l(),Wh=a("li"),YY=a("strong"),Sto=o("camembert"),Pto=o(" \u2014 "),BR=a("a"),$to=o("CamembertModel"),Ito=o(" (CamemBERT model)"),jto=l(),Qh=a("li"),KY=a("strong"),Dto=o("canine"),Nto=o(" \u2014 "),xR=a("a"),qto=o("CanineModel"),Oto=o(" (Canine model)"),Gto=l(),Hh=a("li"),ZY=a("strong"),Xto=o("clip"),Vto=o(" \u2014 "),kR=a("a"),zto=o("CLIPModel"),Wto=o(" (CLIP model)"),Qto=l(),Uh=a("li"),eK=a("strong"),Hto=o("convbert"),Uto=o(" \u2014 "),RR=a("a"),Jto=o("ConvBertModel"),Yto=o(" (ConvBERT model)"),Kto=l(),Jh=a("li"),oK=a("strong"),Zto=o("convnext"),eao=o(" \u2014 "),SR=a("a"),oao=o("ConvNextModel"),rao=o(" (ConvNext model)"),tao=l(),Yh=a("li"),rK=a("strong"),aao=o("ctrl"),nao=o(" \u2014 "),PR=a("a"),sao=o("CTRLModel"),lao=o(" (CTRL model)"),iao=l(),Kh=a("li"),tK=a("strong"),dao=o("data2vec-audio"),cao=o(" \u2014 "),$R=a("a"),fao=o("Data2VecAudioModel"),mao=o(" (Data2VecAudio model)"),gao=l(),Zh=a("li"),aK=a("strong"),hao=o("data2vec-text"),pao=o(" \u2014 "),IR=a("a"),_ao=o("Data2VecTextModel"),uao=o(" (Data2VecText model)"),bao=l(),ep=a("li"),nK=a("strong"),vao=o("deberta"),Tao=o(" \u2014 "),jR=a("a"),Fao=o("DebertaModel"),Cao=o(" (DeBERTa model)"),Mao=l(),op=a("li"),sK=a("strong"),Eao=o("deberta-v2"),yao=o(" \u2014 "),DR=a("a"),wao=o("DebertaV2Model"),Aao=o(" (DeBERTa-v2 model)"),Lao=l(),rp=a("li"),lK=a("strong"),Bao=o("deit"),xao=o(" \u2014 "),NR=a("a"),kao=o("DeiTModel"),Rao=o(" (DeiT model)"),Sao=l(),tp=a("li"),iK=a("strong"),Pao=o("detr"),$ao=o(" \u2014 "),qR=a("a"),Iao=o("DetrModel"),jao=o(" (DETR model)"),Dao=l(),ap=a("li"),dK=a("strong"),Nao=o("distilbert"),qao=o(" \u2014 "),OR=a("a"),Oao=o("DistilBertModel"),Gao=o(" (DistilBERT model)"),Xao=l(),np=a("li"),cK=a("strong"),Vao=o("dpr"),zao=o(" \u2014 "),GR=a("a"),Wao=o("DPRQuestionEncoder"),Qao=o(" (DPR model)"),Hao=l(),sp=a("li"),fK=a("strong"),Uao=o("electra"),Jao=o(" \u2014 "),XR=a("a"),Yao=o("ElectraModel"),Kao=o(" (ELECTRA model)"),Zao=l(),lp=a("li"),mK=a("strong"),eno=o("flaubert"),ono=o(" \u2014 "),VR=a("a"),rno=o("FlaubertModel"),tno=o(" (FlauBERT model)"),ano=l(),ip=a("li"),gK=a("strong"),nno=o("fnet"),sno=o(" \u2014 "),zR=a("a"),lno=o("FNetModel"),ino=o(" (FNet model)"),dno=l(),dp=a("li"),hK=a("strong"),cno=o("fsmt"),fno=o(" \u2014 "),WR=a("a"),mno=o("FSMTModel"),gno=o(" (FairSeq Machine-Translation model)"),hno=l(),qs=a("li"),pK=a("strong"),pno=o("funnel"),_no=o(" \u2014 "),QR=a("a"),uno=o("FunnelModel"),bno=o(" or "),HR=a("a"),vno=o("FunnelBaseModel"),Tno=o(" (Funnel Transformer model)"),Fno=l(),cp=a("li"),_K=a("strong"),Cno=o("gpt2"),Mno=o(" \u2014 "),UR=a("a"),Eno=o("GPT2Model"),yno=o(" (OpenAI GPT-2 model)"),wno=l(),fp=a("li"),uK=a("strong"),Ano=o("gpt_neo"),Lno=o(" \u2014 "),JR=a("a"),Bno=o("GPTNeoModel"),xno=o(" (GPT Neo model)"),kno=l(),mp=a("li"),bK=a("strong"),Rno=o("gptj"),Sno=o(" \u2014 "),YR=a("a"),Pno=o("GPTJModel"),$no=o(" (GPT-J model)"),Ino=l(),gp=a("li"),vK=a("strong"),jno=o("hubert"),Dno=o(" \u2014 "),KR=a("a"),Nno=o("HubertModel"),qno=o(" (Hubert model)"),Ono=l(),hp=a("li"),TK=a("strong"),Gno=o("ibert"),Xno=o(" \u2014 "),ZR=a("a"),Vno=o("IBertModel"),zno=o(" (I-BERT model)"),Wno=l(),pp=a("li"),FK=a("strong"),Qno=o("imagegpt"),Hno=o(" \u2014 "),eS=a("a"),Uno=o("ImageGPTModel"),Jno=o(" (ImageGPT model)"),Yno=l(),_p=a("li"),CK=a("strong"),Kno=o("layoutlm"),Zno=o(" \u2014 "),oS=a("a"),eso=o("LayoutLMModel"),oso=o(" (LayoutLM model)"),rso=l(),up=a("li"),MK=a("strong"),tso=o("layoutlmv2"),aso=o(" \u2014 "),rS=a("a"),nso=o("LayoutLMv2Model"),sso=o(" (LayoutLMv2 model)"),lso=l(),bp=a("li"),EK=a("strong"),iso=o("led"),dso=o(" \u2014 "),tS=a("a"),cso=o("LEDModel"),fso=o(" (LED model)"),mso=l(),vp=a("li"),yK=a("strong"),gso=o("longformer"),hso=o(" \u2014 "),aS=a("a"),pso=o("LongformerModel"),_so=o(" (Longformer model)"),uso=l(),Tp=a("li"),wK=a("strong"),bso=o("luke"),vso=o(" \u2014 "),nS=a("a"),Tso=o("LukeModel"),Fso=o(" (LUKE model)"),Cso=l(),Fp=a("li"),AK=a("strong"),Mso=o("lxmert"),Eso=o(" \u2014 "),sS=a("a"),yso=o("LxmertModel"),wso=o(" (LXMERT model)"),Aso=l(),Cp=a("li"),LK=a("strong"),Lso=o("m2m_100"),Bso=o(" \u2014 "),lS=a("a"),xso=o("M2M100Model"),kso=o(" (M2M100 model)"),Rso=l(),Mp=a("li"),BK=a("strong"),Sso=o("marian"),Pso=o(" \u2014 "),iS=a("a"),$so=o("MarianModel"),Iso=o(" (Marian model)"),jso=l(),Ep=a("li"),xK=a("strong"),Dso=o("maskformer"),Nso=o(" \u2014 "),dS=a("a"),qso=o("MaskFormerModel"),Oso=o(" (MaskFormer model)"),Gso=l(),yp=a("li"),kK=a("strong"),Xso=o("mbart"),Vso=o(" \u2014 "),cS=a("a"),zso=o("MBartModel"),Wso=o(" (mBART model)"),Qso=l(),wp=a("li"),RK=a("strong"),Hso=o("megatron-bert"),Uso=o(" \u2014 "),fS=a("a"),Jso=o("MegatronBertModel"),Yso=o(" (MegatronBert model)"),Kso=l(),Ap=a("li"),SK=a("strong"),Zso=o("mobilebert"),elo=o(" \u2014 "),mS=a("a"),olo=o("MobileBertModel"),rlo=o(" (MobileBERT model)"),tlo=l(),Lp=a("li"),PK=a("strong"),alo=o("mpnet"),nlo=o(" \u2014 "),gS=a("a"),slo=o("MPNetModel"),llo=o(" (MPNet model)"),ilo=l(),Bp=a("li"),$K=a("strong"),dlo=o("mt5"),clo=o(" \u2014 "),hS=a("a"),flo=o("MT5Model"),mlo=o(" (mT5 model)"),glo=l(),xp=a("li"),IK=a("strong"),hlo=o("nystromformer"),plo=o(" \u2014 "),pS=a("a"),_lo=o("NystromformerModel"),ulo=o(" (Nystromformer model)"),blo=l(),kp=a("li"),jK=a("strong"),vlo=o("openai-gpt"),Tlo=o(" \u2014 "),_S=a("a"),Flo=o("OpenAIGPTModel"),Clo=o(" (OpenAI GPT model)"),Mlo=l(),Rp=a("li"),DK=a("strong"),Elo=o("pegasus"),ylo=o(" \u2014 "),uS=a("a"),wlo=o("PegasusModel"),Alo=o(" (Pegasus model)"),Llo=l(),Sp=a("li"),NK=a("strong"),Blo=o("perceiver"),xlo=o(" \u2014 "),bS=a("a"),klo=o("PerceiverModel"),Rlo=o(" (Perceiver model)"),Slo=l(),Pp=a("li"),qK=a("strong"),Plo=o("plbart"),$lo=o(" \u2014 "),vS=a("a"),Ilo=o("PLBartModel"),jlo=o(" (PLBart model)"),Dlo=l(),$p=a("li"),OK=a("strong"),Nlo=o("poolformer"),qlo=o(" \u2014 "),TS=a("a"),Olo=o("PoolFormerModel"),Glo=o(" (PoolFormer model)"),Xlo=l(),Ip=a("li"),GK=a("strong"),Vlo=o("prophetnet"),zlo=o(" \u2014 "),FS=a("a"),Wlo=o("ProphetNetModel"),Qlo=o(" (ProphetNet model)"),Hlo=l(),jp=a("li"),XK=a("strong"),Ulo=o("qdqbert"),Jlo=o(" \u2014 "),CS=a("a"),Ylo=o("QDQBertModel"),Klo=o(" (QDQBert model)"),Zlo=l(),Dp=a("li"),VK=a("strong"),eio=o("reformer"),oio=o(" \u2014 "),MS=a("a"),rio=o("ReformerModel"),tio=o(" (Reformer model)"),aio=l(),Np=a("li"),zK=a("strong"),nio=o("rembert"),sio=o(" \u2014 "),ES=a("a"),lio=o("RemBertModel"),iio=o(" (RemBERT model)"),dio=l(),qp=a("li"),WK=a("strong"),cio=o("retribert"),fio=o(" \u2014 "),yS=a("a"),mio=o("RetriBertModel"),gio=o(" (RetriBERT model)"),hio=l(),Op=a("li"),QK=a("strong"),pio=o("roberta"),_io=o(" \u2014 "),wS=a("a"),uio=o("RobertaModel"),bio=o(" (RoBERTa model)"),vio=l(),Gp=a("li"),HK=a("strong"),Tio=o("roformer"),Fio=o(" \u2014 "),AS=a("a"),Cio=o("RoFormerModel"),Mio=o(" (RoFormer model)"),Eio=l(),Xp=a("li"),UK=a("strong"),yio=o("segformer"),wio=o(" \u2014 "),LS=a("a"),Aio=o("SegformerModel"),Lio=o(" (SegFormer model)"),Bio=l(),Vp=a("li"),JK=a("strong"),xio=o("sew"),kio=o(" \u2014 "),BS=a("a"),Rio=o("SEWModel"),Sio=o(" (SEW model)"),Pio=l(),zp=a("li"),YK=a("strong"),$io=o("sew-d"),Iio=o(" \u2014 "),xS=a("a"),jio=o("SEWDModel"),Dio=o(" (SEW-D model)"),Nio=l(),Wp=a("li"),KK=a("strong"),qio=o("speech_to_text"),Oio=o(" \u2014 "),kS=a("a"),Gio=o("Speech2TextModel"),Xio=o(" (Speech2Text model)"),Vio=l(),Qp=a("li"),ZK=a("strong"),zio=o("splinter"),Wio=o(" \u2014 "),RS=a("a"),Qio=o("SplinterModel"),Hio=o(" (Splinter model)"),Uio=l(),Hp=a("li"),eZ=a("strong"),Jio=o("squeezebert"),Yio=o(" \u2014 "),SS=a("a"),Kio=o("SqueezeBertModel"),Zio=o(" (SqueezeBERT model)"),edo=l(),Up=a("li"),oZ=a("strong"),odo=o("swin"),rdo=o(" \u2014 "),PS=a("a"),tdo=o("SwinModel"),ado=o(" (Swin model)"),ndo=l(),Jp=a("li"),rZ=a("strong"),sdo=o("t5"),ldo=o(" \u2014 "),$S=a("a"),ido=o("T5Model"),ddo=o(" (T5 model)"),cdo=l(),Yp=a("li"),tZ=a("strong"),fdo=o("tapas"),mdo=o(" \u2014 "),IS=a("a"),gdo=o("TapasModel"),hdo=o(" (TAPAS model)"),pdo=l(),Kp=a("li"),aZ=a("strong"),_do=o("transfo-xl"),udo=o(" \u2014 "),jS=a("a"),bdo=o("TransfoXLModel"),vdo=o(" (Transformer-XL model)"),Tdo=l(),Zp=a("li"),nZ=a("strong"),Fdo=o("unispeech"),Cdo=o(" \u2014 "),DS=a("a"),Mdo=o("UniSpeechModel"),Edo=o(" (UniSpeech model)"),ydo=l(),e_=a("li"),sZ=a("strong"),wdo=o("unispeech-sat"),Ado=o(" \u2014 "),NS=a("a"),Ldo=o("UniSpeechSatModel"),Bdo=o(" (UniSpeechSat model)"),xdo=l(),o_=a("li"),lZ=a("strong"),kdo=o("vilt"),Rdo=o(" \u2014 "),qS=a("a"),Sdo=o("ViltModel"),Pdo=o(" (ViLT model)"),$do=l(),r_=a("li"),iZ=a("strong"),Ido=o("vision-text-dual-encoder"),jdo=o(" \u2014 "),OS=a("a"),Ddo=o("VisionTextDualEncoderModel"),Ndo=o(" (VisionTextDualEncoder model)"),qdo=l(),t_=a("li"),dZ=a("strong"),Odo=o("visual_bert"),Gdo=o(" \u2014 "),GS=a("a"),Xdo=o("VisualBertModel"),Vdo=o(" (VisualBert model)"),zdo=l(),a_=a("li"),cZ=a("strong"),Wdo=o("vit"),Qdo=o(" \u2014 "),XS=a("a"),Hdo=o("ViTModel"),Udo=o(" (ViT model)"),Jdo=l(),n_=a("li"),fZ=a("strong"),Ydo=o("vit_mae"),Kdo=o(" \u2014 "),VS=a("a"),Zdo=o("ViTMAEModel"),eco=o(" (ViTMAE model)"),oco=l(),s_=a("li"),mZ=a("strong"),rco=o("wav2vec2"),tco=o(" \u2014 "),zS=a("a"),aco=o("Wav2Vec2Model"),nco=o(" (Wav2Vec2 model)"),sco=l(),l_=a("li"),gZ=a("strong"),lco=o("wavlm"),ico=o(" \u2014 "),WS=a("a"),dco=o("WavLMModel"),cco=o(" (WavLM model)"),fco=l(),i_=a("li"),hZ=a("strong"),mco=o("xglm"),gco=o(" \u2014 "),QS=a("a"),hco=o("XGLMModel"),pco=o(" (XGLM model)"),_co=l(),d_=a("li"),pZ=a("strong"),uco=o("xlm"),bco=o(" \u2014 "),HS=a("a"),vco=o("XLMModel"),Tco=o(" (XLM model)"),Fco=l(),c_=a("li"),_Z=a("strong"),Cco=o("xlm-prophetnet"),Mco=o(" \u2014 "),US=a("a"),Eco=o("XLMProphetNetModel"),yco=o(" (XLMProphetNet model)"),wco=l(),f_=a("li"),uZ=a("strong"),Aco=o("xlm-roberta"),Lco=o(" \u2014 "),JS=a("a"),Bco=o("XLMRobertaModel"),xco=o(" (XLM-RoBERTa model)"),kco=l(),m_=a("li"),bZ=a("strong"),Rco=o("xlm-roberta-xl"),Sco=o(" \u2014 "),YS=a("a"),Pco=o("XLMRobertaXLModel"),$co=o(" (XLM-RoBERTa-XL model)"),Ico=l(),g_=a("li"),vZ=a("strong"),jco=o("xlnet"),Dco=o(" \u2014 "),KS=a("a"),Nco=o("XLNetModel"),qco=o(" (XLNet model)"),Oco=l(),h_=a("li"),TZ=a("strong"),Gco=o("yoso"),Xco=o(" \u2014 "),ZS=a("a"),Vco=o("YosoModel"),zco=o(" (YOSO model)"),Wco=l(),p_=a("p"),Qco=o("The model is set in evaluation mode by default using "),FZ=a("code"),Hco=o("model.eval()"),Uco=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CZ=a("code"),Jco=o("model.train()"),Yco=l(),MZ=a("p"),Kco=o("Examples:"),Zco=l(),f(k3.$$.fragment),hxe=l(),ed=a("h2"),__=a("a"),EZ=a("span"),f(R3.$$.fragment),efo=l(),yZ=a("span"),ofo=o("AutoModelForPreTraining"),pxe=l(),Yo=a("div"),f(S3.$$.fragment),rfo=l(),od=a("p"),tfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=a("code"),afo=o("from_pretrained()"),nfo=o("class method or the "),AZ=a("code"),sfo=o("from_config()"),lfo=o(`class
method.`),ifo=l(),P3=a("p"),dfo=o("This class cannot be instantiated directly using "),LZ=a("code"),cfo=o("__init__()"),ffo=o(" (throws an error)."),mfo=l(),zr=a("div"),f($3.$$.fragment),gfo=l(),BZ=a("p"),hfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pfo=l(),rd=a("p"),_fo=o(`Note:
Loading a model from its configuration file does `),xZ=a("strong"),ufo=o("not"),bfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("code"),vfo=o("from_pretrained()"),Tfo=o("to load the model weights."),Ffo=l(),RZ=a("p"),Cfo=o("Examples:"),Mfo=l(),f(I3.$$.fragment),Efo=l(),De=a("div"),f(j3.$$.fragment),yfo=l(),SZ=a("p"),wfo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Afo=l(),Va=a("p"),Lfo=o("The model class to instantiate is selected based on the "),PZ=a("code"),Bfo=o("model_type"),xfo=o(` property of the config object (either
passed as an argument or loaded from `),$Z=a("code"),kfo=o("pretrained_model_name_or_path"),Rfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IZ=a("code"),Sfo=o("pretrained_model_name_or_path"),Pfo=o(":"),$fo=l(),k=a("ul"),u_=a("li"),jZ=a("strong"),Ifo=o("albert"),jfo=o(" \u2014 "),eP=a("a"),Dfo=o("AlbertForPreTraining"),Nfo=o(" (ALBERT model)"),qfo=l(),b_=a("li"),DZ=a("strong"),Ofo=o("bart"),Gfo=o(" \u2014 "),oP=a("a"),Xfo=o("BartForConditionalGeneration"),Vfo=o(" (BART model)"),zfo=l(),v_=a("li"),NZ=a("strong"),Wfo=o("bert"),Qfo=o(" \u2014 "),rP=a("a"),Hfo=o("BertForPreTraining"),Ufo=o(" (BERT model)"),Jfo=l(),T_=a("li"),qZ=a("strong"),Yfo=o("big_bird"),Kfo=o(" \u2014 "),tP=a("a"),Zfo=o("BigBirdForPreTraining"),emo=o(" (BigBird model)"),omo=l(),F_=a("li"),OZ=a("strong"),rmo=o("camembert"),tmo=o(" \u2014 "),aP=a("a"),amo=o("CamembertForMaskedLM"),nmo=o(" (CamemBERT model)"),smo=l(),C_=a("li"),GZ=a("strong"),lmo=o("ctrl"),imo=o(" \u2014 "),nP=a("a"),dmo=o("CTRLLMHeadModel"),cmo=o(" (CTRL model)"),fmo=l(),M_=a("li"),XZ=a("strong"),mmo=o("data2vec-text"),gmo=o(" \u2014 "),sP=a("a"),hmo=o("Data2VecTextForMaskedLM"),pmo=o(" (Data2VecText model)"),_mo=l(),E_=a("li"),VZ=a("strong"),umo=o("deberta"),bmo=o(" \u2014 "),lP=a("a"),vmo=o("DebertaForMaskedLM"),Tmo=o(" (DeBERTa model)"),Fmo=l(),y_=a("li"),zZ=a("strong"),Cmo=o("deberta-v2"),Mmo=o(" \u2014 "),iP=a("a"),Emo=o("DebertaV2ForMaskedLM"),ymo=o(" (DeBERTa-v2 model)"),wmo=l(),w_=a("li"),WZ=a("strong"),Amo=o("distilbert"),Lmo=o(" \u2014 "),dP=a("a"),Bmo=o("DistilBertForMaskedLM"),xmo=o(" (DistilBERT model)"),kmo=l(),A_=a("li"),QZ=a("strong"),Rmo=o("electra"),Smo=o(" \u2014 "),cP=a("a"),Pmo=o("ElectraForPreTraining"),$mo=o(" (ELECTRA model)"),Imo=l(),L_=a("li"),HZ=a("strong"),jmo=o("flaubert"),Dmo=o(" \u2014 "),fP=a("a"),Nmo=o("FlaubertWithLMHeadModel"),qmo=o(" (FlauBERT model)"),Omo=l(),B_=a("li"),UZ=a("strong"),Gmo=o("fnet"),Xmo=o(" \u2014 "),mP=a("a"),Vmo=o("FNetForPreTraining"),zmo=o(" (FNet model)"),Wmo=l(),x_=a("li"),JZ=a("strong"),Qmo=o("fsmt"),Hmo=o(" \u2014 "),gP=a("a"),Umo=o("FSMTForConditionalGeneration"),Jmo=o(" (FairSeq Machine-Translation model)"),Ymo=l(),k_=a("li"),YZ=a("strong"),Kmo=o("funnel"),Zmo=o(" \u2014 "),hP=a("a"),ego=o("FunnelForPreTraining"),ogo=o(" (Funnel Transformer model)"),rgo=l(),R_=a("li"),KZ=a("strong"),tgo=o("gpt2"),ago=o(" \u2014 "),pP=a("a"),ngo=o("GPT2LMHeadModel"),sgo=o(" (OpenAI GPT-2 model)"),lgo=l(),S_=a("li"),ZZ=a("strong"),igo=o("ibert"),dgo=o(" \u2014 "),_P=a("a"),cgo=o("IBertForMaskedLM"),fgo=o(" (I-BERT model)"),mgo=l(),P_=a("li"),eee=a("strong"),ggo=o("layoutlm"),hgo=o(" \u2014 "),uP=a("a"),pgo=o("LayoutLMForMaskedLM"),_go=o(" (LayoutLM model)"),ugo=l(),$_=a("li"),oee=a("strong"),bgo=o("longformer"),vgo=o(" \u2014 "),bP=a("a"),Tgo=o("LongformerForMaskedLM"),Fgo=o(" (Longformer model)"),Cgo=l(),I_=a("li"),ree=a("strong"),Mgo=o("lxmert"),Ego=o(" \u2014 "),vP=a("a"),ygo=o("LxmertForPreTraining"),wgo=o(" (LXMERT model)"),Ago=l(),j_=a("li"),tee=a("strong"),Lgo=o("megatron-bert"),Bgo=o(" \u2014 "),TP=a("a"),xgo=o("MegatronBertForPreTraining"),kgo=o(" (MegatronBert model)"),Rgo=l(),D_=a("li"),aee=a("strong"),Sgo=o("mobilebert"),Pgo=o(" \u2014 "),FP=a("a"),$go=o("MobileBertForPreTraining"),Igo=o(" (MobileBERT model)"),jgo=l(),N_=a("li"),nee=a("strong"),Dgo=o("mpnet"),Ngo=o(" \u2014 "),CP=a("a"),qgo=o("MPNetForMaskedLM"),Ogo=o(" (MPNet model)"),Ggo=l(),q_=a("li"),see=a("strong"),Xgo=o("openai-gpt"),Vgo=o(" \u2014 "),MP=a("a"),zgo=o("OpenAIGPTLMHeadModel"),Wgo=o(" (OpenAI GPT model)"),Qgo=l(),O_=a("li"),lee=a("strong"),Hgo=o("retribert"),Ugo=o(" \u2014 "),EP=a("a"),Jgo=o("RetriBertModel"),Ygo=o(" (RetriBERT model)"),Kgo=l(),G_=a("li"),iee=a("strong"),Zgo=o("roberta"),eho=o(" \u2014 "),yP=a("a"),oho=o("RobertaForMaskedLM"),rho=o(" (RoBERTa model)"),tho=l(),X_=a("li"),dee=a("strong"),aho=o("squeezebert"),nho=o(" \u2014 "),wP=a("a"),sho=o("SqueezeBertForMaskedLM"),lho=o(" (SqueezeBERT model)"),iho=l(),V_=a("li"),cee=a("strong"),dho=o("t5"),cho=o(" \u2014 "),AP=a("a"),fho=o("T5ForConditionalGeneration"),mho=o(" (T5 model)"),gho=l(),z_=a("li"),fee=a("strong"),hho=o("tapas"),pho=o(" \u2014 "),LP=a("a"),_ho=o("TapasForMaskedLM"),uho=o(" (TAPAS model)"),bho=l(),W_=a("li"),mee=a("strong"),vho=o("transfo-xl"),Tho=o(" \u2014 "),BP=a("a"),Fho=o("TransfoXLLMHeadModel"),Cho=o(" (Transformer-XL model)"),Mho=l(),Q_=a("li"),gee=a("strong"),Eho=o("unispeech"),yho=o(" \u2014 "),xP=a("a"),who=o("UniSpeechForPreTraining"),Aho=o(" (UniSpeech model)"),Lho=l(),H_=a("li"),hee=a("strong"),Bho=o("unispeech-sat"),xho=o(" \u2014 "),kP=a("a"),kho=o("UniSpeechSatForPreTraining"),Rho=o(" (UniSpeechSat model)"),Sho=l(),U_=a("li"),pee=a("strong"),Pho=o("visual_bert"),$ho=o(" \u2014 "),RP=a("a"),Iho=o("VisualBertForPreTraining"),jho=o(" (VisualBert model)"),Dho=l(),J_=a("li"),_ee=a("strong"),Nho=o("vit_mae"),qho=o(" \u2014 "),SP=a("a"),Oho=o("ViTMAEForPreTraining"),Gho=o(" (ViTMAE model)"),Xho=l(),Y_=a("li"),uee=a("strong"),Vho=o("wav2vec2"),zho=o(" \u2014 "),PP=a("a"),Who=o("Wav2Vec2ForPreTraining"),Qho=o(" (Wav2Vec2 model)"),Hho=l(),K_=a("li"),bee=a("strong"),Uho=o("xlm"),Jho=o(" \u2014 "),$P=a("a"),Yho=o("XLMWithLMHeadModel"),Kho=o(" (XLM model)"),Zho=l(),Z_=a("li"),vee=a("strong"),epo=o("xlm-roberta"),opo=o(" \u2014 "),IP=a("a"),rpo=o("XLMRobertaForMaskedLM"),tpo=o(" (XLM-RoBERTa model)"),apo=l(),eu=a("li"),Tee=a("strong"),npo=o("xlm-roberta-xl"),spo=o(" \u2014 "),jP=a("a"),lpo=o("XLMRobertaXLForMaskedLM"),ipo=o(" (XLM-RoBERTa-XL model)"),dpo=l(),ou=a("li"),Fee=a("strong"),cpo=o("xlnet"),fpo=o(" \u2014 "),DP=a("a"),mpo=o("XLNetLMHeadModel"),gpo=o(" (XLNet model)"),hpo=l(),ru=a("p"),ppo=o("The model is set in evaluation mode by default using "),Cee=a("code"),_po=o("model.eval()"),upo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mee=a("code"),bpo=o("model.train()"),vpo=l(),Eee=a("p"),Tpo=o("Examples:"),Fpo=l(),f(D3.$$.fragment),_xe=l(),td=a("h2"),tu=a("a"),yee=a("span"),f(N3.$$.fragment),Cpo=l(),wee=a("span"),Mpo=o("AutoModelForCausalLM"),uxe=l(),Ko=a("div"),f(q3.$$.fragment),Epo=l(),ad=a("p"),ypo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=a("code"),wpo=o("from_pretrained()"),Apo=o("class method or the "),Lee=a("code"),Lpo=o("from_config()"),Bpo=o(`class
method.`),xpo=l(),O3=a("p"),kpo=o("This class cannot be instantiated directly using "),Bee=a("code"),Rpo=o("__init__()"),Spo=o(" (throws an error)."),Ppo=l(),Wr=a("div"),f(G3.$$.fragment),$po=l(),xee=a("p"),Ipo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jpo=l(),nd=a("p"),Dpo=o(`Note:
Loading a model from its configuration file does `),kee=a("strong"),Npo=o("not"),qpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=a("code"),Opo=o("from_pretrained()"),Gpo=o("to load the model weights."),Xpo=l(),See=a("p"),Vpo=o("Examples:"),zpo=l(),f(X3.$$.fragment),Wpo=l(),Ne=a("div"),f(V3.$$.fragment),Qpo=l(),Pee=a("p"),Hpo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Upo=l(),za=a("p"),Jpo=o("The model class to instantiate is selected based on the "),$ee=a("code"),Ypo=o("model_type"),Kpo=o(` property of the config object (either
passed as an argument or loaded from `),Iee=a("code"),Zpo=o("pretrained_model_name_or_path"),e_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jee=a("code"),o_o=o("pretrained_model_name_or_path"),r_o=o(":"),t_o=l(),$=a("ul"),au=a("li"),Dee=a("strong"),a_o=o("bart"),n_o=o(" \u2014 "),NP=a("a"),s_o=o("BartForCausalLM"),l_o=o(" (BART model)"),i_o=l(),nu=a("li"),Nee=a("strong"),d_o=o("bert"),c_o=o(" \u2014 "),qP=a("a"),f_o=o("BertLMHeadModel"),m_o=o(" (BERT model)"),g_o=l(),su=a("li"),qee=a("strong"),h_o=o("bert-generation"),p_o=o(" \u2014 "),OP=a("a"),__o=o("BertGenerationDecoder"),u_o=o(" (Bert Generation model)"),b_o=l(),lu=a("li"),Oee=a("strong"),v_o=o("big_bird"),T_o=o(" \u2014 "),GP=a("a"),F_o=o("BigBirdForCausalLM"),C_o=o(" (BigBird model)"),M_o=l(),iu=a("li"),Gee=a("strong"),E_o=o("bigbird_pegasus"),y_o=o(" \u2014 "),XP=a("a"),w_o=o("BigBirdPegasusForCausalLM"),A_o=o(" (BigBirdPegasus model)"),L_o=l(),du=a("li"),Xee=a("strong"),B_o=o("blenderbot"),x_o=o(" \u2014 "),VP=a("a"),k_o=o("BlenderbotForCausalLM"),R_o=o(" (Blenderbot model)"),S_o=l(),cu=a("li"),Vee=a("strong"),P_o=o("blenderbot-small"),$_o=o(" \u2014 "),zP=a("a"),I_o=o("BlenderbotSmallForCausalLM"),j_o=o(" (BlenderbotSmall model)"),D_o=l(),fu=a("li"),zee=a("strong"),N_o=o("camembert"),q_o=o(" \u2014 "),WP=a("a"),O_o=o("CamembertForCausalLM"),G_o=o(" (CamemBERT model)"),X_o=l(),mu=a("li"),Wee=a("strong"),V_o=o("ctrl"),z_o=o(" \u2014 "),QP=a("a"),W_o=o("CTRLLMHeadModel"),Q_o=o(" (CTRL model)"),H_o=l(),gu=a("li"),Qee=a("strong"),U_o=o("data2vec-text"),J_o=o(" \u2014 "),HP=a("a"),Y_o=o("Data2VecTextForCausalLM"),K_o=o(" (Data2VecText model)"),Z_o=l(),hu=a("li"),Hee=a("strong"),euo=o("electra"),ouo=o(" \u2014 "),UP=a("a"),ruo=o("ElectraForCausalLM"),tuo=o(" (ELECTRA model)"),auo=l(),pu=a("li"),Uee=a("strong"),nuo=o("gpt2"),suo=o(" \u2014 "),JP=a("a"),luo=o("GPT2LMHeadModel"),iuo=o(" (OpenAI GPT-2 model)"),duo=l(),_u=a("li"),Jee=a("strong"),cuo=o("gpt_neo"),fuo=o(" \u2014 "),YP=a("a"),muo=o("GPTNeoForCausalLM"),guo=o(" (GPT Neo model)"),huo=l(),uu=a("li"),Yee=a("strong"),puo=o("gptj"),_uo=o(" \u2014 "),KP=a("a"),uuo=o("GPTJForCausalLM"),buo=o(" (GPT-J model)"),vuo=l(),bu=a("li"),Kee=a("strong"),Tuo=o("marian"),Fuo=o(" \u2014 "),ZP=a("a"),Cuo=o("MarianForCausalLM"),Muo=o(" (Marian model)"),Euo=l(),vu=a("li"),Zee=a("strong"),yuo=o("mbart"),wuo=o(" \u2014 "),e$=a("a"),Auo=o("MBartForCausalLM"),Luo=o(" (mBART model)"),Buo=l(),Tu=a("li"),eoe=a("strong"),xuo=o("megatron-bert"),kuo=o(" \u2014 "),o$=a("a"),Ruo=o("MegatronBertForCausalLM"),Suo=o(" (MegatronBert model)"),Puo=l(),Fu=a("li"),ooe=a("strong"),$uo=o("openai-gpt"),Iuo=o(" \u2014 "),r$=a("a"),juo=o("OpenAIGPTLMHeadModel"),Duo=o(" (OpenAI GPT model)"),Nuo=l(),Cu=a("li"),roe=a("strong"),quo=o("pegasus"),Ouo=o(" \u2014 "),t$=a("a"),Guo=o("PegasusForCausalLM"),Xuo=o(" (Pegasus model)"),Vuo=l(),Mu=a("li"),toe=a("strong"),zuo=o("plbart"),Wuo=o(" \u2014 "),a$=a("a"),Quo=o("PLBartForCausalLM"),Huo=o(" (PLBart model)"),Uuo=l(),Eu=a("li"),aoe=a("strong"),Juo=o("prophetnet"),Yuo=o(" \u2014 "),n$=a("a"),Kuo=o("ProphetNetForCausalLM"),Zuo=o(" (ProphetNet model)"),e5o=l(),yu=a("li"),noe=a("strong"),o5o=o("qdqbert"),r5o=o(" \u2014 "),s$=a("a"),t5o=o("QDQBertLMHeadModel"),a5o=o(" (QDQBert model)"),n5o=l(),wu=a("li"),soe=a("strong"),s5o=o("reformer"),l5o=o(" \u2014 "),l$=a("a"),i5o=o("ReformerModelWithLMHead"),d5o=o(" (Reformer model)"),c5o=l(),Au=a("li"),loe=a("strong"),f5o=o("rembert"),m5o=o(" \u2014 "),i$=a("a"),g5o=o("RemBertForCausalLM"),h5o=o(" (RemBERT model)"),p5o=l(),Lu=a("li"),ioe=a("strong"),_5o=o("roberta"),u5o=o(" \u2014 "),d$=a("a"),b5o=o("RobertaForCausalLM"),v5o=o(" (RoBERTa model)"),T5o=l(),Bu=a("li"),doe=a("strong"),F5o=o("roformer"),C5o=o(" \u2014 "),c$=a("a"),M5o=o("RoFormerForCausalLM"),E5o=o(" (RoFormer model)"),y5o=l(),xu=a("li"),coe=a("strong"),w5o=o("speech_to_text_2"),A5o=o(" \u2014 "),f$=a("a"),L5o=o("Speech2Text2ForCausalLM"),B5o=o(" (Speech2Text2 model)"),x5o=l(),ku=a("li"),foe=a("strong"),k5o=o("transfo-xl"),R5o=o(" \u2014 "),m$=a("a"),S5o=o("TransfoXLLMHeadModel"),P5o=o(" (Transformer-XL model)"),$5o=l(),Ru=a("li"),moe=a("strong"),I5o=o("trocr"),j5o=o(" \u2014 "),g$=a("a"),D5o=o("TrOCRForCausalLM"),N5o=o(" (TrOCR model)"),q5o=l(),Su=a("li"),goe=a("strong"),O5o=o("xglm"),G5o=o(" \u2014 "),h$=a("a"),X5o=o("XGLMForCausalLM"),V5o=o(" (XGLM model)"),z5o=l(),Pu=a("li"),hoe=a("strong"),W5o=o("xlm"),Q5o=o(" \u2014 "),p$=a("a"),H5o=o("XLMWithLMHeadModel"),U5o=o(" (XLM model)"),J5o=l(),$u=a("li"),poe=a("strong"),Y5o=o("xlm-prophetnet"),K5o=o(" \u2014 "),_$=a("a"),Z5o=o("XLMProphetNetForCausalLM"),e2o=o(" (XLMProphetNet model)"),o2o=l(),Iu=a("li"),_oe=a("strong"),r2o=o("xlm-roberta"),t2o=o(" \u2014 "),u$=a("a"),a2o=o("XLMRobertaForCausalLM"),n2o=o(" (XLM-RoBERTa model)"),s2o=l(),ju=a("li"),uoe=a("strong"),l2o=o("xlm-roberta-xl"),i2o=o(" \u2014 "),b$=a("a"),d2o=o("XLMRobertaXLForCausalLM"),c2o=o(" (XLM-RoBERTa-XL model)"),f2o=l(),Du=a("li"),boe=a("strong"),m2o=o("xlnet"),g2o=o(" \u2014 "),v$=a("a"),h2o=o("XLNetLMHeadModel"),p2o=o(" (XLNet model)"),_2o=l(),Nu=a("p"),u2o=o("The model is set in evaluation mode by default using "),voe=a("code"),b2o=o("model.eval()"),v2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Toe=a("code"),T2o=o("model.train()"),F2o=l(),Foe=a("p"),C2o=o("Examples:"),M2o=l(),f(z3.$$.fragment),bxe=l(),sd=a("h2"),qu=a("a"),Coe=a("span"),f(W3.$$.fragment),E2o=l(),Moe=a("span"),y2o=o("AutoModelForMaskedLM"),vxe=l(),Zo=a("div"),f(Q3.$$.fragment),w2o=l(),ld=a("p"),A2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eoe=a("code"),L2o=o("from_pretrained()"),B2o=o("class method or the "),yoe=a("code"),x2o=o("from_config()"),k2o=o(`class
method.`),R2o=l(),H3=a("p"),S2o=o("This class cannot be instantiated directly using "),woe=a("code"),P2o=o("__init__()"),$2o=o(" (throws an error)."),I2o=l(),Qr=a("div"),f(U3.$$.fragment),j2o=l(),Aoe=a("p"),D2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),N2o=l(),id=a("p"),q2o=o(`Note:
Loading a model from its configuration file does `),Loe=a("strong"),O2o=o("not"),G2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=a("code"),X2o=o("from_pretrained()"),V2o=o("to load the model weights."),z2o=l(),xoe=a("p"),W2o=o("Examples:"),Q2o=l(),f(J3.$$.fragment),H2o=l(),qe=a("div"),f(Y3.$$.fragment),U2o=l(),koe=a("p"),J2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Y2o=l(),Wa=a("p"),K2o=o("The model class to instantiate is selected based on the "),Roe=a("code"),Z2o=o("model_type"),e1o=o(` property of the config object (either
passed as an argument or loaded from `),Soe=a("code"),o1o=o("pretrained_model_name_or_path"),r1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Poe=a("code"),t1o=o("pretrained_model_name_or_path"),a1o=o(":"),n1o=l(),I=a("ul"),Ou=a("li"),$oe=a("strong"),s1o=o("albert"),l1o=o(" \u2014 "),T$=a("a"),i1o=o("AlbertForMaskedLM"),d1o=o(" (ALBERT model)"),c1o=l(),Gu=a("li"),Ioe=a("strong"),f1o=o("bart"),m1o=o(" \u2014 "),F$=a("a"),g1o=o("BartForConditionalGeneration"),h1o=o(" (BART model)"),p1o=l(),Xu=a("li"),joe=a("strong"),_1o=o("bert"),u1o=o(" \u2014 "),C$=a("a"),b1o=o("BertForMaskedLM"),v1o=o(" (BERT model)"),T1o=l(),Vu=a("li"),Doe=a("strong"),F1o=o("big_bird"),C1o=o(" \u2014 "),M$=a("a"),M1o=o("BigBirdForMaskedLM"),E1o=o(" (BigBird model)"),y1o=l(),zu=a("li"),Noe=a("strong"),w1o=o("camembert"),A1o=o(" \u2014 "),E$=a("a"),L1o=o("CamembertForMaskedLM"),B1o=o(" (CamemBERT model)"),x1o=l(),Wu=a("li"),qoe=a("strong"),k1o=o("convbert"),R1o=o(" \u2014 "),y$=a("a"),S1o=o("ConvBertForMaskedLM"),P1o=o(" (ConvBERT model)"),$1o=l(),Qu=a("li"),Ooe=a("strong"),I1o=o("data2vec-text"),j1o=o(" \u2014 "),w$=a("a"),D1o=o("Data2VecTextForMaskedLM"),N1o=o(" (Data2VecText model)"),q1o=l(),Hu=a("li"),Goe=a("strong"),O1o=o("deberta"),G1o=o(" \u2014 "),A$=a("a"),X1o=o("DebertaForMaskedLM"),V1o=o(" (DeBERTa model)"),z1o=l(),Uu=a("li"),Xoe=a("strong"),W1o=o("deberta-v2"),Q1o=o(" \u2014 "),L$=a("a"),H1o=o("DebertaV2ForMaskedLM"),U1o=o(" (DeBERTa-v2 model)"),J1o=l(),Ju=a("li"),Voe=a("strong"),Y1o=o("distilbert"),K1o=o(" \u2014 "),B$=a("a"),Z1o=o("DistilBertForMaskedLM"),ebo=o(" (DistilBERT model)"),obo=l(),Yu=a("li"),zoe=a("strong"),rbo=o("electra"),tbo=o(" \u2014 "),x$=a("a"),abo=o("ElectraForMaskedLM"),nbo=o(" (ELECTRA model)"),sbo=l(),Ku=a("li"),Woe=a("strong"),lbo=o("flaubert"),ibo=o(" \u2014 "),k$=a("a"),dbo=o("FlaubertWithLMHeadModel"),cbo=o(" (FlauBERT model)"),fbo=l(),Zu=a("li"),Qoe=a("strong"),mbo=o("fnet"),gbo=o(" \u2014 "),R$=a("a"),hbo=o("FNetForMaskedLM"),pbo=o(" (FNet model)"),_bo=l(),e5=a("li"),Hoe=a("strong"),ubo=o("funnel"),bbo=o(" \u2014 "),S$=a("a"),vbo=o("FunnelForMaskedLM"),Tbo=o(" (Funnel Transformer model)"),Fbo=l(),o5=a("li"),Uoe=a("strong"),Cbo=o("ibert"),Mbo=o(" \u2014 "),P$=a("a"),Ebo=o("IBertForMaskedLM"),ybo=o(" (I-BERT model)"),wbo=l(),r5=a("li"),Joe=a("strong"),Abo=o("layoutlm"),Lbo=o(" \u2014 "),$$=a("a"),Bbo=o("LayoutLMForMaskedLM"),xbo=o(" (LayoutLM model)"),kbo=l(),t5=a("li"),Yoe=a("strong"),Rbo=o("longformer"),Sbo=o(" \u2014 "),I$=a("a"),Pbo=o("LongformerForMaskedLM"),$bo=o(" (Longformer model)"),Ibo=l(),a5=a("li"),Koe=a("strong"),jbo=o("mbart"),Dbo=o(" \u2014 "),j$=a("a"),Nbo=o("MBartForConditionalGeneration"),qbo=o(" (mBART model)"),Obo=l(),n5=a("li"),Zoe=a("strong"),Gbo=o("megatron-bert"),Xbo=o(" \u2014 "),D$=a("a"),Vbo=o("MegatronBertForMaskedLM"),zbo=o(" (MegatronBert model)"),Wbo=l(),s5=a("li"),ere=a("strong"),Qbo=o("mobilebert"),Hbo=o(" \u2014 "),N$=a("a"),Ubo=o("MobileBertForMaskedLM"),Jbo=o(" (MobileBERT model)"),Ybo=l(),l5=a("li"),ore=a("strong"),Kbo=o("mpnet"),Zbo=o(" \u2014 "),q$=a("a"),evo=o("MPNetForMaskedLM"),ovo=o(" (MPNet model)"),rvo=l(),i5=a("li"),rre=a("strong"),tvo=o("nystromformer"),avo=o(" \u2014 "),O$=a("a"),nvo=o("NystromformerForMaskedLM"),svo=o(" (Nystromformer model)"),lvo=l(),d5=a("li"),tre=a("strong"),ivo=o("perceiver"),dvo=o(" \u2014 "),G$=a("a"),cvo=o("PerceiverForMaskedLM"),fvo=o(" (Perceiver model)"),mvo=l(),c5=a("li"),are=a("strong"),gvo=o("qdqbert"),hvo=o(" \u2014 "),X$=a("a"),pvo=o("QDQBertForMaskedLM"),_vo=o(" (QDQBert model)"),uvo=l(),f5=a("li"),nre=a("strong"),bvo=o("reformer"),vvo=o(" \u2014 "),V$=a("a"),Tvo=o("ReformerForMaskedLM"),Fvo=o(" (Reformer model)"),Cvo=l(),m5=a("li"),sre=a("strong"),Mvo=o("rembert"),Evo=o(" \u2014 "),z$=a("a"),yvo=o("RemBertForMaskedLM"),wvo=o(" (RemBERT model)"),Avo=l(),g5=a("li"),lre=a("strong"),Lvo=o("roberta"),Bvo=o(" \u2014 "),W$=a("a"),xvo=o("RobertaForMaskedLM"),kvo=o(" (RoBERTa model)"),Rvo=l(),h5=a("li"),ire=a("strong"),Svo=o("roformer"),Pvo=o(" \u2014 "),Q$=a("a"),$vo=o("RoFormerForMaskedLM"),Ivo=o(" (RoFormer model)"),jvo=l(),p5=a("li"),dre=a("strong"),Dvo=o("squeezebert"),Nvo=o(" \u2014 "),H$=a("a"),qvo=o("SqueezeBertForMaskedLM"),Ovo=o(" (SqueezeBERT model)"),Gvo=l(),_5=a("li"),cre=a("strong"),Xvo=o("tapas"),Vvo=o(" \u2014 "),U$=a("a"),zvo=o("TapasForMaskedLM"),Wvo=o(" (TAPAS model)"),Qvo=l(),u5=a("li"),fre=a("strong"),Hvo=o("wav2vec2"),Uvo=o(" \u2014 "),mre=a("code"),Jvo=o("Wav2Vec2ForMaskedLM"),Yvo=o("(Wav2Vec2 model)"),Kvo=l(),b5=a("li"),gre=a("strong"),Zvo=o("xlm"),eTo=o(" \u2014 "),J$=a("a"),oTo=o("XLMWithLMHeadModel"),rTo=o(" (XLM model)"),tTo=l(),v5=a("li"),hre=a("strong"),aTo=o("xlm-roberta"),nTo=o(" \u2014 "),Y$=a("a"),sTo=o("XLMRobertaForMaskedLM"),lTo=o(" (XLM-RoBERTa model)"),iTo=l(),T5=a("li"),pre=a("strong"),dTo=o("xlm-roberta-xl"),cTo=o(" \u2014 "),K$=a("a"),fTo=o("XLMRobertaXLForMaskedLM"),mTo=o(" (XLM-RoBERTa-XL model)"),gTo=l(),F5=a("li"),_re=a("strong"),hTo=o("yoso"),pTo=o(" \u2014 "),Z$=a("a"),_To=o("YosoForMaskedLM"),uTo=o(" (YOSO model)"),bTo=l(),C5=a("p"),vTo=o("The model is set in evaluation mode by default using "),ure=a("code"),TTo=o("model.eval()"),FTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bre=a("code"),CTo=o("model.train()"),MTo=l(),vre=a("p"),ETo=o("Examples:"),yTo=l(),f(K3.$$.fragment),Txe=l(),dd=a("h2"),M5=a("a"),Tre=a("span"),f(Z3.$$.fragment),wTo=l(),Fre=a("span"),ATo=o("AutoModelForSeq2SeqLM"),Fxe=l(),er=a("div"),f(ey.$$.fragment),LTo=l(),cd=a("p"),BTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cre=a("code"),xTo=o("from_pretrained()"),kTo=o("class method or the "),Mre=a("code"),RTo=o("from_config()"),STo=o(`class
method.`),PTo=l(),oy=a("p"),$To=o("This class cannot be instantiated directly using "),Ere=a("code"),ITo=o("__init__()"),jTo=o(" (throws an error)."),DTo=l(),Hr=a("div"),f(ry.$$.fragment),NTo=l(),yre=a("p"),qTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),OTo=l(),fd=a("p"),GTo=o(`Note:
Loading a model from its configuration file does `),wre=a("strong"),XTo=o("not"),VTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("code"),zTo=o("from_pretrained()"),WTo=o("to load the model weights."),QTo=l(),Lre=a("p"),HTo=o("Examples:"),UTo=l(),f(ty.$$.fragment),JTo=l(),Oe=a("div"),f(ay.$$.fragment),YTo=l(),Bre=a("p"),KTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZTo=l(),Qa=a("p"),eFo=o("The model class to instantiate is selected based on the "),xre=a("code"),oFo=o("model_type"),rFo=o(` property of the config object (either
passed as an argument or loaded from `),kre=a("code"),tFo=o("pretrained_model_name_or_path"),aFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rre=a("code"),nFo=o("pretrained_model_name_or_path"),sFo=o(":"),lFo=l(),ne=a("ul"),E5=a("li"),Sre=a("strong"),iFo=o("bart"),dFo=o(" \u2014 "),eI=a("a"),cFo=o("BartForConditionalGeneration"),fFo=o(" (BART model)"),mFo=l(),y5=a("li"),Pre=a("strong"),gFo=o("bigbird_pegasus"),hFo=o(" \u2014 "),oI=a("a"),pFo=o("BigBirdPegasusForConditionalGeneration"),_Fo=o(" (BigBirdPegasus model)"),uFo=l(),w5=a("li"),$re=a("strong"),bFo=o("blenderbot"),vFo=o(" \u2014 "),rI=a("a"),TFo=o("BlenderbotForConditionalGeneration"),FFo=o(" (Blenderbot model)"),CFo=l(),A5=a("li"),Ire=a("strong"),MFo=o("blenderbot-small"),EFo=o(" \u2014 "),tI=a("a"),yFo=o("BlenderbotSmallForConditionalGeneration"),wFo=o(" (BlenderbotSmall model)"),AFo=l(),L5=a("li"),jre=a("strong"),LFo=o("encoder-decoder"),BFo=o(" \u2014 "),aI=a("a"),xFo=o("EncoderDecoderModel"),kFo=o(" (Encoder decoder model)"),RFo=l(),B5=a("li"),Dre=a("strong"),SFo=o("fsmt"),PFo=o(" \u2014 "),nI=a("a"),$Fo=o("FSMTForConditionalGeneration"),IFo=o(" (FairSeq Machine-Translation model)"),jFo=l(),x5=a("li"),Nre=a("strong"),DFo=o("led"),NFo=o(" \u2014 "),sI=a("a"),qFo=o("LEDForConditionalGeneration"),OFo=o(" (LED model)"),GFo=l(),k5=a("li"),qre=a("strong"),XFo=o("m2m_100"),VFo=o(" \u2014 "),lI=a("a"),zFo=o("M2M100ForConditionalGeneration"),WFo=o(" (M2M100 model)"),QFo=l(),R5=a("li"),Ore=a("strong"),HFo=o("marian"),UFo=o(" \u2014 "),iI=a("a"),JFo=o("MarianMTModel"),YFo=o(" (Marian model)"),KFo=l(),S5=a("li"),Gre=a("strong"),ZFo=o("mbart"),e9o=o(" \u2014 "),dI=a("a"),o9o=o("MBartForConditionalGeneration"),r9o=o(" (mBART model)"),t9o=l(),P5=a("li"),Xre=a("strong"),a9o=o("mt5"),n9o=o(" \u2014 "),cI=a("a"),s9o=o("MT5ForConditionalGeneration"),l9o=o(" (mT5 model)"),i9o=l(),$5=a("li"),Vre=a("strong"),d9o=o("pegasus"),c9o=o(" \u2014 "),fI=a("a"),f9o=o("PegasusForConditionalGeneration"),m9o=o(" (Pegasus model)"),g9o=l(),I5=a("li"),zre=a("strong"),h9o=o("plbart"),p9o=o(" \u2014 "),mI=a("a"),_9o=o("PLBartForConditionalGeneration"),u9o=o(" (PLBart model)"),b9o=l(),j5=a("li"),Wre=a("strong"),v9o=o("prophetnet"),T9o=o(" \u2014 "),gI=a("a"),F9o=o("ProphetNetForConditionalGeneration"),C9o=o(" (ProphetNet model)"),M9o=l(),D5=a("li"),Qre=a("strong"),E9o=o("t5"),y9o=o(" \u2014 "),hI=a("a"),w9o=o("T5ForConditionalGeneration"),A9o=o(" (T5 model)"),L9o=l(),N5=a("li"),Hre=a("strong"),B9o=o("xlm-prophetnet"),x9o=o(" \u2014 "),pI=a("a"),k9o=o("XLMProphetNetForConditionalGeneration"),R9o=o(" (XLMProphetNet model)"),S9o=l(),q5=a("p"),P9o=o("The model is set in evaluation mode by default using "),Ure=a("code"),$9o=o("model.eval()"),I9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jre=a("code"),j9o=o("model.train()"),D9o=l(),Yre=a("p"),N9o=o("Examples:"),q9o=l(),f(ny.$$.fragment),Cxe=l(),md=a("h2"),O5=a("a"),Kre=a("span"),f(sy.$$.fragment),O9o=l(),Zre=a("span"),G9o=o("AutoModelForSequenceClassification"),Mxe=l(),or=a("div"),f(ly.$$.fragment),X9o=l(),gd=a("p"),V9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ete=a("code"),z9o=o("from_pretrained()"),W9o=o("class method or the "),ote=a("code"),Q9o=o("from_config()"),H9o=o(`class
method.`),U9o=l(),iy=a("p"),J9o=o("This class cannot be instantiated directly using "),rte=a("code"),Y9o=o("__init__()"),K9o=o(" (throws an error)."),Z9o=l(),Ur=a("div"),f(dy.$$.fragment),eCo=l(),tte=a("p"),oCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rCo=l(),hd=a("p"),tCo=o(`Note:
Loading a model from its configuration file does `),ate=a("strong"),aCo=o("not"),nCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=a("code"),sCo=o("from_pretrained()"),lCo=o("to load the model weights."),iCo=l(),ste=a("p"),dCo=o("Examples:"),cCo=l(),f(cy.$$.fragment),fCo=l(),Ge=a("div"),f(fy.$$.fragment),mCo=l(),lte=a("p"),gCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hCo=l(),Ha=a("p"),pCo=o("The model class to instantiate is selected based on the "),ite=a("code"),_Co=o("model_type"),uCo=o(` property of the config object (either
passed as an argument or loaded from `),dte=a("code"),bCo=o("pretrained_model_name_or_path"),vCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=a("code"),TCo=o("pretrained_model_name_or_path"),FCo=o(":"),CCo=l(),A=a("ul"),G5=a("li"),fte=a("strong"),MCo=o("albert"),ECo=o(" \u2014 "),_I=a("a"),yCo=o("AlbertForSequenceClassification"),wCo=o(" (ALBERT model)"),ACo=l(),X5=a("li"),mte=a("strong"),LCo=o("bart"),BCo=o(" \u2014 "),uI=a("a"),xCo=o("BartForSequenceClassification"),kCo=o(" (BART model)"),RCo=l(),V5=a("li"),gte=a("strong"),SCo=o("bert"),PCo=o(" \u2014 "),bI=a("a"),$Co=o("BertForSequenceClassification"),ICo=o(" (BERT model)"),jCo=l(),z5=a("li"),hte=a("strong"),DCo=o("big_bird"),NCo=o(" \u2014 "),vI=a("a"),qCo=o("BigBirdForSequenceClassification"),OCo=o(" (BigBird model)"),GCo=l(),W5=a("li"),pte=a("strong"),XCo=o("bigbird_pegasus"),VCo=o(" \u2014 "),TI=a("a"),zCo=o("BigBirdPegasusForSequenceClassification"),WCo=o(" (BigBirdPegasus model)"),QCo=l(),Q5=a("li"),_te=a("strong"),HCo=o("camembert"),UCo=o(" \u2014 "),FI=a("a"),JCo=o("CamembertForSequenceClassification"),YCo=o(" (CamemBERT model)"),KCo=l(),H5=a("li"),ute=a("strong"),ZCo=o("canine"),eMo=o(" \u2014 "),CI=a("a"),oMo=o("CanineForSequenceClassification"),rMo=o(" (Canine model)"),tMo=l(),U5=a("li"),bte=a("strong"),aMo=o("convbert"),nMo=o(" \u2014 "),MI=a("a"),sMo=o("ConvBertForSequenceClassification"),lMo=o(" (ConvBERT model)"),iMo=l(),J5=a("li"),vte=a("strong"),dMo=o("ctrl"),cMo=o(" \u2014 "),EI=a("a"),fMo=o("CTRLForSequenceClassification"),mMo=o(" (CTRL model)"),gMo=l(),Y5=a("li"),Tte=a("strong"),hMo=o("data2vec-text"),pMo=o(" \u2014 "),yI=a("a"),_Mo=o("Data2VecTextForSequenceClassification"),uMo=o(" (Data2VecText model)"),bMo=l(),K5=a("li"),Fte=a("strong"),vMo=o("deberta"),TMo=o(" \u2014 "),wI=a("a"),FMo=o("DebertaForSequenceClassification"),CMo=o(" (DeBERTa model)"),MMo=l(),Z5=a("li"),Cte=a("strong"),EMo=o("deberta-v2"),yMo=o(" \u2014 "),AI=a("a"),wMo=o("DebertaV2ForSequenceClassification"),AMo=o(" (DeBERTa-v2 model)"),LMo=l(),e2=a("li"),Mte=a("strong"),BMo=o("distilbert"),xMo=o(" \u2014 "),LI=a("a"),kMo=o("DistilBertForSequenceClassification"),RMo=o(" (DistilBERT model)"),SMo=l(),o2=a("li"),Ete=a("strong"),PMo=o("electra"),$Mo=o(" \u2014 "),BI=a("a"),IMo=o("ElectraForSequenceClassification"),jMo=o(" (ELECTRA model)"),DMo=l(),r2=a("li"),yte=a("strong"),NMo=o("flaubert"),qMo=o(" \u2014 "),xI=a("a"),OMo=o("FlaubertForSequenceClassification"),GMo=o(" (FlauBERT model)"),XMo=l(),t2=a("li"),wte=a("strong"),VMo=o("fnet"),zMo=o(" \u2014 "),kI=a("a"),WMo=o("FNetForSequenceClassification"),QMo=o(" (FNet model)"),HMo=l(),a2=a("li"),Ate=a("strong"),UMo=o("funnel"),JMo=o(" \u2014 "),RI=a("a"),YMo=o("FunnelForSequenceClassification"),KMo=o(" (Funnel Transformer model)"),ZMo=l(),n2=a("li"),Lte=a("strong"),e4o=o("gpt2"),o4o=o(" \u2014 "),SI=a("a"),r4o=o("GPT2ForSequenceClassification"),t4o=o(" (OpenAI GPT-2 model)"),a4o=l(),s2=a("li"),Bte=a("strong"),n4o=o("gpt_neo"),s4o=o(" \u2014 "),PI=a("a"),l4o=o("GPTNeoForSequenceClassification"),i4o=o(" (GPT Neo model)"),d4o=l(),l2=a("li"),xte=a("strong"),c4o=o("gptj"),f4o=o(" \u2014 "),$I=a("a"),m4o=o("GPTJForSequenceClassification"),g4o=o(" (GPT-J model)"),h4o=l(),i2=a("li"),kte=a("strong"),p4o=o("ibert"),_4o=o(" \u2014 "),II=a("a"),u4o=o("IBertForSequenceClassification"),b4o=o(" (I-BERT model)"),v4o=l(),d2=a("li"),Rte=a("strong"),T4o=o("layoutlm"),F4o=o(" \u2014 "),jI=a("a"),C4o=o("LayoutLMForSequenceClassification"),M4o=o(" (LayoutLM model)"),E4o=l(),c2=a("li"),Ste=a("strong"),y4o=o("layoutlmv2"),w4o=o(" \u2014 "),DI=a("a"),A4o=o("LayoutLMv2ForSequenceClassification"),L4o=o(" (LayoutLMv2 model)"),B4o=l(),f2=a("li"),Pte=a("strong"),x4o=o("led"),k4o=o(" \u2014 "),NI=a("a"),R4o=o("LEDForSequenceClassification"),S4o=o(" (LED model)"),P4o=l(),m2=a("li"),$te=a("strong"),$4o=o("longformer"),I4o=o(" \u2014 "),qI=a("a"),j4o=o("LongformerForSequenceClassification"),D4o=o(" (Longformer model)"),N4o=l(),g2=a("li"),Ite=a("strong"),q4o=o("mbart"),O4o=o(" \u2014 "),OI=a("a"),G4o=o("MBartForSequenceClassification"),X4o=o(" (mBART model)"),V4o=l(),h2=a("li"),jte=a("strong"),z4o=o("megatron-bert"),W4o=o(" \u2014 "),GI=a("a"),Q4o=o("MegatronBertForSequenceClassification"),H4o=o(" (MegatronBert model)"),U4o=l(),p2=a("li"),Dte=a("strong"),J4o=o("mobilebert"),Y4o=o(" \u2014 "),XI=a("a"),K4o=o("MobileBertForSequenceClassification"),Z4o=o(" (MobileBERT model)"),eEo=l(),_2=a("li"),Nte=a("strong"),oEo=o("mpnet"),rEo=o(" \u2014 "),VI=a("a"),tEo=o("MPNetForSequenceClassification"),aEo=o(" (MPNet model)"),nEo=l(),u2=a("li"),qte=a("strong"),sEo=o("nystromformer"),lEo=o(" \u2014 "),zI=a("a"),iEo=o("NystromformerForSequenceClassification"),dEo=o(" (Nystromformer model)"),cEo=l(),b2=a("li"),Ote=a("strong"),fEo=o("openai-gpt"),mEo=o(" \u2014 "),WI=a("a"),gEo=o("OpenAIGPTForSequenceClassification"),hEo=o(" (OpenAI GPT model)"),pEo=l(),v2=a("li"),Gte=a("strong"),_Eo=o("perceiver"),uEo=o(" \u2014 "),QI=a("a"),bEo=o("PerceiverForSequenceClassification"),vEo=o(" (Perceiver model)"),TEo=l(),T2=a("li"),Xte=a("strong"),FEo=o("plbart"),CEo=o(" \u2014 "),HI=a("a"),MEo=o("PLBartForSequenceClassification"),EEo=o(" (PLBart model)"),yEo=l(),F2=a("li"),Vte=a("strong"),wEo=o("qdqbert"),AEo=o(" \u2014 "),UI=a("a"),LEo=o("QDQBertForSequenceClassification"),BEo=o(" (QDQBert model)"),xEo=l(),C2=a("li"),zte=a("strong"),kEo=o("reformer"),REo=o(" \u2014 "),JI=a("a"),SEo=o("ReformerForSequenceClassification"),PEo=o(" (Reformer model)"),$Eo=l(),M2=a("li"),Wte=a("strong"),IEo=o("rembert"),jEo=o(" \u2014 "),YI=a("a"),DEo=o("RemBertForSequenceClassification"),NEo=o(" (RemBERT model)"),qEo=l(),E2=a("li"),Qte=a("strong"),OEo=o("roberta"),GEo=o(" \u2014 "),KI=a("a"),XEo=o("RobertaForSequenceClassification"),VEo=o(" (RoBERTa model)"),zEo=l(),y2=a("li"),Hte=a("strong"),WEo=o("roformer"),QEo=o(" \u2014 "),ZI=a("a"),HEo=o("RoFormerForSequenceClassification"),UEo=o(" (RoFormer model)"),JEo=l(),w2=a("li"),Ute=a("strong"),YEo=o("squeezebert"),KEo=o(" \u2014 "),ej=a("a"),ZEo=o("SqueezeBertForSequenceClassification"),e3o=o(" (SqueezeBERT model)"),o3o=l(),A2=a("li"),Jte=a("strong"),r3o=o("tapas"),t3o=o(" \u2014 "),oj=a("a"),a3o=o("TapasForSequenceClassification"),n3o=o(" (TAPAS model)"),s3o=l(),L2=a("li"),Yte=a("strong"),l3o=o("transfo-xl"),i3o=o(" \u2014 "),rj=a("a"),d3o=o("TransfoXLForSequenceClassification"),c3o=o(" (Transformer-XL model)"),f3o=l(),B2=a("li"),Kte=a("strong"),m3o=o("xlm"),g3o=o(" \u2014 "),tj=a("a"),h3o=o("XLMForSequenceClassification"),p3o=o(" (XLM model)"),_3o=l(),x2=a("li"),Zte=a("strong"),u3o=o("xlm-roberta"),b3o=o(" \u2014 "),aj=a("a"),v3o=o("XLMRobertaForSequenceClassification"),T3o=o(" (XLM-RoBERTa model)"),F3o=l(),k2=a("li"),eae=a("strong"),C3o=o("xlm-roberta-xl"),M3o=o(" \u2014 "),nj=a("a"),E3o=o("XLMRobertaXLForSequenceClassification"),y3o=o(" (XLM-RoBERTa-XL model)"),w3o=l(),R2=a("li"),oae=a("strong"),A3o=o("xlnet"),L3o=o(" \u2014 "),sj=a("a"),B3o=o("XLNetForSequenceClassification"),x3o=o(" (XLNet model)"),k3o=l(),S2=a("li"),rae=a("strong"),R3o=o("yoso"),S3o=o(" \u2014 "),lj=a("a"),P3o=o("YosoForSequenceClassification"),$3o=o(" (YOSO model)"),I3o=l(),P2=a("p"),j3o=o("The model is set in evaluation mode by default using "),tae=a("code"),D3o=o("model.eval()"),N3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=a("code"),q3o=o("model.train()"),O3o=l(),nae=a("p"),G3o=o("Examples:"),X3o=l(),f(my.$$.fragment),Exe=l(),pd=a("h2"),$2=a("a"),sae=a("span"),f(gy.$$.fragment),V3o=l(),lae=a("span"),z3o=o("AutoModelForMultipleChoice"),yxe=l(),rr=a("div"),f(hy.$$.fragment),W3o=l(),_d=a("p"),Q3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iae=a("code"),H3o=o("from_pretrained()"),U3o=o("class method or the "),dae=a("code"),J3o=o("from_config()"),Y3o=o(`class
method.`),K3o=l(),py=a("p"),Z3o=o("This class cannot be instantiated directly using "),cae=a("code"),eyo=o("__init__()"),oyo=o(" (throws an error)."),ryo=l(),Jr=a("div"),f(_y.$$.fragment),tyo=l(),fae=a("p"),ayo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nyo=l(),ud=a("p"),syo=o(`Note:
Loading a model from its configuration file does `),mae=a("strong"),lyo=o("not"),iyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=a("code"),dyo=o("from_pretrained()"),cyo=o("to load the model weights."),fyo=l(),hae=a("p"),myo=o("Examples:"),gyo=l(),f(uy.$$.fragment),hyo=l(),Xe=a("div"),f(by.$$.fragment),pyo=l(),pae=a("p"),_yo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uyo=l(),Ua=a("p"),byo=o("The model class to instantiate is selected based on the "),_ae=a("code"),vyo=o("model_type"),Tyo=o(` property of the config object (either
passed as an argument or loaded from `),uae=a("code"),Fyo=o("pretrained_model_name_or_path"),Cyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bae=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(":"),yyo=l(),O=a("ul"),I2=a("li"),vae=a("strong"),wyo=o("albert"),Ayo=o(" \u2014 "),ij=a("a"),Lyo=o("AlbertForMultipleChoice"),Byo=o(" (ALBERT model)"),xyo=l(),j2=a("li"),Tae=a("strong"),kyo=o("bert"),Ryo=o(" \u2014 "),dj=a("a"),Syo=o("BertForMultipleChoice"),Pyo=o(" (BERT model)"),$yo=l(),D2=a("li"),Fae=a("strong"),Iyo=o("big_bird"),jyo=o(" \u2014 "),cj=a("a"),Dyo=o("BigBirdForMultipleChoice"),Nyo=o(" (BigBird model)"),qyo=l(),N2=a("li"),Cae=a("strong"),Oyo=o("camembert"),Gyo=o(" \u2014 "),fj=a("a"),Xyo=o("CamembertForMultipleChoice"),Vyo=o(" (CamemBERT model)"),zyo=l(),q2=a("li"),Mae=a("strong"),Wyo=o("canine"),Qyo=o(" \u2014 "),mj=a("a"),Hyo=o("CanineForMultipleChoice"),Uyo=o(" (Canine model)"),Jyo=l(),O2=a("li"),Eae=a("strong"),Yyo=o("convbert"),Kyo=o(" \u2014 "),gj=a("a"),Zyo=o("ConvBertForMultipleChoice"),ewo=o(" (ConvBERT model)"),owo=l(),G2=a("li"),yae=a("strong"),rwo=o("data2vec-text"),two=o(" \u2014 "),hj=a("a"),awo=o("Data2VecTextForMultipleChoice"),nwo=o(" (Data2VecText model)"),swo=l(),X2=a("li"),wae=a("strong"),lwo=o("distilbert"),iwo=o(" \u2014 "),pj=a("a"),dwo=o("DistilBertForMultipleChoice"),cwo=o(" (DistilBERT model)"),fwo=l(),V2=a("li"),Aae=a("strong"),mwo=o("electra"),gwo=o(" \u2014 "),_j=a("a"),hwo=o("ElectraForMultipleChoice"),pwo=o(" (ELECTRA model)"),_wo=l(),z2=a("li"),Lae=a("strong"),uwo=o("flaubert"),bwo=o(" \u2014 "),uj=a("a"),vwo=o("FlaubertForMultipleChoice"),Two=o(" (FlauBERT model)"),Fwo=l(),W2=a("li"),Bae=a("strong"),Cwo=o("fnet"),Mwo=o(" \u2014 "),bj=a("a"),Ewo=o("FNetForMultipleChoice"),ywo=o(" (FNet model)"),wwo=l(),Q2=a("li"),xae=a("strong"),Awo=o("funnel"),Lwo=o(" \u2014 "),vj=a("a"),Bwo=o("FunnelForMultipleChoice"),xwo=o(" (Funnel Transformer model)"),kwo=l(),H2=a("li"),kae=a("strong"),Rwo=o("ibert"),Swo=o(" \u2014 "),Tj=a("a"),Pwo=o("IBertForMultipleChoice"),$wo=o(" (I-BERT model)"),Iwo=l(),U2=a("li"),Rae=a("strong"),jwo=o("longformer"),Dwo=o(" \u2014 "),Fj=a("a"),Nwo=o("LongformerForMultipleChoice"),qwo=o(" (Longformer model)"),Owo=l(),J2=a("li"),Sae=a("strong"),Gwo=o("megatron-bert"),Xwo=o(" \u2014 "),Cj=a("a"),Vwo=o("MegatronBertForMultipleChoice"),zwo=o(" (MegatronBert model)"),Wwo=l(),Y2=a("li"),Pae=a("strong"),Qwo=o("mobilebert"),Hwo=o(" \u2014 "),Mj=a("a"),Uwo=o("MobileBertForMultipleChoice"),Jwo=o(" (MobileBERT model)"),Ywo=l(),K2=a("li"),$ae=a("strong"),Kwo=o("mpnet"),Zwo=o(" \u2014 "),Ej=a("a"),e6o=o("MPNetForMultipleChoice"),o6o=o(" (MPNet model)"),r6o=l(),Z2=a("li"),Iae=a("strong"),t6o=o("nystromformer"),a6o=o(" \u2014 "),yj=a("a"),n6o=o("NystromformerForMultipleChoice"),s6o=o(" (Nystromformer model)"),l6o=l(),e1=a("li"),jae=a("strong"),i6o=o("qdqbert"),d6o=o(" \u2014 "),wj=a("a"),c6o=o("QDQBertForMultipleChoice"),f6o=o(" (QDQBert model)"),m6o=l(),o1=a("li"),Dae=a("strong"),g6o=o("rembert"),h6o=o(" \u2014 "),Aj=a("a"),p6o=o("RemBertForMultipleChoice"),_6o=o(" (RemBERT model)"),u6o=l(),r1=a("li"),Nae=a("strong"),b6o=o("roberta"),v6o=o(" \u2014 "),Lj=a("a"),T6o=o("RobertaForMultipleChoice"),F6o=o(" (RoBERTa model)"),C6o=l(),t1=a("li"),qae=a("strong"),M6o=o("roformer"),E6o=o(" \u2014 "),Bj=a("a"),y6o=o("RoFormerForMultipleChoice"),w6o=o(" (RoFormer model)"),A6o=l(),a1=a("li"),Oae=a("strong"),L6o=o("squeezebert"),B6o=o(" \u2014 "),xj=a("a"),x6o=o("SqueezeBertForMultipleChoice"),k6o=o(" (SqueezeBERT model)"),R6o=l(),n1=a("li"),Gae=a("strong"),S6o=o("xlm"),P6o=o(" \u2014 "),kj=a("a"),$6o=o("XLMForMultipleChoice"),I6o=o(" (XLM model)"),j6o=l(),s1=a("li"),Xae=a("strong"),D6o=o("xlm-roberta"),N6o=o(" \u2014 "),Rj=a("a"),q6o=o("XLMRobertaForMultipleChoice"),O6o=o(" (XLM-RoBERTa model)"),G6o=l(),l1=a("li"),Vae=a("strong"),X6o=o("xlm-roberta-xl"),V6o=o(" \u2014 "),Sj=a("a"),z6o=o("XLMRobertaXLForMultipleChoice"),W6o=o(" (XLM-RoBERTa-XL model)"),Q6o=l(),i1=a("li"),zae=a("strong"),H6o=o("xlnet"),U6o=o(" \u2014 "),Pj=a("a"),J6o=o("XLNetForMultipleChoice"),Y6o=o(" (XLNet model)"),K6o=l(),d1=a("li"),Wae=a("strong"),Z6o=o("yoso"),eAo=o(" \u2014 "),$j=a("a"),oAo=o("YosoForMultipleChoice"),rAo=o(" (YOSO model)"),tAo=l(),c1=a("p"),aAo=o("The model is set in evaluation mode by default using "),Qae=a("code"),nAo=o("model.eval()"),sAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),lAo=o("model.train()"),iAo=l(),Uae=a("p"),dAo=o("Examples:"),cAo=l(),f(vy.$$.fragment),wxe=l(),bd=a("h2"),f1=a("a"),Jae=a("span"),f(Ty.$$.fragment),fAo=l(),Yae=a("span"),mAo=o("AutoModelForNextSentencePrediction"),Axe=l(),tr=a("div"),f(Fy.$$.fragment),gAo=l(),vd=a("p"),hAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kae=a("code"),pAo=o("from_pretrained()"),_Ao=o("class method or the "),Zae=a("code"),uAo=o("from_config()"),bAo=o(`class
method.`),vAo=l(),Cy=a("p"),TAo=o("This class cannot be instantiated directly using "),ene=a("code"),FAo=o("__init__()"),CAo=o(" (throws an error)."),MAo=l(),Yr=a("div"),f(My.$$.fragment),EAo=l(),one=a("p"),yAo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wAo=l(),Td=a("p"),AAo=o(`Note:
Loading a model from its configuration file does `),rne=a("strong"),LAo=o("not"),BAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=a("code"),xAo=o("from_pretrained()"),kAo=o("to load the model weights."),RAo=l(),ane=a("p"),SAo=o("Examples:"),PAo=l(),f(Ey.$$.fragment),$Ao=l(),Ve=a("div"),f(yy.$$.fragment),IAo=l(),nne=a("p"),jAo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DAo=l(),Ja=a("p"),NAo=o("The model class to instantiate is selected based on the "),sne=a("code"),qAo=o("model_type"),OAo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),GAo=o("pretrained_model_name_or_path"),XAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),VAo=o("pretrained_model_name_or_path"),zAo=o(":"),WAo=l(),da=a("ul"),m1=a("li"),dne=a("strong"),QAo=o("bert"),HAo=o(" \u2014 "),Ij=a("a"),UAo=o("BertForNextSentencePrediction"),JAo=o(" (BERT model)"),YAo=l(),g1=a("li"),cne=a("strong"),KAo=o("fnet"),ZAo=o(" \u2014 "),jj=a("a"),e0o=o("FNetForNextSentencePrediction"),o0o=o(" (FNet model)"),r0o=l(),h1=a("li"),fne=a("strong"),t0o=o("megatron-bert"),a0o=o(" \u2014 "),Dj=a("a"),n0o=o("MegatronBertForNextSentencePrediction"),s0o=o(" (MegatronBert model)"),l0o=l(),p1=a("li"),mne=a("strong"),i0o=o("mobilebert"),d0o=o(" \u2014 "),Nj=a("a"),c0o=o("MobileBertForNextSentencePrediction"),f0o=o(" (MobileBERT model)"),m0o=l(),_1=a("li"),gne=a("strong"),g0o=o("qdqbert"),h0o=o(" \u2014 "),qj=a("a"),p0o=o("QDQBertForNextSentencePrediction"),_0o=o(" (QDQBert model)"),u0o=l(),u1=a("p"),b0o=o("The model is set in evaluation mode by default using "),hne=a("code"),v0o=o("model.eval()"),T0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pne=a("code"),F0o=o("model.train()"),C0o=l(),_ne=a("p"),M0o=o("Examples:"),E0o=l(),f(wy.$$.fragment),Lxe=l(),Fd=a("h2"),b1=a("a"),une=a("span"),f(Ay.$$.fragment),y0o=l(),bne=a("span"),w0o=o("AutoModelForTokenClassification"),Bxe=l(),ar=a("div"),f(Ly.$$.fragment),A0o=l(),Cd=a("p"),L0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vne=a("code"),B0o=o("from_pretrained()"),x0o=o("class method or the "),Tne=a("code"),k0o=o("from_config()"),R0o=o(`class
method.`),S0o=l(),By=a("p"),P0o=o("This class cannot be instantiated directly using "),Fne=a("code"),$0o=o("__init__()"),I0o=o(" (throws an error)."),j0o=l(),Kr=a("div"),f(xy.$$.fragment),D0o=l(),Cne=a("p"),N0o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q0o=l(),Md=a("p"),O0o=o(`Note:
Loading a model from its configuration file does `),Mne=a("strong"),G0o=o("not"),X0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=a("code"),V0o=o("from_pretrained()"),z0o=o("to load the model weights."),W0o=l(),yne=a("p"),Q0o=o("Examples:"),H0o=l(),f(ky.$$.fragment),U0o=l(),ze=a("div"),f(Ry.$$.fragment),J0o=l(),wne=a("p"),Y0o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),K0o=l(),Ya=a("p"),Z0o=o("The model class to instantiate is selected based on the "),Ane=a("code"),eLo=o("model_type"),oLo=o(` property of the config object (either
passed as an argument or loaded from `),Lne=a("code"),rLo=o("pretrained_model_name_or_path"),tLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=a("code"),aLo=o("pretrained_model_name_or_path"),nLo=o(":"),sLo=l(),N=a("ul"),v1=a("li"),xne=a("strong"),lLo=o("albert"),iLo=o(" \u2014 "),Oj=a("a"),dLo=o("AlbertForTokenClassification"),cLo=o(" (ALBERT model)"),fLo=l(),T1=a("li"),kne=a("strong"),mLo=o("bert"),gLo=o(" \u2014 "),Gj=a("a"),hLo=o("BertForTokenClassification"),pLo=o(" (BERT model)"),_Lo=l(),F1=a("li"),Rne=a("strong"),uLo=o("big_bird"),bLo=o(" \u2014 "),Xj=a("a"),vLo=o("BigBirdForTokenClassification"),TLo=o(" (BigBird model)"),FLo=l(),C1=a("li"),Sne=a("strong"),CLo=o("camembert"),MLo=o(" \u2014 "),Vj=a("a"),ELo=o("CamembertForTokenClassification"),yLo=o(" (CamemBERT model)"),wLo=l(),M1=a("li"),Pne=a("strong"),ALo=o("canine"),LLo=o(" \u2014 "),zj=a("a"),BLo=o("CanineForTokenClassification"),xLo=o(" (Canine model)"),kLo=l(),E1=a("li"),$ne=a("strong"),RLo=o("convbert"),SLo=o(" \u2014 "),Wj=a("a"),PLo=o("ConvBertForTokenClassification"),$Lo=o(" (ConvBERT model)"),ILo=l(),y1=a("li"),Ine=a("strong"),jLo=o("data2vec-text"),DLo=o(" \u2014 "),Qj=a("a"),NLo=o("Data2VecTextForTokenClassification"),qLo=o(" (Data2VecText model)"),OLo=l(),w1=a("li"),jne=a("strong"),GLo=o("deberta"),XLo=o(" \u2014 "),Hj=a("a"),VLo=o("DebertaForTokenClassification"),zLo=o(" (DeBERTa model)"),WLo=l(),A1=a("li"),Dne=a("strong"),QLo=o("deberta-v2"),HLo=o(" \u2014 "),Uj=a("a"),ULo=o("DebertaV2ForTokenClassification"),JLo=o(" (DeBERTa-v2 model)"),YLo=l(),L1=a("li"),Nne=a("strong"),KLo=o("distilbert"),ZLo=o(" \u2014 "),Jj=a("a"),e8o=o("DistilBertForTokenClassification"),o8o=o(" (DistilBERT model)"),r8o=l(),B1=a("li"),qne=a("strong"),t8o=o("electra"),a8o=o(" \u2014 "),Yj=a("a"),n8o=o("ElectraForTokenClassification"),s8o=o(" (ELECTRA model)"),l8o=l(),x1=a("li"),One=a("strong"),i8o=o("flaubert"),d8o=o(" \u2014 "),Kj=a("a"),c8o=o("FlaubertForTokenClassification"),f8o=o(" (FlauBERT model)"),m8o=l(),k1=a("li"),Gne=a("strong"),g8o=o("fnet"),h8o=o(" \u2014 "),Zj=a("a"),p8o=o("FNetForTokenClassification"),_8o=o(" (FNet model)"),u8o=l(),R1=a("li"),Xne=a("strong"),b8o=o("funnel"),v8o=o(" \u2014 "),eD=a("a"),T8o=o("FunnelForTokenClassification"),F8o=o(" (Funnel Transformer model)"),C8o=l(),S1=a("li"),Vne=a("strong"),M8o=o("gpt2"),E8o=o(" \u2014 "),oD=a("a"),y8o=o("GPT2ForTokenClassification"),w8o=o(" (OpenAI GPT-2 model)"),A8o=l(),P1=a("li"),zne=a("strong"),L8o=o("ibert"),B8o=o(" \u2014 "),rD=a("a"),x8o=o("IBertForTokenClassification"),k8o=o(" (I-BERT model)"),R8o=l(),$1=a("li"),Wne=a("strong"),S8o=o("layoutlm"),P8o=o(" \u2014 "),tD=a("a"),$8o=o("LayoutLMForTokenClassification"),I8o=o(" (LayoutLM model)"),j8o=l(),I1=a("li"),Qne=a("strong"),D8o=o("layoutlmv2"),N8o=o(" \u2014 "),aD=a("a"),q8o=o("LayoutLMv2ForTokenClassification"),O8o=o(" (LayoutLMv2 model)"),G8o=l(),j1=a("li"),Hne=a("strong"),X8o=o("longformer"),V8o=o(" \u2014 "),nD=a("a"),z8o=o("LongformerForTokenClassification"),W8o=o(" (Longformer model)"),Q8o=l(),D1=a("li"),Une=a("strong"),H8o=o("megatron-bert"),U8o=o(" \u2014 "),sD=a("a"),J8o=o("MegatronBertForTokenClassification"),Y8o=o(" (MegatronBert model)"),K8o=l(),N1=a("li"),Jne=a("strong"),Z8o=o("mobilebert"),e7o=o(" \u2014 "),lD=a("a"),o7o=o("MobileBertForTokenClassification"),r7o=o(" (MobileBERT model)"),t7o=l(),q1=a("li"),Yne=a("strong"),a7o=o("mpnet"),n7o=o(" \u2014 "),iD=a("a"),s7o=o("MPNetForTokenClassification"),l7o=o(" (MPNet model)"),i7o=l(),O1=a("li"),Kne=a("strong"),d7o=o("nystromformer"),c7o=o(" \u2014 "),dD=a("a"),f7o=o("NystromformerForTokenClassification"),m7o=o(" (Nystromformer model)"),g7o=l(),G1=a("li"),Zne=a("strong"),h7o=o("qdqbert"),p7o=o(" \u2014 "),cD=a("a"),_7o=o("QDQBertForTokenClassification"),u7o=o(" (QDQBert model)"),b7o=l(),X1=a("li"),ese=a("strong"),v7o=o("rembert"),T7o=o(" \u2014 "),fD=a("a"),F7o=o("RemBertForTokenClassification"),C7o=o(" (RemBERT model)"),M7o=l(),V1=a("li"),ose=a("strong"),E7o=o("roberta"),y7o=o(" \u2014 "),mD=a("a"),w7o=o("RobertaForTokenClassification"),A7o=o(" (RoBERTa model)"),L7o=l(),z1=a("li"),rse=a("strong"),B7o=o("roformer"),x7o=o(" \u2014 "),gD=a("a"),k7o=o("RoFormerForTokenClassification"),R7o=o(" (RoFormer model)"),S7o=l(),W1=a("li"),tse=a("strong"),P7o=o("squeezebert"),$7o=o(" \u2014 "),hD=a("a"),I7o=o("SqueezeBertForTokenClassification"),j7o=o(" (SqueezeBERT model)"),D7o=l(),Q1=a("li"),ase=a("strong"),N7o=o("xlm"),q7o=o(" \u2014 "),pD=a("a"),O7o=o("XLMForTokenClassification"),G7o=o(" (XLM model)"),X7o=l(),H1=a("li"),nse=a("strong"),V7o=o("xlm-roberta"),z7o=o(" \u2014 "),_D=a("a"),W7o=o("XLMRobertaForTokenClassification"),Q7o=o(" (XLM-RoBERTa model)"),H7o=l(),U1=a("li"),sse=a("strong"),U7o=o("xlm-roberta-xl"),J7o=o(" \u2014 "),uD=a("a"),Y7o=o("XLMRobertaXLForTokenClassification"),K7o=o(" (XLM-RoBERTa-XL model)"),Z7o=l(),J1=a("li"),lse=a("strong"),eBo=o("xlnet"),oBo=o(" \u2014 "),bD=a("a"),rBo=o("XLNetForTokenClassification"),tBo=o(" (XLNet model)"),aBo=l(),Y1=a("li"),ise=a("strong"),nBo=o("yoso"),sBo=o(" \u2014 "),vD=a("a"),lBo=o("YosoForTokenClassification"),iBo=o(" (YOSO model)"),dBo=l(),K1=a("p"),cBo=o("The model is set in evaluation mode by default using "),dse=a("code"),fBo=o("model.eval()"),mBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cse=a("code"),gBo=o("model.train()"),hBo=l(),fse=a("p"),pBo=o("Examples:"),_Bo=l(),f(Sy.$$.fragment),xxe=l(),Ed=a("h2"),Z1=a("a"),mse=a("span"),f(Py.$$.fragment),uBo=l(),gse=a("span"),bBo=o("AutoModelForQuestionAnswering"),kxe=l(),nr=a("div"),f($y.$$.fragment),vBo=l(),yd=a("p"),TBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hse=a("code"),FBo=o("from_pretrained()"),CBo=o("class method or the "),pse=a("code"),MBo=o("from_config()"),EBo=o(`class
method.`),yBo=l(),Iy=a("p"),wBo=o("This class cannot be instantiated directly using "),_se=a("code"),ABo=o("__init__()"),LBo=o(" (throws an error)."),BBo=l(),Zr=a("div"),f(jy.$$.fragment),xBo=l(),use=a("p"),kBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RBo=l(),wd=a("p"),SBo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),PBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vse=a("code"),IBo=o("from_pretrained()"),jBo=o("to load the model weights."),DBo=l(),Tse=a("p"),NBo=o("Examples:"),qBo=l(),f(Dy.$$.fragment),OBo=l(),We=a("div"),f(Ny.$$.fragment),GBo=l(),Fse=a("p"),XBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VBo=l(),Ka=a("p"),zBo=o("The model class to instantiate is selected based on the "),Cse=a("code"),WBo=o("model_type"),QBo=o(` property of the config object (either
passed as an argument or loaded from `),Mse=a("code"),HBo=o("pretrained_model_name_or_path"),UBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(":"),KBo=l(),R=a("ul"),eb=a("li"),yse=a("strong"),ZBo=o("albert"),exo=o(" \u2014 "),TD=a("a"),oxo=o("AlbertForQuestionAnswering"),rxo=o(" (ALBERT model)"),txo=l(),ob=a("li"),wse=a("strong"),axo=o("bart"),nxo=o(" \u2014 "),FD=a("a"),sxo=o("BartForQuestionAnswering"),lxo=o(" (BART model)"),ixo=l(),rb=a("li"),Ase=a("strong"),dxo=o("bert"),cxo=o(" \u2014 "),CD=a("a"),fxo=o("BertForQuestionAnswering"),mxo=o(" (BERT model)"),gxo=l(),tb=a("li"),Lse=a("strong"),hxo=o("big_bird"),pxo=o(" \u2014 "),MD=a("a"),_xo=o("BigBirdForQuestionAnswering"),uxo=o(" (BigBird model)"),bxo=l(),ab=a("li"),Bse=a("strong"),vxo=o("bigbird_pegasus"),Txo=o(" \u2014 "),ED=a("a"),Fxo=o("BigBirdPegasusForQuestionAnswering"),Cxo=o(" (BigBirdPegasus model)"),Mxo=l(),nb=a("li"),xse=a("strong"),Exo=o("camembert"),yxo=o(" \u2014 "),yD=a("a"),wxo=o("CamembertForQuestionAnswering"),Axo=o(" (CamemBERT model)"),Lxo=l(),sb=a("li"),kse=a("strong"),Bxo=o("canine"),xxo=o(" \u2014 "),wD=a("a"),kxo=o("CanineForQuestionAnswering"),Rxo=o(" (Canine model)"),Sxo=l(),lb=a("li"),Rse=a("strong"),Pxo=o("convbert"),$xo=o(" \u2014 "),AD=a("a"),Ixo=o("ConvBertForQuestionAnswering"),jxo=o(" (ConvBERT model)"),Dxo=l(),ib=a("li"),Sse=a("strong"),Nxo=o("data2vec-text"),qxo=o(" \u2014 "),LD=a("a"),Oxo=o("Data2VecTextForQuestionAnswering"),Gxo=o(" (Data2VecText model)"),Xxo=l(),db=a("li"),Pse=a("strong"),Vxo=o("deberta"),zxo=o(" \u2014 "),BD=a("a"),Wxo=o("DebertaForQuestionAnswering"),Qxo=o(" (DeBERTa model)"),Hxo=l(),cb=a("li"),$se=a("strong"),Uxo=o("deberta-v2"),Jxo=o(" \u2014 "),xD=a("a"),Yxo=o("DebertaV2ForQuestionAnswering"),Kxo=o(" (DeBERTa-v2 model)"),Zxo=l(),fb=a("li"),Ise=a("strong"),eko=o("distilbert"),oko=o(" \u2014 "),kD=a("a"),rko=o("DistilBertForQuestionAnswering"),tko=o(" (DistilBERT model)"),ako=l(),mb=a("li"),jse=a("strong"),nko=o("electra"),sko=o(" \u2014 "),RD=a("a"),lko=o("ElectraForQuestionAnswering"),iko=o(" (ELECTRA model)"),dko=l(),gb=a("li"),Dse=a("strong"),cko=o("flaubert"),fko=o(" \u2014 "),SD=a("a"),mko=o("FlaubertForQuestionAnsweringSimple"),gko=o(" (FlauBERT model)"),hko=l(),hb=a("li"),Nse=a("strong"),pko=o("fnet"),_ko=o(" \u2014 "),PD=a("a"),uko=o("FNetForQuestionAnswering"),bko=o(" (FNet model)"),vko=l(),pb=a("li"),qse=a("strong"),Tko=o("funnel"),Fko=o(" \u2014 "),$D=a("a"),Cko=o("FunnelForQuestionAnswering"),Mko=o(" (Funnel Transformer model)"),Eko=l(),_b=a("li"),Ose=a("strong"),yko=o("gptj"),wko=o(" \u2014 "),ID=a("a"),Ako=o("GPTJForQuestionAnswering"),Lko=o(" (GPT-J model)"),Bko=l(),ub=a("li"),Gse=a("strong"),xko=o("ibert"),kko=o(" \u2014 "),jD=a("a"),Rko=o("IBertForQuestionAnswering"),Sko=o(" (I-BERT model)"),Pko=l(),bb=a("li"),Xse=a("strong"),$ko=o("layoutlmv2"),Iko=o(" \u2014 "),DD=a("a"),jko=o("LayoutLMv2ForQuestionAnswering"),Dko=o(" (LayoutLMv2 model)"),Nko=l(),vb=a("li"),Vse=a("strong"),qko=o("led"),Oko=o(" \u2014 "),ND=a("a"),Gko=o("LEDForQuestionAnswering"),Xko=o(" (LED model)"),Vko=l(),Tb=a("li"),zse=a("strong"),zko=o("longformer"),Wko=o(" \u2014 "),qD=a("a"),Qko=o("LongformerForQuestionAnswering"),Hko=o(" (Longformer model)"),Uko=l(),Fb=a("li"),Wse=a("strong"),Jko=o("lxmert"),Yko=o(" \u2014 "),OD=a("a"),Kko=o("LxmertForQuestionAnswering"),Zko=o(" (LXMERT model)"),eRo=l(),Cb=a("li"),Qse=a("strong"),oRo=o("mbart"),rRo=o(" \u2014 "),GD=a("a"),tRo=o("MBartForQuestionAnswering"),aRo=o(" (mBART model)"),nRo=l(),Mb=a("li"),Hse=a("strong"),sRo=o("megatron-bert"),lRo=o(" \u2014 "),XD=a("a"),iRo=o("MegatronBertForQuestionAnswering"),dRo=o(" (MegatronBert model)"),cRo=l(),Eb=a("li"),Use=a("strong"),fRo=o("mobilebert"),mRo=o(" \u2014 "),VD=a("a"),gRo=o("MobileBertForQuestionAnswering"),hRo=o(" (MobileBERT model)"),pRo=l(),yb=a("li"),Jse=a("strong"),_Ro=o("mpnet"),uRo=o(" \u2014 "),zD=a("a"),bRo=o("MPNetForQuestionAnswering"),vRo=o(" (MPNet model)"),TRo=l(),wb=a("li"),Yse=a("strong"),FRo=o("nystromformer"),CRo=o(" \u2014 "),WD=a("a"),MRo=o("NystromformerForQuestionAnswering"),ERo=o(" (Nystromformer model)"),yRo=l(),Ab=a("li"),Kse=a("strong"),wRo=o("qdqbert"),ARo=o(" \u2014 "),QD=a("a"),LRo=o("QDQBertForQuestionAnswering"),BRo=o(" (QDQBert model)"),xRo=l(),Lb=a("li"),Zse=a("strong"),kRo=o("reformer"),RRo=o(" \u2014 "),HD=a("a"),SRo=o("ReformerForQuestionAnswering"),PRo=o(" (Reformer model)"),$Ro=l(),Bb=a("li"),ele=a("strong"),IRo=o("rembert"),jRo=o(" \u2014 "),UD=a("a"),DRo=o("RemBertForQuestionAnswering"),NRo=o(" (RemBERT model)"),qRo=l(),xb=a("li"),ole=a("strong"),ORo=o("roberta"),GRo=o(" \u2014 "),JD=a("a"),XRo=o("RobertaForQuestionAnswering"),VRo=o(" (RoBERTa model)"),zRo=l(),kb=a("li"),rle=a("strong"),WRo=o("roformer"),QRo=o(" \u2014 "),YD=a("a"),HRo=o("RoFormerForQuestionAnswering"),URo=o(" (RoFormer model)"),JRo=l(),Rb=a("li"),tle=a("strong"),YRo=o("splinter"),KRo=o(" \u2014 "),KD=a("a"),ZRo=o("SplinterForQuestionAnswering"),eSo=o(" (Splinter model)"),oSo=l(),Sb=a("li"),ale=a("strong"),rSo=o("squeezebert"),tSo=o(" \u2014 "),ZD=a("a"),aSo=o("SqueezeBertForQuestionAnswering"),nSo=o(" (SqueezeBERT model)"),sSo=l(),Pb=a("li"),nle=a("strong"),lSo=o("xlm"),iSo=o(" \u2014 "),eN=a("a"),dSo=o("XLMForQuestionAnsweringSimple"),cSo=o(" (XLM model)"),fSo=l(),$b=a("li"),sle=a("strong"),mSo=o("xlm-roberta"),gSo=o(" \u2014 "),oN=a("a"),hSo=o("XLMRobertaForQuestionAnswering"),pSo=o(" (XLM-RoBERTa model)"),_So=l(),Ib=a("li"),lle=a("strong"),uSo=o("xlm-roberta-xl"),bSo=o(" \u2014 "),rN=a("a"),vSo=o("XLMRobertaXLForQuestionAnswering"),TSo=o(" (XLM-RoBERTa-XL model)"),FSo=l(),jb=a("li"),ile=a("strong"),CSo=o("xlnet"),MSo=o(" \u2014 "),tN=a("a"),ESo=o("XLNetForQuestionAnsweringSimple"),ySo=o(" (XLNet model)"),wSo=l(),Db=a("li"),dle=a("strong"),ASo=o("yoso"),LSo=o(" \u2014 "),aN=a("a"),BSo=o("YosoForQuestionAnswering"),xSo=o(" (YOSO model)"),kSo=l(),Nb=a("p"),RSo=o("The model is set in evaluation mode by default using "),cle=a("code"),SSo=o("model.eval()"),PSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=a("code"),$So=o("model.train()"),ISo=l(),mle=a("p"),jSo=o("Examples:"),DSo=l(),f(qy.$$.fragment),Rxe=l(),Ad=a("h2"),qb=a("a"),gle=a("span"),f(Oy.$$.fragment),NSo=l(),hle=a("span"),qSo=o("AutoModelForTableQuestionAnswering"),Sxe=l(),sr=a("div"),f(Gy.$$.fragment),OSo=l(),Ld=a("p"),GSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ple=a("code"),XSo=o("from_pretrained()"),VSo=o("class method or the "),_le=a("code"),zSo=o("from_config()"),WSo=o(`class
method.`),QSo=l(),Xy=a("p"),HSo=o("This class cannot be instantiated directly using "),ule=a("code"),USo=o("__init__()"),JSo=o(" (throws an error)."),YSo=l(),et=a("div"),f(Vy.$$.fragment),KSo=l(),ble=a("p"),ZSo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ePo=l(),Bd=a("p"),oPo=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),rPo=o("not"),tPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=a("code"),aPo=o("from_pretrained()"),nPo=o("to load the model weights."),sPo=l(),Fle=a("p"),lPo=o("Examples:"),iPo=l(),f(zy.$$.fragment),dPo=l(),Qe=a("div"),f(Wy.$$.fragment),cPo=l(),Cle=a("p"),fPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mPo=l(),Za=a("p"),gPo=o("The model class to instantiate is selected based on the "),Mle=a("code"),hPo=o("model_type"),pPo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),_Po=o("pretrained_model_name_or_path"),uPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),bPo=o("pretrained_model_name_or_path"),vPo=o(":"),TPo=l(),wle=a("ul"),Ob=a("li"),Ale=a("strong"),FPo=o("tapas"),CPo=o(" \u2014 "),nN=a("a"),MPo=o("TapasForQuestionAnswering"),EPo=o(" (TAPAS model)"),yPo=l(),Gb=a("p"),wPo=o("The model is set in evaluation mode by default using "),Lle=a("code"),APo=o("model.eval()"),LPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),BPo=o("model.train()"),xPo=l(),xle=a("p"),kPo=o("Examples:"),RPo=l(),f(Qy.$$.fragment),Pxe=l(),xd=a("h2"),Xb=a("a"),kle=a("span"),f(Hy.$$.fragment),SPo=l(),Rle=a("span"),PPo=o("AutoModelForImageClassification"),$xe=l(),lr=a("div"),f(Uy.$$.fragment),$Po=l(),kd=a("p"),IPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sle=a("code"),jPo=o("from_pretrained()"),DPo=o("class method or the "),Ple=a("code"),NPo=o("from_config()"),qPo=o(`class
method.`),OPo=l(),Jy=a("p"),GPo=o("This class cannot be instantiated directly using "),$le=a("code"),XPo=o("__init__()"),VPo=o(" (throws an error)."),zPo=l(),ot=a("div"),f(Yy.$$.fragment),WPo=l(),Ile=a("p"),QPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HPo=l(),Rd=a("p"),UPo=o(`Note:
Loading a model from its configuration file does `),jle=a("strong"),JPo=o("not"),YPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=a("code"),KPo=o("from_pretrained()"),ZPo=o("to load the model weights."),e$o=l(),Nle=a("p"),o$o=o("Examples:"),r$o=l(),f(Ky.$$.fragment),t$o=l(),He=a("div"),f(Zy.$$.fragment),a$o=l(),qle=a("p"),n$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s$o=l(),en=a("p"),l$o=o("The model class to instantiate is selected based on the "),Ole=a("code"),i$o=o("model_type"),d$o=o(` property of the config object (either
passed as an argument or loaded from `),Gle=a("code"),c$o=o("pretrained_model_name_or_path"),f$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),m$o=o("pretrained_model_name_or_path"),g$o=o(":"),h$o=l(),Fe=a("ul"),Vb=a("li"),Vle=a("strong"),p$o=o("beit"),_$o=o(" \u2014 "),sN=a("a"),u$o=o("BeitForImageClassification"),b$o=o(" (BEiT model)"),v$o=l(),zb=a("li"),zle=a("strong"),T$o=o("convnext"),F$o=o(" \u2014 "),lN=a("a"),C$o=o("ConvNextForImageClassification"),M$o=o(" (ConvNext model)"),E$o=l(),Os=a("li"),Wle=a("strong"),y$o=o("deit"),w$o=o(" \u2014 "),iN=a("a"),A$o=o("DeiTForImageClassification"),L$o=o(" or "),dN=a("a"),B$o=o("DeiTForImageClassificationWithTeacher"),x$o=o(" (DeiT model)"),k$o=l(),Wb=a("li"),Qle=a("strong"),R$o=o("imagegpt"),S$o=o(" \u2014 "),cN=a("a"),P$o=o("ImageGPTForImageClassification"),$$o=o(" (ImageGPT model)"),I$o=l(),fa=a("li"),Hle=a("strong"),j$o=o("perceiver"),D$o=o(" \u2014 "),fN=a("a"),N$o=o("PerceiverForImageClassificationLearned"),q$o=o(" or "),mN=a("a"),O$o=o("PerceiverForImageClassificationFourier"),G$o=o(" or "),gN=a("a"),X$o=o("PerceiverForImageClassificationConvProcessing"),V$o=o(" (Perceiver model)"),z$o=l(),Qb=a("li"),Ule=a("strong"),W$o=o("poolformer"),Q$o=o(" \u2014 "),hN=a("a"),H$o=o("PoolFormerForImageClassification"),U$o=o(" (PoolFormer model)"),J$o=l(),Hb=a("li"),Jle=a("strong"),Y$o=o("segformer"),K$o=o(" \u2014 "),pN=a("a"),Z$o=o("SegformerForImageClassification"),eIo=o(" (SegFormer model)"),oIo=l(),Ub=a("li"),Yle=a("strong"),rIo=o("swin"),tIo=o(" \u2014 "),_N=a("a"),aIo=o("SwinForImageClassification"),nIo=o(" (Swin model)"),sIo=l(),Jb=a("li"),Kle=a("strong"),lIo=o("vit"),iIo=o(" \u2014 "),uN=a("a"),dIo=o("ViTForImageClassification"),cIo=o(" (ViT model)"),fIo=l(),Yb=a("p"),mIo=o("The model is set in evaluation mode by default using "),Zle=a("code"),gIo=o("model.eval()"),hIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=a("code"),pIo=o("model.train()"),_Io=l(),oie=a("p"),uIo=o("Examples:"),bIo=l(),f(ew.$$.fragment),Ixe=l(),Sd=a("h2"),Kb=a("a"),rie=a("span"),f(ow.$$.fragment),vIo=l(),tie=a("span"),TIo=o("AutoModelForVision2Seq"),jxe=l(),ir=a("div"),f(rw.$$.fragment),FIo=l(),Pd=a("p"),CIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aie=a("code"),MIo=o("from_pretrained()"),EIo=o("class method or the "),nie=a("code"),yIo=o("from_config()"),wIo=o(`class
method.`),AIo=l(),tw=a("p"),LIo=o("This class cannot be instantiated directly using "),sie=a("code"),BIo=o("__init__()"),xIo=o(" (throws an error)."),kIo=l(),rt=a("div"),f(aw.$$.fragment),RIo=l(),lie=a("p"),SIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PIo=l(),$d=a("p"),$Io=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),IIo=o("not"),jIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),die=a("code"),DIo=o("from_pretrained()"),NIo=o("to load the model weights."),qIo=l(),cie=a("p"),OIo=o("Examples:"),GIo=l(),f(nw.$$.fragment),XIo=l(),Ue=a("div"),f(sw.$$.fragment),VIo=l(),fie=a("p"),zIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WIo=l(),on=a("p"),QIo=o("The model class to instantiate is selected based on the "),mie=a("code"),HIo=o("model_type"),UIo=o(` property of the config object (either
passed as an argument or loaded from `),gie=a("code"),JIo=o("pretrained_model_name_or_path"),YIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=a("code"),KIo=o("pretrained_model_name_or_path"),ZIo=o(":"),ejo=l(),pie=a("ul"),Zb=a("li"),_ie=a("strong"),ojo=o("vision-encoder-decoder"),rjo=o(" \u2014 "),bN=a("a"),tjo=o("VisionEncoderDecoderModel"),ajo=o(" (Vision Encoder decoder model)"),njo=l(),ev=a("p"),sjo=o("The model is set in evaluation mode by default using "),uie=a("code"),ljo=o("model.eval()"),ijo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),djo=o("model.train()"),cjo=l(),vie=a("p"),fjo=o("Examples:"),mjo=l(),f(lw.$$.fragment),Dxe=l(),Id=a("h2"),ov=a("a"),Tie=a("span"),f(iw.$$.fragment),gjo=l(),Fie=a("span"),hjo=o("AutoModelForAudioClassification"),Nxe=l(),dr=a("div"),f(dw.$$.fragment),pjo=l(),jd=a("p"),_jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cie=a("code"),ujo=o("from_pretrained()"),bjo=o("class method or the "),Mie=a("code"),vjo=o("from_config()"),Tjo=o(`class
method.`),Fjo=l(),cw=a("p"),Cjo=o("This class cannot be instantiated directly using "),Eie=a("code"),Mjo=o("__init__()"),Ejo=o(" (throws an error)."),yjo=l(),tt=a("div"),f(fw.$$.fragment),wjo=l(),yie=a("p"),Ajo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ljo=l(),Dd=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),xjo=o("not"),kjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=a("code"),Rjo=o("from_pretrained()"),Sjo=o("to load the model weights."),Pjo=l(),Lie=a("p"),$jo=o("Examples:"),Ijo=l(),f(mw.$$.fragment),jjo=l(),Je=a("div"),f(gw.$$.fragment),Djo=l(),Bie=a("p"),Njo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qjo=l(),rn=a("p"),Ojo=o("The model class to instantiate is selected based on the "),xie=a("code"),Gjo=o("model_type"),Xjo=o(` property of the config object (either
passed as an argument or loaded from `),kie=a("code"),Vjo=o("pretrained_model_name_or_path"),zjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),Wjo=o("pretrained_model_name_or_path"),Qjo=o(":"),Hjo=l(),xe=a("ul"),rv=a("li"),Sie=a("strong"),Ujo=o("data2vec-audio"),Jjo=o(" \u2014 "),vN=a("a"),Yjo=o("Data2VecAudioForSequenceClassification"),Kjo=o(" (Data2VecAudio model)"),Zjo=l(),tv=a("li"),Pie=a("strong"),eDo=o("hubert"),oDo=o(" \u2014 "),TN=a("a"),rDo=o("HubertForSequenceClassification"),tDo=o(" (Hubert model)"),aDo=l(),av=a("li"),$ie=a("strong"),nDo=o("sew"),sDo=o(" \u2014 "),FN=a("a"),lDo=o("SEWForSequenceClassification"),iDo=o(" (SEW model)"),dDo=l(),nv=a("li"),Iie=a("strong"),cDo=o("sew-d"),fDo=o(" \u2014 "),CN=a("a"),mDo=o("SEWDForSequenceClassification"),gDo=o(" (SEW-D model)"),hDo=l(),sv=a("li"),jie=a("strong"),pDo=o("unispeech"),_Do=o(" \u2014 "),MN=a("a"),uDo=o("UniSpeechForSequenceClassification"),bDo=o(" (UniSpeech model)"),vDo=l(),lv=a("li"),Die=a("strong"),TDo=o("unispeech-sat"),FDo=o(" \u2014 "),EN=a("a"),CDo=o("UniSpeechSatForSequenceClassification"),MDo=o(" (UniSpeechSat model)"),EDo=l(),iv=a("li"),Nie=a("strong"),yDo=o("wav2vec2"),wDo=o(" \u2014 "),yN=a("a"),ADo=o("Wav2Vec2ForSequenceClassification"),LDo=o(" (Wav2Vec2 model)"),BDo=l(),dv=a("li"),qie=a("strong"),xDo=o("wavlm"),kDo=o(" \u2014 "),wN=a("a"),RDo=o("WavLMForSequenceClassification"),SDo=o(" (WavLM model)"),PDo=l(),cv=a("p"),$Do=o("The model is set in evaluation mode by default using "),Oie=a("code"),IDo=o("model.eval()"),jDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),DDo=o("model.train()"),NDo=l(),Xie=a("p"),qDo=o("Examples:"),ODo=l(),f(hw.$$.fragment),qxe=l(),Nd=a("h2"),fv=a("a"),Vie=a("span"),f(pw.$$.fragment),GDo=l(),zie=a("span"),XDo=o("AutoModelForAudioFrameClassification"),Oxe=l(),cr=a("div"),f(_w.$$.fragment),VDo=l(),qd=a("p"),zDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wie=a("code"),WDo=o("from_pretrained()"),QDo=o("class method or the "),Qie=a("code"),HDo=o("from_config()"),UDo=o(`class
method.`),JDo=l(),uw=a("p"),YDo=o("This class cannot be instantiated directly using "),Hie=a("code"),KDo=o("__init__()"),ZDo=o(" (throws an error)."),eNo=l(),at=a("div"),f(bw.$$.fragment),oNo=l(),Uie=a("p"),rNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tNo=l(),Od=a("p"),aNo=o(`Note:
Loading a model from its configuration file does `),Jie=a("strong"),nNo=o("not"),sNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=a("code"),lNo=o("from_pretrained()"),iNo=o("to load the model weights."),dNo=l(),Kie=a("p"),cNo=o("Examples:"),fNo=l(),f(vw.$$.fragment),mNo=l(),Ye=a("div"),f(Tw.$$.fragment),gNo=l(),Zie=a("p"),hNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pNo=l(),tn=a("p"),_No=o("The model class to instantiate is selected based on the "),ede=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),vNo=o("pretrained_model_name_or_path"),TNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),FNo=o("pretrained_model_name_or_path"),CNo=o(":"),MNo=l(),an=a("ul"),mv=a("li"),tde=a("strong"),ENo=o("data2vec-audio"),yNo=o(" \u2014 "),AN=a("a"),wNo=o("Data2VecAudioForAudioFrameClassification"),ANo=o(" (Data2VecAudio model)"),LNo=l(),gv=a("li"),ade=a("strong"),BNo=o("unispeech-sat"),xNo=o(" \u2014 "),LN=a("a"),kNo=o("UniSpeechSatForAudioFrameClassification"),RNo=o(" (UniSpeechSat model)"),SNo=l(),hv=a("li"),nde=a("strong"),PNo=o("wav2vec2"),$No=o(" \u2014 "),BN=a("a"),INo=o("Wav2Vec2ForAudioFrameClassification"),jNo=o(" (Wav2Vec2 model)"),DNo=l(),pv=a("li"),sde=a("strong"),NNo=o("wavlm"),qNo=o(" \u2014 "),xN=a("a"),ONo=o("WavLMForAudioFrameClassification"),GNo=o(" (WavLM model)"),XNo=l(),_v=a("p"),VNo=o("The model is set in evaluation mode by default using "),lde=a("code"),zNo=o("model.eval()"),WNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=a("code"),QNo=o("model.train()"),HNo=l(),dde=a("p"),UNo=o("Examples:"),JNo=l(),f(Fw.$$.fragment),Gxe=l(),Gd=a("h2"),uv=a("a"),cde=a("span"),f(Cw.$$.fragment),YNo=l(),fde=a("span"),KNo=o("AutoModelForCTC"),Xxe=l(),fr=a("div"),f(Mw.$$.fragment),ZNo=l(),Xd=a("p"),eqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mde=a("code"),oqo=o("from_pretrained()"),rqo=o("class method or the "),gde=a("code"),tqo=o("from_config()"),aqo=o(`class
method.`),nqo=l(),Ew=a("p"),sqo=o("This class cannot be instantiated directly using "),hde=a("code"),lqo=o("__init__()"),iqo=o(" (throws an error)."),dqo=l(),nt=a("div"),f(yw.$$.fragment),cqo=l(),pde=a("p"),fqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mqo=l(),Vd=a("p"),gqo=o(`Note:
Loading a model from its configuration file does `),_de=a("strong"),hqo=o("not"),pqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=a("code"),_qo=o("from_pretrained()"),uqo=o("to load the model weights."),bqo=l(),bde=a("p"),vqo=o("Examples:"),Tqo=l(),f(ww.$$.fragment),Fqo=l(),Ke=a("div"),f(Aw.$$.fragment),Cqo=l(),vde=a("p"),Mqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Eqo=l(),nn=a("p"),yqo=o("The model class to instantiate is selected based on the "),Tde=a("code"),wqo=o("model_type"),Aqo=o(` property of the config object (either
passed as an argument or loaded from `),Fde=a("code"),Lqo=o("pretrained_model_name_or_path"),Bqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),xqo=o("pretrained_model_name_or_path"),kqo=o(":"),Rqo=l(),ke=a("ul"),bv=a("li"),Mde=a("strong"),Sqo=o("data2vec-audio"),Pqo=o(" \u2014 "),kN=a("a"),$qo=o("Data2VecAudioForCTC"),Iqo=o(" (Data2VecAudio model)"),jqo=l(),vv=a("li"),Ede=a("strong"),Dqo=o("hubert"),Nqo=o(" \u2014 "),RN=a("a"),qqo=o("HubertForCTC"),Oqo=o(" (Hubert model)"),Gqo=l(),Tv=a("li"),yde=a("strong"),Xqo=o("sew"),Vqo=o(" \u2014 "),SN=a("a"),zqo=o("SEWForCTC"),Wqo=o(" (SEW model)"),Qqo=l(),Fv=a("li"),wde=a("strong"),Hqo=o("sew-d"),Uqo=o(" \u2014 "),PN=a("a"),Jqo=o("SEWDForCTC"),Yqo=o(" (SEW-D model)"),Kqo=l(),Cv=a("li"),Ade=a("strong"),Zqo=o("unispeech"),eOo=o(" \u2014 "),$N=a("a"),oOo=o("UniSpeechForCTC"),rOo=o(" (UniSpeech model)"),tOo=l(),Mv=a("li"),Lde=a("strong"),aOo=o("unispeech-sat"),nOo=o(" \u2014 "),IN=a("a"),sOo=o("UniSpeechSatForCTC"),lOo=o(" (UniSpeechSat model)"),iOo=l(),Ev=a("li"),Bde=a("strong"),dOo=o("wav2vec2"),cOo=o(" \u2014 "),jN=a("a"),fOo=o("Wav2Vec2ForCTC"),mOo=o(" (Wav2Vec2 model)"),gOo=l(),yv=a("li"),xde=a("strong"),hOo=o("wavlm"),pOo=o(" \u2014 "),DN=a("a"),_Oo=o("WavLMForCTC"),uOo=o(" (WavLM model)"),bOo=l(),wv=a("p"),vOo=o("The model is set in evaluation mode by default using "),kde=a("code"),TOo=o("model.eval()"),FOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),COo=o("model.train()"),MOo=l(),Sde=a("p"),EOo=o("Examples:"),yOo=l(),f(Lw.$$.fragment),Vxe=l(),zd=a("h2"),Av=a("a"),Pde=a("span"),f(Bw.$$.fragment),wOo=l(),$de=a("span"),AOo=o("AutoModelForSpeechSeq2Seq"),zxe=l(),mr=a("div"),f(xw.$$.fragment),LOo=l(),Wd=a("p"),BOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ide=a("code"),xOo=o("from_pretrained()"),kOo=o("class method or the "),jde=a("code"),ROo=o("from_config()"),SOo=o(`class
method.`),POo=l(),kw=a("p"),$Oo=o("This class cannot be instantiated directly using "),Dde=a("code"),IOo=o("__init__()"),jOo=o(" (throws an error)."),DOo=l(),st=a("div"),f(Rw.$$.fragment),NOo=l(),Nde=a("p"),qOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OOo=l(),Qd=a("p"),GOo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),XOo=o("not"),VOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ode=a("code"),zOo=o("from_pretrained()"),WOo=o("to load the model weights."),QOo=l(),Gde=a("p"),HOo=o("Examples:"),UOo=l(),f(Sw.$$.fragment),JOo=l(),Ze=a("div"),f(Pw.$$.fragment),YOo=l(),Xde=a("p"),KOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZOo=l(),sn=a("p"),eGo=o("The model class to instantiate is selected based on the "),Vde=a("code"),oGo=o("model_type"),rGo=o(` property of the config object (either
passed as an argument or loaded from `),zde=a("code"),tGo=o("pretrained_model_name_or_path"),aGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=a("code"),nGo=o("pretrained_model_name_or_path"),sGo=o(":"),lGo=l(),$w=a("ul"),Lv=a("li"),Qde=a("strong"),iGo=o("speech-encoder-decoder"),dGo=o(" \u2014 "),NN=a("a"),cGo=o("SpeechEncoderDecoderModel"),fGo=o(" (Speech Encoder decoder model)"),mGo=l(),Bv=a("li"),Hde=a("strong"),gGo=o("speech_to_text"),hGo=o(" \u2014 "),qN=a("a"),pGo=o("Speech2TextForConditionalGeneration"),_Go=o(" (Speech2Text model)"),uGo=l(),xv=a("p"),bGo=o("The model is set in evaluation mode by default using "),Ude=a("code"),vGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),FGo=o("model.train()"),CGo=l(),Yde=a("p"),MGo=o("Examples:"),EGo=l(),f(Iw.$$.fragment),Wxe=l(),Hd=a("h2"),kv=a("a"),Kde=a("span"),f(jw.$$.fragment),yGo=l(),Zde=a("span"),wGo=o("AutoModelForAudioXVector"),Qxe=l(),gr=a("div"),f(Dw.$$.fragment),AGo=l(),Ud=a("p"),LGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ece=a("code"),BGo=o("from_pretrained()"),xGo=o("class method or the "),oce=a("code"),kGo=o("from_config()"),RGo=o(`class
method.`),SGo=l(),Nw=a("p"),PGo=o("This class cannot be instantiated directly using "),rce=a("code"),$Go=o("__init__()"),IGo=o(" (throws an error)."),jGo=l(),lt=a("div"),f(qw.$$.fragment),DGo=l(),tce=a("p"),NGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qGo=l(),Jd=a("p"),OGo=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),GGo=o("not"),XGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nce=a("code"),VGo=o("from_pretrained()"),zGo=o("to load the model weights."),WGo=l(),sce=a("p"),QGo=o("Examples:"),HGo=l(),f(Ow.$$.fragment),UGo=l(),eo=a("div"),f(Gw.$$.fragment),JGo=l(),lce=a("p"),YGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KGo=l(),ln=a("p"),ZGo=o("The model class to instantiate is selected based on the "),ice=a("code"),eXo=o("model_type"),oXo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),rXo=o("pretrained_model_name_or_path"),tXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),aXo=o("pretrained_model_name_or_path"),nXo=o(":"),sXo=l(),dn=a("ul"),Rv=a("li"),fce=a("strong"),lXo=o("data2vec-audio"),iXo=o(" \u2014 "),ON=a("a"),dXo=o("Data2VecAudioForXVector"),cXo=o(" (Data2VecAudio model)"),fXo=l(),Sv=a("li"),mce=a("strong"),mXo=o("unispeech-sat"),gXo=o(" \u2014 "),GN=a("a"),hXo=o("UniSpeechSatForXVector"),pXo=o(" (UniSpeechSat model)"),_Xo=l(),Pv=a("li"),gce=a("strong"),uXo=o("wav2vec2"),bXo=o(" \u2014 "),XN=a("a"),vXo=o("Wav2Vec2ForXVector"),TXo=o(" (Wav2Vec2 model)"),FXo=l(),$v=a("li"),hce=a("strong"),CXo=o("wavlm"),MXo=o(" \u2014 "),VN=a("a"),EXo=o("WavLMForXVector"),yXo=o(" (WavLM model)"),wXo=l(),Iv=a("p"),AXo=o("The model is set in evaluation mode by default using "),pce=a("code"),LXo=o("model.eval()"),BXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=a("code"),xXo=o("model.train()"),kXo=l(),uce=a("p"),RXo=o("Examples:"),SXo=l(),f(Xw.$$.fragment),Hxe=l(),Yd=a("h2"),jv=a("a"),bce=a("span"),f(Vw.$$.fragment),PXo=l(),vce=a("span"),$Xo=o("AutoModelForMaskedImageModeling"),Uxe=l(),hr=a("div"),f(zw.$$.fragment),IXo=l(),Kd=a("p"),jXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tce=a("code"),DXo=o("from_pretrained()"),NXo=o("class method or the "),Fce=a("code"),qXo=o("from_config()"),OXo=o(`class
method.`),GXo=l(),Ww=a("p"),XXo=o("This class cannot be instantiated directly using "),Cce=a("code"),VXo=o("__init__()"),zXo=o(" (throws an error)."),WXo=l(),it=a("div"),f(Qw.$$.fragment),QXo=l(),Mce=a("p"),HXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UXo=l(),Zd=a("p"),JXo=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),YXo=o("not"),KXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=a("code"),ZXo=o("from_pretrained()"),eVo=o("to load the model weights."),oVo=l(),wce=a("p"),rVo=o("Examples:"),tVo=l(),f(Hw.$$.fragment),aVo=l(),oo=a("div"),f(Uw.$$.fragment),nVo=l(),Ace=a("p"),sVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),lVo=l(),cn=a("p"),iVo=o("The model class to instantiate is selected based on the "),Lce=a("code"),dVo=o("model_type"),cVo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),fVo=o("pretrained_model_name_or_path"),mVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),gVo=o("pretrained_model_name_or_path"),hVo=o(":"),pVo=l(),ec=a("ul"),Dv=a("li"),kce=a("strong"),_Vo=o("deit"),uVo=o(" \u2014 "),zN=a("a"),bVo=o("DeiTForMaskedImageModeling"),vVo=o(" (DeiT model)"),TVo=l(),Nv=a("li"),Rce=a("strong"),FVo=o("swin"),CVo=o(" \u2014 "),WN=a("a"),MVo=o("SwinForMaskedImageModeling"),EVo=o(" (Swin model)"),yVo=l(),qv=a("li"),Sce=a("strong"),wVo=o("vit"),AVo=o(" \u2014 "),QN=a("a"),LVo=o("ViTForMaskedImageModeling"),BVo=o(" (ViT model)"),xVo=l(),Ov=a("p"),kVo=o("The model is set in evaluation mode by default using "),Pce=a("code"),RVo=o("model.eval()"),SVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),PVo=o("model.train()"),$Vo=l(),Ice=a("p"),IVo=o("Examples:"),jVo=l(),f(Jw.$$.fragment),Jxe=l(),oc=a("h2"),Gv=a("a"),jce=a("span"),f(Yw.$$.fragment),DVo=l(),Dce=a("span"),NVo=o("AutoModelForObjectDetection"),Yxe=l(),pr=a("div"),f(Kw.$$.fragment),qVo=l(),rc=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nce=a("code"),GVo=o("from_pretrained()"),XVo=o("class method or the "),qce=a("code"),VVo=o("from_config()"),zVo=o(`class
method.`),WVo=l(),Zw=a("p"),QVo=o("This class cannot be instantiated directly using "),Oce=a("code"),HVo=o("__init__()"),UVo=o(" (throws an error)."),JVo=l(),dt=a("div"),f(e6.$$.fragment),YVo=l(),Gce=a("p"),KVo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ZVo=l(),tc=a("p"),ezo=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),ozo=o("not"),rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=a("code"),tzo=o("from_pretrained()"),azo=o("to load the model weights."),nzo=l(),zce=a("p"),szo=o("Examples:"),lzo=l(),f(o6.$$.fragment),izo=l(),ro=a("div"),f(r6.$$.fragment),dzo=l(),Wce=a("p"),czo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fzo=l(),fn=a("p"),mzo=o("The model class to instantiate is selected based on the "),Qce=a("code"),gzo=o("model_type"),hzo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),pzo=o("pretrained_model_name_or_path"),_zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),uzo=o("pretrained_model_name_or_path"),bzo=o(":"),vzo=l(),Jce=a("ul"),Xv=a("li"),Yce=a("strong"),Tzo=o("detr"),Fzo=o(" \u2014 "),HN=a("a"),Czo=o("DetrForObjectDetection"),Mzo=o(" (DETR model)"),Ezo=l(),Vv=a("p"),yzo=o("The model is set in evaluation mode by default using "),Kce=a("code"),wzo=o("model.eval()"),Azo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),Lzo=o("model.train()"),Bzo=l(),efe=a("p"),xzo=o("Examples:"),kzo=l(),f(t6.$$.fragment),Kxe=l(),ac=a("h2"),zv=a("a"),ofe=a("span"),f(a6.$$.fragment),Rzo=l(),rfe=a("span"),Szo=o("AutoModelForImageSegmentation"),Zxe=l(),_r=a("div"),f(n6.$$.fragment),Pzo=l(),nc=a("p"),$zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tfe=a("code"),Izo=o("from_pretrained()"),jzo=o("class method or the "),afe=a("code"),Dzo=o("from_config()"),Nzo=o(`class
method.`),qzo=l(),s6=a("p"),Ozo=o("This class cannot be instantiated directly using "),nfe=a("code"),Gzo=o("__init__()"),Xzo=o(" (throws an error)."),Vzo=l(),ct=a("div"),f(l6.$$.fragment),zzo=l(),sfe=a("p"),Wzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qzo=l(),sc=a("p"),Hzo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),Uzo=o("not"),Jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=a("code"),Yzo=o("from_pretrained()"),Kzo=o("to load the model weights."),Zzo=l(),dfe=a("p"),eWo=o("Examples:"),oWo=l(),f(i6.$$.fragment),rWo=l(),to=a("div"),f(d6.$$.fragment),tWo=l(),cfe=a("p"),aWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nWo=l(),mn=a("p"),sWo=o("The model class to instantiate is selected based on the "),ffe=a("code"),lWo=o("model_type"),iWo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),fWo=o("pretrained_model_name_or_path"),mWo=o(":"),gWo=l(),hfe=a("ul"),Wv=a("li"),pfe=a("strong"),hWo=o("detr"),pWo=o(" \u2014 "),UN=a("a"),_Wo=o("DetrForSegmentation"),uWo=o(" (DETR model)"),bWo=l(),Qv=a("p"),vWo=o("The model is set in evaluation mode by default using "),_fe=a("code"),TWo=o("model.eval()"),FWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),CWo=o("model.train()"),MWo=l(),bfe=a("p"),EWo=o("Examples:"),yWo=l(),f(c6.$$.fragment),eke=l(),lc=a("h2"),Hv=a("a"),vfe=a("span"),f(f6.$$.fragment),wWo=l(),Tfe=a("span"),AWo=o("AutoModelForSemanticSegmentation"),oke=l(),ur=a("div"),f(m6.$$.fragment),LWo=l(),ic=a("p"),BWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ffe=a("code"),xWo=o("from_pretrained()"),kWo=o("class method or the "),Cfe=a("code"),RWo=o("from_config()"),SWo=o(`class
method.`),PWo=l(),g6=a("p"),$Wo=o("This class cannot be instantiated directly using "),Mfe=a("code"),IWo=o("__init__()"),jWo=o(" (throws an error)."),DWo=l(),ft=a("div"),f(h6.$$.fragment),NWo=l(),Efe=a("p"),qWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OWo=l(),dc=a("p"),GWo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),XWo=o("not"),VWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=a("code"),zWo=o("from_pretrained()"),WWo=o("to load the model weights."),QWo=l(),Afe=a("p"),HWo=o("Examples:"),UWo=l(),f(p6.$$.fragment),JWo=l(),ao=a("div"),f(_6.$$.fragment),YWo=l(),Lfe=a("p"),KWo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ZWo=l(),gn=a("p"),eQo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),oQo=o("model_type"),rQo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(":"),lQo=l(),u6=a("ul"),Uv=a("li"),Rfe=a("strong"),iQo=o("beit"),dQo=o(" \u2014 "),JN=a("a"),cQo=o("BeitForSemanticSegmentation"),fQo=o(" (BEiT model)"),mQo=l(),Jv=a("li"),Sfe=a("strong"),gQo=o("segformer"),hQo=o(" \u2014 "),YN=a("a"),pQo=o("SegformerForSemanticSegmentation"),_Qo=o(" (SegFormer model)"),uQo=l(),Yv=a("p"),bQo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),vQo=o("model.eval()"),TQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),FQo=o("model.train()"),CQo=l(),Ife=a("p"),MQo=o("Examples:"),EQo=l(),f(b6.$$.fragment),rke=l(),cc=a("h2"),Kv=a("a"),jfe=a("span"),f(v6.$$.fragment),yQo=l(),Dfe=a("span"),wQo=o("AutoModelForInstanceSegmentation"),tke=l(),br=a("div"),f(T6.$$.fragment),AQo=l(),fc=a("p"),LQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Nfe=a("code"),BQo=o("from_pretrained()"),xQo=o("class method or the "),qfe=a("code"),kQo=o("from_config()"),RQo=o(`class
method.`),SQo=l(),F6=a("p"),PQo=o("This class cannot be instantiated directly using "),Ofe=a("code"),$Qo=o("__init__()"),IQo=o(" (throws an error)."),jQo=l(),mt=a("div"),f(C6.$$.fragment),DQo=l(),Gfe=a("p"),NQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),qQo=l(),mc=a("p"),OQo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),GQo=o("not"),XQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vfe=a("code"),VQo=o("from_pretrained()"),zQo=o("to load the model weights."),WQo=l(),zfe=a("p"),QQo=o("Examples:"),HQo=l(),f(M6.$$.fragment),UQo=l(),no=a("div"),f(E6.$$.fragment),JQo=l(),Wfe=a("p"),YQo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),KQo=l(),hn=a("p"),ZQo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),eHo=o("model_type"),oHo=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),rHo=o("pretrained_model_name_or_path"),tHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(":"),sHo=l(),Jfe=a("ul"),Zv=a("li"),Yfe=a("strong"),lHo=o("maskformer"),iHo=o(" \u2014 "),KN=a("a"),dHo=o("MaskFormerForInstanceSegmentation"),cHo=o(" (MaskFormer model)"),fHo=l(),eT=a("p"),mHo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),gHo=o("model.eval()"),hHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),pHo=o("model.train()"),_Ho=l(),eme=a("p"),uHo=o("Examples:"),bHo=l(),f(y6.$$.fragment),ake=l(),gc=a("h2"),oT=a("a"),ome=a("span"),f(w6.$$.fragment),vHo=l(),rme=a("span"),THo=o("TFAutoModel"),nke=l(),vr=a("div"),f(A6.$$.fragment),FHo=l(),hc=a("p"),CHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tme=a("code"),MHo=o("from_pretrained()"),EHo=o("class method or the "),ame=a("code"),yHo=o("from_config()"),wHo=o(`class
method.`),AHo=l(),L6=a("p"),LHo=o("This class cannot be instantiated directly using "),nme=a("code"),BHo=o("__init__()"),xHo=o(" (throws an error)."),kHo=l(),gt=a("div"),f(B6.$$.fragment),RHo=l(),sme=a("p"),SHo=o("Instantiates one of the base model classes of the library from a configuration."),PHo=l(),pc=a("p"),$Ho=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),IHo=o("not"),jHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=a("code"),DHo=o("from_pretrained()"),NHo=o("to load the model weights."),qHo=l(),dme=a("p"),OHo=o("Examples:"),GHo=l(),f(x6.$$.fragment),XHo=l(),ho=a("div"),f(k6.$$.fragment),VHo=l(),cme=a("p"),zHo=o("Instantiate one of the base model classes of the library from a pretrained model."),WHo=l(),pn=a("p"),QHo=o("The model class to instantiate is selected based on the "),fme=a("code"),HHo=o("model_type"),UHo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),KHo=o("pretrained_model_name_or_path"),ZHo=o(":"),eUo=l(),B=a("ul"),rT=a("li"),hme=a("strong"),oUo=o("albert"),rUo=o(" \u2014 "),ZN=a("a"),tUo=o("TFAlbertModel"),aUo=o(" (ALBERT model)"),nUo=l(),tT=a("li"),pme=a("strong"),sUo=o("bart"),lUo=o(" \u2014 "),eq=a("a"),iUo=o("TFBartModel"),dUo=o(" (BART model)"),cUo=l(),aT=a("li"),_me=a("strong"),fUo=o("bert"),mUo=o(" \u2014 "),oq=a("a"),gUo=o("TFBertModel"),hUo=o(" (BERT model)"),pUo=l(),nT=a("li"),ume=a("strong"),_Uo=o("blenderbot"),uUo=o(" \u2014 "),rq=a("a"),bUo=o("TFBlenderbotModel"),vUo=o(" (Blenderbot model)"),TUo=l(),sT=a("li"),bme=a("strong"),FUo=o("blenderbot-small"),CUo=o(" \u2014 "),tq=a("a"),MUo=o("TFBlenderbotSmallModel"),EUo=o(" (BlenderbotSmall model)"),yUo=l(),lT=a("li"),vme=a("strong"),wUo=o("camembert"),AUo=o(" \u2014 "),aq=a("a"),LUo=o("TFCamembertModel"),BUo=o(" (CamemBERT model)"),xUo=l(),iT=a("li"),Tme=a("strong"),kUo=o("clip"),RUo=o(" \u2014 "),nq=a("a"),SUo=o("TFCLIPModel"),PUo=o(" (CLIP model)"),$Uo=l(),dT=a("li"),Fme=a("strong"),IUo=o("convbert"),jUo=o(" \u2014 "),sq=a("a"),DUo=o("TFConvBertModel"),NUo=o(" (ConvBERT model)"),qUo=l(),cT=a("li"),Cme=a("strong"),OUo=o("convnext"),GUo=o(" \u2014 "),lq=a("a"),XUo=o("TFConvNextModel"),VUo=o(" (ConvNext model)"),zUo=l(),fT=a("li"),Mme=a("strong"),WUo=o("ctrl"),QUo=o(" \u2014 "),iq=a("a"),HUo=o("TFCTRLModel"),UUo=o(" (CTRL model)"),JUo=l(),mT=a("li"),Eme=a("strong"),YUo=o("deberta"),KUo=o(" \u2014 "),dq=a("a"),ZUo=o("TFDebertaModel"),eJo=o(" (DeBERTa model)"),oJo=l(),gT=a("li"),yme=a("strong"),rJo=o("deberta-v2"),tJo=o(" \u2014 "),cq=a("a"),aJo=o("TFDebertaV2Model"),nJo=o(" (DeBERTa-v2 model)"),sJo=l(),hT=a("li"),wme=a("strong"),lJo=o("distilbert"),iJo=o(" \u2014 "),fq=a("a"),dJo=o("TFDistilBertModel"),cJo=o(" (DistilBERT model)"),fJo=l(),pT=a("li"),Ame=a("strong"),mJo=o("dpr"),gJo=o(" \u2014 "),mq=a("a"),hJo=o("TFDPRQuestionEncoder"),pJo=o(" (DPR model)"),_Jo=l(),_T=a("li"),Lme=a("strong"),uJo=o("electra"),bJo=o(" \u2014 "),gq=a("a"),vJo=o("TFElectraModel"),TJo=o(" (ELECTRA model)"),FJo=l(),uT=a("li"),Bme=a("strong"),CJo=o("flaubert"),MJo=o(" \u2014 "),hq=a("a"),EJo=o("TFFlaubertModel"),yJo=o(" (FlauBERT model)"),wJo=l(),Gs=a("li"),xme=a("strong"),AJo=o("funnel"),LJo=o(" \u2014 "),pq=a("a"),BJo=o("TFFunnelModel"),xJo=o(" or "),_q=a("a"),kJo=o("TFFunnelBaseModel"),RJo=o(" (Funnel Transformer model)"),SJo=l(),bT=a("li"),kme=a("strong"),PJo=o("gpt2"),$Jo=o(" \u2014 "),uq=a("a"),IJo=o("TFGPT2Model"),jJo=o(" (OpenAI GPT-2 model)"),DJo=l(),vT=a("li"),Rme=a("strong"),NJo=o("hubert"),qJo=o(" \u2014 "),bq=a("a"),OJo=o("TFHubertModel"),GJo=o(" (Hubert model)"),XJo=l(),TT=a("li"),Sme=a("strong"),VJo=o("layoutlm"),zJo=o(" \u2014 "),vq=a("a"),WJo=o("TFLayoutLMModel"),QJo=o(" (LayoutLM model)"),HJo=l(),FT=a("li"),Pme=a("strong"),UJo=o("led"),JJo=o(" \u2014 "),Tq=a("a"),YJo=o("TFLEDModel"),KJo=o(" (LED model)"),ZJo=l(),CT=a("li"),$me=a("strong"),eYo=o("longformer"),oYo=o(" \u2014 "),Fq=a("a"),rYo=o("TFLongformerModel"),tYo=o(" (Longformer model)"),aYo=l(),MT=a("li"),Ime=a("strong"),nYo=o("lxmert"),sYo=o(" \u2014 "),Cq=a("a"),lYo=o("TFLxmertModel"),iYo=o(" (LXMERT model)"),dYo=l(),ET=a("li"),jme=a("strong"),cYo=o("marian"),fYo=o(" \u2014 "),Mq=a("a"),mYo=o("TFMarianModel"),gYo=o(" (Marian model)"),hYo=l(),yT=a("li"),Dme=a("strong"),pYo=o("mbart"),_Yo=o(" \u2014 "),Eq=a("a"),uYo=o("TFMBartModel"),bYo=o(" (mBART model)"),vYo=l(),wT=a("li"),Nme=a("strong"),TYo=o("mobilebert"),FYo=o(" \u2014 "),yq=a("a"),CYo=o("TFMobileBertModel"),MYo=o(" (MobileBERT model)"),EYo=l(),AT=a("li"),qme=a("strong"),yYo=o("mpnet"),wYo=o(" \u2014 "),wq=a("a"),AYo=o("TFMPNetModel"),LYo=o(" (MPNet model)"),BYo=l(),LT=a("li"),Ome=a("strong"),xYo=o("mt5"),kYo=o(" \u2014 "),Aq=a("a"),RYo=o("TFMT5Model"),SYo=o(" (mT5 model)"),PYo=l(),BT=a("li"),Gme=a("strong"),$Yo=o("openai-gpt"),IYo=o(" \u2014 "),Lq=a("a"),jYo=o("TFOpenAIGPTModel"),DYo=o(" (OpenAI GPT model)"),NYo=l(),xT=a("li"),Xme=a("strong"),qYo=o("pegasus"),OYo=o(" \u2014 "),Bq=a("a"),GYo=o("TFPegasusModel"),XYo=o(" (Pegasus model)"),VYo=l(),kT=a("li"),Vme=a("strong"),zYo=o("rembert"),WYo=o(" \u2014 "),xq=a("a"),QYo=o("TFRemBertModel"),HYo=o(" (RemBERT model)"),UYo=l(),RT=a("li"),zme=a("strong"),JYo=o("roberta"),YYo=o(" \u2014 "),kq=a("a"),KYo=o("TFRobertaModel"),ZYo=o(" (RoBERTa model)"),eKo=l(),ST=a("li"),Wme=a("strong"),oKo=o("roformer"),rKo=o(" \u2014 "),Rq=a("a"),tKo=o("TFRoFormerModel"),aKo=o(" (RoFormer model)"),nKo=l(),PT=a("li"),Qme=a("strong"),sKo=o("speech_to_text"),lKo=o(" \u2014 "),Sq=a("a"),iKo=o("TFSpeech2TextModel"),dKo=o(" (Speech2Text model)"),cKo=l(),$T=a("li"),Hme=a("strong"),fKo=o("t5"),mKo=o(" \u2014 "),Pq=a("a"),gKo=o("TFT5Model"),hKo=o(" (T5 model)"),pKo=l(),IT=a("li"),Ume=a("strong"),_Ko=o("tapas"),uKo=o(" \u2014 "),$q=a("a"),bKo=o("TFTapasModel"),vKo=o(" (TAPAS model)"),TKo=l(),jT=a("li"),Jme=a("strong"),FKo=o("transfo-xl"),CKo=o(" \u2014 "),Iq=a("a"),MKo=o("TFTransfoXLModel"),EKo=o(" (Transformer-XL model)"),yKo=l(),DT=a("li"),Yme=a("strong"),wKo=o("vit"),AKo=o(" \u2014 "),jq=a("a"),LKo=o("TFViTModel"),BKo=o(" (ViT model)"),xKo=l(),NT=a("li"),Kme=a("strong"),kKo=o("wav2vec2"),RKo=o(" \u2014 "),Dq=a("a"),SKo=o("TFWav2Vec2Model"),PKo=o(" (Wav2Vec2 model)"),$Ko=l(),qT=a("li"),Zme=a("strong"),IKo=o("xlm"),jKo=o(" \u2014 "),Nq=a("a"),DKo=o("TFXLMModel"),NKo=o(" (XLM model)"),qKo=l(),OT=a("li"),ege=a("strong"),OKo=o("xlm-roberta"),GKo=o(" \u2014 "),qq=a("a"),XKo=o("TFXLMRobertaModel"),VKo=o(" (XLM-RoBERTa model)"),zKo=l(),GT=a("li"),oge=a("strong"),WKo=o("xlnet"),QKo=o(" \u2014 "),Oq=a("a"),HKo=o("TFXLNetModel"),UKo=o(" (XLNet model)"),JKo=l(),rge=a("p"),YKo=o("Examples:"),KKo=l(),f(R6.$$.fragment),ske=l(),_c=a("h2"),XT=a("a"),tge=a("span"),f(S6.$$.fragment),ZKo=l(),age=a("span"),eZo=o("TFAutoModelForPreTraining"),lke=l(),Tr=a("div"),f(P6.$$.fragment),oZo=l(),uc=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nge=a("code"),tZo=o("from_pretrained()"),aZo=o("class method or the "),sge=a("code"),nZo=o("from_config()"),sZo=o(`class
method.`),lZo=l(),$6=a("p"),iZo=o("This class cannot be instantiated directly using "),lge=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),ht=a("div"),f(I6.$$.fragment),mZo=l(),ige=a("p"),gZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hZo=l(),bc=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),_Zo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=a("code"),bZo=o("from_pretrained()"),vZo=o("to load the model weights."),TZo=l(),fge=a("p"),FZo=o("Examples:"),CZo=l(),f(j6.$$.fragment),MZo=l(),po=a("div"),f(D6.$$.fragment),EZo=l(),mge=a("p"),yZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wZo=l(),_n=a("p"),AZo=o("The model class to instantiate is selected based on the "),gge=a("code"),LZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),xZo=o("pretrained_model_name_or_path"),kZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),RZo=o("pretrained_model_name_or_path"),SZo=o(":"),PZo=l(),H=a("ul"),VT=a("li"),_ge=a("strong"),$Zo=o("albert"),IZo=o(" \u2014 "),Gq=a("a"),jZo=o("TFAlbertForPreTraining"),DZo=o(" (ALBERT model)"),NZo=l(),zT=a("li"),uge=a("strong"),qZo=o("bart"),OZo=o(" \u2014 "),Xq=a("a"),GZo=o("TFBartForConditionalGeneration"),XZo=o(" (BART model)"),VZo=l(),WT=a("li"),bge=a("strong"),zZo=o("bert"),WZo=o(" \u2014 "),Vq=a("a"),QZo=o("TFBertForPreTraining"),HZo=o(" (BERT model)"),UZo=l(),QT=a("li"),vge=a("strong"),JZo=o("camembert"),YZo=o(" \u2014 "),zq=a("a"),KZo=o("TFCamembertForMaskedLM"),ZZo=o(" (CamemBERT model)"),eer=l(),HT=a("li"),Tge=a("strong"),oer=o("ctrl"),rer=o(" \u2014 "),Wq=a("a"),ter=o("TFCTRLLMHeadModel"),aer=o(" (CTRL model)"),ner=l(),UT=a("li"),Fge=a("strong"),ser=o("distilbert"),ler=o(" \u2014 "),Qq=a("a"),ier=o("TFDistilBertForMaskedLM"),der=o(" (DistilBERT model)"),cer=l(),JT=a("li"),Cge=a("strong"),fer=o("electra"),mer=o(" \u2014 "),Hq=a("a"),ger=o("TFElectraForPreTraining"),her=o(" (ELECTRA model)"),per=l(),YT=a("li"),Mge=a("strong"),_er=o("flaubert"),uer=o(" \u2014 "),Uq=a("a"),ber=o("TFFlaubertWithLMHeadModel"),ver=o(" (FlauBERT model)"),Ter=l(),KT=a("li"),Ege=a("strong"),Fer=o("funnel"),Cer=o(" \u2014 "),Jq=a("a"),Mer=o("TFFunnelForPreTraining"),Eer=o(" (Funnel Transformer model)"),yer=l(),ZT=a("li"),yge=a("strong"),wer=o("gpt2"),Aer=o(" \u2014 "),Yq=a("a"),Ler=o("TFGPT2LMHeadModel"),Ber=o(" (OpenAI GPT-2 model)"),xer=l(),eF=a("li"),wge=a("strong"),ker=o("layoutlm"),Rer=o(" \u2014 "),Kq=a("a"),Ser=o("TFLayoutLMForMaskedLM"),Per=o(" (LayoutLM model)"),$er=l(),oF=a("li"),Age=a("strong"),Ier=o("lxmert"),jer=o(" \u2014 "),Zq=a("a"),Der=o("TFLxmertForPreTraining"),Ner=o(" (LXMERT model)"),qer=l(),rF=a("li"),Lge=a("strong"),Oer=o("mobilebert"),Ger=o(" \u2014 "),eO=a("a"),Xer=o("TFMobileBertForPreTraining"),Ver=o(" (MobileBERT model)"),zer=l(),tF=a("li"),Bge=a("strong"),Wer=o("mpnet"),Qer=o(" \u2014 "),oO=a("a"),Her=o("TFMPNetForMaskedLM"),Uer=o(" (MPNet model)"),Jer=l(),aF=a("li"),xge=a("strong"),Yer=o("openai-gpt"),Ker=o(" \u2014 "),rO=a("a"),Zer=o("TFOpenAIGPTLMHeadModel"),eor=o(" (OpenAI GPT model)"),oor=l(),nF=a("li"),kge=a("strong"),ror=o("roberta"),tor=o(" \u2014 "),tO=a("a"),aor=o("TFRobertaForMaskedLM"),nor=o(" (RoBERTa model)"),sor=l(),sF=a("li"),Rge=a("strong"),lor=o("t5"),ior=o(" \u2014 "),aO=a("a"),dor=o("TFT5ForConditionalGeneration"),cor=o(" (T5 model)"),mor=l(),lF=a("li"),Sge=a("strong"),gor=o("tapas"),hor=o(" \u2014 "),nO=a("a"),por=o("TFTapasForMaskedLM"),_or=o(" (TAPAS model)"),uor=l(),iF=a("li"),Pge=a("strong"),bor=o("transfo-xl"),vor=o(" \u2014 "),sO=a("a"),Tor=o("TFTransfoXLLMHeadModel"),For=o(" (Transformer-XL model)"),Cor=l(),dF=a("li"),$ge=a("strong"),Mor=o("xlm"),Eor=o(" \u2014 "),lO=a("a"),yor=o("TFXLMWithLMHeadModel"),wor=o(" (XLM model)"),Aor=l(),cF=a("li"),Ige=a("strong"),Lor=o("xlm-roberta"),Bor=o(" \u2014 "),iO=a("a"),xor=o("TFXLMRobertaForMaskedLM"),kor=o(" (XLM-RoBERTa model)"),Ror=l(),fF=a("li"),jge=a("strong"),Sor=o("xlnet"),Por=o(" \u2014 "),dO=a("a"),$or=o("TFXLNetLMHeadModel"),Ior=o(" (XLNet model)"),jor=l(),Dge=a("p"),Dor=o("Examples:"),Nor=l(),f(N6.$$.fragment),ike=l(),vc=a("h2"),mF=a("a"),Nge=a("span"),f(q6.$$.fragment),qor=l(),qge=a("span"),Oor=o("TFAutoModelForCausalLM"),dke=l(),Fr=a("div"),f(O6.$$.fragment),Gor=l(),Tc=a("p"),Xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oge=a("code"),Vor=o("from_pretrained()"),zor=o("class method or the "),Gge=a("code"),Wor=o("from_config()"),Qor=o(`class
method.`),Hor=l(),G6=a("p"),Uor=o("This class cannot be instantiated directly using "),Xge=a("code"),Jor=o("__init__()"),Yor=o(" (throws an error)."),Kor=l(),pt=a("div"),f(X6.$$.fragment),Zor=l(),Vge=a("p"),err=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),orr=l(),Fc=a("p"),rrr=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),trr=o("not"),arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wge=a("code"),nrr=o("from_pretrained()"),srr=o("to load the model weights."),lrr=l(),Qge=a("p"),irr=o("Examples:"),drr=l(),f(V6.$$.fragment),crr=l(),_o=a("div"),f(z6.$$.fragment),frr=l(),Hge=a("p"),mrr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),grr=l(),un=a("p"),hrr=o("The model class to instantiate is selected based on the "),Uge=a("code"),prr=o("model_type"),_rr=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),urr=o("pretrained_model_name_or_path"),brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),vrr=o("pretrained_model_name_or_path"),Trr=o(":"),Frr=l(),pe=a("ul"),gF=a("li"),Kge=a("strong"),Crr=o("bert"),Mrr=o(" \u2014 "),cO=a("a"),Err=o("TFBertLMHeadModel"),yrr=o(" (BERT model)"),wrr=l(),hF=a("li"),Zge=a("strong"),Arr=o("ctrl"),Lrr=o(" \u2014 "),fO=a("a"),Brr=o("TFCTRLLMHeadModel"),xrr=o(" (CTRL model)"),krr=l(),pF=a("li"),ehe=a("strong"),Rrr=o("gpt2"),Srr=o(" \u2014 "),mO=a("a"),Prr=o("TFGPT2LMHeadModel"),$rr=o(" (OpenAI GPT-2 model)"),Irr=l(),_F=a("li"),ohe=a("strong"),jrr=o("openai-gpt"),Drr=o(" \u2014 "),gO=a("a"),Nrr=o("TFOpenAIGPTLMHeadModel"),qrr=o(" (OpenAI GPT model)"),Orr=l(),uF=a("li"),rhe=a("strong"),Grr=o("rembert"),Xrr=o(" \u2014 "),hO=a("a"),Vrr=o("TFRemBertForCausalLM"),zrr=o(" (RemBERT model)"),Wrr=l(),bF=a("li"),the=a("strong"),Qrr=o("roberta"),Hrr=o(" \u2014 "),pO=a("a"),Urr=o("TFRobertaForCausalLM"),Jrr=o(" (RoBERTa model)"),Yrr=l(),vF=a("li"),ahe=a("strong"),Krr=o("roformer"),Zrr=o(" \u2014 "),_O=a("a"),etr=o("TFRoFormerForCausalLM"),otr=o(" (RoFormer model)"),rtr=l(),TF=a("li"),nhe=a("strong"),ttr=o("transfo-xl"),atr=o(" \u2014 "),uO=a("a"),ntr=o("TFTransfoXLLMHeadModel"),str=o(" (Transformer-XL model)"),ltr=l(),FF=a("li"),she=a("strong"),itr=o("xlm"),dtr=o(" \u2014 "),bO=a("a"),ctr=o("TFXLMWithLMHeadModel"),ftr=o(" (XLM model)"),mtr=l(),CF=a("li"),lhe=a("strong"),gtr=o("xlnet"),htr=o(" \u2014 "),vO=a("a"),ptr=o("TFXLNetLMHeadModel"),_tr=o(" (XLNet model)"),utr=l(),ihe=a("p"),btr=o("Examples:"),vtr=l(),f(W6.$$.fragment),cke=l(),Cc=a("h2"),MF=a("a"),dhe=a("span"),f(Q6.$$.fragment),Ttr=l(),che=a("span"),Ftr=o("TFAutoModelForImageClassification"),fke=l(),Cr=a("div"),f(H6.$$.fragment),Ctr=l(),Mc=a("p"),Mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fhe=a("code"),Etr=o("from_pretrained()"),ytr=o("class method or the "),mhe=a("code"),wtr=o("from_config()"),Atr=o(`class
method.`),Ltr=l(),U6=a("p"),Btr=o("This class cannot be instantiated directly using "),ghe=a("code"),xtr=o("__init__()"),ktr=o(" (throws an error)."),Rtr=l(),_t=a("div"),f(J6.$$.fragment),Str=l(),hhe=a("p"),Ptr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$tr=l(),Ec=a("p"),Itr=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),jtr=o("not"),Dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=a("code"),Ntr=o("from_pretrained()"),qtr=o("to load the model weights."),Otr=l(),uhe=a("p"),Gtr=o("Examples:"),Xtr=l(),f(Y6.$$.fragment),Vtr=l(),uo=a("div"),f(K6.$$.fragment),ztr=l(),bhe=a("p"),Wtr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qtr=l(),bn=a("p"),Htr=o("The model class to instantiate is selected based on the "),vhe=a("code"),Utr=o("model_type"),Jtr=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),Ztr=o("pretrained_model_name_or_path"),ear=o(":"),oar=l(),Z6=a("ul"),EF=a("li"),Che=a("strong"),rar=o("convnext"),tar=o(" \u2014 "),TO=a("a"),aar=o("TFConvNextForImageClassification"),nar=o(" (ConvNext model)"),sar=l(),yF=a("li"),Mhe=a("strong"),lar=o("vit"),iar=o(" \u2014 "),FO=a("a"),dar=o("TFViTForImageClassification"),car=o(" (ViT model)"),far=l(),Ehe=a("p"),mar=o("Examples:"),gar=l(),f(eA.$$.fragment),mke=l(),yc=a("h2"),wF=a("a"),yhe=a("span"),f(oA.$$.fragment),har=l(),whe=a("span"),par=o("TFAutoModelForMaskedLM"),gke=l(),Mr=a("div"),f(rA.$$.fragment),_ar=l(),wc=a("p"),uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ahe=a("code"),bar=o("from_pretrained()"),Tar=o("class method or the "),Lhe=a("code"),Far=o("from_config()"),Car=o(`class
method.`),Mar=l(),tA=a("p"),Ear=o("This class cannot be instantiated directly using "),Bhe=a("code"),yar=o("__init__()"),war=o(" (throws an error)."),Aar=l(),ut=a("div"),f(aA.$$.fragment),Lar=l(),xhe=a("p"),Bar=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xar=l(),Ac=a("p"),kar=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),Rar=o("not"),Sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=a("code"),Par=o("from_pretrained()"),$ar=o("to load the model weights."),Iar=l(),She=a("p"),jar=o("Examples:"),Dar=l(),f(nA.$$.fragment),Nar=l(),bo=a("div"),f(sA.$$.fragment),qar=l(),Phe=a("p"),Oar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gar=l(),vn=a("p"),Xar=o("The model class to instantiate is selected based on the "),$he=a("code"),Var=o("model_type"),zar=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),Har=o("pretrained_model_name_or_path"),Uar=o(":"),Jar=l(),Y=a("ul"),AF=a("li"),Dhe=a("strong"),Yar=o("albert"),Kar=o(" \u2014 "),CO=a("a"),Zar=o("TFAlbertForMaskedLM"),enr=o(" (ALBERT model)"),onr=l(),LF=a("li"),Nhe=a("strong"),rnr=o("bert"),tnr=o(" \u2014 "),MO=a("a"),anr=o("TFBertForMaskedLM"),nnr=o(" (BERT model)"),snr=l(),BF=a("li"),qhe=a("strong"),lnr=o("camembert"),inr=o(" \u2014 "),EO=a("a"),dnr=o("TFCamembertForMaskedLM"),cnr=o(" (CamemBERT model)"),fnr=l(),xF=a("li"),Ohe=a("strong"),mnr=o("convbert"),gnr=o(" \u2014 "),yO=a("a"),hnr=o("TFConvBertForMaskedLM"),pnr=o(" (ConvBERT model)"),_nr=l(),kF=a("li"),Ghe=a("strong"),unr=o("deberta"),bnr=o(" \u2014 "),wO=a("a"),vnr=o("TFDebertaForMaskedLM"),Tnr=o(" (DeBERTa model)"),Fnr=l(),RF=a("li"),Xhe=a("strong"),Cnr=o("deberta-v2"),Mnr=o(" \u2014 "),AO=a("a"),Enr=o("TFDebertaV2ForMaskedLM"),ynr=o(" (DeBERTa-v2 model)"),wnr=l(),SF=a("li"),Vhe=a("strong"),Anr=o("distilbert"),Lnr=o(" \u2014 "),LO=a("a"),Bnr=o("TFDistilBertForMaskedLM"),xnr=o(" (DistilBERT model)"),knr=l(),PF=a("li"),zhe=a("strong"),Rnr=o("electra"),Snr=o(" \u2014 "),BO=a("a"),Pnr=o("TFElectraForMaskedLM"),$nr=o(" (ELECTRA model)"),Inr=l(),$F=a("li"),Whe=a("strong"),jnr=o("flaubert"),Dnr=o(" \u2014 "),xO=a("a"),Nnr=o("TFFlaubertWithLMHeadModel"),qnr=o(" (FlauBERT model)"),Onr=l(),IF=a("li"),Qhe=a("strong"),Gnr=o("funnel"),Xnr=o(" \u2014 "),kO=a("a"),Vnr=o("TFFunnelForMaskedLM"),znr=o(" (Funnel Transformer model)"),Wnr=l(),jF=a("li"),Hhe=a("strong"),Qnr=o("layoutlm"),Hnr=o(" \u2014 "),RO=a("a"),Unr=o("TFLayoutLMForMaskedLM"),Jnr=o(" (LayoutLM model)"),Ynr=l(),DF=a("li"),Uhe=a("strong"),Knr=o("longformer"),Znr=o(" \u2014 "),SO=a("a"),esr=o("TFLongformerForMaskedLM"),osr=o(" (Longformer model)"),rsr=l(),NF=a("li"),Jhe=a("strong"),tsr=o("mobilebert"),asr=o(" \u2014 "),PO=a("a"),nsr=o("TFMobileBertForMaskedLM"),ssr=o(" (MobileBERT model)"),lsr=l(),qF=a("li"),Yhe=a("strong"),isr=o("mpnet"),dsr=o(" \u2014 "),$O=a("a"),csr=o("TFMPNetForMaskedLM"),fsr=o(" (MPNet model)"),msr=l(),OF=a("li"),Khe=a("strong"),gsr=o("rembert"),hsr=o(" \u2014 "),IO=a("a"),psr=o("TFRemBertForMaskedLM"),_sr=o(" (RemBERT model)"),usr=l(),GF=a("li"),Zhe=a("strong"),bsr=o("roberta"),vsr=o(" \u2014 "),jO=a("a"),Tsr=o("TFRobertaForMaskedLM"),Fsr=o(" (RoBERTa model)"),Csr=l(),XF=a("li"),epe=a("strong"),Msr=o("roformer"),Esr=o(" \u2014 "),DO=a("a"),ysr=o("TFRoFormerForMaskedLM"),wsr=o(" (RoFormer model)"),Asr=l(),VF=a("li"),ope=a("strong"),Lsr=o("tapas"),Bsr=o(" \u2014 "),NO=a("a"),xsr=o("TFTapasForMaskedLM"),ksr=o(" (TAPAS model)"),Rsr=l(),zF=a("li"),rpe=a("strong"),Ssr=o("xlm"),Psr=o(" \u2014 "),qO=a("a"),$sr=o("TFXLMWithLMHeadModel"),Isr=o(" (XLM model)"),jsr=l(),WF=a("li"),tpe=a("strong"),Dsr=o("xlm-roberta"),Nsr=o(" \u2014 "),OO=a("a"),qsr=o("TFXLMRobertaForMaskedLM"),Osr=o(" (XLM-RoBERTa model)"),Gsr=l(),ape=a("p"),Xsr=o("Examples:"),Vsr=l(),f(lA.$$.fragment),hke=l(),Lc=a("h2"),QF=a("a"),npe=a("span"),f(iA.$$.fragment),zsr=l(),spe=a("span"),Wsr=o("TFAutoModelForSeq2SeqLM"),pke=l(),Er=a("div"),f(dA.$$.fragment),Qsr=l(),Bc=a("p"),Hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lpe=a("code"),Usr=o("from_pretrained()"),Jsr=o("class method or the "),ipe=a("code"),Ysr=o("from_config()"),Ksr=o(`class
method.`),Zsr=l(),cA=a("p"),elr=o("This class cannot be instantiated directly using "),dpe=a("code"),olr=o("__init__()"),rlr=o(" (throws an error)."),tlr=l(),bt=a("div"),f(fA.$$.fragment),alr=l(),cpe=a("p"),nlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),slr=l(),xc=a("p"),llr=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),ilr=o("not"),dlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=a("code"),clr=o("from_pretrained()"),flr=o("to load the model weights."),mlr=l(),gpe=a("p"),glr=o("Examples:"),hlr=l(),f(mA.$$.fragment),plr=l(),vo=a("div"),f(gA.$$.fragment),_lr=l(),hpe=a("p"),ulr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),blr=l(),Tn=a("p"),vlr=o("The model class to instantiate is selected based on the "),ppe=a("code"),Tlr=o("model_type"),Flr=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),Clr=o("pretrained_model_name_or_path"),Mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),Elr=o("pretrained_model_name_or_path"),ylr=o(":"),wlr=l(),_e=a("ul"),HF=a("li"),bpe=a("strong"),Alr=o("bart"),Llr=o(" \u2014 "),GO=a("a"),Blr=o("TFBartForConditionalGeneration"),xlr=o(" (BART model)"),klr=l(),UF=a("li"),vpe=a("strong"),Rlr=o("blenderbot"),Slr=o(" \u2014 "),XO=a("a"),Plr=o("TFBlenderbotForConditionalGeneration"),$lr=o(" (Blenderbot model)"),Ilr=l(),JF=a("li"),Tpe=a("strong"),jlr=o("blenderbot-small"),Dlr=o(" \u2014 "),VO=a("a"),Nlr=o("TFBlenderbotSmallForConditionalGeneration"),qlr=o(" (BlenderbotSmall model)"),Olr=l(),YF=a("li"),Fpe=a("strong"),Glr=o("encoder-decoder"),Xlr=o(" \u2014 "),zO=a("a"),Vlr=o("TFEncoderDecoderModel"),zlr=o(" (Encoder decoder model)"),Wlr=l(),KF=a("li"),Cpe=a("strong"),Qlr=o("led"),Hlr=o(" \u2014 "),WO=a("a"),Ulr=o("TFLEDForConditionalGeneration"),Jlr=o(" (LED model)"),Ylr=l(),ZF=a("li"),Mpe=a("strong"),Klr=o("marian"),Zlr=o(" \u2014 "),QO=a("a"),eir=o("TFMarianMTModel"),oir=o(" (Marian model)"),rir=l(),e9=a("li"),Epe=a("strong"),tir=o("mbart"),air=o(" \u2014 "),HO=a("a"),nir=o("TFMBartForConditionalGeneration"),sir=o(" (mBART model)"),lir=l(),o9=a("li"),ype=a("strong"),iir=o("mt5"),dir=o(" \u2014 "),UO=a("a"),cir=o("TFMT5ForConditionalGeneration"),fir=o(" (mT5 model)"),mir=l(),r9=a("li"),wpe=a("strong"),gir=o("pegasus"),hir=o(" \u2014 "),JO=a("a"),pir=o("TFPegasusForConditionalGeneration"),_ir=o(" (Pegasus model)"),uir=l(),t9=a("li"),Ape=a("strong"),bir=o("t5"),vir=o(" \u2014 "),YO=a("a"),Tir=o("TFT5ForConditionalGeneration"),Fir=o(" (T5 model)"),Cir=l(),Lpe=a("p"),Mir=o("Examples:"),Eir=l(),f(hA.$$.fragment),_ke=l(),kc=a("h2"),a9=a("a"),Bpe=a("span"),f(pA.$$.fragment),yir=l(),xpe=a("span"),wir=o("TFAutoModelForSequenceClassification"),uke=l(),yr=a("div"),f(_A.$$.fragment),Air=l(),Rc=a("p"),Lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kpe=a("code"),Bir=o("from_pretrained()"),xir=o("class method or the "),Rpe=a("code"),kir=o("from_config()"),Rir=o(`class
method.`),Sir=l(),uA=a("p"),Pir=o("This class cannot be instantiated directly using "),Spe=a("code"),$ir=o("__init__()"),Iir=o(" (throws an error)."),jir=l(),vt=a("div"),f(bA.$$.fragment),Dir=l(),Ppe=a("p"),Nir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qir=l(),Sc=a("p"),Oir=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),Gir=o("not"),Xir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=a("code"),Vir=o("from_pretrained()"),zir=o("to load the model weights."),Wir=l(),jpe=a("p"),Qir=o("Examples:"),Hir=l(),f(vA.$$.fragment),Uir=l(),To=a("div"),f(TA.$$.fragment),Jir=l(),Dpe=a("p"),Yir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kir=l(),Fn=a("p"),Zir=o("The model class to instantiate is selected based on the "),Npe=a("code"),edr=o("model_type"),odr=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),rdr=o("pretrained_model_name_or_path"),tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),adr=o("pretrained_model_name_or_path"),ndr=o(":"),sdr=l(),V=a("ul"),n9=a("li"),Gpe=a("strong"),ldr=o("albert"),idr=o(" \u2014 "),KO=a("a"),ddr=o("TFAlbertForSequenceClassification"),cdr=o(" (ALBERT model)"),fdr=l(),s9=a("li"),Xpe=a("strong"),mdr=o("bert"),gdr=o(" \u2014 "),ZO=a("a"),hdr=o("TFBertForSequenceClassification"),pdr=o(" (BERT model)"),_dr=l(),l9=a("li"),Vpe=a("strong"),udr=o("camembert"),bdr=o(" \u2014 "),eG=a("a"),vdr=o("TFCamembertForSequenceClassification"),Tdr=o(" (CamemBERT model)"),Fdr=l(),i9=a("li"),zpe=a("strong"),Cdr=o("convbert"),Mdr=o(" \u2014 "),oG=a("a"),Edr=o("TFConvBertForSequenceClassification"),ydr=o(" (ConvBERT model)"),wdr=l(),d9=a("li"),Wpe=a("strong"),Adr=o("ctrl"),Ldr=o(" \u2014 "),rG=a("a"),Bdr=o("TFCTRLForSequenceClassification"),xdr=o(" (CTRL model)"),kdr=l(),c9=a("li"),Qpe=a("strong"),Rdr=o("deberta"),Sdr=o(" \u2014 "),tG=a("a"),Pdr=o("TFDebertaForSequenceClassification"),$dr=o(" (DeBERTa model)"),Idr=l(),f9=a("li"),Hpe=a("strong"),jdr=o("deberta-v2"),Ddr=o(" \u2014 "),aG=a("a"),Ndr=o("TFDebertaV2ForSequenceClassification"),qdr=o(" (DeBERTa-v2 model)"),Odr=l(),m9=a("li"),Upe=a("strong"),Gdr=o("distilbert"),Xdr=o(" \u2014 "),nG=a("a"),Vdr=o("TFDistilBertForSequenceClassification"),zdr=o(" (DistilBERT model)"),Wdr=l(),g9=a("li"),Jpe=a("strong"),Qdr=o("electra"),Hdr=o(" \u2014 "),sG=a("a"),Udr=o("TFElectraForSequenceClassification"),Jdr=o(" (ELECTRA model)"),Ydr=l(),h9=a("li"),Ype=a("strong"),Kdr=o("flaubert"),Zdr=o(" \u2014 "),lG=a("a"),ecr=o("TFFlaubertForSequenceClassification"),ocr=o(" (FlauBERT model)"),rcr=l(),p9=a("li"),Kpe=a("strong"),tcr=o("funnel"),acr=o(" \u2014 "),iG=a("a"),ncr=o("TFFunnelForSequenceClassification"),scr=o(" (Funnel Transformer model)"),lcr=l(),_9=a("li"),Zpe=a("strong"),icr=o("gpt2"),dcr=o(" \u2014 "),dG=a("a"),ccr=o("TFGPT2ForSequenceClassification"),fcr=o(" (OpenAI GPT-2 model)"),mcr=l(),u9=a("li"),e_e=a("strong"),gcr=o("layoutlm"),hcr=o(" \u2014 "),cG=a("a"),pcr=o("TFLayoutLMForSequenceClassification"),_cr=o(" (LayoutLM model)"),ucr=l(),b9=a("li"),o_e=a("strong"),bcr=o("longformer"),vcr=o(" \u2014 "),fG=a("a"),Tcr=o("TFLongformerForSequenceClassification"),Fcr=o(" (Longformer model)"),Ccr=l(),v9=a("li"),r_e=a("strong"),Mcr=o("mobilebert"),Ecr=o(" \u2014 "),mG=a("a"),ycr=o("TFMobileBertForSequenceClassification"),wcr=o(" (MobileBERT model)"),Acr=l(),T9=a("li"),t_e=a("strong"),Lcr=o("mpnet"),Bcr=o(" \u2014 "),gG=a("a"),xcr=o("TFMPNetForSequenceClassification"),kcr=o(" (MPNet model)"),Rcr=l(),F9=a("li"),a_e=a("strong"),Scr=o("openai-gpt"),Pcr=o(" \u2014 "),hG=a("a"),$cr=o("TFOpenAIGPTForSequenceClassification"),Icr=o(" (OpenAI GPT model)"),jcr=l(),C9=a("li"),n_e=a("strong"),Dcr=o("rembert"),Ncr=o(" \u2014 "),pG=a("a"),qcr=o("TFRemBertForSequenceClassification"),Ocr=o(" (RemBERT model)"),Gcr=l(),M9=a("li"),s_e=a("strong"),Xcr=o("roberta"),Vcr=o(" \u2014 "),_G=a("a"),zcr=o("TFRobertaForSequenceClassification"),Wcr=o(" (RoBERTa model)"),Qcr=l(),E9=a("li"),l_e=a("strong"),Hcr=o("roformer"),Ucr=o(" \u2014 "),uG=a("a"),Jcr=o("TFRoFormerForSequenceClassification"),Ycr=o(" (RoFormer model)"),Kcr=l(),y9=a("li"),i_e=a("strong"),Zcr=o("tapas"),efr=o(" \u2014 "),bG=a("a"),ofr=o("TFTapasForSequenceClassification"),rfr=o(" (TAPAS model)"),tfr=l(),w9=a("li"),d_e=a("strong"),afr=o("transfo-xl"),nfr=o(" \u2014 "),vG=a("a"),sfr=o("TFTransfoXLForSequenceClassification"),lfr=o(" (Transformer-XL model)"),ifr=l(),A9=a("li"),c_e=a("strong"),dfr=o("xlm"),cfr=o(" \u2014 "),TG=a("a"),ffr=o("TFXLMForSequenceClassification"),mfr=o(" (XLM model)"),gfr=l(),L9=a("li"),f_e=a("strong"),hfr=o("xlm-roberta"),pfr=o(" \u2014 "),FG=a("a"),_fr=o("TFXLMRobertaForSequenceClassification"),ufr=o(" (XLM-RoBERTa model)"),bfr=l(),B9=a("li"),m_e=a("strong"),vfr=o("xlnet"),Tfr=o(" \u2014 "),CG=a("a"),Ffr=o("TFXLNetForSequenceClassification"),Cfr=o(" (XLNet model)"),Mfr=l(),g_e=a("p"),Efr=o("Examples:"),yfr=l(),f(FA.$$.fragment),bke=l(),Pc=a("h2"),x9=a("a"),h_e=a("span"),f(CA.$$.fragment),wfr=l(),p_e=a("span"),Afr=o("TFAutoModelForMultipleChoice"),vke=l(),wr=a("div"),f(MA.$$.fragment),Lfr=l(),$c=a("p"),Bfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),__e=a("code"),xfr=o("from_pretrained()"),kfr=o("class method or the "),u_e=a("code"),Rfr=o("from_config()"),Sfr=o(`class
method.`),Pfr=l(),EA=a("p"),$fr=o("This class cannot be instantiated directly using "),b_e=a("code"),Ifr=o("__init__()"),jfr=o(" (throws an error)."),Dfr=l(),Tt=a("div"),f(yA.$$.fragment),Nfr=l(),v_e=a("p"),qfr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ofr=l(),Ic=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),Xfr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=a("code"),zfr=o("from_pretrained()"),Wfr=o("to load the model weights."),Qfr=l(),C_e=a("p"),Hfr=o("Examples:"),Ufr=l(),f(wA.$$.fragment),Jfr=l(),Fo=a("div"),f(AA.$$.fragment),Yfr=l(),M_e=a("p"),Kfr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zfr=l(),Cn=a("p"),emr=o("The model class to instantiate is selected based on the "),E_e=a("code"),omr=o("model_type"),rmr=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),tmr=o("pretrained_model_name_or_path"),amr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),nmr=o("pretrained_model_name_or_path"),smr=o(":"),lmr=l(),te=a("ul"),k9=a("li"),A_e=a("strong"),imr=o("albert"),dmr=o(" \u2014 "),MG=a("a"),cmr=o("TFAlbertForMultipleChoice"),fmr=o(" (ALBERT model)"),mmr=l(),R9=a("li"),L_e=a("strong"),gmr=o("bert"),hmr=o(" \u2014 "),EG=a("a"),pmr=o("TFBertForMultipleChoice"),_mr=o(" (BERT model)"),umr=l(),S9=a("li"),B_e=a("strong"),bmr=o("camembert"),vmr=o(" \u2014 "),yG=a("a"),Tmr=o("TFCamembertForMultipleChoice"),Fmr=o(" (CamemBERT model)"),Cmr=l(),P9=a("li"),x_e=a("strong"),Mmr=o("convbert"),Emr=o(" \u2014 "),wG=a("a"),ymr=o("TFConvBertForMultipleChoice"),wmr=o(" (ConvBERT model)"),Amr=l(),$9=a("li"),k_e=a("strong"),Lmr=o("distilbert"),Bmr=o(" \u2014 "),AG=a("a"),xmr=o("TFDistilBertForMultipleChoice"),kmr=o(" (DistilBERT model)"),Rmr=l(),I9=a("li"),R_e=a("strong"),Smr=o("electra"),Pmr=o(" \u2014 "),LG=a("a"),$mr=o("TFElectraForMultipleChoice"),Imr=o(" (ELECTRA model)"),jmr=l(),j9=a("li"),S_e=a("strong"),Dmr=o("flaubert"),Nmr=o(" \u2014 "),BG=a("a"),qmr=o("TFFlaubertForMultipleChoice"),Omr=o(" (FlauBERT model)"),Gmr=l(),D9=a("li"),P_e=a("strong"),Xmr=o("funnel"),Vmr=o(" \u2014 "),xG=a("a"),zmr=o("TFFunnelForMultipleChoice"),Wmr=o(" (Funnel Transformer model)"),Qmr=l(),N9=a("li"),$_e=a("strong"),Hmr=o("longformer"),Umr=o(" \u2014 "),kG=a("a"),Jmr=o("TFLongformerForMultipleChoice"),Ymr=o(" (Longformer model)"),Kmr=l(),q9=a("li"),I_e=a("strong"),Zmr=o("mobilebert"),egr=o(" \u2014 "),RG=a("a"),ogr=o("TFMobileBertForMultipleChoice"),rgr=o(" (MobileBERT model)"),tgr=l(),O9=a("li"),j_e=a("strong"),agr=o("mpnet"),ngr=o(" \u2014 "),SG=a("a"),sgr=o("TFMPNetForMultipleChoice"),lgr=o(" (MPNet model)"),igr=l(),G9=a("li"),D_e=a("strong"),dgr=o("rembert"),cgr=o(" \u2014 "),PG=a("a"),fgr=o("TFRemBertForMultipleChoice"),mgr=o(" (RemBERT model)"),ggr=l(),X9=a("li"),N_e=a("strong"),hgr=o("roberta"),pgr=o(" \u2014 "),$G=a("a"),_gr=o("TFRobertaForMultipleChoice"),ugr=o(" (RoBERTa model)"),bgr=l(),V9=a("li"),q_e=a("strong"),vgr=o("roformer"),Tgr=o(" \u2014 "),IG=a("a"),Fgr=o("TFRoFormerForMultipleChoice"),Cgr=o(" (RoFormer model)"),Mgr=l(),z9=a("li"),O_e=a("strong"),Egr=o("xlm"),ygr=o(" \u2014 "),jG=a("a"),wgr=o("TFXLMForMultipleChoice"),Agr=o(" (XLM model)"),Lgr=l(),W9=a("li"),G_e=a("strong"),Bgr=o("xlm-roberta"),xgr=o(" \u2014 "),DG=a("a"),kgr=o("TFXLMRobertaForMultipleChoice"),Rgr=o(" (XLM-RoBERTa model)"),Sgr=l(),Q9=a("li"),X_e=a("strong"),Pgr=o("xlnet"),$gr=o(" \u2014 "),NG=a("a"),Igr=o("TFXLNetForMultipleChoice"),jgr=o(" (XLNet model)"),Dgr=l(),V_e=a("p"),Ngr=o("Examples:"),qgr=l(),f(LA.$$.fragment),Tke=l(),jc=a("h2"),H9=a("a"),z_e=a("span"),f(BA.$$.fragment),Ogr=l(),W_e=a("span"),Ggr=o("TFAutoModelForTableQuestionAnswering"),Fke=l(),Ar=a("div"),f(xA.$$.fragment),Xgr=l(),Dc=a("p"),Vgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Q_e=a("code"),zgr=o("from_pretrained()"),Wgr=o("class method or the "),H_e=a("code"),Qgr=o("from_config()"),Hgr=o(`class
method.`),Ugr=l(),kA=a("p"),Jgr=o("This class cannot be instantiated directly using "),U_e=a("code"),Ygr=o("__init__()"),Kgr=o(" (throws an error)."),Zgr=l(),Ft=a("div"),f(RA.$$.fragment),ehr=l(),J_e=a("p"),ohr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rhr=l(),Nc=a("p"),thr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),ahr=o("not"),nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=a("code"),shr=o("from_pretrained()"),lhr=o("to load the model weights."),ihr=l(),Z_e=a("p"),dhr=o("Examples:"),chr=l(),f(SA.$$.fragment),fhr=l(),Co=a("div"),f(PA.$$.fragment),mhr=l(),eue=a("p"),ghr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hhr=l(),Mn=a("p"),phr=o("The model class to instantiate is selected based on the "),oue=a("code"),_hr=o("model_type"),uhr=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),Thr=o("pretrained_model_name_or_path"),Fhr=o(":"),Chr=l(),aue=a("ul"),U9=a("li"),nue=a("strong"),Mhr=o("tapas"),Ehr=o(" \u2014 "),qG=a("a"),yhr=o("TFTapasForQuestionAnswering"),whr=o(" (TAPAS model)"),Ahr=l(),sue=a("p"),Lhr=o("Examples:"),Bhr=l(),f($A.$$.fragment),Cke=l(),qc=a("h2"),J9=a("a"),lue=a("span"),f(IA.$$.fragment),xhr=l(),iue=a("span"),khr=o("TFAutoModelForTokenClassification"),Mke=l(),Lr=a("div"),f(jA.$$.fragment),Rhr=l(),Oc=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),due=a("code"),Phr=o("from_pretrained()"),$hr=o("class method or the "),cue=a("code"),Ihr=o("from_config()"),jhr=o(`class
method.`),Dhr=l(),DA=a("p"),Nhr=o("This class cannot be instantiated directly using "),fue=a("code"),qhr=o("__init__()"),Ohr=o(" (throws an error)."),Ghr=l(),Ct=a("div"),f(NA.$$.fragment),Xhr=l(),mue=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zhr=l(),Gc=a("p"),Whr=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),Qhr=o("not"),Hhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hue=a("code"),Uhr=o("from_pretrained()"),Jhr=o("to load the model weights."),Yhr=l(),pue=a("p"),Khr=o("Examples:"),Zhr=l(),f(qA.$$.fragment),epr=l(),Mo=a("div"),f(OA.$$.fragment),opr=l(),_ue=a("p"),rpr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tpr=l(),En=a("p"),apr=o("The model class to instantiate is selected based on the "),uue=a("code"),npr=o("model_type"),spr=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),lpr=o("pretrained_model_name_or_path"),ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(":"),fpr=l(),K=a("ul"),Y9=a("li"),Tue=a("strong"),mpr=o("albert"),gpr=o(" \u2014 "),OG=a("a"),hpr=o("TFAlbertForTokenClassification"),ppr=o(" (ALBERT model)"),_pr=l(),K9=a("li"),Fue=a("strong"),upr=o("bert"),bpr=o(" \u2014 "),GG=a("a"),vpr=o("TFBertForTokenClassification"),Tpr=o(" (BERT model)"),Fpr=l(),Z9=a("li"),Cue=a("strong"),Cpr=o("camembert"),Mpr=o(" \u2014 "),XG=a("a"),Epr=o("TFCamembertForTokenClassification"),ypr=o(" (CamemBERT model)"),wpr=l(),eC=a("li"),Mue=a("strong"),Apr=o("convbert"),Lpr=o(" \u2014 "),VG=a("a"),Bpr=o("TFConvBertForTokenClassification"),xpr=o(" (ConvBERT model)"),kpr=l(),oC=a("li"),Eue=a("strong"),Rpr=o("deberta"),Spr=o(" \u2014 "),zG=a("a"),Ppr=o("TFDebertaForTokenClassification"),$pr=o(" (DeBERTa model)"),Ipr=l(),rC=a("li"),yue=a("strong"),jpr=o("deberta-v2"),Dpr=o(" \u2014 "),WG=a("a"),Npr=o("TFDebertaV2ForTokenClassification"),qpr=o(" (DeBERTa-v2 model)"),Opr=l(),tC=a("li"),wue=a("strong"),Gpr=o("distilbert"),Xpr=o(" \u2014 "),QG=a("a"),Vpr=o("TFDistilBertForTokenClassification"),zpr=o(" (DistilBERT model)"),Wpr=l(),aC=a("li"),Aue=a("strong"),Qpr=o("electra"),Hpr=o(" \u2014 "),HG=a("a"),Upr=o("TFElectraForTokenClassification"),Jpr=o(" (ELECTRA model)"),Ypr=l(),nC=a("li"),Lue=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),UG=a("a"),e_r=o("TFFlaubertForTokenClassification"),o_r=o(" (FlauBERT model)"),r_r=l(),sC=a("li"),Bue=a("strong"),t_r=o("funnel"),a_r=o(" \u2014 "),JG=a("a"),n_r=o("TFFunnelForTokenClassification"),s_r=o(" (Funnel Transformer model)"),l_r=l(),lC=a("li"),xue=a("strong"),i_r=o("layoutlm"),d_r=o(" \u2014 "),YG=a("a"),c_r=o("TFLayoutLMForTokenClassification"),f_r=o(" (LayoutLM model)"),m_r=l(),iC=a("li"),kue=a("strong"),g_r=o("longformer"),h_r=o(" \u2014 "),KG=a("a"),p_r=o("TFLongformerForTokenClassification"),__r=o(" (Longformer model)"),u_r=l(),dC=a("li"),Rue=a("strong"),b_r=o("mobilebert"),v_r=o(" \u2014 "),ZG=a("a"),T_r=o("TFMobileBertForTokenClassification"),F_r=o(" (MobileBERT model)"),C_r=l(),cC=a("li"),Sue=a("strong"),M_r=o("mpnet"),E_r=o(" \u2014 "),eX=a("a"),y_r=o("TFMPNetForTokenClassification"),w_r=o(" (MPNet model)"),A_r=l(),fC=a("li"),Pue=a("strong"),L_r=o("rembert"),B_r=o(" \u2014 "),oX=a("a"),x_r=o("TFRemBertForTokenClassification"),k_r=o(" (RemBERT model)"),R_r=l(),mC=a("li"),$ue=a("strong"),S_r=o("roberta"),P_r=o(" \u2014 "),rX=a("a"),$_r=o("TFRobertaForTokenClassification"),I_r=o(" (RoBERTa model)"),j_r=l(),gC=a("li"),Iue=a("strong"),D_r=o("roformer"),N_r=o(" \u2014 "),tX=a("a"),q_r=o("TFRoFormerForTokenClassification"),O_r=o(" (RoFormer model)"),G_r=l(),hC=a("li"),jue=a("strong"),X_r=o("xlm"),V_r=o(" \u2014 "),aX=a("a"),z_r=o("TFXLMForTokenClassification"),W_r=o(" (XLM model)"),Q_r=l(),pC=a("li"),Due=a("strong"),H_r=o("xlm-roberta"),U_r=o(" \u2014 "),nX=a("a"),J_r=o("TFXLMRobertaForTokenClassification"),Y_r=o(" (XLM-RoBERTa model)"),K_r=l(),_C=a("li"),Nue=a("strong"),Z_r=o("xlnet"),eur=o(" \u2014 "),sX=a("a"),our=o("TFXLNetForTokenClassification"),rur=o(" (XLNet model)"),tur=l(),que=a("p"),aur=o("Examples:"),nur=l(),f(GA.$$.fragment),Eke=l(),Xc=a("h2"),uC=a("a"),Oue=a("span"),f(XA.$$.fragment),sur=l(),Gue=a("span"),lur=o("TFAutoModelForQuestionAnswering"),yke=l(),Br=a("div"),f(VA.$$.fragment),iur=l(),Vc=a("p"),dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xue=a("code"),cur=o("from_pretrained()"),fur=o("class method or the "),Vue=a("code"),mur=o("from_config()"),gur=o(`class
method.`),hur=l(),zA=a("p"),pur=o("This class cannot be instantiated directly using "),zue=a("code"),_ur=o("__init__()"),uur=o(" (throws an error)."),bur=l(),Mt=a("div"),f(WA.$$.fragment),vur=l(),Wue=a("p"),Tur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fur=l(),zc=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),Mur=o("not"),Eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=a("code"),yur=o("from_pretrained()"),wur=o("to load the model weights."),Aur=l(),Uue=a("p"),Lur=o("Examples:"),Bur=l(),f(QA.$$.fragment),xur=l(),Eo=a("div"),f(HA.$$.fragment),kur=l(),Jue=a("p"),Rur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sur=l(),yn=a("p"),Pur=o("The model class to instantiate is selected based on the "),Yue=a("code"),$ur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),Kue=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(":"),Our=l(),Z=a("ul"),bC=a("li"),e5e=a("strong"),Gur=o("albert"),Xur=o(" \u2014 "),lX=a("a"),Vur=o("TFAlbertForQuestionAnswering"),zur=o(" (ALBERT model)"),Wur=l(),vC=a("li"),o5e=a("strong"),Qur=o("bert"),Hur=o(" \u2014 "),iX=a("a"),Uur=o("TFBertForQuestionAnswering"),Jur=o(" (BERT model)"),Yur=l(),TC=a("li"),r5e=a("strong"),Kur=o("camembert"),Zur=o(" \u2014 "),dX=a("a"),e5r=o("TFCamembertForQuestionAnswering"),o5r=o(" (CamemBERT model)"),r5r=l(),FC=a("li"),t5e=a("strong"),t5r=o("convbert"),a5r=o(" \u2014 "),cX=a("a"),n5r=o("TFConvBertForQuestionAnswering"),s5r=o(" (ConvBERT model)"),l5r=l(),CC=a("li"),a5e=a("strong"),i5r=o("deberta"),d5r=o(" \u2014 "),fX=a("a"),c5r=o("TFDebertaForQuestionAnswering"),f5r=o(" (DeBERTa model)"),m5r=l(),MC=a("li"),n5e=a("strong"),g5r=o("deberta-v2"),h5r=o(" \u2014 "),mX=a("a"),p5r=o("TFDebertaV2ForQuestionAnswering"),_5r=o(" (DeBERTa-v2 model)"),u5r=l(),EC=a("li"),s5e=a("strong"),b5r=o("distilbert"),v5r=o(" \u2014 "),gX=a("a"),T5r=o("TFDistilBertForQuestionAnswering"),F5r=o(" (DistilBERT model)"),C5r=l(),yC=a("li"),l5e=a("strong"),M5r=o("electra"),E5r=o(" \u2014 "),hX=a("a"),y5r=o("TFElectraForQuestionAnswering"),w5r=o(" (ELECTRA model)"),A5r=l(),wC=a("li"),i5e=a("strong"),L5r=o("flaubert"),B5r=o(" \u2014 "),pX=a("a"),x5r=o("TFFlaubertForQuestionAnsweringSimple"),k5r=o(" (FlauBERT model)"),R5r=l(),AC=a("li"),d5e=a("strong"),S5r=o("funnel"),P5r=o(" \u2014 "),_X=a("a"),$5r=o("TFFunnelForQuestionAnswering"),I5r=o(" (Funnel Transformer model)"),j5r=l(),LC=a("li"),c5e=a("strong"),D5r=o("longformer"),N5r=o(" \u2014 "),uX=a("a"),q5r=o("TFLongformerForQuestionAnswering"),O5r=o(" (Longformer model)"),G5r=l(),BC=a("li"),f5e=a("strong"),X5r=o("mobilebert"),V5r=o(" \u2014 "),bX=a("a"),z5r=o("TFMobileBertForQuestionAnswering"),W5r=o(" (MobileBERT model)"),Q5r=l(),xC=a("li"),m5e=a("strong"),H5r=o("mpnet"),U5r=o(" \u2014 "),vX=a("a"),J5r=o("TFMPNetForQuestionAnswering"),Y5r=o(" (MPNet model)"),K5r=l(),kC=a("li"),g5e=a("strong"),Z5r=o("rembert"),e2r=o(" \u2014 "),TX=a("a"),o2r=o("TFRemBertForQuestionAnswering"),r2r=o(" (RemBERT model)"),t2r=l(),RC=a("li"),h5e=a("strong"),a2r=o("roberta"),n2r=o(" \u2014 "),FX=a("a"),s2r=o("TFRobertaForQuestionAnswering"),l2r=o(" (RoBERTa model)"),i2r=l(),SC=a("li"),p5e=a("strong"),d2r=o("roformer"),c2r=o(" \u2014 "),CX=a("a"),f2r=o("TFRoFormerForQuestionAnswering"),m2r=o(" (RoFormer model)"),g2r=l(),PC=a("li"),_5e=a("strong"),h2r=o("xlm"),p2r=o(" \u2014 "),MX=a("a"),_2r=o("TFXLMForQuestionAnsweringSimple"),u2r=o(" (XLM model)"),b2r=l(),$C=a("li"),u5e=a("strong"),v2r=o("xlm-roberta"),T2r=o(" \u2014 "),EX=a("a"),F2r=o("TFXLMRobertaForQuestionAnswering"),C2r=o(" (XLM-RoBERTa model)"),M2r=l(),IC=a("li"),b5e=a("strong"),E2r=o("xlnet"),y2r=o(" \u2014 "),yX=a("a"),w2r=o("TFXLNetForQuestionAnsweringSimple"),A2r=o(" (XLNet model)"),L2r=l(),v5e=a("p"),B2r=o("Examples:"),x2r=l(),f(UA.$$.fragment),wke=l(),Wc=a("h2"),jC=a("a"),T5e=a("span"),f(JA.$$.fragment),k2r=l(),F5e=a("span"),R2r=o("TFAutoModelForVision2Seq"),Ake=l(),xr=a("div"),f(YA.$$.fragment),S2r=l(),Qc=a("p"),P2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C5e=a("code"),$2r=o("from_pretrained()"),I2r=o("class method or the "),M5e=a("code"),j2r=o("from_config()"),D2r=o(`class
method.`),N2r=l(),KA=a("p"),q2r=o("This class cannot be instantiated directly using "),E5e=a("code"),O2r=o("__init__()"),G2r=o(" (throws an error)."),X2r=l(),Et=a("div"),f(ZA.$$.fragment),V2r=l(),y5e=a("p"),z2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W2r=l(),Hc=a("p"),Q2r=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),H2r=o("not"),U2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A5e=a("code"),J2r=o("from_pretrained()"),Y2r=o("to load the model weights."),K2r=l(),L5e=a("p"),Z2r=o("Examples:"),e1r=l(),f(e0.$$.fragment),o1r=l(),yo=a("div"),f(o0.$$.fragment),r1r=l(),B5e=a("p"),t1r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a1r=l(),wn=a("p"),n1r=o("The model class to instantiate is selected based on the "),x5e=a("code"),s1r=o("model_type"),l1r=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),c1r=o("pretrained_model_name_or_path"),f1r=o(":"),m1r=l(),S5e=a("ul"),DC=a("li"),P5e=a("strong"),g1r=o("vision-encoder-decoder"),h1r=o(" \u2014 "),wX=a("a"),p1r=o("TFVisionEncoderDecoderModel"),_1r=o(" (Vision Encoder decoder model)"),u1r=l(),$5e=a("p"),b1r=o("Examples:"),v1r=l(),f(r0.$$.fragment),Lke=l(),Uc=a("h2"),NC=a("a"),I5e=a("span"),f(t0.$$.fragment),T1r=l(),j5e=a("span"),F1r=o("TFAutoModelForSpeechSeq2Seq"),Bke=l(),kr=a("div"),f(a0.$$.fragment),C1r=l(),Jc=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),D5e=a("code"),E1r=o("from_pretrained()"),y1r=o("class method or the "),N5e=a("code"),w1r=o("from_config()"),A1r=o(`class
method.`),L1r=l(),n0=a("p"),B1r=o("This class cannot be instantiated directly using "),q5e=a("code"),x1r=o("__init__()"),k1r=o(" (throws an error)."),R1r=l(),yt=a("div"),f(s0.$$.fragment),S1r=l(),O5e=a("p"),P1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$1r=l(),Yc=a("p"),I1r=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),j1r=o("not"),D1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),X5e=a("code"),N1r=o("from_pretrained()"),q1r=o("to load the model weights."),O1r=l(),V5e=a("p"),G1r=o("Examples:"),X1r=l(),f(l0.$$.fragment),V1r=l(),wo=a("div"),f(i0.$$.fragment),z1r=l(),z5e=a("p"),W1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Q1r=l(),An=a("p"),H1r=o("The model class to instantiate is selected based on the "),W5e=a("code"),U1r=o("model_type"),J1r=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),Y1r=o("pretrained_model_name_or_path"),K1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),Z1r=o("pretrained_model_name_or_path"),ebr=o(":"),obr=l(),U5e=a("ul"),qC=a("li"),J5e=a("strong"),rbr=o("speech_to_text"),tbr=o(" \u2014 "),AX=a("a"),abr=o("TFSpeech2TextForConditionalGeneration"),nbr=o(" (Speech2Text model)"),sbr=l(),Y5e=a("p"),lbr=o("Examples:"),ibr=l(),f(d0.$$.fragment),xke=l(),Kc=a("h2"),OC=a("a"),K5e=a("span"),f(c0.$$.fragment),dbr=l(),Z5e=a("span"),cbr=o("FlaxAutoModel"),kke=l(),Rr=a("div"),f(f0.$$.fragment),fbr=l(),Zc=a("p"),mbr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),e2e=a("code"),gbr=o("from_pretrained()"),hbr=o("class method or the "),o2e=a("code"),pbr=o("from_config()"),_br=o(`class
method.`),ubr=l(),m0=a("p"),bbr=o("This class cannot be instantiated directly using "),r2e=a("code"),vbr=o("__init__()"),Tbr=o(" (throws an error)."),Fbr=l(),wt=a("div"),f(g0.$$.fragment),Cbr=l(),t2e=a("p"),Mbr=o("Instantiates one of the base model classes of the library from a configuration."),Ebr=l(),ef=a("p"),ybr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=a("code"),Lbr=o("from_pretrained()"),Bbr=o("to load the model weights."),xbr=l(),s2e=a("p"),kbr=o("Examples:"),Rbr=l(),f(h0.$$.fragment),Sbr=l(),Ao=a("div"),f(p0.$$.fragment),Pbr=l(),l2e=a("p"),$br=o("Instantiate one of the base model classes of the library from a pretrained model."),Ibr=l(),Ln=a("p"),jbr=o("The model class to instantiate is selected based on the "),i2e=a("code"),Dbr=o("model_type"),Nbr=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),qbr=o("pretrained_model_name_or_path"),Obr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),Gbr=o("pretrained_model_name_or_path"),Xbr=o(":"),Vbr=l(),z=a("ul"),GC=a("li"),f2e=a("strong"),zbr=o("albert"),Wbr=o(" \u2014 "),LX=a("a"),Qbr=o("FlaxAlbertModel"),Hbr=o(" (ALBERT model)"),Ubr=l(),XC=a("li"),m2e=a("strong"),Jbr=o("bart"),Ybr=o(" \u2014 "),BX=a("a"),Kbr=o("FlaxBartModel"),Zbr=o(" (BART model)"),evr=l(),VC=a("li"),g2e=a("strong"),ovr=o("beit"),rvr=o(" \u2014 "),xX=a("a"),tvr=o("FlaxBeitModel"),avr=o(" (BEiT model)"),nvr=l(),zC=a("li"),h2e=a("strong"),svr=o("bert"),lvr=o(" \u2014 "),kX=a("a"),ivr=o("FlaxBertModel"),dvr=o(" (BERT model)"),cvr=l(),WC=a("li"),p2e=a("strong"),fvr=o("big_bird"),mvr=o(" \u2014 "),RX=a("a"),gvr=o("FlaxBigBirdModel"),hvr=o(" (BigBird model)"),pvr=l(),QC=a("li"),_2e=a("strong"),_vr=o("blenderbot"),uvr=o(" \u2014 "),SX=a("a"),bvr=o("FlaxBlenderbotModel"),vvr=o(" (Blenderbot model)"),Tvr=l(),HC=a("li"),u2e=a("strong"),Fvr=o("blenderbot-small"),Cvr=o(" \u2014 "),PX=a("a"),Mvr=o("FlaxBlenderbotSmallModel"),Evr=o(" (BlenderbotSmall model)"),yvr=l(),UC=a("li"),b2e=a("strong"),wvr=o("clip"),Avr=o(" \u2014 "),$X=a("a"),Lvr=o("FlaxCLIPModel"),Bvr=o(" (CLIP model)"),xvr=l(),JC=a("li"),v2e=a("strong"),kvr=o("distilbert"),Rvr=o(" \u2014 "),IX=a("a"),Svr=o("FlaxDistilBertModel"),Pvr=o(" (DistilBERT model)"),$vr=l(),YC=a("li"),T2e=a("strong"),Ivr=o("electra"),jvr=o(" \u2014 "),jX=a("a"),Dvr=o("FlaxElectraModel"),Nvr=o(" (ELECTRA model)"),qvr=l(),KC=a("li"),F2e=a("strong"),Ovr=o("gpt2"),Gvr=o(" \u2014 "),DX=a("a"),Xvr=o("FlaxGPT2Model"),Vvr=o(" (OpenAI GPT-2 model)"),zvr=l(),ZC=a("li"),C2e=a("strong"),Wvr=o("gpt_neo"),Qvr=o(" \u2014 "),NX=a("a"),Hvr=o("FlaxGPTNeoModel"),Uvr=o(" (GPT Neo model)"),Jvr=l(),eM=a("li"),M2e=a("strong"),Yvr=o("gptj"),Kvr=o(" \u2014 "),qX=a("a"),Zvr=o("FlaxGPTJModel"),eTr=o(" (GPT-J model)"),oTr=l(),oM=a("li"),E2e=a("strong"),rTr=o("marian"),tTr=o(" \u2014 "),OX=a("a"),aTr=o("FlaxMarianModel"),nTr=o(" (Marian model)"),sTr=l(),rM=a("li"),y2e=a("strong"),lTr=o("mbart"),iTr=o(" \u2014 "),GX=a("a"),dTr=o("FlaxMBartModel"),cTr=o(" (mBART model)"),fTr=l(),tM=a("li"),w2e=a("strong"),mTr=o("mt5"),gTr=o(" \u2014 "),XX=a("a"),hTr=o("FlaxMT5Model"),pTr=o(" (mT5 model)"),_Tr=l(),aM=a("li"),A2e=a("strong"),uTr=o("pegasus"),bTr=o(" \u2014 "),VX=a("a"),vTr=o("FlaxPegasusModel"),TTr=o(" (Pegasus model)"),FTr=l(),nM=a("li"),L2e=a("strong"),CTr=o("roberta"),MTr=o(" \u2014 "),zX=a("a"),ETr=o("FlaxRobertaModel"),yTr=o(" (RoBERTa model)"),wTr=l(),sM=a("li"),B2e=a("strong"),ATr=o("roformer"),LTr=o(" \u2014 "),WX=a("a"),BTr=o("FlaxRoFormerModel"),xTr=o(" (RoFormer model)"),kTr=l(),lM=a("li"),x2e=a("strong"),RTr=o("t5"),STr=o(" \u2014 "),QX=a("a"),PTr=o("FlaxT5Model"),$Tr=o(" (T5 model)"),ITr=l(),iM=a("li"),k2e=a("strong"),jTr=o("vision-text-dual-encoder"),DTr=o(" \u2014 "),HX=a("a"),NTr=o("FlaxVisionTextDualEncoderModel"),qTr=o(" (VisionTextDualEncoder model)"),OTr=l(),dM=a("li"),R2e=a("strong"),GTr=o("vit"),XTr=o(" \u2014 "),UX=a("a"),VTr=o("FlaxViTModel"),zTr=o(" (ViT model)"),WTr=l(),cM=a("li"),S2e=a("strong"),QTr=o("wav2vec2"),HTr=o(" \u2014 "),JX=a("a"),UTr=o("FlaxWav2Vec2Model"),JTr=o(" (Wav2Vec2 model)"),YTr=l(),fM=a("li"),P2e=a("strong"),KTr=o("xglm"),ZTr=o(" \u2014 "),YX=a("a"),eFr=o("FlaxXGLMModel"),oFr=o(" (XGLM model)"),rFr=l(),mM=a("li"),$2e=a("strong"),tFr=o("xlm-roberta"),aFr=o(" \u2014 "),KX=a("a"),nFr=o("FlaxXLMRobertaModel"),sFr=o(" (XLM-RoBERTa model)"),lFr=l(),I2e=a("p"),iFr=o("Examples:"),dFr=l(),f(_0.$$.fragment),Rke=l(),of=a("h2"),gM=a("a"),j2e=a("span"),f(u0.$$.fragment),cFr=l(),D2e=a("span"),fFr=o("FlaxAutoModelForCausalLM"),Ske=l(),Sr=a("div"),f(b0.$$.fragment),mFr=l(),rf=a("p"),gFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),N2e=a("code"),hFr=o("from_pretrained()"),pFr=o("class method or the "),q2e=a("code"),_Fr=o("from_config()"),uFr=o(`class
method.`),bFr=l(),v0=a("p"),vFr=o("This class cannot be instantiated directly using "),O2e=a("code"),TFr=o("__init__()"),FFr=o(" (throws an error)."),CFr=l(),At=a("div"),f(T0.$$.fragment),MFr=l(),G2e=a("p"),EFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yFr=l(),tf=a("p"),wFr=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),AFr=o("not"),LFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=a("code"),BFr=o("from_pretrained()"),xFr=o("to load the model weights."),kFr=l(),z2e=a("p"),RFr=o("Examples:"),SFr=l(),f(F0.$$.fragment),PFr=l(),Lo=a("div"),f(C0.$$.fragment),$Fr=l(),W2e=a("p"),IFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jFr=l(),Bn=a("p"),DFr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),NFr=o("model_type"),qFr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),OFr=o("pretrained_model_name_or_path"),GFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),XFr=o("pretrained_model_name_or_path"),VFr=o(":"),zFr=l(),xn=a("ul"),hM=a("li"),J2e=a("strong"),WFr=o("gpt2"),QFr=o(" \u2014 "),ZX=a("a"),HFr=o("FlaxGPT2LMHeadModel"),UFr=o(" (OpenAI GPT-2 model)"),JFr=l(),pM=a("li"),Y2e=a("strong"),YFr=o("gpt_neo"),KFr=o(" \u2014 "),eV=a("a"),ZFr=o("FlaxGPTNeoForCausalLM"),e9r=o(" (GPT Neo model)"),o9r=l(),_M=a("li"),K2e=a("strong"),r9r=o("gptj"),t9r=o(" \u2014 "),oV=a("a"),a9r=o("FlaxGPTJForCausalLM"),n9r=o(" (GPT-J model)"),s9r=l(),uM=a("li"),Z2e=a("strong"),l9r=o("xglm"),i9r=o(" \u2014 "),rV=a("a"),d9r=o("FlaxXGLMForCausalLM"),c9r=o(" (XGLM model)"),f9r=l(),e1e=a("p"),m9r=o("Examples:"),g9r=l(),f(M0.$$.fragment),Pke=l(),af=a("h2"),bM=a("a"),o1e=a("span"),f(E0.$$.fragment),h9r=l(),r1e=a("span"),p9r=o("FlaxAutoModelForPreTraining"),$ke=l(),Pr=a("div"),f(y0.$$.fragment),_9r=l(),nf=a("p"),u9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),t1e=a("code"),b9r=o("from_pretrained()"),v9r=o("class method or the "),a1e=a("code"),T9r=o("from_config()"),F9r=o(`class
method.`),C9r=l(),w0=a("p"),M9r=o("This class cannot be instantiated directly using "),n1e=a("code"),E9r=o("__init__()"),y9r=o(" (throws an error)."),w9r=l(),Lt=a("div"),f(A0.$$.fragment),A9r=l(),s1e=a("p"),L9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B9r=l(),sf=a("p"),x9r=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),k9r=o("not"),R9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=a("code"),S9r=o("from_pretrained()"),P9r=o("to load the model weights."),$9r=l(),d1e=a("p"),I9r=o("Examples:"),j9r=l(),f(L0.$$.fragment),D9r=l(),Bo=a("div"),f(B0.$$.fragment),N9r=l(),c1e=a("p"),q9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),O9r=l(),kn=a("p"),G9r=o("The model class to instantiate is selected based on the "),f1e=a("code"),X9r=o("model_type"),V9r=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),z9r=o("pretrained_model_name_or_path"),W9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),Q9r=o("pretrained_model_name_or_path"),H9r=o(":"),U9r=l(),ce=a("ul"),vM=a("li"),h1e=a("strong"),J9r=o("albert"),Y9r=o(" \u2014 "),tV=a("a"),K9r=o("FlaxAlbertForPreTraining"),Z9r=o(" (ALBERT model)"),eCr=l(),TM=a("li"),p1e=a("strong"),oCr=o("bart"),rCr=o(" \u2014 "),aV=a("a"),tCr=o("FlaxBartForConditionalGeneration"),aCr=o(" (BART model)"),nCr=l(),FM=a("li"),_1e=a("strong"),sCr=o("bert"),lCr=o(" \u2014 "),nV=a("a"),iCr=o("FlaxBertForPreTraining"),dCr=o(" (BERT model)"),cCr=l(),CM=a("li"),u1e=a("strong"),fCr=o("big_bird"),mCr=o(" \u2014 "),sV=a("a"),gCr=o("FlaxBigBirdForPreTraining"),hCr=o(" (BigBird model)"),pCr=l(),MM=a("li"),b1e=a("strong"),_Cr=o("electra"),uCr=o(" \u2014 "),lV=a("a"),bCr=o("FlaxElectraForPreTraining"),vCr=o(" (ELECTRA model)"),TCr=l(),EM=a("li"),v1e=a("strong"),FCr=o("mbart"),CCr=o(" \u2014 "),iV=a("a"),MCr=o("FlaxMBartForConditionalGeneration"),ECr=o(" (mBART model)"),yCr=l(),yM=a("li"),T1e=a("strong"),wCr=o("mt5"),ACr=o(" \u2014 "),dV=a("a"),LCr=o("FlaxMT5ForConditionalGeneration"),BCr=o(" (mT5 model)"),xCr=l(),wM=a("li"),F1e=a("strong"),kCr=o("roberta"),RCr=o(" \u2014 "),cV=a("a"),SCr=o("FlaxRobertaForMaskedLM"),PCr=o(" (RoBERTa model)"),$Cr=l(),AM=a("li"),C1e=a("strong"),ICr=o("roformer"),jCr=o(" \u2014 "),fV=a("a"),DCr=o("FlaxRoFormerForMaskedLM"),NCr=o(" (RoFormer model)"),qCr=l(),LM=a("li"),M1e=a("strong"),OCr=o("t5"),GCr=o(" \u2014 "),mV=a("a"),XCr=o("FlaxT5ForConditionalGeneration"),VCr=o(" (T5 model)"),zCr=l(),BM=a("li"),E1e=a("strong"),WCr=o("wav2vec2"),QCr=o(" \u2014 "),gV=a("a"),HCr=o("FlaxWav2Vec2ForPreTraining"),UCr=o(" (Wav2Vec2 model)"),JCr=l(),xM=a("li"),y1e=a("strong"),YCr=o("xlm-roberta"),KCr=o(" \u2014 "),hV=a("a"),ZCr=o("FlaxXLMRobertaForMaskedLM"),eMr=o(" (XLM-RoBERTa model)"),oMr=l(),w1e=a("p"),rMr=o("Examples:"),tMr=l(),f(x0.$$.fragment),Ike=l(),lf=a("h2"),kM=a("a"),A1e=a("span"),f(k0.$$.fragment),aMr=l(),L1e=a("span"),nMr=o("FlaxAutoModelForMaskedLM"),jke=l(),$r=a("div"),f(R0.$$.fragment),sMr=l(),df=a("p"),lMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),B1e=a("code"),iMr=o("from_pretrained()"),dMr=o("class method or the "),x1e=a("code"),cMr=o("from_config()"),fMr=o(`class
method.`),mMr=l(),S0=a("p"),gMr=o("This class cannot be instantiated directly using "),k1e=a("code"),hMr=o("__init__()"),pMr=o(" (throws an error)."),_Mr=l(),Bt=a("div"),f(P0.$$.fragment),uMr=l(),R1e=a("p"),bMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vMr=l(),cf=a("p"),TMr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),FMr=o("not"),CMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P1e=a("code"),MMr=o("from_pretrained()"),EMr=o("to load the model weights."),yMr=l(),$1e=a("p"),wMr=o("Examples:"),AMr=l(),f($0.$$.fragment),LMr=l(),xo=a("div"),f(I0.$$.fragment),BMr=l(),I1e=a("p"),xMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kMr=l(),Rn=a("p"),RMr=o("The model class to instantiate is selected based on the "),j1e=a("code"),SMr=o("model_type"),PMr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),$Mr=o("pretrained_model_name_or_path"),IMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),jMr=o("pretrained_model_name_or_path"),DMr=o(":"),NMr=l(),ue=a("ul"),RM=a("li"),q1e=a("strong"),qMr=o("albert"),OMr=o(" \u2014 "),pV=a("a"),GMr=o("FlaxAlbertForMaskedLM"),XMr=o(" (ALBERT model)"),VMr=l(),SM=a("li"),O1e=a("strong"),zMr=o("bart"),WMr=o(" \u2014 "),_V=a("a"),QMr=o("FlaxBartForConditionalGeneration"),HMr=o(" (BART model)"),UMr=l(),PM=a("li"),G1e=a("strong"),JMr=o("bert"),YMr=o(" \u2014 "),uV=a("a"),KMr=o("FlaxBertForMaskedLM"),ZMr=o(" (BERT model)"),e4r=l(),$M=a("li"),X1e=a("strong"),o4r=o("big_bird"),r4r=o(" \u2014 "),bV=a("a"),t4r=o("FlaxBigBirdForMaskedLM"),a4r=o(" (BigBird model)"),n4r=l(),IM=a("li"),V1e=a("strong"),s4r=o("distilbert"),l4r=o(" \u2014 "),vV=a("a"),i4r=o("FlaxDistilBertForMaskedLM"),d4r=o(" (DistilBERT model)"),c4r=l(),jM=a("li"),z1e=a("strong"),f4r=o("electra"),m4r=o(" \u2014 "),TV=a("a"),g4r=o("FlaxElectraForMaskedLM"),h4r=o(" (ELECTRA model)"),p4r=l(),DM=a("li"),W1e=a("strong"),_4r=o("mbart"),u4r=o(" \u2014 "),FV=a("a"),b4r=o("FlaxMBartForConditionalGeneration"),v4r=o(" (mBART model)"),T4r=l(),NM=a("li"),Q1e=a("strong"),F4r=o("roberta"),C4r=o(" \u2014 "),CV=a("a"),M4r=o("FlaxRobertaForMaskedLM"),E4r=o(" (RoBERTa model)"),y4r=l(),qM=a("li"),H1e=a("strong"),w4r=o("roformer"),A4r=o(" \u2014 "),MV=a("a"),L4r=o("FlaxRoFormerForMaskedLM"),B4r=o(" (RoFormer model)"),x4r=l(),OM=a("li"),U1e=a("strong"),k4r=o("xlm-roberta"),R4r=o(" \u2014 "),EV=a("a"),S4r=o("FlaxXLMRobertaForMaskedLM"),P4r=o(" (XLM-RoBERTa model)"),$4r=l(),J1e=a("p"),I4r=o("Examples:"),j4r=l(),f(j0.$$.fragment),Dke=l(),ff=a("h2"),GM=a("a"),Y1e=a("span"),f(D0.$$.fragment),D4r=l(),K1e=a("span"),N4r=o("FlaxAutoModelForSeq2SeqLM"),Nke=l(),Ir=a("div"),f(N0.$$.fragment),q4r=l(),mf=a("p"),O4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Z1e=a("code"),G4r=o("from_pretrained()"),X4r=o("class method or the "),ebe=a("code"),V4r=o("from_config()"),z4r=o(`class
method.`),W4r=l(),q0=a("p"),Q4r=o("This class cannot be instantiated directly using "),obe=a("code"),H4r=o("__init__()"),U4r=o(" (throws an error)."),J4r=l(),xt=a("div"),f(O0.$$.fragment),Y4r=l(),rbe=a("p"),K4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z4r=l(),gf=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),abe=a("code"),tEr=o("from_pretrained()"),aEr=o("to load the model weights."),nEr=l(),nbe=a("p"),sEr=o("Examples:"),lEr=l(),f(G0.$$.fragment),iEr=l(),ko=a("div"),f(X0.$$.fragment),dEr=l(),sbe=a("p"),cEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fEr=l(),Sn=a("p"),mEr=o("The model class to instantiate is selected based on the "),lbe=a("code"),gEr=o("model_type"),hEr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),pEr=o("pretrained_model_name_or_path"),_Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),uEr=o("pretrained_model_name_or_path"),bEr=o(":"),vEr=l(),Ce=a("ul"),XM=a("li"),cbe=a("strong"),TEr=o("bart"),FEr=o(" \u2014 "),yV=a("a"),CEr=o("FlaxBartForConditionalGeneration"),MEr=o(" (BART model)"),EEr=l(),VM=a("li"),fbe=a("strong"),yEr=o("blenderbot"),wEr=o(" \u2014 "),wV=a("a"),AEr=o("FlaxBlenderbotForConditionalGeneration"),LEr=o(" (Blenderbot model)"),BEr=l(),zM=a("li"),mbe=a("strong"),xEr=o("blenderbot-small"),kEr=o(" \u2014 "),AV=a("a"),REr=o("FlaxBlenderbotSmallForConditionalGeneration"),SEr=o(" (BlenderbotSmall model)"),PEr=l(),WM=a("li"),gbe=a("strong"),$Er=o("encoder-decoder"),IEr=o(" \u2014 "),LV=a("a"),jEr=o("FlaxEncoderDecoderModel"),DEr=o(" (Encoder decoder model)"),NEr=l(),QM=a("li"),hbe=a("strong"),qEr=o("marian"),OEr=o(" \u2014 "),BV=a("a"),GEr=o("FlaxMarianMTModel"),XEr=o(" (Marian model)"),VEr=l(),HM=a("li"),pbe=a("strong"),zEr=o("mbart"),WEr=o(" \u2014 "),xV=a("a"),QEr=o("FlaxMBartForConditionalGeneration"),HEr=o(" (mBART model)"),UEr=l(),UM=a("li"),_be=a("strong"),JEr=o("mt5"),YEr=o(" \u2014 "),kV=a("a"),KEr=o("FlaxMT5ForConditionalGeneration"),ZEr=o(" (mT5 model)"),e3r=l(),JM=a("li"),ube=a("strong"),o3r=o("pegasus"),r3r=o(" \u2014 "),RV=a("a"),t3r=o("FlaxPegasusForConditionalGeneration"),a3r=o(" (Pegasus model)"),n3r=l(),YM=a("li"),bbe=a("strong"),s3r=o("t5"),l3r=o(" \u2014 "),SV=a("a"),i3r=o("FlaxT5ForConditionalGeneration"),d3r=o(" (T5 model)"),c3r=l(),vbe=a("p"),f3r=o("Examples:"),m3r=l(),f(V0.$$.fragment),qke=l(),hf=a("h2"),KM=a("a"),Tbe=a("span"),f(z0.$$.fragment),g3r=l(),Fbe=a("span"),h3r=o("FlaxAutoModelForSequenceClassification"),Oke=l(),jr=a("div"),f(W0.$$.fragment),p3r=l(),pf=a("p"),_3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cbe=a("code"),u3r=o("from_pretrained()"),b3r=o("class method or the "),Mbe=a("code"),v3r=o("from_config()"),T3r=o(`class
method.`),F3r=l(),Q0=a("p"),C3r=o("This class cannot be instantiated directly using "),Ebe=a("code"),M3r=o("__init__()"),E3r=o(" (throws an error)."),y3r=l(),kt=a("div"),f(H0.$$.fragment),w3r=l(),ybe=a("p"),A3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),L3r=l(),_f=a("p"),B3r=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),x3r=o("not"),k3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=a("code"),R3r=o("from_pretrained()"),S3r=o("to load the model weights."),P3r=l(),Lbe=a("p"),$3r=o("Examples:"),I3r=l(),f(U0.$$.fragment),j3r=l(),Ro=a("div"),f(J0.$$.fragment),D3r=l(),Bbe=a("p"),N3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q3r=l(),Pn=a("p"),O3r=o("The model class to instantiate is selected based on the "),xbe=a("code"),G3r=o("model_type"),X3r=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),V3r=o("pretrained_model_name_or_path"),z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),W3r=o("pretrained_model_name_or_path"),Q3r=o(":"),H3r=l(),be=a("ul"),ZM=a("li"),Sbe=a("strong"),U3r=o("albert"),J3r=o(" \u2014 "),PV=a("a"),Y3r=o("FlaxAlbertForSequenceClassification"),K3r=o(" (ALBERT model)"),Z3r=l(),e4=a("li"),Pbe=a("strong"),eyr=o("bart"),oyr=o(" \u2014 "),$V=a("a"),ryr=o("FlaxBartForSequenceClassification"),tyr=o(" (BART model)"),ayr=l(),o4=a("li"),$be=a("strong"),nyr=o("bert"),syr=o(" \u2014 "),IV=a("a"),lyr=o("FlaxBertForSequenceClassification"),iyr=o(" (BERT model)"),dyr=l(),r4=a("li"),Ibe=a("strong"),cyr=o("big_bird"),fyr=o(" \u2014 "),jV=a("a"),myr=o("FlaxBigBirdForSequenceClassification"),gyr=o(" (BigBird model)"),hyr=l(),t4=a("li"),jbe=a("strong"),pyr=o("distilbert"),_yr=o(" \u2014 "),DV=a("a"),uyr=o("FlaxDistilBertForSequenceClassification"),byr=o(" (DistilBERT model)"),vyr=l(),a4=a("li"),Dbe=a("strong"),Tyr=o("electra"),Fyr=o(" \u2014 "),NV=a("a"),Cyr=o("FlaxElectraForSequenceClassification"),Myr=o(" (ELECTRA model)"),Eyr=l(),n4=a("li"),Nbe=a("strong"),yyr=o("mbart"),wyr=o(" \u2014 "),qV=a("a"),Ayr=o("FlaxMBartForSequenceClassification"),Lyr=o(" (mBART model)"),Byr=l(),s4=a("li"),qbe=a("strong"),xyr=o("roberta"),kyr=o(" \u2014 "),OV=a("a"),Ryr=o("FlaxRobertaForSequenceClassification"),Syr=o(" (RoBERTa model)"),Pyr=l(),l4=a("li"),Obe=a("strong"),$yr=o("roformer"),Iyr=o(" \u2014 "),GV=a("a"),jyr=o("FlaxRoFormerForSequenceClassification"),Dyr=o(" (RoFormer model)"),Nyr=l(),i4=a("li"),Gbe=a("strong"),qyr=o("xlm-roberta"),Oyr=o(" \u2014 "),XV=a("a"),Gyr=o("FlaxXLMRobertaForSequenceClassification"),Xyr=o(" (XLM-RoBERTa model)"),Vyr=l(),Xbe=a("p"),zyr=o("Examples:"),Wyr=l(),f(Y0.$$.fragment),Gke=l(),uf=a("h2"),d4=a("a"),Vbe=a("span"),f(K0.$$.fragment),Qyr=l(),zbe=a("span"),Hyr=o("FlaxAutoModelForQuestionAnswering"),Xke=l(),Dr=a("div"),f(Z0.$$.fragment),Uyr=l(),bf=a("p"),Jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wbe=a("code"),Yyr=o("from_pretrained()"),Kyr=o("class method or the "),Qbe=a("code"),Zyr=o("from_config()"),ewr=o(`class
method.`),owr=l(),eL=a("p"),rwr=o("This class cannot be instantiated directly using "),Hbe=a("code"),twr=o("__init__()"),awr=o(" (throws an error)."),nwr=l(),Rt=a("div"),f(oL.$$.fragment),swr=l(),Ube=a("p"),lwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iwr=l(),vf=a("p"),dwr=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),cwr=o("not"),fwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ybe=a("code"),mwr=o("from_pretrained()"),gwr=o("to load the model weights."),hwr=l(),Kbe=a("p"),pwr=o("Examples:"),_wr=l(),f(rL.$$.fragment),uwr=l(),So=a("div"),f(tL.$$.fragment),bwr=l(),Zbe=a("p"),vwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Twr=l(),$n=a("p"),Fwr=o("The model class to instantiate is selected based on the "),eve=a("code"),Cwr=o("model_type"),Mwr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),Ewr=o("pretrained_model_name_or_path"),ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(":"),Lwr=l(),ve=a("ul"),c4=a("li"),tve=a("strong"),Bwr=o("albert"),xwr=o(" \u2014 "),VV=a("a"),kwr=o("FlaxAlbertForQuestionAnswering"),Rwr=o(" (ALBERT model)"),Swr=l(),f4=a("li"),ave=a("strong"),Pwr=o("bart"),$wr=o(" \u2014 "),zV=a("a"),Iwr=o("FlaxBartForQuestionAnswering"),jwr=o(" (BART model)"),Dwr=l(),m4=a("li"),nve=a("strong"),Nwr=o("bert"),qwr=o(" \u2014 "),WV=a("a"),Owr=o("FlaxBertForQuestionAnswering"),Gwr=o(" (BERT model)"),Xwr=l(),g4=a("li"),sve=a("strong"),Vwr=o("big_bird"),zwr=o(" \u2014 "),QV=a("a"),Wwr=o("FlaxBigBirdForQuestionAnswering"),Qwr=o(" (BigBird model)"),Hwr=l(),h4=a("li"),lve=a("strong"),Uwr=o("distilbert"),Jwr=o(" \u2014 "),HV=a("a"),Ywr=o("FlaxDistilBertForQuestionAnswering"),Kwr=o(" (DistilBERT model)"),Zwr=l(),p4=a("li"),ive=a("strong"),e6r=o("electra"),o6r=o(" \u2014 "),UV=a("a"),r6r=o("FlaxElectraForQuestionAnswering"),t6r=o(" (ELECTRA model)"),a6r=l(),_4=a("li"),dve=a("strong"),n6r=o("mbart"),s6r=o(" \u2014 "),JV=a("a"),l6r=o("FlaxMBartForQuestionAnswering"),i6r=o(" (mBART model)"),d6r=l(),u4=a("li"),cve=a("strong"),c6r=o("roberta"),f6r=o(" \u2014 "),YV=a("a"),m6r=o("FlaxRobertaForQuestionAnswering"),g6r=o(" (RoBERTa model)"),h6r=l(),b4=a("li"),fve=a("strong"),p6r=o("roformer"),_6r=o(" \u2014 "),KV=a("a"),u6r=o("FlaxRoFormerForQuestionAnswering"),b6r=o(" (RoFormer model)"),v6r=l(),v4=a("li"),mve=a("strong"),T6r=o("xlm-roberta"),F6r=o(" \u2014 "),ZV=a("a"),C6r=o("FlaxXLMRobertaForQuestionAnswering"),M6r=o(" (XLM-RoBERTa model)"),E6r=l(),gve=a("p"),y6r=o("Examples:"),w6r=l(),f(aL.$$.fragment),Vke=l(),Tf=a("h2"),T4=a("a"),hve=a("span"),f(nL.$$.fragment),A6r=l(),pve=a("span"),L6r=o("FlaxAutoModelForTokenClassification"),zke=l(),Nr=a("div"),f(sL.$$.fragment),B6r=l(),Ff=a("p"),x6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_ve=a("code"),k6r=o("from_pretrained()"),R6r=o("class method or the "),uve=a("code"),S6r=o("from_config()"),P6r=o(`class
method.`),$6r=l(),lL=a("p"),I6r=o("This class cannot be instantiated directly using "),bve=a("code"),j6r=o("__init__()"),D6r=o(" (throws an error)."),N6r=l(),St=a("div"),f(iL.$$.fragment),q6r=l(),vve=a("p"),O6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G6r=l(),Cf=a("p"),X6r=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),V6r=o("not"),z6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fve=a("code"),W6r=o("from_pretrained()"),Q6r=o("to load the model weights."),H6r=l(),Cve=a("p"),U6r=o("Examples:"),J6r=l(),f(dL.$$.fragment),Y6r=l(),Po=a("div"),f(cL.$$.fragment),K6r=l(),Mve=a("p"),Z6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eAr=l(),In=a("p"),oAr=o("The model class to instantiate is selected based on the "),Eve=a("code"),rAr=o("model_type"),tAr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),aAr=o("pretrained_model_name_or_path"),nAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),sAr=o("pretrained_model_name_or_path"),lAr=o(":"),iAr=l(),Re=a("ul"),F4=a("li"),Ave=a("strong"),dAr=o("albert"),cAr=o(" \u2014 "),ez=a("a"),fAr=o("FlaxAlbertForTokenClassification"),mAr=o(" (ALBERT model)"),gAr=l(),C4=a("li"),Lve=a("strong"),hAr=o("bert"),pAr=o(" \u2014 "),oz=a("a"),_Ar=o("FlaxBertForTokenClassification"),uAr=o(" (BERT model)"),bAr=l(),M4=a("li"),Bve=a("strong"),vAr=o("big_bird"),TAr=o(" \u2014 "),rz=a("a"),FAr=o("FlaxBigBirdForTokenClassification"),CAr=o(" (BigBird model)"),MAr=l(),E4=a("li"),xve=a("strong"),EAr=o("distilbert"),yAr=o(" \u2014 "),tz=a("a"),wAr=o("FlaxDistilBertForTokenClassification"),AAr=o(" (DistilBERT model)"),LAr=l(),y4=a("li"),kve=a("strong"),BAr=o("electra"),xAr=o(" \u2014 "),az=a("a"),kAr=o("FlaxElectraForTokenClassification"),RAr=o(" (ELECTRA model)"),SAr=l(),w4=a("li"),Rve=a("strong"),PAr=o("roberta"),$Ar=o(" \u2014 "),nz=a("a"),IAr=o("FlaxRobertaForTokenClassification"),jAr=o(" (RoBERTa model)"),DAr=l(),A4=a("li"),Sve=a("strong"),NAr=o("roformer"),qAr=o(" \u2014 "),sz=a("a"),OAr=o("FlaxRoFormerForTokenClassification"),GAr=o(" (RoFormer model)"),XAr=l(),L4=a("li"),Pve=a("strong"),VAr=o("xlm-roberta"),zAr=o(" \u2014 "),lz=a("a"),WAr=o("FlaxXLMRobertaForTokenClassification"),QAr=o(" (XLM-RoBERTa model)"),HAr=l(),$ve=a("p"),UAr=o("Examples:"),JAr=l(),f(fL.$$.fragment),Wke=l(),Mf=a("h2"),B4=a("a"),Ive=a("span"),f(mL.$$.fragment),YAr=l(),jve=a("span"),KAr=o("FlaxAutoModelForMultipleChoice"),Qke=l(),qr=a("div"),f(gL.$$.fragment),ZAr=l(),Ef=a("p"),e0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Dve=a("code"),o0r=o("from_pretrained()"),r0r=o("class method or the "),Nve=a("code"),t0r=o("from_config()"),a0r=o(`class
method.`),n0r=l(),hL=a("p"),s0r=o("This class cannot be instantiated directly using "),qve=a("code"),l0r=o("__init__()"),i0r=o(" (throws an error)."),d0r=l(),Pt=a("div"),f(pL.$$.fragment),c0r=l(),Ove=a("p"),f0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),m0r=l(),yf=a("p"),g0r=o(`Note:
Loading a model from its configuration file does `),Gve=a("strong"),h0r=o("not"),p0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xve=a("code"),_0r=o("from_pretrained()"),u0r=o("to load the model weights."),b0r=l(),Vve=a("p"),v0r=o("Examples:"),T0r=l(),f(_L.$$.fragment),F0r=l(),$o=a("div"),f(uL.$$.fragment),C0r=l(),zve=a("p"),M0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E0r=l(),jn=a("p"),y0r=o("The model class to instantiate is selected based on the "),Wve=a("code"),w0r=o("model_type"),A0r=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),L0r=o("pretrained_model_name_or_path"),B0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),x0r=o("pretrained_model_name_or_path"),k0r=o(":"),R0r=l(),Se=a("ul"),x4=a("li"),Uve=a("strong"),S0r=o("albert"),P0r=o(" \u2014 "),iz=a("a"),$0r=o("FlaxAlbertForMultipleChoice"),I0r=o(" (ALBERT model)"),j0r=l(),k4=a("li"),Jve=a("strong"),D0r=o("bert"),N0r=o(" \u2014 "),dz=a("a"),q0r=o("FlaxBertForMultipleChoice"),O0r=o(" (BERT model)"),G0r=l(),R4=a("li"),Yve=a("strong"),X0r=o("big_bird"),V0r=o(" \u2014 "),cz=a("a"),z0r=o("FlaxBigBirdForMultipleChoice"),W0r=o(" (BigBird model)"),Q0r=l(),S4=a("li"),Kve=a("strong"),H0r=o("distilbert"),U0r=o(" \u2014 "),fz=a("a"),J0r=o("FlaxDistilBertForMultipleChoice"),Y0r=o(" (DistilBERT model)"),K0r=l(),P4=a("li"),Zve=a("strong"),Z0r=o("electra"),eLr=o(" \u2014 "),mz=a("a"),oLr=o("FlaxElectraForMultipleChoice"),rLr=o(" (ELECTRA model)"),tLr=l(),$4=a("li"),eTe=a("strong"),aLr=o("roberta"),nLr=o(" \u2014 "),gz=a("a"),sLr=o("FlaxRobertaForMultipleChoice"),lLr=o(" (RoBERTa model)"),iLr=l(),I4=a("li"),oTe=a("strong"),dLr=o("roformer"),cLr=o(" \u2014 "),hz=a("a"),fLr=o("FlaxRoFormerForMultipleChoice"),mLr=o(" (RoFormer model)"),gLr=l(),j4=a("li"),rTe=a("strong"),hLr=o("xlm-roberta"),pLr=o(" \u2014 "),pz=a("a"),_Lr=o("FlaxXLMRobertaForMultipleChoice"),uLr=o(" (XLM-RoBERTa model)"),bLr=l(),tTe=a("p"),vLr=o("Examples:"),TLr=l(),f(bL.$$.fragment),Hke=l(),wf=a("h2"),D4=a("a"),aTe=a("span"),f(vL.$$.fragment),FLr=l(),nTe=a("span"),CLr=o("FlaxAutoModelForNextSentencePrediction"),Uke=l(),Or=a("div"),f(TL.$$.fragment),MLr=l(),Af=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sTe=a("code"),yLr=o("from_pretrained()"),wLr=o("class method or the "),lTe=a("code"),ALr=o("from_config()"),LLr=o(`class
method.`),BLr=l(),FL=a("p"),xLr=o("This class cannot be instantiated directly using "),iTe=a("code"),kLr=o("__init__()"),RLr=o(" (throws an error)."),SLr=l(),$t=a("div"),f(CL.$$.fragment),PLr=l(),dTe=a("p"),$Lr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ILr=l(),Lf=a("p"),jLr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),DLr=o("not"),NLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fTe=a("code"),qLr=o("from_pretrained()"),OLr=o("to load the model weights."),GLr=l(),mTe=a("p"),XLr=o("Examples:"),VLr=l(),f(ML.$$.fragment),zLr=l(),Io=a("div"),f(EL.$$.fragment),WLr=l(),gTe=a("p"),QLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HLr=l(),Dn=a("p"),ULr=o("The model class to instantiate is selected based on the "),hTe=a("code"),JLr=o("model_type"),YLr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),e8r=o("pretrained_model_name_or_path"),o8r=o(":"),r8r=l(),uTe=a("ul"),N4=a("li"),bTe=a("strong"),t8r=o("bert"),a8r=o(" \u2014 "),_z=a("a"),n8r=o("FlaxBertForNextSentencePrediction"),s8r=o(" (BERT model)"),l8r=l(),vTe=a("p"),i8r=o("Examples:"),d8r=l(),f(yL.$$.fragment),Jke=l(),Bf=a("h2"),q4=a("a"),TTe=a("span"),f(wL.$$.fragment),c8r=l(),FTe=a("span"),f8r=o("FlaxAutoModelForImageClassification"),Yke=l(),Gr=a("div"),f(AL.$$.fragment),m8r=l(),xf=a("p"),g8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CTe=a("code"),h8r=o("from_pretrained()"),p8r=o("class method or the "),MTe=a("code"),_8r=o("from_config()"),u8r=o(`class
method.`),b8r=l(),LL=a("p"),v8r=o("This class cannot be instantiated directly using "),ETe=a("code"),T8r=o("__init__()"),F8r=o(" (throws an error)."),C8r=l(),It=a("div"),f(BL.$$.fragment),M8r=l(),yTe=a("p"),E8r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),y8r=l(),kf=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),A8r=o("not"),L8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ATe=a("code"),B8r=o("from_pretrained()"),x8r=o("to load the model weights."),k8r=l(),LTe=a("p"),R8r=o("Examples:"),S8r=l(),f(xL.$$.fragment),P8r=l(),jo=a("div"),f(kL.$$.fragment),$8r=l(),BTe=a("p"),I8r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j8r=l(),Nn=a("p"),D8r=o("The model class to instantiate is selected based on the "),xTe=a("code"),N8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),O8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),X8r=o("pretrained_model_name_or_path"),V8r=o(":"),z8r=l(),RL=a("ul"),O4=a("li"),STe=a("strong"),W8r=o("beit"),Q8r=o(" \u2014 "),uz=a("a"),H8r=o("FlaxBeitForImageClassification"),U8r=o(" (BEiT model)"),J8r=l(),G4=a("li"),PTe=a("strong"),Y8r=o("vit"),K8r=o(" \u2014 "),bz=a("a"),Z8r=o("FlaxViTForImageClassification"),e7r=o(" (ViT model)"),o7r=l(),$Te=a("p"),r7r=o("Examples:"),t7r=l(),f(SL.$$.fragment),Kke=l(),Rf=a("h2"),X4=a("a"),ITe=a("span"),f(PL.$$.fragment),a7r=l(),jTe=a("span"),n7r=o("FlaxAutoModelForVision2Seq"),Zke=l(),Xr=a("div"),f($L.$$.fragment),s7r=l(),Sf=a("p"),l7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DTe=a("code"),i7r=o("from_pretrained()"),d7r=o("class method or the "),NTe=a("code"),c7r=o("from_config()"),f7r=o(`class
method.`),m7r=l(),IL=a("p"),g7r=o("This class cannot be instantiated directly using "),qTe=a("code"),h7r=o("__init__()"),p7r=o(" (throws an error)."),_7r=l(),jt=a("div"),f(jL.$$.fragment),u7r=l(),OTe=a("p"),b7r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),v7r=l(),Pf=a("p"),T7r=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),F7r=o("not"),C7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XTe=a("code"),M7r=o("from_pretrained()"),E7r=o("to load the model weights."),y7r=l(),VTe=a("p"),w7r=o("Examples:"),A7r=l(),f(DL.$$.fragment),L7r=l(),Do=a("div"),f(NL.$$.fragment),B7r=l(),zTe=a("p"),x7r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k7r=l(),qn=a("p"),R7r=o("The model class to instantiate is selected based on the "),WTe=a("code"),S7r=o("model_type"),P7r=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),$7r=o("pretrained_model_name_or_path"),I7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),j7r=o("pretrained_model_name_or_path"),D7r=o(":"),N7r=l(),UTe=a("ul"),V4=a("li"),JTe=a("strong"),q7r=o("vision-encoder-decoder"),O7r=o(" \u2014 "),vz=a("a"),G7r=o("FlaxVisionEncoderDecoderModel"),X7r=o(" (Vision Encoder decoder model)"),V7r=l(),YTe=a("p"),z7r=o("Examples:"),W7r=l(),f(qL.$$.fragment),this.h()},l(d){const u=TFt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Pe=i(d),de=n(d,"H1",{class:!0});var OL=s(de);ge=n(OL,"A",{id:!0,class:!0,href:!0});var KTe=s(ge);io=n(KTe,"SPAN",{});var ZTe=s(io);m(fe.$$.fragment,ZTe),ZTe.forEach(t),KTe.forEach(t),Te=i(OL),Vo=n(OL,"SPAN",{});var H7r=s(Vo);ji=r(H7r,"Auto Classes"),H7r.forEach(t),OL.forEach(t),If=i(d),ca=n(d,"P",{});var oRe=s(ca);Di=r(oRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(oRe,"CODE",{});var U7r=s(Ni);zE=r(U7r,"from_pretrained()"),U7r.forEach(t),jf=r(oRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),oRe.forEach(t),Le=i(d),co=n(d,"P",{});var z4=s(co);qi=r(z4,"Instantiating one of "),On=n(z4,"A",{href:!0});var J7r=s(On);WE=r(J7r,"AutoConfig"),J7r.forEach(t),Gn=r(z4,", "),Xn=n(z4,"A",{href:!0});var Y7r=s(Xn);QE=r(Y7r,"AutoModel"),Y7r.forEach(t),Oi=r(z4,`, and
`),Vn=n(z4,"A",{href:!0});var K7r=s(Vn);HE=r(K7r,"AutoTokenizer"),K7r.forEach(t),Gi=r(z4," will directly create a class of the relevant architecture. For instance"),z4.forEach(t),Df=i(d),m(Na.$$.fragment,d),fo=i(d),he=n(d,"P",{});var rRe=s(he);N8=r(rRe,"will create a model that is an instance of "),Xi=n(rRe,"A",{href:!0});var Z7r=s(Xi);q8=r(Z7r,"BertModel"),Z7r.forEach(t),O8=r(rRe,"."),rRe.forEach(t),zo=i(d),qa=n(d,"P",{});var tRe=s(qa);G8=r(tRe,"There is one class of "),Nf=n(tRe,"CODE",{});var eBr=s(Nf);X8=r(eBr,"AutoModel"),eBr.forEach(t),gPe=r(tRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tRe.forEach(t),ZBe=i(d),Vi=n(d,"H2",{class:!0});var aRe=s(Vi);qf=n(aRe,"A",{id:!0,class:!0,href:!0});var oBr=s(qf);mQ=n(oBr,"SPAN",{});var rBr=s(mQ);m(UE.$$.fragment,rBr),rBr.forEach(t),oBr.forEach(t),hPe=i(aRe),gQ=n(aRe,"SPAN",{});var tBr=s(gQ);pPe=r(tBr,"Extending the Auto Classes"),tBr.forEach(t),aRe.forEach(t),exe=i(d),zn=n(d,"P",{});var Tz=s(zn);_Pe=r(Tz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),hQ=n(Tz,"CODE",{});var aBr=s(hQ);uPe=r(aBr,"NewModel"),aBr.forEach(t),bPe=r(Tz,", make sure you have a "),pQ=n(Tz,"CODE",{});var nBr=s(pQ);vPe=r(nBr,"NewModelConfig"),nBr.forEach(t),TPe=r(Tz,` then you can add those to the auto
classes like this:`),Tz.forEach(t),oxe=i(d),m(JE.$$.fragment,d),rxe=i(d),V8=n(d,"P",{});var sBr=s(V8);FPe=r(sBr,"You will then be able to use the auto classes like you would usually do!"),sBr.forEach(t),txe=i(d),m(Of.$$.fragment,d),axe=i(d),zi=n(d,"H2",{class:!0});var nRe=s(zi);Gf=n(nRe,"A",{id:!0,class:!0,href:!0});var lBr=s(Gf);_Q=n(lBr,"SPAN",{});var iBr=s(_Q);m(YE.$$.fragment,iBr),iBr.forEach(t),lBr.forEach(t),CPe=i(nRe),uQ=n(nRe,"SPAN",{});var dBr=s(uQ);MPe=r(dBr,"AutoConfig"),dBr.forEach(t),nRe.forEach(t),nxe=i(d),Wo=n(d,"DIV",{class:!0});var Xs=s(Wo);m(KE.$$.fragment,Xs),EPe=i(Xs),ZE=n(Xs,"P",{});var sRe=s(ZE);yPe=r(sRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),z8=n(sRe,"A",{href:!0});var cBr=s(z8);wPe=r(cBr,"from_pretrained()"),cBr.forEach(t),APe=r(sRe," class method."),sRe.forEach(t),LPe=i(Xs),e3=n(Xs,"P",{});var lRe=s(e3);BPe=r(lRe,"This class cannot be instantiated directly using "),bQ=n(lRe,"CODE",{});var fBr=s(bQ);xPe=r(fBr,"__init__()"),fBr.forEach(t),kPe=r(lRe," (throws an error)."),lRe.forEach(t),RPe=i(Xs),mo=n(Xs,"DIV",{class:!0});var ma=s(mo);m(o3.$$.fragment,ma),SPe=i(ma),vQ=n(ma,"P",{});var mBr=s(vQ);PPe=r(mBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),mBr.forEach(t),$Pe=i(ma),Wi=n(ma,"P",{});var Fz=s(Wi);IPe=r(Fz,"The configuration class to instantiate is selected based on the "),TQ=n(Fz,"CODE",{});var gBr=s(TQ);jPe=r(gBr,"model_type"),gBr.forEach(t),DPe=r(Fz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FQ=n(Fz,"CODE",{});var hBr=s(FQ);NPe=r(hBr,"pretrained_model_name_or_path"),hBr.forEach(t),qPe=r(Fz,":"),Fz.forEach(t),OPe=i(ma),v=n(ma,"UL",{});var T=s(v);Xf=n(T,"LI",{});var eFe=s(Xf);CQ=n(eFe,"STRONG",{});var pBr=s(CQ);GPe=r(pBr,"albert"),pBr.forEach(t),XPe=r(eFe," \u2014 "),W8=n(eFe,"A",{href:!0});var _Br=s(W8);VPe=r(_Br,"AlbertConfig"),_Br.forEach(t),zPe=r(eFe," (ALBERT model)"),eFe.forEach(t),WPe=i(T),Vf=n(T,"LI",{});var oFe=s(Vf);MQ=n(oFe,"STRONG",{});var uBr=s(MQ);QPe=r(uBr,"bart"),uBr.forEach(t),HPe=r(oFe," \u2014 "),Q8=n(oFe,"A",{href:!0});var bBr=s(Q8);UPe=r(bBr,"BartConfig"),bBr.forEach(t),JPe=r(oFe," (BART model)"),oFe.forEach(t),YPe=i(T),zf=n(T,"LI",{});var rFe=s(zf);EQ=n(rFe,"STRONG",{});var vBr=s(EQ);KPe=r(vBr,"beit"),vBr.forEach(t),ZPe=r(rFe," \u2014 "),H8=n(rFe,"A",{href:!0});var TBr=s(H8);e$e=r(TBr,"BeitConfig"),TBr.forEach(t),o$e=r(rFe," (BEiT model)"),rFe.forEach(t),r$e=i(T),Wf=n(T,"LI",{});var tFe=s(Wf);yQ=n(tFe,"STRONG",{});var FBr=s(yQ);t$e=r(FBr,"bert"),FBr.forEach(t),a$e=r(tFe," \u2014 "),U8=n(tFe,"A",{href:!0});var CBr=s(U8);n$e=r(CBr,"BertConfig"),CBr.forEach(t),s$e=r(tFe," (BERT model)"),tFe.forEach(t),l$e=i(T),Qf=n(T,"LI",{});var aFe=s(Qf);wQ=n(aFe,"STRONG",{});var MBr=s(wQ);i$e=r(MBr,"bert-generation"),MBr.forEach(t),d$e=r(aFe," \u2014 "),J8=n(aFe,"A",{href:!0});var EBr=s(J8);c$e=r(EBr,"BertGenerationConfig"),EBr.forEach(t),f$e=r(aFe," (Bert Generation model)"),aFe.forEach(t),m$e=i(T),Hf=n(T,"LI",{});var nFe=s(Hf);AQ=n(nFe,"STRONG",{});var yBr=s(AQ);g$e=r(yBr,"big_bird"),yBr.forEach(t),h$e=r(nFe," \u2014 "),Y8=n(nFe,"A",{href:!0});var wBr=s(Y8);p$e=r(wBr,"BigBirdConfig"),wBr.forEach(t),_$e=r(nFe," (BigBird model)"),nFe.forEach(t),u$e=i(T),Uf=n(T,"LI",{});var sFe=s(Uf);LQ=n(sFe,"STRONG",{});var ABr=s(LQ);b$e=r(ABr,"bigbird_pegasus"),ABr.forEach(t),v$e=r(sFe," \u2014 "),K8=n(sFe,"A",{href:!0});var LBr=s(K8);T$e=r(LBr,"BigBirdPegasusConfig"),LBr.forEach(t),F$e=r(sFe," (BigBirdPegasus model)"),sFe.forEach(t),C$e=i(T),Jf=n(T,"LI",{});var lFe=s(Jf);BQ=n(lFe,"STRONG",{});var BBr=s(BQ);M$e=r(BBr,"blenderbot"),BBr.forEach(t),E$e=r(lFe," \u2014 "),Z8=n(lFe,"A",{href:!0});var xBr=s(Z8);y$e=r(xBr,"BlenderbotConfig"),xBr.forEach(t),w$e=r(lFe," (Blenderbot model)"),lFe.forEach(t),A$e=i(T),Yf=n(T,"LI",{});var iFe=s(Yf);xQ=n(iFe,"STRONG",{});var kBr=s(xQ);L$e=r(kBr,"blenderbot-small"),kBr.forEach(t),B$e=r(iFe," \u2014 "),e7=n(iFe,"A",{href:!0});var RBr=s(e7);x$e=r(RBr,"BlenderbotSmallConfig"),RBr.forEach(t),k$e=r(iFe," (BlenderbotSmall model)"),iFe.forEach(t),R$e=i(T),Kf=n(T,"LI",{});var dFe=s(Kf);kQ=n(dFe,"STRONG",{});var SBr=s(kQ);S$e=r(SBr,"camembert"),SBr.forEach(t),P$e=r(dFe," \u2014 "),o7=n(dFe,"A",{href:!0});var PBr=s(o7);$$e=r(PBr,"CamembertConfig"),PBr.forEach(t),I$e=r(dFe," (CamemBERT model)"),dFe.forEach(t),j$e=i(T),Zf=n(T,"LI",{});var cFe=s(Zf);RQ=n(cFe,"STRONG",{});var $Br=s(RQ);D$e=r($Br,"canine"),$Br.forEach(t),N$e=r(cFe," \u2014 "),r7=n(cFe,"A",{href:!0});var IBr=s(r7);q$e=r(IBr,"CanineConfig"),IBr.forEach(t),O$e=r(cFe," (Canine model)"),cFe.forEach(t),G$e=i(T),em=n(T,"LI",{});var fFe=s(em);SQ=n(fFe,"STRONG",{});var jBr=s(SQ);X$e=r(jBr,"clip"),jBr.forEach(t),V$e=r(fFe," \u2014 "),t7=n(fFe,"A",{href:!0});var DBr=s(t7);z$e=r(DBr,"CLIPConfig"),DBr.forEach(t),W$e=r(fFe," (CLIP model)"),fFe.forEach(t),Q$e=i(T),om=n(T,"LI",{});var mFe=s(om);PQ=n(mFe,"STRONG",{});var NBr=s(PQ);H$e=r(NBr,"convbert"),NBr.forEach(t),U$e=r(mFe," \u2014 "),a7=n(mFe,"A",{href:!0});var qBr=s(a7);J$e=r(qBr,"ConvBertConfig"),qBr.forEach(t),Y$e=r(mFe," (ConvBERT model)"),mFe.forEach(t),K$e=i(T),rm=n(T,"LI",{});var gFe=s(rm);$Q=n(gFe,"STRONG",{});var OBr=s($Q);Z$e=r(OBr,"convnext"),OBr.forEach(t),eIe=r(gFe," \u2014 "),n7=n(gFe,"A",{href:!0});var GBr=s(n7);oIe=r(GBr,"ConvNextConfig"),GBr.forEach(t),rIe=r(gFe," (ConvNext model)"),gFe.forEach(t),tIe=i(T),tm=n(T,"LI",{});var hFe=s(tm);IQ=n(hFe,"STRONG",{});var XBr=s(IQ);aIe=r(XBr,"ctrl"),XBr.forEach(t),nIe=r(hFe," \u2014 "),s7=n(hFe,"A",{href:!0});var VBr=s(s7);sIe=r(VBr,"CTRLConfig"),VBr.forEach(t),lIe=r(hFe," (CTRL model)"),hFe.forEach(t),iIe=i(T),am=n(T,"LI",{});var pFe=s(am);jQ=n(pFe,"STRONG",{});var zBr=s(jQ);dIe=r(zBr,"data2vec-audio"),zBr.forEach(t),cIe=r(pFe," \u2014 "),l7=n(pFe,"A",{href:!0});var WBr=s(l7);fIe=r(WBr,"Data2VecAudioConfig"),WBr.forEach(t),mIe=r(pFe," (Data2VecAudio model)"),pFe.forEach(t),gIe=i(T),nm=n(T,"LI",{});var _Fe=s(nm);DQ=n(_Fe,"STRONG",{});var QBr=s(DQ);hIe=r(QBr,"data2vec-text"),QBr.forEach(t),pIe=r(_Fe," \u2014 "),i7=n(_Fe,"A",{href:!0});var HBr=s(i7);_Ie=r(HBr,"Data2VecTextConfig"),HBr.forEach(t),uIe=r(_Fe," (Data2VecText model)"),_Fe.forEach(t),bIe=i(T),sm=n(T,"LI",{});var uFe=s(sm);NQ=n(uFe,"STRONG",{});var UBr=s(NQ);vIe=r(UBr,"deberta"),UBr.forEach(t),TIe=r(uFe," \u2014 "),d7=n(uFe,"A",{href:!0});var JBr=s(d7);FIe=r(JBr,"DebertaConfig"),JBr.forEach(t),CIe=r(uFe," (DeBERTa model)"),uFe.forEach(t),MIe=i(T),lm=n(T,"LI",{});var bFe=s(lm);qQ=n(bFe,"STRONG",{});var YBr=s(qQ);EIe=r(YBr,"deberta-v2"),YBr.forEach(t),yIe=r(bFe," \u2014 "),c7=n(bFe,"A",{href:!0});var KBr=s(c7);wIe=r(KBr,"DebertaV2Config"),KBr.forEach(t),AIe=r(bFe," (DeBERTa-v2 model)"),bFe.forEach(t),LIe=i(T),im=n(T,"LI",{});var vFe=s(im);OQ=n(vFe,"STRONG",{});var ZBr=s(OQ);BIe=r(ZBr,"deit"),ZBr.forEach(t),xIe=r(vFe," \u2014 "),f7=n(vFe,"A",{href:!0});var exr=s(f7);kIe=r(exr,"DeiTConfig"),exr.forEach(t),RIe=r(vFe," (DeiT model)"),vFe.forEach(t),SIe=i(T),dm=n(T,"LI",{});var TFe=s(dm);GQ=n(TFe,"STRONG",{});var oxr=s(GQ);PIe=r(oxr,"detr"),oxr.forEach(t),$Ie=r(TFe," \u2014 "),m7=n(TFe,"A",{href:!0});var rxr=s(m7);IIe=r(rxr,"DetrConfig"),rxr.forEach(t),jIe=r(TFe," (DETR model)"),TFe.forEach(t),DIe=i(T),cm=n(T,"LI",{});var FFe=s(cm);XQ=n(FFe,"STRONG",{});var txr=s(XQ);NIe=r(txr,"distilbert"),txr.forEach(t),qIe=r(FFe," \u2014 "),g7=n(FFe,"A",{href:!0});var axr=s(g7);OIe=r(axr,"DistilBertConfig"),axr.forEach(t),GIe=r(FFe," (DistilBERT model)"),FFe.forEach(t),XIe=i(T),fm=n(T,"LI",{});var CFe=s(fm);VQ=n(CFe,"STRONG",{});var nxr=s(VQ);VIe=r(nxr,"dpr"),nxr.forEach(t),zIe=r(CFe," \u2014 "),h7=n(CFe,"A",{href:!0});var sxr=s(h7);WIe=r(sxr,"DPRConfig"),sxr.forEach(t),QIe=r(CFe," (DPR model)"),CFe.forEach(t),HIe=i(T),mm=n(T,"LI",{});var MFe=s(mm);zQ=n(MFe,"STRONG",{});var lxr=s(zQ);UIe=r(lxr,"electra"),lxr.forEach(t),JIe=r(MFe," \u2014 "),p7=n(MFe,"A",{href:!0});var ixr=s(p7);YIe=r(ixr,"ElectraConfig"),ixr.forEach(t),KIe=r(MFe," (ELECTRA model)"),MFe.forEach(t),ZIe=i(T),gm=n(T,"LI",{});var EFe=s(gm);WQ=n(EFe,"STRONG",{});var dxr=s(WQ);eje=r(dxr,"encoder-decoder"),dxr.forEach(t),oje=r(EFe," \u2014 "),_7=n(EFe,"A",{href:!0});var cxr=s(_7);rje=r(cxr,"EncoderDecoderConfig"),cxr.forEach(t),tje=r(EFe," (Encoder decoder model)"),EFe.forEach(t),aje=i(T),hm=n(T,"LI",{});var yFe=s(hm);QQ=n(yFe,"STRONG",{});var fxr=s(QQ);nje=r(fxr,"flaubert"),fxr.forEach(t),sje=r(yFe," \u2014 "),u7=n(yFe,"A",{href:!0});var mxr=s(u7);lje=r(mxr,"FlaubertConfig"),mxr.forEach(t),ije=r(yFe," (FlauBERT model)"),yFe.forEach(t),dje=i(T),pm=n(T,"LI",{});var wFe=s(pm);HQ=n(wFe,"STRONG",{});var gxr=s(HQ);cje=r(gxr,"fnet"),gxr.forEach(t),fje=r(wFe," \u2014 "),b7=n(wFe,"A",{href:!0});var hxr=s(b7);mje=r(hxr,"FNetConfig"),hxr.forEach(t),gje=r(wFe," (FNet model)"),wFe.forEach(t),hje=i(T),_m=n(T,"LI",{});var AFe=s(_m);UQ=n(AFe,"STRONG",{});var pxr=s(UQ);pje=r(pxr,"fsmt"),pxr.forEach(t),_je=r(AFe," \u2014 "),v7=n(AFe,"A",{href:!0});var _xr=s(v7);uje=r(_xr,"FSMTConfig"),_xr.forEach(t),bje=r(AFe," (FairSeq Machine-Translation model)"),AFe.forEach(t),vje=i(T),um=n(T,"LI",{});var LFe=s(um);JQ=n(LFe,"STRONG",{});var uxr=s(JQ);Tje=r(uxr,"funnel"),uxr.forEach(t),Fje=r(LFe," \u2014 "),T7=n(LFe,"A",{href:!0});var bxr=s(T7);Cje=r(bxr,"FunnelConfig"),bxr.forEach(t),Mje=r(LFe," (Funnel Transformer model)"),LFe.forEach(t),Eje=i(T),bm=n(T,"LI",{});var BFe=s(bm);YQ=n(BFe,"STRONG",{});var vxr=s(YQ);yje=r(vxr,"gpt2"),vxr.forEach(t),wje=r(BFe," \u2014 "),F7=n(BFe,"A",{href:!0});var Txr=s(F7);Aje=r(Txr,"GPT2Config"),Txr.forEach(t),Lje=r(BFe," (OpenAI GPT-2 model)"),BFe.forEach(t),Bje=i(T),vm=n(T,"LI",{});var xFe=s(vm);KQ=n(xFe,"STRONG",{});var Fxr=s(KQ);xje=r(Fxr,"gpt_neo"),Fxr.forEach(t),kje=r(xFe," \u2014 "),C7=n(xFe,"A",{href:!0});var Cxr=s(C7);Rje=r(Cxr,"GPTNeoConfig"),Cxr.forEach(t),Sje=r(xFe," (GPT Neo model)"),xFe.forEach(t),Pje=i(T),Tm=n(T,"LI",{});var kFe=s(Tm);ZQ=n(kFe,"STRONG",{});var Mxr=s(ZQ);$je=r(Mxr,"gptj"),Mxr.forEach(t),Ije=r(kFe," \u2014 "),M7=n(kFe,"A",{href:!0});var Exr=s(M7);jje=r(Exr,"GPTJConfig"),Exr.forEach(t),Dje=r(kFe," (GPT-J model)"),kFe.forEach(t),Nje=i(T),Fm=n(T,"LI",{});var RFe=s(Fm);eH=n(RFe,"STRONG",{});var yxr=s(eH);qje=r(yxr,"hubert"),yxr.forEach(t),Oje=r(RFe," \u2014 "),E7=n(RFe,"A",{href:!0});var wxr=s(E7);Gje=r(wxr,"HubertConfig"),wxr.forEach(t),Xje=r(RFe," (Hubert model)"),RFe.forEach(t),Vje=i(T),Cm=n(T,"LI",{});var SFe=s(Cm);oH=n(SFe,"STRONG",{});var Axr=s(oH);zje=r(Axr,"ibert"),Axr.forEach(t),Wje=r(SFe," \u2014 "),y7=n(SFe,"A",{href:!0});var Lxr=s(y7);Qje=r(Lxr,"IBertConfig"),Lxr.forEach(t),Hje=r(SFe," (I-BERT model)"),SFe.forEach(t),Uje=i(T),Mm=n(T,"LI",{});var PFe=s(Mm);rH=n(PFe,"STRONG",{});var Bxr=s(rH);Jje=r(Bxr,"imagegpt"),Bxr.forEach(t),Yje=r(PFe," \u2014 "),w7=n(PFe,"A",{href:!0});var xxr=s(w7);Kje=r(xxr,"ImageGPTConfig"),xxr.forEach(t),Zje=r(PFe," (ImageGPT model)"),PFe.forEach(t),eDe=i(T),Em=n(T,"LI",{});var $Fe=s(Em);tH=n($Fe,"STRONG",{});var kxr=s(tH);oDe=r(kxr,"layoutlm"),kxr.forEach(t),rDe=r($Fe," \u2014 "),A7=n($Fe,"A",{href:!0});var Rxr=s(A7);tDe=r(Rxr,"LayoutLMConfig"),Rxr.forEach(t),aDe=r($Fe," (LayoutLM model)"),$Fe.forEach(t),nDe=i(T),ym=n(T,"LI",{});var IFe=s(ym);aH=n(IFe,"STRONG",{});var Sxr=s(aH);sDe=r(Sxr,"layoutlmv2"),Sxr.forEach(t),lDe=r(IFe," \u2014 "),L7=n(IFe,"A",{href:!0});var Pxr=s(L7);iDe=r(Pxr,"LayoutLMv2Config"),Pxr.forEach(t),dDe=r(IFe," (LayoutLMv2 model)"),IFe.forEach(t),cDe=i(T),wm=n(T,"LI",{});var jFe=s(wm);nH=n(jFe,"STRONG",{});var $xr=s(nH);fDe=r($xr,"led"),$xr.forEach(t),mDe=r(jFe," \u2014 "),B7=n(jFe,"A",{href:!0});var Ixr=s(B7);gDe=r(Ixr,"LEDConfig"),Ixr.forEach(t),hDe=r(jFe," (LED model)"),jFe.forEach(t),pDe=i(T),Am=n(T,"LI",{});var DFe=s(Am);sH=n(DFe,"STRONG",{});var jxr=s(sH);_De=r(jxr,"longformer"),jxr.forEach(t),uDe=r(DFe," \u2014 "),x7=n(DFe,"A",{href:!0});var Dxr=s(x7);bDe=r(Dxr,"LongformerConfig"),Dxr.forEach(t),vDe=r(DFe," (Longformer model)"),DFe.forEach(t),TDe=i(T),Lm=n(T,"LI",{});var NFe=s(Lm);lH=n(NFe,"STRONG",{});var Nxr=s(lH);FDe=r(Nxr,"luke"),Nxr.forEach(t),CDe=r(NFe," \u2014 "),k7=n(NFe,"A",{href:!0});var qxr=s(k7);MDe=r(qxr,"LukeConfig"),qxr.forEach(t),EDe=r(NFe," (LUKE model)"),NFe.forEach(t),yDe=i(T),Bm=n(T,"LI",{});var qFe=s(Bm);iH=n(qFe,"STRONG",{});var Oxr=s(iH);wDe=r(Oxr,"lxmert"),Oxr.forEach(t),ADe=r(qFe," \u2014 "),R7=n(qFe,"A",{href:!0});var Gxr=s(R7);LDe=r(Gxr,"LxmertConfig"),Gxr.forEach(t),BDe=r(qFe," (LXMERT model)"),qFe.forEach(t),xDe=i(T),xm=n(T,"LI",{});var OFe=s(xm);dH=n(OFe,"STRONG",{});var Xxr=s(dH);kDe=r(Xxr,"m2m_100"),Xxr.forEach(t),RDe=r(OFe," \u2014 "),S7=n(OFe,"A",{href:!0});var Vxr=s(S7);SDe=r(Vxr,"M2M100Config"),Vxr.forEach(t),PDe=r(OFe," (M2M100 model)"),OFe.forEach(t),$De=i(T),km=n(T,"LI",{});var GFe=s(km);cH=n(GFe,"STRONG",{});var zxr=s(cH);IDe=r(zxr,"marian"),zxr.forEach(t),jDe=r(GFe," \u2014 "),P7=n(GFe,"A",{href:!0});var Wxr=s(P7);DDe=r(Wxr,"MarianConfig"),Wxr.forEach(t),NDe=r(GFe," (Marian model)"),GFe.forEach(t),qDe=i(T),Rm=n(T,"LI",{});var XFe=s(Rm);fH=n(XFe,"STRONG",{});var Qxr=s(fH);ODe=r(Qxr,"maskformer"),Qxr.forEach(t),GDe=r(XFe," \u2014 "),$7=n(XFe,"A",{href:!0});var Hxr=s($7);XDe=r(Hxr,"MaskFormerConfig"),Hxr.forEach(t),VDe=r(XFe," (MaskFormer model)"),XFe.forEach(t),zDe=i(T),Sm=n(T,"LI",{});var VFe=s(Sm);mH=n(VFe,"STRONG",{});var Uxr=s(mH);WDe=r(Uxr,"mbart"),Uxr.forEach(t),QDe=r(VFe," \u2014 "),I7=n(VFe,"A",{href:!0});var Jxr=s(I7);HDe=r(Jxr,"MBartConfig"),Jxr.forEach(t),UDe=r(VFe," (mBART model)"),VFe.forEach(t),JDe=i(T),Pm=n(T,"LI",{});var zFe=s(Pm);gH=n(zFe,"STRONG",{});var Yxr=s(gH);YDe=r(Yxr,"megatron-bert"),Yxr.forEach(t),KDe=r(zFe," \u2014 "),j7=n(zFe,"A",{href:!0});var Kxr=s(j7);ZDe=r(Kxr,"MegatronBertConfig"),Kxr.forEach(t),eNe=r(zFe," (MegatronBert model)"),zFe.forEach(t),oNe=i(T),$m=n(T,"LI",{});var WFe=s($m);hH=n(WFe,"STRONG",{});var Zxr=s(hH);rNe=r(Zxr,"mobilebert"),Zxr.forEach(t),tNe=r(WFe," \u2014 "),D7=n(WFe,"A",{href:!0});var ekr=s(D7);aNe=r(ekr,"MobileBertConfig"),ekr.forEach(t),nNe=r(WFe," (MobileBERT model)"),WFe.forEach(t),sNe=i(T),Im=n(T,"LI",{});var QFe=s(Im);pH=n(QFe,"STRONG",{});var okr=s(pH);lNe=r(okr,"mpnet"),okr.forEach(t),iNe=r(QFe," \u2014 "),N7=n(QFe,"A",{href:!0});var rkr=s(N7);dNe=r(rkr,"MPNetConfig"),rkr.forEach(t),cNe=r(QFe," (MPNet model)"),QFe.forEach(t),fNe=i(T),jm=n(T,"LI",{});var HFe=s(jm);_H=n(HFe,"STRONG",{});var tkr=s(_H);mNe=r(tkr,"mt5"),tkr.forEach(t),gNe=r(HFe," \u2014 "),q7=n(HFe,"A",{href:!0});var akr=s(q7);hNe=r(akr,"MT5Config"),akr.forEach(t),pNe=r(HFe," (mT5 model)"),HFe.forEach(t),_Ne=i(T),Dm=n(T,"LI",{});var UFe=s(Dm);uH=n(UFe,"STRONG",{});var nkr=s(uH);uNe=r(nkr,"nystromformer"),nkr.forEach(t),bNe=r(UFe," \u2014 "),O7=n(UFe,"A",{href:!0});var skr=s(O7);vNe=r(skr,"NystromformerConfig"),skr.forEach(t),TNe=r(UFe," (Nystromformer model)"),UFe.forEach(t),FNe=i(T),Nm=n(T,"LI",{});var JFe=s(Nm);bH=n(JFe,"STRONG",{});var lkr=s(bH);CNe=r(lkr,"openai-gpt"),lkr.forEach(t),MNe=r(JFe," \u2014 "),G7=n(JFe,"A",{href:!0});var ikr=s(G7);ENe=r(ikr,"OpenAIGPTConfig"),ikr.forEach(t),yNe=r(JFe," (OpenAI GPT model)"),JFe.forEach(t),wNe=i(T),qm=n(T,"LI",{});var YFe=s(qm);vH=n(YFe,"STRONG",{});var dkr=s(vH);ANe=r(dkr,"pegasus"),dkr.forEach(t),LNe=r(YFe," \u2014 "),X7=n(YFe,"A",{href:!0});var ckr=s(X7);BNe=r(ckr,"PegasusConfig"),ckr.forEach(t),xNe=r(YFe," (Pegasus model)"),YFe.forEach(t),kNe=i(T),Om=n(T,"LI",{});var KFe=s(Om);TH=n(KFe,"STRONG",{});var fkr=s(TH);RNe=r(fkr,"perceiver"),fkr.forEach(t),SNe=r(KFe," \u2014 "),V7=n(KFe,"A",{href:!0});var mkr=s(V7);PNe=r(mkr,"PerceiverConfig"),mkr.forEach(t),$Ne=r(KFe," (Perceiver model)"),KFe.forEach(t),INe=i(T),Gm=n(T,"LI",{});var ZFe=s(Gm);FH=n(ZFe,"STRONG",{});var gkr=s(FH);jNe=r(gkr,"plbart"),gkr.forEach(t),DNe=r(ZFe," \u2014 "),z7=n(ZFe,"A",{href:!0});var hkr=s(z7);NNe=r(hkr,"PLBartConfig"),hkr.forEach(t),qNe=r(ZFe," (PLBart model)"),ZFe.forEach(t),ONe=i(T),Xm=n(T,"LI",{});var e9e=s(Xm);CH=n(e9e,"STRONG",{});var pkr=s(CH);GNe=r(pkr,"poolformer"),pkr.forEach(t),XNe=r(e9e," \u2014 "),W7=n(e9e,"A",{href:!0});var _kr=s(W7);VNe=r(_kr,"PoolFormerConfig"),_kr.forEach(t),zNe=r(e9e," (PoolFormer model)"),e9e.forEach(t),WNe=i(T),Vm=n(T,"LI",{});var o9e=s(Vm);MH=n(o9e,"STRONG",{});var ukr=s(MH);QNe=r(ukr,"prophetnet"),ukr.forEach(t),HNe=r(o9e," \u2014 "),Q7=n(o9e,"A",{href:!0});var bkr=s(Q7);UNe=r(bkr,"ProphetNetConfig"),bkr.forEach(t),JNe=r(o9e," (ProphetNet model)"),o9e.forEach(t),YNe=i(T),zm=n(T,"LI",{});var r9e=s(zm);EH=n(r9e,"STRONG",{});var vkr=s(EH);KNe=r(vkr,"qdqbert"),vkr.forEach(t),ZNe=r(r9e," \u2014 "),H7=n(r9e,"A",{href:!0});var Tkr=s(H7);eqe=r(Tkr,"QDQBertConfig"),Tkr.forEach(t),oqe=r(r9e," (QDQBert model)"),r9e.forEach(t),rqe=i(T),Wm=n(T,"LI",{});var t9e=s(Wm);yH=n(t9e,"STRONG",{});var Fkr=s(yH);tqe=r(Fkr,"rag"),Fkr.forEach(t),aqe=r(t9e," \u2014 "),U7=n(t9e,"A",{href:!0});var Ckr=s(U7);nqe=r(Ckr,"RagConfig"),Ckr.forEach(t),sqe=r(t9e," (RAG model)"),t9e.forEach(t),lqe=i(T),Qm=n(T,"LI",{});var a9e=s(Qm);wH=n(a9e,"STRONG",{});var Mkr=s(wH);iqe=r(Mkr,"realm"),Mkr.forEach(t),dqe=r(a9e," \u2014 "),J7=n(a9e,"A",{href:!0});var Ekr=s(J7);cqe=r(Ekr,"RealmConfig"),Ekr.forEach(t),fqe=r(a9e," (Realm model)"),a9e.forEach(t),mqe=i(T),Hm=n(T,"LI",{});var n9e=s(Hm);AH=n(n9e,"STRONG",{});var ykr=s(AH);gqe=r(ykr,"reformer"),ykr.forEach(t),hqe=r(n9e," \u2014 "),Y7=n(n9e,"A",{href:!0});var wkr=s(Y7);pqe=r(wkr,"ReformerConfig"),wkr.forEach(t),_qe=r(n9e," (Reformer model)"),n9e.forEach(t),uqe=i(T),Um=n(T,"LI",{});var s9e=s(Um);LH=n(s9e,"STRONG",{});var Akr=s(LH);bqe=r(Akr,"rembert"),Akr.forEach(t),vqe=r(s9e," \u2014 "),K7=n(s9e,"A",{href:!0});var Lkr=s(K7);Tqe=r(Lkr,"RemBertConfig"),Lkr.forEach(t),Fqe=r(s9e," (RemBERT model)"),s9e.forEach(t),Cqe=i(T),Jm=n(T,"LI",{});var l9e=s(Jm);BH=n(l9e,"STRONG",{});var Bkr=s(BH);Mqe=r(Bkr,"retribert"),Bkr.forEach(t),Eqe=r(l9e," \u2014 "),Z7=n(l9e,"A",{href:!0});var xkr=s(Z7);yqe=r(xkr,"RetriBertConfig"),xkr.forEach(t),wqe=r(l9e," (RetriBERT model)"),l9e.forEach(t),Aqe=i(T),Ym=n(T,"LI",{});var i9e=s(Ym);xH=n(i9e,"STRONG",{});var kkr=s(xH);Lqe=r(kkr,"roberta"),kkr.forEach(t),Bqe=r(i9e," \u2014 "),eB=n(i9e,"A",{href:!0});var Rkr=s(eB);xqe=r(Rkr,"RobertaConfig"),Rkr.forEach(t),kqe=r(i9e," (RoBERTa model)"),i9e.forEach(t),Rqe=i(T),Km=n(T,"LI",{});var d9e=s(Km);kH=n(d9e,"STRONG",{});var Skr=s(kH);Sqe=r(Skr,"roformer"),Skr.forEach(t),Pqe=r(d9e," \u2014 "),oB=n(d9e,"A",{href:!0});var Pkr=s(oB);$qe=r(Pkr,"RoFormerConfig"),Pkr.forEach(t),Iqe=r(d9e," (RoFormer model)"),d9e.forEach(t),jqe=i(T),Zm=n(T,"LI",{});var c9e=s(Zm);RH=n(c9e,"STRONG",{});var $kr=s(RH);Dqe=r($kr,"segformer"),$kr.forEach(t),Nqe=r(c9e," \u2014 "),rB=n(c9e,"A",{href:!0});var Ikr=s(rB);qqe=r(Ikr,"SegformerConfig"),Ikr.forEach(t),Oqe=r(c9e," (SegFormer model)"),c9e.forEach(t),Gqe=i(T),eg=n(T,"LI",{});var f9e=s(eg);SH=n(f9e,"STRONG",{});var jkr=s(SH);Xqe=r(jkr,"sew"),jkr.forEach(t),Vqe=r(f9e," \u2014 "),tB=n(f9e,"A",{href:!0});var Dkr=s(tB);zqe=r(Dkr,"SEWConfig"),Dkr.forEach(t),Wqe=r(f9e," (SEW model)"),f9e.forEach(t),Qqe=i(T),og=n(T,"LI",{});var m9e=s(og);PH=n(m9e,"STRONG",{});var Nkr=s(PH);Hqe=r(Nkr,"sew-d"),Nkr.forEach(t),Uqe=r(m9e," \u2014 "),aB=n(m9e,"A",{href:!0});var qkr=s(aB);Jqe=r(qkr,"SEWDConfig"),qkr.forEach(t),Yqe=r(m9e," (SEW-D model)"),m9e.forEach(t),Kqe=i(T),rg=n(T,"LI",{});var g9e=s(rg);$H=n(g9e,"STRONG",{});var Okr=s($H);Zqe=r(Okr,"speech-encoder-decoder"),Okr.forEach(t),eOe=r(g9e," \u2014 "),nB=n(g9e,"A",{href:!0});var Gkr=s(nB);oOe=r(Gkr,"SpeechEncoderDecoderConfig"),Gkr.forEach(t),rOe=r(g9e," (Speech Encoder decoder model)"),g9e.forEach(t),tOe=i(T),tg=n(T,"LI",{});var h9e=s(tg);IH=n(h9e,"STRONG",{});var Xkr=s(IH);aOe=r(Xkr,"speech_to_text"),Xkr.forEach(t),nOe=r(h9e," \u2014 "),sB=n(h9e,"A",{href:!0});var Vkr=s(sB);sOe=r(Vkr,"Speech2TextConfig"),Vkr.forEach(t),lOe=r(h9e," (Speech2Text model)"),h9e.forEach(t),iOe=i(T),ag=n(T,"LI",{});var p9e=s(ag);jH=n(p9e,"STRONG",{});var zkr=s(jH);dOe=r(zkr,"speech_to_text_2"),zkr.forEach(t),cOe=r(p9e," \u2014 "),lB=n(p9e,"A",{href:!0});var Wkr=s(lB);fOe=r(Wkr,"Speech2Text2Config"),Wkr.forEach(t),mOe=r(p9e," (Speech2Text2 model)"),p9e.forEach(t),gOe=i(T),ng=n(T,"LI",{});var _9e=s(ng);DH=n(_9e,"STRONG",{});var Qkr=s(DH);hOe=r(Qkr,"splinter"),Qkr.forEach(t),pOe=r(_9e," \u2014 "),iB=n(_9e,"A",{href:!0});var Hkr=s(iB);_Oe=r(Hkr,"SplinterConfig"),Hkr.forEach(t),uOe=r(_9e," (Splinter model)"),_9e.forEach(t),bOe=i(T),sg=n(T,"LI",{});var u9e=s(sg);NH=n(u9e,"STRONG",{});var Ukr=s(NH);vOe=r(Ukr,"squeezebert"),Ukr.forEach(t),TOe=r(u9e," \u2014 "),dB=n(u9e,"A",{href:!0});var Jkr=s(dB);FOe=r(Jkr,"SqueezeBertConfig"),Jkr.forEach(t),COe=r(u9e," (SqueezeBERT model)"),u9e.forEach(t),MOe=i(T),lg=n(T,"LI",{});var b9e=s(lg);qH=n(b9e,"STRONG",{});var Ykr=s(qH);EOe=r(Ykr,"swin"),Ykr.forEach(t),yOe=r(b9e," \u2014 "),cB=n(b9e,"A",{href:!0});var Kkr=s(cB);wOe=r(Kkr,"SwinConfig"),Kkr.forEach(t),AOe=r(b9e," (Swin model)"),b9e.forEach(t),LOe=i(T),ig=n(T,"LI",{});var v9e=s(ig);OH=n(v9e,"STRONG",{});var Zkr=s(OH);BOe=r(Zkr,"t5"),Zkr.forEach(t),xOe=r(v9e," \u2014 "),fB=n(v9e,"A",{href:!0});var eRr=s(fB);kOe=r(eRr,"T5Config"),eRr.forEach(t),ROe=r(v9e," (T5 model)"),v9e.forEach(t),SOe=i(T),dg=n(T,"LI",{});var T9e=s(dg);GH=n(T9e,"STRONG",{});var oRr=s(GH);POe=r(oRr,"tapas"),oRr.forEach(t),$Oe=r(T9e," \u2014 "),mB=n(T9e,"A",{href:!0});var rRr=s(mB);IOe=r(rRr,"TapasConfig"),rRr.forEach(t),jOe=r(T9e," (TAPAS model)"),T9e.forEach(t),DOe=i(T),cg=n(T,"LI",{});var F9e=s(cg);XH=n(F9e,"STRONG",{});var tRr=s(XH);NOe=r(tRr,"transfo-xl"),tRr.forEach(t),qOe=r(F9e," \u2014 "),gB=n(F9e,"A",{href:!0});var aRr=s(gB);OOe=r(aRr,"TransfoXLConfig"),aRr.forEach(t),GOe=r(F9e," (Transformer-XL model)"),F9e.forEach(t),XOe=i(T),fg=n(T,"LI",{});var C9e=s(fg);VH=n(C9e,"STRONG",{});var nRr=s(VH);VOe=r(nRr,"trocr"),nRr.forEach(t),zOe=r(C9e," \u2014 "),hB=n(C9e,"A",{href:!0});var sRr=s(hB);WOe=r(sRr,"TrOCRConfig"),sRr.forEach(t),QOe=r(C9e," (TrOCR model)"),C9e.forEach(t),HOe=i(T),mg=n(T,"LI",{});var M9e=s(mg);zH=n(M9e,"STRONG",{});var lRr=s(zH);UOe=r(lRr,"unispeech"),lRr.forEach(t),JOe=r(M9e," \u2014 "),pB=n(M9e,"A",{href:!0});var iRr=s(pB);YOe=r(iRr,"UniSpeechConfig"),iRr.forEach(t),KOe=r(M9e," (UniSpeech model)"),M9e.forEach(t),ZOe=i(T),gg=n(T,"LI",{});var E9e=s(gg);WH=n(E9e,"STRONG",{});var dRr=s(WH);eGe=r(dRr,"unispeech-sat"),dRr.forEach(t),oGe=r(E9e," \u2014 "),_B=n(E9e,"A",{href:!0});var cRr=s(_B);rGe=r(cRr,"UniSpeechSatConfig"),cRr.forEach(t),tGe=r(E9e," (UniSpeechSat model)"),E9e.forEach(t),aGe=i(T),hg=n(T,"LI",{});var y9e=s(hg);QH=n(y9e,"STRONG",{});var fRr=s(QH);nGe=r(fRr,"vilt"),fRr.forEach(t),sGe=r(y9e," \u2014 "),uB=n(y9e,"A",{href:!0});var mRr=s(uB);lGe=r(mRr,"ViltConfig"),mRr.forEach(t),iGe=r(y9e," (ViLT model)"),y9e.forEach(t),dGe=i(T),pg=n(T,"LI",{});var w9e=s(pg);HH=n(w9e,"STRONG",{});var gRr=s(HH);cGe=r(gRr,"vision-encoder-decoder"),gRr.forEach(t),fGe=r(w9e," \u2014 "),bB=n(w9e,"A",{href:!0});var hRr=s(bB);mGe=r(hRr,"VisionEncoderDecoderConfig"),hRr.forEach(t),gGe=r(w9e," (Vision Encoder decoder model)"),w9e.forEach(t),hGe=i(T),_g=n(T,"LI",{});var A9e=s(_g);UH=n(A9e,"STRONG",{});var pRr=s(UH);pGe=r(pRr,"vision-text-dual-encoder"),pRr.forEach(t),_Ge=r(A9e," \u2014 "),vB=n(A9e,"A",{href:!0});var _Rr=s(vB);uGe=r(_Rr,"VisionTextDualEncoderConfig"),_Rr.forEach(t),bGe=r(A9e," (VisionTextDualEncoder model)"),A9e.forEach(t),vGe=i(T),ug=n(T,"LI",{});var L9e=s(ug);JH=n(L9e,"STRONG",{});var uRr=s(JH);TGe=r(uRr,"visual_bert"),uRr.forEach(t),FGe=r(L9e," \u2014 "),TB=n(L9e,"A",{href:!0});var bRr=s(TB);CGe=r(bRr,"VisualBertConfig"),bRr.forEach(t),MGe=r(L9e," (VisualBert model)"),L9e.forEach(t),EGe=i(T),bg=n(T,"LI",{});var B9e=s(bg);YH=n(B9e,"STRONG",{});var vRr=s(YH);yGe=r(vRr,"vit"),vRr.forEach(t),wGe=r(B9e," \u2014 "),FB=n(B9e,"A",{href:!0});var TRr=s(FB);AGe=r(TRr,"ViTConfig"),TRr.forEach(t),LGe=r(B9e," (ViT model)"),B9e.forEach(t),BGe=i(T),vg=n(T,"LI",{});var x9e=s(vg);KH=n(x9e,"STRONG",{});var FRr=s(KH);xGe=r(FRr,"vit_mae"),FRr.forEach(t),kGe=r(x9e," \u2014 "),CB=n(x9e,"A",{href:!0});var CRr=s(CB);RGe=r(CRr,"ViTMAEConfig"),CRr.forEach(t),SGe=r(x9e," (ViTMAE model)"),x9e.forEach(t),PGe=i(T),Tg=n(T,"LI",{});var k9e=s(Tg);ZH=n(k9e,"STRONG",{});var MRr=s(ZH);$Ge=r(MRr,"wav2vec2"),MRr.forEach(t),IGe=r(k9e," \u2014 "),MB=n(k9e,"A",{href:!0});var ERr=s(MB);jGe=r(ERr,"Wav2Vec2Config"),ERr.forEach(t),DGe=r(k9e," (Wav2Vec2 model)"),k9e.forEach(t),NGe=i(T),Fg=n(T,"LI",{});var R9e=s(Fg);eU=n(R9e,"STRONG",{});var yRr=s(eU);qGe=r(yRr,"wavlm"),yRr.forEach(t),OGe=r(R9e," \u2014 "),EB=n(R9e,"A",{href:!0});var wRr=s(EB);GGe=r(wRr,"WavLMConfig"),wRr.forEach(t),XGe=r(R9e," (WavLM model)"),R9e.forEach(t),VGe=i(T),Cg=n(T,"LI",{});var S9e=s(Cg);oU=n(S9e,"STRONG",{});var ARr=s(oU);zGe=r(ARr,"xglm"),ARr.forEach(t),WGe=r(S9e," \u2014 "),yB=n(S9e,"A",{href:!0});var LRr=s(yB);QGe=r(LRr,"XGLMConfig"),LRr.forEach(t),HGe=r(S9e," (XGLM model)"),S9e.forEach(t),UGe=i(T),Mg=n(T,"LI",{});var P9e=s(Mg);rU=n(P9e,"STRONG",{});var BRr=s(rU);JGe=r(BRr,"xlm"),BRr.forEach(t),YGe=r(P9e," \u2014 "),wB=n(P9e,"A",{href:!0});var xRr=s(wB);KGe=r(xRr,"XLMConfig"),xRr.forEach(t),ZGe=r(P9e," (XLM model)"),P9e.forEach(t),eXe=i(T),Eg=n(T,"LI",{});var $9e=s(Eg);tU=n($9e,"STRONG",{});var kRr=s(tU);oXe=r(kRr,"xlm-prophetnet"),kRr.forEach(t),rXe=r($9e," \u2014 "),AB=n($9e,"A",{href:!0});var RRr=s(AB);tXe=r(RRr,"XLMProphetNetConfig"),RRr.forEach(t),aXe=r($9e," (XLMProphetNet model)"),$9e.forEach(t),nXe=i(T),yg=n(T,"LI",{});var I9e=s(yg);aU=n(I9e,"STRONG",{});var SRr=s(aU);sXe=r(SRr,"xlm-roberta"),SRr.forEach(t),lXe=r(I9e," \u2014 "),LB=n(I9e,"A",{href:!0});var PRr=s(LB);iXe=r(PRr,"XLMRobertaConfig"),PRr.forEach(t),dXe=r(I9e," (XLM-RoBERTa model)"),I9e.forEach(t),cXe=i(T),wg=n(T,"LI",{});var j9e=s(wg);nU=n(j9e,"STRONG",{});var $Rr=s(nU);fXe=r($Rr,"xlm-roberta-xl"),$Rr.forEach(t),mXe=r(j9e," \u2014 "),BB=n(j9e,"A",{href:!0});var IRr=s(BB);gXe=r(IRr,"XLMRobertaXLConfig"),IRr.forEach(t),hXe=r(j9e," (XLM-RoBERTa-XL model)"),j9e.forEach(t),pXe=i(T),Ag=n(T,"LI",{});var D9e=s(Ag);sU=n(D9e,"STRONG",{});var jRr=s(sU);_Xe=r(jRr,"xlnet"),jRr.forEach(t),uXe=r(D9e," \u2014 "),xB=n(D9e,"A",{href:!0});var DRr=s(xB);bXe=r(DRr,"XLNetConfig"),DRr.forEach(t),vXe=r(D9e," (XLNet model)"),D9e.forEach(t),TXe=i(T),Lg=n(T,"LI",{});var N9e=s(Lg);lU=n(N9e,"STRONG",{});var NRr=s(lU);FXe=r(NRr,"yoso"),NRr.forEach(t),CXe=r(N9e," \u2014 "),kB=n(N9e,"A",{href:!0});var qRr=s(kB);MXe=r(qRr,"YosoConfig"),qRr.forEach(t),EXe=r(N9e," (YOSO model)"),N9e.forEach(t),T.forEach(t),yXe=i(ma),iU=n(ma,"P",{});var ORr=s(iU);wXe=r(ORr,"Examples:"),ORr.forEach(t),AXe=i(ma),m(r3.$$.fragment,ma),ma.forEach(t),LXe=i(Xs),Bg=n(Xs,"DIV",{class:!0});var iRe=s(Bg);m(t3.$$.fragment,iRe),BXe=i(iRe),dU=n(iRe,"P",{});var GRr=s(dU);xXe=r(GRr,"Register a new configuration for this class."),GRr.forEach(t),iRe.forEach(t),Xs.forEach(t),sxe=i(d),Qi=n(d,"H2",{class:!0});var dRe=s(Qi);xg=n(dRe,"A",{id:!0,class:!0,href:!0});var XRr=s(xg);cU=n(XRr,"SPAN",{});var VRr=s(cU);m(a3.$$.fragment,VRr),VRr.forEach(t),XRr.forEach(t),kXe=i(dRe),fU=n(dRe,"SPAN",{});var zRr=s(fU);RXe=r(zRr,"AutoTokenizer"),zRr.forEach(t),dRe.forEach(t),lxe=i(d),Qo=n(d,"DIV",{class:!0});var Vs=s(Qo);m(n3.$$.fragment,Vs),SXe=i(Vs),s3=n(Vs,"P",{});var cRe=s(s3);PXe=r(cRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),RB=n(cRe,"A",{href:!0});var WRr=s(RB);$Xe=r(WRr,"AutoTokenizer.from_pretrained()"),WRr.forEach(t),IXe=r(cRe," class method."),cRe.forEach(t),jXe=i(Vs),l3=n(Vs,"P",{});var fRe=s(l3);DXe=r(fRe,"This class cannot be instantiated directly using "),mU=n(fRe,"CODE",{});var QRr=s(mU);NXe=r(QRr,"__init__()"),QRr.forEach(t),qXe=r(fRe," (throws an error)."),fRe.forEach(t),OXe=i(Vs),go=n(Vs,"DIV",{class:!0});var ga=s(go);m(i3.$$.fragment,ga),GXe=i(ga),gU=n(ga,"P",{});var HRr=s(gU);XXe=r(HRr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HRr.forEach(t),VXe=i(ga),Oa=n(ga,"P",{});var W4=s(Oa);zXe=r(W4,"The tokenizer class to instantiate is selected based on the "),hU=n(W4,"CODE",{});var URr=s(hU);WXe=r(URr,"model_type"),URr.forEach(t),QXe=r(W4,` property of the config object (either
passed as an argument or loaded from `),pU=n(W4,"CODE",{});var JRr=s(pU);HXe=r(JRr,"pretrained_model_name_or_path"),JRr.forEach(t),UXe=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_U=n(W4,"CODE",{});var YRr=s(_U);JXe=r(YRr,"pretrained_model_name_or_path"),YRr.forEach(t),YXe=r(W4,":"),W4.forEach(t),KXe=i(ga),E=n(ga,"UL",{});var y=s(E);Wn=n(y,"LI",{});var GL=s(Wn);uU=n(GL,"STRONG",{});var KRr=s(uU);ZXe=r(KRr,"albert"),KRr.forEach(t),eVe=r(GL," \u2014 "),SB=n(GL,"A",{href:!0});var ZRr=s(SB);oVe=r(ZRr,"AlbertTokenizer"),ZRr.forEach(t),rVe=r(GL," or "),PB=n(GL,"A",{href:!0});var eSr=s(PB);tVe=r(eSr,"AlbertTokenizerFast"),eSr.forEach(t),aVe=r(GL," (ALBERT model)"),GL.forEach(t),nVe=i(y),Qn=n(y,"LI",{});var XL=s(Qn);bU=n(XL,"STRONG",{});var oSr=s(bU);sVe=r(oSr,"bart"),oSr.forEach(t),lVe=r(XL," \u2014 "),$B=n(XL,"A",{href:!0});var rSr=s($B);iVe=r(rSr,"BartTokenizer"),rSr.forEach(t),dVe=r(XL," or "),IB=n(XL,"A",{href:!0});var tSr=s(IB);cVe=r(tSr,"BartTokenizerFast"),tSr.forEach(t),fVe=r(XL," (BART model)"),XL.forEach(t),mVe=i(y),Hn=n(y,"LI",{});var VL=s(Hn);vU=n(VL,"STRONG",{});var aSr=s(vU);gVe=r(aSr,"barthez"),aSr.forEach(t),hVe=r(VL," \u2014 "),jB=n(VL,"A",{href:!0});var nSr=s(jB);pVe=r(nSr,"BarthezTokenizer"),nSr.forEach(t),_Ve=r(VL," or "),DB=n(VL,"A",{href:!0});var sSr=s(DB);uVe=r(sSr,"BarthezTokenizerFast"),sSr.forEach(t),bVe=r(VL," (BARThez model)"),VL.forEach(t),vVe=i(y),kg=n(y,"LI",{});var q9e=s(kg);TU=n(q9e,"STRONG",{});var lSr=s(TU);TVe=r(lSr,"bartpho"),lSr.forEach(t),FVe=r(q9e," \u2014 "),NB=n(q9e,"A",{href:!0});var iSr=s(NB);CVe=r(iSr,"BartphoTokenizer"),iSr.forEach(t),MVe=r(q9e," (BARTpho model)"),q9e.forEach(t),EVe=i(y),Un=n(y,"LI",{});var zL=s(Un);FU=n(zL,"STRONG",{});var dSr=s(FU);yVe=r(dSr,"bert"),dSr.forEach(t),wVe=r(zL," \u2014 "),qB=n(zL,"A",{href:!0});var cSr=s(qB);AVe=r(cSr,"BertTokenizer"),cSr.forEach(t),LVe=r(zL," or "),OB=n(zL,"A",{href:!0});var fSr=s(OB);BVe=r(fSr,"BertTokenizerFast"),fSr.forEach(t),xVe=r(zL," (BERT model)"),zL.forEach(t),kVe=i(y),Rg=n(y,"LI",{});var O9e=s(Rg);CU=n(O9e,"STRONG",{});var mSr=s(CU);RVe=r(mSr,"bert-generation"),mSr.forEach(t),SVe=r(O9e," \u2014 "),GB=n(O9e,"A",{href:!0});var gSr=s(GB);PVe=r(gSr,"BertGenerationTokenizer"),gSr.forEach(t),$Ve=r(O9e," (Bert Generation model)"),O9e.forEach(t),IVe=i(y),Sg=n(y,"LI",{});var G9e=s(Sg);MU=n(G9e,"STRONG",{});var hSr=s(MU);jVe=r(hSr,"bert-japanese"),hSr.forEach(t),DVe=r(G9e," \u2014 "),XB=n(G9e,"A",{href:!0});var pSr=s(XB);NVe=r(pSr,"BertJapaneseTokenizer"),pSr.forEach(t),qVe=r(G9e," (BertJapanese model)"),G9e.forEach(t),OVe=i(y),Pg=n(y,"LI",{});var X9e=s(Pg);EU=n(X9e,"STRONG",{});var _Sr=s(EU);GVe=r(_Sr,"bertweet"),_Sr.forEach(t),XVe=r(X9e," \u2014 "),VB=n(X9e,"A",{href:!0});var uSr=s(VB);VVe=r(uSr,"BertweetTokenizer"),uSr.forEach(t),zVe=r(X9e," (Bertweet model)"),X9e.forEach(t),WVe=i(y),Jn=n(y,"LI",{});var WL=s(Jn);yU=n(WL,"STRONG",{});var bSr=s(yU);QVe=r(bSr,"big_bird"),bSr.forEach(t),HVe=r(WL," \u2014 "),zB=n(WL,"A",{href:!0});var vSr=s(zB);UVe=r(vSr,"BigBirdTokenizer"),vSr.forEach(t),JVe=r(WL," or "),WB=n(WL,"A",{href:!0});var TSr=s(WB);YVe=r(TSr,"BigBirdTokenizerFast"),TSr.forEach(t),KVe=r(WL," (BigBird model)"),WL.forEach(t),ZVe=i(y),Yn=n(y,"LI",{});var QL=s(Yn);wU=n(QL,"STRONG",{});var FSr=s(wU);eze=r(FSr,"bigbird_pegasus"),FSr.forEach(t),oze=r(QL," \u2014 "),QB=n(QL,"A",{href:!0});var CSr=s(QB);rze=r(CSr,"PegasusTokenizer"),CSr.forEach(t),tze=r(QL," or "),HB=n(QL,"A",{href:!0});var MSr=s(HB);aze=r(MSr,"PegasusTokenizerFast"),MSr.forEach(t),nze=r(QL," (BigBirdPegasus model)"),QL.forEach(t),sze=i(y),Kn=n(y,"LI",{});var HL=s(Kn);AU=n(HL,"STRONG",{});var ESr=s(AU);lze=r(ESr,"blenderbot"),ESr.forEach(t),ize=r(HL," \u2014 "),UB=n(HL,"A",{href:!0});var ySr=s(UB);dze=r(ySr,"BlenderbotTokenizer"),ySr.forEach(t),cze=r(HL," or "),JB=n(HL,"A",{href:!0});var wSr=s(JB);fze=r(wSr,"BlenderbotTokenizerFast"),wSr.forEach(t),mze=r(HL," (Blenderbot model)"),HL.forEach(t),gze=i(y),$g=n(y,"LI",{});var V9e=s($g);LU=n(V9e,"STRONG",{});var ASr=s(LU);hze=r(ASr,"blenderbot-small"),ASr.forEach(t),pze=r(V9e," \u2014 "),YB=n(V9e,"A",{href:!0});var LSr=s(YB);_ze=r(LSr,"BlenderbotSmallTokenizer"),LSr.forEach(t),uze=r(V9e," (BlenderbotSmall model)"),V9e.forEach(t),bze=i(y),Ig=n(y,"LI",{});var z9e=s(Ig);BU=n(z9e,"STRONG",{});var BSr=s(BU);vze=r(BSr,"byt5"),BSr.forEach(t),Tze=r(z9e," \u2014 "),KB=n(z9e,"A",{href:!0});var xSr=s(KB);Fze=r(xSr,"ByT5Tokenizer"),xSr.forEach(t),Cze=r(z9e," (ByT5 model)"),z9e.forEach(t),Mze=i(y),Zn=n(y,"LI",{});var UL=s(Zn);xU=n(UL,"STRONG",{});var kSr=s(xU);Eze=r(kSr,"camembert"),kSr.forEach(t),yze=r(UL," \u2014 "),ZB=n(UL,"A",{href:!0});var RSr=s(ZB);wze=r(RSr,"CamembertTokenizer"),RSr.forEach(t),Aze=r(UL," or "),ex=n(UL,"A",{href:!0});var SSr=s(ex);Lze=r(SSr,"CamembertTokenizerFast"),SSr.forEach(t),Bze=r(UL," (CamemBERT model)"),UL.forEach(t),xze=i(y),jg=n(y,"LI",{});var W9e=s(jg);kU=n(W9e,"STRONG",{});var PSr=s(kU);kze=r(PSr,"canine"),PSr.forEach(t),Rze=r(W9e," \u2014 "),ox=n(W9e,"A",{href:!0});var $Sr=s(ox);Sze=r($Sr,"CanineTokenizer"),$Sr.forEach(t),Pze=r(W9e," (Canine model)"),W9e.forEach(t),$ze=i(y),es=n(y,"LI",{});var JL=s(es);RU=n(JL,"STRONG",{});var ISr=s(RU);Ize=r(ISr,"clip"),ISr.forEach(t),jze=r(JL," \u2014 "),rx=n(JL,"A",{href:!0});var jSr=s(rx);Dze=r(jSr,"CLIPTokenizer"),jSr.forEach(t),Nze=r(JL," or "),tx=n(JL,"A",{href:!0});var DSr=s(tx);qze=r(DSr,"CLIPTokenizerFast"),DSr.forEach(t),Oze=r(JL," (CLIP model)"),JL.forEach(t),Gze=i(y),os=n(y,"LI",{});var YL=s(os);SU=n(YL,"STRONG",{});var NSr=s(SU);Xze=r(NSr,"convbert"),NSr.forEach(t),Vze=r(YL," \u2014 "),ax=n(YL,"A",{href:!0});var qSr=s(ax);zze=r(qSr,"ConvBertTokenizer"),qSr.forEach(t),Wze=r(YL," or "),nx=n(YL,"A",{href:!0});var OSr=s(nx);Qze=r(OSr,"ConvBertTokenizerFast"),OSr.forEach(t),Hze=r(YL," (ConvBERT model)"),YL.forEach(t),Uze=i(y),rs=n(y,"LI",{});var KL=s(rs);PU=n(KL,"STRONG",{});var GSr=s(PU);Jze=r(GSr,"cpm"),GSr.forEach(t),Yze=r(KL," \u2014 "),sx=n(KL,"A",{href:!0});var XSr=s(sx);Kze=r(XSr,"CpmTokenizer"),XSr.forEach(t),Zze=r(KL," or "),$U=n(KL,"CODE",{});var VSr=s($U);eWe=r(VSr,"CpmTokenizerFast"),VSr.forEach(t),oWe=r(KL," (CPM model)"),KL.forEach(t),rWe=i(y),Dg=n(y,"LI",{});var Q9e=s(Dg);IU=n(Q9e,"STRONG",{});var zSr=s(IU);tWe=r(zSr,"ctrl"),zSr.forEach(t),aWe=r(Q9e," \u2014 "),lx=n(Q9e,"A",{href:!0});var WSr=s(lx);nWe=r(WSr,"CTRLTokenizer"),WSr.forEach(t),sWe=r(Q9e," (CTRL model)"),Q9e.forEach(t),lWe=i(y),ts=n(y,"LI",{});var ZL=s(ts);jU=n(ZL,"STRONG",{});var QSr=s(jU);iWe=r(QSr,"deberta"),QSr.forEach(t),dWe=r(ZL," \u2014 "),ix=n(ZL,"A",{href:!0});var HSr=s(ix);cWe=r(HSr,"DebertaTokenizer"),HSr.forEach(t),fWe=r(ZL," or "),dx=n(ZL,"A",{href:!0});var USr=s(dx);mWe=r(USr,"DebertaTokenizerFast"),USr.forEach(t),gWe=r(ZL," (DeBERTa model)"),ZL.forEach(t),hWe=i(y),as=n(y,"LI",{});var e8=s(as);DU=n(e8,"STRONG",{});var JSr=s(DU);pWe=r(JSr,"deberta-v2"),JSr.forEach(t),_We=r(e8," \u2014 "),cx=n(e8,"A",{href:!0});var YSr=s(cx);uWe=r(YSr,"DebertaV2Tokenizer"),YSr.forEach(t),bWe=r(e8," or "),fx=n(e8,"A",{href:!0});var KSr=s(fx);vWe=r(KSr,"DebertaV2TokenizerFast"),KSr.forEach(t),TWe=r(e8," (DeBERTa-v2 model)"),e8.forEach(t),FWe=i(y),ns=n(y,"LI",{});var o8=s(ns);NU=n(o8,"STRONG",{});var ZSr=s(NU);CWe=r(ZSr,"distilbert"),ZSr.forEach(t),MWe=r(o8," \u2014 "),mx=n(o8,"A",{href:!0});var ePr=s(mx);EWe=r(ePr,"DistilBertTokenizer"),ePr.forEach(t),yWe=r(o8," or "),gx=n(o8,"A",{href:!0});var oPr=s(gx);wWe=r(oPr,"DistilBertTokenizerFast"),oPr.forEach(t),AWe=r(o8," (DistilBERT model)"),o8.forEach(t),LWe=i(y),ss=n(y,"LI",{});var r8=s(ss);qU=n(r8,"STRONG",{});var rPr=s(qU);BWe=r(rPr,"dpr"),rPr.forEach(t),xWe=r(r8," \u2014 "),hx=n(r8,"A",{href:!0});var tPr=s(hx);kWe=r(tPr,"DPRQuestionEncoderTokenizer"),tPr.forEach(t),RWe=r(r8," or "),px=n(r8,"A",{href:!0});var aPr=s(px);SWe=r(aPr,"DPRQuestionEncoderTokenizerFast"),aPr.forEach(t),PWe=r(r8," (DPR model)"),r8.forEach(t),$We=i(y),ls=n(y,"LI",{});var t8=s(ls);OU=n(t8,"STRONG",{});var nPr=s(OU);IWe=r(nPr,"electra"),nPr.forEach(t),jWe=r(t8," \u2014 "),_x=n(t8,"A",{href:!0});var sPr=s(_x);DWe=r(sPr,"ElectraTokenizer"),sPr.forEach(t),NWe=r(t8," or "),ux=n(t8,"A",{href:!0});var lPr=s(ux);qWe=r(lPr,"ElectraTokenizerFast"),lPr.forEach(t),OWe=r(t8," (ELECTRA model)"),t8.forEach(t),GWe=i(y),Ng=n(y,"LI",{});var H9e=s(Ng);GU=n(H9e,"STRONG",{});var iPr=s(GU);XWe=r(iPr,"flaubert"),iPr.forEach(t),VWe=r(H9e," \u2014 "),bx=n(H9e,"A",{href:!0});var dPr=s(bx);zWe=r(dPr,"FlaubertTokenizer"),dPr.forEach(t),WWe=r(H9e," (FlauBERT model)"),H9e.forEach(t),QWe=i(y),is=n(y,"LI",{});var a8=s(is);XU=n(a8,"STRONG",{});var cPr=s(XU);HWe=r(cPr,"fnet"),cPr.forEach(t),UWe=r(a8," \u2014 "),vx=n(a8,"A",{href:!0});var fPr=s(vx);JWe=r(fPr,"FNetTokenizer"),fPr.forEach(t),YWe=r(a8," or "),Tx=n(a8,"A",{href:!0});var mPr=s(Tx);KWe=r(mPr,"FNetTokenizerFast"),mPr.forEach(t),ZWe=r(a8," (FNet model)"),a8.forEach(t),eQe=i(y),qg=n(y,"LI",{});var U9e=s(qg);VU=n(U9e,"STRONG",{});var gPr=s(VU);oQe=r(gPr,"fsmt"),gPr.forEach(t),rQe=r(U9e," \u2014 "),Fx=n(U9e,"A",{href:!0});var hPr=s(Fx);tQe=r(hPr,"FSMTTokenizer"),hPr.forEach(t),aQe=r(U9e," (FairSeq Machine-Translation model)"),U9e.forEach(t),nQe=i(y),ds=n(y,"LI",{});var n8=s(ds);zU=n(n8,"STRONG",{});var pPr=s(zU);sQe=r(pPr,"funnel"),pPr.forEach(t),lQe=r(n8," \u2014 "),Cx=n(n8,"A",{href:!0});var _Pr=s(Cx);iQe=r(_Pr,"FunnelTokenizer"),_Pr.forEach(t),dQe=r(n8," or "),Mx=n(n8,"A",{href:!0});var uPr=s(Mx);cQe=r(uPr,"FunnelTokenizerFast"),uPr.forEach(t),fQe=r(n8," (Funnel Transformer model)"),n8.forEach(t),mQe=i(y),cs=n(y,"LI",{});var s8=s(cs);WU=n(s8,"STRONG",{});var bPr=s(WU);gQe=r(bPr,"gpt2"),bPr.forEach(t),hQe=r(s8," \u2014 "),Ex=n(s8,"A",{href:!0});var vPr=s(Ex);pQe=r(vPr,"GPT2Tokenizer"),vPr.forEach(t),_Qe=r(s8," or "),yx=n(s8,"A",{href:!0});var TPr=s(yx);uQe=r(TPr,"GPT2TokenizerFast"),TPr.forEach(t),bQe=r(s8," (OpenAI GPT-2 model)"),s8.forEach(t),vQe=i(y),fs=n(y,"LI",{});var l8=s(fs);QU=n(l8,"STRONG",{});var FPr=s(QU);TQe=r(FPr,"gpt_neo"),FPr.forEach(t),FQe=r(l8," \u2014 "),wx=n(l8,"A",{href:!0});var CPr=s(wx);CQe=r(CPr,"GPT2Tokenizer"),CPr.forEach(t),MQe=r(l8," or "),Ax=n(l8,"A",{href:!0});var MPr=s(Ax);EQe=r(MPr,"GPT2TokenizerFast"),MPr.forEach(t),yQe=r(l8," (GPT Neo model)"),l8.forEach(t),wQe=i(y),ms=n(y,"LI",{});var i8=s(ms);HU=n(i8,"STRONG",{});var EPr=s(HU);AQe=r(EPr,"herbert"),EPr.forEach(t),LQe=r(i8," \u2014 "),Lx=n(i8,"A",{href:!0});var yPr=s(Lx);BQe=r(yPr,"HerbertTokenizer"),yPr.forEach(t),xQe=r(i8," or "),Bx=n(i8,"A",{href:!0});var wPr=s(Bx);kQe=r(wPr,"HerbertTokenizerFast"),wPr.forEach(t),RQe=r(i8," (HerBERT model)"),i8.forEach(t),SQe=i(y),Og=n(y,"LI",{});var J9e=s(Og);UU=n(J9e,"STRONG",{});var APr=s(UU);PQe=r(APr,"hubert"),APr.forEach(t),$Qe=r(J9e," \u2014 "),xx=n(J9e,"A",{href:!0});var LPr=s(xx);IQe=r(LPr,"Wav2Vec2CTCTokenizer"),LPr.forEach(t),jQe=r(J9e," (Hubert model)"),J9e.forEach(t),DQe=i(y),gs=n(y,"LI",{});var d8=s(gs);JU=n(d8,"STRONG",{});var BPr=s(JU);NQe=r(BPr,"ibert"),BPr.forEach(t),qQe=r(d8," \u2014 "),kx=n(d8,"A",{href:!0});var xPr=s(kx);OQe=r(xPr,"RobertaTokenizer"),xPr.forEach(t),GQe=r(d8," or "),Rx=n(d8,"A",{href:!0});var kPr=s(Rx);XQe=r(kPr,"RobertaTokenizerFast"),kPr.forEach(t),VQe=r(d8," (I-BERT model)"),d8.forEach(t),zQe=i(y),hs=n(y,"LI",{});var c8=s(hs);YU=n(c8,"STRONG",{});var RPr=s(YU);WQe=r(RPr,"layoutlm"),RPr.forEach(t),QQe=r(c8," \u2014 "),Sx=n(c8,"A",{href:!0});var SPr=s(Sx);HQe=r(SPr,"LayoutLMTokenizer"),SPr.forEach(t),UQe=r(c8," or "),Px=n(c8,"A",{href:!0});var PPr=s(Px);JQe=r(PPr,"LayoutLMTokenizerFast"),PPr.forEach(t),YQe=r(c8," (LayoutLM model)"),c8.forEach(t),KQe=i(y),ps=n(y,"LI",{});var f8=s(ps);KU=n(f8,"STRONG",{});var $Pr=s(KU);ZQe=r($Pr,"layoutlmv2"),$Pr.forEach(t),eHe=r(f8," \u2014 "),$x=n(f8,"A",{href:!0});var IPr=s($x);oHe=r(IPr,"LayoutLMv2Tokenizer"),IPr.forEach(t),rHe=r(f8," or "),Ix=n(f8,"A",{href:!0});var jPr=s(Ix);tHe=r(jPr,"LayoutLMv2TokenizerFast"),jPr.forEach(t),aHe=r(f8," (LayoutLMv2 model)"),f8.forEach(t),nHe=i(y),_s=n(y,"LI",{});var m8=s(_s);ZU=n(m8,"STRONG",{});var DPr=s(ZU);sHe=r(DPr,"layoutxlm"),DPr.forEach(t),lHe=r(m8," \u2014 "),jx=n(m8,"A",{href:!0});var NPr=s(jx);iHe=r(NPr,"LayoutXLMTokenizer"),NPr.forEach(t),dHe=r(m8," or "),Dx=n(m8,"A",{href:!0});var qPr=s(Dx);cHe=r(qPr,"LayoutXLMTokenizerFast"),qPr.forEach(t),fHe=r(m8," (LayoutXLM model)"),m8.forEach(t),mHe=i(y),us=n(y,"LI",{});var g8=s(us);eJ=n(g8,"STRONG",{});var OPr=s(eJ);gHe=r(OPr,"led"),OPr.forEach(t),hHe=r(g8," \u2014 "),Nx=n(g8,"A",{href:!0});var GPr=s(Nx);pHe=r(GPr,"LEDTokenizer"),GPr.forEach(t),_He=r(g8," or "),qx=n(g8,"A",{href:!0});var XPr=s(qx);uHe=r(XPr,"LEDTokenizerFast"),XPr.forEach(t),bHe=r(g8," (LED model)"),g8.forEach(t),vHe=i(y),bs=n(y,"LI",{});var h8=s(bs);oJ=n(h8,"STRONG",{});var VPr=s(oJ);THe=r(VPr,"longformer"),VPr.forEach(t),FHe=r(h8," \u2014 "),Ox=n(h8,"A",{href:!0});var zPr=s(Ox);CHe=r(zPr,"LongformerTokenizer"),zPr.forEach(t),MHe=r(h8," or "),Gx=n(h8,"A",{href:!0});var WPr=s(Gx);EHe=r(WPr,"LongformerTokenizerFast"),WPr.forEach(t),yHe=r(h8," (Longformer model)"),h8.forEach(t),wHe=i(y),Gg=n(y,"LI",{});var Y9e=s(Gg);rJ=n(Y9e,"STRONG",{});var QPr=s(rJ);AHe=r(QPr,"luke"),QPr.forEach(t),LHe=r(Y9e," \u2014 "),Xx=n(Y9e,"A",{href:!0});var HPr=s(Xx);BHe=r(HPr,"LukeTokenizer"),HPr.forEach(t),xHe=r(Y9e," (LUKE model)"),Y9e.forEach(t),kHe=i(y),vs=n(y,"LI",{});var p8=s(vs);tJ=n(p8,"STRONG",{});var UPr=s(tJ);RHe=r(UPr,"lxmert"),UPr.forEach(t),SHe=r(p8," \u2014 "),Vx=n(p8,"A",{href:!0});var JPr=s(Vx);PHe=r(JPr,"LxmertTokenizer"),JPr.forEach(t),$He=r(p8," or "),zx=n(p8,"A",{href:!0});var YPr=s(zx);IHe=r(YPr,"LxmertTokenizerFast"),YPr.forEach(t),jHe=r(p8," (LXMERT model)"),p8.forEach(t),DHe=i(y),Xg=n(y,"LI",{});var K9e=s(Xg);aJ=n(K9e,"STRONG",{});var KPr=s(aJ);NHe=r(KPr,"m2m_100"),KPr.forEach(t),qHe=r(K9e," \u2014 "),Wx=n(K9e,"A",{href:!0});var ZPr=s(Wx);OHe=r(ZPr,"M2M100Tokenizer"),ZPr.forEach(t),GHe=r(K9e," (M2M100 model)"),K9e.forEach(t),XHe=i(y),Vg=n(y,"LI",{});var Z9e=s(Vg);nJ=n(Z9e,"STRONG",{});var e$r=s(nJ);VHe=r(e$r,"marian"),e$r.forEach(t),zHe=r(Z9e," \u2014 "),Qx=n(Z9e,"A",{href:!0});var o$r=s(Qx);WHe=r(o$r,"MarianTokenizer"),o$r.forEach(t),QHe=r(Z9e," (Marian model)"),Z9e.forEach(t),HHe=i(y),Ts=n(y,"LI",{});var _8=s(Ts);sJ=n(_8,"STRONG",{});var r$r=s(sJ);UHe=r(r$r,"mbart"),r$r.forEach(t),JHe=r(_8," \u2014 "),Hx=n(_8,"A",{href:!0});var t$r=s(Hx);YHe=r(t$r,"MBartTokenizer"),t$r.forEach(t),KHe=r(_8," or "),Ux=n(_8,"A",{href:!0});var a$r=s(Ux);ZHe=r(a$r,"MBartTokenizerFast"),a$r.forEach(t),eUe=r(_8," (mBART model)"),_8.forEach(t),oUe=i(y),Fs=n(y,"LI",{});var u8=s(Fs);lJ=n(u8,"STRONG",{});var n$r=s(lJ);rUe=r(n$r,"mbart50"),n$r.forEach(t),tUe=r(u8," \u2014 "),Jx=n(u8,"A",{href:!0});var s$r=s(Jx);aUe=r(s$r,"MBart50Tokenizer"),s$r.forEach(t),nUe=r(u8," or "),Yx=n(u8,"A",{href:!0});var l$r=s(Yx);sUe=r(l$r,"MBart50TokenizerFast"),l$r.forEach(t),lUe=r(u8," (mBART-50 model)"),u8.forEach(t),iUe=i(y),zg=n(y,"LI",{});var eCe=s(zg);iJ=n(eCe,"STRONG",{});var i$r=s(iJ);dUe=r(i$r,"mluke"),i$r.forEach(t),cUe=r(eCe," \u2014 "),Kx=n(eCe,"A",{href:!0});var d$r=s(Kx);fUe=r(d$r,"MLukeTokenizer"),d$r.forEach(t),mUe=r(eCe," (mLUKE model)"),eCe.forEach(t),gUe=i(y),Cs=n(y,"LI",{});var b8=s(Cs);dJ=n(b8,"STRONG",{});var c$r=s(dJ);hUe=r(c$r,"mobilebert"),c$r.forEach(t),pUe=r(b8," \u2014 "),Zx=n(b8,"A",{href:!0});var f$r=s(Zx);_Ue=r(f$r,"MobileBertTokenizer"),f$r.forEach(t),uUe=r(b8," or "),ek=n(b8,"A",{href:!0});var m$r=s(ek);bUe=r(m$r,"MobileBertTokenizerFast"),m$r.forEach(t),vUe=r(b8," (MobileBERT model)"),b8.forEach(t),TUe=i(y),Ms=n(y,"LI",{});var v8=s(Ms);cJ=n(v8,"STRONG",{});var g$r=s(cJ);FUe=r(g$r,"mpnet"),g$r.forEach(t),CUe=r(v8," \u2014 "),ok=n(v8,"A",{href:!0});var h$r=s(ok);MUe=r(h$r,"MPNetTokenizer"),h$r.forEach(t),EUe=r(v8," or "),rk=n(v8,"A",{href:!0});var p$r=s(rk);yUe=r(p$r,"MPNetTokenizerFast"),p$r.forEach(t),wUe=r(v8," (MPNet model)"),v8.forEach(t),AUe=i(y),Es=n(y,"LI",{});var T8=s(Es);fJ=n(T8,"STRONG",{});var _$r=s(fJ);LUe=r(_$r,"mt5"),_$r.forEach(t),BUe=r(T8," \u2014 "),tk=n(T8,"A",{href:!0});var u$r=s(tk);xUe=r(u$r,"MT5Tokenizer"),u$r.forEach(t),kUe=r(T8," or "),ak=n(T8,"A",{href:!0});var b$r=s(ak);RUe=r(b$r,"MT5TokenizerFast"),b$r.forEach(t),SUe=r(T8," (mT5 model)"),T8.forEach(t),PUe=i(y),ys=n(y,"LI",{});var F8=s(ys);mJ=n(F8,"STRONG",{});var v$r=s(mJ);$Ue=r(v$r,"openai-gpt"),v$r.forEach(t),IUe=r(F8," \u2014 "),nk=n(F8,"A",{href:!0});var T$r=s(nk);jUe=r(T$r,"OpenAIGPTTokenizer"),T$r.forEach(t),DUe=r(F8," or "),sk=n(F8,"A",{href:!0});var F$r=s(sk);NUe=r(F$r,"OpenAIGPTTokenizerFast"),F$r.forEach(t),qUe=r(F8," (OpenAI GPT model)"),F8.forEach(t),OUe=i(y),ws=n(y,"LI",{});var C8=s(ws);gJ=n(C8,"STRONG",{});var C$r=s(gJ);GUe=r(C$r,"pegasus"),C$r.forEach(t),XUe=r(C8," \u2014 "),lk=n(C8,"A",{href:!0});var M$r=s(lk);VUe=r(M$r,"PegasusTokenizer"),M$r.forEach(t),zUe=r(C8," or "),ik=n(C8,"A",{href:!0});var E$r=s(ik);WUe=r(E$r,"PegasusTokenizerFast"),E$r.forEach(t),QUe=r(C8," (Pegasus model)"),C8.forEach(t),HUe=i(y),Wg=n(y,"LI",{});var oCe=s(Wg);hJ=n(oCe,"STRONG",{});var y$r=s(hJ);UUe=r(y$r,"perceiver"),y$r.forEach(t),JUe=r(oCe," \u2014 "),dk=n(oCe,"A",{href:!0});var w$r=s(dk);YUe=r(w$r,"PerceiverTokenizer"),w$r.forEach(t),KUe=r(oCe," (Perceiver model)"),oCe.forEach(t),ZUe=i(y),Qg=n(y,"LI",{});var rCe=s(Qg);pJ=n(rCe,"STRONG",{});var A$r=s(pJ);eJe=r(A$r,"phobert"),A$r.forEach(t),oJe=r(rCe," \u2014 "),ck=n(rCe,"A",{href:!0});var L$r=s(ck);rJe=r(L$r,"PhobertTokenizer"),L$r.forEach(t),tJe=r(rCe," (PhoBERT model)"),rCe.forEach(t),aJe=i(y),Hg=n(y,"LI",{});var tCe=s(Hg);_J=n(tCe,"STRONG",{});var B$r=s(_J);nJe=r(B$r,"plbart"),B$r.forEach(t),sJe=r(tCe," \u2014 "),fk=n(tCe,"A",{href:!0});var x$r=s(fk);lJe=r(x$r,"PLBartTokenizer"),x$r.forEach(t),iJe=r(tCe," (PLBart model)"),tCe.forEach(t),dJe=i(y),Ug=n(y,"LI",{});var aCe=s(Ug);uJ=n(aCe,"STRONG",{});var k$r=s(uJ);cJe=r(k$r,"prophetnet"),k$r.forEach(t),fJe=r(aCe," \u2014 "),mk=n(aCe,"A",{href:!0});var R$r=s(mk);mJe=r(R$r,"ProphetNetTokenizer"),R$r.forEach(t),gJe=r(aCe," (ProphetNet model)"),aCe.forEach(t),hJe=i(y),As=n(y,"LI",{});var M8=s(As);bJ=n(M8,"STRONG",{});var S$r=s(bJ);pJe=r(S$r,"qdqbert"),S$r.forEach(t),_Je=r(M8," \u2014 "),gk=n(M8,"A",{href:!0});var P$r=s(gk);uJe=r(P$r,"BertTokenizer"),P$r.forEach(t),bJe=r(M8," or "),hk=n(M8,"A",{href:!0});var $$r=s(hk);vJe=r($$r,"BertTokenizerFast"),$$r.forEach(t),TJe=r(M8," (QDQBert model)"),M8.forEach(t),FJe=i(y),Jg=n(y,"LI",{});var nCe=s(Jg);vJ=n(nCe,"STRONG",{});var I$r=s(vJ);CJe=r(I$r,"rag"),I$r.forEach(t),MJe=r(nCe," \u2014 "),pk=n(nCe,"A",{href:!0});var j$r=s(pk);EJe=r(j$r,"RagTokenizer"),j$r.forEach(t),yJe=r(nCe," (RAG model)"),nCe.forEach(t),wJe=i(y),Ls=n(y,"LI",{});var E8=s(Ls);TJ=n(E8,"STRONG",{});var D$r=s(TJ);AJe=r(D$r,"realm"),D$r.forEach(t),LJe=r(E8," \u2014 "),_k=n(E8,"A",{href:!0});var N$r=s(_k);BJe=r(N$r,"RealmTokenizer"),N$r.forEach(t),xJe=r(E8," or "),uk=n(E8,"A",{href:!0});var q$r=s(uk);kJe=r(q$r,"RealmTokenizerFast"),q$r.forEach(t),RJe=r(E8," (Realm model)"),E8.forEach(t),SJe=i(y),Bs=n(y,"LI",{});var y8=s(Bs);FJ=n(y8,"STRONG",{});var O$r=s(FJ);PJe=r(O$r,"reformer"),O$r.forEach(t),$Je=r(y8," \u2014 "),bk=n(y8,"A",{href:!0});var G$r=s(bk);IJe=r(G$r,"ReformerTokenizer"),G$r.forEach(t),jJe=r(y8," or "),vk=n(y8,"A",{href:!0});var X$r=s(vk);DJe=r(X$r,"ReformerTokenizerFast"),X$r.forEach(t),NJe=r(y8," (Reformer model)"),y8.forEach(t),qJe=i(y),xs=n(y,"LI",{});var w8=s(xs);CJ=n(w8,"STRONG",{});var V$r=s(CJ);OJe=r(V$r,"rembert"),V$r.forEach(t),GJe=r(w8," \u2014 "),Tk=n(w8,"A",{href:!0});var z$r=s(Tk);XJe=r(z$r,"RemBertTokenizer"),z$r.forEach(t),VJe=r(w8," or "),Fk=n(w8,"A",{href:!0});var W$r=s(Fk);zJe=r(W$r,"RemBertTokenizerFast"),W$r.forEach(t),WJe=r(w8," (RemBERT model)"),w8.forEach(t),QJe=i(y),ks=n(y,"LI",{});var A8=s(ks);MJ=n(A8,"STRONG",{});var Q$r=s(MJ);HJe=r(Q$r,"retribert"),Q$r.forEach(t),UJe=r(A8," \u2014 "),Ck=n(A8,"A",{href:!0});var H$r=s(Ck);JJe=r(H$r,"RetriBertTokenizer"),H$r.forEach(t),YJe=r(A8," or "),Mk=n(A8,"A",{href:!0});var U$r=s(Mk);KJe=r(U$r,"RetriBertTokenizerFast"),U$r.forEach(t),ZJe=r(A8," (RetriBERT model)"),A8.forEach(t),eYe=i(y),Rs=n(y,"LI",{});var L8=s(Rs);EJ=n(L8,"STRONG",{});var J$r=s(EJ);oYe=r(J$r,"roberta"),J$r.forEach(t),rYe=r(L8," \u2014 "),Ek=n(L8,"A",{href:!0});var Y$r=s(Ek);tYe=r(Y$r,"RobertaTokenizer"),Y$r.forEach(t),aYe=r(L8," or "),yk=n(L8,"A",{href:!0});var K$r=s(yk);nYe=r(K$r,"RobertaTokenizerFast"),K$r.forEach(t),sYe=r(L8," (RoBERTa model)"),L8.forEach(t),lYe=i(y),Ss=n(y,"LI",{});var B8=s(Ss);yJ=n(B8,"STRONG",{});var Z$r=s(yJ);iYe=r(Z$r,"roformer"),Z$r.forEach(t),dYe=r(B8," \u2014 "),wk=n(B8,"A",{href:!0});var eIr=s(wk);cYe=r(eIr,"RoFormerTokenizer"),eIr.forEach(t),fYe=r(B8," or "),Ak=n(B8,"A",{href:!0});var oIr=s(Ak);mYe=r(oIr,"RoFormerTokenizerFast"),oIr.forEach(t),gYe=r(B8," (RoFormer model)"),B8.forEach(t),hYe=i(y),Yg=n(y,"LI",{});var sCe=s(Yg);wJ=n(sCe,"STRONG",{});var rIr=s(wJ);pYe=r(rIr,"speech_to_text"),rIr.forEach(t),_Ye=r(sCe," \u2014 "),Lk=n(sCe,"A",{href:!0});var tIr=s(Lk);uYe=r(tIr,"Speech2TextTokenizer"),tIr.forEach(t),bYe=r(sCe," (Speech2Text model)"),sCe.forEach(t),vYe=i(y),Kg=n(y,"LI",{});var lCe=s(Kg);AJ=n(lCe,"STRONG",{});var aIr=s(AJ);TYe=r(aIr,"speech_to_text_2"),aIr.forEach(t),FYe=r(lCe," \u2014 "),Bk=n(lCe,"A",{href:!0});var nIr=s(Bk);CYe=r(nIr,"Speech2Text2Tokenizer"),nIr.forEach(t),MYe=r(lCe," (Speech2Text2 model)"),lCe.forEach(t),EYe=i(y),Ps=n(y,"LI",{});var x8=s(Ps);LJ=n(x8,"STRONG",{});var sIr=s(LJ);yYe=r(sIr,"splinter"),sIr.forEach(t),wYe=r(x8," \u2014 "),xk=n(x8,"A",{href:!0});var lIr=s(xk);AYe=r(lIr,"SplinterTokenizer"),lIr.forEach(t),LYe=r(x8," or "),kk=n(x8,"A",{href:!0});var iIr=s(kk);BYe=r(iIr,"SplinterTokenizerFast"),iIr.forEach(t),xYe=r(x8," (Splinter model)"),x8.forEach(t),kYe=i(y),$s=n(y,"LI",{});var k8=s($s);BJ=n(k8,"STRONG",{});var dIr=s(BJ);RYe=r(dIr,"squeezebert"),dIr.forEach(t),SYe=r(k8," \u2014 "),Rk=n(k8,"A",{href:!0});var cIr=s(Rk);PYe=r(cIr,"SqueezeBertTokenizer"),cIr.forEach(t),$Ye=r(k8," or "),Sk=n(k8,"A",{href:!0});var fIr=s(Sk);IYe=r(fIr,"SqueezeBertTokenizerFast"),fIr.forEach(t),jYe=r(k8," (SqueezeBERT model)"),k8.forEach(t),DYe=i(y),Is=n(y,"LI",{});var R8=s(Is);xJ=n(R8,"STRONG",{});var mIr=s(xJ);NYe=r(mIr,"t5"),mIr.forEach(t),qYe=r(R8," \u2014 "),Pk=n(R8,"A",{href:!0});var gIr=s(Pk);OYe=r(gIr,"T5Tokenizer"),gIr.forEach(t),GYe=r(R8," or "),$k=n(R8,"A",{href:!0});var hIr=s($k);XYe=r(hIr,"T5TokenizerFast"),hIr.forEach(t),VYe=r(R8," (T5 model)"),R8.forEach(t),zYe=i(y),Zg=n(y,"LI",{});var iCe=s(Zg);kJ=n(iCe,"STRONG",{});var pIr=s(kJ);WYe=r(pIr,"tapas"),pIr.forEach(t),QYe=r(iCe," \u2014 "),Ik=n(iCe,"A",{href:!0});var _Ir=s(Ik);HYe=r(_Ir,"TapasTokenizer"),_Ir.forEach(t),UYe=r(iCe," (TAPAS model)"),iCe.forEach(t),JYe=i(y),eh=n(y,"LI",{});var dCe=s(eh);RJ=n(dCe,"STRONG",{});var uIr=s(RJ);YYe=r(uIr,"transfo-xl"),uIr.forEach(t),KYe=r(dCe," \u2014 "),jk=n(dCe,"A",{href:!0});var bIr=s(jk);ZYe=r(bIr,"TransfoXLTokenizer"),bIr.forEach(t),eKe=r(dCe," (Transformer-XL model)"),dCe.forEach(t),oKe=i(y),oh=n(y,"LI",{});var cCe=s(oh);SJ=n(cCe,"STRONG",{});var vIr=s(SJ);rKe=r(vIr,"wav2vec2"),vIr.forEach(t),tKe=r(cCe," \u2014 "),Dk=n(cCe,"A",{href:!0});var TIr=s(Dk);aKe=r(TIr,"Wav2Vec2CTCTokenizer"),TIr.forEach(t),nKe=r(cCe," (Wav2Vec2 model)"),cCe.forEach(t),sKe=i(y),rh=n(y,"LI",{});var fCe=s(rh);PJ=n(fCe,"STRONG",{});var FIr=s(PJ);lKe=r(FIr,"wav2vec2_phoneme"),FIr.forEach(t),iKe=r(fCe," \u2014 "),Nk=n(fCe,"A",{href:!0});var CIr=s(Nk);dKe=r(CIr,"Wav2Vec2PhonemeCTCTokenizer"),CIr.forEach(t),cKe=r(fCe," (Wav2Vec2Phoneme model)"),fCe.forEach(t),fKe=i(y),js=n(y,"LI",{});var S8=s(js);$J=n(S8,"STRONG",{});var MIr=s($J);mKe=r(MIr,"xglm"),MIr.forEach(t),gKe=r(S8," \u2014 "),qk=n(S8,"A",{href:!0});var EIr=s(qk);hKe=r(EIr,"XGLMTokenizer"),EIr.forEach(t),pKe=r(S8," or "),Ok=n(S8,"A",{href:!0});var yIr=s(Ok);_Ke=r(yIr,"XGLMTokenizerFast"),yIr.forEach(t),uKe=r(S8," (XGLM model)"),S8.forEach(t),bKe=i(y),th=n(y,"LI",{});var mCe=s(th);IJ=n(mCe,"STRONG",{});var wIr=s(IJ);vKe=r(wIr,"xlm"),wIr.forEach(t),TKe=r(mCe," \u2014 "),Gk=n(mCe,"A",{href:!0});var AIr=s(Gk);FKe=r(AIr,"XLMTokenizer"),AIr.forEach(t),CKe=r(mCe," (XLM model)"),mCe.forEach(t),MKe=i(y),ah=n(y,"LI",{});var gCe=s(ah);jJ=n(gCe,"STRONG",{});var LIr=s(jJ);EKe=r(LIr,"xlm-prophetnet"),LIr.forEach(t),yKe=r(gCe," \u2014 "),Xk=n(gCe,"A",{href:!0});var BIr=s(Xk);wKe=r(BIr,"XLMProphetNetTokenizer"),BIr.forEach(t),AKe=r(gCe," (XLMProphetNet model)"),gCe.forEach(t),LKe=i(y),Ds=n(y,"LI",{});var P8=s(Ds);DJ=n(P8,"STRONG",{});var xIr=s(DJ);BKe=r(xIr,"xlm-roberta"),xIr.forEach(t),xKe=r(P8," \u2014 "),Vk=n(P8,"A",{href:!0});var kIr=s(Vk);kKe=r(kIr,"XLMRobertaTokenizer"),kIr.forEach(t),RKe=r(P8," or "),zk=n(P8,"A",{href:!0});var RIr=s(zk);SKe=r(RIr,"XLMRobertaTokenizerFast"),RIr.forEach(t),PKe=r(P8," (XLM-RoBERTa model)"),P8.forEach(t),$Ke=i(y),Ns=n(y,"LI",{});var $8=s(Ns);NJ=n($8,"STRONG",{});var SIr=s(NJ);IKe=r(SIr,"xlnet"),SIr.forEach(t),jKe=r($8," \u2014 "),Wk=n($8,"A",{href:!0});var PIr=s(Wk);DKe=r(PIr,"XLNetTokenizer"),PIr.forEach(t),NKe=r($8," or "),Qk=n($8,"A",{href:!0});var $Ir=s(Qk);qKe=r($Ir,"XLNetTokenizerFast"),$Ir.forEach(t),OKe=r($8," (XLNet model)"),$8.forEach(t),y.forEach(t),GKe=i(ga),qJ=n(ga,"P",{});var IIr=s(qJ);XKe=r(IIr,"Examples:"),IIr.forEach(t),VKe=i(ga),m(d3.$$.fragment,ga),ga.forEach(t),zKe=i(Vs),nh=n(Vs,"DIV",{class:!0});var mRe=s(nh);m(c3.$$.fragment,mRe),WKe=i(mRe),OJ=n(mRe,"P",{});var jIr=s(OJ);QKe=r(jIr,"Register a new tokenizer in this mapping."),jIr.forEach(t),mRe.forEach(t),Vs.forEach(t),ixe=i(d),Hi=n(d,"H2",{class:!0});var gRe=s(Hi);sh=n(gRe,"A",{id:!0,class:!0,href:!0});var DIr=s(sh);GJ=n(DIr,"SPAN",{});var NIr=s(GJ);m(f3.$$.fragment,NIr),NIr.forEach(t),DIr.forEach(t),HKe=i(gRe),XJ=n(gRe,"SPAN",{});var qIr=s(XJ);UKe=r(qIr,"AutoFeatureExtractor"),qIr.forEach(t),gRe.forEach(t),dxe=i(d),Ho=n(d,"DIV",{class:!0});var zs=s(Ho);m(m3.$$.fragment,zs),JKe=i(zs),g3=n(zs,"P",{});var hRe=s(g3);YKe=r(hRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hk=n(hRe,"A",{href:!0});var OIr=s(Hk);KKe=r(OIr,"AutoFeatureExtractor.from_pretrained()"),OIr.forEach(t),ZKe=r(hRe," class method."),hRe.forEach(t),eZe=i(zs),h3=n(zs,"P",{});var pRe=s(h3);oZe=r(pRe,"This class cannot be instantiated directly using "),VJ=n(pRe,"CODE",{});var GIr=s(VJ);rZe=r(GIr,"__init__()"),GIr.forEach(t),tZe=r(pRe," (throws an error)."),pRe.forEach(t),aZe=i(zs),$e=n(zs,"DIV",{class:!0});var Dt=s($e);m(p3.$$.fragment,Dt),nZe=i(Dt),zJ=n(Dt,"P",{});var XIr=s(zJ);sZe=r(XIr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),XIr.forEach(t),lZe=i(Dt),Ga=n(Dt,"P",{});var Q4=s(Ga);iZe=r(Q4,"The feature extractor class to instantiate is selected based on the "),WJ=n(Q4,"CODE",{});var VIr=s(WJ);dZe=r(VIr,"model_type"),VIr.forEach(t),cZe=r(Q4,` property of the config object
(either passed as an argument or loaded from `),QJ=n(Q4,"CODE",{});var zIr=s(QJ);fZe=r(zIr,"pretrained_model_name_or_path"),zIr.forEach(t),mZe=r(Q4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),HJ=n(Q4,"CODE",{});var WIr=s(HJ);gZe=r(WIr,"pretrained_model_name_or_path"),WIr.forEach(t),hZe=r(Q4,":"),Q4.forEach(t),pZe=i(Dt),ae=n(Dt,"UL",{});var le=s(ae);lh=n(le,"LI",{});var hCe=s(lh);UJ=n(hCe,"STRONG",{});var QIr=s(UJ);_Ze=r(QIr,"beit"),QIr.forEach(t),uZe=r(hCe," \u2014 "),Uk=n(hCe,"A",{href:!0});var HIr=s(Uk);bZe=r(HIr,"BeitFeatureExtractor"),HIr.forEach(t),vZe=r(hCe," (BEiT model)"),hCe.forEach(t),TZe=i(le),ih=n(le,"LI",{});var pCe=s(ih);JJ=n(pCe,"STRONG",{});var UIr=s(JJ);FZe=r(UIr,"clip"),UIr.forEach(t),CZe=r(pCe," \u2014 "),Jk=n(pCe,"A",{href:!0});var JIr=s(Jk);MZe=r(JIr,"CLIPFeatureExtractor"),JIr.forEach(t),EZe=r(pCe," (CLIP model)"),pCe.forEach(t),yZe=i(le),dh=n(le,"LI",{});var _Ce=s(dh);YJ=n(_Ce,"STRONG",{});var YIr=s(YJ);wZe=r(YIr,"convnext"),YIr.forEach(t),AZe=r(_Ce," \u2014 "),Yk=n(_Ce,"A",{href:!0});var KIr=s(Yk);LZe=r(KIr,"ConvNextFeatureExtractor"),KIr.forEach(t),BZe=r(_Ce," (ConvNext model)"),_Ce.forEach(t),xZe=i(le),ch=n(le,"LI",{});var uCe=s(ch);KJ=n(uCe,"STRONG",{});var ZIr=s(KJ);kZe=r(ZIr,"deit"),ZIr.forEach(t),RZe=r(uCe," \u2014 "),Kk=n(uCe,"A",{href:!0});var ejr=s(Kk);SZe=r(ejr,"DeiTFeatureExtractor"),ejr.forEach(t),PZe=r(uCe," (DeiT model)"),uCe.forEach(t),$Ze=i(le),fh=n(le,"LI",{});var bCe=s(fh);ZJ=n(bCe,"STRONG",{});var ojr=s(ZJ);IZe=r(ojr,"detr"),ojr.forEach(t),jZe=r(bCe," \u2014 "),Zk=n(bCe,"A",{href:!0});var rjr=s(Zk);DZe=r(rjr,"DetrFeatureExtractor"),rjr.forEach(t),NZe=r(bCe," (DETR model)"),bCe.forEach(t),qZe=i(le),mh=n(le,"LI",{});var vCe=s(mh);eY=n(vCe,"STRONG",{});var tjr=s(eY);OZe=r(tjr,"hubert"),tjr.forEach(t),GZe=r(vCe," \u2014 "),eR=n(vCe,"A",{href:!0});var ajr=s(eR);XZe=r(ajr,"Wav2Vec2FeatureExtractor"),ajr.forEach(t),VZe=r(vCe," (Hubert model)"),vCe.forEach(t),zZe=i(le),gh=n(le,"LI",{});var TCe=s(gh);oY=n(TCe,"STRONG",{});var njr=s(oY);WZe=r(njr,"layoutlmv2"),njr.forEach(t),QZe=r(TCe," \u2014 "),oR=n(TCe,"A",{href:!0});var sjr=s(oR);HZe=r(sjr,"LayoutLMv2FeatureExtractor"),sjr.forEach(t),UZe=r(TCe," (LayoutLMv2 model)"),TCe.forEach(t),JZe=i(le),hh=n(le,"LI",{});var FCe=s(hh);rY=n(FCe,"STRONG",{});var ljr=s(rY);YZe=r(ljr,"maskformer"),ljr.forEach(t),KZe=r(FCe," \u2014 "),rR=n(FCe,"A",{href:!0});var ijr=s(rR);ZZe=r(ijr,"MaskFormerFeatureExtractor"),ijr.forEach(t),eeo=r(FCe," (MaskFormer model)"),FCe.forEach(t),oeo=i(le),ph=n(le,"LI",{});var CCe=s(ph);tY=n(CCe,"STRONG",{});var djr=s(tY);reo=r(djr,"perceiver"),djr.forEach(t),teo=r(CCe," \u2014 "),tR=n(CCe,"A",{href:!0});var cjr=s(tR);aeo=r(cjr,"PerceiverFeatureExtractor"),cjr.forEach(t),neo=r(CCe," (Perceiver model)"),CCe.forEach(t),seo=i(le),_h=n(le,"LI",{});var MCe=s(_h);aY=n(MCe,"STRONG",{});var fjr=s(aY);leo=r(fjr,"poolformer"),fjr.forEach(t),ieo=r(MCe," \u2014 "),aR=n(MCe,"A",{href:!0});var mjr=s(aR);deo=r(mjr,"PoolFormerFeatureExtractor"),mjr.forEach(t),ceo=r(MCe," (PoolFormer model)"),MCe.forEach(t),feo=i(le),uh=n(le,"LI",{});var ECe=s(uh);nY=n(ECe,"STRONG",{});var gjr=s(nY);meo=r(gjr,"segformer"),gjr.forEach(t),geo=r(ECe," \u2014 "),nR=n(ECe,"A",{href:!0});var hjr=s(nR);heo=r(hjr,"SegformerFeatureExtractor"),hjr.forEach(t),peo=r(ECe," (SegFormer model)"),ECe.forEach(t),_eo=i(le),bh=n(le,"LI",{});var yCe=s(bh);sY=n(yCe,"STRONG",{});var pjr=s(sY);ueo=r(pjr,"speech_to_text"),pjr.forEach(t),beo=r(yCe," \u2014 "),sR=n(yCe,"A",{href:!0});var _jr=s(sR);veo=r(_jr,"Speech2TextFeatureExtractor"),_jr.forEach(t),Teo=r(yCe," (Speech2Text model)"),yCe.forEach(t),Feo=i(le),vh=n(le,"LI",{});var wCe=s(vh);lY=n(wCe,"STRONG",{});var ujr=s(lY);Ceo=r(ujr,"swin"),ujr.forEach(t),Meo=r(wCe," \u2014 "),lR=n(wCe,"A",{href:!0});var bjr=s(lR);Eeo=r(bjr,"ViTFeatureExtractor"),bjr.forEach(t),yeo=r(wCe," (Swin model)"),wCe.forEach(t),weo=i(le),Th=n(le,"LI",{});var ACe=s(Th);iY=n(ACe,"STRONG",{});var vjr=s(iY);Aeo=r(vjr,"vit"),vjr.forEach(t),Leo=r(ACe," \u2014 "),iR=n(ACe,"A",{href:!0});var Tjr=s(iR);Beo=r(Tjr,"ViTFeatureExtractor"),Tjr.forEach(t),xeo=r(ACe," (ViT model)"),ACe.forEach(t),keo=i(le),Fh=n(le,"LI",{});var LCe=s(Fh);dY=n(LCe,"STRONG",{});var Fjr=s(dY);Reo=r(Fjr,"vit_mae"),Fjr.forEach(t),Seo=r(LCe," \u2014 "),dR=n(LCe,"A",{href:!0});var Cjr=s(dR);Peo=r(Cjr,"ViTFeatureExtractor"),Cjr.forEach(t),$eo=r(LCe," (ViTMAE model)"),LCe.forEach(t),Ieo=i(le),Ch=n(le,"LI",{});var BCe=s(Ch);cY=n(BCe,"STRONG",{});var Mjr=s(cY);jeo=r(Mjr,"wav2vec2"),Mjr.forEach(t),Deo=r(BCe," \u2014 "),cR=n(BCe,"A",{href:!0});var Ejr=s(cR);Neo=r(Ejr,"Wav2Vec2FeatureExtractor"),Ejr.forEach(t),qeo=r(BCe," (Wav2Vec2 model)"),BCe.forEach(t),le.forEach(t),Oeo=i(Dt),m(Mh.$$.fragment,Dt),Geo=i(Dt),fY=n(Dt,"P",{});var yjr=s(fY);Xeo=r(yjr,"Examples:"),yjr.forEach(t),Veo=i(Dt),m(_3.$$.fragment,Dt),Dt.forEach(t),zeo=i(zs),Eh=n(zs,"DIV",{class:!0});var _Re=s(Eh);m(u3.$$.fragment,_Re),Weo=i(_Re),mY=n(_Re,"P",{});var wjr=s(mY);Qeo=r(wjr,"Register a new feature extractor for this class."),wjr.forEach(t),_Re.forEach(t),zs.forEach(t),cxe=i(d),Ui=n(d,"H2",{class:!0});var uRe=s(Ui);yh=n(uRe,"A",{id:!0,class:!0,href:!0});var Ajr=s(yh);gY=n(Ajr,"SPAN",{});var Ljr=s(gY);m(b3.$$.fragment,Ljr),Ljr.forEach(t),Ajr.forEach(t),Heo=i(uRe),hY=n(uRe,"SPAN",{});var Bjr=s(hY);Ueo=r(Bjr,"AutoProcessor"),Bjr.forEach(t),uRe.forEach(t),fxe=i(d),Uo=n(d,"DIV",{class:!0});var Ws=s(Uo);m(v3.$$.fragment,Ws),Jeo=i(Ws),T3=n(Ws,"P",{});var bRe=s(T3);Yeo=r(bRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fR=n(bRe,"A",{href:!0});var xjr=s(fR);Keo=r(xjr,"AutoProcessor.from_pretrained()"),xjr.forEach(t),Zeo=r(bRe," class method."),bRe.forEach(t),eoo=i(Ws),F3=n(Ws,"P",{});var vRe=s(F3);ooo=r(vRe,"This class cannot be instantiated directly using "),pY=n(vRe,"CODE",{});var kjr=s(pY);roo=r(kjr,"__init__()"),kjr.forEach(t),too=r(vRe," (throws an error)."),vRe.forEach(t),aoo=i(Ws),Ie=n(Ws,"DIV",{class:!0});var Nt=s(Ie);m(C3.$$.fragment,Nt),noo=i(Nt),_Y=n(Nt,"P",{});var Rjr=s(_Y);soo=r(Rjr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rjr.forEach(t),loo=i(Nt),Ji=n(Nt,"P",{});var Cz=s(Ji);ioo=r(Cz,"The processor class to instantiate is selected based on the "),uY=n(Cz,"CODE",{});var Sjr=s(uY);doo=r(Sjr,"model_type"),Sjr.forEach(t),coo=r(Cz,` property of the config object (either
passed as an argument or loaded from `),bY=n(Cz,"CODE",{});var Pjr=s(bY);foo=r(Pjr,"pretrained_model_name_or_path"),Pjr.forEach(t),moo=r(Cz," if possible):"),Cz.forEach(t),goo=i(Nt),Be=n(Nt,"UL",{});var No=s(Be);wh=n(No,"LI",{});var xCe=s(wh);vY=n(xCe,"STRONG",{});var $jr=s(vY);hoo=r($jr,"clip"),$jr.forEach(t),poo=r(xCe," \u2014 "),mR=n(xCe,"A",{href:!0});var Ijr=s(mR);_oo=r(Ijr,"CLIPProcessor"),Ijr.forEach(t),uoo=r(xCe," (CLIP model)"),xCe.forEach(t),boo=i(No),Ah=n(No,"LI",{});var kCe=s(Ah);TY=n(kCe,"STRONG",{});var jjr=s(TY);voo=r(jjr,"layoutlmv2"),jjr.forEach(t),Too=r(kCe," \u2014 "),gR=n(kCe,"A",{href:!0});var Djr=s(gR);Foo=r(Djr,"LayoutLMv2Processor"),Djr.forEach(t),Coo=r(kCe," (LayoutLMv2 model)"),kCe.forEach(t),Moo=i(No),Lh=n(No,"LI",{});var RCe=s(Lh);FY=n(RCe,"STRONG",{});var Njr=s(FY);Eoo=r(Njr,"layoutxlm"),Njr.forEach(t),yoo=r(RCe," \u2014 "),hR=n(RCe,"A",{href:!0});var qjr=s(hR);woo=r(qjr,"LayoutXLMProcessor"),qjr.forEach(t),Aoo=r(RCe," (LayoutXLM model)"),RCe.forEach(t),Loo=i(No),Bh=n(No,"LI",{});var SCe=s(Bh);CY=n(SCe,"STRONG",{});var Ojr=s(CY);Boo=r(Ojr,"speech_to_text"),Ojr.forEach(t),xoo=r(SCe," \u2014 "),pR=n(SCe,"A",{href:!0});var Gjr=s(pR);koo=r(Gjr,"Speech2TextProcessor"),Gjr.forEach(t),Roo=r(SCe," (Speech2Text model)"),SCe.forEach(t),Soo=i(No),xh=n(No,"LI",{});var PCe=s(xh);MY=n(PCe,"STRONG",{});var Xjr=s(MY);Poo=r(Xjr,"speech_to_text_2"),Xjr.forEach(t),$oo=r(PCe," \u2014 "),_R=n(PCe,"A",{href:!0});var Vjr=s(_R);Ioo=r(Vjr,"Speech2Text2Processor"),Vjr.forEach(t),joo=r(PCe," (Speech2Text2 model)"),PCe.forEach(t),Doo=i(No),kh=n(No,"LI",{});var $Ce=s(kh);EY=n($Ce,"STRONG",{});var zjr=s(EY);Noo=r(zjr,"trocr"),zjr.forEach(t),qoo=r($Ce," \u2014 "),uR=n($Ce,"A",{href:!0});var Wjr=s(uR);Ooo=r(Wjr,"TrOCRProcessor"),Wjr.forEach(t),Goo=r($Ce," (TrOCR model)"),$Ce.forEach(t),Xoo=i(No),Rh=n(No,"LI",{});var ICe=s(Rh);yY=n(ICe,"STRONG",{});var Qjr=s(yY);Voo=r(Qjr,"vision-text-dual-encoder"),Qjr.forEach(t),zoo=r(ICe," \u2014 "),bR=n(ICe,"A",{href:!0});var Hjr=s(bR);Woo=r(Hjr,"VisionTextDualEncoderProcessor"),Hjr.forEach(t),Qoo=r(ICe," (VisionTextDualEncoder model)"),ICe.forEach(t),Hoo=i(No),Sh=n(No,"LI",{});var jCe=s(Sh);wY=n(jCe,"STRONG",{});var Ujr=s(wY);Uoo=r(Ujr,"wav2vec2"),Ujr.forEach(t),Joo=r(jCe," \u2014 "),vR=n(jCe,"A",{href:!0});var Jjr=s(vR);Yoo=r(Jjr,"Wav2Vec2Processor"),Jjr.forEach(t),Koo=r(jCe," (Wav2Vec2 model)"),jCe.forEach(t),No.forEach(t),Zoo=i(Nt),m(Ph.$$.fragment,Nt),ero=i(Nt),AY=n(Nt,"P",{});var Yjr=s(AY);oro=r(Yjr,"Examples:"),Yjr.forEach(t),rro=i(Nt),m(M3.$$.fragment,Nt),Nt.forEach(t),tro=i(Ws),$h=n(Ws,"DIV",{class:!0});var TRe=s($h);m(E3.$$.fragment,TRe),aro=i(TRe),LY=n(TRe,"P",{});var Kjr=s(LY);nro=r(Kjr,"Register a new processor for this class."),Kjr.forEach(t),TRe.forEach(t),Ws.forEach(t),mxe=i(d),Yi=n(d,"H2",{class:!0});var FRe=s(Yi);Ih=n(FRe,"A",{id:!0,class:!0,href:!0});var Zjr=s(Ih);BY=n(Zjr,"SPAN",{});var eDr=s(BY);m(y3.$$.fragment,eDr),eDr.forEach(t),Zjr.forEach(t),sro=i(FRe),xY=n(FRe,"SPAN",{});var oDr=s(xY);lro=r(oDr,"AutoModel"),oDr.forEach(t),FRe.forEach(t),gxe=i(d),Jo=n(d,"DIV",{class:!0});var Qs=s(Jo);m(w3.$$.fragment,Qs),iro=i(Qs),Ki=n(Qs,"P",{});var Mz=s(Ki);dro=r(Mz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kY=n(Mz,"CODE",{});var rDr=s(kY);cro=r(rDr,"from_pretrained()"),rDr.forEach(t),fro=r(Mz,"class method or the "),RY=n(Mz,"CODE",{});var tDr=s(RY);mro=r(tDr,"from_config()"),tDr.forEach(t),gro=r(Mz,`class
method.`),Mz.forEach(t),hro=i(Qs),A3=n(Qs,"P",{});var CRe=s(A3);pro=r(CRe,"This class cannot be instantiated directly using "),SY=n(CRe,"CODE",{});var aDr=s(SY);_ro=r(aDr,"__init__()"),aDr.forEach(t),uro=r(CRe," (throws an error)."),CRe.forEach(t),bro=i(Qs),Vr=n(Qs,"DIV",{class:!0});var Hs=s(Vr);m(L3.$$.fragment,Hs),vro=i(Hs),PY=n(Hs,"P",{});var nDr=s(PY);Tro=r(nDr,"Instantiates one of the base model classes of the library from a configuration."),nDr.forEach(t),Fro=i(Hs),Zi=n(Hs,"P",{});var Ez=s(Zi);Cro=r(Ez,`Note:
Loading a model from its configuration file does `),$Y=n(Ez,"STRONG",{});var sDr=s($Y);Mro=r(sDr,"not"),sDr.forEach(t),Ero=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(Ez,"CODE",{});var lDr=s(IY);yro=r(lDr,"from_pretrained()"),lDr.forEach(t),wro=r(Ez,"to load the model weights."),Ez.forEach(t),Aro=i(Hs),jY=n(Hs,"P",{});var iDr=s(jY);Lro=r(iDr,"Examples:"),iDr.forEach(t),Bro=i(Hs),m(B3.$$.fragment,Hs),Hs.forEach(t),xro=i(Qs),je=n(Qs,"DIV",{class:!0});var qt=s(je);m(x3.$$.fragment,qt),kro=i(qt),DY=n(qt,"P",{});var dDr=s(DY);Rro=r(dDr,"Instantiate one of the base model classes of the library from a pretrained model."),dDr.forEach(t),Sro=i(qt),Xa=n(qt,"P",{});var H4=s(Xa);Pro=r(H4,"The model class to instantiate is selected based on the "),NY=n(H4,"CODE",{});var cDr=s(NY);$ro=r(cDr,"model_type"),cDr.forEach(t),Iro=r(H4,` property of the config object (either
passed as an argument or loaded from `),qY=n(H4,"CODE",{});var fDr=s(qY);jro=r(fDr,"pretrained_model_name_or_path"),fDr.forEach(t),Dro=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OY=n(H4,"CODE",{});var mDr=s(OY);Nro=r(mDr,"pretrained_model_name_or_path"),mDr.forEach(t),qro=r(H4,":"),H4.forEach(t),Oro=i(qt),F=n(qt,"UL",{});var C=s(F);jh=n(C,"LI",{});var DCe=s(jh);GY=n(DCe,"STRONG",{});var gDr=s(GY);Gro=r(gDr,"albert"),gDr.forEach(t),Xro=r(DCe," \u2014 "),TR=n(DCe,"A",{href:!0});var hDr=s(TR);Vro=r(hDr,"AlbertModel"),hDr.forEach(t),zro=r(DCe," (ALBERT model)"),DCe.forEach(t),Wro=i(C),Dh=n(C,"LI",{});var NCe=s(Dh);XY=n(NCe,"STRONG",{});var pDr=s(XY);Qro=r(pDr,"bart"),pDr.forEach(t),Hro=r(NCe," \u2014 "),FR=n(NCe,"A",{href:!0});var _Dr=s(FR);Uro=r(_Dr,"BartModel"),_Dr.forEach(t),Jro=r(NCe," (BART model)"),NCe.forEach(t),Yro=i(C),Nh=n(C,"LI",{});var qCe=s(Nh);VY=n(qCe,"STRONG",{});var uDr=s(VY);Kro=r(uDr,"beit"),uDr.forEach(t),Zro=r(qCe," \u2014 "),CR=n(qCe,"A",{href:!0});var bDr=s(CR);eto=r(bDr,"BeitModel"),bDr.forEach(t),oto=r(qCe," (BEiT model)"),qCe.forEach(t),rto=i(C),qh=n(C,"LI",{});var OCe=s(qh);zY=n(OCe,"STRONG",{});var vDr=s(zY);tto=r(vDr,"bert"),vDr.forEach(t),ato=r(OCe," \u2014 "),MR=n(OCe,"A",{href:!0});var TDr=s(MR);nto=r(TDr,"BertModel"),TDr.forEach(t),sto=r(OCe," (BERT model)"),OCe.forEach(t),lto=i(C),Oh=n(C,"LI",{});var GCe=s(Oh);WY=n(GCe,"STRONG",{});var FDr=s(WY);ito=r(FDr,"bert-generation"),FDr.forEach(t),dto=r(GCe," \u2014 "),ER=n(GCe,"A",{href:!0});var CDr=s(ER);cto=r(CDr,"BertGenerationEncoder"),CDr.forEach(t),fto=r(GCe," (Bert Generation model)"),GCe.forEach(t),mto=i(C),Gh=n(C,"LI",{});var XCe=s(Gh);QY=n(XCe,"STRONG",{});var MDr=s(QY);gto=r(MDr,"big_bird"),MDr.forEach(t),hto=r(XCe," \u2014 "),yR=n(XCe,"A",{href:!0});var EDr=s(yR);pto=r(EDr,"BigBirdModel"),EDr.forEach(t),_to=r(XCe," (BigBird model)"),XCe.forEach(t),uto=i(C),Xh=n(C,"LI",{});var VCe=s(Xh);HY=n(VCe,"STRONG",{});var yDr=s(HY);bto=r(yDr,"bigbird_pegasus"),yDr.forEach(t),vto=r(VCe," \u2014 "),wR=n(VCe,"A",{href:!0});var wDr=s(wR);Tto=r(wDr,"BigBirdPegasusModel"),wDr.forEach(t),Fto=r(VCe," (BigBirdPegasus model)"),VCe.forEach(t),Cto=i(C),Vh=n(C,"LI",{});var zCe=s(Vh);UY=n(zCe,"STRONG",{});var ADr=s(UY);Mto=r(ADr,"blenderbot"),ADr.forEach(t),Eto=r(zCe," \u2014 "),AR=n(zCe,"A",{href:!0});var LDr=s(AR);yto=r(LDr,"BlenderbotModel"),LDr.forEach(t),wto=r(zCe," (Blenderbot model)"),zCe.forEach(t),Ato=i(C),zh=n(C,"LI",{});var WCe=s(zh);JY=n(WCe,"STRONG",{});var BDr=s(JY);Lto=r(BDr,"blenderbot-small"),BDr.forEach(t),Bto=r(WCe," \u2014 "),LR=n(WCe,"A",{href:!0});var xDr=s(LR);xto=r(xDr,"BlenderbotSmallModel"),xDr.forEach(t),kto=r(WCe," (BlenderbotSmall model)"),WCe.forEach(t),Rto=i(C),Wh=n(C,"LI",{});var QCe=s(Wh);YY=n(QCe,"STRONG",{});var kDr=s(YY);Sto=r(kDr,"camembert"),kDr.forEach(t),Pto=r(QCe," \u2014 "),BR=n(QCe,"A",{href:!0});var RDr=s(BR);$to=r(RDr,"CamembertModel"),RDr.forEach(t),Ito=r(QCe," (CamemBERT model)"),QCe.forEach(t),jto=i(C),Qh=n(C,"LI",{});var HCe=s(Qh);KY=n(HCe,"STRONG",{});var SDr=s(KY);Dto=r(SDr,"canine"),SDr.forEach(t),Nto=r(HCe," \u2014 "),xR=n(HCe,"A",{href:!0});var PDr=s(xR);qto=r(PDr,"CanineModel"),PDr.forEach(t),Oto=r(HCe," (Canine model)"),HCe.forEach(t),Gto=i(C),Hh=n(C,"LI",{});var UCe=s(Hh);ZY=n(UCe,"STRONG",{});var $Dr=s(ZY);Xto=r($Dr,"clip"),$Dr.forEach(t),Vto=r(UCe," \u2014 "),kR=n(UCe,"A",{href:!0});var IDr=s(kR);zto=r(IDr,"CLIPModel"),IDr.forEach(t),Wto=r(UCe," (CLIP model)"),UCe.forEach(t),Qto=i(C),Uh=n(C,"LI",{});var JCe=s(Uh);eK=n(JCe,"STRONG",{});var jDr=s(eK);Hto=r(jDr,"convbert"),jDr.forEach(t),Uto=r(JCe," \u2014 "),RR=n(JCe,"A",{href:!0});var DDr=s(RR);Jto=r(DDr,"ConvBertModel"),DDr.forEach(t),Yto=r(JCe," (ConvBERT model)"),JCe.forEach(t),Kto=i(C),Jh=n(C,"LI",{});var YCe=s(Jh);oK=n(YCe,"STRONG",{});var NDr=s(oK);Zto=r(NDr,"convnext"),NDr.forEach(t),eao=r(YCe," \u2014 "),SR=n(YCe,"A",{href:!0});var qDr=s(SR);oao=r(qDr,"ConvNextModel"),qDr.forEach(t),rao=r(YCe," (ConvNext model)"),YCe.forEach(t),tao=i(C),Yh=n(C,"LI",{});var KCe=s(Yh);rK=n(KCe,"STRONG",{});var ODr=s(rK);aao=r(ODr,"ctrl"),ODr.forEach(t),nao=r(KCe," \u2014 "),PR=n(KCe,"A",{href:!0});var GDr=s(PR);sao=r(GDr,"CTRLModel"),GDr.forEach(t),lao=r(KCe," (CTRL model)"),KCe.forEach(t),iao=i(C),Kh=n(C,"LI",{});var ZCe=s(Kh);tK=n(ZCe,"STRONG",{});var XDr=s(tK);dao=r(XDr,"data2vec-audio"),XDr.forEach(t),cao=r(ZCe," \u2014 "),$R=n(ZCe,"A",{href:!0});var VDr=s($R);fao=r(VDr,"Data2VecAudioModel"),VDr.forEach(t),mao=r(ZCe," (Data2VecAudio model)"),ZCe.forEach(t),gao=i(C),Zh=n(C,"LI",{});var eMe=s(Zh);aK=n(eMe,"STRONG",{});var zDr=s(aK);hao=r(zDr,"data2vec-text"),zDr.forEach(t),pao=r(eMe," \u2014 "),IR=n(eMe,"A",{href:!0});var WDr=s(IR);_ao=r(WDr,"Data2VecTextModel"),WDr.forEach(t),uao=r(eMe," (Data2VecText model)"),eMe.forEach(t),bao=i(C),ep=n(C,"LI",{});var oMe=s(ep);nK=n(oMe,"STRONG",{});var QDr=s(nK);vao=r(QDr,"deberta"),QDr.forEach(t),Tao=r(oMe," \u2014 "),jR=n(oMe,"A",{href:!0});var HDr=s(jR);Fao=r(HDr,"DebertaModel"),HDr.forEach(t),Cao=r(oMe," (DeBERTa model)"),oMe.forEach(t),Mao=i(C),op=n(C,"LI",{});var rMe=s(op);sK=n(rMe,"STRONG",{});var UDr=s(sK);Eao=r(UDr,"deberta-v2"),UDr.forEach(t),yao=r(rMe," \u2014 "),DR=n(rMe,"A",{href:!0});var JDr=s(DR);wao=r(JDr,"DebertaV2Model"),JDr.forEach(t),Aao=r(rMe," (DeBERTa-v2 model)"),rMe.forEach(t),Lao=i(C),rp=n(C,"LI",{});var tMe=s(rp);lK=n(tMe,"STRONG",{});var YDr=s(lK);Bao=r(YDr,"deit"),YDr.forEach(t),xao=r(tMe," \u2014 "),NR=n(tMe,"A",{href:!0});var KDr=s(NR);kao=r(KDr,"DeiTModel"),KDr.forEach(t),Rao=r(tMe," (DeiT model)"),tMe.forEach(t),Sao=i(C),tp=n(C,"LI",{});var aMe=s(tp);iK=n(aMe,"STRONG",{});var ZDr=s(iK);Pao=r(ZDr,"detr"),ZDr.forEach(t),$ao=r(aMe," \u2014 "),qR=n(aMe,"A",{href:!0});var eNr=s(qR);Iao=r(eNr,"DetrModel"),eNr.forEach(t),jao=r(aMe," (DETR model)"),aMe.forEach(t),Dao=i(C),ap=n(C,"LI",{});var nMe=s(ap);dK=n(nMe,"STRONG",{});var oNr=s(dK);Nao=r(oNr,"distilbert"),oNr.forEach(t),qao=r(nMe," \u2014 "),OR=n(nMe,"A",{href:!0});var rNr=s(OR);Oao=r(rNr,"DistilBertModel"),rNr.forEach(t),Gao=r(nMe," (DistilBERT model)"),nMe.forEach(t),Xao=i(C),np=n(C,"LI",{});var sMe=s(np);cK=n(sMe,"STRONG",{});var tNr=s(cK);Vao=r(tNr,"dpr"),tNr.forEach(t),zao=r(sMe," \u2014 "),GR=n(sMe,"A",{href:!0});var aNr=s(GR);Wao=r(aNr,"DPRQuestionEncoder"),aNr.forEach(t),Qao=r(sMe," (DPR model)"),sMe.forEach(t),Hao=i(C),sp=n(C,"LI",{});var lMe=s(sp);fK=n(lMe,"STRONG",{});var nNr=s(fK);Uao=r(nNr,"electra"),nNr.forEach(t),Jao=r(lMe," \u2014 "),XR=n(lMe,"A",{href:!0});var sNr=s(XR);Yao=r(sNr,"ElectraModel"),sNr.forEach(t),Kao=r(lMe," (ELECTRA model)"),lMe.forEach(t),Zao=i(C),lp=n(C,"LI",{});var iMe=s(lp);mK=n(iMe,"STRONG",{});var lNr=s(mK);eno=r(lNr,"flaubert"),lNr.forEach(t),ono=r(iMe," \u2014 "),VR=n(iMe,"A",{href:!0});var iNr=s(VR);rno=r(iNr,"FlaubertModel"),iNr.forEach(t),tno=r(iMe," (FlauBERT model)"),iMe.forEach(t),ano=i(C),ip=n(C,"LI",{});var dMe=s(ip);gK=n(dMe,"STRONG",{});var dNr=s(gK);nno=r(dNr,"fnet"),dNr.forEach(t),sno=r(dMe," \u2014 "),zR=n(dMe,"A",{href:!0});var cNr=s(zR);lno=r(cNr,"FNetModel"),cNr.forEach(t),ino=r(dMe," (FNet model)"),dMe.forEach(t),dno=i(C),dp=n(C,"LI",{});var cMe=s(dp);hK=n(cMe,"STRONG",{});var fNr=s(hK);cno=r(fNr,"fsmt"),fNr.forEach(t),fno=r(cMe," \u2014 "),WR=n(cMe,"A",{href:!0});var mNr=s(WR);mno=r(mNr,"FSMTModel"),mNr.forEach(t),gno=r(cMe," (FairSeq Machine-Translation model)"),cMe.forEach(t),hno=i(C),qs=n(C,"LI",{});var I8=s(qs);pK=n(I8,"STRONG",{});var gNr=s(pK);pno=r(gNr,"funnel"),gNr.forEach(t),_no=r(I8," \u2014 "),QR=n(I8,"A",{href:!0});var hNr=s(QR);uno=r(hNr,"FunnelModel"),hNr.forEach(t),bno=r(I8," or "),HR=n(I8,"A",{href:!0});var pNr=s(HR);vno=r(pNr,"FunnelBaseModel"),pNr.forEach(t),Tno=r(I8," (Funnel Transformer model)"),I8.forEach(t),Fno=i(C),cp=n(C,"LI",{});var fMe=s(cp);_K=n(fMe,"STRONG",{});var _Nr=s(_K);Cno=r(_Nr,"gpt2"),_Nr.forEach(t),Mno=r(fMe," \u2014 "),UR=n(fMe,"A",{href:!0});var uNr=s(UR);Eno=r(uNr,"GPT2Model"),uNr.forEach(t),yno=r(fMe," (OpenAI GPT-2 model)"),fMe.forEach(t),wno=i(C),fp=n(C,"LI",{});var mMe=s(fp);uK=n(mMe,"STRONG",{});var bNr=s(uK);Ano=r(bNr,"gpt_neo"),bNr.forEach(t),Lno=r(mMe," \u2014 "),JR=n(mMe,"A",{href:!0});var vNr=s(JR);Bno=r(vNr,"GPTNeoModel"),vNr.forEach(t),xno=r(mMe," (GPT Neo model)"),mMe.forEach(t),kno=i(C),mp=n(C,"LI",{});var gMe=s(mp);bK=n(gMe,"STRONG",{});var TNr=s(bK);Rno=r(TNr,"gptj"),TNr.forEach(t),Sno=r(gMe," \u2014 "),YR=n(gMe,"A",{href:!0});var FNr=s(YR);Pno=r(FNr,"GPTJModel"),FNr.forEach(t),$no=r(gMe," (GPT-J model)"),gMe.forEach(t),Ino=i(C),gp=n(C,"LI",{});var hMe=s(gp);vK=n(hMe,"STRONG",{});var CNr=s(vK);jno=r(CNr,"hubert"),CNr.forEach(t),Dno=r(hMe," \u2014 "),KR=n(hMe,"A",{href:!0});var MNr=s(KR);Nno=r(MNr,"HubertModel"),MNr.forEach(t),qno=r(hMe," (Hubert model)"),hMe.forEach(t),Ono=i(C),hp=n(C,"LI",{});var pMe=s(hp);TK=n(pMe,"STRONG",{});var ENr=s(TK);Gno=r(ENr,"ibert"),ENr.forEach(t),Xno=r(pMe," \u2014 "),ZR=n(pMe,"A",{href:!0});var yNr=s(ZR);Vno=r(yNr,"IBertModel"),yNr.forEach(t),zno=r(pMe," (I-BERT model)"),pMe.forEach(t),Wno=i(C),pp=n(C,"LI",{});var _Me=s(pp);FK=n(_Me,"STRONG",{});var wNr=s(FK);Qno=r(wNr,"imagegpt"),wNr.forEach(t),Hno=r(_Me," \u2014 "),eS=n(_Me,"A",{href:!0});var ANr=s(eS);Uno=r(ANr,"ImageGPTModel"),ANr.forEach(t),Jno=r(_Me," (ImageGPT model)"),_Me.forEach(t),Yno=i(C),_p=n(C,"LI",{});var uMe=s(_p);CK=n(uMe,"STRONG",{});var LNr=s(CK);Kno=r(LNr,"layoutlm"),LNr.forEach(t),Zno=r(uMe," \u2014 "),oS=n(uMe,"A",{href:!0});var BNr=s(oS);eso=r(BNr,"LayoutLMModel"),BNr.forEach(t),oso=r(uMe," (LayoutLM model)"),uMe.forEach(t),rso=i(C),up=n(C,"LI",{});var bMe=s(up);MK=n(bMe,"STRONG",{});var xNr=s(MK);tso=r(xNr,"layoutlmv2"),xNr.forEach(t),aso=r(bMe," \u2014 "),rS=n(bMe,"A",{href:!0});var kNr=s(rS);nso=r(kNr,"LayoutLMv2Model"),kNr.forEach(t),sso=r(bMe," (LayoutLMv2 model)"),bMe.forEach(t),lso=i(C),bp=n(C,"LI",{});var vMe=s(bp);EK=n(vMe,"STRONG",{});var RNr=s(EK);iso=r(RNr,"led"),RNr.forEach(t),dso=r(vMe," \u2014 "),tS=n(vMe,"A",{href:!0});var SNr=s(tS);cso=r(SNr,"LEDModel"),SNr.forEach(t),fso=r(vMe," (LED model)"),vMe.forEach(t),mso=i(C),vp=n(C,"LI",{});var TMe=s(vp);yK=n(TMe,"STRONG",{});var PNr=s(yK);gso=r(PNr,"longformer"),PNr.forEach(t),hso=r(TMe," \u2014 "),aS=n(TMe,"A",{href:!0});var $Nr=s(aS);pso=r($Nr,"LongformerModel"),$Nr.forEach(t),_so=r(TMe," (Longformer model)"),TMe.forEach(t),uso=i(C),Tp=n(C,"LI",{});var FMe=s(Tp);wK=n(FMe,"STRONG",{});var INr=s(wK);bso=r(INr,"luke"),INr.forEach(t),vso=r(FMe," \u2014 "),nS=n(FMe,"A",{href:!0});var jNr=s(nS);Tso=r(jNr,"LukeModel"),jNr.forEach(t),Fso=r(FMe," (LUKE model)"),FMe.forEach(t),Cso=i(C),Fp=n(C,"LI",{});var CMe=s(Fp);AK=n(CMe,"STRONG",{});var DNr=s(AK);Mso=r(DNr,"lxmert"),DNr.forEach(t),Eso=r(CMe," \u2014 "),sS=n(CMe,"A",{href:!0});var NNr=s(sS);yso=r(NNr,"LxmertModel"),NNr.forEach(t),wso=r(CMe," (LXMERT model)"),CMe.forEach(t),Aso=i(C),Cp=n(C,"LI",{});var MMe=s(Cp);LK=n(MMe,"STRONG",{});var qNr=s(LK);Lso=r(qNr,"m2m_100"),qNr.forEach(t),Bso=r(MMe," \u2014 "),lS=n(MMe,"A",{href:!0});var ONr=s(lS);xso=r(ONr,"M2M100Model"),ONr.forEach(t),kso=r(MMe," (M2M100 model)"),MMe.forEach(t),Rso=i(C),Mp=n(C,"LI",{});var EMe=s(Mp);BK=n(EMe,"STRONG",{});var GNr=s(BK);Sso=r(GNr,"marian"),GNr.forEach(t),Pso=r(EMe," \u2014 "),iS=n(EMe,"A",{href:!0});var XNr=s(iS);$so=r(XNr,"MarianModel"),XNr.forEach(t),Iso=r(EMe," (Marian model)"),EMe.forEach(t),jso=i(C),Ep=n(C,"LI",{});var yMe=s(Ep);xK=n(yMe,"STRONG",{});var VNr=s(xK);Dso=r(VNr,"maskformer"),VNr.forEach(t),Nso=r(yMe," \u2014 "),dS=n(yMe,"A",{href:!0});var zNr=s(dS);qso=r(zNr,"MaskFormerModel"),zNr.forEach(t),Oso=r(yMe," (MaskFormer model)"),yMe.forEach(t),Gso=i(C),yp=n(C,"LI",{});var wMe=s(yp);kK=n(wMe,"STRONG",{});var WNr=s(kK);Xso=r(WNr,"mbart"),WNr.forEach(t),Vso=r(wMe," \u2014 "),cS=n(wMe,"A",{href:!0});var QNr=s(cS);zso=r(QNr,"MBartModel"),QNr.forEach(t),Wso=r(wMe," (mBART model)"),wMe.forEach(t),Qso=i(C),wp=n(C,"LI",{});var AMe=s(wp);RK=n(AMe,"STRONG",{});var HNr=s(RK);Hso=r(HNr,"megatron-bert"),HNr.forEach(t),Uso=r(AMe," \u2014 "),fS=n(AMe,"A",{href:!0});var UNr=s(fS);Jso=r(UNr,"MegatronBertModel"),UNr.forEach(t),Yso=r(AMe," (MegatronBert model)"),AMe.forEach(t),Kso=i(C),Ap=n(C,"LI",{});var LMe=s(Ap);SK=n(LMe,"STRONG",{});var JNr=s(SK);Zso=r(JNr,"mobilebert"),JNr.forEach(t),elo=r(LMe," \u2014 "),mS=n(LMe,"A",{href:!0});var YNr=s(mS);olo=r(YNr,"MobileBertModel"),YNr.forEach(t),rlo=r(LMe," (MobileBERT model)"),LMe.forEach(t),tlo=i(C),Lp=n(C,"LI",{});var BMe=s(Lp);PK=n(BMe,"STRONG",{});var KNr=s(PK);alo=r(KNr,"mpnet"),KNr.forEach(t),nlo=r(BMe," \u2014 "),gS=n(BMe,"A",{href:!0});var ZNr=s(gS);slo=r(ZNr,"MPNetModel"),ZNr.forEach(t),llo=r(BMe," (MPNet model)"),BMe.forEach(t),ilo=i(C),Bp=n(C,"LI",{});var xMe=s(Bp);$K=n(xMe,"STRONG",{});var eqr=s($K);dlo=r(eqr,"mt5"),eqr.forEach(t),clo=r(xMe," \u2014 "),hS=n(xMe,"A",{href:!0});var oqr=s(hS);flo=r(oqr,"MT5Model"),oqr.forEach(t),mlo=r(xMe," (mT5 model)"),xMe.forEach(t),glo=i(C),xp=n(C,"LI",{});var kMe=s(xp);IK=n(kMe,"STRONG",{});var rqr=s(IK);hlo=r(rqr,"nystromformer"),rqr.forEach(t),plo=r(kMe," \u2014 "),pS=n(kMe,"A",{href:!0});var tqr=s(pS);_lo=r(tqr,"NystromformerModel"),tqr.forEach(t),ulo=r(kMe," (Nystromformer model)"),kMe.forEach(t),blo=i(C),kp=n(C,"LI",{});var RMe=s(kp);jK=n(RMe,"STRONG",{});var aqr=s(jK);vlo=r(aqr,"openai-gpt"),aqr.forEach(t),Tlo=r(RMe," \u2014 "),_S=n(RMe,"A",{href:!0});var nqr=s(_S);Flo=r(nqr,"OpenAIGPTModel"),nqr.forEach(t),Clo=r(RMe," (OpenAI GPT model)"),RMe.forEach(t),Mlo=i(C),Rp=n(C,"LI",{});var SMe=s(Rp);DK=n(SMe,"STRONG",{});var sqr=s(DK);Elo=r(sqr,"pegasus"),sqr.forEach(t),ylo=r(SMe," \u2014 "),uS=n(SMe,"A",{href:!0});var lqr=s(uS);wlo=r(lqr,"PegasusModel"),lqr.forEach(t),Alo=r(SMe," (Pegasus model)"),SMe.forEach(t),Llo=i(C),Sp=n(C,"LI",{});var PMe=s(Sp);NK=n(PMe,"STRONG",{});var iqr=s(NK);Blo=r(iqr,"perceiver"),iqr.forEach(t),xlo=r(PMe," \u2014 "),bS=n(PMe,"A",{href:!0});var dqr=s(bS);klo=r(dqr,"PerceiverModel"),dqr.forEach(t),Rlo=r(PMe," (Perceiver model)"),PMe.forEach(t),Slo=i(C),Pp=n(C,"LI",{});var $Me=s(Pp);qK=n($Me,"STRONG",{});var cqr=s(qK);Plo=r(cqr,"plbart"),cqr.forEach(t),$lo=r($Me," \u2014 "),vS=n($Me,"A",{href:!0});var fqr=s(vS);Ilo=r(fqr,"PLBartModel"),fqr.forEach(t),jlo=r($Me," (PLBart model)"),$Me.forEach(t),Dlo=i(C),$p=n(C,"LI",{});var IMe=s($p);OK=n(IMe,"STRONG",{});var mqr=s(OK);Nlo=r(mqr,"poolformer"),mqr.forEach(t),qlo=r(IMe," \u2014 "),TS=n(IMe,"A",{href:!0});var gqr=s(TS);Olo=r(gqr,"PoolFormerModel"),gqr.forEach(t),Glo=r(IMe," (PoolFormer model)"),IMe.forEach(t),Xlo=i(C),Ip=n(C,"LI",{});var jMe=s(Ip);GK=n(jMe,"STRONG",{});var hqr=s(GK);Vlo=r(hqr,"prophetnet"),hqr.forEach(t),zlo=r(jMe," \u2014 "),FS=n(jMe,"A",{href:!0});var pqr=s(FS);Wlo=r(pqr,"ProphetNetModel"),pqr.forEach(t),Qlo=r(jMe," (ProphetNet model)"),jMe.forEach(t),Hlo=i(C),jp=n(C,"LI",{});var DMe=s(jp);XK=n(DMe,"STRONG",{});var _qr=s(XK);Ulo=r(_qr,"qdqbert"),_qr.forEach(t),Jlo=r(DMe," \u2014 "),CS=n(DMe,"A",{href:!0});var uqr=s(CS);Ylo=r(uqr,"QDQBertModel"),uqr.forEach(t),Klo=r(DMe," (QDQBert model)"),DMe.forEach(t),Zlo=i(C),Dp=n(C,"LI",{});var NMe=s(Dp);VK=n(NMe,"STRONG",{});var bqr=s(VK);eio=r(bqr,"reformer"),bqr.forEach(t),oio=r(NMe," \u2014 "),MS=n(NMe,"A",{href:!0});var vqr=s(MS);rio=r(vqr,"ReformerModel"),vqr.forEach(t),tio=r(NMe," (Reformer model)"),NMe.forEach(t),aio=i(C),Np=n(C,"LI",{});var qMe=s(Np);zK=n(qMe,"STRONG",{});var Tqr=s(zK);nio=r(Tqr,"rembert"),Tqr.forEach(t),sio=r(qMe," \u2014 "),ES=n(qMe,"A",{href:!0});var Fqr=s(ES);lio=r(Fqr,"RemBertModel"),Fqr.forEach(t),iio=r(qMe," (RemBERT model)"),qMe.forEach(t),dio=i(C),qp=n(C,"LI",{});var OMe=s(qp);WK=n(OMe,"STRONG",{});var Cqr=s(WK);cio=r(Cqr,"retribert"),Cqr.forEach(t),fio=r(OMe," \u2014 "),yS=n(OMe,"A",{href:!0});var Mqr=s(yS);mio=r(Mqr,"RetriBertModel"),Mqr.forEach(t),gio=r(OMe," (RetriBERT model)"),OMe.forEach(t),hio=i(C),Op=n(C,"LI",{});var GMe=s(Op);QK=n(GMe,"STRONG",{});var Eqr=s(QK);pio=r(Eqr,"roberta"),Eqr.forEach(t),_io=r(GMe," \u2014 "),wS=n(GMe,"A",{href:!0});var yqr=s(wS);uio=r(yqr,"RobertaModel"),yqr.forEach(t),bio=r(GMe," (RoBERTa model)"),GMe.forEach(t),vio=i(C),Gp=n(C,"LI",{});var XMe=s(Gp);HK=n(XMe,"STRONG",{});var wqr=s(HK);Tio=r(wqr,"roformer"),wqr.forEach(t),Fio=r(XMe," \u2014 "),AS=n(XMe,"A",{href:!0});var Aqr=s(AS);Cio=r(Aqr,"RoFormerModel"),Aqr.forEach(t),Mio=r(XMe," (RoFormer model)"),XMe.forEach(t),Eio=i(C),Xp=n(C,"LI",{});var VMe=s(Xp);UK=n(VMe,"STRONG",{});var Lqr=s(UK);yio=r(Lqr,"segformer"),Lqr.forEach(t),wio=r(VMe," \u2014 "),LS=n(VMe,"A",{href:!0});var Bqr=s(LS);Aio=r(Bqr,"SegformerModel"),Bqr.forEach(t),Lio=r(VMe," (SegFormer model)"),VMe.forEach(t),Bio=i(C),Vp=n(C,"LI",{});var zMe=s(Vp);JK=n(zMe,"STRONG",{});var xqr=s(JK);xio=r(xqr,"sew"),xqr.forEach(t),kio=r(zMe," \u2014 "),BS=n(zMe,"A",{href:!0});var kqr=s(BS);Rio=r(kqr,"SEWModel"),kqr.forEach(t),Sio=r(zMe," (SEW model)"),zMe.forEach(t),Pio=i(C),zp=n(C,"LI",{});var WMe=s(zp);YK=n(WMe,"STRONG",{});var Rqr=s(YK);$io=r(Rqr,"sew-d"),Rqr.forEach(t),Iio=r(WMe," \u2014 "),xS=n(WMe,"A",{href:!0});var Sqr=s(xS);jio=r(Sqr,"SEWDModel"),Sqr.forEach(t),Dio=r(WMe," (SEW-D model)"),WMe.forEach(t),Nio=i(C),Wp=n(C,"LI",{});var QMe=s(Wp);KK=n(QMe,"STRONG",{});var Pqr=s(KK);qio=r(Pqr,"speech_to_text"),Pqr.forEach(t),Oio=r(QMe," \u2014 "),kS=n(QMe,"A",{href:!0});var $qr=s(kS);Gio=r($qr,"Speech2TextModel"),$qr.forEach(t),Xio=r(QMe," (Speech2Text model)"),QMe.forEach(t),Vio=i(C),Qp=n(C,"LI",{});var HMe=s(Qp);ZK=n(HMe,"STRONG",{});var Iqr=s(ZK);zio=r(Iqr,"splinter"),Iqr.forEach(t),Wio=r(HMe," \u2014 "),RS=n(HMe,"A",{href:!0});var jqr=s(RS);Qio=r(jqr,"SplinterModel"),jqr.forEach(t),Hio=r(HMe," (Splinter model)"),HMe.forEach(t),Uio=i(C),Hp=n(C,"LI",{});var UMe=s(Hp);eZ=n(UMe,"STRONG",{});var Dqr=s(eZ);Jio=r(Dqr,"squeezebert"),Dqr.forEach(t),Yio=r(UMe," \u2014 "),SS=n(UMe,"A",{href:!0});var Nqr=s(SS);Kio=r(Nqr,"SqueezeBertModel"),Nqr.forEach(t),Zio=r(UMe," (SqueezeBERT model)"),UMe.forEach(t),edo=i(C),Up=n(C,"LI",{});var JMe=s(Up);oZ=n(JMe,"STRONG",{});var qqr=s(oZ);odo=r(qqr,"swin"),qqr.forEach(t),rdo=r(JMe," \u2014 "),PS=n(JMe,"A",{href:!0});var Oqr=s(PS);tdo=r(Oqr,"SwinModel"),Oqr.forEach(t),ado=r(JMe," (Swin model)"),JMe.forEach(t),ndo=i(C),Jp=n(C,"LI",{});var YMe=s(Jp);rZ=n(YMe,"STRONG",{});var Gqr=s(rZ);sdo=r(Gqr,"t5"),Gqr.forEach(t),ldo=r(YMe," \u2014 "),$S=n(YMe,"A",{href:!0});var Xqr=s($S);ido=r(Xqr,"T5Model"),Xqr.forEach(t),ddo=r(YMe," (T5 model)"),YMe.forEach(t),cdo=i(C),Yp=n(C,"LI",{});var KMe=s(Yp);tZ=n(KMe,"STRONG",{});var Vqr=s(tZ);fdo=r(Vqr,"tapas"),Vqr.forEach(t),mdo=r(KMe," \u2014 "),IS=n(KMe,"A",{href:!0});var zqr=s(IS);gdo=r(zqr,"TapasModel"),zqr.forEach(t),hdo=r(KMe," (TAPAS model)"),KMe.forEach(t),pdo=i(C),Kp=n(C,"LI",{});var ZMe=s(Kp);aZ=n(ZMe,"STRONG",{});var Wqr=s(aZ);_do=r(Wqr,"transfo-xl"),Wqr.forEach(t),udo=r(ZMe," \u2014 "),jS=n(ZMe,"A",{href:!0});var Qqr=s(jS);bdo=r(Qqr,"TransfoXLModel"),Qqr.forEach(t),vdo=r(ZMe," (Transformer-XL model)"),ZMe.forEach(t),Tdo=i(C),Zp=n(C,"LI",{});var e4e=s(Zp);nZ=n(e4e,"STRONG",{});var Hqr=s(nZ);Fdo=r(Hqr,"unispeech"),Hqr.forEach(t),Cdo=r(e4e," \u2014 "),DS=n(e4e,"A",{href:!0});var Uqr=s(DS);Mdo=r(Uqr,"UniSpeechModel"),Uqr.forEach(t),Edo=r(e4e," (UniSpeech model)"),e4e.forEach(t),ydo=i(C),e_=n(C,"LI",{});var o4e=s(e_);sZ=n(o4e,"STRONG",{});var Jqr=s(sZ);wdo=r(Jqr,"unispeech-sat"),Jqr.forEach(t),Ado=r(o4e," \u2014 "),NS=n(o4e,"A",{href:!0});var Yqr=s(NS);Ldo=r(Yqr,"UniSpeechSatModel"),Yqr.forEach(t),Bdo=r(o4e," (UniSpeechSat model)"),o4e.forEach(t),xdo=i(C),o_=n(C,"LI",{});var r4e=s(o_);lZ=n(r4e,"STRONG",{});var Kqr=s(lZ);kdo=r(Kqr,"vilt"),Kqr.forEach(t),Rdo=r(r4e," \u2014 "),qS=n(r4e,"A",{href:!0});var Zqr=s(qS);Sdo=r(Zqr,"ViltModel"),Zqr.forEach(t),Pdo=r(r4e," (ViLT model)"),r4e.forEach(t),$do=i(C),r_=n(C,"LI",{});var t4e=s(r_);iZ=n(t4e,"STRONG",{});var eOr=s(iZ);Ido=r(eOr,"vision-text-dual-encoder"),eOr.forEach(t),jdo=r(t4e," \u2014 "),OS=n(t4e,"A",{href:!0});var oOr=s(OS);Ddo=r(oOr,"VisionTextDualEncoderModel"),oOr.forEach(t),Ndo=r(t4e," (VisionTextDualEncoder model)"),t4e.forEach(t),qdo=i(C),t_=n(C,"LI",{});var a4e=s(t_);dZ=n(a4e,"STRONG",{});var rOr=s(dZ);Odo=r(rOr,"visual_bert"),rOr.forEach(t),Gdo=r(a4e," \u2014 "),GS=n(a4e,"A",{href:!0});var tOr=s(GS);Xdo=r(tOr,"VisualBertModel"),tOr.forEach(t),Vdo=r(a4e," (VisualBert model)"),a4e.forEach(t),zdo=i(C),a_=n(C,"LI",{});var n4e=s(a_);cZ=n(n4e,"STRONG",{});var aOr=s(cZ);Wdo=r(aOr,"vit"),aOr.forEach(t),Qdo=r(n4e," \u2014 "),XS=n(n4e,"A",{href:!0});var nOr=s(XS);Hdo=r(nOr,"ViTModel"),nOr.forEach(t),Udo=r(n4e," (ViT model)"),n4e.forEach(t),Jdo=i(C),n_=n(C,"LI",{});var s4e=s(n_);fZ=n(s4e,"STRONG",{});var sOr=s(fZ);Ydo=r(sOr,"vit_mae"),sOr.forEach(t),Kdo=r(s4e," \u2014 "),VS=n(s4e,"A",{href:!0});var lOr=s(VS);Zdo=r(lOr,"ViTMAEModel"),lOr.forEach(t),eco=r(s4e," (ViTMAE model)"),s4e.forEach(t),oco=i(C),s_=n(C,"LI",{});var l4e=s(s_);mZ=n(l4e,"STRONG",{});var iOr=s(mZ);rco=r(iOr,"wav2vec2"),iOr.forEach(t),tco=r(l4e," \u2014 "),zS=n(l4e,"A",{href:!0});var dOr=s(zS);aco=r(dOr,"Wav2Vec2Model"),dOr.forEach(t),nco=r(l4e," (Wav2Vec2 model)"),l4e.forEach(t),sco=i(C),l_=n(C,"LI",{});var i4e=s(l_);gZ=n(i4e,"STRONG",{});var cOr=s(gZ);lco=r(cOr,"wavlm"),cOr.forEach(t),ico=r(i4e," \u2014 "),WS=n(i4e,"A",{href:!0});var fOr=s(WS);dco=r(fOr,"WavLMModel"),fOr.forEach(t),cco=r(i4e," (WavLM model)"),i4e.forEach(t),fco=i(C),i_=n(C,"LI",{});var d4e=s(i_);hZ=n(d4e,"STRONG",{});var mOr=s(hZ);mco=r(mOr,"xglm"),mOr.forEach(t),gco=r(d4e," \u2014 "),QS=n(d4e,"A",{href:!0});var gOr=s(QS);hco=r(gOr,"XGLMModel"),gOr.forEach(t),pco=r(d4e," (XGLM model)"),d4e.forEach(t),_co=i(C),d_=n(C,"LI",{});var c4e=s(d_);pZ=n(c4e,"STRONG",{});var hOr=s(pZ);uco=r(hOr,"xlm"),hOr.forEach(t),bco=r(c4e," \u2014 "),HS=n(c4e,"A",{href:!0});var pOr=s(HS);vco=r(pOr,"XLMModel"),pOr.forEach(t),Tco=r(c4e," (XLM model)"),c4e.forEach(t),Fco=i(C),c_=n(C,"LI",{});var f4e=s(c_);_Z=n(f4e,"STRONG",{});var _Or=s(_Z);Cco=r(_Or,"xlm-prophetnet"),_Or.forEach(t),Mco=r(f4e," \u2014 "),US=n(f4e,"A",{href:!0});var uOr=s(US);Eco=r(uOr,"XLMProphetNetModel"),uOr.forEach(t),yco=r(f4e," (XLMProphetNet model)"),f4e.forEach(t),wco=i(C),f_=n(C,"LI",{});var m4e=s(f_);uZ=n(m4e,"STRONG",{});var bOr=s(uZ);Aco=r(bOr,"xlm-roberta"),bOr.forEach(t),Lco=r(m4e," \u2014 "),JS=n(m4e,"A",{href:!0});var vOr=s(JS);Bco=r(vOr,"XLMRobertaModel"),vOr.forEach(t),xco=r(m4e," (XLM-RoBERTa model)"),m4e.forEach(t),kco=i(C),m_=n(C,"LI",{});var g4e=s(m_);bZ=n(g4e,"STRONG",{});var TOr=s(bZ);Rco=r(TOr,"xlm-roberta-xl"),TOr.forEach(t),Sco=r(g4e," \u2014 "),YS=n(g4e,"A",{href:!0});var FOr=s(YS);Pco=r(FOr,"XLMRobertaXLModel"),FOr.forEach(t),$co=r(g4e," (XLM-RoBERTa-XL model)"),g4e.forEach(t),Ico=i(C),g_=n(C,"LI",{});var h4e=s(g_);vZ=n(h4e,"STRONG",{});var COr=s(vZ);jco=r(COr,"xlnet"),COr.forEach(t),Dco=r(h4e," \u2014 "),KS=n(h4e,"A",{href:!0});var MOr=s(KS);Nco=r(MOr,"XLNetModel"),MOr.forEach(t),qco=r(h4e," (XLNet model)"),h4e.forEach(t),Oco=i(C),h_=n(C,"LI",{});var p4e=s(h_);TZ=n(p4e,"STRONG",{});var EOr=s(TZ);Gco=r(EOr,"yoso"),EOr.forEach(t),Xco=r(p4e," \u2014 "),ZS=n(p4e,"A",{href:!0});var yOr=s(ZS);Vco=r(yOr,"YosoModel"),yOr.forEach(t),zco=r(p4e," (YOSO model)"),p4e.forEach(t),C.forEach(t),Wco=i(qt),p_=n(qt,"P",{});var _4e=s(p_);Qco=r(_4e,"The model is set in evaluation mode by default using "),FZ=n(_4e,"CODE",{});var wOr=s(FZ);Hco=r(wOr,"model.eval()"),wOr.forEach(t),Uco=r(_4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CZ=n(_4e,"CODE",{});var AOr=s(CZ);Jco=r(AOr,"model.train()"),AOr.forEach(t),_4e.forEach(t),Yco=i(qt),MZ=n(qt,"P",{});var LOr=s(MZ);Kco=r(LOr,"Examples:"),LOr.forEach(t),Zco=i(qt),m(k3.$$.fragment,qt),qt.forEach(t),Qs.forEach(t),hxe=i(d),ed=n(d,"H2",{class:!0});var MRe=s(ed);__=n(MRe,"A",{id:!0,class:!0,href:!0});var BOr=s(__);EZ=n(BOr,"SPAN",{});var xOr=s(EZ);m(R3.$$.fragment,xOr),xOr.forEach(t),BOr.forEach(t),efo=i(MRe),yZ=n(MRe,"SPAN",{});var kOr=s(yZ);ofo=r(kOr,"AutoModelForPreTraining"),kOr.forEach(t),MRe.forEach(t),pxe=i(d),Yo=n(d,"DIV",{class:!0});var Us=s(Yo);m(S3.$$.fragment,Us),rfo=i(Us),od=n(Us,"P",{});var yz=s(od);tfo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=n(yz,"CODE",{});var ROr=s(wZ);afo=r(ROr,"from_pretrained()"),ROr.forEach(t),nfo=r(yz,"class method or the "),AZ=n(yz,"CODE",{});var SOr=s(AZ);sfo=r(SOr,"from_config()"),SOr.forEach(t),lfo=r(yz,`class
method.`),yz.forEach(t),ifo=i(Us),P3=n(Us,"P",{});var ERe=s(P3);dfo=r(ERe,"This class cannot be instantiated directly using "),LZ=n(ERe,"CODE",{});var POr=s(LZ);cfo=r(POr,"__init__()"),POr.forEach(t),ffo=r(ERe," (throws an error)."),ERe.forEach(t),mfo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m($3.$$.fragment,Js),gfo=i(Js),BZ=n(Js,"P",{});var $Or=s(BZ);hfo=r($Or,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Or.forEach(t),pfo=i(Js),rd=n(Js,"P",{});var wz=s(rd);_fo=r(wz,`Note:
Loading a model from its configuration file does `),xZ=n(wz,"STRONG",{});var IOr=s(xZ);ufo=r(IOr,"not"),IOr.forEach(t),bfo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(wz,"CODE",{});var jOr=s(kZ);vfo=r(jOr,"from_pretrained()"),jOr.forEach(t),Tfo=r(wz,"to load the model weights."),wz.forEach(t),Ffo=i(Js),RZ=n(Js,"P",{});var DOr=s(RZ);Cfo=r(DOr,"Examples:"),DOr.forEach(t),Mfo=i(Js),m(I3.$$.fragment,Js),Js.forEach(t),Efo=i(Us),De=n(Us,"DIV",{class:!0});var Ot=s(De);m(j3.$$.fragment,Ot),yfo=i(Ot),SZ=n(Ot,"P",{});var NOr=s(SZ);wfo=r(NOr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NOr.forEach(t),Afo=i(Ot),Va=n(Ot,"P",{});var U4=s(Va);Lfo=r(U4,"The model class to instantiate is selected based on the "),PZ=n(U4,"CODE",{});var qOr=s(PZ);Bfo=r(qOr,"model_type"),qOr.forEach(t),xfo=r(U4,` property of the config object (either
passed as an argument or loaded from `),$Z=n(U4,"CODE",{});var OOr=s($Z);kfo=r(OOr,"pretrained_model_name_or_path"),OOr.forEach(t),Rfo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IZ=n(U4,"CODE",{});var GOr=s(IZ);Sfo=r(GOr,"pretrained_model_name_or_path"),GOr.forEach(t),Pfo=r(U4,":"),U4.forEach(t),$fo=i(Ot),k=n(Ot,"UL",{});var S=s(k);u_=n(S,"LI",{});var u4e=s(u_);jZ=n(u4e,"STRONG",{});var XOr=s(jZ);Ifo=r(XOr,"albert"),XOr.forEach(t),jfo=r(u4e," \u2014 "),eP=n(u4e,"A",{href:!0});var VOr=s(eP);Dfo=r(VOr,"AlbertForPreTraining"),VOr.forEach(t),Nfo=r(u4e," (ALBERT model)"),u4e.forEach(t),qfo=i(S),b_=n(S,"LI",{});var b4e=s(b_);DZ=n(b4e,"STRONG",{});var zOr=s(DZ);Ofo=r(zOr,"bart"),zOr.forEach(t),Gfo=r(b4e," \u2014 "),oP=n(b4e,"A",{href:!0});var WOr=s(oP);Xfo=r(WOr,"BartForConditionalGeneration"),WOr.forEach(t),Vfo=r(b4e," (BART model)"),b4e.forEach(t),zfo=i(S),v_=n(S,"LI",{});var v4e=s(v_);NZ=n(v4e,"STRONG",{});var QOr=s(NZ);Wfo=r(QOr,"bert"),QOr.forEach(t),Qfo=r(v4e," \u2014 "),rP=n(v4e,"A",{href:!0});var HOr=s(rP);Hfo=r(HOr,"BertForPreTraining"),HOr.forEach(t),Ufo=r(v4e," (BERT model)"),v4e.forEach(t),Jfo=i(S),T_=n(S,"LI",{});var T4e=s(T_);qZ=n(T4e,"STRONG",{});var UOr=s(qZ);Yfo=r(UOr,"big_bird"),UOr.forEach(t),Kfo=r(T4e," \u2014 "),tP=n(T4e,"A",{href:!0});var JOr=s(tP);Zfo=r(JOr,"BigBirdForPreTraining"),JOr.forEach(t),emo=r(T4e," (BigBird model)"),T4e.forEach(t),omo=i(S),F_=n(S,"LI",{});var F4e=s(F_);OZ=n(F4e,"STRONG",{});var YOr=s(OZ);rmo=r(YOr,"camembert"),YOr.forEach(t),tmo=r(F4e," \u2014 "),aP=n(F4e,"A",{href:!0});var KOr=s(aP);amo=r(KOr,"CamembertForMaskedLM"),KOr.forEach(t),nmo=r(F4e," (CamemBERT model)"),F4e.forEach(t),smo=i(S),C_=n(S,"LI",{});var C4e=s(C_);GZ=n(C4e,"STRONG",{});var ZOr=s(GZ);lmo=r(ZOr,"ctrl"),ZOr.forEach(t),imo=r(C4e," \u2014 "),nP=n(C4e,"A",{href:!0});var eGr=s(nP);dmo=r(eGr,"CTRLLMHeadModel"),eGr.forEach(t),cmo=r(C4e," (CTRL model)"),C4e.forEach(t),fmo=i(S),M_=n(S,"LI",{});var M4e=s(M_);XZ=n(M4e,"STRONG",{});var oGr=s(XZ);mmo=r(oGr,"data2vec-text"),oGr.forEach(t),gmo=r(M4e," \u2014 "),sP=n(M4e,"A",{href:!0});var rGr=s(sP);hmo=r(rGr,"Data2VecTextForMaskedLM"),rGr.forEach(t),pmo=r(M4e," (Data2VecText model)"),M4e.forEach(t),_mo=i(S),E_=n(S,"LI",{});var E4e=s(E_);VZ=n(E4e,"STRONG",{});var tGr=s(VZ);umo=r(tGr,"deberta"),tGr.forEach(t),bmo=r(E4e," \u2014 "),lP=n(E4e,"A",{href:!0});var aGr=s(lP);vmo=r(aGr,"DebertaForMaskedLM"),aGr.forEach(t),Tmo=r(E4e," (DeBERTa model)"),E4e.forEach(t),Fmo=i(S),y_=n(S,"LI",{});var y4e=s(y_);zZ=n(y4e,"STRONG",{});var nGr=s(zZ);Cmo=r(nGr,"deberta-v2"),nGr.forEach(t),Mmo=r(y4e," \u2014 "),iP=n(y4e,"A",{href:!0});var sGr=s(iP);Emo=r(sGr,"DebertaV2ForMaskedLM"),sGr.forEach(t),ymo=r(y4e," (DeBERTa-v2 model)"),y4e.forEach(t),wmo=i(S),w_=n(S,"LI",{});var w4e=s(w_);WZ=n(w4e,"STRONG",{});var lGr=s(WZ);Amo=r(lGr,"distilbert"),lGr.forEach(t),Lmo=r(w4e," \u2014 "),dP=n(w4e,"A",{href:!0});var iGr=s(dP);Bmo=r(iGr,"DistilBertForMaskedLM"),iGr.forEach(t),xmo=r(w4e," (DistilBERT model)"),w4e.forEach(t),kmo=i(S),A_=n(S,"LI",{});var A4e=s(A_);QZ=n(A4e,"STRONG",{});var dGr=s(QZ);Rmo=r(dGr,"electra"),dGr.forEach(t),Smo=r(A4e," \u2014 "),cP=n(A4e,"A",{href:!0});var cGr=s(cP);Pmo=r(cGr,"ElectraForPreTraining"),cGr.forEach(t),$mo=r(A4e," (ELECTRA model)"),A4e.forEach(t),Imo=i(S),L_=n(S,"LI",{});var L4e=s(L_);HZ=n(L4e,"STRONG",{});var fGr=s(HZ);jmo=r(fGr,"flaubert"),fGr.forEach(t),Dmo=r(L4e," \u2014 "),fP=n(L4e,"A",{href:!0});var mGr=s(fP);Nmo=r(mGr,"FlaubertWithLMHeadModel"),mGr.forEach(t),qmo=r(L4e," (FlauBERT model)"),L4e.forEach(t),Omo=i(S),B_=n(S,"LI",{});var B4e=s(B_);UZ=n(B4e,"STRONG",{});var gGr=s(UZ);Gmo=r(gGr,"fnet"),gGr.forEach(t),Xmo=r(B4e," \u2014 "),mP=n(B4e,"A",{href:!0});var hGr=s(mP);Vmo=r(hGr,"FNetForPreTraining"),hGr.forEach(t),zmo=r(B4e," (FNet model)"),B4e.forEach(t),Wmo=i(S),x_=n(S,"LI",{});var x4e=s(x_);JZ=n(x4e,"STRONG",{});var pGr=s(JZ);Qmo=r(pGr,"fsmt"),pGr.forEach(t),Hmo=r(x4e," \u2014 "),gP=n(x4e,"A",{href:!0});var _Gr=s(gP);Umo=r(_Gr,"FSMTForConditionalGeneration"),_Gr.forEach(t),Jmo=r(x4e," (FairSeq Machine-Translation model)"),x4e.forEach(t),Ymo=i(S),k_=n(S,"LI",{});var k4e=s(k_);YZ=n(k4e,"STRONG",{});var uGr=s(YZ);Kmo=r(uGr,"funnel"),uGr.forEach(t),Zmo=r(k4e," \u2014 "),hP=n(k4e,"A",{href:!0});var bGr=s(hP);ego=r(bGr,"FunnelForPreTraining"),bGr.forEach(t),ogo=r(k4e," (Funnel Transformer model)"),k4e.forEach(t),rgo=i(S),R_=n(S,"LI",{});var R4e=s(R_);KZ=n(R4e,"STRONG",{});var vGr=s(KZ);tgo=r(vGr,"gpt2"),vGr.forEach(t),ago=r(R4e," \u2014 "),pP=n(R4e,"A",{href:!0});var TGr=s(pP);ngo=r(TGr,"GPT2LMHeadModel"),TGr.forEach(t),sgo=r(R4e," (OpenAI GPT-2 model)"),R4e.forEach(t),lgo=i(S),S_=n(S,"LI",{});var S4e=s(S_);ZZ=n(S4e,"STRONG",{});var FGr=s(ZZ);igo=r(FGr,"ibert"),FGr.forEach(t),dgo=r(S4e," \u2014 "),_P=n(S4e,"A",{href:!0});var CGr=s(_P);cgo=r(CGr,"IBertForMaskedLM"),CGr.forEach(t),fgo=r(S4e," (I-BERT model)"),S4e.forEach(t),mgo=i(S),P_=n(S,"LI",{});var P4e=s(P_);eee=n(P4e,"STRONG",{});var MGr=s(eee);ggo=r(MGr,"layoutlm"),MGr.forEach(t),hgo=r(P4e," \u2014 "),uP=n(P4e,"A",{href:!0});var EGr=s(uP);pgo=r(EGr,"LayoutLMForMaskedLM"),EGr.forEach(t),_go=r(P4e," (LayoutLM model)"),P4e.forEach(t),ugo=i(S),$_=n(S,"LI",{});var $4e=s($_);oee=n($4e,"STRONG",{});var yGr=s(oee);bgo=r(yGr,"longformer"),yGr.forEach(t),vgo=r($4e," \u2014 "),bP=n($4e,"A",{href:!0});var wGr=s(bP);Tgo=r(wGr,"LongformerForMaskedLM"),wGr.forEach(t),Fgo=r($4e," (Longformer model)"),$4e.forEach(t),Cgo=i(S),I_=n(S,"LI",{});var I4e=s(I_);ree=n(I4e,"STRONG",{});var AGr=s(ree);Mgo=r(AGr,"lxmert"),AGr.forEach(t),Ego=r(I4e," \u2014 "),vP=n(I4e,"A",{href:!0});var LGr=s(vP);ygo=r(LGr,"LxmertForPreTraining"),LGr.forEach(t),wgo=r(I4e," (LXMERT model)"),I4e.forEach(t),Ago=i(S),j_=n(S,"LI",{});var j4e=s(j_);tee=n(j4e,"STRONG",{});var BGr=s(tee);Lgo=r(BGr,"megatron-bert"),BGr.forEach(t),Bgo=r(j4e," \u2014 "),TP=n(j4e,"A",{href:!0});var xGr=s(TP);xgo=r(xGr,"MegatronBertForPreTraining"),xGr.forEach(t),kgo=r(j4e," (MegatronBert model)"),j4e.forEach(t),Rgo=i(S),D_=n(S,"LI",{});var D4e=s(D_);aee=n(D4e,"STRONG",{});var kGr=s(aee);Sgo=r(kGr,"mobilebert"),kGr.forEach(t),Pgo=r(D4e," \u2014 "),FP=n(D4e,"A",{href:!0});var RGr=s(FP);$go=r(RGr,"MobileBertForPreTraining"),RGr.forEach(t),Igo=r(D4e," (MobileBERT model)"),D4e.forEach(t),jgo=i(S),N_=n(S,"LI",{});var N4e=s(N_);nee=n(N4e,"STRONG",{});var SGr=s(nee);Dgo=r(SGr,"mpnet"),SGr.forEach(t),Ngo=r(N4e," \u2014 "),CP=n(N4e,"A",{href:!0});var PGr=s(CP);qgo=r(PGr,"MPNetForMaskedLM"),PGr.forEach(t),Ogo=r(N4e," (MPNet model)"),N4e.forEach(t),Ggo=i(S),q_=n(S,"LI",{});var q4e=s(q_);see=n(q4e,"STRONG",{});var $Gr=s(see);Xgo=r($Gr,"openai-gpt"),$Gr.forEach(t),Vgo=r(q4e," \u2014 "),MP=n(q4e,"A",{href:!0});var IGr=s(MP);zgo=r(IGr,"OpenAIGPTLMHeadModel"),IGr.forEach(t),Wgo=r(q4e," (OpenAI GPT model)"),q4e.forEach(t),Qgo=i(S),O_=n(S,"LI",{});var O4e=s(O_);lee=n(O4e,"STRONG",{});var jGr=s(lee);Hgo=r(jGr,"retribert"),jGr.forEach(t),Ugo=r(O4e," \u2014 "),EP=n(O4e,"A",{href:!0});var DGr=s(EP);Jgo=r(DGr,"RetriBertModel"),DGr.forEach(t),Ygo=r(O4e," (RetriBERT model)"),O4e.forEach(t),Kgo=i(S),G_=n(S,"LI",{});var G4e=s(G_);iee=n(G4e,"STRONG",{});var NGr=s(iee);Zgo=r(NGr,"roberta"),NGr.forEach(t),eho=r(G4e," \u2014 "),yP=n(G4e,"A",{href:!0});var qGr=s(yP);oho=r(qGr,"RobertaForMaskedLM"),qGr.forEach(t),rho=r(G4e," (RoBERTa model)"),G4e.forEach(t),tho=i(S),X_=n(S,"LI",{});var X4e=s(X_);dee=n(X4e,"STRONG",{});var OGr=s(dee);aho=r(OGr,"squeezebert"),OGr.forEach(t),nho=r(X4e," \u2014 "),wP=n(X4e,"A",{href:!0});var GGr=s(wP);sho=r(GGr,"SqueezeBertForMaskedLM"),GGr.forEach(t),lho=r(X4e," (SqueezeBERT model)"),X4e.forEach(t),iho=i(S),V_=n(S,"LI",{});var V4e=s(V_);cee=n(V4e,"STRONG",{});var XGr=s(cee);dho=r(XGr,"t5"),XGr.forEach(t),cho=r(V4e," \u2014 "),AP=n(V4e,"A",{href:!0});var VGr=s(AP);fho=r(VGr,"T5ForConditionalGeneration"),VGr.forEach(t),mho=r(V4e," (T5 model)"),V4e.forEach(t),gho=i(S),z_=n(S,"LI",{});var z4e=s(z_);fee=n(z4e,"STRONG",{});var zGr=s(fee);hho=r(zGr,"tapas"),zGr.forEach(t),pho=r(z4e," \u2014 "),LP=n(z4e,"A",{href:!0});var WGr=s(LP);_ho=r(WGr,"TapasForMaskedLM"),WGr.forEach(t),uho=r(z4e," (TAPAS model)"),z4e.forEach(t),bho=i(S),W_=n(S,"LI",{});var W4e=s(W_);mee=n(W4e,"STRONG",{});var QGr=s(mee);vho=r(QGr,"transfo-xl"),QGr.forEach(t),Tho=r(W4e," \u2014 "),BP=n(W4e,"A",{href:!0});var HGr=s(BP);Fho=r(HGr,"TransfoXLLMHeadModel"),HGr.forEach(t),Cho=r(W4e," (Transformer-XL model)"),W4e.forEach(t),Mho=i(S),Q_=n(S,"LI",{});var Q4e=s(Q_);gee=n(Q4e,"STRONG",{});var UGr=s(gee);Eho=r(UGr,"unispeech"),UGr.forEach(t),yho=r(Q4e," \u2014 "),xP=n(Q4e,"A",{href:!0});var JGr=s(xP);who=r(JGr,"UniSpeechForPreTraining"),JGr.forEach(t),Aho=r(Q4e," (UniSpeech model)"),Q4e.forEach(t),Lho=i(S),H_=n(S,"LI",{});var H4e=s(H_);hee=n(H4e,"STRONG",{});var YGr=s(hee);Bho=r(YGr,"unispeech-sat"),YGr.forEach(t),xho=r(H4e," \u2014 "),kP=n(H4e,"A",{href:!0});var KGr=s(kP);kho=r(KGr,"UniSpeechSatForPreTraining"),KGr.forEach(t),Rho=r(H4e," (UniSpeechSat model)"),H4e.forEach(t),Sho=i(S),U_=n(S,"LI",{});var U4e=s(U_);pee=n(U4e,"STRONG",{});var ZGr=s(pee);Pho=r(ZGr,"visual_bert"),ZGr.forEach(t),$ho=r(U4e," \u2014 "),RP=n(U4e,"A",{href:!0});var eXr=s(RP);Iho=r(eXr,"VisualBertForPreTraining"),eXr.forEach(t),jho=r(U4e," (VisualBert model)"),U4e.forEach(t),Dho=i(S),J_=n(S,"LI",{});var J4e=s(J_);_ee=n(J4e,"STRONG",{});var oXr=s(_ee);Nho=r(oXr,"vit_mae"),oXr.forEach(t),qho=r(J4e," \u2014 "),SP=n(J4e,"A",{href:!0});var rXr=s(SP);Oho=r(rXr,"ViTMAEForPreTraining"),rXr.forEach(t),Gho=r(J4e," (ViTMAE model)"),J4e.forEach(t),Xho=i(S),Y_=n(S,"LI",{});var Y4e=s(Y_);uee=n(Y4e,"STRONG",{});var tXr=s(uee);Vho=r(tXr,"wav2vec2"),tXr.forEach(t),zho=r(Y4e," \u2014 "),PP=n(Y4e,"A",{href:!0});var aXr=s(PP);Who=r(aXr,"Wav2Vec2ForPreTraining"),aXr.forEach(t),Qho=r(Y4e," (Wav2Vec2 model)"),Y4e.forEach(t),Hho=i(S),K_=n(S,"LI",{});var K4e=s(K_);bee=n(K4e,"STRONG",{});var nXr=s(bee);Uho=r(nXr,"xlm"),nXr.forEach(t),Jho=r(K4e," \u2014 "),$P=n(K4e,"A",{href:!0});var sXr=s($P);Yho=r(sXr,"XLMWithLMHeadModel"),sXr.forEach(t),Kho=r(K4e," (XLM model)"),K4e.forEach(t),Zho=i(S),Z_=n(S,"LI",{});var Z4e=s(Z_);vee=n(Z4e,"STRONG",{});var lXr=s(vee);epo=r(lXr,"xlm-roberta"),lXr.forEach(t),opo=r(Z4e," \u2014 "),IP=n(Z4e,"A",{href:!0});var iXr=s(IP);rpo=r(iXr,"XLMRobertaForMaskedLM"),iXr.forEach(t),tpo=r(Z4e," (XLM-RoBERTa model)"),Z4e.forEach(t),apo=i(S),eu=n(S,"LI",{});var eEe=s(eu);Tee=n(eEe,"STRONG",{});var dXr=s(Tee);npo=r(dXr,"xlm-roberta-xl"),dXr.forEach(t),spo=r(eEe," \u2014 "),jP=n(eEe,"A",{href:!0});var cXr=s(jP);lpo=r(cXr,"XLMRobertaXLForMaskedLM"),cXr.forEach(t),ipo=r(eEe," (XLM-RoBERTa-XL model)"),eEe.forEach(t),dpo=i(S),ou=n(S,"LI",{});var oEe=s(ou);Fee=n(oEe,"STRONG",{});var fXr=s(Fee);cpo=r(fXr,"xlnet"),fXr.forEach(t),fpo=r(oEe," \u2014 "),DP=n(oEe,"A",{href:!0});var mXr=s(DP);mpo=r(mXr,"XLNetLMHeadModel"),mXr.forEach(t),gpo=r(oEe," (XLNet model)"),oEe.forEach(t),S.forEach(t),hpo=i(Ot),ru=n(Ot,"P",{});var rEe=s(ru);ppo=r(rEe,"The model is set in evaluation mode by default using "),Cee=n(rEe,"CODE",{});var gXr=s(Cee);_po=r(gXr,"model.eval()"),gXr.forEach(t),upo=r(rEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mee=n(rEe,"CODE",{});var hXr=s(Mee);bpo=r(hXr,"model.train()"),hXr.forEach(t),rEe.forEach(t),vpo=i(Ot),Eee=n(Ot,"P",{});var pXr=s(Eee);Tpo=r(pXr,"Examples:"),pXr.forEach(t),Fpo=i(Ot),m(D3.$$.fragment,Ot),Ot.forEach(t),Us.forEach(t),_xe=i(d),td=n(d,"H2",{class:!0});var yRe=s(td);tu=n(yRe,"A",{id:!0,class:!0,href:!0});var _Xr=s(tu);yee=n(_Xr,"SPAN",{});var uXr=s(yee);m(N3.$$.fragment,uXr),uXr.forEach(t),_Xr.forEach(t),Cpo=i(yRe),wee=n(yRe,"SPAN",{});var bXr=s(wee);Mpo=r(bXr,"AutoModelForCausalLM"),bXr.forEach(t),yRe.forEach(t),uxe=i(d),Ko=n(d,"DIV",{class:!0});var Ys=s(Ko);m(q3.$$.fragment,Ys),Epo=i(Ys),ad=n(Ys,"P",{});var Az=s(ad);ypo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aee=n(Az,"CODE",{});var vXr=s(Aee);wpo=r(vXr,"from_pretrained()"),vXr.forEach(t),Apo=r(Az,"class method or the "),Lee=n(Az,"CODE",{});var TXr=s(Lee);Lpo=r(TXr,"from_config()"),TXr.forEach(t),Bpo=r(Az,`class
method.`),Az.forEach(t),xpo=i(Ys),O3=n(Ys,"P",{});var wRe=s(O3);kpo=r(wRe,"This class cannot be instantiated directly using "),Bee=n(wRe,"CODE",{});var FXr=s(Bee);Rpo=r(FXr,"__init__()"),FXr.forEach(t),Spo=r(wRe," (throws an error)."),wRe.forEach(t),Ppo=i(Ys),Wr=n(Ys,"DIV",{class:!0});var Ks=s(Wr);m(G3.$$.fragment,Ks),$po=i(Ks),xee=n(Ks,"P",{});var CXr=s(xee);Ipo=r(CXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CXr.forEach(t),jpo=i(Ks),nd=n(Ks,"P",{});var Lz=s(nd);Dpo=r(Lz,`Note:
Loading a model from its configuration file does `),kee=n(Lz,"STRONG",{});var MXr=s(kee);Npo=r(MXr,"not"),MXr.forEach(t),qpo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ree=n(Lz,"CODE",{});var EXr=s(Ree);Opo=r(EXr,"from_pretrained()"),EXr.forEach(t),Gpo=r(Lz,"to load the model weights."),Lz.forEach(t),Xpo=i(Ks),See=n(Ks,"P",{});var yXr=s(See);Vpo=r(yXr,"Examples:"),yXr.forEach(t),zpo=i(Ks),m(X3.$$.fragment,Ks),Ks.forEach(t),Wpo=i(Ys),Ne=n(Ys,"DIV",{class:!0});var Gt=s(Ne);m(V3.$$.fragment,Gt),Qpo=i(Gt),Pee=n(Gt,"P",{});var wXr=s(Pee);Hpo=r(wXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wXr.forEach(t),Upo=i(Gt),za=n(Gt,"P",{});var J4=s(za);Jpo=r(J4,"The model class to instantiate is selected based on the "),$ee=n(J4,"CODE",{});var AXr=s($ee);Ypo=r(AXr,"model_type"),AXr.forEach(t),Kpo=r(J4,` property of the config object (either
passed as an argument or loaded from `),Iee=n(J4,"CODE",{});var LXr=s(Iee);Zpo=r(LXr,"pretrained_model_name_or_path"),LXr.forEach(t),e_o=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jee=n(J4,"CODE",{});var BXr=s(jee);o_o=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),r_o=r(J4,":"),J4.forEach(t),t_o=i(Gt),$=n(Gt,"UL",{});var j=s($);au=n(j,"LI",{});var tEe=s(au);Dee=n(tEe,"STRONG",{});var xXr=s(Dee);a_o=r(xXr,"bart"),xXr.forEach(t),n_o=r(tEe," \u2014 "),NP=n(tEe,"A",{href:!0});var kXr=s(NP);s_o=r(kXr,"BartForCausalLM"),kXr.forEach(t),l_o=r(tEe," (BART model)"),tEe.forEach(t),i_o=i(j),nu=n(j,"LI",{});var aEe=s(nu);Nee=n(aEe,"STRONG",{});var RXr=s(Nee);d_o=r(RXr,"bert"),RXr.forEach(t),c_o=r(aEe," \u2014 "),qP=n(aEe,"A",{href:!0});var SXr=s(qP);f_o=r(SXr,"BertLMHeadModel"),SXr.forEach(t),m_o=r(aEe," (BERT model)"),aEe.forEach(t),g_o=i(j),su=n(j,"LI",{});var nEe=s(su);qee=n(nEe,"STRONG",{});var PXr=s(qee);h_o=r(PXr,"bert-generation"),PXr.forEach(t),p_o=r(nEe," \u2014 "),OP=n(nEe,"A",{href:!0});var $Xr=s(OP);__o=r($Xr,"BertGenerationDecoder"),$Xr.forEach(t),u_o=r(nEe," (Bert Generation model)"),nEe.forEach(t),b_o=i(j),lu=n(j,"LI",{});var sEe=s(lu);Oee=n(sEe,"STRONG",{});var IXr=s(Oee);v_o=r(IXr,"big_bird"),IXr.forEach(t),T_o=r(sEe," \u2014 "),GP=n(sEe,"A",{href:!0});var jXr=s(GP);F_o=r(jXr,"BigBirdForCausalLM"),jXr.forEach(t),C_o=r(sEe," (BigBird model)"),sEe.forEach(t),M_o=i(j),iu=n(j,"LI",{});var lEe=s(iu);Gee=n(lEe,"STRONG",{});var DXr=s(Gee);E_o=r(DXr,"bigbird_pegasus"),DXr.forEach(t),y_o=r(lEe," \u2014 "),XP=n(lEe,"A",{href:!0});var NXr=s(XP);w_o=r(NXr,"BigBirdPegasusForCausalLM"),NXr.forEach(t),A_o=r(lEe," (BigBirdPegasus model)"),lEe.forEach(t),L_o=i(j),du=n(j,"LI",{});var iEe=s(du);Xee=n(iEe,"STRONG",{});var qXr=s(Xee);B_o=r(qXr,"blenderbot"),qXr.forEach(t),x_o=r(iEe," \u2014 "),VP=n(iEe,"A",{href:!0});var OXr=s(VP);k_o=r(OXr,"BlenderbotForCausalLM"),OXr.forEach(t),R_o=r(iEe," (Blenderbot model)"),iEe.forEach(t),S_o=i(j),cu=n(j,"LI",{});var dEe=s(cu);Vee=n(dEe,"STRONG",{});var GXr=s(Vee);P_o=r(GXr,"blenderbot-small"),GXr.forEach(t),$_o=r(dEe," \u2014 "),zP=n(dEe,"A",{href:!0});var XXr=s(zP);I_o=r(XXr,"BlenderbotSmallForCausalLM"),XXr.forEach(t),j_o=r(dEe," (BlenderbotSmall model)"),dEe.forEach(t),D_o=i(j),fu=n(j,"LI",{});var cEe=s(fu);zee=n(cEe,"STRONG",{});var VXr=s(zee);N_o=r(VXr,"camembert"),VXr.forEach(t),q_o=r(cEe," \u2014 "),WP=n(cEe,"A",{href:!0});var zXr=s(WP);O_o=r(zXr,"CamembertForCausalLM"),zXr.forEach(t),G_o=r(cEe," (CamemBERT model)"),cEe.forEach(t),X_o=i(j),mu=n(j,"LI",{});var fEe=s(mu);Wee=n(fEe,"STRONG",{});var WXr=s(Wee);V_o=r(WXr,"ctrl"),WXr.forEach(t),z_o=r(fEe," \u2014 "),QP=n(fEe,"A",{href:!0});var QXr=s(QP);W_o=r(QXr,"CTRLLMHeadModel"),QXr.forEach(t),Q_o=r(fEe," (CTRL model)"),fEe.forEach(t),H_o=i(j),gu=n(j,"LI",{});var mEe=s(gu);Qee=n(mEe,"STRONG",{});var HXr=s(Qee);U_o=r(HXr,"data2vec-text"),HXr.forEach(t),J_o=r(mEe," \u2014 "),HP=n(mEe,"A",{href:!0});var UXr=s(HP);Y_o=r(UXr,"Data2VecTextForCausalLM"),UXr.forEach(t),K_o=r(mEe," (Data2VecText model)"),mEe.forEach(t),Z_o=i(j),hu=n(j,"LI",{});var gEe=s(hu);Hee=n(gEe,"STRONG",{});var JXr=s(Hee);euo=r(JXr,"electra"),JXr.forEach(t),ouo=r(gEe," \u2014 "),UP=n(gEe,"A",{href:!0});var YXr=s(UP);ruo=r(YXr,"ElectraForCausalLM"),YXr.forEach(t),tuo=r(gEe," (ELECTRA model)"),gEe.forEach(t),auo=i(j),pu=n(j,"LI",{});var hEe=s(pu);Uee=n(hEe,"STRONG",{});var KXr=s(Uee);nuo=r(KXr,"gpt2"),KXr.forEach(t),suo=r(hEe," \u2014 "),JP=n(hEe,"A",{href:!0});var ZXr=s(JP);luo=r(ZXr,"GPT2LMHeadModel"),ZXr.forEach(t),iuo=r(hEe," (OpenAI GPT-2 model)"),hEe.forEach(t),duo=i(j),_u=n(j,"LI",{});var pEe=s(_u);Jee=n(pEe,"STRONG",{});var eVr=s(Jee);cuo=r(eVr,"gpt_neo"),eVr.forEach(t),fuo=r(pEe," \u2014 "),YP=n(pEe,"A",{href:!0});var oVr=s(YP);muo=r(oVr,"GPTNeoForCausalLM"),oVr.forEach(t),guo=r(pEe," (GPT Neo model)"),pEe.forEach(t),huo=i(j),uu=n(j,"LI",{});var _Ee=s(uu);Yee=n(_Ee,"STRONG",{});var rVr=s(Yee);puo=r(rVr,"gptj"),rVr.forEach(t),_uo=r(_Ee," \u2014 "),KP=n(_Ee,"A",{href:!0});var tVr=s(KP);uuo=r(tVr,"GPTJForCausalLM"),tVr.forEach(t),buo=r(_Ee," (GPT-J model)"),_Ee.forEach(t),vuo=i(j),bu=n(j,"LI",{});var uEe=s(bu);Kee=n(uEe,"STRONG",{});var aVr=s(Kee);Tuo=r(aVr,"marian"),aVr.forEach(t),Fuo=r(uEe," \u2014 "),ZP=n(uEe,"A",{href:!0});var nVr=s(ZP);Cuo=r(nVr,"MarianForCausalLM"),nVr.forEach(t),Muo=r(uEe," (Marian model)"),uEe.forEach(t),Euo=i(j),vu=n(j,"LI",{});var bEe=s(vu);Zee=n(bEe,"STRONG",{});var sVr=s(Zee);yuo=r(sVr,"mbart"),sVr.forEach(t),wuo=r(bEe," \u2014 "),e$=n(bEe,"A",{href:!0});var lVr=s(e$);Auo=r(lVr,"MBartForCausalLM"),lVr.forEach(t),Luo=r(bEe," (mBART model)"),bEe.forEach(t),Buo=i(j),Tu=n(j,"LI",{});var vEe=s(Tu);eoe=n(vEe,"STRONG",{});var iVr=s(eoe);xuo=r(iVr,"megatron-bert"),iVr.forEach(t),kuo=r(vEe," \u2014 "),o$=n(vEe,"A",{href:!0});var dVr=s(o$);Ruo=r(dVr,"MegatronBertForCausalLM"),dVr.forEach(t),Suo=r(vEe," (MegatronBert model)"),vEe.forEach(t),Puo=i(j),Fu=n(j,"LI",{});var TEe=s(Fu);ooe=n(TEe,"STRONG",{});var cVr=s(ooe);$uo=r(cVr,"openai-gpt"),cVr.forEach(t),Iuo=r(TEe," \u2014 "),r$=n(TEe,"A",{href:!0});var fVr=s(r$);juo=r(fVr,"OpenAIGPTLMHeadModel"),fVr.forEach(t),Duo=r(TEe," (OpenAI GPT model)"),TEe.forEach(t),Nuo=i(j),Cu=n(j,"LI",{});var FEe=s(Cu);roe=n(FEe,"STRONG",{});var mVr=s(roe);quo=r(mVr,"pegasus"),mVr.forEach(t),Ouo=r(FEe," \u2014 "),t$=n(FEe,"A",{href:!0});var gVr=s(t$);Guo=r(gVr,"PegasusForCausalLM"),gVr.forEach(t),Xuo=r(FEe," (Pegasus model)"),FEe.forEach(t),Vuo=i(j),Mu=n(j,"LI",{});var CEe=s(Mu);toe=n(CEe,"STRONG",{});var hVr=s(toe);zuo=r(hVr,"plbart"),hVr.forEach(t),Wuo=r(CEe," \u2014 "),a$=n(CEe,"A",{href:!0});var pVr=s(a$);Quo=r(pVr,"PLBartForCausalLM"),pVr.forEach(t),Huo=r(CEe," (PLBart model)"),CEe.forEach(t),Uuo=i(j),Eu=n(j,"LI",{});var MEe=s(Eu);aoe=n(MEe,"STRONG",{});var _Vr=s(aoe);Juo=r(_Vr,"prophetnet"),_Vr.forEach(t),Yuo=r(MEe," \u2014 "),n$=n(MEe,"A",{href:!0});var uVr=s(n$);Kuo=r(uVr,"ProphetNetForCausalLM"),uVr.forEach(t),Zuo=r(MEe," (ProphetNet model)"),MEe.forEach(t),e5o=i(j),yu=n(j,"LI",{});var EEe=s(yu);noe=n(EEe,"STRONG",{});var bVr=s(noe);o5o=r(bVr,"qdqbert"),bVr.forEach(t),r5o=r(EEe," \u2014 "),s$=n(EEe,"A",{href:!0});var vVr=s(s$);t5o=r(vVr,"QDQBertLMHeadModel"),vVr.forEach(t),a5o=r(EEe," (QDQBert model)"),EEe.forEach(t),n5o=i(j),wu=n(j,"LI",{});var yEe=s(wu);soe=n(yEe,"STRONG",{});var TVr=s(soe);s5o=r(TVr,"reformer"),TVr.forEach(t),l5o=r(yEe," \u2014 "),l$=n(yEe,"A",{href:!0});var FVr=s(l$);i5o=r(FVr,"ReformerModelWithLMHead"),FVr.forEach(t),d5o=r(yEe," (Reformer model)"),yEe.forEach(t),c5o=i(j),Au=n(j,"LI",{});var wEe=s(Au);loe=n(wEe,"STRONG",{});var CVr=s(loe);f5o=r(CVr,"rembert"),CVr.forEach(t),m5o=r(wEe," \u2014 "),i$=n(wEe,"A",{href:!0});var MVr=s(i$);g5o=r(MVr,"RemBertForCausalLM"),MVr.forEach(t),h5o=r(wEe," (RemBERT model)"),wEe.forEach(t),p5o=i(j),Lu=n(j,"LI",{});var AEe=s(Lu);ioe=n(AEe,"STRONG",{});var EVr=s(ioe);_5o=r(EVr,"roberta"),EVr.forEach(t),u5o=r(AEe," \u2014 "),d$=n(AEe,"A",{href:!0});var yVr=s(d$);b5o=r(yVr,"RobertaForCausalLM"),yVr.forEach(t),v5o=r(AEe," (RoBERTa model)"),AEe.forEach(t),T5o=i(j),Bu=n(j,"LI",{});var LEe=s(Bu);doe=n(LEe,"STRONG",{});var wVr=s(doe);F5o=r(wVr,"roformer"),wVr.forEach(t),C5o=r(LEe," \u2014 "),c$=n(LEe,"A",{href:!0});var AVr=s(c$);M5o=r(AVr,"RoFormerForCausalLM"),AVr.forEach(t),E5o=r(LEe," (RoFormer model)"),LEe.forEach(t),y5o=i(j),xu=n(j,"LI",{});var BEe=s(xu);coe=n(BEe,"STRONG",{});var LVr=s(coe);w5o=r(LVr,"speech_to_text_2"),LVr.forEach(t),A5o=r(BEe," \u2014 "),f$=n(BEe,"A",{href:!0});var BVr=s(f$);L5o=r(BVr,"Speech2Text2ForCausalLM"),BVr.forEach(t),B5o=r(BEe," (Speech2Text2 model)"),BEe.forEach(t),x5o=i(j),ku=n(j,"LI",{});var xEe=s(ku);foe=n(xEe,"STRONG",{});var xVr=s(foe);k5o=r(xVr,"transfo-xl"),xVr.forEach(t),R5o=r(xEe," \u2014 "),m$=n(xEe,"A",{href:!0});var kVr=s(m$);S5o=r(kVr,"TransfoXLLMHeadModel"),kVr.forEach(t),P5o=r(xEe," (Transformer-XL model)"),xEe.forEach(t),$5o=i(j),Ru=n(j,"LI",{});var kEe=s(Ru);moe=n(kEe,"STRONG",{});var RVr=s(moe);I5o=r(RVr,"trocr"),RVr.forEach(t),j5o=r(kEe," \u2014 "),g$=n(kEe,"A",{href:!0});var SVr=s(g$);D5o=r(SVr,"TrOCRForCausalLM"),SVr.forEach(t),N5o=r(kEe," (TrOCR model)"),kEe.forEach(t),q5o=i(j),Su=n(j,"LI",{});var REe=s(Su);goe=n(REe,"STRONG",{});var PVr=s(goe);O5o=r(PVr,"xglm"),PVr.forEach(t),G5o=r(REe," \u2014 "),h$=n(REe,"A",{href:!0});var $Vr=s(h$);X5o=r($Vr,"XGLMForCausalLM"),$Vr.forEach(t),V5o=r(REe," (XGLM model)"),REe.forEach(t),z5o=i(j),Pu=n(j,"LI",{});var SEe=s(Pu);hoe=n(SEe,"STRONG",{});var IVr=s(hoe);W5o=r(IVr,"xlm"),IVr.forEach(t),Q5o=r(SEe," \u2014 "),p$=n(SEe,"A",{href:!0});var jVr=s(p$);H5o=r(jVr,"XLMWithLMHeadModel"),jVr.forEach(t),U5o=r(SEe," (XLM model)"),SEe.forEach(t),J5o=i(j),$u=n(j,"LI",{});var PEe=s($u);poe=n(PEe,"STRONG",{});var DVr=s(poe);Y5o=r(DVr,"xlm-prophetnet"),DVr.forEach(t),K5o=r(PEe," \u2014 "),_$=n(PEe,"A",{href:!0});var NVr=s(_$);Z5o=r(NVr,"XLMProphetNetForCausalLM"),NVr.forEach(t),e2o=r(PEe," (XLMProphetNet model)"),PEe.forEach(t),o2o=i(j),Iu=n(j,"LI",{});var $Ee=s(Iu);_oe=n($Ee,"STRONG",{});var qVr=s(_oe);r2o=r(qVr,"xlm-roberta"),qVr.forEach(t),t2o=r($Ee," \u2014 "),u$=n($Ee,"A",{href:!0});var OVr=s(u$);a2o=r(OVr,"XLMRobertaForCausalLM"),OVr.forEach(t),n2o=r($Ee," (XLM-RoBERTa model)"),$Ee.forEach(t),s2o=i(j),ju=n(j,"LI",{});var IEe=s(ju);uoe=n(IEe,"STRONG",{});var GVr=s(uoe);l2o=r(GVr,"xlm-roberta-xl"),GVr.forEach(t),i2o=r(IEe," \u2014 "),b$=n(IEe,"A",{href:!0});var XVr=s(b$);d2o=r(XVr,"XLMRobertaXLForCausalLM"),XVr.forEach(t),c2o=r(IEe," (XLM-RoBERTa-XL model)"),IEe.forEach(t),f2o=i(j),Du=n(j,"LI",{});var jEe=s(Du);boe=n(jEe,"STRONG",{});var VVr=s(boe);m2o=r(VVr,"xlnet"),VVr.forEach(t),g2o=r(jEe," \u2014 "),v$=n(jEe,"A",{href:!0});var zVr=s(v$);h2o=r(zVr,"XLNetLMHeadModel"),zVr.forEach(t),p2o=r(jEe," (XLNet model)"),jEe.forEach(t),j.forEach(t),_2o=i(Gt),Nu=n(Gt,"P",{});var DEe=s(Nu);u2o=r(DEe,"The model is set in evaluation mode by default using "),voe=n(DEe,"CODE",{});var WVr=s(voe);b2o=r(WVr,"model.eval()"),WVr.forEach(t),v2o=r(DEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Toe=n(DEe,"CODE",{});var QVr=s(Toe);T2o=r(QVr,"model.train()"),QVr.forEach(t),DEe.forEach(t),F2o=i(Gt),Foe=n(Gt,"P",{});var HVr=s(Foe);C2o=r(HVr,"Examples:"),HVr.forEach(t),M2o=i(Gt),m(z3.$$.fragment,Gt),Gt.forEach(t),Ys.forEach(t),bxe=i(d),sd=n(d,"H2",{class:!0});var ARe=s(sd);qu=n(ARe,"A",{id:!0,class:!0,href:!0});var UVr=s(qu);Coe=n(UVr,"SPAN",{});var JVr=s(Coe);m(W3.$$.fragment,JVr),JVr.forEach(t),UVr.forEach(t),E2o=i(ARe),Moe=n(ARe,"SPAN",{});var YVr=s(Moe);y2o=r(YVr,"AutoModelForMaskedLM"),YVr.forEach(t),ARe.forEach(t),vxe=i(d),Zo=n(d,"DIV",{class:!0});var Zs=s(Zo);m(Q3.$$.fragment,Zs),w2o=i(Zs),ld=n(Zs,"P",{});var Bz=s(ld);A2o=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Eoe=n(Bz,"CODE",{});var KVr=s(Eoe);L2o=r(KVr,"from_pretrained()"),KVr.forEach(t),B2o=r(Bz,"class method or the "),yoe=n(Bz,"CODE",{});var ZVr=s(yoe);x2o=r(ZVr,"from_config()"),ZVr.forEach(t),k2o=r(Bz,`class
method.`),Bz.forEach(t),R2o=i(Zs),H3=n(Zs,"P",{});var LRe=s(H3);S2o=r(LRe,"This class cannot be instantiated directly using "),woe=n(LRe,"CODE",{});var ezr=s(woe);P2o=r(ezr,"__init__()"),ezr.forEach(t),$2o=r(LRe," (throws an error)."),LRe.forEach(t),I2o=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(U3.$$.fragment,el),j2o=i(el),Aoe=n(el,"P",{});var ozr=s(Aoe);D2o=r(ozr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ozr.forEach(t),N2o=i(el),id=n(el,"P",{});var xz=s(id);q2o=r(xz,`Note:
Loading a model from its configuration file does `),Loe=n(xz,"STRONG",{});var rzr=s(Loe);O2o=r(rzr,"not"),rzr.forEach(t),G2o=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Boe=n(xz,"CODE",{});var tzr=s(Boe);X2o=r(tzr,"from_pretrained()"),tzr.forEach(t),V2o=r(xz,"to load the model weights."),xz.forEach(t),z2o=i(el),xoe=n(el,"P",{});var azr=s(xoe);W2o=r(azr,"Examples:"),azr.forEach(t),Q2o=i(el),m(J3.$$.fragment,el),el.forEach(t),H2o=i(Zs),qe=n(Zs,"DIV",{class:!0});var Xt=s(qe);m(Y3.$$.fragment,Xt),U2o=i(Xt),koe=n(Xt,"P",{});var nzr=s(koe);J2o=r(nzr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nzr.forEach(t),Y2o=i(Xt),Wa=n(Xt,"P",{});var Y4=s(Wa);K2o=r(Y4,"The model class to instantiate is selected based on the "),Roe=n(Y4,"CODE",{});var szr=s(Roe);Z2o=r(szr,"model_type"),szr.forEach(t),e1o=r(Y4,` property of the config object (either
passed as an argument or loaded from `),Soe=n(Y4,"CODE",{});var lzr=s(Soe);o1o=r(lzr,"pretrained_model_name_or_path"),lzr.forEach(t),r1o=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Poe=n(Y4,"CODE",{});var izr=s(Poe);t1o=r(izr,"pretrained_model_name_or_path"),izr.forEach(t),a1o=r(Y4,":"),Y4.forEach(t),n1o=i(Xt),I=n(Xt,"UL",{});var D=s(I);Ou=n(D,"LI",{});var NEe=s(Ou);$oe=n(NEe,"STRONG",{});var dzr=s($oe);s1o=r(dzr,"albert"),dzr.forEach(t),l1o=r(NEe," \u2014 "),T$=n(NEe,"A",{href:!0});var czr=s(T$);i1o=r(czr,"AlbertForMaskedLM"),czr.forEach(t),d1o=r(NEe," (ALBERT model)"),NEe.forEach(t),c1o=i(D),Gu=n(D,"LI",{});var qEe=s(Gu);Ioe=n(qEe,"STRONG",{});var fzr=s(Ioe);f1o=r(fzr,"bart"),fzr.forEach(t),m1o=r(qEe," \u2014 "),F$=n(qEe,"A",{href:!0});var mzr=s(F$);g1o=r(mzr,"BartForConditionalGeneration"),mzr.forEach(t),h1o=r(qEe," (BART model)"),qEe.forEach(t),p1o=i(D),Xu=n(D,"LI",{});var OEe=s(Xu);joe=n(OEe,"STRONG",{});var gzr=s(joe);_1o=r(gzr,"bert"),gzr.forEach(t),u1o=r(OEe," \u2014 "),C$=n(OEe,"A",{href:!0});var hzr=s(C$);b1o=r(hzr,"BertForMaskedLM"),hzr.forEach(t),v1o=r(OEe," (BERT model)"),OEe.forEach(t),T1o=i(D),Vu=n(D,"LI",{});var GEe=s(Vu);Doe=n(GEe,"STRONG",{});var pzr=s(Doe);F1o=r(pzr,"big_bird"),pzr.forEach(t),C1o=r(GEe," \u2014 "),M$=n(GEe,"A",{href:!0});var _zr=s(M$);M1o=r(_zr,"BigBirdForMaskedLM"),_zr.forEach(t),E1o=r(GEe," (BigBird model)"),GEe.forEach(t),y1o=i(D),zu=n(D,"LI",{});var XEe=s(zu);Noe=n(XEe,"STRONG",{});var uzr=s(Noe);w1o=r(uzr,"camembert"),uzr.forEach(t),A1o=r(XEe," \u2014 "),E$=n(XEe,"A",{href:!0});var bzr=s(E$);L1o=r(bzr,"CamembertForMaskedLM"),bzr.forEach(t),B1o=r(XEe," (CamemBERT model)"),XEe.forEach(t),x1o=i(D),Wu=n(D,"LI",{});var VEe=s(Wu);qoe=n(VEe,"STRONG",{});var vzr=s(qoe);k1o=r(vzr,"convbert"),vzr.forEach(t),R1o=r(VEe," \u2014 "),y$=n(VEe,"A",{href:!0});var Tzr=s(y$);S1o=r(Tzr,"ConvBertForMaskedLM"),Tzr.forEach(t),P1o=r(VEe," (ConvBERT model)"),VEe.forEach(t),$1o=i(D),Qu=n(D,"LI",{});var zEe=s(Qu);Ooe=n(zEe,"STRONG",{});var Fzr=s(Ooe);I1o=r(Fzr,"data2vec-text"),Fzr.forEach(t),j1o=r(zEe," \u2014 "),w$=n(zEe,"A",{href:!0});var Czr=s(w$);D1o=r(Czr,"Data2VecTextForMaskedLM"),Czr.forEach(t),N1o=r(zEe," (Data2VecText model)"),zEe.forEach(t),q1o=i(D),Hu=n(D,"LI",{});var WEe=s(Hu);Goe=n(WEe,"STRONG",{});var Mzr=s(Goe);O1o=r(Mzr,"deberta"),Mzr.forEach(t),G1o=r(WEe," \u2014 "),A$=n(WEe,"A",{href:!0});var Ezr=s(A$);X1o=r(Ezr,"DebertaForMaskedLM"),Ezr.forEach(t),V1o=r(WEe," (DeBERTa model)"),WEe.forEach(t),z1o=i(D),Uu=n(D,"LI",{});var QEe=s(Uu);Xoe=n(QEe,"STRONG",{});var yzr=s(Xoe);W1o=r(yzr,"deberta-v2"),yzr.forEach(t),Q1o=r(QEe," \u2014 "),L$=n(QEe,"A",{href:!0});var wzr=s(L$);H1o=r(wzr,"DebertaV2ForMaskedLM"),wzr.forEach(t),U1o=r(QEe," (DeBERTa-v2 model)"),QEe.forEach(t),J1o=i(D),Ju=n(D,"LI",{});var HEe=s(Ju);Voe=n(HEe,"STRONG",{});var Azr=s(Voe);Y1o=r(Azr,"distilbert"),Azr.forEach(t),K1o=r(HEe," \u2014 "),B$=n(HEe,"A",{href:!0});var Lzr=s(B$);Z1o=r(Lzr,"DistilBertForMaskedLM"),Lzr.forEach(t),ebo=r(HEe," (DistilBERT model)"),HEe.forEach(t),obo=i(D),Yu=n(D,"LI",{});var UEe=s(Yu);zoe=n(UEe,"STRONG",{});var Bzr=s(zoe);rbo=r(Bzr,"electra"),Bzr.forEach(t),tbo=r(UEe," \u2014 "),x$=n(UEe,"A",{href:!0});var xzr=s(x$);abo=r(xzr,"ElectraForMaskedLM"),xzr.forEach(t),nbo=r(UEe," (ELECTRA model)"),UEe.forEach(t),sbo=i(D),Ku=n(D,"LI",{});var JEe=s(Ku);Woe=n(JEe,"STRONG",{});var kzr=s(Woe);lbo=r(kzr,"flaubert"),kzr.forEach(t),ibo=r(JEe," \u2014 "),k$=n(JEe,"A",{href:!0});var Rzr=s(k$);dbo=r(Rzr,"FlaubertWithLMHeadModel"),Rzr.forEach(t),cbo=r(JEe," (FlauBERT model)"),JEe.forEach(t),fbo=i(D),Zu=n(D,"LI",{});var YEe=s(Zu);Qoe=n(YEe,"STRONG",{});var Szr=s(Qoe);mbo=r(Szr,"fnet"),Szr.forEach(t),gbo=r(YEe," \u2014 "),R$=n(YEe,"A",{href:!0});var Pzr=s(R$);hbo=r(Pzr,"FNetForMaskedLM"),Pzr.forEach(t),pbo=r(YEe," (FNet model)"),YEe.forEach(t),_bo=i(D),e5=n(D,"LI",{});var KEe=s(e5);Hoe=n(KEe,"STRONG",{});var $zr=s(Hoe);ubo=r($zr,"funnel"),$zr.forEach(t),bbo=r(KEe," \u2014 "),S$=n(KEe,"A",{href:!0});var Izr=s(S$);vbo=r(Izr,"FunnelForMaskedLM"),Izr.forEach(t),Tbo=r(KEe," (Funnel Transformer model)"),KEe.forEach(t),Fbo=i(D),o5=n(D,"LI",{});var ZEe=s(o5);Uoe=n(ZEe,"STRONG",{});var jzr=s(Uoe);Cbo=r(jzr,"ibert"),jzr.forEach(t),Mbo=r(ZEe," \u2014 "),P$=n(ZEe,"A",{href:!0});var Dzr=s(P$);Ebo=r(Dzr,"IBertForMaskedLM"),Dzr.forEach(t),ybo=r(ZEe," (I-BERT model)"),ZEe.forEach(t),wbo=i(D),r5=n(D,"LI",{});var e3e=s(r5);Joe=n(e3e,"STRONG",{});var Nzr=s(Joe);Abo=r(Nzr,"layoutlm"),Nzr.forEach(t),Lbo=r(e3e," \u2014 "),$$=n(e3e,"A",{href:!0});var qzr=s($$);Bbo=r(qzr,"LayoutLMForMaskedLM"),qzr.forEach(t),xbo=r(e3e," (LayoutLM model)"),e3e.forEach(t),kbo=i(D),t5=n(D,"LI",{});var o3e=s(t5);Yoe=n(o3e,"STRONG",{});var Ozr=s(Yoe);Rbo=r(Ozr,"longformer"),Ozr.forEach(t),Sbo=r(o3e," \u2014 "),I$=n(o3e,"A",{href:!0});var Gzr=s(I$);Pbo=r(Gzr,"LongformerForMaskedLM"),Gzr.forEach(t),$bo=r(o3e," (Longformer model)"),o3e.forEach(t),Ibo=i(D),a5=n(D,"LI",{});var r3e=s(a5);Koe=n(r3e,"STRONG",{});var Xzr=s(Koe);jbo=r(Xzr,"mbart"),Xzr.forEach(t),Dbo=r(r3e," \u2014 "),j$=n(r3e,"A",{href:!0});var Vzr=s(j$);Nbo=r(Vzr,"MBartForConditionalGeneration"),Vzr.forEach(t),qbo=r(r3e," (mBART model)"),r3e.forEach(t),Obo=i(D),n5=n(D,"LI",{});var t3e=s(n5);Zoe=n(t3e,"STRONG",{});var zzr=s(Zoe);Gbo=r(zzr,"megatron-bert"),zzr.forEach(t),Xbo=r(t3e," \u2014 "),D$=n(t3e,"A",{href:!0});var Wzr=s(D$);Vbo=r(Wzr,"MegatronBertForMaskedLM"),Wzr.forEach(t),zbo=r(t3e," (MegatronBert model)"),t3e.forEach(t),Wbo=i(D),s5=n(D,"LI",{});var a3e=s(s5);ere=n(a3e,"STRONG",{});var Qzr=s(ere);Qbo=r(Qzr,"mobilebert"),Qzr.forEach(t),Hbo=r(a3e," \u2014 "),N$=n(a3e,"A",{href:!0});var Hzr=s(N$);Ubo=r(Hzr,"MobileBertForMaskedLM"),Hzr.forEach(t),Jbo=r(a3e," (MobileBERT model)"),a3e.forEach(t),Ybo=i(D),l5=n(D,"LI",{});var n3e=s(l5);ore=n(n3e,"STRONG",{});var Uzr=s(ore);Kbo=r(Uzr,"mpnet"),Uzr.forEach(t),Zbo=r(n3e," \u2014 "),q$=n(n3e,"A",{href:!0});var Jzr=s(q$);evo=r(Jzr,"MPNetForMaskedLM"),Jzr.forEach(t),ovo=r(n3e," (MPNet model)"),n3e.forEach(t),rvo=i(D),i5=n(D,"LI",{});var s3e=s(i5);rre=n(s3e,"STRONG",{});var Yzr=s(rre);tvo=r(Yzr,"nystromformer"),Yzr.forEach(t),avo=r(s3e," \u2014 "),O$=n(s3e,"A",{href:!0});var Kzr=s(O$);nvo=r(Kzr,"NystromformerForMaskedLM"),Kzr.forEach(t),svo=r(s3e," (Nystromformer model)"),s3e.forEach(t),lvo=i(D),d5=n(D,"LI",{});var l3e=s(d5);tre=n(l3e,"STRONG",{});var Zzr=s(tre);ivo=r(Zzr,"perceiver"),Zzr.forEach(t),dvo=r(l3e," \u2014 "),G$=n(l3e,"A",{href:!0});var eWr=s(G$);cvo=r(eWr,"PerceiverForMaskedLM"),eWr.forEach(t),fvo=r(l3e," (Perceiver model)"),l3e.forEach(t),mvo=i(D),c5=n(D,"LI",{});var i3e=s(c5);are=n(i3e,"STRONG",{});var oWr=s(are);gvo=r(oWr,"qdqbert"),oWr.forEach(t),hvo=r(i3e," \u2014 "),X$=n(i3e,"A",{href:!0});var rWr=s(X$);pvo=r(rWr,"QDQBertForMaskedLM"),rWr.forEach(t),_vo=r(i3e," (QDQBert model)"),i3e.forEach(t),uvo=i(D),f5=n(D,"LI",{});var d3e=s(f5);nre=n(d3e,"STRONG",{});var tWr=s(nre);bvo=r(tWr,"reformer"),tWr.forEach(t),vvo=r(d3e," \u2014 "),V$=n(d3e,"A",{href:!0});var aWr=s(V$);Tvo=r(aWr,"ReformerForMaskedLM"),aWr.forEach(t),Fvo=r(d3e," (Reformer model)"),d3e.forEach(t),Cvo=i(D),m5=n(D,"LI",{});var c3e=s(m5);sre=n(c3e,"STRONG",{});var nWr=s(sre);Mvo=r(nWr,"rembert"),nWr.forEach(t),Evo=r(c3e," \u2014 "),z$=n(c3e,"A",{href:!0});var sWr=s(z$);yvo=r(sWr,"RemBertForMaskedLM"),sWr.forEach(t),wvo=r(c3e," (RemBERT model)"),c3e.forEach(t),Avo=i(D),g5=n(D,"LI",{});var f3e=s(g5);lre=n(f3e,"STRONG",{});var lWr=s(lre);Lvo=r(lWr,"roberta"),lWr.forEach(t),Bvo=r(f3e," \u2014 "),W$=n(f3e,"A",{href:!0});var iWr=s(W$);xvo=r(iWr,"RobertaForMaskedLM"),iWr.forEach(t),kvo=r(f3e," (RoBERTa model)"),f3e.forEach(t),Rvo=i(D),h5=n(D,"LI",{});var m3e=s(h5);ire=n(m3e,"STRONG",{});var dWr=s(ire);Svo=r(dWr,"roformer"),dWr.forEach(t),Pvo=r(m3e," \u2014 "),Q$=n(m3e,"A",{href:!0});var cWr=s(Q$);$vo=r(cWr,"RoFormerForMaskedLM"),cWr.forEach(t),Ivo=r(m3e," (RoFormer model)"),m3e.forEach(t),jvo=i(D),p5=n(D,"LI",{});var g3e=s(p5);dre=n(g3e,"STRONG",{});var fWr=s(dre);Dvo=r(fWr,"squeezebert"),fWr.forEach(t),Nvo=r(g3e," \u2014 "),H$=n(g3e,"A",{href:!0});var mWr=s(H$);qvo=r(mWr,"SqueezeBertForMaskedLM"),mWr.forEach(t),Ovo=r(g3e," (SqueezeBERT model)"),g3e.forEach(t),Gvo=i(D),_5=n(D,"LI",{});var h3e=s(_5);cre=n(h3e,"STRONG",{});var gWr=s(cre);Xvo=r(gWr,"tapas"),gWr.forEach(t),Vvo=r(h3e," \u2014 "),U$=n(h3e,"A",{href:!0});var hWr=s(U$);zvo=r(hWr,"TapasForMaskedLM"),hWr.forEach(t),Wvo=r(h3e," (TAPAS model)"),h3e.forEach(t),Qvo=i(D),u5=n(D,"LI",{});var p3e=s(u5);fre=n(p3e,"STRONG",{});var pWr=s(fre);Hvo=r(pWr,"wav2vec2"),pWr.forEach(t),Uvo=r(p3e," \u2014 "),mre=n(p3e,"CODE",{});var _Wr=s(mre);Jvo=r(_Wr,"Wav2Vec2ForMaskedLM"),_Wr.forEach(t),Yvo=r(p3e,"(Wav2Vec2 model)"),p3e.forEach(t),Kvo=i(D),b5=n(D,"LI",{});var _3e=s(b5);gre=n(_3e,"STRONG",{});var uWr=s(gre);Zvo=r(uWr,"xlm"),uWr.forEach(t),eTo=r(_3e," \u2014 "),J$=n(_3e,"A",{href:!0});var bWr=s(J$);oTo=r(bWr,"XLMWithLMHeadModel"),bWr.forEach(t),rTo=r(_3e," (XLM model)"),_3e.forEach(t),tTo=i(D),v5=n(D,"LI",{});var u3e=s(v5);hre=n(u3e,"STRONG",{});var vWr=s(hre);aTo=r(vWr,"xlm-roberta"),vWr.forEach(t),nTo=r(u3e," \u2014 "),Y$=n(u3e,"A",{href:!0});var TWr=s(Y$);sTo=r(TWr,"XLMRobertaForMaskedLM"),TWr.forEach(t),lTo=r(u3e," (XLM-RoBERTa model)"),u3e.forEach(t),iTo=i(D),T5=n(D,"LI",{});var b3e=s(T5);pre=n(b3e,"STRONG",{});var FWr=s(pre);dTo=r(FWr,"xlm-roberta-xl"),FWr.forEach(t),cTo=r(b3e," \u2014 "),K$=n(b3e,"A",{href:!0});var CWr=s(K$);fTo=r(CWr,"XLMRobertaXLForMaskedLM"),CWr.forEach(t),mTo=r(b3e," (XLM-RoBERTa-XL model)"),b3e.forEach(t),gTo=i(D),F5=n(D,"LI",{});var v3e=s(F5);_re=n(v3e,"STRONG",{});var MWr=s(_re);hTo=r(MWr,"yoso"),MWr.forEach(t),pTo=r(v3e," \u2014 "),Z$=n(v3e,"A",{href:!0});var EWr=s(Z$);_To=r(EWr,"YosoForMaskedLM"),EWr.forEach(t),uTo=r(v3e," (YOSO model)"),v3e.forEach(t),D.forEach(t),bTo=i(Xt),C5=n(Xt,"P",{});var T3e=s(C5);vTo=r(T3e,"The model is set in evaluation mode by default using "),ure=n(T3e,"CODE",{});var yWr=s(ure);TTo=r(yWr,"model.eval()"),yWr.forEach(t),FTo=r(T3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bre=n(T3e,"CODE",{});var wWr=s(bre);CTo=r(wWr,"model.train()"),wWr.forEach(t),T3e.forEach(t),MTo=i(Xt),vre=n(Xt,"P",{});var AWr=s(vre);ETo=r(AWr,"Examples:"),AWr.forEach(t),yTo=i(Xt),m(K3.$$.fragment,Xt),Xt.forEach(t),Zs.forEach(t),Txe=i(d),dd=n(d,"H2",{class:!0});var BRe=s(dd);M5=n(BRe,"A",{id:!0,class:!0,href:!0});var LWr=s(M5);Tre=n(LWr,"SPAN",{});var BWr=s(Tre);m(Z3.$$.fragment,BWr),BWr.forEach(t),LWr.forEach(t),wTo=i(BRe),Fre=n(BRe,"SPAN",{});var xWr=s(Fre);ATo=r(xWr,"AutoModelForSeq2SeqLM"),xWr.forEach(t),BRe.forEach(t),Fxe=i(d),er=n(d,"DIV",{class:!0});var ol=s(er);m(ey.$$.fragment,ol),LTo=i(ol),cd=n(ol,"P",{});var kz=s(cd);BTo=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cre=n(kz,"CODE",{});var kWr=s(Cre);xTo=r(kWr,"from_pretrained()"),kWr.forEach(t),kTo=r(kz,"class method or the "),Mre=n(kz,"CODE",{});var RWr=s(Mre);RTo=r(RWr,"from_config()"),RWr.forEach(t),STo=r(kz,`class
method.`),kz.forEach(t),PTo=i(ol),oy=n(ol,"P",{});var xRe=s(oy);$To=r(xRe,"This class cannot be instantiated directly using "),Ere=n(xRe,"CODE",{});var SWr=s(Ere);ITo=r(SWr,"__init__()"),SWr.forEach(t),jTo=r(xRe," (throws an error)."),xRe.forEach(t),DTo=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(ry.$$.fragment,rl),NTo=i(rl),yre=n(rl,"P",{});var PWr=s(yre);qTo=r(PWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PWr.forEach(t),OTo=i(rl),fd=n(rl,"P",{});var Rz=s(fd);GTo=r(Rz,`Note:
Loading a model from its configuration file does `),wre=n(Rz,"STRONG",{});var $Wr=s(wre);XTo=r($Wr,"not"),$Wr.forEach(t),VTo=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Rz,"CODE",{});var IWr=s(Are);zTo=r(IWr,"from_pretrained()"),IWr.forEach(t),WTo=r(Rz,"to load the model weights."),Rz.forEach(t),QTo=i(rl),Lre=n(rl,"P",{});var jWr=s(Lre);HTo=r(jWr,"Examples:"),jWr.forEach(t),UTo=i(rl),m(ty.$$.fragment,rl),rl.forEach(t),JTo=i(ol),Oe=n(ol,"DIV",{class:!0});var Vt=s(Oe);m(ay.$$.fragment,Vt),YTo=i(Vt),Bre=n(Vt,"P",{});var DWr=s(Bre);KTo=r(DWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DWr.forEach(t),ZTo=i(Vt),Qa=n(Vt,"P",{});var K4=s(Qa);eFo=r(K4,"The model class to instantiate is selected based on the "),xre=n(K4,"CODE",{});var NWr=s(xre);oFo=r(NWr,"model_type"),NWr.forEach(t),rFo=r(K4,` property of the config object (either
passed as an argument or loaded from `),kre=n(K4,"CODE",{});var qWr=s(kre);tFo=r(qWr,"pretrained_model_name_or_path"),qWr.forEach(t),aFo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rre=n(K4,"CODE",{});var OWr=s(Rre);nFo=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),sFo=r(K4,":"),K4.forEach(t),lFo=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);E5=n(ie,"LI",{});var F3e=s(E5);Sre=n(F3e,"STRONG",{});var GWr=s(Sre);iFo=r(GWr,"bart"),GWr.forEach(t),dFo=r(F3e," \u2014 "),eI=n(F3e,"A",{href:!0});var XWr=s(eI);cFo=r(XWr,"BartForConditionalGeneration"),XWr.forEach(t),fFo=r(F3e," (BART model)"),F3e.forEach(t),mFo=i(ie),y5=n(ie,"LI",{});var C3e=s(y5);Pre=n(C3e,"STRONG",{});var VWr=s(Pre);gFo=r(VWr,"bigbird_pegasus"),VWr.forEach(t),hFo=r(C3e," \u2014 "),oI=n(C3e,"A",{href:!0});var zWr=s(oI);pFo=r(zWr,"BigBirdPegasusForConditionalGeneration"),zWr.forEach(t),_Fo=r(C3e," (BigBirdPegasus model)"),C3e.forEach(t),uFo=i(ie),w5=n(ie,"LI",{});var M3e=s(w5);$re=n(M3e,"STRONG",{});var WWr=s($re);bFo=r(WWr,"blenderbot"),WWr.forEach(t),vFo=r(M3e," \u2014 "),rI=n(M3e,"A",{href:!0});var QWr=s(rI);TFo=r(QWr,"BlenderbotForConditionalGeneration"),QWr.forEach(t),FFo=r(M3e," (Blenderbot model)"),M3e.forEach(t),CFo=i(ie),A5=n(ie,"LI",{});var E3e=s(A5);Ire=n(E3e,"STRONG",{});var HWr=s(Ire);MFo=r(HWr,"blenderbot-small"),HWr.forEach(t),EFo=r(E3e," \u2014 "),tI=n(E3e,"A",{href:!0});var UWr=s(tI);yFo=r(UWr,"BlenderbotSmallForConditionalGeneration"),UWr.forEach(t),wFo=r(E3e," (BlenderbotSmall model)"),E3e.forEach(t),AFo=i(ie),L5=n(ie,"LI",{});var y3e=s(L5);jre=n(y3e,"STRONG",{});var JWr=s(jre);LFo=r(JWr,"encoder-decoder"),JWr.forEach(t),BFo=r(y3e," \u2014 "),aI=n(y3e,"A",{href:!0});var YWr=s(aI);xFo=r(YWr,"EncoderDecoderModel"),YWr.forEach(t),kFo=r(y3e," (Encoder decoder model)"),y3e.forEach(t),RFo=i(ie),B5=n(ie,"LI",{});var w3e=s(B5);Dre=n(w3e,"STRONG",{});var KWr=s(Dre);SFo=r(KWr,"fsmt"),KWr.forEach(t),PFo=r(w3e," \u2014 "),nI=n(w3e,"A",{href:!0});var ZWr=s(nI);$Fo=r(ZWr,"FSMTForConditionalGeneration"),ZWr.forEach(t),IFo=r(w3e," (FairSeq Machine-Translation model)"),w3e.forEach(t),jFo=i(ie),x5=n(ie,"LI",{});var A3e=s(x5);Nre=n(A3e,"STRONG",{});var eQr=s(Nre);DFo=r(eQr,"led"),eQr.forEach(t),NFo=r(A3e," \u2014 "),sI=n(A3e,"A",{href:!0});var oQr=s(sI);qFo=r(oQr,"LEDForConditionalGeneration"),oQr.forEach(t),OFo=r(A3e," (LED model)"),A3e.forEach(t),GFo=i(ie),k5=n(ie,"LI",{});var L3e=s(k5);qre=n(L3e,"STRONG",{});var rQr=s(qre);XFo=r(rQr,"m2m_100"),rQr.forEach(t),VFo=r(L3e," \u2014 "),lI=n(L3e,"A",{href:!0});var tQr=s(lI);zFo=r(tQr,"M2M100ForConditionalGeneration"),tQr.forEach(t),WFo=r(L3e," (M2M100 model)"),L3e.forEach(t),QFo=i(ie),R5=n(ie,"LI",{});var B3e=s(R5);Ore=n(B3e,"STRONG",{});var aQr=s(Ore);HFo=r(aQr,"marian"),aQr.forEach(t),UFo=r(B3e," \u2014 "),iI=n(B3e,"A",{href:!0});var nQr=s(iI);JFo=r(nQr,"MarianMTModel"),nQr.forEach(t),YFo=r(B3e," (Marian model)"),B3e.forEach(t),KFo=i(ie),S5=n(ie,"LI",{});var x3e=s(S5);Gre=n(x3e,"STRONG",{});var sQr=s(Gre);ZFo=r(sQr,"mbart"),sQr.forEach(t),e9o=r(x3e," \u2014 "),dI=n(x3e,"A",{href:!0});var lQr=s(dI);o9o=r(lQr,"MBartForConditionalGeneration"),lQr.forEach(t),r9o=r(x3e," (mBART model)"),x3e.forEach(t),t9o=i(ie),P5=n(ie,"LI",{});var k3e=s(P5);Xre=n(k3e,"STRONG",{});var iQr=s(Xre);a9o=r(iQr,"mt5"),iQr.forEach(t),n9o=r(k3e," \u2014 "),cI=n(k3e,"A",{href:!0});var dQr=s(cI);s9o=r(dQr,"MT5ForConditionalGeneration"),dQr.forEach(t),l9o=r(k3e," (mT5 model)"),k3e.forEach(t),i9o=i(ie),$5=n(ie,"LI",{});var R3e=s($5);Vre=n(R3e,"STRONG",{});var cQr=s(Vre);d9o=r(cQr,"pegasus"),cQr.forEach(t),c9o=r(R3e," \u2014 "),fI=n(R3e,"A",{href:!0});var fQr=s(fI);f9o=r(fQr,"PegasusForConditionalGeneration"),fQr.forEach(t),m9o=r(R3e," (Pegasus model)"),R3e.forEach(t),g9o=i(ie),I5=n(ie,"LI",{});var S3e=s(I5);zre=n(S3e,"STRONG",{});var mQr=s(zre);h9o=r(mQr,"plbart"),mQr.forEach(t),p9o=r(S3e," \u2014 "),mI=n(S3e,"A",{href:!0});var gQr=s(mI);_9o=r(gQr,"PLBartForConditionalGeneration"),gQr.forEach(t),u9o=r(S3e," (PLBart model)"),S3e.forEach(t),b9o=i(ie),j5=n(ie,"LI",{});var P3e=s(j5);Wre=n(P3e,"STRONG",{});var hQr=s(Wre);v9o=r(hQr,"prophetnet"),hQr.forEach(t),T9o=r(P3e," \u2014 "),gI=n(P3e,"A",{href:!0});var pQr=s(gI);F9o=r(pQr,"ProphetNetForConditionalGeneration"),pQr.forEach(t),C9o=r(P3e," (ProphetNet model)"),P3e.forEach(t),M9o=i(ie),D5=n(ie,"LI",{});var $3e=s(D5);Qre=n($3e,"STRONG",{});var _Qr=s(Qre);E9o=r(_Qr,"t5"),_Qr.forEach(t),y9o=r($3e," \u2014 "),hI=n($3e,"A",{href:!0});var uQr=s(hI);w9o=r(uQr,"T5ForConditionalGeneration"),uQr.forEach(t),A9o=r($3e," (T5 model)"),$3e.forEach(t),L9o=i(ie),N5=n(ie,"LI",{});var I3e=s(N5);Hre=n(I3e,"STRONG",{});var bQr=s(Hre);B9o=r(bQr,"xlm-prophetnet"),bQr.forEach(t),x9o=r(I3e," \u2014 "),pI=n(I3e,"A",{href:!0});var vQr=s(pI);k9o=r(vQr,"XLMProphetNetForConditionalGeneration"),vQr.forEach(t),R9o=r(I3e," (XLMProphetNet model)"),I3e.forEach(t),ie.forEach(t),S9o=i(Vt),q5=n(Vt,"P",{});var j3e=s(q5);P9o=r(j3e,"The model is set in evaluation mode by default using "),Ure=n(j3e,"CODE",{});var TQr=s(Ure);$9o=r(TQr,"model.eval()"),TQr.forEach(t),I9o=r(j3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jre=n(j3e,"CODE",{});var FQr=s(Jre);j9o=r(FQr,"model.train()"),FQr.forEach(t),j3e.forEach(t),D9o=i(Vt),Yre=n(Vt,"P",{});var CQr=s(Yre);N9o=r(CQr,"Examples:"),CQr.forEach(t),q9o=i(Vt),m(ny.$$.fragment,Vt),Vt.forEach(t),ol.forEach(t),Cxe=i(d),md=n(d,"H2",{class:!0});var kRe=s(md);O5=n(kRe,"A",{id:!0,class:!0,href:!0});var MQr=s(O5);Kre=n(MQr,"SPAN",{});var EQr=s(Kre);m(sy.$$.fragment,EQr),EQr.forEach(t),MQr.forEach(t),O9o=i(kRe),Zre=n(kRe,"SPAN",{});var yQr=s(Zre);G9o=r(yQr,"AutoModelForSequenceClassification"),yQr.forEach(t),kRe.forEach(t),Mxe=i(d),or=n(d,"DIV",{class:!0});var tl=s(or);m(ly.$$.fragment,tl),X9o=i(tl),gd=n(tl,"P",{});var Sz=s(gd);V9o=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ete=n(Sz,"CODE",{});var wQr=s(ete);z9o=r(wQr,"from_pretrained()"),wQr.forEach(t),W9o=r(Sz,"class method or the "),ote=n(Sz,"CODE",{});var AQr=s(ote);Q9o=r(AQr,"from_config()"),AQr.forEach(t),H9o=r(Sz,`class
method.`),Sz.forEach(t),U9o=i(tl),iy=n(tl,"P",{});var RRe=s(iy);J9o=r(RRe,"This class cannot be instantiated directly using "),rte=n(RRe,"CODE",{});var LQr=s(rte);Y9o=r(LQr,"__init__()"),LQr.forEach(t),K9o=r(RRe," (throws an error)."),RRe.forEach(t),Z9o=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(dy.$$.fragment,al),eCo=i(al),tte=n(al,"P",{});var BQr=s(tte);oCo=r(BQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BQr.forEach(t),rCo=i(al),hd=n(al,"P",{});var Pz=s(hd);tCo=r(Pz,`Note:
Loading a model from its configuration file does `),ate=n(Pz,"STRONG",{});var xQr=s(ate);aCo=r(xQr,"not"),xQr.forEach(t),nCo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nte=n(Pz,"CODE",{});var kQr=s(nte);sCo=r(kQr,"from_pretrained()"),kQr.forEach(t),lCo=r(Pz,"to load the model weights."),Pz.forEach(t),iCo=i(al),ste=n(al,"P",{});var RQr=s(ste);dCo=r(RQr,"Examples:"),RQr.forEach(t),cCo=i(al),m(cy.$$.fragment,al),al.forEach(t),fCo=i(tl),Ge=n(tl,"DIV",{class:!0});var zt=s(Ge);m(fy.$$.fragment,zt),mCo=i(zt),lte=n(zt,"P",{});var SQr=s(lte);gCo=r(SQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SQr.forEach(t),hCo=i(zt),Ha=n(zt,"P",{});var Z4=s(Ha);pCo=r(Z4,"The model class to instantiate is selected based on the "),ite=n(Z4,"CODE",{});var PQr=s(ite);_Co=r(PQr,"model_type"),PQr.forEach(t),uCo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),dte=n(Z4,"CODE",{});var $Qr=s(dte);bCo=r($Qr,"pretrained_model_name_or_path"),$Qr.forEach(t),vCo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cte=n(Z4,"CODE",{});var IQr=s(cte);TCo=r(IQr,"pretrained_model_name_or_path"),IQr.forEach(t),FCo=r(Z4,":"),Z4.forEach(t),CCo=i(zt),A=n(zt,"UL",{});var L=s(A);G5=n(L,"LI",{});var D3e=s(G5);fte=n(D3e,"STRONG",{});var jQr=s(fte);MCo=r(jQr,"albert"),jQr.forEach(t),ECo=r(D3e," \u2014 "),_I=n(D3e,"A",{href:!0});var DQr=s(_I);yCo=r(DQr,"AlbertForSequenceClassification"),DQr.forEach(t),wCo=r(D3e," (ALBERT model)"),D3e.forEach(t),ACo=i(L),X5=n(L,"LI",{});var N3e=s(X5);mte=n(N3e,"STRONG",{});var NQr=s(mte);LCo=r(NQr,"bart"),NQr.forEach(t),BCo=r(N3e," \u2014 "),uI=n(N3e,"A",{href:!0});var qQr=s(uI);xCo=r(qQr,"BartForSequenceClassification"),qQr.forEach(t),kCo=r(N3e," (BART model)"),N3e.forEach(t),RCo=i(L),V5=n(L,"LI",{});var q3e=s(V5);gte=n(q3e,"STRONG",{});var OQr=s(gte);SCo=r(OQr,"bert"),OQr.forEach(t),PCo=r(q3e," \u2014 "),bI=n(q3e,"A",{href:!0});var GQr=s(bI);$Co=r(GQr,"BertForSequenceClassification"),GQr.forEach(t),ICo=r(q3e," (BERT model)"),q3e.forEach(t),jCo=i(L),z5=n(L,"LI",{});var O3e=s(z5);hte=n(O3e,"STRONG",{});var XQr=s(hte);DCo=r(XQr,"big_bird"),XQr.forEach(t),NCo=r(O3e," \u2014 "),vI=n(O3e,"A",{href:!0});var VQr=s(vI);qCo=r(VQr,"BigBirdForSequenceClassification"),VQr.forEach(t),OCo=r(O3e," (BigBird model)"),O3e.forEach(t),GCo=i(L),W5=n(L,"LI",{});var G3e=s(W5);pte=n(G3e,"STRONG",{});var zQr=s(pte);XCo=r(zQr,"bigbird_pegasus"),zQr.forEach(t),VCo=r(G3e," \u2014 "),TI=n(G3e,"A",{href:!0});var WQr=s(TI);zCo=r(WQr,"BigBirdPegasusForSequenceClassification"),WQr.forEach(t),WCo=r(G3e," (BigBirdPegasus model)"),G3e.forEach(t),QCo=i(L),Q5=n(L,"LI",{});var X3e=s(Q5);_te=n(X3e,"STRONG",{});var QQr=s(_te);HCo=r(QQr,"camembert"),QQr.forEach(t),UCo=r(X3e," \u2014 "),FI=n(X3e,"A",{href:!0});var HQr=s(FI);JCo=r(HQr,"CamembertForSequenceClassification"),HQr.forEach(t),YCo=r(X3e," (CamemBERT model)"),X3e.forEach(t),KCo=i(L),H5=n(L,"LI",{});var V3e=s(H5);ute=n(V3e,"STRONG",{});var UQr=s(ute);ZCo=r(UQr,"canine"),UQr.forEach(t),eMo=r(V3e," \u2014 "),CI=n(V3e,"A",{href:!0});var JQr=s(CI);oMo=r(JQr,"CanineForSequenceClassification"),JQr.forEach(t),rMo=r(V3e," (Canine model)"),V3e.forEach(t),tMo=i(L),U5=n(L,"LI",{});var z3e=s(U5);bte=n(z3e,"STRONG",{});var YQr=s(bte);aMo=r(YQr,"convbert"),YQr.forEach(t),nMo=r(z3e," \u2014 "),MI=n(z3e,"A",{href:!0});var KQr=s(MI);sMo=r(KQr,"ConvBertForSequenceClassification"),KQr.forEach(t),lMo=r(z3e," (ConvBERT model)"),z3e.forEach(t),iMo=i(L),J5=n(L,"LI",{});var W3e=s(J5);vte=n(W3e,"STRONG",{});var ZQr=s(vte);dMo=r(ZQr,"ctrl"),ZQr.forEach(t),cMo=r(W3e," \u2014 "),EI=n(W3e,"A",{href:!0});var eHr=s(EI);fMo=r(eHr,"CTRLForSequenceClassification"),eHr.forEach(t),mMo=r(W3e," (CTRL model)"),W3e.forEach(t),gMo=i(L),Y5=n(L,"LI",{});var Q3e=s(Y5);Tte=n(Q3e,"STRONG",{});var oHr=s(Tte);hMo=r(oHr,"data2vec-text"),oHr.forEach(t),pMo=r(Q3e," \u2014 "),yI=n(Q3e,"A",{href:!0});var rHr=s(yI);_Mo=r(rHr,"Data2VecTextForSequenceClassification"),rHr.forEach(t),uMo=r(Q3e," (Data2VecText model)"),Q3e.forEach(t),bMo=i(L),K5=n(L,"LI",{});var H3e=s(K5);Fte=n(H3e,"STRONG",{});var tHr=s(Fte);vMo=r(tHr,"deberta"),tHr.forEach(t),TMo=r(H3e," \u2014 "),wI=n(H3e,"A",{href:!0});var aHr=s(wI);FMo=r(aHr,"DebertaForSequenceClassification"),aHr.forEach(t),CMo=r(H3e," (DeBERTa model)"),H3e.forEach(t),MMo=i(L),Z5=n(L,"LI",{});var U3e=s(Z5);Cte=n(U3e,"STRONG",{});var nHr=s(Cte);EMo=r(nHr,"deberta-v2"),nHr.forEach(t),yMo=r(U3e," \u2014 "),AI=n(U3e,"A",{href:!0});var sHr=s(AI);wMo=r(sHr,"DebertaV2ForSequenceClassification"),sHr.forEach(t),AMo=r(U3e," (DeBERTa-v2 model)"),U3e.forEach(t),LMo=i(L),e2=n(L,"LI",{});var J3e=s(e2);Mte=n(J3e,"STRONG",{});var lHr=s(Mte);BMo=r(lHr,"distilbert"),lHr.forEach(t),xMo=r(J3e," \u2014 "),LI=n(J3e,"A",{href:!0});var iHr=s(LI);kMo=r(iHr,"DistilBertForSequenceClassification"),iHr.forEach(t),RMo=r(J3e," (DistilBERT model)"),J3e.forEach(t),SMo=i(L),o2=n(L,"LI",{});var Y3e=s(o2);Ete=n(Y3e,"STRONG",{});var dHr=s(Ete);PMo=r(dHr,"electra"),dHr.forEach(t),$Mo=r(Y3e," \u2014 "),BI=n(Y3e,"A",{href:!0});var cHr=s(BI);IMo=r(cHr,"ElectraForSequenceClassification"),cHr.forEach(t),jMo=r(Y3e," (ELECTRA model)"),Y3e.forEach(t),DMo=i(L),r2=n(L,"LI",{});var K3e=s(r2);yte=n(K3e,"STRONG",{});var fHr=s(yte);NMo=r(fHr,"flaubert"),fHr.forEach(t),qMo=r(K3e," \u2014 "),xI=n(K3e,"A",{href:!0});var mHr=s(xI);OMo=r(mHr,"FlaubertForSequenceClassification"),mHr.forEach(t),GMo=r(K3e," (FlauBERT model)"),K3e.forEach(t),XMo=i(L),t2=n(L,"LI",{});var Z3e=s(t2);wte=n(Z3e,"STRONG",{});var gHr=s(wte);VMo=r(gHr,"fnet"),gHr.forEach(t),zMo=r(Z3e," \u2014 "),kI=n(Z3e,"A",{href:!0});var hHr=s(kI);WMo=r(hHr,"FNetForSequenceClassification"),hHr.forEach(t),QMo=r(Z3e," (FNet model)"),Z3e.forEach(t),HMo=i(L),a2=n(L,"LI",{});var eye=s(a2);Ate=n(eye,"STRONG",{});var pHr=s(Ate);UMo=r(pHr,"funnel"),pHr.forEach(t),JMo=r(eye," \u2014 "),RI=n(eye,"A",{href:!0});var _Hr=s(RI);YMo=r(_Hr,"FunnelForSequenceClassification"),_Hr.forEach(t),KMo=r(eye," (Funnel Transformer model)"),eye.forEach(t),ZMo=i(L),n2=n(L,"LI",{});var oye=s(n2);Lte=n(oye,"STRONG",{});var uHr=s(Lte);e4o=r(uHr,"gpt2"),uHr.forEach(t),o4o=r(oye," \u2014 "),SI=n(oye,"A",{href:!0});var bHr=s(SI);r4o=r(bHr,"GPT2ForSequenceClassification"),bHr.forEach(t),t4o=r(oye," (OpenAI GPT-2 model)"),oye.forEach(t),a4o=i(L),s2=n(L,"LI",{});var rye=s(s2);Bte=n(rye,"STRONG",{});var vHr=s(Bte);n4o=r(vHr,"gpt_neo"),vHr.forEach(t),s4o=r(rye," \u2014 "),PI=n(rye,"A",{href:!0});var THr=s(PI);l4o=r(THr,"GPTNeoForSequenceClassification"),THr.forEach(t),i4o=r(rye," (GPT Neo model)"),rye.forEach(t),d4o=i(L),l2=n(L,"LI",{});var tye=s(l2);xte=n(tye,"STRONG",{});var FHr=s(xte);c4o=r(FHr,"gptj"),FHr.forEach(t),f4o=r(tye," \u2014 "),$I=n(tye,"A",{href:!0});var CHr=s($I);m4o=r(CHr,"GPTJForSequenceClassification"),CHr.forEach(t),g4o=r(tye," (GPT-J model)"),tye.forEach(t),h4o=i(L),i2=n(L,"LI",{});var aye=s(i2);kte=n(aye,"STRONG",{});var MHr=s(kte);p4o=r(MHr,"ibert"),MHr.forEach(t),_4o=r(aye," \u2014 "),II=n(aye,"A",{href:!0});var EHr=s(II);u4o=r(EHr,"IBertForSequenceClassification"),EHr.forEach(t),b4o=r(aye," (I-BERT model)"),aye.forEach(t),v4o=i(L),d2=n(L,"LI",{});var nye=s(d2);Rte=n(nye,"STRONG",{});var yHr=s(Rte);T4o=r(yHr,"layoutlm"),yHr.forEach(t),F4o=r(nye," \u2014 "),jI=n(nye,"A",{href:!0});var wHr=s(jI);C4o=r(wHr,"LayoutLMForSequenceClassification"),wHr.forEach(t),M4o=r(nye," (LayoutLM model)"),nye.forEach(t),E4o=i(L),c2=n(L,"LI",{});var sye=s(c2);Ste=n(sye,"STRONG",{});var AHr=s(Ste);y4o=r(AHr,"layoutlmv2"),AHr.forEach(t),w4o=r(sye," \u2014 "),DI=n(sye,"A",{href:!0});var LHr=s(DI);A4o=r(LHr,"LayoutLMv2ForSequenceClassification"),LHr.forEach(t),L4o=r(sye," (LayoutLMv2 model)"),sye.forEach(t),B4o=i(L),f2=n(L,"LI",{});var lye=s(f2);Pte=n(lye,"STRONG",{});var BHr=s(Pte);x4o=r(BHr,"led"),BHr.forEach(t),k4o=r(lye," \u2014 "),NI=n(lye,"A",{href:!0});var xHr=s(NI);R4o=r(xHr,"LEDForSequenceClassification"),xHr.forEach(t),S4o=r(lye," (LED model)"),lye.forEach(t),P4o=i(L),m2=n(L,"LI",{});var iye=s(m2);$te=n(iye,"STRONG",{});var kHr=s($te);$4o=r(kHr,"longformer"),kHr.forEach(t),I4o=r(iye," \u2014 "),qI=n(iye,"A",{href:!0});var RHr=s(qI);j4o=r(RHr,"LongformerForSequenceClassification"),RHr.forEach(t),D4o=r(iye," (Longformer model)"),iye.forEach(t),N4o=i(L),g2=n(L,"LI",{});var dye=s(g2);Ite=n(dye,"STRONG",{});var SHr=s(Ite);q4o=r(SHr,"mbart"),SHr.forEach(t),O4o=r(dye," \u2014 "),OI=n(dye,"A",{href:!0});var PHr=s(OI);G4o=r(PHr,"MBartForSequenceClassification"),PHr.forEach(t),X4o=r(dye," (mBART model)"),dye.forEach(t),V4o=i(L),h2=n(L,"LI",{});var cye=s(h2);jte=n(cye,"STRONG",{});var $Hr=s(jte);z4o=r($Hr,"megatron-bert"),$Hr.forEach(t),W4o=r(cye," \u2014 "),GI=n(cye,"A",{href:!0});var IHr=s(GI);Q4o=r(IHr,"MegatronBertForSequenceClassification"),IHr.forEach(t),H4o=r(cye," (MegatronBert model)"),cye.forEach(t),U4o=i(L),p2=n(L,"LI",{});var fye=s(p2);Dte=n(fye,"STRONG",{});var jHr=s(Dte);J4o=r(jHr,"mobilebert"),jHr.forEach(t),Y4o=r(fye," \u2014 "),XI=n(fye,"A",{href:!0});var DHr=s(XI);K4o=r(DHr,"MobileBertForSequenceClassification"),DHr.forEach(t),Z4o=r(fye," (MobileBERT model)"),fye.forEach(t),eEo=i(L),_2=n(L,"LI",{});var mye=s(_2);Nte=n(mye,"STRONG",{});var NHr=s(Nte);oEo=r(NHr,"mpnet"),NHr.forEach(t),rEo=r(mye," \u2014 "),VI=n(mye,"A",{href:!0});var qHr=s(VI);tEo=r(qHr,"MPNetForSequenceClassification"),qHr.forEach(t),aEo=r(mye," (MPNet model)"),mye.forEach(t),nEo=i(L),u2=n(L,"LI",{});var gye=s(u2);qte=n(gye,"STRONG",{});var OHr=s(qte);sEo=r(OHr,"nystromformer"),OHr.forEach(t),lEo=r(gye," \u2014 "),zI=n(gye,"A",{href:!0});var GHr=s(zI);iEo=r(GHr,"NystromformerForSequenceClassification"),GHr.forEach(t),dEo=r(gye," (Nystromformer model)"),gye.forEach(t),cEo=i(L),b2=n(L,"LI",{});var hye=s(b2);Ote=n(hye,"STRONG",{});var XHr=s(Ote);fEo=r(XHr,"openai-gpt"),XHr.forEach(t),mEo=r(hye," \u2014 "),WI=n(hye,"A",{href:!0});var VHr=s(WI);gEo=r(VHr,"OpenAIGPTForSequenceClassification"),VHr.forEach(t),hEo=r(hye," (OpenAI GPT model)"),hye.forEach(t),pEo=i(L),v2=n(L,"LI",{});var pye=s(v2);Gte=n(pye,"STRONG",{});var zHr=s(Gte);_Eo=r(zHr,"perceiver"),zHr.forEach(t),uEo=r(pye," \u2014 "),QI=n(pye,"A",{href:!0});var WHr=s(QI);bEo=r(WHr,"PerceiverForSequenceClassification"),WHr.forEach(t),vEo=r(pye," (Perceiver model)"),pye.forEach(t),TEo=i(L),T2=n(L,"LI",{});var _ye=s(T2);Xte=n(_ye,"STRONG",{});var QHr=s(Xte);FEo=r(QHr,"plbart"),QHr.forEach(t),CEo=r(_ye," \u2014 "),HI=n(_ye,"A",{href:!0});var HHr=s(HI);MEo=r(HHr,"PLBartForSequenceClassification"),HHr.forEach(t),EEo=r(_ye," (PLBart model)"),_ye.forEach(t),yEo=i(L),F2=n(L,"LI",{});var uye=s(F2);Vte=n(uye,"STRONG",{});var UHr=s(Vte);wEo=r(UHr,"qdqbert"),UHr.forEach(t),AEo=r(uye," \u2014 "),UI=n(uye,"A",{href:!0});var JHr=s(UI);LEo=r(JHr,"QDQBertForSequenceClassification"),JHr.forEach(t),BEo=r(uye," (QDQBert model)"),uye.forEach(t),xEo=i(L),C2=n(L,"LI",{});var bye=s(C2);zte=n(bye,"STRONG",{});var YHr=s(zte);kEo=r(YHr,"reformer"),YHr.forEach(t),REo=r(bye," \u2014 "),JI=n(bye,"A",{href:!0});var KHr=s(JI);SEo=r(KHr,"ReformerForSequenceClassification"),KHr.forEach(t),PEo=r(bye," (Reformer model)"),bye.forEach(t),$Eo=i(L),M2=n(L,"LI",{});var vye=s(M2);Wte=n(vye,"STRONG",{});var ZHr=s(Wte);IEo=r(ZHr,"rembert"),ZHr.forEach(t),jEo=r(vye," \u2014 "),YI=n(vye,"A",{href:!0});var eUr=s(YI);DEo=r(eUr,"RemBertForSequenceClassification"),eUr.forEach(t),NEo=r(vye," (RemBERT model)"),vye.forEach(t),qEo=i(L),E2=n(L,"LI",{});var Tye=s(E2);Qte=n(Tye,"STRONG",{});var oUr=s(Qte);OEo=r(oUr,"roberta"),oUr.forEach(t),GEo=r(Tye," \u2014 "),KI=n(Tye,"A",{href:!0});var rUr=s(KI);XEo=r(rUr,"RobertaForSequenceClassification"),rUr.forEach(t),VEo=r(Tye," (RoBERTa model)"),Tye.forEach(t),zEo=i(L),y2=n(L,"LI",{});var Fye=s(y2);Hte=n(Fye,"STRONG",{});var tUr=s(Hte);WEo=r(tUr,"roformer"),tUr.forEach(t),QEo=r(Fye," \u2014 "),ZI=n(Fye,"A",{href:!0});var aUr=s(ZI);HEo=r(aUr,"RoFormerForSequenceClassification"),aUr.forEach(t),UEo=r(Fye," (RoFormer model)"),Fye.forEach(t),JEo=i(L),w2=n(L,"LI",{});var Cye=s(w2);Ute=n(Cye,"STRONG",{});var nUr=s(Ute);YEo=r(nUr,"squeezebert"),nUr.forEach(t),KEo=r(Cye," \u2014 "),ej=n(Cye,"A",{href:!0});var sUr=s(ej);ZEo=r(sUr,"SqueezeBertForSequenceClassification"),sUr.forEach(t),e3o=r(Cye," (SqueezeBERT model)"),Cye.forEach(t),o3o=i(L),A2=n(L,"LI",{});var Mye=s(A2);Jte=n(Mye,"STRONG",{});var lUr=s(Jte);r3o=r(lUr,"tapas"),lUr.forEach(t),t3o=r(Mye," \u2014 "),oj=n(Mye,"A",{href:!0});var iUr=s(oj);a3o=r(iUr,"TapasForSequenceClassification"),iUr.forEach(t),n3o=r(Mye," (TAPAS model)"),Mye.forEach(t),s3o=i(L),L2=n(L,"LI",{});var Eye=s(L2);Yte=n(Eye,"STRONG",{});var dUr=s(Yte);l3o=r(dUr,"transfo-xl"),dUr.forEach(t),i3o=r(Eye," \u2014 "),rj=n(Eye,"A",{href:!0});var cUr=s(rj);d3o=r(cUr,"TransfoXLForSequenceClassification"),cUr.forEach(t),c3o=r(Eye," (Transformer-XL model)"),Eye.forEach(t),f3o=i(L),B2=n(L,"LI",{});var yye=s(B2);Kte=n(yye,"STRONG",{});var fUr=s(Kte);m3o=r(fUr,"xlm"),fUr.forEach(t),g3o=r(yye," \u2014 "),tj=n(yye,"A",{href:!0});var mUr=s(tj);h3o=r(mUr,"XLMForSequenceClassification"),mUr.forEach(t),p3o=r(yye," (XLM model)"),yye.forEach(t),_3o=i(L),x2=n(L,"LI",{});var wye=s(x2);Zte=n(wye,"STRONG",{});var gUr=s(Zte);u3o=r(gUr,"xlm-roberta"),gUr.forEach(t),b3o=r(wye," \u2014 "),aj=n(wye,"A",{href:!0});var hUr=s(aj);v3o=r(hUr,"XLMRobertaForSequenceClassification"),hUr.forEach(t),T3o=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),F3o=i(L),k2=n(L,"LI",{});var Aye=s(k2);eae=n(Aye,"STRONG",{});var pUr=s(eae);C3o=r(pUr,"xlm-roberta-xl"),pUr.forEach(t),M3o=r(Aye," \u2014 "),nj=n(Aye,"A",{href:!0});var _Ur=s(nj);E3o=r(_Ur,"XLMRobertaXLForSequenceClassification"),_Ur.forEach(t),y3o=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),w3o=i(L),R2=n(L,"LI",{});var Lye=s(R2);oae=n(Lye,"STRONG",{});var uUr=s(oae);A3o=r(uUr,"xlnet"),uUr.forEach(t),L3o=r(Lye," \u2014 "),sj=n(Lye,"A",{href:!0});var bUr=s(sj);B3o=r(bUr,"XLNetForSequenceClassification"),bUr.forEach(t),x3o=r(Lye," (XLNet model)"),Lye.forEach(t),k3o=i(L),S2=n(L,"LI",{});var Bye=s(S2);rae=n(Bye,"STRONG",{});var vUr=s(rae);R3o=r(vUr,"yoso"),vUr.forEach(t),S3o=r(Bye," \u2014 "),lj=n(Bye,"A",{href:!0});var TUr=s(lj);P3o=r(TUr,"YosoForSequenceClassification"),TUr.forEach(t),$3o=r(Bye," (YOSO model)"),Bye.forEach(t),L.forEach(t),I3o=i(zt),P2=n(zt,"P",{});var xye=s(P2);j3o=r(xye,"The model is set in evaluation mode by default using "),tae=n(xye,"CODE",{});var FUr=s(tae);D3o=r(FUr,"model.eval()"),FUr.forEach(t),N3o=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=n(xye,"CODE",{});var CUr=s(aae);q3o=r(CUr,"model.train()"),CUr.forEach(t),xye.forEach(t),O3o=i(zt),nae=n(zt,"P",{});var MUr=s(nae);G3o=r(MUr,"Examples:"),MUr.forEach(t),X3o=i(zt),m(my.$$.fragment,zt),zt.forEach(t),tl.forEach(t),Exe=i(d),pd=n(d,"H2",{class:!0});var SRe=s(pd);$2=n(SRe,"A",{id:!0,class:!0,href:!0});var EUr=s($2);sae=n(EUr,"SPAN",{});var yUr=s(sae);m(gy.$$.fragment,yUr),yUr.forEach(t),EUr.forEach(t),V3o=i(SRe),lae=n(SRe,"SPAN",{});var wUr=s(lae);z3o=r(wUr,"AutoModelForMultipleChoice"),wUr.forEach(t),SRe.forEach(t),yxe=i(d),rr=n(d,"DIV",{class:!0});var nl=s(rr);m(hy.$$.fragment,nl),W3o=i(nl),_d=n(nl,"P",{});var $z=s(_d);Q3o=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iae=n($z,"CODE",{});var AUr=s(iae);H3o=r(AUr,"from_pretrained()"),AUr.forEach(t),U3o=r($z,"class method or the "),dae=n($z,"CODE",{});var LUr=s(dae);J3o=r(LUr,"from_config()"),LUr.forEach(t),Y3o=r($z,`class
method.`),$z.forEach(t),K3o=i(nl),py=n(nl,"P",{});var PRe=s(py);Z3o=r(PRe,"This class cannot be instantiated directly using "),cae=n(PRe,"CODE",{});var BUr=s(cae);eyo=r(BUr,"__init__()"),BUr.forEach(t),oyo=r(PRe," (throws an error)."),PRe.forEach(t),ryo=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(_y.$$.fragment,sl),tyo=i(sl),fae=n(sl,"P",{});var xUr=s(fae);ayo=r(xUr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xUr.forEach(t),nyo=i(sl),ud=n(sl,"P",{});var Iz=s(ud);syo=r(Iz,`Note:
Loading a model from its configuration file does `),mae=n(Iz,"STRONG",{});var kUr=s(mae);lyo=r(kUr,"not"),kUr.forEach(t),iyo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gae=n(Iz,"CODE",{});var RUr=s(gae);dyo=r(RUr,"from_pretrained()"),RUr.forEach(t),cyo=r(Iz,"to load the model weights."),Iz.forEach(t),fyo=i(sl),hae=n(sl,"P",{});var SUr=s(hae);myo=r(SUr,"Examples:"),SUr.forEach(t),gyo=i(sl),m(uy.$$.fragment,sl),sl.forEach(t),hyo=i(nl),Xe=n(nl,"DIV",{class:!0});var Wt=s(Xe);m(by.$$.fragment,Wt),pyo=i(Wt),pae=n(Wt,"P",{});var PUr=s(pae);_yo=r(PUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PUr.forEach(t),uyo=i(Wt),Ua=n(Wt,"P",{});var eE=s(Ua);byo=r(eE,"The model class to instantiate is selected based on the "),_ae=n(eE,"CODE",{});var $Ur=s(_ae);vyo=r($Ur,"model_type"),$Ur.forEach(t),Tyo=r(eE,` property of the config object (either
passed as an argument or loaded from `),uae=n(eE,"CODE",{});var IUr=s(uae);Fyo=r(IUr,"pretrained_model_name_or_path"),IUr.forEach(t),Cyo=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bae=n(eE,"CODE",{});var jUr=s(bae);Myo=r(jUr,"pretrained_model_name_or_path"),jUr.forEach(t),Eyo=r(eE,":"),eE.forEach(t),yyo=i(Wt),O=n(Wt,"UL",{});var G=s(O);I2=n(G,"LI",{});var kye=s(I2);vae=n(kye,"STRONG",{});var DUr=s(vae);wyo=r(DUr,"albert"),DUr.forEach(t),Ayo=r(kye," \u2014 "),ij=n(kye,"A",{href:!0});var NUr=s(ij);Lyo=r(NUr,"AlbertForMultipleChoice"),NUr.forEach(t),Byo=r(kye," (ALBERT model)"),kye.forEach(t),xyo=i(G),j2=n(G,"LI",{});var Rye=s(j2);Tae=n(Rye,"STRONG",{});var qUr=s(Tae);kyo=r(qUr,"bert"),qUr.forEach(t),Ryo=r(Rye," \u2014 "),dj=n(Rye,"A",{href:!0});var OUr=s(dj);Syo=r(OUr,"BertForMultipleChoice"),OUr.forEach(t),Pyo=r(Rye," (BERT model)"),Rye.forEach(t),$yo=i(G),D2=n(G,"LI",{});var Sye=s(D2);Fae=n(Sye,"STRONG",{});var GUr=s(Fae);Iyo=r(GUr,"big_bird"),GUr.forEach(t),jyo=r(Sye," \u2014 "),cj=n(Sye,"A",{href:!0});var XUr=s(cj);Dyo=r(XUr,"BigBirdForMultipleChoice"),XUr.forEach(t),Nyo=r(Sye," (BigBird model)"),Sye.forEach(t),qyo=i(G),N2=n(G,"LI",{});var Pye=s(N2);Cae=n(Pye,"STRONG",{});var VUr=s(Cae);Oyo=r(VUr,"camembert"),VUr.forEach(t),Gyo=r(Pye," \u2014 "),fj=n(Pye,"A",{href:!0});var zUr=s(fj);Xyo=r(zUr,"CamembertForMultipleChoice"),zUr.forEach(t),Vyo=r(Pye," (CamemBERT model)"),Pye.forEach(t),zyo=i(G),q2=n(G,"LI",{});var $ye=s(q2);Mae=n($ye,"STRONG",{});var WUr=s(Mae);Wyo=r(WUr,"canine"),WUr.forEach(t),Qyo=r($ye," \u2014 "),mj=n($ye,"A",{href:!0});var QUr=s(mj);Hyo=r(QUr,"CanineForMultipleChoice"),QUr.forEach(t),Uyo=r($ye," (Canine model)"),$ye.forEach(t),Jyo=i(G),O2=n(G,"LI",{});var Iye=s(O2);Eae=n(Iye,"STRONG",{});var HUr=s(Eae);Yyo=r(HUr,"convbert"),HUr.forEach(t),Kyo=r(Iye," \u2014 "),gj=n(Iye,"A",{href:!0});var UUr=s(gj);Zyo=r(UUr,"ConvBertForMultipleChoice"),UUr.forEach(t),ewo=r(Iye," (ConvBERT model)"),Iye.forEach(t),owo=i(G),G2=n(G,"LI",{});var jye=s(G2);yae=n(jye,"STRONG",{});var JUr=s(yae);rwo=r(JUr,"data2vec-text"),JUr.forEach(t),two=r(jye," \u2014 "),hj=n(jye,"A",{href:!0});var YUr=s(hj);awo=r(YUr,"Data2VecTextForMultipleChoice"),YUr.forEach(t),nwo=r(jye," (Data2VecText model)"),jye.forEach(t),swo=i(G),X2=n(G,"LI",{});var Dye=s(X2);wae=n(Dye,"STRONG",{});var KUr=s(wae);lwo=r(KUr,"distilbert"),KUr.forEach(t),iwo=r(Dye," \u2014 "),pj=n(Dye,"A",{href:!0});var ZUr=s(pj);dwo=r(ZUr,"DistilBertForMultipleChoice"),ZUr.forEach(t),cwo=r(Dye," (DistilBERT model)"),Dye.forEach(t),fwo=i(G),V2=n(G,"LI",{});var Nye=s(V2);Aae=n(Nye,"STRONG",{});var eJr=s(Aae);mwo=r(eJr,"electra"),eJr.forEach(t),gwo=r(Nye," \u2014 "),_j=n(Nye,"A",{href:!0});var oJr=s(_j);hwo=r(oJr,"ElectraForMultipleChoice"),oJr.forEach(t),pwo=r(Nye," (ELECTRA model)"),Nye.forEach(t),_wo=i(G),z2=n(G,"LI",{});var qye=s(z2);Lae=n(qye,"STRONG",{});var rJr=s(Lae);uwo=r(rJr,"flaubert"),rJr.forEach(t),bwo=r(qye," \u2014 "),uj=n(qye,"A",{href:!0});var tJr=s(uj);vwo=r(tJr,"FlaubertForMultipleChoice"),tJr.forEach(t),Two=r(qye," (FlauBERT model)"),qye.forEach(t),Fwo=i(G),W2=n(G,"LI",{});var Oye=s(W2);Bae=n(Oye,"STRONG",{});var aJr=s(Bae);Cwo=r(aJr,"fnet"),aJr.forEach(t),Mwo=r(Oye," \u2014 "),bj=n(Oye,"A",{href:!0});var nJr=s(bj);Ewo=r(nJr,"FNetForMultipleChoice"),nJr.forEach(t),ywo=r(Oye," (FNet model)"),Oye.forEach(t),wwo=i(G),Q2=n(G,"LI",{});var Gye=s(Q2);xae=n(Gye,"STRONG",{});var sJr=s(xae);Awo=r(sJr,"funnel"),sJr.forEach(t),Lwo=r(Gye," \u2014 "),vj=n(Gye,"A",{href:!0});var lJr=s(vj);Bwo=r(lJr,"FunnelForMultipleChoice"),lJr.forEach(t),xwo=r(Gye," (Funnel Transformer model)"),Gye.forEach(t),kwo=i(G),H2=n(G,"LI",{});var Xye=s(H2);kae=n(Xye,"STRONG",{});var iJr=s(kae);Rwo=r(iJr,"ibert"),iJr.forEach(t),Swo=r(Xye," \u2014 "),Tj=n(Xye,"A",{href:!0});var dJr=s(Tj);Pwo=r(dJr,"IBertForMultipleChoice"),dJr.forEach(t),$wo=r(Xye," (I-BERT model)"),Xye.forEach(t),Iwo=i(G),U2=n(G,"LI",{});var Vye=s(U2);Rae=n(Vye,"STRONG",{});var cJr=s(Rae);jwo=r(cJr,"longformer"),cJr.forEach(t),Dwo=r(Vye," \u2014 "),Fj=n(Vye,"A",{href:!0});var fJr=s(Fj);Nwo=r(fJr,"LongformerForMultipleChoice"),fJr.forEach(t),qwo=r(Vye," (Longformer model)"),Vye.forEach(t),Owo=i(G),J2=n(G,"LI",{});var zye=s(J2);Sae=n(zye,"STRONG",{});var mJr=s(Sae);Gwo=r(mJr,"megatron-bert"),mJr.forEach(t),Xwo=r(zye," \u2014 "),Cj=n(zye,"A",{href:!0});var gJr=s(Cj);Vwo=r(gJr,"MegatronBertForMultipleChoice"),gJr.forEach(t),zwo=r(zye," (MegatronBert model)"),zye.forEach(t),Wwo=i(G),Y2=n(G,"LI",{});var Wye=s(Y2);Pae=n(Wye,"STRONG",{});var hJr=s(Pae);Qwo=r(hJr,"mobilebert"),hJr.forEach(t),Hwo=r(Wye," \u2014 "),Mj=n(Wye,"A",{href:!0});var pJr=s(Mj);Uwo=r(pJr,"MobileBertForMultipleChoice"),pJr.forEach(t),Jwo=r(Wye," (MobileBERT model)"),Wye.forEach(t),Ywo=i(G),K2=n(G,"LI",{});var Qye=s(K2);$ae=n(Qye,"STRONG",{});var _Jr=s($ae);Kwo=r(_Jr,"mpnet"),_Jr.forEach(t),Zwo=r(Qye," \u2014 "),Ej=n(Qye,"A",{href:!0});var uJr=s(Ej);e6o=r(uJr,"MPNetForMultipleChoice"),uJr.forEach(t),o6o=r(Qye," (MPNet model)"),Qye.forEach(t),r6o=i(G),Z2=n(G,"LI",{});var Hye=s(Z2);Iae=n(Hye,"STRONG",{});var bJr=s(Iae);t6o=r(bJr,"nystromformer"),bJr.forEach(t),a6o=r(Hye," \u2014 "),yj=n(Hye,"A",{href:!0});var vJr=s(yj);n6o=r(vJr,"NystromformerForMultipleChoice"),vJr.forEach(t),s6o=r(Hye," (Nystromformer model)"),Hye.forEach(t),l6o=i(G),e1=n(G,"LI",{});var Uye=s(e1);jae=n(Uye,"STRONG",{});var TJr=s(jae);i6o=r(TJr,"qdqbert"),TJr.forEach(t),d6o=r(Uye," \u2014 "),wj=n(Uye,"A",{href:!0});var FJr=s(wj);c6o=r(FJr,"QDQBertForMultipleChoice"),FJr.forEach(t),f6o=r(Uye," (QDQBert model)"),Uye.forEach(t),m6o=i(G),o1=n(G,"LI",{});var Jye=s(o1);Dae=n(Jye,"STRONG",{});var CJr=s(Dae);g6o=r(CJr,"rembert"),CJr.forEach(t),h6o=r(Jye," \u2014 "),Aj=n(Jye,"A",{href:!0});var MJr=s(Aj);p6o=r(MJr,"RemBertForMultipleChoice"),MJr.forEach(t),_6o=r(Jye," (RemBERT model)"),Jye.forEach(t),u6o=i(G),r1=n(G,"LI",{});var Yye=s(r1);Nae=n(Yye,"STRONG",{});var EJr=s(Nae);b6o=r(EJr,"roberta"),EJr.forEach(t),v6o=r(Yye," \u2014 "),Lj=n(Yye,"A",{href:!0});var yJr=s(Lj);T6o=r(yJr,"RobertaForMultipleChoice"),yJr.forEach(t),F6o=r(Yye," (RoBERTa model)"),Yye.forEach(t),C6o=i(G),t1=n(G,"LI",{});var Kye=s(t1);qae=n(Kye,"STRONG",{});var wJr=s(qae);M6o=r(wJr,"roformer"),wJr.forEach(t),E6o=r(Kye," \u2014 "),Bj=n(Kye,"A",{href:!0});var AJr=s(Bj);y6o=r(AJr,"RoFormerForMultipleChoice"),AJr.forEach(t),w6o=r(Kye," (RoFormer model)"),Kye.forEach(t),A6o=i(G),a1=n(G,"LI",{});var Zye=s(a1);Oae=n(Zye,"STRONG",{});var LJr=s(Oae);L6o=r(LJr,"squeezebert"),LJr.forEach(t),B6o=r(Zye," \u2014 "),xj=n(Zye,"A",{href:!0});var BJr=s(xj);x6o=r(BJr,"SqueezeBertForMultipleChoice"),BJr.forEach(t),k6o=r(Zye," (SqueezeBERT model)"),Zye.forEach(t),R6o=i(G),n1=n(G,"LI",{});var ewe=s(n1);Gae=n(ewe,"STRONG",{});var xJr=s(Gae);S6o=r(xJr,"xlm"),xJr.forEach(t),P6o=r(ewe," \u2014 "),kj=n(ewe,"A",{href:!0});var kJr=s(kj);$6o=r(kJr,"XLMForMultipleChoice"),kJr.forEach(t),I6o=r(ewe," (XLM model)"),ewe.forEach(t),j6o=i(G),s1=n(G,"LI",{});var owe=s(s1);Xae=n(owe,"STRONG",{});var RJr=s(Xae);D6o=r(RJr,"xlm-roberta"),RJr.forEach(t),N6o=r(owe," \u2014 "),Rj=n(owe,"A",{href:!0});var SJr=s(Rj);q6o=r(SJr,"XLMRobertaForMultipleChoice"),SJr.forEach(t),O6o=r(owe," (XLM-RoBERTa model)"),owe.forEach(t),G6o=i(G),l1=n(G,"LI",{});var rwe=s(l1);Vae=n(rwe,"STRONG",{});var PJr=s(Vae);X6o=r(PJr,"xlm-roberta-xl"),PJr.forEach(t),V6o=r(rwe," \u2014 "),Sj=n(rwe,"A",{href:!0});var $Jr=s(Sj);z6o=r($Jr,"XLMRobertaXLForMultipleChoice"),$Jr.forEach(t),W6o=r(rwe," (XLM-RoBERTa-XL model)"),rwe.forEach(t),Q6o=i(G),i1=n(G,"LI",{});var twe=s(i1);zae=n(twe,"STRONG",{});var IJr=s(zae);H6o=r(IJr,"xlnet"),IJr.forEach(t),U6o=r(twe," \u2014 "),Pj=n(twe,"A",{href:!0});var jJr=s(Pj);J6o=r(jJr,"XLNetForMultipleChoice"),jJr.forEach(t),Y6o=r(twe," (XLNet model)"),twe.forEach(t),K6o=i(G),d1=n(G,"LI",{});var awe=s(d1);Wae=n(awe,"STRONG",{});var DJr=s(Wae);Z6o=r(DJr,"yoso"),DJr.forEach(t),eAo=r(awe," \u2014 "),$j=n(awe,"A",{href:!0});var NJr=s($j);oAo=r(NJr,"YosoForMultipleChoice"),NJr.forEach(t),rAo=r(awe," (YOSO model)"),awe.forEach(t),G.forEach(t),tAo=i(Wt),c1=n(Wt,"P",{});var nwe=s(c1);aAo=r(nwe,"The model is set in evaluation mode by default using "),Qae=n(nwe,"CODE",{});var qJr=s(Qae);nAo=r(qJr,"model.eval()"),qJr.forEach(t),sAo=r(nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(nwe,"CODE",{});var OJr=s(Hae);lAo=r(OJr,"model.train()"),OJr.forEach(t),nwe.forEach(t),iAo=i(Wt),Uae=n(Wt,"P",{});var GJr=s(Uae);dAo=r(GJr,"Examples:"),GJr.forEach(t),cAo=i(Wt),m(vy.$$.fragment,Wt),Wt.forEach(t),nl.forEach(t),wxe=i(d),bd=n(d,"H2",{class:!0});var $Re=s(bd);f1=n($Re,"A",{id:!0,class:!0,href:!0});var XJr=s(f1);Jae=n(XJr,"SPAN",{});var VJr=s(Jae);m(Ty.$$.fragment,VJr),VJr.forEach(t),XJr.forEach(t),fAo=i($Re),Yae=n($Re,"SPAN",{});var zJr=s(Yae);mAo=r(zJr,"AutoModelForNextSentencePrediction"),zJr.forEach(t),$Re.forEach(t),Axe=i(d),tr=n(d,"DIV",{class:!0});var ll=s(tr);m(Fy.$$.fragment,ll),gAo=i(ll),vd=n(ll,"P",{});var jz=s(vd);hAo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Kae=n(jz,"CODE",{});var WJr=s(Kae);pAo=r(WJr,"from_pretrained()"),WJr.forEach(t),_Ao=r(jz,"class method or the "),Zae=n(jz,"CODE",{});var QJr=s(Zae);uAo=r(QJr,"from_config()"),QJr.forEach(t),bAo=r(jz,`class
method.`),jz.forEach(t),vAo=i(ll),Cy=n(ll,"P",{});var IRe=s(Cy);TAo=r(IRe,"This class cannot be instantiated directly using "),ene=n(IRe,"CODE",{});var HJr=s(ene);FAo=r(HJr,"__init__()"),HJr.forEach(t),CAo=r(IRe," (throws an error)."),IRe.forEach(t),MAo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(My.$$.fragment,il),EAo=i(il),one=n(il,"P",{});var UJr=s(one);yAo=r(UJr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UJr.forEach(t),wAo=i(il),Td=n(il,"P",{});var Dz=s(Td);AAo=r(Dz,`Note:
Loading a model from its configuration file does `),rne=n(Dz,"STRONG",{});var JJr=s(rne);LAo=r(JJr,"not"),JJr.forEach(t),BAo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=n(Dz,"CODE",{});var YJr=s(tne);xAo=r(YJr,"from_pretrained()"),YJr.forEach(t),kAo=r(Dz,"to load the model weights."),Dz.forEach(t),RAo=i(il),ane=n(il,"P",{});var KJr=s(ane);SAo=r(KJr,"Examples:"),KJr.forEach(t),PAo=i(il),m(Ey.$$.fragment,il),il.forEach(t),$Ao=i(ll),Ve=n(ll,"DIV",{class:!0});var Qt=s(Ve);m(yy.$$.fragment,Qt),IAo=i(Qt),nne=n(Qt,"P",{});var ZJr=s(nne);jAo=r(ZJr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZJr.forEach(t),DAo=i(Qt),Ja=n(Qt,"P",{});var oE=s(Ja);NAo=r(oE,"The model class to instantiate is selected based on the "),sne=n(oE,"CODE",{});var eYr=s(sne);qAo=r(eYr,"model_type"),eYr.forEach(t),OAo=r(oE,` property of the config object (either
passed as an argument or loaded from `),lne=n(oE,"CODE",{});var oYr=s(lne);GAo=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),XAo=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(oE,"CODE",{});var rYr=s(ine);VAo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),zAo=r(oE,":"),oE.forEach(t),WAo=i(Qt),da=n(Qt,"UL",{});var dl=s(da);m1=n(dl,"LI",{});var swe=s(m1);dne=n(swe,"STRONG",{});var tYr=s(dne);QAo=r(tYr,"bert"),tYr.forEach(t),HAo=r(swe," \u2014 "),Ij=n(swe,"A",{href:!0});var aYr=s(Ij);UAo=r(aYr,"BertForNextSentencePrediction"),aYr.forEach(t),JAo=r(swe," (BERT model)"),swe.forEach(t),YAo=i(dl),g1=n(dl,"LI",{});var lwe=s(g1);cne=n(lwe,"STRONG",{});var nYr=s(cne);KAo=r(nYr,"fnet"),nYr.forEach(t),ZAo=r(lwe," \u2014 "),jj=n(lwe,"A",{href:!0});var sYr=s(jj);e0o=r(sYr,"FNetForNextSentencePrediction"),sYr.forEach(t),o0o=r(lwe," (FNet model)"),lwe.forEach(t),r0o=i(dl),h1=n(dl,"LI",{});var iwe=s(h1);fne=n(iwe,"STRONG",{});var lYr=s(fne);t0o=r(lYr,"megatron-bert"),lYr.forEach(t),a0o=r(iwe," \u2014 "),Dj=n(iwe,"A",{href:!0});var iYr=s(Dj);n0o=r(iYr,"MegatronBertForNextSentencePrediction"),iYr.forEach(t),s0o=r(iwe," (MegatronBert model)"),iwe.forEach(t),l0o=i(dl),p1=n(dl,"LI",{});var dwe=s(p1);mne=n(dwe,"STRONG",{});var dYr=s(mne);i0o=r(dYr,"mobilebert"),dYr.forEach(t),d0o=r(dwe," \u2014 "),Nj=n(dwe,"A",{href:!0});var cYr=s(Nj);c0o=r(cYr,"MobileBertForNextSentencePrediction"),cYr.forEach(t),f0o=r(dwe," (MobileBERT model)"),dwe.forEach(t),m0o=i(dl),_1=n(dl,"LI",{});var cwe=s(_1);gne=n(cwe,"STRONG",{});var fYr=s(gne);g0o=r(fYr,"qdqbert"),fYr.forEach(t),h0o=r(cwe," \u2014 "),qj=n(cwe,"A",{href:!0});var mYr=s(qj);p0o=r(mYr,"QDQBertForNextSentencePrediction"),mYr.forEach(t),_0o=r(cwe," (QDQBert model)"),cwe.forEach(t),dl.forEach(t),u0o=i(Qt),u1=n(Qt,"P",{});var fwe=s(u1);b0o=r(fwe,"The model is set in evaluation mode by default using "),hne=n(fwe,"CODE",{});var gYr=s(hne);v0o=r(gYr,"model.eval()"),gYr.forEach(t),T0o=r(fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pne=n(fwe,"CODE",{});var hYr=s(pne);F0o=r(hYr,"model.train()"),hYr.forEach(t),fwe.forEach(t),C0o=i(Qt),_ne=n(Qt,"P",{});var pYr=s(_ne);M0o=r(pYr,"Examples:"),pYr.forEach(t),E0o=i(Qt),m(wy.$$.fragment,Qt),Qt.forEach(t),ll.forEach(t),Lxe=i(d),Fd=n(d,"H2",{class:!0});var jRe=s(Fd);b1=n(jRe,"A",{id:!0,class:!0,href:!0});var _Yr=s(b1);une=n(_Yr,"SPAN",{});var uYr=s(une);m(Ay.$$.fragment,uYr),uYr.forEach(t),_Yr.forEach(t),y0o=i(jRe),bne=n(jRe,"SPAN",{});var bYr=s(bne);w0o=r(bYr,"AutoModelForTokenClassification"),bYr.forEach(t),jRe.forEach(t),Bxe=i(d),ar=n(d,"DIV",{class:!0});var cl=s(ar);m(Ly.$$.fragment,cl),A0o=i(cl),Cd=n(cl,"P",{});var Nz=s(Cd);L0o=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vne=n(Nz,"CODE",{});var vYr=s(vne);B0o=r(vYr,"from_pretrained()"),vYr.forEach(t),x0o=r(Nz,"class method or the "),Tne=n(Nz,"CODE",{});var TYr=s(Tne);k0o=r(TYr,"from_config()"),TYr.forEach(t),R0o=r(Nz,`class
method.`),Nz.forEach(t),S0o=i(cl),By=n(cl,"P",{});var DRe=s(By);P0o=r(DRe,"This class cannot be instantiated directly using "),Fne=n(DRe,"CODE",{});var FYr=s(Fne);$0o=r(FYr,"__init__()"),FYr.forEach(t),I0o=r(DRe," (throws an error)."),DRe.forEach(t),j0o=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(xy.$$.fragment,fl),D0o=i(fl),Cne=n(fl,"P",{});var CYr=s(Cne);N0o=r(CYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CYr.forEach(t),q0o=i(fl),Md=n(fl,"P",{});var qz=s(Md);O0o=r(qz,`Note:
Loading a model from its configuration file does `),Mne=n(qz,"STRONG",{});var MYr=s(Mne);G0o=r(MYr,"not"),MYr.forEach(t),X0o=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ene=n(qz,"CODE",{});var EYr=s(Ene);V0o=r(EYr,"from_pretrained()"),EYr.forEach(t),z0o=r(qz,"to load the model weights."),qz.forEach(t),W0o=i(fl),yne=n(fl,"P",{});var yYr=s(yne);Q0o=r(yYr,"Examples:"),yYr.forEach(t),H0o=i(fl),m(ky.$$.fragment,fl),fl.forEach(t),U0o=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(Ry.$$.fragment,Ht),J0o=i(Ht),wne=n(Ht,"P",{});var wYr=s(wne);Y0o=r(wYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wYr.forEach(t),K0o=i(Ht),Ya=n(Ht,"P",{});var rE=s(Ya);Z0o=r(rE,"The model class to instantiate is selected based on the "),Ane=n(rE,"CODE",{});var AYr=s(Ane);eLo=r(AYr,"model_type"),AYr.forEach(t),oLo=r(rE,` property of the config object (either
passed as an argument or loaded from `),Lne=n(rE,"CODE",{});var LYr=s(Lne);rLo=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),tLo=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=n(rE,"CODE",{});var BYr=s(Bne);aLo=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),nLo=r(rE,":"),rE.forEach(t),sLo=i(Ht),N=n(Ht,"UL",{});var q=s(N);v1=n(q,"LI",{});var mwe=s(v1);xne=n(mwe,"STRONG",{});var xYr=s(xne);lLo=r(xYr,"albert"),xYr.forEach(t),iLo=r(mwe," \u2014 "),Oj=n(mwe,"A",{href:!0});var kYr=s(Oj);dLo=r(kYr,"AlbertForTokenClassification"),kYr.forEach(t),cLo=r(mwe," (ALBERT model)"),mwe.forEach(t),fLo=i(q),T1=n(q,"LI",{});var gwe=s(T1);kne=n(gwe,"STRONG",{});var RYr=s(kne);mLo=r(RYr,"bert"),RYr.forEach(t),gLo=r(gwe," \u2014 "),Gj=n(gwe,"A",{href:!0});var SYr=s(Gj);hLo=r(SYr,"BertForTokenClassification"),SYr.forEach(t),pLo=r(gwe," (BERT model)"),gwe.forEach(t),_Lo=i(q),F1=n(q,"LI",{});var hwe=s(F1);Rne=n(hwe,"STRONG",{});var PYr=s(Rne);uLo=r(PYr,"big_bird"),PYr.forEach(t),bLo=r(hwe," \u2014 "),Xj=n(hwe,"A",{href:!0});var $Yr=s(Xj);vLo=r($Yr,"BigBirdForTokenClassification"),$Yr.forEach(t),TLo=r(hwe," (BigBird model)"),hwe.forEach(t),FLo=i(q),C1=n(q,"LI",{});var pwe=s(C1);Sne=n(pwe,"STRONG",{});var IYr=s(Sne);CLo=r(IYr,"camembert"),IYr.forEach(t),MLo=r(pwe," \u2014 "),Vj=n(pwe,"A",{href:!0});var jYr=s(Vj);ELo=r(jYr,"CamembertForTokenClassification"),jYr.forEach(t),yLo=r(pwe," (CamemBERT model)"),pwe.forEach(t),wLo=i(q),M1=n(q,"LI",{});var _we=s(M1);Pne=n(_we,"STRONG",{});var DYr=s(Pne);ALo=r(DYr,"canine"),DYr.forEach(t),LLo=r(_we," \u2014 "),zj=n(_we,"A",{href:!0});var NYr=s(zj);BLo=r(NYr,"CanineForTokenClassification"),NYr.forEach(t),xLo=r(_we," (Canine model)"),_we.forEach(t),kLo=i(q),E1=n(q,"LI",{});var uwe=s(E1);$ne=n(uwe,"STRONG",{});var qYr=s($ne);RLo=r(qYr,"convbert"),qYr.forEach(t),SLo=r(uwe," \u2014 "),Wj=n(uwe,"A",{href:!0});var OYr=s(Wj);PLo=r(OYr,"ConvBertForTokenClassification"),OYr.forEach(t),$Lo=r(uwe," (ConvBERT model)"),uwe.forEach(t),ILo=i(q),y1=n(q,"LI",{});var bwe=s(y1);Ine=n(bwe,"STRONG",{});var GYr=s(Ine);jLo=r(GYr,"data2vec-text"),GYr.forEach(t),DLo=r(bwe," \u2014 "),Qj=n(bwe,"A",{href:!0});var XYr=s(Qj);NLo=r(XYr,"Data2VecTextForTokenClassification"),XYr.forEach(t),qLo=r(bwe," (Data2VecText model)"),bwe.forEach(t),OLo=i(q),w1=n(q,"LI",{});var vwe=s(w1);jne=n(vwe,"STRONG",{});var VYr=s(jne);GLo=r(VYr,"deberta"),VYr.forEach(t),XLo=r(vwe," \u2014 "),Hj=n(vwe,"A",{href:!0});var zYr=s(Hj);VLo=r(zYr,"DebertaForTokenClassification"),zYr.forEach(t),zLo=r(vwe," (DeBERTa model)"),vwe.forEach(t),WLo=i(q),A1=n(q,"LI",{});var Twe=s(A1);Dne=n(Twe,"STRONG",{});var WYr=s(Dne);QLo=r(WYr,"deberta-v2"),WYr.forEach(t),HLo=r(Twe," \u2014 "),Uj=n(Twe,"A",{href:!0});var QYr=s(Uj);ULo=r(QYr,"DebertaV2ForTokenClassification"),QYr.forEach(t),JLo=r(Twe," (DeBERTa-v2 model)"),Twe.forEach(t),YLo=i(q),L1=n(q,"LI",{});var Fwe=s(L1);Nne=n(Fwe,"STRONG",{});var HYr=s(Nne);KLo=r(HYr,"distilbert"),HYr.forEach(t),ZLo=r(Fwe," \u2014 "),Jj=n(Fwe,"A",{href:!0});var UYr=s(Jj);e8o=r(UYr,"DistilBertForTokenClassification"),UYr.forEach(t),o8o=r(Fwe," (DistilBERT model)"),Fwe.forEach(t),r8o=i(q),B1=n(q,"LI",{});var Cwe=s(B1);qne=n(Cwe,"STRONG",{});var JYr=s(qne);t8o=r(JYr,"electra"),JYr.forEach(t),a8o=r(Cwe," \u2014 "),Yj=n(Cwe,"A",{href:!0});var YYr=s(Yj);n8o=r(YYr,"ElectraForTokenClassification"),YYr.forEach(t),s8o=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),l8o=i(q),x1=n(q,"LI",{});var Mwe=s(x1);One=n(Mwe,"STRONG",{});var KYr=s(One);i8o=r(KYr,"flaubert"),KYr.forEach(t),d8o=r(Mwe," \u2014 "),Kj=n(Mwe,"A",{href:!0});var ZYr=s(Kj);c8o=r(ZYr,"FlaubertForTokenClassification"),ZYr.forEach(t),f8o=r(Mwe," (FlauBERT model)"),Mwe.forEach(t),m8o=i(q),k1=n(q,"LI",{});var Ewe=s(k1);Gne=n(Ewe,"STRONG",{});var eKr=s(Gne);g8o=r(eKr,"fnet"),eKr.forEach(t),h8o=r(Ewe," \u2014 "),Zj=n(Ewe,"A",{href:!0});var oKr=s(Zj);p8o=r(oKr,"FNetForTokenClassification"),oKr.forEach(t),_8o=r(Ewe," (FNet model)"),Ewe.forEach(t),u8o=i(q),R1=n(q,"LI",{});var ywe=s(R1);Xne=n(ywe,"STRONG",{});var rKr=s(Xne);b8o=r(rKr,"funnel"),rKr.forEach(t),v8o=r(ywe," \u2014 "),eD=n(ywe,"A",{href:!0});var tKr=s(eD);T8o=r(tKr,"FunnelForTokenClassification"),tKr.forEach(t),F8o=r(ywe," (Funnel Transformer model)"),ywe.forEach(t),C8o=i(q),S1=n(q,"LI",{});var wwe=s(S1);Vne=n(wwe,"STRONG",{});var aKr=s(Vne);M8o=r(aKr,"gpt2"),aKr.forEach(t),E8o=r(wwe," \u2014 "),oD=n(wwe,"A",{href:!0});var nKr=s(oD);y8o=r(nKr,"GPT2ForTokenClassification"),nKr.forEach(t),w8o=r(wwe," (OpenAI GPT-2 model)"),wwe.forEach(t),A8o=i(q),P1=n(q,"LI",{});var Awe=s(P1);zne=n(Awe,"STRONG",{});var sKr=s(zne);L8o=r(sKr,"ibert"),sKr.forEach(t),B8o=r(Awe," \u2014 "),rD=n(Awe,"A",{href:!0});var lKr=s(rD);x8o=r(lKr,"IBertForTokenClassification"),lKr.forEach(t),k8o=r(Awe," (I-BERT model)"),Awe.forEach(t),R8o=i(q),$1=n(q,"LI",{});var Lwe=s($1);Wne=n(Lwe,"STRONG",{});var iKr=s(Wne);S8o=r(iKr,"layoutlm"),iKr.forEach(t),P8o=r(Lwe," \u2014 "),tD=n(Lwe,"A",{href:!0});var dKr=s(tD);$8o=r(dKr,"LayoutLMForTokenClassification"),dKr.forEach(t),I8o=r(Lwe," (LayoutLM model)"),Lwe.forEach(t),j8o=i(q),I1=n(q,"LI",{});var Bwe=s(I1);Qne=n(Bwe,"STRONG",{});var cKr=s(Qne);D8o=r(cKr,"layoutlmv2"),cKr.forEach(t),N8o=r(Bwe," \u2014 "),aD=n(Bwe,"A",{href:!0});var fKr=s(aD);q8o=r(fKr,"LayoutLMv2ForTokenClassification"),fKr.forEach(t),O8o=r(Bwe," (LayoutLMv2 model)"),Bwe.forEach(t),G8o=i(q),j1=n(q,"LI",{});var xwe=s(j1);Hne=n(xwe,"STRONG",{});var mKr=s(Hne);X8o=r(mKr,"longformer"),mKr.forEach(t),V8o=r(xwe," \u2014 "),nD=n(xwe,"A",{href:!0});var gKr=s(nD);z8o=r(gKr,"LongformerForTokenClassification"),gKr.forEach(t),W8o=r(xwe," (Longformer model)"),xwe.forEach(t),Q8o=i(q),D1=n(q,"LI",{});var kwe=s(D1);Une=n(kwe,"STRONG",{});var hKr=s(Une);H8o=r(hKr,"megatron-bert"),hKr.forEach(t),U8o=r(kwe," \u2014 "),sD=n(kwe,"A",{href:!0});var pKr=s(sD);J8o=r(pKr,"MegatronBertForTokenClassification"),pKr.forEach(t),Y8o=r(kwe," (MegatronBert model)"),kwe.forEach(t),K8o=i(q),N1=n(q,"LI",{});var Rwe=s(N1);Jne=n(Rwe,"STRONG",{});var _Kr=s(Jne);Z8o=r(_Kr,"mobilebert"),_Kr.forEach(t),e7o=r(Rwe," \u2014 "),lD=n(Rwe,"A",{href:!0});var uKr=s(lD);o7o=r(uKr,"MobileBertForTokenClassification"),uKr.forEach(t),r7o=r(Rwe," (MobileBERT model)"),Rwe.forEach(t),t7o=i(q),q1=n(q,"LI",{});var Swe=s(q1);Yne=n(Swe,"STRONG",{});var bKr=s(Yne);a7o=r(bKr,"mpnet"),bKr.forEach(t),n7o=r(Swe," \u2014 "),iD=n(Swe,"A",{href:!0});var vKr=s(iD);s7o=r(vKr,"MPNetForTokenClassification"),vKr.forEach(t),l7o=r(Swe," (MPNet model)"),Swe.forEach(t),i7o=i(q),O1=n(q,"LI",{});var Pwe=s(O1);Kne=n(Pwe,"STRONG",{});var TKr=s(Kne);d7o=r(TKr,"nystromformer"),TKr.forEach(t),c7o=r(Pwe," \u2014 "),dD=n(Pwe,"A",{href:!0});var FKr=s(dD);f7o=r(FKr,"NystromformerForTokenClassification"),FKr.forEach(t),m7o=r(Pwe," (Nystromformer model)"),Pwe.forEach(t),g7o=i(q),G1=n(q,"LI",{});var $we=s(G1);Zne=n($we,"STRONG",{});var CKr=s(Zne);h7o=r(CKr,"qdqbert"),CKr.forEach(t),p7o=r($we," \u2014 "),cD=n($we,"A",{href:!0});var MKr=s(cD);_7o=r(MKr,"QDQBertForTokenClassification"),MKr.forEach(t),u7o=r($we," (QDQBert model)"),$we.forEach(t),b7o=i(q),X1=n(q,"LI",{});var Iwe=s(X1);ese=n(Iwe,"STRONG",{});var EKr=s(ese);v7o=r(EKr,"rembert"),EKr.forEach(t),T7o=r(Iwe," \u2014 "),fD=n(Iwe,"A",{href:!0});var yKr=s(fD);F7o=r(yKr,"RemBertForTokenClassification"),yKr.forEach(t),C7o=r(Iwe," (RemBERT model)"),Iwe.forEach(t),M7o=i(q),V1=n(q,"LI",{});var jwe=s(V1);ose=n(jwe,"STRONG",{});var wKr=s(ose);E7o=r(wKr,"roberta"),wKr.forEach(t),y7o=r(jwe," \u2014 "),mD=n(jwe,"A",{href:!0});var AKr=s(mD);w7o=r(AKr,"RobertaForTokenClassification"),AKr.forEach(t),A7o=r(jwe," (RoBERTa model)"),jwe.forEach(t),L7o=i(q),z1=n(q,"LI",{});var Dwe=s(z1);rse=n(Dwe,"STRONG",{});var LKr=s(rse);B7o=r(LKr,"roformer"),LKr.forEach(t),x7o=r(Dwe," \u2014 "),gD=n(Dwe,"A",{href:!0});var BKr=s(gD);k7o=r(BKr,"RoFormerForTokenClassification"),BKr.forEach(t),R7o=r(Dwe," (RoFormer model)"),Dwe.forEach(t),S7o=i(q),W1=n(q,"LI",{});var Nwe=s(W1);tse=n(Nwe,"STRONG",{});var xKr=s(tse);P7o=r(xKr,"squeezebert"),xKr.forEach(t),$7o=r(Nwe," \u2014 "),hD=n(Nwe,"A",{href:!0});var kKr=s(hD);I7o=r(kKr,"SqueezeBertForTokenClassification"),kKr.forEach(t),j7o=r(Nwe," (SqueezeBERT model)"),Nwe.forEach(t),D7o=i(q),Q1=n(q,"LI",{});var qwe=s(Q1);ase=n(qwe,"STRONG",{});var RKr=s(ase);N7o=r(RKr,"xlm"),RKr.forEach(t),q7o=r(qwe," \u2014 "),pD=n(qwe,"A",{href:!0});var SKr=s(pD);O7o=r(SKr,"XLMForTokenClassification"),SKr.forEach(t),G7o=r(qwe," (XLM model)"),qwe.forEach(t),X7o=i(q),H1=n(q,"LI",{});var Owe=s(H1);nse=n(Owe,"STRONG",{});var PKr=s(nse);V7o=r(PKr,"xlm-roberta"),PKr.forEach(t),z7o=r(Owe," \u2014 "),_D=n(Owe,"A",{href:!0});var $Kr=s(_D);W7o=r($Kr,"XLMRobertaForTokenClassification"),$Kr.forEach(t),Q7o=r(Owe," (XLM-RoBERTa model)"),Owe.forEach(t),H7o=i(q),U1=n(q,"LI",{});var Gwe=s(U1);sse=n(Gwe,"STRONG",{});var IKr=s(sse);U7o=r(IKr,"xlm-roberta-xl"),IKr.forEach(t),J7o=r(Gwe," \u2014 "),uD=n(Gwe,"A",{href:!0});var jKr=s(uD);Y7o=r(jKr,"XLMRobertaXLForTokenClassification"),jKr.forEach(t),K7o=r(Gwe," (XLM-RoBERTa-XL model)"),Gwe.forEach(t),Z7o=i(q),J1=n(q,"LI",{});var Xwe=s(J1);lse=n(Xwe,"STRONG",{});var DKr=s(lse);eBo=r(DKr,"xlnet"),DKr.forEach(t),oBo=r(Xwe," \u2014 "),bD=n(Xwe,"A",{href:!0});var NKr=s(bD);rBo=r(NKr,"XLNetForTokenClassification"),NKr.forEach(t),tBo=r(Xwe," (XLNet model)"),Xwe.forEach(t),aBo=i(q),Y1=n(q,"LI",{});var Vwe=s(Y1);ise=n(Vwe,"STRONG",{});var qKr=s(ise);nBo=r(qKr,"yoso"),qKr.forEach(t),sBo=r(Vwe," \u2014 "),vD=n(Vwe,"A",{href:!0});var OKr=s(vD);lBo=r(OKr,"YosoForTokenClassification"),OKr.forEach(t),iBo=r(Vwe," (YOSO model)"),Vwe.forEach(t),q.forEach(t),dBo=i(Ht),K1=n(Ht,"P",{});var zwe=s(K1);cBo=r(zwe,"The model is set in evaluation mode by default using "),dse=n(zwe,"CODE",{});var GKr=s(dse);fBo=r(GKr,"model.eval()"),GKr.forEach(t),mBo=r(zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cse=n(zwe,"CODE",{});var XKr=s(cse);gBo=r(XKr,"model.train()"),XKr.forEach(t),zwe.forEach(t),hBo=i(Ht),fse=n(Ht,"P",{});var VKr=s(fse);pBo=r(VKr,"Examples:"),VKr.forEach(t),_Bo=i(Ht),m(Sy.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),xxe=i(d),Ed=n(d,"H2",{class:!0});var NRe=s(Ed);Z1=n(NRe,"A",{id:!0,class:!0,href:!0});var zKr=s(Z1);mse=n(zKr,"SPAN",{});var WKr=s(mse);m(Py.$$.fragment,WKr),WKr.forEach(t),zKr.forEach(t),uBo=i(NRe),gse=n(NRe,"SPAN",{});var QKr=s(gse);bBo=r(QKr,"AutoModelForQuestionAnswering"),QKr.forEach(t),NRe.forEach(t),kxe=i(d),nr=n(d,"DIV",{class:!0});var ml=s(nr);m($y.$$.fragment,ml),vBo=i(ml),yd=n(ml,"P",{});var Oz=s(yd);TBo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hse=n(Oz,"CODE",{});var HKr=s(hse);FBo=r(HKr,"from_pretrained()"),HKr.forEach(t),CBo=r(Oz,"class method or the "),pse=n(Oz,"CODE",{});var UKr=s(pse);MBo=r(UKr,"from_config()"),UKr.forEach(t),EBo=r(Oz,`class
method.`),Oz.forEach(t),yBo=i(ml),Iy=n(ml,"P",{});var qRe=s(Iy);wBo=r(qRe,"This class cannot be instantiated directly using "),_se=n(qRe,"CODE",{});var JKr=s(_se);ABo=r(JKr,"__init__()"),JKr.forEach(t),LBo=r(qRe," (throws an error)."),qRe.forEach(t),BBo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(jy.$$.fragment,gl),xBo=i(gl),use=n(gl,"P",{});var YKr=s(use);kBo=r(YKr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YKr.forEach(t),RBo=i(gl),wd=n(gl,"P",{});var Gz=s(wd);SBo=r(Gz,`Note:
Loading a model from its configuration file does `),bse=n(Gz,"STRONG",{});var KKr=s(bse);PBo=r(KKr,"not"),KKr.forEach(t),$Bo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vse=n(Gz,"CODE",{});var ZKr=s(vse);IBo=r(ZKr,"from_pretrained()"),ZKr.forEach(t),jBo=r(Gz,"to load the model weights."),Gz.forEach(t),DBo=i(gl),Tse=n(gl,"P",{});var eZr=s(Tse);NBo=r(eZr,"Examples:"),eZr.forEach(t),qBo=i(gl),m(Dy.$$.fragment,gl),gl.forEach(t),OBo=i(ml),We=n(ml,"DIV",{class:!0});var Ut=s(We);m(Ny.$$.fragment,Ut),GBo=i(Ut),Fse=n(Ut,"P",{});var oZr=s(Fse);XBo=r(oZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oZr.forEach(t),VBo=i(Ut),Ka=n(Ut,"P",{});var tE=s(Ka);zBo=r(tE,"The model class to instantiate is selected based on the "),Cse=n(tE,"CODE",{});var rZr=s(Cse);WBo=r(rZr,"model_type"),rZr.forEach(t),QBo=r(tE,` property of the config object (either
passed as an argument or loaded from `),Mse=n(tE,"CODE",{});var tZr=s(Mse);HBo=r(tZr,"pretrained_model_name_or_path"),tZr.forEach(t),UBo=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ese=n(tE,"CODE",{});var aZr=s(Ese);JBo=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),YBo=r(tE,":"),tE.forEach(t),KBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);eb=n(P,"LI",{});var Wwe=s(eb);yse=n(Wwe,"STRONG",{});var nZr=s(yse);ZBo=r(nZr,"albert"),nZr.forEach(t),exo=r(Wwe," \u2014 "),TD=n(Wwe,"A",{href:!0});var sZr=s(TD);oxo=r(sZr,"AlbertForQuestionAnswering"),sZr.forEach(t),rxo=r(Wwe," (ALBERT model)"),Wwe.forEach(t),txo=i(P),ob=n(P,"LI",{});var Qwe=s(ob);wse=n(Qwe,"STRONG",{});var lZr=s(wse);axo=r(lZr,"bart"),lZr.forEach(t),nxo=r(Qwe," \u2014 "),FD=n(Qwe,"A",{href:!0});var iZr=s(FD);sxo=r(iZr,"BartForQuestionAnswering"),iZr.forEach(t),lxo=r(Qwe," (BART model)"),Qwe.forEach(t),ixo=i(P),rb=n(P,"LI",{});var Hwe=s(rb);Ase=n(Hwe,"STRONG",{});var dZr=s(Ase);dxo=r(dZr,"bert"),dZr.forEach(t),cxo=r(Hwe," \u2014 "),CD=n(Hwe,"A",{href:!0});var cZr=s(CD);fxo=r(cZr,"BertForQuestionAnswering"),cZr.forEach(t),mxo=r(Hwe," (BERT model)"),Hwe.forEach(t),gxo=i(P),tb=n(P,"LI",{});var Uwe=s(tb);Lse=n(Uwe,"STRONG",{});var fZr=s(Lse);hxo=r(fZr,"big_bird"),fZr.forEach(t),pxo=r(Uwe," \u2014 "),MD=n(Uwe,"A",{href:!0});var mZr=s(MD);_xo=r(mZr,"BigBirdForQuestionAnswering"),mZr.forEach(t),uxo=r(Uwe," (BigBird model)"),Uwe.forEach(t),bxo=i(P),ab=n(P,"LI",{});var Jwe=s(ab);Bse=n(Jwe,"STRONG",{});var gZr=s(Bse);vxo=r(gZr,"bigbird_pegasus"),gZr.forEach(t),Txo=r(Jwe," \u2014 "),ED=n(Jwe,"A",{href:!0});var hZr=s(ED);Fxo=r(hZr,"BigBirdPegasusForQuestionAnswering"),hZr.forEach(t),Cxo=r(Jwe," (BigBirdPegasus model)"),Jwe.forEach(t),Mxo=i(P),nb=n(P,"LI",{});var Ywe=s(nb);xse=n(Ywe,"STRONG",{});var pZr=s(xse);Exo=r(pZr,"camembert"),pZr.forEach(t),yxo=r(Ywe," \u2014 "),yD=n(Ywe,"A",{href:!0});var _Zr=s(yD);wxo=r(_Zr,"CamembertForQuestionAnswering"),_Zr.forEach(t),Axo=r(Ywe," (CamemBERT model)"),Ywe.forEach(t),Lxo=i(P),sb=n(P,"LI",{});var Kwe=s(sb);kse=n(Kwe,"STRONG",{});var uZr=s(kse);Bxo=r(uZr,"canine"),uZr.forEach(t),xxo=r(Kwe," \u2014 "),wD=n(Kwe,"A",{href:!0});var bZr=s(wD);kxo=r(bZr,"CanineForQuestionAnswering"),bZr.forEach(t),Rxo=r(Kwe," (Canine model)"),Kwe.forEach(t),Sxo=i(P),lb=n(P,"LI",{});var Zwe=s(lb);Rse=n(Zwe,"STRONG",{});var vZr=s(Rse);Pxo=r(vZr,"convbert"),vZr.forEach(t),$xo=r(Zwe," \u2014 "),AD=n(Zwe,"A",{href:!0});var TZr=s(AD);Ixo=r(TZr,"ConvBertForQuestionAnswering"),TZr.forEach(t),jxo=r(Zwe," (ConvBERT model)"),Zwe.forEach(t),Dxo=i(P),ib=n(P,"LI",{});var e6e=s(ib);Sse=n(e6e,"STRONG",{});var FZr=s(Sse);Nxo=r(FZr,"data2vec-text"),FZr.forEach(t),qxo=r(e6e," \u2014 "),LD=n(e6e,"A",{href:!0});var CZr=s(LD);Oxo=r(CZr,"Data2VecTextForQuestionAnswering"),CZr.forEach(t),Gxo=r(e6e," (Data2VecText model)"),e6e.forEach(t),Xxo=i(P),db=n(P,"LI",{});var o6e=s(db);Pse=n(o6e,"STRONG",{});var MZr=s(Pse);Vxo=r(MZr,"deberta"),MZr.forEach(t),zxo=r(o6e," \u2014 "),BD=n(o6e,"A",{href:!0});var EZr=s(BD);Wxo=r(EZr,"DebertaForQuestionAnswering"),EZr.forEach(t),Qxo=r(o6e," (DeBERTa model)"),o6e.forEach(t),Hxo=i(P),cb=n(P,"LI",{});var r6e=s(cb);$se=n(r6e,"STRONG",{});var yZr=s($se);Uxo=r(yZr,"deberta-v2"),yZr.forEach(t),Jxo=r(r6e," \u2014 "),xD=n(r6e,"A",{href:!0});var wZr=s(xD);Yxo=r(wZr,"DebertaV2ForQuestionAnswering"),wZr.forEach(t),Kxo=r(r6e," (DeBERTa-v2 model)"),r6e.forEach(t),Zxo=i(P),fb=n(P,"LI",{});var t6e=s(fb);Ise=n(t6e,"STRONG",{});var AZr=s(Ise);eko=r(AZr,"distilbert"),AZr.forEach(t),oko=r(t6e," \u2014 "),kD=n(t6e,"A",{href:!0});var LZr=s(kD);rko=r(LZr,"DistilBertForQuestionAnswering"),LZr.forEach(t),tko=r(t6e," (DistilBERT model)"),t6e.forEach(t),ako=i(P),mb=n(P,"LI",{});var a6e=s(mb);jse=n(a6e,"STRONG",{});var BZr=s(jse);nko=r(BZr,"electra"),BZr.forEach(t),sko=r(a6e," \u2014 "),RD=n(a6e,"A",{href:!0});var xZr=s(RD);lko=r(xZr,"ElectraForQuestionAnswering"),xZr.forEach(t),iko=r(a6e," (ELECTRA model)"),a6e.forEach(t),dko=i(P),gb=n(P,"LI",{});var n6e=s(gb);Dse=n(n6e,"STRONG",{});var kZr=s(Dse);cko=r(kZr,"flaubert"),kZr.forEach(t),fko=r(n6e," \u2014 "),SD=n(n6e,"A",{href:!0});var RZr=s(SD);mko=r(RZr,"FlaubertForQuestionAnsweringSimple"),RZr.forEach(t),gko=r(n6e," (FlauBERT model)"),n6e.forEach(t),hko=i(P),hb=n(P,"LI",{});var s6e=s(hb);Nse=n(s6e,"STRONG",{});var SZr=s(Nse);pko=r(SZr,"fnet"),SZr.forEach(t),_ko=r(s6e," \u2014 "),PD=n(s6e,"A",{href:!0});var PZr=s(PD);uko=r(PZr,"FNetForQuestionAnswering"),PZr.forEach(t),bko=r(s6e," (FNet model)"),s6e.forEach(t),vko=i(P),pb=n(P,"LI",{});var l6e=s(pb);qse=n(l6e,"STRONG",{});var $Zr=s(qse);Tko=r($Zr,"funnel"),$Zr.forEach(t),Fko=r(l6e," \u2014 "),$D=n(l6e,"A",{href:!0});var IZr=s($D);Cko=r(IZr,"FunnelForQuestionAnswering"),IZr.forEach(t),Mko=r(l6e," (Funnel Transformer model)"),l6e.forEach(t),Eko=i(P),_b=n(P,"LI",{});var i6e=s(_b);Ose=n(i6e,"STRONG",{});var jZr=s(Ose);yko=r(jZr,"gptj"),jZr.forEach(t),wko=r(i6e," \u2014 "),ID=n(i6e,"A",{href:!0});var DZr=s(ID);Ako=r(DZr,"GPTJForQuestionAnswering"),DZr.forEach(t),Lko=r(i6e," (GPT-J model)"),i6e.forEach(t),Bko=i(P),ub=n(P,"LI",{});var d6e=s(ub);Gse=n(d6e,"STRONG",{});var NZr=s(Gse);xko=r(NZr,"ibert"),NZr.forEach(t),kko=r(d6e," \u2014 "),jD=n(d6e,"A",{href:!0});var qZr=s(jD);Rko=r(qZr,"IBertForQuestionAnswering"),qZr.forEach(t),Sko=r(d6e," (I-BERT model)"),d6e.forEach(t),Pko=i(P),bb=n(P,"LI",{});var c6e=s(bb);Xse=n(c6e,"STRONG",{});var OZr=s(Xse);$ko=r(OZr,"layoutlmv2"),OZr.forEach(t),Iko=r(c6e," \u2014 "),DD=n(c6e,"A",{href:!0});var GZr=s(DD);jko=r(GZr,"LayoutLMv2ForQuestionAnswering"),GZr.forEach(t),Dko=r(c6e," (LayoutLMv2 model)"),c6e.forEach(t),Nko=i(P),vb=n(P,"LI",{});var f6e=s(vb);Vse=n(f6e,"STRONG",{});var XZr=s(Vse);qko=r(XZr,"led"),XZr.forEach(t),Oko=r(f6e," \u2014 "),ND=n(f6e,"A",{href:!0});var VZr=s(ND);Gko=r(VZr,"LEDForQuestionAnswering"),VZr.forEach(t),Xko=r(f6e," (LED model)"),f6e.forEach(t),Vko=i(P),Tb=n(P,"LI",{});var m6e=s(Tb);zse=n(m6e,"STRONG",{});var zZr=s(zse);zko=r(zZr,"longformer"),zZr.forEach(t),Wko=r(m6e," \u2014 "),qD=n(m6e,"A",{href:!0});var WZr=s(qD);Qko=r(WZr,"LongformerForQuestionAnswering"),WZr.forEach(t),Hko=r(m6e," (Longformer model)"),m6e.forEach(t),Uko=i(P),Fb=n(P,"LI",{});var g6e=s(Fb);Wse=n(g6e,"STRONG",{});var QZr=s(Wse);Jko=r(QZr,"lxmert"),QZr.forEach(t),Yko=r(g6e," \u2014 "),OD=n(g6e,"A",{href:!0});var HZr=s(OD);Kko=r(HZr,"LxmertForQuestionAnswering"),HZr.forEach(t),Zko=r(g6e," (LXMERT model)"),g6e.forEach(t),eRo=i(P),Cb=n(P,"LI",{});var h6e=s(Cb);Qse=n(h6e,"STRONG",{});var UZr=s(Qse);oRo=r(UZr,"mbart"),UZr.forEach(t),rRo=r(h6e," \u2014 "),GD=n(h6e,"A",{href:!0});var JZr=s(GD);tRo=r(JZr,"MBartForQuestionAnswering"),JZr.forEach(t),aRo=r(h6e," (mBART model)"),h6e.forEach(t),nRo=i(P),Mb=n(P,"LI",{});var p6e=s(Mb);Hse=n(p6e,"STRONG",{});var YZr=s(Hse);sRo=r(YZr,"megatron-bert"),YZr.forEach(t),lRo=r(p6e," \u2014 "),XD=n(p6e,"A",{href:!0});var KZr=s(XD);iRo=r(KZr,"MegatronBertForQuestionAnswering"),KZr.forEach(t),dRo=r(p6e," (MegatronBert model)"),p6e.forEach(t),cRo=i(P),Eb=n(P,"LI",{});var _6e=s(Eb);Use=n(_6e,"STRONG",{});var ZZr=s(Use);fRo=r(ZZr,"mobilebert"),ZZr.forEach(t),mRo=r(_6e," \u2014 "),VD=n(_6e,"A",{href:!0});var eet=s(VD);gRo=r(eet,"MobileBertForQuestionAnswering"),eet.forEach(t),hRo=r(_6e," (MobileBERT model)"),_6e.forEach(t),pRo=i(P),yb=n(P,"LI",{});var u6e=s(yb);Jse=n(u6e,"STRONG",{});var oet=s(Jse);_Ro=r(oet,"mpnet"),oet.forEach(t),uRo=r(u6e," \u2014 "),zD=n(u6e,"A",{href:!0});var ret=s(zD);bRo=r(ret,"MPNetForQuestionAnswering"),ret.forEach(t),vRo=r(u6e," (MPNet model)"),u6e.forEach(t),TRo=i(P),wb=n(P,"LI",{});var b6e=s(wb);Yse=n(b6e,"STRONG",{});var tet=s(Yse);FRo=r(tet,"nystromformer"),tet.forEach(t),CRo=r(b6e," \u2014 "),WD=n(b6e,"A",{href:!0});var aet=s(WD);MRo=r(aet,"NystromformerForQuestionAnswering"),aet.forEach(t),ERo=r(b6e," (Nystromformer model)"),b6e.forEach(t),yRo=i(P),Ab=n(P,"LI",{});var v6e=s(Ab);Kse=n(v6e,"STRONG",{});var net=s(Kse);wRo=r(net,"qdqbert"),net.forEach(t),ARo=r(v6e," \u2014 "),QD=n(v6e,"A",{href:!0});var set=s(QD);LRo=r(set,"QDQBertForQuestionAnswering"),set.forEach(t),BRo=r(v6e," (QDQBert model)"),v6e.forEach(t),xRo=i(P),Lb=n(P,"LI",{});var T6e=s(Lb);Zse=n(T6e,"STRONG",{});var iet=s(Zse);kRo=r(iet,"reformer"),iet.forEach(t),RRo=r(T6e," \u2014 "),HD=n(T6e,"A",{href:!0});var det=s(HD);SRo=r(det,"ReformerForQuestionAnswering"),det.forEach(t),PRo=r(T6e," (Reformer model)"),T6e.forEach(t),$Ro=i(P),Bb=n(P,"LI",{});var F6e=s(Bb);ele=n(F6e,"STRONG",{});var cet=s(ele);IRo=r(cet,"rembert"),cet.forEach(t),jRo=r(F6e," \u2014 "),UD=n(F6e,"A",{href:!0});var fet=s(UD);DRo=r(fet,"RemBertForQuestionAnswering"),fet.forEach(t),NRo=r(F6e," (RemBERT model)"),F6e.forEach(t),qRo=i(P),xb=n(P,"LI",{});var C6e=s(xb);ole=n(C6e,"STRONG",{});var met=s(ole);ORo=r(met,"roberta"),met.forEach(t),GRo=r(C6e," \u2014 "),JD=n(C6e,"A",{href:!0});var get=s(JD);XRo=r(get,"RobertaForQuestionAnswering"),get.forEach(t),VRo=r(C6e," (RoBERTa model)"),C6e.forEach(t),zRo=i(P),kb=n(P,"LI",{});var M6e=s(kb);rle=n(M6e,"STRONG",{});var het=s(rle);WRo=r(het,"roformer"),het.forEach(t),QRo=r(M6e," \u2014 "),YD=n(M6e,"A",{href:!0});var pet=s(YD);HRo=r(pet,"RoFormerForQuestionAnswering"),pet.forEach(t),URo=r(M6e," (RoFormer model)"),M6e.forEach(t),JRo=i(P),Rb=n(P,"LI",{});var E6e=s(Rb);tle=n(E6e,"STRONG",{});var _et=s(tle);YRo=r(_et,"splinter"),_et.forEach(t),KRo=r(E6e," \u2014 "),KD=n(E6e,"A",{href:!0});var uet=s(KD);ZRo=r(uet,"SplinterForQuestionAnswering"),uet.forEach(t),eSo=r(E6e," (Splinter model)"),E6e.forEach(t),oSo=i(P),Sb=n(P,"LI",{});var y6e=s(Sb);ale=n(y6e,"STRONG",{});var bet=s(ale);rSo=r(bet,"squeezebert"),bet.forEach(t),tSo=r(y6e," \u2014 "),ZD=n(y6e,"A",{href:!0});var vet=s(ZD);aSo=r(vet,"SqueezeBertForQuestionAnswering"),vet.forEach(t),nSo=r(y6e," (SqueezeBERT model)"),y6e.forEach(t),sSo=i(P),Pb=n(P,"LI",{});var w6e=s(Pb);nle=n(w6e,"STRONG",{});var Tet=s(nle);lSo=r(Tet,"xlm"),Tet.forEach(t),iSo=r(w6e," \u2014 "),eN=n(w6e,"A",{href:!0});var Fet=s(eN);dSo=r(Fet,"XLMForQuestionAnsweringSimple"),Fet.forEach(t),cSo=r(w6e," (XLM model)"),w6e.forEach(t),fSo=i(P),$b=n(P,"LI",{});var A6e=s($b);sle=n(A6e,"STRONG",{});var Cet=s(sle);mSo=r(Cet,"xlm-roberta"),Cet.forEach(t),gSo=r(A6e," \u2014 "),oN=n(A6e,"A",{href:!0});var Met=s(oN);hSo=r(Met,"XLMRobertaForQuestionAnswering"),Met.forEach(t),pSo=r(A6e," (XLM-RoBERTa model)"),A6e.forEach(t),_So=i(P),Ib=n(P,"LI",{});var L6e=s(Ib);lle=n(L6e,"STRONG",{});var Eet=s(lle);uSo=r(Eet,"xlm-roberta-xl"),Eet.forEach(t),bSo=r(L6e," \u2014 "),rN=n(L6e,"A",{href:!0});var yet=s(rN);vSo=r(yet,"XLMRobertaXLForQuestionAnswering"),yet.forEach(t),TSo=r(L6e," (XLM-RoBERTa-XL model)"),L6e.forEach(t),FSo=i(P),jb=n(P,"LI",{});var B6e=s(jb);ile=n(B6e,"STRONG",{});var wet=s(ile);CSo=r(wet,"xlnet"),wet.forEach(t),MSo=r(B6e," \u2014 "),tN=n(B6e,"A",{href:!0});var Aet=s(tN);ESo=r(Aet,"XLNetForQuestionAnsweringSimple"),Aet.forEach(t),ySo=r(B6e," (XLNet model)"),B6e.forEach(t),wSo=i(P),Db=n(P,"LI",{});var x6e=s(Db);dle=n(x6e,"STRONG",{});var Let=s(dle);ASo=r(Let,"yoso"),Let.forEach(t),LSo=r(x6e," \u2014 "),aN=n(x6e,"A",{href:!0});var Bet=s(aN);BSo=r(Bet,"YosoForQuestionAnswering"),Bet.forEach(t),xSo=r(x6e," (YOSO model)"),x6e.forEach(t),P.forEach(t),kSo=i(Ut),Nb=n(Ut,"P",{});var k6e=s(Nb);RSo=r(k6e,"The model is set in evaluation mode by default using "),cle=n(k6e,"CODE",{});var xet=s(cle);SSo=r(xet,"model.eval()"),xet.forEach(t),PSo=r(k6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=n(k6e,"CODE",{});var ket=s(fle);$So=r(ket,"model.train()"),ket.forEach(t),k6e.forEach(t),ISo=i(Ut),mle=n(Ut,"P",{});var Ret=s(mle);jSo=r(Ret,"Examples:"),Ret.forEach(t),DSo=i(Ut),m(qy.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),Rxe=i(d),Ad=n(d,"H2",{class:!0});var ORe=s(Ad);qb=n(ORe,"A",{id:!0,class:!0,href:!0});var Set=s(qb);gle=n(Set,"SPAN",{});var Pet=s(gle);m(Oy.$$.fragment,Pet),Pet.forEach(t),Set.forEach(t),NSo=i(ORe),hle=n(ORe,"SPAN",{});var $et=s(hle);qSo=r($et,"AutoModelForTableQuestionAnswering"),$et.forEach(t),ORe.forEach(t),Sxe=i(d),sr=n(d,"DIV",{class:!0});var hl=s(sr);m(Gy.$$.fragment,hl),OSo=i(hl),Ld=n(hl,"P",{});var Xz=s(Ld);GSo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ple=n(Xz,"CODE",{});var Iet=s(ple);XSo=r(Iet,"from_pretrained()"),Iet.forEach(t),VSo=r(Xz,"class method or the "),_le=n(Xz,"CODE",{});var jet=s(_le);zSo=r(jet,"from_config()"),jet.forEach(t),WSo=r(Xz,`class
method.`),Xz.forEach(t),QSo=i(hl),Xy=n(hl,"P",{});var GRe=s(Xy);HSo=r(GRe,"This class cannot be instantiated directly using "),ule=n(GRe,"CODE",{});var Det=s(ule);USo=r(Det,"__init__()"),Det.forEach(t),JSo=r(GRe," (throws an error)."),GRe.forEach(t),YSo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(Vy.$$.fragment,pl),KSo=i(pl),ble=n(pl,"P",{});var Net=s(ble);ZSo=r(Net,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Net.forEach(t),ePo=i(pl),Bd=n(pl,"P",{});var Vz=s(Bd);oPo=r(Vz,`Note:
Loading a model from its configuration file does `),vle=n(Vz,"STRONG",{});var qet=s(vle);rPo=r(qet,"not"),qet.forEach(t),tPo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=n(Vz,"CODE",{});var Oet=s(Tle);aPo=r(Oet,"from_pretrained()"),Oet.forEach(t),nPo=r(Vz,"to load the model weights."),Vz.forEach(t),sPo=i(pl),Fle=n(pl,"P",{});var Get=s(Fle);lPo=r(Get,"Examples:"),Get.forEach(t),iPo=i(pl),m(zy.$$.fragment,pl),pl.forEach(t),dPo=i(hl),Qe=n(hl,"DIV",{class:!0});var Jt=s(Qe);m(Wy.$$.fragment,Jt),cPo=i(Jt),Cle=n(Jt,"P",{});var Xet=s(Cle);fPo=r(Xet,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xet.forEach(t),mPo=i(Jt),Za=n(Jt,"P",{});var aE=s(Za);gPo=r(aE,"The model class to instantiate is selected based on the "),Mle=n(aE,"CODE",{});var Vet=s(Mle);hPo=r(Vet,"model_type"),Vet.forEach(t),pPo=r(aE,` property of the config object (either
passed as an argument or loaded from `),Ele=n(aE,"CODE",{});var zet=s(Ele);_Po=r(zet,"pretrained_model_name_or_path"),zet.forEach(t),uPo=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(aE,"CODE",{});var Wet=s(yle);bPo=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),vPo=r(aE,":"),aE.forEach(t),TPo=i(Jt),wle=n(Jt,"UL",{});var Qet=s(wle);Ob=n(Qet,"LI",{});var R6e=s(Ob);Ale=n(R6e,"STRONG",{});var Het=s(Ale);FPo=r(Het,"tapas"),Het.forEach(t),CPo=r(R6e," \u2014 "),nN=n(R6e,"A",{href:!0});var Uet=s(nN);MPo=r(Uet,"TapasForQuestionAnswering"),Uet.forEach(t),EPo=r(R6e," (TAPAS model)"),R6e.forEach(t),Qet.forEach(t),yPo=i(Jt),Gb=n(Jt,"P",{});var S6e=s(Gb);wPo=r(S6e,"The model is set in evaluation mode by default using "),Lle=n(S6e,"CODE",{});var Jet=s(Lle);APo=r(Jet,"model.eval()"),Jet.forEach(t),LPo=r(S6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(S6e,"CODE",{});var Yet=s(Ble);BPo=r(Yet,"model.train()"),Yet.forEach(t),S6e.forEach(t),xPo=i(Jt),xle=n(Jt,"P",{});var Ket=s(xle);kPo=r(Ket,"Examples:"),Ket.forEach(t),RPo=i(Jt),m(Qy.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),Pxe=i(d),xd=n(d,"H2",{class:!0});var XRe=s(xd);Xb=n(XRe,"A",{id:!0,class:!0,href:!0});var Zet=s(Xb);kle=n(Zet,"SPAN",{});var eot=s(kle);m(Hy.$$.fragment,eot),eot.forEach(t),Zet.forEach(t),SPo=i(XRe),Rle=n(XRe,"SPAN",{});var oot=s(Rle);PPo=r(oot,"AutoModelForImageClassification"),oot.forEach(t),XRe.forEach(t),$xe=i(d),lr=n(d,"DIV",{class:!0});var _l=s(lr);m(Uy.$$.fragment,_l),$Po=i(_l),kd=n(_l,"P",{});var zz=s(kd);IPo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Sle=n(zz,"CODE",{});var rot=s(Sle);jPo=r(rot,"from_pretrained()"),rot.forEach(t),DPo=r(zz,"class method or the "),Ple=n(zz,"CODE",{});var tot=s(Ple);NPo=r(tot,"from_config()"),tot.forEach(t),qPo=r(zz,`class
method.`),zz.forEach(t),OPo=i(_l),Jy=n(_l,"P",{});var VRe=s(Jy);GPo=r(VRe,"This class cannot be instantiated directly using "),$le=n(VRe,"CODE",{});var aot=s($le);XPo=r(aot,"__init__()"),aot.forEach(t),VPo=r(VRe," (throws an error)."),VRe.forEach(t),zPo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(Yy.$$.fragment,ul),WPo=i(ul),Ile=n(ul,"P",{});var not=s(Ile);QPo=r(not,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),not.forEach(t),HPo=i(ul),Rd=n(ul,"P",{});var Wz=s(Rd);UPo=r(Wz,`Note:
Loading a model from its configuration file does `),jle=n(Wz,"STRONG",{});var sot=s(jle);JPo=r(sot,"not"),sot.forEach(t),YPo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=n(Wz,"CODE",{});var lot=s(Dle);KPo=r(lot,"from_pretrained()"),lot.forEach(t),ZPo=r(Wz,"to load the model weights."),Wz.forEach(t),e$o=i(ul),Nle=n(ul,"P",{});var iot=s(Nle);o$o=r(iot,"Examples:"),iot.forEach(t),r$o=i(ul),m(Ky.$$.fragment,ul),ul.forEach(t),t$o=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(Zy.$$.fragment,Yt),a$o=i(Yt),qle=n(Yt,"P",{});var dot=s(qle);n$o=r(dot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dot.forEach(t),s$o=i(Yt),en=n(Yt,"P",{});var nE=s(en);l$o=r(nE,"The model class to instantiate is selected based on the "),Ole=n(nE,"CODE",{});var cot=s(Ole);i$o=r(cot,"model_type"),cot.forEach(t),d$o=r(nE,` property of the config object (either
passed as an argument or loaded from `),Gle=n(nE,"CODE",{});var fot=s(Gle);c$o=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),f$o=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(nE,"CODE",{});var mot=s(Xle);m$o=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),g$o=r(nE,":"),nE.forEach(t),h$o=i(Yt),Fe=n(Yt,"UL",{});var so=s(Fe);Vb=n(so,"LI",{});var P6e=s(Vb);Vle=n(P6e,"STRONG",{});var got=s(Vle);p$o=r(got,"beit"),got.forEach(t),_$o=r(P6e," \u2014 "),sN=n(P6e,"A",{href:!0});var hot=s(sN);u$o=r(hot,"BeitForImageClassification"),hot.forEach(t),b$o=r(P6e," (BEiT model)"),P6e.forEach(t),v$o=i(so),zb=n(so,"LI",{});var $6e=s(zb);zle=n($6e,"STRONG",{});var pot=s(zle);T$o=r(pot,"convnext"),pot.forEach(t),F$o=r($6e," \u2014 "),lN=n($6e,"A",{href:!0});var _ot=s(lN);C$o=r(_ot,"ConvNextForImageClassification"),_ot.forEach(t),M$o=r($6e," (ConvNext model)"),$6e.forEach(t),E$o=i(so),Os=n(so,"LI",{});var j8=s(Os);Wle=n(j8,"STRONG",{});var uot=s(Wle);y$o=r(uot,"deit"),uot.forEach(t),w$o=r(j8," \u2014 "),iN=n(j8,"A",{href:!0});var bot=s(iN);A$o=r(bot,"DeiTForImageClassification"),bot.forEach(t),L$o=r(j8," or "),dN=n(j8,"A",{href:!0});var vot=s(dN);B$o=r(vot,"DeiTForImageClassificationWithTeacher"),vot.forEach(t),x$o=r(j8," (DeiT model)"),j8.forEach(t),k$o=i(so),Wb=n(so,"LI",{});var I6e=s(Wb);Qle=n(I6e,"STRONG",{});var Tot=s(Qle);R$o=r(Tot,"imagegpt"),Tot.forEach(t),S$o=r(I6e," \u2014 "),cN=n(I6e,"A",{href:!0});var Fot=s(cN);P$o=r(Fot,"ImageGPTForImageClassification"),Fot.forEach(t),$$o=r(I6e," (ImageGPT model)"),I6e.forEach(t),I$o=i(so),fa=n(so,"LI",{});var $f=s(fa);Hle=n($f,"STRONG",{});var Cot=s(Hle);j$o=r(Cot,"perceiver"),Cot.forEach(t),D$o=r($f," \u2014 "),fN=n($f,"A",{href:!0});var Mot=s(fN);N$o=r(Mot,"PerceiverForImageClassificationLearned"),Mot.forEach(t),q$o=r($f," or "),mN=n($f,"A",{href:!0});var Eot=s(mN);O$o=r(Eot,"PerceiverForImageClassificationFourier"),Eot.forEach(t),G$o=r($f," or "),gN=n($f,"A",{href:!0});var yot=s(gN);X$o=r(yot,"PerceiverForImageClassificationConvProcessing"),yot.forEach(t),V$o=r($f," (Perceiver model)"),$f.forEach(t),z$o=i(so),Qb=n(so,"LI",{});var j6e=s(Qb);Ule=n(j6e,"STRONG",{});var wot=s(Ule);W$o=r(wot,"poolformer"),wot.forEach(t),Q$o=r(j6e," \u2014 "),hN=n(j6e,"A",{href:!0});var Aot=s(hN);H$o=r(Aot,"PoolFormerForImageClassification"),Aot.forEach(t),U$o=r(j6e," (PoolFormer model)"),j6e.forEach(t),J$o=i(so),Hb=n(so,"LI",{});var D6e=s(Hb);Jle=n(D6e,"STRONG",{});var Lot=s(Jle);Y$o=r(Lot,"segformer"),Lot.forEach(t),K$o=r(D6e," \u2014 "),pN=n(D6e,"A",{href:!0});var Bot=s(pN);Z$o=r(Bot,"SegformerForImageClassification"),Bot.forEach(t),eIo=r(D6e," (SegFormer model)"),D6e.forEach(t),oIo=i(so),Ub=n(so,"LI",{});var N6e=s(Ub);Yle=n(N6e,"STRONG",{});var xot=s(Yle);rIo=r(xot,"swin"),xot.forEach(t),tIo=r(N6e," \u2014 "),_N=n(N6e,"A",{href:!0});var kot=s(_N);aIo=r(kot,"SwinForImageClassification"),kot.forEach(t),nIo=r(N6e," (Swin model)"),N6e.forEach(t),sIo=i(so),Jb=n(so,"LI",{});var q6e=s(Jb);Kle=n(q6e,"STRONG",{});var Rot=s(Kle);lIo=r(Rot,"vit"),Rot.forEach(t),iIo=r(q6e," \u2014 "),uN=n(q6e,"A",{href:!0});var Sot=s(uN);dIo=r(Sot,"ViTForImageClassification"),Sot.forEach(t),cIo=r(q6e," (ViT model)"),q6e.forEach(t),so.forEach(t),fIo=i(Yt),Yb=n(Yt,"P",{});var O6e=s(Yb);mIo=r(O6e,"The model is set in evaluation mode by default using "),Zle=n(O6e,"CODE",{});var Pot=s(Zle);gIo=r(Pot,"model.eval()"),Pot.forEach(t),hIo=r(O6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eie=n(O6e,"CODE",{});var $ot=s(eie);pIo=r($ot,"model.train()"),$ot.forEach(t),O6e.forEach(t),_Io=i(Yt),oie=n(Yt,"P",{});var Iot=s(oie);uIo=r(Iot,"Examples:"),Iot.forEach(t),bIo=i(Yt),m(ew.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),Ixe=i(d),Sd=n(d,"H2",{class:!0});var zRe=s(Sd);Kb=n(zRe,"A",{id:!0,class:!0,href:!0});var jot=s(Kb);rie=n(jot,"SPAN",{});var Dot=s(rie);m(ow.$$.fragment,Dot),Dot.forEach(t),jot.forEach(t),vIo=i(zRe),tie=n(zRe,"SPAN",{});var Not=s(tie);TIo=r(Not,"AutoModelForVision2Seq"),Not.forEach(t),zRe.forEach(t),jxe=i(d),ir=n(d,"DIV",{class:!0});var bl=s(ir);m(rw.$$.fragment,bl),FIo=i(bl),Pd=n(bl,"P",{});var Qz=s(Pd);CIo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aie=n(Qz,"CODE",{});var qot=s(aie);MIo=r(qot,"from_pretrained()"),qot.forEach(t),EIo=r(Qz,"class method or the "),nie=n(Qz,"CODE",{});var Oot=s(nie);yIo=r(Oot,"from_config()"),Oot.forEach(t),wIo=r(Qz,`class
method.`),Qz.forEach(t),AIo=i(bl),tw=n(bl,"P",{});var WRe=s(tw);LIo=r(WRe,"This class cannot be instantiated directly using "),sie=n(WRe,"CODE",{});var Got=s(sie);BIo=r(Got,"__init__()"),Got.forEach(t),xIo=r(WRe," (throws an error)."),WRe.forEach(t),kIo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(aw.$$.fragment,vl),RIo=i(vl),lie=n(vl,"P",{});var Xot=s(lie);SIo=r(Xot,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xot.forEach(t),PIo=i(vl),$d=n(vl,"P",{});var Hz=s($d);$Io=r(Hz,`Note:
Loading a model from its configuration file does `),iie=n(Hz,"STRONG",{});var Vot=s(iie);IIo=r(Vot,"not"),Vot.forEach(t),jIo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),die=n(Hz,"CODE",{});var zot=s(die);DIo=r(zot,"from_pretrained()"),zot.forEach(t),NIo=r(Hz,"to load the model weights."),Hz.forEach(t),qIo=i(vl),cie=n(vl,"P",{});var Wot=s(cie);OIo=r(Wot,"Examples:"),Wot.forEach(t),GIo=i(vl),m(nw.$$.fragment,vl),vl.forEach(t),XIo=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(sw.$$.fragment,Kt),VIo=i(Kt),fie=n(Kt,"P",{});var Qot=s(fie);zIo=r(Qot,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qot.forEach(t),WIo=i(Kt),on=n(Kt,"P",{});var sE=s(on);QIo=r(sE,"The model class to instantiate is selected based on the "),mie=n(sE,"CODE",{});var Hot=s(mie);HIo=r(Hot,"model_type"),Hot.forEach(t),UIo=r(sE,` property of the config object (either
passed as an argument or loaded from `),gie=n(sE,"CODE",{});var Uot=s(gie);JIo=r(Uot,"pretrained_model_name_or_path"),Uot.forEach(t),YIo=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=n(sE,"CODE",{});var Jot=s(hie);KIo=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),ZIo=r(sE,":"),sE.forEach(t),ejo=i(Kt),pie=n(Kt,"UL",{});var Yot=s(pie);Zb=n(Yot,"LI",{});var G6e=s(Zb);_ie=n(G6e,"STRONG",{});var Kot=s(_ie);ojo=r(Kot,"vision-encoder-decoder"),Kot.forEach(t),rjo=r(G6e," \u2014 "),bN=n(G6e,"A",{href:!0});var Zot=s(bN);tjo=r(Zot,"VisionEncoderDecoderModel"),Zot.forEach(t),ajo=r(G6e," (Vision Encoder decoder model)"),G6e.forEach(t),Yot.forEach(t),njo=i(Kt),ev=n(Kt,"P",{});var X6e=s(ev);sjo=r(X6e,"The model is set in evaluation mode by default using "),uie=n(X6e,"CODE",{});var ert=s(uie);ljo=r(ert,"model.eval()"),ert.forEach(t),ijo=r(X6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n(X6e,"CODE",{});var ort=s(bie);djo=r(ort,"model.train()"),ort.forEach(t),X6e.forEach(t),cjo=i(Kt),vie=n(Kt,"P",{});var rrt=s(vie);fjo=r(rrt,"Examples:"),rrt.forEach(t),mjo=i(Kt),m(lw.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),Dxe=i(d),Id=n(d,"H2",{class:!0});var QRe=s(Id);ov=n(QRe,"A",{id:!0,class:!0,href:!0});var trt=s(ov);Tie=n(trt,"SPAN",{});var art=s(Tie);m(iw.$$.fragment,art),art.forEach(t),trt.forEach(t),gjo=i(QRe),Fie=n(QRe,"SPAN",{});var nrt=s(Fie);hjo=r(nrt,"AutoModelForAudioClassification"),nrt.forEach(t),QRe.forEach(t),Nxe=i(d),dr=n(d,"DIV",{class:!0});var Tl=s(dr);m(dw.$$.fragment,Tl),pjo=i(Tl),jd=n(Tl,"P",{});var Uz=s(jd);_jo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Cie=n(Uz,"CODE",{});var srt=s(Cie);ujo=r(srt,"from_pretrained()"),srt.forEach(t),bjo=r(Uz,"class method or the "),Mie=n(Uz,"CODE",{});var lrt=s(Mie);vjo=r(lrt,"from_config()"),lrt.forEach(t),Tjo=r(Uz,`class
method.`),Uz.forEach(t),Fjo=i(Tl),cw=n(Tl,"P",{});var HRe=s(cw);Cjo=r(HRe,"This class cannot be instantiated directly using "),Eie=n(HRe,"CODE",{});var irt=s(Eie);Mjo=r(irt,"__init__()"),irt.forEach(t),Ejo=r(HRe," (throws an error)."),HRe.forEach(t),yjo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Fl=s(tt);m(fw.$$.fragment,Fl),wjo=i(Fl),yie=n(Fl,"P",{});var drt=s(yie);Ajo=r(drt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),drt.forEach(t),Ljo=i(Fl),Dd=n(Fl,"P",{});var Jz=s(Dd);Bjo=r(Jz,`Note:
Loading a model from its configuration file does `),wie=n(Jz,"STRONG",{});var crt=s(wie);xjo=r(crt,"not"),crt.forEach(t),kjo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aie=n(Jz,"CODE",{});var frt=s(Aie);Rjo=r(frt,"from_pretrained()"),frt.forEach(t),Sjo=r(Jz,"to load the model weights."),Jz.forEach(t),Pjo=i(Fl),Lie=n(Fl,"P",{});var mrt=s(Lie);$jo=r(mrt,"Examples:"),mrt.forEach(t),Ijo=i(Fl),m(mw.$$.fragment,Fl),Fl.forEach(t),jjo=i(Tl),Je=n(Tl,"DIV",{class:!0});var Zt=s(Je);m(gw.$$.fragment,Zt),Djo=i(Zt),Bie=n(Zt,"P",{});var grt=s(Bie);Njo=r(grt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),grt.forEach(t),qjo=i(Zt),rn=n(Zt,"P",{});var lE=s(rn);Ojo=r(lE,"The model class to instantiate is selected based on the "),xie=n(lE,"CODE",{});var hrt=s(xie);Gjo=r(hrt,"model_type"),hrt.forEach(t),Xjo=r(lE,` property of the config object (either
passed as an argument or loaded from `),kie=n(lE,"CODE",{});var prt=s(kie);Vjo=r(prt,"pretrained_model_name_or_path"),prt.forEach(t),zjo=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=n(lE,"CODE",{});var _rt=s(Rie);Wjo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),Qjo=r(lE,":"),lE.forEach(t),Hjo=i(Zt),xe=n(Zt,"UL",{});var qo=s(xe);rv=n(qo,"LI",{});var V6e=s(rv);Sie=n(V6e,"STRONG",{});var urt=s(Sie);Ujo=r(urt,"data2vec-audio"),urt.forEach(t),Jjo=r(V6e," \u2014 "),vN=n(V6e,"A",{href:!0});var brt=s(vN);Yjo=r(brt,"Data2VecAudioForSequenceClassification"),brt.forEach(t),Kjo=r(V6e," (Data2VecAudio model)"),V6e.forEach(t),Zjo=i(qo),tv=n(qo,"LI",{});var z6e=s(tv);Pie=n(z6e,"STRONG",{});var vrt=s(Pie);eDo=r(vrt,"hubert"),vrt.forEach(t),oDo=r(z6e," \u2014 "),TN=n(z6e,"A",{href:!0});var Trt=s(TN);rDo=r(Trt,"HubertForSequenceClassification"),Trt.forEach(t),tDo=r(z6e," (Hubert model)"),z6e.forEach(t),aDo=i(qo),av=n(qo,"LI",{});var W6e=s(av);$ie=n(W6e,"STRONG",{});var Frt=s($ie);nDo=r(Frt,"sew"),Frt.forEach(t),sDo=r(W6e," \u2014 "),FN=n(W6e,"A",{href:!0});var Crt=s(FN);lDo=r(Crt,"SEWForSequenceClassification"),Crt.forEach(t),iDo=r(W6e," (SEW model)"),W6e.forEach(t),dDo=i(qo),nv=n(qo,"LI",{});var Q6e=s(nv);Iie=n(Q6e,"STRONG",{});var Mrt=s(Iie);cDo=r(Mrt,"sew-d"),Mrt.forEach(t),fDo=r(Q6e," \u2014 "),CN=n(Q6e,"A",{href:!0});var Ert=s(CN);mDo=r(Ert,"SEWDForSequenceClassification"),Ert.forEach(t),gDo=r(Q6e," (SEW-D model)"),Q6e.forEach(t),hDo=i(qo),sv=n(qo,"LI",{});var H6e=s(sv);jie=n(H6e,"STRONG",{});var yrt=s(jie);pDo=r(yrt,"unispeech"),yrt.forEach(t),_Do=r(H6e," \u2014 "),MN=n(H6e,"A",{href:!0});var wrt=s(MN);uDo=r(wrt,"UniSpeechForSequenceClassification"),wrt.forEach(t),bDo=r(H6e," (UniSpeech model)"),H6e.forEach(t),vDo=i(qo),lv=n(qo,"LI",{});var U6e=s(lv);Die=n(U6e,"STRONG",{});var Art=s(Die);TDo=r(Art,"unispeech-sat"),Art.forEach(t),FDo=r(U6e," \u2014 "),EN=n(U6e,"A",{href:!0});var Lrt=s(EN);CDo=r(Lrt,"UniSpeechSatForSequenceClassification"),Lrt.forEach(t),MDo=r(U6e," (UniSpeechSat model)"),U6e.forEach(t),EDo=i(qo),iv=n(qo,"LI",{});var J6e=s(iv);Nie=n(J6e,"STRONG",{});var Brt=s(Nie);yDo=r(Brt,"wav2vec2"),Brt.forEach(t),wDo=r(J6e," \u2014 "),yN=n(J6e,"A",{href:!0});var xrt=s(yN);ADo=r(xrt,"Wav2Vec2ForSequenceClassification"),xrt.forEach(t),LDo=r(J6e," (Wav2Vec2 model)"),J6e.forEach(t),BDo=i(qo),dv=n(qo,"LI",{});var Y6e=s(dv);qie=n(Y6e,"STRONG",{});var krt=s(qie);xDo=r(krt,"wavlm"),krt.forEach(t),kDo=r(Y6e," \u2014 "),wN=n(Y6e,"A",{href:!0});var Rrt=s(wN);RDo=r(Rrt,"WavLMForSequenceClassification"),Rrt.forEach(t),SDo=r(Y6e," (WavLM model)"),Y6e.forEach(t),qo.forEach(t),PDo=i(Zt),cv=n(Zt,"P",{});var K6e=s(cv);$Do=r(K6e,"The model is set in evaluation mode by default using "),Oie=n(K6e,"CODE",{});var Srt=s(Oie);IDo=r(Srt,"model.eval()"),Srt.forEach(t),jDo=r(K6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(K6e,"CODE",{});var Prt=s(Gie);DDo=r(Prt,"model.train()"),Prt.forEach(t),K6e.forEach(t),NDo=i(Zt),Xie=n(Zt,"P",{});var $rt=s(Xie);qDo=r($rt,"Examples:"),$rt.forEach(t),ODo=i(Zt),m(hw.$$.fragment,Zt),Zt.forEach(t),Tl.forEach(t),qxe=i(d),Nd=n(d,"H2",{class:!0});var URe=s(Nd);fv=n(URe,"A",{id:!0,class:!0,href:!0});var Irt=s(fv);Vie=n(Irt,"SPAN",{});var jrt=s(Vie);m(pw.$$.fragment,jrt),jrt.forEach(t),Irt.forEach(t),GDo=i(URe),zie=n(URe,"SPAN",{});var Drt=s(zie);XDo=r(Drt,"AutoModelForAudioFrameClassification"),Drt.forEach(t),URe.forEach(t),Oxe=i(d),cr=n(d,"DIV",{class:!0});var Cl=s(cr);m(_w.$$.fragment,Cl),VDo=i(Cl),qd=n(Cl,"P",{});var Yz=s(qd);zDo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Wie=n(Yz,"CODE",{});var Nrt=s(Wie);WDo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),QDo=r(Yz,"class method or the "),Qie=n(Yz,"CODE",{});var qrt=s(Qie);HDo=r(qrt,"from_config()"),qrt.forEach(t),UDo=r(Yz,`class
method.`),Yz.forEach(t),JDo=i(Cl),uw=n(Cl,"P",{});var JRe=s(uw);YDo=r(JRe,"This class cannot be instantiated directly using "),Hie=n(JRe,"CODE",{});var Ort=s(Hie);KDo=r(Ort,"__init__()"),Ort.forEach(t),ZDo=r(JRe," (throws an error)."),JRe.forEach(t),eNo=i(Cl),at=n(Cl,"DIV",{class:!0});var Ml=s(at);m(bw.$$.fragment,Ml),oNo=i(Ml),Uie=n(Ml,"P",{});var Grt=s(Uie);rNo=r(Grt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Grt.forEach(t),tNo=i(Ml),Od=n(Ml,"P",{});var Kz=s(Od);aNo=r(Kz,`Note:
Loading a model from its configuration file does `),Jie=n(Kz,"STRONG",{});var Xrt=s(Jie);nNo=r(Xrt,"not"),Xrt.forEach(t),sNo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yie=n(Kz,"CODE",{});var Vrt=s(Yie);lNo=r(Vrt,"from_pretrained()"),Vrt.forEach(t),iNo=r(Kz,"to load the model weights."),Kz.forEach(t),dNo=i(Ml),Kie=n(Ml,"P",{});var zrt=s(Kie);cNo=r(zrt,"Examples:"),zrt.forEach(t),fNo=i(Ml),m(vw.$$.fragment,Ml),Ml.forEach(t),mNo=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ea=s(Ye);m(Tw.$$.fragment,ea),gNo=i(ea),Zie=n(ea,"P",{});var Wrt=s(Zie);hNo=r(Wrt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Wrt.forEach(t),pNo=i(ea),tn=n(ea,"P",{});var iE=s(tn);_No=r(iE,"The model class to instantiate is selected based on the "),ede=n(iE,"CODE",{});var Qrt=s(ede);uNo=r(Qrt,"model_type"),Qrt.forEach(t),bNo=r(iE,` property of the config object (either
passed as an argument or loaded from `),ode=n(iE,"CODE",{});var Hrt=s(ode);vNo=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),TNo=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(iE,"CODE",{});var Urt=s(rde);FNo=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),CNo=r(iE,":"),iE.forEach(t),MNo=i(ea),an=n(ea,"UL",{});var dE=s(an);mv=n(dE,"LI",{});var Z6e=s(mv);tde=n(Z6e,"STRONG",{});var Jrt=s(tde);ENo=r(Jrt,"data2vec-audio"),Jrt.forEach(t),yNo=r(Z6e," \u2014 "),AN=n(Z6e,"A",{href:!0});var Yrt=s(AN);wNo=r(Yrt,"Data2VecAudioForAudioFrameClassification"),Yrt.forEach(t),ANo=r(Z6e," (Data2VecAudio model)"),Z6e.forEach(t),LNo=i(dE),gv=n(dE,"LI",{});var eAe=s(gv);ade=n(eAe,"STRONG",{});var Krt=s(ade);BNo=r(Krt,"unispeech-sat"),Krt.forEach(t),xNo=r(eAe," \u2014 "),LN=n(eAe,"A",{href:!0});var Zrt=s(LN);kNo=r(Zrt,"UniSpeechSatForAudioFrameClassification"),Zrt.forEach(t),RNo=r(eAe," (UniSpeechSat model)"),eAe.forEach(t),SNo=i(dE),hv=n(dE,"LI",{});var oAe=s(hv);nde=n(oAe,"STRONG",{});var ett=s(nde);PNo=r(ett,"wav2vec2"),ett.forEach(t),$No=r(oAe," \u2014 "),BN=n(oAe,"A",{href:!0});var ott=s(BN);INo=r(ott,"Wav2Vec2ForAudioFrameClassification"),ott.forEach(t),jNo=r(oAe," (Wav2Vec2 model)"),oAe.forEach(t),DNo=i(dE),pv=n(dE,"LI",{});var rAe=s(pv);sde=n(rAe,"STRONG",{});var rtt=s(sde);NNo=r(rtt,"wavlm"),rtt.forEach(t),qNo=r(rAe," \u2014 "),xN=n(rAe,"A",{href:!0});var ttt=s(xN);ONo=r(ttt,"WavLMForAudioFrameClassification"),ttt.forEach(t),GNo=r(rAe," (WavLM model)"),rAe.forEach(t),dE.forEach(t),XNo=i(ea),_v=n(ea,"P",{});var tAe=s(_v);VNo=r(tAe,"The model is set in evaluation mode by default using "),lde=n(tAe,"CODE",{});var att=s(lde);zNo=r(att,"model.eval()"),att.forEach(t),WNo=r(tAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ide=n(tAe,"CODE",{});var ntt=s(ide);QNo=r(ntt,"model.train()"),ntt.forEach(t),tAe.forEach(t),HNo=i(ea),dde=n(ea,"P",{});var stt=s(dde);UNo=r(stt,"Examples:"),stt.forEach(t),JNo=i(ea),m(Fw.$$.fragment,ea),ea.forEach(t),Cl.forEach(t),Gxe=i(d),Gd=n(d,"H2",{class:!0});var YRe=s(Gd);uv=n(YRe,"A",{id:!0,class:!0,href:!0});var ltt=s(uv);cde=n(ltt,"SPAN",{});var itt=s(cde);m(Cw.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),YNo=i(YRe),fde=n(YRe,"SPAN",{});var dtt=s(fde);KNo=r(dtt,"AutoModelForCTC"),dtt.forEach(t),YRe.forEach(t),Xxe=i(d),fr=n(d,"DIV",{class:!0});var El=s(fr);m(Mw.$$.fragment,El),ZNo=i(El),Xd=n(El,"P",{});var Zz=s(Xd);eqo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mde=n(Zz,"CODE",{});var ctt=s(mde);oqo=r(ctt,"from_pretrained()"),ctt.forEach(t),rqo=r(Zz,"class method or the "),gde=n(Zz,"CODE",{});var ftt=s(gde);tqo=r(ftt,"from_config()"),ftt.forEach(t),aqo=r(Zz,`class
method.`),Zz.forEach(t),nqo=i(El),Ew=n(El,"P",{});var KRe=s(Ew);sqo=r(KRe,"This class cannot be instantiated directly using "),hde=n(KRe,"CODE",{});var mtt=s(hde);lqo=r(mtt,"__init__()"),mtt.forEach(t),iqo=r(KRe," (throws an error)."),KRe.forEach(t),dqo=i(El),nt=n(El,"DIV",{class:!0});var yl=s(nt);m(yw.$$.fragment,yl),cqo=i(yl),pde=n(yl,"P",{});var gtt=s(pde);fqo=r(gtt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gtt.forEach(t),mqo=i(yl),Vd=n(yl,"P",{});var eW=s(Vd);gqo=r(eW,`Note:
Loading a model from its configuration file does `),_de=n(eW,"STRONG",{});var htt=s(_de);hqo=r(htt,"not"),htt.forEach(t),pqo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ude=n(eW,"CODE",{});var ptt=s(ude);_qo=r(ptt,"from_pretrained()"),ptt.forEach(t),uqo=r(eW,"to load the model weights."),eW.forEach(t),bqo=i(yl),bde=n(yl,"P",{});var _tt=s(bde);vqo=r(_tt,"Examples:"),_tt.forEach(t),Tqo=i(yl),m(ww.$$.fragment,yl),yl.forEach(t),Fqo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(Aw.$$.fragment,oa),Cqo=i(oa),vde=n(oa,"P",{});var utt=s(vde);Mqo=r(utt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),utt.forEach(t),Eqo=i(oa),nn=n(oa,"P",{});var cE=s(nn);yqo=r(cE,"The model class to instantiate is selected based on the "),Tde=n(cE,"CODE",{});var btt=s(Tde);wqo=r(btt,"model_type"),btt.forEach(t),Aqo=r(cE,` property of the config object (either
passed as an argument or loaded from `),Fde=n(cE,"CODE",{});var vtt=s(Fde);Lqo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),Bqo=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(cE,"CODE",{});var Ttt=s(Cde);xqo=r(Ttt,"pretrained_model_name_or_path"),Ttt.forEach(t),kqo=r(cE,":"),cE.forEach(t),Rqo=i(oa),ke=n(oa,"UL",{});var Oo=s(ke);bv=n(Oo,"LI",{});var aAe=s(bv);Mde=n(aAe,"STRONG",{});var Ftt=s(Mde);Sqo=r(Ftt,"data2vec-audio"),Ftt.forEach(t),Pqo=r(aAe," \u2014 "),kN=n(aAe,"A",{href:!0});var Ctt=s(kN);$qo=r(Ctt,"Data2VecAudioForCTC"),Ctt.forEach(t),Iqo=r(aAe," (Data2VecAudio model)"),aAe.forEach(t),jqo=i(Oo),vv=n(Oo,"LI",{});var nAe=s(vv);Ede=n(nAe,"STRONG",{});var Mtt=s(Ede);Dqo=r(Mtt,"hubert"),Mtt.forEach(t),Nqo=r(nAe," \u2014 "),RN=n(nAe,"A",{href:!0});var Ett=s(RN);qqo=r(Ett,"HubertForCTC"),Ett.forEach(t),Oqo=r(nAe," (Hubert model)"),nAe.forEach(t),Gqo=i(Oo),Tv=n(Oo,"LI",{});var sAe=s(Tv);yde=n(sAe,"STRONG",{});var ytt=s(yde);Xqo=r(ytt,"sew"),ytt.forEach(t),Vqo=r(sAe," \u2014 "),SN=n(sAe,"A",{href:!0});var wtt=s(SN);zqo=r(wtt,"SEWForCTC"),wtt.forEach(t),Wqo=r(sAe," (SEW model)"),sAe.forEach(t),Qqo=i(Oo),Fv=n(Oo,"LI",{});var lAe=s(Fv);wde=n(lAe,"STRONG",{});var Att=s(wde);Hqo=r(Att,"sew-d"),Att.forEach(t),Uqo=r(lAe," \u2014 "),PN=n(lAe,"A",{href:!0});var Ltt=s(PN);Jqo=r(Ltt,"SEWDForCTC"),Ltt.forEach(t),Yqo=r(lAe," (SEW-D model)"),lAe.forEach(t),Kqo=i(Oo),Cv=n(Oo,"LI",{});var iAe=s(Cv);Ade=n(iAe,"STRONG",{});var Btt=s(Ade);Zqo=r(Btt,"unispeech"),Btt.forEach(t),eOo=r(iAe," \u2014 "),$N=n(iAe,"A",{href:!0});var xtt=s($N);oOo=r(xtt,"UniSpeechForCTC"),xtt.forEach(t),rOo=r(iAe," (UniSpeech model)"),iAe.forEach(t),tOo=i(Oo),Mv=n(Oo,"LI",{});var dAe=s(Mv);Lde=n(dAe,"STRONG",{});var ktt=s(Lde);aOo=r(ktt,"unispeech-sat"),ktt.forEach(t),nOo=r(dAe," \u2014 "),IN=n(dAe,"A",{href:!0});var Rtt=s(IN);sOo=r(Rtt,"UniSpeechSatForCTC"),Rtt.forEach(t),lOo=r(dAe," (UniSpeechSat model)"),dAe.forEach(t),iOo=i(Oo),Ev=n(Oo,"LI",{});var cAe=s(Ev);Bde=n(cAe,"STRONG",{});var Stt=s(Bde);dOo=r(Stt,"wav2vec2"),Stt.forEach(t),cOo=r(cAe," \u2014 "),jN=n(cAe,"A",{href:!0});var Ptt=s(jN);fOo=r(Ptt,"Wav2Vec2ForCTC"),Ptt.forEach(t),mOo=r(cAe," (Wav2Vec2 model)"),cAe.forEach(t),gOo=i(Oo),yv=n(Oo,"LI",{});var fAe=s(yv);xde=n(fAe,"STRONG",{});var $tt=s(xde);hOo=r($tt,"wavlm"),$tt.forEach(t),pOo=r(fAe," \u2014 "),DN=n(fAe,"A",{href:!0});var Itt=s(DN);_Oo=r(Itt,"WavLMForCTC"),Itt.forEach(t),uOo=r(fAe," (WavLM model)"),fAe.forEach(t),Oo.forEach(t),bOo=i(oa),wv=n(oa,"P",{});var mAe=s(wv);vOo=r(mAe,"The model is set in evaluation mode by default using "),kde=n(mAe,"CODE",{});var jtt=s(kde);TOo=r(jtt,"model.eval()"),jtt.forEach(t),FOo=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=n(mAe,"CODE",{});var Dtt=s(Rde);COo=r(Dtt,"model.train()"),Dtt.forEach(t),mAe.forEach(t),MOo=i(oa),Sde=n(oa,"P",{});var Ntt=s(Sde);EOo=r(Ntt,"Examples:"),Ntt.forEach(t),yOo=i(oa),m(Lw.$$.fragment,oa),oa.forEach(t),El.forEach(t),Vxe=i(d),zd=n(d,"H2",{class:!0});var ZRe=s(zd);Av=n(ZRe,"A",{id:!0,class:!0,href:!0});var qtt=s(Av);Pde=n(qtt,"SPAN",{});var Ott=s(Pde);m(Bw.$$.fragment,Ott),Ott.forEach(t),qtt.forEach(t),wOo=i(ZRe),$de=n(ZRe,"SPAN",{});var Gtt=s($de);AOo=r(Gtt,"AutoModelForSpeechSeq2Seq"),Gtt.forEach(t),ZRe.forEach(t),zxe=i(d),mr=n(d,"DIV",{class:!0});var wl=s(mr);m(xw.$$.fragment,wl),LOo=i(wl),Wd=n(wl,"P",{});var oW=s(Wd);BOo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Ide=n(oW,"CODE",{});var Xtt=s(Ide);xOo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),kOo=r(oW,"class method or the "),jde=n(oW,"CODE",{});var Vtt=s(jde);ROo=r(Vtt,"from_config()"),Vtt.forEach(t),SOo=r(oW,`class
method.`),oW.forEach(t),POo=i(wl),kw=n(wl,"P",{});var eSe=s(kw);$Oo=r(eSe,"This class cannot be instantiated directly using "),Dde=n(eSe,"CODE",{});var ztt=s(Dde);IOo=r(ztt,"__init__()"),ztt.forEach(t),jOo=r(eSe," (throws an error)."),eSe.forEach(t),DOo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(Rw.$$.fragment,Al),NOo=i(Al),Nde=n(Al,"P",{});var Wtt=s(Nde);qOo=r(Wtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wtt.forEach(t),OOo=i(Al),Qd=n(Al,"P",{});var rW=s(Qd);GOo=r(rW,`Note:
Loading a model from its configuration file does `),qde=n(rW,"STRONG",{});var Qtt=s(qde);XOo=r(Qtt,"not"),Qtt.forEach(t),VOo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ode=n(rW,"CODE",{});var Htt=s(Ode);zOo=r(Htt,"from_pretrained()"),Htt.forEach(t),WOo=r(rW,"to load the model weights."),rW.forEach(t),QOo=i(Al),Gde=n(Al,"P",{});var Utt=s(Gde);HOo=r(Utt,"Examples:"),Utt.forEach(t),UOo=i(Al),m(Sw.$$.fragment,Al),Al.forEach(t),JOo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(Pw.$$.fragment,ra),YOo=i(ra),Xde=n(ra,"P",{});var Jtt=s(Xde);KOo=r(Jtt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jtt.forEach(t),ZOo=i(ra),sn=n(ra,"P",{});var fE=s(sn);eGo=r(fE,"The model class to instantiate is selected based on the "),Vde=n(fE,"CODE",{});var Ytt=s(Vde);oGo=r(Ytt,"model_type"),Ytt.forEach(t),rGo=r(fE,` property of the config object (either
passed as an argument or loaded from `),zde=n(fE,"CODE",{});var Ktt=s(zde);tGo=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),aGo=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=n(fE,"CODE",{});var Ztt=s(Wde);nGo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),sGo=r(fE,":"),fE.forEach(t),lGo=i(ra),$w=n(ra,"UL",{});var oSe=s($w);Lv=n(oSe,"LI",{});var gAe=s(Lv);Qde=n(gAe,"STRONG",{});var eat=s(Qde);iGo=r(eat,"speech-encoder-decoder"),eat.forEach(t),dGo=r(gAe," \u2014 "),NN=n(gAe,"A",{href:!0});var oat=s(NN);cGo=r(oat,"SpeechEncoderDecoderModel"),oat.forEach(t),fGo=r(gAe," (Speech Encoder decoder model)"),gAe.forEach(t),mGo=i(oSe),Bv=n(oSe,"LI",{});var hAe=s(Bv);Hde=n(hAe,"STRONG",{});var rat=s(Hde);gGo=r(rat,"speech_to_text"),rat.forEach(t),hGo=r(hAe," \u2014 "),qN=n(hAe,"A",{href:!0});var tat=s(qN);pGo=r(tat,"Speech2TextForConditionalGeneration"),tat.forEach(t),_Go=r(hAe," (Speech2Text model)"),hAe.forEach(t),oSe.forEach(t),uGo=i(ra),xv=n(ra,"P",{});var pAe=s(xv);bGo=r(pAe,"The model is set in evaluation mode by default using "),Ude=n(pAe,"CODE",{});var aat=s(Ude);vGo=r(aat,"model.eval()"),aat.forEach(t),TGo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(pAe,"CODE",{});var nat=s(Jde);FGo=r(nat,"model.train()"),nat.forEach(t),pAe.forEach(t),CGo=i(ra),Yde=n(ra,"P",{});var sat=s(Yde);MGo=r(sat,"Examples:"),sat.forEach(t),EGo=i(ra),m(Iw.$$.fragment,ra),ra.forEach(t),wl.forEach(t),Wxe=i(d),Hd=n(d,"H2",{class:!0});var rSe=s(Hd);kv=n(rSe,"A",{id:!0,class:!0,href:!0});var lat=s(kv);Kde=n(lat,"SPAN",{});var iat=s(Kde);m(jw.$$.fragment,iat),iat.forEach(t),lat.forEach(t),yGo=i(rSe),Zde=n(rSe,"SPAN",{});var dat=s(Zde);wGo=r(dat,"AutoModelForAudioXVector"),dat.forEach(t),rSe.forEach(t),Qxe=i(d),gr=n(d,"DIV",{class:!0});var Ll=s(gr);m(Dw.$$.fragment,Ll),AGo=i(Ll),Ud=n(Ll,"P",{});var tW=s(Ud);LGo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ece=n(tW,"CODE",{});var cat=s(ece);BGo=r(cat,"from_pretrained()"),cat.forEach(t),xGo=r(tW,"class method or the "),oce=n(tW,"CODE",{});var fat=s(oce);kGo=r(fat,"from_config()"),fat.forEach(t),RGo=r(tW,`class
method.`),tW.forEach(t),SGo=i(Ll),Nw=n(Ll,"P",{});var tSe=s(Nw);PGo=r(tSe,"This class cannot be instantiated directly using "),rce=n(tSe,"CODE",{});var mat=s(rce);$Go=r(mat,"__init__()"),mat.forEach(t),IGo=r(tSe," (throws an error)."),tSe.forEach(t),jGo=i(Ll),lt=n(Ll,"DIV",{class:!0});var Bl=s(lt);m(qw.$$.fragment,Bl),DGo=i(Bl),tce=n(Bl,"P",{});var gat=s(tce);NGo=r(gat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gat.forEach(t),qGo=i(Bl),Jd=n(Bl,"P",{});var aW=s(Jd);OGo=r(aW,`Note:
Loading a model from its configuration file does `),ace=n(aW,"STRONG",{});var hat=s(ace);GGo=r(hat,"not"),hat.forEach(t),XGo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nce=n(aW,"CODE",{});var pat=s(nce);VGo=r(pat,"from_pretrained()"),pat.forEach(t),zGo=r(aW,"to load the model weights."),aW.forEach(t),WGo=i(Bl),sce=n(Bl,"P",{});var _at=s(sce);QGo=r(_at,"Examples:"),_at.forEach(t),HGo=i(Bl),m(Ow.$$.fragment,Bl),Bl.forEach(t),UGo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(Gw.$$.fragment,ta),JGo=i(ta),lce=n(ta,"P",{});var uat=s(lce);YGo=r(uat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uat.forEach(t),KGo=i(ta),ln=n(ta,"P",{});var mE=s(ln);ZGo=r(mE,"The model class to instantiate is selected based on the "),ice=n(mE,"CODE",{});var bat=s(ice);eXo=r(bat,"model_type"),bat.forEach(t),oXo=r(mE,` property of the config object (either
passed as an argument or loaded from `),dce=n(mE,"CODE",{});var vat=s(dce);rXo=r(vat,"pretrained_model_name_or_path"),vat.forEach(t),tXo=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(mE,"CODE",{});var Tat=s(cce);aXo=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),nXo=r(mE,":"),mE.forEach(t),sXo=i(ta),dn=n(ta,"UL",{});var gE=s(dn);Rv=n(gE,"LI",{});var _Ae=s(Rv);fce=n(_Ae,"STRONG",{});var Fat=s(fce);lXo=r(Fat,"data2vec-audio"),Fat.forEach(t),iXo=r(_Ae," \u2014 "),ON=n(_Ae,"A",{href:!0});var Cat=s(ON);dXo=r(Cat,"Data2VecAudioForXVector"),Cat.forEach(t),cXo=r(_Ae," (Data2VecAudio model)"),_Ae.forEach(t),fXo=i(gE),Sv=n(gE,"LI",{});var uAe=s(Sv);mce=n(uAe,"STRONG",{});var Mat=s(mce);mXo=r(Mat,"unispeech-sat"),Mat.forEach(t),gXo=r(uAe," \u2014 "),GN=n(uAe,"A",{href:!0});var Eat=s(GN);hXo=r(Eat,"UniSpeechSatForXVector"),Eat.forEach(t),pXo=r(uAe," (UniSpeechSat model)"),uAe.forEach(t),_Xo=i(gE),Pv=n(gE,"LI",{});var bAe=s(Pv);gce=n(bAe,"STRONG",{});var yat=s(gce);uXo=r(yat,"wav2vec2"),yat.forEach(t),bXo=r(bAe," \u2014 "),XN=n(bAe,"A",{href:!0});var wat=s(XN);vXo=r(wat,"Wav2Vec2ForXVector"),wat.forEach(t),TXo=r(bAe," (Wav2Vec2 model)"),bAe.forEach(t),FXo=i(gE),$v=n(gE,"LI",{});var vAe=s($v);hce=n(vAe,"STRONG",{});var Aat=s(hce);CXo=r(Aat,"wavlm"),Aat.forEach(t),MXo=r(vAe," \u2014 "),VN=n(vAe,"A",{href:!0});var Lat=s(VN);EXo=r(Lat,"WavLMForXVector"),Lat.forEach(t),yXo=r(vAe," (WavLM model)"),vAe.forEach(t),gE.forEach(t),wXo=i(ta),Iv=n(ta,"P",{});var TAe=s(Iv);AXo=r(TAe,"The model is set in evaluation mode by default using "),pce=n(TAe,"CODE",{});var Bat=s(pce);LXo=r(Bat,"model.eval()"),Bat.forEach(t),BXo=r(TAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=n(TAe,"CODE",{});var xat=s(_ce);xXo=r(xat,"model.train()"),xat.forEach(t),TAe.forEach(t),kXo=i(ta),uce=n(ta,"P",{});var kat=s(uce);RXo=r(kat,"Examples:"),kat.forEach(t),SXo=i(ta),m(Xw.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),Hxe=i(d),Yd=n(d,"H2",{class:!0});var aSe=s(Yd);jv=n(aSe,"A",{id:!0,class:!0,href:!0});var Rat=s(jv);bce=n(Rat,"SPAN",{});var Sat=s(bce);m(Vw.$$.fragment,Sat),Sat.forEach(t),Rat.forEach(t),PXo=i(aSe),vce=n(aSe,"SPAN",{});var Pat=s(vce);$Xo=r(Pat,"AutoModelForMaskedImageModeling"),Pat.forEach(t),aSe.forEach(t),Uxe=i(d),hr=n(d,"DIV",{class:!0});var xl=s(hr);m(zw.$$.fragment,xl),IXo=i(xl),Kd=n(xl,"P",{});var nW=s(Kd);jXo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Tce=n(nW,"CODE",{});var $at=s(Tce);DXo=r($at,"from_pretrained()"),$at.forEach(t),NXo=r(nW,"class method or the "),Fce=n(nW,"CODE",{});var Iat=s(Fce);qXo=r(Iat,"from_config()"),Iat.forEach(t),OXo=r(nW,`class
method.`),nW.forEach(t),GXo=i(xl),Ww=n(xl,"P",{});var nSe=s(Ww);XXo=r(nSe,"This class cannot be instantiated directly using "),Cce=n(nSe,"CODE",{});var jat=s(Cce);VXo=r(jat,"__init__()"),jat.forEach(t),zXo=r(nSe," (throws an error)."),nSe.forEach(t),WXo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(Qw.$$.fragment,kl),QXo=i(kl),Mce=n(kl,"P",{});var Dat=s(Mce);HXo=r(Dat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dat.forEach(t),UXo=i(kl),Zd=n(kl,"P",{});var sW=s(Zd);JXo=r(sW,`Note:
Loading a model from its configuration file does `),Ece=n(sW,"STRONG",{});var Nat=s(Ece);YXo=r(Nat,"not"),Nat.forEach(t),KXo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=n(sW,"CODE",{});var qat=s(yce);ZXo=r(qat,"from_pretrained()"),qat.forEach(t),eVo=r(sW,"to load the model weights."),sW.forEach(t),oVo=i(kl),wce=n(kl,"P",{});var Oat=s(wce);rVo=r(Oat,"Examples:"),Oat.forEach(t),tVo=i(kl),m(Hw.$$.fragment,kl),kl.forEach(t),aVo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(Uw.$$.fragment,aa),nVo=i(aa),Ace=n(aa,"P",{});var Gat=s(Ace);sVo=r(Gat,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Gat.forEach(t),lVo=i(aa),cn=n(aa,"P",{});var hE=s(cn);iVo=r(hE,"The model class to instantiate is selected based on the "),Lce=n(hE,"CODE",{});var Xat=s(Lce);dVo=r(Xat,"model_type"),Xat.forEach(t),cVo=r(hE,` property of the config object (either
passed as an argument or loaded from `),Bce=n(hE,"CODE",{});var Vat=s(Bce);fVo=r(Vat,"pretrained_model_name_or_path"),Vat.forEach(t),mVo=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(hE,"CODE",{});var zat=s(xce);gVo=r(zat,"pretrained_model_name_or_path"),zat.forEach(t),hVo=r(hE,":"),hE.forEach(t),pVo=i(aa),ec=n(aa,"UL",{});var lW=s(ec);Dv=n(lW,"LI",{});var FAe=s(Dv);kce=n(FAe,"STRONG",{});var Wat=s(kce);_Vo=r(Wat,"deit"),Wat.forEach(t),uVo=r(FAe," \u2014 "),zN=n(FAe,"A",{href:!0});var Qat=s(zN);bVo=r(Qat,"DeiTForMaskedImageModeling"),Qat.forEach(t),vVo=r(FAe," (DeiT model)"),FAe.forEach(t),TVo=i(lW),Nv=n(lW,"LI",{});var CAe=s(Nv);Rce=n(CAe,"STRONG",{});var Hat=s(Rce);FVo=r(Hat,"swin"),Hat.forEach(t),CVo=r(CAe," \u2014 "),WN=n(CAe,"A",{href:!0});var Uat=s(WN);MVo=r(Uat,"SwinForMaskedImageModeling"),Uat.forEach(t),EVo=r(CAe," (Swin model)"),CAe.forEach(t),yVo=i(lW),qv=n(lW,"LI",{});var MAe=s(qv);Sce=n(MAe,"STRONG",{});var Jat=s(Sce);wVo=r(Jat,"vit"),Jat.forEach(t),AVo=r(MAe," \u2014 "),QN=n(MAe,"A",{href:!0});var Yat=s(QN);LVo=r(Yat,"ViTForMaskedImageModeling"),Yat.forEach(t),BVo=r(MAe," (ViT model)"),MAe.forEach(t),lW.forEach(t),xVo=i(aa),Ov=n(aa,"P",{});var EAe=s(Ov);kVo=r(EAe,"The model is set in evaluation mode by default using "),Pce=n(EAe,"CODE",{});var Kat=s(Pce);RVo=r(Kat,"model.eval()"),Kat.forEach(t),SVo=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(EAe,"CODE",{});var Zat=s($ce);PVo=r(Zat,"model.train()"),Zat.forEach(t),EAe.forEach(t),$Vo=i(aa),Ice=n(aa,"P",{});var ent=s(Ice);IVo=r(ent,"Examples:"),ent.forEach(t),jVo=i(aa),m(Jw.$$.fragment,aa),aa.forEach(t),xl.forEach(t),Jxe=i(d),oc=n(d,"H2",{class:!0});var sSe=s(oc);Gv=n(sSe,"A",{id:!0,class:!0,href:!0});var ont=s(Gv);jce=n(ont,"SPAN",{});var rnt=s(jce);m(Yw.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),DVo=i(sSe),Dce=n(sSe,"SPAN",{});var tnt=s(Dce);NVo=r(tnt,"AutoModelForObjectDetection"),tnt.forEach(t),sSe.forEach(t),Yxe=i(d),pr=n(d,"DIV",{class:!0});var Rl=s(pr);m(Kw.$$.fragment,Rl),qVo=i(Rl),rc=n(Rl,"P",{});var iW=s(rc);OVo=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Nce=n(iW,"CODE",{});var ant=s(Nce);GVo=r(ant,"from_pretrained()"),ant.forEach(t),XVo=r(iW,"class method or the "),qce=n(iW,"CODE",{});var nnt=s(qce);VVo=r(nnt,"from_config()"),nnt.forEach(t),zVo=r(iW,`class
method.`),iW.forEach(t),WVo=i(Rl),Zw=n(Rl,"P",{});var lSe=s(Zw);QVo=r(lSe,"This class cannot be instantiated directly using "),Oce=n(lSe,"CODE",{});var snt=s(Oce);HVo=r(snt,"__init__()"),snt.forEach(t),UVo=r(lSe," (throws an error)."),lSe.forEach(t),JVo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Sl=s(dt);m(e6.$$.fragment,Sl),YVo=i(Sl),Gce=n(Sl,"P",{});var lnt=s(Gce);KVo=r(lnt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lnt.forEach(t),ZVo=i(Sl),tc=n(Sl,"P",{});var dW=s(tc);ezo=r(dW,`Note:
Loading a model from its configuration file does `),Xce=n(dW,"STRONG",{});var int=s(Xce);ozo=r(int,"not"),int.forEach(t),rzo=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vce=n(dW,"CODE",{});var dnt=s(Vce);tzo=r(dnt,"from_pretrained()"),dnt.forEach(t),azo=r(dW,"to load the model weights."),dW.forEach(t),nzo=i(Sl),zce=n(Sl,"P",{});var cnt=s(zce);szo=r(cnt,"Examples:"),cnt.forEach(t),lzo=i(Sl),m(o6.$$.fragment,Sl),Sl.forEach(t),izo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(r6.$$.fragment,na),dzo=i(na),Wce=n(na,"P",{});var fnt=s(Wce);czo=r(fnt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fnt.forEach(t),fzo=i(na),fn=n(na,"P",{});var pE=s(fn);mzo=r(pE,"The model class to instantiate is selected based on the "),Qce=n(pE,"CODE",{});var mnt=s(Qce);gzo=r(mnt,"model_type"),mnt.forEach(t),hzo=r(pE,` property of the config object (either
passed as an argument or loaded from `),Hce=n(pE,"CODE",{});var gnt=s(Hce);pzo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),_zo=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=n(pE,"CODE",{});var hnt=s(Uce);uzo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),bzo=r(pE,":"),pE.forEach(t),vzo=i(na),Jce=n(na,"UL",{});var pnt=s(Jce);Xv=n(pnt,"LI",{});var yAe=s(Xv);Yce=n(yAe,"STRONG",{});var _nt=s(Yce);Tzo=r(_nt,"detr"),_nt.forEach(t),Fzo=r(yAe," \u2014 "),HN=n(yAe,"A",{href:!0});var unt=s(HN);Czo=r(unt,"DetrForObjectDetection"),unt.forEach(t),Mzo=r(yAe," (DETR model)"),yAe.forEach(t),pnt.forEach(t),Ezo=i(na),Vv=n(na,"P",{});var wAe=s(Vv);yzo=r(wAe,"The model is set in evaluation mode by default using "),Kce=n(wAe,"CODE",{});var bnt=s(Kce);wzo=r(bnt,"model.eval()"),bnt.forEach(t),Azo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(wAe,"CODE",{});var vnt=s(Zce);Lzo=r(vnt,"model.train()"),vnt.forEach(t),wAe.forEach(t),Bzo=i(na),efe=n(na,"P",{});var Tnt=s(efe);xzo=r(Tnt,"Examples:"),Tnt.forEach(t),kzo=i(na),m(t6.$$.fragment,na),na.forEach(t),Rl.forEach(t),Kxe=i(d),ac=n(d,"H2",{class:!0});var iSe=s(ac);zv=n(iSe,"A",{id:!0,class:!0,href:!0});var Fnt=s(zv);ofe=n(Fnt,"SPAN",{});var Cnt=s(ofe);m(a6.$$.fragment,Cnt),Cnt.forEach(t),Fnt.forEach(t),Rzo=i(iSe),rfe=n(iSe,"SPAN",{});var Mnt=s(rfe);Szo=r(Mnt,"AutoModelForImageSegmentation"),Mnt.forEach(t),iSe.forEach(t),Zxe=i(d),_r=n(d,"DIV",{class:!0});var Pl=s(_r);m(n6.$$.fragment,Pl),Pzo=i(Pl),nc=n(Pl,"P",{});var cW=s(nc);$zo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),tfe=n(cW,"CODE",{});var Ent=s(tfe);Izo=r(Ent,"from_pretrained()"),Ent.forEach(t),jzo=r(cW,"class method or the "),afe=n(cW,"CODE",{});var ynt=s(afe);Dzo=r(ynt,"from_config()"),ynt.forEach(t),Nzo=r(cW,`class
method.`),cW.forEach(t),qzo=i(Pl),s6=n(Pl,"P",{});var dSe=s(s6);Ozo=r(dSe,"This class cannot be instantiated directly using "),nfe=n(dSe,"CODE",{});var wnt=s(nfe);Gzo=r(wnt,"__init__()"),wnt.forEach(t),Xzo=r(dSe," (throws an error)."),dSe.forEach(t),Vzo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(l6.$$.fragment,$l),zzo=i($l),sfe=n($l,"P",{});var Ant=s(sfe);Wzo=r(Ant,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ant.forEach(t),Qzo=i($l),sc=n($l,"P",{});var fW=s(sc);Hzo=r(fW,`Note:
Loading a model from its configuration file does `),lfe=n(fW,"STRONG",{});var Lnt=s(lfe);Uzo=r(Lnt,"not"),Lnt.forEach(t),Jzo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ife=n(fW,"CODE",{});var Bnt=s(ife);Yzo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),Kzo=r(fW,"to load the model weights."),fW.forEach(t),Zzo=i($l),dfe=n($l,"P",{});var xnt=s(dfe);eWo=r(xnt,"Examples:"),xnt.forEach(t),oWo=i($l),m(i6.$$.fragment,$l),$l.forEach(t),rWo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(d6.$$.fragment,sa),tWo=i(sa),cfe=n(sa,"P",{});var knt=s(cfe);aWo=r(knt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),knt.forEach(t),nWo=i(sa),mn=n(sa,"P",{});var _E=s(mn);sWo=r(_E,"The model class to instantiate is selected based on the "),ffe=n(_E,"CODE",{});var Rnt=s(ffe);lWo=r(Rnt,"model_type"),Rnt.forEach(t),iWo=r(_E,` property of the config object (either
passed as an argument or loaded from `),mfe=n(_E,"CODE",{});var Snt=s(mfe);dWo=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),cWo=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(_E,"CODE",{});var Pnt=s(gfe);fWo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),mWo=r(_E,":"),_E.forEach(t),gWo=i(sa),hfe=n(sa,"UL",{});var $nt=s(hfe);Wv=n($nt,"LI",{});var AAe=s(Wv);pfe=n(AAe,"STRONG",{});var Int=s(pfe);hWo=r(Int,"detr"),Int.forEach(t),pWo=r(AAe," \u2014 "),UN=n(AAe,"A",{href:!0});var jnt=s(UN);_Wo=r(jnt,"DetrForSegmentation"),jnt.forEach(t),uWo=r(AAe," (DETR model)"),AAe.forEach(t),$nt.forEach(t),bWo=i(sa),Qv=n(sa,"P",{});var LAe=s(Qv);vWo=r(LAe,"The model is set in evaluation mode by default using "),_fe=n(LAe,"CODE",{});var Dnt=s(_fe);TWo=r(Dnt,"model.eval()"),Dnt.forEach(t),FWo=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(LAe,"CODE",{});var Nnt=s(ufe);CWo=r(Nnt,"model.train()"),Nnt.forEach(t),LAe.forEach(t),MWo=i(sa),bfe=n(sa,"P",{});var qnt=s(bfe);EWo=r(qnt,"Examples:"),qnt.forEach(t),yWo=i(sa),m(c6.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),eke=i(d),lc=n(d,"H2",{class:!0});var cSe=s(lc);Hv=n(cSe,"A",{id:!0,class:!0,href:!0});var Ont=s(Hv);vfe=n(Ont,"SPAN",{});var Gnt=s(vfe);m(f6.$$.fragment,Gnt),Gnt.forEach(t),Ont.forEach(t),wWo=i(cSe),Tfe=n(cSe,"SPAN",{});var Xnt=s(Tfe);AWo=r(Xnt,"AutoModelForSemanticSegmentation"),Xnt.forEach(t),cSe.forEach(t),oke=i(d),ur=n(d,"DIV",{class:!0});var Il=s(ur);m(m6.$$.fragment,Il),LWo=i(Il),ic=n(Il,"P",{});var mW=s(ic);BWo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Ffe=n(mW,"CODE",{});var Vnt=s(Ffe);xWo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),kWo=r(mW,"class method or the "),Cfe=n(mW,"CODE",{});var znt=s(Cfe);RWo=r(znt,"from_config()"),znt.forEach(t),SWo=r(mW,`class
method.`),mW.forEach(t),PWo=i(Il),g6=n(Il,"P",{});var fSe=s(g6);$Wo=r(fSe,"This class cannot be instantiated directly using "),Mfe=n(fSe,"CODE",{});var Wnt=s(Mfe);IWo=r(Wnt,"__init__()"),Wnt.forEach(t),jWo=r(fSe," (throws an error)."),fSe.forEach(t),DWo=i(Il),ft=n(Il,"DIV",{class:!0});var jl=s(ft);m(h6.$$.fragment,jl),NWo=i(jl),Efe=n(jl,"P",{});var Qnt=s(Efe);qWo=r(Qnt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qnt.forEach(t),OWo=i(jl),dc=n(jl,"P",{});var gW=s(dc);GWo=r(gW,`Note:
Loading a model from its configuration file does `),yfe=n(gW,"STRONG",{});var Hnt=s(yfe);XWo=r(Hnt,"not"),Hnt.forEach(t),VWo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),wfe=n(gW,"CODE",{});var Unt=s(wfe);zWo=r(Unt,"from_pretrained()"),Unt.forEach(t),WWo=r(gW,"to load the model weights."),gW.forEach(t),QWo=i(jl),Afe=n(jl,"P",{});var Jnt=s(Afe);HWo=r(Jnt,"Examples:"),Jnt.forEach(t),UWo=i(jl),m(p6.$$.fragment,jl),jl.forEach(t),JWo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(_6.$$.fragment,la),YWo=i(la),Lfe=n(la,"P",{});var Ynt=s(Lfe);KWo=r(Ynt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ynt.forEach(t),ZWo=i(la),gn=n(la,"P",{});var uE=s(gn);eQo=r(uE,"The model class to instantiate is selected based on the "),Bfe=n(uE,"CODE",{});var Knt=s(Bfe);oQo=r(Knt,"model_type"),Knt.forEach(t),rQo=r(uE,` property of the config object (either
passed as an argument or loaded from `),xfe=n(uE,"CODE",{});var Znt=s(xfe);tQo=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),aQo=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(uE,"CODE",{});var est=s(kfe);nQo=r(est,"pretrained_model_name_or_path"),est.forEach(t),sQo=r(uE,":"),uE.forEach(t),lQo=i(la),u6=n(la,"UL",{});var mSe=s(u6);Uv=n(mSe,"LI",{});var BAe=s(Uv);Rfe=n(BAe,"STRONG",{});var ost=s(Rfe);iQo=r(ost,"beit"),ost.forEach(t),dQo=r(BAe," \u2014 "),JN=n(BAe,"A",{href:!0});var rst=s(JN);cQo=r(rst,"BeitForSemanticSegmentation"),rst.forEach(t),fQo=r(BAe," (BEiT model)"),BAe.forEach(t),mQo=i(mSe),Jv=n(mSe,"LI",{});var xAe=s(Jv);Sfe=n(xAe,"STRONG",{});var tst=s(Sfe);gQo=r(tst,"segformer"),tst.forEach(t),hQo=r(xAe," \u2014 "),YN=n(xAe,"A",{href:!0});var ast=s(YN);pQo=r(ast,"SegformerForSemanticSegmentation"),ast.forEach(t),_Qo=r(xAe," (SegFormer model)"),xAe.forEach(t),mSe.forEach(t),uQo=i(la),Yv=n(la,"P",{});var kAe=s(Yv);bQo=r(kAe,"The model is set in evaluation mode by default using "),Pfe=n(kAe,"CODE",{});var nst=s(Pfe);vQo=r(nst,"model.eval()"),nst.forEach(t),TQo=r(kAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(kAe,"CODE",{});var sst=s($fe);FQo=r(sst,"model.train()"),sst.forEach(t),kAe.forEach(t),CQo=i(la),Ife=n(la,"P",{});var lst=s(Ife);MQo=r(lst,"Examples:"),lst.forEach(t),EQo=i(la),m(b6.$$.fragment,la),la.forEach(t),Il.forEach(t),rke=i(d),cc=n(d,"H2",{class:!0});var gSe=s(cc);Kv=n(gSe,"A",{id:!0,class:!0,href:!0});var ist=s(Kv);jfe=n(ist,"SPAN",{});var dst=s(jfe);m(v6.$$.fragment,dst),dst.forEach(t),ist.forEach(t),yQo=i(gSe),Dfe=n(gSe,"SPAN",{});var cst=s(Dfe);wQo=r(cst,"AutoModelForInstanceSegmentation"),cst.forEach(t),gSe.forEach(t),tke=i(d),br=n(d,"DIV",{class:!0});var Dl=s(br);m(T6.$$.fragment,Dl),AQo=i(Dl),fc=n(Dl,"P",{});var hW=s(fc);LQo=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Nfe=n(hW,"CODE",{});var fst=s(Nfe);BQo=r(fst,"from_pretrained()"),fst.forEach(t),xQo=r(hW,"class method or the "),qfe=n(hW,"CODE",{});var mst=s(qfe);kQo=r(mst,"from_config()"),mst.forEach(t),RQo=r(hW,`class
method.`),hW.forEach(t),SQo=i(Dl),F6=n(Dl,"P",{});var hSe=s(F6);PQo=r(hSe,"This class cannot be instantiated directly using "),Ofe=n(hSe,"CODE",{});var gst=s(Ofe);$Qo=r(gst,"__init__()"),gst.forEach(t),IQo=r(hSe," (throws an error)."),hSe.forEach(t),jQo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Nl=s(mt);m(C6.$$.fragment,Nl),DQo=i(Nl),Gfe=n(Nl,"P",{});var hst=s(Gfe);NQo=r(hst,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hst.forEach(t),qQo=i(Nl),mc=n(Nl,"P",{});var pW=s(mc);OQo=r(pW,`Note:
Loading a model from its configuration file does `),Xfe=n(pW,"STRONG",{});var pst=s(Xfe);GQo=r(pst,"not"),pst.forEach(t),XQo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vfe=n(pW,"CODE",{});var _st=s(Vfe);VQo=r(_st,"from_pretrained()"),_st.forEach(t),zQo=r(pW,"to load the model weights."),pW.forEach(t),WQo=i(Nl),zfe=n(Nl,"P",{});var ust=s(zfe);QQo=r(ust,"Examples:"),ust.forEach(t),HQo=i(Nl),m(M6.$$.fragment,Nl),Nl.forEach(t),UQo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);m(E6.$$.fragment,ia),JQo=i(ia),Wfe=n(ia,"P",{});var bst=s(Wfe);YQo=r(bst,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bst.forEach(t),KQo=i(ia),hn=n(ia,"P",{});var bE=s(hn);ZQo=r(bE,"The model class to instantiate is selected based on the "),Qfe=n(bE,"CODE",{});var vst=s(Qfe);eHo=r(vst,"model_type"),vst.forEach(t),oHo=r(bE,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(bE,"CODE",{});var Tst=s(Hfe);rHo=r(Tst,"pretrained_model_name_or_path"),Tst.forEach(t),tHo=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(bE,"CODE",{});var Fst=s(Ufe);aHo=r(Fst,"pretrained_model_name_or_path"),Fst.forEach(t),nHo=r(bE,":"),bE.forEach(t),sHo=i(ia),Jfe=n(ia,"UL",{});var Cst=s(Jfe);Zv=n(Cst,"LI",{});var RAe=s(Zv);Yfe=n(RAe,"STRONG",{});var Mst=s(Yfe);lHo=r(Mst,"maskformer"),Mst.forEach(t),iHo=r(RAe," \u2014 "),KN=n(RAe,"A",{href:!0});var Est=s(KN);dHo=r(Est,"MaskFormerForInstanceSegmentation"),Est.forEach(t),cHo=r(RAe," (MaskFormer model)"),RAe.forEach(t),Cst.forEach(t),fHo=i(ia),eT=n(ia,"P",{});var SAe=s(eT);mHo=r(SAe,"The model is set in evaluation mode by default using "),Kfe=n(SAe,"CODE",{});var yst=s(Kfe);gHo=r(yst,"model.eval()"),yst.forEach(t),hHo=r(SAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(SAe,"CODE",{});var wst=s(Zfe);pHo=r(wst,"model.train()"),wst.forEach(t),SAe.forEach(t),_Ho=i(ia),eme=n(ia,"P",{});var Ast=s(eme);uHo=r(Ast,"Examples:"),Ast.forEach(t),bHo=i(ia),m(y6.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),ake=i(d),gc=n(d,"H2",{class:!0});var pSe=s(gc);oT=n(pSe,"A",{id:!0,class:!0,href:!0});var Lst=s(oT);ome=n(Lst,"SPAN",{});var Bst=s(ome);m(w6.$$.fragment,Bst),Bst.forEach(t),Lst.forEach(t),vHo=i(pSe),rme=n(pSe,"SPAN",{});var xst=s(rme);THo=r(xst,"TFAutoModel"),xst.forEach(t),pSe.forEach(t),nke=i(d),vr=n(d,"DIV",{class:!0});var ql=s(vr);m(A6.$$.fragment,ql),FHo=i(ql),hc=n(ql,"P",{});var _W=s(hc);CHo=r(_W,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tme=n(_W,"CODE",{});var kst=s(tme);MHo=r(kst,"from_pretrained()"),kst.forEach(t),EHo=r(_W,"class method or the "),ame=n(_W,"CODE",{});var Rst=s(ame);yHo=r(Rst,"from_config()"),Rst.forEach(t),wHo=r(_W,`class
method.`),_W.forEach(t),AHo=i(ql),L6=n(ql,"P",{});var _Se=s(L6);LHo=r(_Se,"This class cannot be instantiated directly using "),nme=n(_Se,"CODE",{});var Sst=s(nme);BHo=r(Sst,"__init__()"),Sst.forEach(t),xHo=r(_Se," (throws an error)."),_Se.forEach(t),kHo=i(ql),gt=n(ql,"DIV",{class:!0});var Ol=s(gt);m(B6.$$.fragment,Ol),RHo=i(Ol),sme=n(Ol,"P",{});var Pst=s(sme);SHo=r(Pst,"Instantiates one of the base model classes of the library from a configuration."),Pst.forEach(t),PHo=i(Ol),pc=n(Ol,"P",{});var uW=s(pc);$Ho=r(uW,`Note:
Loading a model from its configuration file does `),lme=n(uW,"STRONG",{});var $st=s(lme);IHo=r($st,"not"),$st.forEach(t),jHo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ime=n(uW,"CODE",{});var Ist=s(ime);DHo=r(Ist,"from_pretrained()"),Ist.forEach(t),NHo=r(uW,"to load the model weights."),uW.forEach(t),qHo=i(Ol),dme=n(Ol,"P",{});var jst=s(dme);OHo=r(jst,"Examples:"),jst.forEach(t),GHo=i(Ol),m(x6.$$.fragment,Ol),Ol.forEach(t),XHo=i(ql),ho=n(ql,"DIV",{class:!0});var ha=s(ho);m(k6.$$.fragment,ha),VHo=i(ha),cme=n(ha,"P",{});var Dst=s(cme);zHo=r(Dst,"Instantiate one of the base model classes of the library from a pretrained model."),Dst.forEach(t),WHo=i(ha),pn=n(ha,"P",{});var vE=s(pn);QHo=r(vE,"The model class to instantiate is selected based on the "),fme=n(vE,"CODE",{});var Nst=s(fme);HHo=r(Nst,"model_type"),Nst.forEach(t),UHo=r(vE,` property of the config object (either
passed as an argument or loaded from `),mme=n(vE,"CODE",{});var qst=s(mme);JHo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),YHo=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(vE,"CODE",{});var Ost=s(gme);KHo=r(Ost,"pretrained_model_name_or_path"),Ost.forEach(t),ZHo=r(vE,":"),vE.forEach(t),eUo=i(ha),B=n(ha,"UL",{});var x=s(B);rT=n(x,"LI",{});var PAe=s(rT);hme=n(PAe,"STRONG",{});var Gst=s(hme);oUo=r(Gst,"albert"),Gst.forEach(t),rUo=r(PAe," \u2014 "),ZN=n(PAe,"A",{href:!0});var Xst=s(ZN);tUo=r(Xst,"TFAlbertModel"),Xst.forEach(t),aUo=r(PAe," (ALBERT model)"),PAe.forEach(t),nUo=i(x),tT=n(x,"LI",{});var $Ae=s(tT);pme=n($Ae,"STRONG",{});var Vst=s(pme);sUo=r(Vst,"bart"),Vst.forEach(t),lUo=r($Ae," \u2014 "),eq=n($Ae,"A",{href:!0});var zst=s(eq);iUo=r(zst,"TFBartModel"),zst.forEach(t),dUo=r($Ae," (BART model)"),$Ae.forEach(t),cUo=i(x),aT=n(x,"LI",{});var IAe=s(aT);_me=n(IAe,"STRONG",{});var Wst=s(_me);fUo=r(Wst,"bert"),Wst.forEach(t),mUo=r(IAe," \u2014 "),oq=n(IAe,"A",{href:!0});var Qst=s(oq);gUo=r(Qst,"TFBertModel"),Qst.forEach(t),hUo=r(IAe," (BERT model)"),IAe.forEach(t),pUo=i(x),nT=n(x,"LI",{});var jAe=s(nT);ume=n(jAe,"STRONG",{});var Hst=s(ume);_Uo=r(Hst,"blenderbot"),Hst.forEach(t),uUo=r(jAe," \u2014 "),rq=n(jAe,"A",{href:!0});var Ust=s(rq);bUo=r(Ust,"TFBlenderbotModel"),Ust.forEach(t),vUo=r(jAe," (Blenderbot model)"),jAe.forEach(t),TUo=i(x),sT=n(x,"LI",{});var DAe=s(sT);bme=n(DAe,"STRONG",{});var Jst=s(bme);FUo=r(Jst,"blenderbot-small"),Jst.forEach(t),CUo=r(DAe," \u2014 "),tq=n(DAe,"A",{href:!0});var Yst=s(tq);MUo=r(Yst,"TFBlenderbotSmallModel"),Yst.forEach(t),EUo=r(DAe," (BlenderbotSmall model)"),DAe.forEach(t),yUo=i(x),lT=n(x,"LI",{});var NAe=s(lT);vme=n(NAe,"STRONG",{});var Kst=s(vme);wUo=r(Kst,"camembert"),Kst.forEach(t),AUo=r(NAe," \u2014 "),aq=n(NAe,"A",{href:!0});var Zst=s(aq);LUo=r(Zst,"TFCamembertModel"),Zst.forEach(t),BUo=r(NAe," (CamemBERT model)"),NAe.forEach(t),xUo=i(x),iT=n(x,"LI",{});var qAe=s(iT);Tme=n(qAe,"STRONG",{});var elt=s(Tme);kUo=r(elt,"clip"),elt.forEach(t),RUo=r(qAe," \u2014 "),nq=n(qAe,"A",{href:!0});var olt=s(nq);SUo=r(olt,"TFCLIPModel"),olt.forEach(t),PUo=r(qAe," (CLIP model)"),qAe.forEach(t),$Uo=i(x),dT=n(x,"LI",{});var OAe=s(dT);Fme=n(OAe,"STRONG",{});var rlt=s(Fme);IUo=r(rlt,"convbert"),rlt.forEach(t),jUo=r(OAe," \u2014 "),sq=n(OAe,"A",{href:!0});var tlt=s(sq);DUo=r(tlt,"TFConvBertModel"),tlt.forEach(t),NUo=r(OAe," (ConvBERT model)"),OAe.forEach(t),qUo=i(x),cT=n(x,"LI",{});var GAe=s(cT);Cme=n(GAe,"STRONG",{});var alt=s(Cme);OUo=r(alt,"convnext"),alt.forEach(t),GUo=r(GAe," \u2014 "),lq=n(GAe,"A",{href:!0});var nlt=s(lq);XUo=r(nlt,"TFConvNextModel"),nlt.forEach(t),VUo=r(GAe," (ConvNext model)"),GAe.forEach(t),zUo=i(x),fT=n(x,"LI",{});var XAe=s(fT);Mme=n(XAe,"STRONG",{});var slt=s(Mme);WUo=r(slt,"ctrl"),slt.forEach(t),QUo=r(XAe," \u2014 "),iq=n(XAe,"A",{href:!0});var llt=s(iq);HUo=r(llt,"TFCTRLModel"),llt.forEach(t),UUo=r(XAe," (CTRL model)"),XAe.forEach(t),JUo=i(x),mT=n(x,"LI",{});var VAe=s(mT);Eme=n(VAe,"STRONG",{});var ilt=s(Eme);YUo=r(ilt,"deberta"),ilt.forEach(t),KUo=r(VAe," \u2014 "),dq=n(VAe,"A",{href:!0});var dlt=s(dq);ZUo=r(dlt,"TFDebertaModel"),dlt.forEach(t),eJo=r(VAe," (DeBERTa model)"),VAe.forEach(t),oJo=i(x),gT=n(x,"LI",{});var zAe=s(gT);yme=n(zAe,"STRONG",{});var clt=s(yme);rJo=r(clt,"deberta-v2"),clt.forEach(t),tJo=r(zAe," \u2014 "),cq=n(zAe,"A",{href:!0});var flt=s(cq);aJo=r(flt,"TFDebertaV2Model"),flt.forEach(t),nJo=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),sJo=i(x),hT=n(x,"LI",{});var WAe=s(hT);wme=n(WAe,"STRONG",{});var mlt=s(wme);lJo=r(mlt,"distilbert"),mlt.forEach(t),iJo=r(WAe," \u2014 "),fq=n(WAe,"A",{href:!0});var glt=s(fq);dJo=r(glt,"TFDistilBertModel"),glt.forEach(t),cJo=r(WAe," (DistilBERT model)"),WAe.forEach(t),fJo=i(x),pT=n(x,"LI",{});var QAe=s(pT);Ame=n(QAe,"STRONG",{});var hlt=s(Ame);mJo=r(hlt,"dpr"),hlt.forEach(t),gJo=r(QAe," \u2014 "),mq=n(QAe,"A",{href:!0});var plt=s(mq);hJo=r(plt,"TFDPRQuestionEncoder"),plt.forEach(t),pJo=r(QAe," (DPR model)"),QAe.forEach(t),_Jo=i(x),_T=n(x,"LI",{});var HAe=s(_T);Lme=n(HAe,"STRONG",{});var _lt=s(Lme);uJo=r(_lt,"electra"),_lt.forEach(t),bJo=r(HAe," \u2014 "),gq=n(HAe,"A",{href:!0});var ult=s(gq);vJo=r(ult,"TFElectraModel"),ult.forEach(t),TJo=r(HAe," (ELECTRA model)"),HAe.forEach(t),FJo=i(x),uT=n(x,"LI",{});var UAe=s(uT);Bme=n(UAe,"STRONG",{});var blt=s(Bme);CJo=r(blt,"flaubert"),blt.forEach(t),MJo=r(UAe," \u2014 "),hq=n(UAe,"A",{href:!0});var vlt=s(hq);EJo=r(vlt,"TFFlaubertModel"),vlt.forEach(t),yJo=r(UAe," (FlauBERT model)"),UAe.forEach(t),wJo=i(x),Gs=n(x,"LI",{});var D8=s(Gs);xme=n(D8,"STRONG",{});var Tlt=s(xme);AJo=r(Tlt,"funnel"),Tlt.forEach(t),LJo=r(D8," \u2014 "),pq=n(D8,"A",{href:!0});var Flt=s(pq);BJo=r(Flt,"TFFunnelModel"),Flt.forEach(t),xJo=r(D8," or "),_q=n(D8,"A",{href:!0});var Clt=s(_q);kJo=r(Clt,"TFFunnelBaseModel"),Clt.forEach(t),RJo=r(D8," (Funnel Transformer model)"),D8.forEach(t),SJo=i(x),bT=n(x,"LI",{});var JAe=s(bT);kme=n(JAe,"STRONG",{});var Mlt=s(kme);PJo=r(Mlt,"gpt2"),Mlt.forEach(t),$Jo=r(JAe," \u2014 "),uq=n(JAe,"A",{href:!0});var Elt=s(uq);IJo=r(Elt,"TFGPT2Model"),Elt.forEach(t),jJo=r(JAe," (OpenAI GPT-2 model)"),JAe.forEach(t),DJo=i(x),vT=n(x,"LI",{});var YAe=s(vT);Rme=n(YAe,"STRONG",{});var ylt=s(Rme);NJo=r(ylt,"hubert"),ylt.forEach(t),qJo=r(YAe," \u2014 "),bq=n(YAe,"A",{href:!0});var wlt=s(bq);OJo=r(wlt,"TFHubertModel"),wlt.forEach(t),GJo=r(YAe," (Hubert model)"),YAe.forEach(t),XJo=i(x),TT=n(x,"LI",{});var KAe=s(TT);Sme=n(KAe,"STRONG",{});var Alt=s(Sme);VJo=r(Alt,"layoutlm"),Alt.forEach(t),zJo=r(KAe," \u2014 "),vq=n(KAe,"A",{href:!0});var Llt=s(vq);WJo=r(Llt,"TFLayoutLMModel"),Llt.forEach(t),QJo=r(KAe," (LayoutLM model)"),KAe.forEach(t),HJo=i(x),FT=n(x,"LI",{});var ZAe=s(FT);Pme=n(ZAe,"STRONG",{});var Blt=s(Pme);UJo=r(Blt,"led"),Blt.forEach(t),JJo=r(ZAe," \u2014 "),Tq=n(ZAe,"A",{href:!0});var xlt=s(Tq);YJo=r(xlt,"TFLEDModel"),xlt.forEach(t),KJo=r(ZAe," (LED model)"),ZAe.forEach(t),ZJo=i(x),CT=n(x,"LI",{});var e0e=s(CT);$me=n(e0e,"STRONG",{});var klt=s($me);eYo=r(klt,"longformer"),klt.forEach(t),oYo=r(e0e," \u2014 "),Fq=n(e0e,"A",{href:!0});var Rlt=s(Fq);rYo=r(Rlt,"TFLongformerModel"),Rlt.forEach(t),tYo=r(e0e," (Longformer model)"),e0e.forEach(t),aYo=i(x),MT=n(x,"LI",{});var o0e=s(MT);Ime=n(o0e,"STRONG",{});var Slt=s(Ime);nYo=r(Slt,"lxmert"),Slt.forEach(t),sYo=r(o0e," \u2014 "),Cq=n(o0e,"A",{href:!0});var Plt=s(Cq);lYo=r(Plt,"TFLxmertModel"),Plt.forEach(t),iYo=r(o0e," (LXMERT model)"),o0e.forEach(t),dYo=i(x),ET=n(x,"LI",{});var r0e=s(ET);jme=n(r0e,"STRONG",{});var $lt=s(jme);cYo=r($lt,"marian"),$lt.forEach(t),fYo=r(r0e," \u2014 "),Mq=n(r0e,"A",{href:!0});var Ilt=s(Mq);mYo=r(Ilt,"TFMarianModel"),Ilt.forEach(t),gYo=r(r0e," (Marian model)"),r0e.forEach(t),hYo=i(x),yT=n(x,"LI",{});var t0e=s(yT);Dme=n(t0e,"STRONG",{});var jlt=s(Dme);pYo=r(jlt,"mbart"),jlt.forEach(t),_Yo=r(t0e," \u2014 "),Eq=n(t0e,"A",{href:!0});var Dlt=s(Eq);uYo=r(Dlt,"TFMBartModel"),Dlt.forEach(t),bYo=r(t0e," (mBART model)"),t0e.forEach(t),vYo=i(x),wT=n(x,"LI",{});var a0e=s(wT);Nme=n(a0e,"STRONG",{});var Nlt=s(Nme);TYo=r(Nlt,"mobilebert"),Nlt.forEach(t),FYo=r(a0e," \u2014 "),yq=n(a0e,"A",{href:!0});var qlt=s(yq);CYo=r(qlt,"TFMobileBertModel"),qlt.forEach(t),MYo=r(a0e," (MobileBERT model)"),a0e.forEach(t),EYo=i(x),AT=n(x,"LI",{});var n0e=s(AT);qme=n(n0e,"STRONG",{});var Olt=s(qme);yYo=r(Olt,"mpnet"),Olt.forEach(t),wYo=r(n0e," \u2014 "),wq=n(n0e,"A",{href:!0});var Glt=s(wq);AYo=r(Glt,"TFMPNetModel"),Glt.forEach(t),LYo=r(n0e," (MPNet model)"),n0e.forEach(t),BYo=i(x),LT=n(x,"LI",{});var s0e=s(LT);Ome=n(s0e,"STRONG",{});var Xlt=s(Ome);xYo=r(Xlt,"mt5"),Xlt.forEach(t),kYo=r(s0e," \u2014 "),Aq=n(s0e,"A",{href:!0});var Vlt=s(Aq);RYo=r(Vlt,"TFMT5Model"),Vlt.forEach(t),SYo=r(s0e," (mT5 model)"),s0e.forEach(t),PYo=i(x),BT=n(x,"LI",{});var l0e=s(BT);Gme=n(l0e,"STRONG",{});var zlt=s(Gme);$Yo=r(zlt,"openai-gpt"),zlt.forEach(t),IYo=r(l0e," \u2014 "),Lq=n(l0e,"A",{href:!0});var Wlt=s(Lq);jYo=r(Wlt,"TFOpenAIGPTModel"),Wlt.forEach(t),DYo=r(l0e," (OpenAI GPT model)"),l0e.forEach(t),NYo=i(x),xT=n(x,"LI",{});var i0e=s(xT);Xme=n(i0e,"STRONG",{});var Qlt=s(Xme);qYo=r(Qlt,"pegasus"),Qlt.forEach(t),OYo=r(i0e," \u2014 "),Bq=n(i0e,"A",{href:!0});var Hlt=s(Bq);GYo=r(Hlt,"TFPegasusModel"),Hlt.forEach(t),XYo=r(i0e," (Pegasus model)"),i0e.forEach(t),VYo=i(x),kT=n(x,"LI",{});var d0e=s(kT);Vme=n(d0e,"STRONG",{});var Ult=s(Vme);zYo=r(Ult,"rembert"),Ult.forEach(t),WYo=r(d0e," \u2014 "),xq=n(d0e,"A",{href:!0});var Jlt=s(xq);QYo=r(Jlt,"TFRemBertModel"),Jlt.forEach(t),HYo=r(d0e," (RemBERT model)"),d0e.forEach(t),UYo=i(x),RT=n(x,"LI",{});var c0e=s(RT);zme=n(c0e,"STRONG",{});var Ylt=s(zme);JYo=r(Ylt,"roberta"),Ylt.forEach(t),YYo=r(c0e," \u2014 "),kq=n(c0e,"A",{href:!0});var Klt=s(kq);KYo=r(Klt,"TFRobertaModel"),Klt.forEach(t),ZYo=r(c0e," (RoBERTa model)"),c0e.forEach(t),eKo=i(x),ST=n(x,"LI",{});var f0e=s(ST);Wme=n(f0e,"STRONG",{});var Zlt=s(Wme);oKo=r(Zlt,"roformer"),Zlt.forEach(t),rKo=r(f0e," \u2014 "),Rq=n(f0e,"A",{href:!0});var eit=s(Rq);tKo=r(eit,"TFRoFormerModel"),eit.forEach(t),aKo=r(f0e," (RoFormer model)"),f0e.forEach(t),nKo=i(x),PT=n(x,"LI",{});var m0e=s(PT);Qme=n(m0e,"STRONG",{});var oit=s(Qme);sKo=r(oit,"speech_to_text"),oit.forEach(t),lKo=r(m0e," \u2014 "),Sq=n(m0e,"A",{href:!0});var rit=s(Sq);iKo=r(rit,"TFSpeech2TextModel"),rit.forEach(t),dKo=r(m0e," (Speech2Text model)"),m0e.forEach(t),cKo=i(x),$T=n(x,"LI",{});var g0e=s($T);Hme=n(g0e,"STRONG",{});var tit=s(Hme);fKo=r(tit,"t5"),tit.forEach(t),mKo=r(g0e," \u2014 "),Pq=n(g0e,"A",{href:!0});var ait=s(Pq);gKo=r(ait,"TFT5Model"),ait.forEach(t),hKo=r(g0e," (T5 model)"),g0e.forEach(t),pKo=i(x),IT=n(x,"LI",{});var h0e=s(IT);Ume=n(h0e,"STRONG",{});var nit=s(Ume);_Ko=r(nit,"tapas"),nit.forEach(t),uKo=r(h0e," \u2014 "),$q=n(h0e,"A",{href:!0});var sit=s($q);bKo=r(sit,"TFTapasModel"),sit.forEach(t),vKo=r(h0e," (TAPAS model)"),h0e.forEach(t),TKo=i(x),jT=n(x,"LI",{});var p0e=s(jT);Jme=n(p0e,"STRONG",{});var lit=s(Jme);FKo=r(lit,"transfo-xl"),lit.forEach(t),CKo=r(p0e," \u2014 "),Iq=n(p0e,"A",{href:!0});var iit=s(Iq);MKo=r(iit,"TFTransfoXLModel"),iit.forEach(t),EKo=r(p0e," (Transformer-XL model)"),p0e.forEach(t),yKo=i(x),DT=n(x,"LI",{});var _0e=s(DT);Yme=n(_0e,"STRONG",{});var dit=s(Yme);wKo=r(dit,"vit"),dit.forEach(t),AKo=r(_0e," \u2014 "),jq=n(_0e,"A",{href:!0});var cit=s(jq);LKo=r(cit,"TFViTModel"),cit.forEach(t),BKo=r(_0e," (ViT model)"),_0e.forEach(t),xKo=i(x),NT=n(x,"LI",{});var u0e=s(NT);Kme=n(u0e,"STRONG",{});var fit=s(Kme);kKo=r(fit,"wav2vec2"),fit.forEach(t),RKo=r(u0e," \u2014 "),Dq=n(u0e,"A",{href:!0});var mit=s(Dq);SKo=r(mit,"TFWav2Vec2Model"),mit.forEach(t),PKo=r(u0e," (Wav2Vec2 model)"),u0e.forEach(t),$Ko=i(x),qT=n(x,"LI",{});var b0e=s(qT);Zme=n(b0e,"STRONG",{});var git=s(Zme);IKo=r(git,"xlm"),git.forEach(t),jKo=r(b0e," \u2014 "),Nq=n(b0e,"A",{href:!0});var hit=s(Nq);DKo=r(hit,"TFXLMModel"),hit.forEach(t),NKo=r(b0e," (XLM model)"),b0e.forEach(t),qKo=i(x),OT=n(x,"LI",{});var v0e=s(OT);ege=n(v0e,"STRONG",{});var pit=s(ege);OKo=r(pit,"xlm-roberta"),pit.forEach(t),GKo=r(v0e," \u2014 "),qq=n(v0e,"A",{href:!0});var _it=s(qq);XKo=r(_it,"TFXLMRobertaModel"),_it.forEach(t),VKo=r(v0e," (XLM-RoBERTa model)"),v0e.forEach(t),zKo=i(x),GT=n(x,"LI",{});var T0e=s(GT);oge=n(T0e,"STRONG",{});var uit=s(oge);WKo=r(uit,"xlnet"),uit.forEach(t),QKo=r(T0e," \u2014 "),Oq=n(T0e,"A",{href:!0});var bit=s(Oq);HKo=r(bit,"TFXLNetModel"),bit.forEach(t),UKo=r(T0e," (XLNet model)"),T0e.forEach(t),x.forEach(t),JKo=i(ha),rge=n(ha,"P",{});var vit=s(rge);YKo=r(vit,"Examples:"),vit.forEach(t),KKo=i(ha),m(R6.$$.fragment,ha),ha.forEach(t),ql.forEach(t),ske=i(d),_c=n(d,"H2",{class:!0});var uSe=s(_c);XT=n(uSe,"A",{id:!0,class:!0,href:!0});var Tit=s(XT);tge=n(Tit,"SPAN",{});var Fit=s(tge);m(S6.$$.fragment,Fit),Fit.forEach(t),Tit.forEach(t),ZKo=i(uSe),age=n(uSe,"SPAN",{});var Cit=s(age);eZo=r(Cit,"TFAutoModelForPreTraining"),Cit.forEach(t),uSe.forEach(t),lke=i(d),Tr=n(d,"DIV",{class:!0});var Gl=s(Tr);m(P6.$$.fragment,Gl),oZo=i(Gl),uc=n(Gl,"P",{});var bW=s(uc);rZo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nge=n(bW,"CODE",{});var Mit=s(nge);tZo=r(Mit,"from_pretrained()"),Mit.forEach(t),aZo=r(bW,"class method or the "),sge=n(bW,"CODE",{});var Eit=s(sge);nZo=r(Eit,"from_config()"),Eit.forEach(t),sZo=r(bW,`class
method.`),bW.forEach(t),lZo=i(Gl),$6=n(Gl,"P",{});var bSe=s($6);iZo=r(bSe,"This class cannot be instantiated directly using "),lge=n(bSe,"CODE",{});var yit=s(lge);dZo=r(yit,"__init__()"),yit.forEach(t),cZo=r(bSe," (throws an error)."),bSe.forEach(t),fZo=i(Gl),ht=n(Gl,"DIV",{class:!0});var Xl=s(ht);m(I6.$$.fragment,Xl),mZo=i(Xl),ige=n(Xl,"P",{});var wit=s(ige);gZo=r(wit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wit.forEach(t),hZo=i(Xl),bc=n(Xl,"P",{});var vW=s(bc);pZo=r(vW,`Note:
Loading a model from its configuration file does `),dge=n(vW,"STRONG",{});var Ait=s(dge);_Zo=r(Ait,"not"),Ait.forEach(t),uZo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cge=n(vW,"CODE",{});var Lit=s(cge);bZo=r(Lit,"from_pretrained()"),Lit.forEach(t),vZo=r(vW,"to load the model weights."),vW.forEach(t),TZo=i(Xl),fge=n(Xl,"P",{});var Bit=s(fge);FZo=r(Bit,"Examples:"),Bit.forEach(t),CZo=i(Xl),m(j6.$$.fragment,Xl),Xl.forEach(t),MZo=i(Gl),po=n(Gl,"DIV",{class:!0});var pa=s(po);m(D6.$$.fragment,pa),EZo=i(pa),mge=n(pa,"P",{});var xit=s(mge);yZo=r(xit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xit.forEach(t),wZo=i(pa),_n=n(pa,"P",{});var TE=s(_n);AZo=r(TE,"The model class to instantiate is selected based on the "),gge=n(TE,"CODE",{});var kit=s(gge);LZo=r(kit,"model_type"),kit.forEach(t),BZo=r(TE,` property of the config object (either
passed as an argument or loaded from `),hge=n(TE,"CODE",{});var Rit=s(hge);xZo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),kZo=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(TE,"CODE",{});var Sit=s(pge);RZo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),SZo=r(TE,":"),TE.forEach(t),PZo=i(pa),H=n(pa,"UL",{});var U=s(H);VT=n(U,"LI",{});var F0e=s(VT);_ge=n(F0e,"STRONG",{});var Pit=s(_ge);$Zo=r(Pit,"albert"),Pit.forEach(t),IZo=r(F0e," \u2014 "),Gq=n(F0e,"A",{href:!0});var $it=s(Gq);jZo=r($it,"TFAlbertForPreTraining"),$it.forEach(t),DZo=r(F0e," (ALBERT model)"),F0e.forEach(t),NZo=i(U),zT=n(U,"LI",{});var C0e=s(zT);uge=n(C0e,"STRONG",{});var Iit=s(uge);qZo=r(Iit,"bart"),Iit.forEach(t),OZo=r(C0e," \u2014 "),Xq=n(C0e,"A",{href:!0});var jit=s(Xq);GZo=r(jit,"TFBartForConditionalGeneration"),jit.forEach(t),XZo=r(C0e," (BART model)"),C0e.forEach(t),VZo=i(U),WT=n(U,"LI",{});var M0e=s(WT);bge=n(M0e,"STRONG",{});var Dit=s(bge);zZo=r(Dit,"bert"),Dit.forEach(t),WZo=r(M0e," \u2014 "),Vq=n(M0e,"A",{href:!0});var Nit=s(Vq);QZo=r(Nit,"TFBertForPreTraining"),Nit.forEach(t),HZo=r(M0e," (BERT model)"),M0e.forEach(t),UZo=i(U),QT=n(U,"LI",{});var E0e=s(QT);vge=n(E0e,"STRONG",{});var qit=s(vge);JZo=r(qit,"camembert"),qit.forEach(t),YZo=r(E0e," \u2014 "),zq=n(E0e,"A",{href:!0});var Oit=s(zq);KZo=r(Oit,"TFCamembertForMaskedLM"),Oit.forEach(t),ZZo=r(E0e," (CamemBERT model)"),E0e.forEach(t),eer=i(U),HT=n(U,"LI",{});var y0e=s(HT);Tge=n(y0e,"STRONG",{});var Git=s(Tge);oer=r(Git,"ctrl"),Git.forEach(t),rer=r(y0e," \u2014 "),Wq=n(y0e,"A",{href:!0});var Xit=s(Wq);ter=r(Xit,"TFCTRLLMHeadModel"),Xit.forEach(t),aer=r(y0e," (CTRL model)"),y0e.forEach(t),ner=i(U),UT=n(U,"LI",{});var w0e=s(UT);Fge=n(w0e,"STRONG",{});var Vit=s(Fge);ser=r(Vit,"distilbert"),Vit.forEach(t),ler=r(w0e," \u2014 "),Qq=n(w0e,"A",{href:!0});var zit=s(Qq);ier=r(zit,"TFDistilBertForMaskedLM"),zit.forEach(t),der=r(w0e," (DistilBERT model)"),w0e.forEach(t),cer=i(U),JT=n(U,"LI",{});var A0e=s(JT);Cge=n(A0e,"STRONG",{});var Wit=s(Cge);fer=r(Wit,"electra"),Wit.forEach(t),mer=r(A0e," \u2014 "),Hq=n(A0e,"A",{href:!0});var Qit=s(Hq);ger=r(Qit,"TFElectraForPreTraining"),Qit.forEach(t),her=r(A0e," (ELECTRA model)"),A0e.forEach(t),per=i(U),YT=n(U,"LI",{});var L0e=s(YT);Mge=n(L0e,"STRONG",{});var Hit=s(Mge);_er=r(Hit,"flaubert"),Hit.forEach(t),uer=r(L0e," \u2014 "),Uq=n(L0e,"A",{href:!0});var Uit=s(Uq);ber=r(Uit,"TFFlaubertWithLMHeadModel"),Uit.forEach(t),ver=r(L0e," (FlauBERT model)"),L0e.forEach(t),Ter=i(U),KT=n(U,"LI",{});var B0e=s(KT);Ege=n(B0e,"STRONG",{});var Jit=s(Ege);Fer=r(Jit,"funnel"),Jit.forEach(t),Cer=r(B0e," \u2014 "),Jq=n(B0e,"A",{href:!0});var Yit=s(Jq);Mer=r(Yit,"TFFunnelForPreTraining"),Yit.forEach(t),Eer=r(B0e," (Funnel Transformer model)"),B0e.forEach(t),yer=i(U),ZT=n(U,"LI",{});var x0e=s(ZT);yge=n(x0e,"STRONG",{});var Kit=s(yge);wer=r(Kit,"gpt2"),Kit.forEach(t),Aer=r(x0e," \u2014 "),Yq=n(x0e,"A",{href:!0});var Zit=s(Yq);Ler=r(Zit,"TFGPT2LMHeadModel"),Zit.forEach(t),Ber=r(x0e," (OpenAI GPT-2 model)"),x0e.forEach(t),xer=i(U),eF=n(U,"LI",{});var k0e=s(eF);wge=n(k0e,"STRONG",{});var edt=s(wge);ker=r(edt,"layoutlm"),edt.forEach(t),Rer=r(k0e," \u2014 "),Kq=n(k0e,"A",{href:!0});var odt=s(Kq);Ser=r(odt,"TFLayoutLMForMaskedLM"),odt.forEach(t),Per=r(k0e," (LayoutLM model)"),k0e.forEach(t),$er=i(U),oF=n(U,"LI",{});var R0e=s(oF);Age=n(R0e,"STRONG",{});var rdt=s(Age);Ier=r(rdt,"lxmert"),rdt.forEach(t),jer=r(R0e," \u2014 "),Zq=n(R0e,"A",{href:!0});var tdt=s(Zq);Der=r(tdt,"TFLxmertForPreTraining"),tdt.forEach(t),Ner=r(R0e," (LXMERT model)"),R0e.forEach(t),qer=i(U),rF=n(U,"LI",{});var S0e=s(rF);Lge=n(S0e,"STRONG",{});var adt=s(Lge);Oer=r(adt,"mobilebert"),adt.forEach(t),Ger=r(S0e," \u2014 "),eO=n(S0e,"A",{href:!0});var ndt=s(eO);Xer=r(ndt,"TFMobileBertForPreTraining"),ndt.forEach(t),Ver=r(S0e," (MobileBERT model)"),S0e.forEach(t),zer=i(U),tF=n(U,"LI",{});var P0e=s(tF);Bge=n(P0e,"STRONG",{});var sdt=s(Bge);Wer=r(sdt,"mpnet"),sdt.forEach(t),Qer=r(P0e," \u2014 "),oO=n(P0e,"A",{href:!0});var ldt=s(oO);Her=r(ldt,"TFMPNetForMaskedLM"),ldt.forEach(t),Uer=r(P0e," (MPNet model)"),P0e.forEach(t),Jer=i(U),aF=n(U,"LI",{});var $0e=s(aF);xge=n($0e,"STRONG",{});var idt=s(xge);Yer=r(idt,"openai-gpt"),idt.forEach(t),Ker=r($0e," \u2014 "),rO=n($0e,"A",{href:!0});var ddt=s(rO);Zer=r(ddt,"TFOpenAIGPTLMHeadModel"),ddt.forEach(t),eor=r($0e," (OpenAI GPT model)"),$0e.forEach(t),oor=i(U),nF=n(U,"LI",{});var I0e=s(nF);kge=n(I0e,"STRONG",{});var cdt=s(kge);ror=r(cdt,"roberta"),cdt.forEach(t),tor=r(I0e," \u2014 "),tO=n(I0e,"A",{href:!0});var fdt=s(tO);aor=r(fdt,"TFRobertaForMaskedLM"),fdt.forEach(t),nor=r(I0e," (RoBERTa model)"),I0e.forEach(t),sor=i(U),sF=n(U,"LI",{});var j0e=s(sF);Rge=n(j0e,"STRONG",{});var mdt=s(Rge);lor=r(mdt,"t5"),mdt.forEach(t),ior=r(j0e," \u2014 "),aO=n(j0e,"A",{href:!0});var gdt=s(aO);dor=r(gdt,"TFT5ForConditionalGeneration"),gdt.forEach(t),cor=r(j0e," (T5 model)"),j0e.forEach(t),mor=i(U),lF=n(U,"LI",{});var D0e=s(lF);Sge=n(D0e,"STRONG",{});var hdt=s(Sge);gor=r(hdt,"tapas"),hdt.forEach(t),hor=r(D0e," \u2014 "),nO=n(D0e,"A",{href:!0});var pdt=s(nO);por=r(pdt,"TFTapasForMaskedLM"),pdt.forEach(t),_or=r(D0e," (TAPAS model)"),D0e.forEach(t),uor=i(U),iF=n(U,"LI",{});var N0e=s(iF);Pge=n(N0e,"STRONG",{});var _dt=s(Pge);bor=r(_dt,"transfo-xl"),_dt.forEach(t),vor=r(N0e," \u2014 "),sO=n(N0e,"A",{href:!0});var udt=s(sO);Tor=r(udt,"TFTransfoXLLMHeadModel"),udt.forEach(t),For=r(N0e," (Transformer-XL model)"),N0e.forEach(t),Cor=i(U),dF=n(U,"LI",{});var q0e=s(dF);$ge=n(q0e,"STRONG",{});var bdt=s($ge);Mor=r(bdt,"xlm"),bdt.forEach(t),Eor=r(q0e," \u2014 "),lO=n(q0e,"A",{href:!0});var vdt=s(lO);yor=r(vdt,"TFXLMWithLMHeadModel"),vdt.forEach(t),wor=r(q0e," (XLM model)"),q0e.forEach(t),Aor=i(U),cF=n(U,"LI",{});var O0e=s(cF);Ige=n(O0e,"STRONG",{});var Tdt=s(Ige);Lor=r(Tdt,"xlm-roberta"),Tdt.forEach(t),Bor=r(O0e," \u2014 "),iO=n(O0e,"A",{href:!0});var Fdt=s(iO);xor=r(Fdt,"TFXLMRobertaForMaskedLM"),Fdt.forEach(t),kor=r(O0e," (XLM-RoBERTa model)"),O0e.forEach(t),Ror=i(U),fF=n(U,"LI",{});var G0e=s(fF);jge=n(G0e,"STRONG",{});var Cdt=s(jge);Sor=r(Cdt,"xlnet"),Cdt.forEach(t),Por=r(G0e," \u2014 "),dO=n(G0e,"A",{href:!0});var Mdt=s(dO);$or=r(Mdt,"TFXLNetLMHeadModel"),Mdt.forEach(t),Ior=r(G0e," (XLNet model)"),G0e.forEach(t),U.forEach(t),jor=i(pa),Dge=n(pa,"P",{});var Edt=s(Dge);Dor=r(Edt,"Examples:"),Edt.forEach(t),Nor=i(pa),m(N6.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),ike=i(d),vc=n(d,"H2",{class:!0});var vSe=s(vc);mF=n(vSe,"A",{id:!0,class:!0,href:!0});var ydt=s(mF);Nge=n(ydt,"SPAN",{});var wdt=s(Nge);m(q6.$$.fragment,wdt),wdt.forEach(t),ydt.forEach(t),qor=i(vSe),qge=n(vSe,"SPAN",{});var Adt=s(qge);Oor=r(Adt,"TFAutoModelForCausalLM"),Adt.forEach(t),vSe.forEach(t),dke=i(d),Fr=n(d,"DIV",{class:!0});var Vl=s(Fr);m(O6.$$.fragment,Vl),Gor=i(Vl),Tc=n(Vl,"P",{});var TW=s(Tc);Xor=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oge=n(TW,"CODE",{});var Ldt=s(Oge);Vor=r(Ldt,"from_pretrained()"),Ldt.forEach(t),zor=r(TW,"class method or the "),Gge=n(TW,"CODE",{});var Bdt=s(Gge);Wor=r(Bdt,"from_config()"),Bdt.forEach(t),Qor=r(TW,`class
method.`),TW.forEach(t),Hor=i(Vl),G6=n(Vl,"P",{});var TSe=s(G6);Uor=r(TSe,"This class cannot be instantiated directly using "),Xge=n(TSe,"CODE",{});var xdt=s(Xge);Jor=r(xdt,"__init__()"),xdt.forEach(t),Yor=r(TSe," (throws an error)."),TSe.forEach(t),Kor=i(Vl),pt=n(Vl,"DIV",{class:!0});var zl=s(pt);m(X6.$$.fragment,zl),Zor=i(zl),Vge=n(zl,"P",{});var kdt=s(Vge);err=r(kdt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kdt.forEach(t),orr=i(zl),Fc=n(zl,"P",{});var FW=s(Fc);rrr=r(FW,`Note:
Loading a model from its configuration file does `),zge=n(FW,"STRONG",{});var Rdt=s(zge);trr=r(Rdt,"not"),Rdt.forEach(t),arr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wge=n(FW,"CODE",{});var Sdt=s(Wge);nrr=r(Sdt,"from_pretrained()"),Sdt.forEach(t),srr=r(FW,"to load the model weights."),FW.forEach(t),lrr=i(zl),Qge=n(zl,"P",{});var Pdt=s(Qge);irr=r(Pdt,"Examples:"),Pdt.forEach(t),drr=i(zl),m(V6.$$.fragment,zl),zl.forEach(t),crr=i(Vl),_o=n(Vl,"DIV",{class:!0});var _a=s(_o);m(z6.$$.fragment,_a),frr=i(_a),Hge=n(_a,"P",{});var $dt=s(Hge);mrr=r($dt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$dt.forEach(t),grr=i(_a),un=n(_a,"P",{});var FE=s(un);hrr=r(FE,"The model class to instantiate is selected based on the "),Uge=n(FE,"CODE",{});var Idt=s(Uge);prr=r(Idt,"model_type"),Idt.forEach(t),_rr=r(FE,` property of the config object (either
passed as an argument or loaded from `),Jge=n(FE,"CODE",{});var jdt=s(Jge);urr=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),brr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(FE,"CODE",{});var Ddt=s(Yge);vrr=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),Trr=r(FE,":"),FE.forEach(t),Frr=i(_a),pe=n(_a,"UL",{});var Me=s(pe);gF=n(Me,"LI",{});var X0e=s(gF);Kge=n(X0e,"STRONG",{});var Ndt=s(Kge);Crr=r(Ndt,"bert"),Ndt.forEach(t),Mrr=r(X0e," \u2014 "),cO=n(X0e,"A",{href:!0});var qdt=s(cO);Err=r(qdt,"TFBertLMHeadModel"),qdt.forEach(t),yrr=r(X0e," (BERT model)"),X0e.forEach(t),wrr=i(Me),hF=n(Me,"LI",{});var V0e=s(hF);Zge=n(V0e,"STRONG",{});var Odt=s(Zge);Arr=r(Odt,"ctrl"),Odt.forEach(t),Lrr=r(V0e," \u2014 "),fO=n(V0e,"A",{href:!0});var Gdt=s(fO);Brr=r(Gdt,"TFCTRLLMHeadModel"),Gdt.forEach(t),xrr=r(V0e," (CTRL model)"),V0e.forEach(t),krr=i(Me),pF=n(Me,"LI",{});var z0e=s(pF);ehe=n(z0e,"STRONG",{});var Xdt=s(ehe);Rrr=r(Xdt,"gpt2"),Xdt.forEach(t),Srr=r(z0e," \u2014 "),mO=n(z0e,"A",{href:!0});var Vdt=s(mO);Prr=r(Vdt,"TFGPT2LMHeadModel"),Vdt.forEach(t),$rr=r(z0e," (OpenAI GPT-2 model)"),z0e.forEach(t),Irr=i(Me),_F=n(Me,"LI",{});var W0e=s(_F);ohe=n(W0e,"STRONG",{});var zdt=s(ohe);jrr=r(zdt,"openai-gpt"),zdt.forEach(t),Drr=r(W0e," \u2014 "),gO=n(W0e,"A",{href:!0});var Wdt=s(gO);Nrr=r(Wdt,"TFOpenAIGPTLMHeadModel"),Wdt.forEach(t),qrr=r(W0e," (OpenAI GPT model)"),W0e.forEach(t),Orr=i(Me),uF=n(Me,"LI",{});var Q0e=s(uF);rhe=n(Q0e,"STRONG",{});var Qdt=s(rhe);Grr=r(Qdt,"rembert"),Qdt.forEach(t),Xrr=r(Q0e," \u2014 "),hO=n(Q0e,"A",{href:!0});var Hdt=s(hO);Vrr=r(Hdt,"TFRemBertForCausalLM"),Hdt.forEach(t),zrr=r(Q0e," (RemBERT model)"),Q0e.forEach(t),Wrr=i(Me),bF=n(Me,"LI",{});var H0e=s(bF);the=n(H0e,"STRONG",{});var Udt=s(the);Qrr=r(Udt,"roberta"),Udt.forEach(t),Hrr=r(H0e," \u2014 "),pO=n(H0e,"A",{href:!0});var Jdt=s(pO);Urr=r(Jdt,"TFRobertaForCausalLM"),Jdt.forEach(t),Jrr=r(H0e," (RoBERTa model)"),H0e.forEach(t),Yrr=i(Me),vF=n(Me,"LI",{});var U0e=s(vF);ahe=n(U0e,"STRONG",{});var Ydt=s(ahe);Krr=r(Ydt,"roformer"),Ydt.forEach(t),Zrr=r(U0e," \u2014 "),_O=n(U0e,"A",{href:!0});var Kdt=s(_O);etr=r(Kdt,"TFRoFormerForCausalLM"),Kdt.forEach(t),otr=r(U0e," (RoFormer model)"),U0e.forEach(t),rtr=i(Me),TF=n(Me,"LI",{});var J0e=s(TF);nhe=n(J0e,"STRONG",{});var Zdt=s(nhe);ttr=r(Zdt,"transfo-xl"),Zdt.forEach(t),atr=r(J0e," \u2014 "),uO=n(J0e,"A",{href:!0});var ect=s(uO);ntr=r(ect,"TFTransfoXLLMHeadModel"),ect.forEach(t),str=r(J0e," (Transformer-XL model)"),J0e.forEach(t),ltr=i(Me),FF=n(Me,"LI",{});var Y0e=s(FF);she=n(Y0e,"STRONG",{});var oct=s(she);itr=r(oct,"xlm"),oct.forEach(t),dtr=r(Y0e," \u2014 "),bO=n(Y0e,"A",{href:!0});var rct=s(bO);ctr=r(rct,"TFXLMWithLMHeadModel"),rct.forEach(t),ftr=r(Y0e," (XLM model)"),Y0e.forEach(t),mtr=i(Me),CF=n(Me,"LI",{});var K0e=s(CF);lhe=n(K0e,"STRONG",{});var tct=s(lhe);gtr=r(tct,"xlnet"),tct.forEach(t),htr=r(K0e," \u2014 "),vO=n(K0e,"A",{href:!0});var act=s(vO);ptr=r(act,"TFXLNetLMHeadModel"),act.forEach(t),_tr=r(K0e," (XLNet model)"),K0e.forEach(t),Me.forEach(t),utr=i(_a),ihe=n(_a,"P",{});var nct=s(ihe);btr=r(nct,"Examples:"),nct.forEach(t),vtr=i(_a),m(W6.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),cke=i(d),Cc=n(d,"H2",{class:!0});var FSe=s(Cc);MF=n(FSe,"A",{id:!0,class:!0,href:!0});var sct=s(MF);dhe=n(sct,"SPAN",{});var lct=s(dhe);m(Q6.$$.fragment,lct),lct.forEach(t),sct.forEach(t),Ttr=i(FSe),che=n(FSe,"SPAN",{});var ict=s(che);Ftr=r(ict,"TFAutoModelForImageClassification"),ict.forEach(t),FSe.forEach(t),fke=i(d),Cr=n(d,"DIV",{class:!0});var Wl=s(Cr);m(H6.$$.fragment,Wl),Ctr=i(Wl),Mc=n(Wl,"P",{});var CW=s(Mc);Mtr=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fhe=n(CW,"CODE",{});var dct=s(fhe);Etr=r(dct,"from_pretrained()"),dct.forEach(t),ytr=r(CW,"class method or the "),mhe=n(CW,"CODE",{});var cct=s(mhe);wtr=r(cct,"from_config()"),cct.forEach(t),Atr=r(CW,`class
method.`),CW.forEach(t),Ltr=i(Wl),U6=n(Wl,"P",{});var CSe=s(U6);Btr=r(CSe,"This class cannot be instantiated directly using "),ghe=n(CSe,"CODE",{});var fct=s(ghe);xtr=r(fct,"__init__()"),fct.forEach(t),ktr=r(CSe," (throws an error)."),CSe.forEach(t),Rtr=i(Wl),_t=n(Wl,"DIV",{class:!0});var Ql=s(_t);m(J6.$$.fragment,Ql),Str=i(Ql),hhe=n(Ql,"P",{});var mct=s(hhe);Ptr=r(mct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mct.forEach(t),$tr=i(Ql),Ec=n(Ql,"P",{});var MW=s(Ec);Itr=r(MW,`Note:
Loading a model from its configuration file does `),phe=n(MW,"STRONG",{});var gct=s(phe);jtr=r(gct,"not"),gct.forEach(t),Dtr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_he=n(MW,"CODE",{});var hct=s(_he);Ntr=r(hct,"from_pretrained()"),hct.forEach(t),qtr=r(MW,"to load the model weights."),MW.forEach(t),Otr=i(Ql),uhe=n(Ql,"P",{});var pct=s(uhe);Gtr=r(pct,"Examples:"),pct.forEach(t),Xtr=i(Ql),m(Y6.$$.fragment,Ql),Ql.forEach(t),Vtr=i(Wl),uo=n(Wl,"DIV",{class:!0});var ua=s(uo);m(K6.$$.fragment,ua),ztr=i(ua),bhe=n(ua,"P",{});var _ct=s(bhe);Wtr=r(_ct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_ct.forEach(t),Qtr=i(ua),bn=n(ua,"P",{});var CE=s(bn);Htr=r(CE,"The model class to instantiate is selected based on the "),vhe=n(CE,"CODE",{});var uct=s(vhe);Utr=r(uct,"model_type"),uct.forEach(t),Jtr=r(CE,` property of the config object (either
passed as an argument or loaded from `),The=n(CE,"CODE",{});var bct=s(The);Ytr=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),Ktr=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(CE,"CODE",{});var vct=s(Fhe);Ztr=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),ear=r(CE,":"),CE.forEach(t),oar=i(ua),Z6=n(ua,"UL",{});var MSe=s(Z6);EF=n(MSe,"LI",{});var Z0e=s(EF);Che=n(Z0e,"STRONG",{});var Tct=s(Che);rar=r(Tct,"convnext"),Tct.forEach(t),tar=r(Z0e," \u2014 "),TO=n(Z0e,"A",{href:!0});var Fct=s(TO);aar=r(Fct,"TFConvNextForImageClassification"),Fct.forEach(t),nar=r(Z0e," (ConvNext model)"),Z0e.forEach(t),sar=i(MSe),yF=n(MSe,"LI",{});var eLe=s(yF);Mhe=n(eLe,"STRONG",{});var Cct=s(Mhe);lar=r(Cct,"vit"),Cct.forEach(t),iar=r(eLe," \u2014 "),FO=n(eLe,"A",{href:!0});var Mct=s(FO);dar=r(Mct,"TFViTForImageClassification"),Mct.forEach(t),car=r(eLe," (ViT model)"),eLe.forEach(t),MSe.forEach(t),far=i(ua),Ehe=n(ua,"P",{});var Ect=s(Ehe);mar=r(Ect,"Examples:"),Ect.forEach(t),gar=i(ua),m(eA.$$.fragment,ua),ua.forEach(t),Wl.forEach(t),mke=i(d),yc=n(d,"H2",{class:!0});var ESe=s(yc);wF=n(ESe,"A",{id:!0,class:!0,href:!0});var yct=s(wF);yhe=n(yct,"SPAN",{});var wct=s(yhe);m(oA.$$.fragment,wct),wct.forEach(t),yct.forEach(t),har=i(ESe),whe=n(ESe,"SPAN",{});var Act=s(whe);par=r(Act,"TFAutoModelForMaskedLM"),Act.forEach(t),ESe.forEach(t),gke=i(d),Mr=n(d,"DIV",{class:!0});var Hl=s(Mr);m(rA.$$.fragment,Hl),_ar=i(Hl),wc=n(Hl,"P",{});var EW=s(wc);uar=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ahe=n(EW,"CODE",{});var Lct=s(Ahe);bar=r(Lct,"from_pretrained()"),Lct.forEach(t),Tar=r(EW,"class method or the "),Lhe=n(EW,"CODE",{});var Bct=s(Lhe);Far=r(Bct,"from_config()"),Bct.forEach(t),Car=r(EW,`class
method.`),EW.forEach(t),Mar=i(Hl),tA=n(Hl,"P",{});var ySe=s(tA);Ear=r(ySe,"This class cannot be instantiated directly using "),Bhe=n(ySe,"CODE",{});var xct=s(Bhe);yar=r(xct,"__init__()"),xct.forEach(t),war=r(ySe," (throws an error)."),ySe.forEach(t),Aar=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(aA.$$.fragment,Ul),Lar=i(Ul),xhe=n(Ul,"P",{});var kct=s(xhe);Bar=r(kct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kct.forEach(t),xar=i(Ul),Ac=n(Ul,"P",{});var yW=s(Ac);kar=r(yW,`Note:
Loading a model from its configuration file does `),khe=n(yW,"STRONG",{});var Rct=s(khe);Rar=r(Rct,"not"),Rct.forEach(t),Sar=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rhe=n(yW,"CODE",{});var Sct=s(Rhe);Par=r(Sct,"from_pretrained()"),Sct.forEach(t),$ar=r(yW,"to load the model weights."),yW.forEach(t),Iar=i(Ul),She=n(Ul,"P",{});var Pct=s(She);jar=r(Pct,"Examples:"),Pct.forEach(t),Dar=i(Ul),m(nA.$$.fragment,Ul),Ul.forEach(t),Nar=i(Hl),bo=n(Hl,"DIV",{class:!0});var ba=s(bo);m(sA.$$.fragment,ba),qar=i(ba),Phe=n(ba,"P",{});var $ct=s(Phe);Oar=r($ct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$ct.forEach(t),Gar=i(ba),vn=n(ba,"P",{});var ME=s(vn);Xar=r(ME,"The model class to instantiate is selected based on the "),$he=n(ME,"CODE",{});var Ict=s($he);Var=r(Ict,"model_type"),Ict.forEach(t),zar=r(ME,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(ME,"CODE",{});var jct=s(Ihe);War=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),Qar=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(ME,"CODE",{});var Dct=s(jhe);Har=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),Uar=r(ME,":"),ME.forEach(t),Jar=i(ba),Y=n(ba,"UL",{});var ee=s(Y);AF=n(ee,"LI",{});var oLe=s(AF);Dhe=n(oLe,"STRONG",{});var Nct=s(Dhe);Yar=r(Nct,"albert"),Nct.forEach(t),Kar=r(oLe," \u2014 "),CO=n(oLe,"A",{href:!0});var qct=s(CO);Zar=r(qct,"TFAlbertForMaskedLM"),qct.forEach(t),enr=r(oLe," (ALBERT model)"),oLe.forEach(t),onr=i(ee),LF=n(ee,"LI",{});var rLe=s(LF);Nhe=n(rLe,"STRONG",{});var Oct=s(Nhe);rnr=r(Oct,"bert"),Oct.forEach(t),tnr=r(rLe," \u2014 "),MO=n(rLe,"A",{href:!0});var Gct=s(MO);anr=r(Gct,"TFBertForMaskedLM"),Gct.forEach(t),nnr=r(rLe," (BERT model)"),rLe.forEach(t),snr=i(ee),BF=n(ee,"LI",{});var tLe=s(BF);qhe=n(tLe,"STRONG",{});var Xct=s(qhe);lnr=r(Xct,"camembert"),Xct.forEach(t),inr=r(tLe," \u2014 "),EO=n(tLe,"A",{href:!0});var Vct=s(EO);dnr=r(Vct,"TFCamembertForMaskedLM"),Vct.forEach(t),cnr=r(tLe," (CamemBERT model)"),tLe.forEach(t),fnr=i(ee),xF=n(ee,"LI",{});var aLe=s(xF);Ohe=n(aLe,"STRONG",{});var zct=s(Ohe);mnr=r(zct,"convbert"),zct.forEach(t),gnr=r(aLe," \u2014 "),yO=n(aLe,"A",{href:!0});var Wct=s(yO);hnr=r(Wct,"TFConvBertForMaskedLM"),Wct.forEach(t),pnr=r(aLe," (ConvBERT model)"),aLe.forEach(t),_nr=i(ee),kF=n(ee,"LI",{});var nLe=s(kF);Ghe=n(nLe,"STRONG",{});var Qct=s(Ghe);unr=r(Qct,"deberta"),Qct.forEach(t),bnr=r(nLe," \u2014 "),wO=n(nLe,"A",{href:!0});var Hct=s(wO);vnr=r(Hct,"TFDebertaForMaskedLM"),Hct.forEach(t),Tnr=r(nLe," (DeBERTa model)"),nLe.forEach(t),Fnr=i(ee),RF=n(ee,"LI",{});var sLe=s(RF);Xhe=n(sLe,"STRONG",{});var Uct=s(Xhe);Cnr=r(Uct,"deberta-v2"),Uct.forEach(t),Mnr=r(sLe," \u2014 "),AO=n(sLe,"A",{href:!0});var Jct=s(AO);Enr=r(Jct,"TFDebertaV2ForMaskedLM"),Jct.forEach(t),ynr=r(sLe," (DeBERTa-v2 model)"),sLe.forEach(t),wnr=i(ee),SF=n(ee,"LI",{});var lLe=s(SF);Vhe=n(lLe,"STRONG",{});var Yct=s(Vhe);Anr=r(Yct,"distilbert"),Yct.forEach(t),Lnr=r(lLe," \u2014 "),LO=n(lLe,"A",{href:!0});var Kct=s(LO);Bnr=r(Kct,"TFDistilBertForMaskedLM"),Kct.forEach(t),xnr=r(lLe," (DistilBERT model)"),lLe.forEach(t),knr=i(ee),PF=n(ee,"LI",{});var iLe=s(PF);zhe=n(iLe,"STRONG",{});var Zct=s(zhe);Rnr=r(Zct,"electra"),Zct.forEach(t),Snr=r(iLe," \u2014 "),BO=n(iLe,"A",{href:!0});var eft=s(BO);Pnr=r(eft,"TFElectraForMaskedLM"),eft.forEach(t),$nr=r(iLe," (ELECTRA model)"),iLe.forEach(t),Inr=i(ee),$F=n(ee,"LI",{});var dLe=s($F);Whe=n(dLe,"STRONG",{});var oft=s(Whe);jnr=r(oft,"flaubert"),oft.forEach(t),Dnr=r(dLe," \u2014 "),xO=n(dLe,"A",{href:!0});var rft=s(xO);Nnr=r(rft,"TFFlaubertWithLMHeadModel"),rft.forEach(t),qnr=r(dLe," (FlauBERT model)"),dLe.forEach(t),Onr=i(ee),IF=n(ee,"LI",{});var cLe=s(IF);Qhe=n(cLe,"STRONG",{});var tft=s(Qhe);Gnr=r(tft,"funnel"),tft.forEach(t),Xnr=r(cLe," \u2014 "),kO=n(cLe,"A",{href:!0});var aft=s(kO);Vnr=r(aft,"TFFunnelForMaskedLM"),aft.forEach(t),znr=r(cLe," (Funnel Transformer model)"),cLe.forEach(t),Wnr=i(ee),jF=n(ee,"LI",{});var fLe=s(jF);Hhe=n(fLe,"STRONG",{});var nft=s(Hhe);Qnr=r(nft,"layoutlm"),nft.forEach(t),Hnr=r(fLe," \u2014 "),RO=n(fLe,"A",{href:!0});var sft=s(RO);Unr=r(sft,"TFLayoutLMForMaskedLM"),sft.forEach(t),Jnr=r(fLe," (LayoutLM model)"),fLe.forEach(t),Ynr=i(ee),DF=n(ee,"LI",{});var mLe=s(DF);Uhe=n(mLe,"STRONG",{});var lft=s(Uhe);Knr=r(lft,"longformer"),lft.forEach(t),Znr=r(mLe," \u2014 "),SO=n(mLe,"A",{href:!0});var ift=s(SO);esr=r(ift,"TFLongformerForMaskedLM"),ift.forEach(t),osr=r(mLe," (Longformer model)"),mLe.forEach(t),rsr=i(ee),NF=n(ee,"LI",{});var gLe=s(NF);Jhe=n(gLe,"STRONG",{});var dft=s(Jhe);tsr=r(dft,"mobilebert"),dft.forEach(t),asr=r(gLe," \u2014 "),PO=n(gLe,"A",{href:!0});var cft=s(PO);nsr=r(cft,"TFMobileBertForMaskedLM"),cft.forEach(t),ssr=r(gLe," (MobileBERT model)"),gLe.forEach(t),lsr=i(ee),qF=n(ee,"LI",{});var hLe=s(qF);Yhe=n(hLe,"STRONG",{});var fft=s(Yhe);isr=r(fft,"mpnet"),fft.forEach(t),dsr=r(hLe," \u2014 "),$O=n(hLe,"A",{href:!0});var mft=s($O);csr=r(mft,"TFMPNetForMaskedLM"),mft.forEach(t),fsr=r(hLe," (MPNet model)"),hLe.forEach(t),msr=i(ee),OF=n(ee,"LI",{});var pLe=s(OF);Khe=n(pLe,"STRONG",{});var gft=s(Khe);gsr=r(gft,"rembert"),gft.forEach(t),hsr=r(pLe," \u2014 "),IO=n(pLe,"A",{href:!0});var hft=s(IO);psr=r(hft,"TFRemBertForMaskedLM"),hft.forEach(t),_sr=r(pLe," (RemBERT model)"),pLe.forEach(t),usr=i(ee),GF=n(ee,"LI",{});var _Le=s(GF);Zhe=n(_Le,"STRONG",{});var pft=s(Zhe);bsr=r(pft,"roberta"),pft.forEach(t),vsr=r(_Le," \u2014 "),jO=n(_Le,"A",{href:!0});var _ft=s(jO);Tsr=r(_ft,"TFRobertaForMaskedLM"),_ft.forEach(t),Fsr=r(_Le," (RoBERTa model)"),_Le.forEach(t),Csr=i(ee),XF=n(ee,"LI",{});var uLe=s(XF);epe=n(uLe,"STRONG",{});var uft=s(epe);Msr=r(uft,"roformer"),uft.forEach(t),Esr=r(uLe," \u2014 "),DO=n(uLe,"A",{href:!0});var bft=s(DO);ysr=r(bft,"TFRoFormerForMaskedLM"),bft.forEach(t),wsr=r(uLe," (RoFormer model)"),uLe.forEach(t),Asr=i(ee),VF=n(ee,"LI",{});var bLe=s(VF);ope=n(bLe,"STRONG",{});var vft=s(ope);Lsr=r(vft,"tapas"),vft.forEach(t),Bsr=r(bLe," \u2014 "),NO=n(bLe,"A",{href:!0});var Tft=s(NO);xsr=r(Tft,"TFTapasForMaskedLM"),Tft.forEach(t),ksr=r(bLe," (TAPAS model)"),bLe.forEach(t),Rsr=i(ee),zF=n(ee,"LI",{});var vLe=s(zF);rpe=n(vLe,"STRONG",{});var Fft=s(rpe);Ssr=r(Fft,"xlm"),Fft.forEach(t),Psr=r(vLe," \u2014 "),qO=n(vLe,"A",{href:!0});var Cft=s(qO);$sr=r(Cft,"TFXLMWithLMHeadModel"),Cft.forEach(t),Isr=r(vLe," (XLM model)"),vLe.forEach(t),jsr=i(ee),WF=n(ee,"LI",{});var TLe=s(WF);tpe=n(TLe,"STRONG",{});var Mft=s(tpe);Dsr=r(Mft,"xlm-roberta"),Mft.forEach(t),Nsr=r(TLe," \u2014 "),OO=n(TLe,"A",{href:!0});var Eft=s(OO);qsr=r(Eft,"TFXLMRobertaForMaskedLM"),Eft.forEach(t),Osr=r(TLe," (XLM-RoBERTa model)"),TLe.forEach(t),ee.forEach(t),Gsr=i(ba),ape=n(ba,"P",{});var yft=s(ape);Xsr=r(yft,"Examples:"),yft.forEach(t),Vsr=i(ba),m(lA.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),hke=i(d),Lc=n(d,"H2",{class:!0});var wSe=s(Lc);QF=n(wSe,"A",{id:!0,class:!0,href:!0});var wft=s(QF);npe=n(wft,"SPAN",{});var Aft=s(npe);m(iA.$$.fragment,Aft),Aft.forEach(t),wft.forEach(t),zsr=i(wSe),spe=n(wSe,"SPAN",{});var Lft=s(spe);Wsr=r(Lft,"TFAutoModelForSeq2SeqLM"),Lft.forEach(t),wSe.forEach(t),pke=i(d),Er=n(d,"DIV",{class:!0});var Jl=s(Er);m(dA.$$.fragment,Jl),Qsr=i(Jl),Bc=n(Jl,"P",{});var wW=s(Bc);Hsr=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lpe=n(wW,"CODE",{});var Bft=s(lpe);Usr=r(Bft,"from_pretrained()"),Bft.forEach(t),Jsr=r(wW,"class method or the "),ipe=n(wW,"CODE",{});var xft=s(ipe);Ysr=r(xft,"from_config()"),xft.forEach(t),Ksr=r(wW,`class
method.`),wW.forEach(t),Zsr=i(Jl),cA=n(Jl,"P",{});var ASe=s(cA);elr=r(ASe,"This class cannot be instantiated directly using "),dpe=n(ASe,"CODE",{});var kft=s(dpe);olr=r(kft,"__init__()"),kft.forEach(t),rlr=r(ASe," (throws an error)."),ASe.forEach(t),tlr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(fA.$$.fragment,Yl),alr=i(Yl),cpe=n(Yl,"P",{});var Rft=s(cpe);nlr=r(Rft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rft.forEach(t),slr=i(Yl),xc=n(Yl,"P",{});var AW=s(xc);llr=r(AW,`Note:
Loading a model from its configuration file does `),fpe=n(AW,"STRONG",{});var Sft=s(fpe);ilr=r(Sft,"not"),Sft.forEach(t),dlr=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=n(AW,"CODE",{});var Pft=s(mpe);clr=r(Pft,"from_pretrained()"),Pft.forEach(t),flr=r(AW,"to load the model weights."),AW.forEach(t),mlr=i(Yl),gpe=n(Yl,"P",{});var $ft=s(gpe);glr=r($ft,"Examples:"),$ft.forEach(t),hlr=i(Yl),m(mA.$$.fragment,Yl),Yl.forEach(t),plr=i(Jl),vo=n(Jl,"DIV",{class:!0});var va=s(vo);m(gA.$$.fragment,va),_lr=i(va),hpe=n(va,"P",{});var Ift=s(hpe);ulr=r(Ift,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ift.forEach(t),blr=i(va),Tn=n(va,"P",{});var EE=s(Tn);vlr=r(EE,"The model class to instantiate is selected based on the "),ppe=n(EE,"CODE",{});var jft=s(ppe);Tlr=r(jft,"model_type"),jft.forEach(t),Flr=r(EE,` property of the config object (either
passed as an argument or loaded from `),_pe=n(EE,"CODE",{});var Dft=s(_pe);Clr=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),Mlr=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(EE,"CODE",{});var Nft=s(upe);Elr=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),ylr=r(EE,":"),EE.forEach(t),wlr=i(va),_e=n(va,"UL",{});var Ee=s(_e);HF=n(Ee,"LI",{});var FLe=s(HF);bpe=n(FLe,"STRONG",{});var qft=s(bpe);Alr=r(qft,"bart"),qft.forEach(t),Llr=r(FLe," \u2014 "),GO=n(FLe,"A",{href:!0});var Oft=s(GO);Blr=r(Oft,"TFBartForConditionalGeneration"),Oft.forEach(t),xlr=r(FLe," (BART model)"),FLe.forEach(t),klr=i(Ee),UF=n(Ee,"LI",{});var CLe=s(UF);vpe=n(CLe,"STRONG",{});var Gft=s(vpe);Rlr=r(Gft,"blenderbot"),Gft.forEach(t),Slr=r(CLe," \u2014 "),XO=n(CLe,"A",{href:!0});var Xft=s(XO);Plr=r(Xft,"TFBlenderbotForConditionalGeneration"),Xft.forEach(t),$lr=r(CLe," (Blenderbot model)"),CLe.forEach(t),Ilr=i(Ee),JF=n(Ee,"LI",{});var MLe=s(JF);Tpe=n(MLe,"STRONG",{});var Vft=s(Tpe);jlr=r(Vft,"blenderbot-small"),Vft.forEach(t),Dlr=r(MLe," \u2014 "),VO=n(MLe,"A",{href:!0});var zft=s(VO);Nlr=r(zft,"TFBlenderbotSmallForConditionalGeneration"),zft.forEach(t),qlr=r(MLe," (BlenderbotSmall model)"),MLe.forEach(t),Olr=i(Ee),YF=n(Ee,"LI",{});var ELe=s(YF);Fpe=n(ELe,"STRONG",{});var Wft=s(Fpe);Glr=r(Wft,"encoder-decoder"),Wft.forEach(t),Xlr=r(ELe," \u2014 "),zO=n(ELe,"A",{href:!0});var Qft=s(zO);Vlr=r(Qft,"TFEncoderDecoderModel"),Qft.forEach(t),zlr=r(ELe," (Encoder decoder model)"),ELe.forEach(t),Wlr=i(Ee),KF=n(Ee,"LI",{});var yLe=s(KF);Cpe=n(yLe,"STRONG",{});var Hft=s(Cpe);Qlr=r(Hft,"led"),Hft.forEach(t),Hlr=r(yLe," \u2014 "),WO=n(yLe,"A",{href:!0});var Uft=s(WO);Ulr=r(Uft,"TFLEDForConditionalGeneration"),Uft.forEach(t),Jlr=r(yLe," (LED model)"),yLe.forEach(t),Ylr=i(Ee),ZF=n(Ee,"LI",{});var wLe=s(ZF);Mpe=n(wLe,"STRONG",{});var Jft=s(Mpe);Klr=r(Jft,"marian"),Jft.forEach(t),Zlr=r(wLe," \u2014 "),QO=n(wLe,"A",{href:!0});var Yft=s(QO);eir=r(Yft,"TFMarianMTModel"),Yft.forEach(t),oir=r(wLe," (Marian model)"),wLe.forEach(t),rir=i(Ee),e9=n(Ee,"LI",{});var ALe=s(e9);Epe=n(ALe,"STRONG",{});var Kft=s(Epe);tir=r(Kft,"mbart"),Kft.forEach(t),air=r(ALe," \u2014 "),HO=n(ALe,"A",{href:!0});var Zft=s(HO);nir=r(Zft,"TFMBartForConditionalGeneration"),Zft.forEach(t),sir=r(ALe," (mBART model)"),ALe.forEach(t),lir=i(Ee),o9=n(Ee,"LI",{});var LLe=s(o9);ype=n(LLe,"STRONG",{});var emt=s(ype);iir=r(emt,"mt5"),emt.forEach(t),dir=r(LLe," \u2014 "),UO=n(LLe,"A",{href:!0});var omt=s(UO);cir=r(omt,"TFMT5ForConditionalGeneration"),omt.forEach(t),fir=r(LLe," (mT5 model)"),LLe.forEach(t),mir=i(Ee),r9=n(Ee,"LI",{});var BLe=s(r9);wpe=n(BLe,"STRONG",{});var rmt=s(wpe);gir=r(rmt,"pegasus"),rmt.forEach(t),hir=r(BLe," \u2014 "),JO=n(BLe,"A",{href:!0});var tmt=s(JO);pir=r(tmt,"TFPegasusForConditionalGeneration"),tmt.forEach(t),_ir=r(BLe," (Pegasus model)"),BLe.forEach(t),uir=i(Ee),t9=n(Ee,"LI",{});var xLe=s(t9);Ape=n(xLe,"STRONG",{});var amt=s(Ape);bir=r(amt,"t5"),amt.forEach(t),vir=r(xLe," \u2014 "),YO=n(xLe,"A",{href:!0});var nmt=s(YO);Tir=r(nmt,"TFT5ForConditionalGeneration"),nmt.forEach(t),Fir=r(xLe," (T5 model)"),xLe.forEach(t),Ee.forEach(t),Cir=i(va),Lpe=n(va,"P",{});var smt=s(Lpe);Mir=r(smt,"Examples:"),smt.forEach(t),Eir=i(va),m(hA.$$.fragment,va),va.forEach(t),Jl.forEach(t),_ke=i(d),kc=n(d,"H2",{class:!0});var LSe=s(kc);a9=n(LSe,"A",{id:!0,class:!0,href:!0});var lmt=s(a9);Bpe=n(lmt,"SPAN",{});var imt=s(Bpe);m(pA.$$.fragment,imt),imt.forEach(t),lmt.forEach(t),yir=i(LSe),xpe=n(LSe,"SPAN",{});var dmt=s(xpe);wir=r(dmt,"TFAutoModelForSequenceClassification"),dmt.forEach(t),LSe.forEach(t),uke=i(d),yr=n(d,"DIV",{class:!0});var Kl=s(yr);m(_A.$$.fragment,Kl),Air=i(Kl),Rc=n(Kl,"P",{});var LW=s(Rc);Lir=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kpe=n(LW,"CODE",{});var cmt=s(kpe);Bir=r(cmt,"from_pretrained()"),cmt.forEach(t),xir=r(LW,"class method or the "),Rpe=n(LW,"CODE",{});var fmt=s(Rpe);kir=r(fmt,"from_config()"),fmt.forEach(t),Rir=r(LW,`class
method.`),LW.forEach(t),Sir=i(Kl),uA=n(Kl,"P",{});var BSe=s(uA);Pir=r(BSe,"This class cannot be instantiated directly using "),Spe=n(BSe,"CODE",{});var mmt=s(Spe);$ir=r(mmt,"__init__()"),mmt.forEach(t),Iir=r(BSe," (throws an error)."),BSe.forEach(t),jir=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(bA.$$.fragment,Zl),Dir=i(Zl),Ppe=n(Zl,"P",{});var gmt=s(Ppe);Nir=r(gmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gmt.forEach(t),qir=i(Zl),Sc=n(Zl,"P",{});var BW=s(Sc);Oir=r(BW,`Note:
Loading a model from its configuration file does `),$pe=n(BW,"STRONG",{});var hmt=s($pe);Gir=r(hmt,"not"),hmt.forEach(t),Xir=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ipe=n(BW,"CODE",{});var pmt=s(Ipe);Vir=r(pmt,"from_pretrained()"),pmt.forEach(t),zir=r(BW,"to load the model weights."),BW.forEach(t),Wir=i(Zl),jpe=n(Zl,"P",{});var _mt=s(jpe);Qir=r(_mt,"Examples:"),_mt.forEach(t),Hir=i(Zl),m(vA.$$.fragment,Zl),Zl.forEach(t),Uir=i(Kl),To=n(Kl,"DIV",{class:!0});var Ta=s(To);m(TA.$$.fragment,Ta),Jir=i(Ta),Dpe=n(Ta,"P",{});var umt=s(Dpe);Yir=r(umt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),umt.forEach(t),Kir=i(Ta),Fn=n(Ta,"P",{});var yE=s(Fn);Zir=r(yE,"The model class to instantiate is selected based on the "),Npe=n(yE,"CODE",{});var bmt=s(Npe);edr=r(bmt,"model_type"),bmt.forEach(t),odr=r(yE,` property of the config object (either
passed as an argument or loaded from `),qpe=n(yE,"CODE",{});var vmt=s(qpe);rdr=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),tdr=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(yE,"CODE",{});var Tmt=s(Ope);adr=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),ndr=r(yE,":"),yE.forEach(t),sdr=i(Ta),V=n(Ta,"UL",{});var W=s(V);n9=n(W,"LI",{});var kLe=s(n9);Gpe=n(kLe,"STRONG",{});var Fmt=s(Gpe);ldr=r(Fmt,"albert"),Fmt.forEach(t),idr=r(kLe," \u2014 "),KO=n(kLe,"A",{href:!0});var Cmt=s(KO);ddr=r(Cmt,"TFAlbertForSequenceClassification"),Cmt.forEach(t),cdr=r(kLe," (ALBERT model)"),kLe.forEach(t),fdr=i(W),s9=n(W,"LI",{});var RLe=s(s9);Xpe=n(RLe,"STRONG",{});var Mmt=s(Xpe);mdr=r(Mmt,"bert"),Mmt.forEach(t),gdr=r(RLe," \u2014 "),ZO=n(RLe,"A",{href:!0});var Emt=s(ZO);hdr=r(Emt,"TFBertForSequenceClassification"),Emt.forEach(t),pdr=r(RLe," (BERT model)"),RLe.forEach(t),_dr=i(W),l9=n(W,"LI",{});var SLe=s(l9);Vpe=n(SLe,"STRONG",{});var ymt=s(Vpe);udr=r(ymt,"camembert"),ymt.forEach(t),bdr=r(SLe," \u2014 "),eG=n(SLe,"A",{href:!0});var wmt=s(eG);vdr=r(wmt,"TFCamembertForSequenceClassification"),wmt.forEach(t),Tdr=r(SLe," (CamemBERT model)"),SLe.forEach(t),Fdr=i(W),i9=n(W,"LI",{});var PLe=s(i9);zpe=n(PLe,"STRONG",{});var Amt=s(zpe);Cdr=r(Amt,"convbert"),Amt.forEach(t),Mdr=r(PLe," \u2014 "),oG=n(PLe,"A",{href:!0});var Lmt=s(oG);Edr=r(Lmt,"TFConvBertForSequenceClassification"),Lmt.forEach(t),ydr=r(PLe," (ConvBERT model)"),PLe.forEach(t),wdr=i(W),d9=n(W,"LI",{});var $Le=s(d9);Wpe=n($Le,"STRONG",{});var Bmt=s(Wpe);Adr=r(Bmt,"ctrl"),Bmt.forEach(t),Ldr=r($Le," \u2014 "),rG=n($Le,"A",{href:!0});var xmt=s(rG);Bdr=r(xmt,"TFCTRLForSequenceClassification"),xmt.forEach(t),xdr=r($Le," (CTRL model)"),$Le.forEach(t),kdr=i(W),c9=n(W,"LI",{});var ILe=s(c9);Qpe=n(ILe,"STRONG",{});var kmt=s(Qpe);Rdr=r(kmt,"deberta"),kmt.forEach(t),Sdr=r(ILe," \u2014 "),tG=n(ILe,"A",{href:!0});var Rmt=s(tG);Pdr=r(Rmt,"TFDebertaForSequenceClassification"),Rmt.forEach(t),$dr=r(ILe," (DeBERTa model)"),ILe.forEach(t),Idr=i(W),f9=n(W,"LI",{});var jLe=s(f9);Hpe=n(jLe,"STRONG",{});var Smt=s(Hpe);jdr=r(Smt,"deberta-v2"),Smt.forEach(t),Ddr=r(jLe," \u2014 "),aG=n(jLe,"A",{href:!0});var Pmt=s(aG);Ndr=r(Pmt,"TFDebertaV2ForSequenceClassification"),Pmt.forEach(t),qdr=r(jLe," (DeBERTa-v2 model)"),jLe.forEach(t),Odr=i(W),m9=n(W,"LI",{});var DLe=s(m9);Upe=n(DLe,"STRONG",{});var $mt=s(Upe);Gdr=r($mt,"distilbert"),$mt.forEach(t),Xdr=r(DLe," \u2014 "),nG=n(DLe,"A",{href:!0});var Imt=s(nG);Vdr=r(Imt,"TFDistilBertForSequenceClassification"),Imt.forEach(t),zdr=r(DLe," (DistilBERT model)"),DLe.forEach(t),Wdr=i(W),g9=n(W,"LI",{});var NLe=s(g9);Jpe=n(NLe,"STRONG",{});var jmt=s(Jpe);Qdr=r(jmt,"electra"),jmt.forEach(t),Hdr=r(NLe," \u2014 "),sG=n(NLe,"A",{href:!0});var Dmt=s(sG);Udr=r(Dmt,"TFElectraForSequenceClassification"),Dmt.forEach(t),Jdr=r(NLe," (ELECTRA model)"),NLe.forEach(t),Ydr=i(W),h9=n(W,"LI",{});var qLe=s(h9);Ype=n(qLe,"STRONG",{});var Nmt=s(Ype);Kdr=r(Nmt,"flaubert"),Nmt.forEach(t),Zdr=r(qLe," \u2014 "),lG=n(qLe,"A",{href:!0});var qmt=s(lG);ecr=r(qmt,"TFFlaubertForSequenceClassification"),qmt.forEach(t),ocr=r(qLe," (FlauBERT model)"),qLe.forEach(t),rcr=i(W),p9=n(W,"LI",{});var OLe=s(p9);Kpe=n(OLe,"STRONG",{});var Omt=s(Kpe);tcr=r(Omt,"funnel"),Omt.forEach(t),acr=r(OLe," \u2014 "),iG=n(OLe,"A",{href:!0});var Gmt=s(iG);ncr=r(Gmt,"TFFunnelForSequenceClassification"),Gmt.forEach(t),scr=r(OLe," (Funnel Transformer model)"),OLe.forEach(t),lcr=i(W),_9=n(W,"LI",{});var GLe=s(_9);Zpe=n(GLe,"STRONG",{});var Xmt=s(Zpe);icr=r(Xmt,"gpt2"),Xmt.forEach(t),dcr=r(GLe," \u2014 "),dG=n(GLe,"A",{href:!0});var Vmt=s(dG);ccr=r(Vmt,"TFGPT2ForSequenceClassification"),Vmt.forEach(t),fcr=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),mcr=i(W),u9=n(W,"LI",{});var XLe=s(u9);e_e=n(XLe,"STRONG",{});var zmt=s(e_e);gcr=r(zmt,"layoutlm"),zmt.forEach(t),hcr=r(XLe," \u2014 "),cG=n(XLe,"A",{href:!0});var Wmt=s(cG);pcr=r(Wmt,"TFLayoutLMForSequenceClassification"),Wmt.forEach(t),_cr=r(XLe," (LayoutLM model)"),XLe.forEach(t),ucr=i(W),b9=n(W,"LI",{});var VLe=s(b9);o_e=n(VLe,"STRONG",{});var Qmt=s(o_e);bcr=r(Qmt,"longformer"),Qmt.forEach(t),vcr=r(VLe," \u2014 "),fG=n(VLe,"A",{href:!0});var Hmt=s(fG);Tcr=r(Hmt,"TFLongformerForSequenceClassification"),Hmt.forEach(t),Fcr=r(VLe," (Longformer model)"),VLe.forEach(t),Ccr=i(W),v9=n(W,"LI",{});var zLe=s(v9);r_e=n(zLe,"STRONG",{});var Umt=s(r_e);Mcr=r(Umt,"mobilebert"),Umt.forEach(t),Ecr=r(zLe," \u2014 "),mG=n(zLe,"A",{href:!0});var Jmt=s(mG);ycr=r(Jmt,"TFMobileBertForSequenceClassification"),Jmt.forEach(t),wcr=r(zLe," (MobileBERT model)"),zLe.forEach(t),Acr=i(W),T9=n(W,"LI",{});var WLe=s(T9);t_e=n(WLe,"STRONG",{});var Ymt=s(t_e);Lcr=r(Ymt,"mpnet"),Ymt.forEach(t),Bcr=r(WLe," \u2014 "),gG=n(WLe,"A",{href:!0});var Kmt=s(gG);xcr=r(Kmt,"TFMPNetForSequenceClassification"),Kmt.forEach(t),kcr=r(WLe," (MPNet model)"),WLe.forEach(t),Rcr=i(W),F9=n(W,"LI",{});var QLe=s(F9);a_e=n(QLe,"STRONG",{});var Zmt=s(a_e);Scr=r(Zmt,"openai-gpt"),Zmt.forEach(t),Pcr=r(QLe," \u2014 "),hG=n(QLe,"A",{href:!0});var egt=s(hG);$cr=r(egt,"TFOpenAIGPTForSequenceClassification"),egt.forEach(t),Icr=r(QLe," (OpenAI GPT model)"),QLe.forEach(t),jcr=i(W),C9=n(W,"LI",{});var HLe=s(C9);n_e=n(HLe,"STRONG",{});var ogt=s(n_e);Dcr=r(ogt,"rembert"),ogt.forEach(t),Ncr=r(HLe," \u2014 "),pG=n(HLe,"A",{href:!0});var rgt=s(pG);qcr=r(rgt,"TFRemBertForSequenceClassification"),rgt.forEach(t),Ocr=r(HLe," (RemBERT model)"),HLe.forEach(t),Gcr=i(W),M9=n(W,"LI",{});var ULe=s(M9);s_e=n(ULe,"STRONG",{});var tgt=s(s_e);Xcr=r(tgt,"roberta"),tgt.forEach(t),Vcr=r(ULe," \u2014 "),_G=n(ULe,"A",{href:!0});var agt=s(_G);zcr=r(agt,"TFRobertaForSequenceClassification"),agt.forEach(t),Wcr=r(ULe," (RoBERTa model)"),ULe.forEach(t),Qcr=i(W),E9=n(W,"LI",{});var JLe=s(E9);l_e=n(JLe,"STRONG",{});var ngt=s(l_e);Hcr=r(ngt,"roformer"),ngt.forEach(t),Ucr=r(JLe," \u2014 "),uG=n(JLe,"A",{href:!0});var sgt=s(uG);Jcr=r(sgt,"TFRoFormerForSequenceClassification"),sgt.forEach(t),Ycr=r(JLe," (RoFormer model)"),JLe.forEach(t),Kcr=i(W),y9=n(W,"LI",{});var YLe=s(y9);i_e=n(YLe,"STRONG",{});var lgt=s(i_e);Zcr=r(lgt,"tapas"),lgt.forEach(t),efr=r(YLe," \u2014 "),bG=n(YLe,"A",{href:!0});var igt=s(bG);ofr=r(igt,"TFTapasForSequenceClassification"),igt.forEach(t),rfr=r(YLe," (TAPAS model)"),YLe.forEach(t),tfr=i(W),w9=n(W,"LI",{});var KLe=s(w9);d_e=n(KLe,"STRONG",{});var dgt=s(d_e);afr=r(dgt,"transfo-xl"),dgt.forEach(t),nfr=r(KLe," \u2014 "),vG=n(KLe,"A",{href:!0});var cgt=s(vG);sfr=r(cgt,"TFTransfoXLForSequenceClassification"),cgt.forEach(t),lfr=r(KLe," (Transformer-XL model)"),KLe.forEach(t),ifr=i(W),A9=n(W,"LI",{});var ZLe=s(A9);c_e=n(ZLe,"STRONG",{});var fgt=s(c_e);dfr=r(fgt,"xlm"),fgt.forEach(t),cfr=r(ZLe," \u2014 "),TG=n(ZLe,"A",{href:!0});var mgt=s(TG);ffr=r(mgt,"TFXLMForSequenceClassification"),mgt.forEach(t),mfr=r(ZLe," (XLM model)"),ZLe.forEach(t),gfr=i(W),L9=n(W,"LI",{});var e8e=s(L9);f_e=n(e8e,"STRONG",{});var ggt=s(f_e);hfr=r(ggt,"xlm-roberta"),ggt.forEach(t),pfr=r(e8e," \u2014 "),FG=n(e8e,"A",{href:!0});var hgt=s(FG);_fr=r(hgt,"TFXLMRobertaForSequenceClassification"),hgt.forEach(t),ufr=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),bfr=i(W),B9=n(W,"LI",{});var o8e=s(B9);m_e=n(o8e,"STRONG",{});var pgt=s(m_e);vfr=r(pgt,"xlnet"),pgt.forEach(t),Tfr=r(o8e," \u2014 "),CG=n(o8e,"A",{href:!0});var _gt=s(CG);Ffr=r(_gt,"TFXLNetForSequenceClassification"),_gt.forEach(t),Cfr=r(o8e," (XLNet model)"),o8e.forEach(t),W.forEach(t),Mfr=i(Ta),g_e=n(Ta,"P",{});var ugt=s(g_e);Efr=r(ugt,"Examples:"),ugt.forEach(t),yfr=i(Ta),m(FA.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),bke=i(d),Pc=n(d,"H2",{class:!0});var xSe=s(Pc);x9=n(xSe,"A",{id:!0,class:!0,href:!0});var bgt=s(x9);h_e=n(bgt,"SPAN",{});var vgt=s(h_e);m(CA.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),wfr=i(xSe),p_e=n(xSe,"SPAN",{});var Tgt=s(p_e);Afr=r(Tgt,"TFAutoModelForMultipleChoice"),Tgt.forEach(t),xSe.forEach(t),vke=i(d),wr=n(d,"DIV",{class:!0});var ei=s(wr);m(MA.$$.fragment,ei),Lfr=i(ei),$c=n(ei,"P",{});var xW=s($c);Bfr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),__e=n(xW,"CODE",{});var Fgt=s(__e);xfr=r(Fgt,"from_pretrained()"),Fgt.forEach(t),kfr=r(xW,"class method or the "),u_e=n(xW,"CODE",{});var Cgt=s(u_e);Rfr=r(Cgt,"from_config()"),Cgt.forEach(t),Sfr=r(xW,`class
method.`),xW.forEach(t),Pfr=i(ei),EA=n(ei,"P",{});var kSe=s(EA);$fr=r(kSe,"This class cannot be instantiated directly using "),b_e=n(kSe,"CODE",{});var Mgt=s(b_e);Ifr=r(Mgt,"__init__()"),Mgt.forEach(t),jfr=r(kSe," (throws an error)."),kSe.forEach(t),Dfr=i(ei),Tt=n(ei,"DIV",{class:!0});var oi=s(Tt);m(yA.$$.fragment,oi),Nfr=i(oi),v_e=n(oi,"P",{});var Egt=s(v_e);qfr=r(Egt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Egt.forEach(t),Ofr=i(oi),Ic=n(oi,"P",{});var kW=s(Ic);Gfr=r(kW,`Note:
Loading a model from its configuration file does `),T_e=n(kW,"STRONG",{});var ygt=s(T_e);Xfr=r(ygt,"not"),ygt.forEach(t),Vfr=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),F_e=n(kW,"CODE",{});var wgt=s(F_e);zfr=r(wgt,"from_pretrained()"),wgt.forEach(t),Wfr=r(kW,"to load the model weights."),kW.forEach(t),Qfr=i(oi),C_e=n(oi,"P",{});var Agt=s(C_e);Hfr=r(Agt,"Examples:"),Agt.forEach(t),Ufr=i(oi),m(wA.$$.fragment,oi),oi.forEach(t),Jfr=i(ei),Fo=n(ei,"DIV",{class:!0});var Fa=s(Fo);m(AA.$$.fragment,Fa),Yfr=i(Fa),M_e=n(Fa,"P",{});var Lgt=s(M_e);Kfr=r(Lgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lgt.forEach(t),Zfr=i(Fa),Cn=n(Fa,"P",{});var wE=s(Cn);emr=r(wE,"The model class to instantiate is selected based on the "),E_e=n(wE,"CODE",{});var Bgt=s(E_e);omr=r(Bgt,"model_type"),Bgt.forEach(t),rmr=r(wE,` property of the config object (either
passed as an argument or loaded from `),y_e=n(wE,"CODE",{});var xgt=s(y_e);tmr=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),amr=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(wE,"CODE",{});var kgt=s(w_e);nmr=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),smr=r(wE,":"),wE.forEach(t),lmr=i(Fa),te=n(Fa,"UL",{});var se=s(te);k9=n(se,"LI",{});var r8e=s(k9);A_e=n(r8e,"STRONG",{});var Rgt=s(A_e);imr=r(Rgt,"albert"),Rgt.forEach(t),dmr=r(r8e," \u2014 "),MG=n(r8e,"A",{href:!0});var Sgt=s(MG);cmr=r(Sgt,"TFAlbertForMultipleChoice"),Sgt.forEach(t),fmr=r(r8e," (ALBERT model)"),r8e.forEach(t),mmr=i(se),R9=n(se,"LI",{});var t8e=s(R9);L_e=n(t8e,"STRONG",{});var Pgt=s(L_e);gmr=r(Pgt,"bert"),Pgt.forEach(t),hmr=r(t8e," \u2014 "),EG=n(t8e,"A",{href:!0});var $gt=s(EG);pmr=r($gt,"TFBertForMultipleChoice"),$gt.forEach(t),_mr=r(t8e," (BERT model)"),t8e.forEach(t),umr=i(se),S9=n(se,"LI",{});var a8e=s(S9);B_e=n(a8e,"STRONG",{});var Igt=s(B_e);bmr=r(Igt,"camembert"),Igt.forEach(t),vmr=r(a8e," \u2014 "),yG=n(a8e,"A",{href:!0});var jgt=s(yG);Tmr=r(jgt,"TFCamembertForMultipleChoice"),jgt.forEach(t),Fmr=r(a8e," (CamemBERT model)"),a8e.forEach(t),Cmr=i(se),P9=n(se,"LI",{});var n8e=s(P9);x_e=n(n8e,"STRONG",{});var Dgt=s(x_e);Mmr=r(Dgt,"convbert"),Dgt.forEach(t),Emr=r(n8e," \u2014 "),wG=n(n8e,"A",{href:!0});var Ngt=s(wG);ymr=r(Ngt,"TFConvBertForMultipleChoice"),Ngt.forEach(t),wmr=r(n8e," (ConvBERT model)"),n8e.forEach(t),Amr=i(se),$9=n(se,"LI",{});var s8e=s($9);k_e=n(s8e,"STRONG",{});var qgt=s(k_e);Lmr=r(qgt,"distilbert"),qgt.forEach(t),Bmr=r(s8e," \u2014 "),AG=n(s8e,"A",{href:!0});var Ogt=s(AG);xmr=r(Ogt,"TFDistilBertForMultipleChoice"),Ogt.forEach(t),kmr=r(s8e," (DistilBERT model)"),s8e.forEach(t),Rmr=i(se),I9=n(se,"LI",{});var l8e=s(I9);R_e=n(l8e,"STRONG",{});var Ggt=s(R_e);Smr=r(Ggt,"electra"),Ggt.forEach(t),Pmr=r(l8e," \u2014 "),LG=n(l8e,"A",{href:!0});var Xgt=s(LG);$mr=r(Xgt,"TFElectraForMultipleChoice"),Xgt.forEach(t),Imr=r(l8e," (ELECTRA model)"),l8e.forEach(t),jmr=i(se),j9=n(se,"LI",{});var i8e=s(j9);S_e=n(i8e,"STRONG",{});var Vgt=s(S_e);Dmr=r(Vgt,"flaubert"),Vgt.forEach(t),Nmr=r(i8e," \u2014 "),BG=n(i8e,"A",{href:!0});var zgt=s(BG);qmr=r(zgt,"TFFlaubertForMultipleChoice"),zgt.forEach(t),Omr=r(i8e," (FlauBERT model)"),i8e.forEach(t),Gmr=i(se),D9=n(se,"LI",{});var d8e=s(D9);P_e=n(d8e,"STRONG",{});var Wgt=s(P_e);Xmr=r(Wgt,"funnel"),Wgt.forEach(t),Vmr=r(d8e," \u2014 "),xG=n(d8e,"A",{href:!0});var Qgt=s(xG);zmr=r(Qgt,"TFFunnelForMultipleChoice"),Qgt.forEach(t),Wmr=r(d8e," (Funnel Transformer model)"),d8e.forEach(t),Qmr=i(se),N9=n(se,"LI",{});var c8e=s(N9);$_e=n(c8e,"STRONG",{});var Hgt=s($_e);Hmr=r(Hgt,"longformer"),Hgt.forEach(t),Umr=r(c8e," \u2014 "),kG=n(c8e,"A",{href:!0});var Ugt=s(kG);Jmr=r(Ugt,"TFLongformerForMultipleChoice"),Ugt.forEach(t),Ymr=r(c8e," (Longformer model)"),c8e.forEach(t),Kmr=i(se),q9=n(se,"LI",{});var f8e=s(q9);I_e=n(f8e,"STRONG",{});var Jgt=s(I_e);Zmr=r(Jgt,"mobilebert"),Jgt.forEach(t),egr=r(f8e," \u2014 "),RG=n(f8e,"A",{href:!0});var Ygt=s(RG);ogr=r(Ygt,"TFMobileBertForMultipleChoice"),Ygt.forEach(t),rgr=r(f8e," (MobileBERT model)"),f8e.forEach(t),tgr=i(se),O9=n(se,"LI",{});var m8e=s(O9);j_e=n(m8e,"STRONG",{});var Kgt=s(j_e);agr=r(Kgt,"mpnet"),Kgt.forEach(t),ngr=r(m8e," \u2014 "),SG=n(m8e,"A",{href:!0});var Zgt=s(SG);sgr=r(Zgt,"TFMPNetForMultipleChoice"),Zgt.forEach(t),lgr=r(m8e," (MPNet model)"),m8e.forEach(t),igr=i(se),G9=n(se,"LI",{});var g8e=s(G9);D_e=n(g8e,"STRONG",{});var eht=s(D_e);dgr=r(eht,"rembert"),eht.forEach(t),cgr=r(g8e," \u2014 "),PG=n(g8e,"A",{href:!0});var oht=s(PG);fgr=r(oht,"TFRemBertForMultipleChoice"),oht.forEach(t),mgr=r(g8e," (RemBERT model)"),g8e.forEach(t),ggr=i(se),X9=n(se,"LI",{});var h8e=s(X9);N_e=n(h8e,"STRONG",{});var rht=s(N_e);hgr=r(rht,"roberta"),rht.forEach(t),pgr=r(h8e," \u2014 "),$G=n(h8e,"A",{href:!0});var tht=s($G);_gr=r(tht,"TFRobertaForMultipleChoice"),tht.forEach(t),ugr=r(h8e," (RoBERTa model)"),h8e.forEach(t),bgr=i(se),V9=n(se,"LI",{});var p8e=s(V9);q_e=n(p8e,"STRONG",{});var aht=s(q_e);vgr=r(aht,"roformer"),aht.forEach(t),Tgr=r(p8e," \u2014 "),IG=n(p8e,"A",{href:!0});var nht=s(IG);Fgr=r(nht,"TFRoFormerForMultipleChoice"),nht.forEach(t),Cgr=r(p8e," (RoFormer model)"),p8e.forEach(t),Mgr=i(se),z9=n(se,"LI",{});var _8e=s(z9);O_e=n(_8e,"STRONG",{});var sht=s(O_e);Egr=r(sht,"xlm"),sht.forEach(t),ygr=r(_8e," \u2014 "),jG=n(_8e,"A",{href:!0});var lht=s(jG);wgr=r(lht,"TFXLMForMultipleChoice"),lht.forEach(t),Agr=r(_8e," (XLM model)"),_8e.forEach(t),Lgr=i(se),W9=n(se,"LI",{});var u8e=s(W9);G_e=n(u8e,"STRONG",{});var iht=s(G_e);Bgr=r(iht,"xlm-roberta"),iht.forEach(t),xgr=r(u8e," \u2014 "),DG=n(u8e,"A",{href:!0});var dht=s(DG);kgr=r(dht,"TFXLMRobertaForMultipleChoice"),dht.forEach(t),Rgr=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),Sgr=i(se),Q9=n(se,"LI",{});var b8e=s(Q9);X_e=n(b8e,"STRONG",{});var cht=s(X_e);Pgr=r(cht,"xlnet"),cht.forEach(t),$gr=r(b8e," \u2014 "),NG=n(b8e,"A",{href:!0});var fht=s(NG);Igr=r(fht,"TFXLNetForMultipleChoice"),fht.forEach(t),jgr=r(b8e," (XLNet model)"),b8e.forEach(t),se.forEach(t),Dgr=i(Fa),V_e=n(Fa,"P",{});var mht=s(V_e);Ngr=r(mht,"Examples:"),mht.forEach(t),qgr=i(Fa),m(LA.$$.fragment,Fa),Fa.forEach(t),ei.forEach(t),Tke=i(d),jc=n(d,"H2",{class:!0});var RSe=s(jc);H9=n(RSe,"A",{id:!0,class:!0,href:!0});var ght=s(H9);z_e=n(ght,"SPAN",{});var hht=s(z_e);m(BA.$$.fragment,hht),hht.forEach(t),ght.forEach(t),Ogr=i(RSe),W_e=n(RSe,"SPAN",{});var pht=s(W_e);Ggr=r(pht,"TFAutoModelForTableQuestionAnswering"),pht.forEach(t),RSe.forEach(t),Fke=i(d),Ar=n(d,"DIV",{class:!0});var ri=s(Ar);m(xA.$$.fragment,ri),Xgr=i(ri),Dc=n(ri,"P",{});var RW=s(Dc);Vgr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Q_e=n(RW,"CODE",{});var _ht=s(Q_e);zgr=r(_ht,"from_pretrained()"),_ht.forEach(t),Wgr=r(RW,"class method or the "),H_e=n(RW,"CODE",{});var uht=s(H_e);Qgr=r(uht,"from_config()"),uht.forEach(t),Hgr=r(RW,`class
method.`),RW.forEach(t),Ugr=i(ri),kA=n(ri,"P",{});var SSe=s(kA);Jgr=r(SSe,"This class cannot be instantiated directly using "),U_e=n(SSe,"CODE",{});var bht=s(U_e);Ygr=r(bht,"__init__()"),bht.forEach(t),Kgr=r(SSe," (throws an error)."),SSe.forEach(t),Zgr=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);m(RA.$$.fragment,ti),ehr=i(ti),J_e=n(ti,"P",{});var vht=s(J_e);ohr=r(vht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vht.forEach(t),rhr=i(ti),Nc=n(ti,"P",{});var SW=s(Nc);thr=r(SW,`Note:
Loading a model from its configuration file does `),Y_e=n(SW,"STRONG",{});var Tht=s(Y_e);ahr=r(Tht,"not"),Tht.forEach(t),nhr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=n(SW,"CODE",{});var Fht=s(K_e);shr=r(Fht,"from_pretrained()"),Fht.forEach(t),lhr=r(SW,"to load the model weights."),SW.forEach(t),ihr=i(ti),Z_e=n(ti,"P",{});var Cht=s(Z_e);dhr=r(Cht,"Examples:"),Cht.forEach(t),chr=i(ti),m(SA.$$.fragment,ti),ti.forEach(t),fhr=i(ri),Co=n(ri,"DIV",{class:!0});var Ca=s(Co);m(PA.$$.fragment,Ca),mhr=i(Ca),eue=n(Ca,"P",{});var Mht=s(eue);ghr=r(Mht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mht.forEach(t),hhr=i(Ca),Mn=n(Ca,"P",{});var AE=s(Mn);phr=r(AE,"The model class to instantiate is selected based on the "),oue=n(AE,"CODE",{});var Eht=s(oue);_hr=r(Eht,"model_type"),Eht.forEach(t),uhr=r(AE,` property of the config object (either
passed as an argument or loaded from `),rue=n(AE,"CODE",{});var yht=s(rue);bhr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),vhr=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(AE,"CODE",{});var wht=s(tue);Thr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),Fhr=r(AE,":"),AE.forEach(t),Chr=i(Ca),aue=n(Ca,"UL",{});var Aht=s(aue);U9=n(Aht,"LI",{});var v8e=s(U9);nue=n(v8e,"STRONG",{});var Lht=s(nue);Mhr=r(Lht,"tapas"),Lht.forEach(t),Ehr=r(v8e," \u2014 "),qG=n(v8e,"A",{href:!0});var Bht=s(qG);yhr=r(Bht,"TFTapasForQuestionAnswering"),Bht.forEach(t),whr=r(v8e," (TAPAS model)"),v8e.forEach(t),Aht.forEach(t),Ahr=i(Ca),sue=n(Ca,"P",{});var xht=s(sue);Lhr=r(xht,"Examples:"),xht.forEach(t),Bhr=i(Ca),m($A.$$.fragment,Ca),Ca.forEach(t),ri.forEach(t),Cke=i(d),qc=n(d,"H2",{class:!0});var PSe=s(qc);J9=n(PSe,"A",{id:!0,class:!0,href:!0});var kht=s(J9);lue=n(kht,"SPAN",{});var Rht=s(lue);m(IA.$$.fragment,Rht),Rht.forEach(t),kht.forEach(t),xhr=i(PSe),iue=n(PSe,"SPAN",{});var Sht=s(iue);khr=r(Sht,"TFAutoModelForTokenClassification"),Sht.forEach(t),PSe.forEach(t),Mke=i(d),Lr=n(d,"DIV",{class:!0});var ai=s(Lr);m(jA.$$.fragment,ai),Rhr=i(ai),Oc=n(ai,"P",{});var PW=s(Oc);Shr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),due=n(PW,"CODE",{});var Pht=s(due);Phr=r(Pht,"from_pretrained()"),Pht.forEach(t),$hr=r(PW,"class method or the "),cue=n(PW,"CODE",{});var $ht=s(cue);Ihr=r($ht,"from_config()"),$ht.forEach(t),jhr=r(PW,`class
method.`),PW.forEach(t),Dhr=i(ai),DA=n(ai,"P",{});var $Se=s(DA);Nhr=r($Se,"This class cannot be instantiated directly using "),fue=n($Se,"CODE",{});var Iht=s(fue);qhr=r(Iht,"__init__()"),Iht.forEach(t),Ohr=r($Se," (throws an error)."),$Se.forEach(t),Ghr=i(ai),Ct=n(ai,"DIV",{class:!0});var ni=s(Ct);m(NA.$$.fragment,ni),Xhr=i(ni),mue=n(ni,"P",{});var jht=s(mue);Vhr=r(jht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jht.forEach(t),zhr=i(ni),Gc=n(ni,"P",{});var $W=s(Gc);Whr=r($W,`Note:
Loading a model from its configuration file does `),gue=n($W,"STRONG",{});var Dht=s(gue);Qhr=r(Dht,"not"),Dht.forEach(t),Hhr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),hue=n($W,"CODE",{});var Nht=s(hue);Uhr=r(Nht,"from_pretrained()"),Nht.forEach(t),Jhr=r($W,"to load the model weights."),$W.forEach(t),Yhr=i(ni),pue=n(ni,"P",{});var qht=s(pue);Khr=r(qht,"Examples:"),qht.forEach(t),Zhr=i(ni),m(qA.$$.fragment,ni),ni.forEach(t),epr=i(ai),Mo=n(ai,"DIV",{class:!0});var Ma=s(Mo);m(OA.$$.fragment,Ma),opr=i(Ma),_ue=n(Ma,"P",{});var Oht=s(_ue);rpr=r(Oht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oht.forEach(t),tpr=i(Ma),En=n(Ma,"P",{});var LE=s(En);apr=r(LE,"The model class to instantiate is selected based on the "),uue=n(LE,"CODE",{});var Ght=s(uue);npr=r(Ght,"model_type"),Ght.forEach(t),spr=r(LE,` property of the config object (either
passed as an argument or loaded from `),bue=n(LE,"CODE",{});var Xht=s(bue);lpr=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),ipr=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(LE,"CODE",{});var Vht=s(vue);dpr=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),cpr=r(LE,":"),LE.forEach(t),fpr=i(Ma),K=n(Ma,"UL",{});var oe=s(K);Y9=n(oe,"LI",{});var T8e=s(Y9);Tue=n(T8e,"STRONG",{});var zht=s(Tue);mpr=r(zht,"albert"),zht.forEach(t),gpr=r(T8e," \u2014 "),OG=n(T8e,"A",{href:!0});var Wht=s(OG);hpr=r(Wht,"TFAlbertForTokenClassification"),Wht.forEach(t),ppr=r(T8e," (ALBERT model)"),T8e.forEach(t),_pr=i(oe),K9=n(oe,"LI",{});var F8e=s(K9);Fue=n(F8e,"STRONG",{});var Qht=s(Fue);upr=r(Qht,"bert"),Qht.forEach(t),bpr=r(F8e," \u2014 "),GG=n(F8e,"A",{href:!0});var Hht=s(GG);vpr=r(Hht,"TFBertForTokenClassification"),Hht.forEach(t),Tpr=r(F8e," (BERT model)"),F8e.forEach(t),Fpr=i(oe),Z9=n(oe,"LI",{});var C8e=s(Z9);Cue=n(C8e,"STRONG",{});var Uht=s(Cue);Cpr=r(Uht,"camembert"),Uht.forEach(t),Mpr=r(C8e," \u2014 "),XG=n(C8e,"A",{href:!0});var Jht=s(XG);Epr=r(Jht,"TFCamembertForTokenClassification"),Jht.forEach(t),ypr=r(C8e," (CamemBERT model)"),C8e.forEach(t),wpr=i(oe),eC=n(oe,"LI",{});var M8e=s(eC);Mue=n(M8e,"STRONG",{});var Yht=s(Mue);Apr=r(Yht,"convbert"),Yht.forEach(t),Lpr=r(M8e," \u2014 "),VG=n(M8e,"A",{href:!0});var Kht=s(VG);Bpr=r(Kht,"TFConvBertForTokenClassification"),Kht.forEach(t),xpr=r(M8e," (ConvBERT model)"),M8e.forEach(t),kpr=i(oe),oC=n(oe,"LI",{});var E8e=s(oC);Eue=n(E8e,"STRONG",{});var Zht=s(Eue);Rpr=r(Zht,"deberta"),Zht.forEach(t),Spr=r(E8e," \u2014 "),zG=n(E8e,"A",{href:!0});var ept=s(zG);Ppr=r(ept,"TFDebertaForTokenClassification"),ept.forEach(t),$pr=r(E8e," (DeBERTa model)"),E8e.forEach(t),Ipr=i(oe),rC=n(oe,"LI",{});var y8e=s(rC);yue=n(y8e,"STRONG",{});var opt=s(yue);jpr=r(opt,"deberta-v2"),opt.forEach(t),Dpr=r(y8e," \u2014 "),WG=n(y8e,"A",{href:!0});var rpt=s(WG);Npr=r(rpt,"TFDebertaV2ForTokenClassification"),rpt.forEach(t),qpr=r(y8e," (DeBERTa-v2 model)"),y8e.forEach(t),Opr=i(oe),tC=n(oe,"LI",{});var w8e=s(tC);wue=n(w8e,"STRONG",{});var tpt=s(wue);Gpr=r(tpt,"distilbert"),tpt.forEach(t),Xpr=r(w8e," \u2014 "),QG=n(w8e,"A",{href:!0});var apt=s(QG);Vpr=r(apt,"TFDistilBertForTokenClassification"),apt.forEach(t),zpr=r(w8e," (DistilBERT model)"),w8e.forEach(t),Wpr=i(oe),aC=n(oe,"LI",{});var A8e=s(aC);Aue=n(A8e,"STRONG",{});var npt=s(Aue);Qpr=r(npt,"electra"),npt.forEach(t),Hpr=r(A8e," \u2014 "),HG=n(A8e,"A",{href:!0});var spt=s(HG);Upr=r(spt,"TFElectraForTokenClassification"),spt.forEach(t),Jpr=r(A8e," (ELECTRA model)"),A8e.forEach(t),Ypr=i(oe),nC=n(oe,"LI",{});var L8e=s(nC);Lue=n(L8e,"STRONG",{});var lpt=s(Lue);Kpr=r(lpt,"flaubert"),lpt.forEach(t),Zpr=r(L8e," \u2014 "),UG=n(L8e,"A",{href:!0});var ipt=s(UG);e_r=r(ipt,"TFFlaubertForTokenClassification"),ipt.forEach(t),o_r=r(L8e," (FlauBERT model)"),L8e.forEach(t),r_r=i(oe),sC=n(oe,"LI",{});var B8e=s(sC);Bue=n(B8e,"STRONG",{});var dpt=s(Bue);t_r=r(dpt,"funnel"),dpt.forEach(t),a_r=r(B8e," \u2014 "),JG=n(B8e,"A",{href:!0});var cpt=s(JG);n_r=r(cpt,"TFFunnelForTokenClassification"),cpt.forEach(t),s_r=r(B8e," (Funnel Transformer model)"),B8e.forEach(t),l_r=i(oe),lC=n(oe,"LI",{});var x8e=s(lC);xue=n(x8e,"STRONG",{});var fpt=s(xue);i_r=r(fpt,"layoutlm"),fpt.forEach(t),d_r=r(x8e," \u2014 "),YG=n(x8e,"A",{href:!0});var mpt=s(YG);c_r=r(mpt,"TFLayoutLMForTokenClassification"),mpt.forEach(t),f_r=r(x8e," (LayoutLM model)"),x8e.forEach(t),m_r=i(oe),iC=n(oe,"LI",{});var k8e=s(iC);kue=n(k8e,"STRONG",{});var gpt=s(kue);g_r=r(gpt,"longformer"),gpt.forEach(t),h_r=r(k8e," \u2014 "),KG=n(k8e,"A",{href:!0});var hpt=s(KG);p_r=r(hpt,"TFLongformerForTokenClassification"),hpt.forEach(t),__r=r(k8e," (Longformer model)"),k8e.forEach(t),u_r=i(oe),dC=n(oe,"LI",{});var R8e=s(dC);Rue=n(R8e,"STRONG",{});var ppt=s(Rue);b_r=r(ppt,"mobilebert"),ppt.forEach(t),v_r=r(R8e," \u2014 "),ZG=n(R8e,"A",{href:!0});var _pt=s(ZG);T_r=r(_pt,"TFMobileBertForTokenClassification"),_pt.forEach(t),F_r=r(R8e," (MobileBERT model)"),R8e.forEach(t),C_r=i(oe),cC=n(oe,"LI",{});var S8e=s(cC);Sue=n(S8e,"STRONG",{});var upt=s(Sue);M_r=r(upt,"mpnet"),upt.forEach(t),E_r=r(S8e," \u2014 "),eX=n(S8e,"A",{href:!0});var bpt=s(eX);y_r=r(bpt,"TFMPNetForTokenClassification"),bpt.forEach(t),w_r=r(S8e," (MPNet model)"),S8e.forEach(t),A_r=i(oe),fC=n(oe,"LI",{});var P8e=s(fC);Pue=n(P8e,"STRONG",{});var vpt=s(Pue);L_r=r(vpt,"rembert"),vpt.forEach(t),B_r=r(P8e," \u2014 "),oX=n(P8e,"A",{href:!0});var Tpt=s(oX);x_r=r(Tpt,"TFRemBertForTokenClassification"),Tpt.forEach(t),k_r=r(P8e," (RemBERT model)"),P8e.forEach(t),R_r=i(oe),mC=n(oe,"LI",{});var $8e=s(mC);$ue=n($8e,"STRONG",{});var Fpt=s($ue);S_r=r(Fpt,"roberta"),Fpt.forEach(t),P_r=r($8e," \u2014 "),rX=n($8e,"A",{href:!0});var Cpt=s(rX);$_r=r(Cpt,"TFRobertaForTokenClassification"),Cpt.forEach(t),I_r=r($8e," (RoBERTa model)"),$8e.forEach(t),j_r=i(oe),gC=n(oe,"LI",{});var I8e=s(gC);Iue=n(I8e,"STRONG",{});var Mpt=s(Iue);D_r=r(Mpt,"roformer"),Mpt.forEach(t),N_r=r(I8e," \u2014 "),tX=n(I8e,"A",{href:!0});var Ept=s(tX);q_r=r(Ept,"TFRoFormerForTokenClassification"),Ept.forEach(t),O_r=r(I8e," (RoFormer model)"),I8e.forEach(t),G_r=i(oe),hC=n(oe,"LI",{});var j8e=s(hC);jue=n(j8e,"STRONG",{});var ypt=s(jue);X_r=r(ypt,"xlm"),ypt.forEach(t),V_r=r(j8e," \u2014 "),aX=n(j8e,"A",{href:!0});var wpt=s(aX);z_r=r(wpt,"TFXLMForTokenClassification"),wpt.forEach(t),W_r=r(j8e," (XLM model)"),j8e.forEach(t),Q_r=i(oe),pC=n(oe,"LI",{});var D8e=s(pC);Due=n(D8e,"STRONG",{});var Apt=s(Due);H_r=r(Apt,"xlm-roberta"),Apt.forEach(t),U_r=r(D8e," \u2014 "),nX=n(D8e,"A",{href:!0});var Lpt=s(nX);J_r=r(Lpt,"TFXLMRobertaForTokenClassification"),Lpt.forEach(t),Y_r=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),K_r=i(oe),_C=n(oe,"LI",{});var N8e=s(_C);Nue=n(N8e,"STRONG",{});var Bpt=s(Nue);Z_r=r(Bpt,"xlnet"),Bpt.forEach(t),eur=r(N8e," \u2014 "),sX=n(N8e,"A",{href:!0});var xpt=s(sX);our=r(xpt,"TFXLNetForTokenClassification"),xpt.forEach(t),rur=r(N8e," (XLNet model)"),N8e.forEach(t),oe.forEach(t),tur=i(Ma),que=n(Ma,"P",{});var kpt=s(que);aur=r(kpt,"Examples:"),kpt.forEach(t),nur=i(Ma),m(GA.$$.fragment,Ma),Ma.forEach(t),ai.forEach(t),Eke=i(d),Xc=n(d,"H2",{class:!0});var ISe=s(Xc);uC=n(ISe,"A",{id:!0,class:!0,href:!0});var Rpt=s(uC);Oue=n(Rpt,"SPAN",{});var Spt=s(Oue);m(XA.$$.fragment,Spt),Spt.forEach(t),Rpt.forEach(t),sur=i(ISe),Gue=n(ISe,"SPAN",{});var Ppt=s(Gue);lur=r(Ppt,"TFAutoModelForQuestionAnswering"),Ppt.forEach(t),ISe.forEach(t),yke=i(d),Br=n(d,"DIV",{class:!0});var si=s(Br);m(VA.$$.fragment,si),iur=i(si),Vc=n(si,"P",{});var IW=s(Vc);dur=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xue=n(IW,"CODE",{});var $pt=s(Xue);cur=r($pt,"from_pretrained()"),$pt.forEach(t),fur=r(IW,"class method or the "),Vue=n(IW,"CODE",{});var Ipt=s(Vue);mur=r(Ipt,"from_config()"),Ipt.forEach(t),gur=r(IW,`class
method.`),IW.forEach(t),hur=i(si),zA=n(si,"P",{});var jSe=s(zA);pur=r(jSe,"This class cannot be instantiated directly using "),zue=n(jSe,"CODE",{});var jpt=s(zue);_ur=r(jpt,"__init__()"),jpt.forEach(t),uur=r(jSe," (throws an error)."),jSe.forEach(t),bur=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(WA.$$.fragment,li),vur=i(li),Wue=n(li,"P",{});var Dpt=s(Wue);Tur=r(Dpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dpt.forEach(t),Fur=i(li),zc=n(li,"P",{});var jW=s(zc);Cur=r(jW,`Note:
Loading a model from its configuration file does `),Que=n(jW,"STRONG",{});var Npt=s(Que);Mur=r(Npt,"not"),Npt.forEach(t),Eur=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hue=n(jW,"CODE",{});var qpt=s(Hue);yur=r(qpt,"from_pretrained()"),qpt.forEach(t),wur=r(jW,"to load the model weights."),jW.forEach(t),Aur=i(li),Uue=n(li,"P",{});var Opt=s(Uue);Lur=r(Opt,"Examples:"),Opt.forEach(t),Bur=i(li),m(QA.$$.fragment,li),li.forEach(t),xur=i(si),Eo=n(si,"DIV",{class:!0});var Ea=s(Eo);m(HA.$$.fragment,Ea),kur=i(Ea),Jue=n(Ea,"P",{});var Gpt=s(Jue);Rur=r(Gpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gpt.forEach(t),Sur=i(Ea),yn=n(Ea,"P",{});var BE=s(yn);Pur=r(BE,"The model class to instantiate is selected based on the "),Yue=n(BE,"CODE",{});var Xpt=s(Yue);$ur=r(Xpt,"model_type"),Xpt.forEach(t),Iur=r(BE,` property of the config object (either
passed as an argument or loaded from `),Kue=n(BE,"CODE",{});var Vpt=s(Kue);jur=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),Dur=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zue=n(BE,"CODE",{});var zpt=s(Zue);Nur=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),qur=r(BE,":"),BE.forEach(t),Our=i(Ea),Z=n(Ea,"UL",{});var re=s(Z);bC=n(re,"LI",{});var q8e=s(bC);e5e=n(q8e,"STRONG",{});var Wpt=s(e5e);Gur=r(Wpt,"albert"),Wpt.forEach(t),Xur=r(q8e," \u2014 "),lX=n(q8e,"A",{href:!0});var Qpt=s(lX);Vur=r(Qpt,"TFAlbertForQuestionAnswering"),Qpt.forEach(t),zur=r(q8e," (ALBERT model)"),q8e.forEach(t),Wur=i(re),vC=n(re,"LI",{});var O8e=s(vC);o5e=n(O8e,"STRONG",{});var Hpt=s(o5e);Qur=r(Hpt,"bert"),Hpt.forEach(t),Hur=r(O8e," \u2014 "),iX=n(O8e,"A",{href:!0});var Upt=s(iX);Uur=r(Upt,"TFBertForQuestionAnswering"),Upt.forEach(t),Jur=r(O8e," (BERT model)"),O8e.forEach(t),Yur=i(re),TC=n(re,"LI",{});var G8e=s(TC);r5e=n(G8e,"STRONG",{});var Jpt=s(r5e);Kur=r(Jpt,"camembert"),Jpt.forEach(t),Zur=r(G8e," \u2014 "),dX=n(G8e,"A",{href:!0});var Ypt=s(dX);e5r=r(Ypt,"TFCamembertForQuestionAnswering"),Ypt.forEach(t),o5r=r(G8e," (CamemBERT model)"),G8e.forEach(t),r5r=i(re),FC=n(re,"LI",{});var X8e=s(FC);t5e=n(X8e,"STRONG",{});var Kpt=s(t5e);t5r=r(Kpt,"convbert"),Kpt.forEach(t),a5r=r(X8e," \u2014 "),cX=n(X8e,"A",{href:!0});var Zpt=s(cX);n5r=r(Zpt,"TFConvBertForQuestionAnswering"),Zpt.forEach(t),s5r=r(X8e," (ConvBERT model)"),X8e.forEach(t),l5r=i(re),CC=n(re,"LI",{});var V8e=s(CC);a5e=n(V8e,"STRONG",{});var e_t=s(a5e);i5r=r(e_t,"deberta"),e_t.forEach(t),d5r=r(V8e," \u2014 "),fX=n(V8e,"A",{href:!0});var o_t=s(fX);c5r=r(o_t,"TFDebertaForQuestionAnswering"),o_t.forEach(t),f5r=r(V8e," (DeBERTa model)"),V8e.forEach(t),m5r=i(re),MC=n(re,"LI",{});var z8e=s(MC);n5e=n(z8e,"STRONG",{});var r_t=s(n5e);g5r=r(r_t,"deberta-v2"),r_t.forEach(t),h5r=r(z8e," \u2014 "),mX=n(z8e,"A",{href:!0});var t_t=s(mX);p5r=r(t_t,"TFDebertaV2ForQuestionAnswering"),t_t.forEach(t),_5r=r(z8e," (DeBERTa-v2 model)"),z8e.forEach(t),u5r=i(re),EC=n(re,"LI",{});var W8e=s(EC);s5e=n(W8e,"STRONG",{});var a_t=s(s5e);b5r=r(a_t,"distilbert"),a_t.forEach(t),v5r=r(W8e," \u2014 "),gX=n(W8e,"A",{href:!0});var n_t=s(gX);T5r=r(n_t,"TFDistilBertForQuestionAnswering"),n_t.forEach(t),F5r=r(W8e," (DistilBERT model)"),W8e.forEach(t),C5r=i(re),yC=n(re,"LI",{});var Q8e=s(yC);l5e=n(Q8e,"STRONG",{});var s_t=s(l5e);M5r=r(s_t,"electra"),s_t.forEach(t),E5r=r(Q8e," \u2014 "),hX=n(Q8e,"A",{href:!0});var l_t=s(hX);y5r=r(l_t,"TFElectraForQuestionAnswering"),l_t.forEach(t),w5r=r(Q8e," (ELECTRA model)"),Q8e.forEach(t),A5r=i(re),wC=n(re,"LI",{});var H8e=s(wC);i5e=n(H8e,"STRONG",{});var i_t=s(i5e);L5r=r(i_t,"flaubert"),i_t.forEach(t),B5r=r(H8e," \u2014 "),pX=n(H8e,"A",{href:!0});var d_t=s(pX);x5r=r(d_t,"TFFlaubertForQuestionAnsweringSimple"),d_t.forEach(t),k5r=r(H8e," (FlauBERT model)"),H8e.forEach(t),R5r=i(re),AC=n(re,"LI",{});var U8e=s(AC);d5e=n(U8e,"STRONG",{});var c_t=s(d5e);S5r=r(c_t,"funnel"),c_t.forEach(t),P5r=r(U8e," \u2014 "),_X=n(U8e,"A",{href:!0});var f_t=s(_X);$5r=r(f_t,"TFFunnelForQuestionAnswering"),f_t.forEach(t),I5r=r(U8e," (Funnel Transformer model)"),U8e.forEach(t),j5r=i(re),LC=n(re,"LI",{});var J8e=s(LC);c5e=n(J8e,"STRONG",{});var m_t=s(c5e);D5r=r(m_t,"longformer"),m_t.forEach(t),N5r=r(J8e," \u2014 "),uX=n(J8e,"A",{href:!0});var g_t=s(uX);q5r=r(g_t,"TFLongformerForQuestionAnswering"),g_t.forEach(t),O5r=r(J8e," (Longformer model)"),J8e.forEach(t),G5r=i(re),BC=n(re,"LI",{});var Y8e=s(BC);f5e=n(Y8e,"STRONG",{});var h_t=s(f5e);X5r=r(h_t,"mobilebert"),h_t.forEach(t),V5r=r(Y8e," \u2014 "),bX=n(Y8e,"A",{href:!0});var p_t=s(bX);z5r=r(p_t,"TFMobileBertForQuestionAnswering"),p_t.forEach(t),W5r=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),Q5r=i(re),xC=n(re,"LI",{});var K8e=s(xC);m5e=n(K8e,"STRONG",{});var __t=s(m5e);H5r=r(__t,"mpnet"),__t.forEach(t),U5r=r(K8e," \u2014 "),vX=n(K8e,"A",{href:!0});var u_t=s(vX);J5r=r(u_t,"TFMPNetForQuestionAnswering"),u_t.forEach(t),Y5r=r(K8e," (MPNet model)"),K8e.forEach(t),K5r=i(re),kC=n(re,"LI",{});var Z8e=s(kC);g5e=n(Z8e,"STRONG",{});var b_t=s(g5e);Z5r=r(b_t,"rembert"),b_t.forEach(t),e2r=r(Z8e," \u2014 "),TX=n(Z8e,"A",{href:!0});var v_t=s(TX);o2r=r(v_t,"TFRemBertForQuestionAnswering"),v_t.forEach(t),r2r=r(Z8e," (RemBERT model)"),Z8e.forEach(t),t2r=i(re),RC=n(re,"LI",{});var e7e=s(RC);h5e=n(e7e,"STRONG",{});var T_t=s(h5e);a2r=r(T_t,"roberta"),T_t.forEach(t),n2r=r(e7e," \u2014 "),FX=n(e7e,"A",{href:!0});var F_t=s(FX);s2r=r(F_t,"TFRobertaForQuestionAnswering"),F_t.forEach(t),l2r=r(e7e," (RoBERTa model)"),e7e.forEach(t),i2r=i(re),SC=n(re,"LI",{});var o7e=s(SC);p5e=n(o7e,"STRONG",{});var C_t=s(p5e);d2r=r(C_t,"roformer"),C_t.forEach(t),c2r=r(o7e," \u2014 "),CX=n(o7e,"A",{href:!0});var M_t=s(CX);f2r=r(M_t,"TFRoFormerForQuestionAnswering"),M_t.forEach(t),m2r=r(o7e," (RoFormer model)"),o7e.forEach(t),g2r=i(re),PC=n(re,"LI",{});var r7e=s(PC);_5e=n(r7e,"STRONG",{});var E_t=s(_5e);h2r=r(E_t,"xlm"),E_t.forEach(t),p2r=r(r7e," \u2014 "),MX=n(r7e,"A",{href:!0});var y_t=s(MX);_2r=r(y_t,"TFXLMForQuestionAnsweringSimple"),y_t.forEach(t),u2r=r(r7e," (XLM model)"),r7e.forEach(t),b2r=i(re),$C=n(re,"LI",{});var t7e=s($C);u5e=n(t7e,"STRONG",{});var w_t=s(u5e);v2r=r(w_t,"xlm-roberta"),w_t.forEach(t),T2r=r(t7e," \u2014 "),EX=n(t7e,"A",{href:!0});var A_t=s(EX);F2r=r(A_t,"TFXLMRobertaForQuestionAnswering"),A_t.forEach(t),C2r=r(t7e," (XLM-RoBERTa model)"),t7e.forEach(t),M2r=i(re),IC=n(re,"LI",{});var a7e=s(IC);b5e=n(a7e,"STRONG",{});var L_t=s(b5e);E2r=r(L_t,"xlnet"),L_t.forEach(t),y2r=r(a7e," \u2014 "),yX=n(a7e,"A",{href:!0});var B_t=s(yX);w2r=r(B_t,"TFXLNetForQuestionAnsweringSimple"),B_t.forEach(t),A2r=r(a7e," (XLNet model)"),a7e.forEach(t),re.forEach(t),L2r=i(Ea),v5e=n(Ea,"P",{});var x_t=s(v5e);B2r=r(x_t,"Examples:"),x_t.forEach(t),x2r=i(Ea),m(UA.$$.fragment,Ea),Ea.forEach(t),si.forEach(t),wke=i(d),Wc=n(d,"H2",{class:!0});var DSe=s(Wc);jC=n(DSe,"A",{id:!0,class:!0,href:!0});var k_t=s(jC);T5e=n(k_t,"SPAN",{});var R_t=s(T5e);m(JA.$$.fragment,R_t),R_t.forEach(t),k_t.forEach(t),k2r=i(DSe),F5e=n(DSe,"SPAN",{});var S_t=s(F5e);R2r=r(S_t,"TFAutoModelForVision2Seq"),S_t.forEach(t),DSe.forEach(t),Ake=i(d),xr=n(d,"DIV",{class:!0});var ii=s(xr);m(YA.$$.fragment,ii),S2r=i(ii),Qc=n(ii,"P",{});var DW=s(Qc);P2r=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),C5e=n(DW,"CODE",{});var P_t=s(C5e);$2r=r(P_t,"from_pretrained()"),P_t.forEach(t),I2r=r(DW,"class method or the "),M5e=n(DW,"CODE",{});var $_t=s(M5e);j2r=r($_t,"from_config()"),$_t.forEach(t),D2r=r(DW,`class
method.`),DW.forEach(t),N2r=i(ii),KA=n(ii,"P",{});var NSe=s(KA);q2r=r(NSe,"This class cannot be instantiated directly using "),E5e=n(NSe,"CODE",{});var I_t=s(E5e);O2r=r(I_t,"__init__()"),I_t.forEach(t),G2r=r(NSe," (throws an error)."),NSe.forEach(t),X2r=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(ZA.$$.fragment,di),V2r=i(di),y5e=n(di,"P",{});var j_t=s(y5e);z2r=r(j_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j_t.forEach(t),W2r=i(di),Hc=n(di,"P",{});var NW=s(Hc);Q2r=r(NW,`Note:
Loading a model from its configuration file does `),w5e=n(NW,"STRONG",{});var D_t=s(w5e);H2r=r(D_t,"not"),D_t.forEach(t),U2r=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),A5e=n(NW,"CODE",{});var N_t=s(A5e);J2r=r(N_t,"from_pretrained()"),N_t.forEach(t),Y2r=r(NW,"to load the model weights."),NW.forEach(t),K2r=i(di),L5e=n(di,"P",{});var q_t=s(L5e);Z2r=r(q_t,"Examples:"),q_t.forEach(t),e1r=i(di),m(e0.$$.fragment,di),di.forEach(t),o1r=i(ii),yo=n(ii,"DIV",{class:!0});var ya=s(yo);m(o0.$$.fragment,ya),r1r=i(ya),B5e=n(ya,"P",{});var O_t=s(B5e);t1r=r(O_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O_t.forEach(t),a1r=i(ya),wn=n(ya,"P",{});var xE=s(wn);n1r=r(xE,"The model class to instantiate is selected based on the "),x5e=n(xE,"CODE",{});var G_t=s(x5e);s1r=r(G_t,"model_type"),G_t.forEach(t),l1r=r(xE,` property of the config object (either
passed as an argument or loaded from `),k5e=n(xE,"CODE",{});var X_t=s(k5e);i1r=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),d1r=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(xE,"CODE",{});var V_t=s(R5e);c1r=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),f1r=r(xE,":"),xE.forEach(t),m1r=i(ya),S5e=n(ya,"UL",{});var z_t=s(S5e);DC=n(z_t,"LI",{});var n7e=s(DC);P5e=n(n7e,"STRONG",{});var W_t=s(P5e);g1r=r(W_t,"vision-encoder-decoder"),W_t.forEach(t),h1r=r(n7e," \u2014 "),wX=n(n7e,"A",{href:!0});var Q_t=s(wX);p1r=r(Q_t,"TFVisionEncoderDecoderModel"),Q_t.forEach(t),_1r=r(n7e," (Vision Encoder decoder model)"),n7e.forEach(t),z_t.forEach(t),u1r=i(ya),$5e=n(ya,"P",{});var H_t=s($5e);b1r=r(H_t,"Examples:"),H_t.forEach(t),v1r=i(ya),m(r0.$$.fragment,ya),ya.forEach(t),ii.forEach(t),Lke=i(d),Uc=n(d,"H2",{class:!0});var qSe=s(Uc);NC=n(qSe,"A",{id:!0,class:!0,href:!0});var U_t=s(NC);I5e=n(U_t,"SPAN",{});var J_t=s(I5e);m(t0.$$.fragment,J_t),J_t.forEach(t),U_t.forEach(t),T1r=i(qSe),j5e=n(qSe,"SPAN",{});var Y_t=s(j5e);F1r=r(Y_t,"TFAutoModelForSpeechSeq2Seq"),Y_t.forEach(t),qSe.forEach(t),Bke=i(d),kr=n(d,"DIV",{class:!0});var ci=s(kr);m(a0.$$.fragment,ci),C1r=i(ci),Jc=n(ci,"P",{});var qW=s(Jc);M1r=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),D5e=n(qW,"CODE",{});var K_t=s(D5e);E1r=r(K_t,"from_pretrained()"),K_t.forEach(t),y1r=r(qW,"class method or the "),N5e=n(qW,"CODE",{});var Z_t=s(N5e);w1r=r(Z_t,"from_config()"),Z_t.forEach(t),A1r=r(qW,`class
method.`),qW.forEach(t),L1r=i(ci),n0=n(ci,"P",{});var OSe=s(n0);B1r=r(OSe,"This class cannot be instantiated directly using "),q5e=n(OSe,"CODE",{});var eut=s(q5e);x1r=r(eut,"__init__()"),eut.forEach(t),k1r=r(OSe," (throws an error)."),OSe.forEach(t),R1r=i(ci),yt=n(ci,"DIV",{class:!0});var fi=s(yt);m(s0.$$.fragment,fi),S1r=i(fi),O5e=n(fi,"P",{});var out=s(O5e);P1r=r(out,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),out.forEach(t),$1r=i(fi),Yc=n(fi,"P",{});var OW=s(Yc);I1r=r(OW,`Note:
Loading a model from its configuration file does `),G5e=n(OW,"STRONG",{});var rut=s(G5e);j1r=r(rut,"not"),rut.forEach(t),D1r=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),X5e=n(OW,"CODE",{});var tut=s(X5e);N1r=r(tut,"from_pretrained()"),tut.forEach(t),q1r=r(OW,"to load the model weights."),OW.forEach(t),O1r=i(fi),V5e=n(fi,"P",{});var aut=s(V5e);G1r=r(aut,"Examples:"),aut.forEach(t),X1r=i(fi),m(l0.$$.fragment,fi),fi.forEach(t),V1r=i(ci),wo=n(ci,"DIV",{class:!0});var wa=s(wo);m(i0.$$.fragment,wa),z1r=i(wa),z5e=n(wa,"P",{});var nut=s(z5e);W1r=r(nut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nut.forEach(t),Q1r=i(wa),An=n(wa,"P",{});var kE=s(An);H1r=r(kE,"The model class to instantiate is selected based on the "),W5e=n(kE,"CODE",{});var sut=s(W5e);U1r=r(sut,"model_type"),sut.forEach(t),J1r=r(kE,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(kE,"CODE",{});var lut=s(Q5e);Y1r=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),K1r=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(kE,"CODE",{});var iut=s(H5e);Z1r=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),ebr=r(kE,":"),kE.forEach(t),obr=i(wa),U5e=n(wa,"UL",{});var dut=s(U5e);qC=n(dut,"LI",{});var s7e=s(qC);J5e=n(s7e,"STRONG",{});var cut=s(J5e);rbr=r(cut,"speech_to_text"),cut.forEach(t),tbr=r(s7e," \u2014 "),AX=n(s7e,"A",{href:!0});var fut=s(AX);abr=r(fut,"TFSpeech2TextForConditionalGeneration"),fut.forEach(t),nbr=r(s7e," (Speech2Text model)"),s7e.forEach(t),dut.forEach(t),sbr=i(wa),Y5e=n(wa,"P",{});var mut=s(Y5e);lbr=r(mut,"Examples:"),mut.forEach(t),ibr=i(wa),m(d0.$$.fragment,wa),wa.forEach(t),ci.forEach(t),xke=i(d),Kc=n(d,"H2",{class:!0});var GSe=s(Kc);OC=n(GSe,"A",{id:!0,class:!0,href:!0});var gut=s(OC);K5e=n(gut,"SPAN",{});var hut=s(K5e);m(c0.$$.fragment,hut),hut.forEach(t),gut.forEach(t),dbr=i(GSe),Z5e=n(GSe,"SPAN",{});var put=s(Z5e);cbr=r(put,"FlaxAutoModel"),put.forEach(t),GSe.forEach(t),kke=i(d),Rr=n(d,"DIV",{class:!0});var mi=s(Rr);m(f0.$$.fragment,mi),fbr=i(mi),Zc=n(mi,"P",{});var GW=s(Zc);mbr=r(GW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),e2e=n(GW,"CODE",{});var _ut=s(e2e);gbr=r(_ut,"from_pretrained()"),_ut.forEach(t),hbr=r(GW,"class method or the "),o2e=n(GW,"CODE",{});var uut=s(o2e);pbr=r(uut,"from_config()"),uut.forEach(t),_br=r(GW,`class
method.`),GW.forEach(t),ubr=i(mi),m0=n(mi,"P",{});var XSe=s(m0);bbr=r(XSe,"This class cannot be instantiated directly using "),r2e=n(XSe,"CODE",{});var but=s(r2e);vbr=r(but,"__init__()"),but.forEach(t),Tbr=r(XSe," (throws an error)."),XSe.forEach(t),Fbr=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(g0.$$.fragment,gi),Cbr=i(gi),t2e=n(gi,"P",{});var vut=s(t2e);Mbr=r(vut,"Instantiates one of the base model classes of the library from a configuration."),vut.forEach(t),Ebr=i(gi),ef=n(gi,"P",{});var XW=s(ef);ybr=r(XW,`Note:
Loading a model from its configuration file does `),a2e=n(XW,"STRONG",{});var Tut=s(a2e);wbr=r(Tut,"not"),Tut.forEach(t),Abr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=n(XW,"CODE",{});var Fut=s(n2e);Lbr=r(Fut,"from_pretrained()"),Fut.forEach(t),Bbr=r(XW,"to load the model weights."),XW.forEach(t),xbr=i(gi),s2e=n(gi,"P",{});var Cut=s(s2e);kbr=r(Cut,"Examples:"),Cut.forEach(t),Rbr=i(gi),m(h0.$$.fragment,gi),gi.forEach(t),Sbr=i(mi),Ao=n(mi,"DIV",{class:!0});var Aa=s(Ao);m(p0.$$.fragment,Aa),Pbr=i(Aa),l2e=n(Aa,"P",{});var Mut=s(l2e);$br=r(Mut,"Instantiate one of the base model classes of the library from a pretrained model."),Mut.forEach(t),Ibr=i(Aa),Ln=n(Aa,"P",{});var RE=s(Ln);jbr=r(RE,"The model class to instantiate is selected based on the "),i2e=n(RE,"CODE",{});var Eut=s(i2e);Dbr=r(Eut,"model_type"),Eut.forEach(t),Nbr=r(RE,` property of the config object (either
passed as an argument or loaded from `),d2e=n(RE,"CODE",{});var yut=s(d2e);qbr=r(yut,"pretrained_model_name_or_path"),yut.forEach(t),Obr=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n(RE,"CODE",{});var wut=s(c2e);Gbr=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),Xbr=r(RE,":"),RE.forEach(t),Vbr=i(Aa),z=n(Aa,"UL",{});var Q=s(z);GC=n(Q,"LI",{});var l7e=s(GC);f2e=n(l7e,"STRONG",{});var Aut=s(f2e);zbr=r(Aut,"albert"),Aut.forEach(t),Wbr=r(l7e," \u2014 "),LX=n(l7e,"A",{href:!0});var Lut=s(LX);Qbr=r(Lut,"FlaxAlbertModel"),Lut.forEach(t),Hbr=r(l7e," (ALBERT model)"),l7e.forEach(t),Ubr=i(Q),XC=n(Q,"LI",{});var i7e=s(XC);m2e=n(i7e,"STRONG",{});var But=s(m2e);Jbr=r(But,"bart"),But.forEach(t),Ybr=r(i7e," \u2014 "),BX=n(i7e,"A",{href:!0});var xut=s(BX);Kbr=r(xut,"FlaxBartModel"),xut.forEach(t),Zbr=r(i7e," (BART model)"),i7e.forEach(t),evr=i(Q),VC=n(Q,"LI",{});var d7e=s(VC);g2e=n(d7e,"STRONG",{});var kut=s(g2e);ovr=r(kut,"beit"),kut.forEach(t),rvr=r(d7e," \u2014 "),xX=n(d7e,"A",{href:!0});var Rut=s(xX);tvr=r(Rut,"FlaxBeitModel"),Rut.forEach(t),avr=r(d7e," (BEiT model)"),d7e.forEach(t),nvr=i(Q),zC=n(Q,"LI",{});var c7e=s(zC);h2e=n(c7e,"STRONG",{});var Sut=s(h2e);svr=r(Sut,"bert"),Sut.forEach(t),lvr=r(c7e," \u2014 "),kX=n(c7e,"A",{href:!0});var Put=s(kX);ivr=r(Put,"FlaxBertModel"),Put.forEach(t),dvr=r(c7e," (BERT model)"),c7e.forEach(t),cvr=i(Q),WC=n(Q,"LI",{});var f7e=s(WC);p2e=n(f7e,"STRONG",{});var $ut=s(p2e);fvr=r($ut,"big_bird"),$ut.forEach(t),mvr=r(f7e," \u2014 "),RX=n(f7e,"A",{href:!0});var Iut=s(RX);gvr=r(Iut,"FlaxBigBirdModel"),Iut.forEach(t),hvr=r(f7e," (BigBird model)"),f7e.forEach(t),pvr=i(Q),QC=n(Q,"LI",{});var m7e=s(QC);_2e=n(m7e,"STRONG",{});var jut=s(_2e);_vr=r(jut,"blenderbot"),jut.forEach(t),uvr=r(m7e," \u2014 "),SX=n(m7e,"A",{href:!0});var Dut=s(SX);bvr=r(Dut,"FlaxBlenderbotModel"),Dut.forEach(t),vvr=r(m7e," (Blenderbot model)"),m7e.forEach(t),Tvr=i(Q),HC=n(Q,"LI",{});var g7e=s(HC);u2e=n(g7e,"STRONG",{});var Nut=s(u2e);Fvr=r(Nut,"blenderbot-small"),Nut.forEach(t),Cvr=r(g7e," \u2014 "),PX=n(g7e,"A",{href:!0});var qut=s(PX);Mvr=r(qut,"FlaxBlenderbotSmallModel"),qut.forEach(t),Evr=r(g7e," (BlenderbotSmall model)"),g7e.forEach(t),yvr=i(Q),UC=n(Q,"LI",{});var h7e=s(UC);b2e=n(h7e,"STRONG",{});var Out=s(b2e);wvr=r(Out,"clip"),Out.forEach(t),Avr=r(h7e," \u2014 "),$X=n(h7e,"A",{href:!0});var Gut=s($X);Lvr=r(Gut,"FlaxCLIPModel"),Gut.forEach(t),Bvr=r(h7e," (CLIP model)"),h7e.forEach(t),xvr=i(Q),JC=n(Q,"LI",{});var p7e=s(JC);v2e=n(p7e,"STRONG",{});var Xut=s(v2e);kvr=r(Xut,"distilbert"),Xut.forEach(t),Rvr=r(p7e," \u2014 "),IX=n(p7e,"A",{href:!0});var Vut=s(IX);Svr=r(Vut,"FlaxDistilBertModel"),Vut.forEach(t),Pvr=r(p7e," (DistilBERT model)"),p7e.forEach(t),$vr=i(Q),YC=n(Q,"LI",{});var _7e=s(YC);T2e=n(_7e,"STRONG",{});var zut=s(T2e);Ivr=r(zut,"electra"),zut.forEach(t),jvr=r(_7e," \u2014 "),jX=n(_7e,"A",{href:!0});var Wut=s(jX);Dvr=r(Wut,"FlaxElectraModel"),Wut.forEach(t),Nvr=r(_7e," (ELECTRA model)"),_7e.forEach(t),qvr=i(Q),KC=n(Q,"LI",{});var u7e=s(KC);F2e=n(u7e,"STRONG",{});var Qut=s(F2e);Ovr=r(Qut,"gpt2"),Qut.forEach(t),Gvr=r(u7e," \u2014 "),DX=n(u7e,"A",{href:!0});var Hut=s(DX);Xvr=r(Hut,"FlaxGPT2Model"),Hut.forEach(t),Vvr=r(u7e," (OpenAI GPT-2 model)"),u7e.forEach(t),zvr=i(Q),ZC=n(Q,"LI",{});var b7e=s(ZC);C2e=n(b7e,"STRONG",{});var Uut=s(C2e);Wvr=r(Uut,"gpt_neo"),Uut.forEach(t),Qvr=r(b7e," \u2014 "),NX=n(b7e,"A",{href:!0});var Jut=s(NX);Hvr=r(Jut,"FlaxGPTNeoModel"),Jut.forEach(t),Uvr=r(b7e," (GPT Neo model)"),b7e.forEach(t),Jvr=i(Q),eM=n(Q,"LI",{});var v7e=s(eM);M2e=n(v7e,"STRONG",{});var Yut=s(M2e);Yvr=r(Yut,"gptj"),Yut.forEach(t),Kvr=r(v7e," \u2014 "),qX=n(v7e,"A",{href:!0});var Kut=s(qX);Zvr=r(Kut,"FlaxGPTJModel"),Kut.forEach(t),eTr=r(v7e," (GPT-J model)"),v7e.forEach(t),oTr=i(Q),oM=n(Q,"LI",{});var T7e=s(oM);E2e=n(T7e,"STRONG",{});var Zut=s(E2e);rTr=r(Zut,"marian"),Zut.forEach(t),tTr=r(T7e," \u2014 "),OX=n(T7e,"A",{href:!0});var e5t=s(OX);aTr=r(e5t,"FlaxMarianModel"),e5t.forEach(t),nTr=r(T7e," (Marian model)"),T7e.forEach(t),sTr=i(Q),rM=n(Q,"LI",{});var F7e=s(rM);y2e=n(F7e,"STRONG",{});var o5t=s(y2e);lTr=r(o5t,"mbart"),o5t.forEach(t),iTr=r(F7e," \u2014 "),GX=n(F7e,"A",{href:!0});var r5t=s(GX);dTr=r(r5t,"FlaxMBartModel"),r5t.forEach(t),cTr=r(F7e," (mBART model)"),F7e.forEach(t),fTr=i(Q),tM=n(Q,"LI",{});var C7e=s(tM);w2e=n(C7e,"STRONG",{});var t5t=s(w2e);mTr=r(t5t,"mt5"),t5t.forEach(t),gTr=r(C7e," \u2014 "),XX=n(C7e,"A",{href:!0});var a5t=s(XX);hTr=r(a5t,"FlaxMT5Model"),a5t.forEach(t),pTr=r(C7e," (mT5 model)"),C7e.forEach(t),_Tr=i(Q),aM=n(Q,"LI",{});var M7e=s(aM);A2e=n(M7e,"STRONG",{});var n5t=s(A2e);uTr=r(n5t,"pegasus"),n5t.forEach(t),bTr=r(M7e," \u2014 "),VX=n(M7e,"A",{href:!0});var s5t=s(VX);vTr=r(s5t,"FlaxPegasusModel"),s5t.forEach(t),TTr=r(M7e," (Pegasus model)"),M7e.forEach(t),FTr=i(Q),nM=n(Q,"LI",{});var E7e=s(nM);L2e=n(E7e,"STRONG",{});var l5t=s(L2e);CTr=r(l5t,"roberta"),l5t.forEach(t),MTr=r(E7e," \u2014 "),zX=n(E7e,"A",{href:!0});var i5t=s(zX);ETr=r(i5t,"FlaxRobertaModel"),i5t.forEach(t),yTr=r(E7e," (RoBERTa model)"),E7e.forEach(t),wTr=i(Q),sM=n(Q,"LI",{});var y7e=s(sM);B2e=n(y7e,"STRONG",{});var d5t=s(B2e);ATr=r(d5t,"roformer"),d5t.forEach(t),LTr=r(y7e," \u2014 "),WX=n(y7e,"A",{href:!0});var c5t=s(WX);BTr=r(c5t,"FlaxRoFormerModel"),c5t.forEach(t),xTr=r(y7e," (RoFormer model)"),y7e.forEach(t),kTr=i(Q),lM=n(Q,"LI",{});var w7e=s(lM);x2e=n(w7e,"STRONG",{});var f5t=s(x2e);RTr=r(f5t,"t5"),f5t.forEach(t),STr=r(w7e," \u2014 "),QX=n(w7e,"A",{href:!0});var m5t=s(QX);PTr=r(m5t,"FlaxT5Model"),m5t.forEach(t),$Tr=r(w7e," (T5 model)"),w7e.forEach(t),ITr=i(Q),iM=n(Q,"LI",{});var A7e=s(iM);k2e=n(A7e,"STRONG",{});var g5t=s(k2e);jTr=r(g5t,"vision-text-dual-encoder"),g5t.forEach(t),DTr=r(A7e," \u2014 "),HX=n(A7e,"A",{href:!0});var h5t=s(HX);NTr=r(h5t,"FlaxVisionTextDualEncoderModel"),h5t.forEach(t),qTr=r(A7e," (VisionTextDualEncoder model)"),A7e.forEach(t),OTr=i(Q),dM=n(Q,"LI",{});var L7e=s(dM);R2e=n(L7e,"STRONG",{});var p5t=s(R2e);GTr=r(p5t,"vit"),p5t.forEach(t),XTr=r(L7e," \u2014 "),UX=n(L7e,"A",{href:!0});var _5t=s(UX);VTr=r(_5t,"FlaxViTModel"),_5t.forEach(t),zTr=r(L7e," (ViT model)"),L7e.forEach(t),WTr=i(Q),cM=n(Q,"LI",{});var B7e=s(cM);S2e=n(B7e,"STRONG",{});var u5t=s(S2e);QTr=r(u5t,"wav2vec2"),u5t.forEach(t),HTr=r(B7e," \u2014 "),JX=n(B7e,"A",{href:!0});var b5t=s(JX);UTr=r(b5t,"FlaxWav2Vec2Model"),b5t.forEach(t),JTr=r(B7e," (Wav2Vec2 model)"),B7e.forEach(t),YTr=i(Q),fM=n(Q,"LI",{});var x7e=s(fM);P2e=n(x7e,"STRONG",{});var v5t=s(P2e);KTr=r(v5t,"xglm"),v5t.forEach(t),ZTr=r(x7e," \u2014 "),YX=n(x7e,"A",{href:!0});var T5t=s(YX);eFr=r(T5t,"FlaxXGLMModel"),T5t.forEach(t),oFr=r(x7e," (XGLM model)"),x7e.forEach(t),rFr=i(Q),mM=n(Q,"LI",{});var k7e=s(mM);$2e=n(k7e,"STRONG",{});var F5t=s($2e);tFr=r(F5t,"xlm-roberta"),F5t.forEach(t),aFr=r(k7e," \u2014 "),KX=n(k7e,"A",{href:!0});var C5t=s(KX);nFr=r(C5t,"FlaxXLMRobertaModel"),C5t.forEach(t),sFr=r(k7e," (XLM-RoBERTa model)"),k7e.forEach(t),Q.forEach(t),lFr=i(Aa),I2e=n(Aa,"P",{});var M5t=s(I2e);iFr=r(M5t,"Examples:"),M5t.forEach(t),dFr=i(Aa),m(_0.$$.fragment,Aa),Aa.forEach(t),mi.forEach(t),Rke=i(d),of=n(d,"H2",{class:!0});var VSe=s(of);gM=n(VSe,"A",{id:!0,class:!0,href:!0});var E5t=s(gM);j2e=n(E5t,"SPAN",{});var y5t=s(j2e);m(u0.$$.fragment,y5t),y5t.forEach(t),E5t.forEach(t),cFr=i(VSe),D2e=n(VSe,"SPAN",{});var w5t=s(D2e);fFr=r(w5t,"FlaxAutoModelForCausalLM"),w5t.forEach(t),VSe.forEach(t),Ske=i(d),Sr=n(d,"DIV",{class:!0});var hi=s(Sr);m(b0.$$.fragment,hi),mFr=i(hi),rf=n(hi,"P",{});var VW=s(rf);gFr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),N2e=n(VW,"CODE",{});var A5t=s(N2e);hFr=r(A5t,"from_pretrained()"),A5t.forEach(t),pFr=r(VW,"class method or the "),q2e=n(VW,"CODE",{});var L5t=s(q2e);_Fr=r(L5t,"from_config()"),L5t.forEach(t),uFr=r(VW,`class
method.`),VW.forEach(t),bFr=i(hi),v0=n(hi,"P",{});var zSe=s(v0);vFr=r(zSe,"This class cannot be instantiated directly using "),O2e=n(zSe,"CODE",{});var B5t=s(O2e);TFr=r(B5t,"__init__()"),B5t.forEach(t),FFr=r(zSe," (throws an error)."),zSe.forEach(t),CFr=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(T0.$$.fragment,pi),MFr=i(pi),G2e=n(pi,"P",{});var x5t=s(G2e);EFr=r(x5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x5t.forEach(t),yFr=i(pi),tf=n(pi,"P",{});var zW=s(tf);wFr=r(zW,`Note:
Loading a model from its configuration file does `),X2e=n(zW,"STRONG",{});var k5t=s(X2e);AFr=r(k5t,"not"),k5t.forEach(t),LFr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=n(zW,"CODE",{});var R5t=s(V2e);BFr=r(R5t,"from_pretrained()"),R5t.forEach(t),xFr=r(zW,"to load the model weights."),zW.forEach(t),kFr=i(pi),z2e=n(pi,"P",{});var S5t=s(z2e);RFr=r(S5t,"Examples:"),S5t.forEach(t),SFr=i(pi),m(F0.$$.fragment,pi),pi.forEach(t),PFr=i(hi),Lo=n(hi,"DIV",{class:!0});var La=s(Lo);m(C0.$$.fragment,La),$Fr=i(La),W2e=n(La,"P",{});var P5t=s(W2e);IFr=r(P5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P5t.forEach(t),jFr=i(La),Bn=n(La,"P",{});var SE=s(Bn);DFr=r(SE,"The model class to instantiate is selected based on the "),Q2e=n(SE,"CODE",{});var $5t=s(Q2e);NFr=r($5t,"model_type"),$5t.forEach(t),qFr=r(SE,` property of the config object (either
passed as an argument or loaded from `),H2e=n(SE,"CODE",{});var I5t=s(H2e);OFr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),GFr=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(SE,"CODE",{});var j5t=s(U2e);XFr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),VFr=r(SE,":"),SE.forEach(t),zFr=i(La),xn=n(La,"UL",{});var PE=s(xn);hM=n(PE,"LI",{});var R7e=s(hM);J2e=n(R7e,"STRONG",{});var D5t=s(J2e);WFr=r(D5t,"gpt2"),D5t.forEach(t),QFr=r(R7e," \u2014 "),ZX=n(R7e,"A",{href:!0});var N5t=s(ZX);HFr=r(N5t,"FlaxGPT2LMHeadModel"),N5t.forEach(t),UFr=r(R7e," (OpenAI GPT-2 model)"),R7e.forEach(t),JFr=i(PE),pM=n(PE,"LI",{});var S7e=s(pM);Y2e=n(S7e,"STRONG",{});var q5t=s(Y2e);YFr=r(q5t,"gpt_neo"),q5t.forEach(t),KFr=r(S7e," \u2014 "),eV=n(S7e,"A",{href:!0});var O5t=s(eV);ZFr=r(O5t,"FlaxGPTNeoForCausalLM"),O5t.forEach(t),e9r=r(S7e," (GPT Neo model)"),S7e.forEach(t),o9r=i(PE),_M=n(PE,"LI",{});var P7e=s(_M);K2e=n(P7e,"STRONG",{});var G5t=s(K2e);r9r=r(G5t,"gptj"),G5t.forEach(t),t9r=r(P7e," \u2014 "),oV=n(P7e,"A",{href:!0});var X5t=s(oV);a9r=r(X5t,"FlaxGPTJForCausalLM"),X5t.forEach(t),n9r=r(P7e," (GPT-J model)"),P7e.forEach(t),s9r=i(PE),uM=n(PE,"LI",{});var $7e=s(uM);Z2e=n($7e,"STRONG",{});var V5t=s(Z2e);l9r=r(V5t,"xglm"),V5t.forEach(t),i9r=r($7e," \u2014 "),rV=n($7e,"A",{href:!0});var z5t=s(rV);d9r=r(z5t,"FlaxXGLMForCausalLM"),z5t.forEach(t),c9r=r($7e," (XGLM model)"),$7e.forEach(t),PE.forEach(t),f9r=i(La),e1e=n(La,"P",{});var W5t=s(e1e);m9r=r(W5t,"Examples:"),W5t.forEach(t),g9r=i(La),m(M0.$$.fragment,La),La.forEach(t),hi.forEach(t),Pke=i(d),af=n(d,"H2",{class:!0});var WSe=s(af);bM=n(WSe,"A",{id:!0,class:!0,href:!0});var Q5t=s(bM);o1e=n(Q5t,"SPAN",{});var H5t=s(o1e);m(E0.$$.fragment,H5t),H5t.forEach(t),Q5t.forEach(t),h9r=i(WSe),r1e=n(WSe,"SPAN",{});var U5t=s(r1e);p9r=r(U5t,"FlaxAutoModelForPreTraining"),U5t.forEach(t),WSe.forEach(t),$ke=i(d),Pr=n(d,"DIV",{class:!0});var _i=s(Pr);m(y0.$$.fragment,_i),_9r=i(_i),nf=n(_i,"P",{});var WW=s(nf);u9r=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),t1e=n(WW,"CODE",{});var J5t=s(t1e);b9r=r(J5t,"from_pretrained()"),J5t.forEach(t),v9r=r(WW,"class method or the "),a1e=n(WW,"CODE",{});var Y5t=s(a1e);T9r=r(Y5t,"from_config()"),Y5t.forEach(t),F9r=r(WW,`class
method.`),WW.forEach(t),C9r=i(_i),w0=n(_i,"P",{});var QSe=s(w0);M9r=r(QSe,"This class cannot be instantiated directly using "),n1e=n(QSe,"CODE",{});var K5t=s(n1e);E9r=r(K5t,"__init__()"),K5t.forEach(t),y9r=r(QSe," (throws an error)."),QSe.forEach(t),w9r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(A0.$$.fragment,ui),A9r=i(ui),s1e=n(ui,"P",{});var Z5t=s(s1e);L9r=r(Z5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z5t.forEach(t),B9r=i(ui),sf=n(ui,"P",{});var QW=s(sf);x9r=r(QW,`Note:
Loading a model from its configuration file does `),l1e=n(QW,"STRONG",{});var e2t=s(l1e);k9r=r(e2t,"not"),e2t.forEach(t),R9r=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),i1e=n(QW,"CODE",{});var o2t=s(i1e);S9r=r(o2t,"from_pretrained()"),o2t.forEach(t),P9r=r(QW,"to load the model weights."),QW.forEach(t),$9r=i(ui),d1e=n(ui,"P",{});var r2t=s(d1e);I9r=r(r2t,"Examples:"),r2t.forEach(t),j9r=i(ui),m(L0.$$.fragment,ui),ui.forEach(t),D9r=i(_i),Bo=n(_i,"DIV",{class:!0});var Ba=s(Bo);m(B0.$$.fragment,Ba),N9r=i(Ba),c1e=n(Ba,"P",{});var t2t=s(c1e);q9r=r(t2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t2t.forEach(t),O9r=i(Ba),kn=n(Ba,"P",{});var $E=s(kn);G9r=r($E,"The model class to instantiate is selected based on the "),f1e=n($E,"CODE",{});var a2t=s(f1e);X9r=r(a2t,"model_type"),a2t.forEach(t),V9r=r($E,` property of the config object (either
passed as an argument or loaded from `),m1e=n($E,"CODE",{});var n2t=s(m1e);z9r=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),W9r=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n($E,"CODE",{});var s2t=s(g1e);Q9r=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),H9r=r($E,":"),$E.forEach(t),U9r=i(Ba),ce=n(Ba,"UL",{});var me=s(ce);vM=n(me,"LI",{});var I7e=s(vM);h1e=n(I7e,"STRONG",{});var l2t=s(h1e);J9r=r(l2t,"albert"),l2t.forEach(t),Y9r=r(I7e," \u2014 "),tV=n(I7e,"A",{href:!0});var i2t=s(tV);K9r=r(i2t,"FlaxAlbertForPreTraining"),i2t.forEach(t),Z9r=r(I7e," (ALBERT model)"),I7e.forEach(t),eCr=i(me),TM=n(me,"LI",{});var j7e=s(TM);p1e=n(j7e,"STRONG",{});var d2t=s(p1e);oCr=r(d2t,"bart"),d2t.forEach(t),rCr=r(j7e," \u2014 "),aV=n(j7e,"A",{href:!0});var c2t=s(aV);tCr=r(c2t,"FlaxBartForConditionalGeneration"),c2t.forEach(t),aCr=r(j7e," (BART model)"),j7e.forEach(t),nCr=i(me),FM=n(me,"LI",{});var D7e=s(FM);_1e=n(D7e,"STRONG",{});var f2t=s(_1e);sCr=r(f2t,"bert"),f2t.forEach(t),lCr=r(D7e," \u2014 "),nV=n(D7e,"A",{href:!0});var m2t=s(nV);iCr=r(m2t,"FlaxBertForPreTraining"),m2t.forEach(t),dCr=r(D7e," (BERT model)"),D7e.forEach(t),cCr=i(me),CM=n(me,"LI",{});var N7e=s(CM);u1e=n(N7e,"STRONG",{});var g2t=s(u1e);fCr=r(g2t,"big_bird"),g2t.forEach(t),mCr=r(N7e," \u2014 "),sV=n(N7e,"A",{href:!0});var h2t=s(sV);gCr=r(h2t,"FlaxBigBirdForPreTraining"),h2t.forEach(t),hCr=r(N7e," (BigBird model)"),N7e.forEach(t),pCr=i(me),MM=n(me,"LI",{});var q7e=s(MM);b1e=n(q7e,"STRONG",{});var p2t=s(b1e);_Cr=r(p2t,"electra"),p2t.forEach(t),uCr=r(q7e," \u2014 "),lV=n(q7e,"A",{href:!0});var _2t=s(lV);bCr=r(_2t,"FlaxElectraForPreTraining"),_2t.forEach(t),vCr=r(q7e," (ELECTRA model)"),q7e.forEach(t),TCr=i(me),EM=n(me,"LI",{});var O7e=s(EM);v1e=n(O7e,"STRONG",{});var u2t=s(v1e);FCr=r(u2t,"mbart"),u2t.forEach(t),CCr=r(O7e," \u2014 "),iV=n(O7e,"A",{href:!0});var b2t=s(iV);MCr=r(b2t,"FlaxMBartForConditionalGeneration"),b2t.forEach(t),ECr=r(O7e," (mBART model)"),O7e.forEach(t),yCr=i(me),yM=n(me,"LI",{});var G7e=s(yM);T1e=n(G7e,"STRONG",{});var v2t=s(T1e);wCr=r(v2t,"mt5"),v2t.forEach(t),ACr=r(G7e," \u2014 "),dV=n(G7e,"A",{href:!0});var T2t=s(dV);LCr=r(T2t,"FlaxMT5ForConditionalGeneration"),T2t.forEach(t),BCr=r(G7e," (mT5 model)"),G7e.forEach(t),xCr=i(me),wM=n(me,"LI",{});var X7e=s(wM);F1e=n(X7e,"STRONG",{});var F2t=s(F1e);kCr=r(F2t,"roberta"),F2t.forEach(t),RCr=r(X7e," \u2014 "),cV=n(X7e,"A",{href:!0});var C2t=s(cV);SCr=r(C2t,"FlaxRobertaForMaskedLM"),C2t.forEach(t),PCr=r(X7e," (RoBERTa model)"),X7e.forEach(t),$Cr=i(me),AM=n(me,"LI",{});var V7e=s(AM);C1e=n(V7e,"STRONG",{});var M2t=s(C1e);ICr=r(M2t,"roformer"),M2t.forEach(t),jCr=r(V7e," \u2014 "),fV=n(V7e,"A",{href:!0});var E2t=s(fV);DCr=r(E2t,"FlaxRoFormerForMaskedLM"),E2t.forEach(t),NCr=r(V7e," (RoFormer model)"),V7e.forEach(t),qCr=i(me),LM=n(me,"LI",{});var z7e=s(LM);M1e=n(z7e,"STRONG",{});var y2t=s(M1e);OCr=r(y2t,"t5"),y2t.forEach(t),GCr=r(z7e," \u2014 "),mV=n(z7e,"A",{href:!0});var w2t=s(mV);XCr=r(w2t,"FlaxT5ForConditionalGeneration"),w2t.forEach(t),VCr=r(z7e," (T5 model)"),z7e.forEach(t),zCr=i(me),BM=n(me,"LI",{});var W7e=s(BM);E1e=n(W7e,"STRONG",{});var A2t=s(E1e);WCr=r(A2t,"wav2vec2"),A2t.forEach(t),QCr=r(W7e," \u2014 "),gV=n(W7e,"A",{href:!0});var L2t=s(gV);HCr=r(L2t,"FlaxWav2Vec2ForPreTraining"),L2t.forEach(t),UCr=r(W7e," (Wav2Vec2 model)"),W7e.forEach(t),JCr=i(me),xM=n(me,"LI",{});var Q7e=s(xM);y1e=n(Q7e,"STRONG",{});var B2t=s(y1e);YCr=r(B2t,"xlm-roberta"),B2t.forEach(t),KCr=r(Q7e," \u2014 "),hV=n(Q7e,"A",{href:!0});var x2t=s(hV);ZCr=r(x2t,"FlaxXLMRobertaForMaskedLM"),x2t.forEach(t),eMr=r(Q7e," (XLM-RoBERTa model)"),Q7e.forEach(t),me.forEach(t),oMr=i(Ba),w1e=n(Ba,"P",{});var k2t=s(w1e);rMr=r(k2t,"Examples:"),k2t.forEach(t),tMr=i(Ba),m(x0.$$.fragment,Ba),Ba.forEach(t),_i.forEach(t),Ike=i(d),lf=n(d,"H2",{class:!0});var HSe=s(lf);kM=n(HSe,"A",{id:!0,class:!0,href:!0});var R2t=s(kM);A1e=n(R2t,"SPAN",{});var S2t=s(A1e);m(k0.$$.fragment,S2t),S2t.forEach(t),R2t.forEach(t),aMr=i(HSe),L1e=n(HSe,"SPAN",{});var P2t=s(L1e);nMr=r(P2t,"FlaxAutoModelForMaskedLM"),P2t.forEach(t),HSe.forEach(t),jke=i(d),$r=n(d,"DIV",{class:!0});var bi=s($r);m(R0.$$.fragment,bi),sMr=i(bi),df=n(bi,"P",{});var HW=s(df);lMr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),B1e=n(HW,"CODE",{});var $2t=s(B1e);iMr=r($2t,"from_pretrained()"),$2t.forEach(t),dMr=r(HW,"class method or the "),x1e=n(HW,"CODE",{});var I2t=s(x1e);cMr=r(I2t,"from_config()"),I2t.forEach(t),fMr=r(HW,`class
method.`),HW.forEach(t),mMr=i(bi),S0=n(bi,"P",{});var USe=s(S0);gMr=r(USe,"This class cannot be instantiated directly using "),k1e=n(USe,"CODE",{});var j2t=s(k1e);hMr=r(j2t,"__init__()"),j2t.forEach(t),pMr=r(USe," (throws an error)."),USe.forEach(t),_Mr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(P0.$$.fragment,vi),uMr=i(vi),R1e=n(vi,"P",{});var D2t=s(R1e);bMr=r(D2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D2t.forEach(t),vMr=i(vi),cf=n(vi,"P",{});var UW=s(cf);TMr=r(UW,`Note:
Loading a model from its configuration file does `),S1e=n(UW,"STRONG",{});var N2t=s(S1e);FMr=r(N2t,"not"),N2t.forEach(t),CMr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),P1e=n(UW,"CODE",{});var q2t=s(P1e);MMr=r(q2t,"from_pretrained()"),q2t.forEach(t),EMr=r(UW,"to load the model weights."),UW.forEach(t),yMr=i(vi),$1e=n(vi,"P",{});var O2t=s($1e);wMr=r(O2t,"Examples:"),O2t.forEach(t),AMr=i(vi),m($0.$$.fragment,vi),vi.forEach(t),LMr=i(bi),xo=n(bi,"DIV",{class:!0});var xa=s(xo);m(I0.$$.fragment,xa),BMr=i(xa),I1e=n(xa,"P",{});var G2t=s(I1e);xMr=r(G2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),G2t.forEach(t),kMr=i(xa),Rn=n(xa,"P",{});var IE=s(Rn);RMr=r(IE,"The model class to instantiate is selected based on the "),j1e=n(IE,"CODE",{});var X2t=s(j1e);SMr=r(X2t,"model_type"),X2t.forEach(t),PMr=r(IE,` property of the config object (either
passed as an argument or loaded from `),D1e=n(IE,"CODE",{});var V2t=s(D1e);$Mr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),IMr=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(IE,"CODE",{});var z2t=s(N1e);jMr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),DMr=r(IE,":"),IE.forEach(t),NMr=i(xa),ue=n(xa,"UL",{});var ye=s(ue);RM=n(ye,"LI",{});var H7e=s(RM);q1e=n(H7e,"STRONG",{});var W2t=s(q1e);qMr=r(W2t,"albert"),W2t.forEach(t),OMr=r(H7e," \u2014 "),pV=n(H7e,"A",{href:!0});var Q2t=s(pV);GMr=r(Q2t,"FlaxAlbertForMaskedLM"),Q2t.forEach(t),XMr=r(H7e," (ALBERT model)"),H7e.forEach(t),VMr=i(ye),SM=n(ye,"LI",{});var U7e=s(SM);O1e=n(U7e,"STRONG",{});var H2t=s(O1e);zMr=r(H2t,"bart"),H2t.forEach(t),WMr=r(U7e," \u2014 "),_V=n(U7e,"A",{href:!0});var U2t=s(_V);QMr=r(U2t,"FlaxBartForConditionalGeneration"),U2t.forEach(t),HMr=r(U7e," (BART model)"),U7e.forEach(t),UMr=i(ye),PM=n(ye,"LI",{});var J7e=s(PM);G1e=n(J7e,"STRONG",{});var J2t=s(G1e);JMr=r(J2t,"bert"),J2t.forEach(t),YMr=r(J7e," \u2014 "),uV=n(J7e,"A",{href:!0});var Y2t=s(uV);KMr=r(Y2t,"FlaxBertForMaskedLM"),Y2t.forEach(t),ZMr=r(J7e," (BERT model)"),J7e.forEach(t),e4r=i(ye),$M=n(ye,"LI",{});var Y7e=s($M);X1e=n(Y7e,"STRONG",{});var K2t=s(X1e);o4r=r(K2t,"big_bird"),K2t.forEach(t),r4r=r(Y7e," \u2014 "),bV=n(Y7e,"A",{href:!0});var Z2t=s(bV);t4r=r(Z2t,"FlaxBigBirdForMaskedLM"),Z2t.forEach(t),a4r=r(Y7e," (BigBird model)"),Y7e.forEach(t),n4r=i(ye),IM=n(ye,"LI",{});var K7e=s(IM);V1e=n(K7e,"STRONG",{});var e1t=s(V1e);s4r=r(e1t,"distilbert"),e1t.forEach(t),l4r=r(K7e," \u2014 "),vV=n(K7e,"A",{href:!0});var o1t=s(vV);i4r=r(o1t,"FlaxDistilBertForMaskedLM"),o1t.forEach(t),d4r=r(K7e," (DistilBERT model)"),K7e.forEach(t),c4r=i(ye),jM=n(ye,"LI",{});var Z7e=s(jM);z1e=n(Z7e,"STRONG",{});var r1t=s(z1e);f4r=r(r1t,"electra"),r1t.forEach(t),m4r=r(Z7e," \u2014 "),TV=n(Z7e,"A",{href:!0});var t1t=s(TV);g4r=r(t1t,"FlaxElectraForMaskedLM"),t1t.forEach(t),h4r=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),p4r=i(ye),DM=n(ye,"LI",{});var eBe=s(DM);W1e=n(eBe,"STRONG",{});var a1t=s(W1e);_4r=r(a1t,"mbart"),a1t.forEach(t),u4r=r(eBe," \u2014 "),FV=n(eBe,"A",{href:!0});var n1t=s(FV);b4r=r(n1t,"FlaxMBartForConditionalGeneration"),n1t.forEach(t),v4r=r(eBe," (mBART model)"),eBe.forEach(t),T4r=i(ye),NM=n(ye,"LI",{});var oBe=s(NM);Q1e=n(oBe,"STRONG",{});var s1t=s(Q1e);F4r=r(s1t,"roberta"),s1t.forEach(t),C4r=r(oBe," \u2014 "),CV=n(oBe,"A",{href:!0});var l1t=s(CV);M4r=r(l1t,"FlaxRobertaForMaskedLM"),l1t.forEach(t),E4r=r(oBe," (RoBERTa model)"),oBe.forEach(t),y4r=i(ye),qM=n(ye,"LI",{});var rBe=s(qM);H1e=n(rBe,"STRONG",{});var i1t=s(H1e);w4r=r(i1t,"roformer"),i1t.forEach(t),A4r=r(rBe," \u2014 "),MV=n(rBe,"A",{href:!0});var d1t=s(MV);L4r=r(d1t,"FlaxRoFormerForMaskedLM"),d1t.forEach(t),B4r=r(rBe," (RoFormer model)"),rBe.forEach(t),x4r=i(ye),OM=n(ye,"LI",{});var tBe=s(OM);U1e=n(tBe,"STRONG",{});var c1t=s(U1e);k4r=r(c1t,"xlm-roberta"),c1t.forEach(t),R4r=r(tBe," \u2014 "),EV=n(tBe,"A",{href:!0});var f1t=s(EV);S4r=r(f1t,"FlaxXLMRobertaForMaskedLM"),f1t.forEach(t),P4r=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),ye.forEach(t),$4r=i(xa),J1e=n(xa,"P",{});var m1t=s(J1e);I4r=r(m1t,"Examples:"),m1t.forEach(t),j4r=i(xa),m(j0.$$.fragment,xa),xa.forEach(t),bi.forEach(t),Dke=i(d),ff=n(d,"H2",{class:!0});var JSe=s(ff);GM=n(JSe,"A",{id:!0,class:!0,href:!0});var g1t=s(GM);Y1e=n(g1t,"SPAN",{});var h1t=s(Y1e);m(D0.$$.fragment,h1t),h1t.forEach(t),g1t.forEach(t),D4r=i(JSe),K1e=n(JSe,"SPAN",{});var p1t=s(K1e);N4r=r(p1t,"FlaxAutoModelForSeq2SeqLM"),p1t.forEach(t),JSe.forEach(t),Nke=i(d),Ir=n(d,"DIV",{class:!0});var Ti=s(Ir);m(N0.$$.fragment,Ti),q4r=i(Ti),mf=n(Ti,"P",{});var JW=s(mf);O4r=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Z1e=n(JW,"CODE",{});var _1t=s(Z1e);G4r=r(_1t,"from_pretrained()"),_1t.forEach(t),X4r=r(JW,"class method or the "),ebe=n(JW,"CODE",{});var u1t=s(ebe);V4r=r(u1t,"from_config()"),u1t.forEach(t),z4r=r(JW,`class
method.`),JW.forEach(t),W4r=i(Ti),q0=n(Ti,"P",{});var YSe=s(q0);Q4r=r(YSe,"This class cannot be instantiated directly using "),obe=n(YSe,"CODE",{});var b1t=s(obe);H4r=r(b1t,"__init__()"),b1t.forEach(t),U4r=r(YSe," (throws an error)."),YSe.forEach(t),J4r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(O0.$$.fragment,Fi),Y4r=i(Fi),rbe=n(Fi,"P",{});var v1t=s(rbe);K4r=r(v1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v1t.forEach(t),Z4r=i(Fi),gf=n(Fi,"P",{});var YW=s(gf);eEr=r(YW,`Note:
Loading a model from its configuration file does `),tbe=n(YW,"STRONG",{});var T1t=s(tbe);oEr=r(T1t,"not"),T1t.forEach(t),rEr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),abe=n(YW,"CODE",{});var F1t=s(abe);tEr=r(F1t,"from_pretrained()"),F1t.forEach(t),aEr=r(YW,"to load the model weights."),YW.forEach(t),nEr=i(Fi),nbe=n(Fi,"P",{});var C1t=s(nbe);sEr=r(C1t,"Examples:"),C1t.forEach(t),lEr=i(Fi),m(G0.$$.fragment,Fi),Fi.forEach(t),iEr=i(Ti),ko=n(Ti,"DIV",{class:!0});var ka=s(ko);m(X0.$$.fragment,ka),dEr=i(ka),sbe=n(ka,"P",{});var M1t=s(sbe);cEr=r(M1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M1t.forEach(t),fEr=i(ka),Sn=n(ka,"P",{});var jE=s(Sn);mEr=r(jE,"The model class to instantiate is selected based on the "),lbe=n(jE,"CODE",{});var E1t=s(lbe);gEr=r(E1t,"model_type"),E1t.forEach(t),hEr=r(jE,` property of the config object (either
passed as an argument or loaded from `),ibe=n(jE,"CODE",{});var y1t=s(ibe);pEr=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),_Er=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(jE,"CODE",{});var w1t=s(dbe);uEr=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),bEr=r(jE,":"),jE.forEach(t),vEr=i(ka),Ce=n(ka,"UL",{});var lo=s(Ce);XM=n(lo,"LI",{});var aBe=s(XM);cbe=n(aBe,"STRONG",{});var A1t=s(cbe);TEr=r(A1t,"bart"),A1t.forEach(t),FEr=r(aBe," \u2014 "),yV=n(aBe,"A",{href:!0});var L1t=s(yV);CEr=r(L1t,"FlaxBartForConditionalGeneration"),L1t.forEach(t),MEr=r(aBe," (BART model)"),aBe.forEach(t),EEr=i(lo),VM=n(lo,"LI",{});var nBe=s(VM);fbe=n(nBe,"STRONG",{});var B1t=s(fbe);yEr=r(B1t,"blenderbot"),B1t.forEach(t),wEr=r(nBe," \u2014 "),wV=n(nBe,"A",{href:!0});var x1t=s(wV);AEr=r(x1t,"FlaxBlenderbotForConditionalGeneration"),x1t.forEach(t),LEr=r(nBe," (Blenderbot model)"),nBe.forEach(t),BEr=i(lo),zM=n(lo,"LI",{});var sBe=s(zM);mbe=n(sBe,"STRONG",{});var k1t=s(mbe);xEr=r(k1t,"blenderbot-small"),k1t.forEach(t),kEr=r(sBe," \u2014 "),AV=n(sBe,"A",{href:!0});var R1t=s(AV);REr=r(R1t,"FlaxBlenderbotSmallForConditionalGeneration"),R1t.forEach(t),SEr=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),PEr=i(lo),WM=n(lo,"LI",{});var lBe=s(WM);gbe=n(lBe,"STRONG",{});var S1t=s(gbe);$Er=r(S1t,"encoder-decoder"),S1t.forEach(t),IEr=r(lBe," \u2014 "),LV=n(lBe,"A",{href:!0});var P1t=s(LV);jEr=r(P1t,"FlaxEncoderDecoderModel"),P1t.forEach(t),DEr=r(lBe," (Encoder decoder model)"),lBe.forEach(t),NEr=i(lo),QM=n(lo,"LI",{});var iBe=s(QM);hbe=n(iBe,"STRONG",{});var $1t=s(hbe);qEr=r($1t,"marian"),$1t.forEach(t),OEr=r(iBe," \u2014 "),BV=n(iBe,"A",{href:!0});var I1t=s(BV);GEr=r(I1t,"FlaxMarianMTModel"),I1t.forEach(t),XEr=r(iBe," (Marian model)"),iBe.forEach(t),VEr=i(lo),HM=n(lo,"LI",{});var dBe=s(HM);pbe=n(dBe,"STRONG",{});var j1t=s(pbe);zEr=r(j1t,"mbart"),j1t.forEach(t),WEr=r(dBe," \u2014 "),xV=n(dBe,"A",{href:!0});var D1t=s(xV);QEr=r(D1t,"FlaxMBartForConditionalGeneration"),D1t.forEach(t),HEr=r(dBe," (mBART model)"),dBe.forEach(t),UEr=i(lo),UM=n(lo,"LI",{});var cBe=s(UM);_be=n(cBe,"STRONG",{});var N1t=s(_be);JEr=r(N1t,"mt5"),N1t.forEach(t),YEr=r(cBe," \u2014 "),kV=n(cBe,"A",{href:!0});var q1t=s(kV);KEr=r(q1t,"FlaxMT5ForConditionalGeneration"),q1t.forEach(t),ZEr=r(cBe," (mT5 model)"),cBe.forEach(t),e3r=i(lo),JM=n(lo,"LI",{});var fBe=s(JM);ube=n(fBe,"STRONG",{});var O1t=s(ube);o3r=r(O1t,"pegasus"),O1t.forEach(t),r3r=r(fBe," \u2014 "),RV=n(fBe,"A",{href:!0});var G1t=s(RV);t3r=r(G1t,"FlaxPegasusForConditionalGeneration"),G1t.forEach(t),a3r=r(fBe," (Pegasus model)"),fBe.forEach(t),n3r=i(lo),YM=n(lo,"LI",{});var mBe=s(YM);bbe=n(mBe,"STRONG",{});var X1t=s(bbe);s3r=r(X1t,"t5"),X1t.forEach(t),l3r=r(mBe," \u2014 "),SV=n(mBe,"A",{href:!0});var V1t=s(SV);i3r=r(V1t,"FlaxT5ForConditionalGeneration"),V1t.forEach(t),d3r=r(mBe," (T5 model)"),mBe.forEach(t),lo.forEach(t),c3r=i(ka),vbe=n(ka,"P",{});var z1t=s(vbe);f3r=r(z1t,"Examples:"),z1t.forEach(t),m3r=i(ka),m(V0.$$.fragment,ka),ka.forEach(t),Ti.forEach(t),qke=i(d),hf=n(d,"H2",{class:!0});var KSe=s(hf);KM=n(KSe,"A",{id:!0,class:!0,href:!0});var W1t=s(KM);Tbe=n(W1t,"SPAN",{});var Q1t=s(Tbe);m(z0.$$.fragment,Q1t),Q1t.forEach(t),W1t.forEach(t),g3r=i(KSe),Fbe=n(KSe,"SPAN",{});var H1t=s(Fbe);h3r=r(H1t,"FlaxAutoModelForSequenceClassification"),H1t.forEach(t),KSe.forEach(t),Oke=i(d),jr=n(d,"DIV",{class:!0});var Ci=s(jr);m(W0.$$.fragment,Ci),p3r=i(Ci),pf=n(Ci,"P",{});var KW=s(pf);_3r=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cbe=n(KW,"CODE",{});var U1t=s(Cbe);u3r=r(U1t,"from_pretrained()"),U1t.forEach(t),b3r=r(KW,"class method or the "),Mbe=n(KW,"CODE",{});var J1t=s(Mbe);v3r=r(J1t,"from_config()"),J1t.forEach(t),T3r=r(KW,`class
method.`),KW.forEach(t),F3r=i(Ci),Q0=n(Ci,"P",{});var ZSe=s(Q0);C3r=r(ZSe,"This class cannot be instantiated directly using "),Ebe=n(ZSe,"CODE",{});var Y1t=s(Ebe);M3r=r(Y1t,"__init__()"),Y1t.forEach(t),E3r=r(ZSe," (throws an error)."),ZSe.forEach(t),y3r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(H0.$$.fragment,Mi),w3r=i(Mi),ybe=n(Mi,"P",{});var K1t=s(ybe);A3r=r(K1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K1t.forEach(t),L3r=i(Mi),_f=n(Mi,"P",{});var ZW=s(_f);B3r=r(ZW,`Note:
Loading a model from its configuration file does `),wbe=n(ZW,"STRONG",{});var Z1t=s(wbe);x3r=r(Z1t,"not"),Z1t.forEach(t),k3r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Abe=n(ZW,"CODE",{});var ebt=s(Abe);R3r=r(ebt,"from_pretrained()"),ebt.forEach(t),S3r=r(ZW,"to load the model weights."),ZW.forEach(t),P3r=i(Mi),Lbe=n(Mi,"P",{});var obt=s(Lbe);$3r=r(obt,"Examples:"),obt.forEach(t),I3r=i(Mi),m(U0.$$.fragment,Mi),Mi.forEach(t),j3r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Ra=s(Ro);m(J0.$$.fragment,Ra),D3r=i(Ra),Bbe=n(Ra,"P",{});var rbt=s(Bbe);N3r=r(rbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rbt.forEach(t),q3r=i(Ra),Pn=n(Ra,"P",{});var DE=s(Pn);O3r=r(DE,"The model class to instantiate is selected based on the "),xbe=n(DE,"CODE",{});var tbt=s(xbe);G3r=r(tbt,"model_type"),tbt.forEach(t),X3r=r(DE,` property of the config object (either
passed as an argument or loaded from `),kbe=n(DE,"CODE",{});var abt=s(kbe);V3r=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),z3r=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(DE,"CODE",{});var nbt=s(Rbe);W3r=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),Q3r=r(DE,":"),DE.forEach(t),H3r=i(Ra),be=n(Ra,"UL",{});var we=s(be);ZM=n(we,"LI",{});var gBe=s(ZM);Sbe=n(gBe,"STRONG",{});var sbt=s(Sbe);U3r=r(sbt,"albert"),sbt.forEach(t),J3r=r(gBe," \u2014 "),PV=n(gBe,"A",{href:!0});var lbt=s(PV);Y3r=r(lbt,"FlaxAlbertForSequenceClassification"),lbt.forEach(t),K3r=r(gBe," (ALBERT model)"),gBe.forEach(t),Z3r=i(we),e4=n(we,"LI",{});var hBe=s(e4);Pbe=n(hBe,"STRONG",{});var ibt=s(Pbe);eyr=r(ibt,"bart"),ibt.forEach(t),oyr=r(hBe," \u2014 "),$V=n(hBe,"A",{href:!0});var dbt=s($V);ryr=r(dbt,"FlaxBartForSequenceClassification"),dbt.forEach(t),tyr=r(hBe," (BART model)"),hBe.forEach(t),ayr=i(we),o4=n(we,"LI",{});var pBe=s(o4);$be=n(pBe,"STRONG",{});var cbt=s($be);nyr=r(cbt,"bert"),cbt.forEach(t),syr=r(pBe," \u2014 "),IV=n(pBe,"A",{href:!0});var fbt=s(IV);lyr=r(fbt,"FlaxBertForSequenceClassification"),fbt.forEach(t),iyr=r(pBe," (BERT model)"),pBe.forEach(t),dyr=i(we),r4=n(we,"LI",{});var _Be=s(r4);Ibe=n(_Be,"STRONG",{});var mbt=s(Ibe);cyr=r(mbt,"big_bird"),mbt.forEach(t),fyr=r(_Be," \u2014 "),jV=n(_Be,"A",{href:!0});var gbt=s(jV);myr=r(gbt,"FlaxBigBirdForSequenceClassification"),gbt.forEach(t),gyr=r(_Be," (BigBird model)"),_Be.forEach(t),hyr=i(we),t4=n(we,"LI",{});var uBe=s(t4);jbe=n(uBe,"STRONG",{});var hbt=s(jbe);pyr=r(hbt,"distilbert"),hbt.forEach(t),_yr=r(uBe," \u2014 "),DV=n(uBe,"A",{href:!0});var pbt=s(DV);uyr=r(pbt,"FlaxDistilBertForSequenceClassification"),pbt.forEach(t),byr=r(uBe," (DistilBERT model)"),uBe.forEach(t),vyr=i(we),a4=n(we,"LI",{});var bBe=s(a4);Dbe=n(bBe,"STRONG",{});var _bt=s(Dbe);Tyr=r(_bt,"electra"),_bt.forEach(t),Fyr=r(bBe," \u2014 "),NV=n(bBe,"A",{href:!0});var ubt=s(NV);Cyr=r(ubt,"FlaxElectraForSequenceClassification"),ubt.forEach(t),Myr=r(bBe," (ELECTRA model)"),bBe.forEach(t),Eyr=i(we),n4=n(we,"LI",{});var vBe=s(n4);Nbe=n(vBe,"STRONG",{});var bbt=s(Nbe);yyr=r(bbt,"mbart"),bbt.forEach(t),wyr=r(vBe," \u2014 "),qV=n(vBe,"A",{href:!0});var vbt=s(qV);Ayr=r(vbt,"FlaxMBartForSequenceClassification"),vbt.forEach(t),Lyr=r(vBe," (mBART model)"),vBe.forEach(t),Byr=i(we),s4=n(we,"LI",{});var TBe=s(s4);qbe=n(TBe,"STRONG",{});var Tbt=s(qbe);xyr=r(Tbt,"roberta"),Tbt.forEach(t),kyr=r(TBe," \u2014 "),OV=n(TBe,"A",{href:!0});var Fbt=s(OV);Ryr=r(Fbt,"FlaxRobertaForSequenceClassification"),Fbt.forEach(t),Syr=r(TBe," (RoBERTa model)"),TBe.forEach(t),Pyr=i(we),l4=n(we,"LI",{});var FBe=s(l4);Obe=n(FBe,"STRONG",{});var Cbt=s(Obe);$yr=r(Cbt,"roformer"),Cbt.forEach(t),Iyr=r(FBe," \u2014 "),GV=n(FBe,"A",{href:!0});var Mbt=s(GV);jyr=r(Mbt,"FlaxRoFormerForSequenceClassification"),Mbt.forEach(t),Dyr=r(FBe," (RoFormer model)"),FBe.forEach(t),Nyr=i(we),i4=n(we,"LI",{});var CBe=s(i4);Gbe=n(CBe,"STRONG",{});var Ebt=s(Gbe);qyr=r(Ebt,"xlm-roberta"),Ebt.forEach(t),Oyr=r(CBe," \u2014 "),XV=n(CBe,"A",{href:!0});var ybt=s(XV);Gyr=r(ybt,"FlaxXLMRobertaForSequenceClassification"),ybt.forEach(t),Xyr=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),we.forEach(t),Vyr=i(Ra),Xbe=n(Ra,"P",{});var wbt=s(Xbe);zyr=r(wbt,"Examples:"),wbt.forEach(t),Wyr=i(Ra),m(Y0.$$.fragment,Ra),Ra.forEach(t),Ci.forEach(t),Gke=i(d),uf=n(d,"H2",{class:!0});var ePe=s(uf);d4=n(ePe,"A",{id:!0,class:!0,href:!0});var Abt=s(d4);Vbe=n(Abt,"SPAN",{});var Lbt=s(Vbe);m(K0.$$.fragment,Lbt),Lbt.forEach(t),Abt.forEach(t),Qyr=i(ePe),zbe=n(ePe,"SPAN",{});var Bbt=s(zbe);Hyr=r(Bbt,"FlaxAutoModelForQuestionAnswering"),Bbt.forEach(t),ePe.forEach(t),Xke=i(d),Dr=n(d,"DIV",{class:!0});var Ei=s(Dr);m(Z0.$$.fragment,Ei),Uyr=i(Ei),bf=n(Ei,"P",{});var eQ=s(bf);Jyr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wbe=n(eQ,"CODE",{});var xbt=s(Wbe);Yyr=r(xbt,"from_pretrained()"),xbt.forEach(t),Kyr=r(eQ,"class method or the "),Qbe=n(eQ,"CODE",{});var kbt=s(Qbe);Zyr=r(kbt,"from_config()"),kbt.forEach(t),ewr=r(eQ,`class
method.`),eQ.forEach(t),owr=i(Ei),eL=n(Ei,"P",{});var oPe=s(eL);rwr=r(oPe,"This class cannot be instantiated directly using "),Hbe=n(oPe,"CODE",{});var Rbt=s(Hbe);twr=r(Rbt,"__init__()"),Rbt.forEach(t),awr=r(oPe," (throws an error)."),oPe.forEach(t),nwr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(oL.$$.fragment,yi),swr=i(yi),Ube=n(yi,"P",{});var Sbt=s(Ube);lwr=r(Sbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Sbt.forEach(t),iwr=i(yi),vf=n(yi,"P",{});var oQ=s(vf);dwr=r(oQ,`Note:
Loading a model from its configuration file does `),Jbe=n(oQ,"STRONG",{});var Pbt=s(Jbe);cwr=r(Pbt,"not"),Pbt.forEach(t),fwr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ybe=n(oQ,"CODE",{});var $bt=s(Ybe);mwr=r($bt,"from_pretrained()"),$bt.forEach(t),gwr=r(oQ,"to load the model weights."),oQ.forEach(t),hwr=i(yi),Kbe=n(yi,"P",{});var Ibt=s(Kbe);pwr=r(Ibt,"Examples:"),Ibt.forEach(t),_wr=i(yi),m(rL.$$.fragment,yi),yi.forEach(t),uwr=i(Ei),So=n(Ei,"DIV",{class:!0});var Sa=s(So);m(tL.$$.fragment,Sa),bwr=i(Sa),Zbe=n(Sa,"P",{});var jbt=s(Zbe);vwr=r(jbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jbt.forEach(t),Twr=i(Sa),$n=n(Sa,"P",{});var NE=s($n);Fwr=r(NE,"The model class to instantiate is selected based on the "),eve=n(NE,"CODE",{});var Dbt=s(eve);Cwr=r(Dbt,"model_type"),Dbt.forEach(t),Mwr=r(NE,` property of the config object (either
passed as an argument or loaded from `),ove=n(NE,"CODE",{});var Nbt=s(ove);Ewr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),ywr=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(NE,"CODE",{});var qbt=s(rve);wwr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Awr=r(NE,":"),NE.forEach(t),Lwr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);c4=n(Ae,"LI",{});var MBe=s(c4);tve=n(MBe,"STRONG",{});var Obt=s(tve);Bwr=r(Obt,"albert"),Obt.forEach(t),xwr=r(MBe," \u2014 "),VV=n(MBe,"A",{href:!0});var Gbt=s(VV);kwr=r(Gbt,"FlaxAlbertForQuestionAnswering"),Gbt.forEach(t),Rwr=r(MBe," (ALBERT model)"),MBe.forEach(t),Swr=i(Ae),f4=n(Ae,"LI",{});var EBe=s(f4);ave=n(EBe,"STRONG",{});var Xbt=s(ave);Pwr=r(Xbt,"bart"),Xbt.forEach(t),$wr=r(EBe," \u2014 "),zV=n(EBe,"A",{href:!0});var Vbt=s(zV);Iwr=r(Vbt,"FlaxBartForQuestionAnswering"),Vbt.forEach(t),jwr=r(EBe," (BART model)"),EBe.forEach(t),Dwr=i(Ae),m4=n(Ae,"LI",{});var yBe=s(m4);nve=n(yBe,"STRONG",{});var zbt=s(nve);Nwr=r(zbt,"bert"),zbt.forEach(t),qwr=r(yBe," \u2014 "),WV=n(yBe,"A",{href:!0});var Wbt=s(WV);Owr=r(Wbt,"FlaxBertForQuestionAnswering"),Wbt.forEach(t),Gwr=r(yBe," (BERT model)"),yBe.forEach(t),Xwr=i(Ae),g4=n(Ae,"LI",{});var wBe=s(g4);sve=n(wBe,"STRONG",{});var Qbt=s(sve);Vwr=r(Qbt,"big_bird"),Qbt.forEach(t),zwr=r(wBe," \u2014 "),QV=n(wBe,"A",{href:!0});var Hbt=s(QV);Wwr=r(Hbt,"FlaxBigBirdForQuestionAnswering"),Hbt.forEach(t),Qwr=r(wBe," (BigBird model)"),wBe.forEach(t),Hwr=i(Ae),h4=n(Ae,"LI",{});var ABe=s(h4);lve=n(ABe,"STRONG",{});var Ubt=s(lve);Uwr=r(Ubt,"distilbert"),Ubt.forEach(t),Jwr=r(ABe," \u2014 "),HV=n(ABe,"A",{href:!0});var Jbt=s(HV);Ywr=r(Jbt,"FlaxDistilBertForQuestionAnswering"),Jbt.forEach(t),Kwr=r(ABe," (DistilBERT model)"),ABe.forEach(t),Zwr=i(Ae),p4=n(Ae,"LI",{});var LBe=s(p4);ive=n(LBe,"STRONG",{});var Ybt=s(ive);e6r=r(Ybt,"electra"),Ybt.forEach(t),o6r=r(LBe," \u2014 "),UV=n(LBe,"A",{href:!0});var Kbt=s(UV);r6r=r(Kbt,"FlaxElectraForQuestionAnswering"),Kbt.forEach(t),t6r=r(LBe," (ELECTRA model)"),LBe.forEach(t),a6r=i(Ae),_4=n(Ae,"LI",{});var BBe=s(_4);dve=n(BBe,"STRONG",{});var Zbt=s(dve);n6r=r(Zbt,"mbart"),Zbt.forEach(t),s6r=r(BBe," \u2014 "),JV=n(BBe,"A",{href:!0});var evt=s(JV);l6r=r(evt,"FlaxMBartForQuestionAnswering"),evt.forEach(t),i6r=r(BBe," (mBART model)"),BBe.forEach(t),d6r=i(Ae),u4=n(Ae,"LI",{});var xBe=s(u4);cve=n(xBe,"STRONG",{});var ovt=s(cve);c6r=r(ovt,"roberta"),ovt.forEach(t),f6r=r(xBe," \u2014 "),YV=n(xBe,"A",{href:!0});var rvt=s(YV);m6r=r(rvt,"FlaxRobertaForQuestionAnswering"),rvt.forEach(t),g6r=r(xBe," (RoBERTa model)"),xBe.forEach(t),h6r=i(Ae),b4=n(Ae,"LI",{});var kBe=s(b4);fve=n(kBe,"STRONG",{});var tvt=s(fve);p6r=r(tvt,"roformer"),tvt.forEach(t),_6r=r(kBe," \u2014 "),KV=n(kBe,"A",{href:!0});var avt=s(KV);u6r=r(avt,"FlaxRoFormerForQuestionAnswering"),avt.forEach(t),b6r=r(kBe," (RoFormer model)"),kBe.forEach(t),v6r=i(Ae),v4=n(Ae,"LI",{});var RBe=s(v4);mve=n(RBe,"STRONG",{});var nvt=s(mve);T6r=r(nvt,"xlm-roberta"),nvt.forEach(t),F6r=r(RBe," \u2014 "),ZV=n(RBe,"A",{href:!0});var svt=s(ZV);C6r=r(svt,"FlaxXLMRobertaForQuestionAnswering"),svt.forEach(t),M6r=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),Ae.forEach(t),E6r=i(Sa),gve=n(Sa,"P",{});var lvt=s(gve);y6r=r(lvt,"Examples:"),lvt.forEach(t),w6r=i(Sa),m(aL.$$.fragment,Sa),Sa.forEach(t),Ei.forEach(t),Vke=i(d),Tf=n(d,"H2",{class:!0});var rPe=s(Tf);T4=n(rPe,"A",{id:!0,class:!0,href:!0});var ivt=s(T4);hve=n(ivt,"SPAN",{});var dvt=s(hve);m(nL.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),A6r=i(rPe),pve=n(rPe,"SPAN",{});var cvt=s(pve);L6r=r(cvt,"FlaxAutoModelForTokenClassification"),cvt.forEach(t),rPe.forEach(t),zke=i(d),Nr=n(d,"DIV",{class:!0});var wi=s(Nr);m(sL.$$.fragment,wi),B6r=i(wi),Ff=n(wi,"P",{});var rQ=s(Ff);x6r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_ve=n(rQ,"CODE",{});var fvt=s(_ve);k6r=r(fvt,"from_pretrained()"),fvt.forEach(t),R6r=r(rQ,"class method or the "),uve=n(rQ,"CODE",{});var mvt=s(uve);S6r=r(mvt,"from_config()"),mvt.forEach(t),P6r=r(rQ,`class
method.`),rQ.forEach(t),$6r=i(wi),lL=n(wi,"P",{});var tPe=s(lL);I6r=r(tPe,"This class cannot be instantiated directly using "),bve=n(tPe,"CODE",{});var gvt=s(bve);j6r=r(gvt,"__init__()"),gvt.forEach(t),D6r=r(tPe," (throws an error)."),tPe.forEach(t),N6r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(iL.$$.fragment,Ai),q6r=i(Ai),vve=n(Ai,"P",{});var hvt=s(vve);O6r=r(hvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hvt.forEach(t),G6r=i(Ai),Cf=n(Ai,"P",{});var tQ=s(Cf);X6r=r(tQ,`Note:
Loading a model from its configuration file does `),Tve=n(tQ,"STRONG",{});var pvt=s(Tve);V6r=r(pvt,"not"),pvt.forEach(t),z6r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fve=n(tQ,"CODE",{});var _vt=s(Fve);W6r=r(_vt,"from_pretrained()"),_vt.forEach(t),Q6r=r(tQ,"to load the model weights."),tQ.forEach(t),H6r=i(Ai),Cve=n(Ai,"P",{});var uvt=s(Cve);U6r=r(uvt,"Examples:"),uvt.forEach(t),J6r=i(Ai),m(dL.$$.fragment,Ai),Ai.forEach(t),Y6r=i(wi),Po=n(wi,"DIV",{class:!0});var Pa=s(Po);m(cL.$$.fragment,Pa),K6r=i(Pa),Mve=n(Pa,"P",{});var bvt=s(Mve);Z6r=r(bvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bvt.forEach(t),eAr=i(Pa),In=n(Pa,"P",{});var qE=s(In);oAr=r(qE,"The model class to instantiate is selected based on the "),Eve=n(qE,"CODE",{});var vvt=s(Eve);rAr=r(vvt,"model_type"),vvt.forEach(t),tAr=r(qE,` property of the config object (either
passed as an argument or loaded from `),yve=n(qE,"CODE",{});var Tvt=s(yve);aAr=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),nAr=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(qE,"CODE",{});var Fvt=s(wve);sAr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),lAr=r(qE,":"),qE.forEach(t),iAr=i(Pa),Re=n(Pa,"UL",{});var Go=s(Re);F4=n(Go,"LI",{});var SBe=s(F4);Ave=n(SBe,"STRONG",{});var Cvt=s(Ave);dAr=r(Cvt,"albert"),Cvt.forEach(t),cAr=r(SBe," \u2014 "),ez=n(SBe,"A",{href:!0});var Mvt=s(ez);fAr=r(Mvt,"FlaxAlbertForTokenClassification"),Mvt.forEach(t),mAr=r(SBe," (ALBERT model)"),SBe.forEach(t),gAr=i(Go),C4=n(Go,"LI",{});var PBe=s(C4);Lve=n(PBe,"STRONG",{});var Evt=s(Lve);hAr=r(Evt,"bert"),Evt.forEach(t),pAr=r(PBe," \u2014 "),oz=n(PBe,"A",{href:!0});var yvt=s(oz);_Ar=r(yvt,"FlaxBertForTokenClassification"),yvt.forEach(t),uAr=r(PBe," (BERT model)"),PBe.forEach(t),bAr=i(Go),M4=n(Go,"LI",{});var $Be=s(M4);Bve=n($Be,"STRONG",{});var wvt=s(Bve);vAr=r(wvt,"big_bird"),wvt.forEach(t),TAr=r($Be," \u2014 "),rz=n($Be,"A",{href:!0});var Avt=s(rz);FAr=r(Avt,"FlaxBigBirdForTokenClassification"),Avt.forEach(t),CAr=r($Be," (BigBird model)"),$Be.forEach(t),MAr=i(Go),E4=n(Go,"LI",{});var IBe=s(E4);xve=n(IBe,"STRONG",{});var Lvt=s(xve);EAr=r(Lvt,"distilbert"),Lvt.forEach(t),yAr=r(IBe," \u2014 "),tz=n(IBe,"A",{href:!0});var Bvt=s(tz);wAr=r(Bvt,"FlaxDistilBertForTokenClassification"),Bvt.forEach(t),AAr=r(IBe," (DistilBERT model)"),IBe.forEach(t),LAr=i(Go),y4=n(Go,"LI",{});var jBe=s(y4);kve=n(jBe,"STRONG",{});var xvt=s(kve);BAr=r(xvt,"electra"),xvt.forEach(t),xAr=r(jBe," \u2014 "),az=n(jBe,"A",{href:!0});var kvt=s(az);kAr=r(kvt,"FlaxElectraForTokenClassification"),kvt.forEach(t),RAr=r(jBe," (ELECTRA model)"),jBe.forEach(t),SAr=i(Go),w4=n(Go,"LI",{});var DBe=s(w4);Rve=n(DBe,"STRONG",{});var Rvt=s(Rve);PAr=r(Rvt,"roberta"),Rvt.forEach(t),$Ar=r(DBe," \u2014 "),nz=n(DBe,"A",{href:!0});var Svt=s(nz);IAr=r(Svt,"FlaxRobertaForTokenClassification"),Svt.forEach(t),jAr=r(DBe," (RoBERTa model)"),DBe.forEach(t),DAr=i(Go),A4=n(Go,"LI",{});var NBe=s(A4);Sve=n(NBe,"STRONG",{});var Pvt=s(Sve);NAr=r(Pvt,"roformer"),Pvt.forEach(t),qAr=r(NBe," \u2014 "),sz=n(NBe,"A",{href:!0});var $vt=s(sz);OAr=r($vt,"FlaxRoFormerForTokenClassification"),$vt.forEach(t),GAr=r(NBe," (RoFormer model)"),NBe.forEach(t),XAr=i(Go),L4=n(Go,"LI",{});var qBe=s(L4);Pve=n(qBe,"STRONG",{});var Ivt=s(Pve);VAr=r(Ivt,"xlm-roberta"),Ivt.forEach(t),zAr=r(qBe," \u2014 "),lz=n(qBe,"A",{href:!0});var jvt=s(lz);WAr=r(jvt,"FlaxXLMRobertaForTokenClassification"),jvt.forEach(t),QAr=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),Go.forEach(t),HAr=i(Pa),$ve=n(Pa,"P",{});var Dvt=s($ve);UAr=r(Dvt,"Examples:"),Dvt.forEach(t),JAr=i(Pa),m(fL.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),Wke=i(d),Mf=n(d,"H2",{class:!0});var aPe=s(Mf);B4=n(aPe,"A",{id:!0,class:!0,href:!0});var Nvt=s(B4);Ive=n(Nvt,"SPAN",{});var qvt=s(Ive);m(mL.$$.fragment,qvt),qvt.forEach(t),Nvt.forEach(t),YAr=i(aPe),jve=n(aPe,"SPAN",{});var Ovt=s(jve);KAr=r(Ovt,"FlaxAutoModelForMultipleChoice"),Ovt.forEach(t),aPe.forEach(t),Qke=i(d),qr=n(d,"DIV",{class:!0});var Li=s(qr);m(gL.$$.fragment,Li),ZAr=i(Li),Ef=n(Li,"P",{});var aQ=s(Ef);e0r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Dve=n(aQ,"CODE",{});var Gvt=s(Dve);o0r=r(Gvt,"from_pretrained()"),Gvt.forEach(t),r0r=r(aQ,"class method or the "),Nve=n(aQ,"CODE",{});var Xvt=s(Nve);t0r=r(Xvt,"from_config()"),Xvt.forEach(t),a0r=r(aQ,`class
method.`),aQ.forEach(t),n0r=i(Li),hL=n(Li,"P",{});var nPe=s(hL);s0r=r(nPe,"This class cannot be instantiated directly using "),qve=n(nPe,"CODE",{});var Vvt=s(qve);l0r=r(Vvt,"__init__()"),Vvt.forEach(t),i0r=r(nPe," (throws an error)."),nPe.forEach(t),d0r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(pL.$$.fragment,Bi),c0r=i(Bi),Ove=n(Bi,"P",{});var zvt=s(Ove);f0r=r(zvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zvt.forEach(t),m0r=i(Bi),yf=n(Bi,"P",{});var nQ=s(yf);g0r=r(nQ,`Note:
Loading a model from its configuration file does `),Gve=n(nQ,"STRONG",{});var Wvt=s(Gve);h0r=r(Wvt,"not"),Wvt.forEach(t),p0r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xve=n(nQ,"CODE",{});var Qvt=s(Xve);_0r=r(Qvt,"from_pretrained()"),Qvt.forEach(t),u0r=r(nQ,"to load the model weights."),nQ.forEach(t),b0r=i(Bi),Vve=n(Bi,"P",{});var Hvt=s(Vve);v0r=r(Hvt,"Examples:"),Hvt.forEach(t),T0r=i(Bi),m(_L.$$.fragment,Bi),Bi.forEach(t),F0r=i(Li),$o=n(Li,"DIV",{class:!0});var $a=s($o);m(uL.$$.fragment,$a),C0r=i($a),zve=n($a,"P",{});var Uvt=s(zve);M0r=r(Uvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uvt.forEach(t),E0r=i($a),jn=n($a,"P",{});var OE=s(jn);y0r=r(OE,"The model class to instantiate is selected based on the "),Wve=n(OE,"CODE",{});var Jvt=s(Wve);w0r=r(Jvt,"model_type"),Jvt.forEach(t),A0r=r(OE,` property of the config object (either
passed as an argument or loaded from `),Qve=n(OE,"CODE",{});var Yvt=s(Qve);L0r=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),B0r=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(OE,"CODE",{});var Kvt=s(Hve);x0r=r(Kvt,"pretrained_model_name_or_path"),Kvt.forEach(t),k0r=r(OE,":"),OE.forEach(t),R0r=i($a),Se=n($a,"UL",{});var Xo=s(Se);x4=n(Xo,"LI",{});var OBe=s(x4);Uve=n(OBe,"STRONG",{});var Zvt=s(Uve);S0r=r(Zvt,"albert"),Zvt.forEach(t),P0r=r(OBe," \u2014 "),iz=n(OBe,"A",{href:!0});var eTt=s(iz);$0r=r(eTt,"FlaxAlbertForMultipleChoice"),eTt.forEach(t),I0r=r(OBe," (ALBERT model)"),OBe.forEach(t),j0r=i(Xo),k4=n(Xo,"LI",{});var GBe=s(k4);Jve=n(GBe,"STRONG",{});var oTt=s(Jve);D0r=r(oTt,"bert"),oTt.forEach(t),N0r=r(GBe," \u2014 "),dz=n(GBe,"A",{href:!0});var rTt=s(dz);q0r=r(rTt,"FlaxBertForMultipleChoice"),rTt.forEach(t),O0r=r(GBe," (BERT model)"),GBe.forEach(t),G0r=i(Xo),R4=n(Xo,"LI",{});var XBe=s(R4);Yve=n(XBe,"STRONG",{});var tTt=s(Yve);X0r=r(tTt,"big_bird"),tTt.forEach(t),V0r=r(XBe," \u2014 "),cz=n(XBe,"A",{href:!0});var aTt=s(cz);z0r=r(aTt,"FlaxBigBirdForMultipleChoice"),aTt.forEach(t),W0r=r(XBe," (BigBird model)"),XBe.forEach(t),Q0r=i(Xo),S4=n(Xo,"LI",{});var VBe=s(S4);Kve=n(VBe,"STRONG",{});var nTt=s(Kve);H0r=r(nTt,"distilbert"),nTt.forEach(t),U0r=r(VBe," \u2014 "),fz=n(VBe,"A",{href:!0});var sTt=s(fz);J0r=r(sTt,"FlaxDistilBertForMultipleChoice"),sTt.forEach(t),Y0r=r(VBe," (DistilBERT model)"),VBe.forEach(t),K0r=i(Xo),P4=n(Xo,"LI",{});var zBe=s(P4);Zve=n(zBe,"STRONG",{});var lTt=s(Zve);Z0r=r(lTt,"electra"),lTt.forEach(t),eLr=r(zBe," \u2014 "),mz=n(zBe,"A",{href:!0});var iTt=s(mz);oLr=r(iTt,"FlaxElectraForMultipleChoice"),iTt.forEach(t),rLr=r(zBe," (ELECTRA model)"),zBe.forEach(t),tLr=i(Xo),$4=n(Xo,"LI",{});var WBe=s($4);eTe=n(WBe,"STRONG",{});var dTt=s(eTe);aLr=r(dTt,"roberta"),dTt.forEach(t),nLr=r(WBe," \u2014 "),gz=n(WBe,"A",{href:!0});var cTt=s(gz);sLr=r(cTt,"FlaxRobertaForMultipleChoice"),cTt.forEach(t),lLr=r(WBe," (RoBERTa model)"),WBe.forEach(t),iLr=i(Xo),I4=n(Xo,"LI",{});var QBe=s(I4);oTe=n(QBe,"STRONG",{});var fTt=s(oTe);dLr=r(fTt,"roformer"),fTt.forEach(t),cLr=r(QBe," \u2014 "),hz=n(QBe,"A",{href:!0});var mTt=s(hz);fLr=r(mTt,"FlaxRoFormerForMultipleChoice"),mTt.forEach(t),mLr=r(QBe," (RoFormer model)"),QBe.forEach(t),gLr=i(Xo),j4=n(Xo,"LI",{});var HBe=s(j4);rTe=n(HBe,"STRONG",{});var gTt=s(rTe);hLr=r(gTt,"xlm-roberta"),gTt.forEach(t),pLr=r(HBe," \u2014 "),pz=n(HBe,"A",{href:!0});var hTt=s(pz);_Lr=r(hTt,"FlaxXLMRobertaForMultipleChoice"),hTt.forEach(t),uLr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Xo.forEach(t),bLr=i($a),tTe=n($a,"P",{});var pTt=s(tTe);vLr=r(pTt,"Examples:"),pTt.forEach(t),TLr=i($a),m(bL.$$.fragment,$a),$a.forEach(t),Li.forEach(t),Hke=i(d),wf=n(d,"H2",{class:!0});var sPe=s(wf);D4=n(sPe,"A",{id:!0,class:!0,href:!0});var _Tt=s(D4);aTe=n(_Tt,"SPAN",{});var uTt=s(aTe);m(vL.$$.fragment,uTt),uTt.forEach(t),_Tt.forEach(t),FLr=i(sPe),nTe=n(sPe,"SPAN",{});var bTt=s(nTe);CLr=r(bTt,"FlaxAutoModelForNextSentencePrediction"),bTt.forEach(t),sPe.forEach(t),Uke=i(d),Or=n(d,"DIV",{class:!0});var xi=s(Or);m(TL.$$.fragment,xi),MLr=i(xi),Af=n(xi,"P",{});var sQ=s(Af);ELr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sTe=n(sQ,"CODE",{});var vTt=s(sTe);yLr=r(vTt,"from_pretrained()"),vTt.forEach(t),wLr=r(sQ,"class method or the "),lTe=n(sQ,"CODE",{});var TTt=s(lTe);ALr=r(TTt,"from_config()"),TTt.forEach(t),LLr=r(sQ,`class
method.`),sQ.forEach(t),BLr=i(xi),FL=n(xi,"P",{});var lPe=s(FL);xLr=r(lPe,"This class cannot be instantiated directly using "),iTe=n(lPe,"CODE",{});var FTt=s(iTe);kLr=r(FTt,"__init__()"),FTt.forEach(t),RLr=r(lPe," (throws an error)."),lPe.forEach(t),SLr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(CL.$$.fragment,ki),PLr=i(ki),dTe=n(ki,"P",{});var CTt=s(dTe);$Lr=r(CTt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CTt.forEach(t),ILr=i(ki),Lf=n(ki,"P",{});var lQ=s(Lf);jLr=r(lQ,`Note:
Loading a model from its configuration file does `),cTe=n(lQ,"STRONG",{});var MTt=s(cTe);DLr=r(MTt,"not"),MTt.forEach(t),NLr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fTe=n(lQ,"CODE",{});var ETt=s(fTe);qLr=r(ETt,"from_pretrained()"),ETt.forEach(t),OLr=r(lQ,"to load the model weights."),lQ.forEach(t),GLr=i(ki),mTe=n(ki,"P",{});var yTt=s(mTe);XLr=r(yTt,"Examples:"),yTt.forEach(t),VLr=i(ki),m(ML.$$.fragment,ki),ki.forEach(t),zLr=i(xi),Io=n(xi,"DIV",{class:!0});var Ia=s(Io);m(EL.$$.fragment,Ia),WLr=i(Ia),gTe=n(Ia,"P",{});var wTt=s(gTe);QLr=r(wTt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wTt.forEach(t),HLr=i(Ia),Dn=n(Ia,"P",{});var GE=s(Dn);ULr=r(GE,"The model class to instantiate is selected based on the "),hTe=n(GE,"CODE",{});var ATt=s(hTe);JLr=r(ATt,"model_type"),ATt.forEach(t),YLr=r(GE,` property of the config object (either
passed as an argument or loaded from `),pTe=n(GE,"CODE",{});var LTt=s(pTe);KLr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),ZLr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(GE,"CODE",{});var BTt=s(_Te);e8r=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),o8r=r(GE,":"),GE.forEach(t),r8r=i(Ia),uTe=n(Ia,"UL",{});var xTt=s(uTe);N4=n(xTt,"LI",{});var UBe=s(N4);bTe=n(UBe,"STRONG",{});var kTt=s(bTe);t8r=r(kTt,"bert"),kTt.forEach(t),a8r=r(UBe," \u2014 "),_z=n(UBe,"A",{href:!0});var RTt=s(_z);n8r=r(RTt,"FlaxBertForNextSentencePrediction"),RTt.forEach(t),s8r=r(UBe," (BERT model)"),UBe.forEach(t),xTt.forEach(t),l8r=i(Ia),vTe=n(Ia,"P",{});var STt=s(vTe);i8r=r(STt,"Examples:"),STt.forEach(t),d8r=i(Ia),m(yL.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),Jke=i(d),Bf=n(d,"H2",{class:!0});var iPe=s(Bf);q4=n(iPe,"A",{id:!0,class:!0,href:!0});var PTt=s(q4);TTe=n(PTt,"SPAN",{});var $Tt=s(TTe);m(wL.$$.fragment,$Tt),$Tt.forEach(t),PTt.forEach(t),c8r=i(iPe),FTe=n(iPe,"SPAN",{});var ITt=s(FTe);f8r=r(ITt,"FlaxAutoModelForImageClassification"),ITt.forEach(t),iPe.forEach(t),Yke=i(d),Gr=n(d,"DIV",{class:!0});var Ri=s(Gr);m(AL.$$.fragment,Ri),m8r=i(Ri),xf=n(Ri,"P",{});var iQ=s(xf);g8r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CTe=n(iQ,"CODE",{});var jTt=s(CTe);h8r=r(jTt,"from_pretrained()"),jTt.forEach(t),p8r=r(iQ,"class method or the "),MTe=n(iQ,"CODE",{});var DTt=s(MTe);_8r=r(DTt,"from_config()"),DTt.forEach(t),u8r=r(iQ,`class
method.`),iQ.forEach(t),b8r=i(Ri),LL=n(Ri,"P",{});var dPe=s(LL);v8r=r(dPe,"This class cannot be instantiated directly using "),ETe=n(dPe,"CODE",{});var NTt=s(ETe);T8r=r(NTt,"__init__()"),NTt.forEach(t),F8r=r(dPe," (throws an error)."),dPe.forEach(t),C8r=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(BL.$$.fragment,Si),M8r=i(Si),yTe=n(Si,"P",{});var qTt=s(yTe);E8r=r(qTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qTt.forEach(t),y8r=i(Si),kf=n(Si,"P",{});var dQ=s(kf);w8r=r(dQ,`Note:
Loading a model from its configuration file does `),wTe=n(dQ,"STRONG",{});var OTt=s(wTe);A8r=r(OTt,"not"),OTt.forEach(t),L8r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ATe=n(dQ,"CODE",{});var GTt=s(ATe);B8r=r(GTt,"from_pretrained()"),GTt.forEach(t),x8r=r(dQ,"to load the model weights."),dQ.forEach(t),k8r=i(Si),LTe=n(Si,"P",{});var XTt=s(LTe);R8r=r(XTt,"Examples:"),XTt.forEach(t),S8r=i(Si),m(xL.$$.fragment,Si),Si.forEach(t),P8r=i(Ri),jo=n(Ri,"DIV",{class:!0});var ja=s(jo);m(kL.$$.fragment,ja),$8r=i(ja),BTe=n(ja,"P",{});var VTt=s(BTe);I8r=r(VTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VTt.forEach(t),j8r=i(ja),Nn=n(ja,"P",{});var XE=s(Nn);D8r=r(XE,"The model class to instantiate is selected based on the "),xTe=n(XE,"CODE",{});var zTt=s(xTe);N8r=r(zTt,"model_type"),zTt.forEach(t),q8r=r(XE,` property of the config object (either
passed as an argument or loaded from `),kTe=n(XE,"CODE",{});var WTt=s(kTe);O8r=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),G8r=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(XE,"CODE",{});var QTt=s(RTe);X8r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),V8r=r(XE,":"),XE.forEach(t),z8r=i(ja),RL=n(ja,"UL",{});var cPe=s(RL);O4=n(cPe,"LI",{});var JBe=s(O4);STe=n(JBe,"STRONG",{});var HTt=s(STe);W8r=r(HTt,"beit"),HTt.forEach(t),Q8r=r(JBe," \u2014 "),uz=n(JBe,"A",{href:!0});var UTt=s(uz);H8r=r(UTt,"FlaxBeitForImageClassification"),UTt.forEach(t),U8r=r(JBe," (BEiT model)"),JBe.forEach(t),J8r=i(cPe),G4=n(cPe,"LI",{});var YBe=s(G4);PTe=n(YBe,"STRONG",{});var JTt=s(PTe);Y8r=r(JTt,"vit"),JTt.forEach(t),K8r=r(YBe," \u2014 "),bz=n(YBe,"A",{href:!0});var YTt=s(bz);Z8r=r(YTt,"FlaxViTForImageClassification"),YTt.forEach(t),e7r=r(YBe," (ViT model)"),YBe.forEach(t),cPe.forEach(t),o7r=i(ja),$Te=n(ja,"P",{});var KTt=s($Te);r7r=r(KTt,"Examples:"),KTt.forEach(t),t7r=i(ja),m(SL.$$.fragment,ja),ja.forEach(t),Ri.forEach(t),Kke=i(d),Rf=n(d,"H2",{class:!0});var fPe=s(Rf);X4=n(fPe,"A",{id:!0,class:!0,href:!0});var ZTt=s(X4);ITe=n(ZTt,"SPAN",{});var eFt=s(ITe);m(PL.$$.fragment,eFt),eFt.forEach(t),ZTt.forEach(t),a7r=i(fPe),jTe=n(fPe,"SPAN",{});var oFt=s(jTe);n7r=r(oFt,"FlaxAutoModelForVision2Seq"),oFt.forEach(t),fPe.forEach(t),Zke=i(d),Xr=n(d,"DIV",{class:!0});var Pi=s(Xr);m($L.$$.fragment,Pi),s7r=i(Pi),Sf=n(Pi,"P",{});var cQ=s(Sf);l7r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DTe=n(cQ,"CODE",{});var rFt=s(DTe);i7r=r(rFt,"from_pretrained()"),rFt.forEach(t),d7r=r(cQ,"class method or the "),NTe=n(cQ,"CODE",{});var tFt=s(NTe);c7r=r(tFt,"from_config()"),tFt.forEach(t),f7r=r(cQ,`class
method.`),cQ.forEach(t),m7r=i(Pi),IL=n(Pi,"P",{});var mPe=s(IL);g7r=r(mPe,"This class cannot be instantiated directly using "),qTe=n(mPe,"CODE",{});var aFt=s(qTe);h7r=r(aFt,"__init__()"),aFt.forEach(t),p7r=r(mPe," (throws an error)."),mPe.forEach(t),_7r=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(jL.$$.fragment,$i),u7r=i($i),OTe=n($i,"P",{});var nFt=s(OTe);b7r=r(nFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nFt.forEach(t),v7r=i($i),Pf=n($i,"P",{});var fQ=s(Pf);T7r=r(fQ,`Note:
Loading a model from its configuration file does `),GTe=n(fQ,"STRONG",{});var sFt=s(GTe);F7r=r(sFt,"not"),sFt.forEach(t),C7r=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XTe=n(fQ,"CODE",{});var lFt=s(XTe);M7r=r(lFt,"from_pretrained()"),lFt.forEach(t),E7r=r(fQ,"to load the model weights."),fQ.forEach(t),y7r=i($i),VTe=n($i,"P",{});var iFt=s(VTe);w7r=r(iFt,"Examples:"),iFt.forEach(t),A7r=i($i),m(DL.$$.fragment,$i),$i.forEach(t),L7r=i(Pi),Do=n(Pi,"DIV",{class:!0});var Da=s(Do);m(NL.$$.fragment,Da),B7r=i(Da),zTe=n(Da,"P",{});var dFt=s(zTe);x7r=r(dFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dFt.forEach(t),k7r=i(Da),qn=n(Da,"P",{});var VE=s(qn);R7r=r(VE,"The model class to instantiate is selected based on the "),WTe=n(VE,"CODE",{});var cFt=s(WTe);S7r=r(cFt,"model_type"),cFt.forEach(t),P7r=r(VE,` property of the config object (either
passed as an argument or loaded from `),QTe=n(VE,"CODE",{});var fFt=s(QTe);$7r=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),I7r=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(VE,"CODE",{});var mFt=s(HTe);j7r=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),D7r=r(VE,":"),VE.forEach(t),N7r=i(Da),UTe=n(Da,"UL",{});var gFt=s(UTe);V4=n(gFt,"LI",{});var KBe=s(V4);JTe=n(KBe,"STRONG",{});var hFt=s(JTe);q7r=r(hFt,"vision-encoder-decoder"),hFt.forEach(t),O7r=r(KBe," \u2014 "),vz=n(KBe,"A",{href:!0});var pFt=s(vz);G7r=r(pFt,"FlaxVisionEncoderDecoderModel"),pFt.forEach(t),X7r=r(KBe," (Vision Encoder decoder model)"),KBe.forEach(t),gFt.forEach(t),V7r=i(Da),YTe=n(Da,"P",{});var _Ft=s(YTe);z7r=r(_Ft,"Examples:"),_Ft.forEach(t),W7r=i(Da),m(qL.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(yFt)),c(ge,"id","auto-classes"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#auto-classes"),c(de,"class","relative group"),c(On,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoConfig"),c(Xn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoTokenizer"),c(Xi,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(zi,"class","relative group"),c(z8,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(W8,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig"),c(Q8,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig"),c(H8,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig"),c(U8,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig"),c(J8,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Y8,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig"),c(K8,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Z8,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(e7,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(o7,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig"),c(r7,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig"),c(t7,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig"),c(a7,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig"),c(n7,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig"),c(s7,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig"),c(l7,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(i7,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(d7,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig"),c(c7,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(f7,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig"),c(m7,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig"),c(g7,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig"),c(h7,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig"),c(p7,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig"),c(_7,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(u7,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig"),c(b7,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig"),c(v7,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig"),c(T7,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig"),c(F7,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config"),c(C7,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(M7,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig"),c(E7,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig"),c(y7,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig"),c(w7,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(A7,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(L7,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(B7,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig"),c(x7,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig"),c(k7,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeConfig"),c(R7,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig"),c(S7,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config"),c(P7,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig"),c($7,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(I7,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig"),c(j7,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(D7,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(N7,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig"),c(q7,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config"),c(O7,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(G7,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(X7,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig"),c(V7,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig"),c(z7,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig"),c(W7,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Q7,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(H7,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(U7,"href","/docs/transformers/pr_15529/en/model_doc/rag#transformers.RagConfig"),c(J7,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmConfig"),c(Y7,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig"),c(K7,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig"),c(Z7,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig"),c(eB,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig"),c(oB,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig"),c(rB,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig"),c(tB,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig"),c(aB,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig"),c(nB,"href","/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(sB,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(lB,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(iB,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig"),c(dB,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(cB,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig"),c(fB,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config"),c(mB,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig"),c(gB,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(hB,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRConfig"),c(pB,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_B,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(uB,"href","/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltConfig"),c(bB,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(vB,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(TB,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(FB,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig"),c(CB,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(MB,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(EB,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig"),c(yB,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig"),c(wB,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig"),c(AB,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(LB,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(BB,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(xB,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig"),c(kB,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Bg,"class","docstring"),c(Wo,"class","docstring"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Qi,"class","relative group"),c(RB,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(SB,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertTokenizer"),c(PB,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($B,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartTokenizer"),c(IB,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartTokenizerFast"),c(jB,"href","/docs/transformers/pr_15529/en/model_doc/barthez#transformers.BarthezTokenizer"),c(DB,"href","/docs/transformers/pr_15529/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NB,"href","/docs/transformers/pr_15529/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qB,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizerFast"),c(GB,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(XB,"href","/docs/transformers/pr_15529/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(VB,"href","/docs/transformers/pr_15529/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(zB,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(WB,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(QB,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HB,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UB,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(JB,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(YB,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(KB,"href","/docs/transformers/pr_15529/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ZB,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ex,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(ox,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineTokenizer"),c(rx,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPTokenizer"),c(tx,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ax,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nx,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(sx,"href","/docs/transformers/pr_15529/en/model_doc/cpm#transformers.CpmTokenizer"),c(lx,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ix,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dx,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cx,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fx,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mx,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gx,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hx,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(px,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_x,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraTokenizer"),c(ux,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bx,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vx,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetTokenizer"),c(Tx,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Fx,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Cx,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Mx,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Ex,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yx,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wx,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ax,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Lx,"href","/docs/transformers/pr_15529/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Bx,"href","/docs/transformers/pr_15529/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xx,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kx,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Rx,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Sx,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Px,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c($x,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Ix,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jx,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Dx,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Nx,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDTokenizer"),c(qx,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDTokenizerFast"),c(Ox,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Gx,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Xx,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeTokenizer"),c(Vx,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zx,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Wx,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Qx,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianTokenizer"),c(Hx,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartTokenizer"),c(Ux,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Jx,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Yx,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Kx,"href","/docs/transformers/pr_15529/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Zx,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ek,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ok,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rk,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tk,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5Tokenizer"),c(ak,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5TokenizerFast"),c(nk,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sk,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(lk,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ik,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dk,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ck,"href","/docs/transformers/pr_15529/en/model_doc/phobert#transformers.PhobertTokenizer"),c(fk,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mk,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gk,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizer"),c(hk,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizerFast"),c(pk,"href","/docs/transformers/pr_15529/en/model_doc/rag#transformers.RagTokenizer"),c(_k,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmTokenizer"),c(uk,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bk,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vk,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Tk,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Fk,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Ck,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Mk,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Ek,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yk,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wk,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Ak,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Lk,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Bk,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xk,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kk,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Rk,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Sk,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Pk,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5Tokenizer"),c($k,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Ik,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasTokenizer"),c(jk,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Dk,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Nk,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qk,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Ok,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Gk,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMTokenizer"),c(Xk,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Vk,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zk,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Wk,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Qk,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(nh,"class","docstring"),c(Qo,"class","docstring"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Hi,"class","relative group"),c(Hk,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Uk,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Jk,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Yk,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kk,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Zk,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oR,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(rR,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tR,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aR,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nR,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(sR,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(lR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(Eh,"class","docstring"),c(Ho,"class","docstring"),c(yh,"id","transformers.AutoProcessor"),c(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yh,"href","#transformers.AutoProcessor"),c(Ui,"class","relative group"),c(fR,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mR,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPProcessor"),c(gR,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(hR,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(pR,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(_R,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(uR,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bR,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c($h,"class","docstring"),c(Uo,"class","docstring"),c(Ih,"id","transformers.AutoModel"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoModel"),c(Yi,"class","relative group"),c(Vr,"class","docstring"),c(TR,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertModel"),c(FR,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartModel"),c(CR,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitModel"),c(MR,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel"),c(ER,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(yR,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdModel"),c(wR,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(AR,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(LR,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BR,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertModel"),c(xR,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineModel"),c(kR,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPModel"),c(RR,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertModel"),c(SR,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextModel"),c(PR,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLModel"),c($R,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(IR,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(jR,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaModel"),c(DR,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NR,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTModel"),c(qR,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrModel"),c(OR,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertModel"),c(GR,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(XR,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraModel"),c(VR,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertModel"),c(zR,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetModel"),c(WR,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTModel"),c(QR,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelModel"),c(HR,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelBaseModel"),c(UR,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Model"),c(JR,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(YR,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJModel"),c(KR,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertModel"),c(ZR,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertModel"),c(eS,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(oS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(rS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(tS,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDModel"),c(aS,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerModel"),c(nS,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeModel"),c(sS,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertModel"),c(lS,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Model"),c(iS,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianModel"),c(dS,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cS,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartModel"),c(fS,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mS,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gS,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetModel"),c(hS,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Model"),c(pS,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_S,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uS,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusModel"),c(bS,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverModel"),c(vS,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartModel"),c(TS,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerModel"),c(FS,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(CS,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertModel"),c(MS,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModel"),c(ES,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertModel"),c(yS,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel"),c(wS,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaModel"),c(AS,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerModel"),c(LS,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerModel"),c(BS,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWModel"),c(xS,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDModel"),c(kS,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(RS,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterModel"),c(SS,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(PS,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinModel"),c($S,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Model"),c(IS,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasModel"),c(jS,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(DS,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechModel"),c(NS,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qS,"href","/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltModel"),c(OS,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GS,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertModel"),c(XS,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTModel"),c(VS,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zS,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(WS,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMModel"),c(QS,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMModel"),c(HS,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMModel"),c(US,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(JS,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(YS,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(KS,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetModel"),c(ZS,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(__,"id","transformers.AutoModelForPreTraining"),c(__,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(__,"href","#transformers.AutoModelForPreTraining"),c(ed,"class","relative group"),c(zr,"class","docstring"),c(eP,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oP,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rP,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForPreTraining"),c(tP,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aP,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nP,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sP,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lP,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iP,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dP,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cP,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForPreTraining"),c(fP,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mP,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gP,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hP,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(pP,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_P,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uP,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bP,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vP,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(TP,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(FP,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CP,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(MP,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EP,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel"),c(yP,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wP,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AP,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LP,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BP,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xP,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kP,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RP,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(SP,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(PP,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($P,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(IP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DP,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(tu,"id","transformers.AutoModelForCausalLM"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModelForCausalLM"),c(td,"class","relative group"),c(Wr,"class","docstring"),c(NP,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForCausalLM"),c(qP,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertLMHeadModel"),c(OP,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GP,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XP,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VP,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(zP,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(WP,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(QP,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HP,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(UP,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JP,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YP,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KP,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ZP,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianForCausalLM"),c(e$,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForCausalLM"),c(o$,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(r$,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(t$,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(a$,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(n$,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(s$,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(l$,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(i$,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(d$,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(c$,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(f$,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(m$,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(g$,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(h$,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(p$,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(u$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(b$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(v$,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(qu,"id","transformers.AutoModelForMaskedLM"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForMaskedLM"),c(sd,"class","relative group"),c(Qr,"class","docstring"),c(T$,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(F$,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(C$,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMaskedLM"),c(M$,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(E$,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(y$,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(w$,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(A$,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(L$,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(B$,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(x$,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(k$,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(R$,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(S$,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(P$,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($$,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(I$,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(j$,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(D$,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(N$,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(q$,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(O$,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(G$,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(X$,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(V$,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(z$,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(W$,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Q$,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(H$,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(U$,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(J$,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Y$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(K$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Z$,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(M5,"id","transformers.AutoModelForSeq2SeqLM"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.AutoModelForSeq2SeqLM"),c(dd,"class","relative group"),c(Hr,"class","docstring"),c(eI,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oI,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(rI,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(tI,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(aI,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(nI,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sI,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(lI,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(iI,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianMTModel"),c(dI,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cI,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(fI,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(mI,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(gI,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(hI,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pI,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(O5,"id","transformers.AutoModelForSequenceClassification"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.AutoModelForSequenceClassification"),c(md,"class","relative group"),c(Ur,"class","docstring"),c(_I,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uI,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bI,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vI,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(TI,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(FI,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(CI,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MI,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EI,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yI,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wI,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AI,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LI,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BI,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xI,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kI,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RI,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SI,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(PI,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($I,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(II,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jI,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(DI,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(NI,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qI,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(OI,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GI,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(XI,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VI,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zI,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WI,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QI,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HI,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UI,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(JI,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(YI,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(KI,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ej,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oj,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rj,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(tj,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(aj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(nj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(sj,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(lj,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c($2,"id","transformers.AutoModelForMultipleChoice"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForMultipleChoice"),c(pd,"class","relative group"),c(Jr,"class","docstring"),c(ij,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dj,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cj,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(fj,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mj,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gj,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hj,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(pj,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_j,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uj,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bj,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vj,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(Tj,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Fj,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Cj,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Mj,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Ej,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yj,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wj,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Aj,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Lj,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Bj,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xj,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kj,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Rj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Sj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Pj,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($j,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(f1,"id","transformers.AutoModelForNextSentencePrediction"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForNextSentencePrediction"),c(bd,"class","relative group"),c(Yr,"class","docstring"),c(Ij,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jj,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Dj,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Nj,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qj,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(b1,"id","transformers.AutoModelForTokenClassification"),c(b1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b1,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(Kr,"class","docstring"),c(Oj,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Gj,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForTokenClassification"),c(Xj,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Vj,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zj,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Wj,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Qj,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Hj,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Uj,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Jj,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Yj,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Kj,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Zj,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eD,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oD,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rD,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tD,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aD,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(nD,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sD,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lD,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iD,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dD,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cD,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fD,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mD,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gD,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hD,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pD,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(_D,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uD,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bD,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vD,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(Z1,"id","transformers.AutoModelForQuestionAnswering"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(Zr,"class","docstring"),c(TD,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ED,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yD,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AD,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LD,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(BD,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xD,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kD,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RD,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SD,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PD,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c($D,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(DD,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zD,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WD,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(UD,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JD,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YD,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KD,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZD,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(eN,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oN,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rN,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tN,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(aN,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(nr,"class","docstring"),c(qb,"id","transformers.AutoModelForTableQuestionAnswering"),c(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qb,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(et,"class","docstring"),c(nN,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(Xb,"id","transformers.AutoModelForImageClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c(ot,"class","docstring"),c(sN,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForImageClassification"),c(lN,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(iN,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassification"),c(dN,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(cN,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(fN,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(mN,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(gN,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(hN,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(pN,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_N,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForImageClassification"),c(uN,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(Kb,"id","transformers.AutoModelForVision2Seq"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForVision2Seq"),c(Sd,"class","relative group"),c(rt,"class","docstring"),c(bN,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(ov,"id","transformers.AutoModelForAudioClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForAudioClassification"),c(Id,"class","relative group"),c(tt,"class","docstring"),c(vN,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(TN,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(FN,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CN,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(MN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(EN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(wN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(fv,"id","transformers.AutoModelForAudioFrameClassification"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Nd,"class","relative group"),c(at,"class","docstring"),c(AN,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(LN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(xN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(uv,"id","transformers.AutoModelForCTC"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForCTC"),c(Gd,"class","relative group"),c(nt,"class","docstring"),c(kN,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(RN,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForCTC"),c(SN,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForCTC"),c(PN,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForCTC"),c($N,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(IN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(fr,"class","docstring"),c(Av,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(zd,"class","relative group"),c(st,"class","docstring"),c(NN,"href","/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qN,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(mr,"class","docstring"),c(kv,"id","transformers.AutoModelForAudioXVector"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForAudioXVector"),c(Hd,"class","relative group"),c(lt,"class","docstring"),c(ON,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(jv,"id","transformers.AutoModelForMaskedImageModeling"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Yd,"class","relative group"),c(it,"class","docstring"),c(zN,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(WN,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(QN,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(Gv,"id","transformers.AutoModelForObjectDetection"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForObjectDetection"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(HN,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(pr,"class","docstring"),c(zv,"id","transformers.AutoModelForImageSegmentation"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForImageSegmentation"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(UN,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(_r,"class","docstring"),c(Hv,"id","transformers.AutoModelForSemanticSegmentation"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForSemanticSegmentation"),c(lc,"class","relative group"),c(ft,"class","docstring"),c(JN,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YN,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(ur,"class","docstring"),c(Kv,"id","transformers.AutoModelForInstanceSegmentation"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForInstanceSegmentation"),c(cc,"class","relative group"),c(mt,"class","docstring"),c(KN,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(no,"class","docstring"),c(br,"class","docstring"),c(oT,"id","transformers.TFAutoModel"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.TFAutoModel"),c(gc,"class","relative group"),c(gt,"class","docstring"),c(ZN,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertModel"),c(eq,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartModel"),c(oq,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertModel"),c(rq,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(tq,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(aq,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertModel"),c(nq,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.TFCLIPModel"),c(sq,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertModel"),c(lq,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextModel"),c(iq,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLModel"),c(dq,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaModel"),c(cq,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(fq,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mq,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gq,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraModel"),c(hq,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(pq,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelModel"),c(_q,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(uq,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bq,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.TFHubertModel"),c(vq,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Tq,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDModel"),c(Fq,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerModel"),c(Cq,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Mq,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianModel"),c(Eq,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartModel"),c(yq,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(wq,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Aq,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5Model"),c(Lq,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Bq,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusModel"),c(xq,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertModel"),c(kq,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaModel"),c(Rq,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Sq,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Pq,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5Model"),c($q,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasModel"),c(Iq,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jq,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTModel"),c(Dq,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Nq,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMModel"),c(qq,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Oq,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(XT,"id","transformers.TFAutoModelForPreTraining"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.TFAutoModelForPreTraining"),c(_c,"class","relative group"),c(ht,"class","docstring"),c(Gq,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Vq,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zq,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Wq,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Qq,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Uq,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Jq,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Yq,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Kq,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eO,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oO,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rO,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nO,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sO,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lO,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iO,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(dO,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Tr,"class","docstring"),c(mF,"id","transformers.TFAutoModelForCausalLM"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.TFAutoModelForCausalLM"),c(vc,"class","relative group"),c(pt,"class","docstring"),c(cO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(fO,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mO,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gO,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hO,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(pO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(_O,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uO,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(bO,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vO,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Fr,"class","docstring"),c(MF,"id","transformers.TFAutoModelForImageClassification"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.TFAutoModelForImageClassification"),c(Cc,"class","relative group"),c(_t,"class","docstring"),c(TO,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(FO,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Cr,"class","docstring"),c(wF,"id","transformers.TFAutoModelForMaskedLM"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.TFAutoModelForMaskedLM"),c(yc,"class","relative group"),c(ut,"class","docstring"),c(CO,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(MO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(EO,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yO,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(AO,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(LO,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(BO,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(xO,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(kO,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(RO,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SO,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(PO,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c($O,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(IO,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DO,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NO,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qO,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OO,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(QF,"id","transformers.TFAutoModelForSeq2SeqLM"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(bt,"class","docstring"),c(GO,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(WO,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianMTModel"),c(HO,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(a9,"id","transformers.TFAutoModelForSequenceClassification"),c(a9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a9,"href","#transformers.TFAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(vt,"class","docstring"),c(KO,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aG,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nG,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lG,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dG,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cG,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(fG,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(mG,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(gG,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(hG,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pG,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(uG,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(bG,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(vG,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TG,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(FG,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(x9,"id","transformers.TFAutoModelForMultipleChoice"),c(x9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x9,"href","#transformers.TFAutoModelForMultipleChoice"),c(Pc,"class","relative group"),c(Tt,"class","docstring"),c(MG,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(BG,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xG,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kG,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(RG,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PG,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IG,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(jG,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(DG,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(NG,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(H9,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(H9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(jc,"class","relative group"),c(Ft,"class","docstring"),c(qG,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(J9,"id","transformers.TFAutoModelForTokenClassification"),c(J9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J9,"href","#transformers.TFAutoModelForTokenClassification"),c(qc,"class","relative group"),c(Ct,"class","docstring"),c(OG,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(GG,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(XG,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(VG,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(zG,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(WG,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(QG,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(HG,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(UG,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(JG,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(YG,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(KG,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(ZG,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(eX,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(oX,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(rX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(tX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(aX,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(nX,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(sX,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(uC,"id","transformers.TFAutoModelForQuestionAnswering"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(Mt,"class","docstring"),c(lX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(_X,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(EX,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(jC,"id","transformers.TFAutoModelForVision2Seq"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForVision2Seq"),c(Wc,"class","relative group"),c(Et,"class","docstring"),c(wX,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(NC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Uc,"class","relative group"),c(yt,"class","docstring"),c(AX,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(OC,"id","transformers.FlaxAutoModel"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModel"),c(Kc,"class","relative group"),c(wt,"class","docstring"),c(LX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertModel"),c(BX,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartModel"),c(xX,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitModel"),c(kX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertModel"),c(RX,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(SX,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(PX,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c($X,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraModel"),c(DX,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(NX,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(qX,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(OX,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianModel"),c(GX,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartModel"),c(XX,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5Model"),c(VX,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(zX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(WX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(QX,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5Model"),c(HX,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(UX,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTModel"),c(JX,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(YX,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(KX,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(gM,"id","transformers.FlaxAutoModelForCausalLM"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.FlaxAutoModelForCausalLM"),c(of,"class","relative group"),c(At,"class","docstring"),c(ZX,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eV,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oV,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rV,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(bM,"id","transformers.FlaxAutoModelForPreTraining"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.FlaxAutoModelForPreTraining"),c(af,"class","relative group"),c(Lt,"class","docstring"),c(tV,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(aV,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(sV,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(lV,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(iV,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dV,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cV,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fV,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mV,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gV,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hV,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(kM,"id","transformers.FlaxAutoModelForMaskedLM"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.FlaxAutoModelForMaskedLM"),c(lf,"class","relative group"),c(Bt,"class","docstring"),c(pV,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_V,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uV,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bV,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vV,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(FV,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MV,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EV,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(GM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ff,"class","relative group"),c(xt,"class","docstring"),c(yV,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(BV,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xV,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RV,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(KM,"id","transformers.FlaxAutoModelForSequenceClassification"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(hf,"class","relative group"),c(kt,"class","docstring"),c(PV,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c($V,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(IV,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(DV,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(qV,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(OV,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(GV,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(XV,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(d4,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(uf,"class","relative group"),c(Rt,"class","docstring"),c(VV,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(T4,"id","transformers.FlaxAutoModelForTokenClassification"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Tf,"class","relative group"),c(St,"class","docstring"),c(ez,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oz,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rz,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tz,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(az,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nz,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sz,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lz,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(B4,"id","transformers.FlaxAutoModelForMultipleChoice"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Mf,"class","relative group"),c(Pt,"class","docstring"),c(iz,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(dz,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(fz,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(gz,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(hz,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(pz,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(D4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(wf,"class","relative group"),c($t,"class","docstring"),c(_z,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(q4,"id","transformers.FlaxAutoModelForImageClassification"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.FlaxAutoModelForImageClassification"),c(Bf,"class","relative group"),c(It,"class","docstring"),c(uz,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(bz,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(X4,"id","transformers.FlaxAutoModelForVision2Seq"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Rf,"class","relative group"),c(jt,"class","docstring"),c(vz,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,u){e(document.head,J),b(d,Pe,u),b(d,de,u),e(de,ge),e(ge,io),g(fe,io,null),e(de,Te),e(de,Vo),e(Vo,ji),b(d,If,u),b(d,ca,u),e(ca,Di),e(ca,Ni),e(Ni,zE),e(ca,jf),b(d,Le,u),b(d,co,u),e(co,qi),e(co,On),e(On,WE),e(co,Gn),e(co,Xn),e(Xn,QE),e(co,Oi),e(co,Vn),e(Vn,HE),e(co,Gi),b(d,Df,u),g(Na,d,u),b(d,fo,u),b(d,he,u),e(he,N8),e(he,Xi),e(Xi,q8),e(he,O8),b(d,zo,u),b(d,qa,u),e(qa,G8),e(qa,Nf),e(Nf,X8),e(qa,gPe),b(d,ZBe,u),b(d,Vi,u),e(Vi,qf),e(qf,mQ),g(UE,mQ,null),e(Vi,hPe),e(Vi,gQ),e(gQ,pPe),b(d,exe,u),b(d,zn,u),e(zn,_Pe),e(zn,hQ),e(hQ,uPe),e(zn,bPe),e(zn,pQ),e(pQ,vPe),e(zn,TPe),b(d,oxe,u),g(JE,d,u),b(d,rxe,u),b(d,V8,u),e(V8,FPe),b(d,txe,u),g(Of,d,u),b(d,axe,u),b(d,zi,u),e(zi,Gf),e(Gf,_Q),g(YE,_Q,null),e(zi,CPe),e(zi,uQ),e(uQ,MPe),b(d,nxe,u),b(d,Wo,u),g(KE,Wo,null),e(Wo,EPe),e(Wo,ZE),e(ZE,yPe),e(ZE,z8),e(z8,wPe),e(ZE,APe),e(Wo,LPe),e(Wo,e3),e(e3,BPe),e(e3,bQ),e(bQ,xPe),e(e3,kPe),e(Wo,RPe),e(Wo,mo),g(o3,mo,null),e(mo,SPe),e(mo,vQ),e(vQ,PPe),e(mo,$Pe),e(mo,Wi),e(Wi,IPe),e(Wi,TQ),e(TQ,jPe),e(Wi,DPe),e(Wi,FQ),e(FQ,NPe),e(Wi,qPe),e(mo,OPe),e(mo,v),e(v,Xf),e(Xf,CQ),e(CQ,GPe),e(Xf,XPe),e(Xf,W8),e(W8,VPe),e(Xf,zPe),e(v,WPe),e(v,Vf),e(Vf,MQ),e(MQ,QPe),e(Vf,HPe),e(Vf,Q8),e(Q8,UPe),e(Vf,JPe),e(v,YPe),e(v,zf),e(zf,EQ),e(EQ,KPe),e(zf,ZPe),e(zf,H8),e(H8,e$e),e(zf,o$e),e(v,r$e),e(v,Wf),e(Wf,yQ),e(yQ,t$e),e(Wf,a$e),e(Wf,U8),e(U8,n$e),e(Wf,s$e),e(v,l$e),e(v,Qf),e(Qf,wQ),e(wQ,i$e),e(Qf,d$e),e(Qf,J8),e(J8,c$e),e(Qf,f$e),e(v,m$e),e(v,Hf),e(Hf,AQ),e(AQ,g$e),e(Hf,h$e),e(Hf,Y8),e(Y8,p$e),e(Hf,_$e),e(v,u$e),e(v,Uf),e(Uf,LQ),e(LQ,b$e),e(Uf,v$e),e(Uf,K8),e(K8,T$e),e(Uf,F$e),e(v,C$e),e(v,Jf),e(Jf,BQ),e(BQ,M$e),e(Jf,E$e),e(Jf,Z8),e(Z8,y$e),e(Jf,w$e),e(v,A$e),e(v,Yf),e(Yf,xQ),e(xQ,L$e),e(Yf,B$e),e(Yf,e7),e(e7,x$e),e(Yf,k$e),e(v,R$e),e(v,Kf),e(Kf,kQ),e(kQ,S$e),e(Kf,P$e),e(Kf,o7),e(o7,$$e),e(Kf,I$e),e(v,j$e),e(v,Zf),e(Zf,RQ),e(RQ,D$e),e(Zf,N$e),e(Zf,r7),e(r7,q$e),e(Zf,O$e),e(v,G$e),e(v,em),e(em,SQ),e(SQ,X$e),e(em,V$e),e(em,t7),e(t7,z$e),e(em,W$e),e(v,Q$e),e(v,om),e(om,PQ),e(PQ,H$e),e(om,U$e),e(om,a7),e(a7,J$e),e(om,Y$e),e(v,K$e),e(v,rm),e(rm,$Q),e($Q,Z$e),e(rm,eIe),e(rm,n7),e(n7,oIe),e(rm,rIe),e(v,tIe),e(v,tm),e(tm,IQ),e(IQ,aIe),e(tm,nIe),e(tm,s7),e(s7,sIe),e(tm,lIe),e(v,iIe),e(v,am),e(am,jQ),e(jQ,dIe),e(am,cIe),e(am,l7),e(l7,fIe),e(am,mIe),e(v,gIe),e(v,nm),e(nm,DQ),e(DQ,hIe),e(nm,pIe),e(nm,i7),e(i7,_Ie),e(nm,uIe),e(v,bIe),e(v,sm),e(sm,NQ),e(NQ,vIe),e(sm,TIe),e(sm,d7),e(d7,FIe),e(sm,CIe),e(v,MIe),e(v,lm),e(lm,qQ),e(qQ,EIe),e(lm,yIe),e(lm,c7),e(c7,wIe),e(lm,AIe),e(v,LIe),e(v,im),e(im,OQ),e(OQ,BIe),e(im,xIe),e(im,f7),e(f7,kIe),e(im,RIe),e(v,SIe),e(v,dm),e(dm,GQ),e(GQ,PIe),e(dm,$Ie),e(dm,m7),e(m7,IIe),e(dm,jIe),e(v,DIe),e(v,cm),e(cm,XQ),e(XQ,NIe),e(cm,qIe),e(cm,g7),e(g7,OIe),e(cm,GIe),e(v,XIe),e(v,fm),e(fm,VQ),e(VQ,VIe),e(fm,zIe),e(fm,h7),e(h7,WIe),e(fm,QIe),e(v,HIe),e(v,mm),e(mm,zQ),e(zQ,UIe),e(mm,JIe),e(mm,p7),e(p7,YIe),e(mm,KIe),e(v,ZIe),e(v,gm),e(gm,WQ),e(WQ,eje),e(gm,oje),e(gm,_7),e(_7,rje),e(gm,tje),e(v,aje),e(v,hm),e(hm,QQ),e(QQ,nje),e(hm,sje),e(hm,u7),e(u7,lje),e(hm,ije),e(v,dje),e(v,pm),e(pm,HQ),e(HQ,cje),e(pm,fje),e(pm,b7),e(b7,mje),e(pm,gje),e(v,hje),e(v,_m),e(_m,UQ),e(UQ,pje),e(_m,_je),e(_m,v7),e(v7,uje),e(_m,bje),e(v,vje),e(v,um),e(um,JQ),e(JQ,Tje),e(um,Fje),e(um,T7),e(T7,Cje),e(um,Mje),e(v,Eje),e(v,bm),e(bm,YQ),e(YQ,yje),e(bm,wje),e(bm,F7),e(F7,Aje),e(bm,Lje),e(v,Bje),e(v,vm),e(vm,KQ),e(KQ,xje),e(vm,kje),e(vm,C7),e(C7,Rje),e(vm,Sje),e(v,Pje),e(v,Tm),e(Tm,ZQ),e(ZQ,$je),e(Tm,Ije),e(Tm,M7),e(M7,jje),e(Tm,Dje),e(v,Nje),e(v,Fm),e(Fm,eH),e(eH,qje),e(Fm,Oje),e(Fm,E7),e(E7,Gje),e(Fm,Xje),e(v,Vje),e(v,Cm),e(Cm,oH),e(oH,zje),e(Cm,Wje),e(Cm,y7),e(y7,Qje),e(Cm,Hje),e(v,Uje),e(v,Mm),e(Mm,rH),e(rH,Jje),e(Mm,Yje),e(Mm,w7),e(w7,Kje),e(Mm,Zje),e(v,eDe),e(v,Em),e(Em,tH),e(tH,oDe),e(Em,rDe),e(Em,A7),e(A7,tDe),e(Em,aDe),e(v,nDe),e(v,ym),e(ym,aH),e(aH,sDe),e(ym,lDe),e(ym,L7),e(L7,iDe),e(ym,dDe),e(v,cDe),e(v,wm),e(wm,nH),e(nH,fDe),e(wm,mDe),e(wm,B7),e(B7,gDe),e(wm,hDe),e(v,pDe),e(v,Am),e(Am,sH),e(sH,_De),e(Am,uDe),e(Am,x7),e(x7,bDe),e(Am,vDe),e(v,TDe),e(v,Lm),e(Lm,lH),e(lH,FDe),e(Lm,CDe),e(Lm,k7),e(k7,MDe),e(Lm,EDe),e(v,yDe),e(v,Bm),e(Bm,iH),e(iH,wDe),e(Bm,ADe),e(Bm,R7),e(R7,LDe),e(Bm,BDe),e(v,xDe),e(v,xm),e(xm,dH),e(dH,kDe),e(xm,RDe),e(xm,S7),e(S7,SDe),e(xm,PDe),e(v,$De),e(v,km),e(km,cH),e(cH,IDe),e(km,jDe),e(km,P7),e(P7,DDe),e(km,NDe),e(v,qDe),e(v,Rm),e(Rm,fH),e(fH,ODe),e(Rm,GDe),e(Rm,$7),e($7,XDe),e(Rm,VDe),e(v,zDe),e(v,Sm),e(Sm,mH),e(mH,WDe),e(Sm,QDe),e(Sm,I7),e(I7,HDe),e(Sm,UDe),e(v,JDe),e(v,Pm),e(Pm,gH),e(gH,YDe),e(Pm,KDe),e(Pm,j7),e(j7,ZDe),e(Pm,eNe),e(v,oNe),e(v,$m),e($m,hH),e(hH,rNe),e($m,tNe),e($m,D7),e(D7,aNe),e($m,nNe),e(v,sNe),e(v,Im),e(Im,pH),e(pH,lNe),e(Im,iNe),e(Im,N7),e(N7,dNe),e(Im,cNe),e(v,fNe),e(v,jm),e(jm,_H),e(_H,mNe),e(jm,gNe),e(jm,q7),e(q7,hNe),e(jm,pNe),e(v,_Ne),e(v,Dm),e(Dm,uH),e(uH,uNe),e(Dm,bNe),e(Dm,O7),e(O7,vNe),e(Dm,TNe),e(v,FNe),e(v,Nm),e(Nm,bH),e(bH,CNe),e(Nm,MNe),e(Nm,G7),e(G7,ENe),e(Nm,yNe),e(v,wNe),e(v,qm),e(qm,vH),e(vH,ANe),e(qm,LNe),e(qm,X7),e(X7,BNe),e(qm,xNe),e(v,kNe),e(v,Om),e(Om,TH),e(TH,RNe),e(Om,SNe),e(Om,V7),e(V7,PNe),e(Om,$Ne),e(v,INe),e(v,Gm),e(Gm,FH),e(FH,jNe),e(Gm,DNe),e(Gm,z7),e(z7,NNe),e(Gm,qNe),e(v,ONe),e(v,Xm),e(Xm,CH),e(CH,GNe),e(Xm,XNe),e(Xm,W7),e(W7,VNe),e(Xm,zNe),e(v,WNe),e(v,Vm),e(Vm,MH),e(MH,QNe),e(Vm,HNe),e(Vm,Q7),e(Q7,UNe),e(Vm,JNe),e(v,YNe),e(v,zm),e(zm,EH),e(EH,KNe),e(zm,ZNe),e(zm,H7),e(H7,eqe),e(zm,oqe),e(v,rqe),e(v,Wm),e(Wm,yH),e(yH,tqe),e(Wm,aqe),e(Wm,U7),e(U7,nqe),e(Wm,sqe),e(v,lqe),e(v,Qm),e(Qm,wH),e(wH,iqe),e(Qm,dqe),e(Qm,J7),e(J7,cqe),e(Qm,fqe),e(v,mqe),e(v,Hm),e(Hm,AH),e(AH,gqe),e(Hm,hqe),e(Hm,Y7),e(Y7,pqe),e(Hm,_qe),e(v,uqe),e(v,Um),e(Um,LH),e(LH,bqe),e(Um,vqe),e(Um,K7),e(K7,Tqe),e(Um,Fqe),e(v,Cqe),e(v,Jm),e(Jm,BH),e(BH,Mqe),e(Jm,Eqe),e(Jm,Z7),e(Z7,yqe),e(Jm,wqe),e(v,Aqe),e(v,Ym),e(Ym,xH),e(xH,Lqe),e(Ym,Bqe),e(Ym,eB),e(eB,xqe),e(Ym,kqe),e(v,Rqe),e(v,Km),e(Km,kH),e(kH,Sqe),e(Km,Pqe),e(Km,oB),e(oB,$qe),e(Km,Iqe),e(v,jqe),e(v,Zm),e(Zm,RH),e(RH,Dqe),e(Zm,Nqe),e(Zm,rB),e(rB,qqe),e(Zm,Oqe),e(v,Gqe),e(v,eg),e(eg,SH),e(SH,Xqe),e(eg,Vqe),e(eg,tB),e(tB,zqe),e(eg,Wqe),e(v,Qqe),e(v,og),e(og,PH),e(PH,Hqe),e(og,Uqe),e(og,aB),e(aB,Jqe),e(og,Yqe),e(v,Kqe),e(v,rg),e(rg,$H),e($H,Zqe),e(rg,eOe),e(rg,nB),e(nB,oOe),e(rg,rOe),e(v,tOe),e(v,tg),e(tg,IH),e(IH,aOe),e(tg,nOe),e(tg,sB),e(sB,sOe),e(tg,lOe),e(v,iOe),e(v,ag),e(ag,jH),e(jH,dOe),e(ag,cOe),e(ag,lB),e(lB,fOe),e(ag,mOe),e(v,gOe),e(v,ng),e(ng,DH),e(DH,hOe),e(ng,pOe),e(ng,iB),e(iB,_Oe),e(ng,uOe),e(v,bOe),e(v,sg),e(sg,NH),e(NH,vOe),e(sg,TOe),e(sg,dB),e(dB,FOe),e(sg,COe),e(v,MOe),e(v,lg),e(lg,qH),e(qH,EOe),e(lg,yOe),e(lg,cB),e(cB,wOe),e(lg,AOe),e(v,LOe),e(v,ig),e(ig,OH),e(OH,BOe),e(ig,xOe),e(ig,fB),e(fB,kOe),e(ig,ROe),e(v,SOe),e(v,dg),e(dg,GH),e(GH,POe),e(dg,$Oe),e(dg,mB),e(mB,IOe),e(dg,jOe),e(v,DOe),e(v,cg),e(cg,XH),e(XH,NOe),e(cg,qOe),e(cg,gB),e(gB,OOe),e(cg,GOe),e(v,XOe),e(v,fg),e(fg,VH),e(VH,VOe),e(fg,zOe),e(fg,hB),e(hB,WOe),e(fg,QOe),e(v,HOe),e(v,mg),e(mg,zH),e(zH,UOe),e(mg,JOe),e(mg,pB),e(pB,YOe),e(mg,KOe),e(v,ZOe),e(v,gg),e(gg,WH),e(WH,eGe),e(gg,oGe),e(gg,_B),e(_B,rGe),e(gg,tGe),e(v,aGe),e(v,hg),e(hg,QH),e(QH,nGe),e(hg,sGe),e(hg,uB),e(uB,lGe),e(hg,iGe),e(v,dGe),e(v,pg),e(pg,HH),e(HH,cGe),e(pg,fGe),e(pg,bB),e(bB,mGe),e(pg,gGe),e(v,hGe),e(v,_g),e(_g,UH),e(UH,pGe),e(_g,_Ge),e(_g,vB),e(vB,uGe),e(_g,bGe),e(v,vGe),e(v,ug),e(ug,JH),e(JH,TGe),e(ug,FGe),e(ug,TB),e(TB,CGe),e(ug,MGe),e(v,EGe),e(v,bg),e(bg,YH),e(YH,yGe),e(bg,wGe),e(bg,FB),e(FB,AGe),e(bg,LGe),e(v,BGe),e(v,vg),e(vg,KH),e(KH,xGe),e(vg,kGe),e(vg,CB),e(CB,RGe),e(vg,SGe),e(v,PGe),e(v,Tg),e(Tg,ZH),e(ZH,$Ge),e(Tg,IGe),e(Tg,MB),e(MB,jGe),e(Tg,DGe),e(v,NGe),e(v,Fg),e(Fg,eU),e(eU,qGe),e(Fg,OGe),e(Fg,EB),e(EB,GGe),e(Fg,XGe),e(v,VGe),e(v,Cg),e(Cg,oU),e(oU,zGe),e(Cg,WGe),e(Cg,yB),e(yB,QGe),e(Cg,HGe),e(v,UGe),e(v,Mg),e(Mg,rU),e(rU,JGe),e(Mg,YGe),e(Mg,wB),e(wB,KGe),e(Mg,ZGe),e(v,eXe),e(v,Eg),e(Eg,tU),e(tU,oXe),e(Eg,rXe),e(Eg,AB),e(AB,tXe),e(Eg,aXe),e(v,nXe),e(v,yg),e(yg,aU),e(aU,sXe),e(yg,lXe),e(yg,LB),e(LB,iXe),e(yg,dXe),e(v,cXe),e(v,wg),e(wg,nU),e(nU,fXe),e(wg,mXe),e(wg,BB),e(BB,gXe),e(wg,hXe),e(v,pXe),e(v,Ag),e(Ag,sU),e(sU,_Xe),e(Ag,uXe),e(Ag,xB),e(xB,bXe),e(Ag,vXe),e(v,TXe),e(v,Lg),e(Lg,lU),e(lU,FXe),e(Lg,CXe),e(Lg,kB),e(kB,MXe),e(Lg,EXe),e(mo,yXe),e(mo,iU),e(iU,wXe),e(mo,AXe),g(r3,mo,null),e(Wo,LXe),e(Wo,Bg),g(t3,Bg,null),e(Bg,BXe),e(Bg,dU),e(dU,xXe),b(d,sxe,u),b(d,Qi,u),e(Qi,xg),e(xg,cU),g(a3,cU,null),e(Qi,kXe),e(Qi,fU),e(fU,RXe),b(d,lxe,u),b(d,Qo,u),g(n3,Qo,null),e(Qo,SXe),e(Qo,s3),e(s3,PXe),e(s3,RB),e(RB,$Xe),e(s3,IXe),e(Qo,jXe),e(Qo,l3),e(l3,DXe),e(l3,mU),e(mU,NXe),e(l3,qXe),e(Qo,OXe),e(Qo,go),g(i3,go,null),e(go,GXe),e(go,gU),e(gU,XXe),e(go,VXe),e(go,Oa),e(Oa,zXe),e(Oa,hU),e(hU,WXe),e(Oa,QXe),e(Oa,pU),e(pU,HXe),e(Oa,UXe),e(Oa,_U),e(_U,JXe),e(Oa,YXe),e(go,KXe),e(go,E),e(E,Wn),e(Wn,uU),e(uU,ZXe),e(Wn,eVe),e(Wn,SB),e(SB,oVe),e(Wn,rVe),e(Wn,PB),e(PB,tVe),e(Wn,aVe),e(E,nVe),e(E,Qn),e(Qn,bU),e(bU,sVe),e(Qn,lVe),e(Qn,$B),e($B,iVe),e(Qn,dVe),e(Qn,IB),e(IB,cVe),e(Qn,fVe),e(E,mVe),e(E,Hn),e(Hn,vU),e(vU,gVe),e(Hn,hVe),e(Hn,jB),e(jB,pVe),e(Hn,_Ve),e(Hn,DB),e(DB,uVe),e(Hn,bVe),e(E,vVe),e(E,kg),e(kg,TU),e(TU,TVe),e(kg,FVe),e(kg,NB),e(NB,CVe),e(kg,MVe),e(E,EVe),e(E,Un),e(Un,FU),e(FU,yVe),e(Un,wVe),e(Un,qB),e(qB,AVe),e(Un,LVe),e(Un,OB),e(OB,BVe),e(Un,xVe),e(E,kVe),e(E,Rg),e(Rg,CU),e(CU,RVe),e(Rg,SVe),e(Rg,GB),e(GB,PVe),e(Rg,$Ve),e(E,IVe),e(E,Sg),e(Sg,MU),e(MU,jVe),e(Sg,DVe),e(Sg,XB),e(XB,NVe),e(Sg,qVe),e(E,OVe),e(E,Pg),e(Pg,EU),e(EU,GVe),e(Pg,XVe),e(Pg,VB),e(VB,VVe),e(Pg,zVe),e(E,WVe),e(E,Jn),e(Jn,yU),e(yU,QVe),e(Jn,HVe),e(Jn,zB),e(zB,UVe),e(Jn,JVe),e(Jn,WB),e(WB,YVe),e(Jn,KVe),e(E,ZVe),e(E,Yn),e(Yn,wU),e(wU,eze),e(Yn,oze),e(Yn,QB),e(QB,rze),e(Yn,tze),e(Yn,HB),e(HB,aze),e(Yn,nze),e(E,sze),e(E,Kn),e(Kn,AU),e(AU,lze),e(Kn,ize),e(Kn,UB),e(UB,dze),e(Kn,cze),e(Kn,JB),e(JB,fze),e(Kn,mze),e(E,gze),e(E,$g),e($g,LU),e(LU,hze),e($g,pze),e($g,YB),e(YB,_ze),e($g,uze),e(E,bze),e(E,Ig),e(Ig,BU),e(BU,vze),e(Ig,Tze),e(Ig,KB),e(KB,Fze),e(Ig,Cze),e(E,Mze),e(E,Zn),e(Zn,xU),e(xU,Eze),e(Zn,yze),e(Zn,ZB),e(ZB,wze),e(Zn,Aze),e(Zn,ex),e(ex,Lze),e(Zn,Bze),e(E,xze),e(E,jg),e(jg,kU),e(kU,kze),e(jg,Rze),e(jg,ox),e(ox,Sze),e(jg,Pze),e(E,$ze),e(E,es),e(es,RU),e(RU,Ize),e(es,jze),e(es,rx),e(rx,Dze),e(es,Nze),e(es,tx),e(tx,qze),e(es,Oze),e(E,Gze),e(E,os),e(os,SU),e(SU,Xze),e(os,Vze),e(os,ax),e(ax,zze),e(os,Wze),e(os,nx),e(nx,Qze),e(os,Hze),e(E,Uze),e(E,rs),e(rs,PU),e(PU,Jze),e(rs,Yze),e(rs,sx),e(sx,Kze),e(rs,Zze),e(rs,$U),e($U,eWe),e(rs,oWe),e(E,rWe),e(E,Dg),e(Dg,IU),e(IU,tWe),e(Dg,aWe),e(Dg,lx),e(lx,nWe),e(Dg,sWe),e(E,lWe),e(E,ts),e(ts,jU),e(jU,iWe),e(ts,dWe),e(ts,ix),e(ix,cWe),e(ts,fWe),e(ts,dx),e(dx,mWe),e(ts,gWe),e(E,hWe),e(E,as),e(as,DU),e(DU,pWe),e(as,_We),e(as,cx),e(cx,uWe),e(as,bWe),e(as,fx),e(fx,vWe),e(as,TWe),e(E,FWe),e(E,ns),e(ns,NU),e(NU,CWe),e(ns,MWe),e(ns,mx),e(mx,EWe),e(ns,yWe),e(ns,gx),e(gx,wWe),e(ns,AWe),e(E,LWe),e(E,ss),e(ss,qU),e(qU,BWe),e(ss,xWe),e(ss,hx),e(hx,kWe),e(ss,RWe),e(ss,px),e(px,SWe),e(ss,PWe),e(E,$We),e(E,ls),e(ls,OU),e(OU,IWe),e(ls,jWe),e(ls,_x),e(_x,DWe),e(ls,NWe),e(ls,ux),e(ux,qWe),e(ls,OWe),e(E,GWe),e(E,Ng),e(Ng,GU),e(GU,XWe),e(Ng,VWe),e(Ng,bx),e(bx,zWe),e(Ng,WWe),e(E,QWe),e(E,is),e(is,XU),e(XU,HWe),e(is,UWe),e(is,vx),e(vx,JWe),e(is,YWe),e(is,Tx),e(Tx,KWe),e(is,ZWe),e(E,eQe),e(E,qg),e(qg,VU),e(VU,oQe),e(qg,rQe),e(qg,Fx),e(Fx,tQe),e(qg,aQe),e(E,nQe),e(E,ds),e(ds,zU),e(zU,sQe),e(ds,lQe),e(ds,Cx),e(Cx,iQe),e(ds,dQe),e(ds,Mx),e(Mx,cQe),e(ds,fQe),e(E,mQe),e(E,cs),e(cs,WU),e(WU,gQe),e(cs,hQe),e(cs,Ex),e(Ex,pQe),e(cs,_Qe),e(cs,yx),e(yx,uQe),e(cs,bQe),e(E,vQe),e(E,fs),e(fs,QU),e(QU,TQe),e(fs,FQe),e(fs,wx),e(wx,CQe),e(fs,MQe),e(fs,Ax),e(Ax,EQe),e(fs,yQe),e(E,wQe),e(E,ms),e(ms,HU),e(HU,AQe),e(ms,LQe),e(ms,Lx),e(Lx,BQe),e(ms,xQe),e(ms,Bx),e(Bx,kQe),e(ms,RQe),e(E,SQe),e(E,Og),e(Og,UU),e(UU,PQe),e(Og,$Qe),e(Og,xx),e(xx,IQe),e(Og,jQe),e(E,DQe),e(E,gs),e(gs,JU),e(JU,NQe),e(gs,qQe),e(gs,kx),e(kx,OQe),e(gs,GQe),e(gs,Rx),e(Rx,XQe),e(gs,VQe),e(E,zQe),e(E,hs),e(hs,YU),e(YU,WQe),e(hs,QQe),e(hs,Sx),e(Sx,HQe),e(hs,UQe),e(hs,Px),e(Px,JQe),e(hs,YQe),e(E,KQe),e(E,ps),e(ps,KU),e(KU,ZQe),e(ps,eHe),e(ps,$x),e($x,oHe),e(ps,rHe),e(ps,Ix),e(Ix,tHe),e(ps,aHe),e(E,nHe),e(E,_s),e(_s,ZU),e(ZU,sHe),e(_s,lHe),e(_s,jx),e(jx,iHe),e(_s,dHe),e(_s,Dx),e(Dx,cHe),e(_s,fHe),e(E,mHe),e(E,us),e(us,eJ),e(eJ,gHe),e(us,hHe),e(us,Nx),e(Nx,pHe),e(us,_He),e(us,qx),e(qx,uHe),e(us,bHe),e(E,vHe),e(E,bs),e(bs,oJ),e(oJ,THe),e(bs,FHe),e(bs,Ox),e(Ox,CHe),e(bs,MHe),e(bs,Gx),e(Gx,EHe),e(bs,yHe),e(E,wHe),e(E,Gg),e(Gg,rJ),e(rJ,AHe),e(Gg,LHe),e(Gg,Xx),e(Xx,BHe),e(Gg,xHe),e(E,kHe),e(E,vs),e(vs,tJ),e(tJ,RHe),e(vs,SHe),e(vs,Vx),e(Vx,PHe),e(vs,$He),e(vs,zx),e(zx,IHe),e(vs,jHe),e(E,DHe),e(E,Xg),e(Xg,aJ),e(aJ,NHe),e(Xg,qHe),e(Xg,Wx),e(Wx,OHe),e(Xg,GHe),e(E,XHe),e(E,Vg),e(Vg,nJ),e(nJ,VHe),e(Vg,zHe),e(Vg,Qx),e(Qx,WHe),e(Vg,QHe),e(E,HHe),e(E,Ts),e(Ts,sJ),e(sJ,UHe),e(Ts,JHe),e(Ts,Hx),e(Hx,YHe),e(Ts,KHe),e(Ts,Ux),e(Ux,ZHe),e(Ts,eUe),e(E,oUe),e(E,Fs),e(Fs,lJ),e(lJ,rUe),e(Fs,tUe),e(Fs,Jx),e(Jx,aUe),e(Fs,nUe),e(Fs,Yx),e(Yx,sUe),e(Fs,lUe),e(E,iUe),e(E,zg),e(zg,iJ),e(iJ,dUe),e(zg,cUe),e(zg,Kx),e(Kx,fUe),e(zg,mUe),e(E,gUe),e(E,Cs),e(Cs,dJ),e(dJ,hUe),e(Cs,pUe),e(Cs,Zx),e(Zx,_Ue),e(Cs,uUe),e(Cs,ek),e(ek,bUe),e(Cs,vUe),e(E,TUe),e(E,Ms),e(Ms,cJ),e(cJ,FUe),e(Ms,CUe),e(Ms,ok),e(ok,MUe),e(Ms,EUe),e(Ms,rk),e(rk,yUe),e(Ms,wUe),e(E,AUe),e(E,Es),e(Es,fJ),e(fJ,LUe),e(Es,BUe),e(Es,tk),e(tk,xUe),e(Es,kUe),e(Es,ak),e(ak,RUe),e(Es,SUe),e(E,PUe),e(E,ys),e(ys,mJ),e(mJ,$Ue),e(ys,IUe),e(ys,nk),e(nk,jUe),e(ys,DUe),e(ys,sk),e(sk,NUe),e(ys,qUe),e(E,OUe),e(E,ws),e(ws,gJ),e(gJ,GUe),e(ws,XUe),e(ws,lk),e(lk,VUe),e(ws,zUe),e(ws,ik),e(ik,WUe),e(ws,QUe),e(E,HUe),e(E,Wg),e(Wg,hJ),e(hJ,UUe),e(Wg,JUe),e(Wg,dk),e(dk,YUe),e(Wg,KUe),e(E,ZUe),e(E,Qg),e(Qg,pJ),e(pJ,eJe),e(Qg,oJe),e(Qg,ck),e(ck,rJe),e(Qg,tJe),e(E,aJe),e(E,Hg),e(Hg,_J),e(_J,nJe),e(Hg,sJe),e(Hg,fk),e(fk,lJe),e(Hg,iJe),e(E,dJe),e(E,Ug),e(Ug,uJ),e(uJ,cJe),e(Ug,fJe),e(Ug,mk),e(mk,mJe),e(Ug,gJe),e(E,hJe),e(E,As),e(As,bJ),e(bJ,pJe),e(As,_Je),e(As,gk),e(gk,uJe),e(As,bJe),e(As,hk),e(hk,vJe),e(As,TJe),e(E,FJe),e(E,Jg),e(Jg,vJ),e(vJ,CJe),e(Jg,MJe),e(Jg,pk),e(pk,EJe),e(Jg,yJe),e(E,wJe),e(E,Ls),e(Ls,TJ),e(TJ,AJe),e(Ls,LJe),e(Ls,_k),e(_k,BJe),e(Ls,xJe),e(Ls,uk),e(uk,kJe),e(Ls,RJe),e(E,SJe),e(E,Bs),e(Bs,FJ),e(FJ,PJe),e(Bs,$Je),e(Bs,bk),e(bk,IJe),e(Bs,jJe),e(Bs,vk),e(vk,DJe),e(Bs,NJe),e(E,qJe),e(E,xs),e(xs,CJ),e(CJ,OJe),e(xs,GJe),e(xs,Tk),e(Tk,XJe),e(xs,VJe),e(xs,Fk),e(Fk,zJe),e(xs,WJe),e(E,QJe),e(E,ks),e(ks,MJ),e(MJ,HJe),e(ks,UJe),e(ks,Ck),e(Ck,JJe),e(ks,YJe),e(ks,Mk),e(Mk,KJe),e(ks,ZJe),e(E,eYe),e(E,Rs),e(Rs,EJ),e(EJ,oYe),e(Rs,rYe),e(Rs,Ek),e(Ek,tYe),e(Rs,aYe),e(Rs,yk),e(yk,nYe),e(Rs,sYe),e(E,lYe),e(E,Ss),e(Ss,yJ),e(yJ,iYe),e(Ss,dYe),e(Ss,wk),e(wk,cYe),e(Ss,fYe),e(Ss,Ak),e(Ak,mYe),e(Ss,gYe),e(E,hYe),e(E,Yg),e(Yg,wJ),e(wJ,pYe),e(Yg,_Ye),e(Yg,Lk),e(Lk,uYe),e(Yg,bYe),e(E,vYe),e(E,Kg),e(Kg,AJ),e(AJ,TYe),e(Kg,FYe),e(Kg,Bk),e(Bk,CYe),e(Kg,MYe),e(E,EYe),e(E,Ps),e(Ps,LJ),e(LJ,yYe),e(Ps,wYe),e(Ps,xk),e(xk,AYe),e(Ps,LYe),e(Ps,kk),e(kk,BYe),e(Ps,xYe),e(E,kYe),e(E,$s),e($s,BJ),e(BJ,RYe),e($s,SYe),e($s,Rk),e(Rk,PYe),e($s,$Ye),e($s,Sk),e(Sk,IYe),e($s,jYe),e(E,DYe),e(E,Is),e(Is,xJ),e(xJ,NYe),e(Is,qYe),e(Is,Pk),e(Pk,OYe),e(Is,GYe),e(Is,$k),e($k,XYe),e(Is,VYe),e(E,zYe),e(E,Zg),e(Zg,kJ),e(kJ,WYe),e(Zg,QYe),e(Zg,Ik),e(Ik,HYe),e(Zg,UYe),e(E,JYe),e(E,eh),e(eh,RJ),e(RJ,YYe),e(eh,KYe),e(eh,jk),e(jk,ZYe),e(eh,eKe),e(E,oKe),e(E,oh),e(oh,SJ),e(SJ,rKe),e(oh,tKe),e(oh,Dk),e(Dk,aKe),e(oh,nKe),e(E,sKe),e(E,rh),e(rh,PJ),e(PJ,lKe),e(rh,iKe),e(rh,Nk),e(Nk,dKe),e(rh,cKe),e(E,fKe),e(E,js),e(js,$J),e($J,mKe),e(js,gKe),e(js,qk),e(qk,hKe),e(js,pKe),e(js,Ok),e(Ok,_Ke),e(js,uKe),e(E,bKe),e(E,th),e(th,IJ),e(IJ,vKe),e(th,TKe),e(th,Gk),e(Gk,FKe),e(th,CKe),e(E,MKe),e(E,ah),e(ah,jJ),e(jJ,EKe),e(ah,yKe),e(ah,Xk),e(Xk,wKe),e(ah,AKe),e(E,LKe),e(E,Ds),e(Ds,DJ),e(DJ,BKe),e(Ds,xKe),e(Ds,Vk),e(Vk,kKe),e(Ds,RKe),e(Ds,zk),e(zk,SKe),e(Ds,PKe),e(E,$Ke),e(E,Ns),e(Ns,NJ),e(NJ,IKe),e(Ns,jKe),e(Ns,Wk),e(Wk,DKe),e(Ns,NKe),e(Ns,Qk),e(Qk,qKe),e(Ns,OKe),e(go,GKe),e(go,qJ),e(qJ,XKe),e(go,VKe),g(d3,go,null),e(Qo,zKe),e(Qo,nh),g(c3,nh,null),e(nh,WKe),e(nh,OJ),e(OJ,QKe),b(d,ixe,u),b(d,Hi,u),e(Hi,sh),e(sh,GJ),g(f3,GJ,null),e(Hi,HKe),e(Hi,XJ),e(XJ,UKe),b(d,dxe,u),b(d,Ho,u),g(m3,Ho,null),e(Ho,JKe),e(Ho,g3),e(g3,YKe),e(g3,Hk),e(Hk,KKe),e(g3,ZKe),e(Ho,eZe),e(Ho,h3),e(h3,oZe),e(h3,VJ),e(VJ,rZe),e(h3,tZe),e(Ho,aZe),e(Ho,$e),g(p3,$e,null),e($e,nZe),e($e,zJ),e(zJ,sZe),e($e,lZe),e($e,Ga),e(Ga,iZe),e(Ga,WJ),e(WJ,dZe),e(Ga,cZe),e(Ga,QJ),e(QJ,fZe),e(Ga,mZe),e(Ga,HJ),e(HJ,gZe),e(Ga,hZe),e($e,pZe),e($e,ae),e(ae,lh),e(lh,UJ),e(UJ,_Ze),e(lh,uZe),e(lh,Uk),e(Uk,bZe),e(lh,vZe),e(ae,TZe),e(ae,ih),e(ih,JJ),e(JJ,FZe),e(ih,CZe),e(ih,Jk),e(Jk,MZe),e(ih,EZe),e(ae,yZe),e(ae,dh),e(dh,YJ),e(YJ,wZe),e(dh,AZe),e(dh,Yk),e(Yk,LZe),e(dh,BZe),e(ae,xZe),e(ae,ch),e(ch,KJ),e(KJ,kZe),e(ch,RZe),e(ch,Kk),e(Kk,SZe),e(ch,PZe),e(ae,$Ze),e(ae,fh),e(fh,ZJ),e(ZJ,IZe),e(fh,jZe),e(fh,Zk),e(Zk,DZe),e(fh,NZe),e(ae,qZe),e(ae,mh),e(mh,eY),e(eY,OZe),e(mh,GZe),e(mh,eR),e(eR,XZe),e(mh,VZe),e(ae,zZe),e(ae,gh),e(gh,oY),e(oY,WZe),e(gh,QZe),e(gh,oR),e(oR,HZe),e(gh,UZe),e(ae,JZe),e(ae,hh),e(hh,rY),e(rY,YZe),e(hh,KZe),e(hh,rR),e(rR,ZZe),e(hh,eeo),e(ae,oeo),e(ae,ph),e(ph,tY),e(tY,reo),e(ph,teo),e(ph,tR),e(tR,aeo),e(ph,neo),e(ae,seo),e(ae,_h),e(_h,aY),e(aY,leo),e(_h,ieo),e(_h,aR),e(aR,deo),e(_h,ceo),e(ae,feo),e(ae,uh),e(uh,nY),e(nY,meo),e(uh,geo),e(uh,nR),e(nR,heo),e(uh,peo),e(ae,_eo),e(ae,bh),e(bh,sY),e(sY,ueo),e(bh,beo),e(bh,sR),e(sR,veo),e(bh,Teo),e(ae,Feo),e(ae,vh),e(vh,lY),e(lY,Ceo),e(vh,Meo),e(vh,lR),e(lR,Eeo),e(vh,yeo),e(ae,weo),e(ae,Th),e(Th,iY),e(iY,Aeo),e(Th,Leo),e(Th,iR),e(iR,Beo),e(Th,xeo),e(ae,keo),e(ae,Fh),e(Fh,dY),e(dY,Reo),e(Fh,Seo),e(Fh,dR),e(dR,Peo),e(Fh,$eo),e(ae,Ieo),e(ae,Ch),e(Ch,cY),e(cY,jeo),e(Ch,Deo),e(Ch,cR),e(cR,Neo),e(Ch,qeo),e($e,Oeo),g(Mh,$e,null),e($e,Geo),e($e,fY),e(fY,Xeo),e($e,Veo),g(_3,$e,null),e(Ho,zeo),e(Ho,Eh),g(u3,Eh,null),e(Eh,Weo),e(Eh,mY),e(mY,Qeo),b(d,cxe,u),b(d,Ui,u),e(Ui,yh),e(yh,gY),g(b3,gY,null),e(Ui,Heo),e(Ui,hY),e(hY,Ueo),b(d,fxe,u),b(d,Uo,u),g(v3,Uo,null),e(Uo,Jeo),e(Uo,T3),e(T3,Yeo),e(T3,fR),e(fR,Keo),e(T3,Zeo),e(Uo,eoo),e(Uo,F3),e(F3,ooo),e(F3,pY),e(pY,roo),e(F3,too),e(Uo,aoo),e(Uo,Ie),g(C3,Ie,null),e(Ie,noo),e(Ie,_Y),e(_Y,soo),e(Ie,loo),e(Ie,Ji),e(Ji,ioo),e(Ji,uY),e(uY,doo),e(Ji,coo),e(Ji,bY),e(bY,foo),e(Ji,moo),e(Ie,goo),e(Ie,Be),e(Be,wh),e(wh,vY),e(vY,hoo),e(wh,poo),e(wh,mR),e(mR,_oo),e(wh,uoo),e(Be,boo),e(Be,Ah),e(Ah,TY),e(TY,voo),e(Ah,Too),e(Ah,gR),e(gR,Foo),e(Ah,Coo),e(Be,Moo),e(Be,Lh),e(Lh,FY),e(FY,Eoo),e(Lh,yoo),e(Lh,hR),e(hR,woo),e(Lh,Aoo),e(Be,Loo),e(Be,Bh),e(Bh,CY),e(CY,Boo),e(Bh,xoo),e(Bh,pR),e(pR,koo),e(Bh,Roo),e(Be,Soo),e(Be,xh),e(xh,MY),e(MY,Poo),e(xh,$oo),e(xh,_R),e(_R,Ioo),e(xh,joo),e(Be,Doo),e(Be,kh),e(kh,EY),e(EY,Noo),e(kh,qoo),e(kh,uR),e(uR,Ooo),e(kh,Goo),e(Be,Xoo),e(Be,Rh),e(Rh,yY),e(yY,Voo),e(Rh,zoo),e(Rh,bR),e(bR,Woo),e(Rh,Qoo),e(Be,Hoo),e(Be,Sh),e(Sh,wY),e(wY,Uoo),e(Sh,Joo),e(Sh,vR),e(vR,Yoo),e(Sh,Koo),e(Ie,Zoo),g(Ph,Ie,null),e(Ie,ero),e(Ie,AY),e(AY,oro),e(Ie,rro),g(M3,Ie,null),e(Uo,tro),e(Uo,$h),g(E3,$h,null),e($h,aro),e($h,LY),e(LY,nro),b(d,mxe,u),b(d,Yi,u),e(Yi,Ih),e(Ih,BY),g(y3,BY,null),e(Yi,sro),e(Yi,xY),e(xY,lro),b(d,gxe,u),b(d,Jo,u),g(w3,Jo,null),e(Jo,iro),e(Jo,Ki),e(Ki,dro),e(Ki,kY),e(kY,cro),e(Ki,fro),e(Ki,RY),e(RY,mro),e(Ki,gro),e(Jo,hro),e(Jo,A3),e(A3,pro),e(A3,SY),e(SY,_ro),e(A3,uro),e(Jo,bro),e(Jo,Vr),g(L3,Vr,null),e(Vr,vro),e(Vr,PY),e(PY,Tro),e(Vr,Fro),e(Vr,Zi),e(Zi,Cro),e(Zi,$Y),e($Y,Mro),e(Zi,Ero),e(Zi,IY),e(IY,yro),e(Zi,wro),e(Vr,Aro),e(Vr,jY),e(jY,Lro),e(Vr,Bro),g(B3,Vr,null),e(Jo,xro),e(Jo,je),g(x3,je,null),e(je,kro),e(je,DY),e(DY,Rro),e(je,Sro),e(je,Xa),e(Xa,Pro),e(Xa,NY),e(NY,$ro),e(Xa,Iro),e(Xa,qY),e(qY,jro),e(Xa,Dro),e(Xa,OY),e(OY,Nro),e(Xa,qro),e(je,Oro),e(je,F),e(F,jh),e(jh,GY),e(GY,Gro),e(jh,Xro),e(jh,TR),e(TR,Vro),e(jh,zro),e(F,Wro),e(F,Dh),e(Dh,XY),e(XY,Qro),e(Dh,Hro),e(Dh,FR),e(FR,Uro),e(Dh,Jro),e(F,Yro),e(F,Nh),e(Nh,VY),e(VY,Kro),e(Nh,Zro),e(Nh,CR),e(CR,eto),e(Nh,oto),e(F,rto),e(F,qh),e(qh,zY),e(zY,tto),e(qh,ato),e(qh,MR),e(MR,nto),e(qh,sto),e(F,lto),e(F,Oh),e(Oh,WY),e(WY,ito),e(Oh,dto),e(Oh,ER),e(ER,cto),e(Oh,fto),e(F,mto),e(F,Gh),e(Gh,QY),e(QY,gto),e(Gh,hto),e(Gh,yR),e(yR,pto),e(Gh,_to),e(F,uto),e(F,Xh),e(Xh,HY),e(HY,bto),e(Xh,vto),e(Xh,wR),e(wR,Tto),e(Xh,Fto),e(F,Cto),e(F,Vh),e(Vh,UY),e(UY,Mto),e(Vh,Eto),e(Vh,AR),e(AR,yto),e(Vh,wto),e(F,Ato),e(F,zh),e(zh,JY),e(JY,Lto),e(zh,Bto),e(zh,LR),e(LR,xto),e(zh,kto),e(F,Rto),e(F,Wh),e(Wh,YY),e(YY,Sto),e(Wh,Pto),e(Wh,BR),e(BR,$to),e(Wh,Ito),e(F,jto),e(F,Qh),e(Qh,KY),e(KY,Dto),e(Qh,Nto),e(Qh,xR),e(xR,qto),e(Qh,Oto),e(F,Gto),e(F,Hh),e(Hh,ZY),e(ZY,Xto),e(Hh,Vto),e(Hh,kR),e(kR,zto),e(Hh,Wto),e(F,Qto),e(F,Uh),e(Uh,eK),e(eK,Hto),e(Uh,Uto),e(Uh,RR),e(RR,Jto),e(Uh,Yto),e(F,Kto),e(F,Jh),e(Jh,oK),e(oK,Zto),e(Jh,eao),e(Jh,SR),e(SR,oao),e(Jh,rao),e(F,tao),e(F,Yh),e(Yh,rK),e(rK,aao),e(Yh,nao),e(Yh,PR),e(PR,sao),e(Yh,lao),e(F,iao),e(F,Kh),e(Kh,tK),e(tK,dao),e(Kh,cao),e(Kh,$R),e($R,fao),e(Kh,mao),e(F,gao),e(F,Zh),e(Zh,aK),e(aK,hao),e(Zh,pao),e(Zh,IR),e(IR,_ao),e(Zh,uao),e(F,bao),e(F,ep),e(ep,nK),e(nK,vao),e(ep,Tao),e(ep,jR),e(jR,Fao),e(ep,Cao),e(F,Mao),e(F,op),e(op,sK),e(sK,Eao),e(op,yao),e(op,DR),e(DR,wao),e(op,Aao),e(F,Lao),e(F,rp),e(rp,lK),e(lK,Bao),e(rp,xao),e(rp,NR),e(NR,kao),e(rp,Rao),e(F,Sao),e(F,tp),e(tp,iK),e(iK,Pao),e(tp,$ao),e(tp,qR),e(qR,Iao),e(tp,jao),e(F,Dao),e(F,ap),e(ap,dK),e(dK,Nao),e(ap,qao),e(ap,OR),e(OR,Oao),e(ap,Gao),e(F,Xao),e(F,np),e(np,cK),e(cK,Vao),e(np,zao),e(np,GR),e(GR,Wao),e(np,Qao),e(F,Hao),e(F,sp),e(sp,fK),e(fK,Uao),e(sp,Jao),e(sp,XR),e(XR,Yao),e(sp,Kao),e(F,Zao),e(F,lp),e(lp,mK),e(mK,eno),e(lp,ono),e(lp,VR),e(VR,rno),e(lp,tno),e(F,ano),e(F,ip),e(ip,gK),e(gK,nno),e(ip,sno),e(ip,zR),e(zR,lno),e(ip,ino),e(F,dno),e(F,dp),e(dp,hK),e(hK,cno),e(dp,fno),e(dp,WR),e(WR,mno),e(dp,gno),e(F,hno),e(F,qs),e(qs,pK),e(pK,pno),e(qs,_no),e(qs,QR),e(QR,uno),e(qs,bno),e(qs,HR),e(HR,vno),e(qs,Tno),e(F,Fno),e(F,cp),e(cp,_K),e(_K,Cno),e(cp,Mno),e(cp,UR),e(UR,Eno),e(cp,yno),e(F,wno),e(F,fp),e(fp,uK),e(uK,Ano),e(fp,Lno),e(fp,JR),e(JR,Bno),e(fp,xno),e(F,kno),e(F,mp),e(mp,bK),e(bK,Rno),e(mp,Sno),e(mp,YR),e(YR,Pno),e(mp,$no),e(F,Ino),e(F,gp),e(gp,vK),e(vK,jno),e(gp,Dno),e(gp,KR),e(KR,Nno),e(gp,qno),e(F,Ono),e(F,hp),e(hp,TK),e(TK,Gno),e(hp,Xno),e(hp,ZR),e(ZR,Vno),e(hp,zno),e(F,Wno),e(F,pp),e(pp,FK),e(FK,Qno),e(pp,Hno),e(pp,eS),e(eS,Uno),e(pp,Jno),e(F,Yno),e(F,_p),e(_p,CK),e(CK,Kno),e(_p,Zno),e(_p,oS),e(oS,eso),e(_p,oso),e(F,rso),e(F,up),e(up,MK),e(MK,tso),e(up,aso),e(up,rS),e(rS,nso),e(up,sso),e(F,lso),e(F,bp),e(bp,EK),e(EK,iso),e(bp,dso),e(bp,tS),e(tS,cso),e(bp,fso),e(F,mso),e(F,vp),e(vp,yK),e(yK,gso),e(vp,hso),e(vp,aS),e(aS,pso),e(vp,_so),e(F,uso),e(F,Tp),e(Tp,wK),e(wK,bso),e(Tp,vso),e(Tp,nS),e(nS,Tso),e(Tp,Fso),e(F,Cso),e(F,Fp),e(Fp,AK),e(AK,Mso),e(Fp,Eso),e(Fp,sS),e(sS,yso),e(Fp,wso),e(F,Aso),e(F,Cp),e(Cp,LK),e(LK,Lso),e(Cp,Bso),e(Cp,lS),e(lS,xso),e(Cp,kso),e(F,Rso),e(F,Mp),e(Mp,BK),e(BK,Sso),e(Mp,Pso),e(Mp,iS),e(iS,$so),e(Mp,Iso),e(F,jso),e(F,Ep),e(Ep,xK),e(xK,Dso),e(Ep,Nso),e(Ep,dS),e(dS,qso),e(Ep,Oso),e(F,Gso),e(F,yp),e(yp,kK),e(kK,Xso),e(yp,Vso),e(yp,cS),e(cS,zso),e(yp,Wso),e(F,Qso),e(F,wp),e(wp,RK),e(RK,Hso),e(wp,Uso),e(wp,fS),e(fS,Jso),e(wp,Yso),e(F,Kso),e(F,Ap),e(Ap,SK),e(SK,Zso),e(Ap,elo),e(Ap,mS),e(mS,olo),e(Ap,rlo),e(F,tlo),e(F,Lp),e(Lp,PK),e(PK,alo),e(Lp,nlo),e(Lp,gS),e(gS,slo),e(Lp,llo),e(F,ilo),e(F,Bp),e(Bp,$K),e($K,dlo),e(Bp,clo),e(Bp,hS),e(hS,flo),e(Bp,mlo),e(F,glo),e(F,xp),e(xp,IK),e(IK,hlo),e(xp,plo),e(xp,pS),e(pS,_lo),e(xp,ulo),e(F,blo),e(F,kp),e(kp,jK),e(jK,vlo),e(kp,Tlo),e(kp,_S),e(_S,Flo),e(kp,Clo),e(F,Mlo),e(F,Rp),e(Rp,DK),e(DK,Elo),e(Rp,ylo),e(Rp,uS),e(uS,wlo),e(Rp,Alo),e(F,Llo),e(F,Sp),e(Sp,NK),e(NK,Blo),e(Sp,xlo),e(Sp,bS),e(bS,klo),e(Sp,Rlo),e(F,Slo),e(F,Pp),e(Pp,qK),e(qK,Plo),e(Pp,$lo),e(Pp,vS),e(vS,Ilo),e(Pp,jlo),e(F,Dlo),e(F,$p),e($p,OK),e(OK,Nlo),e($p,qlo),e($p,TS),e(TS,Olo),e($p,Glo),e(F,Xlo),e(F,Ip),e(Ip,GK),e(GK,Vlo),e(Ip,zlo),e(Ip,FS),e(FS,Wlo),e(Ip,Qlo),e(F,Hlo),e(F,jp),e(jp,XK),e(XK,Ulo),e(jp,Jlo),e(jp,CS),e(CS,Ylo),e(jp,Klo),e(F,Zlo),e(F,Dp),e(Dp,VK),e(VK,eio),e(Dp,oio),e(Dp,MS),e(MS,rio),e(Dp,tio),e(F,aio),e(F,Np),e(Np,zK),e(zK,nio),e(Np,sio),e(Np,ES),e(ES,lio),e(Np,iio),e(F,dio),e(F,qp),e(qp,WK),e(WK,cio),e(qp,fio),e(qp,yS),e(yS,mio),e(qp,gio),e(F,hio),e(F,Op),e(Op,QK),e(QK,pio),e(Op,_io),e(Op,wS),e(wS,uio),e(Op,bio),e(F,vio),e(F,Gp),e(Gp,HK),e(HK,Tio),e(Gp,Fio),e(Gp,AS),e(AS,Cio),e(Gp,Mio),e(F,Eio),e(F,Xp),e(Xp,UK),e(UK,yio),e(Xp,wio),e(Xp,LS),e(LS,Aio),e(Xp,Lio),e(F,Bio),e(F,Vp),e(Vp,JK),e(JK,xio),e(Vp,kio),e(Vp,BS),e(BS,Rio),e(Vp,Sio),e(F,Pio),e(F,zp),e(zp,YK),e(YK,$io),e(zp,Iio),e(zp,xS),e(xS,jio),e(zp,Dio),e(F,Nio),e(F,Wp),e(Wp,KK),e(KK,qio),e(Wp,Oio),e(Wp,kS),e(kS,Gio),e(Wp,Xio),e(F,Vio),e(F,Qp),e(Qp,ZK),e(ZK,zio),e(Qp,Wio),e(Qp,RS),e(RS,Qio),e(Qp,Hio),e(F,Uio),e(F,Hp),e(Hp,eZ),e(eZ,Jio),e(Hp,Yio),e(Hp,SS),e(SS,Kio),e(Hp,Zio),e(F,edo),e(F,Up),e(Up,oZ),e(oZ,odo),e(Up,rdo),e(Up,PS),e(PS,tdo),e(Up,ado),e(F,ndo),e(F,Jp),e(Jp,rZ),e(rZ,sdo),e(Jp,ldo),e(Jp,$S),e($S,ido),e(Jp,ddo),e(F,cdo),e(F,Yp),e(Yp,tZ),e(tZ,fdo),e(Yp,mdo),e(Yp,IS),e(IS,gdo),e(Yp,hdo),e(F,pdo),e(F,Kp),e(Kp,aZ),e(aZ,_do),e(Kp,udo),e(Kp,jS),e(jS,bdo),e(Kp,vdo),e(F,Tdo),e(F,Zp),e(Zp,nZ),e(nZ,Fdo),e(Zp,Cdo),e(Zp,DS),e(DS,Mdo),e(Zp,Edo),e(F,ydo),e(F,e_),e(e_,sZ),e(sZ,wdo),e(e_,Ado),e(e_,NS),e(NS,Ldo),e(e_,Bdo),e(F,xdo),e(F,o_),e(o_,lZ),e(lZ,kdo),e(o_,Rdo),e(o_,qS),e(qS,Sdo),e(o_,Pdo),e(F,$do),e(F,r_),e(r_,iZ),e(iZ,Ido),e(r_,jdo),e(r_,OS),e(OS,Ddo),e(r_,Ndo),e(F,qdo),e(F,t_),e(t_,dZ),e(dZ,Odo),e(t_,Gdo),e(t_,GS),e(GS,Xdo),e(t_,Vdo),e(F,zdo),e(F,a_),e(a_,cZ),e(cZ,Wdo),e(a_,Qdo),e(a_,XS),e(XS,Hdo),e(a_,Udo),e(F,Jdo),e(F,n_),e(n_,fZ),e(fZ,Ydo),e(n_,Kdo),e(n_,VS),e(VS,Zdo),e(n_,eco),e(F,oco),e(F,s_),e(s_,mZ),e(mZ,rco),e(s_,tco),e(s_,zS),e(zS,aco),e(s_,nco),e(F,sco),e(F,l_),e(l_,gZ),e(gZ,lco),e(l_,ico),e(l_,WS),e(WS,dco),e(l_,cco),e(F,fco),e(F,i_),e(i_,hZ),e(hZ,mco),e(i_,gco),e(i_,QS),e(QS,hco),e(i_,pco),e(F,_co),e(F,d_),e(d_,pZ),e(pZ,uco),e(d_,bco),e(d_,HS),e(HS,vco),e(d_,Tco),e(F,Fco),e(F,c_),e(c_,_Z),e(_Z,Cco),e(c_,Mco),e(c_,US),e(US,Eco),e(c_,yco),e(F,wco),e(F,f_),e(f_,uZ),e(uZ,Aco),e(f_,Lco),e(f_,JS),e(JS,Bco),e(f_,xco),e(F,kco),e(F,m_),e(m_,bZ),e(bZ,Rco),e(m_,Sco),e(m_,YS),e(YS,Pco),e(m_,$co),e(F,Ico),e(F,g_),e(g_,vZ),e(vZ,jco),e(g_,Dco),e(g_,KS),e(KS,Nco),e(g_,qco),e(F,Oco),e(F,h_),e(h_,TZ),e(TZ,Gco),e(h_,Xco),e(h_,ZS),e(ZS,Vco),e(h_,zco),e(je,Wco),e(je,p_),e(p_,Qco),e(p_,FZ),e(FZ,Hco),e(p_,Uco),e(p_,CZ),e(CZ,Jco),e(je,Yco),e(je,MZ),e(MZ,Kco),e(je,Zco),g(k3,je,null),b(d,hxe,u),b(d,ed,u),e(ed,__),e(__,EZ),g(R3,EZ,null),e(ed,efo),e(ed,yZ),e(yZ,ofo),b(d,pxe,u),b(d,Yo,u),g(S3,Yo,null),e(Yo,rfo),e(Yo,od),e(od,tfo),e(od,wZ),e(wZ,afo),e(od,nfo),e(od,AZ),e(AZ,sfo),e(od,lfo),e(Yo,ifo),e(Yo,P3),e(P3,dfo),e(P3,LZ),e(LZ,cfo),e(P3,ffo),e(Yo,mfo),e(Yo,zr),g($3,zr,null),e(zr,gfo),e(zr,BZ),e(BZ,hfo),e(zr,pfo),e(zr,rd),e(rd,_fo),e(rd,xZ),e(xZ,ufo),e(rd,bfo),e(rd,kZ),e(kZ,vfo),e(rd,Tfo),e(zr,Ffo),e(zr,RZ),e(RZ,Cfo),e(zr,Mfo),g(I3,zr,null),e(Yo,Efo),e(Yo,De),g(j3,De,null),e(De,yfo),e(De,SZ),e(SZ,wfo),e(De,Afo),e(De,Va),e(Va,Lfo),e(Va,PZ),e(PZ,Bfo),e(Va,xfo),e(Va,$Z),e($Z,kfo),e(Va,Rfo),e(Va,IZ),e(IZ,Sfo),e(Va,Pfo),e(De,$fo),e(De,k),e(k,u_),e(u_,jZ),e(jZ,Ifo),e(u_,jfo),e(u_,eP),e(eP,Dfo),e(u_,Nfo),e(k,qfo),e(k,b_),e(b_,DZ),e(DZ,Ofo),e(b_,Gfo),e(b_,oP),e(oP,Xfo),e(b_,Vfo),e(k,zfo),e(k,v_),e(v_,NZ),e(NZ,Wfo),e(v_,Qfo),e(v_,rP),e(rP,Hfo),e(v_,Ufo),e(k,Jfo),e(k,T_),e(T_,qZ),e(qZ,Yfo),e(T_,Kfo),e(T_,tP),e(tP,Zfo),e(T_,emo),e(k,omo),e(k,F_),e(F_,OZ),e(OZ,rmo),e(F_,tmo),e(F_,aP),e(aP,amo),e(F_,nmo),e(k,smo),e(k,C_),e(C_,GZ),e(GZ,lmo),e(C_,imo),e(C_,nP),e(nP,dmo),e(C_,cmo),e(k,fmo),e(k,M_),e(M_,XZ),e(XZ,mmo),e(M_,gmo),e(M_,sP),e(sP,hmo),e(M_,pmo),e(k,_mo),e(k,E_),e(E_,VZ),e(VZ,umo),e(E_,bmo),e(E_,lP),e(lP,vmo),e(E_,Tmo),e(k,Fmo),e(k,y_),e(y_,zZ),e(zZ,Cmo),e(y_,Mmo),e(y_,iP),e(iP,Emo),e(y_,ymo),e(k,wmo),e(k,w_),e(w_,WZ),e(WZ,Amo),e(w_,Lmo),e(w_,dP),e(dP,Bmo),e(w_,xmo),e(k,kmo),e(k,A_),e(A_,QZ),e(QZ,Rmo),e(A_,Smo),e(A_,cP),e(cP,Pmo),e(A_,$mo),e(k,Imo),e(k,L_),e(L_,HZ),e(HZ,jmo),e(L_,Dmo),e(L_,fP),e(fP,Nmo),e(L_,qmo),e(k,Omo),e(k,B_),e(B_,UZ),e(UZ,Gmo),e(B_,Xmo),e(B_,mP),e(mP,Vmo),e(B_,zmo),e(k,Wmo),e(k,x_),e(x_,JZ),e(JZ,Qmo),e(x_,Hmo),e(x_,gP),e(gP,Umo),e(x_,Jmo),e(k,Ymo),e(k,k_),e(k_,YZ),e(YZ,Kmo),e(k_,Zmo),e(k_,hP),e(hP,ego),e(k_,ogo),e(k,rgo),e(k,R_),e(R_,KZ),e(KZ,tgo),e(R_,ago),e(R_,pP),e(pP,ngo),e(R_,sgo),e(k,lgo),e(k,S_),e(S_,ZZ),e(ZZ,igo),e(S_,dgo),e(S_,_P),e(_P,cgo),e(S_,fgo),e(k,mgo),e(k,P_),e(P_,eee),e(eee,ggo),e(P_,hgo),e(P_,uP),e(uP,pgo),e(P_,_go),e(k,ugo),e(k,$_),e($_,oee),e(oee,bgo),e($_,vgo),e($_,bP),e(bP,Tgo),e($_,Fgo),e(k,Cgo),e(k,I_),e(I_,ree),e(ree,Mgo),e(I_,Ego),e(I_,vP),e(vP,ygo),e(I_,wgo),e(k,Ago),e(k,j_),e(j_,tee),e(tee,Lgo),e(j_,Bgo),e(j_,TP),e(TP,xgo),e(j_,kgo),e(k,Rgo),e(k,D_),e(D_,aee),e(aee,Sgo),e(D_,Pgo),e(D_,FP),e(FP,$go),e(D_,Igo),e(k,jgo),e(k,N_),e(N_,nee),e(nee,Dgo),e(N_,Ngo),e(N_,CP),e(CP,qgo),e(N_,Ogo),e(k,Ggo),e(k,q_),e(q_,see),e(see,Xgo),e(q_,Vgo),e(q_,MP),e(MP,zgo),e(q_,Wgo),e(k,Qgo),e(k,O_),e(O_,lee),e(lee,Hgo),e(O_,Ugo),e(O_,EP),e(EP,Jgo),e(O_,Ygo),e(k,Kgo),e(k,G_),e(G_,iee),e(iee,Zgo),e(G_,eho),e(G_,yP),e(yP,oho),e(G_,rho),e(k,tho),e(k,X_),e(X_,dee),e(dee,aho),e(X_,nho),e(X_,wP),e(wP,sho),e(X_,lho),e(k,iho),e(k,V_),e(V_,cee),e(cee,dho),e(V_,cho),e(V_,AP),e(AP,fho),e(V_,mho),e(k,gho),e(k,z_),e(z_,fee),e(fee,hho),e(z_,pho),e(z_,LP),e(LP,_ho),e(z_,uho),e(k,bho),e(k,W_),e(W_,mee),e(mee,vho),e(W_,Tho),e(W_,BP),e(BP,Fho),e(W_,Cho),e(k,Mho),e(k,Q_),e(Q_,gee),e(gee,Eho),e(Q_,yho),e(Q_,xP),e(xP,who),e(Q_,Aho),e(k,Lho),e(k,H_),e(H_,hee),e(hee,Bho),e(H_,xho),e(H_,kP),e(kP,kho),e(H_,Rho),e(k,Sho),e(k,U_),e(U_,pee),e(pee,Pho),e(U_,$ho),e(U_,RP),e(RP,Iho),e(U_,jho),e(k,Dho),e(k,J_),e(J_,_ee),e(_ee,Nho),e(J_,qho),e(J_,SP),e(SP,Oho),e(J_,Gho),e(k,Xho),e(k,Y_),e(Y_,uee),e(uee,Vho),e(Y_,zho),e(Y_,PP),e(PP,Who),e(Y_,Qho),e(k,Hho),e(k,K_),e(K_,bee),e(bee,Uho),e(K_,Jho),e(K_,$P),e($P,Yho),e(K_,Kho),e(k,Zho),e(k,Z_),e(Z_,vee),e(vee,epo),e(Z_,opo),e(Z_,IP),e(IP,rpo),e(Z_,tpo),e(k,apo),e(k,eu),e(eu,Tee),e(Tee,npo),e(eu,spo),e(eu,jP),e(jP,lpo),e(eu,ipo),e(k,dpo),e(k,ou),e(ou,Fee),e(Fee,cpo),e(ou,fpo),e(ou,DP),e(DP,mpo),e(ou,gpo),e(De,hpo),e(De,ru),e(ru,ppo),e(ru,Cee),e(Cee,_po),e(ru,upo),e(ru,Mee),e(Mee,bpo),e(De,vpo),e(De,Eee),e(Eee,Tpo),e(De,Fpo),g(D3,De,null),b(d,_xe,u),b(d,td,u),e(td,tu),e(tu,yee),g(N3,yee,null),e(td,Cpo),e(td,wee),e(wee,Mpo),b(d,uxe,u),b(d,Ko,u),g(q3,Ko,null),e(Ko,Epo),e(Ko,ad),e(ad,ypo),e(ad,Aee),e(Aee,wpo),e(ad,Apo),e(ad,Lee),e(Lee,Lpo),e(ad,Bpo),e(Ko,xpo),e(Ko,O3),e(O3,kpo),e(O3,Bee),e(Bee,Rpo),e(O3,Spo),e(Ko,Ppo),e(Ko,Wr),g(G3,Wr,null),e(Wr,$po),e(Wr,xee),e(xee,Ipo),e(Wr,jpo),e(Wr,nd),e(nd,Dpo),e(nd,kee),e(kee,Npo),e(nd,qpo),e(nd,Ree),e(Ree,Opo),e(nd,Gpo),e(Wr,Xpo),e(Wr,See),e(See,Vpo),e(Wr,zpo),g(X3,Wr,null),e(Ko,Wpo),e(Ko,Ne),g(V3,Ne,null),e(Ne,Qpo),e(Ne,Pee),e(Pee,Hpo),e(Ne,Upo),e(Ne,za),e(za,Jpo),e(za,$ee),e($ee,Ypo),e(za,Kpo),e(za,Iee),e(Iee,Zpo),e(za,e_o),e(za,jee),e(jee,o_o),e(za,r_o),e(Ne,t_o),e(Ne,$),e($,au),e(au,Dee),e(Dee,a_o),e(au,n_o),e(au,NP),e(NP,s_o),e(au,l_o),e($,i_o),e($,nu),e(nu,Nee),e(Nee,d_o),e(nu,c_o),e(nu,qP),e(qP,f_o),e(nu,m_o),e($,g_o),e($,su),e(su,qee),e(qee,h_o),e(su,p_o),e(su,OP),e(OP,__o),e(su,u_o),e($,b_o),e($,lu),e(lu,Oee),e(Oee,v_o),e(lu,T_o),e(lu,GP),e(GP,F_o),e(lu,C_o),e($,M_o),e($,iu),e(iu,Gee),e(Gee,E_o),e(iu,y_o),e(iu,XP),e(XP,w_o),e(iu,A_o),e($,L_o),e($,du),e(du,Xee),e(Xee,B_o),e(du,x_o),e(du,VP),e(VP,k_o),e(du,R_o),e($,S_o),e($,cu),e(cu,Vee),e(Vee,P_o),e(cu,$_o),e(cu,zP),e(zP,I_o),e(cu,j_o),e($,D_o),e($,fu),e(fu,zee),e(zee,N_o),e(fu,q_o),e(fu,WP),e(WP,O_o),e(fu,G_o),e($,X_o),e($,mu),e(mu,Wee),e(Wee,V_o),e(mu,z_o),e(mu,QP),e(QP,W_o),e(mu,Q_o),e($,H_o),e($,gu),e(gu,Qee),e(Qee,U_o),e(gu,J_o),e(gu,HP),e(HP,Y_o),e(gu,K_o),e($,Z_o),e($,hu),e(hu,Hee),e(Hee,euo),e(hu,ouo),e(hu,UP),e(UP,ruo),e(hu,tuo),e($,auo),e($,pu),e(pu,Uee),e(Uee,nuo),e(pu,suo),e(pu,JP),e(JP,luo),e(pu,iuo),e($,duo),e($,_u),e(_u,Jee),e(Jee,cuo),e(_u,fuo),e(_u,YP),e(YP,muo),e(_u,guo),e($,huo),e($,uu),e(uu,Yee),e(Yee,puo),e(uu,_uo),e(uu,KP),e(KP,uuo),e(uu,buo),e($,vuo),e($,bu),e(bu,Kee),e(Kee,Tuo),e(bu,Fuo),e(bu,ZP),e(ZP,Cuo),e(bu,Muo),e($,Euo),e($,vu),e(vu,Zee),e(Zee,yuo),e(vu,wuo),e(vu,e$),e(e$,Auo),e(vu,Luo),e($,Buo),e($,Tu),e(Tu,eoe),e(eoe,xuo),e(Tu,kuo),e(Tu,o$),e(o$,Ruo),e(Tu,Suo),e($,Puo),e($,Fu),e(Fu,ooe),e(ooe,$uo),e(Fu,Iuo),e(Fu,r$),e(r$,juo),e(Fu,Duo),e($,Nuo),e($,Cu),e(Cu,roe),e(roe,quo),e(Cu,Ouo),e(Cu,t$),e(t$,Guo),e(Cu,Xuo),e($,Vuo),e($,Mu),e(Mu,toe),e(toe,zuo),e(Mu,Wuo),e(Mu,a$),e(a$,Quo),e(Mu,Huo),e($,Uuo),e($,Eu),e(Eu,aoe),e(aoe,Juo),e(Eu,Yuo),e(Eu,n$),e(n$,Kuo),e(Eu,Zuo),e($,e5o),e($,yu),e(yu,noe),e(noe,o5o),e(yu,r5o),e(yu,s$),e(s$,t5o),e(yu,a5o),e($,n5o),e($,wu),e(wu,soe),e(soe,s5o),e(wu,l5o),e(wu,l$),e(l$,i5o),e(wu,d5o),e($,c5o),e($,Au),e(Au,loe),e(loe,f5o),e(Au,m5o),e(Au,i$),e(i$,g5o),e(Au,h5o),e($,p5o),e($,Lu),e(Lu,ioe),e(ioe,_5o),e(Lu,u5o),e(Lu,d$),e(d$,b5o),e(Lu,v5o),e($,T5o),e($,Bu),e(Bu,doe),e(doe,F5o),e(Bu,C5o),e(Bu,c$),e(c$,M5o),e(Bu,E5o),e($,y5o),e($,xu),e(xu,coe),e(coe,w5o),e(xu,A5o),e(xu,f$),e(f$,L5o),e(xu,B5o),e($,x5o),e($,ku),e(ku,foe),e(foe,k5o),e(ku,R5o),e(ku,m$),e(m$,S5o),e(ku,P5o),e($,$5o),e($,Ru),e(Ru,moe),e(moe,I5o),e(Ru,j5o),e(Ru,g$),e(g$,D5o),e(Ru,N5o),e($,q5o),e($,Su),e(Su,goe),e(goe,O5o),e(Su,G5o),e(Su,h$),e(h$,X5o),e(Su,V5o),e($,z5o),e($,Pu),e(Pu,hoe),e(hoe,W5o),e(Pu,Q5o),e(Pu,p$),e(p$,H5o),e(Pu,U5o),e($,J5o),e($,$u),e($u,poe),e(poe,Y5o),e($u,K5o),e($u,_$),e(_$,Z5o),e($u,e2o),e($,o2o),e($,Iu),e(Iu,_oe),e(_oe,r2o),e(Iu,t2o),e(Iu,u$),e(u$,a2o),e(Iu,n2o),e($,s2o),e($,ju),e(ju,uoe),e(uoe,l2o),e(ju,i2o),e(ju,b$),e(b$,d2o),e(ju,c2o),e($,f2o),e($,Du),e(Du,boe),e(boe,m2o),e(Du,g2o),e(Du,v$),e(v$,h2o),e(Du,p2o),e(Ne,_2o),e(Ne,Nu),e(Nu,u2o),e(Nu,voe),e(voe,b2o),e(Nu,v2o),e(Nu,Toe),e(Toe,T2o),e(Ne,F2o),e(Ne,Foe),e(Foe,C2o),e(Ne,M2o),g(z3,Ne,null),b(d,bxe,u),b(d,sd,u),e(sd,qu),e(qu,Coe),g(W3,Coe,null),e(sd,E2o),e(sd,Moe),e(Moe,y2o),b(d,vxe,u),b(d,Zo,u),g(Q3,Zo,null),e(Zo,w2o),e(Zo,ld),e(ld,A2o),e(ld,Eoe),e(Eoe,L2o),e(ld,B2o),e(ld,yoe),e(yoe,x2o),e(ld,k2o),e(Zo,R2o),e(Zo,H3),e(H3,S2o),e(H3,woe),e(woe,P2o),e(H3,$2o),e(Zo,I2o),e(Zo,Qr),g(U3,Qr,null),e(Qr,j2o),e(Qr,Aoe),e(Aoe,D2o),e(Qr,N2o),e(Qr,id),e(id,q2o),e(id,Loe),e(Loe,O2o),e(id,G2o),e(id,Boe),e(Boe,X2o),e(id,V2o),e(Qr,z2o),e(Qr,xoe),e(xoe,W2o),e(Qr,Q2o),g(J3,Qr,null),e(Zo,H2o),e(Zo,qe),g(Y3,qe,null),e(qe,U2o),e(qe,koe),e(koe,J2o),e(qe,Y2o),e(qe,Wa),e(Wa,K2o),e(Wa,Roe),e(Roe,Z2o),e(Wa,e1o),e(Wa,Soe),e(Soe,o1o),e(Wa,r1o),e(Wa,Poe),e(Poe,t1o),e(Wa,a1o),e(qe,n1o),e(qe,I),e(I,Ou),e(Ou,$oe),e($oe,s1o),e(Ou,l1o),e(Ou,T$),e(T$,i1o),e(Ou,d1o),e(I,c1o),e(I,Gu),e(Gu,Ioe),e(Ioe,f1o),e(Gu,m1o),e(Gu,F$),e(F$,g1o),e(Gu,h1o),e(I,p1o),e(I,Xu),e(Xu,joe),e(joe,_1o),e(Xu,u1o),e(Xu,C$),e(C$,b1o),e(Xu,v1o),e(I,T1o),e(I,Vu),e(Vu,Doe),e(Doe,F1o),e(Vu,C1o),e(Vu,M$),e(M$,M1o),e(Vu,E1o),e(I,y1o),e(I,zu),e(zu,Noe),e(Noe,w1o),e(zu,A1o),e(zu,E$),e(E$,L1o),e(zu,B1o),e(I,x1o),e(I,Wu),e(Wu,qoe),e(qoe,k1o),e(Wu,R1o),e(Wu,y$),e(y$,S1o),e(Wu,P1o),e(I,$1o),e(I,Qu),e(Qu,Ooe),e(Ooe,I1o),e(Qu,j1o),e(Qu,w$),e(w$,D1o),e(Qu,N1o),e(I,q1o),e(I,Hu),e(Hu,Goe),e(Goe,O1o),e(Hu,G1o),e(Hu,A$),e(A$,X1o),e(Hu,V1o),e(I,z1o),e(I,Uu),e(Uu,Xoe),e(Xoe,W1o),e(Uu,Q1o),e(Uu,L$),e(L$,H1o),e(Uu,U1o),e(I,J1o),e(I,Ju),e(Ju,Voe),e(Voe,Y1o),e(Ju,K1o),e(Ju,B$),e(B$,Z1o),e(Ju,ebo),e(I,obo),e(I,Yu),e(Yu,zoe),e(zoe,rbo),e(Yu,tbo),e(Yu,x$),e(x$,abo),e(Yu,nbo),e(I,sbo),e(I,Ku),e(Ku,Woe),e(Woe,lbo),e(Ku,ibo),e(Ku,k$),e(k$,dbo),e(Ku,cbo),e(I,fbo),e(I,Zu),e(Zu,Qoe),e(Qoe,mbo),e(Zu,gbo),e(Zu,R$),e(R$,hbo),e(Zu,pbo),e(I,_bo),e(I,e5),e(e5,Hoe),e(Hoe,ubo),e(e5,bbo),e(e5,S$),e(S$,vbo),e(e5,Tbo),e(I,Fbo),e(I,o5),e(o5,Uoe),e(Uoe,Cbo),e(o5,Mbo),e(o5,P$),e(P$,Ebo),e(o5,ybo),e(I,wbo),e(I,r5),e(r5,Joe),e(Joe,Abo),e(r5,Lbo),e(r5,$$),e($$,Bbo),e(r5,xbo),e(I,kbo),e(I,t5),e(t5,Yoe),e(Yoe,Rbo),e(t5,Sbo),e(t5,I$),e(I$,Pbo),e(t5,$bo),e(I,Ibo),e(I,a5),e(a5,Koe),e(Koe,jbo),e(a5,Dbo),e(a5,j$),e(j$,Nbo),e(a5,qbo),e(I,Obo),e(I,n5),e(n5,Zoe),e(Zoe,Gbo),e(n5,Xbo),e(n5,D$),e(D$,Vbo),e(n5,zbo),e(I,Wbo),e(I,s5),e(s5,ere),e(ere,Qbo),e(s5,Hbo),e(s5,N$),e(N$,Ubo),e(s5,Jbo),e(I,Ybo),e(I,l5),e(l5,ore),e(ore,Kbo),e(l5,Zbo),e(l5,q$),e(q$,evo),e(l5,ovo),e(I,rvo),e(I,i5),e(i5,rre),e(rre,tvo),e(i5,avo),e(i5,O$),e(O$,nvo),e(i5,svo),e(I,lvo),e(I,d5),e(d5,tre),e(tre,ivo),e(d5,dvo),e(d5,G$),e(G$,cvo),e(d5,fvo),e(I,mvo),e(I,c5),e(c5,are),e(are,gvo),e(c5,hvo),e(c5,X$),e(X$,pvo),e(c5,_vo),e(I,uvo),e(I,f5),e(f5,nre),e(nre,bvo),e(f5,vvo),e(f5,V$),e(V$,Tvo),e(f5,Fvo),e(I,Cvo),e(I,m5),e(m5,sre),e(sre,Mvo),e(m5,Evo),e(m5,z$),e(z$,yvo),e(m5,wvo),e(I,Avo),e(I,g5),e(g5,lre),e(lre,Lvo),e(g5,Bvo),e(g5,W$),e(W$,xvo),e(g5,kvo),e(I,Rvo),e(I,h5),e(h5,ire),e(ire,Svo),e(h5,Pvo),e(h5,Q$),e(Q$,$vo),e(h5,Ivo),e(I,jvo),e(I,p5),e(p5,dre),e(dre,Dvo),e(p5,Nvo),e(p5,H$),e(H$,qvo),e(p5,Ovo),e(I,Gvo),e(I,_5),e(_5,cre),e(cre,Xvo),e(_5,Vvo),e(_5,U$),e(U$,zvo),e(_5,Wvo),e(I,Qvo),e(I,u5),e(u5,fre),e(fre,Hvo),e(u5,Uvo),e(u5,mre),e(mre,Jvo),e(u5,Yvo),e(I,Kvo),e(I,b5),e(b5,gre),e(gre,Zvo),e(b5,eTo),e(b5,J$),e(J$,oTo),e(b5,rTo),e(I,tTo),e(I,v5),e(v5,hre),e(hre,aTo),e(v5,nTo),e(v5,Y$),e(Y$,sTo),e(v5,lTo),e(I,iTo),e(I,T5),e(T5,pre),e(pre,dTo),e(T5,cTo),e(T5,K$),e(K$,fTo),e(T5,mTo),e(I,gTo),e(I,F5),e(F5,_re),e(_re,hTo),e(F5,pTo),e(F5,Z$),e(Z$,_To),e(F5,uTo),e(qe,bTo),e(qe,C5),e(C5,vTo),e(C5,ure),e(ure,TTo),e(C5,FTo),e(C5,bre),e(bre,CTo),e(qe,MTo),e(qe,vre),e(vre,ETo),e(qe,yTo),g(K3,qe,null),b(d,Txe,u),b(d,dd,u),e(dd,M5),e(M5,Tre),g(Z3,Tre,null),e(dd,wTo),e(dd,Fre),e(Fre,ATo),b(d,Fxe,u),b(d,er,u),g(ey,er,null),e(er,LTo),e(er,cd),e(cd,BTo),e(cd,Cre),e(Cre,xTo),e(cd,kTo),e(cd,Mre),e(Mre,RTo),e(cd,STo),e(er,PTo),e(er,oy),e(oy,$To),e(oy,Ere),e(Ere,ITo),e(oy,jTo),e(er,DTo),e(er,Hr),g(ry,Hr,null),e(Hr,NTo),e(Hr,yre),e(yre,qTo),e(Hr,OTo),e(Hr,fd),e(fd,GTo),e(fd,wre),e(wre,XTo),e(fd,VTo),e(fd,Are),e(Are,zTo),e(fd,WTo),e(Hr,QTo),e(Hr,Lre),e(Lre,HTo),e(Hr,UTo),g(ty,Hr,null),e(er,JTo),e(er,Oe),g(ay,Oe,null),e(Oe,YTo),e(Oe,Bre),e(Bre,KTo),e(Oe,ZTo),e(Oe,Qa),e(Qa,eFo),e(Qa,xre),e(xre,oFo),e(Qa,rFo),e(Qa,kre),e(kre,tFo),e(Qa,aFo),e(Qa,Rre),e(Rre,nFo),e(Qa,sFo),e(Oe,lFo),e(Oe,ne),e(ne,E5),e(E5,Sre),e(Sre,iFo),e(E5,dFo),e(E5,eI),e(eI,cFo),e(E5,fFo),e(ne,mFo),e(ne,y5),e(y5,Pre),e(Pre,gFo),e(y5,hFo),e(y5,oI),e(oI,pFo),e(y5,_Fo),e(ne,uFo),e(ne,w5),e(w5,$re),e($re,bFo),e(w5,vFo),e(w5,rI),e(rI,TFo),e(w5,FFo),e(ne,CFo),e(ne,A5),e(A5,Ire),e(Ire,MFo),e(A5,EFo),e(A5,tI),e(tI,yFo),e(A5,wFo),e(ne,AFo),e(ne,L5),e(L5,jre),e(jre,LFo),e(L5,BFo),e(L5,aI),e(aI,xFo),e(L5,kFo),e(ne,RFo),e(ne,B5),e(B5,Dre),e(Dre,SFo),e(B5,PFo),e(B5,nI),e(nI,$Fo),e(B5,IFo),e(ne,jFo),e(ne,x5),e(x5,Nre),e(Nre,DFo),e(x5,NFo),e(x5,sI),e(sI,qFo),e(x5,OFo),e(ne,GFo),e(ne,k5),e(k5,qre),e(qre,XFo),e(k5,VFo),e(k5,lI),e(lI,zFo),e(k5,WFo),e(ne,QFo),e(ne,R5),e(R5,Ore),e(Ore,HFo),e(R5,UFo),e(R5,iI),e(iI,JFo),e(R5,YFo),e(ne,KFo),e(ne,S5),e(S5,Gre),e(Gre,ZFo),e(S5,e9o),e(S5,dI),e(dI,o9o),e(S5,r9o),e(ne,t9o),e(ne,P5),e(P5,Xre),e(Xre,a9o),e(P5,n9o),e(P5,cI),e(cI,s9o),e(P5,l9o),e(ne,i9o),e(ne,$5),e($5,Vre),e(Vre,d9o),e($5,c9o),e($5,fI),e(fI,f9o),e($5,m9o),e(ne,g9o),e(ne,I5),e(I5,zre),e(zre,h9o),e(I5,p9o),e(I5,mI),e(mI,_9o),e(I5,u9o),e(ne,b9o),e(ne,j5),e(j5,Wre),e(Wre,v9o),e(j5,T9o),e(j5,gI),e(gI,F9o),e(j5,C9o),e(ne,M9o),e(ne,D5),e(D5,Qre),e(Qre,E9o),e(D5,y9o),e(D5,hI),e(hI,w9o),e(D5,A9o),e(ne,L9o),e(ne,N5),e(N5,Hre),e(Hre,B9o),e(N5,x9o),e(N5,pI),e(pI,k9o),e(N5,R9o),e(Oe,S9o),e(Oe,q5),e(q5,P9o),e(q5,Ure),e(Ure,$9o),e(q5,I9o),e(q5,Jre),e(Jre,j9o),e(Oe,D9o),e(Oe,Yre),e(Yre,N9o),e(Oe,q9o),g(ny,Oe,null),b(d,Cxe,u),b(d,md,u),e(md,O5),e(O5,Kre),g(sy,Kre,null),e(md,O9o),e(md,Zre),e(Zre,G9o),b(d,Mxe,u),b(d,or,u),g(ly,or,null),e(or,X9o),e(or,gd),e(gd,V9o),e(gd,ete),e(ete,z9o),e(gd,W9o),e(gd,ote),e(ote,Q9o),e(gd,H9o),e(or,U9o),e(or,iy),e(iy,J9o),e(iy,rte),e(rte,Y9o),e(iy,K9o),e(or,Z9o),e(or,Ur),g(dy,Ur,null),e(Ur,eCo),e(Ur,tte),e(tte,oCo),e(Ur,rCo),e(Ur,hd),e(hd,tCo),e(hd,ate),e(ate,aCo),e(hd,nCo),e(hd,nte),e(nte,sCo),e(hd,lCo),e(Ur,iCo),e(Ur,ste),e(ste,dCo),e(Ur,cCo),g(cy,Ur,null),e(or,fCo),e(or,Ge),g(fy,Ge,null),e(Ge,mCo),e(Ge,lte),e(lte,gCo),e(Ge,hCo),e(Ge,Ha),e(Ha,pCo),e(Ha,ite),e(ite,_Co),e(Ha,uCo),e(Ha,dte),e(dte,bCo),e(Ha,vCo),e(Ha,cte),e(cte,TCo),e(Ha,FCo),e(Ge,CCo),e(Ge,A),e(A,G5),e(G5,fte),e(fte,MCo),e(G5,ECo),e(G5,_I),e(_I,yCo),e(G5,wCo),e(A,ACo),e(A,X5),e(X5,mte),e(mte,LCo),e(X5,BCo),e(X5,uI),e(uI,xCo),e(X5,kCo),e(A,RCo),e(A,V5),e(V5,gte),e(gte,SCo),e(V5,PCo),e(V5,bI),e(bI,$Co),e(V5,ICo),e(A,jCo),e(A,z5),e(z5,hte),e(hte,DCo),e(z5,NCo),e(z5,vI),e(vI,qCo),e(z5,OCo),e(A,GCo),e(A,W5),e(W5,pte),e(pte,XCo),e(W5,VCo),e(W5,TI),e(TI,zCo),e(W5,WCo),e(A,QCo),e(A,Q5),e(Q5,_te),e(_te,HCo),e(Q5,UCo),e(Q5,FI),e(FI,JCo),e(Q5,YCo),e(A,KCo),e(A,H5),e(H5,ute),e(ute,ZCo),e(H5,eMo),e(H5,CI),e(CI,oMo),e(H5,rMo),e(A,tMo),e(A,U5),e(U5,bte),e(bte,aMo),e(U5,nMo),e(U5,MI),e(MI,sMo),e(U5,lMo),e(A,iMo),e(A,J5),e(J5,vte),e(vte,dMo),e(J5,cMo),e(J5,EI),e(EI,fMo),e(J5,mMo),e(A,gMo),e(A,Y5),e(Y5,Tte),e(Tte,hMo),e(Y5,pMo),e(Y5,yI),e(yI,_Mo),e(Y5,uMo),e(A,bMo),e(A,K5),e(K5,Fte),e(Fte,vMo),e(K5,TMo),e(K5,wI),e(wI,FMo),e(K5,CMo),e(A,MMo),e(A,Z5),e(Z5,Cte),e(Cte,EMo),e(Z5,yMo),e(Z5,AI),e(AI,wMo),e(Z5,AMo),e(A,LMo),e(A,e2),e(e2,Mte),e(Mte,BMo),e(e2,xMo),e(e2,LI),e(LI,kMo),e(e2,RMo),e(A,SMo),e(A,o2),e(o2,Ete),e(Ete,PMo),e(o2,$Mo),e(o2,BI),e(BI,IMo),e(o2,jMo),e(A,DMo),e(A,r2),e(r2,yte),e(yte,NMo),e(r2,qMo),e(r2,xI),e(xI,OMo),e(r2,GMo),e(A,XMo),e(A,t2),e(t2,wte),e(wte,VMo),e(t2,zMo),e(t2,kI),e(kI,WMo),e(t2,QMo),e(A,HMo),e(A,a2),e(a2,Ate),e(Ate,UMo),e(a2,JMo),e(a2,RI),e(RI,YMo),e(a2,KMo),e(A,ZMo),e(A,n2),e(n2,Lte),e(Lte,e4o),e(n2,o4o),e(n2,SI),e(SI,r4o),e(n2,t4o),e(A,a4o),e(A,s2),e(s2,Bte),e(Bte,n4o),e(s2,s4o),e(s2,PI),e(PI,l4o),e(s2,i4o),e(A,d4o),e(A,l2),e(l2,xte),e(xte,c4o),e(l2,f4o),e(l2,$I),e($I,m4o),e(l2,g4o),e(A,h4o),e(A,i2),e(i2,kte),e(kte,p4o),e(i2,_4o),e(i2,II),e(II,u4o),e(i2,b4o),e(A,v4o),e(A,d2),e(d2,Rte),e(Rte,T4o),e(d2,F4o),e(d2,jI),e(jI,C4o),e(d2,M4o),e(A,E4o),e(A,c2),e(c2,Ste),e(Ste,y4o),e(c2,w4o),e(c2,DI),e(DI,A4o),e(c2,L4o),e(A,B4o),e(A,f2),e(f2,Pte),e(Pte,x4o),e(f2,k4o),e(f2,NI),e(NI,R4o),e(f2,S4o),e(A,P4o),e(A,m2),e(m2,$te),e($te,$4o),e(m2,I4o),e(m2,qI),e(qI,j4o),e(m2,D4o),e(A,N4o),e(A,g2),e(g2,Ite),e(Ite,q4o),e(g2,O4o),e(g2,OI),e(OI,G4o),e(g2,X4o),e(A,V4o),e(A,h2),e(h2,jte),e(jte,z4o),e(h2,W4o),e(h2,GI),e(GI,Q4o),e(h2,H4o),e(A,U4o),e(A,p2),e(p2,Dte),e(Dte,J4o),e(p2,Y4o),e(p2,XI),e(XI,K4o),e(p2,Z4o),e(A,eEo),e(A,_2),e(_2,Nte),e(Nte,oEo),e(_2,rEo),e(_2,VI),e(VI,tEo),e(_2,aEo),e(A,nEo),e(A,u2),e(u2,qte),e(qte,sEo),e(u2,lEo),e(u2,zI),e(zI,iEo),e(u2,dEo),e(A,cEo),e(A,b2),e(b2,Ote),e(Ote,fEo),e(b2,mEo),e(b2,WI),e(WI,gEo),e(b2,hEo),e(A,pEo),e(A,v2),e(v2,Gte),e(Gte,_Eo),e(v2,uEo),e(v2,QI),e(QI,bEo),e(v2,vEo),e(A,TEo),e(A,T2),e(T2,Xte),e(Xte,FEo),e(T2,CEo),e(T2,HI),e(HI,MEo),e(T2,EEo),e(A,yEo),e(A,F2),e(F2,Vte),e(Vte,wEo),e(F2,AEo),e(F2,UI),e(UI,LEo),e(F2,BEo),e(A,xEo),e(A,C2),e(C2,zte),e(zte,kEo),e(C2,REo),e(C2,JI),e(JI,SEo),e(C2,PEo),e(A,$Eo),e(A,M2),e(M2,Wte),e(Wte,IEo),e(M2,jEo),e(M2,YI),e(YI,DEo),e(M2,NEo),e(A,qEo),e(A,E2),e(E2,Qte),e(Qte,OEo),e(E2,GEo),e(E2,KI),e(KI,XEo),e(E2,VEo),e(A,zEo),e(A,y2),e(y2,Hte),e(Hte,WEo),e(y2,QEo),e(y2,ZI),e(ZI,HEo),e(y2,UEo),e(A,JEo),e(A,w2),e(w2,Ute),e(Ute,YEo),e(w2,KEo),e(w2,ej),e(ej,ZEo),e(w2,e3o),e(A,o3o),e(A,A2),e(A2,Jte),e(Jte,r3o),e(A2,t3o),e(A2,oj),e(oj,a3o),e(A2,n3o),e(A,s3o),e(A,L2),e(L2,Yte),e(Yte,l3o),e(L2,i3o),e(L2,rj),e(rj,d3o),e(L2,c3o),e(A,f3o),e(A,B2),e(B2,Kte),e(Kte,m3o),e(B2,g3o),e(B2,tj),e(tj,h3o),e(B2,p3o),e(A,_3o),e(A,x2),e(x2,Zte),e(Zte,u3o),e(x2,b3o),e(x2,aj),e(aj,v3o),e(x2,T3o),e(A,F3o),e(A,k2),e(k2,eae),e(eae,C3o),e(k2,M3o),e(k2,nj),e(nj,E3o),e(k2,y3o),e(A,w3o),e(A,R2),e(R2,oae),e(oae,A3o),e(R2,L3o),e(R2,sj),e(sj,B3o),e(R2,x3o),e(A,k3o),e(A,S2),e(S2,rae),e(rae,R3o),e(S2,S3o),e(S2,lj),e(lj,P3o),e(S2,$3o),e(Ge,I3o),e(Ge,P2),e(P2,j3o),e(P2,tae),e(tae,D3o),e(P2,N3o),e(P2,aae),e(aae,q3o),e(Ge,O3o),e(Ge,nae),e(nae,G3o),e(Ge,X3o),g(my,Ge,null),b(d,Exe,u),b(d,pd,u),e(pd,$2),e($2,sae),g(gy,sae,null),e(pd,V3o),e(pd,lae),e(lae,z3o),b(d,yxe,u),b(d,rr,u),g(hy,rr,null),e(rr,W3o),e(rr,_d),e(_d,Q3o),e(_d,iae),e(iae,H3o),e(_d,U3o),e(_d,dae),e(dae,J3o),e(_d,Y3o),e(rr,K3o),e(rr,py),e(py,Z3o),e(py,cae),e(cae,eyo),e(py,oyo),e(rr,ryo),e(rr,Jr),g(_y,Jr,null),e(Jr,tyo),e(Jr,fae),e(fae,ayo),e(Jr,nyo),e(Jr,ud),e(ud,syo),e(ud,mae),e(mae,lyo),e(ud,iyo),e(ud,gae),e(gae,dyo),e(ud,cyo),e(Jr,fyo),e(Jr,hae),e(hae,myo),e(Jr,gyo),g(uy,Jr,null),e(rr,hyo),e(rr,Xe),g(by,Xe,null),e(Xe,pyo),e(Xe,pae),e(pae,_yo),e(Xe,uyo),e(Xe,Ua),e(Ua,byo),e(Ua,_ae),e(_ae,vyo),e(Ua,Tyo),e(Ua,uae),e(uae,Fyo),e(Ua,Cyo),e(Ua,bae),e(bae,Myo),e(Ua,Eyo),e(Xe,yyo),e(Xe,O),e(O,I2),e(I2,vae),e(vae,wyo),e(I2,Ayo),e(I2,ij),e(ij,Lyo),e(I2,Byo),e(O,xyo),e(O,j2),e(j2,Tae),e(Tae,kyo),e(j2,Ryo),e(j2,dj),e(dj,Syo),e(j2,Pyo),e(O,$yo),e(O,D2),e(D2,Fae),e(Fae,Iyo),e(D2,jyo),e(D2,cj),e(cj,Dyo),e(D2,Nyo),e(O,qyo),e(O,N2),e(N2,Cae),e(Cae,Oyo),e(N2,Gyo),e(N2,fj),e(fj,Xyo),e(N2,Vyo),e(O,zyo),e(O,q2),e(q2,Mae),e(Mae,Wyo),e(q2,Qyo),e(q2,mj),e(mj,Hyo),e(q2,Uyo),e(O,Jyo),e(O,O2),e(O2,Eae),e(Eae,Yyo),e(O2,Kyo),e(O2,gj),e(gj,Zyo),e(O2,ewo),e(O,owo),e(O,G2),e(G2,yae),e(yae,rwo),e(G2,two),e(G2,hj),e(hj,awo),e(G2,nwo),e(O,swo),e(O,X2),e(X2,wae),e(wae,lwo),e(X2,iwo),e(X2,pj),e(pj,dwo),e(X2,cwo),e(O,fwo),e(O,V2),e(V2,Aae),e(Aae,mwo),e(V2,gwo),e(V2,_j),e(_j,hwo),e(V2,pwo),e(O,_wo),e(O,z2),e(z2,Lae),e(Lae,uwo),e(z2,bwo),e(z2,uj),e(uj,vwo),e(z2,Two),e(O,Fwo),e(O,W2),e(W2,Bae),e(Bae,Cwo),e(W2,Mwo),e(W2,bj),e(bj,Ewo),e(W2,ywo),e(O,wwo),e(O,Q2),e(Q2,xae),e(xae,Awo),e(Q2,Lwo),e(Q2,vj),e(vj,Bwo),e(Q2,xwo),e(O,kwo),e(O,H2),e(H2,kae),e(kae,Rwo),e(H2,Swo),e(H2,Tj),e(Tj,Pwo),e(H2,$wo),e(O,Iwo),e(O,U2),e(U2,Rae),e(Rae,jwo),e(U2,Dwo),e(U2,Fj),e(Fj,Nwo),e(U2,qwo),e(O,Owo),e(O,J2),e(J2,Sae),e(Sae,Gwo),e(J2,Xwo),e(J2,Cj),e(Cj,Vwo),e(J2,zwo),e(O,Wwo),e(O,Y2),e(Y2,Pae),e(Pae,Qwo),e(Y2,Hwo),e(Y2,Mj),e(Mj,Uwo),e(Y2,Jwo),e(O,Ywo),e(O,K2),e(K2,$ae),e($ae,Kwo),e(K2,Zwo),e(K2,Ej),e(Ej,e6o),e(K2,o6o),e(O,r6o),e(O,Z2),e(Z2,Iae),e(Iae,t6o),e(Z2,a6o),e(Z2,yj),e(yj,n6o),e(Z2,s6o),e(O,l6o),e(O,e1),e(e1,jae),e(jae,i6o),e(e1,d6o),e(e1,wj),e(wj,c6o),e(e1,f6o),e(O,m6o),e(O,o1),e(o1,Dae),e(Dae,g6o),e(o1,h6o),e(o1,Aj),e(Aj,p6o),e(o1,_6o),e(O,u6o),e(O,r1),e(r1,Nae),e(Nae,b6o),e(r1,v6o),e(r1,Lj),e(Lj,T6o),e(r1,F6o),e(O,C6o),e(O,t1),e(t1,qae),e(qae,M6o),e(t1,E6o),e(t1,Bj),e(Bj,y6o),e(t1,w6o),e(O,A6o),e(O,a1),e(a1,Oae),e(Oae,L6o),e(a1,B6o),e(a1,xj),e(xj,x6o),e(a1,k6o),e(O,R6o),e(O,n1),e(n1,Gae),e(Gae,S6o),e(n1,P6o),e(n1,kj),e(kj,$6o),e(n1,I6o),e(O,j6o),e(O,s1),e(s1,Xae),e(Xae,D6o),e(s1,N6o),e(s1,Rj),e(Rj,q6o),e(s1,O6o),e(O,G6o),e(O,l1),e(l1,Vae),e(Vae,X6o),e(l1,V6o),e(l1,Sj),e(Sj,z6o),e(l1,W6o),e(O,Q6o),e(O,i1),e(i1,zae),e(zae,H6o),e(i1,U6o),e(i1,Pj),e(Pj,J6o),e(i1,Y6o),e(O,K6o),e(O,d1),e(d1,Wae),e(Wae,Z6o),e(d1,eAo),e(d1,$j),e($j,oAo),e(d1,rAo),e(Xe,tAo),e(Xe,c1),e(c1,aAo),e(c1,Qae),e(Qae,nAo),e(c1,sAo),e(c1,Hae),e(Hae,lAo),e(Xe,iAo),e(Xe,Uae),e(Uae,dAo),e(Xe,cAo),g(vy,Xe,null),b(d,wxe,u),b(d,bd,u),e(bd,f1),e(f1,Jae),g(Ty,Jae,null),e(bd,fAo),e(bd,Yae),e(Yae,mAo),b(d,Axe,u),b(d,tr,u),g(Fy,tr,null),e(tr,gAo),e(tr,vd),e(vd,hAo),e(vd,Kae),e(Kae,pAo),e(vd,_Ao),e(vd,Zae),e(Zae,uAo),e(vd,bAo),e(tr,vAo),e(tr,Cy),e(Cy,TAo),e(Cy,ene),e(ene,FAo),e(Cy,CAo),e(tr,MAo),e(tr,Yr),g(My,Yr,null),e(Yr,EAo),e(Yr,one),e(one,yAo),e(Yr,wAo),e(Yr,Td),e(Td,AAo),e(Td,rne),e(rne,LAo),e(Td,BAo),e(Td,tne),e(tne,xAo),e(Td,kAo),e(Yr,RAo),e(Yr,ane),e(ane,SAo),e(Yr,PAo),g(Ey,Yr,null),e(tr,$Ao),e(tr,Ve),g(yy,Ve,null),e(Ve,IAo),e(Ve,nne),e(nne,jAo),e(Ve,DAo),e(Ve,Ja),e(Ja,NAo),e(Ja,sne),e(sne,qAo),e(Ja,OAo),e(Ja,lne),e(lne,GAo),e(Ja,XAo),e(Ja,ine),e(ine,VAo),e(Ja,zAo),e(Ve,WAo),e(Ve,da),e(da,m1),e(m1,dne),e(dne,QAo),e(m1,HAo),e(m1,Ij),e(Ij,UAo),e(m1,JAo),e(da,YAo),e(da,g1),e(g1,cne),e(cne,KAo),e(g1,ZAo),e(g1,jj),e(jj,e0o),e(g1,o0o),e(da,r0o),e(da,h1),e(h1,fne),e(fne,t0o),e(h1,a0o),e(h1,Dj),e(Dj,n0o),e(h1,s0o),e(da,l0o),e(da,p1),e(p1,mne),e(mne,i0o),e(p1,d0o),e(p1,Nj),e(Nj,c0o),e(p1,f0o),e(da,m0o),e(da,_1),e(_1,gne),e(gne,g0o),e(_1,h0o),e(_1,qj),e(qj,p0o),e(_1,_0o),e(Ve,u0o),e(Ve,u1),e(u1,b0o),e(u1,hne),e(hne,v0o),e(u1,T0o),e(u1,pne),e(pne,F0o),e(Ve,C0o),e(Ve,_ne),e(_ne,M0o),e(Ve,E0o),g(wy,Ve,null),b(d,Lxe,u),b(d,Fd,u),e(Fd,b1),e(b1,une),g(Ay,une,null),e(Fd,y0o),e(Fd,bne),e(bne,w0o),b(d,Bxe,u),b(d,ar,u),g(Ly,ar,null),e(ar,A0o),e(ar,Cd),e(Cd,L0o),e(Cd,vne),e(vne,B0o),e(Cd,x0o),e(Cd,Tne),e(Tne,k0o),e(Cd,R0o),e(ar,S0o),e(ar,By),e(By,P0o),e(By,Fne),e(Fne,$0o),e(By,I0o),e(ar,j0o),e(ar,Kr),g(xy,Kr,null),e(Kr,D0o),e(Kr,Cne),e(Cne,N0o),e(Kr,q0o),e(Kr,Md),e(Md,O0o),e(Md,Mne),e(Mne,G0o),e(Md,X0o),e(Md,Ene),e(Ene,V0o),e(Md,z0o),e(Kr,W0o),e(Kr,yne),e(yne,Q0o),e(Kr,H0o),g(ky,Kr,null),e(ar,U0o),e(ar,ze),g(Ry,ze,null),e(ze,J0o),e(ze,wne),e(wne,Y0o),e(ze,K0o),e(ze,Ya),e(Ya,Z0o),e(Ya,Ane),e(Ane,eLo),e(Ya,oLo),e(Ya,Lne),e(Lne,rLo),e(Ya,tLo),e(Ya,Bne),e(Bne,aLo),e(Ya,nLo),e(ze,sLo),e(ze,N),e(N,v1),e(v1,xne),e(xne,lLo),e(v1,iLo),e(v1,Oj),e(Oj,dLo),e(v1,cLo),e(N,fLo),e(N,T1),e(T1,kne),e(kne,mLo),e(T1,gLo),e(T1,Gj),e(Gj,hLo),e(T1,pLo),e(N,_Lo),e(N,F1),e(F1,Rne),e(Rne,uLo),e(F1,bLo),e(F1,Xj),e(Xj,vLo),e(F1,TLo),e(N,FLo),e(N,C1),e(C1,Sne),e(Sne,CLo),e(C1,MLo),e(C1,Vj),e(Vj,ELo),e(C1,yLo),e(N,wLo),e(N,M1),e(M1,Pne),e(Pne,ALo),e(M1,LLo),e(M1,zj),e(zj,BLo),e(M1,xLo),e(N,kLo),e(N,E1),e(E1,$ne),e($ne,RLo),e(E1,SLo),e(E1,Wj),e(Wj,PLo),e(E1,$Lo),e(N,ILo),e(N,y1),e(y1,Ine),e(Ine,jLo),e(y1,DLo),e(y1,Qj),e(Qj,NLo),e(y1,qLo),e(N,OLo),e(N,w1),e(w1,jne),e(jne,GLo),e(w1,XLo),e(w1,Hj),e(Hj,VLo),e(w1,zLo),e(N,WLo),e(N,A1),e(A1,Dne),e(Dne,QLo),e(A1,HLo),e(A1,Uj),e(Uj,ULo),e(A1,JLo),e(N,YLo),e(N,L1),e(L1,Nne),e(Nne,KLo),e(L1,ZLo),e(L1,Jj),e(Jj,e8o),e(L1,o8o),e(N,r8o),e(N,B1),e(B1,qne),e(qne,t8o),e(B1,a8o),e(B1,Yj),e(Yj,n8o),e(B1,s8o),e(N,l8o),e(N,x1),e(x1,One),e(One,i8o),e(x1,d8o),e(x1,Kj),e(Kj,c8o),e(x1,f8o),e(N,m8o),e(N,k1),e(k1,Gne),e(Gne,g8o),e(k1,h8o),e(k1,Zj),e(Zj,p8o),e(k1,_8o),e(N,u8o),e(N,R1),e(R1,Xne),e(Xne,b8o),e(R1,v8o),e(R1,eD),e(eD,T8o),e(R1,F8o),e(N,C8o),e(N,S1),e(S1,Vne),e(Vne,M8o),e(S1,E8o),e(S1,oD),e(oD,y8o),e(S1,w8o),e(N,A8o),e(N,P1),e(P1,zne),e(zne,L8o),e(P1,B8o),e(P1,rD),e(rD,x8o),e(P1,k8o),e(N,R8o),e(N,$1),e($1,Wne),e(Wne,S8o),e($1,P8o),e($1,tD),e(tD,$8o),e($1,I8o),e(N,j8o),e(N,I1),e(I1,Qne),e(Qne,D8o),e(I1,N8o),e(I1,aD),e(aD,q8o),e(I1,O8o),e(N,G8o),e(N,j1),e(j1,Hne),e(Hne,X8o),e(j1,V8o),e(j1,nD),e(nD,z8o),e(j1,W8o),e(N,Q8o),e(N,D1),e(D1,Une),e(Une,H8o),e(D1,U8o),e(D1,sD),e(sD,J8o),e(D1,Y8o),e(N,K8o),e(N,N1),e(N1,Jne),e(Jne,Z8o),e(N1,e7o),e(N1,lD),e(lD,o7o),e(N1,r7o),e(N,t7o),e(N,q1),e(q1,Yne),e(Yne,a7o),e(q1,n7o),e(q1,iD),e(iD,s7o),e(q1,l7o),e(N,i7o),e(N,O1),e(O1,Kne),e(Kne,d7o),e(O1,c7o),e(O1,dD),e(dD,f7o),e(O1,m7o),e(N,g7o),e(N,G1),e(G1,Zne),e(Zne,h7o),e(G1,p7o),e(G1,cD),e(cD,_7o),e(G1,u7o),e(N,b7o),e(N,X1),e(X1,ese),e(ese,v7o),e(X1,T7o),e(X1,fD),e(fD,F7o),e(X1,C7o),e(N,M7o),e(N,V1),e(V1,ose),e(ose,E7o),e(V1,y7o),e(V1,mD),e(mD,w7o),e(V1,A7o),e(N,L7o),e(N,z1),e(z1,rse),e(rse,B7o),e(z1,x7o),e(z1,gD),e(gD,k7o),e(z1,R7o),e(N,S7o),e(N,W1),e(W1,tse),e(tse,P7o),e(W1,$7o),e(W1,hD),e(hD,I7o),e(W1,j7o),e(N,D7o),e(N,Q1),e(Q1,ase),e(ase,N7o),e(Q1,q7o),e(Q1,pD),e(pD,O7o),e(Q1,G7o),e(N,X7o),e(N,H1),e(H1,nse),e(nse,V7o),e(H1,z7o),e(H1,_D),e(_D,W7o),e(H1,Q7o),e(N,H7o),e(N,U1),e(U1,sse),e(sse,U7o),e(U1,J7o),e(U1,uD),e(uD,Y7o),e(U1,K7o),e(N,Z7o),e(N,J1),e(J1,lse),e(lse,eBo),e(J1,oBo),e(J1,bD),e(bD,rBo),e(J1,tBo),e(N,aBo),e(N,Y1),e(Y1,ise),e(ise,nBo),e(Y1,sBo),e(Y1,vD),e(vD,lBo),e(Y1,iBo),e(ze,dBo),e(ze,K1),e(K1,cBo),e(K1,dse),e(dse,fBo),e(K1,mBo),e(K1,cse),e(cse,gBo),e(ze,hBo),e(ze,fse),e(fse,pBo),e(ze,_Bo),g(Sy,ze,null),b(d,xxe,u),b(d,Ed,u),e(Ed,Z1),e(Z1,mse),g(Py,mse,null),e(Ed,uBo),e(Ed,gse),e(gse,bBo),b(d,kxe,u),b(d,nr,u),g($y,nr,null),e(nr,vBo),e(nr,yd),e(yd,TBo),e(yd,hse),e(hse,FBo),e(yd,CBo),e(yd,pse),e(pse,MBo),e(yd,EBo),e(nr,yBo),e(nr,Iy),e(Iy,wBo),e(Iy,_se),e(_se,ABo),e(Iy,LBo),e(nr,BBo),e(nr,Zr),g(jy,Zr,null),e(Zr,xBo),e(Zr,use),e(use,kBo),e(Zr,RBo),e(Zr,wd),e(wd,SBo),e(wd,bse),e(bse,PBo),e(wd,$Bo),e(wd,vse),e(vse,IBo),e(wd,jBo),e(Zr,DBo),e(Zr,Tse),e(Tse,NBo),e(Zr,qBo),g(Dy,Zr,null),e(nr,OBo),e(nr,We),g(Ny,We,null),e(We,GBo),e(We,Fse),e(Fse,XBo),e(We,VBo),e(We,Ka),e(Ka,zBo),e(Ka,Cse),e(Cse,WBo),e(Ka,QBo),e(Ka,Mse),e(Mse,HBo),e(Ka,UBo),e(Ka,Ese),e(Ese,JBo),e(Ka,YBo),e(We,KBo),e(We,R),e(R,eb),e(eb,yse),e(yse,ZBo),e(eb,exo),e(eb,TD),e(TD,oxo),e(eb,rxo),e(R,txo),e(R,ob),e(ob,wse),e(wse,axo),e(ob,nxo),e(ob,FD),e(FD,sxo),e(ob,lxo),e(R,ixo),e(R,rb),e(rb,Ase),e(Ase,dxo),e(rb,cxo),e(rb,CD),e(CD,fxo),e(rb,mxo),e(R,gxo),e(R,tb),e(tb,Lse),e(Lse,hxo),e(tb,pxo),e(tb,MD),e(MD,_xo),e(tb,uxo),e(R,bxo),e(R,ab),e(ab,Bse),e(Bse,vxo),e(ab,Txo),e(ab,ED),e(ED,Fxo),e(ab,Cxo),e(R,Mxo),e(R,nb),e(nb,xse),e(xse,Exo),e(nb,yxo),e(nb,yD),e(yD,wxo),e(nb,Axo),e(R,Lxo),e(R,sb),e(sb,kse),e(kse,Bxo),e(sb,xxo),e(sb,wD),e(wD,kxo),e(sb,Rxo),e(R,Sxo),e(R,lb),e(lb,Rse),e(Rse,Pxo),e(lb,$xo),e(lb,AD),e(AD,Ixo),e(lb,jxo),e(R,Dxo),e(R,ib),e(ib,Sse),e(Sse,Nxo),e(ib,qxo),e(ib,LD),e(LD,Oxo),e(ib,Gxo),e(R,Xxo),e(R,db),e(db,Pse),e(Pse,Vxo),e(db,zxo),e(db,BD),e(BD,Wxo),e(db,Qxo),e(R,Hxo),e(R,cb),e(cb,$se),e($se,Uxo),e(cb,Jxo),e(cb,xD),e(xD,Yxo),e(cb,Kxo),e(R,Zxo),e(R,fb),e(fb,Ise),e(Ise,eko),e(fb,oko),e(fb,kD),e(kD,rko),e(fb,tko),e(R,ako),e(R,mb),e(mb,jse),e(jse,nko),e(mb,sko),e(mb,RD),e(RD,lko),e(mb,iko),e(R,dko),e(R,gb),e(gb,Dse),e(Dse,cko),e(gb,fko),e(gb,SD),e(SD,mko),e(gb,gko),e(R,hko),e(R,hb),e(hb,Nse),e(Nse,pko),e(hb,_ko),e(hb,PD),e(PD,uko),e(hb,bko),e(R,vko),e(R,pb),e(pb,qse),e(qse,Tko),e(pb,Fko),e(pb,$D),e($D,Cko),e(pb,Mko),e(R,Eko),e(R,_b),e(_b,Ose),e(Ose,yko),e(_b,wko),e(_b,ID),e(ID,Ako),e(_b,Lko),e(R,Bko),e(R,ub),e(ub,Gse),e(Gse,xko),e(ub,kko),e(ub,jD),e(jD,Rko),e(ub,Sko),e(R,Pko),e(R,bb),e(bb,Xse),e(Xse,$ko),e(bb,Iko),e(bb,DD),e(DD,jko),e(bb,Dko),e(R,Nko),e(R,vb),e(vb,Vse),e(Vse,qko),e(vb,Oko),e(vb,ND),e(ND,Gko),e(vb,Xko),e(R,Vko),e(R,Tb),e(Tb,zse),e(zse,zko),e(Tb,Wko),e(Tb,qD),e(qD,Qko),e(Tb,Hko),e(R,Uko),e(R,Fb),e(Fb,Wse),e(Wse,Jko),e(Fb,Yko),e(Fb,OD),e(OD,Kko),e(Fb,Zko),e(R,eRo),e(R,Cb),e(Cb,Qse),e(Qse,oRo),e(Cb,rRo),e(Cb,GD),e(GD,tRo),e(Cb,aRo),e(R,nRo),e(R,Mb),e(Mb,Hse),e(Hse,sRo),e(Mb,lRo),e(Mb,XD),e(XD,iRo),e(Mb,dRo),e(R,cRo),e(R,Eb),e(Eb,Use),e(Use,fRo),e(Eb,mRo),e(Eb,VD),e(VD,gRo),e(Eb,hRo),e(R,pRo),e(R,yb),e(yb,Jse),e(Jse,_Ro),e(yb,uRo),e(yb,zD),e(zD,bRo),e(yb,vRo),e(R,TRo),e(R,wb),e(wb,Yse),e(Yse,FRo),e(wb,CRo),e(wb,WD),e(WD,MRo),e(wb,ERo),e(R,yRo),e(R,Ab),e(Ab,Kse),e(Kse,wRo),e(Ab,ARo),e(Ab,QD),e(QD,LRo),e(Ab,BRo),e(R,xRo),e(R,Lb),e(Lb,Zse),e(Zse,kRo),e(Lb,RRo),e(Lb,HD),e(HD,SRo),e(Lb,PRo),e(R,$Ro),e(R,Bb),e(Bb,ele),e(ele,IRo),e(Bb,jRo),e(Bb,UD),e(UD,DRo),e(Bb,NRo),e(R,qRo),e(R,xb),e(xb,ole),e(ole,ORo),e(xb,GRo),e(xb,JD),e(JD,XRo),e(xb,VRo),e(R,zRo),e(R,kb),e(kb,rle),e(rle,WRo),e(kb,QRo),e(kb,YD),e(YD,HRo),e(kb,URo),e(R,JRo),e(R,Rb),e(Rb,tle),e(tle,YRo),e(Rb,KRo),e(Rb,KD),e(KD,ZRo),e(Rb,eSo),e(R,oSo),e(R,Sb),e(Sb,ale),e(ale,rSo),e(Sb,tSo),e(Sb,ZD),e(ZD,aSo),e(Sb,nSo),e(R,sSo),e(R,Pb),e(Pb,nle),e(nle,lSo),e(Pb,iSo),e(Pb,eN),e(eN,dSo),e(Pb,cSo),e(R,fSo),e(R,$b),e($b,sle),e(sle,mSo),e($b,gSo),e($b,oN),e(oN,hSo),e($b,pSo),e(R,_So),e(R,Ib),e(Ib,lle),e(lle,uSo),e(Ib,bSo),e(Ib,rN),e(rN,vSo),e(Ib,TSo),e(R,FSo),e(R,jb),e(jb,ile),e(ile,CSo),e(jb,MSo),e(jb,tN),e(tN,ESo),e(jb,ySo),e(R,wSo),e(R,Db),e(Db,dle),e(dle,ASo),e(Db,LSo),e(Db,aN),e(aN,BSo),e(Db,xSo),e(We,kSo),e(We,Nb),e(Nb,RSo),e(Nb,cle),e(cle,SSo),e(Nb,PSo),e(Nb,fle),e(fle,$So),e(We,ISo),e(We,mle),e(mle,jSo),e(We,DSo),g(qy,We,null),b(d,Rxe,u),b(d,Ad,u),e(Ad,qb),e(qb,gle),g(Oy,gle,null),e(Ad,NSo),e(Ad,hle),e(hle,qSo),b(d,Sxe,u),b(d,sr,u),g(Gy,sr,null),e(sr,OSo),e(sr,Ld),e(Ld,GSo),e(Ld,ple),e(ple,XSo),e(Ld,VSo),e(Ld,_le),e(_le,zSo),e(Ld,WSo),e(sr,QSo),e(sr,Xy),e(Xy,HSo),e(Xy,ule),e(ule,USo),e(Xy,JSo),e(sr,YSo),e(sr,et),g(Vy,et,null),e(et,KSo),e(et,ble),e(ble,ZSo),e(et,ePo),e(et,Bd),e(Bd,oPo),e(Bd,vle),e(vle,rPo),e(Bd,tPo),e(Bd,Tle),e(Tle,aPo),e(Bd,nPo),e(et,sPo),e(et,Fle),e(Fle,lPo),e(et,iPo),g(zy,et,null),e(sr,dPo),e(sr,Qe),g(Wy,Qe,null),e(Qe,cPo),e(Qe,Cle),e(Cle,fPo),e(Qe,mPo),e(Qe,Za),e(Za,gPo),e(Za,Mle),e(Mle,hPo),e(Za,pPo),e(Za,Ele),e(Ele,_Po),e(Za,uPo),e(Za,yle),e(yle,bPo),e(Za,vPo),e(Qe,TPo),e(Qe,wle),e(wle,Ob),e(Ob,Ale),e(Ale,FPo),e(Ob,CPo),e(Ob,nN),e(nN,MPo),e(Ob,EPo),e(Qe,yPo),e(Qe,Gb),e(Gb,wPo),e(Gb,Lle),e(Lle,APo),e(Gb,LPo),e(Gb,Ble),e(Ble,BPo),e(Qe,xPo),e(Qe,xle),e(xle,kPo),e(Qe,RPo),g(Qy,Qe,null),b(d,Pxe,u),b(d,xd,u),e(xd,Xb),e(Xb,kle),g(Hy,kle,null),e(xd,SPo),e(xd,Rle),e(Rle,PPo),b(d,$xe,u),b(d,lr,u),g(Uy,lr,null),e(lr,$Po),e(lr,kd),e(kd,IPo),e(kd,Sle),e(Sle,jPo),e(kd,DPo),e(kd,Ple),e(Ple,NPo),e(kd,qPo),e(lr,OPo),e(lr,Jy),e(Jy,GPo),e(Jy,$le),e($le,XPo),e(Jy,VPo),e(lr,zPo),e(lr,ot),g(Yy,ot,null),e(ot,WPo),e(ot,Ile),e(Ile,QPo),e(ot,HPo),e(ot,Rd),e(Rd,UPo),e(Rd,jle),e(jle,JPo),e(Rd,YPo),e(Rd,Dle),e(Dle,KPo),e(Rd,ZPo),e(ot,e$o),e(ot,Nle),e(Nle,o$o),e(ot,r$o),g(Ky,ot,null),e(lr,t$o),e(lr,He),g(Zy,He,null),e(He,a$o),e(He,qle),e(qle,n$o),e(He,s$o),e(He,en),e(en,l$o),e(en,Ole),e(Ole,i$o),e(en,d$o),e(en,Gle),e(Gle,c$o),e(en,f$o),e(en,Xle),e(Xle,m$o),e(en,g$o),e(He,h$o),e(He,Fe),e(Fe,Vb),e(Vb,Vle),e(Vle,p$o),e(Vb,_$o),e(Vb,sN),e(sN,u$o),e(Vb,b$o),e(Fe,v$o),e(Fe,zb),e(zb,zle),e(zle,T$o),e(zb,F$o),e(zb,lN),e(lN,C$o),e(zb,M$o),e(Fe,E$o),e(Fe,Os),e(Os,Wle),e(Wle,y$o),e(Os,w$o),e(Os,iN),e(iN,A$o),e(Os,L$o),e(Os,dN),e(dN,B$o),e(Os,x$o),e(Fe,k$o),e(Fe,Wb),e(Wb,Qle),e(Qle,R$o),e(Wb,S$o),e(Wb,cN),e(cN,P$o),e(Wb,$$o),e(Fe,I$o),e(Fe,fa),e(fa,Hle),e(Hle,j$o),e(fa,D$o),e(fa,fN),e(fN,N$o),e(fa,q$o),e(fa,mN),e(mN,O$o),e(fa,G$o),e(fa,gN),e(gN,X$o),e(fa,V$o),e(Fe,z$o),e(Fe,Qb),e(Qb,Ule),e(Ule,W$o),e(Qb,Q$o),e(Qb,hN),e(hN,H$o),e(Qb,U$o),e(Fe,J$o),e(Fe,Hb),e(Hb,Jle),e(Jle,Y$o),e(Hb,K$o),e(Hb,pN),e(pN,Z$o),e(Hb,eIo),e(Fe,oIo),e(Fe,Ub),e(Ub,Yle),e(Yle,rIo),e(Ub,tIo),e(Ub,_N),e(_N,aIo),e(Ub,nIo),e(Fe,sIo),e(Fe,Jb),e(Jb,Kle),e(Kle,lIo),e(Jb,iIo),e(Jb,uN),e(uN,dIo),e(Jb,cIo),e(He,fIo),e(He,Yb),e(Yb,mIo),e(Yb,Zle),e(Zle,gIo),e(Yb,hIo),e(Yb,eie),e(eie,pIo),e(He,_Io),e(He,oie),e(oie,uIo),e(He,bIo),g(ew,He,null),b(d,Ixe,u),b(d,Sd,u),e(Sd,Kb),e(Kb,rie),g(ow,rie,null),e(Sd,vIo),e(Sd,tie),e(tie,TIo),b(d,jxe,u),b(d,ir,u),g(rw,ir,null),e(ir,FIo),e(ir,Pd),e(Pd,CIo),e(Pd,aie),e(aie,MIo),e(Pd,EIo),e(Pd,nie),e(nie,yIo),e(Pd,wIo),e(ir,AIo),e(ir,tw),e(tw,LIo),e(tw,sie),e(sie,BIo),e(tw,xIo),e(ir,kIo),e(ir,rt),g(aw,rt,null),e(rt,RIo),e(rt,lie),e(lie,SIo),e(rt,PIo),e(rt,$d),e($d,$Io),e($d,iie),e(iie,IIo),e($d,jIo),e($d,die),e(die,DIo),e($d,NIo),e(rt,qIo),e(rt,cie),e(cie,OIo),e(rt,GIo),g(nw,rt,null),e(ir,XIo),e(ir,Ue),g(sw,Ue,null),e(Ue,VIo),e(Ue,fie),e(fie,zIo),e(Ue,WIo),e(Ue,on),e(on,QIo),e(on,mie),e(mie,HIo),e(on,UIo),e(on,gie),e(gie,JIo),e(on,YIo),e(on,hie),e(hie,KIo),e(on,ZIo),e(Ue,ejo),e(Ue,pie),e(pie,Zb),e(Zb,_ie),e(_ie,ojo),e(Zb,rjo),e(Zb,bN),e(bN,tjo),e(Zb,ajo),e(Ue,njo),e(Ue,ev),e(ev,sjo),e(ev,uie),e(uie,ljo),e(ev,ijo),e(ev,bie),e(bie,djo),e(Ue,cjo),e(Ue,vie),e(vie,fjo),e(Ue,mjo),g(lw,Ue,null),b(d,Dxe,u),b(d,Id,u),e(Id,ov),e(ov,Tie),g(iw,Tie,null),e(Id,gjo),e(Id,Fie),e(Fie,hjo),b(d,Nxe,u),b(d,dr,u),g(dw,dr,null),e(dr,pjo),e(dr,jd),e(jd,_jo),e(jd,Cie),e(Cie,ujo),e(jd,bjo),e(jd,Mie),e(Mie,vjo),e(jd,Tjo),e(dr,Fjo),e(dr,cw),e(cw,Cjo),e(cw,Eie),e(Eie,Mjo),e(cw,Ejo),e(dr,yjo),e(dr,tt),g(fw,tt,null),e(tt,wjo),e(tt,yie),e(yie,Ajo),e(tt,Ljo),e(tt,Dd),e(Dd,Bjo),e(Dd,wie),e(wie,xjo),e(Dd,kjo),e(Dd,Aie),e(Aie,Rjo),e(Dd,Sjo),e(tt,Pjo),e(tt,Lie),e(Lie,$jo),e(tt,Ijo),g(mw,tt,null),e(dr,jjo),e(dr,Je),g(gw,Je,null),e(Je,Djo),e(Je,Bie),e(Bie,Njo),e(Je,qjo),e(Je,rn),e(rn,Ojo),e(rn,xie),e(xie,Gjo),e(rn,Xjo),e(rn,kie),e(kie,Vjo),e(rn,zjo),e(rn,Rie),e(Rie,Wjo),e(rn,Qjo),e(Je,Hjo),e(Je,xe),e(xe,rv),e(rv,Sie),e(Sie,Ujo),e(rv,Jjo),e(rv,vN),e(vN,Yjo),e(rv,Kjo),e(xe,Zjo),e(xe,tv),e(tv,Pie),e(Pie,eDo),e(tv,oDo),e(tv,TN),e(TN,rDo),e(tv,tDo),e(xe,aDo),e(xe,av),e(av,$ie),e($ie,nDo),e(av,sDo),e(av,FN),e(FN,lDo),e(av,iDo),e(xe,dDo),e(xe,nv),e(nv,Iie),e(Iie,cDo),e(nv,fDo),e(nv,CN),e(CN,mDo),e(nv,gDo),e(xe,hDo),e(xe,sv),e(sv,jie),e(jie,pDo),e(sv,_Do),e(sv,MN),e(MN,uDo),e(sv,bDo),e(xe,vDo),e(xe,lv),e(lv,Die),e(Die,TDo),e(lv,FDo),e(lv,EN),e(EN,CDo),e(lv,MDo),e(xe,EDo),e(xe,iv),e(iv,Nie),e(Nie,yDo),e(iv,wDo),e(iv,yN),e(yN,ADo),e(iv,LDo),e(xe,BDo),e(xe,dv),e(dv,qie),e(qie,xDo),e(dv,kDo),e(dv,wN),e(wN,RDo),e(dv,SDo),e(Je,PDo),e(Je,cv),e(cv,$Do),e(cv,Oie),e(Oie,IDo),e(cv,jDo),e(cv,Gie),e(Gie,DDo),e(Je,NDo),e(Je,Xie),e(Xie,qDo),e(Je,ODo),g(hw,Je,null),b(d,qxe,u),b(d,Nd,u),e(Nd,fv),e(fv,Vie),g(pw,Vie,null),e(Nd,GDo),e(Nd,zie),e(zie,XDo),b(d,Oxe,u),b(d,cr,u),g(_w,cr,null),e(cr,VDo),e(cr,qd),e(qd,zDo),e(qd,Wie),e(Wie,WDo),e(qd,QDo),e(qd,Qie),e(Qie,HDo),e(qd,UDo),e(cr,JDo),e(cr,uw),e(uw,YDo),e(uw,Hie),e(Hie,KDo),e(uw,ZDo),e(cr,eNo),e(cr,at),g(bw,at,null),e(at,oNo),e(at,Uie),e(Uie,rNo),e(at,tNo),e(at,Od),e(Od,aNo),e(Od,Jie),e(Jie,nNo),e(Od,sNo),e(Od,Yie),e(Yie,lNo),e(Od,iNo),e(at,dNo),e(at,Kie),e(Kie,cNo),e(at,fNo),g(vw,at,null),e(cr,mNo),e(cr,Ye),g(Tw,Ye,null),e(Ye,gNo),e(Ye,Zie),e(Zie,hNo),e(Ye,pNo),e(Ye,tn),e(tn,_No),e(tn,ede),e(ede,uNo),e(tn,bNo),e(tn,ode),e(ode,vNo),e(tn,TNo),e(tn,rde),e(rde,FNo),e(tn,CNo),e(Ye,MNo),e(Ye,an),e(an,mv),e(mv,tde),e(tde,ENo),e(mv,yNo),e(mv,AN),e(AN,wNo),e(mv,ANo),e(an,LNo),e(an,gv),e(gv,ade),e(ade,BNo),e(gv,xNo),e(gv,LN),e(LN,kNo),e(gv,RNo),e(an,SNo),e(an,hv),e(hv,nde),e(nde,PNo),e(hv,$No),e(hv,BN),e(BN,INo),e(hv,jNo),e(an,DNo),e(an,pv),e(pv,sde),e(sde,NNo),e(pv,qNo),e(pv,xN),e(xN,ONo),e(pv,GNo),e(Ye,XNo),e(Ye,_v),e(_v,VNo),e(_v,lde),e(lde,zNo),e(_v,WNo),e(_v,ide),e(ide,QNo),e(Ye,HNo),e(Ye,dde),e(dde,UNo),e(Ye,JNo),g(Fw,Ye,null),b(d,Gxe,u),b(d,Gd,u),e(Gd,uv),e(uv,cde),g(Cw,cde,null),e(Gd,YNo),e(Gd,fde),e(fde,KNo),b(d,Xxe,u),b(d,fr,u),g(Mw,fr,null),e(fr,ZNo),e(fr,Xd),e(Xd,eqo),e(Xd,mde),e(mde,oqo),e(Xd,rqo),e(Xd,gde),e(gde,tqo),e(Xd,aqo),e(fr,nqo),e(fr,Ew),e(Ew,sqo),e(Ew,hde),e(hde,lqo),e(Ew,iqo),e(fr,dqo),e(fr,nt),g(yw,nt,null),e(nt,cqo),e(nt,pde),e(pde,fqo),e(nt,mqo),e(nt,Vd),e(Vd,gqo),e(Vd,_de),e(_de,hqo),e(Vd,pqo),e(Vd,ude),e(ude,_qo),e(Vd,uqo),e(nt,bqo),e(nt,bde),e(bde,vqo),e(nt,Tqo),g(ww,nt,null),e(fr,Fqo),e(fr,Ke),g(Aw,Ke,null),e(Ke,Cqo),e(Ke,vde),e(vde,Mqo),e(Ke,Eqo),e(Ke,nn),e(nn,yqo),e(nn,Tde),e(Tde,wqo),e(nn,Aqo),e(nn,Fde),e(Fde,Lqo),e(nn,Bqo),e(nn,Cde),e(Cde,xqo),e(nn,kqo),e(Ke,Rqo),e(Ke,ke),e(ke,bv),e(bv,Mde),e(Mde,Sqo),e(bv,Pqo),e(bv,kN),e(kN,$qo),e(bv,Iqo),e(ke,jqo),e(ke,vv),e(vv,Ede),e(Ede,Dqo),e(vv,Nqo),e(vv,RN),e(RN,qqo),e(vv,Oqo),e(ke,Gqo),e(ke,Tv),e(Tv,yde),e(yde,Xqo),e(Tv,Vqo),e(Tv,SN),e(SN,zqo),e(Tv,Wqo),e(ke,Qqo),e(ke,Fv),e(Fv,wde),e(wde,Hqo),e(Fv,Uqo),e(Fv,PN),e(PN,Jqo),e(Fv,Yqo),e(ke,Kqo),e(ke,Cv),e(Cv,Ade),e(Ade,Zqo),e(Cv,eOo),e(Cv,$N),e($N,oOo),e(Cv,rOo),e(ke,tOo),e(ke,Mv),e(Mv,Lde),e(Lde,aOo),e(Mv,nOo),e(Mv,IN),e(IN,sOo),e(Mv,lOo),e(ke,iOo),e(ke,Ev),e(Ev,Bde),e(Bde,dOo),e(Ev,cOo),e(Ev,jN),e(jN,fOo),e(Ev,mOo),e(ke,gOo),e(ke,yv),e(yv,xde),e(xde,hOo),e(yv,pOo),e(yv,DN),e(DN,_Oo),e(yv,uOo),e(Ke,bOo),e(Ke,wv),e(wv,vOo),e(wv,kde),e(kde,TOo),e(wv,FOo),e(wv,Rde),e(Rde,COo),e(Ke,MOo),e(Ke,Sde),e(Sde,EOo),e(Ke,yOo),g(Lw,Ke,null),b(d,Vxe,u),b(d,zd,u),e(zd,Av),e(Av,Pde),g(Bw,Pde,null),e(zd,wOo),e(zd,$de),e($de,AOo),b(d,zxe,u),b(d,mr,u),g(xw,mr,null),e(mr,LOo),e(mr,Wd),e(Wd,BOo),e(Wd,Ide),e(Ide,xOo),e(Wd,kOo),e(Wd,jde),e(jde,ROo),e(Wd,SOo),e(mr,POo),e(mr,kw),e(kw,$Oo),e(kw,Dde),e(Dde,IOo),e(kw,jOo),e(mr,DOo),e(mr,st),g(Rw,st,null),e(st,NOo),e(st,Nde),e(Nde,qOo),e(st,OOo),e(st,Qd),e(Qd,GOo),e(Qd,qde),e(qde,XOo),e(Qd,VOo),e(Qd,Ode),e(Ode,zOo),e(Qd,WOo),e(st,QOo),e(st,Gde),e(Gde,HOo),e(st,UOo),g(Sw,st,null),e(mr,JOo),e(mr,Ze),g(Pw,Ze,null),e(Ze,YOo),e(Ze,Xde),e(Xde,KOo),e(Ze,ZOo),e(Ze,sn),e(sn,eGo),e(sn,Vde),e(Vde,oGo),e(sn,rGo),e(sn,zde),e(zde,tGo),e(sn,aGo),e(sn,Wde),e(Wde,nGo),e(sn,sGo),e(Ze,lGo),e(Ze,$w),e($w,Lv),e(Lv,Qde),e(Qde,iGo),e(Lv,dGo),e(Lv,NN),e(NN,cGo),e(Lv,fGo),e($w,mGo),e($w,Bv),e(Bv,Hde),e(Hde,gGo),e(Bv,hGo),e(Bv,qN),e(qN,pGo),e(Bv,_Go),e(Ze,uGo),e(Ze,xv),e(xv,bGo),e(xv,Ude),e(Ude,vGo),e(xv,TGo),e(xv,Jde),e(Jde,FGo),e(Ze,CGo),e(Ze,Yde),e(Yde,MGo),e(Ze,EGo),g(Iw,Ze,null),b(d,Wxe,u),b(d,Hd,u),e(Hd,kv),e(kv,Kde),g(jw,Kde,null),e(Hd,yGo),e(Hd,Zde),e(Zde,wGo),b(d,Qxe,u),b(d,gr,u),g(Dw,gr,null),e(gr,AGo),e(gr,Ud),e(Ud,LGo),e(Ud,ece),e(ece,BGo),e(Ud,xGo),e(Ud,oce),e(oce,kGo),e(Ud,RGo),e(gr,SGo),e(gr,Nw),e(Nw,PGo),e(Nw,rce),e(rce,$Go),e(Nw,IGo),e(gr,jGo),e(gr,lt),g(qw,lt,null),e(lt,DGo),e(lt,tce),e(tce,NGo),e(lt,qGo),e(lt,Jd),e(Jd,OGo),e(Jd,ace),e(ace,GGo),e(Jd,XGo),e(Jd,nce),e(nce,VGo),e(Jd,zGo),e(lt,WGo),e(lt,sce),e(sce,QGo),e(lt,HGo),g(Ow,lt,null),e(gr,UGo),e(gr,eo),g(Gw,eo,null),e(eo,JGo),e(eo,lce),e(lce,YGo),e(eo,KGo),e(eo,ln),e(ln,ZGo),e(ln,ice),e(ice,eXo),e(ln,oXo),e(ln,dce),e(dce,rXo),e(ln,tXo),e(ln,cce),e(cce,aXo),e(ln,nXo),e(eo,sXo),e(eo,dn),e(dn,Rv),e(Rv,fce),e(fce,lXo),e(Rv,iXo),e(Rv,ON),e(ON,dXo),e(Rv,cXo),e(dn,fXo),e(dn,Sv),e(Sv,mce),e(mce,mXo),e(Sv,gXo),e(Sv,GN),e(GN,hXo),e(Sv,pXo),e(dn,_Xo),e(dn,Pv),e(Pv,gce),e(gce,uXo),e(Pv,bXo),e(Pv,XN),e(XN,vXo),e(Pv,TXo),e(dn,FXo),e(dn,$v),e($v,hce),e(hce,CXo),e($v,MXo),e($v,VN),e(VN,EXo),e($v,yXo),e(eo,wXo),e(eo,Iv),e(Iv,AXo),e(Iv,pce),e(pce,LXo),e(Iv,BXo),e(Iv,_ce),e(_ce,xXo),e(eo,kXo),e(eo,uce),e(uce,RXo),e(eo,SXo),g(Xw,eo,null),b(d,Hxe,u),b(d,Yd,u),e(Yd,jv),e(jv,bce),g(Vw,bce,null),e(Yd,PXo),e(Yd,vce),e(vce,$Xo),b(d,Uxe,u),b(d,hr,u),g(zw,hr,null),e(hr,IXo),e(hr,Kd),e(Kd,jXo),e(Kd,Tce),e(Tce,DXo),e(Kd,NXo),e(Kd,Fce),e(Fce,qXo),e(Kd,OXo),e(hr,GXo),e(hr,Ww),e(Ww,XXo),e(Ww,Cce),e(Cce,VXo),e(Ww,zXo),e(hr,WXo),e(hr,it),g(Qw,it,null),e(it,QXo),e(it,Mce),e(Mce,HXo),e(it,UXo),e(it,Zd),e(Zd,JXo),e(Zd,Ece),e(Ece,YXo),e(Zd,KXo),e(Zd,yce),e(yce,ZXo),e(Zd,eVo),e(it,oVo),e(it,wce),e(wce,rVo),e(it,tVo),g(Hw,it,null),e(hr,aVo),e(hr,oo),g(Uw,oo,null),e(oo,nVo),e(oo,Ace),e(Ace,sVo),e(oo,lVo),e(oo,cn),e(cn,iVo),e(cn,Lce),e(Lce,dVo),e(cn,cVo),e(cn,Bce),e(Bce,fVo),e(cn,mVo),e(cn,xce),e(xce,gVo),e(cn,hVo),e(oo,pVo),e(oo,ec),e(ec,Dv),e(Dv,kce),e(kce,_Vo),e(Dv,uVo),e(Dv,zN),e(zN,bVo),e(Dv,vVo),e(ec,TVo),e(ec,Nv),e(Nv,Rce),e(Rce,FVo),e(Nv,CVo),e(Nv,WN),e(WN,MVo),e(Nv,EVo),e(ec,yVo),e(ec,qv),e(qv,Sce),e(Sce,wVo),e(qv,AVo),e(qv,QN),e(QN,LVo),e(qv,BVo),e(oo,xVo),e(oo,Ov),e(Ov,kVo),e(Ov,Pce),e(Pce,RVo),e(Ov,SVo),e(Ov,$ce),e($ce,PVo),e(oo,$Vo),e(oo,Ice),e(Ice,IVo),e(oo,jVo),g(Jw,oo,null),b(d,Jxe,u),b(d,oc,u),e(oc,Gv),e(Gv,jce),g(Yw,jce,null),e(oc,DVo),e(oc,Dce),e(Dce,NVo),b(d,Yxe,u),b(d,pr,u),g(Kw,pr,null),e(pr,qVo),e(pr,rc),e(rc,OVo),e(rc,Nce),e(Nce,GVo),e(rc,XVo),e(rc,qce),e(qce,VVo),e(rc,zVo),e(pr,WVo),e(pr,Zw),e(Zw,QVo),e(Zw,Oce),e(Oce,HVo),e(Zw,UVo),e(pr,JVo),e(pr,dt),g(e6,dt,null),e(dt,YVo),e(dt,Gce),e(Gce,KVo),e(dt,ZVo),e(dt,tc),e(tc,ezo),e(tc,Xce),e(Xce,ozo),e(tc,rzo),e(tc,Vce),e(Vce,tzo),e(tc,azo),e(dt,nzo),e(dt,zce),e(zce,szo),e(dt,lzo),g(o6,dt,null),e(pr,izo),e(pr,ro),g(r6,ro,null),e(ro,dzo),e(ro,Wce),e(Wce,czo),e(ro,fzo),e(ro,fn),e(fn,mzo),e(fn,Qce),e(Qce,gzo),e(fn,hzo),e(fn,Hce),e(Hce,pzo),e(fn,_zo),e(fn,Uce),e(Uce,uzo),e(fn,bzo),e(ro,vzo),e(ro,Jce),e(Jce,Xv),e(Xv,Yce),e(Yce,Tzo),e(Xv,Fzo),e(Xv,HN),e(HN,Czo),e(Xv,Mzo),e(ro,Ezo),e(ro,Vv),e(Vv,yzo),e(Vv,Kce),e(Kce,wzo),e(Vv,Azo),e(Vv,Zce),e(Zce,Lzo),e(ro,Bzo),e(ro,efe),e(efe,xzo),e(ro,kzo),g(t6,ro,null),b(d,Kxe,u),b(d,ac,u),e(ac,zv),e(zv,ofe),g(a6,ofe,null),e(ac,Rzo),e(ac,rfe),e(rfe,Szo),b(d,Zxe,u),b(d,_r,u),g(n6,_r,null),e(_r,Pzo),e(_r,nc),e(nc,$zo),e(nc,tfe),e(tfe,Izo),e(nc,jzo),e(nc,afe),e(afe,Dzo),e(nc,Nzo),e(_r,qzo),e(_r,s6),e(s6,Ozo),e(s6,nfe),e(nfe,Gzo),e(s6,Xzo),e(_r,Vzo),e(_r,ct),g(l6,ct,null),e(ct,zzo),e(ct,sfe),e(sfe,Wzo),e(ct,Qzo),e(ct,sc),e(sc,Hzo),e(sc,lfe),e(lfe,Uzo),e(sc,Jzo),e(sc,ife),e(ife,Yzo),e(sc,Kzo),e(ct,Zzo),e(ct,dfe),e(dfe,eWo),e(ct,oWo),g(i6,ct,null),e(_r,rWo),e(_r,to),g(d6,to,null),e(to,tWo),e(to,cfe),e(cfe,aWo),e(to,nWo),e(to,mn),e(mn,sWo),e(mn,ffe),e(ffe,lWo),e(mn,iWo),e(mn,mfe),e(mfe,dWo),e(mn,cWo),e(mn,gfe),e(gfe,fWo),e(mn,mWo),e(to,gWo),e(to,hfe),e(hfe,Wv),e(Wv,pfe),e(pfe,hWo),e(Wv,pWo),e(Wv,UN),e(UN,_Wo),e(Wv,uWo),e(to,bWo),e(to,Qv),e(Qv,vWo),e(Qv,_fe),e(_fe,TWo),e(Qv,FWo),e(Qv,ufe),e(ufe,CWo),e(to,MWo),e(to,bfe),e(bfe,EWo),e(to,yWo),g(c6,to,null),b(d,eke,u),b(d,lc,u),e(lc,Hv),e(Hv,vfe),g(f6,vfe,null),e(lc,wWo),e(lc,Tfe),e(Tfe,AWo),b(d,oke,u),b(d,ur,u),g(m6,ur,null),e(ur,LWo),e(ur,ic),e(ic,BWo),e(ic,Ffe),e(Ffe,xWo),e(ic,kWo),e(ic,Cfe),e(Cfe,RWo),e(ic,SWo),e(ur,PWo),e(ur,g6),e(g6,$Wo),e(g6,Mfe),e(Mfe,IWo),e(g6,jWo),e(ur,DWo),e(ur,ft),g(h6,ft,null),e(ft,NWo),e(ft,Efe),e(Efe,qWo),e(ft,OWo),e(ft,dc),e(dc,GWo),e(dc,yfe),e(yfe,XWo),e(dc,VWo),e(dc,wfe),e(wfe,zWo),e(dc,WWo),e(ft,QWo),e(ft,Afe),e(Afe,HWo),e(ft,UWo),g(p6,ft,null),e(ur,JWo),e(ur,ao),g(_6,ao,null),e(ao,YWo),e(ao,Lfe),e(Lfe,KWo),e(ao,ZWo),e(ao,gn),e(gn,eQo),e(gn,Bfe),e(Bfe,oQo),e(gn,rQo),e(gn,xfe),e(xfe,tQo),e(gn,aQo),e(gn,kfe),e(kfe,nQo),e(gn,sQo),e(ao,lQo),e(ao,u6),e(u6,Uv),e(Uv,Rfe),e(Rfe,iQo),e(Uv,dQo),e(Uv,JN),e(JN,cQo),e(Uv,fQo),e(u6,mQo),e(u6,Jv),e(Jv,Sfe),e(Sfe,gQo),e(Jv,hQo),e(Jv,YN),e(YN,pQo),e(Jv,_Qo),e(ao,uQo),e(ao,Yv),e(Yv,bQo),e(Yv,Pfe),e(Pfe,vQo),e(Yv,TQo),e(Yv,$fe),e($fe,FQo),e(ao,CQo),e(ao,Ife),e(Ife,MQo),e(ao,EQo),g(b6,ao,null),b(d,rke,u),b(d,cc,u),e(cc,Kv),e(Kv,jfe),g(v6,jfe,null),e(cc,yQo),e(cc,Dfe),e(Dfe,wQo),b(d,tke,u),b(d,br,u),g(T6,br,null),e(br,AQo),e(br,fc),e(fc,LQo),e(fc,Nfe),e(Nfe,BQo),e(fc,xQo),e(fc,qfe),e(qfe,kQo),e(fc,RQo),e(br,SQo),e(br,F6),e(F6,PQo),e(F6,Ofe),e(Ofe,$Qo),e(F6,IQo),e(br,jQo),e(br,mt),g(C6,mt,null),e(mt,DQo),e(mt,Gfe),e(Gfe,NQo),e(mt,qQo),e(mt,mc),e(mc,OQo),e(mc,Xfe),e(Xfe,GQo),e(mc,XQo),e(mc,Vfe),e(Vfe,VQo),e(mc,zQo),e(mt,WQo),e(mt,zfe),e(zfe,QQo),e(mt,HQo),g(M6,mt,null),e(br,UQo),e(br,no),g(E6,no,null),e(no,JQo),e(no,Wfe),e(Wfe,YQo),e(no,KQo),e(no,hn),e(hn,ZQo),e(hn,Qfe),e(Qfe,eHo),e(hn,oHo),e(hn,Hfe),e(Hfe,rHo),e(hn,tHo),e(hn,Ufe),e(Ufe,aHo),e(hn,nHo),e(no,sHo),e(no,Jfe),e(Jfe,Zv),e(Zv,Yfe),e(Yfe,lHo),e(Zv,iHo),e(Zv,KN),e(KN,dHo),e(Zv,cHo),e(no,fHo),e(no,eT),e(eT,mHo),e(eT,Kfe),e(Kfe,gHo),e(eT,hHo),e(eT,Zfe),e(Zfe,pHo),e(no,_Ho),e(no,eme),e(eme,uHo),e(no,bHo),g(y6,no,null),b(d,ake,u),b(d,gc,u),e(gc,oT),e(oT,ome),g(w6,ome,null),e(gc,vHo),e(gc,rme),e(rme,THo),b(d,nke,u),b(d,vr,u),g(A6,vr,null),e(vr,FHo),e(vr,hc),e(hc,CHo),e(hc,tme),e(tme,MHo),e(hc,EHo),e(hc,ame),e(ame,yHo),e(hc,wHo),e(vr,AHo),e(vr,L6),e(L6,LHo),e(L6,nme),e(nme,BHo),e(L6,xHo),e(vr,kHo),e(vr,gt),g(B6,gt,null),e(gt,RHo),e(gt,sme),e(sme,SHo),e(gt,PHo),e(gt,pc),e(pc,$Ho),e(pc,lme),e(lme,IHo),e(pc,jHo),e(pc,ime),e(ime,DHo),e(pc,NHo),e(gt,qHo),e(gt,dme),e(dme,OHo),e(gt,GHo),g(x6,gt,null),e(vr,XHo),e(vr,ho),g(k6,ho,null),e(ho,VHo),e(ho,cme),e(cme,zHo),e(ho,WHo),e(ho,pn),e(pn,QHo),e(pn,fme),e(fme,HHo),e(pn,UHo),e(pn,mme),e(mme,JHo),e(pn,YHo),e(pn,gme),e(gme,KHo),e(pn,ZHo),e(ho,eUo),e(ho,B),e(B,rT),e(rT,hme),e(hme,oUo),e(rT,rUo),e(rT,ZN),e(ZN,tUo),e(rT,aUo),e(B,nUo),e(B,tT),e(tT,pme),e(pme,sUo),e(tT,lUo),e(tT,eq),e(eq,iUo),e(tT,dUo),e(B,cUo),e(B,aT),e(aT,_me),e(_me,fUo),e(aT,mUo),e(aT,oq),e(oq,gUo),e(aT,hUo),e(B,pUo),e(B,nT),e(nT,ume),e(ume,_Uo),e(nT,uUo),e(nT,rq),e(rq,bUo),e(nT,vUo),e(B,TUo),e(B,sT),e(sT,bme),e(bme,FUo),e(sT,CUo),e(sT,tq),e(tq,MUo),e(sT,EUo),e(B,yUo),e(B,lT),e(lT,vme),e(vme,wUo),e(lT,AUo),e(lT,aq),e(aq,LUo),e(lT,BUo),e(B,xUo),e(B,iT),e(iT,Tme),e(Tme,kUo),e(iT,RUo),e(iT,nq),e(nq,SUo),e(iT,PUo),e(B,$Uo),e(B,dT),e(dT,Fme),e(Fme,IUo),e(dT,jUo),e(dT,sq),e(sq,DUo),e(dT,NUo),e(B,qUo),e(B,cT),e(cT,Cme),e(Cme,OUo),e(cT,GUo),e(cT,lq),e(lq,XUo),e(cT,VUo),e(B,zUo),e(B,fT),e(fT,Mme),e(Mme,WUo),e(fT,QUo),e(fT,iq),e(iq,HUo),e(fT,UUo),e(B,JUo),e(B,mT),e(mT,Eme),e(Eme,YUo),e(mT,KUo),e(mT,dq),e(dq,ZUo),e(mT,eJo),e(B,oJo),e(B,gT),e(gT,yme),e(yme,rJo),e(gT,tJo),e(gT,cq),e(cq,aJo),e(gT,nJo),e(B,sJo),e(B,hT),e(hT,wme),e(wme,lJo),e(hT,iJo),e(hT,fq),e(fq,dJo),e(hT,cJo),e(B,fJo),e(B,pT),e(pT,Ame),e(Ame,mJo),e(pT,gJo),e(pT,mq),e(mq,hJo),e(pT,pJo),e(B,_Jo),e(B,_T),e(_T,Lme),e(Lme,uJo),e(_T,bJo),e(_T,gq),e(gq,vJo),e(_T,TJo),e(B,FJo),e(B,uT),e(uT,Bme),e(Bme,CJo),e(uT,MJo),e(uT,hq),e(hq,EJo),e(uT,yJo),e(B,wJo),e(B,Gs),e(Gs,xme),e(xme,AJo),e(Gs,LJo),e(Gs,pq),e(pq,BJo),e(Gs,xJo),e(Gs,_q),e(_q,kJo),e(Gs,RJo),e(B,SJo),e(B,bT),e(bT,kme),e(kme,PJo),e(bT,$Jo),e(bT,uq),e(uq,IJo),e(bT,jJo),e(B,DJo),e(B,vT),e(vT,Rme),e(Rme,NJo),e(vT,qJo),e(vT,bq),e(bq,OJo),e(vT,GJo),e(B,XJo),e(B,TT),e(TT,Sme),e(Sme,VJo),e(TT,zJo),e(TT,vq),e(vq,WJo),e(TT,QJo),e(B,HJo),e(B,FT),e(FT,Pme),e(Pme,UJo),e(FT,JJo),e(FT,Tq),e(Tq,YJo),e(FT,KJo),e(B,ZJo),e(B,CT),e(CT,$me),e($me,eYo),e(CT,oYo),e(CT,Fq),e(Fq,rYo),e(CT,tYo),e(B,aYo),e(B,MT),e(MT,Ime),e(Ime,nYo),e(MT,sYo),e(MT,Cq),e(Cq,lYo),e(MT,iYo),e(B,dYo),e(B,ET),e(ET,jme),e(jme,cYo),e(ET,fYo),e(ET,Mq),e(Mq,mYo),e(ET,gYo),e(B,hYo),e(B,yT),e(yT,Dme),e(Dme,pYo),e(yT,_Yo),e(yT,Eq),e(Eq,uYo),e(yT,bYo),e(B,vYo),e(B,wT),e(wT,Nme),e(Nme,TYo),e(wT,FYo),e(wT,yq),e(yq,CYo),e(wT,MYo),e(B,EYo),e(B,AT),e(AT,qme),e(qme,yYo),e(AT,wYo),e(AT,wq),e(wq,AYo),e(AT,LYo),e(B,BYo),e(B,LT),e(LT,Ome),e(Ome,xYo),e(LT,kYo),e(LT,Aq),e(Aq,RYo),e(LT,SYo),e(B,PYo),e(B,BT),e(BT,Gme),e(Gme,$Yo),e(BT,IYo),e(BT,Lq),e(Lq,jYo),e(BT,DYo),e(B,NYo),e(B,xT),e(xT,Xme),e(Xme,qYo),e(xT,OYo),e(xT,Bq),e(Bq,GYo),e(xT,XYo),e(B,VYo),e(B,kT),e(kT,Vme),e(Vme,zYo),e(kT,WYo),e(kT,xq),e(xq,QYo),e(kT,HYo),e(B,UYo),e(B,RT),e(RT,zme),e(zme,JYo),e(RT,YYo),e(RT,kq),e(kq,KYo),e(RT,ZYo),e(B,eKo),e(B,ST),e(ST,Wme),e(Wme,oKo),e(ST,rKo),e(ST,Rq),e(Rq,tKo),e(ST,aKo),e(B,nKo),e(B,PT),e(PT,Qme),e(Qme,sKo),e(PT,lKo),e(PT,Sq),e(Sq,iKo),e(PT,dKo),e(B,cKo),e(B,$T),e($T,Hme),e(Hme,fKo),e($T,mKo),e($T,Pq),e(Pq,gKo),e($T,hKo),e(B,pKo),e(B,IT),e(IT,Ume),e(Ume,_Ko),e(IT,uKo),e(IT,$q),e($q,bKo),e(IT,vKo),e(B,TKo),e(B,jT),e(jT,Jme),e(Jme,FKo),e(jT,CKo),e(jT,Iq),e(Iq,MKo),e(jT,EKo),e(B,yKo),e(B,DT),e(DT,Yme),e(Yme,wKo),e(DT,AKo),e(DT,jq),e(jq,LKo),e(DT,BKo),e(B,xKo),e(B,NT),e(NT,Kme),e(Kme,kKo),e(NT,RKo),e(NT,Dq),e(Dq,SKo),e(NT,PKo),e(B,$Ko),e(B,qT),e(qT,Zme),e(Zme,IKo),e(qT,jKo),e(qT,Nq),e(Nq,DKo),e(qT,NKo),e(B,qKo),e(B,OT),e(OT,ege),e(ege,OKo),e(OT,GKo),e(OT,qq),e(qq,XKo),e(OT,VKo),e(B,zKo),e(B,GT),e(GT,oge),e(oge,WKo),e(GT,QKo),e(GT,Oq),e(Oq,HKo),e(GT,UKo),e(ho,JKo),e(ho,rge),e(rge,YKo),e(ho,KKo),g(R6,ho,null),b(d,ske,u),b(d,_c,u),e(_c,XT),e(XT,tge),g(S6,tge,null),e(_c,ZKo),e(_c,age),e(age,eZo),b(d,lke,u),b(d,Tr,u),g(P6,Tr,null),e(Tr,oZo),e(Tr,uc),e(uc,rZo),e(uc,nge),e(nge,tZo),e(uc,aZo),e(uc,sge),e(sge,nZo),e(uc,sZo),e(Tr,lZo),e(Tr,$6),e($6,iZo),e($6,lge),e(lge,dZo),e($6,cZo),e(Tr,fZo),e(Tr,ht),g(I6,ht,null),e(ht,mZo),e(ht,ige),e(ige,gZo),e(ht,hZo),e(ht,bc),e(bc,pZo),e(bc,dge),e(dge,_Zo),e(bc,uZo),e(bc,cge),e(cge,bZo),e(bc,vZo),e(ht,TZo),e(ht,fge),e(fge,FZo),e(ht,CZo),g(j6,ht,null),e(Tr,MZo),e(Tr,po),g(D6,po,null),e(po,EZo),e(po,mge),e(mge,yZo),e(po,wZo),e(po,_n),e(_n,AZo),e(_n,gge),e(gge,LZo),e(_n,BZo),e(_n,hge),e(hge,xZo),e(_n,kZo),e(_n,pge),e(pge,RZo),e(_n,SZo),e(po,PZo),e(po,H),e(H,VT),e(VT,_ge),e(_ge,$Zo),e(VT,IZo),e(VT,Gq),e(Gq,jZo),e(VT,DZo),e(H,NZo),e(H,zT),e(zT,uge),e(uge,qZo),e(zT,OZo),e(zT,Xq),e(Xq,GZo),e(zT,XZo),e(H,VZo),e(H,WT),e(WT,bge),e(bge,zZo),e(WT,WZo),e(WT,Vq),e(Vq,QZo),e(WT,HZo),e(H,UZo),e(H,QT),e(QT,vge),e(vge,JZo),e(QT,YZo),e(QT,zq),e(zq,KZo),e(QT,ZZo),e(H,eer),e(H,HT),e(HT,Tge),e(Tge,oer),e(HT,rer),e(HT,Wq),e(Wq,ter),e(HT,aer),e(H,ner),e(H,UT),e(UT,Fge),e(Fge,ser),e(UT,ler),e(UT,Qq),e(Qq,ier),e(UT,der),e(H,cer),e(H,JT),e(JT,Cge),e(Cge,fer),e(JT,mer),e(JT,Hq),e(Hq,ger),e(JT,her),e(H,per),e(H,YT),e(YT,Mge),e(Mge,_er),e(YT,uer),e(YT,Uq),e(Uq,ber),e(YT,ver),e(H,Ter),e(H,KT),e(KT,Ege),e(Ege,Fer),e(KT,Cer),e(KT,Jq),e(Jq,Mer),e(KT,Eer),e(H,yer),e(H,ZT),e(ZT,yge),e(yge,wer),e(ZT,Aer),e(ZT,Yq),e(Yq,Ler),e(ZT,Ber),e(H,xer),e(H,eF),e(eF,wge),e(wge,ker),e(eF,Rer),e(eF,Kq),e(Kq,Ser),e(eF,Per),e(H,$er),e(H,oF),e(oF,Age),e(Age,Ier),e(oF,jer),e(oF,Zq),e(Zq,Der),e(oF,Ner),e(H,qer),e(H,rF),e(rF,Lge),e(Lge,Oer),e(rF,Ger),e(rF,eO),e(eO,Xer),e(rF,Ver),e(H,zer),e(H,tF),e(tF,Bge),e(Bge,Wer),e(tF,Qer),e(tF,oO),e(oO,Her),e(tF,Uer),e(H,Jer),e(H,aF),e(aF,xge),e(xge,Yer),e(aF,Ker),e(aF,rO),e(rO,Zer),e(aF,eor),e(H,oor),e(H,nF),e(nF,kge),e(kge,ror),e(nF,tor),e(nF,tO),e(tO,aor),e(nF,nor),e(H,sor),e(H,sF),e(sF,Rge),e(Rge,lor),e(sF,ior),e(sF,aO),e(aO,dor),e(sF,cor),e(H,mor),e(H,lF),e(lF,Sge),e(Sge,gor),e(lF,hor),e(lF,nO),e(nO,por),e(lF,_or),e(H,uor),e(H,iF),e(iF,Pge),e(Pge,bor),e(iF,vor),e(iF,sO),e(sO,Tor),e(iF,For),e(H,Cor),e(H,dF),e(dF,$ge),e($ge,Mor),e(dF,Eor),e(dF,lO),e(lO,yor),e(dF,wor),e(H,Aor),e(H,cF),e(cF,Ige),e(Ige,Lor),e(cF,Bor),e(cF,iO),e(iO,xor),e(cF,kor),e(H,Ror),e(H,fF),e(fF,jge),e(jge,Sor),e(fF,Por),e(fF,dO),e(dO,$or),e(fF,Ior),e(po,jor),e(po,Dge),e(Dge,Dor),e(po,Nor),g(N6,po,null),b(d,ike,u),b(d,vc,u),e(vc,mF),e(mF,Nge),g(q6,Nge,null),e(vc,qor),e(vc,qge),e(qge,Oor),b(d,dke,u),b(d,Fr,u),g(O6,Fr,null),e(Fr,Gor),e(Fr,Tc),e(Tc,Xor),e(Tc,Oge),e(Oge,Vor),e(Tc,zor),e(Tc,Gge),e(Gge,Wor),e(Tc,Qor),e(Fr,Hor),e(Fr,G6),e(G6,Uor),e(G6,Xge),e(Xge,Jor),e(G6,Yor),e(Fr,Kor),e(Fr,pt),g(X6,pt,null),e(pt,Zor),e(pt,Vge),e(Vge,err),e(pt,orr),e(pt,Fc),e(Fc,rrr),e(Fc,zge),e(zge,trr),e(Fc,arr),e(Fc,Wge),e(Wge,nrr),e(Fc,srr),e(pt,lrr),e(pt,Qge),e(Qge,irr),e(pt,drr),g(V6,pt,null),e(Fr,crr),e(Fr,_o),g(z6,_o,null),e(_o,frr),e(_o,Hge),e(Hge,mrr),e(_o,grr),e(_o,un),e(un,hrr),e(un,Uge),e(Uge,prr),e(un,_rr),e(un,Jge),e(Jge,urr),e(un,brr),e(un,Yge),e(Yge,vrr),e(un,Trr),e(_o,Frr),e(_o,pe),e(pe,gF),e(gF,Kge),e(Kge,Crr),e(gF,Mrr),e(gF,cO),e(cO,Err),e(gF,yrr),e(pe,wrr),e(pe,hF),e(hF,Zge),e(Zge,Arr),e(hF,Lrr),e(hF,fO),e(fO,Brr),e(hF,xrr),e(pe,krr),e(pe,pF),e(pF,ehe),e(ehe,Rrr),e(pF,Srr),e(pF,mO),e(mO,Prr),e(pF,$rr),e(pe,Irr),e(pe,_F),e(_F,ohe),e(ohe,jrr),e(_F,Drr),e(_F,gO),e(gO,Nrr),e(_F,qrr),e(pe,Orr),e(pe,uF),e(uF,rhe),e(rhe,Grr),e(uF,Xrr),e(uF,hO),e(hO,Vrr),e(uF,zrr),e(pe,Wrr),e(pe,bF),e(bF,the),e(the,Qrr),e(bF,Hrr),e(bF,pO),e(pO,Urr),e(bF,Jrr),e(pe,Yrr),e(pe,vF),e(vF,ahe),e(ahe,Krr),e(vF,Zrr),e(vF,_O),e(_O,etr),e(vF,otr),e(pe,rtr),e(pe,TF),e(TF,nhe),e(nhe,ttr),e(TF,atr),e(TF,uO),e(uO,ntr),e(TF,str),e(pe,ltr),e(pe,FF),e(FF,she),e(she,itr),e(FF,dtr),e(FF,bO),e(bO,ctr),e(FF,ftr),e(pe,mtr),e(pe,CF),e(CF,lhe),e(lhe,gtr),e(CF,htr),e(CF,vO),e(vO,ptr),e(CF,_tr),e(_o,utr),e(_o,ihe),e(ihe,btr),e(_o,vtr),g(W6,_o,null),b(d,cke,u),b(d,Cc,u),e(Cc,MF),e(MF,dhe),g(Q6,dhe,null),e(Cc,Ttr),e(Cc,che),e(che,Ftr),b(d,fke,u),b(d,Cr,u),g(H6,Cr,null),e(Cr,Ctr),e(Cr,Mc),e(Mc,Mtr),e(Mc,fhe),e(fhe,Etr),e(Mc,ytr),e(Mc,mhe),e(mhe,wtr),e(Mc,Atr),e(Cr,Ltr),e(Cr,U6),e(U6,Btr),e(U6,ghe),e(ghe,xtr),e(U6,ktr),e(Cr,Rtr),e(Cr,_t),g(J6,_t,null),e(_t,Str),e(_t,hhe),e(hhe,Ptr),e(_t,$tr),e(_t,Ec),e(Ec,Itr),e(Ec,phe),e(phe,jtr),e(Ec,Dtr),e(Ec,_he),e(_he,Ntr),e(Ec,qtr),e(_t,Otr),e(_t,uhe),e(uhe,Gtr),e(_t,Xtr),g(Y6,_t,null),e(Cr,Vtr),e(Cr,uo),g(K6,uo,null),e(uo,ztr),e(uo,bhe),e(bhe,Wtr),e(uo,Qtr),e(uo,bn),e(bn,Htr),e(bn,vhe),e(vhe,Utr),e(bn,Jtr),e(bn,The),e(The,Ytr),e(bn,Ktr),e(bn,Fhe),e(Fhe,Ztr),e(bn,ear),e(uo,oar),e(uo,Z6),e(Z6,EF),e(EF,Che),e(Che,rar),e(EF,tar),e(EF,TO),e(TO,aar),e(EF,nar),e(Z6,sar),e(Z6,yF),e(yF,Mhe),e(Mhe,lar),e(yF,iar),e(yF,FO),e(FO,dar),e(yF,car),e(uo,far),e(uo,Ehe),e(Ehe,mar),e(uo,gar),g(eA,uo,null),b(d,mke,u),b(d,yc,u),e(yc,wF),e(wF,yhe),g(oA,yhe,null),e(yc,har),e(yc,whe),e(whe,par),b(d,gke,u),b(d,Mr,u),g(rA,Mr,null),e(Mr,_ar),e(Mr,wc),e(wc,uar),e(wc,Ahe),e(Ahe,bar),e(wc,Tar),e(wc,Lhe),e(Lhe,Far),e(wc,Car),e(Mr,Mar),e(Mr,tA),e(tA,Ear),e(tA,Bhe),e(Bhe,yar),e(tA,war),e(Mr,Aar),e(Mr,ut),g(aA,ut,null),e(ut,Lar),e(ut,xhe),e(xhe,Bar),e(ut,xar),e(ut,Ac),e(Ac,kar),e(Ac,khe),e(khe,Rar),e(Ac,Sar),e(Ac,Rhe),e(Rhe,Par),e(Ac,$ar),e(ut,Iar),e(ut,She),e(She,jar),e(ut,Dar),g(nA,ut,null),e(Mr,Nar),e(Mr,bo),g(sA,bo,null),e(bo,qar),e(bo,Phe),e(Phe,Oar),e(bo,Gar),e(bo,vn),e(vn,Xar),e(vn,$he),e($he,Var),e(vn,zar),e(vn,Ihe),e(Ihe,War),e(vn,Qar),e(vn,jhe),e(jhe,Har),e(vn,Uar),e(bo,Jar),e(bo,Y),e(Y,AF),e(AF,Dhe),e(Dhe,Yar),e(AF,Kar),e(AF,CO),e(CO,Zar),e(AF,enr),e(Y,onr),e(Y,LF),e(LF,Nhe),e(Nhe,rnr),e(LF,tnr),e(LF,MO),e(MO,anr),e(LF,nnr),e(Y,snr),e(Y,BF),e(BF,qhe),e(qhe,lnr),e(BF,inr),e(BF,EO),e(EO,dnr),e(BF,cnr),e(Y,fnr),e(Y,xF),e(xF,Ohe),e(Ohe,mnr),e(xF,gnr),e(xF,yO),e(yO,hnr),e(xF,pnr),e(Y,_nr),e(Y,kF),e(kF,Ghe),e(Ghe,unr),e(kF,bnr),e(kF,wO),e(wO,vnr),e(kF,Tnr),e(Y,Fnr),e(Y,RF),e(RF,Xhe),e(Xhe,Cnr),e(RF,Mnr),e(RF,AO),e(AO,Enr),e(RF,ynr),e(Y,wnr),e(Y,SF),e(SF,Vhe),e(Vhe,Anr),e(SF,Lnr),e(SF,LO),e(LO,Bnr),e(SF,xnr),e(Y,knr),e(Y,PF),e(PF,zhe),e(zhe,Rnr),e(PF,Snr),e(PF,BO),e(BO,Pnr),e(PF,$nr),e(Y,Inr),e(Y,$F),e($F,Whe),e(Whe,jnr),e($F,Dnr),e($F,xO),e(xO,Nnr),e($F,qnr),e(Y,Onr),e(Y,IF),e(IF,Qhe),e(Qhe,Gnr),e(IF,Xnr),e(IF,kO),e(kO,Vnr),e(IF,znr),e(Y,Wnr),e(Y,jF),e(jF,Hhe),e(Hhe,Qnr),e(jF,Hnr),e(jF,RO),e(RO,Unr),e(jF,Jnr),e(Y,Ynr),e(Y,DF),e(DF,Uhe),e(Uhe,Knr),e(DF,Znr),e(DF,SO),e(SO,esr),e(DF,osr),e(Y,rsr),e(Y,NF),e(NF,Jhe),e(Jhe,tsr),e(NF,asr),e(NF,PO),e(PO,nsr),e(NF,ssr),e(Y,lsr),e(Y,qF),e(qF,Yhe),e(Yhe,isr),e(qF,dsr),e(qF,$O),e($O,csr),e(qF,fsr),e(Y,msr),e(Y,OF),e(OF,Khe),e(Khe,gsr),e(OF,hsr),e(OF,IO),e(IO,psr),e(OF,_sr),e(Y,usr),e(Y,GF),e(GF,Zhe),e(Zhe,bsr),e(GF,vsr),e(GF,jO),e(jO,Tsr),e(GF,Fsr),e(Y,Csr),e(Y,XF),e(XF,epe),e(epe,Msr),e(XF,Esr),e(XF,DO),e(DO,ysr),e(XF,wsr),e(Y,Asr),e(Y,VF),e(VF,ope),e(ope,Lsr),e(VF,Bsr),e(VF,NO),e(NO,xsr),e(VF,ksr),e(Y,Rsr),e(Y,zF),e(zF,rpe),e(rpe,Ssr),e(zF,Psr),e(zF,qO),e(qO,$sr),e(zF,Isr),e(Y,jsr),e(Y,WF),e(WF,tpe),e(tpe,Dsr),e(WF,Nsr),e(WF,OO),e(OO,qsr),e(WF,Osr),e(bo,Gsr),e(bo,ape),e(ape,Xsr),e(bo,Vsr),g(lA,bo,null),b(d,hke,u),b(d,Lc,u),e(Lc,QF),e(QF,npe),g(iA,npe,null),e(Lc,zsr),e(Lc,spe),e(spe,Wsr),b(d,pke,u),b(d,Er,u),g(dA,Er,null),e(Er,Qsr),e(Er,Bc),e(Bc,Hsr),e(Bc,lpe),e(lpe,Usr),e(Bc,Jsr),e(Bc,ipe),e(ipe,Ysr),e(Bc,Ksr),e(Er,Zsr),e(Er,cA),e(cA,elr),e(cA,dpe),e(dpe,olr),e(cA,rlr),e(Er,tlr),e(Er,bt),g(fA,bt,null),e(bt,alr),e(bt,cpe),e(cpe,nlr),e(bt,slr),e(bt,xc),e(xc,llr),e(xc,fpe),e(fpe,ilr),e(xc,dlr),e(xc,mpe),e(mpe,clr),e(xc,flr),e(bt,mlr),e(bt,gpe),e(gpe,glr),e(bt,hlr),g(mA,bt,null),e(Er,plr),e(Er,vo),g(gA,vo,null),e(vo,_lr),e(vo,hpe),e(hpe,ulr),e(vo,blr),e(vo,Tn),e(Tn,vlr),e(Tn,ppe),e(ppe,Tlr),e(Tn,Flr),e(Tn,_pe),e(_pe,Clr),e(Tn,Mlr),e(Tn,upe),e(upe,Elr),e(Tn,ylr),e(vo,wlr),e(vo,_e),e(_e,HF),e(HF,bpe),e(bpe,Alr),e(HF,Llr),e(HF,GO),e(GO,Blr),e(HF,xlr),e(_e,klr),e(_e,UF),e(UF,vpe),e(vpe,Rlr),e(UF,Slr),e(UF,XO),e(XO,Plr),e(UF,$lr),e(_e,Ilr),e(_e,JF),e(JF,Tpe),e(Tpe,jlr),e(JF,Dlr),e(JF,VO),e(VO,Nlr),e(JF,qlr),e(_e,Olr),e(_e,YF),e(YF,Fpe),e(Fpe,Glr),e(YF,Xlr),e(YF,zO),e(zO,Vlr),e(YF,zlr),e(_e,Wlr),e(_e,KF),e(KF,Cpe),e(Cpe,Qlr),e(KF,Hlr),e(KF,WO),e(WO,Ulr),e(KF,Jlr),e(_e,Ylr),e(_e,ZF),e(ZF,Mpe),e(Mpe,Klr),e(ZF,Zlr),e(ZF,QO),e(QO,eir),e(ZF,oir),e(_e,rir),e(_e,e9),e(e9,Epe),e(Epe,tir),e(e9,air),e(e9,HO),e(HO,nir),e(e9,sir),e(_e,lir),e(_e,o9),e(o9,ype),e(ype,iir),e(o9,dir),e(o9,UO),e(UO,cir),e(o9,fir),e(_e,mir),e(_e,r9),e(r9,wpe),e(wpe,gir),e(r9,hir),e(r9,JO),e(JO,pir),e(r9,_ir),e(_e,uir),e(_e,t9),e(t9,Ape),e(Ape,bir),e(t9,vir),e(t9,YO),e(YO,Tir),e(t9,Fir),e(vo,Cir),e(vo,Lpe),e(Lpe,Mir),e(vo,Eir),g(hA,vo,null),b(d,_ke,u),b(d,kc,u),e(kc,a9),e(a9,Bpe),g(pA,Bpe,null),e(kc,yir),e(kc,xpe),e(xpe,wir),b(d,uke,u),b(d,yr,u),g(_A,yr,null),e(yr,Air),e(yr,Rc),e(Rc,Lir),e(Rc,kpe),e(kpe,Bir),e(Rc,xir),e(Rc,Rpe),e(Rpe,kir),e(Rc,Rir),e(yr,Sir),e(yr,uA),e(uA,Pir),e(uA,Spe),e(Spe,$ir),e(uA,Iir),e(yr,jir),e(yr,vt),g(bA,vt,null),e(vt,Dir),e(vt,Ppe),e(Ppe,Nir),e(vt,qir),e(vt,Sc),e(Sc,Oir),e(Sc,$pe),e($pe,Gir),e(Sc,Xir),e(Sc,Ipe),e(Ipe,Vir),e(Sc,zir),e(vt,Wir),e(vt,jpe),e(jpe,Qir),e(vt,Hir),g(vA,vt,null),e(yr,Uir),e(yr,To),g(TA,To,null),e(To,Jir),e(To,Dpe),e(Dpe,Yir),e(To,Kir),e(To,Fn),e(Fn,Zir),e(Fn,Npe),e(Npe,edr),e(Fn,odr),e(Fn,qpe),e(qpe,rdr),e(Fn,tdr),e(Fn,Ope),e(Ope,adr),e(Fn,ndr),e(To,sdr),e(To,V),e(V,n9),e(n9,Gpe),e(Gpe,ldr),e(n9,idr),e(n9,KO),e(KO,ddr),e(n9,cdr),e(V,fdr),e(V,s9),e(s9,Xpe),e(Xpe,mdr),e(s9,gdr),e(s9,ZO),e(ZO,hdr),e(s9,pdr),e(V,_dr),e(V,l9),e(l9,Vpe),e(Vpe,udr),e(l9,bdr),e(l9,eG),e(eG,vdr),e(l9,Tdr),e(V,Fdr),e(V,i9),e(i9,zpe),e(zpe,Cdr),e(i9,Mdr),e(i9,oG),e(oG,Edr),e(i9,ydr),e(V,wdr),e(V,d9),e(d9,Wpe),e(Wpe,Adr),e(d9,Ldr),e(d9,rG),e(rG,Bdr),e(d9,xdr),e(V,kdr),e(V,c9),e(c9,Qpe),e(Qpe,Rdr),e(c9,Sdr),e(c9,tG),e(tG,Pdr),e(c9,$dr),e(V,Idr),e(V,f9),e(f9,Hpe),e(Hpe,jdr),e(f9,Ddr),e(f9,aG),e(aG,Ndr),e(f9,qdr),e(V,Odr),e(V,m9),e(m9,Upe),e(Upe,Gdr),e(m9,Xdr),e(m9,nG),e(nG,Vdr),e(m9,zdr),e(V,Wdr),e(V,g9),e(g9,Jpe),e(Jpe,Qdr),e(g9,Hdr),e(g9,sG),e(sG,Udr),e(g9,Jdr),e(V,Ydr),e(V,h9),e(h9,Ype),e(Ype,Kdr),e(h9,Zdr),e(h9,lG),e(lG,ecr),e(h9,ocr),e(V,rcr),e(V,p9),e(p9,Kpe),e(Kpe,tcr),e(p9,acr),e(p9,iG),e(iG,ncr),e(p9,scr),e(V,lcr),e(V,_9),e(_9,Zpe),e(Zpe,icr),e(_9,dcr),e(_9,dG),e(dG,ccr),e(_9,fcr),e(V,mcr),e(V,u9),e(u9,e_e),e(e_e,gcr),e(u9,hcr),e(u9,cG),e(cG,pcr),e(u9,_cr),e(V,ucr),e(V,b9),e(b9,o_e),e(o_e,bcr),e(b9,vcr),e(b9,fG),e(fG,Tcr),e(b9,Fcr),e(V,Ccr),e(V,v9),e(v9,r_e),e(r_e,Mcr),e(v9,Ecr),e(v9,mG),e(mG,ycr),e(v9,wcr),e(V,Acr),e(V,T9),e(T9,t_e),e(t_e,Lcr),e(T9,Bcr),e(T9,gG),e(gG,xcr),e(T9,kcr),e(V,Rcr),e(V,F9),e(F9,a_e),e(a_e,Scr),e(F9,Pcr),e(F9,hG),e(hG,$cr),e(F9,Icr),e(V,jcr),e(V,C9),e(C9,n_e),e(n_e,Dcr),e(C9,Ncr),e(C9,pG),e(pG,qcr),e(C9,Ocr),e(V,Gcr),e(V,M9),e(M9,s_e),e(s_e,Xcr),e(M9,Vcr),e(M9,_G),e(_G,zcr),e(M9,Wcr),e(V,Qcr),e(V,E9),e(E9,l_e),e(l_e,Hcr),e(E9,Ucr),e(E9,uG),e(uG,Jcr),e(E9,Ycr),e(V,Kcr),e(V,y9),e(y9,i_e),e(i_e,Zcr),e(y9,efr),e(y9,bG),e(bG,ofr),e(y9,rfr),e(V,tfr),e(V,w9),e(w9,d_e),e(d_e,afr),e(w9,nfr),e(w9,vG),e(vG,sfr),e(w9,lfr),e(V,ifr),e(V,A9),e(A9,c_e),e(c_e,dfr),e(A9,cfr),e(A9,TG),e(TG,ffr),e(A9,mfr),e(V,gfr),e(V,L9),e(L9,f_e),e(f_e,hfr),e(L9,pfr),e(L9,FG),e(FG,_fr),e(L9,ufr),e(V,bfr),e(V,B9),e(B9,m_e),e(m_e,vfr),e(B9,Tfr),e(B9,CG),e(CG,Ffr),e(B9,Cfr),e(To,Mfr),e(To,g_e),e(g_e,Efr),e(To,yfr),g(FA,To,null),b(d,bke,u),b(d,Pc,u),e(Pc,x9),e(x9,h_e),g(CA,h_e,null),e(Pc,wfr),e(Pc,p_e),e(p_e,Afr),b(d,vke,u),b(d,wr,u),g(MA,wr,null),e(wr,Lfr),e(wr,$c),e($c,Bfr),e($c,__e),e(__e,xfr),e($c,kfr),e($c,u_e),e(u_e,Rfr),e($c,Sfr),e(wr,Pfr),e(wr,EA),e(EA,$fr),e(EA,b_e),e(b_e,Ifr),e(EA,jfr),e(wr,Dfr),e(wr,Tt),g(yA,Tt,null),e(Tt,Nfr),e(Tt,v_e),e(v_e,qfr),e(Tt,Ofr),e(Tt,Ic),e(Ic,Gfr),e(Ic,T_e),e(T_e,Xfr),e(Ic,Vfr),e(Ic,F_e),e(F_e,zfr),e(Ic,Wfr),e(Tt,Qfr),e(Tt,C_e),e(C_e,Hfr),e(Tt,Ufr),g(wA,Tt,null),e(wr,Jfr),e(wr,Fo),g(AA,Fo,null),e(Fo,Yfr),e(Fo,M_e),e(M_e,Kfr),e(Fo,Zfr),e(Fo,Cn),e(Cn,emr),e(Cn,E_e),e(E_e,omr),e(Cn,rmr),e(Cn,y_e),e(y_e,tmr),e(Cn,amr),e(Cn,w_e),e(w_e,nmr),e(Cn,smr),e(Fo,lmr),e(Fo,te),e(te,k9),e(k9,A_e),e(A_e,imr),e(k9,dmr),e(k9,MG),e(MG,cmr),e(k9,fmr),e(te,mmr),e(te,R9),e(R9,L_e),e(L_e,gmr),e(R9,hmr),e(R9,EG),e(EG,pmr),e(R9,_mr),e(te,umr),e(te,S9),e(S9,B_e),e(B_e,bmr),e(S9,vmr),e(S9,yG),e(yG,Tmr),e(S9,Fmr),e(te,Cmr),e(te,P9),e(P9,x_e),e(x_e,Mmr),e(P9,Emr),e(P9,wG),e(wG,ymr),e(P9,wmr),e(te,Amr),e(te,$9),e($9,k_e),e(k_e,Lmr),e($9,Bmr),e($9,AG),e(AG,xmr),e($9,kmr),e(te,Rmr),e(te,I9),e(I9,R_e),e(R_e,Smr),e(I9,Pmr),e(I9,LG),e(LG,$mr),e(I9,Imr),e(te,jmr),e(te,j9),e(j9,S_e),e(S_e,Dmr),e(j9,Nmr),e(j9,BG),e(BG,qmr),e(j9,Omr),e(te,Gmr),e(te,D9),e(D9,P_e),e(P_e,Xmr),e(D9,Vmr),e(D9,xG),e(xG,zmr),e(D9,Wmr),e(te,Qmr),e(te,N9),e(N9,$_e),e($_e,Hmr),e(N9,Umr),e(N9,kG),e(kG,Jmr),e(N9,Ymr),e(te,Kmr),e(te,q9),e(q9,I_e),e(I_e,Zmr),e(q9,egr),e(q9,RG),e(RG,ogr),e(q9,rgr),e(te,tgr),e(te,O9),e(O9,j_e),e(j_e,agr),e(O9,ngr),e(O9,SG),e(SG,sgr),e(O9,lgr),e(te,igr),e(te,G9),e(G9,D_e),e(D_e,dgr),e(G9,cgr),e(G9,PG),e(PG,fgr),e(G9,mgr),e(te,ggr),e(te,X9),e(X9,N_e),e(N_e,hgr),e(X9,pgr),e(X9,$G),e($G,_gr),e(X9,ugr),e(te,bgr),e(te,V9),e(V9,q_e),e(q_e,vgr),e(V9,Tgr),e(V9,IG),e(IG,Fgr),e(V9,Cgr),e(te,Mgr),e(te,z9),e(z9,O_e),e(O_e,Egr),e(z9,ygr),e(z9,jG),e(jG,wgr),e(z9,Agr),e(te,Lgr),e(te,W9),e(W9,G_e),e(G_e,Bgr),e(W9,xgr),e(W9,DG),e(DG,kgr),e(W9,Rgr),e(te,Sgr),e(te,Q9),e(Q9,X_e),e(X_e,Pgr),e(Q9,$gr),e(Q9,NG),e(NG,Igr),e(Q9,jgr),e(Fo,Dgr),e(Fo,V_e),e(V_e,Ngr),e(Fo,qgr),g(LA,Fo,null),b(d,Tke,u),b(d,jc,u),e(jc,H9),e(H9,z_e),g(BA,z_e,null),e(jc,Ogr),e(jc,W_e),e(W_e,Ggr),b(d,Fke,u),b(d,Ar,u),g(xA,Ar,null),e(Ar,Xgr),e(Ar,Dc),e(Dc,Vgr),e(Dc,Q_e),e(Q_e,zgr),e(Dc,Wgr),e(Dc,H_e),e(H_e,Qgr),e(Dc,Hgr),e(Ar,Ugr),e(Ar,kA),e(kA,Jgr),e(kA,U_e),e(U_e,Ygr),e(kA,Kgr),e(Ar,Zgr),e(Ar,Ft),g(RA,Ft,null),e(Ft,ehr),e(Ft,J_e),e(J_e,ohr),e(Ft,rhr),e(Ft,Nc),e(Nc,thr),e(Nc,Y_e),e(Y_e,ahr),e(Nc,nhr),e(Nc,K_e),e(K_e,shr),e(Nc,lhr),e(Ft,ihr),e(Ft,Z_e),e(Z_e,dhr),e(Ft,chr),g(SA,Ft,null),e(Ar,fhr),e(Ar,Co),g(PA,Co,null),e(Co,mhr),e(Co,eue),e(eue,ghr),e(Co,hhr),e(Co,Mn),e(Mn,phr),e(Mn,oue),e(oue,_hr),e(Mn,uhr),e(Mn,rue),e(rue,bhr),e(Mn,vhr),e(Mn,tue),e(tue,Thr),e(Mn,Fhr),e(Co,Chr),e(Co,aue),e(aue,U9),e(U9,nue),e(nue,Mhr),e(U9,Ehr),e(U9,qG),e(qG,yhr),e(U9,whr),e(Co,Ahr),e(Co,sue),e(sue,Lhr),e(Co,Bhr),g($A,Co,null),b(d,Cke,u),b(d,qc,u),e(qc,J9),e(J9,lue),g(IA,lue,null),e(qc,xhr),e(qc,iue),e(iue,khr),b(d,Mke,u),b(d,Lr,u),g(jA,Lr,null),e(Lr,Rhr),e(Lr,Oc),e(Oc,Shr),e(Oc,due),e(due,Phr),e(Oc,$hr),e(Oc,cue),e(cue,Ihr),e(Oc,jhr),e(Lr,Dhr),e(Lr,DA),e(DA,Nhr),e(DA,fue),e(fue,qhr),e(DA,Ohr),e(Lr,Ghr),e(Lr,Ct),g(NA,Ct,null),e(Ct,Xhr),e(Ct,mue),e(mue,Vhr),e(Ct,zhr),e(Ct,Gc),e(Gc,Whr),e(Gc,gue),e(gue,Qhr),e(Gc,Hhr),e(Gc,hue),e(hue,Uhr),e(Gc,Jhr),e(Ct,Yhr),e(Ct,pue),e(pue,Khr),e(Ct,Zhr),g(qA,Ct,null),e(Lr,epr),e(Lr,Mo),g(OA,Mo,null),e(Mo,opr),e(Mo,_ue),e(_ue,rpr),e(Mo,tpr),e(Mo,En),e(En,apr),e(En,uue),e(uue,npr),e(En,spr),e(En,bue),e(bue,lpr),e(En,ipr),e(En,vue),e(vue,dpr),e(En,cpr),e(Mo,fpr),e(Mo,K),e(K,Y9),e(Y9,Tue),e(Tue,mpr),e(Y9,gpr),e(Y9,OG),e(OG,hpr),e(Y9,ppr),e(K,_pr),e(K,K9),e(K9,Fue),e(Fue,upr),e(K9,bpr),e(K9,GG),e(GG,vpr),e(K9,Tpr),e(K,Fpr),e(K,Z9),e(Z9,Cue),e(Cue,Cpr),e(Z9,Mpr),e(Z9,XG),e(XG,Epr),e(Z9,ypr),e(K,wpr),e(K,eC),e(eC,Mue),e(Mue,Apr),e(eC,Lpr),e(eC,VG),e(VG,Bpr),e(eC,xpr),e(K,kpr),e(K,oC),e(oC,Eue),e(Eue,Rpr),e(oC,Spr),e(oC,zG),e(zG,Ppr),e(oC,$pr),e(K,Ipr),e(K,rC),e(rC,yue),e(yue,jpr),e(rC,Dpr),e(rC,WG),e(WG,Npr),e(rC,qpr),e(K,Opr),e(K,tC),e(tC,wue),e(wue,Gpr),e(tC,Xpr),e(tC,QG),e(QG,Vpr),e(tC,zpr),e(K,Wpr),e(K,aC),e(aC,Aue),e(Aue,Qpr),e(aC,Hpr),e(aC,HG),e(HG,Upr),e(aC,Jpr),e(K,Ypr),e(K,nC),e(nC,Lue),e(Lue,Kpr),e(nC,Zpr),e(nC,UG),e(UG,e_r),e(nC,o_r),e(K,r_r),e(K,sC),e(sC,Bue),e(Bue,t_r),e(sC,a_r),e(sC,JG),e(JG,n_r),e(sC,s_r),e(K,l_r),e(K,lC),e(lC,xue),e(xue,i_r),e(lC,d_r),e(lC,YG),e(YG,c_r),e(lC,f_r),e(K,m_r),e(K,iC),e(iC,kue),e(kue,g_r),e(iC,h_r),e(iC,KG),e(KG,p_r),e(iC,__r),e(K,u_r),e(K,dC),e(dC,Rue),e(Rue,b_r),e(dC,v_r),e(dC,ZG),e(ZG,T_r),e(dC,F_r),e(K,C_r),e(K,cC),e(cC,Sue),e(Sue,M_r),e(cC,E_r),e(cC,eX),e(eX,y_r),e(cC,w_r),e(K,A_r),e(K,fC),e(fC,Pue),e(Pue,L_r),e(fC,B_r),e(fC,oX),e(oX,x_r),e(fC,k_r),e(K,R_r),e(K,mC),e(mC,$ue),e($ue,S_r),e(mC,P_r),e(mC,rX),e(rX,$_r),e(mC,I_r),e(K,j_r),e(K,gC),e(gC,Iue),e(Iue,D_r),e(gC,N_r),e(gC,tX),e(tX,q_r),e(gC,O_r),e(K,G_r),e(K,hC),e(hC,jue),e(jue,X_r),e(hC,V_r),e(hC,aX),e(aX,z_r),e(hC,W_r),e(K,Q_r),e(K,pC),e(pC,Due),e(Due,H_r),e(pC,U_r),e(pC,nX),e(nX,J_r),e(pC,Y_r),e(K,K_r),e(K,_C),e(_C,Nue),e(Nue,Z_r),e(_C,eur),e(_C,sX),e(sX,our),e(_C,rur),e(Mo,tur),e(Mo,que),e(que,aur),e(Mo,nur),g(GA,Mo,null),b(d,Eke,u),b(d,Xc,u),e(Xc,uC),e(uC,Oue),g(XA,Oue,null),e(Xc,sur),e(Xc,Gue),e(Gue,lur),b(d,yke,u),b(d,Br,u),g(VA,Br,null),e(Br,iur),e(Br,Vc),e(Vc,dur),e(Vc,Xue),e(Xue,cur),e(Vc,fur),e(Vc,Vue),e(Vue,mur),e(Vc,gur),e(Br,hur),e(Br,zA),e(zA,pur),e(zA,zue),e(zue,_ur),e(zA,uur),e(Br,bur),e(Br,Mt),g(WA,Mt,null),e(Mt,vur),e(Mt,Wue),e(Wue,Tur),e(Mt,Fur),e(Mt,zc),e(zc,Cur),e(zc,Que),e(Que,Mur),e(zc,Eur),e(zc,Hue),e(Hue,yur),e(zc,wur),e(Mt,Aur),e(Mt,Uue),e(Uue,Lur),e(Mt,Bur),g(QA,Mt,null),e(Br,xur),e(Br,Eo),g(HA,Eo,null),e(Eo,kur),e(Eo,Jue),e(Jue,Rur),e(Eo,Sur),e(Eo,yn),e(yn,Pur),e(yn,Yue),e(Yue,$ur),e(yn,Iur),e(yn,Kue),e(Kue,jur),e(yn,Dur),e(yn,Zue),e(Zue,Nur),e(yn,qur),e(Eo,Our),e(Eo,Z),e(Z,bC),e(bC,e5e),e(e5e,Gur),e(bC,Xur),e(bC,lX),e(lX,Vur),e(bC,zur),e(Z,Wur),e(Z,vC),e(vC,o5e),e(o5e,Qur),e(vC,Hur),e(vC,iX),e(iX,Uur),e(vC,Jur),e(Z,Yur),e(Z,TC),e(TC,r5e),e(r5e,Kur),e(TC,Zur),e(TC,dX),e(dX,e5r),e(TC,o5r),e(Z,r5r),e(Z,FC),e(FC,t5e),e(t5e,t5r),e(FC,a5r),e(FC,cX),e(cX,n5r),e(FC,s5r),e(Z,l5r),e(Z,CC),e(CC,a5e),e(a5e,i5r),e(CC,d5r),e(CC,fX),e(fX,c5r),e(CC,f5r),e(Z,m5r),e(Z,MC),e(MC,n5e),e(n5e,g5r),e(MC,h5r),e(MC,mX),e(mX,p5r),e(MC,_5r),e(Z,u5r),e(Z,EC),e(EC,s5e),e(s5e,b5r),e(EC,v5r),e(EC,gX),e(gX,T5r),e(EC,F5r),e(Z,C5r),e(Z,yC),e(yC,l5e),e(l5e,M5r),e(yC,E5r),e(yC,hX),e(hX,y5r),e(yC,w5r),e(Z,A5r),e(Z,wC),e(wC,i5e),e(i5e,L5r),e(wC,B5r),e(wC,pX),e(pX,x5r),e(wC,k5r),e(Z,R5r),e(Z,AC),e(AC,d5e),e(d5e,S5r),e(AC,P5r),e(AC,_X),e(_X,$5r),e(AC,I5r),e(Z,j5r),e(Z,LC),e(LC,c5e),e(c5e,D5r),e(LC,N5r),e(LC,uX),e(uX,q5r),e(LC,O5r),e(Z,G5r),e(Z,BC),e(BC,f5e),e(f5e,X5r),e(BC,V5r),e(BC,bX),e(bX,z5r),e(BC,W5r),e(Z,Q5r),e(Z,xC),e(xC,m5e),e(m5e,H5r),e(xC,U5r),e(xC,vX),e(vX,J5r),e(xC,Y5r),e(Z,K5r),e(Z,kC),e(kC,g5e),e(g5e,Z5r),e(kC,e2r),e(kC,TX),e(TX,o2r),e(kC,r2r),e(Z,t2r),e(Z,RC),e(RC,h5e),e(h5e,a2r),e(RC,n2r),e(RC,FX),e(FX,s2r),e(RC,l2r),e(Z,i2r),e(Z,SC),e(SC,p5e),e(p5e,d2r),e(SC,c2r),e(SC,CX),e(CX,f2r),e(SC,m2r),e(Z,g2r),e(Z,PC),e(PC,_5e),e(_5e,h2r),e(PC,p2r),e(PC,MX),e(MX,_2r),e(PC,u2r),e(Z,b2r),e(Z,$C),e($C,u5e),e(u5e,v2r),e($C,T2r),e($C,EX),e(EX,F2r),e($C,C2r),e(Z,M2r),e(Z,IC),e(IC,b5e),e(b5e,E2r),e(IC,y2r),e(IC,yX),e(yX,w2r),e(IC,A2r),e(Eo,L2r),e(Eo,v5e),e(v5e,B2r),e(Eo,x2r),g(UA,Eo,null),b(d,wke,u),b(d,Wc,u),e(Wc,jC),e(jC,T5e),g(JA,T5e,null),e(Wc,k2r),e(Wc,F5e),e(F5e,R2r),b(d,Ake,u),b(d,xr,u),g(YA,xr,null),e(xr,S2r),e(xr,Qc),e(Qc,P2r),e(Qc,C5e),e(C5e,$2r),e(Qc,I2r),e(Qc,M5e),e(M5e,j2r),e(Qc,D2r),e(xr,N2r),e(xr,KA),e(KA,q2r),e(KA,E5e),e(E5e,O2r),e(KA,G2r),e(xr,X2r),e(xr,Et),g(ZA,Et,null),e(Et,V2r),e(Et,y5e),e(y5e,z2r),e(Et,W2r),e(Et,Hc),e(Hc,Q2r),e(Hc,w5e),e(w5e,H2r),e(Hc,U2r),e(Hc,A5e),e(A5e,J2r),e(Hc,Y2r),e(Et,K2r),e(Et,L5e),e(L5e,Z2r),e(Et,e1r),g(e0,Et,null),e(xr,o1r),e(xr,yo),g(o0,yo,null),e(yo,r1r),e(yo,B5e),e(B5e,t1r),e(yo,a1r),e(yo,wn),e(wn,n1r),e(wn,x5e),e(x5e,s1r),e(wn,l1r),e(wn,k5e),e(k5e,i1r),e(wn,d1r),e(wn,R5e),e(R5e,c1r),e(wn,f1r),e(yo,m1r),e(yo,S5e),e(S5e,DC),e(DC,P5e),e(P5e,g1r),e(DC,h1r),e(DC,wX),e(wX,p1r),e(DC,_1r),e(yo,u1r),e(yo,$5e),e($5e,b1r),e(yo,v1r),g(r0,yo,null),b(d,Lke,u),b(d,Uc,u),e(Uc,NC),e(NC,I5e),g(t0,I5e,null),e(Uc,T1r),e(Uc,j5e),e(j5e,F1r),b(d,Bke,u),b(d,kr,u),g(a0,kr,null),e(kr,C1r),e(kr,Jc),e(Jc,M1r),e(Jc,D5e),e(D5e,E1r),e(Jc,y1r),e(Jc,N5e),e(N5e,w1r),e(Jc,A1r),e(kr,L1r),e(kr,n0),e(n0,B1r),e(n0,q5e),e(q5e,x1r),e(n0,k1r),e(kr,R1r),e(kr,yt),g(s0,yt,null),e(yt,S1r),e(yt,O5e),e(O5e,P1r),e(yt,$1r),e(yt,Yc),e(Yc,I1r),e(Yc,G5e),e(G5e,j1r),e(Yc,D1r),e(Yc,X5e),e(X5e,N1r),e(Yc,q1r),e(yt,O1r),e(yt,V5e),e(V5e,G1r),e(yt,X1r),g(l0,yt,null),e(kr,V1r),e(kr,wo),g(i0,wo,null),e(wo,z1r),e(wo,z5e),e(z5e,W1r),e(wo,Q1r),e(wo,An),e(An,H1r),e(An,W5e),e(W5e,U1r),e(An,J1r),e(An,Q5e),e(Q5e,Y1r),e(An,K1r),e(An,H5e),e(H5e,Z1r),e(An,ebr),e(wo,obr),e(wo,U5e),e(U5e,qC),e(qC,J5e),e(J5e,rbr),e(qC,tbr),e(qC,AX),e(AX,abr),e(qC,nbr),e(wo,sbr),e(wo,Y5e),e(Y5e,lbr),e(wo,ibr),g(d0,wo,null),b(d,xke,u),b(d,Kc,u),e(Kc,OC),e(OC,K5e),g(c0,K5e,null),e(Kc,dbr),e(Kc,Z5e),e(Z5e,cbr),b(d,kke,u),b(d,Rr,u),g(f0,Rr,null),e(Rr,fbr),e(Rr,Zc),e(Zc,mbr),e(Zc,e2e),e(e2e,gbr),e(Zc,hbr),e(Zc,o2e),e(o2e,pbr),e(Zc,_br),e(Rr,ubr),e(Rr,m0),e(m0,bbr),e(m0,r2e),e(r2e,vbr),e(m0,Tbr),e(Rr,Fbr),e(Rr,wt),g(g0,wt,null),e(wt,Cbr),e(wt,t2e),e(t2e,Mbr),e(wt,Ebr),e(wt,ef),e(ef,ybr),e(ef,a2e),e(a2e,wbr),e(ef,Abr),e(ef,n2e),e(n2e,Lbr),e(ef,Bbr),e(wt,xbr),e(wt,s2e),e(s2e,kbr),e(wt,Rbr),g(h0,wt,null),e(Rr,Sbr),e(Rr,Ao),g(p0,Ao,null),e(Ao,Pbr),e(Ao,l2e),e(l2e,$br),e(Ao,Ibr),e(Ao,Ln),e(Ln,jbr),e(Ln,i2e),e(i2e,Dbr),e(Ln,Nbr),e(Ln,d2e),e(d2e,qbr),e(Ln,Obr),e(Ln,c2e),e(c2e,Gbr),e(Ln,Xbr),e(Ao,Vbr),e(Ao,z),e(z,GC),e(GC,f2e),e(f2e,zbr),e(GC,Wbr),e(GC,LX),e(LX,Qbr),e(GC,Hbr),e(z,Ubr),e(z,XC),e(XC,m2e),e(m2e,Jbr),e(XC,Ybr),e(XC,BX),e(BX,Kbr),e(XC,Zbr),e(z,evr),e(z,VC),e(VC,g2e),e(g2e,ovr),e(VC,rvr),e(VC,xX),e(xX,tvr),e(VC,avr),e(z,nvr),e(z,zC),e(zC,h2e),e(h2e,svr),e(zC,lvr),e(zC,kX),e(kX,ivr),e(zC,dvr),e(z,cvr),e(z,WC),e(WC,p2e),e(p2e,fvr),e(WC,mvr),e(WC,RX),e(RX,gvr),e(WC,hvr),e(z,pvr),e(z,QC),e(QC,_2e),e(_2e,_vr),e(QC,uvr),e(QC,SX),e(SX,bvr),e(QC,vvr),e(z,Tvr),e(z,HC),e(HC,u2e),e(u2e,Fvr),e(HC,Cvr),e(HC,PX),e(PX,Mvr),e(HC,Evr),e(z,yvr),e(z,UC),e(UC,b2e),e(b2e,wvr),e(UC,Avr),e(UC,$X),e($X,Lvr),e(UC,Bvr),e(z,xvr),e(z,JC),e(JC,v2e),e(v2e,kvr),e(JC,Rvr),e(JC,IX),e(IX,Svr),e(JC,Pvr),e(z,$vr),e(z,YC),e(YC,T2e),e(T2e,Ivr),e(YC,jvr),e(YC,jX),e(jX,Dvr),e(YC,Nvr),e(z,qvr),e(z,KC),e(KC,F2e),e(F2e,Ovr),e(KC,Gvr),e(KC,DX),e(DX,Xvr),e(KC,Vvr),e(z,zvr),e(z,ZC),e(ZC,C2e),e(C2e,Wvr),e(ZC,Qvr),e(ZC,NX),e(NX,Hvr),e(ZC,Uvr),e(z,Jvr),e(z,eM),e(eM,M2e),e(M2e,Yvr),e(eM,Kvr),e(eM,qX),e(qX,Zvr),e(eM,eTr),e(z,oTr),e(z,oM),e(oM,E2e),e(E2e,rTr),e(oM,tTr),e(oM,OX),e(OX,aTr),e(oM,nTr),e(z,sTr),e(z,rM),e(rM,y2e),e(y2e,lTr),e(rM,iTr),e(rM,GX),e(GX,dTr),e(rM,cTr),e(z,fTr),e(z,tM),e(tM,w2e),e(w2e,mTr),e(tM,gTr),e(tM,XX),e(XX,hTr),e(tM,pTr),e(z,_Tr),e(z,aM),e(aM,A2e),e(A2e,uTr),e(aM,bTr),e(aM,VX),e(VX,vTr),e(aM,TTr),e(z,FTr),e(z,nM),e(nM,L2e),e(L2e,CTr),e(nM,MTr),e(nM,zX),e(zX,ETr),e(nM,yTr),e(z,wTr),e(z,sM),e(sM,B2e),e(B2e,ATr),e(sM,LTr),e(sM,WX),e(WX,BTr),e(sM,xTr),e(z,kTr),e(z,lM),e(lM,x2e),e(x2e,RTr),e(lM,STr),e(lM,QX),e(QX,PTr),e(lM,$Tr),e(z,ITr),e(z,iM),e(iM,k2e),e(k2e,jTr),e(iM,DTr),e(iM,HX),e(HX,NTr),e(iM,qTr),e(z,OTr),e(z,dM),e(dM,R2e),e(R2e,GTr),e(dM,XTr),e(dM,UX),e(UX,VTr),e(dM,zTr),e(z,WTr),e(z,cM),e(cM,S2e),e(S2e,QTr),e(cM,HTr),e(cM,JX),e(JX,UTr),e(cM,JTr),e(z,YTr),e(z,fM),e(fM,P2e),e(P2e,KTr),e(fM,ZTr),e(fM,YX),e(YX,eFr),e(fM,oFr),e(z,rFr),e(z,mM),e(mM,$2e),e($2e,tFr),e(mM,aFr),e(mM,KX),e(KX,nFr),e(mM,sFr),e(Ao,lFr),e(Ao,I2e),e(I2e,iFr),e(Ao,dFr),g(_0,Ao,null),b(d,Rke,u),b(d,of,u),e(of,gM),e(gM,j2e),g(u0,j2e,null),e(of,cFr),e(of,D2e),e(D2e,fFr),b(d,Ske,u),b(d,Sr,u),g(b0,Sr,null),e(Sr,mFr),e(Sr,rf),e(rf,gFr),e(rf,N2e),e(N2e,hFr),e(rf,pFr),e(rf,q2e),e(q2e,_Fr),e(rf,uFr),e(Sr,bFr),e(Sr,v0),e(v0,vFr),e(v0,O2e),e(O2e,TFr),e(v0,FFr),e(Sr,CFr),e(Sr,At),g(T0,At,null),e(At,MFr),e(At,G2e),e(G2e,EFr),e(At,yFr),e(At,tf),e(tf,wFr),e(tf,X2e),e(X2e,AFr),e(tf,LFr),e(tf,V2e),e(V2e,BFr),e(tf,xFr),e(At,kFr),e(At,z2e),e(z2e,RFr),e(At,SFr),g(F0,At,null),e(Sr,PFr),e(Sr,Lo),g(C0,Lo,null),e(Lo,$Fr),e(Lo,W2e),e(W2e,IFr),e(Lo,jFr),e(Lo,Bn),e(Bn,DFr),e(Bn,Q2e),e(Q2e,NFr),e(Bn,qFr),e(Bn,H2e),e(H2e,OFr),e(Bn,GFr),e(Bn,U2e),e(U2e,XFr),e(Bn,VFr),e(Lo,zFr),e(Lo,xn),e(xn,hM),e(hM,J2e),e(J2e,WFr),e(hM,QFr),e(hM,ZX),e(ZX,HFr),e(hM,UFr),e(xn,JFr),e(xn,pM),e(pM,Y2e),e(Y2e,YFr),e(pM,KFr),e(pM,eV),e(eV,ZFr),e(pM,e9r),e(xn,o9r),e(xn,_M),e(_M,K2e),e(K2e,r9r),e(_M,t9r),e(_M,oV),e(oV,a9r),e(_M,n9r),e(xn,s9r),e(xn,uM),e(uM,Z2e),e(Z2e,l9r),e(uM,i9r),e(uM,rV),e(rV,d9r),e(uM,c9r),e(Lo,f9r),e(Lo,e1e),e(e1e,m9r),e(Lo,g9r),g(M0,Lo,null),b(d,Pke,u),b(d,af,u),e(af,bM),e(bM,o1e),g(E0,o1e,null),e(af,h9r),e(af,r1e),e(r1e,p9r),b(d,$ke,u),b(d,Pr,u),g(y0,Pr,null),e(Pr,_9r),e(Pr,nf),e(nf,u9r),e(nf,t1e),e(t1e,b9r),e(nf,v9r),e(nf,a1e),e(a1e,T9r),e(nf,F9r),e(Pr,C9r),e(Pr,w0),e(w0,M9r),e(w0,n1e),e(n1e,E9r),e(w0,y9r),e(Pr,w9r),e(Pr,Lt),g(A0,Lt,null),e(Lt,A9r),e(Lt,s1e),e(s1e,L9r),e(Lt,B9r),e(Lt,sf),e(sf,x9r),e(sf,l1e),e(l1e,k9r),e(sf,R9r),e(sf,i1e),e(i1e,S9r),e(sf,P9r),e(Lt,$9r),e(Lt,d1e),e(d1e,I9r),e(Lt,j9r),g(L0,Lt,null),e(Pr,D9r),e(Pr,Bo),g(B0,Bo,null),e(Bo,N9r),e(Bo,c1e),e(c1e,q9r),e(Bo,O9r),e(Bo,kn),e(kn,G9r),e(kn,f1e),e(f1e,X9r),e(kn,V9r),e(kn,m1e),e(m1e,z9r),e(kn,W9r),e(kn,g1e),e(g1e,Q9r),e(kn,H9r),e(Bo,U9r),e(Bo,ce),e(ce,vM),e(vM,h1e),e(h1e,J9r),e(vM,Y9r),e(vM,tV),e(tV,K9r),e(vM,Z9r),e(ce,eCr),e(ce,TM),e(TM,p1e),e(p1e,oCr),e(TM,rCr),e(TM,aV),e(aV,tCr),e(TM,aCr),e(ce,nCr),e(ce,FM),e(FM,_1e),e(_1e,sCr),e(FM,lCr),e(FM,nV),e(nV,iCr),e(FM,dCr),e(ce,cCr),e(ce,CM),e(CM,u1e),e(u1e,fCr),e(CM,mCr),e(CM,sV),e(sV,gCr),e(CM,hCr),e(ce,pCr),e(ce,MM),e(MM,b1e),e(b1e,_Cr),e(MM,uCr),e(MM,lV),e(lV,bCr),e(MM,vCr),e(ce,TCr),e(ce,EM),e(EM,v1e),e(v1e,FCr),e(EM,CCr),e(EM,iV),e(iV,MCr),e(EM,ECr),e(ce,yCr),e(ce,yM),e(yM,T1e),e(T1e,wCr),e(yM,ACr),e(yM,dV),e(dV,LCr),e(yM,BCr),e(ce,xCr),e(ce,wM),e(wM,F1e),e(F1e,kCr),e(wM,RCr),e(wM,cV),e(cV,SCr),e(wM,PCr),e(ce,$Cr),e(ce,AM),e(AM,C1e),e(C1e,ICr),e(AM,jCr),e(AM,fV),e(fV,DCr),e(AM,NCr),e(ce,qCr),e(ce,LM),e(LM,M1e),e(M1e,OCr),e(LM,GCr),e(LM,mV),e(mV,XCr),e(LM,VCr),e(ce,zCr),e(ce,BM),e(BM,E1e),e(E1e,WCr),e(BM,QCr),e(BM,gV),e(gV,HCr),e(BM,UCr),e(ce,JCr),e(ce,xM),e(xM,y1e),e(y1e,YCr),e(xM,KCr),e(xM,hV),e(hV,ZCr),e(xM,eMr),e(Bo,oMr),e(Bo,w1e),e(w1e,rMr),e(Bo,tMr),g(x0,Bo,null),b(d,Ike,u),b(d,lf,u),e(lf,kM),e(kM,A1e),g(k0,A1e,null),e(lf,aMr),e(lf,L1e),e(L1e,nMr),b(d,jke,u),b(d,$r,u),g(R0,$r,null),e($r,sMr),e($r,df),e(df,lMr),e(df,B1e),e(B1e,iMr),e(df,dMr),e(df,x1e),e(x1e,cMr),e(df,fMr),e($r,mMr),e($r,S0),e(S0,gMr),e(S0,k1e),e(k1e,hMr),e(S0,pMr),e($r,_Mr),e($r,Bt),g(P0,Bt,null),e(Bt,uMr),e(Bt,R1e),e(R1e,bMr),e(Bt,vMr),e(Bt,cf),e(cf,TMr),e(cf,S1e),e(S1e,FMr),e(cf,CMr),e(cf,P1e),e(P1e,MMr),e(cf,EMr),e(Bt,yMr),e(Bt,$1e),e($1e,wMr),e(Bt,AMr),g($0,Bt,null),e($r,LMr),e($r,xo),g(I0,xo,null),e(xo,BMr),e(xo,I1e),e(I1e,xMr),e(xo,kMr),e(xo,Rn),e(Rn,RMr),e(Rn,j1e),e(j1e,SMr),e(Rn,PMr),e(Rn,D1e),e(D1e,$Mr),e(Rn,IMr),e(Rn,N1e),e(N1e,jMr),e(Rn,DMr),e(xo,NMr),e(xo,ue),e(ue,RM),e(RM,q1e),e(q1e,qMr),e(RM,OMr),e(RM,pV),e(pV,GMr),e(RM,XMr),e(ue,VMr),e(ue,SM),e(SM,O1e),e(O1e,zMr),e(SM,WMr),e(SM,_V),e(_V,QMr),e(SM,HMr),e(ue,UMr),e(ue,PM),e(PM,G1e),e(G1e,JMr),e(PM,YMr),e(PM,uV),e(uV,KMr),e(PM,ZMr),e(ue,e4r),e(ue,$M),e($M,X1e),e(X1e,o4r),e($M,r4r),e($M,bV),e(bV,t4r),e($M,a4r),e(ue,n4r),e(ue,IM),e(IM,V1e),e(V1e,s4r),e(IM,l4r),e(IM,vV),e(vV,i4r),e(IM,d4r),e(ue,c4r),e(ue,jM),e(jM,z1e),e(z1e,f4r),e(jM,m4r),e(jM,TV),e(TV,g4r),e(jM,h4r),e(ue,p4r),e(ue,DM),e(DM,W1e),e(W1e,_4r),e(DM,u4r),e(DM,FV),e(FV,b4r),e(DM,v4r),e(ue,T4r),e(ue,NM),e(NM,Q1e),e(Q1e,F4r),e(NM,C4r),e(NM,CV),e(CV,M4r),e(NM,E4r),e(ue,y4r),e(ue,qM),e(qM,H1e),e(H1e,w4r),e(qM,A4r),e(qM,MV),e(MV,L4r),e(qM,B4r),e(ue,x4r),e(ue,OM),e(OM,U1e),e(U1e,k4r),e(OM,R4r),e(OM,EV),e(EV,S4r),e(OM,P4r),e(xo,$4r),e(xo,J1e),e(J1e,I4r),e(xo,j4r),g(j0,xo,null),b(d,Dke,u),b(d,ff,u),e(ff,GM),e(GM,Y1e),g(D0,Y1e,null),e(ff,D4r),e(ff,K1e),e(K1e,N4r),b(d,Nke,u),b(d,Ir,u),g(N0,Ir,null),e(Ir,q4r),e(Ir,mf),e(mf,O4r),e(mf,Z1e),e(Z1e,G4r),e(mf,X4r),e(mf,ebe),e(ebe,V4r),e(mf,z4r),e(Ir,W4r),e(Ir,q0),e(q0,Q4r),e(q0,obe),e(obe,H4r),e(q0,U4r),e(Ir,J4r),e(Ir,xt),g(O0,xt,null),e(xt,Y4r),e(xt,rbe),e(rbe,K4r),e(xt,Z4r),e(xt,gf),e(gf,eEr),e(gf,tbe),e(tbe,oEr),e(gf,rEr),e(gf,abe),e(abe,tEr),e(gf,aEr),e(xt,nEr),e(xt,nbe),e(nbe,sEr),e(xt,lEr),g(G0,xt,null),e(Ir,iEr),e(Ir,ko),g(X0,ko,null),e(ko,dEr),e(ko,sbe),e(sbe,cEr),e(ko,fEr),e(ko,Sn),e(Sn,mEr),e(Sn,lbe),e(lbe,gEr),e(Sn,hEr),e(Sn,ibe),e(ibe,pEr),e(Sn,_Er),e(Sn,dbe),e(dbe,uEr),e(Sn,bEr),e(ko,vEr),e(ko,Ce),e(Ce,XM),e(XM,cbe),e(cbe,TEr),e(XM,FEr),e(XM,yV),e(yV,CEr),e(XM,MEr),e(Ce,EEr),e(Ce,VM),e(VM,fbe),e(fbe,yEr),e(VM,wEr),e(VM,wV),e(wV,AEr),e(VM,LEr),e(Ce,BEr),e(Ce,zM),e(zM,mbe),e(mbe,xEr),e(zM,kEr),e(zM,AV),e(AV,REr),e(zM,SEr),e(Ce,PEr),e(Ce,WM),e(WM,gbe),e(gbe,$Er),e(WM,IEr),e(WM,LV),e(LV,jEr),e(WM,DEr),e(Ce,NEr),e(Ce,QM),e(QM,hbe),e(hbe,qEr),e(QM,OEr),e(QM,BV),e(BV,GEr),e(QM,XEr),e(Ce,VEr),e(Ce,HM),e(HM,pbe),e(pbe,zEr),e(HM,WEr),e(HM,xV),e(xV,QEr),e(HM,HEr),e(Ce,UEr),e(Ce,UM),e(UM,_be),e(_be,JEr),e(UM,YEr),e(UM,kV),e(kV,KEr),e(UM,ZEr),e(Ce,e3r),e(Ce,JM),e(JM,ube),e(ube,o3r),e(JM,r3r),e(JM,RV),e(RV,t3r),e(JM,a3r),e(Ce,n3r),e(Ce,YM),e(YM,bbe),e(bbe,s3r),e(YM,l3r),e(YM,SV),e(SV,i3r),e(YM,d3r),e(ko,c3r),e(ko,vbe),e(vbe,f3r),e(ko,m3r),g(V0,ko,null),b(d,qke,u),b(d,hf,u),e(hf,KM),e(KM,Tbe),g(z0,Tbe,null),e(hf,g3r),e(hf,Fbe),e(Fbe,h3r),b(d,Oke,u),b(d,jr,u),g(W0,jr,null),e(jr,p3r),e(jr,pf),e(pf,_3r),e(pf,Cbe),e(Cbe,u3r),e(pf,b3r),e(pf,Mbe),e(Mbe,v3r),e(pf,T3r),e(jr,F3r),e(jr,Q0),e(Q0,C3r),e(Q0,Ebe),e(Ebe,M3r),e(Q0,E3r),e(jr,y3r),e(jr,kt),g(H0,kt,null),e(kt,w3r),e(kt,ybe),e(ybe,A3r),e(kt,L3r),e(kt,_f),e(_f,B3r),e(_f,wbe),e(wbe,x3r),e(_f,k3r),e(_f,Abe),e(Abe,R3r),e(_f,S3r),e(kt,P3r),e(kt,Lbe),e(Lbe,$3r),e(kt,I3r),g(U0,kt,null),e(jr,j3r),e(jr,Ro),g(J0,Ro,null),e(Ro,D3r),e(Ro,Bbe),e(Bbe,N3r),e(Ro,q3r),e(Ro,Pn),e(Pn,O3r),e(Pn,xbe),e(xbe,G3r),e(Pn,X3r),e(Pn,kbe),e(kbe,V3r),e(Pn,z3r),e(Pn,Rbe),e(Rbe,W3r),e(Pn,Q3r),e(Ro,H3r),e(Ro,be),e(be,ZM),e(ZM,Sbe),e(Sbe,U3r),e(ZM,J3r),e(ZM,PV),e(PV,Y3r),e(ZM,K3r),e(be,Z3r),e(be,e4),e(e4,Pbe),e(Pbe,eyr),e(e4,oyr),e(e4,$V),e($V,ryr),e(e4,tyr),e(be,ayr),e(be,o4),e(o4,$be),e($be,nyr),e(o4,syr),e(o4,IV),e(IV,lyr),e(o4,iyr),e(be,dyr),e(be,r4),e(r4,Ibe),e(Ibe,cyr),e(r4,fyr),e(r4,jV),e(jV,myr),e(r4,gyr),e(be,hyr),e(be,t4),e(t4,jbe),e(jbe,pyr),e(t4,_yr),e(t4,DV),e(DV,uyr),e(t4,byr),e(be,vyr),e(be,a4),e(a4,Dbe),e(Dbe,Tyr),e(a4,Fyr),e(a4,NV),e(NV,Cyr),e(a4,Myr),e(be,Eyr),e(be,n4),e(n4,Nbe),e(Nbe,yyr),e(n4,wyr),e(n4,qV),e(qV,Ayr),e(n4,Lyr),e(be,Byr),e(be,s4),e(s4,qbe),e(qbe,xyr),e(s4,kyr),e(s4,OV),e(OV,Ryr),e(s4,Syr),e(be,Pyr),e(be,l4),e(l4,Obe),e(Obe,$yr),e(l4,Iyr),e(l4,GV),e(GV,jyr),e(l4,Dyr),e(be,Nyr),e(be,i4),e(i4,Gbe),e(Gbe,qyr),e(i4,Oyr),e(i4,XV),e(XV,Gyr),e(i4,Xyr),e(Ro,Vyr),e(Ro,Xbe),e(Xbe,zyr),e(Ro,Wyr),g(Y0,Ro,null),b(d,Gke,u),b(d,uf,u),e(uf,d4),e(d4,Vbe),g(K0,Vbe,null),e(uf,Qyr),e(uf,zbe),e(zbe,Hyr),b(d,Xke,u),b(d,Dr,u),g(Z0,Dr,null),e(Dr,Uyr),e(Dr,bf),e(bf,Jyr),e(bf,Wbe),e(Wbe,Yyr),e(bf,Kyr),e(bf,Qbe),e(Qbe,Zyr),e(bf,ewr),e(Dr,owr),e(Dr,eL),e(eL,rwr),e(eL,Hbe),e(Hbe,twr),e(eL,awr),e(Dr,nwr),e(Dr,Rt),g(oL,Rt,null),e(Rt,swr),e(Rt,Ube),e(Ube,lwr),e(Rt,iwr),e(Rt,vf),e(vf,dwr),e(vf,Jbe),e(Jbe,cwr),e(vf,fwr),e(vf,Ybe),e(Ybe,mwr),e(vf,gwr),e(Rt,hwr),e(Rt,Kbe),e(Kbe,pwr),e(Rt,_wr),g(rL,Rt,null),e(Dr,uwr),e(Dr,So),g(tL,So,null),e(So,bwr),e(So,Zbe),e(Zbe,vwr),e(So,Twr),e(So,$n),e($n,Fwr),e($n,eve),e(eve,Cwr),e($n,Mwr),e($n,ove),e(ove,Ewr),e($n,ywr),e($n,rve),e(rve,wwr),e($n,Awr),e(So,Lwr),e(So,ve),e(ve,c4),e(c4,tve),e(tve,Bwr),e(c4,xwr),e(c4,VV),e(VV,kwr),e(c4,Rwr),e(ve,Swr),e(ve,f4),e(f4,ave),e(ave,Pwr),e(f4,$wr),e(f4,zV),e(zV,Iwr),e(f4,jwr),e(ve,Dwr),e(ve,m4),e(m4,nve),e(nve,Nwr),e(m4,qwr),e(m4,WV),e(WV,Owr),e(m4,Gwr),e(ve,Xwr),e(ve,g4),e(g4,sve),e(sve,Vwr),e(g4,zwr),e(g4,QV),e(QV,Wwr),e(g4,Qwr),e(ve,Hwr),e(ve,h4),e(h4,lve),e(lve,Uwr),e(h4,Jwr),e(h4,HV),e(HV,Ywr),e(h4,Kwr),e(ve,Zwr),e(ve,p4),e(p4,ive),e(ive,e6r),e(p4,o6r),e(p4,UV),e(UV,r6r),e(p4,t6r),e(ve,a6r),e(ve,_4),e(_4,dve),e(dve,n6r),e(_4,s6r),e(_4,JV),e(JV,l6r),e(_4,i6r),e(ve,d6r),e(ve,u4),e(u4,cve),e(cve,c6r),e(u4,f6r),e(u4,YV),e(YV,m6r),e(u4,g6r),e(ve,h6r),e(ve,b4),e(b4,fve),e(fve,p6r),e(b4,_6r),e(b4,KV),e(KV,u6r),e(b4,b6r),e(ve,v6r),e(ve,v4),e(v4,mve),e(mve,T6r),e(v4,F6r),e(v4,ZV),e(ZV,C6r),e(v4,M6r),e(So,E6r),e(So,gve),e(gve,y6r),e(So,w6r),g(aL,So,null),b(d,Vke,u),b(d,Tf,u),e(Tf,T4),e(T4,hve),g(nL,hve,null),e(Tf,A6r),e(Tf,pve),e(pve,L6r),b(d,zke,u),b(d,Nr,u),g(sL,Nr,null),e(Nr,B6r),e(Nr,Ff),e(Ff,x6r),e(Ff,_ve),e(_ve,k6r),e(Ff,R6r),e(Ff,uve),e(uve,S6r),e(Ff,P6r),e(Nr,$6r),e(Nr,lL),e(lL,I6r),e(lL,bve),e(bve,j6r),e(lL,D6r),e(Nr,N6r),e(Nr,St),g(iL,St,null),e(St,q6r),e(St,vve),e(vve,O6r),e(St,G6r),e(St,Cf),e(Cf,X6r),e(Cf,Tve),e(Tve,V6r),e(Cf,z6r),e(Cf,Fve),e(Fve,W6r),e(Cf,Q6r),e(St,H6r),e(St,Cve),e(Cve,U6r),e(St,J6r),g(dL,St,null),e(Nr,Y6r),e(Nr,Po),g(cL,Po,null),e(Po,K6r),e(Po,Mve),e(Mve,Z6r),e(Po,eAr),e(Po,In),e(In,oAr),e(In,Eve),e(Eve,rAr),e(In,tAr),e(In,yve),e(yve,aAr),e(In,nAr),e(In,wve),e(wve,sAr),e(In,lAr),e(Po,iAr),e(Po,Re),e(Re,F4),e(F4,Ave),e(Ave,dAr),e(F4,cAr),e(F4,ez),e(ez,fAr),e(F4,mAr),e(Re,gAr),e(Re,C4),e(C4,Lve),e(Lve,hAr),e(C4,pAr),e(C4,oz),e(oz,_Ar),e(C4,uAr),e(Re,bAr),e(Re,M4),e(M4,Bve),e(Bve,vAr),e(M4,TAr),e(M4,rz),e(rz,FAr),e(M4,CAr),e(Re,MAr),e(Re,E4),e(E4,xve),e(xve,EAr),e(E4,yAr),e(E4,tz),e(tz,wAr),e(E4,AAr),e(Re,LAr),e(Re,y4),e(y4,kve),e(kve,BAr),e(y4,xAr),e(y4,az),e(az,kAr),e(y4,RAr),e(Re,SAr),e(Re,w4),e(w4,Rve),e(Rve,PAr),e(w4,$Ar),e(w4,nz),e(nz,IAr),e(w4,jAr),e(Re,DAr),e(Re,A4),e(A4,Sve),e(Sve,NAr),e(A4,qAr),e(A4,sz),e(sz,OAr),e(A4,GAr),e(Re,XAr),e(Re,L4),e(L4,Pve),e(Pve,VAr),e(L4,zAr),e(L4,lz),e(lz,WAr),e(L4,QAr),e(Po,HAr),e(Po,$ve),e($ve,UAr),e(Po,JAr),g(fL,Po,null),b(d,Wke,u),b(d,Mf,u),e(Mf,B4),e(B4,Ive),g(mL,Ive,null),e(Mf,YAr),e(Mf,jve),e(jve,KAr),b(d,Qke,u),b(d,qr,u),g(gL,qr,null),e(qr,ZAr),e(qr,Ef),e(Ef,e0r),e(Ef,Dve),e(Dve,o0r),e(Ef,r0r),e(Ef,Nve),e(Nve,t0r),e(Ef,a0r),e(qr,n0r),e(qr,hL),e(hL,s0r),e(hL,qve),e(qve,l0r),e(hL,i0r),e(qr,d0r),e(qr,Pt),g(pL,Pt,null),e(Pt,c0r),e(Pt,Ove),e(Ove,f0r),e(Pt,m0r),e(Pt,yf),e(yf,g0r),e(yf,Gve),e(Gve,h0r),e(yf,p0r),e(yf,Xve),e(Xve,_0r),e(yf,u0r),e(Pt,b0r),e(Pt,Vve),e(Vve,v0r),e(Pt,T0r),g(_L,Pt,null),e(qr,F0r),e(qr,$o),g(uL,$o,null),e($o,C0r),e($o,zve),e(zve,M0r),e($o,E0r),e($o,jn),e(jn,y0r),e(jn,Wve),e(Wve,w0r),e(jn,A0r),e(jn,Qve),e(Qve,L0r),e(jn,B0r),e(jn,Hve),e(Hve,x0r),e(jn,k0r),e($o,R0r),e($o,Se),e(Se,x4),e(x4,Uve),e(Uve,S0r),e(x4,P0r),e(x4,iz),e(iz,$0r),e(x4,I0r),e(Se,j0r),e(Se,k4),e(k4,Jve),e(Jve,D0r),e(k4,N0r),e(k4,dz),e(dz,q0r),e(k4,O0r),e(Se,G0r),e(Se,R4),e(R4,Yve),e(Yve,X0r),e(R4,V0r),e(R4,cz),e(cz,z0r),e(R4,W0r),e(Se,Q0r),e(Se,S4),e(S4,Kve),e(Kve,H0r),e(S4,U0r),e(S4,fz),e(fz,J0r),e(S4,Y0r),e(Se,K0r),e(Se,P4),e(P4,Zve),e(Zve,Z0r),e(P4,eLr),e(P4,mz),e(mz,oLr),e(P4,rLr),e(Se,tLr),e(Se,$4),e($4,eTe),e(eTe,aLr),e($4,nLr),e($4,gz),e(gz,sLr),e($4,lLr),e(Se,iLr),e(Se,I4),e(I4,oTe),e(oTe,dLr),e(I4,cLr),e(I4,hz),e(hz,fLr),e(I4,mLr),e(Se,gLr),e(Se,j4),e(j4,rTe),e(rTe,hLr),e(j4,pLr),e(j4,pz),e(pz,_Lr),e(j4,uLr),e($o,bLr),e($o,tTe),e(tTe,vLr),e($o,TLr),g(bL,$o,null),b(d,Hke,u),b(d,wf,u),e(wf,D4),e(D4,aTe),g(vL,aTe,null),e(wf,FLr),e(wf,nTe),e(nTe,CLr),b(d,Uke,u),b(d,Or,u),g(TL,Or,null),e(Or,MLr),e(Or,Af),e(Af,ELr),e(Af,sTe),e(sTe,yLr),e(Af,wLr),e(Af,lTe),e(lTe,ALr),e(Af,LLr),e(Or,BLr),e(Or,FL),e(FL,xLr),e(FL,iTe),e(iTe,kLr),e(FL,RLr),e(Or,SLr),e(Or,$t),g(CL,$t,null),e($t,PLr),e($t,dTe),e(dTe,$Lr),e($t,ILr),e($t,Lf),e(Lf,jLr),e(Lf,cTe),e(cTe,DLr),e(Lf,NLr),e(Lf,fTe),e(fTe,qLr),e(Lf,OLr),e($t,GLr),e($t,mTe),e(mTe,XLr),e($t,VLr),g(ML,$t,null),e(Or,zLr),e(Or,Io),g(EL,Io,null),e(Io,WLr),e(Io,gTe),e(gTe,QLr),e(Io,HLr),e(Io,Dn),e(Dn,ULr),e(Dn,hTe),e(hTe,JLr),e(Dn,YLr),e(Dn,pTe),e(pTe,KLr),e(Dn,ZLr),e(Dn,_Te),e(_Te,e8r),e(Dn,o8r),e(Io,r8r),e(Io,uTe),e(uTe,N4),e(N4,bTe),e(bTe,t8r),e(N4,a8r),e(N4,_z),e(_z,n8r),e(N4,s8r),e(Io,l8r),e(Io,vTe),e(vTe,i8r),e(Io,d8r),g(yL,Io,null),b(d,Jke,u),b(d,Bf,u),e(Bf,q4),e(q4,TTe),g(wL,TTe,null),e(Bf,c8r),e(Bf,FTe),e(FTe,f8r),b(d,Yke,u),b(d,Gr,u),g(AL,Gr,null),e(Gr,m8r),e(Gr,xf),e(xf,g8r),e(xf,CTe),e(CTe,h8r),e(xf,p8r),e(xf,MTe),e(MTe,_8r),e(xf,u8r),e(Gr,b8r),e(Gr,LL),e(LL,v8r),e(LL,ETe),e(ETe,T8r),e(LL,F8r),e(Gr,C8r),e(Gr,It),g(BL,It,null),e(It,M8r),e(It,yTe),e(yTe,E8r),e(It,y8r),e(It,kf),e(kf,w8r),e(kf,wTe),e(wTe,A8r),e(kf,L8r),e(kf,ATe),e(ATe,B8r),e(kf,x8r),e(It,k8r),e(It,LTe),e(LTe,R8r),e(It,S8r),g(xL,It,null),e(Gr,P8r),e(Gr,jo),g(kL,jo,null),e(jo,$8r),e(jo,BTe),e(BTe,I8r),e(jo,j8r),e(jo,Nn),e(Nn,D8r),e(Nn,xTe),e(xTe,N8r),e(Nn,q8r),e(Nn,kTe),e(kTe,O8r),e(Nn,G8r),e(Nn,RTe),e(RTe,X8r),e(Nn,V8r),e(jo,z8r),e(jo,RL),e(RL,O4),e(O4,STe),e(STe,W8r),e(O4,Q8r),e(O4,uz),e(uz,H8r),e(O4,U8r),e(RL,J8r),e(RL,G4),e(G4,PTe),e(PTe,Y8r),e(G4,K8r),e(G4,bz),e(bz,Z8r),e(G4,e7r),e(jo,o7r),e(jo,$Te),e($Te,r7r),e(jo,t7r),g(SL,jo,null),b(d,Kke,u),b(d,Rf,u),e(Rf,X4),e(X4,ITe),g(PL,ITe,null),e(Rf,a7r),e(Rf,jTe),e(jTe,n7r),b(d,Zke,u),b(d,Xr,u),g($L,Xr,null),e(Xr,s7r),e(Xr,Sf),e(Sf,l7r),e(Sf,DTe),e(DTe,i7r),e(Sf,d7r),e(Sf,NTe),e(NTe,c7r),e(Sf,f7r),e(Xr,m7r),e(Xr,IL),e(IL,g7r),e(IL,qTe),e(qTe,h7r),e(IL,p7r),e(Xr,_7r),e(Xr,jt),g(jL,jt,null),e(jt,u7r),e(jt,OTe),e(OTe,b7r),e(jt,v7r),e(jt,Pf),e(Pf,T7r),e(Pf,GTe),e(GTe,F7r),e(Pf,C7r),e(Pf,XTe),e(XTe,M7r),e(Pf,E7r),e(jt,y7r),e(jt,VTe),e(VTe,w7r),e(jt,A7r),g(DL,jt,null),e(Xr,L7r),e(Xr,Do),g(NL,Do,null),e(Do,B7r),e(Do,zTe),e(zTe,x7r),e(Do,k7r),e(Do,qn),e(qn,R7r),e(qn,WTe),e(WTe,S7r),e(qn,P7r),e(qn,QTe),e(QTe,$7r),e(qn,I7r),e(qn,HTe),e(HTe,j7r),e(qn,D7r),e(Do,N7r),e(Do,UTe),e(UTe,V4),e(V4,JTe),e(JTe,q7r),e(V4,O7r),e(V4,vz),e(vz,G7r),e(V4,X7r),e(Do,V7r),e(Do,YTe),e(YTe,z7r),e(Do,W7r),g(qL,Do,null),eRe=!0},p(d,[u]){const OL={};u&2&&(OL.$$scope={dirty:u,ctx:d}),Of.$set(OL);const KTe={};u&2&&(KTe.$$scope={dirty:u,ctx:d}),Mh.$set(KTe);const ZTe={};u&2&&(ZTe.$$scope={dirty:u,ctx:d}),Ph.$set(ZTe)},i(d){eRe||(h(fe.$$.fragment,d),h(Na.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(Of.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(p3.$$.fragment,d),h(Mh.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(C3.$$.fragment,d),h(Ph.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(D3.$$.fragment,d),h(N3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(aw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(fw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(q6.$$.fragment,d),h(O6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(ZA.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(t0.$$.fragment,d),h(a0.$$.fragment,d),h(s0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(c0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(p0.$$.fragment,d),h(_0.$$.fragment,d),h(u0.$$.fragment,d),h(b0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(E0.$$.fragment,d),h(y0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(k0.$$.fragment,d),h(R0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(D0.$$.fragment,d),h(N0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),h(X0.$$.fragment,d),h(V0.$$.fragment,d),h(z0.$$.fragment,d),h(W0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(K0.$$.fragment,d),h(Z0.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(nL.$$.fragment,d),h(sL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(fL.$$.fragment,d),h(mL.$$.fragment,d),h(gL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(uL.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(SL.$$.fragment,d),h(PL.$$.fragment,d),h($L.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),eRe=!0)},o(d){p(fe.$$.fragment,d),p(Na.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(Of.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(p3.$$.fragment,d),p(Mh.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(C3.$$.fragment,d),p(Ph.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(D3.$$.fragment,d),p(N3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Vy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Yy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(aw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(fw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(bw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(yw.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(Rw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(t6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(c6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(T6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(E6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(A6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(k6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p(P6.$$.fragment,d),p(I6.$$.fragment,d),p(j6.$$.fragment,d),p(D6.$$.fragment,d),p(N6.$$.fragment,d),p(q6.$$.fragment,d),p(O6.$$.fragment,d),p(X6.$$.fragment,d),p(V6.$$.fragment,d),p(z6.$$.fragment,d),p(W6.$$.fragment,d),p(Q6.$$.fragment,d),p(H6.$$.fragment,d),p(J6.$$.fragment,d),p(Y6.$$.fragment,d),p(K6.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),p(GA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(ZA.$$.fragment,d),p(e0.$$.fragment,d),p(o0.$$.fragment,d),p(r0.$$.fragment,d),p(t0.$$.fragment,d),p(a0.$$.fragment,d),p(s0.$$.fragment,d),p(l0.$$.fragment,d),p(i0.$$.fragment,d),p(d0.$$.fragment,d),p(c0.$$.fragment,d),p(f0.$$.fragment,d),p(g0.$$.fragment,d),p(h0.$$.fragment,d),p(p0.$$.fragment,d),p(_0.$$.fragment,d),p(u0.$$.fragment,d),p(b0.$$.fragment,d),p(T0.$$.fragment,d),p(F0.$$.fragment,d),p(C0.$$.fragment,d),p(M0.$$.fragment,d),p(E0.$$.fragment,d),p(y0.$$.fragment,d),p(A0.$$.fragment,d),p(L0.$$.fragment,d),p(B0.$$.fragment,d),p(x0.$$.fragment,d),p(k0.$$.fragment,d),p(R0.$$.fragment,d),p(P0.$$.fragment,d),p($0.$$.fragment,d),p(I0.$$.fragment,d),p(j0.$$.fragment,d),p(D0.$$.fragment,d),p(N0.$$.fragment,d),p(O0.$$.fragment,d),p(G0.$$.fragment,d),p(X0.$$.fragment,d),p(V0.$$.fragment,d),p(z0.$$.fragment,d),p(W0.$$.fragment,d),p(H0.$$.fragment,d),p(U0.$$.fragment,d),p(J0.$$.fragment,d),p(Y0.$$.fragment,d),p(K0.$$.fragment,d),p(Z0.$$.fragment,d),p(oL.$$.fragment,d),p(rL.$$.fragment,d),p(tL.$$.fragment,d),p(aL.$$.fragment,d),p(nL.$$.fragment,d),p(sL.$$.fragment,d),p(iL.$$.fragment,d),p(dL.$$.fragment,d),p(cL.$$.fragment,d),p(fL.$$.fragment,d),p(mL.$$.fragment,d),p(gL.$$.fragment,d),p(pL.$$.fragment,d),p(_L.$$.fragment,d),p(uL.$$.fragment,d),p(bL.$$.fragment,d),p(vL.$$.fragment,d),p(TL.$$.fragment,d),p(CL.$$.fragment,d),p(ML.$$.fragment,d),p(EL.$$.fragment,d),p(yL.$$.fragment,d),p(wL.$$.fragment,d),p(AL.$$.fragment,d),p(BL.$$.fragment,d),p(xL.$$.fragment,d),p(kL.$$.fragment,d),p(SL.$$.fragment,d),p(PL.$$.fragment,d),p($L.$$.fragment,d),p(jL.$$.fragment,d),p(DL.$$.fragment,d),p(NL.$$.fragment,d),p(qL.$$.fragment,d),eRe=!1},d(d){t(J),d&&t(Pe),d&&t(de),_(fe),d&&t(If),d&&t(ca),d&&t(Le),d&&t(co),d&&t(Df),_(Na,d),d&&t(fo),d&&t(he),d&&t(zo),d&&t(qa),d&&t(ZBe),d&&t(Vi),_(UE),d&&t(exe),d&&t(zn),d&&t(oxe),_(JE,d),d&&t(rxe),d&&t(V8),d&&t(txe),_(Of,d),d&&t(axe),d&&t(zi),_(YE),d&&t(nxe),d&&t(Wo),_(KE),_(o3),_(r3),_(t3),d&&t(sxe),d&&t(Qi),_(a3),d&&t(lxe),d&&t(Qo),_(n3),_(i3),_(d3),_(c3),d&&t(ixe),d&&t(Hi),_(f3),d&&t(dxe),d&&t(Ho),_(m3),_(p3),_(Mh),_(_3),_(u3),d&&t(cxe),d&&t(Ui),_(b3),d&&t(fxe),d&&t(Uo),_(v3),_(C3),_(Ph),_(M3),_(E3),d&&t(mxe),d&&t(Yi),_(y3),d&&t(gxe),d&&t(Jo),_(w3),_(L3),_(B3),_(x3),_(k3),d&&t(hxe),d&&t(ed),_(R3),d&&t(pxe),d&&t(Yo),_(S3),_($3),_(I3),_(j3),_(D3),d&&t(_xe),d&&t(td),_(N3),d&&t(uxe),d&&t(Ko),_(q3),_(G3),_(X3),_(V3),_(z3),d&&t(bxe),d&&t(sd),_(W3),d&&t(vxe),d&&t(Zo),_(Q3),_(U3),_(J3),_(Y3),_(K3),d&&t(Txe),d&&t(dd),_(Z3),d&&t(Fxe),d&&t(er),_(ey),_(ry),_(ty),_(ay),_(ny),d&&t(Cxe),d&&t(md),_(sy),d&&t(Mxe),d&&t(or),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(Exe),d&&t(pd),_(gy),d&&t(yxe),d&&t(rr),_(hy),_(_y),_(uy),_(by),_(vy),d&&t(wxe),d&&t(bd),_(Ty),d&&t(Axe),d&&t(tr),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(Lxe),d&&t(Fd),_(Ay),d&&t(Bxe),d&&t(ar),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(xxe),d&&t(Ed),_(Py),d&&t(kxe),d&&t(nr),_($y),_(jy),_(Dy),_(Ny),_(qy),d&&t(Rxe),d&&t(Ad),_(Oy),d&&t(Sxe),d&&t(sr),_(Gy),_(Vy),_(zy),_(Wy),_(Qy),d&&t(Pxe),d&&t(xd),_(Hy),d&&t($xe),d&&t(lr),_(Uy),_(Yy),_(Ky),_(Zy),_(ew),d&&t(Ixe),d&&t(Sd),_(ow),d&&t(jxe),d&&t(ir),_(rw),_(aw),_(nw),_(sw),_(lw),d&&t(Dxe),d&&t(Id),_(iw),d&&t(Nxe),d&&t(dr),_(dw),_(fw),_(mw),_(gw),_(hw),d&&t(qxe),d&&t(Nd),_(pw),d&&t(Oxe),d&&t(cr),_(_w),_(bw),_(vw),_(Tw),_(Fw),d&&t(Gxe),d&&t(Gd),_(Cw),d&&t(Xxe),d&&t(fr),_(Mw),_(yw),_(ww),_(Aw),_(Lw),d&&t(Vxe),d&&t(zd),_(Bw),d&&t(zxe),d&&t(mr),_(xw),_(Rw),_(Sw),_(Pw),_(Iw),d&&t(Wxe),d&&t(Hd),_(jw),d&&t(Qxe),d&&t(gr),_(Dw),_(qw),_(Ow),_(Gw),_(Xw),d&&t(Hxe),d&&t(Yd),_(Vw),d&&t(Uxe),d&&t(hr),_(zw),_(Qw),_(Hw),_(Uw),_(Jw),d&&t(Jxe),d&&t(oc),_(Yw),d&&t(Yxe),d&&t(pr),_(Kw),_(e6),_(o6),_(r6),_(t6),d&&t(Kxe),d&&t(ac),_(a6),d&&t(Zxe),d&&t(_r),_(n6),_(l6),_(i6),_(d6),_(c6),d&&t(eke),d&&t(lc),_(f6),d&&t(oke),d&&t(ur),_(m6),_(h6),_(p6),_(_6),_(b6),d&&t(rke),d&&t(cc),_(v6),d&&t(tke),d&&t(br),_(T6),_(C6),_(M6),_(E6),_(y6),d&&t(ake),d&&t(gc),_(w6),d&&t(nke),d&&t(vr),_(A6),_(B6),_(x6),_(k6),_(R6),d&&t(ske),d&&t(_c),_(S6),d&&t(lke),d&&t(Tr),_(P6),_(I6),_(j6),_(D6),_(N6),d&&t(ike),d&&t(vc),_(q6),d&&t(dke),d&&t(Fr),_(O6),_(X6),_(V6),_(z6),_(W6),d&&t(cke),d&&t(Cc),_(Q6),d&&t(fke),d&&t(Cr),_(H6),_(J6),_(Y6),_(K6),_(eA),d&&t(mke),d&&t(yc),_(oA),d&&t(gke),d&&t(Mr),_(rA),_(aA),_(nA),_(sA),_(lA),d&&t(hke),d&&t(Lc),_(iA),d&&t(pke),d&&t(Er),_(dA),_(fA),_(mA),_(gA),_(hA),d&&t(_ke),d&&t(kc),_(pA),d&&t(uke),d&&t(yr),_(_A),_(bA),_(vA),_(TA),_(FA),d&&t(bke),d&&t(Pc),_(CA),d&&t(vke),d&&t(wr),_(MA),_(yA),_(wA),_(AA),_(LA),d&&t(Tke),d&&t(jc),_(BA),d&&t(Fke),d&&t(Ar),_(xA),_(RA),_(SA),_(PA),_($A),d&&t(Cke),d&&t(qc),_(IA),d&&t(Mke),d&&t(Lr),_(jA),_(NA),_(qA),_(OA),_(GA),d&&t(Eke),d&&t(Xc),_(XA),d&&t(yke),d&&t(Br),_(VA),_(WA),_(QA),_(HA),_(UA),d&&t(wke),d&&t(Wc),_(JA),d&&t(Ake),d&&t(xr),_(YA),_(ZA),_(e0),_(o0),_(r0),d&&t(Lke),d&&t(Uc),_(t0),d&&t(Bke),d&&t(kr),_(a0),_(s0),_(l0),_(i0),_(d0),d&&t(xke),d&&t(Kc),_(c0),d&&t(kke),d&&t(Rr),_(f0),_(g0),_(h0),_(p0),_(_0),d&&t(Rke),d&&t(of),_(u0),d&&t(Ske),d&&t(Sr),_(b0),_(T0),_(F0),_(C0),_(M0),d&&t(Pke),d&&t(af),_(E0),d&&t($ke),d&&t(Pr),_(y0),_(A0),_(L0),_(B0),_(x0),d&&t(Ike),d&&t(lf),_(k0),d&&t(jke),d&&t($r),_(R0),_(P0),_($0),_(I0),_(j0),d&&t(Dke),d&&t(ff),_(D0),d&&t(Nke),d&&t(Ir),_(N0),_(O0),_(G0),_(X0),_(V0),d&&t(qke),d&&t(hf),_(z0),d&&t(Oke),d&&t(jr),_(W0),_(H0),_(U0),_(J0),_(Y0),d&&t(Gke),d&&t(uf),_(K0),d&&t(Xke),d&&t(Dr),_(Z0),_(oL),_(rL),_(tL),_(aL),d&&t(Vke),d&&t(Tf),_(nL),d&&t(zke),d&&t(Nr),_(sL),_(iL),_(dL),_(cL),_(fL),d&&t(Wke),d&&t(Mf),_(mL),d&&t(Qke),d&&t(qr),_(gL),_(pL),_(_L),_(uL),_(bL),d&&t(Hke),d&&t(wf),_(vL),d&&t(Uke),d&&t(Or),_(TL),_(CL),_(ML),_(EL),_(yL),d&&t(Jke),d&&t(Bf),_(wL),d&&t(Yke),d&&t(Gr),_(AL),_(BL),_(xL),_(kL),_(SL),d&&t(Kke),d&&t(Rf),_(PL),d&&t(Zke),d&&t(Xr),_($L),_(jL),_(DL),_(NL),_(qL)}}}const yFt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function wFt(Ii,J,Pe){let{fw:de}=J;return Ii.$$set=ge=>{"fw"in ge&&Pe(0,de=ge.fw)},[de]}class SFt extends uFt{constructor(J){super();bFt(this,J,wFt,EFt,vFt,{fw:0})}}export{SFt as default,yFt as metadata};
