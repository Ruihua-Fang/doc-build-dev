import{S as PCt,i as $Ct,s as ICt,e as a,k as l,w as f,t as o,M as qCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as NCt}from"../../chunks/vendor-6b77c823.js";import{T as rPr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-17b815d9.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function jCt(qf){let Z,io,de,Ce,lo,ge,Me,Xo,qi,Nf,fa,Ni,ji,EC,jf,xe,co,Di,Gn,CC,On,Vn,wC,Gi,Xn,AC,Oi,Df,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),EC=o(")."),jf=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),CC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),wC=o(`, make sure its
`),Gi=a("code"),Xn=o("config_class"),AC=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),de=n(ue,"CODE",{});var _7=s(de);Ce=r(_7,"NewModelConfig"),_7.forEach(t),lo=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Vi=s(ge);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var u7=s(qi);Nf=r(u7,"model_type"),u7.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var b7=s(Ni);ji=r(b7,'"new-model"'),b7.forEach(t),EC=r(ue,")."),ue.forEach(t),jf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),CC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var F7=s(On);Vn=r(F7,"PreTrainedModel"),F7.forEach(t),wC=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Gf=s(Gi);Xn=r(Gf,"config_class"),Gf.forEach(t),AC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var v7=s(Oi);Df=r(v7,"NewModelConfig"),v7.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,ge),e(ge,Me),e(Z,Xo),e(Z,qi),e(qi,Nf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,EC),b(fo,jf,ue),b(fo,xe,ue),e(xe,co),e(xe,Di),e(Di,Gn),e(xe,CC),e(xe,On),e(On,Vn),e(xe,wC),e(xe,Gi),e(Gi,Xn),e(xe,AC),e(xe,Oi),e(Oi,Df),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(xe)}}}function DCt(qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function GCt(qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(ge){Z=n(ge,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(ge){ge&&t(Z)}}}function OCt(qf){let Z,io,de,Ce,lo,ge,Me,Xo,qi,Nf,fa,Ni,ji,EC,jf,xe,co,Di,Gn,CC,On,Vn,wC,Gi,Xn,AC,Oi,Df,Da,fo,ue,_7,Vi,u7,b7,zo,Ga,F7,Gf,v7,xIe,_Re,Xi,Of,tY,yC,kIe,aY,SIe,uRe,zn,RIe,nY,BIe,PIe,sY,$Ie,IIe,bRe,LC,FRe,T7,qIe,vRe,Vf,TRe,zi,Xf,lY,xC,NIe,iY,jIe,MRe,Qo,kC,DIe,SC,GIe,M7,OIe,VIe,XIe,RC,zIe,dY,QIe,WIe,HIe,mo,BC,UIe,cY,JIe,YIe,Qi,KIe,fY,ZIe,eqe,mY,oqe,rqe,tqe,F,zf,gY,aqe,nqe,E7,sqe,lqe,iqe,Qf,hY,dqe,cqe,C7,fqe,mqe,gqe,Wf,pY,hqe,pqe,w7,_qe,uqe,bqe,Hf,_Y,Fqe,vqe,A7,Tqe,Mqe,Eqe,Uf,uY,Cqe,wqe,y7,Aqe,yqe,Lqe,Jf,bY,xqe,kqe,L7,Sqe,Rqe,Bqe,Yf,FY,Pqe,$qe,x7,Iqe,qqe,Nqe,Kf,vY,jqe,Dqe,k7,Gqe,Oqe,Vqe,Zf,TY,Xqe,zqe,S7,Qqe,Wqe,Hqe,em,MY,Uqe,Jqe,R7,Yqe,Kqe,Zqe,om,EY,eNe,oNe,B7,rNe,tNe,aNe,rm,CY,nNe,sNe,P7,lNe,iNe,dNe,tm,wY,cNe,fNe,$7,mNe,gNe,hNe,am,AY,pNe,_Ne,I7,uNe,bNe,FNe,nm,yY,vNe,TNe,q7,MNe,ENe,CNe,sm,LY,wNe,ANe,N7,yNe,LNe,xNe,lm,xY,kNe,SNe,j7,RNe,BNe,PNe,im,kY,$Ne,INe,D7,qNe,NNe,jNe,dm,SY,DNe,GNe,G7,ONe,VNe,XNe,cm,RY,zNe,QNe,O7,WNe,HNe,UNe,fm,BY,JNe,YNe,V7,KNe,ZNe,eje,mm,PY,oje,rje,X7,tje,aje,nje,gm,$Y,sje,lje,z7,ije,dje,cje,hm,IY,fje,mje,Q7,gje,hje,pje,pm,qY,_je,uje,W7,bje,Fje,vje,_m,NY,Tje,Mje,H7,Eje,Cje,wje,um,jY,Aje,yje,U7,Lje,xje,kje,bm,DY,Sje,Rje,J7,Bje,Pje,$je,Fm,GY,Ije,qje,Y7,Nje,jje,Dje,vm,OY,Gje,Oje,K7,Vje,Xje,zje,Tm,VY,Qje,Wje,Z7,Hje,Uje,Jje,Mm,XY,Yje,Kje,ex,Zje,eDe,oDe,Em,zY,rDe,tDe,ox,aDe,nDe,sDe,Cm,QY,lDe,iDe,rx,dDe,cDe,fDe,wm,WY,mDe,gDe,tx,hDe,pDe,_De,Am,HY,uDe,bDe,ax,FDe,vDe,TDe,ym,UY,MDe,EDe,nx,CDe,wDe,ADe,Lm,JY,yDe,LDe,sx,xDe,kDe,SDe,xm,YY,RDe,BDe,lx,PDe,$De,IDe,km,KY,qDe,NDe,ix,jDe,DDe,GDe,Sm,ZY,ODe,VDe,dx,XDe,zDe,QDe,Rm,eK,WDe,HDe,cx,UDe,JDe,YDe,Bm,oK,KDe,ZDe,fx,eGe,oGe,rGe,Pm,rK,tGe,aGe,mx,nGe,sGe,lGe,$m,tK,iGe,dGe,gx,cGe,fGe,mGe,Im,aK,gGe,hGe,hx,pGe,_Ge,uGe,qm,nK,bGe,FGe,px,vGe,TGe,MGe,Nm,sK,EGe,CGe,_x,wGe,AGe,yGe,jm,lK,LGe,xGe,ux,kGe,SGe,RGe,Dm,iK,BGe,PGe,bx,$Ge,IGe,qGe,Gm,dK,NGe,jGe,Fx,DGe,GGe,OGe,Om,cK,VGe,XGe,vx,zGe,QGe,WGe,Vm,fK,HGe,UGe,Tx,JGe,YGe,KGe,Xm,mK,ZGe,eOe,Mx,oOe,rOe,tOe,zm,gK,aOe,nOe,Ex,sOe,lOe,iOe,Qm,hK,dOe,cOe,Cx,fOe,mOe,gOe,Wm,pK,hOe,pOe,wx,_Oe,uOe,bOe,Hm,_K,FOe,vOe,Ax,TOe,MOe,EOe,Um,uK,COe,wOe,yx,AOe,yOe,LOe,Jm,bK,xOe,kOe,Lx,SOe,ROe,BOe,Ym,FK,POe,$Oe,xx,IOe,qOe,NOe,Km,vK,jOe,DOe,kx,GOe,OOe,VOe,Zm,TK,XOe,zOe,Sx,QOe,WOe,HOe,eg,MK,UOe,JOe,Rx,YOe,KOe,ZOe,og,EK,eVe,oVe,Bx,rVe,tVe,aVe,rg,CK,nVe,sVe,Px,lVe,iVe,dVe,tg,wK,cVe,fVe,$x,mVe,gVe,hVe,ag,AK,pVe,_Ve,Ix,uVe,bVe,FVe,ng,yK,vVe,TVe,qx,MVe,EVe,CVe,sg,LK,wVe,AVe,Nx,yVe,LVe,xVe,lg,xK,kVe,SVe,jx,RVe,BVe,PVe,ig,kK,$Ve,IVe,Dx,qVe,NVe,jVe,dg,SK,DVe,GVe,Gx,OVe,VVe,XVe,cg,RK,zVe,QVe,Ox,WVe,HVe,UVe,fg,BK,JVe,YVe,Vx,KVe,ZVe,eXe,mg,PK,oXe,rXe,Xx,tXe,aXe,nXe,gg,$K,sXe,lXe,zx,iXe,dXe,cXe,hg,IK,fXe,mXe,Qx,gXe,hXe,pXe,pg,qK,_Xe,uXe,Wx,bXe,FXe,vXe,_g,NK,TXe,MXe,Hx,EXe,CXe,wXe,ug,jK,AXe,yXe,Ux,LXe,xXe,kXe,bg,DK,SXe,RXe,Jx,BXe,PXe,$Xe,Fg,GK,IXe,qXe,Yx,NXe,jXe,DXe,vg,OK,GXe,OXe,Kx,VXe,XXe,zXe,Tg,VK,QXe,WXe,Zx,HXe,UXe,JXe,Mg,XK,YXe,KXe,ek,ZXe,eze,oze,Eg,zK,rze,tze,ok,aze,nze,sze,Cg,QK,lze,ize,rk,dze,cze,fze,wg,WK,mze,gze,tk,hze,pze,_ze,Ag,HK,uze,bze,ak,Fze,vze,Tze,yg,UK,Mze,Eze,nk,Cze,wze,Aze,Lg,JK,yze,Lze,sk,xze,kze,Sze,xg,YK,Rze,Bze,lk,Pze,$ze,Ize,kg,KK,qze,Nze,ik,jze,Dze,Gze,Sg,ZK,Oze,Vze,dk,Xze,zze,Qze,Rg,eZ,Wze,Hze,ck,Uze,Jze,Yze,Bg,oZ,Kze,Zze,fk,eQe,oQe,rQe,Pg,rZ,tQe,aQe,mk,nQe,sQe,lQe,$g,tZ,iQe,dQe,gk,cQe,fQe,mQe,Ig,aZ,gQe,hQe,hk,pQe,_Qe,uQe,qg,nZ,bQe,FQe,pk,vQe,TQe,MQe,sZ,EQe,CQe,PC,wQe,Ng,$C,AQe,lZ,yQe,ERe,Wi,jg,iZ,IC,LQe,dZ,xQe,CRe,Wo,qC,kQe,NC,SQe,_k,RQe,BQe,PQe,jC,$Qe,cZ,IQe,qQe,NQe,go,DC,jQe,fZ,DQe,GQe,Oa,OQe,mZ,VQe,XQe,gZ,zQe,QQe,hZ,WQe,HQe,UQe,E,Qn,pZ,JQe,YQe,uk,KQe,ZQe,bk,eWe,oWe,rWe,Wn,_Z,tWe,aWe,Fk,nWe,sWe,vk,lWe,iWe,dWe,Hn,uZ,cWe,fWe,Tk,mWe,gWe,Mk,hWe,pWe,_We,Dg,bZ,uWe,bWe,Ek,FWe,vWe,TWe,Un,FZ,MWe,EWe,Ck,CWe,wWe,wk,AWe,yWe,LWe,Gg,vZ,xWe,kWe,Ak,SWe,RWe,BWe,Og,TZ,PWe,$We,yk,IWe,qWe,NWe,Vg,MZ,jWe,DWe,Lk,GWe,OWe,VWe,Jn,EZ,XWe,zWe,xk,QWe,WWe,kk,HWe,UWe,JWe,Yn,CZ,YWe,KWe,Sk,ZWe,eHe,Rk,oHe,rHe,tHe,Kn,wZ,aHe,nHe,Bk,sHe,lHe,Pk,iHe,dHe,cHe,Xg,AZ,fHe,mHe,$k,gHe,hHe,pHe,zg,yZ,_He,uHe,Ik,bHe,FHe,vHe,Zn,LZ,THe,MHe,qk,EHe,CHe,Nk,wHe,AHe,yHe,Qg,xZ,LHe,xHe,jk,kHe,SHe,RHe,es,kZ,BHe,PHe,Dk,$He,IHe,Gk,qHe,NHe,jHe,os,SZ,DHe,GHe,Ok,OHe,VHe,Vk,XHe,zHe,QHe,rs,RZ,WHe,HHe,Xk,UHe,JHe,BZ,YHe,KHe,ZHe,Wg,PZ,eUe,oUe,zk,rUe,tUe,aUe,ts,$Z,nUe,sUe,Qk,lUe,iUe,Wk,dUe,cUe,fUe,as,IZ,mUe,gUe,Hk,hUe,pUe,Uk,_Ue,uUe,bUe,ns,qZ,FUe,vUe,Jk,TUe,MUe,Yk,EUe,CUe,wUe,ss,NZ,AUe,yUe,Kk,LUe,xUe,Zk,kUe,SUe,RUe,ls,jZ,BUe,PUe,eS,$Ue,IUe,oS,qUe,NUe,jUe,Hg,DZ,DUe,GUe,rS,OUe,VUe,XUe,is,GZ,zUe,QUe,tS,WUe,HUe,aS,UUe,JUe,YUe,Ug,OZ,KUe,ZUe,nS,eJe,oJe,rJe,ds,VZ,tJe,aJe,sS,nJe,sJe,lS,lJe,iJe,dJe,cs,XZ,cJe,fJe,iS,mJe,gJe,dS,hJe,pJe,_Je,fs,zZ,uJe,bJe,cS,FJe,vJe,fS,TJe,MJe,EJe,ms,QZ,CJe,wJe,mS,AJe,yJe,gS,LJe,xJe,kJe,Jg,WZ,SJe,RJe,hS,BJe,PJe,$Je,gs,HZ,IJe,qJe,pS,NJe,jJe,_S,DJe,GJe,OJe,hs,UZ,VJe,XJe,uS,zJe,QJe,bS,WJe,HJe,UJe,ps,JZ,JJe,YJe,FS,KJe,ZJe,vS,eYe,oYe,rYe,_s,YZ,tYe,aYe,TS,nYe,sYe,MS,lYe,iYe,dYe,us,KZ,cYe,fYe,ES,mYe,gYe,CS,hYe,pYe,_Ye,bs,ZZ,uYe,bYe,wS,FYe,vYe,AS,TYe,MYe,EYe,Yg,eee,CYe,wYe,yS,AYe,yYe,LYe,Fs,oee,xYe,kYe,LS,SYe,RYe,xS,BYe,PYe,$Ye,Kg,ree,IYe,qYe,kS,NYe,jYe,DYe,Zg,tee,GYe,OYe,SS,VYe,XYe,zYe,vs,aee,QYe,WYe,RS,HYe,UYe,BS,JYe,YYe,KYe,Ts,nee,ZYe,eKe,PS,oKe,rKe,$S,tKe,aKe,nKe,eh,see,sKe,lKe,IS,iKe,dKe,cKe,Ms,lee,fKe,mKe,qS,gKe,hKe,NS,pKe,_Ke,uKe,Es,iee,bKe,FKe,jS,vKe,TKe,DS,MKe,EKe,CKe,Cs,dee,wKe,AKe,GS,yKe,LKe,OS,xKe,kKe,SKe,ws,cee,RKe,BKe,VS,PKe,$Ke,XS,IKe,qKe,NKe,As,fee,jKe,DKe,zS,GKe,OKe,QS,VKe,XKe,zKe,oh,mee,QKe,WKe,WS,HKe,UKe,JKe,rh,gee,YKe,KKe,HS,ZKe,eZe,oZe,th,hee,rZe,tZe,US,aZe,nZe,sZe,ah,pee,lZe,iZe,JS,dZe,cZe,fZe,ys,_ee,mZe,gZe,YS,hZe,pZe,KS,_Ze,uZe,bZe,nh,uee,FZe,vZe,ZS,TZe,MZe,EZe,Ls,bee,CZe,wZe,eR,AZe,yZe,oR,LZe,xZe,kZe,xs,Fee,SZe,RZe,rR,BZe,PZe,tR,$Ze,IZe,qZe,ks,vee,NZe,jZe,aR,DZe,GZe,nR,OZe,VZe,XZe,Ss,Tee,zZe,QZe,sR,WZe,HZe,lR,UZe,JZe,YZe,Rs,Mee,KZe,ZZe,iR,eeo,oeo,dR,reo,teo,aeo,Bs,Eee,neo,seo,cR,leo,ieo,fR,deo,ceo,feo,sh,Cee,meo,geo,mR,heo,peo,_eo,lh,wee,ueo,beo,gR,Feo,veo,Teo,Ps,Aee,Meo,Eeo,hR,Ceo,weo,pR,Aeo,yeo,Leo,$s,yee,xeo,keo,_R,Seo,Reo,uR,Beo,Peo,$eo,Is,Lee,Ieo,qeo,bR,Neo,jeo,FR,Deo,Geo,Oeo,ih,xee,Veo,Xeo,vR,zeo,Qeo,Weo,dh,kee,Heo,Ueo,TR,Jeo,Yeo,Keo,ch,See,Zeo,eoo,MR,ooo,roo,too,fh,Ree,aoo,noo,ER,soo,loo,ioo,mh,Bee,doo,coo,CR,foo,moo,goo,qs,Pee,hoo,poo,wR,_oo,uoo,AR,boo,Foo,voo,gh,$ee,Too,Moo,yR,Eoo,Coo,woo,hh,Iee,Aoo,yoo,LR,Loo,xoo,koo,Ns,qee,Soo,Roo,xR,Boo,Poo,kR,$oo,Ioo,qoo,js,Nee,Noo,joo,SR,Doo,Goo,RR,Ooo,Voo,Xoo,jee,zoo,Qoo,GC,Woo,ph,OC,Hoo,Dee,Uoo,wRe,Hi,_h,Gee,VC,Joo,Oee,Yoo,ARe,Ho,XC,Koo,zC,Zoo,BR,ero,oro,rro,QC,tro,Vee,aro,nro,sro,$e,WC,lro,Xee,iro,dro,Va,cro,zee,fro,mro,Qee,gro,hro,Wee,pro,_ro,uro,ee,uh,Hee,bro,Fro,PR,vro,Tro,Mro,bh,Uee,Ero,Cro,$R,wro,Aro,yro,Fh,Jee,Lro,xro,IR,kro,Sro,Rro,vh,Yee,Bro,Pro,qR,$ro,Iro,qro,Th,Kee,Nro,jro,NR,Dro,Gro,Oro,Mh,Zee,Vro,Xro,jR,zro,Qro,Wro,Eh,eoe,Hro,Uro,DR,Jro,Yro,Kro,Ch,ooe,Zro,eto,GR,oto,rto,tto,wh,roe,ato,nto,OR,sto,lto,ito,Ah,toe,dto,cto,VR,fto,mto,gto,yh,aoe,hto,pto,XR,_to,uto,bto,Lh,noe,Fto,vto,zR,Tto,Mto,Eto,xh,soe,Cto,wto,QR,Ato,yto,Lto,kh,loe,xto,kto,WR,Sto,Rto,Bto,Sh,ioe,Pto,$to,HR,Ito,qto,Nto,Rh,doe,jto,Dto,UR,Gto,Oto,Vto,Bh,coe,Xto,zto,JR,Qto,Wto,Hto,Ph,foe,Uto,Jto,YR,Yto,Kto,Zto,$h,moe,eao,oao,KR,rao,tao,aao,Ih,nao,goe,sao,lao,HC,iao,qh,UC,dao,hoe,cao,yRe,Ui,Nh,poe,JC,fao,_oe,mao,LRe,Uo,YC,gao,KC,hao,ZR,pao,_ao,uao,ZC,bao,uoe,Fao,vao,Tao,Ie,ew,Mao,boe,Eao,Cao,Ji,wao,Foe,Aao,yao,voe,Lao,xao,kao,ke,jh,Toe,Sao,Rao,eB,Bao,Pao,$ao,Dh,Moe,Iao,qao,oB,Nao,jao,Dao,Gh,Eoe,Gao,Oao,rB,Vao,Xao,zao,Oh,Coe,Qao,Wao,tB,Hao,Uao,Jao,Vh,woe,Yao,Kao,aB,Zao,eno,ono,Xh,Aoe,rno,tno,nB,ano,nno,sno,zh,yoe,lno,ino,sB,dno,cno,fno,Qh,Loe,mno,gno,lB,hno,pno,_no,Wh,uno,xoe,bno,Fno,ow,vno,Hh,rw,Tno,koe,Mno,xRe,Yi,Uh,Soe,tw,Eno,Roe,Cno,kRe,Jo,aw,wno,Ki,Ano,iB,yno,Lno,dB,xno,kno,Sno,nw,Rno,Boe,Bno,Pno,$no,Xr,sw,Ino,Poe,qno,Nno,Zi,jno,$oe,Dno,Gno,cB,Ono,Vno,Xno,Ioe,zno,Qno,lw,Wno,qe,iw,Hno,qoe,Uno,Jno,Xa,Yno,Noe,Kno,Zno,joe,eso,oso,Doe,rso,tso,aso,T,Jh,Goe,nso,sso,fB,lso,iso,dso,Yh,Ooe,cso,fso,mB,mso,gso,hso,Kh,Voe,pso,_so,gB,uso,bso,Fso,Zh,Xoe,vso,Tso,hB,Mso,Eso,Cso,ep,zoe,wso,Aso,pB,yso,Lso,xso,op,Qoe,kso,Sso,_B,Rso,Bso,Pso,rp,Woe,$so,Iso,uB,qso,Nso,jso,tp,Hoe,Dso,Gso,bB,Oso,Vso,Xso,ap,Uoe,zso,Qso,FB,Wso,Hso,Uso,np,Joe,Jso,Yso,vB,Kso,Zso,elo,sp,Yoe,olo,rlo,TB,tlo,alo,nlo,lp,Koe,slo,llo,MB,ilo,dlo,clo,ip,Zoe,flo,mlo,EB,glo,hlo,plo,dp,ere,_lo,ulo,CB,blo,Flo,vlo,cp,ore,Tlo,Mlo,wB,Elo,Clo,wlo,fp,rre,Alo,ylo,AB,Llo,xlo,klo,mp,tre,Slo,Rlo,yB,Blo,Plo,$lo,gp,are,Ilo,qlo,LB,Nlo,jlo,Dlo,hp,nre,Glo,Olo,xB,Vlo,Xlo,zlo,pp,sre,Qlo,Wlo,kB,Hlo,Ulo,Jlo,_p,lre,Ylo,Klo,SB,Zlo,eio,oio,up,ire,rio,tio,RB,aio,nio,sio,bp,dre,lio,iio,BB,dio,cio,fio,Fp,cre,mio,gio,PB,hio,pio,_io,vp,fre,uio,bio,$B,Fio,vio,Tio,Tp,mre,Mio,Eio,IB,Cio,wio,Aio,Mp,gre,yio,Lio,qB,xio,kio,Sio,Ep,hre,Rio,Bio,NB,Pio,$io,Iio,Cp,pre,qio,Nio,jB,jio,Dio,Gio,Ds,_re,Oio,Vio,DB,Xio,zio,GB,Qio,Wio,Hio,wp,ure,Uio,Jio,OB,Yio,Kio,Zio,Ap,bre,edo,odo,VB,rdo,tdo,ado,yp,Fre,ndo,sdo,XB,ldo,ido,ddo,Lp,vre,cdo,fdo,zB,mdo,gdo,hdo,xp,Tre,pdo,_do,QB,udo,bdo,Fdo,kp,Mre,vdo,Tdo,WB,Mdo,Edo,Cdo,Sp,Ere,wdo,Ado,HB,ydo,Ldo,xdo,Rp,Cre,kdo,Sdo,UB,Rdo,Bdo,Pdo,Bp,wre,$do,Ido,JB,qdo,Ndo,jdo,Pp,Are,Ddo,Gdo,YB,Odo,Vdo,Xdo,$p,yre,zdo,Qdo,KB,Wdo,Hdo,Udo,Ip,Lre,Jdo,Ydo,ZB,Kdo,Zdo,eco,qp,xre,oco,rco,eP,tco,aco,nco,Np,kre,sco,lco,oP,ico,dco,cco,jp,Sre,fco,mco,rP,gco,hco,pco,Dp,Rre,_co,uco,tP,bco,Fco,vco,Gp,Bre,Tco,Mco,aP,Eco,Cco,wco,Op,Pre,Aco,yco,nP,Lco,xco,kco,Vp,$re,Sco,Rco,sP,Bco,Pco,$co,Xp,Ire,Ico,qco,lP,Nco,jco,Dco,zp,qre,Gco,Oco,iP,Vco,Xco,zco,Qp,Nre,Qco,Wco,dP,Hco,Uco,Jco,Wp,jre,Yco,Kco,cP,Zco,efo,ofo,Hp,Dre,rfo,tfo,fP,afo,nfo,sfo,Up,Gre,lfo,ifo,mP,dfo,cfo,ffo,Jp,Ore,mfo,gfo,gP,hfo,pfo,_fo,Yp,Vre,ufo,bfo,hP,Ffo,vfo,Tfo,Kp,Xre,Mfo,Efo,pP,Cfo,wfo,Afo,Zp,zre,yfo,Lfo,_P,xfo,kfo,Sfo,e_,Qre,Rfo,Bfo,uP,Pfo,$fo,Ifo,o_,Wre,qfo,Nfo,bP,jfo,Dfo,Gfo,r_,Hre,Ofo,Vfo,FP,Xfo,zfo,Qfo,t_,Ure,Wfo,Hfo,vP,Ufo,Jfo,Yfo,a_,Jre,Kfo,Zfo,TP,emo,omo,rmo,n_,Yre,tmo,amo,MP,nmo,smo,lmo,s_,Kre,imo,dmo,EP,cmo,fmo,mmo,l_,Zre,gmo,hmo,CP,pmo,_mo,umo,i_,ete,bmo,Fmo,wP,vmo,Tmo,Mmo,d_,ote,Emo,Cmo,AP,wmo,Amo,ymo,c_,rte,Lmo,xmo,yP,kmo,Smo,Rmo,f_,tte,Bmo,Pmo,LP,$mo,Imo,qmo,m_,ate,Nmo,jmo,xP,Dmo,Gmo,Omo,g_,nte,Vmo,Xmo,kP,zmo,Qmo,Wmo,h_,ste,Hmo,Umo,SP,Jmo,Ymo,Kmo,p_,lte,Zmo,ego,RP,ogo,rgo,tgo,__,ite,ago,ngo,BP,sgo,lgo,igo,u_,dte,dgo,cgo,PP,fgo,mgo,ggo,b_,cte,hgo,pgo,$P,_go,ugo,bgo,F_,fte,Fgo,vgo,IP,Tgo,Mgo,Ego,v_,mte,Cgo,wgo,qP,Ago,ygo,Lgo,T_,gte,xgo,kgo,NP,Sgo,Rgo,Bgo,M_,hte,Pgo,$go,jP,Igo,qgo,Ngo,E_,pte,jgo,Dgo,DP,Ggo,Ogo,Vgo,C_,_te,Xgo,zgo,GP,Qgo,Wgo,Hgo,w_,ute,Ugo,Jgo,OP,Ygo,Kgo,Zgo,A_,bte,eho,oho,VP,rho,tho,aho,y_,Fte,nho,sho,XP,lho,iho,dho,L_,vte,cho,fho,zP,mho,gho,hho,x_,Tte,pho,_ho,QP,uho,bho,Fho,k_,Mte,vho,Tho,WP,Mho,Eho,Cho,S_,Ete,who,Aho,HP,yho,Lho,xho,R_,Cte,kho,Sho,UP,Rho,Bho,Pho,B_,wte,$ho,Iho,JP,qho,Nho,jho,P_,Dho,Ate,Gho,Oho,yte,Vho,Xho,Lte,zho,Qho,dw,SRe,ed,$_,xte,cw,Who,kte,Hho,RRe,Yo,fw,Uho,od,Jho,YP,Yho,Kho,KP,Zho,epo,opo,mw,rpo,Ste,tpo,apo,npo,zr,gw,spo,Rte,lpo,ipo,rd,dpo,Bte,cpo,fpo,ZP,mpo,gpo,hpo,Pte,ppo,_po,hw,upo,Ne,pw,bpo,$te,Fpo,vpo,za,Tpo,Ite,Mpo,Epo,qte,Cpo,wpo,Nte,Apo,ypo,Lpo,S,I_,jte,xpo,kpo,e$,Spo,Rpo,Bpo,q_,Dte,Ppo,$po,o$,Ipo,qpo,Npo,N_,Gte,jpo,Dpo,r$,Gpo,Opo,Vpo,j_,Ote,Xpo,zpo,t$,Qpo,Wpo,Hpo,D_,Vte,Upo,Jpo,a$,Ypo,Kpo,Zpo,G_,Xte,e_o,o_o,n$,r_o,t_o,a_o,O_,zte,n_o,s_o,s$,l_o,i_o,d_o,V_,Qte,c_o,f_o,l$,m_o,g_o,h_o,X_,Wte,p_o,__o,i$,u_o,b_o,F_o,z_,Hte,v_o,T_o,d$,M_o,E_o,C_o,Q_,Ute,w_o,A_o,c$,y_o,L_o,x_o,W_,Jte,k_o,S_o,f$,R_o,B_o,P_o,H_,Yte,$_o,I_o,m$,q_o,N_o,j_o,U_,Kte,D_o,G_o,g$,O_o,V_o,X_o,J_,Zte,z_o,Q_o,h$,W_o,H_o,U_o,Y_,eae,J_o,Y_o,p$,K_o,Z_o,euo,K_,oae,ouo,ruo,_$,tuo,auo,nuo,Z_,rae,suo,luo,u$,iuo,duo,cuo,eu,tae,fuo,muo,b$,guo,huo,puo,ou,aae,_uo,uuo,F$,buo,Fuo,vuo,ru,nae,Tuo,Muo,v$,Euo,Cuo,wuo,tu,sae,Auo,yuo,T$,Luo,xuo,kuo,au,lae,Suo,Ruo,M$,Buo,Puo,$uo,nu,iae,Iuo,quo,E$,Nuo,juo,Duo,su,dae,Guo,Ouo,C$,Vuo,Xuo,zuo,lu,cae,Quo,Wuo,w$,Huo,Uuo,Juo,iu,fae,Yuo,Kuo,A$,Zuo,e5o,o5o,du,mae,r5o,t5o,y$,a5o,n5o,s5o,cu,gae,l5o,i5o,L$,d5o,c5o,f5o,fu,hae,m5o,g5o,x$,h5o,p5o,_5o,mu,pae,u5o,b5o,k$,F5o,v5o,T5o,gu,_ae,M5o,E5o,S$,C5o,w5o,A5o,hu,uae,y5o,L5o,R$,x5o,k5o,S5o,pu,bae,R5o,B5o,B$,P5o,$5o,I5o,_u,Fae,q5o,N5o,P$,j5o,D5o,G5o,uu,vae,O5o,V5o,$$,X5o,z5o,Q5o,bu,Tae,W5o,H5o,I$,U5o,J5o,Y5o,Fu,Mae,K5o,Z5o,q$,e2o,o2o,r2o,vu,Eae,t2o,a2o,N$,n2o,s2o,l2o,Tu,i2o,Cae,d2o,c2o,wae,f2o,m2o,Aae,g2o,h2o,_w,BRe,td,Mu,yae,uw,p2o,Lae,_2o,PRe,Ko,bw,u2o,ad,b2o,j$,F2o,v2o,D$,T2o,M2o,E2o,Fw,C2o,xae,w2o,A2o,y2o,Qr,vw,L2o,kae,x2o,k2o,nd,S2o,Sae,R2o,B2o,G$,P2o,$2o,I2o,Rae,q2o,N2o,Tw,j2o,je,Mw,D2o,Bae,G2o,O2o,Qa,V2o,Pae,X2o,z2o,$ae,Q2o,W2o,Iae,H2o,U2o,J2o,$,Eu,qae,Y2o,K2o,O$,Z2o,e1o,o1o,Cu,Nae,r1o,t1o,V$,a1o,n1o,s1o,wu,jae,l1o,i1o,X$,d1o,c1o,f1o,Au,Dae,m1o,g1o,z$,h1o,p1o,_1o,yu,Gae,u1o,b1o,Q$,F1o,v1o,T1o,Lu,Oae,M1o,E1o,W$,C1o,w1o,A1o,xu,Vae,y1o,L1o,H$,x1o,k1o,S1o,ku,Xae,R1o,B1o,U$,P1o,$1o,I1o,Su,zae,q1o,N1o,J$,j1o,D1o,G1o,Ru,Qae,O1o,V1o,Y$,X1o,z1o,Q1o,Bu,Wae,W1o,H1o,K$,U1o,J1o,Y1o,Pu,Hae,K1o,Z1o,Z$,ebo,obo,rbo,$u,Uae,tbo,abo,eI,nbo,sbo,lbo,Iu,Jae,ibo,dbo,oI,cbo,fbo,mbo,qu,Yae,gbo,hbo,rI,pbo,_bo,ubo,Nu,Kae,bbo,Fbo,tI,vbo,Tbo,Mbo,ju,Zae,Ebo,Cbo,aI,wbo,Abo,ybo,Du,ene,Lbo,xbo,nI,kbo,Sbo,Rbo,Gu,one,Bbo,Pbo,sI,$bo,Ibo,qbo,Ou,rne,Nbo,jbo,lI,Dbo,Gbo,Obo,Vu,tne,Vbo,Xbo,iI,zbo,Qbo,Wbo,Xu,ane,Hbo,Ubo,dI,Jbo,Ybo,Kbo,zu,nne,Zbo,eFo,cI,oFo,rFo,tFo,Qu,sne,aFo,nFo,fI,sFo,lFo,iFo,Wu,lne,dFo,cFo,mI,fFo,mFo,gFo,Hu,ine,hFo,pFo,gI,_Fo,uFo,bFo,Uu,dne,FFo,vFo,hI,TFo,MFo,EFo,Ju,cne,CFo,wFo,pI,AFo,yFo,LFo,Yu,fne,xFo,kFo,_I,SFo,RFo,BFo,Ku,mne,PFo,$Fo,uI,IFo,qFo,NFo,Zu,gne,jFo,DFo,bI,GFo,OFo,VFo,e5,hne,XFo,zFo,FI,QFo,WFo,HFo,o5,pne,UFo,JFo,vI,YFo,KFo,ZFo,r5,_ne,evo,ovo,TI,rvo,tvo,avo,t5,une,nvo,svo,MI,lvo,ivo,dvo,a5,cvo,bne,fvo,mvo,Fne,gvo,hvo,vne,pvo,_vo,Ew,$Re,sd,n5,Tne,Cw,uvo,Mne,bvo,IRe,Zo,ww,Fvo,ld,vvo,EI,Tvo,Mvo,CI,Evo,Cvo,wvo,Aw,Avo,Ene,yvo,Lvo,xvo,Wr,yw,kvo,Cne,Svo,Rvo,id,Bvo,wne,Pvo,$vo,wI,Ivo,qvo,Nvo,Ane,jvo,Dvo,Lw,Gvo,De,xw,Ovo,yne,Vvo,Xvo,Wa,zvo,Lne,Qvo,Wvo,xne,Hvo,Uvo,kne,Jvo,Yvo,Kvo,I,s5,Sne,Zvo,eTo,AI,oTo,rTo,tTo,l5,Rne,aTo,nTo,yI,sTo,lTo,iTo,i5,Bne,dTo,cTo,LI,fTo,mTo,gTo,d5,Pne,hTo,pTo,xI,_To,uTo,bTo,c5,$ne,FTo,vTo,kI,TTo,MTo,ETo,f5,Ine,CTo,wTo,SI,ATo,yTo,LTo,m5,qne,xTo,kTo,RI,STo,RTo,BTo,g5,Nne,PTo,$To,BI,ITo,qTo,NTo,h5,jne,jTo,DTo,PI,GTo,OTo,VTo,p5,Dne,XTo,zTo,$I,QTo,WTo,HTo,_5,Gne,UTo,JTo,II,YTo,KTo,ZTo,u5,One,e9o,o9o,qI,r9o,t9o,a9o,b5,Vne,n9o,s9o,NI,l9o,i9o,d9o,F5,Xne,c9o,f9o,jI,m9o,g9o,h9o,v5,zne,p9o,_9o,DI,u9o,b9o,F9o,T5,Qne,v9o,T9o,GI,M9o,E9o,C9o,M5,Wne,w9o,A9o,OI,y9o,L9o,x9o,E5,Hne,k9o,S9o,VI,R9o,B9o,P9o,C5,Une,$9o,I9o,XI,q9o,N9o,j9o,w5,Jne,D9o,G9o,zI,O9o,V9o,X9o,A5,Yne,z9o,Q9o,QI,W9o,H9o,U9o,y5,Kne,J9o,Y9o,WI,K9o,Z9o,eMo,L5,Zne,oMo,rMo,HI,tMo,aMo,nMo,x5,ese,sMo,lMo,UI,iMo,dMo,cMo,k5,ose,fMo,mMo,JI,gMo,hMo,pMo,S5,rse,_Mo,uMo,YI,bMo,FMo,vMo,R5,tse,TMo,MMo,KI,EMo,CMo,wMo,B5,ase,AMo,yMo,ZI,LMo,xMo,kMo,P5,nse,SMo,RMo,eq,BMo,PMo,$Mo,$5,sse,IMo,qMo,oq,NMo,jMo,DMo,I5,lse,GMo,OMo,ise,VMo,XMo,zMo,q5,dse,QMo,WMo,rq,HMo,UMo,JMo,N5,cse,YMo,KMo,tq,ZMo,e4o,o4o,j5,fse,r4o,t4o,aq,a4o,n4o,s4o,D5,mse,l4o,i4o,nq,d4o,c4o,f4o,G5,m4o,gse,g4o,h4o,hse,p4o,_4o,pse,u4o,b4o,kw,qRe,dd,O5,_se,Sw,F4o,use,v4o,NRe,er,Rw,T4o,cd,M4o,sq,E4o,C4o,lq,w4o,A4o,y4o,Bw,L4o,bse,x4o,k4o,S4o,Hr,Pw,R4o,Fse,B4o,P4o,fd,$4o,vse,I4o,q4o,iq,N4o,j4o,D4o,Tse,G4o,O4o,$w,V4o,Ge,Iw,X4o,Mse,z4o,Q4o,Ha,W4o,Ese,H4o,U4o,Cse,J4o,Y4o,wse,K4o,Z4o,eEo,ne,V5,Ase,oEo,rEo,dq,tEo,aEo,nEo,X5,yse,sEo,lEo,cq,iEo,dEo,cEo,z5,Lse,fEo,mEo,fq,gEo,hEo,pEo,Q5,xse,_Eo,uEo,mq,bEo,FEo,vEo,W5,kse,TEo,MEo,gq,EEo,CEo,wEo,H5,Sse,AEo,yEo,hq,LEo,xEo,kEo,U5,Rse,SEo,REo,pq,BEo,PEo,$Eo,J5,Bse,IEo,qEo,_q,NEo,jEo,DEo,Y5,Pse,GEo,OEo,uq,VEo,XEo,zEo,K5,$se,QEo,WEo,bq,HEo,UEo,JEo,Z5,Ise,YEo,KEo,Fq,ZEo,e3o,o3o,e2,qse,r3o,t3o,vq,a3o,n3o,s3o,o2,Nse,l3o,i3o,Tq,d3o,c3o,f3o,r2,jse,m3o,g3o,Mq,h3o,p3o,_3o,t2,Dse,u3o,b3o,Eq,F3o,v3o,T3o,a2,Gse,M3o,E3o,Cq,C3o,w3o,A3o,n2,Ose,y3o,L3o,wq,x3o,k3o,S3o,s2,R3o,Vse,B3o,P3o,Xse,$3o,I3o,zse,q3o,N3o,qw,jRe,md,l2,Qse,Nw,j3o,Wse,D3o,DRe,or,jw,G3o,gd,O3o,Aq,V3o,X3o,yq,z3o,Q3o,W3o,Dw,H3o,Hse,U3o,J3o,Y3o,Ur,Gw,K3o,Use,Z3o,eCo,hd,oCo,Jse,rCo,tCo,Lq,aCo,nCo,sCo,Yse,lCo,iCo,Ow,dCo,Oe,Vw,cCo,Kse,fCo,mCo,Ua,gCo,Zse,hCo,pCo,ele,_Co,uCo,ole,bCo,FCo,vCo,y,i2,rle,TCo,MCo,xq,ECo,CCo,wCo,d2,tle,ACo,yCo,kq,LCo,xCo,kCo,c2,ale,SCo,RCo,Sq,BCo,PCo,$Co,f2,nle,ICo,qCo,Rq,NCo,jCo,DCo,m2,sle,GCo,OCo,Bq,VCo,XCo,zCo,g2,lle,QCo,WCo,Pq,HCo,UCo,JCo,h2,ile,YCo,KCo,$q,ZCo,ewo,owo,p2,dle,rwo,two,Iq,awo,nwo,swo,_2,cle,lwo,iwo,qq,dwo,cwo,fwo,u2,fle,mwo,gwo,Nq,hwo,pwo,_wo,b2,mle,uwo,bwo,jq,Fwo,vwo,Two,F2,gle,Mwo,Ewo,Dq,Cwo,wwo,Awo,v2,hle,ywo,Lwo,Gq,xwo,kwo,Swo,T2,ple,Rwo,Bwo,Oq,Pwo,$wo,Iwo,M2,_le,qwo,Nwo,Vq,jwo,Dwo,Gwo,E2,ule,Owo,Vwo,Xq,Xwo,zwo,Qwo,C2,ble,Wwo,Hwo,zq,Uwo,Jwo,Ywo,w2,Fle,Kwo,Zwo,Qq,e6o,o6o,r6o,A2,vle,t6o,a6o,Wq,n6o,s6o,l6o,y2,Tle,i6o,d6o,Hq,c6o,f6o,m6o,L2,Mle,g6o,h6o,Uq,p6o,_6o,u6o,x2,Ele,b6o,F6o,Jq,v6o,T6o,M6o,k2,Cle,E6o,C6o,Yq,w6o,A6o,y6o,S2,wle,L6o,x6o,Kq,k6o,S6o,R6o,R2,Ale,B6o,P6o,Zq,$6o,I6o,q6o,B2,yle,N6o,j6o,eN,D6o,G6o,O6o,P2,Lle,V6o,X6o,oN,z6o,Q6o,W6o,$2,xle,H6o,U6o,rN,J6o,Y6o,K6o,I2,kle,Z6o,eAo,tN,oAo,rAo,tAo,q2,Sle,aAo,nAo,aN,sAo,lAo,iAo,N2,Rle,dAo,cAo,nN,fAo,mAo,gAo,j2,Ble,hAo,pAo,sN,_Ao,uAo,bAo,D2,Ple,FAo,vAo,lN,TAo,MAo,EAo,G2,$le,CAo,wAo,iN,AAo,yAo,LAo,O2,Ile,xAo,kAo,dN,SAo,RAo,BAo,V2,qle,PAo,$Ao,cN,IAo,qAo,NAo,X2,Nle,jAo,DAo,fN,GAo,OAo,VAo,z2,jle,XAo,zAo,mN,QAo,WAo,HAo,Q2,Dle,UAo,JAo,gN,YAo,KAo,ZAo,W2,Gle,e0o,o0o,hN,r0o,t0o,a0o,H2,Ole,n0o,s0o,pN,l0o,i0o,d0o,U2,Vle,c0o,f0o,_N,m0o,g0o,h0o,J2,Xle,p0o,_0o,uN,u0o,b0o,F0o,Y2,zle,v0o,T0o,bN,M0o,E0o,C0o,K2,Qle,w0o,A0o,FN,y0o,L0o,x0o,Z2,Wle,k0o,S0o,vN,R0o,B0o,P0o,e1,Hle,$0o,I0o,TN,q0o,N0o,j0o,o1,D0o,Ule,G0o,O0o,Jle,V0o,X0o,Yle,z0o,Q0o,Xw,GRe,pd,r1,Kle,zw,W0o,Zle,H0o,ORe,rr,Qw,U0o,_d,J0o,MN,Y0o,K0o,EN,Z0o,eyo,oyo,Ww,ryo,eie,tyo,ayo,nyo,Jr,Hw,syo,oie,lyo,iyo,ud,dyo,rie,cyo,fyo,CN,myo,gyo,hyo,tie,pyo,_yo,Uw,uyo,Ve,Jw,byo,aie,Fyo,vyo,Ja,Tyo,nie,Myo,Eyo,sie,Cyo,wyo,lie,Ayo,yyo,Lyo,G,t1,iie,xyo,kyo,wN,Syo,Ryo,Byo,a1,die,Pyo,$yo,AN,Iyo,qyo,Nyo,n1,cie,jyo,Dyo,yN,Gyo,Oyo,Vyo,s1,fie,Xyo,zyo,LN,Qyo,Wyo,Hyo,l1,mie,Uyo,Jyo,xN,Yyo,Kyo,Zyo,i1,gie,e8o,o8o,kN,r8o,t8o,a8o,d1,hie,n8o,s8o,SN,l8o,i8o,d8o,c1,pie,c8o,f8o,RN,m8o,g8o,h8o,f1,_ie,p8o,_8o,BN,u8o,b8o,F8o,m1,uie,v8o,T8o,PN,M8o,E8o,C8o,g1,bie,w8o,A8o,$N,y8o,L8o,x8o,h1,Fie,k8o,S8o,IN,R8o,B8o,P8o,p1,vie,$8o,I8o,qN,q8o,N8o,j8o,_1,Tie,D8o,G8o,NN,O8o,V8o,X8o,u1,Mie,z8o,Q8o,jN,W8o,H8o,U8o,b1,Eie,J8o,Y8o,DN,K8o,Z8o,eLo,F1,Cie,oLo,rLo,GN,tLo,aLo,nLo,v1,wie,sLo,lLo,ON,iLo,dLo,cLo,T1,Aie,fLo,mLo,VN,gLo,hLo,pLo,M1,yie,_Lo,uLo,XN,bLo,FLo,vLo,E1,Lie,TLo,MLo,zN,ELo,CLo,wLo,C1,xie,ALo,yLo,QN,LLo,xLo,kLo,w1,kie,SLo,RLo,WN,BLo,PLo,$Lo,A1,Sie,ILo,qLo,HN,NLo,jLo,DLo,y1,Rie,GLo,OLo,UN,VLo,XLo,zLo,L1,Bie,QLo,WLo,JN,HLo,ULo,JLo,x1,Pie,YLo,KLo,YN,ZLo,e7o,o7o,k1,$ie,r7o,t7o,KN,a7o,n7o,s7o,S1,l7o,Iie,i7o,d7o,qie,c7o,f7o,Nie,m7o,g7o,Yw,VRe,bd,R1,jie,Kw,h7o,Die,p7o,XRe,tr,Zw,_7o,Fd,u7o,ZN,b7o,F7o,ej,v7o,T7o,M7o,e6,E7o,Gie,C7o,w7o,A7o,Yr,o6,y7o,Oie,L7o,x7o,vd,k7o,Vie,S7o,R7o,oj,B7o,P7o,$7o,Xie,I7o,q7o,r6,N7o,Xe,t6,j7o,zie,D7o,G7o,Ya,O7o,Qie,V7o,X7o,Wie,z7o,Q7o,Hie,W7o,H7o,U7o,da,B1,Uie,J7o,Y7o,rj,K7o,Z7o,exo,P1,Jie,oxo,rxo,tj,txo,axo,nxo,$1,Yie,sxo,lxo,aj,ixo,dxo,cxo,I1,Kie,fxo,mxo,nj,gxo,hxo,pxo,q1,Zie,_xo,uxo,sj,bxo,Fxo,vxo,N1,Txo,ede,Mxo,Exo,ode,Cxo,wxo,rde,Axo,yxo,a6,zRe,Td,j1,tde,n6,Lxo,ade,xxo,QRe,ar,s6,kxo,Md,Sxo,lj,Rxo,Bxo,ij,Pxo,$xo,Ixo,l6,qxo,nde,Nxo,jxo,Dxo,Kr,i6,Gxo,sde,Oxo,Vxo,Ed,Xxo,lde,zxo,Qxo,dj,Wxo,Hxo,Uxo,ide,Jxo,Yxo,d6,Kxo,ze,c6,Zxo,dde,eko,oko,Ka,rko,cde,tko,ako,fde,nko,sko,mde,lko,iko,dko,j,D1,gde,cko,fko,cj,mko,gko,hko,G1,hde,pko,_ko,fj,uko,bko,Fko,O1,pde,vko,Tko,mj,Mko,Eko,Cko,V1,_de,wko,Ako,gj,yko,Lko,xko,X1,ude,kko,Sko,hj,Rko,Bko,Pko,z1,bde,$ko,Iko,pj,qko,Nko,jko,Q1,Fde,Dko,Gko,_j,Oko,Vko,Xko,W1,vde,zko,Qko,uj,Wko,Hko,Uko,H1,Tde,Jko,Yko,bj,Kko,Zko,eSo,U1,Mde,oSo,rSo,Fj,tSo,aSo,nSo,J1,Ede,sSo,lSo,vj,iSo,dSo,cSo,Y1,Cde,fSo,mSo,Tj,gSo,hSo,pSo,K1,wde,_So,uSo,Mj,bSo,FSo,vSo,Z1,Ade,TSo,MSo,Ej,ESo,CSo,wSo,eb,yde,ASo,ySo,Cj,LSo,xSo,kSo,ob,Lde,SSo,RSo,wj,BSo,PSo,$So,rb,xde,ISo,qSo,Aj,NSo,jSo,DSo,tb,kde,GSo,OSo,yj,VSo,XSo,zSo,ab,Sde,QSo,WSo,Lj,HSo,USo,JSo,nb,Rde,YSo,KSo,xj,ZSo,eRo,oRo,sb,Bde,rRo,tRo,kj,aRo,nRo,sRo,lb,Pde,lRo,iRo,Sj,dRo,cRo,fRo,ib,$de,mRo,gRo,Rj,hRo,pRo,_Ro,db,Ide,uRo,bRo,Bj,FRo,vRo,TRo,cb,qde,MRo,ERo,Pj,CRo,wRo,ARo,fb,Nde,yRo,LRo,$j,xRo,kRo,SRo,mb,jde,RRo,BRo,Ij,PRo,$Ro,IRo,gb,Dde,qRo,NRo,qj,jRo,DRo,GRo,hb,Gde,ORo,VRo,Nj,XRo,zRo,QRo,pb,Ode,WRo,HRo,jj,URo,JRo,YRo,_b,Vde,KRo,ZRo,Dj,eBo,oBo,rBo,ub,Xde,tBo,aBo,Gj,nBo,sBo,lBo,bb,zde,iBo,dBo,Oj,cBo,fBo,mBo,Fb,gBo,Qde,hBo,pBo,Wde,_Bo,uBo,Hde,bBo,FBo,f6,WRe,Cd,vb,Ude,m6,vBo,Jde,TBo,HRe,nr,g6,MBo,wd,EBo,Vj,CBo,wBo,Xj,ABo,yBo,LBo,h6,xBo,Yde,kBo,SBo,RBo,Zr,p6,BBo,Kde,PBo,$Bo,Ad,IBo,Zde,qBo,NBo,zj,jBo,DBo,GBo,ece,OBo,VBo,_6,XBo,Qe,u6,zBo,oce,QBo,WBo,Za,HBo,rce,UBo,JBo,tce,YBo,KBo,ace,ZBo,ePo,oPo,R,Tb,nce,rPo,tPo,Qj,aPo,nPo,sPo,Mb,sce,lPo,iPo,Wj,dPo,cPo,fPo,Eb,lce,mPo,gPo,Hj,hPo,pPo,_Po,Cb,ice,uPo,bPo,Uj,FPo,vPo,TPo,wb,dce,MPo,EPo,Jj,CPo,wPo,APo,Ab,cce,yPo,LPo,Yj,xPo,kPo,SPo,yb,fce,RPo,BPo,Kj,PPo,$Po,IPo,Lb,mce,qPo,NPo,Zj,jPo,DPo,GPo,xb,gce,OPo,VPo,eD,XPo,zPo,QPo,kb,hce,WPo,HPo,oD,UPo,JPo,YPo,Sb,pce,KPo,ZPo,rD,e$o,o$o,r$o,Rb,_ce,t$o,a$o,tD,n$o,s$o,l$o,Bb,uce,i$o,d$o,aD,c$o,f$o,m$o,Pb,bce,g$o,h$o,nD,p$o,_$o,u$o,$b,Fce,b$o,F$o,sD,v$o,T$o,M$o,Ib,vce,E$o,C$o,lD,w$o,A$o,y$o,qb,Tce,L$o,x$o,iD,k$o,S$o,R$o,Nb,Mce,B$o,P$o,dD,$$o,I$o,q$o,jb,Ece,N$o,j$o,cD,D$o,G$o,O$o,Db,Cce,V$o,X$o,fD,z$o,Q$o,W$o,Gb,wce,H$o,U$o,mD,J$o,Y$o,K$o,Ob,Ace,Z$o,eIo,gD,oIo,rIo,tIo,Vb,yce,aIo,nIo,hD,sIo,lIo,iIo,Xb,Lce,dIo,cIo,pD,fIo,mIo,gIo,zb,xce,hIo,pIo,_D,_Io,uIo,bIo,Qb,kce,FIo,vIo,uD,TIo,MIo,EIo,Wb,Sce,CIo,wIo,bD,AIo,yIo,LIo,Hb,Rce,xIo,kIo,FD,SIo,RIo,BIo,Ub,Bce,PIo,$Io,vD,IIo,qIo,NIo,Jb,Pce,jIo,DIo,TD,GIo,OIo,VIo,Yb,$ce,XIo,zIo,MD,QIo,WIo,HIo,Kb,Ice,UIo,JIo,ED,YIo,KIo,ZIo,Zb,qce,eqo,oqo,CD,rqo,tqo,aqo,eF,Nce,nqo,sqo,wD,lqo,iqo,dqo,oF,jce,cqo,fqo,AD,mqo,gqo,hqo,rF,Dce,pqo,_qo,yD,uqo,bqo,Fqo,tF,Gce,vqo,Tqo,LD,Mqo,Eqo,Cqo,aF,Oce,wqo,Aqo,xD,yqo,Lqo,xqo,nF,Vce,kqo,Sqo,kD,Rqo,Bqo,Pqo,sF,$qo,Xce,Iqo,qqo,zce,Nqo,jqo,Qce,Dqo,Gqo,b6,URe,yd,lF,Wce,F6,Oqo,Hce,Vqo,JRe,sr,v6,Xqo,Ld,zqo,SD,Qqo,Wqo,RD,Hqo,Uqo,Jqo,T6,Yqo,Uce,Kqo,Zqo,eNo,et,M6,oNo,Jce,rNo,tNo,xd,aNo,Yce,nNo,sNo,BD,lNo,iNo,dNo,Kce,cNo,fNo,E6,mNo,We,C6,gNo,Zce,hNo,pNo,en,_No,efe,uNo,bNo,ofe,FNo,vNo,rfe,TNo,MNo,ENo,tfe,iF,afe,CNo,wNo,PD,ANo,yNo,LNo,dF,xNo,nfe,kNo,SNo,sfe,RNo,BNo,lfe,PNo,$No,w6,YRe,kd,cF,ife,A6,INo,dfe,qNo,KRe,lr,y6,NNo,Sd,jNo,$D,DNo,GNo,ID,ONo,VNo,XNo,L6,zNo,cfe,QNo,WNo,HNo,ot,x6,UNo,ffe,JNo,YNo,Rd,KNo,mfe,ZNo,ejo,qD,ojo,rjo,tjo,gfe,ajo,njo,k6,sjo,He,S6,ljo,hfe,ijo,djo,on,cjo,pfe,fjo,mjo,_fe,gjo,hjo,ufe,pjo,_jo,ujo,ce,fF,bfe,bjo,Fjo,ND,vjo,Tjo,Mjo,mF,Ffe,Ejo,Cjo,jD,wjo,Ajo,yjo,Gs,vfe,Ljo,xjo,DD,kjo,Sjo,GD,Rjo,Bjo,Pjo,gF,Tfe,$jo,Ijo,OD,qjo,Njo,jjo,ma,Mfe,Djo,Gjo,VD,Ojo,Vjo,XD,Xjo,zjo,zD,Qjo,Wjo,Hjo,hF,Efe,Ujo,Jjo,QD,Yjo,Kjo,Zjo,pF,Cfe,eDo,oDo,WD,rDo,tDo,aDo,_F,wfe,nDo,sDo,HD,lDo,iDo,dDo,uF,Afe,cDo,fDo,UD,mDo,gDo,hDo,bF,yfe,pDo,_Do,JD,uDo,bDo,FDo,FF,Lfe,vDo,TDo,YD,MDo,EDo,CDo,vF,xfe,wDo,ADo,KD,yDo,LDo,xDo,TF,kDo,kfe,SDo,RDo,Sfe,BDo,PDo,Rfe,$Do,IDo,R6,ZRe,Bd,MF,Bfe,B6,qDo,Pfe,NDo,eBe,ir,P6,jDo,Pd,DDo,ZD,GDo,ODo,eG,VDo,XDo,zDo,$6,QDo,$fe,WDo,HDo,UDo,rt,I6,JDo,Ife,YDo,KDo,$d,ZDo,qfe,eGo,oGo,oG,rGo,tGo,aGo,Nfe,nGo,sGo,q6,lGo,Ue,N6,iGo,jfe,dGo,cGo,rn,fGo,Dfe,mGo,gGo,Gfe,hGo,pGo,Ofe,_Go,uGo,bGo,Vfe,EF,Xfe,FGo,vGo,rG,TGo,MGo,EGo,CF,CGo,zfe,wGo,AGo,Qfe,yGo,LGo,Wfe,xGo,kGo,j6,oBe,Id,wF,Hfe,D6,SGo,Ufe,RGo,rBe,dr,G6,BGo,qd,PGo,tG,$Go,IGo,aG,qGo,NGo,jGo,O6,DGo,Jfe,GGo,OGo,VGo,tt,V6,XGo,Yfe,zGo,QGo,Nd,WGo,Kfe,HGo,UGo,nG,JGo,YGo,KGo,Zfe,ZGo,eOo,X6,oOo,Je,z6,rOo,eme,tOo,aOo,tn,nOo,ome,sOo,lOo,rme,iOo,dOo,tme,cOo,fOo,mOo,Se,AF,ame,gOo,hOo,sG,pOo,_Oo,uOo,yF,nme,bOo,FOo,lG,vOo,TOo,MOo,LF,sme,EOo,COo,iG,wOo,AOo,yOo,xF,lme,LOo,xOo,dG,kOo,SOo,ROo,kF,ime,BOo,POo,cG,$Oo,IOo,qOo,SF,dme,NOo,jOo,fG,DOo,GOo,OOo,RF,cme,VOo,XOo,mG,zOo,QOo,WOo,BF,fme,HOo,UOo,gG,JOo,YOo,KOo,PF,ZOo,mme,eVo,oVo,gme,rVo,tVo,hme,aVo,nVo,Q6,tBe,jd,$F,pme,W6,sVo,_me,lVo,aBe,cr,H6,iVo,Dd,dVo,hG,cVo,fVo,pG,mVo,gVo,hVo,U6,pVo,ume,_Vo,uVo,bVo,at,J6,FVo,bme,vVo,TVo,Gd,MVo,Fme,EVo,CVo,_G,wVo,AVo,yVo,vme,LVo,xVo,Y6,kVo,Ye,K6,SVo,Tme,RVo,BVo,an,PVo,Mme,$Vo,IVo,Eme,qVo,NVo,Cme,jVo,DVo,GVo,nn,IF,wme,OVo,VVo,uG,XVo,zVo,QVo,qF,Ame,WVo,HVo,bG,UVo,JVo,YVo,NF,yme,KVo,ZVo,FG,eXo,oXo,rXo,jF,Lme,tXo,aXo,vG,nXo,sXo,lXo,DF,iXo,xme,dXo,cXo,kme,fXo,mXo,Sme,gXo,hXo,Z6,nBe,Od,GF,Rme,eA,pXo,Bme,_Xo,sBe,fr,oA,uXo,Vd,bXo,TG,FXo,vXo,MG,TXo,MXo,EXo,rA,CXo,Pme,wXo,AXo,yXo,nt,tA,LXo,$me,xXo,kXo,Xd,SXo,Ime,RXo,BXo,EG,PXo,$Xo,IXo,qme,qXo,NXo,aA,jXo,Ke,nA,DXo,Nme,GXo,OXo,sn,VXo,jme,XXo,zXo,Dme,QXo,WXo,Gme,HXo,UXo,JXo,Re,OF,Ome,YXo,KXo,CG,ZXo,ezo,ozo,VF,Vme,rzo,tzo,wG,azo,nzo,szo,XF,Xme,lzo,izo,AG,dzo,czo,fzo,zF,zme,mzo,gzo,yG,hzo,pzo,_zo,QF,Qme,uzo,bzo,LG,Fzo,vzo,Tzo,WF,Wme,Mzo,Ezo,xG,Czo,wzo,Azo,HF,Hme,yzo,Lzo,kG,xzo,kzo,Szo,UF,Ume,Rzo,Bzo,SG,Pzo,$zo,Izo,JF,qzo,Jme,Nzo,jzo,Yme,Dzo,Gzo,Kme,Ozo,Vzo,sA,lBe,zd,YF,Zme,lA,Xzo,ege,zzo,iBe,mr,iA,Qzo,Qd,Wzo,RG,Hzo,Uzo,BG,Jzo,Yzo,Kzo,dA,Zzo,oge,eQo,oQo,rQo,st,cA,tQo,rge,aQo,nQo,Wd,sQo,tge,lQo,iQo,PG,dQo,cQo,fQo,age,mQo,gQo,fA,hQo,Ze,mA,pQo,nge,_Qo,uQo,ln,bQo,sge,FQo,vQo,lge,TQo,MQo,ige,EQo,CQo,wQo,gA,KF,dge,AQo,yQo,$G,LQo,xQo,kQo,ZF,cge,SQo,RQo,IG,BQo,PQo,$Qo,ev,IQo,fge,qQo,NQo,mge,jQo,DQo,gge,GQo,OQo,hA,dBe,Hd,ov,hge,pA,VQo,pge,XQo,cBe,gr,_A,zQo,Ud,QQo,qG,WQo,HQo,NG,UQo,JQo,YQo,uA,KQo,_ge,ZQo,eWo,oWo,lt,bA,rWo,uge,tWo,aWo,Jd,nWo,bge,sWo,lWo,jG,iWo,dWo,cWo,Fge,fWo,mWo,FA,gWo,eo,vA,hWo,vge,pWo,_Wo,dn,uWo,Tge,bWo,FWo,Mge,vWo,TWo,Ege,MWo,EWo,CWo,cn,rv,Cge,wWo,AWo,DG,yWo,LWo,xWo,tv,wge,kWo,SWo,GG,RWo,BWo,PWo,av,Age,$Wo,IWo,OG,qWo,NWo,jWo,nv,yge,DWo,GWo,VG,OWo,VWo,XWo,sv,zWo,Lge,QWo,WWo,xge,HWo,UWo,kge,JWo,YWo,TA,fBe,Yd,lv,Sge,MA,KWo,Rge,ZWo,mBe,hr,EA,eHo,Kd,oHo,XG,rHo,tHo,zG,aHo,nHo,sHo,CA,lHo,Bge,iHo,dHo,cHo,it,wA,fHo,Pge,mHo,gHo,Zd,hHo,$ge,pHo,_Ho,QG,uHo,bHo,FHo,Ige,vHo,THo,AA,MHo,oo,yA,EHo,qge,CHo,wHo,fn,AHo,Nge,yHo,LHo,jge,xHo,kHo,Dge,SHo,RHo,BHo,ec,iv,Gge,PHo,$Ho,WG,IHo,qHo,NHo,dv,Oge,jHo,DHo,HG,GHo,OHo,VHo,cv,Vge,XHo,zHo,UG,QHo,WHo,HHo,fv,UHo,Xge,JHo,YHo,zge,KHo,ZHo,Qge,eUo,oUo,LA,gBe,oc,mv,Wge,xA,rUo,Hge,tUo,hBe,pr,kA,aUo,rc,nUo,JG,sUo,lUo,YG,iUo,dUo,cUo,SA,fUo,Uge,mUo,gUo,hUo,dt,RA,pUo,Jge,_Uo,uUo,tc,bUo,Yge,FUo,vUo,KG,TUo,MUo,EUo,Kge,CUo,wUo,BA,AUo,ro,PA,yUo,Zge,LUo,xUo,mn,kUo,ehe,SUo,RUo,ohe,BUo,PUo,rhe,$Uo,IUo,qUo,the,gv,ahe,NUo,jUo,ZG,DUo,GUo,OUo,hv,VUo,nhe,XUo,zUo,she,QUo,WUo,lhe,HUo,UUo,$A,pBe,ac,pv,ihe,IA,JUo,dhe,YUo,_Be,_r,qA,KUo,nc,ZUo,eO,eJo,oJo,oO,rJo,tJo,aJo,NA,nJo,che,sJo,lJo,iJo,ct,jA,dJo,fhe,cJo,fJo,sc,mJo,mhe,gJo,hJo,rO,pJo,_Jo,uJo,ghe,bJo,FJo,DA,vJo,to,GA,TJo,hhe,MJo,EJo,gn,CJo,phe,wJo,AJo,_he,yJo,LJo,uhe,xJo,kJo,SJo,bhe,_v,Fhe,RJo,BJo,tO,PJo,$Jo,IJo,uv,qJo,vhe,NJo,jJo,The,DJo,GJo,Mhe,OJo,VJo,OA,uBe,lc,bv,Ehe,VA,XJo,Che,zJo,bBe,ur,XA,QJo,ic,WJo,aO,HJo,UJo,nO,JJo,YJo,KJo,zA,ZJo,whe,eYo,oYo,rYo,ft,QA,tYo,Ahe,aYo,nYo,dc,sYo,yhe,lYo,iYo,sO,dYo,cYo,fYo,Lhe,mYo,gYo,WA,hYo,ao,HA,pYo,xhe,_Yo,uYo,hn,bYo,khe,FYo,vYo,She,TYo,MYo,Rhe,EYo,CYo,wYo,cc,Fv,Bhe,AYo,yYo,lO,LYo,xYo,kYo,vv,Phe,SYo,RYo,iO,BYo,PYo,$Yo,Tv,$he,IYo,qYo,dO,NYo,jYo,DYo,Mv,GYo,Ihe,OYo,VYo,qhe,XYo,zYo,Nhe,QYo,WYo,UA,FBe,fc,Ev,jhe,JA,HYo,Dhe,UYo,vBe,br,YA,JYo,mc,YYo,cO,KYo,ZYo,fO,eKo,oKo,rKo,KA,tKo,Ghe,aKo,nKo,sKo,mt,ZA,lKo,Ohe,iKo,dKo,gc,cKo,Vhe,fKo,mKo,mO,gKo,hKo,pKo,Xhe,_Ko,uKo,e0,bKo,no,o0,FKo,zhe,vKo,TKo,pn,MKo,Qhe,EKo,CKo,Whe,wKo,AKo,Hhe,yKo,LKo,xKo,Uhe,Cv,Jhe,kKo,SKo,gO,RKo,BKo,PKo,wv,$Ko,Yhe,IKo,qKo,Khe,NKo,jKo,Zhe,DKo,GKo,r0,TBe,hc,Av,epe,t0,OKo,ope,VKo,MBe,Fr,a0,XKo,pc,zKo,hO,QKo,WKo,pO,HKo,UKo,JKo,n0,YKo,rpe,KKo,ZKo,eZo,gt,s0,oZo,tpe,rZo,tZo,_c,aZo,ape,nZo,sZo,_O,lZo,iZo,dZo,npe,cZo,fZo,l0,mZo,ho,i0,gZo,spe,hZo,pZo,_n,_Zo,lpe,uZo,bZo,ipe,FZo,vZo,dpe,TZo,MZo,EZo,x,yv,cpe,CZo,wZo,uO,AZo,yZo,LZo,Lv,fpe,xZo,kZo,bO,SZo,RZo,BZo,xv,mpe,PZo,$Zo,FO,IZo,qZo,NZo,kv,gpe,jZo,DZo,vO,GZo,OZo,VZo,Sv,hpe,XZo,zZo,TO,QZo,WZo,HZo,Rv,ppe,UZo,JZo,MO,YZo,KZo,ZZo,Bv,_pe,eer,oer,EO,rer,ter,aer,Pv,upe,ner,ser,CO,ler,ier,der,$v,bpe,cer,fer,wO,mer,ger,her,Iv,Fpe,per,_er,AO,uer,ber,Fer,qv,vpe,ver,Ter,yO,Mer,Eer,Cer,Nv,Tpe,wer,Aer,LO,yer,Ler,xer,jv,Mpe,ker,Ser,xO,Rer,Ber,Per,Dv,Epe,$er,Ier,kO,qer,Ner,jer,Gv,Cpe,Der,Ger,SO,Oer,Ver,Xer,Ov,wpe,zer,Qer,RO,Wer,Her,Uer,Os,Ape,Jer,Yer,BO,Ker,Zer,PO,eor,oor,ror,Vv,ype,tor,aor,$O,nor,sor,lor,Xv,Lpe,ior,dor,IO,cor,mor,gor,zv,xpe,hor,por,qO,_or,uor,bor,Qv,kpe,For,vor,NO,Tor,Mor,Eor,Wv,Spe,Cor,wor,jO,Aor,yor,Lor,Hv,Rpe,xor,kor,DO,Sor,Ror,Bor,Uv,Bpe,Por,$or,GO,Ior,qor,Nor,Jv,Ppe,jor,Dor,OO,Gor,Oor,Vor,Yv,$pe,Xor,zor,VO,Qor,Wor,Hor,Kv,Ipe,Uor,Jor,XO,Yor,Kor,Zor,Zv,qpe,err,orr,zO,rrr,trr,arr,eT,Npe,nrr,srr,QO,lrr,irr,drr,oT,jpe,crr,frr,WO,mrr,grr,hrr,rT,Dpe,prr,_rr,HO,urr,brr,Frr,tT,Gpe,vrr,Trr,UO,Mrr,Err,Crr,aT,Ope,wrr,Arr,JO,yrr,Lrr,xrr,nT,Vpe,krr,Srr,YO,Rrr,Brr,Prr,sT,Xpe,$rr,Irr,KO,qrr,Nrr,jrr,lT,zpe,Drr,Grr,ZO,Orr,Vrr,Xrr,iT,Qpe,zrr,Qrr,eV,Wrr,Hrr,Urr,dT,Wpe,Jrr,Yrr,oV,Krr,Zrr,etr,cT,Hpe,otr,rtr,rV,ttr,atr,ntr,fT,Upe,str,ltr,tV,itr,dtr,ctr,mT,Jpe,ftr,mtr,aV,gtr,htr,ptr,gT,Ype,_tr,utr,nV,btr,Ftr,vtr,hT,Kpe,Ttr,Mtr,sV,Etr,Ctr,wtr,pT,Zpe,Atr,ytr,lV,Ltr,xtr,ktr,e_e,Str,Rtr,d0,EBe,uc,_T,o_e,c0,Btr,r_e,Ptr,CBe,vr,f0,$tr,bc,Itr,iV,qtr,Ntr,dV,jtr,Dtr,Gtr,m0,Otr,t_e,Vtr,Xtr,ztr,ht,g0,Qtr,a_e,Wtr,Htr,Fc,Utr,n_e,Jtr,Ytr,cV,Ktr,Ztr,ear,s_e,oar,rar,h0,tar,po,p0,aar,l_e,nar,sar,un,lar,i_e,iar,dar,d_e,car,far,c_e,mar,gar,har,H,uT,f_e,par,_ar,fV,uar,bar,Far,bT,m_e,Tar,Mar,mV,Ear,Car,war,FT,g_e,Aar,yar,gV,Lar,xar,kar,vT,h_e,Sar,Rar,hV,Bar,Par,$ar,TT,p_e,Iar,qar,pV,Nar,jar,Dar,MT,__e,Gar,Oar,_V,Var,Xar,zar,ET,u_e,Qar,War,uV,Har,Uar,Jar,CT,b_e,Yar,Kar,bV,Zar,enr,onr,wT,F_e,rnr,tnr,FV,anr,nnr,snr,AT,v_e,lnr,inr,vV,dnr,cnr,fnr,yT,T_e,mnr,gnr,TV,hnr,pnr,_nr,LT,M_e,unr,bnr,MV,Fnr,vnr,Tnr,xT,E_e,Mnr,Enr,EV,Cnr,wnr,Anr,kT,C_e,ynr,Lnr,CV,xnr,knr,Snr,ST,w_e,Rnr,Bnr,wV,Pnr,$nr,Inr,RT,A_e,qnr,Nnr,AV,jnr,Dnr,Gnr,BT,y_e,Onr,Vnr,yV,Xnr,znr,Qnr,PT,L_e,Wnr,Hnr,LV,Unr,Jnr,Ynr,$T,x_e,Knr,Znr,xV,esr,osr,rsr,IT,k_e,tsr,asr,kV,nsr,ssr,lsr,qT,S_e,isr,dsr,SV,csr,fsr,msr,NT,R_e,gsr,hsr,RV,psr,_sr,usr,jT,B_e,bsr,Fsr,BV,vsr,Tsr,Msr,P_e,Esr,Csr,_0,wBe,vc,DT,$_e,u0,wsr,I_e,Asr,ABe,Tr,b0,ysr,Tc,Lsr,PV,xsr,ksr,$V,Ssr,Rsr,Bsr,F0,Psr,q_e,$sr,Isr,qsr,pt,v0,Nsr,N_e,jsr,Dsr,Mc,Gsr,j_e,Osr,Vsr,IV,Xsr,zsr,Qsr,D_e,Wsr,Hsr,T0,Usr,_o,M0,Jsr,G_e,Ysr,Ksr,bn,Zsr,O_e,elr,olr,V_e,rlr,tlr,X_e,alr,nlr,slr,fe,GT,z_e,llr,ilr,qV,dlr,clr,flr,OT,Q_e,mlr,glr,NV,hlr,plr,_lr,VT,W_e,ulr,blr,jV,Flr,vlr,Tlr,XT,H_e,Mlr,Elr,DV,Clr,wlr,Alr,zT,U_e,ylr,Llr,GV,xlr,klr,Slr,QT,J_e,Rlr,Blr,OV,Plr,$lr,Ilr,WT,Y_e,qlr,Nlr,VV,jlr,Dlr,Glr,HT,K_e,Olr,Vlr,XV,Xlr,zlr,Qlr,UT,Z_e,Wlr,Hlr,zV,Ulr,Jlr,Ylr,JT,eue,Klr,Zlr,QV,eir,oir,rir,YT,oue,tir,air,WV,nir,sir,lir,KT,rue,iir,dir,HV,cir,fir,mir,tue,gir,hir,E0,yBe,Ec,ZT,aue,C0,pir,nue,_ir,LBe,Mr,w0,uir,Cc,bir,UV,Fir,vir,JV,Tir,Mir,Eir,A0,Cir,sue,wir,Air,yir,_t,y0,Lir,lue,xir,kir,wc,Sir,iue,Rir,Bir,YV,Pir,$ir,Iir,due,qir,Nir,L0,jir,uo,x0,Dir,cue,Gir,Oir,Fn,Vir,fue,Xir,zir,mue,Qir,Wir,gue,Hir,Uir,Jir,k0,e9,hue,Yir,Kir,KV,Zir,edr,odr,o9,pue,rdr,tdr,ZV,adr,ndr,sdr,_ue,ldr,idr,S0,xBe,Ac,r9,uue,R0,ddr,bue,cdr,kBe,Er,B0,fdr,yc,mdr,eX,gdr,hdr,oX,pdr,_dr,udr,P0,bdr,Fue,Fdr,vdr,Tdr,ut,$0,Mdr,vue,Edr,Cdr,Lc,wdr,Tue,Adr,ydr,rX,Ldr,xdr,kdr,Mue,Sdr,Rdr,I0,Bdr,bo,q0,Pdr,Eue,$dr,Idr,vn,qdr,Cue,Ndr,jdr,wue,Ddr,Gdr,Aue,Odr,Vdr,Xdr,J,t9,yue,zdr,Qdr,tX,Wdr,Hdr,Udr,a9,Lue,Jdr,Ydr,aX,Kdr,Zdr,ecr,n9,xue,ocr,rcr,nX,tcr,acr,ncr,s9,kue,scr,lcr,sX,icr,dcr,ccr,l9,Sue,fcr,mcr,lX,gcr,hcr,pcr,i9,Rue,_cr,ucr,iX,bcr,Fcr,vcr,d9,Bue,Tcr,Mcr,dX,Ecr,Ccr,wcr,c9,Pue,Acr,ycr,cX,Lcr,xcr,kcr,f9,$ue,Scr,Rcr,fX,Bcr,Pcr,$cr,m9,Iue,Icr,qcr,mX,Ncr,jcr,Dcr,g9,que,Gcr,Ocr,gX,Vcr,Xcr,zcr,h9,Nue,Qcr,Wcr,hX,Hcr,Ucr,Jcr,p9,jue,Ycr,Kcr,pX,Zcr,efr,ofr,_9,Due,rfr,tfr,_X,afr,nfr,sfr,u9,Gue,lfr,ifr,uX,dfr,cfr,ffr,b9,Oue,mfr,gfr,bX,hfr,pfr,_fr,F9,Vue,ufr,bfr,FX,Ffr,vfr,Tfr,v9,Xue,Mfr,Efr,vX,Cfr,wfr,Afr,T9,zue,yfr,Lfr,TX,xfr,kfr,Sfr,M9,Que,Rfr,Bfr,MX,Pfr,$fr,Ifr,Wue,qfr,Nfr,N0,SBe,xc,E9,Hue,j0,jfr,Uue,Dfr,RBe,Cr,D0,Gfr,kc,Ofr,EX,Vfr,Xfr,CX,zfr,Qfr,Wfr,G0,Hfr,Jue,Ufr,Jfr,Yfr,bt,O0,Kfr,Yue,Zfr,emr,Sc,omr,Kue,rmr,tmr,wX,amr,nmr,smr,Zue,lmr,imr,V0,dmr,Fo,X0,cmr,e5e,fmr,mmr,Tn,gmr,o5e,hmr,pmr,r5e,_mr,umr,t5e,bmr,Fmr,vmr,be,C9,a5e,Tmr,Mmr,AX,Emr,Cmr,wmr,w9,n5e,Amr,ymr,yX,Lmr,xmr,kmr,A9,s5e,Smr,Rmr,LX,Bmr,Pmr,$mr,y9,l5e,Imr,qmr,xX,Nmr,jmr,Dmr,L9,i5e,Gmr,Omr,kX,Vmr,Xmr,zmr,x9,d5e,Qmr,Wmr,SX,Hmr,Umr,Jmr,k9,c5e,Ymr,Kmr,RX,Zmr,egr,ogr,S9,f5e,rgr,tgr,BX,agr,ngr,sgr,R9,m5e,lgr,igr,PX,dgr,cgr,fgr,B9,g5e,mgr,ggr,$X,hgr,pgr,_gr,h5e,ugr,bgr,z0,BBe,Rc,P9,p5e,Q0,Fgr,_5e,vgr,PBe,wr,W0,Tgr,Bc,Mgr,IX,Egr,Cgr,qX,wgr,Agr,ygr,H0,Lgr,u5e,xgr,kgr,Sgr,Ft,U0,Rgr,b5e,Bgr,Pgr,Pc,$gr,F5e,Igr,qgr,NX,Ngr,jgr,Dgr,v5e,Ggr,Ogr,J0,Vgr,vo,Y0,Xgr,T5e,zgr,Qgr,Mn,Wgr,M5e,Hgr,Ugr,E5e,Jgr,Ygr,C5e,Kgr,Zgr,ehr,V,$9,w5e,ohr,rhr,jX,thr,ahr,nhr,I9,A5e,shr,lhr,DX,ihr,dhr,chr,q9,y5e,fhr,mhr,GX,ghr,hhr,phr,N9,L5e,_hr,uhr,OX,bhr,Fhr,vhr,j9,x5e,Thr,Mhr,VX,Ehr,Chr,whr,D9,k5e,Ahr,yhr,XX,Lhr,xhr,khr,G9,S5e,Shr,Rhr,zX,Bhr,Phr,$hr,O9,R5e,Ihr,qhr,QX,Nhr,jhr,Dhr,V9,B5e,Ghr,Ohr,WX,Vhr,Xhr,zhr,X9,P5e,Qhr,Whr,HX,Hhr,Uhr,Jhr,z9,$5e,Yhr,Khr,UX,Zhr,epr,opr,Q9,I5e,rpr,tpr,JX,apr,npr,spr,W9,q5e,lpr,ipr,YX,dpr,cpr,fpr,H9,N5e,mpr,gpr,KX,hpr,ppr,_pr,U9,j5e,upr,bpr,ZX,Fpr,vpr,Tpr,J9,D5e,Mpr,Epr,ez,Cpr,wpr,Apr,Y9,G5e,ypr,Lpr,oz,xpr,kpr,Spr,K9,O5e,Rpr,Bpr,rz,Ppr,$pr,Ipr,Z9,V5e,qpr,Npr,tz,jpr,Dpr,Gpr,eM,X5e,Opr,Vpr,az,Xpr,zpr,Qpr,oM,z5e,Wpr,Hpr,nz,Upr,Jpr,Ypr,rM,Q5e,Kpr,Zpr,sz,e_r,o_r,r_r,tM,W5e,t_r,a_r,lz,n_r,s_r,l_r,aM,H5e,i_r,d_r,iz,c_r,f_r,m_r,nM,U5e,g_r,h_r,dz,p_r,__r,u_r,sM,J5e,b_r,F_r,cz,v_r,T_r,M_r,Y5e,E_r,C_r,K0,$Be,$c,lM,K5e,Z0,w_r,Z5e,A_r,IBe,Ar,ey,y_r,Ic,L_r,fz,x_r,k_r,mz,S_r,R_r,B_r,oy,P_r,e2e,$_r,I_r,q_r,vt,ry,N_r,o2e,j_r,D_r,qc,G_r,r2e,O_r,V_r,gz,X_r,z_r,Q_r,t2e,W_r,H_r,ty,U_r,To,ay,J_r,a2e,Y_r,K_r,En,Z_r,n2e,eur,our,s2e,rur,tur,l2e,aur,nur,sur,se,iM,i2e,lur,iur,hz,dur,cur,fur,dM,d2e,mur,gur,pz,hur,pur,_ur,cM,c2e,uur,bur,_z,Fur,vur,Tur,fM,f2e,Mur,Eur,uz,Cur,wur,Aur,mM,m2e,yur,Lur,bz,xur,kur,Sur,gM,g2e,Rur,Bur,Fz,Pur,$ur,Iur,hM,h2e,qur,Nur,vz,jur,Dur,Gur,pM,p2e,Our,Vur,Tz,Xur,zur,Qur,_M,_2e,Wur,Hur,Mz,Uur,Jur,Yur,uM,u2e,Kur,Zur,Ez,e5r,o5r,r5r,bM,b2e,t5r,a5r,Cz,n5r,s5r,l5r,FM,F2e,i5r,d5r,wz,c5r,f5r,m5r,vM,v2e,g5r,h5r,Az,p5r,_5r,u5r,TM,T2e,b5r,F5r,yz,v5r,T5r,M5r,MM,M2e,E5r,C5r,Lz,w5r,A5r,y5r,EM,E2e,L5r,x5r,xz,k5r,S5r,R5r,CM,C2e,B5r,P5r,kz,$5r,I5r,q5r,w2e,N5r,j5r,ny,qBe,Nc,wM,A2e,sy,D5r,y2e,G5r,NBe,yr,ly,O5r,jc,V5r,Sz,X5r,z5r,Rz,Q5r,W5r,H5r,iy,U5r,L2e,J5r,Y5r,K5r,Tt,dy,Z5r,x2e,e2r,o2r,Dc,r2r,k2e,t2r,a2r,Bz,n2r,s2r,l2r,S2e,i2r,d2r,cy,c2r,Mo,fy,f2r,R2e,m2r,g2r,Cn,h2r,B2e,p2r,_2r,P2e,u2r,b2r,$2e,F2r,v2r,T2r,I2e,AM,q2e,M2r,E2r,Pz,C2r,w2r,A2r,N2e,y2r,L2r,my,jBe,Gc,yM,j2e,gy,x2r,D2e,k2r,DBe,Lr,hy,S2r,Oc,R2r,$z,B2r,P2r,Iz,$2r,I2r,q2r,py,N2r,G2e,j2r,D2r,G2r,Mt,_y,O2r,O2e,V2r,X2r,Vc,z2r,V2e,Q2r,W2r,qz,H2r,U2r,J2r,X2e,Y2r,K2r,uy,Z2r,Eo,by,e1r,z2e,o1r,r1r,wn,t1r,Q2e,a1r,n1r,W2e,s1r,l1r,H2e,i1r,d1r,c1r,Y,LM,U2e,f1r,m1r,Nz,g1r,h1r,p1r,xM,J2e,_1r,u1r,jz,b1r,F1r,v1r,kM,Y2e,T1r,M1r,Dz,E1r,C1r,w1r,SM,K2e,A1r,y1r,Gz,L1r,x1r,k1r,RM,Z2e,S1r,R1r,Oz,B1r,P1r,$1r,BM,e1e,I1r,q1r,Vz,N1r,j1r,D1r,PM,o1e,G1r,O1r,Xz,V1r,X1r,z1r,$M,r1e,Q1r,W1r,zz,H1r,U1r,J1r,IM,t1e,Y1r,K1r,Qz,Z1r,ebr,obr,qM,a1e,rbr,tbr,Wz,abr,nbr,sbr,NM,n1e,lbr,ibr,Hz,dbr,cbr,fbr,jM,s1e,mbr,gbr,Uz,hbr,pbr,_br,DM,l1e,ubr,bbr,Jz,Fbr,vbr,Tbr,GM,i1e,Mbr,Ebr,Yz,Cbr,wbr,Abr,OM,d1e,ybr,Lbr,Kz,xbr,kbr,Sbr,VM,c1e,Rbr,Bbr,Zz,Pbr,$br,Ibr,XM,f1e,qbr,Nbr,eQ,jbr,Dbr,Gbr,zM,m1e,Obr,Vbr,oQ,Xbr,zbr,Qbr,QM,g1e,Wbr,Hbr,rQ,Ubr,Jbr,Ybr,WM,h1e,Kbr,Zbr,tQ,eFr,oFr,rFr,p1e,tFr,aFr,Fy,GBe,Xc,HM,_1e,vy,nFr,u1e,sFr,OBe,xr,Ty,lFr,zc,iFr,aQ,dFr,cFr,nQ,fFr,mFr,gFr,My,hFr,b1e,pFr,_Fr,uFr,Et,Ey,bFr,F1e,FFr,vFr,Qc,TFr,v1e,MFr,EFr,sQ,CFr,wFr,AFr,T1e,yFr,LFr,Cy,xFr,Co,wy,kFr,M1e,SFr,RFr,An,BFr,E1e,PFr,$Fr,C1e,IFr,qFr,w1e,NFr,jFr,DFr,K,UM,A1e,GFr,OFr,lQ,VFr,XFr,zFr,JM,y1e,QFr,WFr,iQ,HFr,UFr,JFr,YM,L1e,YFr,KFr,dQ,ZFr,evr,ovr,KM,x1e,rvr,tvr,cQ,avr,nvr,svr,ZM,k1e,lvr,ivr,fQ,dvr,cvr,fvr,e4,S1e,mvr,gvr,mQ,hvr,pvr,_vr,o4,R1e,uvr,bvr,gQ,Fvr,vvr,Tvr,r4,B1e,Mvr,Evr,hQ,Cvr,wvr,Avr,t4,P1e,yvr,Lvr,pQ,xvr,kvr,Svr,a4,$1e,Rvr,Bvr,_Q,Pvr,$vr,Ivr,n4,I1e,qvr,Nvr,uQ,jvr,Dvr,Gvr,s4,q1e,Ovr,Vvr,bQ,Xvr,zvr,Qvr,l4,N1e,Wvr,Hvr,FQ,Uvr,Jvr,Yvr,i4,j1e,Kvr,Zvr,vQ,eTr,oTr,rTr,d4,D1e,tTr,aTr,TQ,nTr,sTr,lTr,c4,G1e,iTr,dTr,MQ,cTr,fTr,mTr,f4,O1e,gTr,hTr,EQ,pTr,_Tr,uTr,m4,V1e,bTr,FTr,CQ,vTr,TTr,MTr,g4,X1e,ETr,CTr,wQ,wTr,ATr,yTr,h4,z1e,LTr,xTr,AQ,kTr,STr,RTr,Q1e,BTr,PTr,Ay,VBe,Wc,p4,W1e,yy,$Tr,H1e,ITr,XBe,kr,Ly,qTr,Hc,NTr,yQ,jTr,DTr,LQ,GTr,OTr,VTr,xy,XTr,U1e,zTr,QTr,WTr,Ct,ky,HTr,J1e,UTr,JTr,Uc,YTr,Y1e,KTr,ZTr,xQ,e9r,o9r,r9r,K1e,t9r,a9r,Sy,n9r,wo,Ry,s9r,Z1e,l9r,i9r,yn,d9r,ebe,c9r,f9r,obe,m9r,g9r,rbe,h9r,p9r,_9r,tbe,_4,abe,u9r,b9r,kQ,F9r,v9r,T9r,nbe,M9r,E9r,By,zBe,Jc,u4,sbe,Py,C9r,lbe,w9r,QBe,Sr,$y,A9r,Yc,y9r,SQ,L9r,x9r,RQ,k9r,S9r,R9r,Iy,B9r,ibe,P9r,$9r,I9r,wt,qy,q9r,dbe,N9r,j9r,Kc,D9r,cbe,G9r,O9r,BQ,V9r,X9r,z9r,fbe,Q9r,W9r,Ny,H9r,Ao,jy,U9r,mbe,J9r,Y9r,Ln,K9r,gbe,Z9r,eMr,hbe,oMr,rMr,pbe,tMr,aMr,nMr,_be,b4,ube,sMr,lMr,PQ,iMr,dMr,cMr,bbe,fMr,mMr,Dy,WBe,Zc,F4,Fbe,Gy,gMr,vbe,hMr,HBe,Rr,Oy,pMr,ef,_Mr,$Q,uMr,bMr,IQ,FMr,vMr,TMr,Vy,MMr,Tbe,EMr,CMr,wMr,At,Xy,AMr,Mbe,yMr,LMr,of,xMr,Ebe,kMr,SMr,qQ,RMr,BMr,PMr,Cbe,$Mr,IMr,zy,qMr,yo,Qy,NMr,wbe,jMr,DMr,xn,GMr,Abe,OMr,VMr,ybe,XMr,zMr,Lbe,QMr,WMr,HMr,z,v4,xbe,UMr,JMr,NQ,YMr,KMr,ZMr,T4,kbe,e4r,o4r,jQ,r4r,t4r,a4r,M4,Sbe,n4r,s4r,DQ,l4r,i4r,d4r,E4,Rbe,c4r,f4r,GQ,m4r,g4r,h4r,C4,Bbe,p4r,_4r,OQ,u4r,b4r,F4r,w4,Pbe,v4r,T4r,VQ,M4r,E4r,C4r,A4,$be,w4r,A4r,XQ,y4r,L4r,x4r,y4,Ibe,k4r,S4r,zQ,R4r,B4r,P4r,L4,qbe,$4r,I4r,QQ,q4r,N4r,j4r,x4,Nbe,D4r,G4r,WQ,O4r,V4r,X4r,k4,jbe,z4r,Q4r,HQ,W4r,H4r,U4r,S4,Dbe,J4r,Y4r,UQ,K4r,Z4r,eEr,R4,Gbe,oEr,rEr,JQ,tEr,aEr,nEr,B4,Obe,sEr,lEr,YQ,iEr,dEr,cEr,P4,Vbe,fEr,mEr,KQ,gEr,hEr,pEr,$4,Xbe,_Er,uEr,ZQ,bEr,FEr,vEr,I4,zbe,TEr,MEr,eW,EEr,CEr,wEr,q4,Qbe,AEr,yEr,oW,LEr,xEr,kEr,N4,Wbe,SEr,REr,rW,BEr,PEr,$Er,j4,Hbe,IEr,qEr,tW,NEr,jEr,DEr,D4,Ube,GEr,OEr,aW,VEr,XEr,zEr,G4,Jbe,QEr,WEr,nW,HEr,UEr,JEr,O4,Ybe,YEr,KEr,sW,ZEr,e3r,o3r,V4,Kbe,r3r,t3r,lW,a3r,n3r,s3r,X4,Zbe,l3r,i3r,iW,d3r,c3r,f3r,eFe,m3r,g3r,Wy,UBe,rf,z4,oFe,Hy,h3r,rFe,p3r,JBe,Br,Uy,_3r,tf,u3r,dW,b3r,F3r,cW,v3r,T3r,M3r,Jy,E3r,tFe,C3r,w3r,A3r,yt,Yy,y3r,aFe,L3r,x3r,af,k3r,nFe,S3r,R3r,fW,B3r,P3r,$3r,sFe,I3r,q3r,Ky,N3r,Lo,Zy,j3r,lFe,D3r,G3r,kn,O3r,iFe,V3r,X3r,dFe,z3r,Q3r,cFe,W3r,H3r,U3r,ca,Q4,fFe,J3r,Y3r,mW,K3r,Z3r,eCr,W4,mFe,oCr,rCr,gW,tCr,aCr,nCr,H4,gFe,sCr,lCr,hW,iCr,dCr,cCr,U4,hFe,fCr,mCr,pW,gCr,hCr,pCr,J4,pFe,_Cr,uCr,_W,bCr,FCr,vCr,_Fe,TCr,MCr,e8,YBe,nf,Y4,uFe,o8,ECr,bFe,CCr,KBe,Pr,r8,wCr,sf,ACr,uW,yCr,LCr,bW,xCr,kCr,SCr,t8,RCr,FFe,BCr,PCr,$Cr,Lt,a8,ICr,vFe,qCr,NCr,lf,jCr,TFe,DCr,GCr,FW,OCr,VCr,XCr,MFe,zCr,QCr,n8,WCr,xo,s8,HCr,EFe,UCr,JCr,Sn,YCr,CFe,KCr,ZCr,wFe,ewr,owr,AFe,rwr,twr,awr,me,K4,yFe,nwr,swr,vW,lwr,iwr,dwr,Z4,LFe,cwr,fwr,TW,mwr,gwr,hwr,eE,xFe,pwr,_wr,MW,uwr,bwr,Fwr,oE,kFe,vwr,Twr,EW,Mwr,Ewr,Cwr,rE,SFe,wwr,Awr,CW,ywr,Lwr,xwr,tE,RFe,kwr,Swr,wW,Rwr,Bwr,Pwr,aE,BFe,$wr,Iwr,AW,qwr,Nwr,jwr,nE,PFe,Dwr,Gwr,yW,Owr,Vwr,Xwr,sE,$Fe,zwr,Qwr,LW,Wwr,Hwr,Uwr,lE,IFe,Jwr,Ywr,xW,Kwr,Zwr,e6r,iE,qFe,o6r,r6r,kW,t6r,a6r,n6r,dE,NFe,s6r,l6r,SW,i6r,d6r,c6r,jFe,f6r,m6r,l8,ZBe,df,cE,DFe,i8,g6r,GFe,h6r,ePe,$r,d8,p6r,cf,_6r,RW,u6r,b6r,BW,F6r,v6r,T6r,c8,M6r,OFe,E6r,C6r,w6r,xt,f8,A6r,VFe,y6r,L6r,ff,x6r,XFe,k6r,S6r,PW,R6r,B6r,P6r,zFe,$6r,I6r,m8,q6r,ko,g8,N6r,QFe,j6r,D6r,Rn,G6r,WFe,O6r,V6r,HFe,X6r,z6r,UFe,Q6r,W6r,H6r,Fe,fE,JFe,U6r,J6r,$W,Y6r,K6r,Z6r,mE,YFe,eAr,oAr,IW,rAr,tAr,aAr,gE,KFe,nAr,sAr,qW,lAr,iAr,dAr,hE,ZFe,cAr,fAr,NW,mAr,gAr,hAr,pE,eve,pAr,_Ar,jW,uAr,bAr,FAr,_E,ove,vAr,TAr,DW,MAr,EAr,CAr,uE,rve,wAr,AAr,GW,yAr,LAr,xAr,bE,tve,kAr,SAr,OW,RAr,BAr,PAr,FE,ave,$Ar,IAr,VW,qAr,NAr,jAr,vE,nve,DAr,GAr,XW,OAr,VAr,XAr,sve,zAr,QAr,h8,oPe,mf,TE,lve,p8,WAr,ive,HAr,rPe,Ir,_8,UAr,gf,JAr,zW,YAr,KAr,QW,ZAr,e0r,o0r,u8,r0r,dve,t0r,a0r,n0r,kt,b8,s0r,cve,l0r,i0r,hf,d0r,fve,c0r,f0r,WW,m0r,g0r,h0r,mve,p0r,_0r,F8,u0r,So,v8,b0r,gve,F0r,v0r,Bn,T0r,hve,M0r,E0r,pve,C0r,w0r,_ve,A0r,y0r,L0r,Ee,ME,uve,x0r,k0r,HW,S0r,R0r,B0r,EE,bve,P0r,$0r,UW,I0r,q0r,N0r,CE,Fve,j0r,D0r,JW,G0r,O0r,V0r,wE,vve,X0r,z0r,YW,Q0r,W0r,H0r,AE,Tve,U0r,J0r,KW,Y0r,K0r,Z0r,yE,Mve,eyr,oyr,ZW,ryr,tyr,ayr,LE,Eve,nyr,syr,eH,lyr,iyr,dyr,xE,Cve,cyr,fyr,oH,myr,gyr,hyr,kE,wve,pyr,_yr,rH,uyr,byr,Fyr,Ave,vyr,Tyr,T8,tPe,pf,SE,yve,M8,Myr,Lve,Eyr,aPe,qr,E8,Cyr,_f,wyr,tH,Ayr,yyr,aH,Lyr,xyr,kyr,C8,Syr,xve,Ryr,Byr,Pyr,St,w8,$yr,kve,Iyr,qyr,uf,Nyr,Sve,jyr,Dyr,nH,Gyr,Oyr,Vyr,Rve,Xyr,zyr,A8,Qyr,Ro,y8,Wyr,Bve,Hyr,Uyr,Pn,Jyr,Pve,Yyr,Kyr,$ve,Zyr,e8r,Ive,o8r,r8r,t8r,ve,RE,qve,a8r,n8r,sH,s8r,l8r,i8r,BE,Nve,d8r,c8r,lH,f8r,m8r,g8r,PE,jve,h8r,p8r,iH,_8r,u8r,b8r,$E,Dve,F8r,v8r,dH,T8r,M8r,E8r,IE,Gve,C8r,w8r,cH,A8r,y8r,L8r,qE,Ove,x8r,k8r,fH,S8r,R8r,B8r,NE,Vve,P8r,$8r,mH,I8r,q8r,N8r,jE,Xve,j8r,D8r,gH,G8r,O8r,V8r,DE,zve,X8r,z8r,hH,Q8r,W8r,H8r,GE,Qve,U8r,J8r,pH,Y8r,K8r,Z8r,Wve,eLr,oLr,L8,nPe,bf,OE,Hve,x8,rLr,Uve,tLr,sPe,Nr,k8,aLr,Ff,nLr,_H,sLr,lLr,uH,iLr,dLr,cLr,S8,fLr,Jve,mLr,gLr,hLr,Rt,R8,pLr,Yve,_Lr,uLr,vf,bLr,Kve,FLr,vLr,bH,TLr,MLr,ELr,Zve,CLr,wLr,B8,ALr,Bo,P8,yLr,eTe,LLr,xLr,$n,kLr,oTe,SLr,RLr,rTe,BLr,PLr,tTe,$Lr,ILr,qLr,Te,VE,aTe,NLr,jLr,FH,DLr,GLr,OLr,XE,nTe,VLr,XLr,vH,zLr,QLr,WLr,zE,sTe,HLr,ULr,TH,JLr,YLr,KLr,QE,lTe,ZLr,e7r,MH,o7r,r7r,t7r,WE,iTe,a7r,n7r,EH,s7r,l7r,i7r,HE,dTe,d7r,c7r,CH,f7r,m7r,g7r,UE,cTe,h7r,p7r,wH,_7r,u7r,b7r,JE,fTe,F7r,v7r,AH,T7r,M7r,E7r,YE,mTe,C7r,w7r,yH,A7r,y7r,L7r,KE,gTe,x7r,k7r,LH,S7r,R7r,B7r,hTe,P7r,$7r,$8,lPe,Tf,ZE,pTe,I8,I7r,_Te,q7r,iPe,jr,q8,N7r,Mf,j7r,xH,D7r,G7r,kH,O7r,V7r,X7r,N8,z7r,uTe,Q7r,W7r,H7r,Bt,j8,U7r,bTe,J7r,Y7r,Ef,K7r,FTe,Z7r,exr,SH,oxr,rxr,txr,vTe,axr,nxr,D8,sxr,Po,G8,lxr,TTe,ixr,dxr,In,cxr,MTe,fxr,mxr,ETe,gxr,hxr,CTe,pxr,_xr,uxr,Be,e3,wTe,bxr,Fxr,RH,vxr,Txr,Mxr,o3,ATe,Exr,Cxr,BH,wxr,Axr,yxr,r3,yTe,Lxr,xxr,PH,kxr,Sxr,Rxr,t3,LTe,Bxr,Pxr,$H,$xr,Ixr,qxr,a3,xTe,Nxr,jxr,IH,Dxr,Gxr,Oxr,n3,kTe,Vxr,Xxr,qH,zxr,Qxr,Wxr,s3,STe,Hxr,Uxr,NH,Jxr,Yxr,Kxr,l3,RTe,Zxr,ekr,jH,okr,rkr,tkr,BTe,akr,nkr,O8,dPe,Cf,i3,PTe,V8,skr,$Te,lkr,cPe,Dr,X8,ikr,wf,dkr,DH,ckr,fkr,GH,mkr,gkr,hkr,z8,pkr,ITe,_kr,ukr,bkr,Pt,Q8,Fkr,qTe,vkr,Tkr,Af,Mkr,NTe,Ekr,Ckr,OH,wkr,Akr,ykr,jTe,Lkr,xkr,W8,kkr,$o,H8,Skr,DTe,Rkr,Bkr,qn,Pkr,GTe,$kr,Ikr,OTe,qkr,Nkr,VTe,jkr,Dkr,Gkr,Pe,d3,XTe,Okr,Vkr,VH,Xkr,zkr,Qkr,c3,zTe,Wkr,Hkr,XH,Ukr,Jkr,Ykr,f3,QTe,Kkr,Zkr,zH,eSr,oSr,rSr,m3,WTe,tSr,aSr,QH,nSr,sSr,lSr,g3,HTe,iSr,dSr,WH,cSr,fSr,mSr,h3,UTe,gSr,hSr,HH,pSr,_Sr,uSr,p3,JTe,bSr,FSr,UH,vSr,TSr,MSr,_3,YTe,ESr,CSr,JH,wSr,ASr,ySr,KTe,LSr,xSr,U8,fPe,yf,u3,ZTe,J8,kSr,e9e,SSr,mPe,Gr,Y8,RSr,Lf,BSr,YH,PSr,$Sr,KH,ISr,qSr,NSr,K8,jSr,o9e,DSr,GSr,OSr,$t,Z8,VSr,r9e,XSr,zSr,xf,QSr,t9e,WSr,HSr,ZH,USr,JSr,YSr,a9e,KSr,ZSr,eL,eRr,Io,oL,oRr,n9e,rRr,tRr,Nn,aRr,s9e,nRr,sRr,l9e,lRr,iRr,i9e,dRr,cRr,fRr,d9e,b3,c9e,mRr,gRr,eU,hRr,pRr,_Rr,f9e,uRr,bRr,rL,gPe,kf,F3,m9e,tL,FRr,g9e,vRr,hPe,Or,aL,TRr,Sf,MRr,oU,ERr,CRr,rU,wRr,ARr,yRr,nL,LRr,h9e,xRr,kRr,SRr,It,sL,RRr,p9e,BRr,PRr,Rf,$Rr,_9e,IRr,qRr,tU,NRr,jRr,DRr,u9e,GRr,ORr,lL,VRr,qo,iL,XRr,b9e,zRr,QRr,jn,WRr,F9e,HRr,URr,v9e,JRr,YRr,T9e,KRr,ZRr,eBr,dL,v3,M9e,oBr,rBr,aU,tBr,aBr,nBr,T3,E9e,sBr,lBr,nU,iBr,dBr,cBr,C9e,fBr,mBr,cL,pPe,Bf,M3,w9e,fL,gBr,A9e,hBr,_Pe,Vr,mL,pBr,Pf,_Br,sU,uBr,bBr,lU,FBr,vBr,TBr,gL,MBr,y9e,EBr,CBr,wBr,qt,hL,ABr,L9e,yBr,LBr,$f,xBr,x9e,kBr,SBr,iU,RBr,BBr,PBr,k9e,$Br,IBr,pL,qBr,No,_L,NBr,S9e,jBr,DBr,Dn,GBr,R9e,OBr,VBr,B9e,XBr,zBr,P9e,QBr,WBr,HBr,$9e,E3,I9e,UBr,JBr,dU,YBr,KBr,ZBr,q9e,ePr,oPr,uL,uPe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yC=new X({}),LC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new rPr({props:{warning:!0,$$slots:{default:[jCt]},$$scope:{ctx:qf}}}),xC=new X({}),kC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L552"}}),BC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L575"}}),PC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),$C=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L697"}}),IC=new X({}),qC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L358"}}),DC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15529/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L372"}}),GC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),OC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L568"}}),VC=new X({}),XC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),WC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15529/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Ih=new rPr({props:{$$slots:{default:[DCt]},$$scope:{ctx:qf}}}),HC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),UC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),JC=new X({}),YC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L70"}}),ew=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L84"}}),Wh=new rPr({props:{$$slots:{default:[GCt]},$$scope:{ctx:qf}}}),ow=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),rw=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L237"}}),tw=new X({}),aw=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L711"}}),sw=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new X({}),fw=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L718"}}),gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),pw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new X({}),bw=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L733"}}),vw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Mw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),ww=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L740"}}),yw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),xw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sw=new X({}),Rw=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L747"}}),Pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new X({}),jw=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L756"}}),Gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Vw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Qw=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L790"}}),Hw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Jw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L797"}}),o6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),t6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n6=new X({}),s6=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L783"}}),i6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),c6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m6=new X({}),g6=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L765"}}),p6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),_6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),u6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F6=new X({}),v6=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L772"}}),M6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),C6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A6=new X({}),y6=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L806"}}),x6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),S6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new X({}),P6=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L845"}}),I6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),N6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D6=new X({}),G6=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L852"}}),V6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),z6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W6=new X({}),H6=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L875"}}),J6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),K6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L859"}}),tA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),nA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L866"}}),cA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),mA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L884"}}),bA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),vA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L891"}}),wA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),yA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L838"}}),RA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),PA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),qA=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L813"}}),jA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),GA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),XA=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L820"}}),QA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),HA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L829"}}),ZA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),o0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),s0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),i0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),g0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),p0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),v0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),M0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),w0=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),y0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),x0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),B0=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),$0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),q0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),O0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),X0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),W0=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),U0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Y0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),ey=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),ay=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),dy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),fy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),_y=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),by=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new X({}),Ty=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Ey=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),wy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),Ly=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ky=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Ry=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),qy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),jy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Oy=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Xy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Qy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),Wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Yy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Zy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o8=new X({}),r8=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),a8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),s8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i8=new X({}),d8=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),f8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),g8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),h8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p8=new X({}),_8=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),b8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),v8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M8=new X({}),E8=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),w8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),A8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),y8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),L8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x8=new X({}),k8=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),R8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),B8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),P8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I8=new X({}),q8=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),j8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),D8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),G8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),O8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V8=new X({}),X8=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Q8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),W8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),H8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),U8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J8=new X({}),Y8=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),Z8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),eL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),oL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),sL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),lL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),iL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),hL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L389"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),_L=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L417"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),Nf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),EC=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),CC=o("AutoConfig"),On=o(", "),Vn=a("a"),wC=o("AutoModel"),Gi=o(`, and
`),Xn=a("a"),AC=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),_7=o("will create a model that is an instance of "),Vi=a("a"),u7=o("BertModel"),b7=o("."),zo=l(),Ga=a("p"),F7=o("There is one class of "),Gf=a("code"),v7=o("AutoModel"),xIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_Re=l(),Xi=a("h2"),Of=a("a"),tY=a("span"),f(yC.$$.fragment),kIe=l(),aY=a("span"),SIe=o("Extending the Auto Classes"),uRe=l(),zn=a("p"),RIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),nY=a("code"),BIe=o("NewModel"),PIe=o(", make sure you have a "),sY=a("code"),$Ie=o("NewModelConfig"),IIe=o(` then you can add those to the auto
classes like this:`),bRe=l(),f(LC.$$.fragment),FRe=l(),T7=a("p"),qIe=o("You will then be able to use the auto classes like you would usually do!"),vRe=l(),f(Vf.$$.fragment),TRe=l(),zi=a("h2"),Xf=a("a"),lY=a("span"),f(xC.$$.fragment),NIe=l(),iY=a("span"),jIe=o("AutoConfig"),MRe=l(),Qo=a("div"),f(kC.$$.fragment),DIe=l(),SC=a("p"),GIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),M7=a("a"),OIe=o("from_pretrained()"),VIe=o(" class method."),XIe=l(),RC=a("p"),zIe=o("This class cannot be instantiated directly using "),dY=a("code"),QIe=o("__init__()"),WIe=o(" (throws an error)."),HIe=l(),mo=a("div"),f(BC.$$.fragment),UIe=l(),cY=a("p"),JIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YIe=l(),Qi=a("p"),KIe=o("The configuration class to instantiate is selected based on the "),fY=a("code"),ZIe=o("model_type"),eqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),mY=a("code"),oqe=o("pretrained_model_name_or_path"),rqe=o(":"),tqe=l(),F=a("ul"),zf=a("li"),gY=a("strong"),aqe=o("albert"),nqe=o(" \u2014 "),E7=a("a"),sqe=o("AlbertConfig"),lqe=o(" (ALBERT model)"),iqe=l(),Qf=a("li"),hY=a("strong"),dqe=o("bart"),cqe=o(" \u2014 "),C7=a("a"),fqe=o("BartConfig"),mqe=o(" (BART model)"),gqe=l(),Wf=a("li"),pY=a("strong"),hqe=o("beit"),pqe=o(" \u2014 "),w7=a("a"),_qe=o("BeitConfig"),uqe=o(" (BEiT model)"),bqe=l(),Hf=a("li"),_Y=a("strong"),Fqe=o("bert"),vqe=o(" \u2014 "),A7=a("a"),Tqe=o("BertConfig"),Mqe=o(" (BERT model)"),Eqe=l(),Uf=a("li"),uY=a("strong"),Cqe=o("bert-generation"),wqe=o(" \u2014 "),y7=a("a"),Aqe=o("BertGenerationConfig"),yqe=o(" (Bert Generation model)"),Lqe=l(),Jf=a("li"),bY=a("strong"),xqe=o("big_bird"),kqe=o(" \u2014 "),L7=a("a"),Sqe=o("BigBirdConfig"),Rqe=o(" (BigBird model)"),Bqe=l(),Yf=a("li"),FY=a("strong"),Pqe=o("bigbird_pegasus"),$qe=o(" \u2014 "),x7=a("a"),Iqe=o("BigBirdPegasusConfig"),qqe=o(" (BigBirdPegasus model)"),Nqe=l(),Kf=a("li"),vY=a("strong"),jqe=o("blenderbot"),Dqe=o(" \u2014 "),k7=a("a"),Gqe=o("BlenderbotConfig"),Oqe=o(" (Blenderbot model)"),Vqe=l(),Zf=a("li"),TY=a("strong"),Xqe=o("blenderbot-small"),zqe=o(" \u2014 "),S7=a("a"),Qqe=o("BlenderbotSmallConfig"),Wqe=o(" (BlenderbotSmall model)"),Hqe=l(),em=a("li"),MY=a("strong"),Uqe=o("camembert"),Jqe=o(" \u2014 "),R7=a("a"),Yqe=o("CamembertConfig"),Kqe=o(" (CamemBERT model)"),Zqe=l(),om=a("li"),EY=a("strong"),eNe=o("canine"),oNe=o(" \u2014 "),B7=a("a"),rNe=o("CanineConfig"),tNe=o(" (Canine model)"),aNe=l(),rm=a("li"),CY=a("strong"),nNe=o("clip"),sNe=o(" \u2014 "),P7=a("a"),lNe=o("CLIPConfig"),iNe=o(" (CLIP model)"),dNe=l(),tm=a("li"),wY=a("strong"),cNe=o("convbert"),fNe=o(" \u2014 "),$7=a("a"),mNe=o("ConvBertConfig"),gNe=o(" (ConvBERT model)"),hNe=l(),am=a("li"),AY=a("strong"),pNe=o("convnext"),_Ne=o(" \u2014 "),I7=a("a"),uNe=o("ConvNextConfig"),bNe=o(" (ConvNext model)"),FNe=l(),nm=a("li"),yY=a("strong"),vNe=o("ctrl"),TNe=o(" \u2014 "),q7=a("a"),MNe=o("CTRLConfig"),ENe=o(" (CTRL model)"),CNe=l(),sm=a("li"),LY=a("strong"),wNe=o("data2vec-audio"),ANe=o(" \u2014 "),N7=a("a"),yNe=o("Data2VecAudioConfig"),LNe=o(" (Data2VecAudio model)"),xNe=l(),lm=a("li"),xY=a("strong"),kNe=o("data2vec-text"),SNe=o(" \u2014 "),j7=a("a"),RNe=o("Data2VecTextConfig"),BNe=o(" (Data2VecText model)"),PNe=l(),im=a("li"),kY=a("strong"),$Ne=o("deberta"),INe=o(" \u2014 "),D7=a("a"),qNe=o("DebertaConfig"),NNe=o(" (DeBERTa model)"),jNe=l(),dm=a("li"),SY=a("strong"),DNe=o("deberta-v2"),GNe=o(" \u2014 "),G7=a("a"),ONe=o("DebertaV2Config"),VNe=o(" (DeBERTa-v2 model)"),XNe=l(),cm=a("li"),RY=a("strong"),zNe=o("decision_transformer"),QNe=o(" \u2014 "),O7=a("a"),WNe=o("DecisionTransformerConfig"),HNe=o(" (Decision Transformer model)"),UNe=l(),fm=a("li"),BY=a("strong"),JNe=o("deit"),YNe=o(" \u2014 "),V7=a("a"),KNe=o("DeiTConfig"),ZNe=o(" (DeiT model)"),eje=l(),mm=a("li"),PY=a("strong"),oje=o("detr"),rje=o(" \u2014 "),X7=a("a"),tje=o("DetrConfig"),aje=o(" (DETR model)"),nje=l(),gm=a("li"),$Y=a("strong"),sje=o("distilbert"),lje=o(" \u2014 "),z7=a("a"),ije=o("DistilBertConfig"),dje=o(" (DistilBERT model)"),cje=l(),hm=a("li"),IY=a("strong"),fje=o("dpr"),mje=o(" \u2014 "),Q7=a("a"),gje=o("DPRConfig"),hje=o(" (DPR model)"),pje=l(),pm=a("li"),qY=a("strong"),_je=o("dpt"),uje=o(" \u2014 "),W7=a("a"),bje=o("DPTConfig"),Fje=o(" (DPT model)"),vje=l(),_m=a("li"),NY=a("strong"),Tje=o("electra"),Mje=o(" \u2014 "),H7=a("a"),Eje=o("ElectraConfig"),Cje=o(" (ELECTRA model)"),wje=l(),um=a("li"),jY=a("strong"),Aje=o("encoder-decoder"),yje=o(" \u2014 "),U7=a("a"),Lje=o("EncoderDecoderConfig"),xje=o(" (Encoder decoder model)"),kje=l(),bm=a("li"),DY=a("strong"),Sje=o("flaubert"),Rje=o(" \u2014 "),J7=a("a"),Bje=o("FlaubertConfig"),Pje=o(" (FlauBERT model)"),$je=l(),Fm=a("li"),GY=a("strong"),Ije=o("fnet"),qje=o(" \u2014 "),Y7=a("a"),Nje=o("FNetConfig"),jje=o(" (FNet model)"),Dje=l(),vm=a("li"),OY=a("strong"),Gje=o("fsmt"),Oje=o(" \u2014 "),K7=a("a"),Vje=o("FSMTConfig"),Xje=o(" (FairSeq Machine-Translation model)"),zje=l(),Tm=a("li"),VY=a("strong"),Qje=o("funnel"),Wje=o(" \u2014 "),Z7=a("a"),Hje=o("FunnelConfig"),Uje=o(" (Funnel Transformer model)"),Jje=l(),Mm=a("li"),XY=a("strong"),Yje=o("glpn"),Kje=o(" \u2014 "),ex=a("a"),Zje=o("GLPNConfig"),eDe=o(" (GLPN model)"),oDe=l(),Em=a("li"),zY=a("strong"),rDe=o("gpt2"),tDe=o(" \u2014 "),ox=a("a"),aDe=o("GPT2Config"),nDe=o(" (OpenAI GPT-2 model)"),sDe=l(),Cm=a("li"),QY=a("strong"),lDe=o("gpt_neo"),iDe=o(" \u2014 "),rx=a("a"),dDe=o("GPTNeoConfig"),cDe=o(" (GPT Neo model)"),fDe=l(),wm=a("li"),WY=a("strong"),mDe=o("gptj"),gDe=o(" \u2014 "),tx=a("a"),hDe=o("GPTJConfig"),pDe=o(" (GPT-J model)"),_De=l(),Am=a("li"),HY=a("strong"),uDe=o("hubert"),bDe=o(" \u2014 "),ax=a("a"),FDe=o("HubertConfig"),vDe=o(" (Hubert model)"),TDe=l(),ym=a("li"),UY=a("strong"),MDe=o("ibert"),EDe=o(" \u2014 "),nx=a("a"),CDe=o("IBertConfig"),wDe=o(" (I-BERT model)"),ADe=l(),Lm=a("li"),JY=a("strong"),yDe=o("imagegpt"),LDe=o(" \u2014 "),sx=a("a"),xDe=o("ImageGPTConfig"),kDe=o(" (ImageGPT model)"),SDe=l(),xm=a("li"),YY=a("strong"),RDe=o("layoutlm"),BDe=o(" \u2014 "),lx=a("a"),PDe=o("LayoutLMConfig"),$De=o(" (LayoutLM model)"),IDe=l(),km=a("li"),KY=a("strong"),qDe=o("layoutlmv2"),NDe=o(" \u2014 "),ix=a("a"),jDe=o("LayoutLMv2Config"),DDe=o(" (LayoutLMv2 model)"),GDe=l(),Sm=a("li"),ZY=a("strong"),ODe=o("led"),VDe=o(" \u2014 "),dx=a("a"),XDe=o("LEDConfig"),zDe=o(" (LED model)"),QDe=l(),Rm=a("li"),eK=a("strong"),WDe=o("longformer"),HDe=o(" \u2014 "),cx=a("a"),UDe=o("LongformerConfig"),JDe=o(" (Longformer model)"),YDe=l(),Bm=a("li"),oK=a("strong"),KDe=o("luke"),ZDe=o(" \u2014 "),fx=a("a"),eGe=o("LukeConfig"),oGe=o(" (LUKE model)"),rGe=l(),Pm=a("li"),rK=a("strong"),tGe=o("lxmert"),aGe=o(" \u2014 "),mx=a("a"),nGe=o("LxmertConfig"),sGe=o(" (LXMERT model)"),lGe=l(),$m=a("li"),tK=a("strong"),iGe=o("m2m_100"),dGe=o(" \u2014 "),gx=a("a"),cGe=o("M2M100Config"),fGe=o(" (M2M100 model)"),mGe=l(),Im=a("li"),aK=a("strong"),gGe=o("marian"),hGe=o(" \u2014 "),hx=a("a"),pGe=o("MarianConfig"),_Ge=o(" (Marian model)"),uGe=l(),qm=a("li"),nK=a("strong"),bGe=o("maskformer"),FGe=o(" \u2014 "),px=a("a"),vGe=o("MaskFormerConfig"),TGe=o(" (MaskFormer model)"),MGe=l(),Nm=a("li"),sK=a("strong"),EGe=o("mbart"),CGe=o(" \u2014 "),_x=a("a"),wGe=o("MBartConfig"),AGe=o(" (mBART model)"),yGe=l(),jm=a("li"),lK=a("strong"),LGe=o("megatron-bert"),xGe=o(" \u2014 "),ux=a("a"),kGe=o("MegatronBertConfig"),SGe=o(" (MegatronBert model)"),RGe=l(),Dm=a("li"),iK=a("strong"),BGe=o("mobilebert"),PGe=o(" \u2014 "),bx=a("a"),$Ge=o("MobileBertConfig"),IGe=o(" (MobileBERT model)"),qGe=l(),Gm=a("li"),dK=a("strong"),NGe=o("mpnet"),jGe=o(" \u2014 "),Fx=a("a"),DGe=o("MPNetConfig"),GGe=o(" (MPNet model)"),OGe=l(),Om=a("li"),cK=a("strong"),VGe=o("mt5"),XGe=o(" \u2014 "),vx=a("a"),zGe=o("MT5Config"),QGe=o(" (mT5 model)"),WGe=l(),Vm=a("li"),fK=a("strong"),HGe=o("nystromformer"),UGe=o(" \u2014 "),Tx=a("a"),JGe=o("NystromformerConfig"),YGe=o(" (Nystromformer model)"),KGe=l(),Xm=a("li"),mK=a("strong"),ZGe=o("openai-gpt"),eOe=o(" \u2014 "),Mx=a("a"),oOe=o("OpenAIGPTConfig"),rOe=o(" (OpenAI GPT model)"),tOe=l(),zm=a("li"),gK=a("strong"),aOe=o("pegasus"),nOe=o(" \u2014 "),Ex=a("a"),sOe=o("PegasusConfig"),lOe=o(" (Pegasus model)"),iOe=l(),Qm=a("li"),hK=a("strong"),dOe=o("perceiver"),cOe=o(" \u2014 "),Cx=a("a"),fOe=o("PerceiverConfig"),mOe=o(" (Perceiver model)"),gOe=l(),Wm=a("li"),pK=a("strong"),hOe=o("plbart"),pOe=o(" \u2014 "),wx=a("a"),_Oe=o("PLBartConfig"),uOe=o(" (PLBart model)"),bOe=l(),Hm=a("li"),_K=a("strong"),FOe=o("poolformer"),vOe=o(" \u2014 "),Ax=a("a"),TOe=o("PoolFormerConfig"),MOe=o(" (PoolFormer model)"),EOe=l(),Um=a("li"),uK=a("strong"),COe=o("prophetnet"),wOe=o(" \u2014 "),yx=a("a"),AOe=o("ProphetNetConfig"),yOe=o(" (ProphetNet model)"),LOe=l(),Jm=a("li"),bK=a("strong"),xOe=o("qdqbert"),kOe=o(" \u2014 "),Lx=a("a"),SOe=o("QDQBertConfig"),ROe=o(" (QDQBert model)"),BOe=l(),Ym=a("li"),FK=a("strong"),POe=o("rag"),$Oe=o(" \u2014 "),xx=a("a"),IOe=o("RagConfig"),qOe=o(" (RAG model)"),NOe=l(),Km=a("li"),vK=a("strong"),jOe=o("realm"),DOe=o(" \u2014 "),kx=a("a"),GOe=o("RealmConfig"),OOe=o(" (Realm model)"),VOe=l(),Zm=a("li"),TK=a("strong"),XOe=o("reformer"),zOe=o(" \u2014 "),Sx=a("a"),QOe=o("ReformerConfig"),WOe=o(" (Reformer model)"),HOe=l(),eg=a("li"),MK=a("strong"),UOe=o("regnet"),JOe=o(" \u2014 "),Rx=a("a"),YOe=o("RegNetConfig"),KOe=o(" (RegNet model)"),ZOe=l(),og=a("li"),EK=a("strong"),eVe=o("rembert"),oVe=o(" \u2014 "),Bx=a("a"),rVe=o("RemBertConfig"),tVe=o(" (RemBERT model)"),aVe=l(),rg=a("li"),CK=a("strong"),nVe=o("resnet"),sVe=o(" \u2014 "),Px=a("a"),lVe=o("ResNetConfig"),iVe=o(" (ResNet model)"),dVe=l(),tg=a("li"),wK=a("strong"),cVe=o("retribert"),fVe=o(" \u2014 "),$x=a("a"),mVe=o("RetriBertConfig"),gVe=o(" (RetriBERT model)"),hVe=l(),ag=a("li"),AK=a("strong"),pVe=o("roberta"),_Ve=o(" \u2014 "),Ix=a("a"),uVe=o("RobertaConfig"),bVe=o(" (RoBERTa model)"),FVe=l(),ng=a("li"),yK=a("strong"),vVe=o("roformer"),TVe=o(" \u2014 "),qx=a("a"),MVe=o("RoFormerConfig"),EVe=o(" (RoFormer model)"),CVe=l(),sg=a("li"),LK=a("strong"),wVe=o("segformer"),AVe=o(" \u2014 "),Nx=a("a"),yVe=o("SegformerConfig"),LVe=o(" (SegFormer model)"),xVe=l(),lg=a("li"),xK=a("strong"),kVe=o("sew"),SVe=o(" \u2014 "),jx=a("a"),RVe=o("SEWConfig"),BVe=o(" (SEW model)"),PVe=l(),ig=a("li"),kK=a("strong"),$Ve=o("sew-d"),IVe=o(" \u2014 "),Dx=a("a"),qVe=o("SEWDConfig"),NVe=o(" (SEW-D model)"),jVe=l(),dg=a("li"),SK=a("strong"),DVe=o("speech-encoder-decoder"),GVe=o(" \u2014 "),Gx=a("a"),OVe=o("SpeechEncoderDecoderConfig"),VVe=o(" (Speech Encoder decoder model)"),XVe=l(),cg=a("li"),RK=a("strong"),zVe=o("speech_to_text"),QVe=o(" \u2014 "),Ox=a("a"),WVe=o("Speech2TextConfig"),HVe=o(" (Speech2Text model)"),UVe=l(),fg=a("li"),BK=a("strong"),JVe=o("speech_to_text_2"),YVe=o(" \u2014 "),Vx=a("a"),KVe=o("Speech2Text2Config"),ZVe=o(" (Speech2Text2 model)"),eXe=l(),mg=a("li"),PK=a("strong"),oXe=o("splinter"),rXe=o(" \u2014 "),Xx=a("a"),tXe=o("SplinterConfig"),aXe=o(" (Splinter model)"),nXe=l(),gg=a("li"),$K=a("strong"),sXe=o("squeezebert"),lXe=o(" \u2014 "),zx=a("a"),iXe=o("SqueezeBertConfig"),dXe=o(" (SqueezeBERT model)"),cXe=l(),hg=a("li"),IK=a("strong"),fXe=o("swin"),mXe=o(" \u2014 "),Qx=a("a"),gXe=o("SwinConfig"),hXe=o(" (Swin model)"),pXe=l(),pg=a("li"),qK=a("strong"),_Xe=o("t5"),uXe=o(" \u2014 "),Wx=a("a"),bXe=o("T5Config"),FXe=o(" (T5 model)"),vXe=l(),_g=a("li"),NK=a("strong"),TXe=o("tapas"),MXe=o(" \u2014 "),Hx=a("a"),EXe=o("TapasConfig"),CXe=o(" (TAPAS model)"),wXe=l(),ug=a("li"),jK=a("strong"),AXe=o("tapex"),yXe=o(" \u2014 "),Ux=a("a"),LXe=o("BartConfig"),xXe=o(" (TAPEX model)"),kXe=l(),bg=a("li"),DK=a("strong"),SXe=o("transfo-xl"),RXe=o(" \u2014 "),Jx=a("a"),BXe=o("TransfoXLConfig"),PXe=o(" (Transformer-XL model)"),$Xe=l(),Fg=a("li"),GK=a("strong"),IXe=o("trocr"),qXe=o(" \u2014 "),Yx=a("a"),NXe=o("TrOCRConfig"),jXe=o(" (TrOCR model)"),DXe=l(),vg=a("li"),OK=a("strong"),GXe=o("unispeech"),OXe=o(" \u2014 "),Kx=a("a"),VXe=o("UniSpeechConfig"),XXe=o(" (UniSpeech model)"),zXe=l(),Tg=a("li"),VK=a("strong"),QXe=o("unispeech-sat"),WXe=o(" \u2014 "),Zx=a("a"),HXe=o("UniSpeechSatConfig"),UXe=o(" (UniSpeechSat model)"),JXe=l(),Mg=a("li"),XK=a("strong"),YXe=o("van"),KXe=o(" \u2014 "),ek=a("a"),ZXe=o("VanConfig"),eze=o(" (VAN model)"),oze=l(),Eg=a("li"),zK=a("strong"),rze=o("vilt"),tze=o(" \u2014 "),ok=a("a"),aze=o("ViltConfig"),nze=o(" (ViLT model)"),sze=l(),Cg=a("li"),QK=a("strong"),lze=o("vision-encoder-decoder"),ize=o(" \u2014 "),rk=a("a"),dze=o("VisionEncoderDecoderConfig"),cze=o(" (Vision Encoder decoder model)"),fze=l(),wg=a("li"),WK=a("strong"),mze=o("vision-text-dual-encoder"),gze=o(" \u2014 "),tk=a("a"),hze=o("VisionTextDualEncoderConfig"),pze=o(" (VisionTextDualEncoder model)"),_ze=l(),Ag=a("li"),HK=a("strong"),uze=o("visual_bert"),bze=o(" \u2014 "),ak=a("a"),Fze=o("VisualBertConfig"),vze=o(" (VisualBert model)"),Tze=l(),yg=a("li"),UK=a("strong"),Mze=o("vit"),Eze=o(" \u2014 "),nk=a("a"),Cze=o("ViTConfig"),wze=o(" (ViT model)"),Aze=l(),Lg=a("li"),JK=a("strong"),yze=o("vit_mae"),Lze=o(" \u2014 "),sk=a("a"),xze=o("ViTMAEConfig"),kze=o(" (ViTMAE model)"),Sze=l(),xg=a("li"),YK=a("strong"),Rze=o("wav2vec2"),Bze=o(" \u2014 "),lk=a("a"),Pze=o("Wav2Vec2Config"),$ze=o(" (Wav2Vec2 model)"),Ize=l(),kg=a("li"),KK=a("strong"),qze=o("wavlm"),Nze=o(" \u2014 "),ik=a("a"),jze=o("WavLMConfig"),Dze=o(" (WavLM model)"),Gze=l(),Sg=a("li"),ZK=a("strong"),Oze=o("xglm"),Vze=o(" \u2014 "),dk=a("a"),Xze=o("XGLMConfig"),zze=o(" (XGLM model)"),Qze=l(),Rg=a("li"),eZ=a("strong"),Wze=o("xlm"),Hze=o(" \u2014 "),ck=a("a"),Uze=o("XLMConfig"),Jze=o(" (XLM model)"),Yze=l(),Bg=a("li"),oZ=a("strong"),Kze=o("xlm-prophetnet"),Zze=o(" \u2014 "),fk=a("a"),eQe=o("XLMProphetNetConfig"),oQe=o(" (XLMProphetNet model)"),rQe=l(),Pg=a("li"),rZ=a("strong"),tQe=o("xlm-roberta"),aQe=o(" \u2014 "),mk=a("a"),nQe=o("XLMRobertaConfig"),sQe=o(" (XLM-RoBERTa model)"),lQe=l(),$g=a("li"),tZ=a("strong"),iQe=o("xlm-roberta-xl"),dQe=o(" \u2014 "),gk=a("a"),cQe=o("XLMRobertaXLConfig"),fQe=o(" (XLM-RoBERTa-XL model)"),mQe=l(),Ig=a("li"),aZ=a("strong"),gQe=o("xlnet"),hQe=o(" \u2014 "),hk=a("a"),pQe=o("XLNetConfig"),_Qe=o(" (XLNet model)"),uQe=l(),qg=a("li"),nZ=a("strong"),bQe=o("yoso"),FQe=o(" \u2014 "),pk=a("a"),vQe=o("YosoConfig"),TQe=o(" (YOSO model)"),MQe=l(),sZ=a("p"),EQe=o("Examples:"),CQe=l(),f(PC.$$.fragment),wQe=l(),Ng=a("div"),f($C.$$.fragment),AQe=l(),lZ=a("p"),yQe=o("Register a new configuration for this class."),ERe=l(),Wi=a("h2"),jg=a("a"),iZ=a("span"),f(IC.$$.fragment),LQe=l(),dZ=a("span"),xQe=o("AutoTokenizer"),CRe=l(),Wo=a("div"),f(qC.$$.fragment),kQe=l(),NC=a("p"),SQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_k=a("a"),RQe=o("AutoTokenizer.from_pretrained()"),BQe=o(" class method."),PQe=l(),jC=a("p"),$Qe=o("This class cannot be instantiated directly using "),cZ=a("code"),IQe=o("__init__()"),qQe=o(" (throws an error)."),NQe=l(),go=a("div"),f(DC.$$.fragment),jQe=l(),fZ=a("p"),DQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GQe=l(),Oa=a("p"),OQe=o("The tokenizer class to instantiate is selected based on the "),mZ=a("code"),VQe=o("model_type"),XQe=o(` property of the config object (either
passed as an argument or loaded from `),gZ=a("code"),zQe=o("pretrained_model_name_or_path"),QQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hZ=a("code"),WQe=o("pretrained_model_name_or_path"),HQe=o(":"),UQe=l(),E=a("ul"),Qn=a("li"),pZ=a("strong"),JQe=o("albert"),YQe=o(" \u2014 "),uk=a("a"),KQe=o("AlbertTokenizer"),ZQe=o(" or "),bk=a("a"),eWe=o("AlbertTokenizerFast"),oWe=o(" (ALBERT model)"),rWe=l(),Wn=a("li"),_Z=a("strong"),tWe=o("bart"),aWe=o(" \u2014 "),Fk=a("a"),nWe=o("BartTokenizer"),sWe=o(" or "),vk=a("a"),lWe=o("BartTokenizerFast"),iWe=o(" (BART model)"),dWe=l(),Hn=a("li"),uZ=a("strong"),cWe=o("barthez"),fWe=o(" \u2014 "),Tk=a("a"),mWe=o("BarthezTokenizer"),gWe=o(" or "),Mk=a("a"),hWe=o("BarthezTokenizerFast"),pWe=o(" (BARThez model)"),_We=l(),Dg=a("li"),bZ=a("strong"),uWe=o("bartpho"),bWe=o(" \u2014 "),Ek=a("a"),FWe=o("BartphoTokenizer"),vWe=o(" (BARTpho model)"),TWe=l(),Un=a("li"),FZ=a("strong"),MWe=o("bert"),EWe=o(" \u2014 "),Ck=a("a"),CWe=o("BertTokenizer"),wWe=o(" or "),wk=a("a"),AWe=o("BertTokenizerFast"),yWe=o(" (BERT model)"),LWe=l(),Gg=a("li"),vZ=a("strong"),xWe=o("bert-generation"),kWe=o(" \u2014 "),Ak=a("a"),SWe=o("BertGenerationTokenizer"),RWe=o(" (Bert Generation model)"),BWe=l(),Og=a("li"),TZ=a("strong"),PWe=o("bert-japanese"),$We=o(" \u2014 "),yk=a("a"),IWe=o("BertJapaneseTokenizer"),qWe=o(" (BertJapanese model)"),NWe=l(),Vg=a("li"),MZ=a("strong"),jWe=o("bertweet"),DWe=o(" \u2014 "),Lk=a("a"),GWe=o("BertweetTokenizer"),OWe=o(" (Bertweet model)"),VWe=l(),Jn=a("li"),EZ=a("strong"),XWe=o("big_bird"),zWe=o(" \u2014 "),xk=a("a"),QWe=o("BigBirdTokenizer"),WWe=o(" or "),kk=a("a"),HWe=o("BigBirdTokenizerFast"),UWe=o(" (BigBird model)"),JWe=l(),Yn=a("li"),CZ=a("strong"),YWe=o("bigbird_pegasus"),KWe=o(" \u2014 "),Sk=a("a"),ZWe=o("PegasusTokenizer"),eHe=o(" or "),Rk=a("a"),oHe=o("PegasusTokenizerFast"),rHe=o(" (BigBirdPegasus model)"),tHe=l(),Kn=a("li"),wZ=a("strong"),aHe=o("blenderbot"),nHe=o(" \u2014 "),Bk=a("a"),sHe=o("BlenderbotTokenizer"),lHe=o(" or "),Pk=a("a"),iHe=o("BlenderbotTokenizerFast"),dHe=o(" (Blenderbot model)"),cHe=l(),Xg=a("li"),AZ=a("strong"),fHe=o("blenderbot-small"),mHe=o(" \u2014 "),$k=a("a"),gHe=o("BlenderbotSmallTokenizer"),hHe=o(" (BlenderbotSmall model)"),pHe=l(),zg=a("li"),yZ=a("strong"),_He=o("byt5"),uHe=o(" \u2014 "),Ik=a("a"),bHe=o("ByT5Tokenizer"),FHe=o(" (ByT5 model)"),vHe=l(),Zn=a("li"),LZ=a("strong"),THe=o("camembert"),MHe=o(" \u2014 "),qk=a("a"),EHe=o("CamembertTokenizer"),CHe=o(" or "),Nk=a("a"),wHe=o("CamembertTokenizerFast"),AHe=o(" (CamemBERT model)"),yHe=l(),Qg=a("li"),xZ=a("strong"),LHe=o("canine"),xHe=o(" \u2014 "),jk=a("a"),kHe=o("CanineTokenizer"),SHe=o(" (Canine model)"),RHe=l(),es=a("li"),kZ=a("strong"),BHe=o("clip"),PHe=o(" \u2014 "),Dk=a("a"),$He=o("CLIPTokenizer"),IHe=o(" or "),Gk=a("a"),qHe=o("CLIPTokenizerFast"),NHe=o(" (CLIP model)"),jHe=l(),os=a("li"),SZ=a("strong"),DHe=o("convbert"),GHe=o(" \u2014 "),Ok=a("a"),OHe=o("ConvBertTokenizer"),VHe=o(" or "),Vk=a("a"),XHe=o("ConvBertTokenizerFast"),zHe=o(" (ConvBERT model)"),QHe=l(),rs=a("li"),RZ=a("strong"),WHe=o("cpm"),HHe=o(" \u2014 "),Xk=a("a"),UHe=o("CpmTokenizer"),JHe=o(" or "),BZ=a("code"),YHe=o("CpmTokenizerFast"),KHe=o(" (CPM model)"),ZHe=l(),Wg=a("li"),PZ=a("strong"),eUe=o("ctrl"),oUe=o(" \u2014 "),zk=a("a"),rUe=o("CTRLTokenizer"),tUe=o(" (CTRL model)"),aUe=l(),ts=a("li"),$Z=a("strong"),nUe=o("deberta"),sUe=o(" \u2014 "),Qk=a("a"),lUe=o("DebertaTokenizer"),iUe=o(" or "),Wk=a("a"),dUe=o("DebertaTokenizerFast"),cUe=o(" (DeBERTa model)"),fUe=l(),as=a("li"),IZ=a("strong"),mUe=o("deberta-v2"),gUe=o(" \u2014 "),Hk=a("a"),hUe=o("DebertaV2Tokenizer"),pUe=o(" or "),Uk=a("a"),_Ue=o("DebertaV2TokenizerFast"),uUe=o(" (DeBERTa-v2 model)"),bUe=l(),ns=a("li"),qZ=a("strong"),FUe=o("distilbert"),vUe=o(" \u2014 "),Jk=a("a"),TUe=o("DistilBertTokenizer"),MUe=o(" or "),Yk=a("a"),EUe=o("DistilBertTokenizerFast"),CUe=o(" (DistilBERT model)"),wUe=l(),ss=a("li"),NZ=a("strong"),AUe=o("dpr"),yUe=o(" \u2014 "),Kk=a("a"),LUe=o("DPRQuestionEncoderTokenizer"),xUe=o(" or "),Zk=a("a"),kUe=o("DPRQuestionEncoderTokenizerFast"),SUe=o(" (DPR model)"),RUe=l(),ls=a("li"),jZ=a("strong"),BUe=o("electra"),PUe=o(" \u2014 "),eS=a("a"),$Ue=o("ElectraTokenizer"),IUe=o(" or "),oS=a("a"),qUe=o("ElectraTokenizerFast"),NUe=o(" (ELECTRA model)"),jUe=l(),Hg=a("li"),DZ=a("strong"),DUe=o("flaubert"),GUe=o(" \u2014 "),rS=a("a"),OUe=o("FlaubertTokenizer"),VUe=o(" (FlauBERT model)"),XUe=l(),is=a("li"),GZ=a("strong"),zUe=o("fnet"),QUe=o(" \u2014 "),tS=a("a"),WUe=o("FNetTokenizer"),HUe=o(" or "),aS=a("a"),UUe=o("FNetTokenizerFast"),JUe=o(" (FNet model)"),YUe=l(),Ug=a("li"),OZ=a("strong"),KUe=o("fsmt"),ZUe=o(" \u2014 "),nS=a("a"),eJe=o("FSMTTokenizer"),oJe=o(" (FairSeq Machine-Translation model)"),rJe=l(),ds=a("li"),VZ=a("strong"),tJe=o("funnel"),aJe=o(" \u2014 "),sS=a("a"),nJe=o("FunnelTokenizer"),sJe=o(" or "),lS=a("a"),lJe=o("FunnelTokenizerFast"),iJe=o(" (Funnel Transformer model)"),dJe=l(),cs=a("li"),XZ=a("strong"),cJe=o("gpt2"),fJe=o(" \u2014 "),iS=a("a"),mJe=o("GPT2Tokenizer"),gJe=o(" or "),dS=a("a"),hJe=o("GPT2TokenizerFast"),pJe=o(" (OpenAI GPT-2 model)"),_Je=l(),fs=a("li"),zZ=a("strong"),uJe=o("gpt_neo"),bJe=o(" \u2014 "),cS=a("a"),FJe=o("GPT2Tokenizer"),vJe=o(" or "),fS=a("a"),TJe=o("GPT2TokenizerFast"),MJe=o(" (GPT Neo model)"),EJe=l(),ms=a("li"),QZ=a("strong"),CJe=o("herbert"),wJe=o(" \u2014 "),mS=a("a"),AJe=o("HerbertTokenizer"),yJe=o(" or "),gS=a("a"),LJe=o("HerbertTokenizerFast"),xJe=o(" (HerBERT model)"),kJe=l(),Jg=a("li"),WZ=a("strong"),SJe=o("hubert"),RJe=o(" \u2014 "),hS=a("a"),BJe=o("Wav2Vec2CTCTokenizer"),PJe=o(" (Hubert model)"),$Je=l(),gs=a("li"),HZ=a("strong"),IJe=o("ibert"),qJe=o(" \u2014 "),pS=a("a"),NJe=o("RobertaTokenizer"),jJe=o(" or "),_S=a("a"),DJe=o("RobertaTokenizerFast"),GJe=o(" (I-BERT model)"),OJe=l(),hs=a("li"),UZ=a("strong"),VJe=o("layoutlm"),XJe=o(" \u2014 "),uS=a("a"),zJe=o("LayoutLMTokenizer"),QJe=o(" or "),bS=a("a"),WJe=o("LayoutLMTokenizerFast"),HJe=o(" (LayoutLM model)"),UJe=l(),ps=a("li"),JZ=a("strong"),JJe=o("layoutlmv2"),YJe=o(" \u2014 "),FS=a("a"),KJe=o("LayoutLMv2Tokenizer"),ZJe=o(" or "),vS=a("a"),eYe=o("LayoutLMv2TokenizerFast"),oYe=o(" (LayoutLMv2 model)"),rYe=l(),_s=a("li"),YZ=a("strong"),tYe=o("layoutxlm"),aYe=o(" \u2014 "),TS=a("a"),nYe=o("LayoutXLMTokenizer"),sYe=o(" or "),MS=a("a"),lYe=o("LayoutXLMTokenizerFast"),iYe=o(" (LayoutXLM model)"),dYe=l(),us=a("li"),KZ=a("strong"),cYe=o("led"),fYe=o(" \u2014 "),ES=a("a"),mYe=o("LEDTokenizer"),gYe=o(" or "),CS=a("a"),hYe=o("LEDTokenizerFast"),pYe=o(" (LED model)"),_Ye=l(),bs=a("li"),ZZ=a("strong"),uYe=o("longformer"),bYe=o(" \u2014 "),wS=a("a"),FYe=o("LongformerTokenizer"),vYe=o(" or "),AS=a("a"),TYe=o("LongformerTokenizerFast"),MYe=o(" (Longformer model)"),EYe=l(),Yg=a("li"),eee=a("strong"),CYe=o("luke"),wYe=o(" \u2014 "),yS=a("a"),AYe=o("LukeTokenizer"),yYe=o(" (LUKE model)"),LYe=l(),Fs=a("li"),oee=a("strong"),xYe=o("lxmert"),kYe=o(" \u2014 "),LS=a("a"),SYe=o("LxmertTokenizer"),RYe=o(" or "),xS=a("a"),BYe=o("LxmertTokenizerFast"),PYe=o(" (LXMERT model)"),$Ye=l(),Kg=a("li"),ree=a("strong"),IYe=o("m2m_100"),qYe=o(" \u2014 "),kS=a("a"),NYe=o("M2M100Tokenizer"),jYe=o(" (M2M100 model)"),DYe=l(),Zg=a("li"),tee=a("strong"),GYe=o("marian"),OYe=o(" \u2014 "),SS=a("a"),VYe=o("MarianTokenizer"),XYe=o(" (Marian model)"),zYe=l(),vs=a("li"),aee=a("strong"),QYe=o("mbart"),WYe=o(" \u2014 "),RS=a("a"),HYe=o("MBartTokenizer"),UYe=o(" or "),BS=a("a"),JYe=o("MBartTokenizerFast"),YYe=o(" (mBART model)"),KYe=l(),Ts=a("li"),nee=a("strong"),ZYe=o("mbart50"),eKe=o(" \u2014 "),PS=a("a"),oKe=o("MBart50Tokenizer"),rKe=o(" or "),$S=a("a"),tKe=o("MBart50TokenizerFast"),aKe=o(" (mBART-50 model)"),nKe=l(),eh=a("li"),see=a("strong"),sKe=o("mluke"),lKe=o(" \u2014 "),IS=a("a"),iKe=o("MLukeTokenizer"),dKe=o(" (mLUKE model)"),cKe=l(),Ms=a("li"),lee=a("strong"),fKe=o("mobilebert"),mKe=o(" \u2014 "),qS=a("a"),gKe=o("MobileBertTokenizer"),hKe=o(" or "),NS=a("a"),pKe=o("MobileBertTokenizerFast"),_Ke=o(" (MobileBERT model)"),uKe=l(),Es=a("li"),iee=a("strong"),bKe=o("mpnet"),FKe=o(" \u2014 "),jS=a("a"),vKe=o("MPNetTokenizer"),TKe=o(" or "),DS=a("a"),MKe=o("MPNetTokenizerFast"),EKe=o(" (MPNet model)"),CKe=l(),Cs=a("li"),dee=a("strong"),wKe=o("mt5"),AKe=o(" \u2014 "),GS=a("a"),yKe=o("MT5Tokenizer"),LKe=o(" or "),OS=a("a"),xKe=o("MT5TokenizerFast"),kKe=o(" (mT5 model)"),SKe=l(),ws=a("li"),cee=a("strong"),RKe=o("openai-gpt"),BKe=o(" \u2014 "),VS=a("a"),PKe=o("OpenAIGPTTokenizer"),$Ke=o(" or "),XS=a("a"),IKe=o("OpenAIGPTTokenizerFast"),qKe=o(" (OpenAI GPT model)"),NKe=l(),As=a("li"),fee=a("strong"),jKe=o("pegasus"),DKe=o(" \u2014 "),zS=a("a"),GKe=o("PegasusTokenizer"),OKe=o(" or "),QS=a("a"),VKe=o("PegasusTokenizerFast"),XKe=o(" (Pegasus model)"),zKe=l(),oh=a("li"),mee=a("strong"),QKe=o("perceiver"),WKe=o(" \u2014 "),WS=a("a"),HKe=o("PerceiverTokenizer"),UKe=o(" (Perceiver model)"),JKe=l(),rh=a("li"),gee=a("strong"),YKe=o("phobert"),KKe=o(" \u2014 "),HS=a("a"),ZKe=o("PhobertTokenizer"),eZe=o(" (PhoBERT model)"),oZe=l(),th=a("li"),hee=a("strong"),rZe=o("plbart"),tZe=o(" \u2014 "),US=a("a"),aZe=o("PLBartTokenizer"),nZe=o(" (PLBart model)"),sZe=l(),ah=a("li"),pee=a("strong"),lZe=o("prophetnet"),iZe=o(" \u2014 "),JS=a("a"),dZe=o("ProphetNetTokenizer"),cZe=o(" (ProphetNet model)"),fZe=l(),ys=a("li"),_ee=a("strong"),mZe=o("qdqbert"),gZe=o(" \u2014 "),YS=a("a"),hZe=o("BertTokenizer"),pZe=o(" or "),KS=a("a"),_Ze=o("BertTokenizerFast"),uZe=o(" (QDQBert model)"),bZe=l(),nh=a("li"),uee=a("strong"),FZe=o("rag"),vZe=o(" \u2014 "),ZS=a("a"),TZe=o("RagTokenizer"),MZe=o(" (RAG model)"),EZe=l(),Ls=a("li"),bee=a("strong"),CZe=o("realm"),wZe=o(" \u2014 "),eR=a("a"),AZe=o("RealmTokenizer"),yZe=o(" or "),oR=a("a"),LZe=o("RealmTokenizerFast"),xZe=o(" (Realm model)"),kZe=l(),xs=a("li"),Fee=a("strong"),SZe=o("reformer"),RZe=o(" \u2014 "),rR=a("a"),BZe=o("ReformerTokenizer"),PZe=o(" or "),tR=a("a"),$Ze=o("ReformerTokenizerFast"),IZe=o(" (Reformer model)"),qZe=l(),ks=a("li"),vee=a("strong"),NZe=o("rembert"),jZe=o(" \u2014 "),aR=a("a"),DZe=o("RemBertTokenizer"),GZe=o(" or "),nR=a("a"),OZe=o("RemBertTokenizerFast"),VZe=o(" (RemBERT model)"),XZe=l(),Ss=a("li"),Tee=a("strong"),zZe=o("retribert"),QZe=o(" \u2014 "),sR=a("a"),WZe=o("RetriBertTokenizer"),HZe=o(" or "),lR=a("a"),UZe=o("RetriBertTokenizerFast"),JZe=o(" (RetriBERT model)"),YZe=l(),Rs=a("li"),Mee=a("strong"),KZe=o("roberta"),ZZe=o(" \u2014 "),iR=a("a"),eeo=o("RobertaTokenizer"),oeo=o(" or "),dR=a("a"),reo=o("RobertaTokenizerFast"),teo=o(" (RoBERTa model)"),aeo=l(),Bs=a("li"),Eee=a("strong"),neo=o("roformer"),seo=o(" \u2014 "),cR=a("a"),leo=o("RoFormerTokenizer"),ieo=o(" or "),fR=a("a"),deo=o("RoFormerTokenizerFast"),ceo=o(" (RoFormer model)"),feo=l(),sh=a("li"),Cee=a("strong"),meo=o("speech_to_text"),geo=o(" \u2014 "),mR=a("a"),heo=o("Speech2TextTokenizer"),peo=o(" (Speech2Text model)"),_eo=l(),lh=a("li"),wee=a("strong"),ueo=o("speech_to_text_2"),beo=o(" \u2014 "),gR=a("a"),Feo=o("Speech2Text2Tokenizer"),veo=o(" (Speech2Text2 model)"),Teo=l(),Ps=a("li"),Aee=a("strong"),Meo=o("splinter"),Eeo=o(" \u2014 "),hR=a("a"),Ceo=o("SplinterTokenizer"),weo=o(" or "),pR=a("a"),Aeo=o("SplinterTokenizerFast"),yeo=o(" (Splinter model)"),Leo=l(),$s=a("li"),yee=a("strong"),xeo=o("squeezebert"),keo=o(" \u2014 "),_R=a("a"),Seo=o("SqueezeBertTokenizer"),Reo=o(" or "),uR=a("a"),Beo=o("SqueezeBertTokenizerFast"),Peo=o(" (SqueezeBERT model)"),$eo=l(),Is=a("li"),Lee=a("strong"),Ieo=o("t5"),qeo=o(" \u2014 "),bR=a("a"),Neo=o("T5Tokenizer"),jeo=o(" or "),FR=a("a"),Deo=o("T5TokenizerFast"),Geo=o(" (T5 model)"),Oeo=l(),ih=a("li"),xee=a("strong"),Veo=o("tapas"),Xeo=o(" \u2014 "),vR=a("a"),zeo=o("TapasTokenizer"),Qeo=o(" (TAPAS model)"),Weo=l(),dh=a("li"),kee=a("strong"),Heo=o("tapex"),Ueo=o(" \u2014 "),TR=a("a"),Jeo=o("TapexTokenizer"),Yeo=o(" (TAPEX model)"),Keo=l(),ch=a("li"),See=a("strong"),Zeo=o("transfo-xl"),eoo=o(" \u2014 "),MR=a("a"),ooo=o("TransfoXLTokenizer"),roo=o(" (Transformer-XL model)"),too=l(),fh=a("li"),Ree=a("strong"),aoo=o("wav2vec2"),noo=o(" \u2014 "),ER=a("a"),soo=o("Wav2Vec2CTCTokenizer"),loo=o(" (Wav2Vec2 model)"),ioo=l(),mh=a("li"),Bee=a("strong"),doo=o("wav2vec2_phoneme"),coo=o(" \u2014 "),CR=a("a"),foo=o("Wav2Vec2PhonemeCTCTokenizer"),moo=o(" (Wav2Vec2Phoneme model)"),goo=l(),qs=a("li"),Pee=a("strong"),hoo=o("xglm"),poo=o(" \u2014 "),wR=a("a"),_oo=o("XGLMTokenizer"),uoo=o(" or "),AR=a("a"),boo=o("XGLMTokenizerFast"),Foo=o(" (XGLM model)"),voo=l(),gh=a("li"),$ee=a("strong"),Too=o("xlm"),Moo=o(" \u2014 "),yR=a("a"),Eoo=o("XLMTokenizer"),Coo=o(" (XLM model)"),woo=l(),hh=a("li"),Iee=a("strong"),Aoo=o("xlm-prophetnet"),yoo=o(" \u2014 "),LR=a("a"),Loo=o("XLMProphetNetTokenizer"),xoo=o(" (XLMProphetNet model)"),koo=l(),Ns=a("li"),qee=a("strong"),Soo=o("xlm-roberta"),Roo=o(" \u2014 "),xR=a("a"),Boo=o("XLMRobertaTokenizer"),Poo=o(" or "),kR=a("a"),$oo=o("XLMRobertaTokenizerFast"),Ioo=o(" (XLM-RoBERTa model)"),qoo=l(),js=a("li"),Nee=a("strong"),Noo=o("xlnet"),joo=o(" \u2014 "),SR=a("a"),Doo=o("XLNetTokenizer"),Goo=o(" or "),RR=a("a"),Ooo=o("XLNetTokenizerFast"),Voo=o(" (XLNet model)"),Xoo=l(),jee=a("p"),zoo=o("Examples:"),Qoo=l(),f(GC.$$.fragment),Woo=l(),ph=a("div"),f(OC.$$.fragment),Hoo=l(),Dee=a("p"),Uoo=o("Register a new tokenizer in this mapping."),wRe=l(),Hi=a("h2"),_h=a("a"),Gee=a("span"),f(VC.$$.fragment),Joo=l(),Oee=a("span"),Yoo=o("AutoFeatureExtractor"),ARe=l(),Ho=a("div"),f(XC.$$.fragment),Koo=l(),zC=a("p"),Zoo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BR=a("a"),ero=o("AutoFeatureExtractor.from_pretrained()"),oro=o(" class method."),rro=l(),QC=a("p"),tro=o("This class cannot be instantiated directly using "),Vee=a("code"),aro=o("__init__()"),nro=o(" (throws an error)."),sro=l(),$e=a("div"),f(WC.$$.fragment),lro=l(),Xee=a("p"),iro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dro=l(),Va=a("p"),cro=o("The feature extractor class to instantiate is selected based on the "),zee=a("code"),fro=o("model_type"),mro=o(` property of the config object
(either passed as an argument or loaded from `),Qee=a("code"),gro=o("pretrained_model_name_or_path"),hro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wee=a("code"),pro=o("pretrained_model_name_or_path"),_ro=o(":"),uro=l(),ee=a("ul"),uh=a("li"),Hee=a("strong"),bro=o("beit"),Fro=o(" \u2014 "),PR=a("a"),vro=o("BeitFeatureExtractor"),Tro=o(" (BEiT model)"),Mro=l(),bh=a("li"),Uee=a("strong"),Ero=o("clip"),Cro=o(" \u2014 "),$R=a("a"),wro=o("CLIPFeatureExtractor"),Aro=o(" (CLIP model)"),yro=l(),Fh=a("li"),Jee=a("strong"),Lro=o("convnext"),xro=o(" \u2014 "),IR=a("a"),kro=o("ConvNextFeatureExtractor"),Sro=o(" (ConvNext model)"),Rro=l(),vh=a("li"),Yee=a("strong"),Bro=o("deit"),Pro=o(" \u2014 "),qR=a("a"),$ro=o("DeiTFeatureExtractor"),Iro=o(" (DeiT model)"),qro=l(),Th=a("li"),Kee=a("strong"),Nro=o("detr"),jro=o(" \u2014 "),NR=a("a"),Dro=o("DetrFeatureExtractor"),Gro=o(" (DETR model)"),Oro=l(),Mh=a("li"),Zee=a("strong"),Vro=o("hubert"),Xro=o(" \u2014 "),jR=a("a"),zro=o("Wav2Vec2FeatureExtractor"),Qro=o(" (Hubert model)"),Wro=l(),Eh=a("li"),eoe=a("strong"),Hro=o("layoutlmv2"),Uro=o(" \u2014 "),DR=a("a"),Jro=o("LayoutLMv2FeatureExtractor"),Yro=o(" (LayoutLMv2 model)"),Kro=l(),Ch=a("li"),ooe=a("strong"),Zro=o("maskformer"),eto=o(" \u2014 "),GR=a("a"),oto=o("MaskFormerFeatureExtractor"),rto=o(" (MaskFormer model)"),tto=l(),wh=a("li"),roe=a("strong"),ato=o("perceiver"),nto=o(" \u2014 "),OR=a("a"),sto=o("PerceiverFeatureExtractor"),lto=o(" (Perceiver model)"),ito=l(),Ah=a("li"),toe=a("strong"),dto=o("poolformer"),cto=o(" \u2014 "),VR=a("a"),fto=o("PoolFormerFeatureExtractor"),mto=o(" (PoolFormer model)"),gto=l(),yh=a("li"),aoe=a("strong"),hto=o("regnet"),pto=o(" \u2014 "),XR=a("a"),_to=o("ConvNextFeatureExtractor"),uto=o(" (RegNet model)"),bto=l(),Lh=a("li"),noe=a("strong"),Fto=o("resnet"),vto=o(" \u2014 "),zR=a("a"),Tto=o("ConvNextFeatureExtractor"),Mto=o(" (ResNet model)"),Eto=l(),xh=a("li"),soe=a("strong"),Cto=o("segformer"),wto=o(" \u2014 "),QR=a("a"),Ato=o("SegformerFeatureExtractor"),yto=o(" (SegFormer model)"),Lto=l(),kh=a("li"),loe=a("strong"),xto=o("speech_to_text"),kto=o(" \u2014 "),WR=a("a"),Sto=o("Speech2TextFeatureExtractor"),Rto=o(" (Speech2Text model)"),Bto=l(),Sh=a("li"),ioe=a("strong"),Pto=o("swin"),$to=o(" \u2014 "),HR=a("a"),Ito=o("ViTFeatureExtractor"),qto=o(" (Swin model)"),Nto=l(),Rh=a("li"),doe=a("strong"),jto=o("van"),Dto=o(" \u2014 "),UR=a("a"),Gto=o("ConvNextFeatureExtractor"),Oto=o(" (VAN model)"),Vto=l(),Bh=a("li"),coe=a("strong"),Xto=o("vit"),zto=o(" \u2014 "),JR=a("a"),Qto=o("ViTFeatureExtractor"),Wto=o(" (ViT model)"),Hto=l(),Ph=a("li"),foe=a("strong"),Uto=o("vit_mae"),Jto=o(" \u2014 "),YR=a("a"),Yto=o("ViTFeatureExtractor"),Kto=o(" (ViTMAE model)"),Zto=l(),$h=a("li"),moe=a("strong"),eao=o("wav2vec2"),oao=o(" \u2014 "),KR=a("a"),rao=o("Wav2Vec2FeatureExtractor"),tao=o(" (Wav2Vec2 model)"),aao=l(),f(Ih.$$.fragment),nao=l(),goe=a("p"),sao=o("Examples:"),lao=l(),f(HC.$$.fragment),iao=l(),qh=a("div"),f(UC.$$.fragment),dao=l(),hoe=a("p"),cao=o("Register a new feature extractor for this class."),yRe=l(),Ui=a("h2"),Nh=a("a"),poe=a("span"),f(JC.$$.fragment),fao=l(),_oe=a("span"),mao=o("AutoProcessor"),LRe=l(),Uo=a("div"),f(YC.$$.fragment),gao=l(),KC=a("p"),hao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZR=a("a"),pao=o("AutoProcessor.from_pretrained()"),_ao=o(" class method."),uao=l(),ZC=a("p"),bao=o("This class cannot be instantiated directly using "),uoe=a("code"),Fao=o("__init__()"),vao=o(" (throws an error)."),Tao=l(),Ie=a("div"),f(ew.$$.fragment),Mao=l(),boe=a("p"),Eao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Cao=l(),Ji=a("p"),wao=o("The processor class to instantiate is selected based on the "),Foe=a("code"),Aao=o("model_type"),yao=o(` property of the config object (either
passed as an argument or loaded from `),voe=a("code"),Lao=o("pretrained_model_name_or_path"),xao=o(" if possible):"),kao=l(),ke=a("ul"),jh=a("li"),Toe=a("strong"),Sao=o("clip"),Rao=o(" \u2014 "),eB=a("a"),Bao=o("CLIPProcessor"),Pao=o(" (CLIP model)"),$ao=l(),Dh=a("li"),Moe=a("strong"),Iao=o("layoutlmv2"),qao=o(" \u2014 "),oB=a("a"),Nao=o("LayoutLMv2Processor"),jao=o(" (LayoutLMv2 model)"),Dao=l(),Gh=a("li"),Eoe=a("strong"),Gao=o("layoutxlm"),Oao=o(" \u2014 "),rB=a("a"),Vao=o("LayoutXLMProcessor"),Xao=o(" (LayoutXLM model)"),zao=l(),Oh=a("li"),Coe=a("strong"),Qao=o("speech_to_text"),Wao=o(" \u2014 "),tB=a("a"),Hao=o("Speech2TextProcessor"),Uao=o(" (Speech2Text model)"),Jao=l(),Vh=a("li"),woe=a("strong"),Yao=o("speech_to_text_2"),Kao=o(" \u2014 "),aB=a("a"),Zao=o("Speech2Text2Processor"),eno=o(" (Speech2Text2 model)"),ono=l(),Xh=a("li"),Aoe=a("strong"),rno=o("trocr"),tno=o(" \u2014 "),nB=a("a"),ano=o("TrOCRProcessor"),nno=o(" (TrOCR model)"),sno=l(),zh=a("li"),yoe=a("strong"),lno=o("vision-text-dual-encoder"),ino=o(" \u2014 "),sB=a("a"),dno=o("VisionTextDualEncoderProcessor"),cno=o(" (VisionTextDualEncoder model)"),fno=l(),Qh=a("li"),Loe=a("strong"),mno=o("wav2vec2"),gno=o(" \u2014 "),lB=a("a"),hno=o("Wav2Vec2Processor"),pno=o(" (Wav2Vec2 model)"),_no=l(),f(Wh.$$.fragment),uno=l(),xoe=a("p"),bno=o("Examples:"),Fno=l(),f(ow.$$.fragment),vno=l(),Hh=a("div"),f(rw.$$.fragment),Tno=l(),koe=a("p"),Mno=o("Register a new processor for this class."),xRe=l(),Yi=a("h2"),Uh=a("a"),Soe=a("span"),f(tw.$$.fragment),Eno=l(),Roe=a("span"),Cno=o("AutoModel"),kRe=l(),Jo=a("div"),f(aw.$$.fragment),wno=l(),Ki=a("p"),Ano=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iB=a("a"),yno=o("from_pretrained()"),Lno=o(" class method or the "),dB=a("a"),xno=o("from_config()"),kno=o(` class
method.`),Sno=l(),nw=a("p"),Rno=o("This class cannot be instantiated directly using "),Boe=a("code"),Bno=o("__init__()"),Pno=o(" (throws an error)."),$no=l(),Xr=a("div"),f(sw.$$.fragment),Ino=l(),Poe=a("p"),qno=o("Instantiates one of the base model classes of the library from a configuration."),Nno=l(),Zi=a("p"),jno=o(`Note:
Loading a model from its configuration file does `),$oe=a("strong"),Dno=o("not"),Gno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cB=a("a"),Ono=o("from_pretrained()"),Vno=o(" to load the model weights."),Xno=l(),Ioe=a("p"),zno=o("Examples:"),Qno=l(),f(lw.$$.fragment),Wno=l(),qe=a("div"),f(iw.$$.fragment),Hno=l(),qoe=a("p"),Uno=o("Instantiate one of the base model classes of the library from a pretrained model."),Jno=l(),Xa=a("p"),Yno=o("The model class to instantiate is selected based on the "),Noe=a("code"),Kno=o("model_type"),Zno=o(` property of the config object (either
passed as an argument or loaded from `),joe=a("code"),eso=o("pretrained_model_name_or_path"),oso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Doe=a("code"),rso=o("pretrained_model_name_or_path"),tso=o(":"),aso=l(),T=a("ul"),Jh=a("li"),Goe=a("strong"),nso=o("albert"),sso=o(" \u2014 "),fB=a("a"),lso=o("AlbertModel"),iso=o(" (ALBERT model)"),dso=l(),Yh=a("li"),Ooe=a("strong"),cso=o("bart"),fso=o(" \u2014 "),mB=a("a"),mso=o("BartModel"),gso=o(" (BART model)"),hso=l(),Kh=a("li"),Voe=a("strong"),pso=o("beit"),_so=o(" \u2014 "),gB=a("a"),uso=o("BeitModel"),bso=o(" (BEiT model)"),Fso=l(),Zh=a("li"),Xoe=a("strong"),vso=o("bert"),Tso=o(" \u2014 "),hB=a("a"),Mso=o("BertModel"),Eso=o(" (BERT model)"),Cso=l(),ep=a("li"),zoe=a("strong"),wso=o("bert-generation"),Aso=o(" \u2014 "),pB=a("a"),yso=o("BertGenerationEncoder"),Lso=o(" (Bert Generation model)"),xso=l(),op=a("li"),Qoe=a("strong"),kso=o("big_bird"),Sso=o(" \u2014 "),_B=a("a"),Rso=o("BigBirdModel"),Bso=o(" (BigBird model)"),Pso=l(),rp=a("li"),Woe=a("strong"),$so=o("bigbird_pegasus"),Iso=o(" \u2014 "),uB=a("a"),qso=o("BigBirdPegasusModel"),Nso=o(" (BigBirdPegasus model)"),jso=l(),tp=a("li"),Hoe=a("strong"),Dso=o("blenderbot"),Gso=o(" \u2014 "),bB=a("a"),Oso=o("BlenderbotModel"),Vso=o(" (Blenderbot model)"),Xso=l(),ap=a("li"),Uoe=a("strong"),zso=o("blenderbot-small"),Qso=o(" \u2014 "),FB=a("a"),Wso=o("BlenderbotSmallModel"),Hso=o(" (BlenderbotSmall model)"),Uso=l(),np=a("li"),Joe=a("strong"),Jso=o("camembert"),Yso=o(" \u2014 "),vB=a("a"),Kso=o("CamembertModel"),Zso=o(" (CamemBERT model)"),elo=l(),sp=a("li"),Yoe=a("strong"),olo=o("canine"),rlo=o(" \u2014 "),TB=a("a"),tlo=o("CanineModel"),alo=o(" (Canine model)"),nlo=l(),lp=a("li"),Koe=a("strong"),slo=o("clip"),llo=o(" \u2014 "),MB=a("a"),ilo=o("CLIPModel"),dlo=o(" (CLIP model)"),clo=l(),ip=a("li"),Zoe=a("strong"),flo=o("convbert"),mlo=o(" \u2014 "),EB=a("a"),glo=o("ConvBertModel"),hlo=o(" (ConvBERT model)"),plo=l(),dp=a("li"),ere=a("strong"),_lo=o("convnext"),ulo=o(" \u2014 "),CB=a("a"),blo=o("ConvNextModel"),Flo=o(" (ConvNext model)"),vlo=l(),cp=a("li"),ore=a("strong"),Tlo=o("ctrl"),Mlo=o(" \u2014 "),wB=a("a"),Elo=o("CTRLModel"),Clo=o(" (CTRL model)"),wlo=l(),fp=a("li"),rre=a("strong"),Alo=o("data2vec-audio"),ylo=o(" \u2014 "),AB=a("a"),Llo=o("Data2VecAudioModel"),xlo=o(" (Data2VecAudio model)"),klo=l(),mp=a("li"),tre=a("strong"),Slo=o("data2vec-text"),Rlo=o(" \u2014 "),yB=a("a"),Blo=o("Data2VecTextModel"),Plo=o(" (Data2VecText model)"),$lo=l(),gp=a("li"),are=a("strong"),Ilo=o("deberta"),qlo=o(" \u2014 "),LB=a("a"),Nlo=o("DebertaModel"),jlo=o(" (DeBERTa model)"),Dlo=l(),hp=a("li"),nre=a("strong"),Glo=o("deberta-v2"),Olo=o(" \u2014 "),xB=a("a"),Vlo=o("DebertaV2Model"),Xlo=o(" (DeBERTa-v2 model)"),zlo=l(),pp=a("li"),sre=a("strong"),Qlo=o("decision_transformer"),Wlo=o(" \u2014 "),kB=a("a"),Hlo=o("DecisionTransformerModel"),Ulo=o(" (Decision Transformer model)"),Jlo=l(),_p=a("li"),lre=a("strong"),Ylo=o("deit"),Klo=o(" \u2014 "),SB=a("a"),Zlo=o("DeiTModel"),eio=o(" (DeiT model)"),oio=l(),up=a("li"),ire=a("strong"),rio=o("detr"),tio=o(" \u2014 "),RB=a("a"),aio=o("DetrModel"),nio=o(" (DETR model)"),sio=l(),bp=a("li"),dre=a("strong"),lio=o("distilbert"),iio=o(" \u2014 "),BB=a("a"),dio=o("DistilBertModel"),cio=o(" (DistilBERT model)"),fio=l(),Fp=a("li"),cre=a("strong"),mio=o("dpr"),gio=o(" \u2014 "),PB=a("a"),hio=o("DPRQuestionEncoder"),pio=o(" (DPR model)"),_io=l(),vp=a("li"),fre=a("strong"),uio=o("dpt"),bio=o(" \u2014 "),$B=a("a"),Fio=o("DPTModel"),vio=o(" (DPT model)"),Tio=l(),Tp=a("li"),mre=a("strong"),Mio=o("electra"),Eio=o(" \u2014 "),IB=a("a"),Cio=o("ElectraModel"),wio=o(" (ELECTRA model)"),Aio=l(),Mp=a("li"),gre=a("strong"),yio=o("flaubert"),Lio=o(" \u2014 "),qB=a("a"),xio=o("FlaubertModel"),kio=o(" (FlauBERT model)"),Sio=l(),Ep=a("li"),hre=a("strong"),Rio=o("fnet"),Bio=o(" \u2014 "),NB=a("a"),Pio=o("FNetModel"),$io=o(" (FNet model)"),Iio=l(),Cp=a("li"),pre=a("strong"),qio=o("fsmt"),Nio=o(" \u2014 "),jB=a("a"),jio=o("FSMTModel"),Dio=o(" (FairSeq Machine-Translation model)"),Gio=l(),Ds=a("li"),_re=a("strong"),Oio=o("funnel"),Vio=o(" \u2014 "),DB=a("a"),Xio=o("FunnelModel"),zio=o(" or "),GB=a("a"),Qio=o("FunnelBaseModel"),Wio=o(" (Funnel Transformer model)"),Hio=l(),wp=a("li"),ure=a("strong"),Uio=o("glpn"),Jio=o(" \u2014 "),OB=a("a"),Yio=o("GLPNModel"),Kio=o(" (GLPN model)"),Zio=l(),Ap=a("li"),bre=a("strong"),edo=o("gpt2"),odo=o(" \u2014 "),VB=a("a"),rdo=o("GPT2Model"),tdo=o(" (OpenAI GPT-2 model)"),ado=l(),yp=a("li"),Fre=a("strong"),ndo=o("gpt_neo"),sdo=o(" \u2014 "),XB=a("a"),ldo=o("GPTNeoModel"),ido=o(" (GPT Neo model)"),ddo=l(),Lp=a("li"),vre=a("strong"),cdo=o("gptj"),fdo=o(" \u2014 "),zB=a("a"),mdo=o("GPTJModel"),gdo=o(" (GPT-J model)"),hdo=l(),xp=a("li"),Tre=a("strong"),pdo=o("hubert"),_do=o(" \u2014 "),QB=a("a"),udo=o("HubertModel"),bdo=o(" (Hubert model)"),Fdo=l(),kp=a("li"),Mre=a("strong"),vdo=o("ibert"),Tdo=o(" \u2014 "),WB=a("a"),Mdo=o("IBertModel"),Edo=o(" (I-BERT model)"),Cdo=l(),Sp=a("li"),Ere=a("strong"),wdo=o("imagegpt"),Ado=o(" \u2014 "),HB=a("a"),ydo=o("ImageGPTModel"),Ldo=o(" (ImageGPT model)"),xdo=l(),Rp=a("li"),Cre=a("strong"),kdo=o("layoutlm"),Sdo=o(" \u2014 "),UB=a("a"),Rdo=o("LayoutLMModel"),Bdo=o(" (LayoutLM model)"),Pdo=l(),Bp=a("li"),wre=a("strong"),$do=o("layoutlmv2"),Ido=o(" \u2014 "),JB=a("a"),qdo=o("LayoutLMv2Model"),Ndo=o(" (LayoutLMv2 model)"),jdo=l(),Pp=a("li"),Are=a("strong"),Ddo=o("led"),Gdo=o(" \u2014 "),YB=a("a"),Odo=o("LEDModel"),Vdo=o(" (LED model)"),Xdo=l(),$p=a("li"),yre=a("strong"),zdo=o("longformer"),Qdo=o(" \u2014 "),KB=a("a"),Wdo=o("LongformerModel"),Hdo=o(" (Longformer model)"),Udo=l(),Ip=a("li"),Lre=a("strong"),Jdo=o("luke"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("LukeModel"),Zdo=o(" (LUKE model)"),eco=l(),qp=a("li"),xre=a("strong"),oco=o("lxmert"),rco=o(" \u2014 "),eP=a("a"),tco=o("LxmertModel"),aco=o(" (LXMERT model)"),nco=l(),Np=a("li"),kre=a("strong"),sco=o("m2m_100"),lco=o(" \u2014 "),oP=a("a"),ico=o("M2M100Model"),dco=o(" (M2M100 model)"),cco=l(),jp=a("li"),Sre=a("strong"),fco=o("marian"),mco=o(" \u2014 "),rP=a("a"),gco=o("MarianModel"),hco=o(" (Marian model)"),pco=l(),Dp=a("li"),Rre=a("strong"),_co=o("maskformer"),uco=o(" \u2014 "),tP=a("a"),bco=o("MaskFormerModel"),Fco=o(" (MaskFormer model)"),vco=l(),Gp=a("li"),Bre=a("strong"),Tco=o("mbart"),Mco=o(" \u2014 "),aP=a("a"),Eco=o("MBartModel"),Cco=o(" (mBART model)"),wco=l(),Op=a("li"),Pre=a("strong"),Aco=o("megatron-bert"),yco=o(" \u2014 "),nP=a("a"),Lco=o("MegatronBertModel"),xco=o(" (MegatronBert model)"),kco=l(),Vp=a("li"),$re=a("strong"),Sco=o("mobilebert"),Rco=o(" \u2014 "),sP=a("a"),Bco=o("MobileBertModel"),Pco=o(" (MobileBERT model)"),$co=l(),Xp=a("li"),Ire=a("strong"),Ico=o("mpnet"),qco=o(" \u2014 "),lP=a("a"),Nco=o("MPNetModel"),jco=o(" (MPNet model)"),Dco=l(),zp=a("li"),qre=a("strong"),Gco=o("mt5"),Oco=o(" \u2014 "),iP=a("a"),Vco=o("MT5Model"),Xco=o(" (mT5 model)"),zco=l(),Qp=a("li"),Nre=a("strong"),Qco=o("nystromformer"),Wco=o(" \u2014 "),dP=a("a"),Hco=o("NystromformerModel"),Uco=o(" (Nystromformer model)"),Jco=l(),Wp=a("li"),jre=a("strong"),Yco=o("openai-gpt"),Kco=o(" \u2014 "),cP=a("a"),Zco=o("OpenAIGPTModel"),efo=o(" (OpenAI GPT model)"),ofo=l(),Hp=a("li"),Dre=a("strong"),rfo=o("pegasus"),tfo=o(" \u2014 "),fP=a("a"),afo=o("PegasusModel"),nfo=o(" (Pegasus model)"),sfo=l(),Up=a("li"),Gre=a("strong"),lfo=o("perceiver"),ifo=o(" \u2014 "),mP=a("a"),dfo=o("PerceiverModel"),cfo=o(" (Perceiver model)"),ffo=l(),Jp=a("li"),Ore=a("strong"),mfo=o("plbart"),gfo=o(" \u2014 "),gP=a("a"),hfo=o("PLBartModel"),pfo=o(" (PLBart model)"),_fo=l(),Yp=a("li"),Vre=a("strong"),ufo=o("poolformer"),bfo=o(" \u2014 "),hP=a("a"),Ffo=o("PoolFormerModel"),vfo=o(" (PoolFormer model)"),Tfo=l(),Kp=a("li"),Xre=a("strong"),Mfo=o("prophetnet"),Efo=o(" \u2014 "),pP=a("a"),Cfo=o("ProphetNetModel"),wfo=o(" (ProphetNet model)"),Afo=l(),Zp=a("li"),zre=a("strong"),yfo=o("qdqbert"),Lfo=o(" \u2014 "),_P=a("a"),xfo=o("QDQBertModel"),kfo=o(" (QDQBert model)"),Sfo=l(),e_=a("li"),Qre=a("strong"),Rfo=o("reformer"),Bfo=o(" \u2014 "),uP=a("a"),Pfo=o("ReformerModel"),$fo=o(" (Reformer model)"),Ifo=l(),o_=a("li"),Wre=a("strong"),qfo=o("regnet"),Nfo=o(" \u2014 "),bP=a("a"),jfo=o("RegNetModel"),Dfo=o(" (RegNet model)"),Gfo=l(),r_=a("li"),Hre=a("strong"),Ofo=o("rembert"),Vfo=o(" \u2014 "),FP=a("a"),Xfo=o("RemBertModel"),zfo=o(" (RemBERT model)"),Qfo=l(),t_=a("li"),Ure=a("strong"),Wfo=o("resnet"),Hfo=o(" \u2014 "),vP=a("a"),Ufo=o("ResNetModel"),Jfo=o(" (ResNet model)"),Yfo=l(),a_=a("li"),Jre=a("strong"),Kfo=o("retribert"),Zfo=o(" \u2014 "),TP=a("a"),emo=o("RetriBertModel"),omo=o(" (RetriBERT model)"),rmo=l(),n_=a("li"),Yre=a("strong"),tmo=o("roberta"),amo=o(" \u2014 "),MP=a("a"),nmo=o("RobertaModel"),smo=o(" (RoBERTa model)"),lmo=l(),s_=a("li"),Kre=a("strong"),imo=o("roformer"),dmo=o(" \u2014 "),EP=a("a"),cmo=o("RoFormerModel"),fmo=o(" (RoFormer model)"),mmo=l(),l_=a("li"),Zre=a("strong"),gmo=o("segformer"),hmo=o(" \u2014 "),CP=a("a"),pmo=o("SegformerModel"),_mo=o(" (SegFormer model)"),umo=l(),i_=a("li"),ete=a("strong"),bmo=o("sew"),Fmo=o(" \u2014 "),wP=a("a"),vmo=o("SEWModel"),Tmo=o(" (SEW model)"),Mmo=l(),d_=a("li"),ote=a("strong"),Emo=o("sew-d"),Cmo=o(" \u2014 "),AP=a("a"),wmo=o("SEWDModel"),Amo=o(" (SEW-D model)"),ymo=l(),c_=a("li"),rte=a("strong"),Lmo=o("speech_to_text"),xmo=o(" \u2014 "),yP=a("a"),kmo=o("Speech2TextModel"),Smo=o(" (Speech2Text model)"),Rmo=l(),f_=a("li"),tte=a("strong"),Bmo=o("splinter"),Pmo=o(" \u2014 "),LP=a("a"),$mo=o("SplinterModel"),Imo=o(" (Splinter model)"),qmo=l(),m_=a("li"),ate=a("strong"),Nmo=o("squeezebert"),jmo=o(" \u2014 "),xP=a("a"),Dmo=o("SqueezeBertModel"),Gmo=o(" (SqueezeBERT model)"),Omo=l(),g_=a("li"),nte=a("strong"),Vmo=o("swin"),Xmo=o(" \u2014 "),kP=a("a"),zmo=o("SwinModel"),Qmo=o(" (Swin model)"),Wmo=l(),h_=a("li"),ste=a("strong"),Hmo=o("t5"),Umo=o(" \u2014 "),SP=a("a"),Jmo=o("T5Model"),Ymo=o(" (T5 model)"),Kmo=l(),p_=a("li"),lte=a("strong"),Zmo=o("tapas"),ego=o(" \u2014 "),RP=a("a"),ogo=o("TapasModel"),rgo=o(" (TAPAS model)"),tgo=l(),__=a("li"),ite=a("strong"),ago=o("transfo-xl"),ngo=o(" \u2014 "),BP=a("a"),sgo=o("TransfoXLModel"),lgo=o(" (Transformer-XL model)"),igo=l(),u_=a("li"),dte=a("strong"),dgo=o("unispeech"),cgo=o(" \u2014 "),PP=a("a"),fgo=o("UniSpeechModel"),mgo=o(" (UniSpeech model)"),ggo=l(),b_=a("li"),cte=a("strong"),hgo=o("unispeech-sat"),pgo=o(" \u2014 "),$P=a("a"),_go=o("UniSpeechSatModel"),ugo=o(" (UniSpeechSat model)"),bgo=l(),F_=a("li"),fte=a("strong"),Fgo=o("van"),vgo=o(" \u2014 "),IP=a("a"),Tgo=o("VanModel"),Mgo=o(" (VAN model)"),Ego=l(),v_=a("li"),mte=a("strong"),Cgo=o("vilt"),wgo=o(" \u2014 "),qP=a("a"),Ago=o("ViltModel"),ygo=o(" (ViLT model)"),Lgo=l(),T_=a("li"),gte=a("strong"),xgo=o("vision-text-dual-encoder"),kgo=o(" \u2014 "),NP=a("a"),Sgo=o("VisionTextDualEncoderModel"),Rgo=o(" (VisionTextDualEncoder model)"),Bgo=l(),M_=a("li"),hte=a("strong"),Pgo=o("visual_bert"),$go=o(" \u2014 "),jP=a("a"),Igo=o("VisualBertModel"),qgo=o(" (VisualBert model)"),Ngo=l(),E_=a("li"),pte=a("strong"),jgo=o("vit"),Dgo=o(" \u2014 "),DP=a("a"),Ggo=o("ViTModel"),Ogo=o(" (ViT model)"),Vgo=l(),C_=a("li"),_te=a("strong"),Xgo=o("vit_mae"),zgo=o(" \u2014 "),GP=a("a"),Qgo=o("ViTMAEModel"),Wgo=o(" (ViTMAE model)"),Hgo=l(),w_=a("li"),ute=a("strong"),Ugo=o("wav2vec2"),Jgo=o(" \u2014 "),OP=a("a"),Ygo=o("Wav2Vec2Model"),Kgo=o(" (Wav2Vec2 model)"),Zgo=l(),A_=a("li"),bte=a("strong"),eho=o("wavlm"),oho=o(" \u2014 "),VP=a("a"),rho=o("WavLMModel"),tho=o(" (WavLM model)"),aho=l(),y_=a("li"),Fte=a("strong"),nho=o("xglm"),sho=o(" \u2014 "),XP=a("a"),lho=o("XGLMModel"),iho=o(" (XGLM model)"),dho=l(),L_=a("li"),vte=a("strong"),cho=o("xlm"),fho=o(" \u2014 "),zP=a("a"),mho=o("XLMModel"),gho=o(" (XLM model)"),hho=l(),x_=a("li"),Tte=a("strong"),pho=o("xlm-prophetnet"),_ho=o(" \u2014 "),QP=a("a"),uho=o("XLMProphetNetModel"),bho=o(" (XLMProphetNet model)"),Fho=l(),k_=a("li"),Mte=a("strong"),vho=o("xlm-roberta"),Tho=o(" \u2014 "),WP=a("a"),Mho=o("XLMRobertaModel"),Eho=o(" (XLM-RoBERTa model)"),Cho=l(),S_=a("li"),Ete=a("strong"),who=o("xlm-roberta-xl"),Aho=o(" \u2014 "),HP=a("a"),yho=o("XLMRobertaXLModel"),Lho=o(" (XLM-RoBERTa-XL model)"),xho=l(),R_=a("li"),Cte=a("strong"),kho=o("xlnet"),Sho=o(" \u2014 "),UP=a("a"),Rho=o("XLNetModel"),Bho=o(" (XLNet model)"),Pho=l(),B_=a("li"),wte=a("strong"),$ho=o("yoso"),Iho=o(" \u2014 "),JP=a("a"),qho=o("YosoModel"),Nho=o(" (YOSO model)"),jho=l(),P_=a("p"),Dho=o("The model is set in evaluation mode by default using "),Ate=a("code"),Gho=o("model.eval()"),Oho=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yte=a("code"),Vho=o("model.train()"),Xho=l(),Lte=a("p"),zho=o("Examples:"),Qho=l(),f(dw.$$.fragment),SRe=l(),ed=a("h2"),$_=a("a"),xte=a("span"),f(cw.$$.fragment),Who=l(),kte=a("span"),Hho=o("AutoModelForPreTraining"),RRe=l(),Yo=a("div"),f(fw.$$.fragment),Uho=l(),od=a("p"),Jho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YP=a("a"),Yho=o("from_pretrained()"),Kho=o(" class method or the "),KP=a("a"),Zho=o("from_config()"),epo=o(` class
method.`),opo=l(),mw=a("p"),rpo=o("This class cannot be instantiated directly using "),Ste=a("code"),tpo=o("__init__()"),apo=o(" (throws an error)."),npo=l(),zr=a("div"),f(gw.$$.fragment),spo=l(),Rte=a("p"),lpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ipo=l(),rd=a("p"),dpo=o(`Note:
Loading a model from its configuration file does `),Bte=a("strong"),cpo=o("not"),fpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZP=a("a"),mpo=o("from_pretrained()"),gpo=o(" to load the model weights."),hpo=l(),Pte=a("p"),ppo=o("Examples:"),_po=l(),f(hw.$$.fragment),upo=l(),Ne=a("div"),f(pw.$$.fragment),bpo=l(),$te=a("p"),Fpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vpo=l(),za=a("p"),Tpo=o("The model class to instantiate is selected based on the "),Ite=a("code"),Mpo=o("model_type"),Epo=o(` property of the config object (either
passed as an argument or loaded from `),qte=a("code"),Cpo=o("pretrained_model_name_or_path"),wpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nte=a("code"),Apo=o("pretrained_model_name_or_path"),ypo=o(":"),Lpo=l(),S=a("ul"),I_=a("li"),jte=a("strong"),xpo=o("albert"),kpo=o(" \u2014 "),e$=a("a"),Spo=o("AlbertForPreTraining"),Rpo=o(" (ALBERT model)"),Bpo=l(),q_=a("li"),Dte=a("strong"),Ppo=o("bart"),$po=o(" \u2014 "),o$=a("a"),Ipo=o("BartForConditionalGeneration"),qpo=o(" (BART model)"),Npo=l(),N_=a("li"),Gte=a("strong"),jpo=o("bert"),Dpo=o(" \u2014 "),r$=a("a"),Gpo=o("BertForPreTraining"),Opo=o(" (BERT model)"),Vpo=l(),j_=a("li"),Ote=a("strong"),Xpo=o("big_bird"),zpo=o(" \u2014 "),t$=a("a"),Qpo=o("BigBirdForPreTraining"),Wpo=o(" (BigBird model)"),Hpo=l(),D_=a("li"),Vte=a("strong"),Upo=o("camembert"),Jpo=o(" \u2014 "),a$=a("a"),Ypo=o("CamembertForMaskedLM"),Kpo=o(" (CamemBERT model)"),Zpo=l(),G_=a("li"),Xte=a("strong"),e_o=o("ctrl"),o_o=o(" \u2014 "),n$=a("a"),r_o=o("CTRLLMHeadModel"),t_o=o(" (CTRL model)"),a_o=l(),O_=a("li"),zte=a("strong"),n_o=o("data2vec-text"),s_o=o(" \u2014 "),s$=a("a"),l_o=o("Data2VecTextForMaskedLM"),i_o=o(" (Data2VecText model)"),d_o=l(),V_=a("li"),Qte=a("strong"),c_o=o("deberta"),f_o=o(" \u2014 "),l$=a("a"),m_o=o("DebertaForMaskedLM"),g_o=o(" (DeBERTa model)"),h_o=l(),X_=a("li"),Wte=a("strong"),p_o=o("deberta-v2"),__o=o(" \u2014 "),i$=a("a"),u_o=o("DebertaV2ForMaskedLM"),b_o=o(" (DeBERTa-v2 model)"),F_o=l(),z_=a("li"),Hte=a("strong"),v_o=o("distilbert"),T_o=o(" \u2014 "),d$=a("a"),M_o=o("DistilBertForMaskedLM"),E_o=o(" (DistilBERT model)"),C_o=l(),Q_=a("li"),Ute=a("strong"),w_o=o("electra"),A_o=o(" \u2014 "),c$=a("a"),y_o=o("ElectraForPreTraining"),L_o=o(" (ELECTRA model)"),x_o=l(),W_=a("li"),Jte=a("strong"),k_o=o("flaubert"),S_o=o(" \u2014 "),f$=a("a"),R_o=o("FlaubertWithLMHeadModel"),B_o=o(" (FlauBERT model)"),P_o=l(),H_=a("li"),Yte=a("strong"),$_o=o("fnet"),I_o=o(" \u2014 "),m$=a("a"),q_o=o("FNetForPreTraining"),N_o=o(" (FNet model)"),j_o=l(),U_=a("li"),Kte=a("strong"),D_o=o("fsmt"),G_o=o(" \u2014 "),g$=a("a"),O_o=o("FSMTForConditionalGeneration"),V_o=o(" (FairSeq Machine-Translation model)"),X_o=l(),J_=a("li"),Zte=a("strong"),z_o=o("funnel"),Q_o=o(" \u2014 "),h$=a("a"),W_o=o("FunnelForPreTraining"),H_o=o(" (Funnel Transformer model)"),U_o=l(),Y_=a("li"),eae=a("strong"),J_o=o("gpt2"),Y_o=o(" \u2014 "),p$=a("a"),K_o=o("GPT2LMHeadModel"),Z_o=o(" (OpenAI GPT-2 model)"),euo=l(),K_=a("li"),oae=a("strong"),ouo=o("ibert"),ruo=o(" \u2014 "),_$=a("a"),tuo=o("IBertForMaskedLM"),auo=o(" (I-BERT model)"),nuo=l(),Z_=a("li"),rae=a("strong"),suo=o("layoutlm"),luo=o(" \u2014 "),u$=a("a"),iuo=o("LayoutLMForMaskedLM"),duo=o(" (LayoutLM model)"),cuo=l(),eu=a("li"),tae=a("strong"),fuo=o("longformer"),muo=o(" \u2014 "),b$=a("a"),guo=o("LongformerForMaskedLM"),huo=o(" (Longformer model)"),puo=l(),ou=a("li"),aae=a("strong"),_uo=o("lxmert"),uuo=o(" \u2014 "),F$=a("a"),buo=o("LxmertForPreTraining"),Fuo=o(" (LXMERT model)"),vuo=l(),ru=a("li"),nae=a("strong"),Tuo=o("megatron-bert"),Muo=o(" \u2014 "),v$=a("a"),Euo=o("MegatronBertForPreTraining"),Cuo=o(" (MegatronBert model)"),wuo=l(),tu=a("li"),sae=a("strong"),Auo=o("mobilebert"),yuo=o(" \u2014 "),T$=a("a"),Luo=o("MobileBertForPreTraining"),xuo=o(" (MobileBERT model)"),kuo=l(),au=a("li"),lae=a("strong"),Suo=o("mpnet"),Ruo=o(" \u2014 "),M$=a("a"),Buo=o("MPNetForMaskedLM"),Puo=o(" (MPNet model)"),$uo=l(),nu=a("li"),iae=a("strong"),Iuo=o("openai-gpt"),quo=o(" \u2014 "),E$=a("a"),Nuo=o("OpenAIGPTLMHeadModel"),juo=o(" (OpenAI GPT model)"),Duo=l(),su=a("li"),dae=a("strong"),Guo=o("retribert"),Ouo=o(" \u2014 "),C$=a("a"),Vuo=o("RetriBertModel"),Xuo=o(" (RetriBERT model)"),zuo=l(),lu=a("li"),cae=a("strong"),Quo=o("roberta"),Wuo=o(" \u2014 "),w$=a("a"),Huo=o("RobertaForMaskedLM"),Uuo=o(" (RoBERTa model)"),Juo=l(),iu=a("li"),fae=a("strong"),Yuo=o("squeezebert"),Kuo=o(" \u2014 "),A$=a("a"),Zuo=o("SqueezeBertForMaskedLM"),e5o=o(" (SqueezeBERT model)"),o5o=l(),du=a("li"),mae=a("strong"),r5o=o("t5"),t5o=o(" \u2014 "),y$=a("a"),a5o=o("T5ForConditionalGeneration"),n5o=o(" (T5 model)"),s5o=l(),cu=a("li"),gae=a("strong"),l5o=o("tapas"),i5o=o(" \u2014 "),L$=a("a"),d5o=o("TapasForMaskedLM"),c5o=o(" (TAPAS model)"),f5o=l(),fu=a("li"),hae=a("strong"),m5o=o("transfo-xl"),g5o=o(" \u2014 "),x$=a("a"),h5o=o("TransfoXLLMHeadModel"),p5o=o(" (Transformer-XL model)"),_5o=l(),mu=a("li"),pae=a("strong"),u5o=o("unispeech"),b5o=o(" \u2014 "),k$=a("a"),F5o=o("UniSpeechForPreTraining"),v5o=o(" (UniSpeech model)"),T5o=l(),gu=a("li"),_ae=a("strong"),M5o=o("unispeech-sat"),E5o=o(" \u2014 "),S$=a("a"),C5o=o("UniSpeechSatForPreTraining"),w5o=o(" (UniSpeechSat model)"),A5o=l(),hu=a("li"),uae=a("strong"),y5o=o("visual_bert"),L5o=o(" \u2014 "),R$=a("a"),x5o=o("VisualBertForPreTraining"),k5o=o(" (VisualBert model)"),S5o=l(),pu=a("li"),bae=a("strong"),R5o=o("vit_mae"),B5o=o(" \u2014 "),B$=a("a"),P5o=o("ViTMAEForPreTraining"),$5o=o(" (ViTMAE model)"),I5o=l(),_u=a("li"),Fae=a("strong"),q5o=o("wav2vec2"),N5o=o(" \u2014 "),P$=a("a"),j5o=o("Wav2Vec2ForPreTraining"),D5o=o(" (Wav2Vec2 model)"),G5o=l(),uu=a("li"),vae=a("strong"),O5o=o("xlm"),V5o=o(" \u2014 "),$$=a("a"),X5o=o("XLMWithLMHeadModel"),z5o=o(" (XLM model)"),Q5o=l(),bu=a("li"),Tae=a("strong"),W5o=o("xlm-roberta"),H5o=o(" \u2014 "),I$=a("a"),U5o=o("XLMRobertaForMaskedLM"),J5o=o(" (XLM-RoBERTa model)"),Y5o=l(),Fu=a("li"),Mae=a("strong"),K5o=o("xlm-roberta-xl"),Z5o=o(" \u2014 "),q$=a("a"),e2o=o("XLMRobertaXLForMaskedLM"),o2o=o(" (XLM-RoBERTa-XL model)"),r2o=l(),vu=a("li"),Eae=a("strong"),t2o=o("xlnet"),a2o=o(" \u2014 "),N$=a("a"),n2o=o("XLNetLMHeadModel"),s2o=o(" (XLNet model)"),l2o=l(),Tu=a("p"),i2o=o("The model is set in evaluation mode by default using "),Cae=a("code"),d2o=o("model.eval()"),c2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=a("code"),f2o=o("model.train()"),m2o=l(),Aae=a("p"),g2o=o("Examples:"),h2o=l(),f(_w.$$.fragment),BRe=l(),td=a("h2"),Mu=a("a"),yae=a("span"),f(uw.$$.fragment),p2o=l(),Lae=a("span"),_2o=o("AutoModelForCausalLM"),PRe=l(),Ko=a("div"),f(bw.$$.fragment),u2o=l(),ad=a("p"),b2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j$=a("a"),F2o=o("from_pretrained()"),v2o=o(" class method or the "),D$=a("a"),T2o=o("from_config()"),M2o=o(` class
method.`),E2o=l(),Fw=a("p"),C2o=o("This class cannot be instantiated directly using "),xae=a("code"),w2o=o("__init__()"),A2o=o(" (throws an error)."),y2o=l(),Qr=a("div"),f(vw.$$.fragment),L2o=l(),kae=a("p"),x2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),k2o=l(),nd=a("p"),S2o=o(`Note:
Loading a model from its configuration file does `),Sae=a("strong"),R2o=o("not"),B2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G$=a("a"),P2o=o("from_pretrained()"),$2o=o(" to load the model weights."),I2o=l(),Rae=a("p"),q2o=o("Examples:"),N2o=l(),f(Tw.$$.fragment),j2o=l(),je=a("div"),f(Mw.$$.fragment),D2o=l(),Bae=a("p"),G2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O2o=l(),Qa=a("p"),V2o=o("The model class to instantiate is selected based on the "),Pae=a("code"),X2o=o("model_type"),z2o=o(` property of the config object (either
passed as an argument or loaded from `),$ae=a("code"),Q2o=o("pretrained_model_name_or_path"),W2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iae=a("code"),H2o=o("pretrained_model_name_or_path"),U2o=o(":"),J2o=l(),$=a("ul"),Eu=a("li"),qae=a("strong"),Y2o=o("bart"),K2o=o(" \u2014 "),O$=a("a"),Z2o=o("BartForCausalLM"),e1o=o(" (BART model)"),o1o=l(),Cu=a("li"),Nae=a("strong"),r1o=o("bert"),t1o=o(" \u2014 "),V$=a("a"),a1o=o("BertLMHeadModel"),n1o=o(" (BERT model)"),s1o=l(),wu=a("li"),jae=a("strong"),l1o=o("bert-generation"),i1o=o(" \u2014 "),X$=a("a"),d1o=o("BertGenerationDecoder"),c1o=o(" (Bert Generation model)"),f1o=l(),Au=a("li"),Dae=a("strong"),m1o=o("big_bird"),g1o=o(" \u2014 "),z$=a("a"),h1o=o("BigBirdForCausalLM"),p1o=o(" (BigBird model)"),_1o=l(),yu=a("li"),Gae=a("strong"),u1o=o("bigbird_pegasus"),b1o=o(" \u2014 "),Q$=a("a"),F1o=o("BigBirdPegasusForCausalLM"),v1o=o(" (BigBirdPegasus model)"),T1o=l(),Lu=a("li"),Oae=a("strong"),M1o=o("blenderbot"),E1o=o(" \u2014 "),W$=a("a"),C1o=o("BlenderbotForCausalLM"),w1o=o(" (Blenderbot model)"),A1o=l(),xu=a("li"),Vae=a("strong"),y1o=o("blenderbot-small"),L1o=o(" \u2014 "),H$=a("a"),x1o=o("BlenderbotSmallForCausalLM"),k1o=o(" (BlenderbotSmall model)"),S1o=l(),ku=a("li"),Xae=a("strong"),R1o=o("camembert"),B1o=o(" \u2014 "),U$=a("a"),P1o=o("CamembertForCausalLM"),$1o=o(" (CamemBERT model)"),I1o=l(),Su=a("li"),zae=a("strong"),q1o=o("ctrl"),N1o=o(" \u2014 "),J$=a("a"),j1o=o("CTRLLMHeadModel"),D1o=o(" (CTRL model)"),G1o=l(),Ru=a("li"),Qae=a("strong"),O1o=o("data2vec-text"),V1o=o(" \u2014 "),Y$=a("a"),X1o=o("Data2VecTextForCausalLM"),z1o=o(" (Data2VecText model)"),Q1o=l(),Bu=a("li"),Wae=a("strong"),W1o=o("electra"),H1o=o(" \u2014 "),K$=a("a"),U1o=o("ElectraForCausalLM"),J1o=o(" (ELECTRA model)"),Y1o=l(),Pu=a("li"),Hae=a("strong"),K1o=o("gpt2"),Z1o=o(" \u2014 "),Z$=a("a"),ebo=o("GPT2LMHeadModel"),obo=o(" (OpenAI GPT-2 model)"),rbo=l(),$u=a("li"),Uae=a("strong"),tbo=o("gpt_neo"),abo=o(" \u2014 "),eI=a("a"),nbo=o("GPTNeoForCausalLM"),sbo=o(" (GPT Neo model)"),lbo=l(),Iu=a("li"),Jae=a("strong"),ibo=o("gptj"),dbo=o(" \u2014 "),oI=a("a"),cbo=o("GPTJForCausalLM"),fbo=o(" (GPT-J model)"),mbo=l(),qu=a("li"),Yae=a("strong"),gbo=o("marian"),hbo=o(" \u2014 "),rI=a("a"),pbo=o("MarianForCausalLM"),_bo=o(" (Marian model)"),ubo=l(),Nu=a("li"),Kae=a("strong"),bbo=o("mbart"),Fbo=o(" \u2014 "),tI=a("a"),vbo=o("MBartForCausalLM"),Tbo=o(" (mBART model)"),Mbo=l(),ju=a("li"),Zae=a("strong"),Ebo=o("megatron-bert"),Cbo=o(" \u2014 "),aI=a("a"),wbo=o("MegatronBertForCausalLM"),Abo=o(" (MegatronBert model)"),ybo=l(),Du=a("li"),ene=a("strong"),Lbo=o("openai-gpt"),xbo=o(" \u2014 "),nI=a("a"),kbo=o("OpenAIGPTLMHeadModel"),Sbo=o(" (OpenAI GPT model)"),Rbo=l(),Gu=a("li"),one=a("strong"),Bbo=o("pegasus"),Pbo=o(" \u2014 "),sI=a("a"),$bo=o("PegasusForCausalLM"),Ibo=o(" (Pegasus model)"),qbo=l(),Ou=a("li"),rne=a("strong"),Nbo=o("plbart"),jbo=o(" \u2014 "),lI=a("a"),Dbo=o("PLBartForCausalLM"),Gbo=o(" (PLBart model)"),Obo=l(),Vu=a("li"),tne=a("strong"),Vbo=o("prophetnet"),Xbo=o(" \u2014 "),iI=a("a"),zbo=o("ProphetNetForCausalLM"),Qbo=o(" (ProphetNet model)"),Wbo=l(),Xu=a("li"),ane=a("strong"),Hbo=o("qdqbert"),Ubo=o(" \u2014 "),dI=a("a"),Jbo=o("QDQBertLMHeadModel"),Ybo=o(" (QDQBert model)"),Kbo=l(),zu=a("li"),nne=a("strong"),Zbo=o("reformer"),eFo=o(" \u2014 "),cI=a("a"),oFo=o("ReformerModelWithLMHead"),rFo=o(" (Reformer model)"),tFo=l(),Qu=a("li"),sne=a("strong"),aFo=o("rembert"),nFo=o(" \u2014 "),fI=a("a"),sFo=o("RemBertForCausalLM"),lFo=o(" (RemBERT model)"),iFo=l(),Wu=a("li"),lne=a("strong"),dFo=o("roberta"),cFo=o(" \u2014 "),mI=a("a"),fFo=o("RobertaForCausalLM"),mFo=o(" (RoBERTa model)"),gFo=l(),Hu=a("li"),ine=a("strong"),hFo=o("roformer"),pFo=o(" \u2014 "),gI=a("a"),_Fo=o("RoFormerForCausalLM"),uFo=o(" (RoFormer model)"),bFo=l(),Uu=a("li"),dne=a("strong"),FFo=o("speech_to_text_2"),vFo=o(" \u2014 "),hI=a("a"),TFo=o("Speech2Text2ForCausalLM"),MFo=o(" (Speech2Text2 model)"),EFo=l(),Ju=a("li"),cne=a("strong"),CFo=o("transfo-xl"),wFo=o(" \u2014 "),pI=a("a"),AFo=o("TransfoXLLMHeadModel"),yFo=o(" (Transformer-XL model)"),LFo=l(),Yu=a("li"),fne=a("strong"),xFo=o("trocr"),kFo=o(" \u2014 "),_I=a("a"),SFo=o("TrOCRForCausalLM"),RFo=o(" (TrOCR model)"),BFo=l(),Ku=a("li"),mne=a("strong"),PFo=o("xglm"),$Fo=o(" \u2014 "),uI=a("a"),IFo=o("XGLMForCausalLM"),qFo=o(" (XGLM model)"),NFo=l(),Zu=a("li"),gne=a("strong"),jFo=o("xlm"),DFo=o(" \u2014 "),bI=a("a"),GFo=o("XLMWithLMHeadModel"),OFo=o(" (XLM model)"),VFo=l(),e5=a("li"),hne=a("strong"),XFo=o("xlm-prophetnet"),zFo=o(" \u2014 "),FI=a("a"),QFo=o("XLMProphetNetForCausalLM"),WFo=o(" (XLMProphetNet model)"),HFo=l(),o5=a("li"),pne=a("strong"),UFo=o("xlm-roberta"),JFo=o(" \u2014 "),vI=a("a"),YFo=o("XLMRobertaForCausalLM"),KFo=o(" (XLM-RoBERTa model)"),ZFo=l(),r5=a("li"),_ne=a("strong"),evo=o("xlm-roberta-xl"),ovo=o(" \u2014 "),TI=a("a"),rvo=o("XLMRobertaXLForCausalLM"),tvo=o(" (XLM-RoBERTa-XL model)"),avo=l(),t5=a("li"),une=a("strong"),nvo=o("xlnet"),svo=o(" \u2014 "),MI=a("a"),lvo=o("XLNetLMHeadModel"),ivo=o(" (XLNet model)"),dvo=l(),a5=a("p"),cvo=o("The model is set in evaluation mode by default using "),bne=a("code"),fvo=o("model.eval()"),mvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=a("code"),gvo=o("model.train()"),hvo=l(),vne=a("p"),pvo=o("Examples:"),_vo=l(),f(Ew.$$.fragment),$Re=l(),sd=a("h2"),n5=a("a"),Tne=a("span"),f(Cw.$$.fragment),uvo=l(),Mne=a("span"),bvo=o("AutoModelForMaskedLM"),IRe=l(),Zo=a("div"),f(ww.$$.fragment),Fvo=l(),ld=a("p"),vvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=a("a"),Tvo=o("from_pretrained()"),Mvo=o(" class method or the "),CI=a("a"),Evo=o("from_config()"),Cvo=o(` class
method.`),wvo=l(),Aw=a("p"),Avo=o("This class cannot be instantiated directly using "),Ene=a("code"),yvo=o("__init__()"),Lvo=o(" (throws an error)."),xvo=l(),Wr=a("div"),f(yw.$$.fragment),kvo=l(),Cne=a("p"),Svo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rvo=l(),id=a("p"),Bvo=o(`Note:
Loading a model from its configuration file does `),wne=a("strong"),Pvo=o("not"),$vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=a("a"),Ivo=o("from_pretrained()"),qvo=o(" to load the model weights."),Nvo=l(),Ane=a("p"),jvo=o("Examples:"),Dvo=l(),f(Lw.$$.fragment),Gvo=l(),De=a("div"),f(xw.$$.fragment),Ovo=l(),yne=a("p"),Vvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xvo=l(),Wa=a("p"),zvo=o("The model class to instantiate is selected based on the "),Lne=a("code"),Qvo=o("model_type"),Wvo=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),Hvo=o("pretrained_model_name_or_path"),Uvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),Jvo=o("pretrained_model_name_or_path"),Yvo=o(":"),Kvo=l(),I=a("ul"),s5=a("li"),Sne=a("strong"),Zvo=o("albert"),eTo=o(" \u2014 "),AI=a("a"),oTo=o("AlbertForMaskedLM"),rTo=o(" (ALBERT model)"),tTo=l(),l5=a("li"),Rne=a("strong"),aTo=o("bart"),nTo=o(" \u2014 "),yI=a("a"),sTo=o("BartForConditionalGeneration"),lTo=o(" (BART model)"),iTo=l(),i5=a("li"),Bne=a("strong"),dTo=o("bert"),cTo=o(" \u2014 "),LI=a("a"),fTo=o("BertForMaskedLM"),mTo=o(" (BERT model)"),gTo=l(),d5=a("li"),Pne=a("strong"),hTo=o("big_bird"),pTo=o(" \u2014 "),xI=a("a"),_To=o("BigBirdForMaskedLM"),uTo=o(" (BigBird model)"),bTo=l(),c5=a("li"),$ne=a("strong"),FTo=o("camembert"),vTo=o(" \u2014 "),kI=a("a"),TTo=o("CamembertForMaskedLM"),MTo=o(" (CamemBERT model)"),ETo=l(),f5=a("li"),Ine=a("strong"),CTo=o("convbert"),wTo=o(" \u2014 "),SI=a("a"),ATo=o("ConvBertForMaskedLM"),yTo=o(" (ConvBERT model)"),LTo=l(),m5=a("li"),qne=a("strong"),xTo=o("data2vec-text"),kTo=o(" \u2014 "),RI=a("a"),STo=o("Data2VecTextForMaskedLM"),RTo=o(" (Data2VecText model)"),BTo=l(),g5=a("li"),Nne=a("strong"),PTo=o("deberta"),$To=o(" \u2014 "),BI=a("a"),ITo=o("DebertaForMaskedLM"),qTo=o(" (DeBERTa model)"),NTo=l(),h5=a("li"),jne=a("strong"),jTo=o("deberta-v2"),DTo=o(" \u2014 "),PI=a("a"),GTo=o("DebertaV2ForMaskedLM"),OTo=o(" (DeBERTa-v2 model)"),VTo=l(),p5=a("li"),Dne=a("strong"),XTo=o("distilbert"),zTo=o(" \u2014 "),$I=a("a"),QTo=o("DistilBertForMaskedLM"),WTo=o(" (DistilBERT model)"),HTo=l(),_5=a("li"),Gne=a("strong"),UTo=o("electra"),JTo=o(" \u2014 "),II=a("a"),YTo=o("ElectraForMaskedLM"),KTo=o(" (ELECTRA model)"),ZTo=l(),u5=a("li"),One=a("strong"),e9o=o("flaubert"),o9o=o(" \u2014 "),qI=a("a"),r9o=o("FlaubertWithLMHeadModel"),t9o=o(" (FlauBERT model)"),a9o=l(),b5=a("li"),Vne=a("strong"),n9o=o("fnet"),s9o=o(" \u2014 "),NI=a("a"),l9o=o("FNetForMaskedLM"),i9o=o(" (FNet model)"),d9o=l(),F5=a("li"),Xne=a("strong"),c9o=o("funnel"),f9o=o(" \u2014 "),jI=a("a"),m9o=o("FunnelForMaskedLM"),g9o=o(" (Funnel Transformer model)"),h9o=l(),v5=a("li"),zne=a("strong"),p9o=o("ibert"),_9o=o(" \u2014 "),DI=a("a"),u9o=o("IBertForMaskedLM"),b9o=o(" (I-BERT model)"),F9o=l(),T5=a("li"),Qne=a("strong"),v9o=o("layoutlm"),T9o=o(" \u2014 "),GI=a("a"),M9o=o("LayoutLMForMaskedLM"),E9o=o(" (LayoutLM model)"),C9o=l(),M5=a("li"),Wne=a("strong"),w9o=o("longformer"),A9o=o(" \u2014 "),OI=a("a"),y9o=o("LongformerForMaskedLM"),L9o=o(" (Longformer model)"),x9o=l(),E5=a("li"),Hne=a("strong"),k9o=o("mbart"),S9o=o(" \u2014 "),VI=a("a"),R9o=o("MBartForConditionalGeneration"),B9o=o(" (mBART model)"),P9o=l(),C5=a("li"),Une=a("strong"),$9o=o("megatron-bert"),I9o=o(" \u2014 "),XI=a("a"),q9o=o("MegatronBertForMaskedLM"),N9o=o(" (MegatronBert model)"),j9o=l(),w5=a("li"),Jne=a("strong"),D9o=o("mobilebert"),G9o=o(" \u2014 "),zI=a("a"),O9o=o("MobileBertForMaskedLM"),V9o=o(" (MobileBERT model)"),X9o=l(),A5=a("li"),Yne=a("strong"),z9o=o("mpnet"),Q9o=o(" \u2014 "),QI=a("a"),W9o=o("MPNetForMaskedLM"),H9o=o(" (MPNet model)"),U9o=l(),y5=a("li"),Kne=a("strong"),J9o=o("nystromformer"),Y9o=o(" \u2014 "),WI=a("a"),K9o=o("NystromformerForMaskedLM"),Z9o=o(" (Nystromformer model)"),eMo=l(),L5=a("li"),Zne=a("strong"),oMo=o("perceiver"),rMo=o(" \u2014 "),HI=a("a"),tMo=o("PerceiverForMaskedLM"),aMo=o(" (Perceiver model)"),nMo=l(),x5=a("li"),ese=a("strong"),sMo=o("qdqbert"),lMo=o(" \u2014 "),UI=a("a"),iMo=o("QDQBertForMaskedLM"),dMo=o(" (QDQBert model)"),cMo=l(),k5=a("li"),ose=a("strong"),fMo=o("reformer"),mMo=o(" \u2014 "),JI=a("a"),gMo=o("ReformerForMaskedLM"),hMo=o(" (Reformer model)"),pMo=l(),S5=a("li"),rse=a("strong"),_Mo=o("rembert"),uMo=o(" \u2014 "),YI=a("a"),bMo=o("RemBertForMaskedLM"),FMo=o(" (RemBERT model)"),vMo=l(),R5=a("li"),tse=a("strong"),TMo=o("roberta"),MMo=o(" \u2014 "),KI=a("a"),EMo=o("RobertaForMaskedLM"),CMo=o(" (RoBERTa model)"),wMo=l(),B5=a("li"),ase=a("strong"),AMo=o("roformer"),yMo=o(" \u2014 "),ZI=a("a"),LMo=o("RoFormerForMaskedLM"),xMo=o(" (RoFormer model)"),kMo=l(),P5=a("li"),nse=a("strong"),SMo=o("squeezebert"),RMo=o(" \u2014 "),eq=a("a"),BMo=o("SqueezeBertForMaskedLM"),PMo=o(" (SqueezeBERT model)"),$Mo=l(),$5=a("li"),sse=a("strong"),IMo=o("tapas"),qMo=o(" \u2014 "),oq=a("a"),NMo=o("TapasForMaskedLM"),jMo=o(" (TAPAS model)"),DMo=l(),I5=a("li"),lse=a("strong"),GMo=o("wav2vec2"),OMo=o(" \u2014 "),ise=a("code"),VMo=o("Wav2Vec2ForMaskedLM"),XMo=o(" (Wav2Vec2 model)"),zMo=l(),q5=a("li"),dse=a("strong"),QMo=o("xlm"),WMo=o(" \u2014 "),rq=a("a"),HMo=o("XLMWithLMHeadModel"),UMo=o(" (XLM model)"),JMo=l(),N5=a("li"),cse=a("strong"),YMo=o("xlm-roberta"),KMo=o(" \u2014 "),tq=a("a"),ZMo=o("XLMRobertaForMaskedLM"),e4o=o(" (XLM-RoBERTa model)"),o4o=l(),j5=a("li"),fse=a("strong"),r4o=o("xlm-roberta-xl"),t4o=o(" \u2014 "),aq=a("a"),a4o=o("XLMRobertaXLForMaskedLM"),n4o=o(" (XLM-RoBERTa-XL model)"),s4o=l(),D5=a("li"),mse=a("strong"),l4o=o("yoso"),i4o=o(" \u2014 "),nq=a("a"),d4o=o("YosoForMaskedLM"),c4o=o(" (YOSO model)"),f4o=l(),G5=a("p"),m4o=o("The model is set in evaluation mode by default using "),gse=a("code"),g4o=o("model.eval()"),h4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=a("code"),p4o=o("model.train()"),_4o=l(),pse=a("p"),u4o=o("Examples:"),b4o=l(),f(kw.$$.fragment),qRe=l(),dd=a("h2"),O5=a("a"),_se=a("span"),f(Sw.$$.fragment),F4o=l(),use=a("span"),v4o=o("AutoModelForSeq2SeqLM"),NRe=l(),er=a("div"),f(Rw.$$.fragment),T4o=l(),cd=a("p"),M4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sq=a("a"),E4o=o("from_pretrained()"),C4o=o(" class method or the "),lq=a("a"),w4o=o("from_config()"),A4o=o(` class
method.`),y4o=l(),Bw=a("p"),L4o=o("This class cannot be instantiated directly using "),bse=a("code"),x4o=o("__init__()"),k4o=o(" (throws an error)."),S4o=l(),Hr=a("div"),f(Pw.$$.fragment),R4o=l(),Fse=a("p"),B4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),P4o=l(),fd=a("p"),$4o=o(`Note:
Loading a model from its configuration file does `),vse=a("strong"),I4o=o("not"),q4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iq=a("a"),N4o=o("from_pretrained()"),j4o=o(" to load the model weights."),D4o=l(),Tse=a("p"),G4o=o("Examples:"),O4o=l(),f($w.$$.fragment),V4o=l(),Ge=a("div"),f(Iw.$$.fragment),X4o=l(),Mse=a("p"),z4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q4o=l(),Ha=a("p"),W4o=o("The model class to instantiate is selected based on the "),Ese=a("code"),H4o=o("model_type"),U4o=o(` property of the config object (either
passed as an argument or loaded from `),Cse=a("code"),J4o=o("pretrained_model_name_or_path"),Y4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=a("code"),K4o=o("pretrained_model_name_or_path"),Z4o=o(":"),eEo=l(),ne=a("ul"),V5=a("li"),Ase=a("strong"),oEo=o("bart"),rEo=o(" \u2014 "),dq=a("a"),tEo=o("BartForConditionalGeneration"),aEo=o(" (BART model)"),nEo=l(),X5=a("li"),yse=a("strong"),sEo=o("bigbird_pegasus"),lEo=o(" \u2014 "),cq=a("a"),iEo=o("BigBirdPegasusForConditionalGeneration"),dEo=o(" (BigBirdPegasus model)"),cEo=l(),z5=a("li"),Lse=a("strong"),fEo=o("blenderbot"),mEo=o(" \u2014 "),fq=a("a"),gEo=o("BlenderbotForConditionalGeneration"),hEo=o(" (Blenderbot model)"),pEo=l(),Q5=a("li"),xse=a("strong"),_Eo=o("blenderbot-small"),uEo=o(" \u2014 "),mq=a("a"),bEo=o("BlenderbotSmallForConditionalGeneration"),FEo=o(" (BlenderbotSmall model)"),vEo=l(),W5=a("li"),kse=a("strong"),TEo=o("encoder-decoder"),MEo=o(" \u2014 "),gq=a("a"),EEo=o("EncoderDecoderModel"),CEo=o(" (Encoder decoder model)"),wEo=l(),H5=a("li"),Sse=a("strong"),AEo=o("fsmt"),yEo=o(" \u2014 "),hq=a("a"),LEo=o("FSMTForConditionalGeneration"),xEo=o(" (FairSeq Machine-Translation model)"),kEo=l(),U5=a("li"),Rse=a("strong"),SEo=o("led"),REo=o(" \u2014 "),pq=a("a"),BEo=o("LEDForConditionalGeneration"),PEo=o(" (LED model)"),$Eo=l(),J5=a("li"),Bse=a("strong"),IEo=o("m2m_100"),qEo=o(" \u2014 "),_q=a("a"),NEo=o("M2M100ForConditionalGeneration"),jEo=o(" (M2M100 model)"),DEo=l(),Y5=a("li"),Pse=a("strong"),GEo=o("marian"),OEo=o(" \u2014 "),uq=a("a"),VEo=o("MarianMTModel"),XEo=o(" (Marian model)"),zEo=l(),K5=a("li"),$se=a("strong"),QEo=o("mbart"),WEo=o(" \u2014 "),bq=a("a"),HEo=o("MBartForConditionalGeneration"),UEo=o(" (mBART model)"),JEo=l(),Z5=a("li"),Ise=a("strong"),YEo=o("mt5"),KEo=o(" \u2014 "),Fq=a("a"),ZEo=o("MT5ForConditionalGeneration"),e3o=o(" (mT5 model)"),o3o=l(),e2=a("li"),qse=a("strong"),r3o=o("pegasus"),t3o=o(" \u2014 "),vq=a("a"),a3o=o("PegasusForConditionalGeneration"),n3o=o(" (Pegasus model)"),s3o=l(),o2=a("li"),Nse=a("strong"),l3o=o("plbart"),i3o=o(" \u2014 "),Tq=a("a"),d3o=o("PLBartForConditionalGeneration"),c3o=o(" (PLBart model)"),f3o=l(),r2=a("li"),jse=a("strong"),m3o=o("prophetnet"),g3o=o(" \u2014 "),Mq=a("a"),h3o=o("ProphetNetForConditionalGeneration"),p3o=o(" (ProphetNet model)"),_3o=l(),t2=a("li"),Dse=a("strong"),u3o=o("t5"),b3o=o(" \u2014 "),Eq=a("a"),F3o=o("T5ForConditionalGeneration"),v3o=o(" (T5 model)"),T3o=l(),a2=a("li"),Gse=a("strong"),M3o=o("tapex"),E3o=o(" \u2014 "),Cq=a("a"),C3o=o("BartForConditionalGeneration"),w3o=o(" (TAPEX model)"),A3o=l(),n2=a("li"),Ose=a("strong"),y3o=o("xlm-prophetnet"),L3o=o(" \u2014 "),wq=a("a"),x3o=o("XLMProphetNetForConditionalGeneration"),k3o=o(" (XLMProphetNet model)"),S3o=l(),s2=a("p"),R3o=o("The model is set in evaluation mode by default using "),Vse=a("code"),B3o=o("model.eval()"),P3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=a("code"),$3o=o("model.train()"),I3o=l(),zse=a("p"),q3o=o("Examples:"),N3o=l(),f(qw.$$.fragment),jRe=l(),md=a("h2"),l2=a("a"),Qse=a("span"),f(Nw.$$.fragment),j3o=l(),Wse=a("span"),D3o=o("AutoModelForSequenceClassification"),DRe=l(),or=a("div"),f(jw.$$.fragment),G3o=l(),gd=a("p"),O3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Aq=a("a"),V3o=o("from_pretrained()"),X3o=o(" class method or the "),yq=a("a"),z3o=o("from_config()"),Q3o=o(` class
method.`),W3o=l(),Dw=a("p"),H3o=o("This class cannot be instantiated directly using "),Hse=a("code"),U3o=o("__init__()"),J3o=o(" (throws an error)."),Y3o=l(),Ur=a("div"),f(Gw.$$.fragment),K3o=l(),Use=a("p"),Z3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eCo=l(),hd=a("p"),oCo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),rCo=o("not"),tCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=a("a"),aCo=o("from_pretrained()"),nCo=o(" to load the model weights."),sCo=l(),Yse=a("p"),lCo=o("Examples:"),iCo=l(),f(Ow.$$.fragment),dCo=l(),Oe=a("div"),f(Vw.$$.fragment),cCo=l(),Kse=a("p"),fCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mCo=l(),Ua=a("p"),gCo=o("The model class to instantiate is selected based on the "),Zse=a("code"),hCo=o("model_type"),pCo=o(` property of the config object (either
passed as an argument or loaded from `),ele=a("code"),_Co=o("pretrained_model_name_or_path"),uCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=a("code"),bCo=o("pretrained_model_name_or_path"),FCo=o(":"),vCo=l(),y=a("ul"),i2=a("li"),rle=a("strong"),TCo=o("albert"),MCo=o(" \u2014 "),xq=a("a"),ECo=o("AlbertForSequenceClassification"),CCo=o(" (ALBERT model)"),wCo=l(),d2=a("li"),tle=a("strong"),ACo=o("bart"),yCo=o(" \u2014 "),kq=a("a"),LCo=o("BartForSequenceClassification"),xCo=o(" (BART model)"),kCo=l(),c2=a("li"),ale=a("strong"),SCo=o("bert"),RCo=o(" \u2014 "),Sq=a("a"),BCo=o("BertForSequenceClassification"),PCo=o(" (BERT model)"),$Co=l(),f2=a("li"),nle=a("strong"),ICo=o("big_bird"),qCo=o(" \u2014 "),Rq=a("a"),NCo=o("BigBirdForSequenceClassification"),jCo=o(" (BigBird model)"),DCo=l(),m2=a("li"),sle=a("strong"),GCo=o("bigbird_pegasus"),OCo=o(" \u2014 "),Bq=a("a"),VCo=o("BigBirdPegasusForSequenceClassification"),XCo=o(" (BigBirdPegasus model)"),zCo=l(),g2=a("li"),lle=a("strong"),QCo=o("camembert"),WCo=o(" \u2014 "),Pq=a("a"),HCo=o("CamembertForSequenceClassification"),UCo=o(" (CamemBERT model)"),JCo=l(),h2=a("li"),ile=a("strong"),YCo=o("canine"),KCo=o(" \u2014 "),$q=a("a"),ZCo=o("CanineForSequenceClassification"),ewo=o(" (Canine model)"),owo=l(),p2=a("li"),dle=a("strong"),rwo=o("convbert"),two=o(" \u2014 "),Iq=a("a"),awo=o("ConvBertForSequenceClassification"),nwo=o(" (ConvBERT model)"),swo=l(),_2=a("li"),cle=a("strong"),lwo=o("ctrl"),iwo=o(" \u2014 "),qq=a("a"),dwo=o("CTRLForSequenceClassification"),cwo=o(" (CTRL model)"),fwo=l(),u2=a("li"),fle=a("strong"),mwo=o("data2vec-text"),gwo=o(" \u2014 "),Nq=a("a"),hwo=o("Data2VecTextForSequenceClassification"),pwo=o(" (Data2VecText model)"),_wo=l(),b2=a("li"),mle=a("strong"),uwo=o("deberta"),bwo=o(" \u2014 "),jq=a("a"),Fwo=o("DebertaForSequenceClassification"),vwo=o(" (DeBERTa model)"),Two=l(),F2=a("li"),gle=a("strong"),Mwo=o("deberta-v2"),Ewo=o(" \u2014 "),Dq=a("a"),Cwo=o("DebertaV2ForSequenceClassification"),wwo=o(" (DeBERTa-v2 model)"),Awo=l(),v2=a("li"),hle=a("strong"),ywo=o("distilbert"),Lwo=o(" \u2014 "),Gq=a("a"),xwo=o("DistilBertForSequenceClassification"),kwo=o(" (DistilBERT model)"),Swo=l(),T2=a("li"),ple=a("strong"),Rwo=o("electra"),Bwo=o(" \u2014 "),Oq=a("a"),Pwo=o("ElectraForSequenceClassification"),$wo=o(" (ELECTRA model)"),Iwo=l(),M2=a("li"),_le=a("strong"),qwo=o("flaubert"),Nwo=o(" \u2014 "),Vq=a("a"),jwo=o("FlaubertForSequenceClassification"),Dwo=o(" (FlauBERT model)"),Gwo=l(),E2=a("li"),ule=a("strong"),Owo=o("fnet"),Vwo=o(" \u2014 "),Xq=a("a"),Xwo=o("FNetForSequenceClassification"),zwo=o(" (FNet model)"),Qwo=l(),C2=a("li"),ble=a("strong"),Wwo=o("funnel"),Hwo=o(" \u2014 "),zq=a("a"),Uwo=o("FunnelForSequenceClassification"),Jwo=o(" (Funnel Transformer model)"),Ywo=l(),w2=a("li"),Fle=a("strong"),Kwo=o("gpt2"),Zwo=o(" \u2014 "),Qq=a("a"),e6o=o("GPT2ForSequenceClassification"),o6o=o(" (OpenAI GPT-2 model)"),r6o=l(),A2=a("li"),vle=a("strong"),t6o=o("gpt_neo"),a6o=o(" \u2014 "),Wq=a("a"),n6o=o("GPTNeoForSequenceClassification"),s6o=o(" (GPT Neo model)"),l6o=l(),y2=a("li"),Tle=a("strong"),i6o=o("gptj"),d6o=o(" \u2014 "),Hq=a("a"),c6o=o("GPTJForSequenceClassification"),f6o=o(" (GPT-J model)"),m6o=l(),L2=a("li"),Mle=a("strong"),g6o=o("ibert"),h6o=o(" \u2014 "),Uq=a("a"),p6o=o("IBertForSequenceClassification"),_6o=o(" (I-BERT model)"),u6o=l(),x2=a("li"),Ele=a("strong"),b6o=o("layoutlm"),F6o=o(" \u2014 "),Jq=a("a"),v6o=o("LayoutLMForSequenceClassification"),T6o=o(" (LayoutLM model)"),M6o=l(),k2=a("li"),Cle=a("strong"),E6o=o("layoutlmv2"),C6o=o(" \u2014 "),Yq=a("a"),w6o=o("LayoutLMv2ForSequenceClassification"),A6o=o(" (LayoutLMv2 model)"),y6o=l(),S2=a("li"),wle=a("strong"),L6o=o("led"),x6o=o(" \u2014 "),Kq=a("a"),k6o=o("LEDForSequenceClassification"),S6o=o(" (LED model)"),R6o=l(),R2=a("li"),Ale=a("strong"),B6o=o("longformer"),P6o=o(" \u2014 "),Zq=a("a"),$6o=o("LongformerForSequenceClassification"),I6o=o(" (Longformer model)"),q6o=l(),B2=a("li"),yle=a("strong"),N6o=o("mbart"),j6o=o(" \u2014 "),eN=a("a"),D6o=o("MBartForSequenceClassification"),G6o=o(" (mBART model)"),O6o=l(),P2=a("li"),Lle=a("strong"),V6o=o("megatron-bert"),X6o=o(" \u2014 "),oN=a("a"),z6o=o("MegatronBertForSequenceClassification"),Q6o=o(" (MegatronBert model)"),W6o=l(),$2=a("li"),xle=a("strong"),H6o=o("mobilebert"),U6o=o(" \u2014 "),rN=a("a"),J6o=o("MobileBertForSequenceClassification"),Y6o=o(" (MobileBERT model)"),K6o=l(),I2=a("li"),kle=a("strong"),Z6o=o("mpnet"),eAo=o(" \u2014 "),tN=a("a"),oAo=o("MPNetForSequenceClassification"),rAo=o(" (MPNet model)"),tAo=l(),q2=a("li"),Sle=a("strong"),aAo=o("nystromformer"),nAo=o(" \u2014 "),aN=a("a"),sAo=o("NystromformerForSequenceClassification"),lAo=o(" (Nystromformer model)"),iAo=l(),N2=a("li"),Rle=a("strong"),dAo=o("openai-gpt"),cAo=o(" \u2014 "),nN=a("a"),fAo=o("OpenAIGPTForSequenceClassification"),mAo=o(" (OpenAI GPT model)"),gAo=l(),j2=a("li"),Ble=a("strong"),hAo=o("perceiver"),pAo=o(" \u2014 "),sN=a("a"),_Ao=o("PerceiverForSequenceClassification"),uAo=o(" (Perceiver model)"),bAo=l(),D2=a("li"),Ple=a("strong"),FAo=o("plbart"),vAo=o(" \u2014 "),lN=a("a"),TAo=o("PLBartForSequenceClassification"),MAo=o(" (PLBart model)"),EAo=l(),G2=a("li"),$le=a("strong"),CAo=o("qdqbert"),wAo=o(" \u2014 "),iN=a("a"),AAo=o("QDQBertForSequenceClassification"),yAo=o(" (QDQBert model)"),LAo=l(),O2=a("li"),Ile=a("strong"),xAo=o("reformer"),kAo=o(" \u2014 "),dN=a("a"),SAo=o("ReformerForSequenceClassification"),RAo=o(" (Reformer model)"),BAo=l(),V2=a("li"),qle=a("strong"),PAo=o("rembert"),$Ao=o(" \u2014 "),cN=a("a"),IAo=o("RemBertForSequenceClassification"),qAo=o(" (RemBERT model)"),NAo=l(),X2=a("li"),Nle=a("strong"),jAo=o("roberta"),DAo=o(" \u2014 "),fN=a("a"),GAo=o("RobertaForSequenceClassification"),OAo=o(" (RoBERTa model)"),VAo=l(),z2=a("li"),jle=a("strong"),XAo=o("roformer"),zAo=o(" \u2014 "),mN=a("a"),QAo=o("RoFormerForSequenceClassification"),WAo=o(" (RoFormer model)"),HAo=l(),Q2=a("li"),Dle=a("strong"),UAo=o("squeezebert"),JAo=o(" \u2014 "),gN=a("a"),YAo=o("SqueezeBertForSequenceClassification"),KAo=o(" (SqueezeBERT model)"),ZAo=l(),W2=a("li"),Gle=a("strong"),e0o=o("tapas"),o0o=o(" \u2014 "),hN=a("a"),r0o=o("TapasForSequenceClassification"),t0o=o(" (TAPAS model)"),a0o=l(),H2=a("li"),Ole=a("strong"),n0o=o("tapex"),s0o=o(" \u2014 "),pN=a("a"),l0o=o("BartForSequenceClassification"),i0o=o(" (TAPEX model)"),d0o=l(),U2=a("li"),Vle=a("strong"),c0o=o("transfo-xl"),f0o=o(" \u2014 "),_N=a("a"),m0o=o("TransfoXLForSequenceClassification"),g0o=o(" (Transformer-XL model)"),h0o=l(),J2=a("li"),Xle=a("strong"),p0o=o("xlm"),_0o=o(" \u2014 "),uN=a("a"),u0o=o("XLMForSequenceClassification"),b0o=o(" (XLM model)"),F0o=l(),Y2=a("li"),zle=a("strong"),v0o=o("xlm-roberta"),T0o=o(" \u2014 "),bN=a("a"),M0o=o("XLMRobertaForSequenceClassification"),E0o=o(" (XLM-RoBERTa model)"),C0o=l(),K2=a("li"),Qle=a("strong"),w0o=o("xlm-roberta-xl"),A0o=o(" \u2014 "),FN=a("a"),y0o=o("XLMRobertaXLForSequenceClassification"),L0o=o(" (XLM-RoBERTa-XL model)"),x0o=l(),Z2=a("li"),Wle=a("strong"),k0o=o("xlnet"),S0o=o(" \u2014 "),vN=a("a"),R0o=o("XLNetForSequenceClassification"),B0o=o(" (XLNet model)"),P0o=l(),e1=a("li"),Hle=a("strong"),$0o=o("yoso"),I0o=o(" \u2014 "),TN=a("a"),q0o=o("YosoForSequenceClassification"),N0o=o(" (YOSO model)"),j0o=l(),o1=a("p"),D0o=o("The model is set in evaluation mode by default using "),Ule=a("code"),G0o=o("model.eval()"),O0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jle=a("code"),V0o=o("model.train()"),X0o=l(),Yle=a("p"),z0o=o("Examples:"),Q0o=l(),f(Xw.$$.fragment),GRe=l(),pd=a("h2"),r1=a("a"),Kle=a("span"),f(zw.$$.fragment),W0o=l(),Zle=a("span"),H0o=o("AutoModelForMultipleChoice"),ORe=l(),rr=a("div"),f(Qw.$$.fragment),U0o=l(),_d=a("p"),J0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MN=a("a"),Y0o=o("from_pretrained()"),K0o=o(" class method or the "),EN=a("a"),Z0o=o("from_config()"),eyo=o(` class
method.`),oyo=l(),Ww=a("p"),ryo=o("This class cannot be instantiated directly using "),eie=a("code"),tyo=o("__init__()"),ayo=o(" (throws an error)."),nyo=l(),Jr=a("div"),f(Hw.$$.fragment),syo=l(),oie=a("p"),lyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iyo=l(),ud=a("p"),dyo=o(`Note:
Loading a model from its configuration file does `),rie=a("strong"),cyo=o("not"),fyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=a("a"),myo=o("from_pretrained()"),gyo=o(" to load the model weights."),hyo=l(),tie=a("p"),pyo=o("Examples:"),_yo=l(),f(Uw.$$.fragment),uyo=l(),Ve=a("div"),f(Jw.$$.fragment),byo=l(),aie=a("p"),Fyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vyo=l(),Ja=a("p"),Tyo=o("The model class to instantiate is selected based on the "),nie=a("code"),Myo=o("model_type"),Eyo=o(` property of the config object (either
passed as an argument or loaded from `),sie=a("code"),Cyo=o("pretrained_model_name_or_path"),wyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=a("code"),Ayo=o("pretrained_model_name_or_path"),yyo=o(":"),Lyo=l(),G=a("ul"),t1=a("li"),iie=a("strong"),xyo=o("albert"),kyo=o(" \u2014 "),wN=a("a"),Syo=o("AlbertForMultipleChoice"),Ryo=o(" (ALBERT model)"),Byo=l(),a1=a("li"),die=a("strong"),Pyo=o("bert"),$yo=o(" \u2014 "),AN=a("a"),Iyo=o("BertForMultipleChoice"),qyo=o(" (BERT model)"),Nyo=l(),n1=a("li"),cie=a("strong"),jyo=o("big_bird"),Dyo=o(" \u2014 "),yN=a("a"),Gyo=o("BigBirdForMultipleChoice"),Oyo=o(" (BigBird model)"),Vyo=l(),s1=a("li"),fie=a("strong"),Xyo=o("camembert"),zyo=o(" \u2014 "),LN=a("a"),Qyo=o("CamembertForMultipleChoice"),Wyo=o(" (CamemBERT model)"),Hyo=l(),l1=a("li"),mie=a("strong"),Uyo=o("canine"),Jyo=o(" \u2014 "),xN=a("a"),Yyo=o("CanineForMultipleChoice"),Kyo=o(" (Canine model)"),Zyo=l(),i1=a("li"),gie=a("strong"),e8o=o("convbert"),o8o=o(" \u2014 "),kN=a("a"),r8o=o("ConvBertForMultipleChoice"),t8o=o(" (ConvBERT model)"),a8o=l(),d1=a("li"),hie=a("strong"),n8o=o("data2vec-text"),s8o=o(" \u2014 "),SN=a("a"),l8o=o("Data2VecTextForMultipleChoice"),i8o=o(" (Data2VecText model)"),d8o=l(),c1=a("li"),pie=a("strong"),c8o=o("distilbert"),f8o=o(" \u2014 "),RN=a("a"),m8o=o("DistilBertForMultipleChoice"),g8o=o(" (DistilBERT model)"),h8o=l(),f1=a("li"),_ie=a("strong"),p8o=o("electra"),_8o=o(" \u2014 "),BN=a("a"),u8o=o("ElectraForMultipleChoice"),b8o=o(" (ELECTRA model)"),F8o=l(),m1=a("li"),uie=a("strong"),v8o=o("flaubert"),T8o=o(" \u2014 "),PN=a("a"),M8o=o("FlaubertForMultipleChoice"),E8o=o(" (FlauBERT model)"),C8o=l(),g1=a("li"),bie=a("strong"),w8o=o("fnet"),A8o=o(" \u2014 "),$N=a("a"),y8o=o("FNetForMultipleChoice"),L8o=o(" (FNet model)"),x8o=l(),h1=a("li"),Fie=a("strong"),k8o=o("funnel"),S8o=o(" \u2014 "),IN=a("a"),R8o=o("FunnelForMultipleChoice"),B8o=o(" (Funnel Transformer model)"),P8o=l(),p1=a("li"),vie=a("strong"),$8o=o("ibert"),I8o=o(" \u2014 "),qN=a("a"),q8o=o("IBertForMultipleChoice"),N8o=o(" (I-BERT model)"),j8o=l(),_1=a("li"),Tie=a("strong"),D8o=o("longformer"),G8o=o(" \u2014 "),NN=a("a"),O8o=o("LongformerForMultipleChoice"),V8o=o(" (Longformer model)"),X8o=l(),u1=a("li"),Mie=a("strong"),z8o=o("megatron-bert"),Q8o=o(" \u2014 "),jN=a("a"),W8o=o("MegatronBertForMultipleChoice"),H8o=o(" (MegatronBert model)"),U8o=l(),b1=a("li"),Eie=a("strong"),J8o=o("mobilebert"),Y8o=o(" \u2014 "),DN=a("a"),K8o=o("MobileBertForMultipleChoice"),Z8o=o(" (MobileBERT model)"),eLo=l(),F1=a("li"),Cie=a("strong"),oLo=o("mpnet"),rLo=o(" \u2014 "),GN=a("a"),tLo=o("MPNetForMultipleChoice"),aLo=o(" (MPNet model)"),nLo=l(),v1=a("li"),wie=a("strong"),sLo=o("nystromformer"),lLo=o(" \u2014 "),ON=a("a"),iLo=o("NystromformerForMultipleChoice"),dLo=o(" (Nystromformer model)"),cLo=l(),T1=a("li"),Aie=a("strong"),fLo=o("qdqbert"),mLo=o(" \u2014 "),VN=a("a"),gLo=o("QDQBertForMultipleChoice"),hLo=o(" (QDQBert model)"),pLo=l(),M1=a("li"),yie=a("strong"),_Lo=o("rembert"),uLo=o(" \u2014 "),XN=a("a"),bLo=o("RemBertForMultipleChoice"),FLo=o(" (RemBERT model)"),vLo=l(),E1=a("li"),Lie=a("strong"),TLo=o("roberta"),MLo=o(" \u2014 "),zN=a("a"),ELo=o("RobertaForMultipleChoice"),CLo=o(" (RoBERTa model)"),wLo=l(),C1=a("li"),xie=a("strong"),ALo=o("roformer"),yLo=o(" \u2014 "),QN=a("a"),LLo=o("RoFormerForMultipleChoice"),xLo=o(" (RoFormer model)"),kLo=l(),w1=a("li"),kie=a("strong"),SLo=o("squeezebert"),RLo=o(" \u2014 "),WN=a("a"),BLo=o("SqueezeBertForMultipleChoice"),PLo=o(" (SqueezeBERT model)"),$Lo=l(),A1=a("li"),Sie=a("strong"),ILo=o("xlm"),qLo=o(" \u2014 "),HN=a("a"),NLo=o("XLMForMultipleChoice"),jLo=o(" (XLM model)"),DLo=l(),y1=a("li"),Rie=a("strong"),GLo=o("xlm-roberta"),OLo=o(" \u2014 "),UN=a("a"),VLo=o("XLMRobertaForMultipleChoice"),XLo=o(" (XLM-RoBERTa model)"),zLo=l(),L1=a("li"),Bie=a("strong"),QLo=o("xlm-roberta-xl"),WLo=o(" \u2014 "),JN=a("a"),HLo=o("XLMRobertaXLForMultipleChoice"),ULo=o(" (XLM-RoBERTa-XL model)"),JLo=l(),x1=a("li"),Pie=a("strong"),YLo=o("xlnet"),KLo=o(" \u2014 "),YN=a("a"),ZLo=o("XLNetForMultipleChoice"),e7o=o(" (XLNet model)"),o7o=l(),k1=a("li"),$ie=a("strong"),r7o=o("yoso"),t7o=o(" \u2014 "),KN=a("a"),a7o=o("YosoForMultipleChoice"),n7o=o(" (YOSO model)"),s7o=l(),S1=a("p"),l7o=o("The model is set in evaluation mode by default using "),Iie=a("code"),i7o=o("model.eval()"),d7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),c7o=o("model.train()"),f7o=l(),Nie=a("p"),m7o=o("Examples:"),g7o=l(),f(Yw.$$.fragment),VRe=l(),bd=a("h2"),R1=a("a"),jie=a("span"),f(Kw.$$.fragment),h7o=l(),Die=a("span"),p7o=o("AutoModelForNextSentencePrediction"),XRe=l(),tr=a("div"),f(Zw.$$.fragment),_7o=l(),Fd=a("p"),u7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZN=a("a"),b7o=o("from_pretrained()"),F7o=o(" class method or the "),ej=a("a"),v7o=o("from_config()"),T7o=o(` class
method.`),M7o=l(),e6=a("p"),E7o=o("This class cannot be instantiated directly using "),Gie=a("code"),C7o=o("__init__()"),w7o=o(" (throws an error)."),A7o=l(),Yr=a("div"),f(o6.$$.fragment),y7o=l(),Oie=a("p"),L7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),x7o=l(),vd=a("p"),k7o=o(`Note:
Loading a model from its configuration file does `),Vie=a("strong"),S7o=o("not"),R7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),B7o=o("from_pretrained()"),P7o=o(" to load the model weights."),$7o=l(),Xie=a("p"),I7o=o("Examples:"),q7o=l(),f(r6.$$.fragment),N7o=l(),Xe=a("div"),f(t6.$$.fragment),j7o=l(),zie=a("p"),D7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),G7o=l(),Ya=a("p"),O7o=o("The model class to instantiate is selected based on the "),Qie=a("code"),V7o=o("model_type"),X7o=o(` property of the config object (either
passed as an argument or loaded from `),Wie=a("code"),z7o=o("pretrained_model_name_or_path"),Q7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=a("code"),W7o=o("pretrained_model_name_or_path"),H7o=o(":"),U7o=l(),da=a("ul"),B1=a("li"),Uie=a("strong"),J7o=o("bert"),Y7o=o(" \u2014 "),rj=a("a"),K7o=o("BertForNextSentencePrediction"),Z7o=o(" (BERT model)"),exo=l(),P1=a("li"),Jie=a("strong"),oxo=o("fnet"),rxo=o(" \u2014 "),tj=a("a"),txo=o("FNetForNextSentencePrediction"),axo=o(" (FNet model)"),nxo=l(),$1=a("li"),Yie=a("strong"),sxo=o("megatron-bert"),lxo=o(" \u2014 "),aj=a("a"),ixo=o("MegatronBertForNextSentencePrediction"),dxo=o(" (MegatronBert model)"),cxo=l(),I1=a("li"),Kie=a("strong"),fxo=o("mobilebert"),mxo=o(" \u2014 "),nj=a("a"),gxo=o("MobileBertForNextSentencePrediction"),hxo=o(" (MobileBERT model)"),pxo=l(),q1=a("li"),Zie=a("strong"),_xo=o("qdqbert"),uxo=o(" \u2014 "),sj=a("a"),bxo=o("QDQBertForNextSentencePrediction"),Fxo=o(" (QDQBert model)"),vxo=l(),N1=a("p"),Txo=o("The model is set in evaluation mode by default using "),ede=a("code"),Mxo=o("model.eval()"),Exo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=a("code"),Cxo=o("model.train()"),wxo=l(),rde=a("p"),Axo=o("Examples:"),yxo=l(),f(a6.$$.fragment),zRe=l(),Td=a("h2"),j1=a("a"),tde=a("span"),f(n6.$$.fragment),Lxo=l(),ade=a("span"),xxo=o("AutoModelForTokenClassification"),QRe=l(),ar=a("div"),f(s6.$$.fragment),kxo=l(),Md=a("p"),Sxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lj=a("a"),Rxo=o("from_pretrained()"),Bxo=o(" class method or the "),ij=a("a"),Pxo=o("from_config()"),$xo=o(` class
method.`),Ixo=l(),l6=a("p"),qxo=o("This class cannot be instantiated directly using "),nde=a("code"),Nxo=o("__init__()"),jxo=o(" (throws an error)."),Dxo=l(),Kr=a("div"),f(i6.$$.fragment),Gxo=l(),sde=a("p"),Oxo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vxo=l(),Ed=a("p"),Xxo=o(`Note:
Loading a model from its configuration file does `),lde=a("strong"),zxo=o("not"),Qxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=a("a"),Wxo=o("from_pretrained()"),Hxo=o(" to load the model weights."),Uxo=l(),ide=a("p"),Jxo=o("Examples:"),Yxo=l(),f(d6.$$.fragment),Kxo=l(),ze=a("div"),f(c6.$$.fragment),Zxo=l(),dde=a("p"),eko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oko=l(),Ka=a("p"),rko=o("The model class to instantiate is selected based on the "),cde=a("code"),tko=o("model_type"),ako=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),nko=o("pretrained_model_name_or_path"),sko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=a("code"),lko=o("pretrained_model_name_or_path"),iko=o(":"),dko=l(),j=a("ul"),D1=a("li"),gde=a("strong"),cko=o("albert"),fko=o(" \u2014 "),cj=a("a"),mko=o("AlbertForTokenClassification"),gko=o(" (ALBERT model)"),hko=l(),G1=a("li"),hde=a("strong"),pko=o("bert"),_ko=o(" \u2014 "),fj=a("a"),uko=o("BertForTokenClassification"),bko=o(" (BERT model)"),Fko=l(),O1=a("li"),pde=a("strong"),vko=o("big_bird"),Tko=o(" \u2014 "),mj=a("a"),Mko=o("BigBirdForTokenClassification"),Eko=o(" (BigBird model)"),Cko=l(),V1=a("li"),_de=a("strong"),wko=o("camembert"),Ako=o(" \u2014 "),gj=a("a"),yko=o("CamembertForTokenClassification"),Lko=o(" (CamemBERT model)"),xko=l(),X1=a("li"),ude=a("strong"),kko=o("canine"),Sko=o(" \u2014 "),hj=a("a"),Rko=o("CanineForTokenClassification"),Bko=o(" (Canine model)"),Pko=l(),z1=a("li"),bde=a("strong"),$ko=o("convbert"),Iko=o(" \u2014 "),pj=a("a"),qko=o("ConvBertForTokenClassification"),Nko=o(" (ConvBERT model)"),jko=l(),Q1=a("li"),Fde=a("strong"),Dko=o("data2vec-text"),Gko=o(" \u2014 "),_j=a("a"),Oko=o("Data2VecTextForTokenClassification"),Vko=o(" (Data2VecText model)"),Xko=l(),W1=a("li"),vde=a("strong"),zko=o("deberta"),Qko=o(" \u2014 "),uj=a("a"),Wko=o("DebertaForTokenClassification"),Hko=o(" (DeBERTa model)"),Uko=l(),H1=a("li"),Tde=a("strong"),Jko=o("deberta-v2"),Yko=o(" \u2014 "),bj=a("a"),Kko=o("DebertaV2ForTokenClassification"),Zko=o(" (DeBERTa-v2 model)"),eSo=l(),U1=a("li"),Mde=a("strong"),oSo=o("distilbert"),rSo=o(" \u2014 "),Fj=a("a"),tSo=o("DistilBertForTokenClassification"),aSo=o(" (DistilBERT model)"),nSo=l(),J1=a("li"),Ede=a("strong"),sSo=o("electra"),lSo=o(" \u2014 "),vj=a("a"),iSo=o("ElectraForTokenClassification"),dSo=o(" (ELECTRA model)"),cSo=l(),Y1=a("li"),Cde=a("strong"),fSo=o("flaubert"),mSo=o(" \u2014 "),Tj=a("a"),gSo=o("FlaubertForTokenClassification"),hSo=o(" (FlauBERT model)"),pSo=l(),K1=a("li"),wde=a("strong"),_So=o("fnet"),uSo=o(" \u2014 "),Mj=a("a"),bSo=o("FNetForTokenClassification"),FSo=o(" (FNet model)"),vSo=l(),Z1=a("li"),Ade=a("strong"),TSo=o("funnel"),MSo=o(" \u2014 "),Ej=a("a"),ESo=o("FunnelForTokenClassification"),CSo=o(" (Funnel Transformer model)"),wSo=l(),eb=a("li"),yde=a("strong"),ASo=o("gpt2"),ySo=o(" \u2014 "),Cj=a("a"),LSo=o("GPT2ForTokenClassification"),xSo=o(" (OpenAI GPT-2 model)"),kSo=l(),ob=a("li"),Lde=a("strong"),SSo=o("ibert"),RSo=o(" \u2014 "),wj=a("a"),BSo=o("IBertForTokenClassification"),PSo=o(" (I-BERT model)"),$So=l(),rb=a("li"),xde=a("strong"),ISo=o("layoutlm"),qSo=o(" \u2014 "),Aj=a("a"),NSo=o("LayoutLMForTokenClassification"),jSo=o(" (LayoutLM model)"),DSo=l(),tb=a("li"),kde=a("strong"),GSo=o("layoutlmv2"),OSo=o(" \u2014 "),yj=a("a"),VSo=o("LayoutLMv2ForTokenClassification"),XSo=o(" (LayoutLMv2 model)"),zSo=l(),ab=a("li"),Sde=a("strong"),QSo=o("longformer"),WSo=o(" \u2014 "),Lj=a("a"),HSo=o("LongformerForTokenClassification"),USo=o(" (Longformer model)"),JSo=l(),nb=a("li"),Rde=a("strong"),YSo=o("megatron-bert"),KSo=o(" \u2014 "),xj=a("a"),ZSo=o("MegatronBertForTokenClassification"),eRo=o(" (MegatronBert model)"),oRo=l(),sb=a("li"),Bde=a("strong"),rRo=o("mobilebert"),tRo=o(" \u2014 "),kj=a("a"),aRo=o("MobileBertForTokenClassification"),nRo=o(" (MobileBERT model)"),sRo=l(),lb=a("li"),Pde=a("strong"),lRo=o("mpnet"),iRo=o(" \u2014 "),Sj=a("a"),dRo=o("MPNetForTokenClassification"),cRo=o(" (MPNet model)"),fRo=l(),ib=a("li"),$de=a("strong"),mRo=o("nystromformer"),gRo=o(" \u2014 "),Rj=a("a"),hRo=o("NystromformerForTokenClassification"),pRo=o(" (Nystromformer model)"),_Ro=l(),db=a("li"),Ide=a("strong"),uRo=o("qdqbert"),bRo=o(" \u2014 "),Bj=a("a"),FRo=o("QDQBertForTokenClassification"),vRo=o(" (QDQBert model)"),TRo=l(),cb=a("li"),qde=a("strong"),MRo=o("rembert"),ERo=o(" \u2014 "),Pj=a("a"),CRo=o("RemBertForTokenClassification"),wRo=o(" (RemBERT model)"),ARo=l(),fb=a("li"),Nde=a("strong"),yRo=o("roberta"),LRo=o(" \u2014 "),$j=a("a"),xRo=o("RobertaForTokenClassification"),kRo=o(" (RoBERTa model)"),SRo=l(),mb=a("li"),jde=a("strong"),RRo=o("roformer"),BRo=o(" \u2014 "),Ij=a("a"),PRo=o("RoFormerForTokenClassification"),$Ro=o(" (RoFormer model)"),IRo=l(),gb=a("li"),Dde=a("strong"),qRo=o("squeezebert"),NRo=o(" \u2014 "),qj=a("a"),jRo=o("SqueezeBertForTokenClassification"),DRo=o(" (SqueezeBERT model)"),GRo=l(),hb=a("li"),Gde=a("strong"),ORo=o("xlm"),VRo=o(" \u2014 "),Nj=a("a"),XRo=o("XLMForTokenClassification"),zRo=o(" (XLM model)"),QRo=l(),pb=a("li"),Ode=a("strong"),WRo=o("xlm-roberta"),HRo=o(" \u2014 "),jj=a("a"),URo=o("XLMRobertaForTokenClassification"),JRo=o(" (XLM-RoBERTa model)"),YRo=l(),_b=a("li"),Vde=a("strong"),KRo=o("xlm-roberta-xl"),ZRo=o(" \u2014 "),Dj=a("a"),eBo=o("XLMRobertaXLForTokenClassification"),oBo=o(" (XLM-RoBERTa-XL model)"),rBo=l(),ub=a("li"),Xde=a("strong"),tBo=o("xlnet"),aBo=o(" \u2014 "),Gj=a("a"),nBo=o("XLNetForTokenClassification"),sBo=o(" (XLNet model)"),lBo=l(),bb=a("li"),zde=a("strong"),iBo=o("yoso"),dBo=o(" \u2014 "),Oj=a("a"),cBo=o("YosoForTokenClassification"),fBo=o(" (YOSO model)"),mBo=l(),Fb=a("p"),gBo=o("The model is set in evaluation mode by default using "),Qde=a("code"),hBo=o("model.eval()"),pBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),_Bo=o("model.train()"),uBo=l(),Hde=a("p"),bBo=o("Examples:"),FBo=l(),f(f6.$$.fragment),WRe=l(),Cd=a("h2"),vb=a("a"),Ude=a("span"),f(m6.$$.fragment),vBo=l(),Jde=a("span"),TBo=o("AutoModelForQuestionAnswering"),HRe=l(),nr=a("div"),f(g6.$$.fragment),MBo=l(),wd=a("p"),EBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vj=a("a"),CBo=o("from_pretrained()"),wBo=o(" class method or the "),Xj=a("a"),ABo=o("from_config()"),yBo=o(` class
method.`),LBo=l(),h6=a("p"),xBo=o("This class cannot be instantiated directly using "),Yde=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),Zr=a("div"),f(p6.$$.fragment),BBo=l(),Kde=a("p"),PBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Bo=l(),Ad=a("p"),IBo=o(`Note:
Loading a model from its configuration file does `),Zde=a("strong"),qBo=o("not"),NBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),jBo=o("from_pretrained()"),DBo=o(" to load the model weights."),GBo=l(),ece=a("p"),OBo=o("Examples:"),VBo=l(),f(_6.$$.fragment),XBo=l(),Qe=a("div"),f(u6.$$.fragment),zBo=l(),oce=a("p"),QBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WBo=l(),Za=a("p"),HBo=o("The model class to instantiate is selected based on the "),rce=a("code"),UBo=o("model_type"),JBo=o(` property of the config object (either
passed as an argument or loaded from `),tce=a("code"),YBo=o("pretrained_model_name_or_path"),KBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=a("code"),ZBo=o("pretrained_model_name_or_path"),ePo=o(":"),oPo=l(),R=a("ul"),Tb=a("li"),nce=a("strong"),rPo=o("albert"),tPo=o(" \u2014 "),Qj=a("a"),aPo=o("AlbertForQuestionAnswering"),nPo=o(" (ALBERT model)"),sPo=l(),Mb=a("li"),sce=a("strong"),lPo=o("bart"),iPo=o(" \u2014 "),Wj=a("a"),dPo=o("BartForQuestionAnswering"),cPo=o(" (BART model)"),fPo=l(),Eb=a("li"),lce=a("strong"),mPo=o("bert"),gPo=o(" \u2014 "),Hj=a("a"),hPo=o("BertForQuestionAnswering"),pPo=o(" (BERT model)"),_Po=l(),Cb=a("li"),ice=a("strong"),uPo=o("big_bird"),bPo=o(" \u2014 "),Uj=a("a"),FPo=o("BigBirdForQuestionAnswering"),vPo=o(" (BigBird model)"),TPo=l(),wb=a("li"),dce=a("strong"),MPo=o("bigbird_pegasus"),EPo=o(" \u2014 "),Jj=a("a"),CPo=o("BigBirdPegasusForQuestionAnswering"),wPo=o(" (BigBirdPegasus model)"),APo=l(),Ab=a("li"),cce=a("strong"),yPo=o("camembert"),LPo=o(" \u2014 "),Yj=a("a"),xPo=o("CamembertForQuestionAnswering"),kPo=o(" (CamemBERT model)"),SPo=l(),yb=a("li"),fce=a("strong"),RPo=o("canine"),BPo=o(" \u2014 "),Kj=a("a"),PPo=o("CanineForQuestionAnswering"),$Po=o(" (Canine model)"),IPo=l(),Lb=a("li"),mce=a("strong"),qPo=o("convbert"),NPo=o(" \u2014 "),Zj=a("a"),jPo=o("ConvBertForQuestionAnswering"),DPo=o(" (ConvBERT model)"),GPo=l(),xb=a("li"),gce=a("strong"),OPo=o("data2vec-text"),VPo=o(" \u2014 "),eD=a("a"),XPo=o("Data2VecTextForQuestionAnswering"),zPo=o(" (Data2VecText model)"),QPo=l(),kb=a("li"),hce=a("strong"),WPo=o("deberta"),HPo=o(" \u2014 "),oD=a("a"),UPo=o("DebertaForQuestionAnswering"),JPo=o(" (DeBERTa model)"),YPo=l(),Sb=a("li"),pce=a("strong"),KPo=o("deberta-v2"),ZPo=o(" \u2014 "),rD=a("a"),e$o=o("DebertaV2ForQuestionAnswering"),o$o=o(" (DeBERTa-v2 model)"),r$o=l(),Rb=a("li"),_ce=a("strong"),t$o=o("distilbert"),a$o=o(" \u2014 "),tD=a("a"),n$o=o("DistilBertForQuestionAnswering"),s$o=o(" (DistilBERT model)"),l$o=l(),Bb=a("li"),uce=a("strong"),i$o=o("electra"),d$o=o(" \u2014 "),aD=a("a"),c$o=o("ElectraForQuestionAnswering"),f$o=o(" (ELECTRA model)"),m$o=l(),Pb=a("li"),bce=a("strong"),g$o=o("flaubert"),h$o=o(" \u2014 "),nD=a("a"),p$o=o("FlaubertForQuestionAnsweringSimple"),_$o=o(" (FlauBERT model)"),u$o=l(),$b=a("li"),Fce=a("strong"),b$o=o("fnet"),F$o=o(" \u2014 "),sD=a("a"),v$o=o("FNetForQuestionAnswering"),T$o=o(" (FNet model)"),M$o=l(),Ib=a("li"),vce=a("strong"),E$o=o("funnel"),C$o=o(" \u2014 "),lD=a("a"),w$o=o("FunnelForQuestionAnswering"),A$o=o(" (Funnel Transformer model)"),y$o=l(),qb=a("li"),Tce=a("strong"),L$o=o("gptj"),x$o=o(" \u2014 "),iD=a("a"),k$o=o("GPTJForQuestionAnswering"),S$o=o(" (GPT-J model)"),R$o=l(),Nb=a("li"),Mce=a("strong"),B$o=o("ibert"),P$o=o(" \u2014 "),dD=a("a"),$$o=o("IBertForQuestionAnswering"),I$o=o(" (I-BERT model)"),q$o=l(),jb=a("li"),Ece=a("strong"),N$o=o("layoutlmv2"),j$o=o(" \u2014 "),cD=a("a"),D$o=o("LayoutLMv2ForQuestionAnswering"),G$o=o(" (LayoutLMv2 model)"),O$o=l(),Db=a("li"),Cce=a("strong"),V$o=o("led"),X$o=o(" \u2014 "),fD=a("a"),z$o=o("LEDForQuestionAnswering"),Q$o=o(" (LED model)"),W$o=l(),Gb=a("li"),wce=a("strong"),H$o=o("longformer"),U$o=o(" \u2014 "),mD=a("a"),J$o=o("LongformerForQuestionAnswering"),Y$o=o(" (Longformer model)"),K$o=l(),Ob=a("li"),Ace=a("strong"),Z$o=o("lxmert"),eIo=o(" \u2014 "),gD=a("a"),oIo=o("LxmertForQuestionAnswering"),rIo=o(" (LXMERT model)"),tIo=l(),Vb=a("li"),yce=a("strong"),aIo=o("mbart"),nIo=o(" \u2014 "),hD=a("a"),sIo=o("MBartForQuestionAnswering"),lIo=o(" (mBART model)"),iIo=l(),Xb=a("li"),Lce=a("strong"),dIo=o("megatron-bert"),cIo=o(" \u2014 "),pD=a("a"),fIo=o("MegatronBertForQuestionAnswering"),mIo=o(" (MegatronBert model)"),gIo=l(),zb=a("li"),xce=a("strong"),hIo=o("mobilebert"),pIo=o(" \u2014 "),_D=a("a"),_Io=o("MobileBertForQuestionAnswering"),uIo=o(" (MobileBERT model)"),bIo=l(),Qb=a("li"),kce=a("strong"),FIo=o("mpnet"),vIo=o(" \u2014 "),uD=a("a"),TIo=o("MPNetForQuestionAnswering"),MIo=o(" (MPNet model)"),EIo=l(),Wb=a("li"),Sce=a("strong"),CIo=o("nystromformer"),wIo=o(" \u2014 "),bD=a("a"),AIo=o("NystromformerForQuestionAnswering"),yIo=o(" (Nystromformer model)"),LIo=l(),Hb=a("li"),Rce=a("strong"),xIo=o("qdqbert"),kIo=o(" \u2014 "),FD=a("a"),SIo=o("QDQBertForQuestionAnswering"),RIo=o(" (QDQBert model)"),BIo=l(),Ub=a("li"),Bce=a("strong"),PIo=o("reformer"),$Io=o(" \u2014 "),vD=a("a"),IIo=o("ReformerForQuestionAnswering"),qIo=o(" (Reformer model)"),NIo=l(),Jb=a("li"),Pce=a("strong"),jIo=o("rembert"),DIo=o(" \u2014 "),TD=a("a"),GIo=o("RemBertForQuestionAnswering"),OIo=o(" (RemBERT model)"),VIo=l(),Yb=a("li"),$ce=a("strong"),XIo=o("roberta"),zIo=o(" \u2014 "),MD=a("a"),QIo=o("RobertaForQuestionAnswering"),WIo=o(" (RoBERTa model)"),HIo=l(),Kb=a("li"),Ice=a("strong"),UIo=o("roformer"),JIo=o(" \u2014 "),ED=a("a"),YIo=o("RoFormerForQuestionAnswering"),KIo=o(" (RoFormer model)"),ZIo=l(),Zb=a("li"),qce=a("strong"),eqo=o("splinter"),oqo=o(" \u2014 "),CD=a("a"),rqo=o("SplinterForQuestionAnswering"),tqo=o(" (Splinter model)"),aqo=l(),eF=a("li"),Nce=a("strong"),nqo=o("squeezebert"),sqo=o(" \u2014 "),wD=a("a"),lqo=o("SqueezeBertForQuestionAnswering"),iqo=o(" (SqueezeBERT model)"),dqo=l(),oF=a("li"),jce=a("strong"),cqo=o("xlm"),fqo=o(" \u2014 "),AD=a("a"),mqo=o("XLMForQuestionAnsweringSimple"),gqo=o(" (XLM model)"),hqo=l(),rF=a("li"),Dce=a("strong"),pqo=o("xlm-roberta"),_qo=o(" \u2014 "),yD=a("a"),uqo=o("XLMRobertaForQuestionAnswering"),bqo=o(" (XLM-RoBERTa model)"),Fqo=l(),tF=a("li"),Gce=a("strong"),vqo=o("xlm-roberta-xl"),Tqo=o(" \u2014 "),LD=a("a"),Mqo=o("XLMRobertaXLForQuestionAnswering"),Eqo=o(" (XLM-RoBERTa-XL model)"),Cqo=l(),aF=a("li"),Oce=a("strong"),wqo=o("xlnet"),Aqo=o(" \u2014 "),xD=a("a"),yqo=o("XLNetForQuestionAnsweringSimple"),Lqo=o(" (XLNet model)"),xqo=l(),nF=a("li"),Vce=a("strong"),kqo=o("yoso"),Sqo=o(" \u2014 "),kD=a("a"),Rqo=o("YosoForQuestionAnswering"),Bqo=o(" (YOSO model)"),Pqo=l(),sF=a("p"),$qo=o("The model is set in evaluation mode by default using "),Xce=a("code"),Iqo=o("model.eval()"),qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=a("code"),Nqo=o("model.train()"),jqo=l(),Qce=a("p"),Dqo=o("Examples:"),Gqo=l(),f(b6.$$.fragment),URe=l(),yd=a("h2"),lF=a("a"),Wce=a("span"),f(F6.$$.fragment),Oqo=l(),Hce=a("span"),Vqo=o("AutoModelForTableQuestionAnswering"),JRe=l(),sr=a("div"),f(v6.$$.fragment),Xqo=l(),Ld=a("p"),zqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SD=a("a"),Qqo=o("from_pretrained()"),Wqo=o(" class method or the "),RD=a("a"),Hqo=o("from_config()"),Uqo=o(` class
method.`),Jqo=l(),T6=a("p"),Yqo=o("This class cannot be instantiated directly using "),Uce=a("code"),Kqo=o("__init__()"),Zqo=o(" (throws an error)."),eNo=l(),et=a("div"),f(M6.$$.fragment),oNo=l(),Jce=a("p"),rNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tNo=l(),xd=a("p"),aNo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),nNo=o("not"),sNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),lNo=o("from_pretrained()"),iNo=o(" to load the model weights."),dNo=l(),Kce=a("p"),cNo=o("Examples:"),fNo=l(),f(E6.$$.fragment),mNo=l(),We=a("div"),f(C6.$$.fragment),gNo=l(),Zce=a("p"),hNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pNo=l(),en=a("p"),_No=o("The model class to instantiate is selected based on the "),efe=a("code"),uNo=o("model_type"),bNo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),FNo=o("pretrained_model_name_or_path"),vNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),TNo=o("pretrained_model_name_or_path"),MNo=o(":"),ENo=l(),tfe=a("ul"),iF=a("li"),afe=a("strong"),CNo=o("tapas"),wNo=o(" \u2014 "),PD=a("a"),ANo=o("TapasForQuestionAnswering"),yNo=o(" (TAPAS model)"),LNo=l(),dF=a("p"),xNo=o("The model is set in evaluation mode by default using "),nfe=a("code"),kNo=o("model.eval()"),SNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=a("code"),RNo=o("model.train()"),BNo=l(),lfe=a("p"),PNo=o("Examples:"),$No=l(),f(w6.$$.fragment),YRe=l(),kd=a("h2"),cF=a("a"),ife=a("span"),f(A6.$$.fragment),INo=l(),dfe=a("span"),qNo=o("AutoModelForImageClassification"),KRe=l(),lr=a("div"),f(y6.$$.fragment),NNo=l(),Sd=a("p"),jNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$D=a("a"),DNo=o("from_pretrained()"),GNo=o(" class method or the "),ID=a("a"),ONo=o("from_config()"),VNo=o(` class
method.`),XNo=l(),L6=a("p"),zNo=o("This class cannot be instantiated directly using "),cfe=a("code"),QNo=o("__init__()"),WNo=o(" (throws an error)."),HNo=l(),ot=a("div"),f(x6.$$.fragment),UNo=l(),ffe=a("p"),JNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YNo=l(),Rd=a("p"),KNo=o(`Note:
Loading a model from its configuration file does `),mfe=a("strong"),ZNo=o("not"),ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),ojo=o("from_pretrained()"),rjo=o(" to load the model weights."),tjo=l(),gfe=a("p"),ajo=o("Examples:"),njo=l(),f(k6.$$.fragment),sjo=l(),He=a("div"),f(S6.$$.fragment),ljo=l(),hfe=a("p"),ijo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),djo=l(),on=a("p"),cjo=o("The model class to instantiate is selected based on the "),pfe=a("code"),fjo=o("model_type"),mjo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),gjo=o("pretrained_model_name_or_path"),hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),pjo=o("pretrained_model_name_or_path"),_jo=o(":"),ujo=l(),ce=a("ul"),fF=a("li"),bfe=a("strong"),bjo=o("beit"),Fjo=o(" \u2014 "),ND=a("a"),vjo=o("BeitForImageClassification"),Tjo=o(" (BEiT model)"),Mjo=l(),mF=a("li"),Ffe=a("strong"),Ejo=o("convnext"),Cjo=o(" \u2014 "),jD=a("a"),wjo=o("ConvNextForImageClassification"),Ajo=o(" (ConvNext model)"),yjo=l(),Gs=a("li"),vfe=a("strong"),Ljo=o("deit"),xjo=o(" \u2014 "),DD=a("a"),kjo=o("DeiTForImageClassification"),Sjo=o(" or "),GD=a("a"),Rjo=o("DeiTForImageClassificationWithTeacher"),Bjo=o(" (DeiT model)"),Pjo=l(),gF=a("li"),Tfe=a("strong"),$jo=o("imagegpt"),Ijo=o(" \u2014 "),OD=a("a"),qjo=o("ImageGPTForImageClassification"),Njo=o(" (ImageGPT model)"),jjo=l(),ma=a("li"),Mfe=a("strong"),Djo=o("perceiver"),Gjo=o(" \u2014 "),VD=a("a"),Ojo=o("PerceiverForImageClassificationLearned"),Vjo=o(" or "),XD=a("a"),Xjo=o("PerceiverForImageClassificationFourier"),zjo=o(" or "),zD=a("a"),Qjo=o("PerceiverForImageClassificationConvProcessing"),Wjo=o(" (Perceiver model)"),Hjo=l(),hF=a("li"),Efe=a("strong"),Ujo=o("poolformer"),Jjo=o(" \u2014 "),QD=a("a"),Yjo=o("PoolFormerForImageClassification"),Kjo=o(" (PoolFormer model)"),Zjo=l(),pF=a("li"),Cfe=a("strong"),eDo=o("regnet"),oDo=o(" \u2014 "),WD=a("a"),rDo=o("RegNetForImageClassification"),tDo=o(" (RegNet model)"),aDo=l(),_F=a("li"),wfe=a("strong"),nDo=o("resnet"),sDo=o(" \u2014 "),HD=a("a"),lDo=o("ResNetForImageClassification"),iDo=o(" (ResNet model)"),dDo=l(),uF=a("li"),Afe=a("strong"),cDo=o("segformer"),fDo=o(" \u2014 "),UD=a("a"),mDo=o("SegformerForImageClassification"),gDo=o(" (SegFormer model)"),hDo=l(),bF=a("li"),yfe=a("strong"),pDo=o("swin"),_Do=o(" \u2014 "),JD=a("a"),uDo=o("SwinForImageClassification"),bDo=o(" (Swin model)"),FDo=l(),FF=a("li"),Lfe=a("strong"),vDo=o("van"),TDo=o(" \u2014 "),YD=a("a"),MDo=o("VanForImageClassification"),EDo=o(" (VAN model)"),CDo=l(),vF=a("li"),xfe=a("strong"),wDo=o("vit"),ADo=o(" \u2014 "),KD=a("a"),yDo=o("ViTForImageClassification"),LDo=o(" (ViT model)"),xDo=l(),TF=a("p"),kDo=o("The model is set in evaluation mode by default using "),kfe=a("code"),SDo=o("model.eval()"),RDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),BDo=o("model.train()"),PDo=l(),Rfe=a("p"),$Do=o("Examples:"),IDo=l(),f(R6.$$.fragment),ZRe=l(),Bd=a("h2"),MF=a("a"),Bfe=a("span"),f(B6.$$.fragment),qDo=l(),Pfe=a("span"),NDo=o("AutoModelForVision2Seq"),eBe=l(),ir=a("div"),f(P6.$$.fragment),jDo=l(),Pd=a("p"),DDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZD=a("a"),GDo=o("from_pretrained()"),ODo=o(" class method or the "),eG=a("a"),VDo=o("from_config()"),XDo=o(` class
method.`),zDo=l(),$6=a("p"),QDo=o("This class cannot be instantiated directly using "),$fe=a("code"),WDo=o("__init__()"),HDo=o(" (throws an error)."),UDo=l(),rt=a("div"),f(I6.$$.fragment),JDo=l(),Ife=a("p"),YDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KDo=l(),$d=a("p"),ZDo=o(`Note:
Loading a model from its configuration file does `),qfe=a("strong"),eGo=o("not"),oGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),rGo=o("from_pretrained()"),tGo=o(" to load the model weights."),aGo=l(),Nfe=a("p"),nGo=o("Examples:"),sGo=l(),f(q6.$$.fragment),lGo=l(),Ue=a("div"),f(N6.$$.fragment),iGo=l(),jfe=a("p"),dGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cGo=l(),rn=a("p"),fGo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),mGo=o("model_type"),gGo=o(` property of the config object (either
passed as an argument or loaded from `),Gfe=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(":"),bGo=l(),Vfe=a("ul"),EF=a("li"),Xfe=a("strong"),FGo=o("vision-encoder-decoder"),vGo=o(" \u2014 "),rG=a("a"),TGo=o("VisionEncoderDecoderModel"),MGo=o(" (Vision Encoder decoder model)"),EGo=l(),CF=a("p"),CGo=o("The model is set in evaluation mode by default using "),zfe=a("code"),wGo=o("model.eval()"),AGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),yGo=o("model.train()"),LGo=l(),Wfe=a("p"),xGo=o("Examples:"),kGo=l(),f(j6.$$.fragment),oBe=l(),Id=a("h2"),wF=a("a"),Hfe=a("span"),f(D6.$$.fragment),SGo=l(),Ufe=a("span"),RGo=o("AutoModelForAudioClassification"),rBe=l(),dr=a("div"),f(G6.$$.fragment),BGo=l(),qd=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tG=a("a"),$Go=o("from_pretrained()"),IGo=o(" class method or the "),aG=a("a"),qGo=o("from_config()"),NGo=o(` class
method.`),jGo=l(),O6=a("p"),DGo=o("This class cannot be instantiated directly using "),Jfe=a("code"),GGo=o("__init__()"),OGo=o(" (throws an error)."),VGo=l(),tt=a("div"),f(V6.$$.fragment),XGo=l(),Yfe=a("p"),zGo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QGo=l(),Nd=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),Kfe=a("strong"),HGo=o("not"),UGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),JGo=o("from_pretrained()"),YGo=o(" to load the model weights."),KGo=l(),Zfe=a("p"),ZGo=o("Examples:"),eOo=l(),f(X6.$$.fragment),oOo=l(),Je=a("div"),f(z6.$$.fragment),rOo=l(),eme=a("p"),tOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),aOo=l(),tn=a("p"),nOo=o("The model class to instantiate is selected based on the "),ome=a("code"),sOo=o("model_type"),lOo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),iOo=o("pretrained_model_name_or_path"),dOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),cOo=o("pretrained_model_name_or_path"),fOo=o(":"),mOo=l(),Se=a("ul"),AF=a("li"),ame=a("strong"),gOo=o("data2vec-audio"),hOo=o(" \u2014 "),sG=a("a"),pOo=o("Data2VecAudioForSequenceClassification"),_Oo=o(" (Data2VecAudio model)"),uOo=l(),yF=a("li"),nme=a("strong"),bOo=o("hubert"),FOo=o(" \u2014 "),lG=a("a"),vOo=o("HubertForSequenceClassification"),TOo=o(" (Hubert model)"),MOo=l(),LF=a("li"),sme=a("strong"),EOo=o("sew"),COo=o(" \u2014 "),iG=a("a"),wOo=o("SEWForSequenceClassification"),AOo=o(" (SEW model)"),yOo=l(),xF=a("li"),lme=a("strong"),LOo=o("sew-d"),xOo=o(" \u2014 "),dG=a("a"),kOo=o("SEWDForSequenceClassification"),SOo=o(" (SEW-D model)"),ROo=l(),kF=a("li"),ime=a("strong"),BOo=o("unispeech"),POo=o(" \u2014 "),cG=a("a"),$Oo=o("UniSpeechForSequenceClassification"),IOo=o(" (UniSpeech model)"),qOo=l(),SF=a("li"),dme=a("strong"),NOo=o("unispeech-sat"),jOo=o(" \u2014 "),fG=a("a"),DOo=o("UniSpeechSatForSequenceClassification"),GOo=o(" (UniSpeechSat model)"),OOo=l(),RF=a("li"),cme=a("strong"),VOo=o("wav2vec2"),XOo=o(" \u2014 "),mG=a("a"),zOo=o("Wav2Vec2ForSequenceClassification"),QOo=o(" (Wav2Vec2 model)"),WOo=l(),BF=a("li"),fme=a("strong"),HOo=o("wavlm"),UOo=o(" \u2014 "),gG=a("a"),JOo=o("WavLMForSequenceClassification"),YOo=o(" (WavLM model)"),KOo=l(),PF=a("p"),ZOo=o("The model is set in evaluation mode by default using "),mme=a("code"),eVo=o("model.eval()"),oVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),rVo=o("model.train()"),tVo=l(),hme=a("p"),aVo=o("Examples:"),nVo=l(),f(Q6.$$.fragment),tBe=l(),jd=a("h2"),$F=a("a"),pme=a("span"),f(W6.$$.fragment),sVo=l(),_me=a("span"),lVo=o("AutoModelForAudioFrameClassification"),aBe=l(),cr=a("div"),f(H6.$$.fragment),iVo=l(),Dd=a("p"),dVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hG=a("a"),cVo=o("from_pretrained()"),fVo=o(" class method or the "),pG=a("a"),mVo=o("from_config()"),gVo=o(` class
method.`),hVo=l(),U6=a("p"),pVo=o("This class cannot be instantiated directly using "),ume=a("code"),_Vo=o("__init__()"),uVo=o(" (throws an error)."),bVo=l(),at=a("div"),f(J6.$$.fragment),FVo=l(),bme=a("p"),vVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),TVo=l(),Gd=a("p"),MVo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),EVo=o("not"),CVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),wVo=o("from_pretrained()"),AVo=o(" to load the model weights."),yVo=l(),vme=a("p"),LVo=o("Examples:"),xVo=l(),f(Y6.$$.fragment),kVo=l(),Ye=a("div"),f(K6.$$.fragment),SVo=l(),Tme=a("p"),RVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),BVo=l(),an=a("p"),PVo=o("The model class to instantiate is selected based on the "),Mme=a("code"),$Vo=o("model_type"),IVo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),qVo=o("pretrained_model_name_or_path"),NVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),jVo=o("pretrained_model_name_or_path"),DVo=o(":"),GVo=l(),nn=a("ul"),IF=a("li"),wme=a("strong"),OVo=o("data2vec-audio"),VVo=o(" \u2014 "),uG=a("a"),XVo=o("Data2VecAudioForAudioFrameClassification"),zVo=o(" (Data2VecAudio model)"),QVo=l(),qF=a("li"),Ame=a("strong"),WVo=o("unispeech-sat"),HVo=o(" \u2014 "),bG=a("a"),UVo=o("UniSpeechSatForAudioFrameClassification"),JVo=o(" (UniSpeechSat model)"),YVo=l(),NF=a("li"),yme=a("strong"),KVo=o("wav2vec2"),ZVo=o(" \u2014 "),FG=a("a"),eXo=o("Wav2Vec2ForAudioFrameClassification"),oXo=o(" (Wav2Vec2 model)"),rXo=l(),jF=a("li"),Lme=a("strong"),tXo=o("wavlm"),aXo=o(" \u2014 "),vG=a("a"),nXo=o("WavLMForAudioFrameClassification"),sXo=o(" (WavLM model)"),lXo=l(),DF=a("p"),iXo=o("The model is set in evaluation mode by default using "),xme=a("code"),dXo=o("model.eval()"),cXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),fXo=o("model.train()"),mXo=l(),Sme=a("p"),gXo=o("Examples:"),hXo=l(),f(Z6.$$.fragment),nBe=l(),Od=a("h2"),GF=a("a"),Rme=a("span"),f(eA.$$.fragment),pXo=l(),Bme=a("span"),_Xo=o("AutoModelForCTC"),sBe=l(),fr=a("div"),f(oA.$$.fragment),uXo=l(),Vd=a("p"),bXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TG=a("a"),FXo=o("from_pretrained()"),vXo=o(" class method or the "),MG=a("a"),TXo=o("from_config()"),MXo=o(` class
method.`),EXo=l(),rA=a("p"),CXo=o("This class cannot be instantiated directly using "),Pme=a("code"),wXo=o("__init__()"),AXo=o(" (throws an error)."),yXo=l(),nt=a("div"),f(tA.$$.fragment),LXo=l(),$me=a("p"),xXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kXo=l(),Xd=a("p"),SXo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),RXo=o("not"),BXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),PXo=o("from_pretrained()"),$Xo=o(" to load the model weights."),IXo=l(),qme=a("p"),qXo=o("Examples:"),NXo=l(),f(aA.$$.fragment),jXo=l(),Ke=a("div"),f(nA.$$.fragment),DXo=l(),Nme=a("p"),GXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),OXo=l(),sn=a("p"),VXo=o("The model class to instantiate is selected based on the "),jme=a("code"),XXo=o("model_type"),zXo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),QXo=o("pretrained_model_name_or_path"),WXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),HXo=o("pretrained_model_name_or_path"),UXo=o(":"),JXo=l(),Re=a("ul"),OF=a("li"),Ome=a("strong"),YXo=o("data2vec-audio"),KXo=o(" \u2014 "),CG=a("a"),ZXo=o("Data2VecAudioForCTC"),ezo=o(" (Data2VecAudio model)"),ozo=l(),VF=a("li"),Vme=a("strong"),rzo=o("hubert"),tzo=o(" \u2014 "),wG=a("a"),azo=o("HubertForCTC"),nzo=o(" (Hubert model)"),szo=l(),XF=a("li"),Xme=a("strong"),lzo=o("sew"),izo=o(" \u2014 "),AG=a("a"),dzo=o("SEWForCTC"),czo=o(" (SEW model)"),fzo=l(),zF=a("li"),zme=a("strong"),mzo=o("sew-d"),gzo=o(" \u2014 "),yG=a("a"),hzo=o("SEWDForCTC"),pzo=o(" (SEW-D model)"),_zo=l(),QF=a("li"),Qme=a("strong"),uzo=o("unispeech"),bzo=o(" \u2014 "),LG=a("a"),Fzo=o("UniSpeechForCTC"),vzo=o(" (UniSpeech model)"),Tzo=l(),WF=a("li"),Wme=a("strong"),Mzo=o("unispeech-sat"),Ezo=o(" \u2014 "),xG=a("a"),Czo=o("UniSpeechSatForCTC"),wzo=o(" (UniSpeechSat model)"),Azo=l(),HF=a("li"),Hme=a("strong"),yzo=o("wav2vec2"),Lzo=o(" \u2014 "),kG=a("a"),xzo=o("Wav2Vec2ForCTC"),kzo=o(" (Wav2Vec2 model)"),Szo=l(),UF=a("li"),Ume=a("strong"),Rzo=o("wavlm"),Bzo=o(" \u2014 "),SG=a("a"),Pzo=o("WavLMForCTC"),$zo=o(" (WavLM model)"),Izo=l(),JF=a("p"),qzo=o("The model is set in evaluation mode by default using "),Jme=a("code"),Nzo=o("model.eval()"),jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=a("code"),Dzo=o("model.train()"),Gzo=l(),Kme=a("p"),Ozo=o("Examples:"),Vzo=l(),f(sA.$$.fragment),lBe=l(),zd=a("h2"),YF=a("a"),Zme=a("span"),f(lA.$$.fragment),Xzo=l(),ege=a("span"),zzo=o("AutoModelForSpeechSeq2Seq"),iBe=l(),mr=a("div"),f(iA.$$.fragment),Qzo=l(),Qd=a("p"),Wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RG=a("a"),Hzo=o("from_pretrained()"),Uzo=o(" class method or the "),BG=a("a"),Jzo=o("from_config()"),Yzo=o(` class
method.`),Kzo=l(),dA=a("p"),Zzo=o("This class cannot be instantiated directly using "),oge=a("code"),eQo=o("__init__()"),oQo=o(" (throws an error)."),rQo=l(),st=a("div"),f(cA.$$.fragment),tQo=l(),rge=a("p"),aQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nQo=l(),Wd=a("p"),sQo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),lQo=o("not"),iQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),dQo=o("from_pretrained()"),cQo=o(" to load the model weights."),fQo=l(),age=a("p"),mQo=o("Examples:"),gQo=l(),f(fA.$$.fragment),hQo=l(),Ze=a("div"),f(mA.$$.fragment),pQo=l(),nge=a("p"),_Qo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),uQo=l(),ln=a("p"),bQo=o("The model class to instantiate is selected based on the "),sge=a("code"),FQo=o("model_type"),vQo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),TQo=o("pretrained_model_name_or_path"),MQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),EQo=o("pretrained_model_name_or_path"),CQo=o(":"),wQo=l(),gA=a("ul"),KF=a("li"),dge=a("strong"),AQo=o("speech-encoder-decoder"),yQo=o(" \u2014 "),$G=a("a"),LQo=o("SpeechEncoderDecoderModel"),xQo=o(" (Speech Encoder decoder model)"),kQo=l(),ZF=a("li"),cge=a("strong"),SQo=o("speech_to_text"),RQo=o(" \u2014 "),IG=a("a"),BQo=o("Speech2TextForConditionalGeneration"),PQo=o(" (Speech2Text model)"),$Qo=l(),ev=a("p"),IQo=o("The model is set in evaluation mode by default using "),fge=a("code"),qQo=o("model.eval()"),NQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),jQo=o("model.train()"),DQo=l(),gge=a("p"),GQo=o("Examples:"),OQo=l(),f(hA.$$.fragment),dBe=l(),Hd=a("h2"),ov=a("a"),hge=a("span"),f(pA.$$.fragment),VQo=l(),pge=a("span"),XQo=o("AutoModelForAudioXVector"),cBe=l(),gr=a("div"),f(_A.$$.fragment),zQo=l(),Ud=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qG=a("a"),WQo=o("from_pretrained()"),HQo=o(" class method or the "),NG=a("a"),UQo=o("from_config()"),JQo=o(` class
method.`),YQo=l(),uA=a("p"),KQo=o("This class cannot be instantiated directly using "),_ge=a("code"),ZQo=o("__init__()"),eWo=o(" (throws an error)."),oWo=l(),lt=a("div"),f(bA.$$.fragment),rWo=l(),uge=a("p"),tWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),aWo=l(),Jd=a("p"),nWo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),sWo=o("not"),lWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),iWo=o("from_pretrained()"),dWo=o(" to load the model weights."),cWo=l(),Fge=a("p"),fWo=o("Examples:"),mWo=l(),f(FA.$$.fragment),gWo=l(),eo=a("div"),f(vA.$$.fragment),hWo=l(),vge=a("p"),pWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_Wo=l(),dn=a("p"),uWo=o("The model class to instantiate is selected based on the "),Tge=a("code"),bWo=o("model_type"),FWo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),vWo=o("pretrained_model_name_or_path"),TWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(":"),CWo=l(),cn=a("ul"),rv=a("li"),Cge=a("strong"),wWo=o("data2vec-audio"),AWo=o(" \u2014 "),DG=a("a"),yWo=o("Data2VecAudioForXVector"),LWo=o(" (Data2VecAudio model)"),xWo=l(),tv=a("li"),wge=a("strong"),kWo=o("unispeech-sat"),SWo=o(" \u2014 "),GG=a("a"),RWo=o("UniSpeechSatForXVector"),BWo=o(" (UniSpeechSat model)"),PWo=l(),av=a("li"),Age=a("strong"),$Wo=o("wav2vec2"),IWo=o(" \u2014 "),OG=a("a"),qWo=o("Wav2Vec2ForXVector"),NWo=o(" (Wav2Vec2 model)"),jWo=l(),nv=a("li"),yge=a("strong"),DWo=o("wavlm"),GWo=o(" \u2014 "),VG=a("a"),OWo=o("WavLMForXVector"),VWo=o(" (WavLM model)"),XWo=l(),sv=a("p"),zWo=o("The model is set in evaluation mode by default using "),Lge=a("code"),QWo=o("model.eval()"),WWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),HWo=o("model.train()"),UWo=l(),kge=a("p"),JWo=o("Examples:"),YWo=l(),f(TA.$$.fragment),fBe=l(),Yd=a("h2"),lv=a("a"),Sge=a("span"),f(MA.$$.fragment),KWo=l(),Rge=a("span"),ZWo=o("AutoModelForMaskedImageModeling"),mBe=l(),hr=a("div"),f(EA.$$.fragment),eHo=l(),Kd=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XG=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),zG=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),CA=a("p"),lHo=o("This class cannot be instantiated directly using "),Bge=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),it=a("div"),f(wA.$$.fragment),fHo=l(),Pge=a("p"),mHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),gHo=l(),Zd=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),pHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),uHo=o("from_pretrained()"),bHo=o(" to load the model weights."),FHo=l(),Ige=a("p"),vHo=o("Examples:"),THo=l(),f(AA.$$.fragment),MHo=l(),oo=a("div"),f(yA.$$.fragment),EHo=l(),qge=a("p"),CHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wHo=l(),fn=a("p"),AHo=o("The model class to instantiate is selected based on the "),Nge=a("code"),yHo=o("model_type"),LHo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),xHo=o("pretrained_model_name_or_path"),kHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),SHo=o("pretrained_model_name_or_path"),RHo=o(":"),BHo=l(),ec=a("ul"),iv=a("li"),Gge=a("strong"),PHo=o("deit"),$Ho=o(" \u2014 "),WG=a("a"),IHo=o("DeiTForMaskedImageModeling"),qHo=o(" (DeiT model)"),NHo=l(),dv=a("li"),Oge=a("strong"),jHo=o("swin"),DHo=o(" \u2014 "),HG=a("a"),GHo=o("SwinForMaskedImageModeling"),OHo=o(" (Swin model)"),VHo=l(),cv=a("li"),Vge=a("strong"),XHo=o("vit"),zHo=o(" \u2014 "),UG=a("a"),QHo=o("ViTForMaskedImageModeling"),WHo=o(" (ViT model)"),HHo=l(),fv=a("p"),UHo=o("The model is set in evaluation mode by default using "),Xge=a("code"),JHo=o("model.eval()"),YHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),KHo=o("model.train()"),ZHo=l(),Qge=a("p"),eUo=o("Examples:"),oUo=l(),f(LA.$$.fragment),gBe=l(),oc=a("h2"),mv=a("a"),Wge=a("span"),f(xA.$$.fragment),rUo=l(),Hge=a("span"),tUo=o("AutoModelForObjectDetection"),hBe=l(),pr=a("div"),f(kA.$$.fragment),aUo=l(),rc=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JG=a("a"),sUo=o("from_pretrained()"),lUo=o(" class method or the "),YG=a("a"),iUo=o("from_config()"),dUo=o(` class
method.`),cUo=l(),SA=a("p"),fUo=o("This class cannot be instantiated directly using "),Uge=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),dt=a("div"),f(RA.$$.fragment),pUo=l(),Jge=a("p"),_Uo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),uUo=l(),tc=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),FUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),TUo=o("from_pretrained()"),MUo=o(" to load the model weights."),EUo=l(),Kge=a("p"),CUo=o("Examples:"),wUo=l(),f(BA.$$.fragment),AUo=l(),ro=a("div"),f(PA.$$.fragment),yUo=l(),Zge=a("p"),LUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),xUo=l(),mn=a("p"),kUo=o("The model class to instantiate is selected based on the "),ehe=a("code"),SUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),BUo=o("pretrained_model_name_or_path"),PUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),$Uo=o("pretrained_model_name_or_path"),IUo=o(":"),qUo=l(),the=a("ul"),gv=a("li"),ahe=a("strong"),NUo=o("detr"),jUo=o(" \u2014 "),ZG=a("a"),DUo=o("DetrForObjectDetection"),GUo=o(" (DETR model)"),OUo=l(),hv=a("p"),VUo=o("The model is set in evaluation mode by default using "),nhe=a("code"),XUo=o("model.eval()"),zUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),QUo=o("model.train()"),WUo=l(),lhe=a("p"),HUo=o("Examples:"),UUo=l(),f($A.$$.fragment),pBe=l(),ac=a("h2"),pv=a("a"),ihe=a("span"),f(IA.$$.fragment),JUo=l(),dhe=a("span"),YUo=o("AutoModelForImageSegmentation"),_Be=l(),_r=a("div"),f(qA.$$.fragment),KUo=l(),nc=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eO=a("a"),eJo=o("from_pretrained()"),oJo=o(" class method or the "),oO=a("a"),rJo=o("from_config()"),tJo=o(` class
method.`),aJo=l(),NA=a("p"),nJo=o("This class cannot be instantiated directly using "),che=a("code"),sJo=o("__init__()"),lJo=o(" (throws an error)."),iJo=l(),ct=a("div"),f(jA.$$.fragment),dJo=l(),fhe=a("p"),cJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fJo=l(),sc=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),gJo=o("not"),hJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),pJo=o("from_pretrained()"),_Jo=o(" to load the model weights."),uJo=l(),ghe=a("p"),bJo=o("Examples:"),FJo=l(),f(DA.$$.fragment),vJo=l(),to=a("div"),f(GA.$$.fragment),TJo=l(),hhe=a("p"),MJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),EJo=l(),gn=a("p"),CJo=o("The model class to instantiate is selected based on the "),phe=a("code"),wJo=o("model_type"),AJo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),yJo=o("pretrained_model_name_or_path"),LJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),xJo=o("pretrained_model_name_or_path"),kJo=o(":"),SJo=l(),bhe=a("ul"),_v=a("li"),Fhe=a("strong"),RJo=o("detr"),BJo=o(" \u2014 "),tO=a("a"),PJo=o("DetrForSegmentation"),$Jo=o(" (DETR model)"),IJo=l(),uv=a("p"),qJo=o("The model is set in evaluation mode by default using "),vhe=a("code"),NJo=o("model.eval()"),jJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),DJo=o("model.train()"),GJo=l(),Mhe=a("p"),OJo=o("Examples:"),VJo=l(),f(OA.$$.fragment),uBe=l(),lc=a("h2"),bv=a("a"),Ehe=a("span"),f(VA.$$.fragment),XJo=l(),Che=a("span"),zJo=o("AutoModelForSemanticSegmentation"),bBe=l(),ur=a("div"),f(XA.$$.fragment),QJo=l(),ic=a("p"),WJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aO=a("a"),HJo=o("from_pretrained()"),UJo=o(" class method or the "),nO=a("a"),JJo=o("from_config()"),YJo=o(` class
method.`),KJo=l(),zA=a("p"),ZJo=o("This class cannot be instantiated directly using "),whe=a("code"),eYo=o("__init__()"),oYo=o(" (throws an error)."),rYo=l(),ft=a("div"),f(QA.$$.fragment),tYo=l(),Ahe=a("p"),aYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),nYo=l(),dc=a("p"),sYo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),lYo=o("not"),iYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),dYo=o("from_pretrained()"),cYo=o(" to load the model weights."),fYo=l(),Lhe=a("p"),mYo=o("Examples:"),gYo=l(),f(WA.$$.fragment),hYo=l(),ao=a("div"),f(HA.$$.fragment),pYo=l(),xhe=a("p"),_Yo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uYo=l(),hn=a("p"),bYo=o("The model class to instantiate is selected based on the "),khe=a("code"),FYo=o("model_type"),vYo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),EYo=o("pretrained_model_name_or_path"),CYo=o(":"),wYo=l(),cc=a("ul"),Fv=a("li"),Bhe=a("strong"),AYo=o("beit"),yYo=o(" \u2014 "),lO=a("a"),LYo=o("BeitForSemanticSegmentation"),xYo=o(" (BEiT model)"),kYo=l(),vv=a("li"),Phe=a("strong"),SYo=o("dpt"),RYo=o(" \u2014 "),iO=a("a"),BYo=o("DPTForSemanticSegmentation"),PYo=o(" (DPT model)"),$Yo=l(),Tv=a("li"),$he=a("strong"),IYo=o("segformer"),qYo=o(" \u2014 "),dO=a("a"),NYo=o("SegformerForSemanticSegmentation"),jYo=o(" (SegFormer model)"),DYo=l(),Mv=a("p"),GYo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),OYo=o("model.eval()"),VYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),XYo=o("model.train()"),zYo=l(),Nhe=a("p"),QYo=o("Examples:"),WYo=l(),f(UA.$$.fragment),FBe=l(),fc=a("h2"),Ev=a("a"),jhe=a("span"),f(JA.$$.fragment),HYo=l(),Dhe=a("span"),UYo=o("AutoModelForInstanceSegmentation"),vBe=l(),br=a("div"),f(YA.$$.fragment),JYo=l(),mc=a("p"),YYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cO=a("a"),KYo=o("from_pretrained()"),ZYo=o(" class method or the "),fO=a("a"),eKo=o("from_config()"),oKo=o(` class
method.`),rKo=l(),KA=a("p"),tKo=o("This class cannot be instantiated directly using "),Ghe=a("code"),aKo=o("__init__()"),nKo=o(" (throws an error)."),sKo=l(),mt=a("div"),f(ZA.$$.fragment),lKo=l(),Ohe=a("p"),iKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dKo=l(),gc=a("p"),cKo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),fKo=o("not"),mKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),gKo=o("from_pretrained()"),hKo=o(" to load the model weights."),pKo=l(),Xhe=a("p"),_Ko=o("Examples:"),uKo=l(),f(e0.$$.fragment),bKo=l(),no=a("div"),f(o0.$$.fragment),FKo=l(),zhe=a("p"),vKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),TKo=l(),pn=a("p"),MKo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),EKo=o("model_type"),CKo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(":"),xKo=l(),Uhe=a("ul"),Cv=a("li"),Jhe=a("strong"),kKo=o("maskformer"),SKo=o(" \u2014 "),gO=a("a"),RKo=o("MaskFormerForInstanceSegmentation"),BKo=o(" (MaskFormer model)"),PKo=l(),wv=a("p"),$Ko=o("The model is set in evaluation mode by default using "),Yhe=a("code"),IKo=o("model.eval()"),qKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),NKo=o("model.train()"),jKo=l(),Zhe=a("p"),DKo=o("Examples:"),GKo=l(),f(r0.$$.fragment),TBe=l(),hc=a("h2"),Av=a("a"),epe=a("span"),f(t0.$$.fragment),OKo=l(),ope=a("span"),VKo=o("TFAutoModel"),MBe=l(),Fr=a("div"),f(a0.$$.fragment),XKo=l(),pc=a("p"),zKo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hO=a("a"),QKo=o("from_pretrained()"),WKo=o(" class method or the "),pO=a("a"),HKo=o("from_config()"),UKo=o(` class
method.`),JKo=l(),n0=a("p"),YKo=o("This class cannot be instantiated directly using "),rpe=a("code"),KKo=o("__init__()"),ZKo=o(" (throws an error)."),eZo=l(),gt=a("div"),f(s0.$$.fragment),oZo=l(),tpe=a("p"),rZo=o("Instantiates one of the base model classes of the library from a configuration."),tZo=l(),_c=a("p"),aZo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),nZo=o("not"),sZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),lZo=o("from_pretrained()"),iZo=o(" to load the model weights."),dZo=l(),npe=a("p"),cZo=o("Examples:"),fZo=l(),f(l0.$$.fragment),mZo=l(),ho=a("div"),f(i0.$$.fragment),gZo=l(),spe=a("p"),hZo=o("Instantiate one of the base model classes of the library from a pretrained model."),pZo=l(),_n=a("p"),_Zo=o("The model class to instantiate is selected based on the "),lpe=a("code"),uZo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),FZo=o("pretrained_model_name_or_path"),vZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),x=a("ul"),yv=a("li"),cpe=a("strong"),CZo=o("albert"),wZo=o(" \u2014 "),uO=a("a"),AZo=o("TFAlbertModel"),yZo=o(" (ALBERT model)"),LZo=l(),Lv=a("li"),fpe=a("strong"),xZo=o("bart"),kZo=o(" \u2014 "),bO=a("a"),SZo=o("TFBartModel"),RZo=o(" (BART model)"),BZo=l(),xv=a("li"),mpe=a("strong"),PZo=o("bert"),$Zo=o(" \u2014 "),FO=a("a"),IZo=o("TFBertModel"),qZo=o(" (BERT model)"),NZo=l(),kv=a("li"),gpe=a("strong"),jZo=o("blenderbot"),DZo=o(" \u2014 "),vO=a("a"),GZo=o("TFBlenderbotModel"),OZo=o(" (Blenderbot model)"),VZo=l(),Sv=a("li"),hpe=a("strong"),XZo=o("blenderbot-small"),zZo=o(" \u2014 "),TO=a("a"),QZo=o("TFBlenderbotSmallModel"),WZo=o(" (BlenderbotSmall model)"),HZo=l(),Rv=a("li"),ppe=a("strong"),UZo=o("camembert"),JZo=o(" \u2014 "),MO=a("a"),YZo=o("TFCamembertModel"),KZo=o(" (CamemBERT model)"),ZZo=l(),Bv=a("li"),_pe=a("strong"),eer=o("clip"),oer=o(" \u2014 "),EO=a("a"),rer=o("TFCLIPModel"),ter=o(" (CLIP model)"),aer=l(),Pv=a("li"),upe=a("strong"),ner=o("convbert"),ser=o(" \u2014 "),CO=a("a"),ler=o("TFConvBertModel"),ier=o(" (ConvBERT model)"),der=l(),$v=a("li"),bpe=a("strong"),cer=o("convnext"),fer=o(" \u2014 "),wO=a("a"),mer=o("TFConvNextModel"),ger=o(" (ConvNext model)"),her=l(),Iv=a("li"),Fpe=a("strong"),per=o("ctrl"),_er=o(" \u2014 "),AO=a("a"),uer=o("TFCTRLModel"),ber=o(" (CTRL model)"),Fer=l(),qv=a("li"),vpe=a("strong"),ver=o("deberta"),Ter=o(" \u2014 "),yO=a("a"),Mer=o("TFDebertaModel"),Eer=o(" (DeBERTa model)"),Cer=l(),Nv=a("li"),Tpe=a("strong"),wer=o("deberta-v2"),Aer=o(" \u2014 "),LO=a("a"),yer=o("TFDebertaV2Model"),Ler=o(" (DeBERTa-v2 model)"),xer=l(),jv=a("li"),Mpe=a("strong"),ker=o("distilbert"),Ser=o(" \u2014 "),xO=a("a"),Rer=o("TFDistilBertModel"),Ber=o(" (DistilBERT model)"),Per=l(),Dv=a("li"),Epe=a("strong"),$er=o("dpr"),Ier=o(" \u2014 "),kO=a("a"),qer=o("TFDPRQuestionEncoder"),Ner=o(" (DPR model)"),jer=l(),Gv=a("li"),Cpe=a("strong"),Der=o("electra"),Ger=o(" \u2014 "),SO=a("a"),Oer=o("TFElectraModel"),Ver=o(" (ELECTRA model)"),Xer=l(),Ov=a("li"),wpe=a("strong"),zer=o("flaubert"),Qer=o(" \u2014 "),RO=a("a"),Wer=o("TFFlaubertModel"),Her=o(" (FlauBERT model)"),Uer=l(),Os=a("li"),Ape=a("strong"),Jer=o("funnel"),Yer=o(" \u2014 "),BO=a("a"),Ker=o("TFFunnelModel"),Zer=o(" or "),PO=a("a"),eor=o("TFFunnelBaseModel"),oor=o(" (Funnel Transformer model)"),ror=l(),Vv=a("li"),ype=a("strong"),tor=o("gpt2"),aor=o(" \u2014 "),$O=a("a"),nor=o("TFGPT2Model"),sor=o(" (OpenAI GPT-2 model)"),lor=l(),Xv=a("li"),Lpe=a("strong"),ior=o("gptj"),dor=o(" \u2014 "),IO=a("a"),cor=o("TFGPTJModel"),mor=o(" (GPT-J model)"),gor=l(),zv=a("li"),xpe=a("strong"),hor=o("hubert"),por=o(" \u2014 "),qO=a("a"),_or=o("TFHubertModel"),uor=o(" (Hubert model)"),bor=l(),Qv=a("li"),kpe=a("strong"),For=o("layoutlm"),vor=o(" \u2014 "),NO=a("a"),Tor=o("TFLayoutLMModel"),Mor=o(" (LayoutLM model)"),Eor=l(),Wv=a("li"),Spe=a("strong"),Cor=o("led"),wor=o(" \u2014 "),jO=a("a"),Aor=o("TFLEDModel"),yor=o(" (LED model)"),Lor=l(),Hv=a("li"),Rpe=a("strong"),xor=o("longformer"),kor=o(" \u2014 "),DO=a("a"),Sor=o("TFLongformerModel"),Ror=o(" (Longformer model)"),Bor=l(),Uv=a("li"),Bpe=a("strong"),Por=o("lxmert"),$or=o(" \u2014 "),GO=a("a"),Ior=o("TFLxmertModel"),qor=o(" (LXMERT model)"),Nor=l(),Jv=a("li"),Ppe=a("strong"),jor=o("marian"),Dor=o(" \u2014 "),OO=a("a"),Gor=o("TFMarianModel"),Oor=o(" (Marian model)"),Vor=l(),Yv=a("li"),$pe=a("strong"),Xor=o("mbart"),zor=o(" \u2014 "),VO=a("a"),Qor=o("TFMBartModel"),Wor=o(" (mBART model)"),Hor=l(),Kv=a("li"),Ipe=a("strong"),Uor=o("mobilebert"),Jor=o(" \u2014 "),XO=a("a"),Yor=o("TFMobileBertModel"),Kor=o(" (MobileBERT model)"),Zor=l(),Zv=a("li"),qpe=a("strong"),err=o("mpnet"),orr=o(" \u2014 "),zO=a("a"),rrr=o("TFMPNetModel"),trr=o(" (MPNet model)"),arr=l(),eT=a("li"),Npe=a("strong"),nrr=o("mt5"),srr=o(" \u2014 "),QO=a("a"),lrr=o("TFMT5Model"),irr=o(" (mT5 model)"),drr=l(),oT=a("li"),jpe=a("strong"),crr=o("openai-gpt"),frr=o(" \u2014 "),WO=a("a"),mrr=o("TFOpenAIGPTModel"),grr=o(" (OpenAI GPT model)"),hrr=l(),rT=a("li"),Dpe=a("strong"),prr=o("pegasus"),_rr=o(" \u2014 "),HO=a("a"),urr=o("TFPegasusModel"),brr=o(" (Pegasus model)"),Frr=l(),tT=a("li"),Gpe=a("strong"),vrr=o("rembert"),Trr=o(" \u2014 "),UO=a("a"),Mrr=o("TFRemBertModel"),Err=o(" (RemBERT model)"),Crr=l(),aT=a("li"),Ope=a("strong"),wrr=o("roberta"),Arr=o(" \u2014 "),JO=a("a"),yrr=o("TFRobertaModel"),Lrr=o(" (RoBERTa model)"),xrr=l(),nT=a("li"),Vpe=a("strong"),krr=o("roformer"),Srr=o(" \u2014 "),YO=a("a"),Rrr=o("TFRoFormerModel"),Brr=o(" (RoFormer model)"),Prr=l(),sT=a("li"),Xpe=a("strong"),$rr=o("speech_to_text"),Irr=o(" \u2014 "),KO=a("a"),qrr=o("TFSpeech2TextModel"),Nrr=o(" (Speech2Text model)"),jrr=l(),lT=a("li"),zpe=a("strong"),Drr=o("t5"),Grr=o(" \u2014 "),ZO=a("a"),Orr=o("TFT5Model"),Vrr=o(" (T5 model)"),Xrr=l(),iT=a("li"),Qpe=a("strong"),zrr=o("tapas"),Qrr=o(" \u2014 "),eV=a("a"),Wrr=o("TFTapasModel"),Hrr=o(" (TAPAS model)"),Urr=l(),dT=a("li"),Wpe=a("strong"),Jrr=o("transfo-xl"),Yrr=o(" \u2014 "),oV=a("a"),Krr=o("TFTransfoXLModel"),Zrr=o(" (Transformer-XL model)"),etr=l(),cT=a("li"),Hpe=a("strong"),otr=o("vit"),rtr=o(" \u2014 "),rV=a("a"),ttr=o("TFViTModel"),atr=o(" (ViT model)"),ntr=l(),fT=a("li"),Upe=a("strong"),str=o("vit_mae"),ltr=o(" \u2014 "),tV=a("a"),itr=o("TFViTMAEModel"),dtr=o(" (ViTMAE model)"),ctr=l(),mT=a("li"),Jpe=a("strong"),ftr=o("wav2vec2"),mtr=o(" \u2014 "),aV=a("a"),gtr=o("TFWav2Vec2Model"),htr=o(" (Wav2Vec2 model)"),ptr=l(),gT=a("li"),Ype=a("strong"),_tr=o("xlm"),utr=o(" \u2014 "),nV=a("a"),btr=o("TFXLMModel"),Ftr=o(" (XLM model)"),vtr=l(),hT=a("li"),Kpe=a("strong"),Ttr=o("xlm-roberta"),Mtr=o(" \u2014 "),sV=a("a"),Etr=o("TFXLMRobertaModel"),Ctr=o(" (XLM-RoBERTa model)"),wtr=l(),pT=a("li"),Zpe=a("strong"),Atr=o("xlnet"),ytr=o(" \u2014 "),lV=a("a"),Ltr=o("TFXLNetModel"),xtr=o(" (XLNet model)"),ktr=l(),e_e=a("p"),Str=o("Examples:"),Rtr=l(),f(d0.$$.fragment),EBe=l(),uc=a("h2"),_T=a("a"),o_e=a("span"),f(c0.$$.fragment),Btr=l(),r_e=a("span"),Ptr=o("TFAutoModelForPreTraining"),CBe=l(),vr=a("div"),f(f0.$$.fragment),$tr=l(),bc=a("p"),Itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iV=a("a"),qtr=o("from_pretrained()"),Ntr=o(" class method or the "),dV=a("a"),jtr=o("from_config()"),Dtr=o(` class
method.`),Gtr=l(),m0=a("p"),Otr=o("This class cannot be instantiated directly using "),t_e=a("code"),Vtr=o("__init__()"),Xtr=o(" (throws an error)."),ztr=l(),ht=a("div"),f(g0.$$.fragment),Qtr=l(),a_e=a("p"),Wtr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Htr=l(),Fc=a("p"),Utr=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),Jtr=o("not"),Ytr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),Ktr=o("from_pretrained()"),Ztr=o(" to load the model weights."),ear=l(),s_e=a("p"),oar=o("Examples:"),rar=l(),f(h0.$$.fragment),tar=l(),po=a("div"),f(p0.$$.fragment),aar=l(),l_e=a("p"),nar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sar=l(),un=a("p"),lar=o("The model class to instantiate is selected based on the "),i_e=a("code"),iar=o("model_type"),dar=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),car=o("pretrained_model_name_or_path"),far=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),mar=o("pretrained_model_name_or_path"),gar=o(":"),har=l(),H=a("ul"),uT=a("li"),f_e=a("strong"),par=o("albert"),_ar=o(" \u2014 "),fV=a("a"),uar=o("TFAlbertForPreTraining"),bar=o(" (ALBERT model)"),Far=l(),bT=a("li"),m_e=a("strong"),Tar=o("bart"),Mar=o(" \u2014 "),mV=a("a"),Ear=o("TFBartForConditionalGeneration"),Car=o(" (BART model)"),war=l(),FT=a("li"),g_e=a("strong"),Aar=o("bert"),yar=o(" \u2014 "),gV=a("a"),Lar=o("TFBertForPreTraining"),xar=o(" (BERT model)"),kar=l(),vT=a("li"),h_e=a("strong"),Sar=o("camembert"),Rar=o(" \u2014 "),hV=a("a"),Bar=o("TFCamembertForMaskedLM"),Par=o(" (CamemBERT model)"),$ar=l(),TT=a("li"),p_e=a("strong"),Iar=o("ctrl"),qar=o(" \u2014 "),pV=a("a"),Nar=o("TFCTRLLMHeadModel"),jar=o(" (CTRL model)"),Dar=l(),MT=a("li"),__e=a("strong"),Gar=o("distilbert"),Oar=o(" \u2014 "),_V=a("a"),Var=o("TFDistilBertForMaskedLM"),Xar=o(" (DistilBERT model)"),zar=l(),ET=a("li"),u_e=a("strong"),Qar=o("electra"),War=o(" \u2014 "),uV=a("a"),Har=o("TFElectraForPreTraining"),Uar=o(" (ELECTRA model)"),Jar=l(),CT=a("li"),b_e=a("strong"),Yar=o("flaubert"),Kar=o(" \u2014 "),bV=a("a"),Zar=o("TFFlaubertWithLMHeadModel"),enr=o(" (FlauBERT model)"),onr=l(),wT=a("li"),F_e=a("strong"),rnr=o("funnel"),tnr=o(" \u2014 "),FV=a("a"),anr=o("TFFunnelForPreTraining"),nnr=o(" (Funnel Transformer model)"),snr=l(),AT=a("li"),v_e=a("strong"),lnr=o("gpt2"),inr=o(" \u2014 "),vV=a("a"),dnr=o("TFGPT2LMHeadModel"),cnr=o(" (OpenAI GPT-2 model)"),fnr=l(),yT=a("li"),T_e=a("strong"),mnr=o("layoutlm"),gnr=o(" \u2014 "),TV=a("a"),hnr=o("TFLayoutLMForMaskedLM"),pnr=o(" (LayoutLM model)"),_nr=l(),LT=a("li"),M_e=a("strong"),unr=o("lxmert"),bnr=o(" \u2014 "),MV=a("a"),Fnr=o("TFLxmertForPreTraining"),vnr=o(" (LXMERT model)"),Tnr=l(),xT=a("li"),E_e=a("strong"),Mnr=o("mobilebert"),Enr=o(" \u2014 "),EV=a("a"),Cnr=o("TFMobileBertForPreTraining"),wnr=o(" (MobileBERT model)"),Anr=l(),kT=a("li"),C_e=a("strong"),ynr=o("mpnet"),Lnr=o(" \u2014 "),CV=a("a"),xnr=o("TFMPNetForMaskedLM"),knr=o(" (MPNet model)"),Snr=l(),ST=a("li"),w_e=a("strong"),Rnr=o("openai-gpt"),Bnr=o(" \u2014 "),wV=a("a"),Pnr=o("TFOpenAIGPTLMHeadModel"),$nr=o(" (OpenAI GPT model)"),Inr=l(),RT=a("li"),A_e=a("strong"),qnr=o("roberta"),Nnr=o(" \u2014 "),AV=a("a"),jnr=o("TFRobertaForMaskedLM"),Dnr=o(" (RoBERTa model)"),Gnr=l(),BT=a("li"),y_e=a("strong"),Onr=o("t5"),Vnr=o(" \u2014 "),yV=a("a"),Xnr=o("TFT5ForConditionalGeneration"),znr=o(" (T5 model)"),Qnr=l(),PT=a("li"),L_e=a("strong"),Wnr=o("tapas"),Hnr=o(" \u2014 "),LV=a("a"),Unr=o("TFTapasForMaskedLM"),Jnr=o(" (TAPAS model)"),Ynr=l(),$T=a("li"),x_e=a("strong"),Knr=o("transfo-xl"),Znr=o(" \u2014 "),xV=a("a"),esr=o("TFTransfoXLLMHeadModel"),osr=o(" (Transformer-XL model)"),rsr=l(),IT=a("li"),k_e=a("strong"),tsr=o("vit_mae"),asr=o(" \u2014 "),kV=a("a"),nsr=o("TFViTMAEForPreTraining"),ssr=o(" (ViTMAE model)"),lsr=l(),qT=a("li"),S_e=a("strong"),isr=o("xlm"),dsr=o(" \u2014 "),SV=a("a"),csr=o("TFXLMWithLMHeadModel"),fsr=o(" (XLM model)"),msr=l(),NT=a("li"),R_e=a("strong"),gsr=o("xlm-roberta"),hsr=o(" \u2014 "),RV=a("a"),psr=o("TFXLMRobertaForMaskedLM"),_sr=o(" (XLM-RoBERTa model)"),usr=l(),jT=a("li"),B_e=a("strong"),bsr=o("xlnet"),Fsr=o(" \u2014 "),BV=a("a"),vsr=o("TFXLNetLMHeadModel"),Tsr=o(" (XLNet model)"),Msr=l(),P_e=a("p"),Esr=o("Examples:"),Csr=l(),f(_0.$$.fragment),wBe=l(),vc=a("h2"),DT=a("a"),$_e=a("span"),f(u0.$$.fragment),wsr=l(),I_e=a("span"),Asr=o("TFAutoModelForCausalLM"),ABe=l(),Tr=a("div"),f(b0.$$.fragment),ysr=l(),Tc=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PV=a("a"),xsr=o("from_pretrained()"),ksr=o(" class method or the "),$V=a("a"),Ssr=o("from_config()"),Rsr=o(` class
method.`),Bsr=l(),F0=a("p"),Psr=o("This class cannot be instantiated directly using "),q_e=a("code"),$sr=o("__init__()"),Isr=o(" (throws an error)."),qsr=l(),pt=a("div"),f(v0.$$.fragment),Nsr=l(),N_e=a("p"),jsr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dsr=l(),Mc=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),Osr=o("not"),Vsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),Xsr=o("from_pretrained()"),zsr=o(" to load the model weights."),Qsr=l(),D_e=a("p"),Wsr=o("Examples:"),Hsr=l(),f(T0.$$.fragment),Usr=l(),_o=a("div"),f(M0.$$.fragment),Jsr=l(),G_e=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ksr=l(),bn=a("p"),Zsr=o("The model class to instantiate is selected based on the "),O_e=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),fe=a("ul"),GT=a("li"),z_e=a("strong"),llr=o("bert"),ilr=o(" \u2014 "),qV=a("a"),dlr=o("TFBertLMHeadModel"),clr=o(" (BERT model)"),flr=l(),OT=a("li"),Q_e=a("strong"),mlr=o("camembert"),glr=o(" \u2014 "),NV=a("a"),hlr=o("TFCamembertForCausalLM"),plr=o(" (CamemBERT model)"),_lr=l(),VT=a("li"),W_e=a("strong"),ulr=o("ctrl"),blr=o(" \u2014 "),jV=a("a"),Flr=o("TFCTRLLMHeadModel"),vlr=o(" (CTRL model)"),Tlr=l(),XT=a("li"),H_e=a("strong"),Mlr=o("gpt2"),Elr=o(" \u2014 "),DV=a("a"),Clr=o("TFGPT2LMHeadModel"),wlr=o(" (OpenAI GPT-2 model)"),Alr=l(),zT=a("li"),U_e=a("strong"),ylr=o("gptj"),Llr=o(" \u2014 "),GV=a("a"),xlr=o("TFGPTJForCausalLM"),klr=o(" (GPT-J model)"),Slr=l(),QT=a("li"),J_e=a("strong"),Rlr=o("openai-gpt"),Blr=o(" \u2014 "),OV=a("a"),Plr=o("TFOpenAIGPTLMHeadModel"),$lr=o(" (OpenAI GPT model)"),Ilr=l(),WT=a("li"),Y_e=a("strong"),qlr=o("rembert"),Nlr=o(" \u2014 "),VV=a("a"),jlr=o("TFRemBertForCausalLM"),Dlr=o(" (RemBERT model)"),Glr=l(),HT=a("li"),K_e=a("strong"),Olr=o("roberta"),Vlr=o(" \u2014 "),XV=a("a"),Xlr=o("TFRobertaForCausalLM"),zlr=o(" (RoBERTa model)"),Qlr=l(),UT=a("li"),Z_e=a("strong"),Wlr=o("roformer"),Hlr=o(" \u2014 "),zV=a("a"),Ulr=o("TFRoFormerForCausalLM"),Jlr=o(" (RoFormer model)"),Ylr=l(),JT=a("li"),eue=a("strong"),Klr=o("transfo-xl"),Zlr=o(" \u2014 "),QV=a("a"),eir=o("TFTransfoXLLMHeadModel"),oir=o(" (Transformer-XL model)"),rir=l(),YT=a("li"),oue=a("strong"),tir=o("xlm"),air=o(" \u2014 "),WV=a("a"),nir=o("TFXLMWithLMHeadModel"),sir=o(" (XLM model)"),lir=l(),KT=a("li"),rue=a("strong"),iir=o("xlnet"),dir=o(" \u2014 "),HV=a("a"),cir=o("TFXLNetLMHeadModel"),fir=o(" (XLNet model)"),mir=l(),tue=a("p"),gir=o("Examples:"),hir=l(),f(E0.$$.fragment),yBe=l(),Ec=a("h2"),ZT=a("a"),aue=a("span"),f(C0.$$.fragment),pir=l(),nue=a("span"),_ir=o("TFAutoModelForImageClassification"),LBe=l(),Mr=a("div"),f(w0.$$.fragment),uir=l(),Cc=a("p"),bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UV=a("a"),Fir=o("from_pretrained()"),vir=o(" class method or the "),JV=a("a"),Tir=o("from_config()"),Mir=o(` class
method.`),Eir=l(),A0=a("p"),Cir=o("This class cannot be instantiated directly using "),sue=a("code"),wir=o("__init__()"),Air=o(" (throws an error)."),yir=l(),_t=a("div"),f(y0.$$.fragment),Lir=l(),lue=a("p"),xir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kir=l(),wc=a("p"),Sir=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),Rir=o("not"),Bir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),Pir=o("from_pretrained()"),$ir=o(" to load the model weights."),Iir=l(),due=a("p"),qir=o("Examples:"),Nir=l(),f(L0.$$.fragment),jir=l(),uo=a("div"),f(x0.$$.fragment),Dir=l(),cue=a("p"),Gir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Oir=l(),Fn=a("p"),Vir=o("The model class to instantiate is selected based on the "),fue=a("code"),Xir=o("model_type"),zir=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),Qir=o("pretrained_model_name_or_path"),Wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),Hir=o("pretrained_model_name_or_path"),Uir=o(":"),Jir=l(),k0=a("ul"),e9=a("li"),hue=a("strong"),Yir=o("convnext"),Kir=o(" \u2014 "),KV=a("a"),Zir=o("TFConvNextForImageClassification"),edr=o(" (ConvNext model)"),odr=l(),o9=a("li"),pue=a("strong"),rdr=o("vit"),tdr=o(" \u2014 "),ZV=a("a"),adr=o("TFViTForImageClassification"),ndr=o(" (ViT model)"),sdr=l(),_ue=a("p"),ldr=o("Examples:"),idr=l(),f(S0.$$.fragment),xBe=l(),Ac=a("h2"),r9=a("a"),uue=a("span"),f(R0.$$.fragment),ddr=l(),bue=a("span"),cdr=o("TFAutoModelForMaskedLM"),kBe=l(),Er=a("div"),f(B0.$$.fragment),fdr=l(),yc=a("p"),mdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eX=a("a"),gdr=o("from_pretrained()"),hdr=o(" class method or the "),oX=a("a"),pdr=o("from_config()"),_dr=o(` class
method.`),udr=l(),P0=a("p"),bdr=o("This class cannot be instantiated directly using "),Fue=a("code"),Fdr=o("__init__()"),vdr=o(" (throws an error)."),Tdr=l(),ut=a("div"),f($0.$$.fragment),Mdr=l(),vue=a("p"),Edr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cdr=l(),Lc=a("p"),wdr=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),Adr=o("not"),ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),Ldr=o("from_pretrained()"),xdr=o(" to load the model weights."),kdr=l(),Mue=a("p"),Sdr=o("Examples:"),Rdr=l(),f(I0.$$.fragment),Bdr=l(),bo=a("div"),f(q0.$$.fragment),Pdr=l(),Eue=a("p"),$dr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Idr=l(),vn=a("p"),qdr=o("The model class to instantiate is selected based on the "),Cue=a("code"),Ndr=o("model_type"),jdr=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),Ddr=o("pretrained_model_name_or_path"),Gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(":"),Xdr=l(),J=a("ul"),t9=a("li"),yue=a("strong"),zdr=o("albert"),Qdr=o(" \u2014 "),tX=a("a"),Wdr=o("TFAlbertForMaskedLM"),Hdr=o(" (ALBERT model)"),Udr=l(),a9=a("li"),Lue=a("strong"),Jdr=o("bert"),Ydr=o(" \u2014 "),aX=a("a"),Kdr=o("TFBertForMaskedLM"),Zdr=o(" (BERT model)"),ecr=l(),n9=a("li"),xue=a("strong"),ocr=o("camembert"),rcr=o(" \u2014 "),nX=a("a"),tcr=o("TFCamembertForMaskedLM"),acr=o(" (CamemBERT model)"),ncr=l(),s9=a("li"),kue=a("strong"),scr=o("convbert"),lcr=o(" \u2014 "),sX=a("a"),icr=o("TFConvBertForMaskedLM"),dcr=o(" (ConvBERT model)"),ccr=l(),l9=a("li"),Sue=a("strong"),fcr=o("deberta"),mcr=o(" \u2014 "),lX=a("a"),gcr=o("TFDebertaForMaskedLM"),hcr=o(" (DeBERTa model)"),pcr=l(),i9=a("li"),Rue=a("strong"),_cr=o("deberta-v2"),ucr=o(" \u2014 "),iX=a("a"),bcr=o("TFDebertaV2ForMaskedLM"),Fcr=o(" (DeBERTa-v2 model)"),vcr=l(),d9=a("li"),Bue=a("strong"),Tcr=o("distilbert"),Mcr=o(" \u2014 "),dX=a("a"),Ecr=o("TFDistilBertForMaskedLM"),Ccr=o(" (DistilBERT model)"),wcr=l(),c9=a("li"),Pue=a("strong"),Acr=o("electra"),ycr=o(" \u2014 "),cX=a("a"),Lcr=o("TFElectraForMaskedLM"),xcr=o(" (ELECTRA model)"),kcr=l(),f9=a("li"),$ue=a("strong"),Scr=o("flaubert"),Rcr=o(" \u2014 "),fX=a("a"),Bcr=o("TFFlaubertWithLMHeadModel"),Pcr=o(" (FlauBERT model)"),$cr=l(),m9=a("li"),Iue=a("strong"),Icr=o("funnel"),qcr=o(" \u2014 "),mX=a("a"),Ncr=o("TFFunnelForMaskedLM"),jcr=o(" (Funnel Transformer model)"),Dcr=l(),g9=a("li"),que=a("strong"),Gcr=o("layoutlm"),Ocr=o(" \u2014 "),gX=a("a"),Vcr=o("TFLayoutLMForMaskedLM"),Xcr=o(" (LayoutLM model)"),zcr=l(),h9=a("li"),Nue=a("strong"),Qcr=o("longformer"),Wcr=o(" \u2014 "),hX=a("a"),Hcr=o("TFLongformerForMaskedLM"),Ucr=o(" (Longformer model)"),Jcr=l(),p9=a("li"),jue=a("strong"),Ycr=o("mobilebert"),Kcr=o(" \u2014 "),pX=a("a"),Zcr=o("TFMobileBertForMaskedLM"),efr=o(" (MobileBERT model)"),ofr=l(),_9=a("li"),Due=a("strong"),rfr=o("mpnet"),tfr=o(" \u2014 "),_X=a("a"),afr=o("TFMPNetForMaskedLM"),nfr=o(" (MPNet model)"),sfr=l(),u9=a("li"),Gue=a("strong"),lfr=o("rembert"),ifr=o(" \u2014 "),uX=a("a"),dfr=o("TFRemBertForMaskedLM"),cfr=o(" (RemBERT model)"),ffr=l(),b9=a("li"),Oue=a("strong"),mfr=o("roberta"),gfr=o(" \u2014 "),bX=a("a"),hfr=o("TFRobertaForMaskedLM"),pfr=o(" (RoBERTa model)"),_fr=l(),F9=a("li"),Vue=a("strong"),ufr=o("roformer"),bfr=o(" \u2014 "),FX=a("a"),Ffr=o("TFRoFormerForMaskedLM"),vfr=o(" (RoFormer model)"),Tfr=l(),v9=a("li"),Xue=a("strong"),Mfr=o("tapas"),Efr=o(" \u2014 "),vX=a("a"),Cfr=o("TFTapasForMaskedLM"),wfr=o(" (TAPAS model)"),Afr=l(),T9=a("li"),zue=a("strong"),yfr=o("xlm"),Lfr=o(" \u2014 "),TX=a("a"),xfr=o("TFXLMWithLMHeadModel"),kfr=o(" (XLM model)"),Sfr=l(),M9=a("li"),Que=a("strong"),Rfr=o("xlm-roberta"),Bfr=o(" \u2014 "),MX=a("a"),Pfr=o("TFXLMRobertaForMaskedLM"),$fr=o(" (XLM-RoBERTa model)"),Ifr=l(),Wue=a("p"),qfr=o("Examples:"),Nfr=l(),f(N0.$$.fragment),SBe=l(),xc=a("h2"),E9=a("a"),Hue=a("span"),f(j0.$$.fragment),jfr=l(),Uue=a("span"),Dfr=o("TFAutoModelForSeq2SeqLM"),RBe=l(),Cr=a("div"),f(D0.$$.fragment),Gfr=l(),kc=a("p"),Ofr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EX=a("a"),Vfr=o("from_pretrained()"),Xfr=o(" class method or the "),CX=a("a"),zfr=o("from_config()"),Qfr=o(` class
method.`),Wfr=l(),G0=a("p"),Hfr=o("This class cannot be instantiated directly using "),Jue=a("code"),Ufr=o("__init__()"),Jfr=o(" (throws an error)."),Yfr=l(),bt=a("div"),f(O0.$$.fragment),Kfr=l(),Yue=a("p"),Zfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),emr=l(),Sc=a("p"),omr=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),rmr=o("not"),tmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),amr=o("from_pretrained()"),nmr=o(" to load the model weights."),smr=l(),Zue=a("p"),lmr=o("Examples:"),imr=l(),f(V0.$$.fragment),dmr=l(),Fo=a("div"),f(X0.$$.fragment),cmr=l(),e5e=a("p"),fmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mmr=l(),Tn=a("p"),gmr=o("The model class to instantiate is selected based on the "),o5e=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),_mr=o("pretrained_model_name_or_path"),umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),bmr=o("pretrained_model_name_or_path"),Fmr=o(":"),vmr=l(),be=a("ul"),C9=a("li"),a5e=a("strong"),Tmr=o("bart"),Mmr=o(" \u2014 "),AX=a("a"),Emr=o("TFBartForConditionalGeneration"),Cmr=o(" (BART model)"),wmr=l(),w9=a("li"),n5e=a("strong"),Amr=o("blenderbot"),ymr=o(" \u2014 "),yX=a("a"),Lmr=o("TFBlenderbotForConditionalGeneration"),xmr=o(" (Blenderbot model)"),kmr=l(),A9=a("li"),s5e=a("strong"),Smr=o("blenderbot-small"),Rmr=o(" \u2014 "),LX=a("a"),Bmr=o("TFBlenderbotSmallForConditionalGeneration"),Pmr=o(" (BlenderbotSmall model)"),$mr=l(),y9=a("li"),l5e=a("strong"),Imr=o("encoder-decoder"),qmr=o(" \u2014 "),xX=a("a"),Nmr=o("TFEncoderDecoderModel"),jmr=o(" (Encoder decoder model)"),Dmr=l(),L9=a("li"),i5e=a("strong"),Gmr=o("led"),Omr=o(" \u2014 "),kX=a("a"),Vmr=o("TFLEDForConditionalGeneration"),Xmr=o(" (LED model)"),zmr=l(),x9=a("li"),d5e=a("strong"),Qmr=o("marian"),Wmr=o(" \u2014 "),SX=a("a"),Hmr=o("TFMarianMTModel"),Umr=o(" (Marian model)"),Jmr=l(),k9=a("li"),c5e=a("strong"),Ymr=o("mbart"),Kmr=o(" \u2014 "),RX=a("a"),Zmr=o("TFMBartForConditionalGeneration"),egr=o(" (mBART model)"),ogr=l(),S9=a("li"),f5e=a("strong"),rgr=o("mt5"),tgr=o(" \u2014 "),BX=a("a"),agr=o("TFMT5ForConditionalGeneration"),ngr=o(" (mT5 model)"),sgr=l(),R9=a("li"),m5e=a("strong"),lgr=o("pegasus"),igr=o(" \u2014 "),PX=a("a"),dgr=o("TFPegasusForConditionalGeneration"),cgr=o(" (Pegasus model)"),fgr=l(),B9=a("li"),g5e=a("strong"),mgr=o("t5"),ggr=o(" \u2014 "),$X=a("a"),hgr=o("TFT5ForConditionalGeneration"),pgr=o(" (T5 model)"),_gr=l(),h5e=a("p"),ugr=o("Examples:"),bgr=l(),f(z0.$$.fragment),BBe=l(),Rc=a("h2"),P9=a("a"),p5e=a("span"),f(Q0.$$.fragment),Fgr=l(),_5e=a("span"),vgr=o("TFAutoModelForSequenceClassification"),PBe=l(),wr=a("div"),f(W0.$$.fragment),Tgr=l(),Bc=a("p"),Mgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IX=a("a"),Egr=o("from_pretrained()"),Cgr=o(" class method or the "),qX=a("a"),wgr=o("from_config()"),Agr=o(` class
method.`),ygr=l(),H0=a("p"),Lgr=o("This class cannot be instantiated directly using "),u5e=a("code"),xgr=o("__init__()"),kgr=o(" (throws an error)."),Sgr=l(),Ft=a("div"),f(U0.$$.fragment),Rgr=l(),b5e=a("p"),Bgr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pgr=l(),Pc=a("p"),$gr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),Igr=o("not"),qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),Ngr=o("from_pretrained()"),jgr=o(" to load the model weights."),Dgr=l(),v5e=a("p"),Ggr=o("Examples:"),Ogr=l(),f(J0.$$.fragment),Vgr=l(),vo=a("div"),f(Y0.$$.fragment),Xgr=l(),T5e=a("p"),zgr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qgr=l(),Mn=a("p"),Wgr=o("The model class to instantiate is selected based on the "),M5e=a("code"),Hgr=o("model_type"),Ugr=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),Jgr=o("pretrained_model_name_or_path"),Ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(":"),ehr=l(),V=a("ul"),$9=a("li"),w5e=a("strong"),ohr=o("albert"),rhr=o(" \u2014 "),jX=a("a"),thr=o("TFAlbertForSequenceClassification"),ahr=o(" (ALBERT model)"),nhr=l(),I9=a("li"),A5e=a("strong"),shr=o("bert"),lhr=o(" \u2014 "),DX=a("a"),ihr=o("TFBertForSequenceClassification"),dhr=o(" (BERT model)"),chr=l(),q9=a("li"),y5e=a("strong"),fhr=o("camembert"),mhr=o(" \u2014 "),GX=a("a"),ghr=o("TFCamembertForSequenceClassification"),hhr=o(" (CamemBERT model)"),phr=l(),N9=a("li"),L5e=a("strong"),_hr=o("convbert"),uhr=o(" \u2014 "),OX=a("a"),bhr=o("TFConvBertForSequenceClassification"),Fhr=o(" (ConvBERT model)"),vhr=l(),j9=a("li"),x5e=a("strong"),Thr=o("ctrl"),Mhr=o(" \u2014 "),VX=a("a"),Ehr=o("TFCTRLForSequenceClassification"),Chr=o(" (CTRL model)"),whr=l(),D9=a("li"),k5e=a("strong"),Ahr=o("deberta"),yhr=o(" \u2014 "),XX=a("a"),Lhr=o("TFDebertaForSequenceClassification"),xhr=o(" (DeBERTa model)"),khr=l(),G9=a("li"),S5e=a("strong"),Shr=o("deberta-v2"),Rhr=o(" \u2014 "),zX=a("a"),Bhr=o("TFDebertaV2ForSequenceClassification"),Phr=o(" (DeBERTa-v2 model)"),$hr=l(),O9=a("li"),R5e=a("strong"),Ihr=o("distilbert"),qhr=o(" \u2014 "),QX=a("a"),Nhr=o("TFDistilBertForSequenceClassification"),jhr=o(" (DistilBERT model)"),Dhr=l(),V9=a("li"),B5e=a("strong"),Ghr=o("electra"),Ohr=o(" \u2014 "),WX=a("a"),Vhr=o("TFElectraForSequenceClassification"),Xhr=o(" (ELECTRA model)"),zhr=l(),X9=a("li"),P5e=a("strong"),Qhr=o("flaubert"),Whr=o(" \u2014 "),HX=a("a"),Hhr=o("TFFlaubertForSequenceClassification"),Uhr=o(" (FlauBERT model)"),Jhr=l(),z9=a("li"),$5e=a("strong"),Yhr=o("funnel"),Khr=o(" \u2014 "),UX=a("a"),Zhr=o("TFFunnelForSequenceClassification"),epr=o(" (Funnel Transformer model)"),opr=l(),Q9=a("li"),I5e=a("strong"),rpr=o("gpt2"),tpr=o(" \u2014 "),JX=a("a"),apr=o("TFGPT2ForSequenceClassification"),npr=o(" (OpenAI GPT-2 model)"),spr=l(),W9=a("li"),q5e=a("strong"),lpr=o("gptj"),ipr=o(" \u2014 "),YX=a("a"),dpr=o("TFGPTJForSequenceClassification"),cpr=o(" (GPT-J model)"),fpr=l(),H9=a("li"),N5e=a("strong"),mpr=o("layoutlm"),gpr=o(" \u2014 "),KX=a("a"),hpr=o("TFLayoutLMForSequenceClassification"),ppr=o(" (LayoutLM model)"),_pr=l(),U9=a("li"),j5e=a("strong"),upr=o("longformer"),bpr=o(" \u2014 "),ZX=a("a"),Fpr=o("TFLongformerForSequenceClassification"),vpr=o(" (Longformer model)"),Tpr=l(),J9=a("li"),D5e=a("strong"),Mpr=o("mobilebert"),Epr=o(" \u2014 "),ez=a("a"),Cpr=o("TFMobileBertForSequenceClassification"),wpr=o(" (MobileBERT model)"),Apr=l(),Y9=a("li"),G5e=a("strong"),ypr=o("mpnet"),Lpr=o(" \u2014 "),oz=a("a"),xpr=o("TFMPNetForSequenceClassification"),kpr=o(" (MPNet model)"),Spr=l(),K9=a("li"),O5e=a("strong"),Rpr=o("openai-gpt"),Bpr=o(" \u2014 "),rz=a("a"),Ppr=o("TFOpenAIGPTForSequenceClassification"),$pr=o(" (OpenAI GPT model)"),Ipr=l(),Z9=a("li"),V5e=a("strong"),qpr=o("rembert"),Npr=o(" \u2014 "),tz=a("a"),jpr=o("TFRemBertForSequenceClassification"),Dpr=o(" (RemBERT model)"),Gpr=l(),eM=a("li"),X5e=a("strong"),Opr=o("roberta"),Vpr=o(" \u2014 "),az=a("a"),Xpr=o("TFRobertaForSequenceClassification"),zpr=o(" (RoBERTa model)"),Qpr=l(),oM=a("li"),z5e=a("strong"),Wpr=o("roformer"),Hpr=o(" \u2014 "),nz=a("a"),Upr=o("TFRoFormerForSequenceClassification"),Jpr=o(" (RoFormer model)"),Ypr=l(),rM=a("li"),Q5e=a("strong"),Kpr=o("tapas"),Zpr=o(" \u2014 "),sz=a("a"),e_r=o("TFTapasForSequenceClassification"),o_r=o(" (TAPAS model)"),r_r=l(),tM=a("li"),W5e=a("strong"),t_r=o("transfo-xl"),a_r=o(" \u2014 "),lz=a("a"),n_r=o("TFTransfoXLForSequenceClassification"),s_r=o(" (Transformer-XL model)"),l_r=l(),aM=a("li"),H5e=a("strong"),i_r=o("xlm"),d_r=o(" \u2014 "),iz=a("a"),c_r=o("TFXLMForSequenceClassification"),f_r=o(" (XLM model)"),m_r=l(),nM=a("li"),U5e=a("strong"),g_r=o("xlm-roberta"),h_r=o(" \u2014 "),dz=a("a"),p_r=o("TFXLMRobertaForSequenceClassification"),__r=o(" (XLM-RoBERTa model)"),u_r=l(),sM=a("li"),J5e=a("strong"),b_r=o("xlnet"),F_r=o(" \u2014 "),cz=a("a"),v_r=o("TFXLNetForSequenceClassification"),T_r=o(" (XLNet model)"),M_r=l(),Y5e=a("p"),E_r=o("Examples:"),C_r=l(),f(K0.$$.fragment),$Be=l(),$c=a("h2"),lM=a("a"),K5e=a("span"),f(Z0.$$.fragment),w_r=l(),Z5e=a("span"),A_r=o("TFAutoModelForMultipleChoice"),IBe=l(),Ar=a("div"),f(ey.$$.fragment),y_r=l(),Ic=a("p"),L_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fz=a("a"),x_r=o("from_pretrained()"),k_r=o(" class method or the "),mz=a("a"),S_r=o("from_config()"),R_r=o(` class
method.`),B_r=l(),oy=a("p"),P_r=o("This class cannot be instantiated directly using "),e2e=a("code"),$_r=o("__init__()"),I_r=o(" (throws an error)."),q_r=l(),vt=a("div"),f(ry.$$.fragment),N_r=l(),o2e=a("p"),j_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D_r=l(),qc=a("p"),G_r=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),O_r=o("not"),V_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),X_r=o("from_pretrained()"),z_r=o(" to load the model weights."),Q_r=l(),t2e=a("p"),W_r=o("Examples:"),H_r=l(),f(ty.$$.fragment),U_r=l(),To=a("div"),f(ay.$$.fragment),J_r=l(),a2e=a("p"),Y_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),K_r=l(),En=a("p"),Z_r=o("The model class to instantiate is selected based on the "),n2e=a("code"),eur=o("model_type"),our=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(":"),sur=l(),se=a("ul"),iM=a("li"),i2e=a("strong"),lur=o("albert"),iur=o(" \u2014 "),hz=a("a"),dur=o("TFAlbertForMultipleChoice"),cur=o(" (ALBERT model)"),fur=l(),dM=a("li"),d2e=a("strong"),mur=o("bert"),gur=o(" \u2014 "),pz=a("a"),hur=o("TFBertForMultipleChoice"),pur=o(" (BERT model)"),_ur=l(),cM=a("li"),c2e=a("strong"),uur=o("camembert"),bur=o(" \u2014 "),_z=a("a"),Fur=o("TFCamembertForMultipleChoice"),vur=o(" (CamemBERT model)"),Tur=l(),fM=a("li"),f2e=a("strong"),Mur=o("convbert"),Eur=o(" \u2014 "),uz=a("a"),Cur=o("TFConvBertForMultipleChoice"),wur=o(" (ConvBERT model)"),Aur=l(),mM=a("li"),m2e=a("strong"),yur=o("distilbert"),Lur=o(" \u2014 "),bz=a("a"),xur=o("TFDistilBertForMultipleChoice"),kur=o(" (DistilBERT model)"),Sur=l(),gM=a("li"),g2e=a("strong"),Rur=o("electra"),Bur=o(" \u2014 "),Fz=a("a"),Pur=o("TFElectraForMultipleChoice"),$ur=o(" (ELECTRA model)"),Iur=l(),hM=a("li"),h2e=a("strong"),qur=o("flaubert"),Nur=o(" \u2014 "),vz=a("a"),jur=o("TFFlaubertForMultipleChoice"),Dur=o(" (FlauBERT model)"),Gur=l(),pM=a("li"),p2e=a("strong"),Our=o("funnel"),Vur=o(" \u2014 "),Tz=a("a"),Xur=o("TFFunnelForMultipleChoice"),zur=o(" (Funnel Transformer model)"),Qur=l(),_M=a("li"),_2e=a("strong"),Wur=o("longformer"),Hur=o(" \u2014 "),Mz=a("a"),Uur=o("TFLongformerForMultipleChoice"),Jur=o(" (Longformer model)"),Yur=l(),uM=a("li"),u2e=a("strong"),Kur=o("mobilebert"),Zur=o(" \u2014 "),Ez=a("a"),e5r=o("TFMobileBertForMultipleChoice"),o5r=o(" (MobileBERT model)"),r5r=l(),bM=a("li"),b2e=a("strong"),t5r=o("mpnet"),a5r=o(" \u2014 "),Cz=a("a"),n5r=o("TFMPNetForMultipleChoice"),s5r=o(" (MPNet model)"),l5r=l(),FM=a("li"),F2e=a("strong"),i5r=o("rembert"),d5r=o(" \u2014 "),wz=a("a"),c5r=o("TFRemBertForMultipleChoice"),f5r=o(" (RemBERT model)"),m5r=l(),vM=a("li"),v2e=a("strong"),g5r=o("roberta"),h5r=o(" \u2014 "),Az=a("a"),p5r=o("TFRobertaForMultipleChoice"),_5r=o(" (RoBERTa model)"),u5r=l(),TM=a("li"),T2e=a("strong"),b5r=o("roformer"),F5r=o(" \u2014 "),yz=a("a"),v5r=o("TFRoFormerForMultipleChoice"),T5r=o(" (RoFormer model)"),M5r=l(),MM=a("li"),M2e=a("strong"),E5r=o("xlm"),C5r=o(" \u2014 "),Lz=a("a"),w5r=o("TFXLMForMultipleChoice"),A5r=o(" (XLM model)"),y5r=l(),EM=a("li"),E2e=a("strong"),L5r=o("xlm-roberta"),x5r=o(" \u2014 "),xz=a("a"),k5r=o("TFXLMRobertaForMultipleChoice"),S5r=o(" (XLM-RoBERTa model)"),R5r=l(),CM=a("li"),C2e=a("strong"),B5r=o("xlnet"),P5r=o(" \u2014 "),kz=a("a"),$5r=o("TFXLNetForMultipleChoice"),I5r=o(" (XLNet model)"),q5r=l(),w2e=a("p"),N5r=o("Examples:"),j5r=l(),f(ny.$$.fragment),qBe=l(),Nc=a("h2"),wM=a("a"),A2e=a("span"),f(sy.$$.fragment),D5r=l(),y2e=a("span"),G5r=o("TFAutoModelForTableQuestionAnswering"),NBe=l(),yr=a("div"),f(ly.$$.fragment),O5r=l(),jc=a("p"),V5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Sz=a("a"),X5r=o("from_pretrained()"),z5r=o(" class method or the "),Rz=a("a"),Q5r=o("from_config()"),W5r=o(` class
method.`),H5r=l(),iy=a("p"),U5r=o("This class cannot be instantiated directly using "),L2e=a("code"),J5r=o("__init__()"),Y5r=o(" (throws an error)."),K5r=l(),Tt=a("div"),f(dy.$$.fragment),Z5r=l(),x2e=a("p"),e2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),o2r=l(),Dc=a("p"),r2r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),t2r=o("not"),a2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),n2r=o("from_pretrained()"),s2r=o(" to load the model weights."),l2r=l(),S2e=a("p"),i2r=o("Examples:"),d2r=l(),f(cy.$$.fragment),c2r=l(),Mo=a("div"),f(fy.$$.fragment),f2r=l(),R2e=a("p"),m2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),g2r=l(),Cn=a("p"),h2r=o("The model class to instantiate is selected based on the "),B2e=a("code"),p2r=o("model_type"),_2r=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),u2r=o("pretrained_model_name_or_path"),b2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),F2r=o("pretrained_model_name_or_path"),v2r=o(":"),T2r=l(),I2e=a("ul"),AM=a("li"),q2e=a("strong"),M2r=o("tapas"),E2r=o(" \u2014 "),Pz=a("a"),C2r=o("TFTapasForQuestionAnswering"),w2r=o(" (TAPAS model)"),A2r=l(),N2e=a("p"),y2r=o("Examples:"),L2r=l(),f(my.$$.fragment),jBe=l(),Gc=a("h2"),yM=a("a"),j2e=a("span"),f(gy.$$.fragment),x2r=l(),D2e=a("span"),k2r=o("TFAutoModelForTokenClassification"),DBe=l(),Lr=a("div"),f(hy.$$.fragment),S2r=l(),Oc=a("p"),R2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=a("a"),B2r=o("from_pretrained()"),P2r=o(" class method or the "),Iz=a("a"),$2r=o("from_config()"),I2r=o(` class
method.`),q2r=l(),py=a("p"),N2r=o("This class cannot be instantiated directly using "),G2e=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),Mt=a("div"),f(_y.$$.fragment),O2r=l(),O2e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X2r=l(),Vc=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),Q2r=o("not"),W2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),X2e=a("p"),Y2r=o("Examples:"),K2r=l(),f(uy.$$.fragment),Z2r=l(),Eo=a("div"),f(by.$$.fragment),e1r=l(),z2e=a("p"),o1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),r1r=l(),wn=a("p"),t1r=o("The model class to instantiate is selected based on the "),Q2e=a("code"),a1r=o("model_type"),n1r=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),s1r=o("pretrained_model_name_or_path"),l1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(":"),c1r=l(),Y=a("ul"),LM=a("li"),U2e=a("strong"),f1r=o("albert"),m1r=o(" \u2014 "),Nz=a("a"),g1r=o("TFAlbertForTokenClassification"),h1r=o(" (ALBERT model)"),p1r=l(),xM=a("li"),J2e=a("strong"),_1r=o("bert"),u1r=o(" \u2014 "),jz=a("a"),b1r=o("TFBertForTokenClassification"),F1r=o(" (BERT model)"),v1r=l(),kM=a("li"),Y2e=a("strong"),T1r=o("camembert"),M1r=o(" \u2014 "),Dz=a("a"),E1r=o("TFCamembertForTokenClassification"),C1r=o(" (CamemBERT model)"),w1r=l(),SM=a("li"),K2e=a("strong"),A1r=o("convbert"),y1r=o(" \u2014 "),Gz=a("a"),L1r=o("TFConvBertForTokenClassification"),x1r=o(" (ConvBERT model)"),k1r=l(),RM=a("li"),Z2e=a("strong"),S1r=o("deberta"),R1r=o(" \u2014 "),Oz=a("a"),B1r=o("TFDebertaForTokenClassification"),P1r=o(" (DeBERTa model)"),$1r=l(),BM=a("li"),e1e=a("strong"),I1r=o("deberta-v2"),q1r=o(" \u2014 "),Vz=a("a"),N1r=o("TFDebertaV2ForTokenClassification"),j1r=o(" (DeBERTa-v2 model)"),D1r=l(),PM=a("li"),o1e=a("strong"),G1r=o("distilbert"),O1r=o(" \u2014 "),Xz=a("a"),V1r=o("TFDistilBertForTokenClassification"),X1r=o(" (DistilBERT model)"),z1r=l(),$M=a("li"),r1e=a("strong"),Q1r=o("electra"),W1r=o(" \u2014 "),zz=a("a"),H1r=o("TFElectraForTokenClassification"),U1r=o(" (ELECTRA model)"),J1r=l(),IM=a("li"),t1e=a("strong"),Y1r=o("flaubert"),K1r=o(" \u2014 "),Qz=a("a"),Z1r=o("TFFlaubertForTokenClassification"),ebr=o(" (FlauBERT model)"),obr=l(),qM=a("li"),a1e=a("strong"),rbr=o("funnel"),tbr=o(" \u2014 "),Wz=a("a"),abr=o("TFFunnelForTokenClassification"),nbr=o(" (Funnel Transformer model)"),sbr=l(),NM=a("li"),n1e=a("strong"),lbr=o("layoutlm"),ibr=o(" \u2014 "),Hz=a("a"),dbr=o("TFLayoutLMForTokenClassification"),cbr=o(" (LayoutLM model)"),fbr=l(),jM=a("li"),s1e=a("strong"),mbr=o("longformer"),gbr=o(" \u2014 "),Uz=a("a"),hbr=o("TFLongformerForTokenClassification"),pbr=o(" (Longformer model)"),_br=l(),DM=a("li"),l1e=a("strong"),ubr=o("mobilebert"),bbr=o(" \u2014 "),Jz=a("a"),Fbr=o("TFMobileBertForTokenClassification"),vbr=o(" (MobileBERT model)"),Tbr=l(),GM=a("li"),i1e=a("strong"),Mbr=o("mpnet"),Ebr=o(" \u2014 "),Yz=a("a"),Cbr=o("TFMPNetForTokenClassification"),wbr=o(" (MPNet model)"),Abr=l(),OM=a("li"),d1e=a("strong"),ybr=o("rembert"),Lbr=o(" \u2014 "),Kz=a("a"),xbr=o("TFRemBertForTokenClassification"),kbr=o(" (RemBERT model)"),Sbr=l(),VM=a("li"),c1e=a("strong"),Rbr=o("roberta"),Bbr=o(" \u2014 "),Zz=a("a"),Pbr=o("TFRobertaForTokenClassification"),$br=o(" (RoBERTa model)"),Ibr=l(),XM=a("li"),f1e=a("strong"),qbr=o("roformer"),Nbr=o(" \u2014 "),eQ=a("a"),jbr=o("TFRoFormerForTokenClassification"),Dbr=o(" (RoFormer model)"),Gbr=l(),zM=a("li"),m1e=a("strong"),Obr=o("xlm"),Vbr=o(" \u2014 "),oQ=a("a"),Xbr=o("TFXLMForTokenClassification"),zbr=o(" (XLM model)"),Qbr=l(),QM=a("li"),g1e=a("strong"),Wbr=o("xlm-roberta"),Hbr=o(" \u2014 "),rQ=a("a"),Ubr=o("TFXLMRobertaForTokenClassification"),Jbr=o(" (XLM-RoBERTa model)"),Ybr=l(),WM=a("li"),h1e=a("strong"),Kbr=o("xlnet"),Zbr=o(" \u2014 "),tQ=a("a"),eFr=o("TFXLNetForTokenClassification"),oFr=o(" (XLNet model)"),rFr=l(),p1e=a("p"),tFr=o("Examples:"),aFr=l(),f(Fy.$$.fragment),GBe=l(),Xc=a("h2"),HM=a("a"),_1e=a("span"),f(vy.$$.fragment),nFr=l(),u1e=a("span"),sFr=o("TFAutoModelForQuestionAnswering"),OBe=l(),xr=a("div"),f(Ty.$$.fragment),lFr=l(),zc=a("p"),iFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aQ=a("a"),dFr=o("from_pretrained()"),cFr=o(" class method or the "),nQ=a("a"),fFr=o("from_config()"),mFr=o(` class
method.`),gFr=l(),My=a("p"),hFr=o("This class cannot be instantiated directly using "),b1e=a("code"),pFr=o("__init__()"),_Fr=o(" (throws an error)."),uFr=l(),Et=a("div"),f(Ey.$$.fragment),bFr=l(),F1e=a("p"),FFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vFr=l(),Qc=a("p"),TFr=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),MFr=o("not"),EFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),CFr=o("from_pretrained()"),wFr=o(" to load the model weights."),AFr=l(),T1e=a("p"),yFr=o("Examples:"),LFr=l(),f(Cy.$$.fragment),xFr=l(),Co=a("div"),f(wy.$$.fragment),kFr=l(),M1e=a("p"),SFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RFr=l(),An=a("p"),BFr=o("The model class to instantiate is selected based on the "),E1e=a("code"),PFr=o("model_type"),$Fr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),IFr=o("pretrained_model_name_or_path"),qFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),NFr=o("pretrained_model_name_or_path"),jFr=o(":"),DFr=l(),K=a("ul"),UM=a("li"),A1e=a("strong"),GFr=o("albert"),OFr=o(" \u2014 "),lQ=a("a"),VFr=o("TFAlbertForQuestionAnswering"),XFr=o(" (ALBERT model)"),zFr=l(),JM=a("li"),y1e=a("strong"),QFr=o("bert"),WFr=o(" \u2014 "),iQ=a("a"),HFr=o("TFBertForQuestionAnswering"),UFr=o(" (BERT model)"),JFr=l(),YM=a("li"),L1e=a("strong"),YFr=o("camembert"),KFr=o(" \u2014 "),dQ=a("a"),ZFr=o("TFCamembertForQuestionAnswering"),evr=o(" (CamemBERT model)"),ovr=l(),KM=a("li"),x1e=a("strong"),rvr=o("convbert"),tvr=o(" \u2014 "),cQ=a("a"),avr=o("TFConvBertForQuestionAnswering"),nvr=o(" (ConvBERT model)"),svr=l(),ZM=a("li"),k1e=a("strong"),lvr=o("deberta"),ivr=o(" \u2014 "),fQ=a("a"),dvr=o("TFDebertaForQuestionAnswering"),cvr=o(" (DeBERTa model)"),fvr=l(),e4=a("li"),S1e=a("strong"),mvr=o("deberta-v2"),gvr=o(" \u2014 "),mQ=a("a"),hvr=o("TFDebertaV2ForQuestionAnswering"),pvr=o(" (DeBERTa-v2 model)"),_vr=l(),o4=a("li"),R1e=a("strong"),uvr=o("distilbert"),bvr=o(" \u2014 "),gQ=a("a"),Fvr=o("TFDistilBertForQuestionAnswering"),vvr=o(" (DistilBERT model)"),Tvr=l(),r4=a("li"),B1e=a("strong"),Mvr=o("electra"),Evr=o(" \u2014 "),hQ=a("a"),Cvr=o("TFElectraForQuestionAnswering"),wvr=o(" (ELECTRA model)"),Avr=l(),t4=a("li"),P1e=a("strong"),yvr=o("flaubert"),Lvr=o(" \u2014 "),pQ=a("a"),xvr=o("TFFlaubertForQuestionAnsweringSimple"),kvr=o(" (FlauBERT model)"),Svr=l(),a4=a("li"),$1e=a("strong"),Rvr=o("funnel"),Bvr=o(" \u2014 "),_Q=a("a"),Pvr=o("TFFunnelForQuestionAnswering"),$vr=o(" (Funnel Transformer model)"),Ivr=l(),n4=a("li"),I1e=a("strong"),qvr=o("gptj"),Nvr=o(" \u2014 "),uQ=a("a"),jvr=o("TFGPTJForQuestionAnswering"),Dvr=o(" (GPT-J model)"),Gvr=l(),s4=a("li"),q1e=a("strong"),Ovr=o("longformer"),Vvr=o(" \u2014 "),bQ=a("a"),Xvr=o("TFLongformerForQuestionAnswering"),zvr=o(" (Longformer model)"),Qvr=l(),l4=a("li"),N1e=a("strong"),Wvr=o("mobilebert"),Hvr=o(" \u2014 "),FQ=a("a"),Uvr=o("TFMobileBertForQuestionAnswering"),Jvr=o(" (MobileBERT model)"),Yvr=l(),i4=a("li"),j1e=a("strong"),Kvr=o("mpnet"),Zvr=o(" \u2014 "),vQ=a("a"),eTr=o("TFMPNetForQuestionAnswering"),oTr=o(" (MPNet model)"),rTr=l(),d4=a("li"),D1e=a("strong"),tTr=o("rembert"),aTr=o(" \u2014 "),TQ=a("a"),nTr=o("TFRemBertForQuestionAnswering"),sTr=o(" (RemBERT model)"),lTr=l(),c4=a("li"),G1e=a("strong"),iTr=o("roberta"),dTr=o(" \u2014 "),MQ=a("a"),cTr=o("TFRobertaForQuestionAnswering"),fTr=o(" (RoBERTa model)"),mTr=l(),f4=a("li"),O1e=a("strong"),gTr=o("roformer"),hTr=o(" \u2014 "),EQ=a("a"),pTr=o("TFRoFormerForQuestionAnswering"),_Tr=o(" (RoFormer model)"),uTr=l(),m4=a("li"),V1e=a("strong"),bTr=o("xlm"),FTr=o(" \u2014 "),CQ=a("a"),vTr=o("TFXLMForQuestionAnsweringSimple"),TTr=o(" (XLM model)"),MTr=l(),g4=a("li"),X1e=a("strong"),ETr=o("xlm-roberta"),CTr=o(" \u2014 "),wQ=a("a"),wTr=o("TFXLMRobertaForQuestionAnswering"),ATr=o(" (XLM-RoBERTa model)"),yTr=l(),h4=a("li"),z1e=a("strong"),LTr=o("xlnet"),xTr=o(" \u2014 "),AQ=a("a"),kTr=o("TFXLNetForQuestionAnsweringSimple"),STr=o(" (XLNet model)"),RTr=l(),Q1e=a("p"),BTr=o("Examples:"),PTr=l(),f(Ay.$$.fragment),VBe=l(),Wc=a("h2"),p4=a("a"),W1e=a("span"),f(yy.$$.fragment),$Tr=l(),H1e=a("span"),ITr=o("TFAutoModelForVision2Seq"),XBe=l(),kr=a("div"),f(Ly.$$.fragment),qTr=l(),Hc=a("p"),NTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yQ=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),LQ=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),xy=a("p"),XTr=o("This class cannot be instantiated directly using "),U1e=a("code"),zTr=o("__init__()"),QTr=o(" (throws an error)."),WTr=l(),Ct=a("div"),f(ky.$$.fragment),HTr=l(),J1e=a("p"),UTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JTr=l(),Uc=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),Y1e=a("strong"),KTr=o("not"),ZTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),K1e=a("p"),t9r=o("Examples:"),a9r=l(),f(Sy.$$.fragment),n9r=l(),wo=a("div"),f(Ry.$$.fragment),s9r=l(),Z1e=a("p"),l9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),i9r=l(),yn=a("p"),d9r=o("The model class to instantiate is selected based on the "),ebe=a("code"),c9r=o("model_type"),f9r=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),h9r=o("pretrained_model_name_or_path"),p9r=o(":"),_9r=l(),tbe=a("ul"),_4=a("li"),abe=a("strong"),u9r=o("vision-encoder-decoder"),b9r=o(" \u2014 "),kQ=a("a"),F9r=o("TFVisionEncoderDecoderModel"),v9r=o(" (Vision Encoder decoder model)"),T9r=l(),nbe=a("p"),M9r=o("Examples:"),E9r=l(),f(By.$$.fragment),zBe=l(),Jc=a("h2"),u4=a("a"),sbe=a("span"),f(Py.$$.fragment),C9r=l(),lbe=a("span"),w9r=o("TFAutoModelForSpeechSeq2Seq"),QBe=l(),Sr=a("div"),f($y.$$.fragment),A9r=l(),Yc=a("p"),y9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SQ=a("a"),L9r=o("from_pretrained()"),x9r=o(" class method or the "),RQ=a("a"),k9r=o("from_config()"),S9r=o(` class
method.`),R9r=l(),Iy=a("p"),B9r=o("This class cannot be instantiated directly using "),ibe=a("code"),P9r=o("__init__()"),$9r=o(" (throws an error)."),I9r=l(),wt=a("div"),f(qy.$$.fragment),q9r=l(),dbe=a("p"),N9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),j9r=l(),Kc=a("p"),D9r=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),G9r=o("not"),O9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),V9r=o("from_pretrained()"),X9r=o(" to load the model weights."),z9r=l(),fbe=a("p"),Q9r=o("Examples:"),W9r=l(),f(Ny.$$.fragment),H9r=l(),Ao=a("div"),f(jy.$$.fragment),U9r=l(),mbe=a("p"),J9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Y9r=l(),Ln=a("p"),K9r=o("The model class to instantiate is selected based on the "),gbe=a("code"),Z9r=o("model_type"),eMr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),tMr=o("pretrained_model_name_or_path"),aMr=o(":"),nMr=l(),_be=a("ul"),b4=a("li"),ube=a("strong"),sMr=o("speech_to_text"),lMr=o(" \u2014 "),PQ=a("a"),iMr=o("TFSpeech2TextForConditionalGeneration"),dMr=o(" (Speech2Text model)"),cMr=l(),bbe=a("p"),fMr=o("Examples:"),mMr=l(),f(Dy.$$.fragment),WBe=l(),Zc=a("h2"),F4=a("a"),Fbe=a("span"),f(Gy.$$.fragment),gMr=l(),vbe=a("span"),hMr=o("FlaxAutoModel"),HBe=l(),Rr=a("div"),f(Oy.$$.fragment),pMr=l(),ef=a("p"),_Mr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Q=a("a"),uMr=o("from_pretrained()"),bMr=o(" class method or the "),IQ=a("a"),FMr=o("from_config()"),vMr=o(` class
method.`),TMr=l(),Vy=a("p"),MMr=o("This class cannot be instantiated directly using "),Tbe=a("code"),EMr=o("__init__()"),CMr=o(" (throws an error)."),wMr=l(),At=a("div"),f(Xy.$$.fragment),AMr=l(),Mbe=a("p"),yMr=o("Instantiates one of the base model classes of the library from a configuration."),LMr=l(),of=a("p"),xMr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),kMr=o("not"),SMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),RMr=o("from_pretrained()"),BMr=o(" to load the model weights."),PMr=l(),Cbe=a("p"),$Mr=o("Examples:"),IMr=l(),f(zy.$$.fragment),qMr=l(),yo=a("div"),f(Qy.$$.fragment),NMr=l(),wbe=a("p"),jMr=o("Instantiate one of the base model classes of the library from a pretrained model."),DMr=l(),xn=a("p"),GMr=o("The model class to instantiate is selected based on the "),Abe=a("code"),OMr=o("model_type"),VMr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),QMr=o("pretrained_model_name_or_path"),WMr=o(":"),HMr=l(),z=a("ul"),v4=a("li"),xbe=a("strong"),UMr=o("albert"),JMr=o(" \u2014 "),NQ=a("a"),YMr=o("FlaxAlbertModel"),KMr=o(" (ALBERT model)"),ZMr=l(),T4=a("li"),kbe=a("strong"),e4r=o("bart"),o4r=o(" \u2014 "),jQ=a("a"),r4r=o("FlaxBartModel"),t4r=o(" (BART model)"),a4r=l(),M4=a("li"),Sbe=a("strong"),n4r=o("beit"),s4r=o(" \u2014 "),DQ=a("a"),l4r=o("FlaxBeitModel"),i4r=o(" (BEiT model)"),d4r=l(),E4=a("li"),Rbe=a("strong"),c4r=o("bert"),f4r=o(" \u2014 "),GQ=a("a"),m4r=o("FlaxBertModel"),g4r=o(" (BERT model)"),h4r=l(),C4=a("li"),Bbe=a("strong"),p4r=o("big_bird"),_4r=o(" \u2014 "),OQ=a("a"),u4r=o("FlaxBigBirdModel"),b4r=o(" (BigBird model)"),F4r=l(),w4=a("li"),Pbe=a("strong"),v4r=o("blenderbot"),T4r=o(" \u2014 "),VQ=a("a"),M4r=o("FlaxBlenderbotModel"),E4r=o(" (Blenderbot model)"),C4r=l(),A4=a("li"),$be=a("strong"),w4r=o("blenderbot-small"),A4r=o(" \u2014 "),XQ=a("a"),y4r=o("FlaxBlenderbotSmallModel"),L4r=o(" (BlenderbotSmall model)"),x4r=l(),y4=a("li"),Ibe=a("strong"),k4r=o("clip"),S4r=o(" \u2014 "),zQ=a("a"),R4r=o("FlaxCLIPModel"),B4r=o(" (CLIP model)"),P4r=l(),L4=a("li"),qbe=a("strong"),$4r=o("distilbert"),I4r=o(" \u2014 "),QQ=a("a"),q4r=o("FlaxDistilBertModel"),N4r=o(" (DistilBERT model)"),j4r=l(),x4=a("li"),Nbe=a("strong"),D4r=o("electra"),G4r=o(" \u2014 "),WQ=a("a"),O4r=o("FlaxElectraModel"),V4r=o(" (ELECTRA model)"),X4r=l(),k4=a("li"),jbe=a("strong"),z4r=o("gpt2"),Q4r=o(" \u2014 "),HQ=a("a"),W4r=o("FlaxGPT2Model"),H4r=o(" (OpenAI GPT-2 model)"),U4r=l(),S4=a("li"),Dbe=a("strong"),J4r=o("gpt_neo"),Y4r=o(" \u2014 "),UQ=a("a"),K4r=o("FlaxGPTNeoModel"),Z4r=o(" (GPT Neo model)"),eEr=l(),R4=a("li"),Gbe=a("strong"),oEr=o("gptj"),rEr=o(" \u2014 "),JQ=a("a"),tEr=o("FlaxGPTJModel"),aEr=o(" (GPT-J model)"),nEr=l(),B4=a("li"),Obe=a("strong"),sEr=o("marian"),lEr=o(" \u2014 "),YQ=a("a"),iEr=o("FlaxMarianModel"),dEr=o(" (Marian model)"),cEr=l(),P4=a("li"),Vbe=a("strong"),fEr=o("mbart"),mEr=o(" \u2014 "),KQ=a("a"),gEr=o("FlaxMBartModel"),hEr=o(" (mBART model)"),pEr=l(),$4=a("li"),Xbe=a("strong"),_Er=o("mt5"),uEr=o(" \u2014 "),ZQ=a("a"),bEr=o("FlaxMT5Model"),FEr=o(" (mT5 model)"),vEr=l(),I4=a("li"),zbe=a("strong"),TEr=o("pegasus"),MEr=o(" \u2014 "),eW=a("a"),EEr=o("FlaxPegasusModel"),CEr=o(" (Pegasus model)"),wEr=l(),q4=a("li"),Qbe=a("strong"),AEr=o("roberta"),yEr=o(" \u2014 "),oW=a("a"),LEr=o("FlaxRobertaModel"),xEr=o(" (RoBERTa model)"),kEr=l(),N4=a("li"),Wbe=a("strong"),SEr=o("roformer"),REr=o(" \u2014 "),rW=a("a"),BEr=o("FlaxRoFormerModel"),PEr=o(" (RoFormer model)"),$Er=l(),j4=a("li"),Hbe=a("strong"),IEr=o("t5"),qEr=o(" \u2014 "),tW=a("a"),NEr=o("FlaxT5Model"),jEr=o(" (T5 model)"),DEr=l(),D4=a("li"),Ube=a("strong"),GEr=o("vision-text-dual-encoder"),OEr=o(" \u2014 "),aW=a("a"),VEr=o("FlaxVisionTextDualEncoderModel"),XEr=o(" (VisionTextDualEncoder model)"),zEr=l(),G4=a("li"),Jbe=a("strong"),QEr=o("vit"),WEr=o(" \u2014 "),nW=a("a"),HEr=o("FlaxViTModel"),UEr=o(" (ViT model)"),JEr=l(),O4=a("li"),Ybe=a("strong"),YEr=o("wav2vec2"),KEr=o(" \u2014 "),sW=a("a"),ZEr=o("FlaxWav2Vec2Model"),e3r=o(" (Wav2Vec2 model)"),o3r=l(),V4=a("li"),Kbe=a("strong"),r3r=o("xglm"),t3r=o(" \u2014 "),lW=a("a"),a3r=o("FlaxXGLMModel"),n3r=o(" (XGLM model)"),s3r=l(),X4=a("li"),Zbe=a("strong"),l3r=o("xlm-roberta"),i3r=o(" \u2014 "),iW=a("a"),d3r=o("FlaxXLMRobertaModel"),c3r=o(" (XLM-RoBERTa model)"),f3r=l(),eFe=a("p"),m3r=o("Examples:"),g3r=l(),f(Wy.$$.fragment),UBe=l(),rf=a("h2"),z4=a("a"),oFe=a("span"),f(Hy.$$.fragment),h3r=l(),rFe=a("span"),p3r=o("FlaxAutoModelForCausalLM"),JBe=l(),Br=a("div"),f(Uy.$$.fragment),_3r=l(),tf=a("p"),u3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dW=a("a"),b3r=o("from_pretrained()"),F3r=o(" class method or the "),cW=a("a"),v3r=o("from_config()"),T3r=o(` class
method.`),M3r=l(),Jy=a("p"),E3r=o("This class cannot be instantiated directly using "),tFe=a("code"),C3r=o("__init__()"),w3r=o(" (throws an error)."),A3r=l(),yt=a("div"),f(Yy.$$.fragment),y3r=l(),aFe=a("p"),L3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x3r=l(),af=a("p"),k3r=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),S3r=o("not"),R3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),B3r=o("from_pretrained()"),P3r=o(" to load the model weights."),$3r=l(),sFe=a("p"),I3r=o("Examples:"),q3r=l(),f(Ky.$$.fragment),N3r=l(),Lo=a("div"),f(Zy.$$.fragment),j3r=l(),lFe=a("p"),D3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),G3r=l(),kn=a("p"),O3r=o("The model class to instantiate is selected based on the "),iFe=a("code"),V3r=o("model_type"),X3r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(":"),U3r=l(),ca=a("ul"),Q4=a("li"),fFe=a("strong"),J3r=o("bart"),Y3r=o(" \u2014 "),mW=a("a"),K3r=o("FlaxBartForCausalLM"),Z3r=o(" (BART model)"),eCr=l(),W4=a("li"),mFe=a("strong"),oCr=o("gpt2"),rCr=o(" \u2014 "),gW=a("a"),tCr=o("FlaxGPT2LMHeadModel"),aCr=o(" (OpenAI GPT-2 model)"),nCr=l(),H4=a("li"),gFe=a("strong"),sCr=o("gpt_neo"),lCr=o(" \u2014 "),hW=a("a"),iCr=o("FlaxGPTNeoForCausalLM"),dCr=o(" (GPT Neo model)"),cCr=l(),U4=a("li"),hFe=a("strong"),fCr=o("gptj"),mCr=o(" \u2014 "),pW=a("a"),gCr=o("FlaxGPTJForCausalLM"),hCr=o(" (GPT-J model)"),pCr=l(),J4=a("li"),pFe=a("strong"),_Cr=o("xglm"),uCr=o(" \u2014 "),_W=a("a"),bCr=o("FlaxXGLMForCausalLM"),FCr=o(" (XGLM model)"),vCr=l(),_Fe=a("p"),TCr=o("Examples:"),MCr=l(),f(e8.$$.fragment),YBe=l(),nf=a("h2"),Y4=a("a"),uFe=a("span"),f(o8.$$.fragment),ECr=l(),bFe=a("span"),CCr=o("FlaxAutoModelForPreTraining"),KBe=l(),Pr=a("div"),f(r8.$$.fragment),wCr=l(),sf=a("p"),ACr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uW=a("a"),yCr=o("from_pretrained()"),LCr=o(" class method or the "),bW=a("a"),xCr=o("from_config()"),kCr=o(` class
method.`),SCr=l(),t8=a("p"),RCr=o("This class cannot be instantiated directly using "),FFe=a("code"),BCr=o("__init__()"),PCr=o(" (throws an error)."),$Cr=l(),Lt=a("div"),f(a8.$$.fragment),ICr=l(),vFe=a("p"),qCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NCr=l(),lf=a("p"),jCr=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),DCr=o("not"),GCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),OCr=o("from_pretrained()"),VCr=o(" to load the model weights."),XCr=l(),MFe=a("p"),zCr=o("Examples:"),QCr=l(),f(n8.$$.fragment),WCr=l(),xo=a("div"),f(s8.$$.fragment),HCr=l(),EFe=a("p"),UCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JCr=l(),Sn=a("p"),YCr=o("The model class to instantiate is selected based on the "),CFe=a("code"),KCr=o("model_type"),ZCr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(":"),awr=l(),me=a("ul"),K4=a("li"),yFe=a("strong"),nwr=o("albert"),swr=o(" \u2014 "),vW=a("a"),lwr=o("FlaxAlbertForPreTraining"),iwr=o(" (ALBERT model)"),dwr=l(),Z4=a("li"),LFe=a("strong"),cwr=o("bart"),fwr=o(" \u2014 "),TW=a("a"),mwr=o("FlaxBartForConditionalGeneration"),gwr=o(" (BART model)"),hwr=l(),eE=a("li"),xFe=a("strong"),pwr=o("bert"),_wr=o(" \u2014 "),MW=a("a"),uwr=o("FlaxBertForPreTraining"),bwr=o(" (BERT model)"),Fwr=l(),oE=a("li"),kFe=a("strong"),vwr=o("big_bird"),Twr=o(" \u2014 "),EW=a("a"),Mwr=o("FlaxBigBirdForPreTraining"),Ewr=o(" (BigBird model)"),Cwr=l(),rE=a("li"),SFe=a("strong"),wwr=o("electra"),Awr=o(" \u2014 "),CW=a("a"),ywr=o("FlaxElectraForPreTraining"),Lwr=o(" (ELECTRA model)"),xwr=l(),tE=a("li"),RFe=a("strong"),kwr=o("mbart"),Swr=o(" \u2014 "),wW=a("a"),Rwr=o("FlaxMBartForConditionalGeneration"),Bwr=o(" (mBART model)"),Pwr=l(),aE=a("li"),BFe=a("strong"),$wr=o("mt5"),Iwr=o(" \u2014 "),AW=a("a"),qwr=o("FlaxMT5ForConditionalGeneration"),Nwr=o(" (mT5 model)"),jwr=l(),nE=a("li"),PFe=a("strong"),Dwr=o("roberta"),Gwr=o(" \u2014 "),yW=a("a"),Owr=o("FlaxRobertaForMaskedLM"),Vwr=o(" (RoBERTa model)"),Xwr=l(),sE=a("li"),$Fe=a("strong"),zwr=o("roformer"),Qwr=o(" \u2014 "),LW=a("a"),Wwr=o("FlaxRoFormerForMaskedLM"),Hwr=o(" (RoFormer model)"),Uwr=l(),lE=a("li"),IFe=a("strong"),Jwr=o("t5"),Ywr=o(" \u2014 "),xW=a("a"),Kwr=o("FlaxT5ForConditionalGeneration"),Zwr=o(" (T5 model)"),e6r=l(),iE=a("li"),qFe=a("strong"),o6r=o("wav2vec2"),r6r=o(" \u2014 "),kW=a("a"),t6r=o("FlaxWav2Vec2ForPreTraining"),a6r=o(" (Wav2Vec2 model)"),n6r=l(),dE=a("li"),NFe=a("strong"),s6r=o("xlm-roberta"),l6r=o(" \u2014 "),SW=a("a"),i6r=o("FlaxXLMRobertaForMaskedLM"),d6r=o(" (XLM-RoBERTa model)"),c6r=l(),jFe=a("p"),f6r=o("Examples:"),m6r=l(),f(l8.$$.fragment),ZBe=l(),df=a("h2"),cE=a("a"),DFe=a("span"),f(i8.$$.fragment),g6r=l(),GFe=a("span"),h6r=o("FlaxAutoModelForMaskedLM"),ePe=l(),$r=a("div"),f(d8.$$.fragment),p6r=l(),cf=a("p"),_6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RW=a("a"),u6r=o("from_pretrained()"),b6r=o(" class method or the "),BW=a("a"),F6r=o("from_config()"),v6r=o(` class
method.`),T6r=l(),c8=a("p"),M6r=o("This class cannot be instantiated directly using "),OFe=a("code"),E6r=o("__init__()"),C6r=o(" (throws an error)."),w6r=l(),xt=a("div"),f(f8.$$.fragment),A6r=l(),VFe=a("p"),y6r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),L6r=l(),ff=a("p"),x6r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),k6r=o("not"),S6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),R6r=o("from_pretrained()"),B6r=o(" to load the model weights."),P6r=l(),zFe=a("p"),$6r=o("Examples:"),I6r=l(),f(m8.$$.fragment),q6r=l(),ko=a("div"),f(g8.$$.fragment),N6r=l(),QFe=a("p"),j6r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D6r=l(),Rn=a("p"),G6r=o("The model class to instantiate is selected based on the "),WFe=a("code"),O6r=o("model_type"),V6r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),Q6r=o("pretrained_model_name_or_path"),W6r=o(":"),H6r=l(),Fe=a("ul"),fE=a("li"),JFe=a("strong"),U6r=o("albert"),J6r=o(" \u2014 "),$W=a("a"),Y6r=o("FlaxAlbertForMaskedLM"),K6r=o(" (ALBERT model)"),Z6r=l(),mE=a("li"),YFe=a("strong"),eAr=o("bart"),oAr=o(" \u2014 "),IW=a("a"),rAr=o("FlaxBartForConditionalGeneration"),tAr=o(" (BART model)"),aAr=l(),gE=a("li"),KFe=a("strong"),nAr=o("bert"),sAr=o(" \u2014 "),qW=a("a"),lAr=o("FlaxBertForMaskedLM"),iAr=o(" (BERT model)"),dAr=l(),hE=a("li"),ZFe=a("strong"),cAr=o("big_bird"),fAr=o(" \u2014 "),NW=a("a"),mAr=o("FlaxBigBirdForMaskedLM"),gAr=o(" (BigBird model)"),hAr=l(),pE=a("li"),eve=a("strong"),pAr=o("distilbert"),_Ar=o(" \u2014 "),jW=a("a"),uAr=o("FlaxDistilBertForMaskedLM"),bAr=o(" (DistilBERT model)"),FAr=l(),_E=a("li"),ove=a("strong"),vAr=o("electra"),TAr=o(" \u2014 "),DW=a("a"),MAr=o("FlaxElectraForMaskedLM"),EAr=o(" (ELECTRA model)"),CAr=l(),uE=a("li"),rve=a("strong"),wAr=o("mbart"),AAr=o(" \u2014 "),GW=a("a"),yAr=o("FlaxMBartForConditionalGeneration"),LAr=o(" (mBART model)"),xAr=l(),bE=a("li"),tve=a("strong"),kAr=o("roberta"),SAr=o(" \u2014 "),OW=a("a"),RAr=o("FlaxRobertaForMaskedLM"),BAr=o(" (RoBERTa model)"),PAr=l(),FE=a("li"),ave=a("strong"),$Ar=o("roformer"),IAr=o(" \u2014 "),VW=a("a"),qAr=o("FlaxRoFormerForMaskedLM"),NAr=o(" (RoFormer model)"),jAr=l(),vE=a("li"),nve=a("strong"),DAr=o("xlm-roberta"),GAr=o(" \u2014 "),XW=a("a"),OAr=o("FlaxXLMRobertaForMaskedLM"),VAr=o(" (XLM-RoBERTa model)"),XAr=l(),sve=a("p"),zAr=o("Examples:"),QAr=l(),f(h8.$$.fragment),oPe=l(),mf=a("h2"),TE=a("a"),lve=a("span"),f(p8.$$.fragment),WAr=l(),ive=a("span"),HAr=o("FlaxAutoModelForSeq2SeqLM"),rPe=l(),Ir=a("div"),f(_8.$$.fragment),UAr=l(),gf=a("p"),JAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zW=a("a"),YAr=o("from_pretrained()"),KAr=o(" class method or the "),QW=a("a"),ZAr=o("from_config()"),e0r=o(` class
method.`),o0r=l(),u8=a("p"),r0r=o("This class cannot be instantiated directly using "),dve=a("code"),t0r=o("__init__()"),a0r=o(" (throws an error)."),n0r=l(),kt=a("div"),f(b8.$$.fragment),s0r=l(),cve=a("p"),l0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i0r=l(),hf=a("p"),d0r=o(`Note:
Loading a model from its configuration file does `),fve=a("strong"),c0r=o("not"),f0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),m0r=o("from_pretrained()"),g0r=o(" to load the model weights."),h0r=l(),mve=a("p"),p0r=o("Examples:"),_0r=l(),f(F8.$$.fragment),u0r=l(),So=a("div"),f(v8.$$.fragment),b0r=l(),gve=a("p"),F0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v0r=l(),Bn=a("p"),T0r=o("The model class to instantiate is selected based on the "),hve=a("code"),M0r=o("model_type"),E0r=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),C0r=o("pretrained_model_name_or_path"),w0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),A0r=o("pretrained_model_name_or_path"),y0r=o(":"),L0r=l(),Ee=a("ul"),ME=a("li"),uve=a("strong"),x0r=o("bart"),k0r=o(" \u2014 "),HW=a("a"),S0r=o("FlaxBartForConditionalGeneration"),R0r=o(" (BART model)"),B0r=l(),EE=a("li"),bve=a("strong"),P0r=o("blenderbot"),$0r=o(" \u2014 "),UW=a("a"),I0r=o("FlaxBlenderbotForConditionalGeneration"),q0r=o(" (Blenderbot model)"),N0r=l(),CE=a("li"),Fve=a("strong"),j0r=o("blenderbot-small"),D0r=o(" \u2014 "),JW=a("a"),G0r=o("FlaxBlenderbotSmallForConditionalGeneration"),O0r=o(" (BlenderbotSmall model)"),V0r=l(),wE=a("li"),vve=a("strong"),X0r=o("encoder-decoder"),z0r=o(" \u2014 "),YW=a("a"),Q0r=o("FlaxEncoderDecoderModel"),W0r=o(" (Encoder decoder model)"),H0r=l(),AE=a("li"),Tve=a("strong"),U0r=o("marian"),J0r=o(" \u2014 "),KW=a("a"),Y0r=o("FlaxMarianMTModel"),K0r=o(" (Marian model)"),Z0r=l(),yE=a("li"),Mve=a("strong"),eyr=o("mbart"),oyr=o(" \u2014 "),ZW=a("a"),ryr=o("FlaxMBartForConditionalGeneration"),tyr=o(" (mBART model)"),ayr=l(),LE=a("li"),Eve=a("strong"),nyr=o("mt5"),syr=o(" \u2014 "),eH=a("a"),lyr=o("FlaxMT5ForConditionalGeneration"),iyr=o(" (mT5 model)"),dyr=l(),xE=a("li"),Cve=a("strong"),cyr=o("pegasus"),fyr=o(" \u2014 "),oH=a("a"),myr=o("FlaxPegasusForConditionalGeneration"),gyr=o(" (Pegasus model)"),hyr=l(),kE=a("li"),wve=a("strong"),pyr=o("t5"),_yr=o(" \u2014 "),rH=a("a"),uyr=o("FlaxT5ForConditionalGeneration"),byr=o(" (T5 model)"),Fyr=l(),Ave=a("p"),vyr=o("Examples:"),Tyr=l(),f(T8.$$.fragment),tPe=l(),pf=a("h2"),SE=a("a"),yve=a("span"),f(M8.$$.fragment),Myr=l(),Lve=a("span"),Eyr=o("FlaxAutoModelForSequenceClassification"),aPe=l(),qr=a("div"),f(E8.$$.fragment),Cyr=l(),_f=a("p"),wyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tH=a("a"),Ayr=o("from_pretrained()"),yyr=o(" class method or the "),aH=a("a"),Lyr=o("from_config()"),xyr=o(` class
method.`),kyr=l(),C8=a("p"),Syr=o("This class cannot be instantiated directly using "),xve=a("code"),Ryr=o("__init__()"),Byr=o(" (throws an error)."),Pyr=l(),St=a("div"),f(w8.$$.fragment),$yr=l(),kve=a("p"),Iyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qyr=l(),uf=a("p"),Nyr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),jyr=o("not"),Dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),Gyr=o("from_pretrained()"),Oyr=o(" to load the model weights."),Vyr=l(),Rve=a("p"),Xyr=o("Examples:"),zyr=l(),f(A8.$$.fragment),Qyr=l(),Ro=a("div"),f(y8.$$.fragment),Wyr=l(),Bve=a("p"),Hyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uyr=l(),Pn=a("p"),Jyr=o("The model class to instantiate is selected based on the "),Pve=a("code"),Yyr=o("model_type"),Kyr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Zyr=o("pretrained_model_name_or_path"),e8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(":"),t8r=l(),ve=a("ul"),RE=a("li"),qve=a("strong"),a8r=o("albert"),n8r=o(" \u2014 "),sH=a("a"),s8r=o("FlaxAlbertForSequenceClassification"),l8r=o(" (ALBERT model)"),i8r=l(),BE=a("li"),Nve=a("strong"),d8r=o("bart"),c8r=o(" \u2014 "),lH=a("a"),f8r=o("FlaxBartForSequenceClassification"),m8r=o(" (BART model)"),g8r=l(),PE=a("li"),jve=a("strong"),h8r=o("bert"),p8r=o(" \u2014 "),iH=a("a"),_8r=o("FlaxBertForSequenceClassification"),u8r=o(" (BERT model)"),b8r=l(),$E=a("li"),Dve=a("strong"),F8r=o("big_bird"),v8r=o(" \u2014 "),dH=a("a"),T8r=o("FlaxBigBirdForSequenceClassification"),M8r=o(" (BigBird model)"),E8r=l(),IE=a("li"),Gve=a("strong"),C8r=o("distilbert"),w8r=o(" \u2014 "),cH=a("a"),A8r=o("FlaxDistilBertForSequenceClassification"),y8r=o(" (DistilBERT model)"),L8r=l(),qE=a("li"),Ove=a("strong"),x8r=o("electra"),k8r=o(" \u2014 "),fH=a("a"),S8r=o("FlaxElectraForSequenceClassification"),R8r=o(" (ELECTRA model)"),B8r=l(),NE=a("li"),Vve=a("strong"),P8r=o("mbart"),$8r=o(" \u2014 "),mH=a("a"),I8r=o("FlaxMBartForSequenceClassification"),q8r=o(" (mBART model)"),N8r=l(),jE=a("li"),Xve=a("strong"),j8r=o("roberta"),D8r=o(" \u2014 "),gH=a("a"),G8r=o("FlaxRobertaForSequenceClassification"),O8r=o(" (RoBERTa model)"),V8r=l(),DE=a("li"),zve=a("strong"),X8r=o("roformer"),z8r=o(" \u2014 "),hH=a("a"),Q8r=o("FlaxRoFormerForSequenceClassification"),W8r=o(" (RoFormer model)"),H8r=l(),GE=a("li"),Qve=a("strong"),U8r=o("xlm-roberta"),J8r=o(" \u2014 "),pH=a("a"),Y8r=o("FlaxXLMRobertaForSequenceClassification"),K8r=o(" (XLM-RoBERTa model)"),Z8r=l(),Wve=a("p"),eLr=o("Examples:"),oLr=l(),f(L8.$$.fragment),nPe=l(),bf=a("h2"),OE=a("a"),Hve=a("span"),f(x8.$$.fragment),rLr=l(),Uve=a("span"),tLr=o("FlaxAutoModelForQuestionAnswering"),sPe=l(),Nr=a("div"),f(k8.$$.fragment),aLr=l(),Ff=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_H=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),uH=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),S8=a("p"),fLr=o("This class cannot be instantiated directly using "),Jve=a("code"),mLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),Rt=a("div"),f(R8.$$.fragment),pLr=l(),Yve=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uLr=l(),vf=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),FLr=o("not"),vLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),Zve=a("p"),CLr=o("Examples:"),wLr=l(),f(B8.$$.fragment),ALr=l(),Bo=a("div"),f(P8.$$.fragment),yLr=l(),eTe=a("p"),LLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xLr=l(),$n=a("p"),kLr=o("The model class to instantiate is selected based on the "),oTe=a("code"),SLr=o("model_type"),RLr=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),BLr=o("pretrained_model_name_or_path"),PLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),$Lr=o("pretrained_model_name_or_path"),ILr=o(":"),qLr=l(),Te=a("ul"),VE=a("li"),aTe=a("strong"),NLr=o("albert"),jLr=o(" \u2014 "),FH=a("a"),DLr=o("FlaxAlbertForQuestionAnswering"),GLr=o(" (ALBERT model)"),OLr=l(),XE=a("li"),nTe=a("strong"),VLr=o("bart"),XLr=o(" \u2014 "),vH=a("a"),zLr=o("FlaxBartForQuestionAnswering"),QLr=o(" (BART model)"),WLr=l(),zE=a("li"),sTe=a("strong"),HLr=o("bert"),ULr=o(" \u2014 "),TH=a("a"),JLr=o("FlaxBertForQuestionAnswering"),YLr=o(" (BERT model)"),KLr=l(),QE=a("li"),lTe=a("strong"),ZLr=o("big_bird"),e7r=o(" \u2014 "),MH=a("a"),o7r=o("FlaxBigBirdForQuestionAnswering"),r7r=o(" (BigBird model)"),t7r=l(),WE=a("li"),iTe=a("strong"),a7r=o("distilbert"),n7r=o(" \u2014 "),EH=a("a"),s7r=o("FlaxDistilBertForQuestionAnswering"),l7r=o(" (DistilBERT model)"),i7r=l(),HE=a("li"),dTe=a("strong"),d7r=o("electra"),c7r=o(" \u2014 "),CH=a("a"),f7r=o("FlaxElectraForQuestionAnswering"),m7r=o(" (ELECTRA model)"),g7r=l(),UE=a("li"),cTe=a("strong"),h7r=o("mbart"),p7r=o(" \u2014 "),wH=a("a"),_7r=o("FlaxMBartForQuestionAnswering"),u7r=o(" (mBART model)"),b7r=l(),JE=a("li"),fTe=a("strong"),F7r=o("roberta"),v7r=o(" \u2014 "),AH=a("a"),T7r=o("FlaxRobertaForQuestionAnswering"),M7r=o(" (RoBERTa model)"),E7r=l(),YE=a("li"),mTe=a("strong"),C7r=o("roformer"),w7r=o(" \u2014 "),yH=a("a"),A7r=o("FlaxRoFormerForQuestionAnswering"),y7r=o(" (RoFormer model)"),L7r=l(),KE=a("li"),gTe=a("strong"),x7r=o("xlm-roberta"),k7r=o(" \u2014 "),LH=a("a"),S7r=o("FlaxXLMRobertaForQuestionAnswering"),R7r=o(" (XLM-RoBERTa model)"),B7r=l(),hTe=a("p"),P7r=o("Examples:"),$7r=l(),f($8.$$.fragment),lPe=l(),Tf=a("h2"),ZE=a("a"),pTe=a("span"),f(I8.$$.fragment),I7r=l(),_Te=a("span"),q7r=o("FlaxAutoModelForTokenClassification"),iPe=l(),jr=a("div"),f(q8.$$.fragment),N7r=l(),Mf=a("p"),j7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xH=a("a"),D7r=o("from_pretrained()"),G7r=o(" class method or the "),kH=a("a"),O7r=o("from_config()"),V7r=o(` class
method.`),X7r=l(),N8=a("p"),z7r=o("This class cannot be instantiated directly using "),uTe=a("code"),Q7r=o("__init__()"),W7r=o(" (throws an error)."),H7r=l(),Bt=a("div"),f(j8.$$.fragment),U7r=l(),bTe=a("p"),J7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y7r=l(),Ef=a("p"),K7r=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),Z7r=o("not"),exr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),oxr=o("from_pretrained()"),rxr=o(" to load the model weights."),txr=l(),vTe=a("p"),axr=o("Examples:"),nxr=l(),f(D8.$$.fragment),sxr=l(),Po=a("div"),f(G8.$$.fragment),lxr=l(),TTe=a("p"),ixr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dxr=l(),In=a("p"),cxr=o("The model class to instantiate is selected based on the "),MTe=a("code"),fxr=o("model_type"),mxr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),pxr=o("pretrained_model_name_or_path"),_xr=o(":"),uxr=l(),Be=a("ul"),e3=a("li"),wTe=a("strong"),bxr=o("albert"),Fxr=o(" \u2014 "),RH=a("a"),vxr=o("FlaxAlbertForTokenClassification"),Txr=o(" (ALBERT model)"),Mxr=l(),o3=a("li"),ATe=a("strong"),Exr=o("bert"),Cxr=o(" \u2014 "),BH=a("a"),wxr=o("FlaxBertForTokenClassification"),Axr=o(" (BERT model)"),yxr=l(),r3=a("li"),yTe=a("strong"),Lxr=o("big_bird"),xxr=o(" \u2014 "),PH=a("a"),kxr=o("FlaxBigBirdForTokenClassification"),Sxr=o(" (BigBird model)"),Rxr=l(),t3=a("li"),LTe=a("strong"),Bxr=o("distilbert"),Pxr=o(" \u2014 "),$H=a("a"),$xr=o("FlaxDistilBertForTokenClassification"),Ixr=o(" (DistilBERT model)"),qxr=l(),a3=a("li"),xTe=a("strong"),Nxr=o("electra"),jxr=o(" \u2014 "),IH=a("a"),Dxr=o("FlaxElectraForTokenClassification"),Gxr=o(" (ELECTRA model)"),Oxr=l(),n3=a("li"),kTe=a("strong"),Vxr=o("roberta"),Xxr=o(" \u2014 "),qH=a("a"),zxr=o("FlaxRobertaForTokenClassification"),Qxr=o(" (RoBERTa model)"),Wxr=l(),s3=a("li"),STe=a("strong"),Hxr=o("roformer"),Uxr=o(" \u2014 "),NH=a("a"),Jxr=o("FlaxRoFormerForTokenClassification"),Yxr=o(" (RoFormer model)"),Kxr=l(),l3=a("li"),RTe=a("strong"),Zxr=o("xlm-roberta"),ekr=o(" \u2014 "),jH=a("a"),okr=o("FlaxXLMRobertaForTokenClassification"),rkr=o(" (XLM-RoBERTa model)"),tkr=l(),BTe=a("p"),akr=o("Examples:"),nkr=l(),f(O8.$$.fragment),dPe=l(),Cf=a("h2"),i3=a("a"),PTe=a("span"),f(V8.$$.fragment),skr=l(),$Te=a("span"),lkr=o("FlaxAutoModelForMultipleChoice"),cPe=l(),Dr=a("div"),f(X8.$$.fragment),ikr=l(),wf=a("p"),dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DH=a("a"),ckr=o("from_pretrained()"),fkr=o(" class method or the "),GH=a("a"),mkr=o("from_config()"),gkr=o(` class
method.`),hkr=l(),z8=a("p"),pkr=o("This class cannot be instantiated directly using "),ITe=a("code"),_kr=o("__init__()"),ukr=o(" (throws an error)."),bkr=l(),Pt=a("div"),f(Q8.$$.fragment),Fkr=l(),qTe=a("p"),vkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tkr=l(),Af=a("p"),Mkr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),Ekr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),wkr=o("from_pretrained()"),Akr=o(" to load the model weights."),ykr=l(),jTe=a("p"),Lkr=o("Examples:"),xkr=l(),f(W8.$$.fragment),kkr=l(),$o=a("div"),f(H8.$$.fragment),Skr=l(),DTe=a("p"),Rkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bkr=l(),qn=a("p"),Pkr=o("The model class to instantiate is selected based on the "),GTe=a("code"),$kr=o("model_type"),Ikr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),qkr=o("pretrained_model_name_or_path"),Nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),jkr=o("pretrained_model_name_or_path"),Dkr=o(":"),Gkr=l(),Pe=a("ul"),d3=a("li"),XTe=a("strong"),Okr=o("albert"),Vkr=o(" \u2014 "),VH=a("a"),Xkr=o("FlaxAlbertForMultipleChoice"),zkr=o(" (ALBERT model)"),Qkr=l(),c3=a("li"),zTe=a("strong"),Wkr=o("bert"),Hkr=o(" \u2014 "),XH=a("a"),Ukr=o("FlaxBertForMultipleChoice"),Jkr=o(" (BERT model)"),Ykr=l(),f3=a("li"),QTe=a("strong"),Kkr=o("big_bird"),Zkr=o(" \u2014 "),zH=a("a"),eSr=o("FlaxBigBirdForMultipleChoice"),oSr=o(" (BigBird model)"),rSr=l(),m3=a("li"),WTe=a("strong"),tSr=o("distilbert"),aSr=o(" \u2014 "),QH=a("a"),nSr=o("FlaxDistilBertForMultipleChoice"),sSr=o(" (DistilBERT model)"),lSr=l(),g3=a("li"),HTe=a("strong"),iSr=o("electra"),dSr=o(" \u2014 "),WH=a("a"),cSr=o("FlaxElectraForMultipleChoice"),fSr=o(" (ELECTRA model)"),mSr=l(),h3=a("li"),UTe=a("strong"),gSr=o("roberta"),hSr=o(" \u2014 "),HH=a("a"),pSr=o("FlaxRobertaForMultipleChoice"),_Sr=o(" (RoBERTa model)"),uSr=l(),p3=a("li"),JTe=a("strong"),bSr=o("roformer"),FSr=o(" \u2014 "),UH=a("a"),vSr=o("FlaxRoFormerForMultipleChoice"),TSr=o(" (RoFormer model)"),MSr=l(),_3=a("li"),YTe=a("strong"),ESr=o("xlm-roberta"),CSr=o(" \u2014 "),JH=a("a"),wSr=o("FlaxXLMRobertaForMultipleChoice"),ASr=o(" (XLM-RoBERTa model)"),ySr=l(),KTe=a("p"),LSr=o("Examples:"),xSr=l(),f(U8.$$.fragment),fPe=l(),yf=a("h2"),u3=a("a"),ZTe=a("span"),f(J8.$$.fragment),kSr=l(),e9e=a("span"),SSr=o("FlaxAutoModelForNextSentencePrediction"),mPe=l(),Gr=a("div"),f(Y8.$$.fragment),RSr=l(),Lf=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YH=a("a"),PSr=o("from_pretrained()"),$Sr=o(" class method or the "),KH=a("a"),ISr=o("from_config()"),qSr=o(` class
method.`),NSr=l(),K8=a("p"),jSr=o("This class cannot be instantiated directly using "),o9e=a("code"),DSr=o("__init__()"),GSr=o(" (throws an error)."),OSr=l(),$t=a("div"),f(Z8.$$.fragment),VSr=l(),r9e=a("p"),XSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zSr=l(),xf=a("p"),QSr=o(`Note:
Loading a model from its configuration file does `),t9e=a("strong"),WSr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),USr=o("from_pretrained()"),JSr=o(" to load the model weights."),YSr=l(),a9e=a("p"),KSr=o("Examples:"),ZSr=l(),f(eL.$$.fragment),eRr=l(),Io=a("div"),f(oL.$$.fragment),oRr=l(),n9e=a("p"),rRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tRr=l(),Nn=a("p"),aRr=o("The model class to instantiate is selected based on the "),s9e=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),l9e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),fRr=l(),d9e=a("ul"),b3=a("li"),c9e=a("strong"),mRr=o("bert"),gRr=o(" \u2014 "),eU=a("a"),hRr=o("FlaxBertForNextSentencePrediction"),pRr=o(" (BERT model)"),_Rr=l(),f9e=a("p"),uRr=o("Examples:"),bRr=l(),f(rL.$$.fragment),gPe=l(),kf=a("h2"),F3=a("a"),m9e=a("span"),f(tL.$$.fragment),FRr=l(),g9e=a("span"),vRr=o("FlaxAutoModelForImageClassification"),hPe=l(),Or=a("div"),f(aL.$$.fragment),TRr=l(),Sf=a("p"),MRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oU=a("a"),ERr=o("from_pretrained()"),CRr=o(" class method or the "),rU=a("a"),wRr=o("from_config()"),ARr=o(` class
method.`),yRr=l(),nL=a("p"),LRr=o("This class cannot be instantiated directly using "),h9e=a("code"),xRr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),It=a("div"),f(sL.$$.fragment),RRr=l(),p9e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PRr=l(),Rf=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),_9e=a("strong"),IRr=o("not"),qRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),NRr=o("from_pretrained()"),jRr=o(" to load the model weights."),DRr=l(),u9e=a("p"),GRr=o("Examples:"),ORr=l(),f(lL.$$.fragment),VRr=l(),qo=a("div"),f(iL.$$.fragment),XRr=l(),b9e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QRr=l(),jn=a("p"),WRr=o("The model class to instantiate is selected based on the "),F9e=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),v9e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),eBr=l(),dL=a("ul"),v3=a("li"),M9e=a("strong"),oBr=o("beit"),rBr=o(" \u2014 "),aU=a("a"),tBr=o("FlaxBeitForImageClassification"),aBr=o(" (BEiT model)"),nBr=l(),T3=a("li"),E9e=a("strong"),sBr=o("vit"),lBr=o(" \u2014 "),nU=a("a"),iBr=o("FlaxViTForImageClassification"),dBr=o(" (ViT model)"),cBr=l(),C9e=a("p"),fBr=o("Examples:"),mBr=l(),f(cL.$$.fragment),pPe=l(),Bf=a("h2"),M3=a("a"),w9e=a("span"),f(fL.$$.fragment),gBr=l(),A9e=a("span"),hBr=o("FlaxAutoModelForVision2Seq"),_Pe=l(),Vr=a("div"),f(mL.$$.fragment),pBr=l(),Pf=a("p"),_Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sU=a("a"),uBr=o("from_pretrained()"),bBr=o(" class method or the "),lU=a("a"),FBr=o("from_config()"),vBr=o(` class
method.`),TBr=l(),gL=a("p"),MBr=o("This class cannot be instantiated directly using "),y9e=a("code"),EBr=o("__init__()"),CBr=o(" (throws an error)."),wBr=l(),qt=a("div"),f(hL.$$.fragment),ABr=l(),L9e=a("p"),yBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LBr=l(),$f=a("p"),xBr=o(`Note:
Loading a model from its configuration file does `),x9e=a("strong"),kBr=o("not"),SBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),RBr=o("from_pretrained()"),BBr=o(" to load the model weights."),PBr=l(),k9e=a("p"),$Br=o("Examples:"),IBr=l(),f(pL.$$.fragment),qBr=l(),No=a("div"),f(_L.$$.fragment),NBr=l(),S9e=a("p"),jBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DBr=l(),Dn=a("p"),GBr=o("The model class to instantiate is selected based on the "),R9e=a("code"),OBr=o("model_type"),VBr=o(` property of the config object (either
passed as an argument or loaded from `),B9e=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=a("code"),QBr=o("pretrained_model_name_or_path"),WBr=o(":"),HBr=l(),$9e=a("ul"),E3=a("li"),I9e=a("strong"),UBr=o("vision-encoder-decoder"),JBr=o(" \u2014 "),dU=a("a"),YBr=o("FlaxVisionEncoderDecoderModel"),KBr=o(" (Vision Encoder decoder model)"),ZBr=l(),q9e=a("p"),ePr=o("Examples:"),oPr=l(),f(uL.$$.fragment),this.h()},l(c){const u=qCt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var bL=s(de);Ce=n(bL,"A",{id:!0,class:!0,href:!0});var N9e=s(Ce);lo=n(N9e,"SPAN",{});var j9e=s(lo);m(ge.$$.fragment,j9e),j9e.forEach(t),N9e.forEach(t),Me=i(bL),Xo=n(bL,"SPAN",{});var tPr=s(Xo);qi=r(tPr,"Auto Classes"),tPr.forEach(t),bL.forEach(t),Nf=i(c),fa=n(c,"P",{});var bPe=s(fa);Ni=r(bPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(bPe,"CODE",{});var aPr=s(ji);EC=r(aPr,"from_pretrained()"),aPr.forEach(t),jf=r(bPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bPe.forEach(t),xe=i(c),co=n(c,"P",{});var C3=s(co);Di=r(C3,"Instantiating one of "),Gn=n(C3,"A",{href:!0});var nPr=s(Gn);CC=r(nPr,"AutoConfig"),nPr.forEach(t),On=r(C3,", "),Vn=n(C3,"A",{href:!0});var sPr=s(Vn);wC=r(sPr,"AutoModel"),sPr.forEach(t),Gi=r(C3,`, and
`),Xn=n(C3,"A",{href:!0});var lPr=s(Xn);AC=r(lPr,"AutoTokenizer"),lPr.forEach(t),Oi=r(C3," will directly create a class of the relevant architecture. For instance"),C3.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var FPe=s(ue);_7=r(FPe,"will create a model that is an instance of "),Vi=n(FPe,"A",{href:!0});var iPr=s(Vi);u7=r(iPr,"BertModel"),iPr.forEach(t),b7=r(FPe,"."),FPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var vPe=s(Ga);F7=r(vPe,"There is one class of "),Gf=n(vPe,"CODE",{});var dPr=s(Gf);v7=r(dPr,"AutoModel"),dPr.forEach(t),xIe=r(vPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vPe.forEach(t),_Re=i(c),Xi=n(c,"H2",{class:!0});var TPe=s(Xi);Of=n(TPe,"A",{id:!0,class:!0,href:!0});var cPr=s(Of);tY=n(cPr,"SPAN",{});var fPr=s(tY);m(yC.$$.fragment,fPr),fPr.forEach(t),cPr.forEach(t),kIe=i(TPe),aY=n(TPe,"SPAN",{});var mPr=s(aY);SIe=r(mPr,"Extending the Auto Classes"),mPr.forEach(t),TPe.forEach(t),uRe=i(c),zn=n(c,"P",{});var cU=s(zn);RIe=r(cU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),nY=n(cU,"CODE",{});var gPr=s(nY);BIe=r(gPr,"NewModel"),gPr.forEach(t),PIe=r(cU,", make sure you have a "),sY=n(cU,"CODE",{});var hPr=s(sY);$Ie=r(hPr,"NewModelConfig"),hPr.forEach(t),IIe=r(cU,` then you can add those to the auto
classes like this:`),cU.forEach(t),bRe=i(c),m(LC.$$.fragment,c),FRe=i(c),T7=n(c,"P",{});var pPr=s(T7);qIe=r(pPr,"You will then be able to use the auto classes like you would usually do!"),pPr.forEach(t),vRe=i(c),m(Vf.$$.fragment,c),TRe=i(c),zi=n(c,"H2",{class:!0});var MPe=s(zi);Xf=n(MPe,"A",{id:!0,class:!0,href:!0});var _Pr=s(Xf);lY=n(_Pr,"SPAN",{});var uPr=s(lY);m(xC.$$.fragment,uPr),uPr.forEach(t),_Pr.forEach(t),NIe=i(MPe),iY=n(MPe,"SPAN",{});var bPr=s(iY);jIe=r(bPr,"AutoConfig"),bPr.forEach(t),MPe.forEach(t),MRe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(kC.$$.fragment,Vs),DIe=i(Vs),SC=n(Vs,"P",{});var EPe=s(SC);GIe=r(EPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),M7=n(EPe,"A",{href:!0});var FPr=s(M7);OIe=r(FPr,"from_pretrained()"),FPr.forEach(t),VIe=r(EPe," class method."),EPe.forEach(t),XIe=i(Vs),RC=n(Vs,"P",{});var CPe=s(RC);zIe=r(CPe,"This class cannot be instantiated directly using "),dY=n(CPe,"CODE",{});var vPr=s(dY);QIe=r(vPr,"__init__()"),vPr.forEach(t),WIe=r(CPe," (throws an error)."),CPe.forEach(t),HIe=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(BC.$$.fragment,ga),UIe=i(ga),cY=n(ga,"P",{});var TPr=s(cY);JIe=r(TPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),TPr.forEach(t),YIe=i(ga),Qi=n(ga,"P",{});var fU=s(Qi);KIe=r(fU,"The configuration class to instantiate is selected based on the "),fY=n(fU,"CODE",{});var MPr=s(fY);ZIe=r(MPr,"model_type"),MPr.forEach(t),eqe=r(fU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),mY=n(fU,"CODE",{});var EPr=s(mY);oqe=r(EPr,"pretrained_model_name_or_path"),EPr.forEach(t),rqe=r(fU,":"),fU.forEach(t),tqe=i(ga),F=n(ga,"UL",{});var v=s(F);zf=n(v,"LI",{});var D9e=s(zf);gY=n(D9e,"STRONG",{});var CPr=s(gY);aqe=r(CPr,"albert"),CPr.forEach(t),nqe=r(D9e," \u2014 "),E7=n(D9e,"A",{href:!0});var wPr=s(E7);sqe=r(wPr,"AlbertConfig"),wPr.forEach(t),lqe=r(D9e," (ALBERT model)"),D9e.forEach(t),iqe=i(v),Qf=n(v,"LI",{});var G9e=s(Qf);hY=n(G9e,"STRONG",{});var APr=s(hY);dqe=r(APr,"bart"),APr.forEach(t),cqe=r(G9e," \u2014 "),C7=n(G9e,"A",{href:!0});var yPr=s(C7);fqe=r(yPr,"BartConfig"),yPr.forEach(t),mqe=r(G9e," (BART model)"),G9e.forEach(t),gqe=i(v),Wf=n(v,"LI",{});var O9e=s(Wf);pY=n(O9e,"STRONG",{});var LPr=s(pY);hqe=r(LPr,"beit"),LPr.forEach(t),pqe=r(O9e," \u2014 "),w7=n(O9e,"A",{href:!0});var xPr=s(w7);_qe=r(xPr,"BeitConfig"),xPr.forEach(t),uqe=r(O9e," (BEiT model)"),O9e.forEach(t),bqe=i(v),Hf=n(v,"LI",{});var V9e=s(Hf);_Y=n(V9e,"STRONG",{});var kPr=s(_Y);Fqe=r(kPr,"bert"),kPr.forEach(t),vqe=r(V9e," \u2014 "),A7=n(V9e,"A",{href:!0});var SPr=s(A7);Tqe=r(SPr,"BertConfig"),SPr.forEach(t),Mqe=r(V9e," (BERT model)"),V9e.forEach(t),Eqe=i(v),Uf=n(v,"LI",{});var X9e=s(Uf);uY=n(X9e,"STRONG",{});var RPr=s(uY);Cqe=r(RPr,"bert-generation"),RPr.forEach(t),wqe=r(X9e," \u2014 "),y7=n(X9e,"A",{href:!0});var BPr=s(y7);Aqe=r(BPr,"BertGenerationConfig"),BPr.forEach(t),yqe=r(X9e," (Bert Generation model)"),X9e.forEach(t),Lqe=i(v),Jf=n(v,"LI",{});var z9e=s(Jf);bY=n(z9e,"STRONG",{});var PPr=s(bY);xqe=r(PPr,"big_bird"),PPr.forEach(t),kqe=r(z9e," \u2014 "),L7=n(z9e,"A",{href:!0});var $Pr=s(L7);Sqe=r($Pr,"BigBirdConfig"),$Pr.forEach(t),Rqe=r(z9e," (BigBird model)"),z9e.forEach(t),Bqe=i(v),Yf=n(v,"LI",{});var Q9e=s(Yf);FY=n(Q9e,"STRONG",{});var IPr=s(FY);Pqe=r(IPr,"bigbird_pegasus"),IPr.forEach(t),$qe=r(Q9e," \u2014 "),x7=n(Q9e,"A",{href:!0});var qPr=s(x7);Iqe=r(qPr,"BigBirdPegasusConfig"),qPr.forEach(t),qqe=r(Q9e," (BigBirdPegasus model)"),Q9e.forEach(t),Nqe=i(v),Kf=n(v,"LI",{});var W9e=s(Kf);vY=n(W9e,"STRONG",{});var NPr=s(vY);jqe=r(NPr,"blenderbot"),NPr.forEach(t),Dqe=r(W9e," \u2014 "),k7=n(W9e,"A",{href:!0});var jPr=s(k7);Gqe=r(jPr,"BlenderbotConfig"),jPr.forEach(t),Oqe=r(W9e," (Blenderbot model)"),W9e.forEach(t),Vqe=i(v),Zf=n(v,"LI",{});var H9e=s(Zf);TY=n(H9e,"STRONG",{});var DPr=s(TY);Xqe=r(DPr,"blenderbot-small"),DPr.forEach(t),zqe=r(H9e," \u2014 "),S7=n(H9e,"A",{href:!0});var GPr=s(S7);Qqe=r(GPr,"BlenderbotSmallConfig"),GPr.forEach(t),Wqe=r(H9e," (BlenderbotSmall model)"),H9e.forEach(t),Hqe=i(v),em=n(v,"LI",{});var U9e=s(em);MY=n(U9e,"STRONG",{});var OPr=s(MY);Uqe=r(OPr,"camembert"),OPr.forEach(t),Jqe=r(U9e," \u2014 "),R7=n(U9e,"A",{href:!0});var VPr=s(R7);Yqe=r(VPr,"CamembertConfig"),VPr.forEach(t),Kqe=r(U9e," (CamemBERT model)"),U9e.forEach(t),Zqe=i(v),om=n(v,"LI",{});var J9e=s(om);EY=n(J9e,"STRONG",{});var XPr=s(EY);eNe=r(XPr,"canine"),XPr.forEach(t),oNe=r(J9e," \u2014 "),B7=n(J9e,"A",{href:!0});var zPr=s(B7);rNe=r(zPr,"CanineConfig"),zPr.forEach(t),tNe=r(J9e," (Canine model)"),J9e.forEach(t),aNe=i(v),rm=n(v,"LI",{});var Y9e=s(rm);CY=n(Y9e,"STRONG",{});var QPr=s(CY);nNe=r(QPr,"clip"),QPr.forEach(t),sNe=r(Y9e," \u2014 "),P7=n(Y9e,"A",{href:!0});var WPr=s(P7);lNe=r(WPr,"CLIPConfig"),WPr.forEach(t),iNe=r(Y9e," (CLIP model)"),Y9e.forEach(t),dNe=i(v),tm=n(v,"LI",{});var K9e=s(tm);wY=n(K9e,"STRONG",{});var HPr=s(wY);cNe=r(HPr,"convbert"),HPr.forEach(t),fNe=r(K9e," \u2014 "),$7=n(K9e,"A",{href:!0});var UPr=s($7);mNe=r(UPr,"ConvBertConfig"),UPr.forEach(t),gNe=r(K9e," (ConvBERT model)"),K9e.forEach(t),hNe=i(v),am=n(v,"LI",{});var Z9e=s(am);AY=n(Z9e,"STRONG",{});var JPr=s(AY);pNe=r(JPr,"convnext"),JPr.forEach(t),_Ne=r(Z9e," \u2014 "),I7=n(Z9e,"A",{href:!0});var YPr=s(I7);uNe=r(YPr,"ConvNextConfig"),YPr.forEach(t),bNe=r(Z9e," (ConvNext model)"),Z9e.forEach(t),FNe=i(v),nm=n(v,"LI",{});var eMe=s(nm);yY=n(eMe,"STRONG",{});var KPr=s(yY);vNe=r(KPr,"ctrl"),KPr.forEach(t),TNe=r(eMe," \u2014 "),q7=n(eMe,"A",{href:!0});var ZPr=s(q7);MNe=r(ZPr,"CTRLConfig"),ZPr.forEach(t),ENe=r(eMe," (CTRL model)"),eMe.forEach(t),CNe=i(v),sm=n(v,"LI",{});var oMe=s(sm);LY=n(oMe,"STRONG",{});var e$r=s(LY);wNe=r(e$r,"data2vec-audio"),e$r.forEach(t),ANe=r(oMe," \u2014 "),N7=n(oMe,"A",{href:!0});var o$r=s(N7);yNe=r(o$r,"Data2VecAudioConfig"),o$r.forEach(t),LNe=r(oMe," (Data2VecAudio model)"),oMe.forEach(t),xNe=i(v),lm=n(v,"LI",{});var rMe=s(lm);xY=n(rMe,"STRONG",{});var r$r=s(xY);kNe=r(r$r,"data2vec-text"),r$r.forEach(t),SNe=r(rMe," \u2014 "),j7=n(rMe,"A",{href:!0});var t$r=s(j7);RNe=r(t$r,"Data2VecTextConfig"),t$r.forEach(t),BNe=r(rMe," (Data2VecText model)"),rMe.forEach(t),PNe=i(v),im=n(v,"LI",{});var tMe=s(im);kY=n(tMe,"STRONG",{});var a$r=s(kY);$Ne=r(a$r,"deberta"),a$r.forEach(t),INe=r(tMe," \u2014 "),D7=n(tMe,"A",{href:!0});var n$r=s(D7);qNe=r(n$r,"DebertaConfig"),n$r.forEach(t),NNe=r(tMe," (DeBERTa model)"),tMe.forEach(t),jNe=i(v),dm=n(v,"LI",{});var aMe=s(dm);SY=n(aMe,"STRONG",{});var s$r=s(SY);DNe=r(s$r,"deberta-v2"),s$r.forEach(t),GNe=r(aMe," \u2014 "),G7=n(aMe,"A",{href:!0});var l$r=s(G7);ONe=r(l$r,"DebertaV2Config"),l$r.forEach(t),VNe=r(aMe," (DeBERTa-v2 model)"),aMe.forEach(t),XNe=i(v),cm=n(v,"LI",{});var nMe=s(cm);RY=n(nMe,"STRONG",{});var i$r=s(RY);zNe=r(i$r,"decision_transformer"),i$r.forEach(t),QNe=r(nMe," \u2014 "),O7=n(nMe,"A",{href:!0});var d$r=s(O7);WNe=r(d$r,"DecisionTransformerConfig"),d$r.forEach(t),HNe=r(nMe," (Decision Transformer model)"),nMe.forEach(t),UNe=i(v),fm=n(v,"LI",{});var sMe=s(fm);BY=n(sMe,"STRONG",{});var c$r=s(BY);JNe=r(c$r,"deit"),c$r.forEach(t),YNe=r(sMe," \u2014 "),V7=n(sMe,"A",{href:!0});var f$r=s(V7);KNe=r(f$r,"DeiTConfig"),f$r.forEach(t),ZNe=r(sMe," (DeiT model)"),sMe.forEach(t),eje=i(v),mm=n(v,"LI",{});var lMe=s(mm);PY=n(lMe,"STRONG",{});var m$r=s(PY);oje=r(m$r,"detr"),m$r.forEach(t),rje=r(lMe," \u2014 "),X7=n(lMe,"A",{href:!0});var g$r=s(X7);tje=r(g$r,"DetrConfig"),g$r.forEach(t),aje=r(lMe," (DETR model)"),lMe.forEach(t),nje=i(v),gm=n(v,"LI",{});var iMe=s(gm);$Y=n(iMe,"STRONG",{});var h$r=s($Y);sje=r(h$r,"distilbert"),h$r.forEach(t),lje=r(iMe," \u2014 "),z7=n(iMe,"A",{href:!0});var p$r=s(z7);ije=r(p$r,"DistilBertConfig"),p$r.forEach(t),dje=r(iMe," (DistilBERT model)"),iMe.forEach(t),cje=i(v),hm=n(v,"LI",{});var dMe=s(hm);IY=n(dMe,"STRONG",{});var _$r=s(IY);fje=r(_$r,"dpr"),_$r.forEach(t),mje=r(dMe," \u2014 "),Q7=n(dMe,"A",{href:!0});var u$r=s(Q7);gje=r(u$r,"DPRConfig"),u$r.forEach(t),hje=r(dMe," (DPR model)"),dMe.forEach(t),pje=i(v),pm=n(v,"LI",{});var cMe=s(pm);qY=n(cMe,"STRONG",{});var b$r=s(qY);_je=r(b$r,"dpt"),b$r.forEach(t),uje=r(cMe," \u2014 "),W7=n(cMe,"A",{href:!0});var F$r=s(W7);bje=r(F$r,"DPTConfig"),F$r.forEach(t),Fje=r(cMe," (DPT model)"),cMe.forEach(t),vje=i(v),_m=n(v,"LI",{});var fMe=s(_m);NY=n(fMe,"STRONG",{});var v$r=s(NY);Tje=r(v$r,"electra"),v$r.forEach(t),Mje=r(fMe," \u2014 "),H7=n(fMe,"A",{href:!0});var T$r=s(H7);Eje=r(T$r,"ElectraConfig"),T$r.forEach(t),Cje=r(fMe," (ELECTRA model)"),fMe.forEach(t),wje=i(v),um=n(v,"LI",{});var mMe=s(um);jY=n(mMe,"STRONG",{});var M$r=s(jY);Aje=r(M$r,"encoder-decoder"),M$r.forEach(t),yje=r(mMe," \u2014 "),U7=n(mMe,"A",{href:!0});var E$r=s(U7);Lje=r(E$r,"EncoderDecoderConfig"),E$r.forEach(t),xje=r(mMe," (Encoder decoder model)"),mMe.forEach(t),kje=i(v),bm=n(v,"LI",{});var gMe=s(bm);DY=n(gMe,"STRONG",{});var C$r=s(DY);Sje=r(C$r,"flaubert"),C$r.forEach(t),Rje=r(gMe," \u2014 "),J7=n(gMe,"A",{href:!0});var w$r=s(J7);Bje=r(w$r,"FlaubertConfig"),w$r.forEach(t),Pje=r(gMe," (FlauBERT model)"),gMe.forEach(t),$je=i(v),Fm=n(v,"LI",{});var hMe=s(Fm);GY=n(hMe,"STRONG",{});var A$r=s(GY);Ije=r(A$r,"fnet"),A$r.forEach(t),qje=r(hMe," \u2014 "),Y7=n(hMe,"A",{href:!0});var y$r=s(Y7);Nje=r(y$r,"FNetConfig"),y$r.forEach(t),jje=r(hMe," (FNet model)"),hMe.forEach(t),Dje=i(v),vm=n(v,"LI",{});var pMe=s(vm);OY=n(pMe,"STRONG",{});var L$r=s(OY);Gje=r(L$r,"fsmt"),L$r.forEach(t),Oje=r(pMe," \u2014 "),K7=n(pMe,"A",{href:!0});var x$r=s(K7);Vje=r(x$r,"FSMTConfig"),x$r.forEach(t),Xje=r(pMe," (FairSeq Machine-Translation model)"),pMe.forEach(t),zje=i(v),Tm=n(v,"LI",{});var _Me=s(Tm);VY=n(_Me,"STRONG",{});var k$r=s(VY);Qje=r(k$r,"funnel"),k$r.forEach(t),Wje=r(_Me," \u2014 "),Z7=n(_Me,"A",{href:!0});var S$r=s(Z7);Hje=r(S$r,"FunnelConfig"),S$r.forEach(t),Uje=r(_Me," (Funnel Transformer model)"),_Me.forEach(t),Jje=i(v),Mm=n(v,"LI",{});var uMe=s(Mm);XY=n(uMe,"STRONG",{});var R$r=s(XY);Yje=r(R$r,"glpn"),R$r.forEach(t),Kje=r(uMe," \u2014 "),ex=n(uMe,"A",{href:!0});var B$r=s(ex);Zje=r(B$r,"GLPNConfig"),B$r.forEach(t),eDe=r(uMe," (GLPN model)"),uMe.forEach(t),oDe=i(v),Em=n(v,"LI",{});var bMe=s(Em);zY=n(bMe,"STRONG",{});var P$r=s(zY);rDe=r(P$r,"gpt2"),P$r.forEach(t),tDe=r(bMe," \u2014 "),ox=n(bMe,"A",{href:!0});var $$r=s(ox);aDe=r($$r,"GPT2Config"),$$r.forEach(t),nDe=r(bMe," (OpenAI GPT-2 model)"),bMe.forEach(t),sDe=i(v),Cm=n(v,"LI",{});var FMe=s(Cm);QY=n(FMe,"STRONG",{});var I$r=s(QY);lDe=r(I$r,"gpt_neo"),I$r.forEach(t),iDe=r(FMe," \u2014 "),rx=n(FMe,"A",{href:!0});var q$r=s(rx);dDe=r(q$r,"GPTNeoConfig"),q$r.forEach(t),cDe=r(FMe," (GPT Neo model)"),FMe.forEach(t),fDe=i(v),wm=n(v,"LI",{});var vMe=s(wm);WY=n(vMe,"STRONG",{});var N$r=s(WY);mDe=r(N$r,"gptj"),N$r.forEach(t),gDe=r(vMe," \u2014 "),tx=n(vMe,"A",{href:!0});var j$r=s(tx);hDe=r(j$r,"GPTJConfig"),j$r.forEach(t),pDe=r(vMe," (GPT-J model)"),vMe.forEach(t),_De=i(v),Am=n(v,"LI",{});var TMe=s(Am);HY=n(TMe,"STRONG",{});var D$r=s(HY);uDe=r(D$r,"hubert"),D$r.forEach(t),bDe=r(TMe," \u2014 "),ax=n(TMe,"A",{href:!0});var G$r=s(ax);FDe=r(G$r,"HubertConfig"),G$r.forEach(t),vDe=r(TMe," (Hubert model)"),TMe.forEach(t),TDe=i(v),ym=n(v,"LI",{});var MMe=s(ym);UY=n(MMe,"STRONG",{});var O$r=s(UY);MDe=r(O$r,"ibert"),O$r.forEach(t),EDe=r(MMe," \u2014 "),nx=n(MMe,"A",{href:!0});var V$r=s(nx);CDe=r(V$r,"IBertConfig"),V$r.forEach(t),wDe=r(MMe," (I-BERT model)"),MMe.forEach(t),ADe=i(v),Lm=n(v,"LI",{});var EMe=s(Lm);JY=n(EMe,"STRONG",{});var X$r=s(JY);yDe=r(X$r,"imagegpt"),X$r.forEach(t),LDe=r(EMe," \u2014 "),sx=n(EMe,"A",{href:!0});var z$r=s(sx);xDe=r(z$r,"ImageGPTConfig"),z$r.forEach(t),kDe=r(EMe," (ImageGPT model)"),EMe.forEach(t),SDe=i(v),xm=n(v,"LI",{});var CMe=s(xm);YY=n(CMe,"STRONG",{});var Q$r=s(YY);RDe=r(Q$r,"layoutlm"),Q$r.forEach(t),BDe=r(CMe," \u2014 "),lx=n(CMe,"A",{href:!0});var W$r=s(lx);PDe=r(W$r,"LayoutLMConfig"),W$r.forEach(t),$De=r(CMe," (LayoutLM model)"),CMe.forEach(t),IDe=i(v),km=n(v,"LI",{});var wMe=s(km);KY=n(wMe,"STRONG",{});var H$r=s(KY);qDe=r(H$r,"layoutlmv2"),H$r.forEach(t),NDe=r(wMe," \u2014 "),ix=n(wMe,"A",{href:!0});var U$r=s(ix);jDe=r(U$r,"LayoutLMv2Config"),U$r.forEach(t),DDe=r(wMe," (LayoutLMv2 model)"),wMe.forEach(t),GDe=i(v),Sm=n(v,"LI",{});var AMe=s(Sm);ZY=n(AMe,"STRONG",{});var J$r=s(ZY);ODe=r(J$r,"led"),J$r.forEach(t),VDe=r(AMe," \u2014 "),dx=n(AMe,"A",{href:!0});var Y$r=s(dx);XDe=r(Y$r,"LEDConfig"),Y$r.forEach(t),zDe=r(AMe," (LED model)"),AMe.forEach(t),QDe=i(v),Rm=n(v,"LI",{});var yMe=s(Rm);eK=n(yMe,"STRONG",{});var K$r=s(eK);WDe=r(K$r,"longformer"),K$r.forEach(t),HDe=r(yMe," \u2014 "),cx=n(yMe,"A",{href:!0});var Z$r=s(cx);UDe=r(Z$r,"LongformerConfig"),Z$r.forEach(t),JDe=r(yMe," (Longformer model)"),yMe.forEach(t),YDe=i(v),Bm=n(v,"LI",{});var LMe=s(Bm);oK=n(LMe,"STRONG",{});var eIr=s(oK);KDe=r(eIr,"luke"),eIr.forEach(t),ZDe=r(LMe," \u2014 "),fx=n(LMe,"A",{href:!0});var oIr=s(fx);eGe=r(oIr,"LukeConfig"),oIr.forEach(t),oGe=r(LMe," (LUKE model)"),LMe.forEach(t),rGe=i(v),Pm=n(v,"LI",{});var xMe=s(Pm);rK=n(xMe,"STRONG",{});var rIr=s(rK);tGe=r(rIr,"lxmert"),rIr.forEach(t),aGe=r(xMe," \u2014 "),mx=n(xMe,"A",{href:!0});var tIr=s(mx);nGe=r(tIr,"LxmertConfig"),tIr.forEach(t),sGe=r(xMe," (LXMERT model)"),xMe.forEach(t),lGe=i(v),$m=n(v,"LI",{});var kMe=s($m);tK=n(kMe,"STRONG",{});var aIr=s(tK);iGe=r(aIr,"m2m_100"),aIr.forEach(t),dGe=r(kMe," \u2014 "),gx=n(kMe,"A",{href:!0});var nIr=s(gx);cGe=r(nIr,"M2M100Config"),nIr.forEach(t),fGe=r(kMe," (M2M100 model)"),kMe.forEach(t),mGe=i(v),Im=n(v,"LI",{});var SMe=s(Im);aK=n(SMe,"STRONG",{});var sIr=s(aK);gGe=r(sIr,"marian"),sIr.forEach(t),hGe=r(SMe," \u2014 "),hx=n(SMe,"A",{href:!0});var lIr=s(hx);pGe=r(lIr,"MarianConfig"),lIr.forEach(t),_Ge=r(SMe," (Marian model)"),SMe.forEach(t),uGe=i(v),qm=n(v,"LI",{});var RMe=s(qm);nK=n(RMe,"STRONG",{});var iIr=s(nK);bGe=r(iIr,"maskformer"),iIr.forEach(t),FGe=r(RMe," \u2014 "),px=n(RMe,"A",{href:!0});var dIr=s(px);vGe=r(dIr,"MaskFormerConfig"),dIr.forEach(t),TGe=r(RMe," (MaskFormer model)"),RMe.forEach(t),MGe=i(v),Nm=n(v,"LI",{});var BMe=s(Nm);sK=n(BMe,"STRONG",{});var cIr=s(sK);EGe=r(cIr,"mbart"),cIr.forEach(t),CGe=r(BMe," \u2014 "),_x=n(BMe,"A",{href:!0});var fIr=s(_x);wGe=r(fIr,"MBartConfig"),fIr.forEach(t),AGe=r(BMe," (mBART model)"),BMe.forEach(t),yGe=i(v),jm=n(v,"LI",{});var PMe=s(jm);lK=n(PMe,"STRONG",{});var mIr=s(lK);LGe=r(mIr,"megatron-bert"),mIr.forEach(t),xGe=r(PMe," \u2014 "),ux=n(PMe,"A",{href:!0});var gIr=s(ux);kGe=r(gIr,"MegatronBertConfig"),gIr.forEach(t),SGe=r(PMe," (MegatronBert model)"),PMe.forEach(t),RGe=i(v),Dm=n(v,"LI",{});var $Me=s(Dm);iK=n($Me,"STRONG",{});var hIr=s(iK);BGe=r(hIr,"mobilebert"),hIr.forEach(t),PGe=r($Me," \u2014 "),bx=n($Me,"A",{href:!0});var pIr=s(bx);$Ge=r(pIr,"MobileBertConfig"),pIr.forEach(t),IGe=r($Me," (MobileBERT model)"),$Me.forEach(t),qGe=i(v),Gm=n(v,"LI",{});var IMe=s(Gm);dK=n(IMe,"STRONG",{});var _Ir=s(dK);NGe=r(_Ir,"mpnet"),_Ir.forEach(t),jGe=r(IMe," \u2014 "),Fx=n(IMe,"A",{href:!0});var uIr=s(Fx);DGe=r(uIr,"MPNetConfig"),uIr.forEach(t),GGe=r(IMe," (MPNet model)"),IMe.forEach(t),OGe=i(v),Om=n(v,"LI",{});var qMe=s(Om);cK=n(qMe,"STRONG",{});var bIr=s(cK);VGe=r(bIr,"mt5"),bIr.forEach(t),XGe=r(qMe," \u2014 "),vx=n(qMe,"A",{href:!0});var FIr=s(vx);zGe=r(FIr,"MT5Config"),FIr.forEach(t),QGe=r(qMe," (mT5 model)"),qMe.forEach(t),WGe=i(v),Vm=n(v,"LI",{});var NMe=s(Vm);fK=n(NMe,"STRONG",{});var vIr=s(fK);HGe=r(vIr,"nystromformer"),vIr.forEach(t),UGe=r(NMe," \u2014 "),Tx=n(NMe,"A",{href:!0});var TIr=s(Tx);JGe=r(TIr,"NystromformerConfig"),TIr.forEach(t),YGe=r(NMe," (Nystromformer model)"),NMe.forEach(t),KGe=i(v),Xm=n(v,"LI",{});var jMe=s(Xm);mK=n(jMe,"STRONG",{});var MIr=s(mK);ZGe=r(MIr,"openai-gpt"),MIr.forEach(t),eOe=r(jMe," \u2014 "),Mx=n(jMe,"A",{href:!0});var EIr=s(Mx);oOe=r(EIr,"OpenAIGPTConfig"),EIr.forEach(t),rOe=r(jMe," (OpenAI GPT model)"),jMe.forEach(t),tOe=i(v),zm=n(v,"LI",{});var DMe=s(zm);gK=n(DMe,"STRONG",{});var CIr=s(gK);aOe=r(CIr,"pegasus"),CIr.forEach(t),nOe=r(DMe," \u2014 "),Ex=n(DMe,"A",{href:!0});var wIr=s(Ex);sOe=r(wIr,"PegasusConfig"),wIr.forEach(t),lOe=r(DMe," (Pegasus model)"),DMe.forEach(t),iOe=i(v),Qm=n(v,"LI",{});var GMe=s(Qm);hK=n(GMe,"STRONG",{});var AIr=s(hK);dOe=r(AIr,"perceiver"),AIr.forEach(t),cOe=r(GMe," \u2014 "),Cx=n(GMe,"A",{href:!0});var yIr=s(Cx);fOe=r(yIr,"PerceiverConfig"),yIr.forEach(t),mOe=r(GMe," (Perceiver model)"),GMe.forEach(t),gOe=i(v),Wm=n(v,"LI",{});var OMe=s(Wm);pK=n(OMe,"STRONG",{});var LIr=s(pK);hOe=r(LIr,"plbart"),LIr.forEach(t),pOe=r(OMe," \u2014 "),wx=n(OMe,"A",{href:!0});var xIr=s(wx);_Oe=r(xIr,"PLBartConfig"),xIr.forEach(t),uOe=r(OMe," (PLBart model)"),OMe.forEach(t),bOe=i(v),Hm=n(v,"LI",{});var VMe=s(Hm);_K=n(VMe,"STRONG",{});var kIr=s(_K);FOe=r(kIr,"poolformer"),kIr.forEach(t),vOe=r(VMe," \u2014 "),Ax=n(VMe,"A",{href:!0});var SIr=s(Ax);TOe=r(SIr,"PoolFormerConfig"),SIr.forEach(t),MOe=r(VMe," (PoolFormer model)"),VMe.forEach(t),EOe=i(v),Um=n(v,"LI",{});var XMe=s(Um);uK=n(XMe,"STRONG",{});var RIr=s(uK);COe=r(RIr,"prophetnet"),RIr.forEach(t),wOe=r(XMe," \u2014 "),yx=n(XMe,"A",{href:!0});var BIr=s(yx);AOe=r(BIr,"ProphetNetConfig"),BIr.forEach(t),yOe=r(XMe," (ProphetNet model)"),XMe.forEach(t),LOe=i(v),Jm=n(v,"LI",{});var zMe=s(Jm);bK=n(zMe,"STRONG",{});var PIr=s(bK);xOe=r(PIr,"qdqbert"),PIr.forEach(t),kOe=r(zMe," \u2014 "),Lx=n(zMe,"A",{href:!0});var $Ir=s(Lx);SOe=r($Ir,"QDQBertConfig"),$Ir.forEach(t),ROe=r(zMe," (QDQBert model)"),zMe.forEach(t),BOe=i(v),Ym=n(v,"LI",{});var QMe=s(Ym);FK=n(QMe,"STRONG",{});var IIr=s(FK);POe=r(IIr,"rag"),IIr.forEach(t),$Oe=r(QMe," \u2014 "),xx=n(QMe,"A",{href:!0});var qIr=s(xx);IOe=r(qIr,"RagConfig"),qIr.forEach(t),qOe=r(QMe," (RAG model)"),QMe.forEach(t),NOe=i(v),Km=n(v,"LI",{});var WMe=s(Km);vK=n(WMe,"STRONG",{});var NIr=s(vK);jOe=r(NIr,"realm"),NIr.forEach(t),DOe=r(WMe," \u2014 "),kx=n(WMe,"A",{href:!0});var jIr=s(kx);GOe=r(jIr,"RealmConfig"),jIr.forEach(t),OOe=r(WMe," (Realm model)"),WMe.forEach(t),VOe=i(v),Zm=n(v,"LI",{});var HMe=s(Zm);TK=n(HMe,"STRONG",{});var DIr=s(TK);XOe=r(DIr,"reformer"),DIr.forEach(t),zOe=r(HMe," \u2014 "),Sx=n(HMe,"A",{href:!0});var GIr=s(Sx);QOe=r(GIr,"ReformerConfig"),GIr.forEach(t),WOe=r(HMe," (Reformer model)"),HMe.forEach(t),HOe=i(v),eg=n(v,"LI",{});var UMe=s(eg);MK=n(UMe,"STRONG",{});var OIr=s(MK);UOe=r(OIr,"regnet"),OIr.forEach(t),JOe=r(UMe," \u2014 "),Rx=n(UMe,"A",{href:!0});var VIr=s(Rx);YOe=r(VIr,"RegNetConfig"),VIr.forEach(t),KOe=r(UMe," (RegNet model)"),UMe.forEach(t),ZOe=i(v),og=n(v,"LI",{});var JMe=s(og);EK=n(JMe,"STRONG",{});var XIr=s(EK);eVe=r(XIr,"rembert"),XIr.forEach(t),oVe=r(JMe," \u2014 "),Bx=n(JMe,"A",{href:!0});var zIr=s(Bx);rVe=r(zIr,"RemBertConfig"),zIr.forEach(t),tVe=r(JMe," (RemBERT model)"),JMe.forEach(t),aVe=i(v),rg=n(v,"LI",{});var YMe=s(rg);CK=n(YMe,"STRONG",{});var QIr=s(CK);nVe=r(QIr,"resnet"),QIr.forEach(t),sVe=r(YMe," \u2014 "),Px=n(YMe,"A",{href:!0});var WIr=s(Px);lVe=r(WIr,"ResNetConfig"),WIr.forEach(t),iVe=r(YMe," (ResNet model)"),YMe.forEach(t),dVe=i(v),tg=n(v,"LI",{});var KMe=s(tg);wK=n(KMe,"STRONG",{});var HIr=s(wK);cVe=r(HIr,"retribert"),HIr.forEach(t),fVe=r(KMe," \u2014 "),$x=n(KMe,"A",{href:!0});var UIr=s($x);mVe=r(UIr,"RetriBertConfig"),UIr.forEach(t),gVe=r(KMe," (RetriBERT model)"),KMe.forEach(t),hVe=i(v),ag=n(v,"LI",{});var ZMe=s(ag);AK=n(ZMe,"STRONG",{});var JIr=s(AK);pVe=r(JIr,"roberta"),JIr.forEach(t),_Ve=r(ZMe," \u2014 "),Ix=n(ZMe,"A",{href:!0});var YIr=s(Ix);uVe=r(YIr,"RobertaConfig"),YIr.forEach(t),bVe=r(ZMe," (RoBERTa model)"),ZMe.forEach(t),FVe=i(v),ng=n(v,"LI",{});var e4e=s(ng);yK=n(e4e,"STRONG",{});var KIr=s(yK);vVe=r(KIr,"roformer"),KIr.forEach(t),TVe=r(e4e," \u2014 "),qx=n(e4e,"A",{href:!0});var ZIr=s(qx);MVe=r(ZIr,"RoFormerConfig"),ZIr.forEach(t),EVe=r(e4e," (RoFormer model)"),e4e.forEach(t),CVe=i(v),sg=n(v,"LI",{});var o4e=s(sg);LK=n(o4e,"STRONG",{});var eqr=s(LK);wVe=r(eqr,"segformer"),eqr.forEach(t),AVe=r(o4e," \u2014 "),Nx=n(o4e,"A",{href:!0});var oqr=s(Nx);yVe=r(oqr,"SegformerConfig"),oqr.forEach(t),LVe=r(o4e," (SegFormer model)"),o4e.forEach(t),xVe=i(v),lg=n(v,"LI",{});var r4e=s(lg);xK=n(r4e,"STRONG",{});var rqr=s(xK);kVe=r(rqr,"sew"),rqr.forEach(t),SVe=r(r4e," \u2014 "),jx=n(r4e,"A",{href:!0});var tqr=s(jx);RVe=r(tqr,"SEWConfig"),tqr.forEach(t),BVe=r(r4e," (SEW model)"),r4e.forEach(t),PVe=i(v),ig=n(v,"LI",{});var t4e=s(ig);kK=n(t4e,"STRONG",{});var aqr=s(kK);$Ve=r(aqr,"sew-d"),aqr.forEach(t),IVe=r(t4e," \u2014 "),Dx=n(t4e,"A",{href:!0});var nqr=s(Dx);qVe=r(nqr,"SEWDConfig"),nqr.forEach(t),NVe=r(t4e," (SEW-D model)"),t4e.forEach(t),jVe=i(v),dg=n(v,"LI",{});var a4e=s(dg);SK=n(a4e,"STRONG",{});var sqr=s(SK);DVe=r(sqr,"speech-encoder-decoder"),sqr.forEach(t),GVe=r(a4e," \u2014 "),Gx=n(a4e,"A",{href:!0});var lqr=s(Gx);OVe=r(lqr,"SpeechEncoderDecoderConfig"),lqr.forEach(t),VVe=r(a4e," (Speech Encoder decoder model)"),a4e.forEach(t),XVe=i(v),cg=n(v,"LI",{});var n4e=s(cg);RK=n(n4e,"STRONG",{});var iqr=s(RK);zVe=r(iqr,"speech_to_text"),iqr.forEach(t),QVe=r(n4e," \u2014 "),Ox=n(n4e,"A",{href:!0});var dqr=s(Ox);WVe=r(dqr,"Speech2TextConfig"),dqr.forEach(t),HVe=r(n4e," (Speech2Text model)"),n4e.forEach(t),UVe=i(v),fg=n(v,"LI",{});var s4e=s(fg);BK=n(s4e,"STRONG",{});var cqr=s(BK);JVe=r(cqr,"speech_to_text_2"),cqr.forEach(t),YVe=r(s4e," \u2014 "),Vx=n(s4e,"A",{href:!0});var fqr=s(Vx);KVe=r(fqr,"Speech2Text2Config"),fqr.forEach(t),ZVe=r(s4e," (Speech2Text2 model)"),s4e.forEach(t),eXe=i(v),mg=n(v,"LI",{});var l4e=s(mg);PK=n(l4e,"STRONG",{});var mqr=s(PK);oXe=r(mqr,"splinter"),mqr.forEach(t),rXe=r(l4e," \u2014 "),Xx=n(l4e,"A",{href:!0});var gqr=s(Xx);tXe=r(gqr,"SplinterConfig"),gqr.forEach(t),aXe=r(l4e," (Splinter model)"),l4e.forEach(t),nXe=i(v),gg=n(v,"LI",{});var i4e=s(gg);$K=n(i4e,"STRONG",{});var hqr=s($K);sXe=r(hqr,"squeezebert"),hqr.forEach(t),lXe=r(i4e," \u2014 "),zx=n(i4e,"A",{href:!0});var pqr=s(zx);iXe=r(pqr,"SqueezeBertConfig"),pqr.forEach(t),dXe=r(i4e," (SqueezeBERT model)"),i4e.forEach(t),cXe=i(v),hg=n(v,"LI",{});var d4e=s(hg);IK=n(d4e,"STRONG",{});var _qr=s(IK);fXe=r(_qr,"swin"),_qr.forEach(t),mXe=r(d4e," \u2014 "),Qx=n(d4e,"A",{href:!0});var uqr=s(Qx);gXe=r(uqr,"SwinConfig"),uqr.forEach(t),hXe=r(d4e," (Swin model)"),d4e.forEach(t),pXe=i(v),pg=n(v,"LI",{});var c4e=s(pg);qK=n(c4e,"STRONG",{});var bqr=s(qK);_Xe=r(bqr,"t5"),bqr.forEach(t),uXe=r(c4e," \u2014 "),Wx=n(c4e,"A",{href:!0});var Fqr=s(Wx);bXe=r(Fqr,"T5Config"),Fqr.forEach(t),FXe=r(c4e," (T5 model)"),c4e.forEach(t),vXe=i(v),_g=n(v,"LI",{});var f4e=s(_g);NK=n(f4e,"STRONG",{});var vqr=s(NK);TXe=r(vqr,"tapas"),vqr.forEach(t),MXe=r(f4e," \u2014 "),Hx=n(f4e,"A",{href:!0});var Tqr=s(Hx);EXe=r(Tqr,"TapasConfig"),Tqr.forEach(t),CXe=r(f4e," (TAPAS model)"),f4e.forEach(t),wXe=i(v),ug=n(v,"LI",{});var m4e=s(ug);jK=n(m4e,"STRONG",{});var Mqr=s(jK);AXe=r(Mqr,"tapex"),Mqr.forEach(t),yXe=r(m4e," \u2014 "),Ux=n(m4e,"A",{href:!0});var Eqr=s(Ux);LXe=r(Eqr,"BartConfig"),Eqr.forEach(t),xXe=r(m4e," (TAPEX model)"),m4e.forEach(t),kXe=i(v),bg=n(v,"LI",{});var g4e=s(bg);DK=n(g4e,"STRONG",{});var Cqr=s(DK);SXe=r(Cqr,"transfo-xl"),Cqr.forEach(t),RXe=r(g4e," \u2014 "),Jx=n(g4e,"A",{href:!0});var wqr=s(Jx);BXe=r(wqr,"TransfoXLConfig"),wqr.forEach(t),PXe=r(g4e," (Transformer-XL model)"),g4e.forEach(t),$Xe=i(v),Fg=n(v,"LI",{});var h4e=s(Fg);GK=n(h4e,"STRONG",{});var Aqr=s(GK);IXe=r(Aqr,"trocr"),Aqr.forEach(t),qXe=r(h4e," \u2014 "),Yx=n(h4e,"A",{href:!0});var yqr=s(Yx);NXe=r(yqr,"TrOCRConfig"),yqr.forEach(t),jXe=r(h4e," (TrOCR model)"),h4e.forEach(t),DXe=i(v),vg=n(v,"LI",{});var p4e=s(vg);OK=n(p4e,"STRONG",{});var Lqr=s(OK);GXe=r(Lqr,"unispeech"),Lqr.forEach(t),OXe=r(p4e," \u2014 "),Kx=n(p4e,"A",{href:!0});var xqr=s(Kx);VXe=r(xqr,"UniSpeechConfig"),xqr.forEach(t),XXe=r(p4e," (UniSpeech model)"),p4e.forEach(t),zXe=i(v),Tg=n(v,"LI",{});var _4e=s(Tg);VK=n(_4e,"STRONG",{});var kqr=s(VK);QXe=r(kqr,"unispeech-sat"),kqr.forEach(t),WXe=r(_4e," \u2014 "),Zx=n(_4e,"A",{href:!0});var Sqr=s(Zx);HXe=r(Sqr,"UniSpeechSatConfig"),Sqr.forEach(t),UXe=r(_4e," (UniSpeechSat model)"),_4e.forEach(t),JXe=i(v),Mg=n(v,"LI",{});var u4e=s(Mg);XK=n(u4e,"STRONG",{});var Rqr=s(XK);YXe=r(Rqr,"van"),Rqr.forEach(t),KXe=r(u4e," \u2014 "),ek=n(u4e,"A",{href:!0});var Bqr=s(ek);ZXe=r(Bqr,"VanConfig"),Bqr.forEach(t),eze=r(u4e," (VAN model)"),u4e.forEach(t),oze=i(v),Eg=n(v,"LI",{});var b4e=s(Eg);zK=n(b4e,"STRONG",{});var Pqr=s(zK);rze=r(Pqr,"vilt"),Pqr.forEach(t),tze=r(b4e," \u2014 "),ok=n(b4e,"A",{href:!0});var $qr=s(ok);aze=r($qr,"ViltConfig"),$qr.forEach(t),nze=r(b4e," (ViLT model)"),b4e.forEach(t),sze=i(v),Cg=n(v,"LI",{});var F4e=s(Cg);QK=n(F4e,"STRONG",{});var Iqr=s(QK);lze=r(Iqr,"vision-encoder-decoder"),Iqr.forEach(t),ize=r(F4e," \u2014 "),rk=n(F4e,"A",{href:!0});var qqr=s(rk);dze=r(qqr,"VisionEncoderDecoderConfig"),qqr.forEach(t),cze=r(F4e," (Vision Encoder decoder model)"),F4e.forEach(t),fze=i(v),wg=n(v,"LI",{});var v4e=s(wg);WK=n(v4e,"STRONG",{});var Nqr=s(WK);mze=r(Nqr,"vision-text-dual-encoder"),Nqr.forEach(t),gze=r(v4e," \u2014 "),tk=n(v4e,"A",{href:!0});var jqr=s(tk);hze=r(jqr,"VisionTextDualEncoderConfig"),jqr.forEach(t),pze=r(v4e," (VisionTextDualEncoder model)"),v4e.forEach(t),_ze=i(v),Ag=n(v,"LI",{});var T4e=s(Ag);HK=n(T4e,"STRONG",{});var Dqr=s(HK);uze=r(Dqr,"visual_bert"),Dqr.forEach(t),bze=r(T4e," \u2014 "),ak=n(T4e,"A",{href:!0});var Gqr=s(ak);Fze=r(Gqr,"VisualBertConfig"),Gqr.forEach(t),vze=r(T4e," (VisualBert model)"),T4e.forEach(t),Tze=i(v),yg=n(v,"LI",{});var M4e=s(yg);UK=n(M4e,"STRONG",{});var Oqr=s(UK);Mze=r(Oqr,"vit"),Oqr.forEach(t),Eze=r(M4e," \u2014 "),nk=n(M4e,"A",{href:!0});var Vqr=s(nk);Cze=r(Vqr,"ViTConfig"),Vqr.forEach(t),wze=r(M4e," (ViT model)"),M4e.forEach(t),Aze=i(v),Lg=n(v,"LI",{});var E4e=s(Lg);JK=n(E4e,"STRONG",{});var Xqr=s(JK);yze=r(Xqr,"vit_mae"),Xqr.forEach(t),Lze=r(E4e," \u2014 "),sk=n(E4e,"A",{href:!0});var zqr=s(sk);xze=r(zqr,"ViTMAEConfig"),zqr.forEach(t),kze=r(E4e," (ViTMAE model)"),E4e.forEach(t),Sze=i(v),xg=n(v,"LI",{});var C4e=s(xg);YK=n(C4e,"STRONG",{});var Qqr=s(YK);Rze=r(Qqr,"wav2vec2"),Qqr.forEach(t),Bze=r(C4e," \u2014 "),lk=n(C4e,"A",{href:!0});var Wqr=s(lk);Pze=r(Wqr,"Wav2Vec2Config"),Wqr.forEach(t),$ze=r(C4e," (Wav2Vec2 model)"),C4e.forEach(t),Ize=i(v),kg=n(v,"LI",{});var w4e=s(kg);KK=n(w4e,"STRONG",{});var Hqr=s(KK);qze=r(Hqr,"wavlm"),Hqr.forEach(t),Nze=r(w4e," \u2014 "),ik=n(w4e,"A",{href:!0});var Uqr=s(ik);jze=r(Uqr,"WavLMConfig"),Uqr.forEach(t),Dze=r(w4e," (WavLM model)"),w4e.forEach(t),Gze=i(v),Sg=n(v,"LI",{});var A4e=s(Sg);ZK=n(A4e,"STRONG",{});var Jqr=s(ZK);Oze=r(Jqr,"xglm"),Jqr.forEach(t),Vze=r(A4e," \u2014 "),dk=n(A4e,"A",{href:!0});var Yqr=s(dk);Xze=r(Yqr,"XGLMConfig"),Yqr.forEach(t),zze=r(A4e," (XGLM model)"),A4e.forEach(t),Qze=i(v),Rg=n(v,"LI",{});var y4e=s(Rg);eZ=n(y4e,"STRONG",{});var Kqr=s(eZ);Wze=r(Kqr,"xlm"),Kqr.forEach(t),Hze=r(y4e," \u2014 "),ck=n(y4e,"A",{href:!0});var Zqr=s(ck);Uze=r(Zqr,"XLMConfig"),Zqr.forEach(t),Jze=r(y4e," (XLM model)"),y4e.forEach(t),Yze=i(v),Bg=n(v,"LI",{});var L4e=s(Bg);oZ=n(L4e,"STRONG",{});var eNr=s(oZ);Kze=r(eNr,"xlm-prophetnet"),eNr.forEach(t),Zze=r(L4e," \u2014 "),fk=n(L4e,"A",{href:!0});var oNr=s(fk);eQe=r(oNr,"XLMProphetNetConfig"),oNr.forEach(t),oQe=r(L4e," (XLMProphetNet model)"),L4e.forEach(t),rQe=i(v),Pg=n(v,"LI",{});var x4e=s(Pg);rZ=n(x4e,"STRONG",{});var rNr=s(rZ);tQe=r(rNr,"xlm-roberta"),rNr.forEach(t),aQe=r(x4e," \u2014 "),mk=n(x4e,"A",{href:!0});var tNr=s(mk);nQe=r(tNr,"XLMRobertaConfig"),tNr.forEach(t),sQe=r(x4e," (XLM-RoBERTa model)"),x4e.forEach(t),lQe=i(v),$g=n(v,"LI",{});var k4e=s($g);tZ=n(k4e,"STRONG",{});var aNr=s(tZ);iQe=r(aNr,"xlm-roberta-xl"),aNr.forEach(t),dQe=r(k4e," \u2014 "),gk=n(k4e,"A",{href:!0});var nNr=s(gk);cQe=r(nNr,"XLMRobertaXLConfig"),nNr.forEach(t),fQe=r(k4e," (XLM-RoBERTa-XL model)"),k4e.forEach(t),mQe=i(v),Ig=n(v,"LI",{});var S4e=s(Ig);aZ=n(S4e,"STRONG",{});var sNr=s(aZ);gQe=r(sNr,"xlnet"),sNr.forEach(t),hQe=r(S4e," \u2014 "),hk=n(S4e,"A",{href:!0});var lNr=s(hk);pQe=r(lNr,"XLNetConfig"),lNr.forEach(t),_Qe=r(S4e," (XLNet model)"),S4e.forEach(t),uQe=i(v),qg=n(v,"LI",{});var R4e=s(qg);nZ=n(R4e,"STRONG",{});var iNr=s(nZ);bQe=r(iNr,"yoso"),iNr.forEach(t),FQe=r(R4e," \u2014 "),pk=n(R4e,"A",{href:!0});var dNr=s(pk);vQe=r(dNr,"YosoConfig"),dNr.forEach(t),TQe=r(R4e," (YOSO model)"),R4e.forEach(t),v.forEach(t),MQe=i(ga),sZ=n(ga,"P",{});var cNr=s(sZ);EQe=r(cNr,"Examples:"),cNr.forEach(t),CQe=i(ga),m(PC.$$.fragment,ga),ga.forEach(t),wQe=i(Vs),Ng=n(Vs,"DIV",{class:!0});var wPe=s(Ng);m($C.$$.fragment,wPe),AQe=i(wPe),lZ=n(wPe,"P",{});var fNr=s(lZ);yQe=r(fNr,"Register a new configuration for this class."),fNr.forEach(t),wPe.forEach(t),Vs.forEach(t),ERe=i(c),Wi=n(c,"H2",{class:!0});var APe=s(Wi);jg=n(APe,"A",{id:!0,class:!0,href:!0});var mNr=s(jg);iZ=n(mNr,"SPAN",{});var gNr=s(iZ);m(IC.$$.fragment,gNr),gNr.forEach(t),mNr.forEach(t),LQe=i(APe),dZ=n(APe,"SPAN",{});var hNr=s(dZ);xQe=r(hNr,"AutoTokenizer"),hNr.forEach(t),APe.forEach(t),CRe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(qC.$$.fragment,Xs),kQe=i(Xs),NC=n(Xs,"P",{});var yPe=s(NC);SQe=r(yPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_k=n(yPe,"A",{href:!0});var pNr=s(_k);RQe=r(pNr,"AutoTokenizer.from_pretrained()"),pNr.forEach(t),BQe=r(yPe," class method."),yPe.forEach(t),PQe=i(Xs),jC=n(Xs,"P",{});var LPe=s(jC);$Qe=r(LPe,"This class cannot be instantiated directly using "),cZ=n(LPe,"CODE",{});var _Nr=s(cZ);IQe=r(_Nr,"__init__()"),_Nr.forEach(t),qQe=r(LPe," (throws an error)."),LPe.forEach(t),NQe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(DC.$$.fragment,ha),jQe=i(ha),fZ=n(ha,"P",{});var uNr=s(fZ);DQe=r(uNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uNr.forEach(t),GQe=i(ha),Oa=n(ha,"P",{});var w3=s(Oa);OQe=r(w3,"The tokenizer class to instantiate is selected based on the "),mZ=n(w3,"CODE",{});var bNr=s(mZ);VQe=r(bNr,"model_type"),bNr.forEach(t),XQe=r(w3,` property of the config object (either
passed as an argument or loaded from `),gZ=n(w3,"CODE",{});var FNr=s(gZ);zQe=r(FNr,"pretrained_model_name_or_path"),FNr.forEach(t),QQe=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hZ=n(w3,"CODE",{});var vNr=s(hZ);WQe=r(vNr,"pretrained_model_name_or_path"),vNr.forEach(t),HQe=r(w3,":"),w3.forEach(t),UQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var FL=s(Qn);pZ=n(FL,"STRONG",{});var TNr=s(pZ);JQe=r(TNr,"albert"),TNr.forEach(t),YQe=r(FL," \u2014 "),uk=n(FL,"A",{href:!0});var MNr=s(uk);KQe=r(MNr,"AlbertTokenizer"),MNr.forEach(t),ZQe=r(FL," or "),bk=n(FL,"A",{href:!0});var ENr=s(bk);eWe=r(ENr,"AlbertTokenizerFast"),ENr.forEach(t),oWe=r(FL," (ALBERT model)"),FL.forEach(t),rWe=i(w),Wn=n(w,"LI",{});var vL=s(Wn);_Z=n(vL,"STRONG",{});var CNr=s(_Z);tWe=r(CNr,"bart"),CNr.forEach(t),aWe=r(vL," \u2014 "),Fk=n(vL,"A",{href:!0});var wNr=s(Fk);nWe=r(wNr,"BartTokenizer"),wNr.forEach(t),sWe=r(vL," or "),vk=n(vL,"A",{href:!0});var ANr=s(vk);lWe=r(ANr,"BartTokenizerFast"),ANr.forEach(t),iWe=r(vL," (BART model)"),vL.forEach(t),dWe=i(w),Hn=n(w,"LI",{});var TL=s(Hn);uZ=n(TL,"STRONG",{});var yNr=s(uZ);cWe=r(yNr,"barthez"),yNr.forEach(t),fWe=r(TL," \u2014 "),Tk=n(TL,"A",{href:!0});var LNr=s(Tk);mWe=r(LNr,"BarthezTokenizer"),LNr.forEach(t),gWe=r(TL," or "),Mk=n(TL,"A",{href:!0});var xNr=s(Mk);hWe=r(xNr,"BarthezTokenizerFast"),xNr.forEach(t),pWe=r(TL," (BARThez model)"),TL.forEach(t),_We=i(w),Dg=n(w,"LI",{});var B4e=s(Dg);bZ=n(B4e,"STRONG",{});var kNr=s(bZ);uWe=r(kNr,"bartpho"),kNr.forEach(t),bWe=r(B4e," \u2014 "),Ek=n(B4e,"A",{href:!0});var SNr=s(Ek);FWe=r(SNr,"BartphoTokenizer"),SNr.forEach(t),vWe=r(B4e," (BARTpho model)"),B4e.forEach(t),TWe=i(w),Un=n(w,"LI",{});var ML=s(Un);FZ=n(ML,"STRONG",{});var RNr=s(FZ);MWe=r(RNr,"bert"),RNr.forEach(t),EWe=r(ML," \u2014 "),Ck=n(ML,"A",{href:!0});var BNr=s(Ck);CWe=r(BNr,"BertTokenizer"),BNr.forEach(t),wWe=r(ML," or "),wk=n(ML,"A",{href:!0});var PNr=s(wk);AWe=r(PNr,"BertTokenizerFast"),PNr.forEach(t),yWe=r(ML," (BERT model)"),ML.forEach(t),LWe=i(w),Gg=n(w,"LI",{});var P4e=s(Gg);vZ=n(P4e,"STRONG",{});var $Nr=s(vZ);xWe=r($Nr,"bert-generation"),$Nr.forEach(t),kWe=r(P4e," \u2014 "),Ak=n(P4e,"A",{href:!0});var INr=s(Ak);SWe=r(INr,"BertGenerationTokenizer"),INr.forEach(t),RWe=r(P4e," (Bert Generation model)"),P4e.forEach(t),BWe=i(w),Og=n(w,"LI",{});var $4e=s(Og);TZ=n($4e,"STRONG",{});var qNr=s(TZ);PWe=r(qNr,"bert-japanese"),qNr.forEach(t),$We=r($4e," \u2014 "),yk=n($4e,"A",{href:!0});var NNr=s(yk);IWe=r(NNr,"BertJapaneseTokenizer"),NNr.forEach(t),qWe=r($4e," (BertJapanese model)"),$4e.forEach(t),NWe=i(w),Vg=n(w,"LI",{});var I4e=s(Vg);MZ=n(I4e,"STRONG",{});var jNr=s(MZ);jWe=r(jNr,"bertweet"),jNr.forEach(t),DWe=r(I4e," \u2014 "),Lk=n(I4e,"A",{href:!0});var DNr=s(Lk);GWe=r(DNr,"BertweetTokenizer"),DNr.forEach(t),OWe=r(I4e," (Bertweet model)"),I4e.forEach(t),VWe=i(w),Jn=n(w,"LI",{});var EL=s(Jn);EZ=n(EL,"STRONG",{});var GNr=s(EZ);XWe=r(GNr,"big_bird"),GNr.forEach(t),zWe=r(EL," \u2014 "),xk=n(EL,"A",{href:!0});var ONr=s(xk);QWe=r(ONr,"BigBirdTokenizer"),ONr.forEach(t),WWe=r(EL," or "),kk=n(EL,"A",{href:!0});var VNr=s(kk);HWe=r(VNr,"BigBirdTokenizerFast"),VNr.forEach(t),UWe=r(EL," (BigBird model)"),EL.forEach(t),JWe=i(w),Yn=n(w,"LI",{});var CL=s(Yn);CZ=n(CL,"STRONG",{});var XNr=s(CZ);YWe=r(XNr,"bigbird_pegasus"),XNr.forEach(t),KWe=r(CL," \u2014 "),Sk=n(CL,"A",{href:!0});var zNr=s(Sk);ZWe=r(zNr,"PegasusTokenizer"),zNr.forEach(t),eHe=r(CL," or "),Rk=n(CL,"A",{href:!0});var QNr=s(Rk);oHe=r(QNr,"PegasusTokenizerFast"),QNr.forEach(t),rHe=r(CL," (BigBirdPegasus model)"),CL.forEach(t),tHe=i(w),Kn=n(w,"LI",{});var wL=s(Kn);wZ=n(wL,"STRONG",{});var WNr=s(wZ);aHe=r(WNr,"blenderbot"),WNr.forEach(t),nHe=r(wL," \u2014 "),Bk=n(wL,"A",{href:!0});var HNr=s(Bk);sHe=r(HNr,"BlenderbotTokenizer"),HNr.forEach(t),lHe=r(wL," or "),Pk=n(wL,"A",{href:!0});var UNr=s(Pk);iHe=r(UNr,"BlenderbotTokenizerFast"),UNr.forEach(t),dHe=r(wL," (Blenderbot model)"),wL.forEach(t),cHe=i(w),Xg=n(w,"LI",{});var q4e=s(Xg);AZ=n(q4e,"STRONG",{});var JNr=s(AZ);fHe=r(JNr,"blenderbot-small"),JNr.forEach(t),mHe=r(q4e," \u2014 "),$k=n(q4e,"A",{href:!0});var YNr=s($k);gHe=r(YNr,"BlenderbotSmallTokenizer"),YNr.forEach(t),hHe=r(q4e," (BlenderbotSmall model)"),q4e.forEach(t),pHe=i(w),zg=n(w,"LI",{});var N4e=s(zg);yZ=n(N4e,"STRONG",{});var KNr=s(yZ);_He=r(KNr,"byt5"),KNr.forEach(t),uHe=r(N4e," \u2014 "),Ik=n(N4e,"A",{href:!0});var ZNr=s(Ik);bHe=r(ZNr,"ByT5Tokenizer"),ZNr.forEach(t),FHe=r(N4e," (ByT5 model)"),N4e.forEach(t),vHe=i(w),Zn=n(w,"LI",{});var AL=s(Zn);LZ=n(AL,"STRONG",{});var ejr=s(LZ);THe=r(ejr,"camembert"),ejr.forEach(t),MHe=r(AL," \u2014 "),qk=n(AL,"A",{href:!0});var ojr=s(qk);EHe=r(ojr,"CamembertTokenizer"),ojr.forEach(t),CHe=r(AL," or "),Nk=n(AL,"A",{href:!0});var rjr=s(Nk);wHe=r(rjr,"CamembertTokenizerFast"),rjr.forEach(t),AHe=r(AL," (CamemBERT model)"),AL.forEach(t),yHe=i(w),Qg=n(w,"LI",{});var j4e=s(Qg);xZ=n(j4e,"STRONG",{});var tjr=s(xZ);LHe=r(tjr,"canine"),tjr.forEach(t),xHe=r(j4e," \u2014 "),jk=n(j4e,"A",{href:!0});var ajr=s(jk);kHe=r(ajr,"CanineTokenizer"),ajr.forEach(t),SHe=r(j4e," (Canine model)"),j4e.forEach(t),RHe=i(w),es=n(w,"LI",{});var yL=s(es);kZ=n(yL,"STRONG",{});var njr=s(kZ);BHe=r(njr,"clip"),njr.forEach(t),PHe=r(yL," \u2014 "),Dk=n(yL,"A",{href:!0});var sjr=s(Dk);$He=r(sjr,"CLIPTokenizer"),sjr.forEach(t),IHe=r(yL," or "),Gk=n(yL,"A",{href:!0});var ljr=s(Gk);qHe=r(ljr,"CLIPTokenizerFast"),ljr.forEach(t),NHe=r(yL," (CLIP model)"),yL.forEach(t),jHe=i(w),os=n(w,"LI",{});var LL=s(os);SZ=n(LL,"STRONG",{});var ijr=s(SZ);DHe=r(ijr,"convbert"),ijr.forEach(t),GHe=r(LL," \u2014 "),Ok=n(LL,"A",{href:!0});var djr=s(Ok);OHe=r(djr,"ConvBertTokenizer"),djr.forEach(t),VHe=r(LL," or "),Vk=n(LL,"A",{href:!0});var cjr=s(Vk);XHe=r(cjr,"ConvBertTokenizerFast"),cjr.forEach(t),zHe=r(LL," (ConvBERT model)"),LL.forEach(t),QHe=i(w),rs=n(w,"LI",{});var xL=s(rs);RZ=n(xL,"STRONG",{});var fjr=s(RZ);WHe=r(fjr,"cpm"),fjr.forEach(t),HHe=r(xL," \u2014 "),Xk=n(xL,"A",{href:!0});var mjr=s(Xk);UHe=r(mjr,"CpmTokenizer"),mjr.forEach(t),JHe=r(xL," or "),BZ=n(xL,"CODE",{});var gjr=s(BZ);YHe=r(gjr,"CpmTokenizerFast"),gjr.forEach(t),KHe=r(xL," (CPM model)"),xL.forEach(t),ZHe=i(w),Wg=n(w,"LI",{});var D4e=s(Wg);PZ=n(D4e,"STRONG",{});var hjr=s(PZ);eUe=r(hjr,"ctrl"),hjr.forEach(t),oUe=r(D4e," \u2014 "),zk=n(D4e,"A",{href:!0});var pjr=s(zk);rUe=r(pjr,"CTRLTokenizer"),pjr.forEach(t),tUe=r(D4e," (CTRL model)"),D4e.forEach(t),aUe=i(w),ts=n(w,"LI",{});var kL=s(ts);$Z=n(kL,"STRONG",{});var _jr=s($Z);nUe=r(_jr,"deberta"),_jr.forEach(t),sUe=r(kL," \u2014 "),Qk=n(kL,"A",{href:!0});var ujr=s(Qk);lUe=r(ujr,"DebertaTokenizer"),ujr.forEach(t),iUe=r(kL," or "),Wk=n(kL,"A",{href:!0});var bjr=s(Wk);dUe=r(bjr,"DebertaTokenizerFast"),bjr.forEach(t),cUe=r(kL," (DeBERTa model)"),kL.forEach(t),fUe=i(w),as=n(w,"LI",{});var SL=s(as);IZ=n(SL,"STRONG",{});var Fjr=s(IZ);mUe=r(Fjr,"deberta-v2"),Fjr.forEach(t),gUe=r(SL," \u2014 "),Hk=n(SL,"A",{href:!0});var vjr=s(Hk);hUe=r(vjr,"DebertaV2Tokenizer"),vjr.forEach(t),pUe=r(SL," or "),Uk=n(SL,"A",{href:!0});var Tjr=s(Uk);_Ue=r(Tjr,"DebertaV2TokenizerFast"),Tjr.forEach(t),uUe=r(SL," (DeBERTa-v2 model)"),SL.forEach(t),bUe=i(w),ns=n(w,"LI",{});var RL=s(ns);qZ=n(RL,"STRONG",{});var Mjr=s(qZ);FUe=r(Mjr,"distilbert"),Mjr.forEach(t),vUe=r(RL," \u2014 "),Jk=n(RL,"A",{href:!0});var Ejr=s(Jk);TUe=r(Ejr,"DistilBertTokenizer"),Ejr.forEach(t),MUe=r(RL," or "),Yk=n(RL,"A",{href:!0});var Cjr=s(Yk);EUe=r(Cjr,"DistilBertTokenizerFast"),Cjr.forEach(t),CUe=r(RL," (DistilBERT model)"),RL.forEach(t),wUe=i(w),ss=n(w,"LI",{});var BL=s(ss);NZ=n(BL,"STRONG",{});var wjr=s(NZ);AUe=r(wjr,"dpr"),wjr.forEach(t),yUe=r(BL," \u2014 "),Kk=n(BL,"A",{href:!0});var Ajr=s(Kk);LUe=r(Ajr,"DPRQuestionEncoderTokenizer"),Ajr.forEach(t),xUe=r(BL," or "),Zk=n(BL,"A",{href:!0});var yjr=s(Zk);kUe=r(yjr,"DPRQuestionEncoderTokenizerFast"),yjr.forEach(t),SUe=r(BL," (DPR model)"),BL.forEach(t),RUe=i(w),ls=n(w,"LI",{});var PL=s(ls);jZ=n(PL,"STRONG",{});var Ljr=s(jZ);BUe=r(Ljr,"electra"),Ljr.forEach(t),PUe=r(PL," \u2014 "),eS=n(PL,"A",{href:!0});var xjr=s(eS);$Ue=r(xjr,"ElectraTokenizer"),xjr.forEach(t),IUe=r(PL," or "),oS=n(PL,"A",{href:!0});var kjr=s(oS);qUe=r(kjr,"ElectraTokenizerFast"),kjr.forEach(t),NUe=r(PL," (ELECTRA model)"),PL.forEach(t),jUe=i(w),Hg=n(w,"LI",{});var G4e=s(Hg);DZ=n(G4e,"STRONG",{});var Sjr=s(DZ);DUe=r(Sjr,"flaubert"),Sjr.forEach(t),GUe=r(G4e," \u2014 "),rS=n(G4e,"A",{href:!0});var Rjr=s(rS);OUe=r(Rjr,"FlaubertTokenizer"),Rjr.forEach(t),VUe=r(G4e," (FlauBERT model)"),G4e.forEach(t),XUe=i(w),is=n(w,"LI",{});var $L=s(is);GZ=n($L,"STRONG",{});var Bjr=s(GZ);zUe=r(Bjr,"fnet"),Bjr.forEach(t),QUe=r($L," \u2014 "),tS=n($L,"A",{href:!0});var Pjr=s(tS);WUe=r(Pjr,"FNetTokenizer"),Pjr.forEach(t),HUe=r($L," or "),aS=n($L,"A",{href:!0});var $jr=s(aS);UUe=r($jr,"FNetTokenizerFast"),$jr.forEach(t),JUe=r($L," (FNet model)"),$L.forEach(t),YUe=i(w),Ug=n(w,"LI",{});var O4e=s(Ug);OZ=n(O4e,"STRONG",{});var Ijr=s(OZ);KUe=r(Ijr,"fsmt"),Ijr.forEach(t),ZUe=r(O4e," \u2014 "),nS=n(O4e,"A",{href:!0});var qjr=s(nS);eJe=r(qjr,"FSMTTokenizer"),qjr.forEach(t),oJe=r(O4e," (FairSeq Machine-Translation model)"),O4e.forEach(t),rJe=i(w),ds=n(w,"LI",{});var IL=s(ds);VZ=n(IL,"STRONG",{});var Njr=s(VZ);tJe=r(Njr,"funnel"),Njr.forEach(t),aJe=r(IL," \u2014 "),sS=n(IL,"A",{href:!0});var jjr=s(sS);nJe=r(jjr,"FunnelTokenizer"),jjr.forEach(t),sJe=r(IL," or "),lS=n(IL,"A",{href:!0});var Djr=s(lS);lJe=r(Djr,"FunnelTokenizerFast"),Djr.forEach(t),iJe=r(IL," (Funnel Transformer model)"),IL.forEach(t),dJe=i(w),cs=n(w,"LI",{});var qL=s(cs);XZ=n(qL,"STRONG",{});var Gjr=s(XZ);cJe=r(Gjr,"gpt2"),Gjr.forEach(t),fJe=r(qL," \u2014 "),iS=n(qL,"A",{href:!0});var Ojr=s(iS);mJe=r(Ojr,"GPT2Tokenizer"),Ojr.forEach(t),gJe=r(qL," or "),dS=n(qL,"A",{href:!0});var Vjr=s(dS);hJe=r(Vjr,"GPT2TokenizerFast"),Vjr.forEach(t),pJe=r(qL," (OpenAI GPT-2 model)"),qL.forEach(t),_Je=i(w),fs=n(w,"LI",{});var NL=s(fs);zZ=n(NL,"STRONG",{});var Xjr=s(zZ);uJe=r(Xjr,"gpt_neo"),Xjr.forEach(t),bJe=r(NL," \u2014 "),cS=n(NL,"A",{href:!0});var zjr=s(cS);FJe=r(zjr,"GPT2Tokenizer"),zjr.forEach(t),vJe=r(NL," or "),fS=n(NL,"A",{href:!0});var Qjr=s(fS);TJe=r(Qjr,"GPT2TokenizerFast"),Qjr.forEach(t),MJe=r(NL," (GPT Neo model)"),NL.forEach(t),EJe=i(w),ms=n(w,"LI",{});var jL=s(ms);QZ=n(jL,"STRONG",{});var Wjr=s(QZ);CJe=r(Wjr,"herbert"),Wjr.forEach(t),wJe=r(jL," \u2014 "),mS=n(jL,"A",{href:!0});var Hjr=s(mS);AJe=r(Hjr,"HerbertTokenizer"),Hjr.forEach(t),yJe=r(jL," or "),gS=n(jL,"A",{href:!0});var Ujr=s(gS);LJe=r(Ujr,"HerbertTokenizerFast"),Ujr.forEach(t),xJe=r(jL," (HerBERT model)"),jL.forEach(t),kJe=i(w),Jg=n(w,"LI",{});var V4e=s(Jg);WZ=n(V4e,"STRONG",{});var Jjr=s(WZ);SJe=r(Jjr,"hubert"),Jjr.forEach(t),RJe=r(V4e," \u2014 "),hS=n(V4e,"A",{href:!0});var Yjr=s(hS);BJe=r(Yjr,"Wav2Vec2CTCTokenizer"),Yjr.forEach(t),PJe=r(V4e," (Hubert model)"),V4e.forEach(t),$Je=i(w),gs=n(w,"LI",{});var DL=s(gs);HZ=n(DL,"STRONG",{});var Kjr=s(HZ);IJe=r(Kjr,"ibert"),Kjr.forEach(t),qJe=r(DL," \u2014 "),pS=n(DL,"A",{href:!0});var Zjr=s(pS);NJe=r(Zjr,"RobertaTokenizer"),Zjr.forEach(t),jJe=r(DL," or "),_S=n(DL,"A",{href:!0});var eDr=s(_S);DJe=r(eDr,"RobertaTokenizerFast"),eDr.forEach(t),GJe=r(DL," (I-BERT model)"),DL.forEach(t),OJe=i(w),hs=n(w,"LI",{});var GL=s(hs);UZ=n(GL,"STRONG",{});var oDr=s(UZ);VJe=r(oDr,"layoutlm"),oDr.forEach(t),XJe=r(GL," \u2014 "),uS=n(GL,"A",{href:!0});var rDr=s(uS);zJe=r(rDr,"LayoutLMTokenizer"),rDr.forEach(t),QJe=r(GL," or "),bS=n(GL,"A",{href:!0});var tDr=s(bS);WJe=r(tDr,"LayoutLMTokenizerFast"),tDr.forEach(t),HJe=r(GL," (LayoutLM model)"),GL.forEach(t),UJe=i(w),ps=n(w,"LI",{});var OL=s(ps);JZ=n(OL,"STRONG",{});var aDr=s(JZ);JJe=r(aDr,"layoutlmv2"),aDr.forEach(t),YJe=r(OL," \u2014 "),FS=n(OL,"A",{href:!0});var nDr=s(FS);KJe=r(nDr,"LayoutLMv2Tokenizer"),nDr.forEach(t),ZJe=r(OL," or "),vS=n(OL,"A",{href:!0});var sDr=s(vS);eYe=r(sDr,"LayoutLMv2TokenizerFast"),sDr.forEach(t),oYe=r(OL," (LayoutLMv2 model)"),OL.forEach(t),rYe=i(w),_s=n(w,"LI",{});var VL=s(_s);YZ=n(VL,"STRONG",{});var lDr=s(YZ);tYe=r(lDr,"layoutxlm"),lDr.forEach(t),aYe=r(VL," \u2014 "),TS=n(VL,"A",{href:!0});var iDr=s(TS);nYe=r(iDr,"LayoutXLMTokenizer"),iDr.forEach(t),sYe=r(VL," or "),MS=n(VL,"A",{href:!0});var dDr=s(MS);lYe=r(dDr,"LayoutXLMTokenizerFast"),dDr.forEach(t),iYe=r(VL," (LayoutXLM model)"),VL.forEach(t),dYe=i(w),us=n(w,"LI",{});var XL=s(us);KZ=n(XL,"STRONG",{});var cDr=s(KZ);cYe=r(cDr,"led"),cDr.forEach(t),fYe=r(XL," \u2014 "),ES=n(XL,"A",{href:!0});var fDr=s(ES);mYe=r(fDr,"LEDTokenizer"),fDr.forEach(t),gYe=r(XL," or "),CS=n(XL,"A",{href:!0});var mDr=s(CS);hYe=r(mDr,"LEDTokenizerFast"),mDr.forEach(t),pYe=r(XL," (LED model)"),XL.forEach(t),_Ye=i(w),bs=n(w,"LI",{});var zL=s(bs);ZZ=n(zL,"STRONG",{});var gDr=s(ZZ);uYe=r(gDr,"longformer"),gDr.forEach(t),bYe=r(zL," \u2014 "),wS=n(zL,"A",{href:!0});var hDr=s(wS);FYe=r(hDr,"LongformerTokenizer"),hDr.forEach(t),vYe=r(zL," or "),AS=n(zL,"A",{href:!0});var pDr=s(AS);TYe=r(pDr,"LongformerTokenizerFast"),pDr.forEach(t),MYe=r(zL," (Longformer model)"),zL.forEach(t),EYe=i(w),Yg=n(w,"LI",{});var X4e=s(Yg);eee=n(X4e,"STRONG",{});var _Dr=s(eee);CYe=r(_Dr,"luke"),_Dr.forEach(t),wYe=r(X4e," \u2014 "),yS=n(X4e,"A",{href:!0});var uDr=s(yS);AYe=r(uDr,"LukeTokenizer"),uDr.forEach(t),yYe=r(X4e," (LUKE model)"),X4e.forEach(t),LYe=i(w),Fs=n(w,"LI",{});var QL=s(Fs);oee=n(QL,"STRONG",{});var bDr=s(oee);xYe=r(bDr,"lxmert"),bDr.forEach(t),kYe=r(QL," \u2014 "),LS=n(QL,"A",{href:!0});var FDr=s(LS);SYe=r(FDr,"LxmertTokenizer"),FDr.forEach(t),RYe=r(QL," or "),xS=n(QL,"A",{href:!0});var vDr=s(xS);BYe=r(vDr,"LxmertTokenizerFast"),vDr.forEach(t),PYe=r(QL," (LXMERT model)"),QL.forEach(t),$Ye=i(w),Kg=n(w,"LI",{});var z4e=s(Kg);ree=n(z4e,"STRONG",{});var TDr=s(ree);IYe=r(TDr,"m2m_100"),TDr.forEach(t),qYe=r(z4e," \u2014 "),kS=n(z4e,"A",{href:!0});var MDr=s(kS);NYe=r(MDr,"M2M100Tokenizer"),MDr.forEach(t),jYe=r(z4e," (M2M100 model)"),z4e.forEach(t),DYe=i(w),Zg=n(w,"LI",{});var Q4e=s(Zg);tee=n(Q4e,"STRONG",{});var EDr=s(tee);GYe=r(EDr,"marian"),EDr.forEach(t),OYe=r(Q4e," \u2014 "),SS=n(Q4e,"A",{href:!0});var CDr=s(SS);VYe=r(CDr,"MarianTokenizer"),CDr.forEach(t),XYe=r(Q4e," (Marian model)"),Q4e.forEach(t),zYe=i(w),vs=n(w,"LI",{});var WL=s(vs);aee=n(WL,"STRONG",{});var wDr=s(aee);QYe=r(wDr,"mbart"),wDr.forEach(t),WYe=r(WL," \u2014 "),RS=n(WL,"A",{href:!0});var ADr=s(RS);HYe=r(ADr,"MBartTokenizer"),ADr.forEach(t),UYe=r(WL," or "),BS=n(WL,"A",{href:!0});var yDr=s(BS);JYe=r(yDr,"MBartTokenizerFast"),yDr.forEach(t),YYe=r(WL," (mBART model)"),WL.forEach(t),KYe=i(w),Ts=n(w,"LI",{});var HL=s(Ts);nee=n(HL,"STRONG",{});var LDr=s(nee);ZYe=r(LDr,"mbart50"),LDr.forEach(t),eKe=r(HL," \u2014 "),PS=n(HL,"A",{href:!0});var xDr=s(PS);oKe=r(xDr,"MBart50Tokenizer"),xDr.forEach(t),rKe=r(HL," or "),$S=n(HL,"A",{href:!0});var kDr=s($S);tKe=r(kDr,"MBart50TokenizerFast"),kDr.forEach(t),aKe=r(HL," (mBART-50 model)"),HL.forEach(t),nKe=i(w),eh=n(w,"LI",{});var W4e=s(eh);see=n(W4e,"STRONG",{});var SDr=s(see);sKe=r(SDr,"mluke"),SDr.forEach(t),lKe=r(W4e," \u2014 "),IS=n(W4e,"A",{href:!0});var RDr=s(IS);iKe=r(RDr,"MLukeTokenizer"),RDr.forEach(t),dKe=r(W4e," (mLUKE model)"),W4e.forEach(t),cKe=i(w),Ms=n(w,"LI",{});var UL=s(Ms);lee=n(UL,"STRONG",{});var BDr=s(lee);fKe=r(BDr,"mobilebert"),BDr.forEach(t),mKe=r(UL," \u2014 "),qS=n(UL,"A",{href:!0});var PDr=s(qS);gKe=r(PDr,"MobileBertTokenizer"),PDr.forEach(t),hKe=r(UL," or "),NS=n(UL,"A",{href:!0});var $Dr=s(NS);pKe=r($Dr,"MobileBertTokenizerFast"),$Dr.forEach(t),_Ke=r(UL," (MobileBERT model)"),UL.forEach(t),uKe=i(w),Es=n(w,"LI",{});var JL=s(Es);iee=n(JL,"STRONG",{});var IDr=s(iee);bKe=r(IDr,"mpnet"),IDr.forEach(t),FKe=r(JL," \u2014 "),jS=n(JL,"A",{href:!0});var qDr=s(jS);vKe=r(qDr,"MPNetTokenizer"),qDr.forEach(t),TKe=r(JL," or "),DS=n(JL,"A",{href:!0});var NDr=s(DS);MKe=r(NDr,"MPNetTokenizerFast"),NDr.forEach(t),EKe=r(JL," (MPNet model)"),JL.forEach(t),CKe=i(w),Cs=n(w,"LI",{});var YL=s(Cs);dee=n(YL,"STRONG",{});var jDr=s(dee);wKe=r(jDr,"mt5"),jDr.forEach(t),AKe=r(YL," \u2014 "),GS=n(YL,"A",{href:!0});var DDr=s(GS);yKe=r(DDr,"MT5Tokenizer"),DDr.forEach(t),LKe=r(YL," or "),OS=n(YL,"A",{href:!0});var GDr=s(OS);xKe=r(GDr,"MT5TokenizerFast"),GDr.forEach(t),kKe=r(YL," (mT5 model)"),YL.forEach(t),SKe=i(w),ws=n(w,"LI",{});var KL=s(ws);cee=n(KL,"STRONG",{});var ODr=s(cee);RKe=r(ODr,"openai-gpt"),ODr.forEach(t),BKe=r(KL," \u2014 "),VS=n(KL,"A",{href:!0});var VDr=s(VS);PKe=r(VDr,"OpenAIGPTTokenizer"),VDr.forEach(t),$Ke=r(KL," or "),XS=n(KL,"A",{href:!0});var XDr=s(XS);IKe=r(XDr,"OpenAIGPTTokenizerFast"),XDr.forEach(t),qKe=r(KL," (OpenAI GPT model)"),KL.forEach(t),NKe=i(w),As=n(w,"LI",{});var ZL=s(As);fee=n(ZL,"STRONG",{});var zDr=s(fee);jKe=r(zDr,"pegasus"),zDr.forEach(t),DKe=r(ZL," \u2014 "),zS=n(ZL,"A",{href:!0});var QDr=s(zS);GKe=r(QDr,"PegasusTokenizer"),QDr.forEach(t),OKe=r(ZL," or "),QS=n(ZL,"A",{href:!0});var WDr=s(QS);VKe=r(WDr,"PegasusTokenizerFast"),WDr.forEach(t),XKe=r(ZL," (Pegasus model)"),ZL.forEach(t),zKe=i(w),oh=n(w,"LI",{});var H4e=s(oh);mee=n(H4e,"STRONG",{});var HDr=s(mee);QKe=r(HDr,"perceiver"),HDr.forEach(t),WKe=r(H4e," \u2014 "),WS=n(H4e,"A",{href:!0});var UDr=s(WS);HKe=r(UDr,"PerceiverTokenizer"),UDr.forEach(t),UKe=r(H4e," (Perceiver model)"),H4e.forEach(t),JKe=i(w),rh=n(w,"LI",{});var U4e=s(rh);gee=n(U4e,"STRONG",{});var JDr=s(gee);YKe=r(JDr,"phobert"),JDr.forEach(t),KKe=r(U4e," \u2014 "),HS=n(U4e,"A",{href:!0});var YDr=s(HS);ZKe=r(YDr,"PhobertTokenizer"),YDr.forEach(t),eZe=r(U4e," (PhoBERT model)"),U4e.forEach(t),oZe=i(w),th=n(w,"LI",{});var J4e=s(th);hee=n(J4e,"STRONG",{});var KDr=s(hee);rZe=r(KDr,"plbart"),KDr.forEach(t),tZe=r(J4e," \u2014 "),US=n(J4e,"A",{href:!0});var ZDr=s(US);aZe=r(ZDr,"PLBartTokenizer"),ZDr.forEach(t),nZe=r(J4e," (PLBart model)"),J4e.forEach(t),sZe=i(w),ah=n(w,"LI",{});var Y4e=s(ah);pee=n(Y4e,"STRONG",{});var eGr=s(pee);lZe=r(eGr,"prophetnet"),eGr.forEach(t),iZe=r(Y4e," \u2014 "),JS=n(Y4e,"A",{href:!0});var oGr=s(JS);dZe=r(oGr,"ProphetNetTokenizer"),oGr.forEach(t),cZe=r(Y4e," (ProphetNet model)"),Y4e.forEach(t),fZe=i(w),ys=n(w,"LI",{});var e7=s(ys);_ee=n(e7,"STRONG",{});var rGr=s(_ee);mZe=r(rGr,"qdqbert"),rGr.forEach(t),gZe=r(e7," \u2014 "),YS=n(e7,"A",{href:!0});var tGr=s(YS);hZe=r(tGr,"BertTokenizer"),tGr.forEach(t),pZe=r(e7," or "),KS=n(e7,"A",{href:!0});var aGr=s(KS);_Ze=r(aGr,"BertTokenizerFast"),aGr.forEach(t),uZe=r(e7," (QDQBert model)"),e7.forEach(t),bZe=i(w),nh=n(w,"LI",{});var K4e=s(nh);uee=n(K4e,"STRONG",{});var nGr=s(uee);FZe=r(nGr,"rag"),nGr.forEach(t),vZe=r(K4e," \u2014 "),ZS=n(K4e,"A",{href:!0});var sGr=s(ZS);TZe=r(sGr,"RagTokenizer"),sGr.forEach(t),MZe=r(K4e," (RAG model)"),K4e.forEach(t),EZe=i(w),Ls=n(w,"LI",{});var o7=s(Ls);bee=n(o7,"STRONG",{});var lGr=s(bee);CZe=r(lGr,"realm"),lGr.forEach(t),wZe=r(o7," \u2014 "),eR=n(o7,"A",{href:!0});var iGr=s(eR);AZe=r(iGr,"RealmTokenizer"),iGr.forEach(t),yZe=r(o7," or "),oR=n(o7,"A",{href:!0});var dGr=s(oR);LZe=r(dGr,"RealmTokenizerFast"),dGr.forEach(t),xZe=r(o7," (Realm model)"),o7.forEach(t),kZe=i(w),xs=n(w,"LI",{});var r7=s(xs);Fee=n(r7,"STRONG",{});var cGr=s(Fee);SZe=r(cGr,"reformer"),cGr.forEach(t),RZe=r(r7," \u2014 "),rR=n(r7,"A",{href:!0});var fGr=s(rR);BZe=r(fGr,"ReformerTokenizer"),fGr.forEach(t),PZe=r(r7," or "),tR=n(r7,"A",{href:!0});var mGr=s(tR);$Ze=r(mGr,"ReformerTokenizerFast"),mGr.forEach(t),IZe=r(r7," (Reformer model)"),r7.forEach(t),qZe=i(w),ks=n(w,"LI",{});var t7=s(ks);vee=n(t7,"STRONG",{});var gGr=s(vee);NZe=r(gGr,"rembert"),gGr.forEach(t),jZe=r(t7," \u2014 "),aR=n(t7,"A",{href:!0});var hGr=s(aR);DZe=r(hGr,"RemBertTokenizer"),hGr.forEach(t),GZe=r(t7," or "),nR=n(t7,"A",{href:!0});var pGr=s(nR);OZe=r(pGr,"RemBertTokenizerFast"),pGr.forEach(t),VZe=r(t7," (RemBERT model)"),t7.forEach(t),XZe=i(w),Ss=n(w,"LI",{});var a7=s(Ss);Tee=n(a7,"STRONG",{});var _Gr=s(Tee);zZe=r(_Gr,"retribert"),_Gr.forEach(t),QZe=r(a7," \u2014 "),sR=n(a7,"A",{href:!0});var uGr=s(sR);WZe=r(uGr,"RetriBertTokenizer"),uGr.forEach(t),HZe=r(a7," or "),lR=n(a7,"A",{href:!0});var bGr=s(lR);UZe=r(bGr,"RetriBertTokenizerFast"),bGr.forEach(t),JZe=r(a7," (RetriBERT model)"),a7.forEach(t),YZe=i(w),Rs=n(w,"LI",{});var n7=s(Rs);Mee=n(n7,"STRONG",{});var FGr=s(Mee);KZe=r(FGr,"roberta"),FGr.forEach(t),ZZe=r(n7," \u2014 "),iR=n(n7,"A",{href:!0});var vGr=s(iR);eeo=r(vGr,"RobertaTokenizer"),vGr.forEach(t),oeo=r(n7," or "),dR=n(n7,"A",{href:!0});var TGr=s(dR);reo=r(TGr,"RobertaTokenizerFast"),TGr.forEach(t),teo=r(n7," (RoBERTa model)"),n7.forEach(t),aeo=i(w),Bs=n(w,"LI",{});var s7=s(Bs);Eee=n(s7,"STRONG",{});var MGr=s(Eee);neo=r(MGr,"roformer"),MGr.forEach(t),seo=r(s7," \u2014 "),cR=n(s7,"A",{href:!0});var EGr=s(cR);leo=r(EGr,"RoFormerTokenizer"),EGr.forEach(t),ieo=r(s7," or "),fR=n(s7,"A",{href:!0});var CGr=s(fR);deo=r(CGr,"RoFormerTokenizerFast"),CGr.forEach(t),ceo=r(s7," (RoFormer model)"),s7.forEach(t),feo=i(w),sh=n(w,"LI",{});var Z4e=s(sh);Cee=n(Z4e,"STRONG",{});var wGr=s(Cee);meo=r(wGr,"speech_to_text"),wGr.forEach(t),geo=r(Z4e," \u2014 "),mR=n(Z4e,"A",{href:!0});var AGr=s(mR);heo=r(AGr,"Speech2TextTokenizer"),AGr.forEach(t),peo=r(Z4e," (Speech2Text model)"),Z4e.forEach(t),_eo=i(w),lh=n(w,"LI",{});var eEe=s(lh);wee=n(eEe,"STRONG",{});var yGr=s(wee);ueo=r(yGr,"speech_to_text_2"),yGr.forEach(t),beo=r(eEe," \u2014 "),gR=n(eEe,"A",{href:!0});var LGr=s(gR);Feo=r(LGr,"Speech2Text2Tokenizer"),LGr.forEach(t),veo=r(eEe," (Speech2Text2 model)"),eEe.forEach(t),Teo=i(w),Ps=n(w,"LI",{});var l7=s(Ps);Aee=n(l7,"STRONG",{});var xGr=s(Aee);Meo=r(xGr,"splinter"),xGr.forEach(t),Eeo=r(l7," \u2014 "),hR=n(l7,"A",{href:!0});var kGr=s(hR);Ceo=r(kGr,"SplinterTokenizer"),kGr.forEach(t),weo=r(l7," or "),pR=n(l7,"A",{href:!0});var SGr=s(pR);Aeo=r(SGr,"SplinterTokenizerFast"),SGr.forEach(t),yeo=r(l7," (Splinter model)"),l7.forEach(t),Leo=i(w),$s=n(w,"LI",{});var i7=s($s);yee=n(i7,"STRONG",{});var RGr=s(yee);xeo=r(RGr,"squeezebert"),RGr.forEach(t),keo=r(i7," \u2014 "),_R=n(i7,"A",{href:!0});var BGr=s(_R);Seo=r(BGr,"SqueezeBertTokenizer"),BGr.forEach(t),Reo=r(i7," or "),uR=n(i7,"A",{href:!0});var PGr=s(uR);Beo=r(PGr,"SqueezeBertTokenizerFast"),PGr.forEach(t),Peo=r(i7," (SqueezeBERT model)"),i7.forEach(t),$eo=i(w),Is=n(w,"LI",{});var d7=s(Is);Lee=n(d7,"STRONG",{});var $Gr=s(Lee);Ieo=r($Gr,"t5"),$Gr.forEach(t),qeo=r(d7," \u2014 "),bR=n(d7,"A",{href:!0});var IGr=s(bR);Neo=r(IGr,"T5Tokenizer"),IGr.forEach(t),jeo=r(d7," or "),FR=n(d7,"A",{href:!0});var qGr=s(FR);Deo=r(qGr,"T5TokenizerFast"),qGr.forEach(t),Geo=r(d7," (T5 model)"),d7.forEach(t),Oeo=i(w),ih=n(w,"LI",{});var oEe=s(ih);xee=n(oEe,"STRONG",{});var NGr=s(xee);Veo=r(NGr,"tapas"),NGr.forEach(t),Xeo=r(oEe," \u2014 "),vR=n(oEe,"A",{href:!0});var jGr=s(vR);zeo=r(jGr,"TapasTokenizer"),jGr.forEach(t),Qeo=r(oEe," (TAPAS model)"),oEe.forEach(t),Weo=i(w),dh=n(w,"LI",{});var rEe=s(dh);kee=n(rEe,"STRONG",{});var DGr=s(kee);Heo=r(DGr,"tapex"),DGr.forEach(t),Ueo=r(rEe," \u2014 "),TR=n(rEe,"A",{href:!0});var GGr=s(TR);Jeo=r(GGr,"TapexTokenizer"),GGr.forEach(t),Yeo=r(rEe," (TAPEX model)"),rEe.forEach(t),Keo=i(w),ch=n(w,"LI",{});var tEe=s(ch);See=n(tEe,"STRONG",{});var OGr=s(See);Zeo=r(OGr,"transfo-xl"),OGr.forEach(t),eoo=r(tEe," \u2014 "),MR=n(tEe,"A",{href:!0});var VGr=s(MR);ooo=r(VGr,"TransfoXLTokenizer"),VGr.forEach(t),roo=r(tEe," (Transformer-XL model)"),tEe.forEach(t),too=i(w),fh=n(w,"LI",{});var aEe=s(fh);Ree=n(aEe,"STRONG",{});var XGr=s(Ree);aoo=r(XGr,"wav2vec2"),XGr.forEach(t),noo=r(aEe," \u2014 "),ER=n(aEe,"A",{href:!0});var zGr=s(ER);soo=r(zGr,"Wav2Vec2CTCTokenizer"),zGr.forEach(t),loo=r(aEe," (Wav2Vec2 model)"),aEe.forEach(t),ioo=i(w),mh=n(w,"LI",{});var nEe=s(mh);Bee=n(nEe,"STRONG",{});var QGr=s(Bee);doo=r(QGr,"wav2vec2_phoneme"),QGr.forEach(t),coo=r(nEe," \u2014 "),CR=n(nEe,"A",{href:!0});var WGr=s(CR);foo=r(WGr,"Wav2Vec2PhonemeCTCTokenizer"),WGr.forEach(t),moo=r(nEe," (Wav2Vec2Phoneme model)"),nEe.forEach(t),goo=i(w),qs=n(w,"LI",{});var c7=s(qs);Pee=n(c7,"STRONG",{});var HGr=s(Pee);hoo=r(HGr,"xglm"),HGr.forEach(t),poo=r(c7," \u2014 "),wR=n(c7,"A",{href:!0});var UGr=s(wR);_oo=r(UGr,"XGLMTokenizer"),UGr.forEach(t),uoo=r(c7," or "),AR=n(c7,"A",{href:!0});var JGr=s(AR);boo=r(JGr,"XGLMTokenizerFast"),JGr.forEach(t),Foo=r(c7," (XGLM model)"),c7.forEach(t),voo=i(w),gh=n(w,"LI",{});var sEe=s(gh);$ee=n(sEe,"STRONG",{});var YGr=s($ee);Too=r(YGr,"xlm"),YGr.forEach(t),Moo=r(sEe," \u2014 "),yR=n(sEe,"A",{href:!0});var KGr=s(yR);Eoo=r(KGr,"XLMTokenizer"),KGr.forEach(t),Coo=r(sEe," (XLM model)"),sEe.forEach(t),woo=i(w),hh=n(w,"LI",{});var lEe=s(hh);Iee=n(lEe,"STRONG",{});var ZGr=s(Iee);Aoo=r(ZGr,"xlm-prophetnet"),ZGr.forEach(t),yoo=r(lEe," \u2014 "),LR=n(lEe,"A",{href:!0});var eOr=s(LR);Loo=r(eOr,"XLMProphetNetTokenizer"),eOr.forEach(t),xoo=r(lEe," (XLMProphetNet model)"),lEe.forEach(t),koo=i(w),Ns=n(w,"LI",{});var f7=s(Ns);qee=n(f7,"STRONG",{});var oOr=s(qee);Soo=r(oOr,"xlm-roberta"),oOr.forEach(t),Roo=r(f7," \u2014 "),xR=n(f7,"A",{href:!0});var rOr=s(xR);Boo=r(rOr,"XLMRobertaTokenizer"),rOr.forEach(t),Poo=r(f7," or "),kR=n(f7,"A",{href:!0});var tOr=s(kR);$oo=r(tOr,"XLMRobertaTokenizerFast"),tOr.forEach(t),Ioo=r(f7," (XLM-RoBERTa model)"),f7.forEach(t),qoo=i(w),js=n(w,"LI",{});var m7=s(js);Nee=n(m7,"STRONG",{});var aOr=s(Nee);Noo=r(aOr,"xlnet"),aOr.forEach(t),joo=r(m7," \u2014 "),SR=n(m7,"A",{href:!0});var nOr=s(SR);Doo=r(nOr,"XLNetTokenizer"),nOr.forEach(t),Goo=r(m7," or "),RR=n(m7,"A",{href:!0});var sOr=s(RR);Ooo=r(sOr,"XLNetTokenizerFast"),sOr.forEach(t),Voo=r(m7," (XLNet model)"),m7.forEach(t),w.forEach(t),Xoo=i(ha),jee=n(ha,"P",{});var lOr=s(jee);zoo=r(lOr,"Examples:"),lOr.forEach(t),Qoo=i(ha),m(GC.$$.fragment,ha),ha.forEach(t),Woo=i(Xs),ph=n(Xs,"DIV",{class:!0});var xPe=s(ph);m(OC.$$.fragment,xPe),Hoo=i(xPe),Dee=n(xPe,"P",{});var iOr=s(Dee);Uoo=r(iOr,"Register a new tokenizer in this mapping."),iOr.forEach(t),xPe.forEach(t),Xs.forEach(t),wRe=i(c),Hi=n(c,"H2",{class:!0});var kPe=s(Hi);_h=n(kPe,"A",{id:!0,class:!0,href:!0});var dOr=s(_h);Gee=n(dOr,"SPAN",{});var cOr=s(Gee);m(VC.$$.fragment,cOr),cOr.forEach(t),dOr.forEach(t),Joo=i(kPe),Oee=n(kPe,"SPAN",{});var fOr=s(Oee);Yoo=r(fOr,"AutoFeatureExtractor"),fOr.forEach(t),kPe.forEach(t),ARe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(XC.$$.fragment,zs),Koo=i(zs),zC=n(zs,"P",{});var SPe=s(zC);Zoo=r(SPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),BR=n(SPe,"A",{href:!0});var mOr=s(BR);ero=r(mOr,"AutoFeatureExtractor.from_pretrained()"),mOr.forEach(t),oro=r(SPe," class method."),SPe.forEach(t),rro=i(zs),QC=n(zs,"P",{});var RPe=s(QC);tro=r(RPe,"This class cannot be instantiated directly using "),Vee=n(RPe,"CODE",{});var gOr=s(Vee);aro=r(gOr,"__init__()"),gOr.forEach(t),nro=r(RPe," (throws an error)."),RPe.forEach(t),sro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(WC.$$.fragment,Nt),lro=i(Nt),Xee=n(Nt,"P",{});var hOr=s(Xee);iro=r(hOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),hOr.forEach(t),dro=i(Nt),Va=n(Nt,"P",{});var A3=s(Va);cro=r(A3,"The feature extractor class to instantiate is selected based on the "),zee=n(A3,"CODE",{});var pOr=s(zee);fro=r(pOr,"model_type"),pOr.forEach(t),mro=r(A3,` property of the config object
(either passed as an argument or loaded from `),Qee=n(A3,"CODE",{});var _Or=s(Qee);gro=r(_Or,"pretrained_model_name_or_path"),_Or.forEach(t),hro=r(A3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wee=n(A3,"CODE",{});var uOr=s(Wee);pro=r(uOr,"pretrained_model_name_or_path"),uOr.forEach(t),_ro=r(A3,":"),A3.forEach(t),uro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);uh=n(ae,"LI",{});var iEe=s(uh);Hee=n(iEe,"STRONG",{});var bOr=s(Hee);bro=r(bOr,"beit"),bOr.forEach(t),Fro=r(iEe," \u2014 "),PR=n(iEe,"A",{href:!0});var FOr=s(PR);vro=r(FOr,"BeitFeatureExtractor"),FOr.forEach(t),Tro=r(iEe," (BEiT model)"),iEe.forEach(t),Mro=i(ae),bh=n(ae,"LI",{});var dEe=s(bh);Uee=n(dEe,"STRONG",{});var vOr=s(Uee);Ero=r(vOr,"clip"),vOr.forEach(t),Cro=r(dEe," \u2014 "),$R=n(dEe,"A",{href:!0});var TOr=s($R);wro=r(TOr,"CLIPFeatureExtractor"),TOr.forEach(t),Aro=r(dEe," (CLIP model)"),dEe.forEach(t),yro=i(ae),Fh=n(ae,"LI",{});var cEe=s(Fh);Jee=n(cEe,"STRONG",{});var MOr=s(Jee);Lro=r(MOr,"convnext"),MOr.forEach(t),xro=r(cEe," \u2014 "),IR=n(cEe,"A",{href:!0});var EOr=s(IR);kro=r(EOr,"ConvNextFeatureExtractor"),EOr.forEach(t),Sro=r(cEe," (ConvNext model)"),cEe.forEach(t),Rro=i(ae),vh=n(ae,"LI",{});var fEe=s(vh);Yee=n(fEe,"STRONG",{});var COr=s(Yee);Bro=r(COr,"deit"),COr.forEach(t),Pro=r(fEe," \u2014 "),qR=n(fEe,"A",{href:!0});var wOr=s(qR);$ro=r(wOr,"DeiTFeatureExtractor"),wOr.forEach(t),Iro=r(fEe," (DeiT model)"),fEe.forEach(t),qro=i(ae),Th=n(ae,"LI",{});var mEe=s(Th);Kee=n(mEe,"STRONG",{});var AOr=s(Kee);Nro=r(AOr,"detr"),AOr.forEach(t),jro=r(mEe," \u2014 "),NR=n(mEe,"A",{href:!0});var yOr=s(NR);Dro=r(yOr,"DetrFeatureExtractor"),yOr.forEach(t),Gro=r(mEe," (DETR model)"),mEe.forEach(t),Oro=i(ae),Mh=n(ae,"LI",{});var gEe=s(Mh);Zee=n(gEe,"STRONG",{});var LOr=s(Zee);Vro=r(LOr,"hubert"),LOr.forEach(t),Xro=r(gEe," \u2014 "),jR=n(gEe,"A",{href:!0});var xOr=s(jR);zro=r(xOr,"Wav2Vec2FeatureExtractor"),xOr.forEach(t),Qro=r(gEe," (Hubert model)"),gEe.forEach(t),Wro=i(ae),Eh=n(ae,"LI",{});var hEe=s(Eh);eoe=n(hEe,"STRONG",{});var kOr=s(eoe);Hro=r(kOr,"layoutlmv2"),kOr.forEach(t),Uro=r(hEe," \u2014 "),DR=n(hEe,"A",{href:!0});var SOr=s(DR);Jro=r(SOr,"LayoutLMv2FeatureExtractor"),SOr.forEach(t),Yro=r(hEe," (LayoutLMv2 model)"),hEe.forEach(t),Kro=i(ae),Ch=n(ae,"LI",{});var pEe=s(Ch);ooe=n(pEe,"STRONG",{});var ROr=s(ooe);Zro=r(ROr,"maskformer"),ROr.forEach(t),eto=r(pEe," \u2014 "),GR=n(pEe,"A",{href:!0});var BOr=s(GR);oto=r(BOr,"MaskFormerFeatureExtractor"),BOr.forEach(t),rto=r(pEe," (MaskFormer model)"),pEe.forEach(t),tto=i(ae),wh=n(ae,"LI",{});var _Ee=s(wh);roe=n(_Ee,"STRONG",{});var POr=s(roe);ato=r(POr,"perceiver"),POr.forEach(t),nto=r(_Ee," \u2014 "),OR=n(_Ee,"A",{href:!0});var $Or=s(OR);sto=r($Or,"PerceiverFeatureExtractor"),$Or.forEach(t),lto=r(_Ee," (Perceiver model)"),_Ee.forEach(t),ito=i(ae),Ah=n(ae,"LI",{});var uEe=s(Ah);toe=n(uEe,"STRONG",{});var IOr=s(toe);dto=r(IOr,"poolformer"),IOr.forEach(t),cto=r(uEe," \u2014 "),VR=n(uEe,"A",{href:!0});var qOr=s(VR);fto=r(qOr,"PoolFormerFeatureExtractor"),qOr.forEach(t),mto=r(uEe," (PoolFormer model)"),uEe.forEach(t),gto=i(ae),yh=n(ae,"LI",{});var bEe=s(yh);aoe=n(bEe,"STRONG",{});var NOr=s(aoe);hto=r(NOr,"regnet"),NOr.forEach(t),pto=r(bEe," \u2014 "),XR=n(bEe,"A",{href:!0});var jOr=s(XR);_to=r(jOr,"ConvNextFeatureExtractor"),jOr.forEach(t),uto=r(bEe," (RegNet model)"),bEe.forEach(t),bto=i(ae),Lh=n(ae,"LI",{});var FEe=s(Lh);noe=n(FEe,"STRONG",{});var DOr=s(noe);Fto=r(DOr,"resnet"),DOr.forEach(t),vto=r(FEe," \u2014 "),zR=n(FEe,"A",{href:!0});var GOr=s(zR);Tto=r(GOr,"ConvNextFeatureExtractor"),GOr.forEach(t),Mto=r(FEe," (ResNet model)"),FEe.forEach(t),Eto=i(ae),xh=n(ae,"LI",{});var vEe=s(xh);soe=n(vEe,"STRONG",{});var OOr=s(soe);Cto=r(OOr,"segformer"),OOr.forEach(t),wto=r(vEe," \u2014 "),QR=n(vEe,"A",{href:!0});var VOr=s(QR);Ato=r(VOr,"SegformerFeatureExtractor"),VOr.forEach(t),yto=r(vEe," (SegFormer model)"),vEe.forEach(t),Lto=i(ae),kh=n(ae,"LI",{});var TEe=s(kh);loe=n(TEe,"STRONG",{});var XOr=s(loe);xto=r(XOr,"speech_to_text"),XOr.forEach(t),kto=r(TEe," \u2014 "),WR=n(TEe,"A",{href:!0});var zOr=s(WR);Sto=r(zOr,"Speech2TextFeatureExtractor"),zOr.forEach(t),Rto=r(TEe," (Speech2Text model)"),TEe.forEach(t),Bto=i(ae),Sh=n(ae,"LI",{});var MEe=s(Sh);ioe=n(MEe,"STRONG",{});var QOr=s(ioe);Pto=r(QOr,"swin"),QOr.forEach(t),$to=r(MEe," \u2014 "),HR=n(MEe,"A",{href:!0});var WOr=s(HR);Ito=r(WOr,"ViTFeatureExtractor"),WOr.forEach(t),qto=r(MEe," (Swin model)"),MEe.forEach(t),Nto=i(ae),Rh=n(ae,"LI",{});var EEe=s(Rh);doe=n(EEe,"STRONG",{});var HOr=s(doe);jto=r(HOr,"van"),HOr.forEach(t),Dto=r(EEe," \u2014 "),UR=n(EEe,"A",{href:!0});var UOr=s(UR);Gto=r(UOr,"ConvNextFeatureExtractor"),UOr.forEach(t),Oto=r(EEe," (VAN model)"),EEe.forEach(t),Vto=i(ae),Bh=n(ae,"LI",{});var CEe=s(Bh);coe=n(CEe,"STRONG",{});var JOr=s(coe);Xto=r(JOr,"vit"),JOr.forEach(t),zto=r(CEe," \u2014 "),JR=n(CEe,"A",{href:!0});var YOr=s(JR);Qto=r(YOr,"ViTFeatureExtractor"),YOr.forEach(t),Wto=r(CEe," (ViT model)"),CEe.forEach(t),Hto=i(ae),Ph=n(ae,"LI",{});var wEe=s(Ph);foe=n(wEe,"STRONG",{});var KOr=s(foe);Uto=r(KOr,"vit_mae"),KOr.forEach(t),Jto=r(wEe," \u2014 "),YR=n(wEe,"A",{href:!0});var ZOr=s(YR);Yto=r(ZOr,"ViTFeatureExtractor"),ZOr.forEach(t),Kto=r(wEe," (ViTMAE model)"),wEe.forEach(t),Zto=i(ae),$h=n(ae,"LI",{});var AEe=s($h);moe=n(AEe,"STRONG",{});var eVr=s(moe);eao=r(eVr,"wav2vec2"),eVr.forEach(t),oao=r(AEe," \u2014 "),KR=n(AEe,"A",{href:!0});var oVr=s(KR);rao=r(oVr,"Wav2Vec2FeatureExtractor"),oVr.forEach(t),tao=r(AEe," (Wav2Vec2 model)"),AEe.forEach(t),ae.forEach(t),aao=i(Nt),m(Ih.$$.fragment,Nt),nao=i(Nt),goe=n(Nt,"P",{});var rVr=s(goe);sao=r(rVr,"Examples:"),rVr.forEach(t),lao=i(Nt),m(HC.$$.fragment,Nt),Nt.forEach(t),iao=i(zs),qh=n(zs,"DIV",{class:!0});var BPe=s(qh);m(UC.$$.fragment,BPe),dao=i(BPe),hoe=n(BPe,"P",{});var tVr=s(hoe);cao=r(tVr,"Register a new feature extractor for this class."),tVr.forEach(t),BPe.forEach(t),zs.forEach(t),yRe=i(c),Ui=n(c,"H2",{class:!0});var PPe=s(Ui);Nh=n(PPe,"A",{id:!0,class:!0,href:!0});var aVr=s(Nh);poe=n(aVr,"SPAN",{});var nVr=s(poe);m(JC.$$.fragment,nVr),nVr.forEach(t),aVr.forEach(t),fao=i(PPe),_oe=n(PPe,"SPAN",{});var sVr=s(_oe);mao=r(sVr,"AutoProcessor"),sVr.forEach(t),PPe.forEach(t),LRe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(YC.$$.fragment,Qs),gao=i(Qs),KC=n(Qs,"P",{});var $Pe=s(KC);hao=r($Pe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),ZR=n($Pe,"A",{href:!0});var lVr=s(ZR);pao=r(lVr,"AutoProcessor.from_pretrained()"),lVr.forEach(t),_ao=r($Pe," class method."),$Pe.forEach(t),uao=i(Qs),ZC=n(Qs,"P",{});var IPe=s(ZC);bao=r(IPe,"This class cannot be instantiated directly using "),uoe=n(IPe,"CODE",{});var iVr=s(uoe);Fao=r(iVr,"__init__()"),iVr.forEach(t),vao=r(IPe," (throws an error)."),IPe.forEach(t),Tao=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(ew.$$.fragment,jt),Mao=i(jt),boe=n(jt,"P",{});var dVr=s(boe);Eao=r(dVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dVr.forEach(t),Cao=i(jt),Ji=n(jt,"P",{});var mU=s(Ji);wao=r(mU,"The processor class to instantiate is selected based on the "),Foe=n(mU,"CODE",{});var cVr=s(Foe);Aao=r(cVr,"model_type"),cVr.forEach(t),yao=r(mU,` property of the config object (either
passed as an argument or loaded from `),voe=n(mU,"CODE",{});var fVr=s(voe);Lao=r(fVr,"pretrained_model_name_or_path"),fVr.forEach(t),xao=r(mU," if possible):"),mU.forEach(t),kao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);jh=n(jo,"LI",{});var yEe=s(jh);Toe=n(yEe,"STRONG",{});var mVr=s(Toe);Sao=r(mVr,"clip"),mVr.forEach(t),Rao=r(yEe," \u2014 "),eB=n(yEe,"A",{href:!0});var gVr=s(eB);Bao=r(gVr,"CLIPProcessor"),gVr.forEach(t),Pao=r(yEe," (CLIP model)"),yEe.forEach(t),$ao=i(jo),Dh=n(jo,"LI",{});var LEe=s(Dh);Moe=n(LEe,"STRONG",{});var hVr=s(Moe);Iao=r(hVr,"layoutlmv2"),hVr.forEach(t),qao=r(LEe," \u2014 "),oB=n(LEe,"A",{href:!0});var pVr=s(oB);Nao=r(pVr,"LayoutLMv2Processor"),pVr.forEach(t),jao=r(LEe," (LayoutLMv2 model)"),LEe.forEach(t),Dao=i(jo),Gh=n(jo,"LI",{});var xEe=s(Gh);Eoe=n(xEe,"STRONG",{});var _Vr=s(Eoe);Gao=r(_Vr,"layoutxlm"),_Vr.forEach(t),Oao=r(xEe," \u2014 "),rB=n(xEe,"A",{href:!0});var uVr=s(rB);Vao=r(uVr,"LayoutXLMProcessor"),uVr.forEach(t),Xao=r(xEe," (LayoutXLM model)"),xEe.forEach(t),zao=i(jo),Oh=n(jo,"LI",{});var kEe=s(Oh);Coe=n(kEe,"STRONG",{});var bVr=s(Coe);Qao=r(bVr,"speech_to_text"),bVr.forEach(t),Wao=r(kEe," \u2014 "),tB=n(kEe,"A",{href:!0});var FVr=s(tB);Hao=r(FVr,"Speech2TextProcessor"),FVr.forEach(t),Uao=r(kEe," (Speech2Text model)"),kEe.forEach(t),Jao=i(jo),Vh=n(jo,"LI",{});var SEe=s(Vh);woe=n(SEe,"STRONG",{});var vVr=s(woe);Yao=r(vVr,"speech_to_text_2"),vVr.forEach(t),Kao=r(SEe," \u2014 "),aB=n(SEe,"A",{href:!0});var TVr=s(aB);Zao=r(TVr,"Speech2Text2Processor"),TVr.forEach(t),eno=r(SEe," (Speech2Text2 model)"),SEe.forEach(t),ono=i(jo),Xh=n(jo,"LI",{});var REe=s(Xh);Aoe=n(REe,"STRONG",{});var MVr=s(Aoe);rno=r(MVr,"trocr"),MVr.forEach(t),tno=r(REe," \u2014 "),nB=n(REe,"A",{href:!0});var EVr=s(nB);ano=r(EVr,"TrOCRProcessor"),EVr.forEach(t),nno=r(REe," (TrOCR model)"),REe.forEach(t),sno=i(jo),zh=n(jo,"LI",{});var BEe=s(zh);yoe=n(BEe,"STRONG",{});var CVr=s(yoe);lno=r(CVr,"vision-text-dual-encoder"),CVr.forEach(t),ino=r(BEe," \u2014 "),sB=n(BEe,"A",{href:!0});var wVr=s(sB);dno=r(wVr,"VisionTextDualEncoderProcessor"),wVr.forEach(t),cno=r(BEe," (VisionTextDualEncoder model)"),BEe.forEach(t),fno=i(jo),Qh=n(jo,"LI",{});var PEe=s(Qh);Loe=n(PEe,"STRONG",{});var AVr=s(Loe);mno=r(AVr,"wav2vec2"),AVr.forEach(t),gno=r(PEe," \u2014 "),lB=n(PEe,"A",{href:!0});var yVr=s(lB);hno=r(yVr,"Wav2Vec2Processor"),yVr.forEach(t),pno=r(PEe," (Wav2Vec2 model)"),PEe.forEach(t),jo.forEach(t),_no=i(jt),m(Wh.$$.fragment,jt),uno=i(jt),xoe=n(jt,"P",{});var LVr=s(xoe);bno=r(LVr,"Examples:"),LVr.forEach(t),Fno=i(jt),m(ow.$$.fragment,jt),jt.forEach(t),vno=i(Qs),Hh=n(Qs,"DIV",{class:!0});var qPe=s(Hh);m(rw.$$.fragment,qPe),Tno=i(qPe),koe=n(qPe,"P",{});var xVr=s(koe);Mno=r(xVr,"Register a new processor for this class."),xVr.forEach(t),qPe.forEach(t),Qs.forEach(t),xRe=i(c),Yi=n(c,"H2",{class:!0});var NPe=s(Yi);Uh=n(NPe,"A",{id:!0,class:!0,href:!0});var kVr=s(Uh);Soe=n(kVr,"SPAN",{});var SVr=s(Soe);m(tw.$$.fragment,SVr),SVr.forEach(t),kVr.forEach(t),Eno=i(NPe),Roe=n(NPe,"SPAN",{});var RVr=s(Roe);Cno=r(RVr,"AutoModel"),RVr.forEach(t),NPe.forEach(t),kRe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(aw.$$.fragment,Ws),wno=i(Ws),Ki=n(Ws,"P",{});var gU=s(Ki);Ano=r(gU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iB=n(gU,"A",{href:!0});var BVr=s(iB);yno=r(BVr,"from_pretrained()"),BVr.forEach(t),Lno=r(gU," class method or the "),dB=n(gU,"A",{href:!0});var PVr=s(dB);xno=r(PVr,"from_config()"),PVr.forEach(t),kno=r(gU,` class
method.`),gU.forEach(t),Sno=i(Ws),nw=n(Ws,"P",{});var jPe=s(nw);Rno=r(jPe,"This class cannot be instantiated directly using "),Boe=n(jPe,"CODE",{});var $Vr=s(Boe);Bno=r($Vr,"__init__()"),$Vr.forEach(t),Pno=r(jPe," (throws an error)."),jPe.forEach(t),$no=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(sw.$$.fragment,Hs),Ino=i(Hs),Poe=n(Hs,"P",{});var IVr=s(Poe);qno=r(IVr,"Instantiates one of the base model classes of the library from a configuration."),IVr.forEach(t),Nno=i(Hs),Zi=n(Hs,"P",{});var hU=s(Zi);jno=r(hU,`Note:
Loading a model from its configuration file does `),$oe=n(hU,"STRONG",{});var qVr=s($oe);Dno=r(qVr,"not"),qVr.forEach(t),Gno=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cB=n(hU,"A",{href:!0});var NVr=s(cB);Ono=r(NVr,"from_pretrained()"),NVr.forEach(t),Vno=r(hU," to load the model weights."),hU.forEach(t),Xno=i(Hs),Ioe=n(Hs,"P",{});var jVr=s(Ioe);zno=r(jVr,"Examples:"),jVr.forEach(t),Qno=i(Hs),m(lw.$$.fragment,Hs),Hs.forEach(t),Wno=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(iw.$$.fragment,Dt),Hno=i(Dt),qoe=n(Dt,"P",{});var DVr=s(qoe);Uno=r(DVr,"Instantiate one of the base model classes of the library from a pretrained model."),DVr.forEach(t),Jno=i(Dt),Xa=n(Dt,"P",{});var y3=s(Xa);Yno=r(y3,"The model class to instantiate is selected based on the "),Noe=n(y3,"CODE",{});var GVr=s(Noe);Kno=r(GVr,"model_type"),GVr.forEach(t),Zno=r(y3,` property of the config object (either
passed as an argument or loaded from `),joe=n(y3,"CODE",{});var OVr=s(joe);eso=r(OVr,"pretrained_model_name_or_path"),OVr.forEach(t),oso=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Doe=n(y3,"CODE",{});var VVr=s(Doe);rso=r(VVr,"pretrained_model_name_or_path"),VVr.forEach(t),tso=r(y3,":"),y3.forEach(t),aso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Jh=n(M,"LI",{});var $Ee=s(Jh);Goe=n($Ee,"STRONG",{});var XVr=s(Goe);nso=r(XVr,"albert"),XVr.forEach(t),sso=r($Ee," \u2014 "),fB=n($Ee,"A",{href:!0});var zVr=s(fB);lso=r(zVr,"AlbertModel"),zVr.forEach(t),iso=r($Ee," (ALBERT model)"),$Ee.forEach(t),dso=i(M),Yh=n(M,"LI",{});var IEe=s(Yh);Ooe=n(IEe,"STRONG",{});var QVr=s(Ooe);cso=r(QVr,"bart"),QVr.forEach(t),fso=r(IEe," \u2014 "),mB=n(IEe,"A",{href:!0});var WVr=s(mB);mso=r(WVr,"BartModel"),WVr.forEach(t),gso=r(IEe," (BART model)"),IEe.forEach(t),hso=i(M),Kh=n(M,"LI",{});var qEe=s(Kh);Voe=n(qEe,"STRONG",{});var HVr=s(Voe);pso=r(HVr,"beit"),HVr.forEach(t),_so=r(qEe," \u2014 "),gB=n(qEe,"A",{href:!0});var UVr=s(gB);uso=r(UVr,"BeitModel"),UVr.forEach(t),bso=r(qEe," (BEiT model)"),qEe.forEach(t),Fso=i(M),Zh=n(M,"LI",{});var NEe=s(Zh);Xoe=n(NEe,"STRONG",{});var JVr=s(Xoe);vso=r(JVr,"bert"),JVr.forEach(t),Tso=r(NEe," \u2014 "),hB=n(NEe,"A",{href:!0});var YVr=s(hB);Mso=r(YVr,"BertModel"),YVr.forEach(t),Eso=r(NEe," (BERT model)"),NEe.forEach(t),Cso=i(M),ep=n(M,"LI",{});var jEe=s(ep);zoe=n(jEe,"STRONG",{});var KVr=s(zoe);wso=r(KVr,"bert-generation"),KVr.forEach(t),Aso=r(jEe," \u2014 "),pB=n(jEe,"A",{href:!0});var ZVr=s(pB);yso=r(ZVr,"BertGenerationEncoder"),ZVr.forEach(t),Lso=r(jEe," (Bert Generation model)"),jEe.forEach(t),xso=i(M),op=n(M,"LI",{});var DEe=s(op);Qoe=n(DEe,"STRONG",{});var eXr=s(Qoe);kso=r(eXr,"big_bird"),eXr.forEach(t),Sso=r(DEe," \u2014 "),_B=n(DEe,"A",{href:!0});var oXr=s(_B);Rso=r(oXr,"BigBirdModel"),oXr.forEach(t),Bso=r(DEe," (BigBird model)"),DEe.forEach(t),Pso=i(M),rp=n(M,"LI",{});var GEe=s(rp);Woe=n(GEe,"STRONG",{});var rXr=s(Woe);$so=r(rXr,"bigbird_pegasus"),rXr.forEach(t),Iso=r(GEe," \u2014 "),uB=n(GEe,"A",{href:!0});var tXr=s(uB);qso=r(tXr,"BigBirdPegasusModel"),tXr.forEach(t),Nso=r(GEe," (BigBirdPegasus model)"),GEe.forEach(t),jso=i(M),tp=n(M,"LI",{});var OEe=s(tp);Hoe=n(OEe,"STRONG",{});var aXr=s(Hoe);Dso=r(aXr,"blenderbot"),aXr.forEach(t),Gso=r(OEe," \u2014 "),bB=n(OEe,"A",{href:!0});var nXr=s(bB);Oso=r(nXr,"BlenderbotModel"),nXr.forEach(t),Vso=r(OEe," (Blenderbot model)"),OEe.forEach(t),Xso=i(M),ap=n(M,"LI",{});var VEe=s(ap);Uoe=n(VEe,"STRONG",{});var sXr=s(Uoe);zso=r(sXr,"blenderbot-small"),sXr.forEach(t),Qso=r(VEe," \u2014 "),FB=n(VEe,"A",{href:!0});var lXr=s(FB);Wso=r(lXr,"BlenderbotSmallModel"),lXr.forEach(t),Hso=r(VEe," (BlenderbotSmall model)"),VEe.forEach(t),Uso=i(M),np=n(M,"LI",{});var XEe=s(np);Joe=n(XEe,"STRONG",{});var iXr=s(Joe);Jso=r(iXr,"camembert"),iXr.forEach(t),Yso=r(XEe," \u2014 "),vB=n(XEe,"A",{href:!0});var dXr=s(vB);Kso=r(dXr,"CamembertModel"),dXr.forEach(t),Zso=r(XEe," (CamemBERT model)"),XEe.forEach(t),elo=i(M),sp=n(M,"LI",{});var zEe=s(sp);Yoe=n(zEe,"STRONG",{});var cXr=s(Yoe);olo=r(cXr,"canine"),cXr.forEach(t),rlo=r(zEe," \u2014 "),TB=n(zEe,"A",{href:!0});var fXr=s(TB);tlo=r(fXr,"CanineModel"),fXr.forEach(t),alo=r(zEe," (Canine model)"),zEe.forEach(t),nlo=i(M),lp=n(M,"LI",{});var QEe=s(lp);Koe=n(QEe,"STRONG",{});var mXr=s(Koe);slo=r(mXr,"clip"),mXr.forEach(t),llo=r(QEe," \u2014 "),MB=n(QEe,"A",{href:!0});var gXr=s(MB);ilo=r(gXr,"CLIPModel"),gXr.forEach(t),dlo=r(QEe," (CLIP model)"),QEe.forEach(t),clo=i(M),ip=n(M,"LI",{});var WEe=s(ip);Zoe=n(WEe,"STRONG",{});var hXr=s(Zoe);flo=r(hXr,"convbert"),hXr.forEach(t),mlo=r(WEe," \u2014 "),EB=n(WEe,"A",{href:!0});var pXr=s(EB);glo=r(pXr,"ConvBertModel"),pXr.forEach(t),hlo=r(WEe," (ConvBERT model)"),WEe.forEach(t),plo=i(M),dp=n(M,"LI",{});var HEe=s(dp);ere=n(HEe,"STRONG",{});var _Xr=s(ere);_lo=r(_Xr,"convnext"),_Xr.forEach(t),ulo=r(HEe," \u2014 "),CB=n(HEe,"A",{href:!0});var uXr=s(CB);blo=r(uXr,"ConvNextModel"),uXr.forEach(t),Flo=r(HEe," (ConvNext model)"),HEe.forEach(t),vlo=i(M),cp=n(M,"LI",{});var UEe=s(cp);ore=n(UEe,"STRONG",{});var bXr=s(ore);Tlo=r(bXr,"ctrl"),bXr.forEach(t),Mlo=r(UEe," \u2014 "),wB=n(UEe,"A",{href:!0});var FXr=s(wB);Elo=r(FXr,"CTRLModel"),FXr.forEach(t),Clo=r(UEe," (CTRL model)"),UEe.forEach(t),wlo=i(M),fp=n(M,"LI",{});var JEe=s(fp);rre=n(JEe,"STRONG",{});var vXr=s(rre);Alo=r(vXr,"data2vec-audio"),vXr.forEach(t),ylo=r(JEe," \u2014 "),AB=n(JEe,"A",{href:!0});var TXr=s(AB);Llo=r(TXr,"Data2VecAudioModel"),TXr.forEach(t),xlo=r(JEe," (Data2VecAudio model)"),JEe.forEach(t),klo=i(M),mp=n(M,"LI",{});var YEe=s(mp);tre=n(YEe,"STRONG",{});var MXr=s(tre);Slo=r(MXr,"data2vec-text"),MXr.forEach(t),Rlo=r(YEe," \u2014 "),yB=n(YEe,"A",{href:!0});var EXr=s(yB);Blo=r(EXr,"Data2VecTextModel"),EXr.forEach(t),Plo=r(YEe," (Data2VecText model)"),YEe.forEach(t),$lo=i(M),gp=n(M,"LI",{});var KEe=s(gp);are=n(KEe,"STRONG",{});var CXr=s(are);Ilo=r(CXr,"deberta"),CXr.forEach(t),qlo=r(KEe," \u2014 "),LB=n(KEe,"A",{href:!0});var wXr=s(LB);Nlo=r(wXr,"DebertaModel"),wXr.forEach(t),jlo=r(KEe," (DeBERTa model)"),KEe.forEach(t),Dlo=i(M),hp=n(M,"LI",{});var ZEe=s(hp);nre=n(ZEe,"STRONG",{});var AXr=s(nre);Glo=r(AXr,"deberta-v2"),AXr.forEach(t),Olo=r(ZEe," \u2014 "),xB=n(ZEe,"A",{href:!0});var yXr=s(xB);Vlo=r(yXr,"DebertaV2Model"),yXr.forEach(t),Xlo=r(ZEe," (DeBERTa-v2 model)"),ZEe.forEach(t),zlo=i(M),pp=n(M,"LI",{});var e3e=s(pp);sre=n(e3e,"STRONG",{});var LXr=s(sre);Qlo=r(LXr,"decision_transformer"),LXr.forEach(t),Wlo=r(e3e," \u2014 "),kB=n(e3e,"A",{href:!0});var xXr=s(kB);Hlo=r(xXr,"DecisionTransformerModel"),xXr.forEach(t),Ulo=r(e3e," (Decision Transformer model)"),e3e.forEach(t),Jlo=i(M),_p=n(M,"LI",{});var o3e=s(_p);lre=n(o3e,"STRONG",{});var kXr=s(lre);Ylo=r(kXr,"deit"),kXr.forEach(t),Klo=r(o3e," \u2014 "),SB=n(o3e,"A",{href:!0});var SXr=s(SB);Zlo=r(SXr,"DeiTModel"),SXr.forEach(t),eio=r(o3e," (DeiT model)"),o3e.forEach(t),oio=i(M),up=n(M,"LI",{});var r3e=s(up);ire=n(r3e,"STRONG",{});var RXr=s(ire);rio=r(RXr,"detr"),RXr.forEach(t),tio=r(r3e," \u2014 "),RB=n(r3e,"A",{href:!0});var BXr=s(RB);aio=r(BXr,"DetrModel"),BXr.forEach(t),nio=r(r3e," (DETR model)"),r3e.forEach(t),sio=i(M),bp=n(M,"LI",{});var t3e=s(bp);dre=n(t3e,"STRONG",{});var PXr=s(dre);lio=r(PXr,"distilbert"),PXr.forEach(t),iio=r(t3e," \u2014 "),BB=n(t3e,"A",{href:!0});var $Xr=s(BB);dio=r($Xr,"DistilBertModel"),$Xr.forEach(t),cio=r(t3e," (DistilBERT model)"),t3e.forEach(t),fio=i(M),Fp=n(M,"LI",{});var a3e=s(Fp);cre=n(a3e,"STRONG",{});var IXr=s(cre);mio=r(IXr,"dpr"),IXr.forEach(t),gio=r(a3e," \u2014 "),PB=n(a3e,"A",{href:!0});var qXr=s(PB);hio=r(qXr,"DPRQuestionEncoder"),qXr.forEach(t),pio=r(a3e," (DPR model)"),a3e.forEach(t),_io=i(M),vp=n(M,"LI",{});var n3e=s(vp);fre=n(n3e,"STRONG",{});var NXr=s(fre);uio=r(NXr,"dpt"),NXr.forEach(t),bio=r(n3e," \u2014 "),$B=n(n3e,"A",{href:!0});var jXr=s($B);Fio=r(jXr,"DPTModel"),jXr.forEach(t),vio=r(n3e," (DPT model)"),n3e.forEach(t),Tio=i(M),Tp=n(M,"LI",{});var s3e=s(Tp);mre=n(s3e,"STRONG",{});var DXr=s(mre);Mio=r(DXr,"electra"),DXr.forEach(t),Eio=r(s3e," \u2014 "),IB=n(s3e,"A",{href:!0});var GXr=s(IB);Cio=r(GXr,"ElectraModel"),GXr.forEach(t),wio=r(s3e," (ELECTRA model)"),s3e.forEach(t),Aio=i(M),Mp=n(M,"LI",{});var l3e=s(Mp);gre=n(l3e,"STRONG",{});var OXr=s(gre);yio=r(OXr,"flaubert"),OXr.forEach(t),Lio=r(l3e," \u2014 "),qB=n(l3e,"A",{href:!0});var VXr=s(qB);xio=r(VXr,"FlaubertModel"),VXr.forEach(t),kio=r(l3e," (FlauBERT model)"),l3e.forEach(t),Sio=i(M),Ep=n(M,"LI",{});var i3e=s(Ep);hre=n(i3e,"STRONG",{});var XXr=s(hre);Rio=r(XXr,"fnet"),XXr.forEach(t),Bio=r(i3e," \u2014 "),NB=n(i3e,"A",{href:!0});var zXr=s(NB);Pio=r(zXr,"FNetModel"),zXr.forEach(t),$io=r(i3e," (FNet model)"),i3e.forEach(t),Iio=i(M),Cp=n(M,"LI",{});var d3e=s(Cp);pre=n(d3e,"STRONG",{});var QXr=s(pre);qio=r(QXr,"fsmt"),QXr.forEach(t),Nio=r(d3e," \u2014 "),jB=n(d3e,"A",{href:!0});var WXr=s(jB);jio=r(WXr,"FSMTModel"),WXr.forEach(t),Dio=r(d3e," (FairSeq Machine-Translation model)"),d3e.forEach(t),Gio=i(M),Ds=n(M,"LI",{});var g7=s(Ds);_re=n(g7,"STRONG",{});var HXr=s(_re);Oio=r(HXr,"funnel"),HXr.forEach(t),Vio=r(g7," \u2014 "),DB=n(g7,"A",{href:!0});var UXr=s(DB);Xio=r(UXr,"FunnelModel"),UXr.forEach(t),zio=r(g7," or "),GB=n(g7,"A",{href:!0});var JXr=s(GB);Qio=r(JXr,"FunnelBaseModel"),JXr.forEach(t),Wio=r(g7," (Funnel Transformer model)"),g7.forEach(t),Hio=i(M),wp=n(M,"LI",{});var c3e=s(wp);ure=n(c3e,"STRONG",{});var YXr=s(ure);Uio=r(YXr,"glpn"),YXr.forEach(t),Jio=r(c3e," \u2014 "),OB=n(c3e,"A",{href:!0});var KXr=s(OB);Yio=r(KXr,"GLPNModel"),KXr.forEach(t),Kio=r(c3e," (GLPN model)"),c3e.forEach(t),Zio=i(M),Ap=n(M,"LI",{});var f3e=s(Ap);bre=n(f3e,"STRONG",{});var ZXr=s(bre);edo=r(ZXr,"gpt2"),ZXr.forEach(t),odo=r(f3e," \u2014 "),VB=n(f3e,"A",{href:!0});var ezr=s(VB);rdo=r(ezr,"GPT2Model"),ezr.forEach(t),tdo=r(f3e," (OpenAI GPT-2 model)"),f3e.forEach(t),ado=i(M),yp=n(M,"LI",{});var m3e=s(yp);Fre=n(m3e,"STRONG",{});var ozr=s(Fre);ndo=r(ozr,"gpt_neo"),ozr.forEach(t),sdo=r(m3e," \u2014 "),XB=n(m3e,"A",{href:!0});var rzr=s(XB);ldo=r(rzr,"GPTNeoModel"),rzr.forEach(t),ido=r(m3e," (GPT Neo model)"),m3e.forEach(t),ddo=i(M),Lp=n(M,"LI",{});var g3e=s(Lp);vre=n(g3e,"STRONG",{});var tzr=s(vre);cdo=r(tzr,"gptj"),tzr.forEach(t),fdo=r(g3e," \u2014 "),zB=n(g3e,"A",{href:!0});var azr=s(zB);mdo=r(azr,"GPTJModel"),azr.forEach(t),gdo=r(g3e," (GPT-J model)"),g3e.forEach(t),hdo=i(M),xp=n(M,"LI",{});var h3e=s(xp);Tre=n(h3e,"STRONG",{});var nzr=s(Tre);pdo=r(nzr,"hubert"),nzr.forEach(t),_do=r(h3e," \u2014 "),QB=n(h3e,"A",{href:!0});var szr=s(QB);udo=r(szr,"HubertModel"),szr.forEach(t),bdo=r(h3e," (Hubert model)"),h3e.forEach(t),Fdo=i(M),kp=n(M,"LI",{});var p3e=s(kp);Mre=n(p3e,"STRONG",{});var lzr=s(Mre);vdo=r(lzr,"ibert"),lzr.forEach(t),Tdo=r(p3e," \u2014 "),WB=n(p3e,"A",{href:!0});var izr=s(WB);Mdo=r(izr,"IBertModel"),izr.forEach(t),Edo=r(p3e," (I-BERT model)"),p3e.forEach(t),Cdo=i(M),Sp=n(M,"LI",{});var _3e=s(Sp);Ere=n(_3e,"STRONG",{});var dzr=s(Ere);wdo=r(dzr,"imagegpt"),dzr.forEach(t),Ado=r(_3e," \u2014 "),HB=n(_3e,"A",{href:!0});var czr=s(HB);ydo=r(czr,"ImageGPTModel"),czr.forEach(t),Ldo=r(_3e," (ImageGPT model)"),_3e.forEach(t),xdo=i(M),Rp=n(M,"LI",{});var u3e=s(Rp);Cre=n(u3e,"STRONG",{});var fzr=s(Cre);kdo=r(fzr,"layoutlm"),fzr.forEach(t),Sdo=r(u3e," \u2014 "),UB=n(u3e,"A",{href:!0});var mzr=s(UB);Rdo=r(mzr,"LayoutLMModel"),mzr.forEach(t),Bdo=r(u3e," (LayoutLM model)"),u3e.forEach(t),Pdo=i(M),Bp=n(M,"LI",{});var b3e=s(Bp);wre=n(b3e,"STRONG",{});var gzr=s(wre);$do=r(gzr,"layoutlmv2"),gzr.forEach(t),Ido=r(b3e," \u2014 "),JB=n(b3e,"A",{href:!0});var hzr=s(JB);qdo=r(hzr,"LayoutLMv2Model"),hzr.forEach(t),Ndo=r(b3e," (LayoutLMv2 model)"),b3e.forEach(t),jdo=i(M),Pp=n(M,"LI",{});var F3e=s(Pp);Are=n(F3e,"STRONG",{});var pzr=s(Are);Ddo=r(pzr,"led"),pzr.forEach(t),Gdo=r(F3e," \u2014 "),YB=n(F3e,"A",{href:!0});var _zr=s(YB);Odo=r(_zr,"LEDModel"),_zr.forEach(t),Vdo=r(F3e," (LED model)"),F3e.forEach(t),Xdo=i(M),$p=n(M,"LI",{});var v3e=s($p);yre=n(v3e,"STRONG",{});var uzr=s(yre);zdo=r(uzr,"longformer"),uzr.forEach(t),Qdo=r(v3e," \u2014 "),KB=n(v3e,"A",{href:!0});var bzr=s(KB);Wdo=r(bzr,"LongformerModel"),bzr.forEach(t),Hdo=r(v3e," (Longformer model)"),v3e.forEach(t),Udo=i(M),Ip=n(M,"LI",{});var T3e=s(Ip);Lre=n(T3e,"STRONG",{});var Fzr=s(Lre);Jdo=r(Fzr,"luke"),Fzr.forEach(t),Ydo=r(T3e," \u2014 "),ZB=n(T3e,"A",{href:!0});var vzr=s(ZB);Kdo=r(vzr,"LukeModel"),vzr.forEach(t),Zdo=r(T3e," (LUKE model)"),T3e.forEach(t),eco=i(M),qp=n(M,"LI",{});var M3e=s(qp);xre=n(M3e,"STRONG",{});var Tzr=s(xre);oco=r(Tzr,"lxmert"),Tzr.forEach(t),rco=r(M3e," \u2014 "),eP=n(M3e,"A",{href:!0});var Mzr=s(eP);tco=r(Mzr,"LxmertModel"),Mzr.forEach(t),aco=r(M3e," (LXMERT model)"),M3e.forEach(t),nco=i(M),Np=n(M,"LI",{});var E3e=s(Np);kre=n(E3e,"STRONG",{});var Ezr=s(kre);sco=r(Ezr,"m2m_100"),Ezr.forEach(t),lco=r(E3e," \u2014 "),oP=n(E3e,"A",{href:!0});var Czr=s(oP);ico=r(Czr,"M2M100Model"),Czr.forEach(t),dco=r(E3e," (M2M100 model)"),E3e.forEach(t),cco=i(M),jp=n(M,"LI",{});var C3e=s(jp);Sre=n(C3e,"STRONG",{});var wzr=s(Sre);fco=r(wzr,"marian"),wzr.forEach(t),mco=r(C3e," \u2014 "),rP=n(C3e,"A",{href:!0});var Azr=s(rP);gco=r(Azr,"MarianModel"),Azr.forEach(t),hco=r(C3e," (Marian model)"),C3e.forEach(t),pco=i(M),Dp=n(M,"LI",{});var w3e=s(Dp);Rre=n(w3e,"STRONG",{});var yzr=s(Rre);_co=r(yzr,"maskformer"),yzr.forEach(t),uco=r(w3e," \u2014 "),tP=n(w3e,"A",{href:!0});var Lzr=s(tP);bco=r(Lzr,"MaskFormerModel"),Lzr.forEach(t),Fco=r(w3e," (MaskFormer model)"),w3e.forEach(t),vco=i(M),Gp=n(M,"LI",{});var A3e=s(Gp);Bre=n(A3e,"STRONG",{});var xzr=s(Bre);Tco=r(xzr,"mbart"),xzr.forEach(t),Mco=r(A3e," \u2014 "),aP=n(A3e,"A",{href:!0});var kzr=s(aP);Eco=r(kzr,"MBartModel"),kzr.forEach(t),Cco=r(A3e," (mBART model)"),A3e.forEach(t),wco=i(M),Op=n(M,"LI",{});var y3e=s(Op);Pre=n(y3e,"STRONG",{});var Szr=s(Pre);Aco=r(Szr,"megatron-bert"),Szr.forEach(t),yco=r(y3e," \u2014 "),nP=n(y3e,"A",{href:!0});var Rzr=s(nP);Lco=r(Rzr,"MegatronBertModel"),Rzr.forEach(t),xco=r(y3e," (MegatronBert model)"),y3e.forEach(t),kco=i(M),Vp=n(M,"LI",{});var L3e=s(Vp);$re=n(L3e,"STRONG",{});var Bzr=s($re);Sco=r(Bzr,"mobilebert"),Bzr.forEach(t),Rco=r(L3e," \u2014 "),sP=n(L3e,"A",{href:!0});var Pzr=s(sP);Bco=r(Pzr,"MobileBertModel"),Pzr.forEach(t),Pco=r(L3e," (MobileBERT model)"),L3e.forEach(t),$co=i(M),Xp=n(M,"LI",{});var x3e=s(Xp);Ire=n(x3e,"STRONG",{});var $zr=s(Ire);Ico=r($zr,"mpnet"),$zr.forEach(t),qco=r(x3e," \u2014 "),lP=n(x3e,"A",{href:!0});var Izr=s(lP);Nco=r(Izr,"MPNetModel"),Izr.forEach(t),jco=r(x3e," (MPNet model)"),x3e.forEach(t),Dco=i(M),zp=n(M,"LI",{});var k3e=s(zp);qre=n(k3e,"STRONG",{});var qzr=s(qre);Gco=r(qzr,"mt5"),qzr.forEach(t),Oco=r(k3e," \u2014 "),iP=n(k3e,"A",{href:!0});var Nzr=s(iP);Vco=r(Nzr,"MT5Model"),Nzr.forEach(t),Xco=r(k3e," (mT5 model)"),k3e.forEach(t),zco=i(M),Qp=n(M,"LI",{});var S3e=s(Qp);Nre=n(S3e,"STRONG",{});var jzr=s(Nre);Qco=r(jzr,"nystromformer"),jzr.forEach(t),Wco=r(S3e," \u2014 "),dP=n(S3e,"A",{href:!0});var Dzr=s(dP);Hco=r(Dzr,"NystromformerModel"),Dzr.forEach(t),Uco=r(S3e," (Nystromformer model)"),S3e.forEach(t),Jco=i(M),Wp=n(M,"LI",{});var R3e=s(Wp);jre=n(R3e,"STRONG",{});var Gzr=s(jre);Yco=r(Gzr,"openai-gpt"),Gzr.forEach(t),Kco=r(R3e," \u2014 "),cP=n(R3e,"A",{href:!0});var Ozr=s(cP);Zco=r(Ozr,"OpenAIGPTModel"),Ozr.forEach(t),efo=r(R3e," (OpenAI GPT model)"),R3e.forEach(t),ofo=i(M),Hp=n(M,"LI",{});var B3e=s(Hp);Dre=n(B3e,"STRONG",{});var Vzr=s(Dre);rfo=r(Vzr,"pegasus"),Vzr.forEach(t),tfo=r(B3e," \u2014 "),fP=n(B3e,"A",{href:!0});var Xzr=s(fP);afo=r(Xzr,"PegasusModel"),Xzr.forEach(t),nfo=r(B3e," (Pegasus model)"),B3e.forEach(t),sfo=i(M),Up=n(M,"LI",{});var P3e=s(Up);Gre=n(P3e,"STRONG",{});var zzr=s(Gre);lfo=r(zzr,"perceiver"),zzr.forEach(t),ifo=r(P3e," \u2014 "),mP=n(P3e,"A",{href:!0});var Qzr=s(mP);dfo=r(Qzr,"PerceiverModel"),Qzr.forEach(t),cfo=r(P3e," (Perceiver model)"),P3e.forEach(t),ffo=i(M),Jp=n(M,"LI",{});var $3e=s(Jp);Ore=n($3e,"STRONG",{});var Wzr=s(Ore);mfo=r(Wzr,"plbart"),Wzr.forEach(t),gfo=r($3e," \u2014 "),gP=n($3e,"A",{href:!0});var Hzr=s(gP);hfo=r(Hzr,"PLBartModel"),Hzr.forEach(t),pfo=r($3e," (PLBart model)"),$3e.forEach(t),_fo=i(M),Yp=n(M,"LI",{});var I3e=s(Yp);Vre=n(I3e,"STRONG",{});var Uzr=s(Vre);ufo=r(Uzr,"poolformer"),Uzr.forEach(t),bfo=r(I3e," \u2014 "),hP=n(I3e,"A",{href:!0});var Jzr=s(hP);Ffo=r(Jzr,"PoolFormerModel"),Jzr.forEach(t),vfo=r(I3e," (PoolFormer model)"),I3e.forEach(t),Tfo=i(M),Kp=n(M,"LI",{});var q3e=s(Kp);Xre=n(q3e,"STRONG",{});var Yzr=s(Xre);Mfo=r(Yzr,"prophetnet"),Yzr.forEach(t),Efo=r(q3e," \u2014 "),pP=n(q3e,"A",{href:!0});var Kzr=s(pP);Cfo=r(Kzr,"ProphetNetModel"),Kzr.forEach(t),wfo=r(q3e," (ProphetNet model)"),q3e.forEach(t),Afo=i(M),Zp=n(M,"LI",{});var N3e=s(Zp);zre=n(N3e,"STRONG",{});var Zzr=s(zre);yfo=r(Zzr,"qdqbert"),Zzr.forEach(t),Lfo=r(N3e," \u2014 "),_P=n(N3e,"A",{href:!0});var eQr=s(_P);xfo=r(eQr,"QDQBertModel"),eQr.forEach(t),kfo=r(N3e," (QDQBert model)"),N3e.forEach(t),Sfo=i(M),e_=n(M,"LI",{});var j3e=s(e_);Qre=n(j3e,"STRONG",{});var oQr=s(Qre);Rfo=r(oQr,"reformer"),oQr.forEach(t),Bfo=r(j3e," \u2014 "),uP=n(j3e,"A",{href:!0});var rQr=s(uP);Pfo=r(rQr,"ReformerModel"),rQr.forEach(t),$fo=r(j3e," (Reformer model)"),j3e.forEach(t),Ifo=i(M),o_=n(M,"LI",{});var D3e=s(o_);Wre=n(D3e,"STRONG",{});var tQr=s(Wre);qfo=r(tQr,"regnet"),tQr.forEach(t),Nfo=r(D3e," \u2014 "),bP=n(D3e,"A",{href:!0});var aQr=s(bP);jfo=r(aQr,"RegNetModel"),aQr.forEach(t),Dfo=r(D3e," (RegNet model)"),D3e.forEach(t),Gfo=i(M),r_=n(M,"LI",{});var G3e=s(r_);Hre=n(G3e,"STRONG",{});var nQr=s(Hre);Ofo=r(nQr,"rembert"),nQr.forEach(t),Vfo=r(G3e," \u2014 "),FP=n(G3e,"A",{href:!0});var sQr=s(FP);Xfo=r(sQr,"RemBertModel"),sQr.forEach(t),zfo=r(G3e," (RemBERT model)"),G3e.forEach(t),Qfo=i(M),t_=n(M,"LI",{});var O3e=s(t_);Ure=n(O3e,"STRONG",{});var lQr=s(Ure);Wfo=r(lQr,"resnet"),lQr.forEach(t),Hfo=r(O3e," \u2014 "),vP=n(O3e,"A",{href:!0});var iQr=s(vP);Ufo=r(iQr,"ResNetModel"),iQr.forEach(t),Jfo=r(O3e," (ResNet model)"),O3e.forEach(t),Yfo=i(M),a_=n(M,"LI",{});var V3e=s(a_);Jre=n(V3e,"STRONG",{});var dQr=s(Jre);Kfo=r(dQr,"retribert"),dQr.forEach(t),Zfo=r(V3e," \u2014 "),TP=n(V3e,"A",{href:!0});var cQr=s(TP);emo=r(cQr,"RetriBertModel"),cQr.forEach(t),omo=r(V3e," (RetriBERT model)"),V3e.forEach(t),rmo=i(M),n_=n(M,"LI",{});var X3e=s(n_);Yre=n(X3e,"STRONG",{});var fQr=s(Yre);tmo=r(fQr,"roberta"),fQr.forEach(t),amo=r(X3e," \u2014 "),MP=n(X3e,"A",{href:!0});var mQr=s(MP);nmo=r(mQr,"RobertaModel"),mQr.forEach(t),smo=r(X3e," (RoBERTa model)"),X3e.forEach(t),lmo=i(M),s_=n(M,"LI",{});var z3e=s(s_);Kre=n(z3e,"STRONG",{});var gQr=s(Kre);imo=r(gQr,"roformer"),gQr.forEach(t),dmo=r(z3e," \u2014 "),EP=n(z3e,"A",{href:!0});var hQr=s(EP);cmo=r(hQr,"RoFormerModel"),hQr.forEach(t),fmo=r(z3e," (RoFormer model)"),z3e.forEach(t),mmo=i(M),l_=n(M,"LI",{});var Q3e=s(l_);Zre=n(Q3e,"STRONG",{});var pQr=s(Zre);gmo=r(pQr,"segformer"),pQr.forEach(t),hmo=r(Q3e," \u2014 "),CP=n(Q3e,"A",{href:!0});var _Qr=s(CP);pmo=r(_Qr,"SegformerModel"),_Qr.forEach(t),_mo=r(Q3e," (SegFormer model)"),Q3e.forEach(t),umo=i(M),i_=n(M,"LI",{});var W3e=s(i_);ete=n(W3e,"STRONG",{});var uQr=s(ete);bmo=r(uQr,"sew"),uQr.forEach(t),Fmo=r(W3e," \u2014 "),wP=n(W3e,"A",{href:!0});var bQr=s(wP);vmo=r(bQr,"SEWModel"),bQr.forEach(t),Tmo=r(W3e," (SEW model)"),W3e.forEach(t),Mmo=i(M),d_=n(M,"LI",{});var H3e=s(d_);ote=n(H3e,"STRONG",{});var FQr=s(ote);Emo=r(FQr,"sew-d"),FQr.forEach(t),Cmo=r(H3e," \u2014 "),AP=n(H3e,"A",{href:!0});var vQr=s(AP);wmo=r(vQr,"SEWDModel"),vQr.forEach(t),Amo=r(H3e," (SEW-D model)"),H3e.forEach(t),ymo=i(M),c_=n(M,"LI",{});var U3e=s(c_);rte=n(U3e,"STRONG",{});var TQr=s(rte);Lmo=r(TQr,"speech_to_text"),TQr.forEach(t),xmo=r(U3e," \u2014 "),yP=n(U3e,"A",{href:!0});var MQr=s(yP);kmo=r(MQr,"Speech2TextModel"),MQr.forEach(t),Smo=r(U3e," (Speech2Text model)"),U3e.forEach(t),Rmo=i(M),f_=n(M,"LI",{});var J3e=s(f_);tte=n(J3e,"STRONG",{});var EQr=s(tte);Bmo=r(EQr,"splinter"),EQr.forEach(t),Pmo=r(J3e," \u2014 "),LP=n(J3e,"A",{href:!0});var CQr=s(LP);$mo=r(CQr,"SplinterModel"),CQr.forEach(t),Imo=r(J3e," (Splinter model)"),J3e.forEach(t),qmo=i(M),m_=n(M,"LI",{});var Y3e=s(m_);ate=n(Y3e,"STRONG",{});var wQr=s(ate);Nmo=r(wQr,"squeezebert"),wQr.forEach(t),jmo=r(Y3e," \u2014 "),xP=n(Y3e,"A",{href:!0});var AQr=s(xP);Dmo=r(AQr,"SqueezeBertModel"),AQr.forEach(t),Gmo=r(Y3e," (SqueezeBERT model)"),Y3e.forEach(t),Omo=i(M),g_=n(M,"LI",{});var K3e=s(g_);nte=n(K3e,"STRONG",{});var yQr=s(nte);Vmo=r(yQr,"swin"),yQr.forEach(t),Xmo=r(K3e," \u2014 "),kP=n(K3e,"A",{href:!0});var LQr=s(kP);zmo=r(LQr,"SwinModel"),LQr.forEach(t),Qmo=r(K3e," (Swin model)"),K3e.forEach(t),Wmo=i(M),h_=n(M,"LI",{});var Z3e=s(h_);ste=n(Z3e,"STRONG",{});var xQr=s(ste);Hmo=r(xQr,"t5"),xQr.forEach(t),Umo=r(Z3e," \u2014 "),SP=n(Z3e,"A",{href:!0});var kQr=s(SP);Jmo=r(kQr,"T5Model"),kQr.forEach(t),Ymo=r(Z3e," (T5 model)"),Z3e.forEach(t),Kmo=i(M),p_=n(M,"LI",{});var eCe=s(p_);lte=n(eCe,"STRONG",{});var SQr=s(lte);Zmo=r(SQr,"tapas"),SQr.forEach(t),ego=r(eCe," \u2014 "),RP=n(eCe,"A",{href:!0});var RQr=s(RP);ogo=r(RQr,"TapasModel"),RQr.forEach(t),rgo=r(eCe," (TAPAS model)"),eCe.forEach(t),tgo=i(M),__=n(M,"LI",{});var oCe=s(__);ite=n(oCe,"STRONG",{});var BQr=s(ite);ago=r(BQr,"transfo-xl"),BQr.forEach(t),ngo=r(oCe," \u2014 "),BP=n(oCe,"A",{href:!0});var PQr=s(BP);sgo=r(PQr,"TransfoXLModel"),PQr.forEach(t),lgo=r(oCe," (Transformer-XL model)"),oCe.forEach(t),igo=i(M),u_=n(M,"LI",{});var rCe=s(u_);dte=n(rCe,"STRONG",{});var $Qr=s(dte);dgo=r($Qr,"unispeech"),$Qr.forEach(t),cgo=r(rCe," \u2014 "),PP=n(rCe,"A",{href:!0});var IQr=s(PP);fgo=r(IQr,"UniSpeechModel"),IQr.forEach(t),mgo=r(rCe," (UniSpeech model)"),rCe.forEach(t),ggo=i(M),b_=n(M,"LI",{});var tCe=s(b_);cte=n(tCe,"STRONG",{});var qQr=s(cte);hgo=r(qQr,"unispeech-sat"),qQr.forEach(t),pgo=r(tCe," \u2014 "),$P=n(tCe,"A",{href:!0});var NQr=s($P);_go=r(NQr,"UniSpeechSatModel"),NQr.forEach(t),ugo=r(tCe," (UniSpeechSat model)"),tCe.forEach(t),bgo=i(M),F_=n(M,"LI",{});var aCe=s(F_);fte=n(aCe,"STRONG",{});var jQr=s(fte);Fgo=r(jQr,"van"),jQr.forEach(t),vgo=r(aCe," \u2014 "),IP=n(aCe,"A",{href:!0});var DQr=s(IP);Tgo=r(DQr,"VanModel"),DQr.forEach(t),Mgo=r(aCe," (VAN model)"),aCe.forEach(t),Ego=i(M),v_=n(M,"LI",{});var nCe=s(v_);mte=n(nCe,"STRONG",{});var GQr=s(mte);Cgo=r(GQr,"vilt"),GQr.forEach(t),wgo=r(nCe," \u2014 "),qP=n(nCe,"A",{href:!0});var OQr=s(qP);Ago=r(OQr,"ViltModel"),OQr.forEach(t),ygo=r(nCe," (ViLT model)"),nCe.forEach(t),Lgo=i(M),T_=n(M,"LI",{});var sCe=s(T_);gte=n(sCe,"STRONG",{});var VQr=s(gte);xgo=r(VQr,"vision-text-dual-encoder"),VQr.forEach(t),kgo=r(sCe," \u2014 "),NP=n(sCe,"A",{href:!0});var XQr=s(NP);Sgo=r(XQr,"VisionTextDualEncoderModel"),XQr.forEach(t),Rgo=r(sCe," (VisionTextDualEncoder model)"),sCe.forEach(t),Bgo=i(M),M_=n(M,"LI",{});var lCe=s(M_);hte=n(lCe,"STRONG",{});var zQr=s(hte);Pgo=r(zQr,"visual_bert"),zQr.forEach(t),$go=r(lCe," \u2014 "),jP=n(lCe,"A",{href:!0});var QQr=s(jP);Igo=r(QQr,"VisualBertModel"),QQr.forEach(t),qgo=r(lCe," (VisualBert model)"),lCe.forEach(t),Ngo=i(M),E_=n(M,"LI",{});var iCe=s(E_);pte=n(iCe,"STRONG",{});var WQr=s(pte);jgo=r(WQr,"vit"),WQr.forEach(t),Dgo=r(iCe," \u2014 "),DP=n(iCe,"A",{href:!0});var HQr=s(DP);Ggo=r(HQr,"ViTModel"),HQr.forEach(t),Ogo=r(iCe," (ViT model)"),iCe.forEach(t),Vgo=i(M),C_=n(M,"LI",{});var dCe=s(C_);_te=n(dCe,"STRONG",{});var UQr=s(_te);Xgo=r(UQr,"vit_mae"),UQr.forEach(t),zgo=r(dCe," \u2014 "),GP=n(dCe,"A",{href:!0});var JQr=s(GP);Qgo=r(JQr,"ViTMAEModel"),JQr.forEach(t),Wgo=r(dCe," (ViTMAE model)"),dCe.forEach(t),Hgo=i(M),w_=n(M,"LI",{});var cCe=s(w_);ute=n(cCe,"STRONG",{});var YQr=s(ute);Ugo=r(YQr,"wav2vec2"),YQr.forEach(t),Jgo=r(cCe," \u2014 "),OP=n(cCe,"A",{href:!0});var KQr=s(OP);Ygo=r(KQr,"Wav2Vec2Model"),KQr.forEach(t),Kgo=r(cCe," (Wav2Vec2 model)"),cCe.forEach(t),Zgo=i(M),A_=n(M,"LI",{});var fCe=s(A_);bte=n(fCe,"STRONG",{});var ZQr=s(bte);eho=r(ZQr,"wavlm"),ZQr.forEach(t),oho=r(fCe," \u2014 "),VP=n(fCe,"A",{href:!0});var eWr=s(VP);rho=r(eWr,"WavLMModel"),eWr.forEach(t),tho=r(fCe," (WavLM model)"),fCe.forEach(t),aho=i(M),y_=n(M,"LI",{});var mCe=s(y_);Fte=n(mCe,"STRONG",{});var oWr=s(Fte);nho=r(oWr,"xglm"),oWr.forEach(t),sho=r(mCe," \u2014 "),XP=n(mCe,"A",{href:!0});var rWr=s(XP);lho=r(rWr,"XGLMModel"),rWr.forEach(t),iho=r(mCe," (XGLM model)"),mCe.forEach(t),dho=i(M),L_=n(M,"LI",{});var gCe=s(L_);vte=n(gCe,"STRONG",{});var tWr=s(vte);cho=r(tWr,"xlm"),tWr.forEach(t),fho=r(gCe," \u2014 "),zP=n(gCe,"A",{href:!0});var aWr=s(zP);mho=r(aWr,"XLMModel"),aWr.forEach(t),gho=r(gCe," (XLM model)"),gCe.forEach(t),hho=i(M),x_=n(M,"LI",{});var hCe=s(x_);Tte=n(hCe,"STRONG",{});var nWr=s(Tte);pho=r(nWr,"xlm-prophetnet"),nWr.forEach(t),_ho=r(hCe," \u2014 "),QP=n(hCe,"A",{href:!0});var sWr=s(QP);uho=r(sWr,"XLMProphetNetModel"),sWr.forEach(t),bho=r(hCe," (XLMProphetNet model)"),hCe.forEach(t),Fho=i(M),k_=n(M,"LI",{});var pCe=s(k_);Mte=n(pCe,"STRONG",{});var lWr=s(Mte);vho=r(lWr,"xlm-roberta"),lWr.forEach(t),Tho=r(pCe," \u2014 "),WP=n(pCe,"A",{href:!0});var iWr=s(WP);Mho=r(iWr,"XLMRobertaModel"),iWr.forEach(t),Eho=r(pCe," (XLM-RoBERTa model)"),pCe.forEach(t),Cho=i(M),S_=n(M,"LI",{});var _Ce=s(S_);Ete=n(_Ce,"STRONG",{});var dWr=s(Ete);who=r(dWr,"xlm-roberta-xl"),dWr.forEach(t),Aho=r(_Ce," \u2014 "),HP=n(_Ce,"A",{href:!0});var cWr=s(HP);yho=r(cWr,"XLMRobertaXLModel"),cWr.forEach(t),Lho=r(_Ce," (XLM-RoBERTa-XL model)"),_Ce.forEach(t),xho=i(M),R_=n(M,"LI",{});var uCe=s(R_);Cte=n(uCe,"STRONG",{});var fWr=s(Cte);kho=r(fWr,"xlnet"),fWr.forEach(t),Sho=r(uCe," \u2014 "),UP=n(uCe,"A",{href:!0});var mWr=s(UP);Rho=r(mWr,"XLNetModel"),mWr.forEach(t),Bho=r(uCe," (XLNet model)"),uCe.forEach(t),Pho=i(M),B_=n(M,"LI",{});var bCe=s(B_);wte=n(bCe,"STRONG",{});var gWr=s(wte);$ho=r(gWr,"yoso"),gWr.forEach(t),Iho=r(bCe," \u2014 "),JP=n(bCe,"A",{href:!0});var hWr=s(JP);qho=r(hWr,"YosoModel"),hWr.forEach(t),Nho=r(bCe," (YOSO model)"),bCe.forEach(t),M.forEach(t),jho=i(Dt),P_=n(Dt,"P",{});var FCe=s(P_);Dho=r(FCe,"The model is set in evaluation mode by default using "),Ate=n(FCe,"CODE",{});var pWr=s(Ate);Gho=r(pWr,"model.eval()"),pWr.forEach(t),Oho=r(FCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yte=n(FCe,"CODE",{});var _Wr=s(yte);Vho=r(_Wr,"model.train()"),_Wr.forEach(t),FCe.forEach(t),Xho=i(Dt),Lte=n(Dt,"P",{});var uWr=s(Lte);zho=r(uWr,"Examples:"),uWr.forEach(t),Qho=i(Dt),m(dw.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),SRe=i(c),ed=n(c,"H2",{class:!0});var DPe=s(ed);$_=n(DPe,"A",{id:!0,class:!0,href:!0});var bWr=s($_);xte=n(bWr,"SPAN",{});var FWr=s(xte);m(cw.$$.fragment,FWr),FWr.forEach(t),bWr.forEach(t),Who=i(DPe),kte=n(DPe,"SPAN",{});var vWr=s(kte);Hho=r(vWr,"AutoModelForPreTraining"),vWr.forEach(t),DPe.forEach(t),RRe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(fw.$$.fragment,Us),Uho=i(Us),od=n(Us,"P",{});var pU=s(od);Jho=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YP=n(pU,"A",{href:!0});var TWr=s(YP);Yho=r(TWr,"from_pretrained()"),TWr.forEach(t),Kho=r(pU," class method or the "),KP=n(pU,"A",{href:!0});var MWr=s(KP);Zho=r(MWr,"from_config()"),MWr.forEach(t),epo=r(pU,` class
method.`),pU.forEach(t),opo=i(Us),mw=n(Us,"P",{});var GPe=s(mw);rpo=r(GPe,"This class cannot be instantiated directly using "),Ste=n(GPe,"CODE",{});var EWr=s(Ste);tpo=r(EWr,"__init__()"),EWr.forEach(t),apo=r(GPe," (throws an error)."),GPe.forEach(t),npo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(gw.$$.fragment,Js),spo=i(Js),Rte=n(Js,"P",{});var CWr=s(Rte);lpo=r(CWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CWr.forEach(t),ipo=i(Js),rd=n(Js,"P",{});var _U=s(rd);dpo=r(_U,`Note:
Loading a model from its configuration file does `),Bte=n(_U,"STRONG",{});var wWr=s(Bte);cpo=r(wWr,"not"),wWr.forEach(t),fpo=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZP=n(_U,"A",{href:!0});var AWr=s(ZP);mpo=r(AWr,"from_pretrained()"),AWr.forEach(t),gpo=r(_U," to load the model weights."),_U.forEach(t),hpo=i(Js),Pte=n(Js,"P",{});var yWr=s(Pte);ppo=r(yWr,"Examples:"),yWr.forEach(t),_po=i(Js),m(hw.$$.fragment,Js),Js.forEach(t),upo=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(pw.$$.fragment,Gt),bpo=i(Gt),$te=n(Gt,"P",{});var LWr=s($te);Fpo=r(LWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LWr.forEach(t),vpo=i(Gt),za=n(Gt,"P",{});var L3=s(za);Tpo=r(L3,"The model class to instantiate is selected based on the "),Ite=n(L3,"CODE",{});var xWr=s(Ite);Mpo=r(xWr,"model_type"),xWr.forEach(t),Epo=r(L3,` property of the config object (either
passed as an argument or loaded from `),qte=n(L3,"CODE",{});var kWr=s(qte);Cpo=r(kWr,"pretrained_model_name_or_path"),kWr.forEach(t),wpo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nte=n(L3,"CODE",{});var SWr=s(Nte);Apo=r(SWr,"pretrained_model_name_or_path"),SWr.forEach(t),ypo=r(L3,":"),L3.forEach(t),Lpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);I_=n(B,"LI",{});var vCe=s(I_);jte=n(vCe,"STRONG",{});var RWr=s(jte);xpo=r(RWr,"albert"),RWr.forEach(t),kpo=r(vCe," \u2014 "),e$=n(vCe,"A",{href:!0});var BWr=s(e$);Spo=r(BWr,"AlbertForPreTraining"),BWr.forEach(t),Rpo=r(vCe," (ALBERT model)"),vCe.forEach(t),Bpo=i(B),q_=n(B,"LI",{});var TCe=s(q_);Dte=n(TCe,"STRONG",{});var PWr=s(Dte);Ppo=r(PWr,"bart"),PWr.forEach(t),$po=r(TCe," \u2014 "),o$=n(TCe,"A",{href:!0});var $Wr=s(o$);Ipo=r($Wr,"BartForConditionalGeneration"),$Wr.forEach(t),qpo=r(TCe," (BART model)"),TCe.forEach(t),Npo=i(B),N_=n(B,"LI",{});var MCe=s(N_);Gte=n(MCe,"STRONG",{});var IWr=s(Gte);jpo=r(IWr,"bert"),IWr.forEach(t),Dpo=r(MCe," \u2014 "),r$=n(MCe,"A",{href:!0});var qWr=s(r$);Gpo=r(qWr,"BertForPreTraining"),qWr.forEach(t),Opo=r(MCe," (BERT model)"),MCe.forEach(t),Vpo=i(B),j_=n(B,"LI",{});var ECe=s(j_);Ote=n(ECe,"STRONG",{});var NWr=s(Ote);Xpo=r(NWr,"big_bird"),NWr.forEach(t),zpo=r(ECe," \u2014 "),t$=n(ECe,"A",{href:!0});var jWr=s(t$);Qpo=r(jWr,"BigBirdForPreTraining"),jWr.forEach(t),Wpo=r(ECe," (BigBird model)"),ECe.forEach(t),Hpo=i(B),D_=n(B,"LI",{});var CCe=s(D_);Vte=n(CCe,"STRONG",{});var DWr=s(Vte);Upo=r(DWr,"camembert"),DWr.forEach(t),Jpo=r(CCe," \u2014 "),a$=n(CCe,"A",{href:!0});var GWr=s(a$);Ypo=r(GWr,"CamembertForMaskedLM"),GWr.forEach(t),Kpo=r(CCe," (CamemBERT model)"),CCe.forEach(t),Zpo=i(B),G_=n(B,"LI",{});var wCe=s(G_);Xte=n(wCe,"STRONG",{});var OWr=s(Xte);e_o=r(OWr,"ctrl"),OWr.forEach(t),o_o=r(wCe," \u2014 "),n$=n(wCe,"A",{href:!0});var VWr=s(n$);r_o=r(VWr,"CTRLLMHeadModel"),VWr.forEach(t),t_o=r(wCe," (CTRL model)"),wCe.forEach(t),a_o=i(B),O_=n(B,"LI",{});var ACe=s(O_);zte=n(ACe,"STRONG",{});var XWr=s(zte);n_o=r(XWr,"data2vec-text"),XWr.forEach(t),s_o=r(ACe," \u2014 "),s$=n(ACe,"A",{href:!0});var zWr=s(s$);l_o=r(zWr,"Data2VecTextForMaskedLM"),zWr.forEach(t),i_o=r(ACe," (Data2VecText model)"),ACe.forEach(t),d_o=i(B),V_=n(B,"LI",{});var yCe=s(V_);Qte=n(yCe,"STRONG",{});var QWr=s(Qte);c_o=r(QWr,"deberta"),QWr.forEach(t),f_o=r(yCe," \u2014 "),l$=n(yCe,"A",{href:!0});var WWr=s(l$);m_o=r(WWr,"DebertaForMaskedLM"),WWr.forEach(t),g_o=r(yCe," (DeBERTa model)"),yCe.forEach(t),h_o=i(B),X_=n(B,"LI",{});var LCe=s(X_);Wte=n(LCe,"STRONG",{});var HWr=s(Wte);p_o=r(HWr,"deberta-v2"),HWr.forEach(t),__o=r(LCe," \u2014 "),i$=n(LCe,"A",{href:!0});var UWr=s(i$);u_o=r(UWr,"DebertaV2ForMaskedLM"),UWr.forEach(t),b_o=r(LCe," (DeBERTa-v2 model)"),LCe.forEach(t),F_o=i(B),z_=n(B,"LI",{});var xCe=s(z_);Hte=n(xCe,"STRONG",{});var JWr=s(Hte);v_o=r(JWr,"distilbert"),JWr.forEach(t),T_o=r(xCe," \u2014 "),d$=n(xCe,"A",{href:!0});var YWr=s(d$);M_o=r(YWr,"DistilBertForMaskedLM"),YWr.forEach(t),E_o=r(xCe," (DistilBERT model)"),xCe.forEach(t),C_o=i(B),Q_=n(B,"LI",{});var kCe=s(Q_);Ute=n(kCe,"STRONG",{});var KWr=s(Ute);w_o=r(KWr,"electra"),KWr.forEach(t),A_o=r(kCe," \u2014 "),c$=n(kCe,"A",{href:!0});var ZWr=s(c$);y_o=r(ZWr,"ElectraForPreTraining"),ZWr.forEach(t),L_o=r(kCe," (ELECTRA model)"),kCe.forEach(t),x_o=i(B),W_=n(B,"LI",{});var SCe=s(W_);Jte=n(SCe,"STRONG",{});var eHr=s(Jte);k_o=r(eHr,"flaubert"),eHr.forEach(t),S_o=r(SCe," \u2014 "),f$=n(SCe,"A",{href:!0});var oHr=s(f$);R_o=r(oHr,"FlaubertWithLMHeadModel"),oHr.forEach(t),B_o=r(SCe," (FlauBERT model)"),SCe.forEach(t),P_o=i(B),H_=n(B,"LI",{});var RCe=s(H_);Yte=n(RCe,"STRONG",{});var rHr=s(Yte);$_o=r(rHr,"fnet"),rHr.forEach(t),I_o=r(RCe," \u2014 "),m$=n(RCe,"A",{href:!0});var tHr=s(m$);q_o=r(tHr,"FNetForPreTraining"),tHr.forEach(t),N_o=r(RCe," (FNet model)"),RCe.forEach(t),j_o=i(B),U_=n(B,"LI",{});var BCe=s(U_);Kte=n(BCe,"STRONG",{});var aHr=s(Kte);D_o=r(aHr,"fsmt"),aHr.forEach(t),G_o=r(BCe," \u2014 "),g$=n(BCe,"A",{href:!0});var nHr=s(g$);O_o=r(nHr,"FSMTForConditionalGeneration"),nHr.forEach(t),V_o=r(BCe," (FairSeq Machine-Translation model)"),BCe.forEach(t),X_o=i(B),J_=n(B,"LI",{});var PCe=s(J_);Zte=n(PCe,"STRONG",{});var sHr=s(Zte);z_o=r(sHr,"funnel"),sHr.forEach(t),Q_o=r(PCe," \u2014 "),h$=n(PCe,"A",{href:!0});var lHr=s(h$);W_o=r(lHr,"FunnelForPreTraining"),lHr.forEach(t),H_o=r(PCe," (Funnel Transformer model)"),PCe.forEach(t),U_o=i(B),Y_=n(B,"LI",{});var $Ce=s(Y_);eae=n($Ce,"STRONG",{});var iHr=s(eae);J_o=r(iHr,"gpt2"),iHr.forEach(t),Y_o=r($Ce," \u2014 "),p$=n($Ce,"A",{href:!0});var dHr=s(p$);K_o=r(dHr,"GPT2LMHeadModel"),dHr.forEach(t),Z_o=r($Ce," (OpenAI GPT-2 model)"),$Ce.forEach(t),euo=i(B),K_=n(B,"LI",{});var ICe=s(K_);oae=n(ICe,"STRONG",{});var cHr=s(oae);ouo=r(cHr,"ibert"),cHr.forEach(t),ruo=r(ICe," \u2014 "),_$=n(ICe,"A",{href:!0});var fHr=s(_$);tuo=r(fHr,"IBertForMaskedLM"),fHr.forEach(t),auo=r(ICe," (I-BERT model)"),ICe.forEach(t),nuo=i(B),Z_=n(B,"LI",{});var qCe=s(Z_);rae=n(qCe,"STRONG",{});var mHr=s(rae);suo=r(mHr,"layoutlm"),mHr.forEach(t),luo=r(qCe," \u2014 "),u$=n(qCe,"A",{href:!0});var gHr=s(u$);iuo=r(gHr,"LayoutLMForMaskedLM"),gHr.forEach(t),duo=r(qCe," (LayoutLM model)"),qCe.forEach(t),cuo=i(B),eu=n(B,"LI",{});var NCe=s(eu);tae=n(NCe,"STRONG",{});var hHr=s(tae);fuo=r(hHr,"longformer"),hHr.forEach(t),muo=r(NCe," \u2014 "),b$=n(NCe,"A",{href:!0});var pHr=s(b$);guo=r(pHr,"LongformerForMaskedLM"),pHr.forEach(t),huo=r(NCe," (Longformer model)"),NCe.forEach(t),puo=i(B),ou=n(B,"LI",{});var jCe=s(ou);aae=n(jCe,"STRONG",{});var _Hr=s(aae);_uo=r(_Hr,"lxmert"),_Hr.forEach(t),uuo=r(jCe," \u2014 "),F$=n(jCe,"A",{href:!0});var uHr=s(F$);buo=r(uHr,"LxmertForPreTraining"),uHr.forEach(t),Fuo=r(jCe," (LXMERT model)"),jCe.forEach(t),vuo=i(B),ru=n(B,"LI",{});var DCe=s(ru);nae=n(DCe,"STRONG",{});var bHr=s(nae);Tuo=r(bHr,"megatron-bert"),bHr.forEach(t),Muo=r(DCe," \u2014 "),v$=n(DCe,"A",{href:!0});var FHr=s(v$);Euo=r(FHr,"MegatronBertForPreTraining"),FHr.forEach(t),Cuo=r(DCe," (MegatronBert model)"),DCe.forEach(t),wuo=i(B),tu=n(B,"LI",{});var GCe=s(tu);sae=n(GCe,"STRONG",{});var vHr=s(sae);Auo=r(vHr,"mobilebert"),vHr.forEach(t),yuo=r(GCe," \u2014 "),T$=n(GCe,"A",{href:!0});var THr=s(T$);Luo=r(THr,"MobileBertForPreTraining"),THr.forEach(t),xuo=r(GCe," (MobileBERT model)"),GCe.forEach(t),kuo=i(B),au=n(B,"LI",{});var OCe=s(au);lae=n(OCe,"STRONG",{});var MHr=s(lae);Suo=r(MHr,"mpnet"),MHr.forEach(t),Ruo=r(OCe," \u2014 "),M$=n(OCe,"A",{href:!0});var EHr=s(M$);Buo=r(EHr,"MPNetForMaskedLM"),EHr.forEach(t),Puo=r(OCe," (MPNet model)"),OCe.forEach(t),$uo=i(B),nu=n(B,"LI",{});var VCe=s(nu);iae=n(VCe,"STRONG",{});var CHr=s(iae);Iuo=r(CHr,"openai-gpt"),CHr.forEach(t),quo=r(VCe," \u2014 "),E$=n(VCe,"A",{href:!0});var wHr=s(E$);Nuo=r(wHr,"OpenAIGPTLMHeadModel"),wHr.forEach(t),juo=r(VCe," (OpenAI GPT model)"),VCe.forEach(t),Duo=i(B),su=n(B,"LI",{});var XCe=s(su);dae=n(XCe,"STRONG",{});var AHr=s(dae);Guo=r(AHr,"retribert"),AHr.forEach(t),Ouo=r(XCe," \u2014 "),C$=n(XCe,"A",{href:!0});var yHr=s(C$);Vuo=r(yHr,"RetriBertModel"),yHr.forEach(t),Xuo=r(XCe," (RetriBERT model)"),XCe.forEach(t),zuo=i(B),lu=n(B,"LI",{});var zCe=s(lu);cae=n(zCe,"STRONG",{});var LHr=s(cae);Quo=r(LHr,"roberta"),LHr.forEach(t),Wuo=r(zCe," \u2014 "),w$=n(zCe,"A",{href:!0});var xHr=s(w$);Huo=r(xHr,"RobertaForMaskedLM"),xHr.forEach(t),Uuo=r(zCe," (RoBERTa model)"),zCe.forEach(t),Juo=i(B),iu=n(B,"LI",{});var QCe=s(iu);fae=n(QCe,"STRONG",{});var kHr=s(fae);Yuo=r(kHr,"squeezebert"),kHr.forEach(t),Kuo=r(QCe," \u2014 "),A$=n(QCe,"A",{href:!0});var SHr=s(A$);Zuo=r(SHr,"SqueezeBertForMaskedLM"),SHr.forEach(t),e5o=r(QCe," (SqueezeBERT model)"),QCe.forEach(t),o5o=i(B),du=n(B,"LI",{});var WCe=s(du);mae=n(WCe,"STRONG",{});var RHr=s(mae);r5o=r(RHr,"t5"),RHr.forEach(t),t5o=r(WCe," \u2014 "),y$=n(WCe,"A",{href:!0});var BHr=s(y$);a5o=r(BHr,"T5ForConditionalGeneration"),BHr.forEach(t),n5o=r(WCe," (T5 model)"),WCe.forEach(t),s5o=i(B),cu=n(B,"LI",{});var HCe=s(cu);gae=n(HCe,"STRONG",{});var PHr=s(gae);l5o=r(PHr,"tapas"),PHr.forEach(t),i5o=r(HCe," \u2014 "),L$=n(HCe,"A",{href:!0});var $Hr=s(L$);d5o=r($Hr,"TapasForMaskedLM"),$Hr.forEach(t),c5o=r(HCe," (TAPAS model)"),HCe.forEach(t),f5o=i(B),fu=n(B,"LI",{});var UCe=s(fu);hae=n(UCe,"STRONG",{});var IHr=s(hae);m5o=r(IHr,"transfo-xl"),IHr.forEach(t),g5o=r(UCe," \u2014 "),x$=n(UCe,"A",{href:!0});var qHr=s(x$);h5o=r(qHr,"TransfoXLLMHeadModel"),qHr.forEach(t),p5o=r(UCe," (Transformer-XL model)"),UCe.forEach(t),_5o=i(B),mu=n(B,"LI",{});var JCe=s(mu);pae=n(JCe,"STRONG",{});var NHr=s(pae);u5o=r(NHr,"unispeech"),NHr.forEach(t),b5o=r(JCe," \u2014 "),k$=n(JCe,"A",{href:!0});var jHr=s(k$);F5o=r(jHr,"UniSpeechForPreTraining"),jHr.forEach(t),v5o=r(JCe," (UniSpeech model)"),JCe.forEach(t),T5o=i(B),gu=n(B,"LI",{});var YCe=s(gu);_ae=n(YCe,"STRONG",{});var DHr=s(_ae);M5o=r(DHr,"unispeech-sat"),DHr.forEach(t),E5o=r(YCe," \u2014 "),S$=n(YCe,"A",{href:!0});var GHr=s(S$);C5o=r(GHr,"UniSpeechSatForPreTraining"),GHr.forEach(t),w5o=r(YCe," (UniSpeechSat model)"),YCe.forEach(t),A5o=i(B),hu=n(B,"LI",{});var KCe=s(hu);uae=n(KCe,"STRONG",{});var OHr=s(uae);y5o=r(OHr,"visual_bert"),OHr.forEach(t),L5o=r(KCe," \u2014 "),R$=n(KCe,"A",{href:!0});var VHr=s(R$);x5o=r(VHr,"VisualBertForPreTraining"),VHr.forEach(t),k5o=r(KCe," (VisualBert model)"),KCe.forEach(t),S5o=i(B),pu=n(B,"LI",{});var ZCe=s(pu);bae=n(ZCe,"STRONG",{});var XHr=s(bae);R5o=r(XHr,"vit_mae"),XHr.forEach(t),B5o=r(ZCe," \u2014 "),B$=n(ZCe,"A",{href:!0});var zHr=s(B$);P5o=r(zHr,"ViTMAEForPreTraining"),zHr.forEach(t),$5o=r(ZCe," (ViTMAE model)"),ZCe.forEach(t),I5o=i(B),_u=n(B,"LI",{});var ewe=s(_u);Fae=n(ewe,"STRONG",{});var QHr=s(Fae);q5o=r(QHr,"wav2vec2"),QHr.forEach(t),N5o=r(ewe," \u2014 "),P$=n(ewe,"A",{href:!0});var WHr=s(P$);j5o=r(WHr,"Wav2Vec2ForPreTraining"),WHr.forEach(t),D5o=r(ewe," (Wav2Vec2 model)"),ewe.forEach(t),G5o=i(B),uu=n(B,"LI",{});var owe=s(uu);vae=n(owe,"STRONG",{});var HHr=s(vae);O5o=r(HHr,"xlm"),HHr.forEach(t),V5o=r(owe," \u2014 "),$$=n(owe,"A",{href:!0});var UHr=s($$);X5o=r(UHr,"XLMWithLMHeadModel"),UHr.forEach(t),z5o=r(owe," (XLM model)"),owe.forEach(t),Q5o=i(B),bu=n(B,"LI",{});var rwe=s(bu);Tae=n(rwe,"STRONG",{});var JHr=s(Tae);W5o=r(JHr,"xlm-roberta"),JHr.forEach(t),H5o=r(rwe," \u2014 "),I$=n(rwe,"A",{href:!0});var YHr=s(I$);U5o=r(YHr,"XLMRobertaForMaskedLM"),YHr.forEach(t),J5o=r(rwe," (XLM-RoBERTa model)"),rwe.forEach(t),Y5o=i(B),Fu=n(B,"LI",{});var twe=s(Fu);Mae=n(twe,"STRONG",{});var KHr=s(Mae);K5o=r(KHr,"xlm-roberta-xl"),KHr.forEach(t),Z5o=r(twe," \u2014 "),q$=n(twe,"A",{href:!0});var ZHr=s(q$);e2o=r(ZHr,"XLMRobertaXLForMaskedLM"),ZHr.forEach(t),o2o=r(twe," (XLM-RoBERTa-XL model)"),twe.forEach(t),r2o=i(B),vu=n(B,"LI",{});var awe=s(vu);Eae=n(awe,"STRONG",{});var eUr=s(Eae);t2o=r(eUr,"xlnet"),eUr.forEach(t),a2o=r(awe," \u2014 "),N$=n(awe,"A",{href:!0});var oUr=s(N$);n2o=r(oUr,"XLNetLMHeadModel"),oUr.forEach(t),s2o=r(awe," (XLNet model)"),awe.forEach(t),B.forEach(t),l2o=i(Gt),Tu=n(Gt,"P",{});var nwe=s(Tu);i2o=r(nwe,"The model is set in evaluation mode by default using "),Cae=n(nwe,"CODE",{});var rUr=s(Cae);d2o=r(rUr,"model.eval()"),rUr.forEach(t),c2o=r(nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=n(nwe,"CODE",{});var tUr=s(wae);f2o=r(tUr,"model.train()"),tUr.forEach(t),nwe.forEach(t),m2o=i(Gt),Aae=n(Gt,"P",{});var aUr=s(Aae);g2o=r(aUr,"Examples:"),aUr.forEach(t),h2o=i(Gt),m(_w.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),BRe=i(c),td=n(c,"H2",{class:!0});var OPe=s(td);Mu=n(OPe,"A",{id:!0,class:!0,href:!0});var nUr=s(Mu);yae=n(nUr,"SPAN",{});var sUr=s(yae);m(uw.$$.fragment,sUr),sUr.forEach(t),nUr.forEach(t),p2o=i(OPe),Lae=n(OPe,"SPAN",{});var lUr=s(Lae);_2o=r(lUr,"AutoModelForCausalLM"),lUr.forEach(t),OPe.forEach(t),PRe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(bw.$$.fragment,Ys),u2o=i(Ys),ad=n(Ys,"P",{});var uU=s(ad);b2o=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),j$=n(uU,"A",{href:!0});var iUr=s(j$);F2o=r(iUr,"from_pretrained()"),iUr.forEach(t),v2o=r(uU," class method or the "),D$=n(uU,"A",{href:!0});var dUr=s(D$);T2o=r(dUr,"from_config()"),dUr.forEach(t),M2o=r(uU,` class
method.`),uU.forEach(t),E2o=i(Ys),Fw=n(Ys,"P",{});var VPe=s(Fw);C2o=r(VPe,"This class cannot be instantiated directly using "),xae=n(VPe,"CODE",{});var cUr=s(xae);w2o=r(cUr,"__init__()"),cUr.forEach(t),A2o=r(VPe," (throws an error)."),VPe.forEach(t),y2o=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(vw.$$.fragment,Ks),L2o=i(Ks),kae=n(Ks,"P",{});var fUr=s(kae);x2o=r(fUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fUr.forEach(t),k2o=i(Ks),nd=n(Ks,"P",{});var bU=s(nd);S2o=r(bU,`Note:
Loading a model from its configuration file does `),Sae=n(bU,"STRONG",{});var mUr=s(Sae);R2o=r(mUr,"not"),mUr.forEach(t),B2o=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),G$=n(bU,"A",{href:!0});var gUr=s(G$);P2o=r(gUr,"from_pretrained()"),gUr.forEach(t),$2o=r(bU," to load the model weights."),bU.forEach(t),I2o=i(Ks),Rae=n(Ks,"P",{});var hUr=s(Rae);q2o=r(hUr,"Examples:"),hUr.forEach(t),N2o=i(Ks),m(Tw.$$.fragment,Ks),Ks.forEach(t),j2o=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(Mw.$$.fragment,Ot),D2o=i(Ot),Bae=n(Ot,"P",{});var pUr=s(Bae);G2o=r(pUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pUr.forEach(t),O2o=i(Ot),Qa=n(Ot,"P",{});var x3=s(Qa);V2o=r(x3,"The model class to instantiate is selected based on the "),Pae=n(x3,"CODE",{});var _Ur=s(Pae);X2o=r(_Ur,"model_type"),_Ur.forEach(t),z2o=r(x3,` property of the config object (either
passed as an argument or loaded from `),$ae=n(x3,"CODE",{});var uUr=s($ae);Q2o=r(uUr,"pretrained_model_name_or_path"),uUr.forEach(t),W2o=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iae=n(x3,"CODE",{});var bUr=s(Iae);H2o=r(bUr,"pretrained_model_name_or_path"),bUr.forEach(t),U2o=r(x3,":"),x3.forEach(t),J2o=i(Ot),$=n(Ot,"UL",{});var q=s($);Eu=n(q,"LI",{});var swe=s(Eu);qae=n(swe,"STRONG",{});var FUr=s(qae);Y2o=r(FUr,"bart"),FUr.forEach(t),K2o=r(swe," \u2014 "),O$=n(swe,"A",{href:!0});var vUr=s(O$);Z2o=r(vUr,"BartForCausalLM"),vUr.forEach(t),e1o=r(swe," (BART model)"),swe.forEach(t),o1o=i(q),Cu=n(q,"LI",{});var lwe=s(Cu);Nae=n(lwe,"STRONG",{});var TUr=s(Nae);r1o=r(TUr,"bert"),TUr.forEach(t),t1o=r(lwe," \u2014 "),V$=n(lwe,"A",{href:!0});var MUr=s(V$);a1o=r(MUr,"BertLMHeadModel"),MUr.forEach(t),n1o=r(lwe," (BERT model)"),lwe.forEach(t),s1o=i(q),wu=n(q,"LI",{});var iwe=s(wu);jae=n(iwe,"STRONG",{});var EUr=s(jae);l1o=r(EUr,"bert-generation"),EUr.forEach(t),i1o=r(iwe," \u2014 "),X$=n(iwe,"A",{href:!0});var CUr=s(X$);d1o=r(CUr,"BertGenerationDecoder"),CUr.forEach(t),c1o=r(iwe," (Bert Generation model)"),iwe.forEach(t),f1o=i(q),Au=n(q,"LI",{});var dwe=s(Au);Dae=n(dwe,"STRONG",{});var wUr=s(Dae);m1o=r(wUr,"big_bird"),wUr.forEach(t),g1o=r(dwe," \u2014 "),z$=n(dwe,"A",{href:!0});var AUr=s(z$);h1o=r(AUr,"BigBirdForCausalLM"),AUr.forEach(t),p1o=r(dwe," (BigBird model)"),dwe.forEach(t),_1o=i(q),yu=n(q,"LI",{});var cwe=s(yu);Gae=n(cwe,"STRONG",{});var yUr=s(Gae);u1o=r(yUr,"bigbird_pegasus"),yUr.forEach(t),b1o=r(cwe," \u2014 "),Q$=n(cwe,"A",{href:!0});var LUr=s(Q$);F1o=r(LUr,"BigBirdPegasusForCausalLM"),LUr.forEach(t),v1o=r(cwe," (BigBirdPegasus model)"),cwe.forEach(t),T1o=i(q),Lu=n(q,"LI",{});var fwe=s(Lu);Oae=n(fwe,"STRONG",{});var xUr=s(Oae);M1o=r(xUr,"blenderbot"),xUr.forEach(t),E1o=r(fwe," \u2014 "),W$=n(fwe,"A",{href:!0});var kUr=s(W$);C1o=r(kUr,"BlenderbotForCausalLM"),kUr.forEach(t),w1o=r(fwe," (Blenderbot model)"),fwe.forEach(t),A1o=i(q),xu=n(q,"LI",{});var mwe=s(xu);Vae=n(mwe,"STRONG",{});var SUr=s(Vae);y1o=r(SUr,"blenderbot-small"),SUr.forEach(t),L1o=r(mwe," \u2014 "),H$=n(mwe,"A",{href:!0});var RUr=s(H$);x1o=r(RUr,"BlenderbotSmallForCausalLM"),RUr.forEach(t),k1o=r(mwe," (BlenderbotSmall model)"),mwe.forEach(t),S1o=i(q),ku=n(q,"LI",{});var gwe=s(ku);Xae=n(gwe,"STRONG",{});var BUr=s(Xae);R1o=r(BUr,"camembert"),BUr.forEach(t),B1o=r(gwe," \u2014 "),U$=n(gwe,"A",{href:!0});var PUr=s(U$);P1o=r(PUr,"CamembertForCausalLM"),PUr.forEach(t),$1o=r(gwe," (CamemBERT model)"),gwe.forEach(t),I1o=i(q),Su=n(q,"LI",{});var hwe=s(Su);zae=n(hwe,"STRONG",{});var $Ur=s(zae);q1o=r($Ur,"ctrl"),$Ur.forEach(t),N1o=r(hwe," \u2014 "),J$=n(hwe,"A",{href:!0});var IUr=s(J$);j1o=r(IUr,"CTRLLMHeadModel"),IUr.forEach(t),D1o=r(hwe," (CTRL model)"),hwe.forEach(t),G1o=i(q),Ru=n(q,"LI",{});var pwe=s(Ru);Qae=n(pwe,"STRONG",{});var qUr=s(Qae);O1o=r(qUr,"data2vec-text"),qUr.forEach(t),V1o=r(pwe," \u2014 "),Y$=n(pwe,"A",{href:!0});var NUr=s(Y$);X1o=r(NUr,"Data2VecTextForCausalLM"),NUr.forEach(t),z1o=r(pwe," (Data2VecText model)"),pwe.forEach(t),Q1o=i(q),Bu=n(q,"LI",{});var _we=s(Bu);Wae=n(_we,"STRONG",{});var jUr=s(Wae);W1o=r(jUr,"electra"),jUr.forEach(t),H1o=r(_we," \u2014 "),K$=n(_we,"A",{href:!0});var DUr=s(K$);U1o=r(DUr,"ElectraForCausalLM"),DUr.forEach(t),J1o=r(_we," (ELECTRA model)"),_we.forEach(t),Y1o=i(q),Pu=n(q,"LI",{});var uwe=s(Pu);Hae=n(uwe,"STRONG",{});var GUr=s(Hae);K1o=r(GUr,"gpt2"),GUr.forEach(t),Z1o=r(uwe," \u2014 "),Z$=n(uwe,"A",{href:!0});var OUr=s(Z$);ebo=r(OUr,"GPT2LMHeadModel"),OUr.forEach(t),obo=r(uwe," (OpenAI GPT-2 model)"),uwe.forEach(t),rbo=i(q),$u=n(q,"LI",{});var bwe=s($u);Uae=n(bwe,"STRONG",{});var VUr=s(Uae);tbo=r(VUr,"gpt_neo"),VUr.forEach(t),abo=r(bwe," \u2014 "),eI=n(bwe,"A",{href:!0});var XUr=s(eI);nbo=r(XUr,"GPTNeoForCausalLM"),XUr.forEach(t),sbo=r(bwe," (GPT Neo model)"),bwe.forEach(t),lbo=i(q),Iu=n(q,"LI",{});var Fwe=s(Iu);Jae=n(Fwe,"STRONG",{});var zUr=s(Jae);ibo=r(zUr,"gptj"),zUr.forEach(t),dbo=r(Fwe," \u2014 "),oI=n(Fwe,"A",{href:!0});var QUr=s(oI);cbo=r(QUr,"GPTJForCausalLM"),QUr.forEach(t),fbo=r(Fwe," (GPT-J model)"),Fwe.forEach(t),mbo=i(q),qu=n(q,"LI",{});var vwe=s(qu);Yae=n(vwe,"STRONG",{});var WUr=s(Yae);gbo=r(WUr,"marian"),WUr.forEach(t),hbo=r(vwe," \u2014 "),rI=n(vwe,"A",{href:!0});var HUr=s(rI);pbo=r(HUr,"MarianForCausalLM"),HUr.forEach(t),_bo=r(vwe," (Marian model)"),vwe.forEach(t),ubo=i(q),Nu=n(q,"LI",{});var Twe=s(Nu);Kae=n(Twe,"STRONG",{});var UUr=s(Kae);bbo=r(UUr,"mbart"),UUr.forEach(t),Fbo=r(Twe," \u2014 "),tI=n(Twe,"A",{href:!0});var JUr=s(tI);vbo=r(JUr,"MBartForCausalLM"),JUr.forEach(t),Tbo=r(Twe," (mBART model)"),Twe.forEach(t),Mbo=i(q),ju=n(q,"LI",{});var Mwe=s(ju);Zae=n(Mwe,"STRONG",{});var YUr=s(Zae);Ebo=r(YUr,"megatron-bert"),YUr.forEach(t),Cbo=r(Mwe," \u2014 "),aI=n(Mwe,"A",{href:!0});var KUr=s(aI);wbo=r(KUr,"MegatronBertForCausalLM"),KUr.forEach(t),Abo=r(Mwe," (MegatronBert model)"),Mwe.forEach(t),ybo=i(q),Du=n(q,"LI",{});var Ewe=s(Du);ene=n(Ewe,"STRONG",{});var ZUr=s(ene);Lbo=r(ZUr,"openai-gpt"),ZUr.forEach(t),xbo=r(Ewe," \u2014 "),nI=n(Ewe,"A",{href:!0});var eJr=s(nI);kbo=r(eJr,"OpenAIGPTLMHeadModel"),eJr.forEach(t),Sbo=r(Ewe," (OpenAI GPT model)"),Ewe.forEach(t),Rbo=i(q),Gu=n(q,"LI",{});var Cwe=s(Gu);one=n(Cwe,"STRONG",{});var oJr=s(one);Bbo=r(oJr,"pegasus"),oJr.forEach(t),Pbo=r(Cwe," \u2014 "),sI=n(Cwe,"A",{href:!0});var rJr=s(sI);$bo=r(rJr,"PegasusForCausalLM"),rJr.forEach(t),Ibo=r(Cwe," (Pegasus model)"),Cwe.forEach(t),qbo=i(q),Ou=n(q,"LI",{});var wwe=s(Ou);rne=n(wwe,"STRONG",{});var tJr=s(rne);Nbo=r(tJr,"plbart"),tJr.forEach(t),jbo=r(wwe," \u2014 "),lI=n(wwe,"A",{href:!0});var aJr=s(lI);Dbo=r(aJr,"PLBartForCausalLM"),aJr.forEach(t),Gbo=r(wwe," (PLBart model)"),wwe.forEach(t),Obo=i(q),Vu=n(q,"LI",{});var Awe=s(Vu);tne=n(Awe,"STRONG",{});var nJr=s(tne);Vbo=r(nJr,"prophetnet"),nJr.forEach(t),Xbo=r(Awe," \u2014 "),iI=n(Awe,"A",{href:!0});var sJr=s(iI);zbo=r(sJr,"ProphetNetForCausalLM"),sJr.forEach(t),Qbo=r(Awe," (ProphetNet model)"),Awe.forEach(t),Wbo=i(q),Xu=n(q,"LI",{});var ywe=s(Xu);ane=n(ywe,"STRONG",{});var lJr=s(ane);Hbo=r(lJr,"qdqbert"),lJr.forEach(t),Ubo=r(ywe," \u2014 "),dI=n(ywe,"A",{href:!0});var iJr=s(dI);Jbo=r(iJr,"QDQBertLMHeadModel"),iJr.forEach(t),Ybo=r(ywe," (QDQBert model)"),ywe.forEach(t),Kbo=i(q),zu=n(q,"LI",{});var Lwe=s(zu);nne=n(Lwe,"STRONG",{});var dJr=s(nne);Zbo=r(dJr,"reformer"),dJr.forEach(t),eFo=r(Lwe," \u2014 "),cI=n(Lwe,"A",{href:!0});var cJr=s(cI);oFo=r(cJr,"ReformerModelWithLMHead"),cJr.forEach(t),rFo=r(Lwe," (Reformer model)"),Lwe.forEach(t),tFo=i(q),Qu=n(q,"LI",{});var xwe=s(Qu);sne=n(xwe,"STRONG",{});var fJr=s(sne);aFo=r(fJr,"rembert"),fJr.forEach(t),nFo=r(xwe," \u2014 "),fI=n(xwe,"A",{href:!0});var mJr=s(fI);sFo=r(mJr,"RemBertForCausalLM"),mJr.forEach(t),lFo=r(xwe," (RemBERT model)"),xwe.forEach(t),iFo=i(q),Wu=n(q,"LI",{});var kwe=s(Wu);lne=n(kwe,"STRONG",{});var gJr=s(lne);dFo=r(gJr,"roberta"),gJr.forEach(t),cFo=r(kwe," \u2014 "),mI=n(kwe,"A",{href:!0});var hJr=s(mI);fFo=r(hJr,"RobertaForCausalLM"),hJr.forEach(t),mFo=r(kwe," (RoBERTa model)"),kwe.forEach(t),gFo=i(q),Hu=n(q,"LI",{});var Swe=s(Hu);ine=n(Swe,"STRONG",{});var pJr=s(ine);hFo=r(pJr,"roformer"),pJr.forEach(t),pFo=r(Swe," \u2014 "),gI=n(Swe,"A",{href:!0});var _Jr=s(gI);_Fo=r(_Jr,"RoFormerForCausalLM"),_Jr.forEach(t),uFo=r(Swe," (RoFormer model)"),Swe.forEach(t),bFo=i(q),Uu=n(q,"LI",{});var Rwe=s(Uu);dne=n(Rwe,"STRONG",{});var uJr=s(dne);FFo=r(uJr,"speech_to_text_2"),uJr.forEach(t),vFo=r(Rwe," \u2014 "),hI=n(Rwe,"A",{href:!0});var bJr=s(hI);TFo=r(bJr,"Speech2Text2ForCausalLM"),bJr.forEach(t),MFo=r(Rwe," (Speech2Text2 model)"),Rwe.forEach(t),EFo=i(q),Ju=n(q,"LI",{});var Bwe=s(Ju);cne=n(Bwe,"STRONG",{});var FJr=s(cne);CFo=r(FJr,"transfo-xl"),FJr.forEach(t),wFo=r(Bwe," \u2014 "),pI=n(Bwe,"A",{href:!0});var vJr=s(pI);AFo=r(vJr,"TransfoXLLMHeadModel"),vJr.forEach(t),yFo=r(Bwe," (Transformer-XL model)"),Bwe.forEach(t),LFo=i(q),Yu=n(q,"LI",{});var Pwe=s(Yu);fne=n(Pwe,"STRONG",{});var TJr=s(fne);xFo=r(TJr,"trocr"),TJr.forEach(t),kFo=r(Pwe," \u2014 "),_I=n(Pwe,"A",{href:!0});var MJr=s(_I);SFo=r(MJr,"TrOCRForCausalLM"),MJr.forEach(t),RFo=r(Pwe," (TrOCR model)"),Pwe.forEach(t),BFo=i(q),Ku=n(q,"LI",{});var $we=s(Ku);mne=n($we,"STRONG",{});var EJr=s(mne);PFo=r(EJr,"xglm"),EJr.forEach(t),$Fo=r($we," \u2014 "),uI=n($we,"A",{href:!0});var CJr=s(uI);IFo=r(CJr,"XGLMForCausalLM"),CJr.forEach(t),qFo=r($we," (XGLM model)"),$we.forEach(t),NFo=i(q),Zu=n(q,"LI",{});var Iwe=s(Zu);gne=n(Iwe,"STRONG",{});var wJr=s(gne);jFo=r(wJr,"xlm"),wJr.forEach(t),DFo=r(Iwe," \u2014 "),bI=n(Iwe,"A",{href:!0});var AJr=s(bI);GFo=r(AJr,"XLMWithLMHeadModel"),AJr.forEach(t),OFo=r(Iwe," (XLM model)"),Iwe.forEach(t),VFo=i(q),e5=n(q,"LI",{});var qwe=s(e5);hne=n(qwe,"STRONG",{});var yJr=s(hne);XFo=r(yJr,"xlm-prophetnet"),yJr.forEach(t),zFo=r(qwe," \u2014 "),FI=n(qwe,"A",{href:!0});var LJr=s(FI);QFo=r(LJr,"XLMProphetNetForCausalLM"),LJr.forEach(t),WFo=r(qwe," (XLMProphetNet model)"),qwe.forEach(t),HFo=i(q),o5=n(q,"LI",{});var Nwe=s(o5);pne=n(Nwe,"STRONG",{});var xJr=s(pne);UFo=r(xJr,"xlm-roberta"),xJr.forEach(t),JFo=r(Nwe," \u2014 "),vI=n(Nwe,"A",{href:!0});var kJr=s(vI);YFo=r(kJr,"XLMRobertaForCausalLM"),kJr.forEach(t),KFo=r(Nwe," (XLM-RoBERTa model)"),Nwe.forEach(t),ZFo=i(q),r5=n(q,"LI",{});var jwe=s(r5);_ne=n(jwe,"STRONG",{});var SJr=s(_ne);evo=r(SJr,"xlm-roberta-xl"),SJr.forEach(t),ovo=r(jwe," \u2014 "),TI=n(jwe,"A",{href:!0});var RJr=s(TI);rvo=r(RJr,"XLMRobertaXLForCausalLM"),RJr.forEach(t),tvo=r(jwe," (XLM-RoBERTa-XL model)"),jwe.forEach(t),avo=i(q),t5=n(q,"LI",{});var Dwe=s(t5);une=n(Dwe,"STRONG",{});var BJr=s(une);nvo=r(BJr,"xlnet"),BJr.forEach(t),svo=r(Dwe," \u2014 "),MI=n(Dwe,"A",{href:!0});var PJr=s(MI);lvo=r(PJr,"XLNetLMHeadModel"),PJr.forEach(t),ivo=r(Dwe," (XLNet model)"),Dwe.forEach(t),q.forEach(t),dvo=i(Ot),a5=n(Ot,"P",{});var Gwe=s(a5);cvo=r(Gwe,"The model is set in evaluation mode by default using "),bne=n(Gwe,"CODE",{});var $Jr=s(bne);fvo=r($Jr,"model.eval()"),$Jr.forEach(t),mvo=r(Gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=n(Gwe,"CODE",{});var IJr=s(Fne);gvo=r(IJr,"model.train()"),IJr.forEach(t),Gwe.forEach(t),hvo=i(Ot),vne=n(Ot,"P",{});var qJr=s(vne);pvo=r(qJr,"Examples:"),qJr.forEach(t),_vo=i(Ot),m(Ew.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),$Re=i(c),sd=n(c,"H2",{class:!0});var XPe=s(sd);n5=n(XPe,"A",{id:!0,class:!0,href:!0});var NJr=s(n5);Tne=n(NJr,"SPAN",{});var jJr=s(Tne);m(Cw.$$.fragment,jJr),jJr.forEach(t),NJr.forEach(t),uvo=i(XPe),Mne=n(XPe,"SPAN",{});var DJr=s(Mne);bvo=r(DJr,"AutoModelForMaskedLM"),DJr.forEach(t),XPe.forEach(t),IRe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(ww.$$.fragment,Zs),Fvo=i(Zs),ld=n(Zs,"P",{});var FU=s(ld);vvo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EI=n(FU,"A",{href:!0});var GJr=s(EI);Tvo=r(GJr,"from_pretrained()"),GJr.forEach(t),Mvo=r(FU," class method or the "),CI=n(FU,"A",{href:!0});var OJr=s(CI);Evo=r(OJr,"from_config()"),OJr.forEach(t),Cvo=r(FU,` class
method.`),FU.forEach(t),wvo=i(Zs),Aw=n(Zs,"P",{});var zPe=s(Aw);Avo=r(zPe,"This class cannot be instantiated directly using "),Ene=n(zPe,"CODE",{});var VJr=s(Ene);yvo=r(VJr,"__init__()"),VJr.forEach(t),Lvo=r(zPe," (throws an error)."),zPe.forEach(t),xvo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(yw.$$.fragment,el),kvo=i(el),Cne=n(el,"P",{});var XJr=s(Cne);Svo=r(XJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XJr.forEach(t),Rvo=i(el),id=n(el,"P",{});var vU=s(id);Bvo=r(vU,`Note:
Loading a model from its configuration file does `),wne=n(vU,"STRONG",{});var zJr=s(wne);Pvo=r(zJr,"not"),zJr.forEach(t),$vo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wI=n(vU,"A",{href:!0});var QJr=s(wI);Ivo=r(QJr,"from_pretrained()"),QJr.forEach(t),qvo=r(vU," to load the model weights."),vU.forEach(t),Nvo=i(el),Ane=n(el,"P",{});var WJr=s(Ane);jvo=r(WJr,"Examples:"),WJr.forEach(t),Dvo=i(el),m(Lw.$$.fragment,el),el.forEach(t),Gvo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(xw.$$.fragment,Vt),Ovo=i(Vt),yne=n(Vt,"P",{});var HJr=s(yne);Vvo=r(HJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HJr.forEach(t),Xvo=i(Vt),Wa=n(Vt,"P",{});var k3=s(Wa);zvo=r(k3,"The model class to instantiate is selected based on the "),Lne=n(k3,"CODE",{});var UJr=s(Lne);Qvo=r(UJr,"model_type"),UJr.forEach(t),Wvo=r(k3,` property of the config object (either
passed as an argument or loaded from `),xne=n(k3,"CODE",{});var JJr=s(xne);Hvo=r(JJr,"pretrained_model_name_or_path"),JJr.forEach(t),Uvo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(k3,"CODE",{});var YJr=s(kne);Jvo=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),Yvo=r(k3,":"),k3.forEach(t),Kvo=i(Vt),I=n(Vt,"UL",{});var N=s(I);s5=n(N,"LI",{});var Owe=s(s5);Sne=n(Owe,"STRONG",{});var KJr=s(Sne);Zvo=r(KJr,"albert"),KJr.forEach(t),eTo=r(Owe," \u2014 "),AI=n(Owe,"A",{href:!0});var ZJr=s(AI);oTo=r(ZJr,"AlbertForMaskedLM"),ZJr.forEach(t),rTo=r(Owe," (ALBERT model)"),Owe.forEach(t),tTo=i(N),l5=n(N,"LI",{});var Vwe=s(l5);Rne=n(Vwe,"STRONG",{});var eYr=s(Rne);aTo=r(eYr,"bart"),eYr.forEach(t),nTo=r(Vwe," \u2014 "),yI=n(Vwe,"A",{href:!0});var oYr=s(yI);sTo=r(oYr,"BartForConditionalGeneration"),oYr.forEach(t),lTo=r(Vwe," (BART model)"),Vwe.forEach(t),iTo=i(N),i5=n(N,"LI",{});var Xwe=s(i5);Bne=n(Xwe,"STRONG",{});var rYr=s(Bne);dTo=r(rYr,"bert"),rYr.forEach(t),cTo=r(Xwe," \u2014 "),LI=n(Xwe,"A",{href:!0});var tYr=s(LI);fTo=r(tYr,"BertForMaskedLM"),tYr.forEach(t),mTo=r(Xwe," (BERT model)"),Xwe.forEach(t),gTo=i(N),d5=n(N,"LI",{});var zwe=s(d5);Pne=n(zwe,"STRONG",{});var aYr=s(Pne);hTo=r(aYr,"big_bird"),aYr.forEach(t),pTo=r(zwe," \u2014 "),xI=n(zwe,"A",{href:!0});var nYr=s(xI);_To=r(nYr,"BigBirdForMaskedLM"),nYr.forEach(t),uTo=r(zwe," (BigBird model)"),zwe.forEach(t),bTo=i(N),c5=n(N,"LI",{});var Qwe=s(c5);$ne=n(Qwe,"STRONG",{});var sYr=s($ne);FTo=r(sYr,"camembert"),sYr.forEach(t),vTo=r(Qwe," \u2014 "),kI=n(Qwe,"A",{href:!0});var lYr=s(kI);TTo=r(lYr,"CamembertForMaskedLM"),lYr.forEach(t),MTo=r(Qwe," (CamemBERT model)"),Qwe.forEach(t),ETo=i(N),f5=n(N,"LI",{});var Wwe=s(f5);Ine=n(Wwe,"STRONG",{});var iYr=s(Ine);CTo=r(iYr,"convbert"),iYr.forEach(t),wTo=r(Wwe," \u2014 "),SI=n(Wwe,"A",{href:!0});var dYr=s(SI);ATo=r(dYr,"ConvBertForMaskedLM"),dYr.forEach(t),yTo=r(Wwe," (ConvBERT model)"),Wwe.forEach(t),LTo=i(N),m5=n(N,"LI",{});var Hwe=s(m5);qne=n(Hwe,"STRONG",{});var cYr=s(qne);xTo=r(cYr,"data2vec-text"),cYr.forEach(t),kTo=r(Hwe," \u2014 "),RI=n(Hwe,"A",{href:!0});var fYr=s(RI);STo=r(fYr,"Data2VecTextForMaskedLM"),fYr.forEach(t),RTo=r(Hwe," (Data2VecText model)"),Hwe.forEach(t),BTo=i(N),g5=n(N,"LI",{});var Uwe=s(g5);Nne=n(Uwe,"STRONG",{});var mYr=s(Nne);PTo=r(mYr,"deberta"),mYr.forEach(t),$To=r(Uwe," \u2014 "),BI=n(Uwe,"A",{href:!0});var gYr=s(BI);ITo=r(gYr,"DebertaForMaskedLM"),gYr.forEach(t),qTo=r(Uwe," (DeBERTa model)"),Uwe.forEach(t),NTo=i(N),h5=n(N,"LI",{});var Jwe=s(h5);jne=n(Jwe,"STRONG",{});var hYr=s(jne);jTo=r(hYr,"deberta-v2"),hYr.forEach(t),DTo=r(Jwe," \u2014 "),PI=n(Jwe,"A",{href:!0});var pYr=s(PI);GTo=r(pYr,"DebertaV2ForMaskedLM"),pYr.forEach(t),OTo=r(Jwe," (DeBERTa-v2 model)"),Jwe.forEach(t),VTo=i(N),p5=n(N,"LI",{});var Ywe=s(p5);Dne=n(Ywe,"STRONG",{});var _Yr=s(Dne);XTo=r(_Yr,"distilbert"),_Yr.forEach(t),zTo=r(Ywe," \u2014 "),$I=n(Ywe,"A",{href:!0});var uYr=s($I);QTo=r(uYr,"DistilBertForMaskedLM"),uYr.forEach(t),WTo=r(Ywe," (DistilBERT model)"),Ywe.forEach(t),HTo=i(N),_5=n(N,"LI",{});var Kwe=s(_5);Gne=n(Kwe,"STRONG",{});var bYr=s(Gne);UTo=r(bYr,"electra"),bYr.forEach(t),JTo=r(Kwe," \u2014 "),II=n(Kwe,"A",{href:!0});var FYr=s(II);YTo=r(FYr,"ElectraForMaskedLM"),FYr.forEach(t),KTo=r(Kwe," (ELECTRA model)"),Kwe.forEach(t),ZTo=i(N),u5=n(N,"LI",{});var Zwe=s(u5);One=n(Zwe,"STRONG",{});var vYr=s(One);e9o=r(vYr,"flaubert"),vYr.forEach(t),o9o=r(Zwe," \u2014 "),qI=n(Zwe,"A",{href:!0});var TYr=s(qI);r9o=r(TYr,"FlaubertWithLMHeadModel"),TYr.forEach(t),t9o=r(Zwe," (FlauBERT model)"),Zwe.forEach(t),a9o=i(N),b5=n(N,"LI",{});var e6e=s(b5);Vne=n(e6e,"STRONG",{});var MYr=s(Vne);n9o=r(MYr,"fnet"),MYr.forEach(t),s9o=r(e6e," \u2014 "),NI=n(e6e,"A",{href:!0});var EYr=s(NI);l9o=r(EYr,"FNetForMaskedLM"),EYr.forEach(t),i9o=r(e6e," (FNet model)"),e6e.forEach(t),d9o=i(N),F5=n(N,"LI",{});var o6e=s(F5);Xne=n(o6e,"STRONG",{});var CYr=s(Xne);c9o=r(CYr,"funnel"),CYr.forEach(t),f9o=r(o6e," \u2014 "),jI=n(o6e,"A",{href:!0});var wYr=s(jI);m9o=r(wYr,"FunnelForMaskedLM"),wYr.forEach(t),g9o=r(o6e," (Funnel Transformer model)"),o6e.forEach(t),h9o=i(N),v5=n(N,"LI",{});var r6e=s(v5);zne=n(r6e,"STRONG",{});var AYr=s(zne);p9o=r(AYr,"ibert"),AYr.forEach(t),_9o=r(r6e," \u2014 "),DI=n(r6e,"A",{href:!0});var yYr=s(DI);u9o=r(yYr,"IBertForMaskedLM"),yYr.forEach(t),b9o=r(r6e," (I-BERT model)"),r6e.forEach(t),F9o=i(N),T5=n(N,"LI",{});var t6e=s(T5);Qne=n(t6e,"STRONG",{});var LYr=s(Qne);v9o=r(LYr,"layoutlm"),LYr.forEach(t),T9o=r(t6e," \u2014 "),GI=n(t6e,"A",{href:!0});var xYr=s(GI);M9o=r(xYr,"LayoutLMForMaskedLM"),xYr.forEach(t),E9o=r(t6e," (LayoutLM model)"),t6e.forEach(t),C9o=i(N),M5=n(N,"LI",{});var a6e=s(M5);Wne=n(a6e,"STRONG",{});var kYr=s(Wne);w9o=r(kYr,"longformer"),kYr.forEach(t),A9o=r(a6e," \u2014 "),OI=n(a6e,"A",{href:!0});var SYr=s(OI);y9o=r(SYr,"LongformerForMaskedLM"),SYr.forEach(t),L9o=r(a6e," (Longformer model)"),a6e.forEach(t),x9o=i(N),E5=n(N,"LI",{});var n6e=s(E5);Hne=n(n6e,"STRONG",{});var RYr=s(Hne);k9o=r(RYr,"mbart"),RYr.forEach(t),S9o=r(n6e," \u2014 "),VI=n(n6e,"A",{href:!0});var BYr=s(VI);R9o=r(BYr,"MBartForConditionalGeneration"),BYr.forEach(t),B9o=r(n6e," (mBART model)"),n6e.forEach(t),P9o=i(N),C5=n(N,"LI",{});var s6e=s(C5);Une=n(s6e,"STRONG",{});var PYr=s(Une);$9o=r(PYr,"megatron-bert"),PYr.forEach(t),I9o=r(s6e," \u2014 "),XI=n(s6e,"A",{href:!0});var $Yr=s(XI);q9o=r($Yr,"MegatronBertForMaskedLM"),$Yr.forEach(t),N9o=r(s6e," (MegatronBert model)"),s6e.forEach(t),j9o=i(N),w5=n(N,"LI",{});var l6e=s(w5);Jne=n(l6e,"STRONG",{});var IYr=s(Jne);D9o=r(IYr,"mobilebert"),IYr.forEach(t),G9o=r(l6e," \u2014 "),zI=n(l6e,"A",{href:!0});var qYr=s(zI);O9o=r(qYr,"MobileBertForMaskedLM"),qYr.forEach(t),V9o=r(l6e," (MobileBERT model)"),l6e.forEach(t),X9o=i(N),A5=n(N,"LI",{});var i6e=s(A5);Yne=n(i6e,"STRONG",{});var NYr=s(Yne);z9o=r(NYr,"mpnet"),NYr.forEach(t),Q9o=r(i6e," \u2014 "),QI=n(i6e,"A",{href:!0});var jYr=s(QI);W9o=r(jYr,"MPNetForMaskedLM"),jYr.forEach(t),H9o=r(i6e," (MPNet model)"),i6e.forEach(t),U9o=i(N),y5=n(N,"LI",{});var d6e=s(y5);Kne=n(d6e,"STRONG",{});var DYr=s(Kne);J9o=r(DYr,"nystromformer"),DYr.forEach(t),Y9o=r(d6e," \u2014 "),WI=n(d6e,"A",{href:!0});var GYr=s(WI);K9o=r(GYr,"NystromformerForMaskedLM"),GYr.forEach(t),Z9o=r(d6e," (Nystromformer model)"),d6e.forEach(t),eMo=i(N),L5=n(N,"LI",{});var c6e=s(L5);Zne=n(c6e,"STRONG",{});var OYr=s(Zne);oMo=r(OYr,"perceiver"),OYr.forEach(t),rMo=r(c6e," \u2014 "),HI=n(c6e,"A",{href:!0});var VYr=s(HI);tMo=r(VYr,"PerceiverForMaskedLM"),VYr.forEach(t),aMo=r(c6e," (Perceiver model)"),c6e.forEach(t),nMo=i(N),x5=n(N,"LI",{});var f6e=s(x5);ese=n(f6e,"STRONG",{});var XYr=s(ese);sMo=r(XYr,"qdqbert"),XYr.forEach(t),lMo=r(f6e," \u2014 "),UI=n(f6e,"A",{href:!0});var zYr=s(UI);iMo=r(zYr,"QDQBertForMaskedLM"),zYr.forEach(t),dMo=r(f6e," (QDQBert model)"),f6e.forEach(t),cMo=i(N),k5=n(N,"LI",{});var m6e=s(k5);ose=n(m6e,"STRONG",{});var QYr=s(ose);fMo=r(QYr,"reformer"),QYr.forEach(t),mMo=r(m6e," \u2014 "),JI=n(m6e,"A",{href:!0});var WYr=s(JI);gMo=r(WYr,"ReformerForMaskedLM"),WYr.forEach(t),hMo=r(m6e," (Reformer model)"),m6e.forEach(t),pMo=i(N),S5=n(N,"LI",{});var g6e=s(S5);rse=n(g6e,"STRONG",{});var HYr=s(rse);_Mo=r(HYr,"rembert"),HYr.forEach(t),uMo=r(g6e," \u2014 "),YI=n(g6e,"A",{href:!0});var UYr=s(YI);bMo=r(UYr,"RemBertForMaskedLM"),UYr.forEach(t),FMo=r(g6e," (RemBERT model)"),g6e.forEach(t),vMo=i(N),R5=n(N,"LI",{});var h6e=s(R5);tse=n(h6e,"STRONG",{});var JYr=s(tse);TMo=r(JYr,"roberta"),JYr.forEach(t),MMo=r(h6e," \u2014 "),KI=n(h6e,"A",{href:!0});var YYr=s(KI);EMo=r(YYr,"RobertaForMaskedLM"),YYr.forEach(t),CMo=r(h6e," (RoBERTa model)"),h6e.forEach(t),wMo=i(N),B5=n(N,"LI",{});var p6e=s(B5);ase=n(p6e,"STRONG",{});var KYr=s(ase);AMo=r(KYr,"roformer"),KYr.forEach(t),yMo=r(p6e," \u2014 "),ZI=n(p6e,"A",{href:!0});var ZYr=s(ZI);LMo=r(ZYr,"RoFormerForMaskedLM"),ZYr.forEach(t),xMo=r(p6e," (RoFormer model)"),p6e.forEach(t),kMo=i(N),P5=n(N,"LI",{});var _6e=s(P5);nse=n(_6e,"STRONG",{});var eKr=s(nse);SMo=r(eKr,"squeezebert"),eKr.forEach(t),RMo=r(_6e," \u2014 "),eq=n(_6e,"A",{href:!0});var oKr=s(eq);BMo=r(oKr,"SqueezeBertForMaskedLM"),oKr.forEach(t),PMo=r(_6e," (SqueezeBERT model)"),_6e.forEach(t),$Mo=i(N),$5=n(N,"LI",{});var u6e=s($5);sse=n(u6e,"STRONG",{});var rKr=s(sse);IMo=r(rKr,"tapas"),rKr.forEach(t),qMo=r(u6e," \u2014 "),oq=n(u6e,"A",{href:!0});var tKr=s(oq);NMo=r(tKr,"TapasForMaskedLM"),tKr.forEach(t),jMo=r(u6e," (TAPAS model)"),u6e.forEach(t),DMo=i(N),I5=n(N,"LI",{});var b6e=s(I5);lse=n(b6e,"STRONG",{});var aKr=s(lse);GMo=r(aKr,"wav2vec2"),aKr.forEach(t),OMo=r(b6e," \u2014 "),ise=n(b6e,"CODE",{});var nKr=s(ise);VMo=r(nKr,"Wav2Vec2ForMaskedLM"),nKr.forEach(t),XMo=r(b6e," (Wav2Vec2 model)"),b6e.forEach(t),zMo=i(N),q5=n(N,"LI",{});var F6e=s(q5);dse=n(F6e,"STRONG",{});var sKr=s(dse);QMo=r(sKr,"xlm"),sKr.forEach(t),WMo=r(F6e," \u2014 "),rq=n(F6e,"A",{href:!0});var lKr=s(rq);HMo=r(lKr,"XLMWithLMHeadModel"),lKr.forEach(t),UMo=r(F6e," (XLM model)"),F6e.forEach(t),JMo=i(N),N5=n(N,"LI",{});var v6e=s(N5);cse=n(v6e,"STRONG",{});var iKr=s(cse);YMo=r(iKr,"xlm-roberta"),iKr.forEach(t),KMo=r(v6e," \u2014 "),tq=n(v6e,"A",{href:!0});var dKr=s(tq);ZMo=r(dKr,"XLMRobertaForMaskedLM"),dKr.forEach(t),e4o=r(v6e," (XLM-RoBERTa model)"),v6e.forEach(t),o4o=i(N),j5=n(N,"LI",{});var T6e=s(j5);fse=n(T6e,"STRONG",{});var cKr=s(fse);r4o=r(cKr,"xlm-roberta-xl"),cKr.forEach(t),t4o=r(T6e," \u2014 "),aq=n(T6e,"A",{href:!0});var fKr=s(aq);a4o=r(fKr,"XLMRobertaXLForMaskedLM"),fKr.forEach(t),n4o=r(T6e," (XLM-RoBERTa-XL model)"),T6e.forEach(t),s4o=i(N),D5=n(N,"LI",{});var M6e=s(D5);mse=n(M6e,"STRONG",{});var mKr=s(mse);l4o=r(mKr,"yoso"),mKr.forEach(t),i4o=r(M6e," \u2014 "),nq=n(M6e,"A",{href:!0});var gKr=s(nq);d4o=r(gKr,"YosoForMaskedLM"),gKr.forEach(t),c4o=r(M6e," (YOSO model)"),M6e.forEach(t),N.forEach(t),f4o=i(Vt),G5=n(Vt,"P",{});var E6e=s(G5);m4o=r(E6e,"The model is set in evaluation mode by default using "),gse=n(E6e,"CODE",{});var hKr=s(gse);g4o=r(hKr,"model.eval()"),hKr.forEach(t),h4o=r(E6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hse=n(E6e,"CODE",{});var pKr=s(hse);p4o=r(pKr,"model.train()"),pKr.forEach(t),E6e.forEach(t),_4o=i(Vt),pse=n(Vt,"P",{});var _Kr=s(pse);u4o=r(_Kr,"Examples:"),_Kr.forEach(t),b4o=i(Vt),m(kw.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),qRe=i(c),dd=n(c,"H2",{class:!0});var QPe=s(dd);O5=n(QPe,"A",{id:!0,class:!0,href:!0});var uKr=s(O5);_se=n(uKr,"SPAN",{});var bKr=s(_se);m(Sw.$$.fragment,bKr),bKr.forEach(t),uKr.forEach(t),F4o=i(QPe),use=n(QPe,"SPAN",{});var FKr=s(use);v4o=r(FKr,"AutoModelForSeq2SeqLM"),FKr.forEach(t),QPe.forEach(t),NRe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(Rw.$$.fragment,ol),T4o=i(ol),cd=n(ol,"P",{});var TU=s(cd);M4o=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sq=n(TU,"A",{href:!0});var vKr=s(sq);E4o=r(vKr,"from_pretrained()"),vKr.forEach(t),C4o=r(TU," class method or the "),lq=n(TU,"A",{href:!0});var TKr=s(lq);w4o=r(TKr,"from_config()"),TKr.forEach(t),A4o=r(TU,` class
method.`),TU.forEach(t),y4o=i(ol),Bw=n(ol,"P",{});var WPe=s(Bw);L4o=r(WPe,"This class cannot be instantiated directly using "),bse=n(WPe,"CODE",{});var MKr=s(bse);x4o=r(MKr,"__init__()"),MKr.forEach(t),k4o=r(WPe," (throws an error)."),WPe.forEach(t),S4o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(Pw.$$.fragment,rl),R4o=i(rl),Fse=n(rl,"P",{});var EKr=s(Fse);B4o=r(EKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EKr.forEach(t),P4o=i(rl),fd=n(rl,"P",{});var MU=s(fd);$4o=r(MU,`Note:
Loading a model from its configuration file does `),vse=n(MU,"STRONG",{});var CKr=s(vse);I4o=r(CKr,"not"),CKr.forEach(t),q4o=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iq=n(MU,"A",{href:!0});var wKr=s(iq);N4o=r(wKr,"from_pretrained()"),wKr.forEach(t),j4o=r(MU," to load the model weights."),MU.forEach(t),D4o=i(rl),Tse=n(rl,"P",{});var AKr=s(Tse);G4o=r(AKr,"Examples:"),AKr.forEach(t),O4o=i(rl),m($w.$$.fragment,rl),rl.forEach(t),V4o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(Iw.$$.fragment,Xt),X4o=i(Xt),Mse=n(Xt,"P",{});var yKr=s(Mse);z4o=r(yKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yKr.forEach(t),Q4o=i(Xt),Ha=n(Xt,"P",{});var S3=s(Ha);W4o=r(S3,"The model class to instantiate is selected based on the "),Ese=n(S3,"CODE",{});var LKr=s(Ese);H4o=r(LKr,"model_type"),LKr.forEach(t),U4o=r(S3,` property of the config object (either
passed as an argument or loaded from `),Cse=n(S3,"CODE",{});var xKr=s(Cse);J4o=r(xKr,"pretrained_model_name_or_path"),xKr.forEach(t),Y4o=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=n(S3,"CODE",{});var kKr=s(wse);K4o=r(kKr,"pretrained_model_name_or_path"),kKr.forEach(t),Z4o=r(S3,":"),S3.forEach(t),eEo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);V5=n(le,"LI",{});var C6e=s(V5);Ase=n(C6e,"STRONG",{});var SKr=s(Ase);oEo=r(SKr,"bart"),SKr.forEach(t),rEo=r(C6e," \u2014 "),dq=n(C6e,"A",{href:!0});var RKr=s(dq);tEo=r(RKr,"BartForConditionalGeneration"),RKr.forEach(t),aEo=r(C6e," (BART model)"),C6e.forEach(t),nEo=i(le),X5=n(le,"LI",{});var w6e=s(X5);yse=n(w6e,"STRONG",{});var BKr=s(yse);sEo=r(BKr,"bigbird_pegasus"),BKr.forEach(t),lEo=r(w6e," \u2014 "),cq=n(w6e,"A",{href:!0});var PKr=s(cq);iEo=r(PKr,"BigBirdPegasusForConditionalGeneration"),PKr.forEach(t),dEo=r(w6e," (BigBirdPegasus model)"),w6e.forEach(t),cEo=i(le),z5=n(le,"LI",{});var A6e=s(z5);Lse=n(A6e,"STRONG",{});var $Kr=s(Lse);fEo=r($Kr,"blenderbot"),$Kr.forEach(t),mEo=r(A6e," \u2014 "),fq=n(A6e,"A",{href:!0});var IKr=s(fq);gEo=r(IKr,"BlenderbotForConditionalGeneration"),IKr.forEach(t),hEo=r(A6e," (Blenderbot model)"),A6e.forEach(t),pEo=i(le),Q5=n(le,"LI",{});var y6e=s(Q5);xse=n(y6e,"STRONG",{});var qKr=s(xse);_Eo=r(qKr,"blenderbot-small"),qKr.forEach(t),uEo=r(y6e," \u2014 "),mq=n(y6e,"A",{href:!0});var NKr=s(mq);bEo=r(NKr,"BlenderbotSmallForConditionalGeneration"),NKr.forEach(t),FEo=r(y6e," (BlenderbotSmall model)"),y6e.forEach(t),vEo=i(le),W5=n(le,"LI",{});var L6e=s(W5);kse=n(L6e,"STRONG",{});var jKr=s(kse);TEo=r(jKr,"encoder-decoder"),jKr.forEach(t),MEo=r(L6e," \u2014 "),gq=n(L6e,"A",{href:!0});var DKr=s(gq);EEo=r(DKr,"EncoderDecoderModel"),DKr.forEach(t),CEo=r(L6e," (Encoder decoder model)"),L6e.forEach(t),wEo=i(le),H5=n(le,"LI",{});var x6e=s(H5);Sse=n(x6e,"STRONG",{});var GKr=s(Sse);AEo=r(GKr,"fsmt"),GKr.forEach(t),yEo=r(x6e," \u2014 "),hq=n(x6e,"A",{href:!0});var OKr=s(hq);LEo=r(OKr,"FSMTForConditionalGeneration"),OKr.forEach(t),xEo=r(x6e," (FairSeq Machine-Translation model)"),x6e.forEach(t),kEo=i(le),U5=n(le,"LI",{});var k6e=s(U5);Rse=n(k6e,"STRONG",{});var VKr=s(Rse);SEo=r(VKr,"led"),VKr.forEach(t),REo=r(k6e," \u2014 "),pq=n(k6e,"A",{href:!0});var XKr=s(pq);BEo=r(XKr,"LEDForConditionalGeneration"),XKr.forEach(t),PEo=r(k6e," (LED model)"),k6e.forEach(t),$Eo=i(le),J5=n(le,"LI",{});var S6e=s(J5);Bse=n(S6e,"STRONG",{});var zKr=s(Bse);IEo=r(zKr,"m2m_100"),zKr.forEach(t),qEo=r(S6e," \u2014 "),_q=n(S6e,"A",{href:!0});var QKr=s(_q);NEo=r(QKr,"M2M100ForConditionalGeneration"),QKr.forEach(t),jEo=r(S6e," (M2M100 model)"),S6e.forEach(t),DEo=i(le),Y5=n(le,"LI",{});var R6e=s(Y5);Pse=n(R6e,"STRONG",{});var WKr=s(Pse);GEo=r(WKr,"marian"),WKr.forEach(t),OEo=r(R6e," \u2014 "),uq=n(R6e,"A",{href:!0});var HKr=s(uq);VEo=r(HKr,"MarianMTModel"),HKr.forEach(t),XEo=r(R6e," (Marian model)"),R6e.forEach(t),zEo=i(le),K5=n(le,"LI",{});var B6e=s(K5);$se=n(B6e,"STRONG",{});var UKr=s($se);QEo=r(UKr,"mbart"),UKr.forEach(t),WEo=r(B6e," \u2014 "),bq=n(B6e,"A",{href:!0});var JKr=s(bq);HEo=r(JKr,"MBartForConditionalGeneration"),JKr.forEach(t),UEo=r(B6e," (mBART model)"),B6e.forEach(t),JEo=i(le),Z5=n(le,"LI",{});var P6e=s(Z5);Ise=n(P6e,"STRONG",{});var YKr=s(Ise);YEo=r(YKr,"mt5"),YKr.forEach(t),KEo=r(P6e," \u2014 "),Fq=n(P6e,"A",{href:!0});var KKr=s(Fq);ZEo=r(KKr,"MT5ForConditionalGeneration"),KKr.forEach(t),e3o=r(P6e," (mT5 model)"),P6e.forEach(t),o3o=i(le),e2=n(le,"LI",{});var $6e=s(e2);qse=n($6e,"STRONG",{});var ZKr=s(qse);r3o=r(ZKr,"pegasus"),ZKr.forEach(t),t3o=r($6e," \u2014 "),vq=n($6e,"A",{href:!0});var eZr=s(vq);a3o=r(eZr,"PegasusForConditionalGeneration"),eZr.forEach(t),n3o=r($6e," (Pegasus model)"),$6e.forEach(t),s3o=i(le),o2=n(le,"LI",{});var I6e=s(o2);Nse=n(I6e,"STRONG",{});var oZr=s(Nse);l3o=r(oZr,"plbart"),oZr.forEach(t),i3o=r(I6e," \u2014 "),Tq=n(I6e,"A",{href:!0});var rZr=s(Tq);d3o=r(rZr,"PLBartForConditionalGeneration"),rZr.forEach(t),c3o=r(I6e," (PLBart model)"),I6e.forEach(t),f3o=i(le),r2=n(le,"LI",{});var q6e=s(r2);jse=n(q6e,"STRONG",{});var tZr=s(jse);m3o=r(tZr,"prophetnet"),tZr.forEach(t),g3o=r(q6e," \u2014 "),Mq=n(q6e,"A",{href:!0});var aZr=s(Mq);h3o=r(aZr,"ProphetNetForConditionalGeneration"),aZr.forEach(t),p3o=r(q6e," (ProphetNet model)"),q6e.forEach(t),_3o=i(le),t2=n(le,"LI",{});var N6e=s(t2);Dse=n(N6e,"STRONG",{});var nZr=s(Dse);u3o=r(nZr,"t5"),nZr.forEach(t),b3o=r(N6e," \u2014 "),Eq=n(N6e,"A",{href:!0});var sZr=s(Eq);F3o=r(sZr,"T5ForConditionalGeneration"),sZr.forEach(t),v3o=r(N6e," (T5 model)"),N6e.forEach(t),T3o=i(le),a2=n(le,"LI",{});var j6e=s(a2);Gse=n(j6e,"STRONG",{});var lZr=s(Gse);M3o=r(lZr,"tapex"),lZr.forEach(t),E3o=r(j6e," \u2014 "),Cq=n(j6e,"A",{href:!0});var iZr=s(Cq);C3o=r(iZr,"BartForConditionalGeneration"),iZr.forEach(t),w3o=r(j6e," (TAPEX model)"),j6e.forEach(t),A3o=i(le),n2=n(le,"LI",{});var D6e=s(n2);Ose=n(D6e,"STRONG",{});var dZr=s(Ose);y3o=r(dZr,"xlm-prophetnet"),dZr.forEach(t),L3o=r(D6e," \u2014 "),wq=n(D6e,"A",{href:!0});var cZr=s(wq);x3o=r(cZr,"XLMProphetNetForConditionalGeneration"),cZr.forEach(t),k3o=r(D6e," (XLMProphetNet model)"),D6e.forEach(t),le.forEach(t),S3o=i(Xt),s2=n(Xt,"P",{});var G6e=s(s2);R3o=r(G6e,"The model is set in evaluation mode by default using "),Vse=n(G6e,"CODE",{});var fZr=s(Vse);B3o=r(fZr,"model.eval()"),fZr.forEach(t),P3o=r(G6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xse=n(G6e,"CODE",{});var mZr=s(Xse);$3o=r(mZr,"model.train()"),mZr.forEach(t),G6e.forEach(t),I3o=i(Xt),zse=n(Xt,"P",{});var gZr=s(zse);q3o=r(gZr,"Examples:"),gZr.forEach(t),N3o=i(Xt),m(qw.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),jRe=i(c),md=n(c,"H2",{class:!0});var HPe=s(md);l2=n(HPe,"A",{id:!0,class:!0,href:!0});var hZr=s(l2);Qse=n(hZr,"SPAN",{});var pZr=s(Qse);m(Nw.$$.fragment,pZr),pZr.forEach(t),hZr.forEach(t),j3o=i(HPe),Wse=n(HPe,"SPAN",{});var _Zr=s(Wse);D3o=r(_Zr,"AutoModelForSequenceClassification"),_Zr.forEach(t),HPe.forEach(t),DRe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(jw.$$.fragment,tl),G3o=i(tl),gd=n(tl,"P",{});var EU=s(gd);O3o=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Aq=n(EU,"A",{href:!0});var uZr=s(Aq);V3o=r(uZr,"from_pretrained()"),uZr.forEach(t),X3o=r(EU," class method or the "),yq=n(EU,"A",{href:!0});var bZr=s(yq);z3o=r(bZr,"from_config()"),bZr.forEach(t),Q3o=r(EU,` class
method.`),EU.forEach(t),W3o=i(tl),Dw=n(tl,"P",{});var UPe=s(Dw);H3o=r(UPe,"This class cannot be instantiated directly using "),Hse=n(UPe,"CODE",{});var FZr=s(Hse);U3o=r(FZr,"__init__()"),FZr.forEach(t),J3o=r(UPe," (throws an error)."),UPe.forEach(t),Y3o=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(Gw.$$.fragment,al),K3o=i(al),Use=n(al,"P",{});var vZr=s(Use);Z3o=r(vZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vZr.forEach(t),eCo=i(al),hd=n(al,"P",{});var CU=s(hd);oCo=r(CU,`Note:
Loading a model from its configuration file does `),Jse=n(CU,"STRONG",{});var TZr=s(Jse);rCo=r(TZr,"not"),TZr.forEach(t),tCo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=n(CU,"A",{href:!0});var MZr=s(Lq);aCo=r(MZr,"from_pretrained()"),MZr.forEach(t),nCo=r(CU," to load the model weights."),CU.forEach(t),sCo=i(al),Yse=n(al,"P",{});var EZr=s(Yse);lCo=r(EZr,"Examples:"),EZr.forEach(t),iCo=i(al),m(Ow.$$.fragment,al),al.forEach(t),dCo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m(Vw.$$.fragment,zt),cCo=i(zt),Kse=n(zt,"P",{});var CZr=s(Kse);fCo=r(CZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CZr.forEach(t),mCo=i(zt),Ua=n(zt,"P",{});var R3=s(Ua);gCo=r(R3,"The model class to instantiate is selected based on the "),Zse=n(R3,"CODE",{});var wZr=s(Zse);hCo=r(wZr,"model_type"),wZr.forEach(t),pCo=r(R3,` property of the config object (either
passed as an argument or loaded from `),ele=n(R3,"CODE",{});var AZr=s(ele);_Co=r(AZr,"pretrained_model_name_or_path"),AZr.forEach(t),uCo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ole=n(R3,"CODE",{});var yZr=s(ole);bCo=r(yZr,"pretrained_model_name_or_path"),yZr.forEach(t),FCo=r(R3,":"),R3.forEach(t),vCo=i(zt),y=n(zt,"UL",{});var L=s(y);i2=n(L,"LI",{});var O6e=s(i2);rle=n(O6e,"STRONG",{});var LZr=s(rle);TCo=r(LZr,"albert"),LZr.forEach(t),MCo=r(O6e," \u2014 "),xq=n(O6e,"A",{href:!0});var xZr=s(xq);ECo=r(xZr,"AlbertForSequenceClassification"),xZr.forEach(t),CCo=r(O6e," (ALBERT model)"),O6e.forEach(t),wCo=i(L),d2=n(L,"LI",{});var V6e=s(d2);tle=n(V6e,"STRONG",{});var kZr=s(tle);ACo=r(kZr,"bart"),kZr.forEach(t),yCo=r(V6e," \u2014 "),kq=n(V6e,"A",{href:!0});var SZr=s(kq);LCo=r(SZr,"BartForSequenceClassification"),SZr.forEach(t),xCo=r(V6e," (BART model)"),V6e.forEach(t),kCo=i(L),c2=n(L,"LI",{});var X6e=s(c2);ale=n(X6e,"STRONG",{});var RZr=s(ale);SCo=r(RZr,"bert"),RZr.forEach(t),RCo=r(X6e," \u2014 "),Sq=n(X6e,"A",{href:!0});var BZr=s(Sq);BCo=r(BZr,"BertForSequenceClassification"),BZr.forEach(t),PCo=r(X6e," (BERT model)"),X6e.forEach(t),$Co=i(L),f2=n(L,"LI",{});var z6e=s(f2);nle=n(z6e,"STRONG",{});var PZr=s(nle);ICo=r(PZr,"big_bird"),PZr.forEach(t),qCo=r(z6e," \u2014 "),Rq=n(z6e,"A",{href:!0});var $Zr=s(Rq);NCo=r($Zr,"BigBirdForSequenceClassification"),$Zr.forEach(t),jCo=r(z6e," (BigBird model)"),z6e.forEach(t),DCo=i(L),m2=n(L,"LI",{});var Q6e=s(m2);sle=n(Q6e,"STRONG",{});var IZr=s(sle);GCo=r(IZr,"bigbird_pegasus"),IZr.forEach(t),OCo=r(Q6e," \u2014 "),Bq=n(Q6e,"A",{href:!0});var qZr=s(Bq);VCo=r(qZr,"BigBirdPegasusForSequenceClassification"),qZr.forEach(t),XCo=r(Q6e," (BigBirdPegasus model)"),Q6e.forEach(t),zCo=i(L),g2=n(L,"LI",{});var W6e=s(g2);lle=n(W6e,"STRONG",{});var NZr=s(lle);QCo=r(NZr,"camembert"),NZr.forEach(t),WCo=r(W6e," \u2014 "),Pq=n(W6e,"A",{href:!0});var jZr=s(Pq);HCo=r(jZr,"CamembertForSequenceClassification"),jZr.forEach(t),UCo=r(W6e," (CamemBERT model)"),W6e.forEach(t),JCo=i(L),h2=n(L,"LI",{});var H6e=s(h2);ile=n(H6e,"STRONG",{});var DZr=s(ile);YCo=r(DZr,"canine"),DZr.forEach(t),KCo=r(H6e," \u2014 "),$q=n(H6e,"A",{href:!0});var GZr=s($q);ZCo=r(GZr,"CanineForSequenceClassification"),GZr.forEach(t),ewo=r(H6e," (Canine model)"),H6e.forEach(t),owo=i(L),p2=n(L,"LI",{});var U6e=s(p2);dle=n(U6e,"STRONG",{});var OZr=s(dle);rwo=r(OZr,"convbert"),OZr.forEach(t),two=r(U6e," \u2014 "),Iq=n(U6e,"A",{href:!0});var VZr=s(Iq);awo=r(VZr,"ConvBertForSequenceClassification"),VZr.forEach(t),nwo=r(U6e," (ConvBERT model)"),U6e.forEach(t),swo=i(L),_2=n(L,"LI",{});var J6e=s(_2);cle=n(J6e,"STRONG",{});var XZr=s(cle);lwo=r(XZr,"ctrl"),XZr.forEach(t),iwo=r(J6e," \u2014 "),qq=n(J6e,"A",{href:!0});var zZr=s(qq);dwo=r(zZr,"CTRLForSequenceClassification"),zZr.forEach(t),cwo=r(J6e," (CTRL model)"),J6e.forEach(t),fwo=i(L),u2=n(L,"LI",{});var Y6e=s(u2);fle=n(Y6e,"STRONG",{});var QZr=s(fle);mwo=r(QZr,"data2vec-text"),QZr.forEach(t),gwo=r(Y6e," \u2014 "),Nq=n(Y6e,"A",{href:!0});var WZr=s(Nq);hwo=r(WZr,"Data2VecTextForSequenceClassification"),WZr.forEach(t),pwo=r(Y6e," (Data2VecText model)"),Y6e.forEach(t),_wo=i(L),b2=n(L,"LI",{});var K6e=s(b2);mle=n(K6e,"STRONG",{});var HZr=s(mle);uwo=r(HZr,"deberta"),HZr.forEach(t),bwo=r(K6e," \u2014 "),jq=n(K6e,"A",{href:!0});var UZr=s(jq);Fwo=r(UZr,"DebertaForSequenceClassification"),UZr.forEach(t),vwo=r(K6e," (DeBERTa model)"),K6e.forEach(t),Two=i(L),F2=n(L,"LI",{});var Z6e=s(F2);gle=n(Z6e,"STRONG",{});var JZr=s(gle);Mwo=r(JZr,"deberta-v2"),JZr.forEach(t),Ewo=r(Z6e," \u2014 "),Dq=n(Z6e,"A",{href:!0});var YZr=s(Dq);Cwo=r(YZr,"DebertaV2ForSequenceClassification"),YZr.forEach(t),wwo=r(Z6e," (DeBERTa-v2 model)"),Z6e.forEach(t),Awo=i(L),v2=n(L,"LI",{});var eAe=s(v2);hle=n(eAe,"STRONG",{});var KZr=s(hle);ywo=r(KZr,"distilbert"),KZr.forEach(t),Lwo=r(eAe," \u2014 "),Gq=n(eAe,"A",{href:!0});var ZZr=s(Gq);xwo=r(ZZr,"DistilBertForSequenceClassification"),ZZr.forEach(t),kwo=r(eAe," (DistilBERT model)"),eAe.forEach(t),Swo=i(L),T2=n(L,"LI",{});var oAe=s(T2);ple=n(oAe,"STRONG",{});var eet=s(ple);Rwo=r(eet,"electra"),eet.forEach(t),Bwo=r(oAe," \u2014 "),Oq=n(oAe,"A",{href:!0});var oet=s(Oq);Pwo=r(oet,"ElectraForSequenceClassification"),oet.forEach(t),$wo=r(oAe," (ELECTRA model)"),oAe.forEach(t),Iwo=i(L),M2=n(L,"LI",{});var rAe=s(M2);_le=n(rAe,"STRONG",{});var ret=s(_le);qwo=r(ret,"flaubert"),ret.forEach(t),Nwo=r(rAe," \u2014 "),Vq=n(rAe,"A",{href:!0});var tet=s(Vq);jwo=r(tet,"FlaubertForSequenceClassification"),tet.forEach(t),Dwo=r(rAe," (FlauBERT model)"),rAe.forEach(t),Gwo=i(L),E2=n(L,"LI",{});var tAe=s(E2);ule=n(tAe,"STRONG",{});var aet=s(ule);Owo=r(aet,"fnet"),aet.forEach(t),Vwo=r(tAe," \u2014 "),Xq=n(tAe,"A",{href:!0});var net=s(Xq);Xwo=r(net,"FNetForSequenceClassification"),net.forEach(t),zwo=r(tAe," (FNet model)"),tAe.forEach(t),Qwo=i(L),C2=n(L,"LI",{});var aAe=s(C2);ble=n(aAe,"STRONG",{});var set=s(ble);Wwo=r(set,"funnel"),set.forEach(t),Hwo=r(aAe," \u2014 "),zq=n(aAe,"A",{href:!0});var iet=s(zq);Uwo=r(iet,"FunnelForSequenceClassification"),iet.forEach(t),Jwo=r(aAe," (Funnel Transformer model)"),aAe.forEach(t),Ywo=i(L),w2=n(L,"LI",{});var nAe=s(w2);Fle=n(nAe,"STRONG",{});var det=s(Fle);Kwo=r(det,"gpt2"),det.forEach(t),Zwo=r(nAe," \u2014 "),Qq=n(nAe,"A",{href:!0});var cet=s(Qq);e6o=r(cet,"GPT2ForSequenceClassification"),cet.forEach(t),o6o=r(nAe," (OpenAI GPT-2 model)"),nAe.forEach(t),r6o=i(L),A2=n(L,"LI",{});var sAe=s(A2);vle=n(sAe,"STRONG",{});var fet=s(vle);t6o=r(fet,"gpt_neo"),fet.forEach(t),a6o=r(sAe," \u2014 "),Wq=n(sAe,"A",{href:!0});var met=s(Wq);n6o=r(met,"GPTNeoForSequenceClassification"),met.forEach(t),s6o=r(sAe," (GPT Neo model)"),sAe.forEach(t),l6o=i(L),y2=n(L,"LI",{});var lAe=s(y2);Tle=n(lAe,"STRONG",{});var get=s(Tle);i6o=r(get,"gptj"),get.forEach(t),d6o=r(lAe," \u2014 "),Hq=n(lAe,"A",{href:!0});var het=s(Hq);c6o=r(het,"GPTJForSequenceClassification"),het.forEach(t),f6o=r(lAe," (GPT-J model)"),lAe.forEach(t),m6o=i(L),L2=n(L,"LI",{});var iAe=s(L2);Mle=n(iAe,"STRONG",{});var pet=s(Mle);g6o=r(pet,"ibert"),pet.forEach(t),h6o=r(iAe," \u2014 "),Uq=n(iAe,"A",{href:!0});var _et=s(Uq);p6o=r(_et,"IBertForSequenceClassification"),_et.forEach(t),_6o=r(iAe," (I-BERT model)"),iAe.forEach(t),u6o=i(L),x2=n(L,"LI",{});var dAe=s(x2);Ele=n(dAe,"STRONG",{});var uet=s(Ele);b6o=r(uet,"layoutlm"),uet.forEach(t),F6o=r(dAe," \u2014 "),Jq=n(dAe,"A",{href:!0});var bet=s(Jq);v6o=r(bet,"LayoutLMForSequenceClassification"),bet.forEach(t),T6o=r(dAe," (LayoutLM model)"),dAe.forEach(t),M6o=i(L),k2=n(L,"LI",{});var cAe=s(k2);Cle=n(cAe,"STRONG",{});var Fet=s(Cle);E6o=r(Fet,"layoutlmv2"),Fet.forEach(t),C6o=r(cAe," \u2014 "),Yq=n(cAe,"A",{href:!0});var vet=s(Yq);w6o=r(vet,"LayoutLMv2ForSequenceClassification"),vet.forEach(t),A6o=r(cAe," (LayoutLMv2 model)"),cAe.forEach(t),y6o=i(L),S2=n(L,"LI",{});var fAe=s(S2);wle=n(fAe,"STRONG",{});var Tet=s(wle);L6o=r(Tet,"led"),Tet.forEach(t),x6o=r(fAe," \u2014 "),Kq=n(fAe,"A",{href:!0});var Met=s(Kq);k6o=r(Met,"LEDForSequenceClassification"),Met.forEach(t),S6o=r(fAe," (LED model)"),fAe.forEach(t),R6o=i(L),R2=n(L,"LI",{});var mAe=s(R2);Ale=n(mAe,"STRONG",{});var Eet=s(Ale);B6o=r(Eet,"longformer"),Eet.forEach(t),P6o=r(mAe," \u2014 "),Zq=n(mAe,"A",{href:!0});var Cet=s(Zq);$6o=r(Cet,"LongformerForSequenceClassification"),Cet.forEach(t),I6o=r(mAe," (Longformer model)"),mAe.forEach(t),q6o=i(L),B2=n(L,"LI",{});var gAe=s(B2);yle=n(gAe,"STRONG",{});var wet=s(yle);N6o=r(wet,"mbart"),wet.forEach(t),j6o=r(gAe," \u2014 "),eN=n(gAe,"A",{href:!0});var Aet=s(eN);D6o=r(Aet,"MBartForSequenceClassification"),Aet.forEach(t),G6o=r(gAe," (mBART model)"),gAe.forEach(t),O6o=i(L),P2=n(L,"LI",{});var hAe=s(P2);Lle=n(hAe,"STRONG",{});var yet=s(Lle);V6o=r(yet,"megatron-bert"),yet.forEach(t),X6o=r(hAe," \u2014 "),oN=n(hAe,"A",{href:!0});var Let=s(oN);z6o=r(Let,"MegatronBertForSequenceClassification"),Let.forEach(t),Q6o=r(hAe," (MegatronBert model)"),hAe.forEach(t),W6o=i(L),$2=n(L,"LI",{});var pAe=s($2);xle=n(pAe,"STRONG",{});var xet=s(xle);H6o=r(xet,"mobilebert"),xet.forEach(t),U6o=r(pAe," \u2014 "),rN=n(pAe,"A",{href:!0});var ket=s(rN);J6o=r(ket,"MobileBertForSequenceClassification"),ket.forEach(t),Y6o=r(pAe," (MobileBERT model)"),pAe.forEach(t),K6o=i(L),I2=n(L,"LI",{});var _Ae=s(I2);kle=n(_Ae,"STRONG",{});var Set=s(kle);Z6o=r(Set,"mpnet"),Set.forEach(t),eAo=r(_Ae," \u2014 "),tN=n(_Ae,"A",{href:!0});var Ret=s(tN);oAo=r(Ret,"MPNetForSequenceClassification"),Ret.forEach(t),rAo=r(_Ae," (MPNet model)"),_Ae.forEach(t),tAo=i(L),q2=n(L,"LI",{});var uAe=s(q2);Sle=n(uAe,"STRONG",{});var Bet=s(Sle);aAo=r(Bet,"nystromformer"),Bet.forEach(t),nAo=r(uAe," \u2014 "),aN=n(uAe,"A",{href:!0});var Pet=s(aN);sAo=r(Pet,"NystromformerForSequenceClassification"),Pet.forEach(t),lAo=r(uAe," (Nystromformer model)"),uAe.forEach(t),iAo=i(L),N2=n(L,"LI",{});var bAe=s(N2);Rle=n(bAe,"STRONG",{});var $et=s(Rle);dAo=r($et,"openai-gpt"),$et.forEach(t),cAo=r(bAe," \u2014 "),nN=n(bAe,"A",{href:!0});var Iet=s(nN);fAo=r(Iet,"OpenAIGPTForSequenceClassification"),Iet.forEach(t),mAo=r(bAe," (OpenAI GPT model)"),bAe.forEach(t),gAo=i(L),j2=n(L,"LI",{});var FAe=s(j2);Ble=n(FAe,"STRONG",{});var qet=s(Ble);hAo=r(qet,"perceiver"),qet.forEach(t),pAo=r(FAe," \u2014 "),sN=n(FAe,"A",{href:!0});var Net=s(sN);_Ao=r(Net,"PerceiverForSequenceClassification"),Net.forEach(t),uAo=r(FAe," (Perceiver model)"),FAe.forEach(t),bAo=i(L),D2=n(L,"LI",{});var vAe=s(D2);Ple=n(vAe,"STRONG",{});var jet=s(Ple);FAo=r(jet,"plbart"),jet.forEach(t),vAo=r(vAe," \u2014 "),lN=n(vAe,"A",{href:!0});var Det=s(lN);TAo=r(Det,"PLBartForSequenceClassification"),Det.forEach(t),MAo=r(vAe," (PLBart model)"),vAe.forEach(t),EAo=i(L),G2=n(L,"LI",{});var TAe=s(G2);$le=n(TAe,"STRONG",{});var Get=s($le);CAo=r(Get,"qdqbert"),Get.forEach(t),wAo=r(TAe," \u2014 "),iN=n(TAe,"A",{href:!0});var Oet=s(iN);AAo=r(Oet,"QDQBertForSequenceClassification"),Oet.forEach(t),yAo=r(TAe," (QDQBert model)"),TAe.forEach(t),LAo=i(L),O2=n(L,"LI",{});var MAe=s(O2);Ile=n(MAe,"STRONG",{});var Vet=s(Ile);xAo=r(Vet,"reformer"),Vet.forEach(t),kAo=r(MAe," \u2014 "),dN=n(MAe,"A",{href:!0});var Xet=s(dN);SAo=r(Xet,"ReformerForSequenceClassification"),Xet.forEach(t),RAo=r(MAe," (Reformer model)"),MAe.forEach(t),BAo=i(L),V2=n(L,"LI",{});var EAe=s(V2);qle=n(EAe,"STRONG",{});var zet=s(qle);PAo=r(zet,"rembert"),zet.forEach(t),$Ao=r(EAe," \u2014 "),cN=n(EAe,"A",{href:!0});var Qet=s(cN);IAo=r(Qet,"RemBertForSequenceClassification"),Qet.forEach(t),qAo=r(EAe," (RemBERT model)"),EAe.forEach(t),NAo=i(L),X2=n(L,"LI",{});var CAe=s(X2);Nle=n(CAe,"STRONG",{});var Wet=s(Nle);jAo=r(Wet,"roberta"),Wet.forEach(t),DAo=r(CAe," \u2014 "),fN=n(CAe,"A",{href:!0});var Het=s(fN);GAo=r(Het,"RobertaForSequenceClassification"),Het.forEach(t),OAo=r(CAe," (RoBERTa model)"),CAe.forEach(t),VAo=i(L),z2=n(L,"LI",{});var wAe=s(z2);jle=n(wAe,"STRONG",{});var Uet=s(jle);XAo=r(Uet,"roformer"),Uet.forEach(t),zAo=r(wAe," \u2014 "),mN=n(wAe,"A",{href:!0});var Jet=s(mN);QAo=r(Jet,"RoFormerForSequenceClassification"),Jet.forEach(t),WAo=r(wAe," (RoFormer model)"),wAe.forEach(t),HAo=i(L),Q2=n(L,"LI",{});var AAe=s(Q2);Dle=n(AAe,"STRONG",{});var Yet=s(Dle);UAo=r(Yet,"squeezebert"),Yet.forEach(t),JAo=r(AAe," \u2014 "),gN=n(AAe,"A",{href:!0});var Ket=s(gN);YAo=r(Ket,"SqueezeBertForSequenceClassification"),Ket.forEach(t),KAo=r(AAe," (SqueezeBERT model)"),AAe.forEach(t),ZAo=i(L),W2=n(L,"LI",{});var yAe=s(W2);Gle=n(yAe,"STRONG",{});var Zet=s(Gle);e0o=r(Zet,"tapas"),Zet.forEach(t),o0o=r(yAe," \u2014 "),hN=n(yAe,"A",{href:!0});var eot=s(hN);r0o=r(eot,"TapasForSequenceClassification"),eot.forEach(t),t0o=r(yAe," (TAPAS model)"),yAe.forEach(t),a0o=i(L),H2=n(L,"LI",{});var LAe=s(H2);Ole=n(LAe,"STRONG",{});var oot=s(Ole);n0o=r(oot,"tapex"),oot.forEach(t),s0o=r(LAe," \u2014 "),pN=n(LAe,"A",{href:!0});var rot=s(pN);l0o=r(rot,"BartForSequenceClassification"),rot.forEach(t),i0o=r(LAe," (TAPEX model)"),LAe.forEach(t),d0o=i(L),U2=n(L,"LI",{});var xAe=s(U2);Vle=n(xAe,"STRONG",{});var tot=s(Vle);c0o=r(tot,"transfo-xl"),tot.forEach(t),f0o=r(xAe," \u2014 "),_N=n(xAe,"A",{href:!0});var aot=s(_N);m0o=r(aot,"TransfoXLForSequenceClassification"),aot.forEach(t),g0o=r(xAe," (Transformer-XL model)"),xAe.forEach(t),h0o=i(L),J2=n(L,"LI",{});var kAe=s(J2);Xle=n(kAe,"STRONG",{});var not=s(Xle);p0o=r(not,"xlm"),not.forEach(t),_0o=r(kAe," \u2014 "),uN=n(kAe,"A",{href:!0});var sot=s(uN);u0o=r(sot,"XLMForSequenceClassification"),sot.forEach(t),b0o=r(kAe," (XLM model)"),kAe.forEach(t),F0o=i(L),Y2=n(L,"LI",{});var SAe=s(Y2);zle=n(SAe,"STRONG",{});var lot=s(zle);v0o=r(lot,"xlm-roberta"),lot.forEach(t),T0o=r(SAe," \u2014 "),bN=n(SAe,"A",{href:!0});var iot=s(bN);M0o=r(iot,"XLMRobertaForSequenceClassification"),iot.forEach(t),E0o=r(SAe," (XLM-RoBERTa model)"),SAe.forEach(t),C0o=i(L),K2=n(L,"LI",{});var RAe=s(K2);Qle=n(RAe,"STRONG",{});var dot=s(Qle);w0o=r(dot,"xlm-roberta-xl"),dot.forEach(t),A0o=r(RAe," \u2014 "),FN=n(RAe,"A",{href:!0});var cot=s(FN);y0o=r(cot,"XLMRobertaXLForSequenceClassification"),cot.forEach(t),L0o=r(RAe," (XLM-RoBERTa-XL model)"),RAe.forEach(t),x0o=i(L),Z2=n(L,"LI",{});var BAe=s(Z2);Wle=n(BAe,"STRONG",{});var fot=s(Wle);k0o=r(fot,"xlnet"),fot.forEach(t),S0o=r(BAe," \u2014 "),vN=n(BAe,"A",{href:!0});var mot=s(vN);R0o=r(mot,"XLNetForSequenceClassification"),mot.forEach(t),B0o=r(BAe," (XLNet model)"),BAe.forEach(t),P0o=i(L),e1=n(L,"LI",{});var PAe=s(e1);Hle=n(PAe,"STRONG",{});var got=s(Hle);$0o=r(got,"yoso"),got.forEach(t),I0o=r(PAe," \u2014 "),TN=n(PAe,"A",{href:!0});var hot=s(TN);q0o=r(hot,"YosoForSequenceClassification"),hot.forEach(t),N0o=r(PAe," (YOSO model)"),PAe.forEach(t),L.forEach(t),j0o=i(zt),o1=n(zt,"P",{});var $Ae=s(o1);D0o=r($Ae,"The model is set in evaluation mode by default using "),Ule=n($Ae,"CODE",{});var pot=s(Ule);G0o=r(pot,"model.eval()"),pot.forEach(t),O0o=r($Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jle=n($Ae,"CODE",{});var _ot=s(Jle);V0o=r(_ot,"model.train()"),_ot.forEach(t),$Ae.forEach(t),X0o=i(zt),Yle=n(zt,"P",{});var uot=s(Yle);z0o=r(uot,"Examples:"),uot.forEach(t),Q0o=i(zt),m(Xw.$$.fragment,zt),zt.forEach(t),tl.forEach(t),GRe=i(c),pd=n(c,"H2",{class:!0});var JPe=s(pd);r1=n(JPe,"A",{id:!0,class:!0,href:!0});var bot=s(r1);Kle=n(bot,"SPAN",{});var Fot=s(Kle);m(zw.$$.fragment,Fot),Fot.forEach(t),bot.forEach(t),W0o=i(JPe),Zle=n(JPe,"SPAN",{});var vot=s(Zle);H0o=r(vot,"AutoModelForMultipleChoice"),vot.forEach(t),JPe.forEach(t),ORe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(Qw.$$.fragment,nl),U0o=i(nl),_d=n(nl,"P",{});var wU=s(_d);J0o=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MN=n(wU,"A",{href:!0});var Tot=s(MN);Y0o=r(Tot,"from_pretrained()"),Tot.forEach(t),K0o=r(wU," class method or the "),EN=n(wU,"A",{href:!0});var Mot=s(EN);Z0o=r(Mot,"from_config()"),Mot.forEach(t),eyo=r(wU,` class
method.`),wU.forEach(t),oyo=i(nl),Ww=n(nl,"P",{});var YPe=s(Ww);ryo=r(YPe,"This class cannot be instantiated directly using "),eie=n(YPe,"CODE",{});var Eot=s(eie);tyo=r(Eot,"__init__()"),Eot.forEach(t),ayo=r(YPe," (throws an error)."),YPe.forEach(t),nyo=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(Hw.$$.fragment,sl),syo=i(sl),oie=n(sl,"P",{});var Cot=s(oie);lyo=r(Cot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Cot.forEach(t),iyo=i(sl),ud=n(sl,"P",{});var AU=s(ud);dyo=r(AU,`Note:
Loading a model from its configuration file does `),rie=n(AU,"STRONG",{});var wot=s(rie);cyo=r(wot,"not"),wot.forEach(t),fyo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=n(AU,"A",{href:!0});var Aot=s(CN);myo=r(Aot,"from_pretrained()"),Aot.forEach(t),gyo=r(AU," to load the model weights."),AU.forEach(t),hyo=i(sl),tie=n(sl,"P",{});var yot=s(tie);pyo=r(yot,"Examples:"),yot.forEach(t),_yo=i(sl),m(Uw.$$.fragment,sl),sl.forEach(t),uyo=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(Jw.$$.fragment,Qt),byo=i(Qt),aie=n(Qt,"P",{});var Lot=s(aie);Fyo=r(Lot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lot.forEach(t),vyo=i(Qt),Ja=n(Qt,"P",{});var B3=s(Ja);Tyo=r(B3,"The model class to instantiate is selected based on the "),nie=n(B3,"CODE",{});var xot=s(nie);Myo=r(xot,"model_type"),xot.forEach(t),Eyo=r(B3,` property of the config object (either
passed as an argument or loaded from `),sie=n(B3,"CODE",{});var kot=s(sie);Cyo=r(kot,"pretrained_model_name_or_path"),kot.forEach(t),wyo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=n(B3,"CODE",{});var Sot=s(lie);Ayo=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),yyo=r(B3,":"),B3.forEach(t),Lyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);t1=n(O,"LI",{});var IAe=s(t1);iie=n(IAe,"STRONG",{});var Rot=s(iie);xyo=r(Rot,"albert"),Rot.forEach(t),kyo=r(IAe," \u2014 "),wN=n(IAe,"A",{href:!0});var Bot=s(wN);Syo=r(Bot,"AlbertForMultipleChoice"),Bot.forEach(t),Ryo=r(IAe," (ALBERT model)"),IAe.forEach(t),Byo=i(O),a1=n(O,"LI",{});var qAe=s(a1);die=n(qAe,"STRONG",{});var Pot=s(die);Pyo=r(Pot,"bert"),Pot.forEach(t),$yo=r(qAe," \u2014 "),AN=n(qAe,"A",{href:!0});var $ot=s(AN);Iyo=r($ot,"BertForMultipleChoice"),$ot.forEach(t),qyo=r(qAe," (BERT model)"),qAe.forEach(t),Nyo=i(O),n1=n(O,"LI",{});var NAe=s(n1);cie=n(NAe,"STRONG",{});var Iot=s(cie);jyo=r(Iot,"big_bird"),Iot.forEach(t),Dyo=r(NAe," \u2014 "),yN=n(NAe,"A",{href:!0});var qot=s(yN);Gyo=r(qot,"BigBirdForMultipleChoice"),qot.forEach(t),Oyo=r(NAe," (BigBird model)"),NAe.forEach(t),Vyo=i(O),s1=n(O,"LI",{});var jAe=s(s1);fie=n(jAe,"STRONG",{});var Not=s(fie);Xyo=r(Not,"camembert"),Not.forEach(t),zyo=r(jAe," \u2014 "),LN=n(jAe,"A",{href:!0});var jot=s(LN);Qyo=r(jot,"CamembertForMultipleChoice"),jot.forEach(t),Wyo=r(jAe," (CamemBERT model)"),jAe.forEach(t),Hyo=i(O),l1=n(O,"LI",{});var DAe=s(l1);mie=n(DAe,"STRONG",{});var Dot=s(mie);Uyo=r(Dot,"canine"),Dot.forEach(t),Jyo=r(DAe," \u2014 "),xN=n(DAe,"A",{href:!0});var Got=s(xN);Yyo=r(Got,"CanineForMultipleChoice"),Got.forEach(t),Kyo=r(DAe," (Canine model)"),DAe.forEach(t),Zyo=i(O),i1=n(O,"LI",{});var GAe=s(i1);gie=n(GAe,"STRONG",{});var Oot=s(gie);e8o=r(Oot,"convbert"),Oot.forEach(t),o8o=r(GAe," \u2014 "),kN=n(GAe,"A",{href:!0});var Vot=s(kN);r8o=r(Vot,"ConvBertForMultipleChoice"),Vot.forEach(t),t8o=r(GAe," (ConvBERT model)"),GAe.forEach(t),a8o=i(O),d1=n(O,"LI",{});var OAe=s(d1);hie=n(OAe,"STRONG",{});var Xot=s(hie);n8o=r(Xot,"data2vec-text"),Xot.forEach(t),s8o=r(OAe," \u2014 "),SN=n(OAe,"A",{href:!0});var zot=s(SN);l8o=r(zot,"Data2VecTextForMultipleChoice"),zot.forEach(t),i8o=r(OAe," (Data2VecText model)"),OAe.forEach(t),d8o=i(O),c1=n(O,"LI",{});var VAe=s(c1);pie=n(VAe,"STRONG",{});var Qot=s(pie);c8o=r(Qot,"distilbert"),Qot.forEach(t),f8o=r(VAe," \u2014 "),RN=n(VAe,"A",{href:!0});var Wot=s(RN);m8o=r(Wot,"DistilBertForMultipleChoice"),Wot.forEach(t),g8o=r(VAe," (DistilBERT model)"),VAe.forEach(t),h8o=i(O),f1=n(O,"LI",{});var XAe=s(f1);_ie=n(XAe,"STRONG",{});var Hot=s(_ie);p8o=r(Hot,"electra"),Hot.forEach(t),_8o=r(XAe," \u2014 "),BN=n(XAe,"A",{href:!0});var Uot=s(BN);u8o=r(Uot,"ElectraForMultipleChoice"),Uot.forEach(t),b8o=r(XAe," (ELECTRA model)"),XAe.forEach(t),F8o=i(O),m1=n(O,"LI",{});var zAe=s(m1);uie=n(zAe,"STRONG",{});var Jot=s(uie);v8o=r(Jot,"flaubert"),Jot.forEach(t),T8o=r(zAe," \u2014 "),PN=n(zAe,"A",{href:!0});var Yot=s(PN);M8o=r(Yot,"FlaubertForMultipleChoice"),Yot.forEach(t),E8o=r(zAe," (FlauBERT model)"),zAe.forEach(t),C8o=i(O),g1=n(O,"LI",{});var QAe=s(g1);bie=n(QAe,"STRONG",{});var Kot=s(bie);w8o=r(Kot,"fnet"),Kot.forEach(t),A8o=r(QAe," \u2014 "),$N=n(QAe,"A",{href:!0});var Zot=s($N);y8o=r(Zot,"FNetForMultipleChoice"),Zot.forEach(t),L8o=r(QAe," (FNet model)"),QAe.forEach(t),x8o=i(O),h1=n(O,"LI",{});var WAe=s(h1);Fie=n(WAe,"STRONG",{});var ert=s(Fie);k8o=r(ert,"funnel"),ert.forEach(t),S8o=r(WAe," \u2014 "),IN=n(WAe,"A",{href:!0});var ort=s(IN);R8o=r(ort,"FunnelForMultipleChoice"),ort.forEach(t),B8o=r(WAe," (Funnel Transformer model)"),WAe.forEach(t),P8o=i(O),p1=n(O,"LI",{});var HAe=s(p1);vie=n(HAe,"STRONG",{});var rrt=s(vie);$8o=r(rrt,"ibert"),rrt.forEach(t),I8o=r(HAe," \u2014 "),qN=n(HAe,"A",{href:!0});var trt=s(qN);q8o=r(trt,"IBertForMultipleChoice"),trt.forEach(t),N8o=r(HAe," (I-BERT model)"),HAe.forEach(t),j8o=i(O),_1=n(O,"LI",{});var UAe=s(_1);Tie=n(UAe,"STRONG",{});var art=s(Tie);D8o=r(art,"longformer"),art.forEach(t),G8o=r(UAe," \u2014 "),NN=n(UAe,"A",{href:!0});var nrt=s(NN);O8o=r(nrt,"LongformerForMultipleChoice"),nrt.forEach(t),V8o=r(UAe," (Longformer model)"),UAe.forEach(t),X8o=i(O),u1=n(O,"LI",{});var JAe=s(u1);Mie=n(JAe,"STRONG",{});var srt=s(Mie);z8o=r(srt,"megatron-bert"),srt.forEach(t),Q8o=r(JAe," \u2014 "),jN=n(JAe,"A",{href:!0});var lrt=s(jN);W8o=r(lrt,"MegatronBertForMultipleChoice"),lrt.forEach(t),H8o=r(JAe," (MegatronBert model)"),JAe.forEach(t),U8o=i(O),b1=n(O,"LI",{});var YAe=s(b1);Eie=n(YAe,"STRONG",{});var irt=s(Eie);J8o=r(irt,"mobilebert"),irt.forEach(t),Y8o=r(YAe," \u2014 "),DN=n(YAe,"A",{href:!0});var drt=s(DN);K8o=r(drt,"MobileBertForMultipleChoice"),drt.forEach(t),Z8o=r(YAe," (MobileBERT model)"),YAe.forEach(t),eLo=i(O),F1=n(O,"LI",{});var KAe=s(F1);Cie=n(KAe,"STRONG",{});var crt=s(Cie);oLo=r(crt,"mpnet"),crt.forEach(t),rLo=r(KAe," \u2014 "),GN=n(KAe,"A",{href:!0});var frt=s(GN);tLo=r(frt,"MPNetForMultipleChoice"),frt.forEach(t),aLo=r(KAe," (MPNet model)"),KAe.forEach(t),nLo=i(O),v1=n(O,"LI",{});var ZAe=s(v1);wie=n(ZAe,"STRONG",{});var mrt=s(wie);sLo=r(mrt,"nystromformer"),mrt.forEach(t),lLo=r(ZAe," \u2014 "),ON=n(ZAe,"A",{href:!0});var grt=s(ON);iLo=r(grt,"NystromformerForMultipleChoice"),grt.forEach(t),dLo=r(ZAe," (Nystromformer model)"),ZAe.forEach(t),cLo=i(O),T1=n(O,"LI",{});var e0e=s(T1);Aie=n(e0e,"STRONG",{});var hrt=s(Aie);fLo=r(hrt,"qdqbert"),hrt.forEach(t),mLo=r(e0e," \u2014 "),VN=n(e0e,"A",{href:!0});var prt=s(VN);gLo=r(prt,"QDQBertForMultipleChoice"),prt.forEach(t),hLo=r(e0e," (QDQBert model)"),e0e.forEach(t),pLo=i(O),M1=n(O,"LI",{});var o0e=s(M1);yie=n(o0e,"STRONG",{});var _rt=s(yie);_Lo=r(_rt,"rembert"),_rt.forEach(t),uLo=r(o0e," \u2014 "),XN=n(o0e,"A",{href:!0});var urt=s(XN);bLo=r(urt,"RemBertForMultipleChoice"),urt.forEach(t),FLo=r(o0e," (RemBERT model)"),o0e.forEach(t),vLo=i(O),E1=n(O,"LI",{});var r0e=s(E1);Lie=n(r0e,"STRONG",{});var brt=s(Lie);TLo=r(brt,"roberta"),brt.forEach(t),MLo=r(r0e," \u2014 "),zN=n(r0e,"A",{href:!0});var Frt=s(zN);ELo=r(Frt,"RobertaForMultipleChoice"),Frt.forEach(t),CLo=r(r0e," (RoBERTa model)"),r0e.forEach(t),wLo=i(O),C1=n(O,"LI",{});var t0e=s(C1);xie=n(t0e,"STRONG",{});var vrt=s(xie);ALo=r(vrt,"roformer"),vrt.forEach(t),yLo=r(t0e," \u2014 "),QN=n(t0e,"A",{href:!0});var Trt=s(QN);LLo=r(Trt,"RoFormerForMultipleChoice"),Trt.forEach(t),xLo=r(t0e," (RoFormer model)"),t0e.forEach(t),kLo=i(O),w1=n(O,"LI",{});var a0e=s(w1);kie=n(a0e,"STRONG",{});var Mrt=s(kie);SLo=r(Mrt,"squeezebert"),Mrt.forEach(t),RLo=r(a0e," \u2014 "),WN=n(a0e,"A",{href:!0});var Ert=s(WN);BLo=r(Ert,"SqueezeBertForMultipleChoice"),Ert.forEach(t),PLo=r(a0e," (SqueezeBERT model)"),a0e.forEach(t),$Lo=i(O),A1=n(O,"LI",{});var n0e=s(A1);Sie=n(n0e,"STRONG",{});var Crt=s(Sie);ILo=r(Crt,"xlm"),Crt.forEach(t),qLo=r(n0e," \u2014 "),HN=n(n0e,"A",{href:!0});var wrt=s(HN);NLo=r(wrt,"XLMForMultipleChoice"),wrt.forEach(t),jLo=r(n0e," (XLM model)"),n0e.forEach(t),DLo=i(O),y1=n(O,"LI",{});var s0e=s(y1);Rie=n(s0e,"STRONG",{});var Art=s(Rie);GLo=r(Art,"xlm-roberta"),Art.forEach(t),OLo=r(s0e," \u2014 "),UN=n(s0e,"A",{href:!0});var yrt=s(UN);VLo=r(yrt,"XLMRobertaForMultipleChoice"),yrt.forEach(t),XLo=r(s0e," (XLM-RoBERTa model)"),s0e.forEach(t),zLo=i(O),L1=n(O,"LI",{});var l0e=s(L1);Bie=n(l0e,"STRONG",{});var Lrt=s(Bie);QLo=r(Lrt,"xlm-roberta-xl"),Lrt.forEach(t),WLo=r(l0e," \u2014 "),JN=n(l0e,"A",{href:!0});var xrt=s(JN);HLo=r(xrt,"XLMRobertaXLForMultipleChoice"),xrt.forEach(t),ULo=r(l0e," (XLM-RoBERTa-XL model)"),l0e.forEach(t),JLo=i(O),x1=n(O,"LI",{});var i0e=s(x1);Pie=n(i0e,"STRONG",{});var krt=s(Pie);YLo=r(krt,"xlnet"),krt.forEach(t),KLo=r(i0e," \u2014 "),YN=n(i0e,"A",{href:!0});var Srt=s(YN);ZLo=r(Srt,"XLNetForMultipleChoice"),Srt.forEach(t),e7o=r(i0e," (XLNet model)"),i0e.forEach(t),o7o=i(O),k1=n(O,"LI",{});var d0e=s(k1);$ie=n(d0e,"STRONG",{});var Rrt=s($ie);r7o=r(Rrt,"yoso"),Rrt.forEach(t),t7o=r(d0e," \u2014 "),KN=n(d0e,"A",{href:!0});var Brt=s(KN);a7o=r(Brt,"YosoForMultipleChoice"),Brt.forEach(t),n7o=r(d0e," (YOSO model)"),d0e.forEach(t),O.forEach(t),s7o=i(Qt),S1=n(Qt,"P",{});var c0e=s(S1);l7o=r(c0e,"The model is set in evaluation mode by default using "),Iie=n(c0e,"CODE",{});var Prt=s(Iie);i7o=r(Prt,"model.eval()"),Prt.forEach(t),d7o=r(c0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(c0e,"CODE",{});var $rt=s(qie);c7o=r($rt,"model.train()"),$rt.forEach(t),c0e.forEach(t),f7o=i(Qt),Nie=n(Qt,"P",{});var Irt=s(Nie);m7o=r(Irt,"Examples:"),Irt.forEach(t),g7o=i(Qt),m(Yw.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),VRe=i(c),bd=n(c,"H2",{class:!0});var KPe=s(bd);R1=n(KPe,"A",{id:!0,class:!0,href:!0});var qrt=s(R1);jie=n(qrt,"SPAN",{});var Nrt=s(jie);m(Kw.$$.fragment,Nrt),Nrt.forEach(t),qrt.forEach(t),h7o=i(KPe),Die=n(KPe,"SPAN",{});var jrt=s(Die);p7o=r(jrt,"AutoModelForNextSentencePrediction"),jrt.forEach(t),KPe.forEach(t),XRe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(Zw.$$.fragment,ll),_7o=i(ll),Fd=n(ll,"P",{});var yU=s(Fd);u7o=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZN=n(yU,"A",{href:!0});var Drt=s(ZN);b7o=r(Drt,"from_pretrained()"),Drt.forEach(t),F7o=r(yU," class method or the "),ej=n(yU,"A",{href:!0});var Grt=s(ej);v7o=r(Grt,"from_config()"),Grt.forEach(t),T7o=r(yU,` class
method.`),yU.forEach(t),M7o=i(ll),e6=n(ll,"P",{});var ZPe=s(e6);E7o=r(ZPe,"This class cannot be instantiated directly using "),Gie=n(ZPe,"CODE",{});var Ort=s(Gie);C7o=r(Ort,"__init__()"),Ort.forEach(t),w7o=r(ZPe," (throws an error)."),ZPe.forEach(t),A7o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(o6.$$.fragment,il),y7o=i(il),Oie=n(il,"P",{});var Vrt=s(Oie);L7o=r(Vrt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vrt.forEach(t),x7o=i(il),vd=n(il,"P",{});var LU=s(vd);k7o=r(LU,`Note:
Loading a model from its configuration file does `),Vie=n(LU,"STRONG",{});var Xrt=s(Vie);S7o=r(Xrt,"not"),Xrt.forEach(t),R7o=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(LU,"A",{href:!0});var zrt=s(oj);B7o=r(zrt,"from_pretrained()"),zrt.forEach(t),P7o=r(LU," to load the model weights."),LU.forEach(t),$7o=i(il),Xie=n(il,"P",{});var Qrt=s(Xie);I7o=r(Qrt,"Examples:"),Qrt.forEach(t),q7o=i(il),m(r6.$$.fragment,il),il.forEach(t),N7o=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(t6.$$.fragment,Wt),j7o=i(Wt),zie=n(Wt,"P",{});var Wrt=s(zie);D7o=r(Wrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wrt.forEach(t),G7o=i(Wt),Ya=n(Wt,"P",{});var P3=s(Ya);O7o=r(P3,"The model class to instantiate is selected based on the "),Qie=n(P3,"CODE",{});var Hrt=s(Qie);V7o=r(Hrt,"model_type"),Hrt.forEach(t),X7o=r(P3,` property of the config object (either
passed as an argument or loaded from `),Wie=n(P3,"CODE",{});var Urt=s(Wie);z7o=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),Q7o=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hie=n(P3,"CODE",{});var Jrt=s(Hie);W7o=r(Jrt,"pretrained_model_name_or_path"),Jrt.forEach(t),H7o=r(P3,":"),P3.forEach(t),U7o=i(Wt),da=n(Wt,"UL",{});var dl=s(da);B1=n(dl,"LI",{});var f0e=s(B1);Uie=n(f0e,"STRONG",{});var Yrt=s(Uie);J7o=r(Yrt,"bert"),Yrt.forEach(t),Y7o=r(f0e," \u2014 "),rj=n(f0e,"A",{href:!0});var Krt=s(rj);K7o=r(Krt,"BertForNextSentencePrediction"),Krt.forEach(t),Z7o=r(f0e," (BERT model)"),f0e.forEach(t),exo=i(dl),P1=n(dl,"LI",{});var m0e=s(P1);Jie=n(m0e,"STRONG",{});var Zrt=s(Jie);oxo=r(Zrt,"fnet"),Zrt.forEach(t),rxo=r(m0e," \u2014 "),tj=n(m0e,"A",{href:!0});var ett=s(tj);txo=r(ett,"FNetForNextSentencePrediction"),ett.forEach(t),axo=r(m0e," (FNet model)"),m0e.forEach(t),nxo=i(dl),$1=n(dl,"LI",{});var g0e=s($1);Yie=n(g0e,"STRONG",{});var ott=s(Yie);sxo=r(ott,"megatron-bert"),ott.forEach(t),lxo=r(g0e," \u2014 "),aj=n(g0e,"A",{href:!0});var rtt=s(aj);ixo=r(rtt,"MegatronBertForNextSentencePrediction"),rtt.forEach(t),dxo=r(g0e," (MegatronBert model)"),g0e.forEach(t),cxo=i(dl),I1=n(dl,"LI",{});var h0e=s(I1);Kie=n(h0e,"STRONG",{});var ttt=s(Kie);fxo=r(ttt,"mobilebert"),ttt.forEach(t),mxo=r(h0e," \u2014 "),nj=n(h0e,"A",{href:!0});var att=s(nj);gxo=r(att,"MobileBertForNextSentencePrediction"),att.forEach(t),hxo=r(h0e," (MobileBERT model)"),h0e.forEach(t),pxo=i(dl),q1=n(dl,"LI",{});var p0e=s(q1);Zie=n(p0e,"STRONG",{});var ntt=s(Zie);_xo=r(ntt,"qdqbert"),ntt.forEach(t),uxo=r(p0e," \u2014 "),sj=n(p0e,"A",{href:!0});var stt=s(sj);bxo=r(stt,"QDQBertForNextSentencePrediction"),stt.forEach(t),Fxo=r(p0e," (QDQBert model)"),p0e.forEach(t),dl.forEach(t),vxo=i(Wt),N1=n(Wt,"P",{});var _0e=s(N1);Txo=r(_0e,"The model is set in evaluation mode by default using "),ede=n(_0e,"CODE",{});var ltt=s(ede);Mxo=r(ltt,"model.eval()"),ltt.forEach(t),Exo=r(_0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ode=n(_0e,"CODE",{});var itt=s(ode);Cxo=r(itt,"model.train()"),itt.forEach(t),_0e.forEach(t),wxo=i(Wt),rde=n(Wt,"P",{});var dtt=s(rde);Axo=r(dtt,"Examples:"),dtt.forEach(t),yxo=i(Wt),m(a6.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),zRe=i(c),Td=n(c,"H2",{class:!0});var e$e=s(Td);j1=n(e$e,"A",{id:!0,class:!0,href:!0});var ctt=s(j1);tde=n(ctt,"SPAN",{});var ftt=s(tde);m(n6.$$.fragment,ftt),ftt.forEach(t),ctt.forEach(t),Lxo=i(e$e),ade=n(e$e,"SPAN",{});var mtt=s(ade);xxo=r(mtt,"AutoModelForTokenClassification"),mtt.forEach(t),e$e.forEach(t),QRe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(s6.$$.fragment,cl),kxo=i(cl),Md=n(cl,"P",{});var xU=s(Md);Sxo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lj=n(xU,"A",{href:!0});var gtt=s(lj);Rxo=r(gtt,"from_pretrained()"),gtt.forEach(t),Bxo=r(xU," class method or the "),ij=n(xU,"A",{href:!0});var htt=s(ij);Pxo=r(htt,"from_config()"),htt.forEach(t),$xo=r(xU,` class
method.`),xU.forEach(t),Ixo=i(cl),l6=n(cl,"P",{});var o$e=s(l6);qxo=r(o$e,"This class cannot be instantiated directly using "),nde=n(o$e,"CODE",{});var ptt=s(nde);Nxo=r(ptt,"__init__()"),ptt.forEach(t),jxo=r(o$e," (throws an error)."),o$e.forEach(t),Dxo=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(i6.$$.fragment,fl),Gxo=i(fl),sde=n(fl,"P",{});var _tt=s(sde);Oxo=r(_tt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_tt.forEach(t),Vxo=i(fl),Ed=n(fl,"P",{});var kU=s(Ed);Xxo=r(kU,`Note:
Loading a model from its configuration file does `),lde=n(kU,"STRONG",{});var utt=s(lde);zxo=r(utt,"not"),utt.forEach(t),Qxo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dj=n(kU,"A",{href:!0});var btt=s(dj);Wxo=r(btt,"from_pretrained()"),btt.forEach(t),Hxo=r(kU," to load the model weights."),kU.forEach(t),Uxo=i(fl),ide=n(fl,"P",{});var Ftt=s(ide);Jxo=r(Ftt,"Examples:"),Ftt.forEach(t),Yxo=i(fl),m(d6.$$.fragment,fl),fl.forEach(t),Kxo=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(c6.$$.fragment,Ht),Zxo=i(Ht),dde=n(Ht,"P",{});var vtt=s(dde);eko=r(vtt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vtt.forEach(t),oko=i(Ht),Ka=n(Ht,"P",{});var $3=s(Ka);rko=r($3,"The model class to instantiate is selected based on the "),cde=n($3,"CODE",{});var Ttt=s(cde);tko=r(Ttt,"model_type"),Ttt.forEach(t),ako=r($3,` property of the config object (either
passed as an argument or loaded from `),fde=n($3,"CODE",{});var Mtt=s(fde);nko=r(Mtt,"pretrained_model_name_or_path"),Mtt.forEach(t),sko=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mde=n($3,"CODE",{});var Ett=s(mde);lko=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),iko=r($3,":"),$3.forEach(t),dko=i(Ht),j=n(Ht,"UL",{});var D=s(j);D1=n(D,"LI",{});var u0e=s(D1);gde=n(u0e,"STRONG",{});var Ctt=s(gde);cko=r(Ctt,"albert"),Ctt.forEach(t),fko=r(u0e," \u2014 "),cj=n(u0e,"A",{href:!0});var wtt=s(cj);mko=r(wtt,"AlbertForTokenClassification"),wtt.forEach(t),gko=r(u0e," (ALBERT model)"),u0e.forEach(t),hko=i(D),G1=n(D,"LI",{});var b0e=s(G1);hde=n(b0e,"STRONG",{});var Att=s(hde);pko=r(Att,"bert"),Att.forEach(t),_ko=r(b0e," \u2014 "),fj=n(b0e,"A",{href:!0});var ytt=s(fj);uko=r(ytt,"BertForTokenClassification"),ytt.forEach(t),bko=r(b0e," (BERT model)"),b0e.forEach(t),Fko=i(D),O1=n(D,"LI",{});var F0e=s(O1);pde=n(F0e,"STRONG",{});var Ltt=s(pde);vko=r(Ltt,"big_bird"),Ltt.forEach(t),Tko=r(F0e," \u2014 "),mj=n(F0e,"A",{href:!0});var xtt=s(mj);Mko=r(xtt,"BigBirdForTokenClassification"),xtt.forEach(t),Eko=r(F0e," (BigBird model)"),F0e.forEach(t),Cko=i(D),V1=n(D,"LI",{});var v0e=s(V1);_de=n(v0e,"STRONG",{});var ktt=s(_de);wko=r(ktt,"camembert"),ktt.forEach(t),Ako=r(v0e," \u2014 "),gj=n(v0e,"A",{href:!0});var Stt=s(gj);yko=r(Stt,"CamembertForTokenClassification"),Stt.forEach(t),Lko=r(v0e," (CamemBERT model)"),v0e.forEach(t),xko=i(D),X1=n(D,"LI",{});var T0e=s(X1);ude=n(T0e,"STRONG",{});var Rtt=s(ude);kko=r(Rtt,"canine"),Rtt.forEach(t),Sko=r(T0e," \u2014 "),hj=n(T0e,"A",{href:!0});var Btt=s(hj);Rko=r(Btt,"CanineForTokenClassification"),Btt.forEach(t),Bko=r(T0e," (Canine model)"),T0e.forEach(t),Pko=i(D),z1=n(D,"LI",{});var M0e=s(z1);bde=n(M0e,"STRONG",{});var Ptt=s(bde);$ko=r(Ptt,"convbert"),Ptt.forEach(t),Iko=r(M0e," \u2014 "),pj=n(M0e,"A",{href:!0});var $tt=s(pj);qko=r($tt,"ConvBertForTokenClassification"),$tt.forEach(t),Nko=r(M0e," (ConvBERT model)"),M0e.forEach(t),jko=i(D),Q1=n(D,"LI",{});var E0e=s(Q1);Fde=n(E0e,"STRONG",{});var Itt=s(Fde);Dko=r(Itt,"data2vec-text"),Itt.forEach(t),Gko=r(E0e," \u2014 "),_j=n(E0e,"A",{href:!0});var qtt=s(_j);Oko=r(qtt,"Data2VecTextForTokenClassification"),qtt.forEach(t),Vko=r(E0e," (Data2VecText model)"),E0e.forEach(t),Xko=i(D),W1=n(D,"LI",{});var C0e=s(W1);vde=n(C0e,"STRONG",{});var Ntt=s(vde);zko=r(Ntt,"deberta"),Ntt.forEach(t),Qko=r(C0e," \u2014 "),uj=n(C0e,"A",{href:!0});var jtt=s(uj);Wko=r(jtt,"DebertaForTokenClassification"),jtt.forEach(t),Hko=r(C0e," (DeBERTa model)"),C0e.forEach(t),Uko=i(D),H1=n(D,"LI",{});var w0e=s(H1);Tde=n(w0e,"STRONG",{});var Dtt=s(Tde);Jko=r(Dtt,"deberta-v2"),Dtt.forEach(t),Yko=r(w0e," \u2014 "),bj=n(w0e,"A",{href:!0});var Gtt=s(bj);Kko=r(Gtt,"DebertaV2ForTokenClassification"),Gtt.forEach(t),Zko=r(w0e," (DeBERTa-v2 model)"),w0e.forEach(t),eSo=i(D),U1=n(D,"LI",{});var A0e=s(U1);Mde=n(A0e,"STRONG",{});var Ott=s(Mde);oSo=r(Ott,"distilbert"),Ott.forEach(t),rSo=r(A0e," \u2014 "),Fj=n(A0e,"A",{href:!0});var Vtt=s(Fj);tSo=r(Vtt,"DistilBertForTokenClassification"),Vtt.forEach(t),aSo=r(A0e," (DistilBERT model)"),A0e.forEach(t),nSo=i(D),J1=n(D,"LI",{});var y0e=s(J1);Ede=n(y0e,"STRONG",{});var Xtt=s(Ede);sSo=r(Xtt,"electra"),Xtt.forEach(t),lSo=r(y0e," \u2014 "),vj=n(y0e,"A",{href:!0});var ztt=s(vj);iSo=r(ztt,"ElectraForTokenClassification"),ztt.forEach(t),dSo=r(y0e," (ELECTRA model)"),y0e.forEach(t),cSo=i(D),Y1=n(D,"LI",{});var L0e=s(Y1);Cde=n(L0e,"STRONG",{});var Qtt=s(Cde);fSo=r(Qtt,"flaubert"),Qtt.forEach(t),mSo=r(L0e," \u2014 "),Tj=n(L0e,"A",{href:!0});var Wtt=s(Tj);gSo=r(Wtt,"FlaubertForTokenClassification"),Wtt.forEach(t),hSo=r(L0e," (FlauBERT model)"),L0e.forEach(t),pSo=i(D),K1=n(D,"LI",{});var x0e=s(K1);wde=n(x0e,"STRONG",{});var Htt=s(wde);_So=r(Htt,"fnet"),Htt.forEach(t),uSo=r(x0e," \u2014 "),Mj=n(x0e,"A",{href:!0});var Utt=s(Mj);bSo=r(Utt,"FNetForTokenClassification"),Utt.forEach(t),FSo=r(x0e," (FNet model)"),x0e.forEach(t),vSo=i(D),Z1=n(D,"LI",{});var k0e=s(Z1);Ade=n(k0e,"STRONG",{});var Jtt=s(Ade);TSo=r(Jtt,"funnel"),Jtt.forEach(t),MSo=r(k0e," \u2014 "),Ej=n(k0e,"A",{href:!0});var Ytt=s(Ej);ESo=r(Ytt,"FunnelForTokenClassification"),Ytt.forEach(t),CSo=r(k0e," (Funnel Transformer model)"),k0e.forEach(t),wSo=i(D),eb=n(D,"LI",{});var S0e=s(eb);yde=n(S0e,"STRONG",{});var Ktt=s(yde);ASo=r(Ktt,"gpt2"),Ktt.forEach(t),ySo=r(S0e," \u2014 "),Cj=n(S0e,"A",{href:!0});var Ztt=s(Cj);LSo=r(Ztt,"GPT2ForTokenClassification"),Ztt.forEach(t),xSo=r(S0e," (OpenAI GPT-2 model)"),S0e.forEach(t),kSo=i(D),ob=n(D,"LI",{});var R0e=s(ob);Lde=n(R0e,"STRONG",{});var eat=s(Lde);SSo=r(eat,"ibert"),eat.forEach(t),RSo=r(R0e," \u2014 "),wj=n(R0e,"A",{href:!0});var oat=s(wj);BSo=r(oat,"IBertForTokenClassification"),oat.forEach(t),PSo=r(R0e," (I-BERT model)"),R0e.forEach(t),$So=i(D),rb=n(D,"LI",{});var B0e=s(rb);xde=n(B0e,"STRONG",{});var rat=s(xde);ISo=r(rat,"layoutlm"),rat.forEach(t),qSo=r(B0e," \u2014 "),Aj=n(B0e,"A",{href:!0});var tat=s(Aj);NSo=r(tat,"LayoutLMForTokenClassification"),tat.forEach(t),jSo=r(B0e," (LayoutLM model)"),B0e.forEach(t),DSo=i(D),tb=n(D,"LI",{});var P0e=s(tb);kde=n(P0e,"STRONG",{});var aat=s(kde);GSo=r(aat,"layoutlmv2"),aat.forEach(t),OSo=r(P0e," \u2014 "),yj=n(P0e,"A",{href:!0});var nat=s(yj);VSo=r(nat,"LayoutLMv2ForTokenClassification"),nat.forEach(t),XSo=r(P0e," (LayoutLMv2 model)"),P0e.forEach(t),zSo=i(D),ab=n(D,"LI",{});var $0e=s(ab);Sde=n($0e,"STRONG",{});var sat=s(Sde);QSo=r(sat,"longformer"),sat.forEach(t),WSo=r($0e," \u2014 "),Lj=n($0e,"A",{href:!0});var lat=s(Lj);HSo=r(lat,"LongformerForTokenClassification"),lat.forEach(t),USo=r($0e," (Longformer model)"),$0e.forEach(t),JSo=i(D),nb=n(D,"LI",{});var I0e=s(nb);Rde=n(I0e,"STRONG",{});var iat=s(Rde);YSo=r(iat,"megatron-bert"),iat.forEach(t),KSo=r(I0e," \u2014 "),xj=n(I0e,"A",{href:!0});var dat=s(xj);ZSo=r(dat,"MegatronBertForTokenClassification"),dat.forEach(t),eRo=r(I0e," (MegatronBert model)"),I0e.forEach(t),oRo=i(D),sb=n(D,"LI",{});var q0e=s(sb);Bde=n(q0e,"STRONG",{});var cat=s(Bde);rRo=r(cat,"mobilebert"),cat.forEach(t),tRo=r(q0e," \u2014 "),kj=n(q0e,"A",{href:!0});var fat=s(kj);aRo=r(fat,"MobileBertForTokenClassification"),fat.forEach(t),nRo=r(q0e," (MobileBERT model)"),q0e.forEach(t),sRo=i(D),lb=n(D,"LI",{});var N0e=s(lb);Pde=n(N0e,"STRONG",{});var mat=s(Pde);lRo=r(mat,"mpnet"),mat.forEach(t),iRo=r(N0e," \u2014 "),Sj=n(N0e,"A",{href:!0});var gat=s(Sj);dRo=r(gat,"MPNetForTokenClassification"),gat.forEach(t),cRo=r(N0e," (MPNet model)"),N0e.forEach(t),fRo=i(D),ib=n(D,"LI",{});var j0e=s(ib);$de=n(j0e,"STRONG",{});var hat=s($de);mRo=r(hat,"nystromformer"),hat.forEach(t),gRo=r(j0e," \u2014 "),Rj=n(j0e,"A",{href:!0});var pat=s(Rj);hRo=r(pat,"NystromformerForTokenClassification"),pat.forEach(t),pRo=r(j0e," (Nystromformer model)"),j0e.forEach(t),_Ro=i(D),db=n(D,"LI",{});var D0e=s(db);Ide=n(D0e,"STRONG",{});var _at=s(Ide);uRo=r(_at,"qdqbert"),_at.forEach(t),bRo=r(D0e," \u2014 "),Bj=n(D0e,"A",{href:!0});var uat=s(Bj);FRo=r(uat,"QDQBertForTokenClassification"),uat.forEach(t),vRo=r(D0e," (QDQBert model)"),D0e.forEach(t),TRo=i(D),cb=n(D,"LI",{});var G0e=s(cb);qde=n(G0e,"STRONG",{});var bat=s(qde);MRo=r(bat,"rembert"),bat.forEach(t),ERo=r(G0e," \u2014 "),Pj=n(G0e,"A",{href:!0});var Fat=s(Pj);CRo=r(Fat,"RemBertForTokenClassification"),Fat.forEach(t),wRo=r(G0e," (RemBERT model)"),G0e.forEach(t),ARo=i(D),fb=n(D,"LI",{});var O0e=s(fb);Nde=n(O0e,"STRONG",{});var vat=s(Nde);yRo=r(vat,"roberta"),vat.forEach(t),LRo=r(O0e," \u2014 "),$j=n(O0e,"A",{href:!0});var Tat=s($j);xRo=r(Tat,"RobertaForTokenClassification"),Tat.forEach(t),kRo=r(O0e," (RoBERTa model)"),O0e.forEach(t),SRo=i(D),mb=n(D,"LI",{});var V0e=s(mb);jde=n(V0e,"STRONG",{});var Mat=s(jde);RRo=r(Mat,"roformer"),Mat.forEach(t),BRo=r(V0e," \u2014 "),Ij=n(V0e,"A",{href:!0});var Eat=s(Ij);PRo=r(Eat,"RoFormerForTokenClassification"),Eat.forEach(t),$Ro=r(V0e," (RoFormer model)"),V0e.forEach(t),IRo=i(D),gb=n(D,"LI",{});var X0e=s(gb);Dde=n(X0e,"STRONG",{});var Cat=s(Dde);qRo=r(Cat,"squeezebert"),Cat.forEach(t),NRo=r(X0e," \u2014 "),qj=n(X0e,"A",{href:!0});var wat=s(qj);jRo=r(wat,"SqueezeBertForTokenClassification"),wat.forEach(t),DRo=r(X0e," (SqueezeBERT model)"),X0e.forEach(t),GRo=i(D),hb=n(D,"LI",{});var z0e=s(hb);Gde=n(z0e,"STRONG",{});var Aat=s(Gde);ORo=r(Aat,"xlm"),Aat.forEach(t),VRo=r(z0e," \u2014 "),Nj=n(z0e,"A",{href:!0});var yat=s(Nj);XRo=r(yat,"XLMForTokenClassification"),yat.forEach(t),zRo=r(z0e," (XLM model)"),z0e.forEach(t),QRo=i(D),pb=n(D,"LI",{});var Q0e=s(pb);Ode=n(Q0e,"STRONG",{});var Lat=s(Ode);WRo=r(Lat,"xlm-roberta"),Lat.forEach(t),HRo=r(Q0e," \u2014 "),jj=n(Q0e,"A",{href:!0});var xat=s(jj);URo=r(xat,"XLMRobertaForTokenClassification"),xat.forEach(t),JRo=r(Q0e," (XLM-RoBERTa model)"),Q0e.forEach(t),YRo=i(D),_b=n(D,"LI",{});var W0e=s(_b);Vde=n(W0e,"STRONG",{});var kat=s(Vde);KRo=r(kat,"xlm-roberta-xl"),kat.forEach(t),ZRo=r(W0e," \u2014 "),Dj=n(W0e,"A",{href:!0});var Sat=s(Dj);eBo=r(Sat,"XLMRobertaXLForTokenClassification"),Sat.forEach(t),oBo=r(W0e," (XLM-RoBERTa-XL model)"),W0e.forEach(t),rBo=i(D),ub=n(D,"LI",{});var H0e=s(ub);Xde=n(H0e,"STRONG",{});var Rat=s(Xde);tBo=r(Rat,"xlnet"),Rat.forEach(t),aBo=r(H0e," \u2014 "),Gj=n(H0e,"A",{href:!0});var Bat=s(Gj);nBo=r(Bat,"XLNetForTokenClassification"),Bat.forEach(t),sBo=r(H0e," (XLNet model)"),H0e.forEach(t),lBo=i(D),bb=n(D,"LI",{});var U0e=s(bb);zde=n(U0e,"STRONG",{});var Pat=s(zde);iBo=r(Pat,"yoso"),Pat.forEach(t),dBo=r(U0e," \u2014 "),Oj=n(U0e,"A",{href:!0});var $at=s(Oj);cBo=r($at,"YosoForTokenClassification"),$at.forEach(t),fBo=r(U0e," (YOSO model)"),U0e.forEach(t),D.forEach(t),mBo=i(Ht),Fb=n(Ht,"P",{});var J0e=s(Fb);gBo=r(J0e,"The model is set in evaluation mode by default using "),Qde=n(J0e,"CODE",{});var Iat=s(Qde);hBo=r(Iat,"model.eval()"),Iat.forEach(t),pBo=r(J0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(J0e,"CODE",{});var qat=s(Wde);_Bo=r(qat,"model.train()"),qat.forEach(t),J0e.forEach(t),uBo=i(Ht),Hde=n(Ht,"P",{});var Nat=s(Hde);bBo=r(Nat,"Examples:"),Nat.forEach(t),FBo=i(Ht),m(f6.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),WRe=i(c),Cd=n(c,"H2",{class:!0});var r$e=s(Cd);vb=n(r$e,"A",{id:!0,class:!0,href:!0});var jat=s(vb);Ude=n(jat,"SPAN",{});var Dat=s(Ude);m(m6.$$.fragment,Dat),Dat.forEach(t),jat.forEach(t),vBo=i(r$e),Jde=n(r$e,"SPAN",{});var Gat=s(Jde);TBo=r(Gat,"AutoModelForQuestionAnswering"),Gat.forEach(t),r$e.forEach(t),HRe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(g6.$$.fragment,ml),MBo=i(ml),wd=n(ml,"P",{});var SU=s(wd);EBo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vj=n(SU,"A",{href:!0});var Oat=s(Vj);CBo=r(Oat,"from_pretrained()"),Oat.forEach(t),wBo=r(SU," class method or the "),Xj=n(SU,"A",{href:!0});var Vat=s(Xj);ABo=r(Vat,"from_config()"),Vat.forEach(t),yBo=r(SU,` class
method.`),SU.forEach(t),LBo=i(ml),h6=n(ml,"P",{});var t$e=s(h6);xBo=r(t$e,"This class cannot be instantiated directly using "),Yde=n(t$e,"CODE",{});var Xat=s(Yde);kBo=r(Xat,"__init__()"),Xat.forEach(t),SBo=r(t$e," (throws an error)."),t$e.forEach(t),RBo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(p6.$$.fragment,gl),BBo=i(gl),Kde=n(gl,"P",{});var zat=s(Kde);PBo=r(zat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zat.forEach(t),$Bo=i(gl),Ad=n(gl,"P",{});var RU=s(Ad);IBo=r(RU,`Note:
Loading a model from its configuration file does `),Zde=n(RU,"STRONG",{});var Qat=s(Zde);qBo=r(Qat,"not"),Qat.forEach(t),NBo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(RU,"A",{href:!0});var Wat=s(zj);jBo=r(Wat,"from_pretrained()"),Wat.forEach(t),DBo=r(RU," to load the model weights."),RU.forEach(t),GBo=i(gl),ece=n(gl,"P",{});var Hat=s(ece);OBo=r(Hat,"Examples:"),Hat.forEach(t),VBo=i(gl),m(_6.$$.fragment,gl),gl.forEach(t),XBo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(u6.$$.fragment,Ut),zBo=i(Ut),oce=n(Ut,"P",{});var Uat=s(oce);QBo=r(Uat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uat.forEach(t),WBo=i(Ut),Za=n(Ut,"P",{});var I3=s(Za);HBo=r(I3,"The model class to instantiate is selected based on the "),rce=n(I3,"CODE",{});var Jat=s(rce);UBo=r(Jat,"model_type"),Jat.forEach(t),JBo=r(I3,` property of the config object (either
passed as an argument or loaded from `),tce=n(I3,"CODE",{});var Yat=s(tce);YBo=r(Yat,"pretrained_model_name_or_path"),Yat.forEach(t),KBo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ace=n(I3,"CODE",{});var Kat=s(ace);ZBo=r(Kat,"pretrained_model_name_or_path"),Kat.forEach(t),ePo=r(I3,":"),I3.forEach(t),oPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);Tb=n(P,"LI",{});var Y0e=s(Tb);nce=n(Y0e,"STRONG",{});var Zat=s(nce);rPo=r(Zat,"albert"),Zat.forEach(t),tPo=r(Y0e," \u2014 "),Qj=n(Y0e,"A",{href:!0});var ent=s(Qj);aPo=r(ent,"AlbertForQuestionAnswering"),ent.forEach(t),nPo=r(Y0e," (ALBERT model)"),Y0e.forEach(t),sPo=i(P),Mb=n(P,"LI",{});var K0e=s(Mb);sce=n(K0e,"STRONG",{});var ont=s(sce);lPo=r(ont,"bart"),ont.forEach(t),iPo=r(K0e," \u2014 "),Wj=n(K0e,"A",{href:!0});var rnt=s(Wj);dPo=r(rnt,"BartForQuestionAnswering"),rnt.forEach(t),cPo=r(K0e," (BART model)"),K0e.forEach(t),fPo=i(P),Eb=n(P,"LI",{});var Z0e=s(Eb);lce=n(Z0e,"STRONG",{});var tnt=s(lce);mPo=r(tnt,"bert"),tnt.forEach(t),gPo=r(Z0e," \u2014 "),Hj=n(Z0e,"A",{href:!0});var ant=s(Hj);hPo=r(ant,"BertForQuestionAnswering"),ant.forEach(t),pPo=r(Z0e," (BERT model)"),Z0e.forEach(t),_Po=i(P),Cb=n(P,"LI",{});var eye=s(Cb);ice=n(eye,"STRONG",{});var nnt=s(ice);uPo=r(nnt,"big_bird"),nnt.forEach(t),bPo=r(eye," \u2014 "),Uj=n(eye,"A",{href:!0});var snt=s(Uj);FPo=r(snt,"BigBirdForQuestionAnswering"),snt.forEach(t),vPo=r(eye," (BigBird model)"),eye.forEach(t),TPo=i(P),wb=n(P,"LI",{});var oye=s(wb);dce=n(oye,"STRONG",{});var lnt=s(dce);MPo=r(lnt,"bigbird_pegasus"),lnt.forEach(t),EPo=r(oye," \u2014 "),Jj=n(oye,"A",{href:!0});var int=s(Jj);CPo=r(int,"BigBirdPegasusForQuestionAnswering"),int.forEach(t),wPo=r(oye," (BigBirdPegasus model)"),oye.forEach(t),APo=i(P),Ab=n(P,"LI",{});var rye=s(Ab);cce=n(rye,"STRONG",{});var dnt=s(cce);yPo=r(dnt,"camembert"),dnt.forEach(t),LPo=r(rye," \u2014 "),Yj=n(rye,"A",{href:!0});var cnt=s(Yj);xPo=r(cnt,"CamembertForQuestionAnswering"),cnt.forEach(t),kPo=r(rye," (CamemBERT model)"),rye.forEach(t),SPo=i(P),yb=n(P,"LI",{});var tye=s(yb);fce=n(tye,"STRONG",{});var fnt=s(fce);RPo=r(fnt,"canine"),fnt.forEach(t),BPo=r(tye," \u2014 "),Kj=n(tye,"A",{href:!0});var mnt=s(Kj);PPo=r(mnt,"CanineForQuestionAnswering"),mnt.forEach(t),$Po=r(tye," (Canine model)"),tye.forEach(t),IPo=i(P),Lb=n(P,"LI",{});var aye=s(Lb);mce=n(aye,"STRONG",{});var gnt=s(mce);qPo=r(gnt,"convbert"),gnt.forEach(t),NPo=r(aye," \u2014 "),Zj=n(aye,"A",{href:!0});var hnt=s(Zj);jPo=r(hnt,"ConvBertForQuestionAnswering"),hnt.forEach(t),DPo=r(aye," (ConvBERT model)"),aye.forEach(t),GPo=i(P),xb=n(P,"LI",{});var nye=s(xb);gce=n(nye,"STRONG",{});var pnt=s(gce);OPo=r(pnt,"data2vec-text"),pnt.forEach(t),VPo=r(nye," \u2014 "),eD=n(nye,"A",{href:!0});var _nt=s(eD);XPo=r(_nt,"Data2VecTextForQuestionAnswering"),_nt.forEach(t),zPo=r(nye," (Data2VecText model)"),nye.forEach(t),QPo=i(P),kb=n(P,"LI",{});var sye=s(kb);hce=n(sye,"STRONG",{});var unt=s(hce);WPo=r(unt,"deberta"),unt.forEach(t),HPo=r(sye," \u2014 "),oD=n(sye,"A",{href:!0});var bnt=s(oD);UPo=r(bnt,"DebertaForQuestionAnswering"),bnt.forEach(t),JPo=r(sye," (DeBERTa model)"),sye.forEach(t),YPo=i(P),Sb=n(P,"LI",{});var lye=s(Sb);pce=n(lye,"STRONG",{});var Fnt=s(pce);KPo=r(Fnt,"deberta-v2"),Fnt.forEach(t),ZPo=r(lye," \u2014 "),rD=n(lye,"A",{href:!0});var vnt=s(rD);e$o=r(vnt,"DebertaV2ForQuestionAnswering"),vnt.forEach(t),o$o=r(lye," (DeBERTa-v2 model)"),lye.forEach(t),r$o=i(P),Rb=n(P,"LI",{});var iye=s(Rb);_ce=n(iye,"STRONG",{});var Tnt=s(_ce);t$o=r(Tnt,"distilbert"),Tnt.forEach(t),a$o=r(iye," \u2014 "),tD=n(iye,"A",{href:!0});var Mnt=s(tD);n$o=r(Mnt,"DistilBertForQuestionAnswering"),Mnt.forEach(t),s$o=r(iye," (DistilBERT model)"),iye.forEach(t),l$o=i(P),Bb=n(P,"LI",{});var dye=s(Bb);uce=n(dye,"STRONG",{});var Ent=s(uce);i$o=r(Ent,"electra"),Ent.forEach(t),d$o=r(dye," \u2014 "),aD=n(dye,"A",{href:!0});var Cnt=s(aD);c$o=r(Cnt,"ElectraForQuestionAnswering"),Cnt.forEach(t),f$o=r(dye," (ELECTRA model)"),dye.forEach(t),m$o=i(P),Pb=n(P,"LI",{});var cye=s(Pb);bce=n(cye,"STRONG",{});var wnt=s(bce);g$o=r(wnt,"flaubert"),wnt.forEach(t),h$o=r(cye," \u2014 "),nD=n(cye,"A",{href:!0});var Ant=s(nD);p$o=r(Ant,"FlaubertForQuestionAnsweringSimple"),Ant.forEach(t),_$o=r(cye," (FlauBERT model)"),cye.forEach(t),u$o=i(P),$b=n(P,"LI",{});var fye=s($b);Fce=n(fye,"STRONG",{});var ynt=s(Fce);b$o=r(ynt,"fnet"),ynt.forEach(t),F$o=r(fye," \u2014 "),sD=n(fye,"A",{href:!0});var Lnt=s(sD);v$o=r(Lnt,"FNetForQuestionAnswering"),Lnt.forEach(t),T$o=r(fye," (FNet model)"),fye.forEach(t),M$o=i(P),Ib=n(P,"LI",{});var mye=s(Ib);vce=n(mye,"STRONG",{});var xnt=s(vce);E$o=r(xnt,"funnel"),xnt.forEach(t),C$o=r(mye," \u2014 "),lD=n(mye,"A",{href:!0});var knt=s(lD);w$o=r(knt,"FunnelForQuestionAnswering"),knt.forEach(t),A$o=r(mye," (Funnel Transformer model)"),mye.forEach(t),y$o=i(P),qb=n(P,"LI",{});var gye=s(qb);Tce=n(gye,"STRONG",{});var Snt=s(Tce);L$o=r(Snt,"gptj"),Snt.forEach(t),x$o=r(gye," \u2014 "),iD=n(gye,"A",{href:!0});var Rnt=s(iD);k$o=r(Rnt,"GPTJForQuestionAnswering"),Rnt.forEach(t),S$o=r(gye," (GPT-J model)"),gye.forEach(t),R$o=i(P),Nb=n(P,"LI",{});var hye=s(Nb);Mce=n(hye,"STRONG",{});var Bnt=s(Mce);B$o=r(Bnt,"ibert"),Bnt.forEach(t),P$o=r(hye," \u2014 "),dD=n(hye,"A",{href:!0});var Pnt=s(dD);$$o=r(Pnt,"IBertForQuestionAnswering"),Pnt.forEach(t),I$o=r(hye," (I-BERT model)"),hye.forEach(t),q$o=i(P),jb=n(P,"LI",{});var pye=s(jb);Ece=n(pye,"STRONG",{});var $nt=s(Ece);N$o=r($nt,"layoutlmv2"),$nt.forEach(t),j$o=r(pye," \u2014 "),cD=n(pye,"A",{href:!0});var Int=s(cD);D$o=r(Int,"LayoutLMv2ForQuestionAnswering"),Int.forEach(t),G$o=r(pye," (LayoutLMv2 model)"),pye.forEach(t),O$o=i(P),Db=n(P,"LI",{});var _ye=s(Db);Cce=n(_ye,"STRONG",{});var qnt=s(Cce);V$o=r(qnt,"led"),qnt.forEach(t),X$o=r(_ye," \u2014 "),fD=n(_ye,"A",{href:!0});var Nnt=s(fD);z$o=r(Nnt,"LEDForQuestionAnswering"),Nnt.forEach(t),Q$o=r(_ye," (LED model)"),_ye.forEach(t),W$o=i(P),Gb=n(P,"LI",{});var uye=s(Gb);wce=n(uye,"STRONG",{});var jnt=s(wce);H$o=r(jnt,"longformer"),jnt.forEach(t),U$o=r(uye," \u2014 "),mD=n(uye,"A",{href:!0});var Dnt=s(mD);J$o=r(Dnt,"LongformerForQuestionAnswering"),Dnt.forEach(t),Y$o=r(uye," (Longformer model)"),uye.forEach(t),K$o=i(P),Ob=n(P,"LI",{});var bye=s(Ob);Ace=n(bye,"STRONG",{});var Gnt=s(Ace);Z$o=r(Gnt,"lxmert"),Gnt.forEach(t),eIo=r(bye," \u2014 "),gD=n(bye,"A",{href:!0});var Ont=s(gD);oIo=r(Ont,"LxmertForQuestionAnswering"),Ont.forEach(t),rIo=r(bye," (LXMERT model)"),bye.forEach(t),tIo=i(P),Vb=n(P,"LI",{});var Fye=s(Vb);yce=n(Fye,"STRONG",{});var Vnt=s(yce);aIo=r(Vnt,"mbart"),Vnt.forEach(t),nIo=r(Fye," \u2014 "),hD=n(Fye,"A",{href:!0});var Xnt=s(hD);sIo=r(Xnt,"MBartForQuestionAnswering"),Xnt.forEach(t),lIo=r(Fye," (mBART model)"),Fye.forEach(t),iIo=i(P),Xb=n(P,"LI",{});var vye=s(Xb);Lce=n(vye,"STRONG",{});var znt=s(Lce);dIo=r(znt,"megatron-bert"),znt.forEach(t),cIo=r(vye," \u2014 "),pD=n(vye,"A",{href:!0});var Qnt=s(pD);fIo=r(Qnt,"MegatronBertForQuestionAnswering"),Qnt.forEach(t),mIo=r(vye," (MegatronBert model)"),vye.forEach(t),gIo=i(P),zb=n(P,"LI",{});var Tye=s(zb);xce=n(Tye,"STRONG",{});var Wnt=s(xce);hIo=r(Wnt,"mobilebert"),Wnt.forEach(t),pIo=r(Tye," \u2014 "),_D=n(Tye,"A",{href:!0});var Hnt=s(_D);_Io=r(Hnt,"MobileBertForQuestionAnswering"),Hnt.forEach(t),uIo=r(Tye," (MobileBERT model)"),Tye.forEach(t),bIo=i(P),Qb=n(P,"LI",{});var Mye=s(Qb);kce=n(Mye,"STRONG",{});var Unt=s(kce);FIo=r(Unt,"mpnet"),Unt.forEach(t),vIo=r(Mye," \u2014 "),uD=n(Mye,"A",{href:!0});var Jnt=s(uD);TIo=r(Jnt,"MPNetForQuestionAnswering"),Jnt.forEach(t),MIo=r(Mye," (MPNet model)"),Mye.forEach(t),EIo=i(P),Wb=n(P,"LI",{});var Eye=s(Wb);Sce=n(Eye,"STRONG",{});var Ynt=s(Sce);CIo=r(Ynt,"nystromformer"),Ynt.forEach(t),wIo=r(Eye," \u2014 "),bD=n(Eye,"A",{href:!0});var Knt=s(bD);AIo=r(Knt,"NystromformerForQuestionAnswering"),Knt.forEach(t),yIo=r(Eye," (Nystromformer model)"),Eye.forEach(t),LIo=i(P),Hb=n(P,"LI",{});var Cye=s(Hb);Rce=n(Cye,"STRONG",{});var Znt=s(Rce);xIo=r(Znt,"qdqbert"),Znt.forEach(t),kIo=r(Cye," \u2014 "),FD=n(Cye,"A",{href:!0});var est=s(FD);SIo=r(est,"QDQBertForQuestionAnswering"),est.forEach(t),RIo=r(Cye," (QDQBert model)"),Cye.forEach(t),BIo=i(P),Ub=n(P,"LI",{});var wye=s(Ub);Bce=n(wye,"STRONG",{});var ost=s(Bce);PIo=r(ost,"reformer"),ost.forEach(t),$Io=r(wye," \u2014 "),vD=n(wye,"A",{href:!0});var rst=s(vD);IIo=r(rst,"ReformerForQuestionAnswering"),rst.forEach(t),qIo=r(wye," (Reformer model)"),wye.forEach(t),NIo=i(P),Jb=n(P,"LI",{});var Aye=s(Jb);Pce=n(Aye,"STRONG",{});var tst=s(Pce);jIo=r(tst,"rembert"),tst.forEach(t),DIo=r(Aye," \u2014 "),TD=n(Aye,"A",{href:!0});var ast=s(TD);GIo=r(ast,"RemBertForQuestionAnswering"),ast.forEach(t),OIo=r(Aye," (RemBERT model)"),Aye.forEach(t),VIo=i(P),Yb=n(P,"LI",{});var yye=s(Yb);$ce=n(yye,"STRONG",{});var nst=s($ce);XIo=r(nst,"roberta"),nst.forEach(t),zIo=r(yye," \u2014 "),MD=n(yye,"A",{href:!0});var sst=s(MD);QIo=r(sst,"RobertaForQuestionAnswering"),sst.forEach(t),WIo=r(yye," (RoBERTa model)"),yye.forEach(t),HIo=i(P),Kb=n(P,"LI",{});var Lye=s(Kb);Ice=n(Lye,"STRONG",{});var lst=s(Ice);UIo=r(lst,"roformer"),lst.forEach(t),JIo=r(Lye," \u2014 "),ED=n(Lye,"A",{href:!0});var ist=s(ED);YIo=r(ist,"RoFormerForQuestionAnswering"),ist.forEach(t),KIo=r(Lye," (RoFormer model)"),Lye.forEach(t),ZIo=i(P),Zb=n(P,"LI",{});var xye=s(Zb);qce=n(xye,"STRONG",{});var dst=s(qce);eqo=r(dst,"splinter"),dst.forEach(t),oqo=r(xye," \u2014 "),CD=n(xye,"A",{href:!0});var cst=s(CD);rqo=r(cst,"SplinterForQuestionAnswering"),cst.forEach(t),tqo=r(xye," (Splinter model)"),xye.forEach(t),aqo=i(P),eF=n(P,"LI",{});var kye=s(eF);Nce=n(kye,"STRONG",{});var fst=s(Nce);nqo=r(fst,"squeezebert"),fst.forEach(t),sqo=r(kye," \u2014 "),wD=n(kye,"A",{href:!0});var mst=s(wD);lqo=r(mst,"SqueezeBertForQuestionAnswering"),mst.forEach(t),iqo=r(kye," (SqueezeBERT model)"),kye.forEach(t),dqo=i(P),oF=n(P,"LI",{});var Sye=s(oF);jce=n(Sye,"STRONG",{});var gst=s(jce);cqo=r(gst,"xlm"),gst.forEach(t),fqo=r(Sye," \u2014 "),AD=n(Sye,"A",{href:!0});var hst=s(AD);mqo=r(hst,"XLMForQuestionAnsweringSimple"),hst.forEach(t),gqo=r(Sye," (XLM model)"),Sye.forEach(t),hqo=i(P),rF=n(P,"LI",{});var Rye=s(rF);Dce=n(Rye,"STRONG",{});var pst=s(Dce);pqo=r(pst,"xlm-roberta"),pst.forEach(t),_qo=r(Rye," \u2014 "),yD=n(Rye,"A",{href:!0});var _st=s(yD);uqo=r(_st,"XLMRobertaForQuestionAnswering"),_st.forEach(t),bqo=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),Fqo=i(P),tF=n(P,"LI",{});var Bye=s(tF);Gce=n(Bye,"STRONG",{});var ust=s(Gce);vqo=r(ust,"xlm-roberta-xl"),ust.forEach(t),Tqo=r(Bye," \u2014 "),LD=n(Bye,"A",{href:!0});var bst=s(LD);Mqo=r(bst,"XLMRobertaXLForQuestionAnswering"),bst.forEach(t),Eqo=r(Bye," (XLM-RoBERTa-XL model)"),Bye.forEach(t),Cqo=i(P),aF=n(P,"LI",{});var Pye=s(aF);Oce=n(Pye,"STRONG",{});var Fst=s(Oce);wqo=r(Fst,"xlnet"),Fst.forEach(t),Aqo=r(Pye," \u2014 "),xD=n(Pye,"A",{href:!0});var vst=s(xD);yqo=r(vst,"XLNetForQuestionAnsweringSimple"),vst.forEach(t),Lqo=r(Pye," (XLNet model)"),Pye.forEach(t),xqo=i(P),nF=n(P,"LI",{});var $ye=s(nF);Vce=n($ye,"STRONG",{});var Tst=s(Vce);kqo=r(Tst,"yoso"),Tst.forEach(t),Sqo=r($ye," \u2014 "),kD=n($ye,"A",{href:!0});var Mst=s(kD);Rqo=r(Mst,"YosoForQuestionAnswering"),Mst.forEach(t),Bqo=r($ye," (YOSO model)"),$ye.forEach(t),P.forEach(t),Pqo=i(Ut),sF=n(Ut,"P",{});var Iye=s(sF);$qo=r(Iye,"The model is set in evaluation mode by default using "),Xce=n(Iye,"CODE",{});var Est=s(Xce);Iqo=r(Est,"model.eval()"),Est.forEach(t),qqo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=n(Iye,"CODE",{});var Cst=s(zce);Nqo=r(Cst,"model.train()"),Cst.forEach(t),Iye.forEach(t),jqo=i(Ut),Qce=n(Ut,"P",{});var wst=s(Qce);Dqo=r(wst,"Examples:"),wst.forEach(t),Gqo=i(Ut),m(b6.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),URe=i(c),yd=n(c,"H2",{class:!0});var a$e=s(yd);lF=n(a$e,"A",{id:!0,class:!0,href:!0});var Ast=s(lF);Wce=n(Ast,"SPAN",{});var yst=s(Wce);m(F6.$$.fragment,yst),yst.forEach(t),Ast.forEach(t),Oqo=i(a$e),Hce=n(a$e,"SPAN",{});var Lst=s(Hce);Vqo=r(Lst,"AutoModelForTableQuestionAnswering"),Lst.forEach(t),a$e.forEach(t),JRe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(v6.$$.fragment,hl),Xqo=i(hl),Ld=n(hl,"P",{});var BU=s(Ld);zqo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SD=n(BU,"A",{href:!0});var xst=s(SD);Qqo=r(xst,"from_pretrained()"),xst.forEach(t),Wqo=r(BU," class method or the "),RD=n(BU,"A",{href:!0});var kst=s(RD);Hqo=r(kst,"from_config()"),kst.forEach(t),Uqo=r(BU,` class
method.`),BU.forEach(t),Jqo=i(hl),T6=n(hl,"P",{});var n$e=s(T6);Yqo=r(n$e,"This class cannot be instantiated directly using "),Uce=n(n$e,"CODE",{});var Sst=s(Uce);Kqo=r(Sst,"__init__()"),Sst.forEach(t),Zqo=r(n$e," (throws an error)."),n$e.forEach(t),eNo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(M6.$$.fragment,pl),oNo=i(pl),Jce=n(pl,"P",{});var Rst=s(Jce);rNo=r(Rst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rst.forEach(t),tNo=i(pl),xd=n(pl,"P",{});var PU=s(xd);aNo=r(PU,`Note:
Loading a model from its configuration file does `),Yce=n(PU,"STRONG",{});var Bst=s(Yce);nNo=r(Bst,"not"),Bst.forEach(t),sNo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(PU,"A",{href:!0});var Pst=s(BD);lNo=r(Pst,"from_pretrained()"),Pst.forEach(t),iNo=r(PU," to load the model weights."),PU.forEach(t),dNo=i(pl),Kce=n(pl,"P",{});var $st=s(Kce);cNo=r($st,"Examples:"),$st.forEach(t),fNo=i(pl),m(E6.$$.fragment,pl),pl.forEach(t),mNo=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(C6.$$.fragment,Jt),gNo=i(Jt),Zce=n(Jt,"P",{});var Ist=s(Zce);hNo=r(Ist,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ist.forEach(t),pNo=i(Jt),en=n(Jt,"P",{});var q3=s(en);_No=r(q3,"The model class to instantiate is selected based on the "),efe=n(q3,"CODE",{});var qst=s(efe);uNo=r(qst,"model_type"),qst.forEach(t),bNo=r(q3,` property of the config object (either
passed as an argument or loaded from `),ofe=n(q3,"CODE",{});var Nst=s(ofe);FNo=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),vNo=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(q3,"CODE",{});var jst=s(rfe);TNo=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),MNo=r(q3,":"),q3.forEach(t),ENo=i(Jt),tfe=n(Jt,"UL",{});var Dst=s(tfe);iF=n(Dst,"LI",{});var qye=s(iF);afe=n(qye,"STRONG",{});var Gst=s(afe);CNo=r(Gst,"tapas"),Gst.forEach(t),wNo=r(qye," \u2014 "),PD=n(qye,"A",{href:!0});var Ost=s(PD);ANo=r(Ost,"TapasForQuestionAnswering"),Ost.forEach(t),yNo=r(qye," (TAPAS model)"),qye.forEach(t),Dst.forEach(t),LNo=i(Jt),dF=n(Jt,"P",{});var Nye=s(dF);xNo=r(Nye,"The model is set in evaluation mode by default using "),nfe=n(Nye,"CODE",{});var Vst=s(nfe);kNo=r(Vst,"model.eval()"),Vst.forEach(t),SNo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sfe=n(Nye,"CODE",{});var Xst=s(sfe);RNo=r(Xst,"model.train()"),Xst.forEach(t),Nye.forEach(t),BNo=i(Jt),lfe=n(Jt,"P",{});var zst=s(lfe);PNo=r(zst,"Examples:"),zst.forEach(t),$No=i(Jt),m(w6.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),YRe=i(c),kd=n(c,"H2",{class:!0});var s$e=s(kd);cF=n(s$e,"A",{id:!0,class:!0,href:!0});var Qst=s(cF);ife=n(Qst,"SPAN",{});var Wst=s(ife);m(A6.$$.fragment,Wst),Wst.forEach(t),Qst.forEach(t),INo=i(s$e),dfe=n(s$e,"SPAN",{});var Hst=s(dfe);qNo=r(Hst,"AutoModelForImageClassification"),Hst.forEach(t),s$e.forEach(t),KRe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(y6.$$.fragment,_l),NNo=i(_l),Sd=n(_l,"P",{});var $U=s(Sd);jNo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$D=n($U,"A",{href:!0});var Ust=s($D);DNo=r(Ust,"from_pretrained()"),Ust.forEach(t),GNo=r($U," class method or the "),ID=n($U,"A",{href:!0});var Jst=s(ID);ONo=r(Jst,"from_config()"),Jst.forEach(t),VNo=r($U,` class
method.`),$U.forEach(t),XNo=i(_l),L6=n(_l,"P",{});var l$e=s(L6);zNo=r(l$e,"This class cannot be instantiated directly using "),cfe=n(l$e,"CODE",{});var Yst=s(cfe);QNo=r(Yst,"__init__()"),Yst.forEach(t),WNo=r(l$e," (throws an error)."),l$e.forEach(t),HNo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(x6.$$.fragment,ul),UNo=i(ul),ffe=n(ul,"P",{});var Kst=s(ffe);JNo=r(Kst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kst.forEach(t),YNo=i(ul),Rd=n(ul,"P",{});var IU=s(Rd);KNo=r(IU,`Note:
Loading a model from its configuration file does `),mfe=n(IU,"STRONG",{});var Zst=s(mfe);ZNo=r(Zst,"not"),Zst.forEach(t),ejo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(IU,"A",{href:!0});var elt=s(qD);ojo=r(elt,"from_pretrained()"),elt.forEach(t),rjo=r(IU," to load the model weights."),IU.forEach(t),tjo=i(ul),gfe=n(ul,"P",{});var olt=s(gfe);ajo=r(olt,"Examples:"),olt.forEach(t),njo=i(ul),m(k6.$$.fragment,ul),ul.forEach(t),sjo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(S6.$$.fragment,Yt),ljo=i(Yt),hfe=n(Yt,"P",{});var rlt=s(hfe);ijo=r(rlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rlt.forEach(t),djo=i(Yt),on=n(Yt,"P",{});var N3=s(on);cjo=r(N3,"The model class to instantiate is selected based on the "),pfe=n(N3,"CODE",{});var tlt=s(pfe);fjo=r(tlt,"model_type"),tlt.forEach(t),mjo=r(N3,` property of the config object (either
passed as an argument or loaded from `),_fe=n(N3,"CODE",{});var alt=s(_fe);gjo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),hjo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(N3,"CODE",{});var nlt=s(ufe);pjo=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),_jo=r(N3,":"),N3.forEach(t),ujo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);fF=n(he,"LI",{});var jye=s(fF);bfe=n(jye,"STRONG",{});var slt=s(bfe);bjo=r(slt,"beit"),slt.forEach(t),Fjo=r(jye," \u2014 "),ND=n(jye,"A",{href:!0});var llt=s(ND);vjo=r(llt,"BeitForImageClassification"),llt.forEach(t),Tjo=r(jye," (BEiT model)"),jye.forEach(t),Mjo=i(he),mF=n(he,"LI",{});var Dye=s(mF);Ffe=n(Dye,"STRONG",{});var ilt=s(Ffe);Ejo=r(ilt,"convnext"),ilt.forEach(t),Cjo=r(Dye," \u2014 "),jD=n(Dye,"A",{href:!0});var dlt=s(jD);wjo=r(dlt,"ConvNextForImageClassification"),dlt.forEach(t),Ajo=r(Dye," (ConvNext model)"),Dye.forEach(t),yjo=i(he),Gs=n(he,"LI",{});var h7=s(Gs);vfe=n(h7,"STRONG",{});var clt=s(vfe);Ljo=r(clt,"deit"),clt.forEach(t),xjo=r(h7," \u2014 "),DD=n(h7,"A",{href:!0});var flt=s(DD);kjo=r(flt,"DeiTForImageClassification"),flt.forEach(t),Sjo=r(h7," or "),GD=n(h7,"A",{href:!0});var mlt=s(GD);Rjo=r(mlt,"DeiTForImageClassificationWithTeacher"),mlt.forEach(t),Bjo=r(h7," (DeiT model)"),h7.forEach(t),Pjo=i(he),gF=n(he,"LI",{});var Gye=s(gF);Tfe=n(Gye,"STRONG",{});var glt=s(Tfe);$jo=r(glt,"imagegpt"),glt.forEach(t),Ijo=r(Gye," \u2014 "),OD=n(Gye,"A",{href:!0});var hlt=s(OD);qjo=r(hlt,"ImageGPTForImageClassification"),hlt.forEach(t),Njo=r(Gye," (ImageGPT model)"),Gye.forEach(t),jjo=i(he),ma=n(he,"LI",{});var If=s(ma);Mfe=n(If,"STRONG",{});var plt=s(Mfe);Djo=r(plt,"perceiver"),plt.forEach(t),Gjo=r(If," \u2014 "),VD=n(If,"A",{href:!0});var _lt=s(VD);Ojo=r(_lt,"PerceiverForImageClassificationLearned"),_lt.forEach(t),Vjo=r(If," or "),XD=n(If,"A",{href:!0});var ult=s(XD);Xjo=r(ult,"PerceiverForImageClassificationFourier"),ult.forEach(t),zjo=r(If," or "),zD=n(If,"A",{href:!0});var blt=s(zD);Qjo=r(blt,"PerceiverForImageClassificationConvProcessing"),blt.forEach(t),Wjo=r(If," (Perceiver model)"),If.forEach(t),Hjo=i(he),hF=n(he,"LI",{});var Oye=s(hF);Efe=n(Oye,"STRONG",{});var Flt=s(Efe);Ujo=r(Flt,"poolformer"),Flt.forEach(t),Jjo=r(Oye," \u2014 "),QD=n(Oye,"A",{href:!0});var vlt=s(QD);Yjo=r(vlt,"PoolFormerForImageClassification"),vlt.forEach(t),Kjo=r(Oye," (PoolFormer model)"),Oye.forEach(t),Zjo=i(he),pF=n(he,"LI",{});var Vye=s(pF);Cfe=n(Vye,"STRONG",{});var Tlt=s(Cfe);eDo=r(Tlt,"regnet"),Tlt.forEach(t),oDo=r(Vye," \u2014 "),WD=n(Vye,"A",{href:!0});var Mlt=s(WD);rDo=r(Mlt,"RegNetForImageClassification"),Mlt.forEach(t),tDo=r(Vye," (RegNet model)"),Vye.forEach(t),aDo=i(he),_F=n(he,"LI",{});var Xye=s(_F);wfe=n(Xye,"STRONG",{});var Elt=s(wfe);nDo=r(Elt,"resnet"),Elt.forEach(t),sDo=r(Xye," \u2014 "),HD=n(Xye,"A",{href:!0});var Clt=s(HD);lDo=r(Clt,"ResNetForImageClassification"),Clt.forEach(t),iDo=r(Xye," (ResNet model)"),Xye.forEach(t),dDo=i(he),uF=n(he,"LI",{});var zye=s(uF);Afe=n(zye,"STRONG",{});var wlt=s(Afe);cDo=r(wlt,"segformer"),wlt.forEach(t),fDo=r(zye," \u2014 "),UD=n(zye,"A",{href:!0});var Alt=s(UD);mDo=r(Alt,"SegformerForImageClassification"),Alt.forEach(t),gDo=r(zye," (SegFormer model)"),zye.forEach(t),hDo=i(he),bF=n(he,"LI",{});var Qye=s(bF);yfe=n(Qye,"STRONG",{});var ylt=s(yfe);pDo=r(ylt,"swin"),ylt.forEach(t),_Do=r(Qye," \u2014 "),JD=n(Qye,"A",{href:!0});var Llt=s(JD);uDo=r(Llt,"SwinForImageClassification"),Llt.forEach(t),bDo=r(Qye," (Swin model)"),Qye.forEach(t),FDo=i(he),FF=n(he,"LI",{});var Wye=s(FF);Lfe=n(Wye,"STRONG",{});var xlt=s(Lfe);vDo=r(xlt,"van"),xlt.forEach(t),TDo=r(Wye," \u2014 "),YD=n(Wye,"A",{href:!0});var klt=s(YD);MDo=r(klt,"VanForImageClassification"),klt.forEach(t),EDo=r(Wye," (VAN model)"),Wye.forEach(t),CDo=i(he),vF=n(he,"LI",{});var Hye=s(vF);xfe=n(Hye,"STRONG",{});var Slt=s(xfe);wDo=r(Slt,"vit"),Slt.forEach(t),ADo=r(Hye," \u2014 "),KD=n(Hye,"A",{href:!0});var Rlt=s(KD);yDo=r(Rlt,"ViTForImageClassification"),Rlt.forEach(t),LDo=r(Hye," (ViT model)"),Hye.forEach(t),he.forEach(t),xDo=i(Yt),TF=n(Yt,"P",{});var Uye=s(TF);kDo=r(Uye,"The model is set in evaluation mode by default using "),kfe=n(Uye,"CODE",{});var Blt=s(kfe);SDo=r(Blt,"model.eval()"),Blt.forEach(t),RDo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(Uye,"CODE",{});var Plt=s(Sfe);BDo=r(Plt,"model.train()"),Plt.forEach(t),Uye.forEach(t),PDo=i(Yt),Rfe=n(Yt,"P",{});var $lt=s(Rfe);$Do=r($lt,"Examples:"),$lt.forEach(t),IDo=i(Yt),m(R6.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),ZRe=i(c),Bd=n(c,"H2",{class:!0});var i$e=s(Bd);MF=n(i$e,"A",{id:!0,class:!0,href:!0});var Ilt=s(MF);Bfe=n(Ilt,"SPAN",{});var qlt=s(Bfe);m(B6.$$.fragment,qlt),qlt.forEach(t),Ilt.forEach(t),qDo=i(i$e),Pfe=n(i$e,"SPAN",{});var Nlt=s(Pfe);NDo=r(Nlt,"AutoModelForVision2Seq"),Nlt.forEach(t),i$e.forEach(t),eBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(P6.$$.fragment,bl),jDo=i(bl),Pd=n(bl,"P",{});var qU=s(Pd);DDo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZD=n(qU,"A",{href:!0});var jlt=s(ZD);GDo=r(jlt,"from_pretrained()"),jlt.forEach(t),ODo=r(qU," class method or the "),eG=n(qU,"A",{href:!0});var Dlt=s(eG);VDo=r(Dlt,"from_config()"),Dlt.forEach(t),XDo=r(qU,` class
method.`),qU.forEach(t),zDo=i(bl),$6=n(bl,"P",{});var d$e=s($6);QDo=r(d$e,"This class cannot be instantiated directly using "),$fe=n(d$e,"CODE",{});var Glt=s($fe);WDo=r(Glt,"__init__()"),Glt.forEach(t),HDo=r(d$e," (throws an error)."),d$e.forEach(t),UDo=i(bl),rt=n(bl,"DIV",{class:!0});var Fl=s(rt);m(I6.$$.fragment,Fl),JDo=i(Fl),Ife=n(Fl,"P",{});var Olt=s(Ife);YDo=r(Olt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Olt.forEach(t),KDo=i(Fl),$d=n(Fl,"P",{});var NU=s($d);ZDo=r(NU,`Note:
Loading a model from its configuration file does `),qfe=n(NU,"STRONG",{});var Vlt=s(qfe);eGo=r(Vlt,"not"),Vlt.forEach(t),oGo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(NU,"A",{href:!0});var Xlt=s(oG);rGo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),tGo=r(NU," to load the model weights."),NU.forEach(t),aGo=i(Fl),Nfe=n(Fl,"P",{});var zlt=s(Nfe);nGo=r(zlt,"Examples:"),zlt.forEach(t),sGo=i(Fl),m(q6.$$.fragment,Fl),Fl.forEach(t),lGo=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(N6.$$.fragment,Kt),iGo=i(Kt),jfe=n(Kt,"P",{});var Qlt=s(jfe);dGo=r(Qlt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qlt.forEach(t),cGo=i(Kt),rn=n(Kt,"P",{});var j3=s(rn);fGo=r(j3,"The model class to instantiate is selected based on the "),Dfe=n(j3,"CODE",{});var Wlt=s(Dfe);mGo=r(Wlt,"model_type"),Wlt.forEach(t),gGo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Gfe=n(j3,"CODE",{});var Hlt=s(Gfe);hGo=r(Hlt,"pretrained_model_name_or_path"),Hlt.forEach(t),pGo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ofe=n(j3,"CODE",{});var Ult=s(Ofe);_Go=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),uGo=r(j3,":"),j3.forEach(t),bGo=i(Kt),Vfe=n(Kt,"UL",{});var Jlt=s(Vfe);EF=n(Jlt,"LI",{});var Jye=s(EF);Xfe=n(Jye,"STRONG",{});var Ylt=s(Xfe);FGo=r(Ylt,"vision-encoder-decoder"),Ylt.forEach(t),vGo=r(Jye," \u2014 "),rG=n(Jye,"A",{href:!0});var Klt=s(rG);TGo=r(Klt,"VisionEncoderDecoderModel"),Klt.forEach(t),MGo=r(Jye," (Vision Encoder decoder model)"),Jye.forEach(t),Jlt.forEach(t),EGo=i(Kt),CF=n(Kt,"P",{});var Yye=s(CF);CGo=r(Yye,"The model is set in evaluation mode by default using "),zfe=n(Yye,"CODE",{});var Zlt=s(zfe);wGo=r(Zlt,"model.eval()"),Zlt.forEach(t),AGo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(Yye,"CODE",{});var eit=s(Qfe);yGo=r(eit,"model.train()"),eit.forEach(t),Yye.forEach(t),LGo=i(Kt),Wfe=n(Kt,"P",{});var oit=s(Wfe);xGo=r(oit,"Examples:"),oit.forEach(t),kGo=i(Kt),m(j6.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),oBe=i(c),Id=n(c,"H2",{class:!0});var c$e=s(Id);wF=n(c$e,"A",{id:!0,class:!0,href:!0});var rit=s(wF);Hfe=n(rit,"SPAN",{});var tit=s(Hfe);m(D6.$$.fragment,tit),tit.forEach(t),rit.forEach(t),SGo=i(c$e),Ufe=n(c$e,"SPAN",{});var ait=s(Ufe);RGo=r(ait,"AutoModelForAudioClassification"),ait.forEach(t),c$e.forEach(t),rBe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(G6.$$.fragment,vl),BGo=i(vl),qd=n(vl,"P",{});var jU=s(qd);PGo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),tG=n(jU,"A",{href:!0});var nit=s(tG);$Go=r(nit,"from_pretrained()"),nit.forEach(t),IGo=r(jU," class method or the "),aG=n(jU,"A",{href:!0});var sit=s(aG);qGo=r(sit,"from_config()"),sit.forEach(t),NGo=r(jU,` class
method.`),jU.forEach(t),jGo=i(vl),O6=n(vl,"P",{});var f$e=s(O6);DGo=r(f$e,"This class cannot be instantiated directly using "),Jfe=n(f$e,"CODE",{});var lit=s(Jfe);GGo=r(lit,"__init__()"),lit.forEach(t),OGo=r(f$e," (throws an error)."),f$e.forEach(t),VGo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(V6.$$.fragment,Tl),XGo=i(Tl),Yfe=n(Tl,"P",{});var iit=s(Yfe);zGo=r(iit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),iit.forEach(t),QGo=i(Tl),Nd=n(Tl,"P",{});var DU=s(Nd);WGo=r(DU,`Note:
Loading a model from its configuration file does `),Kfe=n(DU,"STRONG",{});var dit=s(Kfe);HGo=r(dit,"not"),dit.forEach(t),UGo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(DU,"A",{href:!0});var cit=s(nG);JGo=r(cit,"from_pretrained()"),cit.forEach(t),YGo=r(DU," to load the model weights."),DU.forEach(t),KGo=i(Tl),Zfe=n(Tl,"P",{});var fit=s(Zfe);ZGo=r(fit,"Examples:"),fit.forEach(t),eOo=i(Tl),m(X6.$$.fragment,Tl),Tl.forEach(t),oOo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(z6.$$.fragment,Zt),rOo=i(Zt),eme=n(Zt,"P",{});var mit=s(eme);tOo=r(mit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mit.forEach(t),aOo=i(Zt),tn=n(Zt,"P",{});var D3=s(tn);nOo=r(D3,"The model class to instantiate is selected based on the "),ome=n(D3,"CODE",{});var git=s(ome);sOo=r(git,"model_type"),git.forEach(t),lOo=r(D3,` property of the config object (either
passed as an argument or loaded from `),rme=n(D3,"CODE",{});var hit=s(rme);iOo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),dOo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(D3,"CODE",{});var pit=s(tme);cOo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),fOo=r(D3,":"),D3.forEach(t),mOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);AF=n(Do,"LI",{});var Kye=s(AF);ame=n(Kye,"STRONG",{});var _it=s(ame);gOo=r(_it,"data2vec-audio"),_it.forEach(t),hOo=r(Kye," \u2014 "),sG=n(Kye,"A",{href:!0});var uit=s(sG);pOo=r(uit,"Data2VecAudioForSequenceClassification"),uit.forEach(t),_Oo=r(Kye," (Data2VecAudio model)"),Kye.forEach(t),uOo=i(Do),yF=n(Do,"LI",{});var Zye=s(yF);nme=n(Zye,"STRONG",{});var bit=s(nme);bOo=r(bit,"hubert"),bit.forEach(t),FOo=r(Zye," \u2014 "),lG=n(Zye,"A",{href:!0});var Fit=s(lG);vOo=r(Fit,"HubertForSequenceClassification"),Fit.forEach(t),TOo=r(Zye," (Hubert model)"),Zye.forEach(t),MOo=i(Do),LF=n(Do,"LI",{});var e8e=s(LF);sme=n(e8e,"STRONG",{});var vit=s(sme);EOo=r(vit,"sew"),vit.forEach(t),COo=r(e8e," \u2014 "),iG=n(e8e,"A",{href:!0});var Tit=s(iG);wOo=r(Tit,"SEWForSequenceClassification"),Tit.forEach(t),AOo=r(e8e," (SEW model)"),e8e.forEach(t),yOo=i(Do),xF=n(Do,"LI",{});var o8e=s(xF);lme=n(o8e,"STRONG",{});var Mit=s(lme);LOo=r(Mit,"sew-d"),Mit.forEach(t),xOo=r(o8e," \u2014 "),dG=n(o8e,"A",{href:!0});var Eit=s(dG);kOo=r(Eit,"SEWDForSequenceClassification"),Eit.forEach(t),SOo=r(o8e," (SEW-D model)"),o8e.forEach(t),ROo=i(Do),kF=n(Do,"LI",{});var r8e=s(kF);ime=n(r8e,"STRONG",{});var Cit=s(ime);BOo=r(Cit,"unispeech"),Cit.forEach(t),POo=r(r8e," \u2014 "),cG=n(r8e,"A",{href:!0});var wit=s(cG);$Oo=r(wit,"UniSpeechForSequenceClassification"),wit.forEach(t),IOo=r(r8e," (UniSpeech model)"),r8e.forEach(t),qOo=i(Do),SF=n(Do,"LI",{});var t8e=s(SF);dme=n(t8e,"STRONG",{});var Ait=s(dme);NOo=r(Ait,"unispeech-sat"),Ait.forEach(t),jOo=r(t8e," \u2014 "),fG=n(t8e,"A",{href:!0});var yit=s(fG);DOo=r(yit,"UniSpeechSatForSequenceClassification"),yit.forEach(t),GOo=r(t8e," (UniSpeechSat model)"),t8e.forEach(t),OOo=i(Do),RF=n(Do,"LI",{});var a8e=s(RF);cme=n(a8e,"STRONG",{});var Lit=s(cme);VOo=r(Lit,"wav2vec2"),Lit.forEach(t),XOo=r(a8e," \u2014 "),mG=n(a8e,"A",{href:!0});var xit=s(mG);zOo=r(xit,"Wav2Vec2ForSequenceClassification"),xit.forEach(t),QOo=r(a8e," (Wav2Vec2 model)"),a8e.forEach(t),WOo=i(Do),BF=n(Do,"LI",{});var n8e=s(BF);fme=n(n8e,"STRONG",{});var kit=s(fme);HOo=r(kit,"wavlm"),kit.forEach(t),UOo=r(n8e," \u2014 "),gG=n(n8e,"A",{href:!0});var Sit=s(gG);JOo=r(Sit,"WavLMForSequenceClassification"),Sit.forEach(t),YOo=r(n8e," (WavLM model)"),n8e.forEach(t),Do.forEach(t),KOo=i(Zt),PF=n(Zt,"P",{});var s8e=s(PF);ZOo=r(s8e,"The model is set in evaluation mode by default using "),mme=n(s8e,"CODE",{});var Rit=s(mme);eVo=r(Rit,"model.eval()"),Rit.forEach(t),oVo=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(s8e,"CODE",{});var Bit=s(gme);rVo=r(Bit,"model.train()"),Bit.forEach(t),s8e.forEach(t),tVo=i(Zt),hme=n(Zt,"P",{});var Pit=s(hme);aVo=r(Pit,"Examples:"),Pit.forEach(t),nVo=i(Zt),m(Q6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),tBe=i(c),jd=n(c,"H2",{class:!0});var m$e=s(jd);$F=n(m$e,"A",{id:!0,class:!0,href:!0});var $it=s($F);pme=n($it,"SPAN",{});var Iit=s(pme);m(W6.$$.fragment,Iit),Iit.forEach(t),$it.forEach(t),sVo=i(m$e),_me=n(m$e,"SPAN",{});var qit=s(_me);lVo=r(qit,"AutoModelForAudioFrameClassification"),qit.forEach(t),m$e.forEach(t),aBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(H6.$$.fragment,Ml),iVo=i(Ml),Dd=n(Ml,"P",{});var GU=s(Dd);dVo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hG=n(GU,"A",{href:!0});var Nit=s(hG);cVo=r(Nit,"from_pretrained()"),Nit.forEach(t),fVo=r(GU," class method or the "),pG=n(GU,"A",{href:!0});var jit=s(pG);mVo=r(jit,"from_config()"),jit.forEach(t),gVo=r(GU,` class
method.`),GU.forEach(t),hVo=i(Ml),U6=n(Ml,"P",{});var g$e=s(U6);pVo=r(g$e,"This class cannot be instantiated directly using "),ume=n(g$e,"CODE",{});var Dit=s(ume);_Vo=r(Dit,"__init__()"),Dit.forEach(t),uVo=r(g$e," (throws an error)."),g$e.forEach(t),bVo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(J6.$$.fragment,El),FVo=i(El),bme=n(El,"P",{});var Git=s(bme);vVo=r(Git,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Git.forEach(t),TVo=i(El),Gd=n(El,"P",{});var OU=s(Gd);MVo=r(OU,`Note:
Loading a model from its configuration file does `),Fme=n(OU,"STRONG",{});var Oit=s(Fme);EVo=r(Oit,"not"),Oit.forEach(t),CVo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(OU,"A",{href:!0});var Vit=s(_G);wVo=r(Vit,"from_pretrained()"),Vit.forEach(t),AVo=r(OU," to load the model weights."),OU.forEach(t),yVo=i(El),vme=n(El,"P",{});var Xit=s(vme);LVo=r(Xit,"Examples:"),Xit.forEach(t),xVo=i(El),m(Y6.$$.fragment,El),El.forEach(t),kVo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(K6.$$.fragment,ea),SVo=i(ea),Tme=n(ea,"P",{});var zit=s(Tme);RVo=r(zit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zit.forEach(t),BVo=i(ea),an=n(ea,"P",{});var G3=s(an);PVo=r(G3,"The model class to instantiate is selected based on the "),Mme=n(G3,"CODE",{});var Qit=s(Mme);$Vo=r(Qit,"model_type"),Qit.forEach(t),IVo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Eme=n(G3,"CODE",{});var Wit=s(Eme);qVo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),NVo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(G3,"CODE",{});var Hit=s(Cme);jVo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),DVo=r(G3,":"),G3.forEach(t),GVo=i(ea),nn=n(ea,"UL",{});var O3=s(nn);IF=n(O3,"LI",{});var l8e=s(IF);wme=n(l8e,"STRONG",{});var Uit=s(wme);OVo=r(Uit,"data2vec-audio"),Uit.forEach(t),VVo=r(l8e," \u2014 "),uG=n(l8e,"A",{href:!0});var Jit=s(uG);XVo=r(Jit,"Data2VecAudioForAudioFrameClassification"),Jit.forEach(t),zVo=r(l8e," (Data2VecAudio model)"),l8e.forEach(t),QVo=i(O3),qF=n(O3,"LI",{});var i8e=s(qF);Ame=n(i8e,"STRONG",{});var Yit=s(Ame);WVo=r(Yit,"unispeech-sat"),Yit.forEach(t),HVo=r(i8e," \u2014 "),bG=n(i8e,"A",{href:!0});var Kit=s(bG);UVo=r(Kit,"UniSpeechSatForAudioFrameClassification"),Kit.forEach(t),JVo=r(i8e," (UniSpeechSat model)"),i8e.forEach(t),YVo=i(O3),NF=n(O3,"LI",{});var d8e=s(NF);yme=n(d8e,"STRONG",{});var Zit=s(yme);KVo=r(Zit,"wav2vec2"),Zit.forEach(t),ZVo=r(d8e," \u2014 "),FG=n(d8e,"A",{href:!0});var edt=s(FG);eXo=r(edt,"Wav2Vec2ForAudioFrameClassification"),edt.forEach(t),oXo=r(d8e," (Wav2Vec2 model)"),d8e.forEach(t),rXo=i(O3),jF=n(O3,"LI",{});var c8e=s(jF);Lme=n(c8e,"STRONG",{});var odt=s(Lme);tXo=r(odt,"wavlm"),odt.forEach(t),aXo=r(c8e," \u2014 "),vG=n(c8e,"A",{href:!0});var rdt=s(vG);nXo=r(rdt,"WavLMForAudioFrameClassification"),rdt.forEach(t),sXo=r(c8e," (WavLM model)"),c8e.forEach(t),O3.forEach(t),lXo=i(ea),DF=n(ea,"P",{});var f8e=s(DF);iXo=r(f8e,"The model is set in evaluation mode by default using "),xme=n(f8e,"CODE",{});var tdt=s(xme);dXo=r(tdt,"model.eval()"),tdt.forEach(t),cXo=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(f8e,"CODE",{});var adt=s(kme);fXo=r(adt,"model.train()"),adt.forEach(t),f8e.forEach(t),mXo=i(ea),Sme=n(ea,"P",{});var ndt=s(Sme);gXo=r(ndt,"Examples:"),ndt.forEach(t),hXo=i(ea),m(Z6.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),nBe=i(c),Od=n(c,"H2",{class:!0});var h$e=s(Od);GF=n(h$e,"A",{id:!0,class:!0,href:!0});var sdt=s(GF);Rme=n(sdt,"SPAN",{});var ldt=s(Rme);m(eA.$$.fragment,ldt),ldt.forEach(t),sdt.forEach(t),pXo=i(h$e),Bme=n(h$e,"SPAN",{});var idt=s(Bme);_Xo=r(idt,"AutoModelForCTC"),idt.forEach(t),h$e.forEach(t),sBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(oA.$$.fragment,Cl),uXo=i(Cl),Vd=n(Cl,"P",{});var VU=s(Vd);bXo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TG=n(VU,"A",{href:!0});var ddt=s(TG);FXo=r(ddt,"from_pretrained()"),ddt.forEach(t),vXo=r(VU," class method or the "),MG=n(VU,"A",{href:!0});var cdt=s(MG);TXo=r(cdt,"from_config()"),cdt.forEach(t),MXo=r(VU,` class
method.`),VU.forEach(t),EXo=i(Cl),rA=n(Cl,"P",{});var p$e=s(rA);CXo=r(p$e,"This class cannot be instantiated directly using "),Pme=n(p$e,"CODE",{});var fdt=s(Pme);wXo=r(fdt,"__init__()"),fdt.forEach(t),AXo=r(p$e," (throws an error)."),p$e.forEach(t),yXo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(tA.$$.fragment,wl),LXo=i(wl),$me=n(wl,"P",{});var mdt=s($me);xXo=r(mdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mdt.forEach(t),kXo=i(wl),Xd=n(wl,"P",{});var XU=s(Xd);SXo=r(XU,`Note:
Loading a model from its configuration file does `),Ime=n(XU,"STRONG",{});var gdt=s(Ime);RXo=r(gdt,"not"),gdt.forEach(t),BXo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(XU,"A",{href:!0});var hdt=s(EG);PXo=r(hdt,"from_pretrained()"),hdt.forEach(t),$Xo=r(XU," to load the model weights."),XU.forEach(t),IXo=i(wl),qme=n(wl,"P",{});var pdt=s(qme);qXo=r(pdt,"Examples:"),pdt.forEach(t),NXo=i(wl),m(aA.$$.fragment,wl),wl.forEach(t),jXo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(nA.$$.fragment,oa),DXo=i(oa),Nme=n(oa,"P",{});var _dt=s(Nme);GXo=r(_dt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_dt.forEach(t),OXo=i(oa),sn=n(oa,"P",{});var V3=s(sn);VXo=r(V3,"The model class to instantiate is selected based on the "),jme=n(V3,"CODE",{});var udt=s(jme);XXo=r(udt,"model_type"),udt.forEach(t),zXo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Dme=n(V3,"CODE",{});var bdt=s(Dme);QXo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),WXo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(V3,"CODE",{});var Fdt=s(Gme);HXo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),UXo=r(V3,":"),V3.forEach(t),JXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);OF=n(Go,"LI",{});var m8e=s(OF);Ome=n(m8e,"STRONG",{});var vdt=s(Ome);YXo=r(vdt,"data2vec-audio"),vdt.forEach(t),KXo=r(m8e," \u2014 "),CG=n(m8e,"A",{href:!0});var Tdt=s(CG);ZXo=r(Tdt,"Data2VecAudioForCTC"),Tdt.forEach(t),ezo=r(m8e," (Data2VecAudio model)"),m8e.forEach(t),ozo=i(Go),VF=n(Go,"LI",{});var g8e=s(VF);Vme=n(g8e,"STRONG",{});var Mdt=s(Vme);rzo=r(Mdt,"hubert"),Mdt.forEach(t),tzo=r(g8e," \u2014 "),wG=n(g8e,"A",{href:!0});var Edt=s(wG);azo=r(Edt,"HubertForCTC"),Edt.forEach(t),nzo=r(g8e," (Hubert model)"),g8e.forEach(t),szo=i(Go),XF=n(Go,"LI",{});var h8e=s(XF);Xme=n(h8e,"STRONG",{});var Cdt=s(Xme);lzo=r(Cdt,"sew"),Cdt.forEach(t),izo=r(h8e," \u2014 "),AG=n(h8e,"A",{href:!0});var wdt=s(AG);dzo=r(wdt,"SEWForCTC"),wdt.forEach(t),czo=r(h8e," (SEW model)"),h8e.forEach(t),fzo=i(Go),zF=n(Go,"LI",{});var p8e=s(zF);zme=n(p8e,"STRONG",{});var Adt=s(zme);mzo=r(Adt,"sew-d"),Adt.forEach(t),gzo=r(p8e," \u2014 "),yG=n(p8e,"A",{href:!0});var ydt=s(yG);hzo=r(ydt,"SEWDForCTC"),ydt.forEach(t),pzo=r(p8e," (SEW-D model)"),p8e.forEach(t),_zo=i(Go),QF=n(Go,"LI",{});var _8e=s(QF);Qme=n(_8e,"STRONG",{});var Ldt=s(Qme);uzo=r(Ldt,"unispeech"),Ldt.forEach(t),bzo=r(_8e," \u2014 "),LG=n(_8e,"A",{href:!0});var xdt=s(LG);Fzo=r(xdt,"UniSpeechForCTC"),xdt.forEach(t),vzo=r(_8e," (UniSpeech model)"),_8e.forEach(t),Tzo=i(Go),WF=n(Go,"LI",{});var u8e=s(WF);Wme=n(u8e,"STRONG",{});var kdt=s(Wme);Mzo=r(kdt,"unispeech-sat"),kdt.forEach(t),Ezo=r(u8e," \u2014 "),xG=n(u8e,"A",{href:!0});var Sdt=s(xG);Czo=r(Sdt,"UniSpeechSatForCTC"),Sdt.forEach(t),wzo=r(u8e," (UniSpeechSat model)"),u8e.forEach(t),Azo=i(Go),HF=n(Go,"LI",{});var b8e=s(HF);Hme=n(b8e,"STRONG",{});var Rdt=s(Hme);yzo=r(Rdt,"wav2vec2"),Rdt.forEach(t),Lzo=r(b8e," \u2014 "),kG=n(b8e,"A",{href:!0});var Bdt=s(kG);xzo=r(Bdt,"Wav2Vec2ForCTC"),Bdt.forEach(t),kzo=r(b8e," (Wav2Vec2 model)"),b8e.forEach(t),Szo=i(Go),UF=n(Go,"LI",{});var F8e=s(UF);Ume=n(F8e,"STRONG",{});var Pdt=s(Ume);Rzo=r(Pdt,"wavlm"),Pdt.forEach(t),Bzo=r(F8e," \u2014 "),SG=n(F8e,"A",{href:!0});var $dt=s(SG);Pzo=r($dt,"WavLMForCTC"),$dt.forEach(t),$zo=r(F8e," (WavLM model)"),F8e.forEach(t),Go.forEach(t),Izo=i(oa),JF=n(oa,"P",{});var v8e=s(JF);qzo=r(v8e,"The model is set in evaluation mode by default using "),Jme=n(v8e,"CODE",{});var Idt=s(Jme);Nzo=r(Idt,"model.eval()"),Idt.forEach(t),jzo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=n(v8e,"CODE",{});var qdt=s(Yme);Dzo=r(qdt,"model.train()"),qdt.forEach(t),v8e.forEach(t),Gzo=i(oa),Kme=n(oa,"P",{});var Ndt=s(Kme);Ozo=r(Ndt,"Examples:"),Ndt.forEach(t),Vzo=i(oa),m(sA.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),lBe=i(c),zd=n(c,"H2",{class:!0});var _$e=s(zd);YF=n(_$e,"A",{id:!0,class:!0,href:!0});var jdt=s(YF);Zme=n(jdt,"SPAN",{});var Ddt=s(Zme);m(lA.$$.fragment,Ddt),Ddt.forEach(t),jdt.forEach(t),Xzo=i(_$e),ege=n(_$e,"SPAN",{});var Gdt=s(ege);zzo=r(Gdt,"AutoModelForSpeechSeq2Seq"),Gdt.forEach(t),_$e.forEach(t),iBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(iA.$$.fragment,Al),Qzo=i(Al),Qd=n(Al,"P",{});var zU=s(Qd);Wzo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),RG=n(zU,"A",{href:!0});var Odt=s(RG);Hzo=r(Odt,"from_pretrained()"),Odt.forEach(t),Uzo=r(zU," class method or the "),BG=n(zU,"A",{href:!0});var Vdt=s(BG);Jzo=r(Vdt,"from_config()"),Vdt.forEach(t),Yzo=r(zU,` class
method.`),zU.forEach(t),Kzo=i(Al),dA=n(Al,"P",{});var u$e=s(dA);Zzo=r(u$e,"This class cannot be instantiated directly using "),oge=n(u$e,"CODE",{});var Xdt=s(oge);eQo=r(Xdt,"__init__()"),Xdt.forEach(t),oQo=r(u$e," (throws an error)."),u$e.forEach(t),rQo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(cA.$$.fragment,yl),tQo=i(yl),rge=n(yl,"P",{});var zdt=s(rge);aQo=r(zdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zdt.forEach(t),nQo=i(yl),Wd=n(yl,"P",{});var QU=s(Wd);sQo=r(QU,`Note:
Loading a model from its configuration file does `),tge=n(QU,"STRONG",{});var Qdt=s(tge);lQo=r(Qdt,"not"),Qdt.forEach(t),iQo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(QU,"A",{href:!0});var Wdt=s(PG);dQo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),cQo=r(QU," to load the model weights."),QU.forEach(t),fQo=i(yl),age=n(yl,"P",{});var Hdt=s(age);mQo=r(Hdt,"Examples:"),Hdt.forEach(t),gQo=i(yl),m(fA.$$.fragment,yl),yl.forEach(t),hQo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(mA.$$.fragment,ra),pQo=i(ra),nge=n(ra,"P",{});var Udt=s(nge);_Qo=r(Udt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Udt.forEach(t),uQo=i(ra),ln=n(ra,"P",{});var X3=s(ln);bQo=r(X3,"The model class to instantiate is selected based on the "),sge=n(X3,"CODE",{});var Jdt=s(sge);FQo=r(Jdt,"model_type"),Jdt.forEach(t),vQo=r(X3,` property of the config object (either
passed as an argument or loaded from `),lge=n(X3,"CODE",{});var Ydt=s(lge);TQo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),MQo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(X3,"CODE",{});var Kdt=s(ige);EQo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),CQo=r(X3,":"),X3.forEach(t),wQo=i(ra),gA=n(ra,"UL",{});var b$e=s(gA);KF=n(b$e,"LI",{});var T8e=s(KF);dge=n(T8e,"STRONG",{});var Zdt=s(dge);AQo=r(Zdt,"speech-encoder-decoder"),Zdt.forEach(t),yQo=r(T8e," \u2014 "),$G=n(T8e,"A",{href:!0});var ect=s($G);LQo=r(ect,"SpeechEncoderDecoderModel"),ect.forEach(t),xQo=r(T8e," (Speech Encoder decoder model)"),T8e.forEach(t),kQo=i(b$e),ZF=n(b$e,"LI",{});var M8e=s(ZF);cge=n(M8e,"STRONG",{});var oct=s(cge);SQo=r(oct,"speech_to_text"),oct.forEach(t),RQo=r(M8e," \u2014 "),IG=n(M8e,"A",{href:!0});var rct=s(IG);BQo=r(rct,"Speech2TextForConditionalGeneration"),rct.forEach(t),PQo=r(M8e," (Speech2Text model)"),M8e.forEach(t),b$e.forEach(t),$Qo=i(ra),ev=n(ra,"P",{});var E8e=s(ev);IQo=r(E8e,"The model is set in evaluation mode by default using "),fge=n(E8e,"CODE",{});var tct=s(fge);qQo=r(tct,"model.eval()"),tct.forEach(t),NQo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(E8e,"CODE",{});var act=s(mge);jQo=r(act,"model.train()"),act.forEach(t),E8e.forEach(t),DQo=i(ra),gge=n(ra,"P",{});var nct=s(gge);GQo=r(nct,"Examples:"),nct.forEach(t),OQo=i(ra),m(hA.$$.fragment,ra),ra.forEach(t),Al.forEach(t),dBe=i(c),Hd=n(c,"H2",{class:!0});var F$e=s(Hd);ov=n(F$e,"A",{id:!0,class:!0,href:!0});var sct=s(ov);hge=n(sct,"SPAN",{});var lct=s(hge);m(pA.$$.fragment,lct),lct.forEach(t),sct.forEach(t),VQo=i(F$e),pge=n(F$e,"SPAN",{});var ict=s(pge);XQo=r(ict,"AutoModelForAudioXVector"),ict.forEach(t),F$e.forEach(t),cBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(_A.$$.fragment,Ll),zQo=i(Ll),Ud=n(Ll,"P",{});var WU=s(Ud);QQo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),qG=n(WU,"A",{href:!0});var dct=s(qG);WQo=r(dct,"from_pretrained()"),dct.forEach(t),HQo=r(WU," class method or the "),NG=n(WU,"A",{href:!0});var cct=s(NG);UQo=r(cct,"from_config()"),cct.forEach(t),JQo=r(WU,` class
method.`),WU.forEach(t),YQo=i(Ll),uA=n(Ll,"P",{});var v$e=s(uA);KQo=r(v$e,"This class cannot be instantiated directly using "),_ge=n(v$e,"CODE",{});var fct=s(_ge);ZQo=r(fct,"__init__()"),fct.forEach(t),eWo=r(v$e," (throws an error)."),v$e.forEach(t),oWo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(bA.$$.fragment,xl),rWo=i(xl),uge=n(xl,"P",{});var mct=s(uge);tWo=r(mct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mct.forEach(t),aWo=i(xl),Jd=n(xl,"P",{});var HU=s(Jd);nWo=r(HU,`Note:
Loading a model from its configuration file does `),bge=n(HU,"STRONG",{});var gct=s(bge);sWo=r(gct,"not"),gct.forEach(t),lWo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(HU,"A",{href:!0});var hct=s(jG);iWo=r(hct,"from_pretrained()"),hct.forEach(t),dWo=r(HU," to load the model weights."),HU.forEach(t),cWo=i(xl),Fge=n(xl,"P",{});var pct=s(Fge);fWo=r(pct,"Examples:"),pct.forEach(t),mWo=i(xl),m(FA.$$.fragment,xl),xl.forEach(t),gWo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(vA.$$.fragment,ta),hWo=i(ta),vge=n(ta,"P",{});var _ct=s(vge);pWo=r(_ct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_ct.forEach(t),_Wo=i(ta),dn=n(ta,"P",{});var z3=s(dn);uWo=r(z3,"The model class to instantiate is selected based on the "),Tge=n(z3,"CODE",{});var uct=s(Tge);bWo=r(uct,"model_type"),uct.forEach(t),FWo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Mge=n(z3,"CODE",{});var bct=s(Mge);vWo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),TWo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(z3,"CODE",{});var Fct=s(Ege);MWo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),EWo=r(z3,":"),z3.forEach(t),CWo=i(ta),cn=n(ta,"UL",{});var Q3=s(cn);rv=n(Q3,"LI",{});var C8e=s(rv);Cge=n(C8e,"STRONG",{});var vct=s(Cge);wWo=r(vct,"data2vec-audio"),vct.forEach(t),AWo=r(C8e," \u2014 "),DG=n(C8e,"A",{href:!0});var Tct=s(DG);yWo=r(Tct,"Data2VecAudioForXVector"),Tct.forEach(t),LWo=r(C8e," (Data2VecAudio model)"),C8e.forEach(t),xWo=i(Q3),tv=n(Q3,"LI",{});var w8e=s(tv);wge=n(w8e,"STRONG",{});var Mct=s(wge);kWo=r(Mct,"unispeech-sat"),Mct.forEach(t),SWo=r(w8e," \u2014 "),GG=n(w8e,"A",{href:!0});var Ect=s(GG);RWo=r(Ect,"UniSpeechSatForXVector"),Ect.forEach(t),BWo=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),PWo=i(Q3),av=n(Q3,"LI",{});var A8e=s(av);Age=n(A8e,"STRONG",{});var Cct=s(Age);$Wo=r(Cct,"wav2vec2"),Cct.forEach(t),IWo=r(A8e," \u2014 "),OG=n(A8e,"A",{href:!0});var wct=s(OG);qWo=r(wct,"Wav2Vec2ForXVector"),wct.forEach(t),NWo=r(A8e," (Wav2Vec2 model)"),A8e.forEach(t),jWo=i(Q3),nv=n(Q3,"LI",{});var y8e=s(nv);yge=n(y8e,"STRONG",{});var Act=s(yge);DWo=r(Act,"wavlm"),Act.forEach(t),GWo=r(y8e," \u2014 "),VG=n(y8e,"A",{href:!0});var yct=s(VG);OWo=r(yct,"WavLMForXVector"),yct.forEach(t),VWo=r(y8e," (WavLM model)"),y8e.forEach(t),Q3.forEach(t),XWo=i(ta),sv=n(ta,"P",{});var L8e=s(sv);zWo=r(L8e,"The model is set in evaluation mode by default using "),Lge=n(L8e,"CODE",{});var Lct=s(Lge);QWo=r(Lct,"model.eval()"),Lct.forEach(t),WWo=r(L8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(L8e,"CODE",{});var xct=s(xge);HWo=r(xct,"model.train()"),xct.forEach(t),L8e.forEach(t),UWo=i(ta),kge=n(ta,"P",{});var kct=s(kge);JWo=r(kct,"Examples:"),kct.forEach(t),YWo=i(ta),m(TA.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),fBe=i(c),Yd=n(c,"H2",{class:!0});var T$e=s(Yd);lv=n(T$e,"A",{id:!0,class:!0,href:!0});var Sct=s(lv);Sge=n(Sct,"SPAN",{});var Rct=s(Sge);m(MA.$$.fragment,Rct),Rct.forEach(t),Sct.forEach(t),KWo=i(T$e),Rge=n(T$e,"SPAN",{});var Bct=s(Rge);ZWo=r(Bct,"AutoModelForMaskedImageModeling"),Bct.forEach(t),T$e.forEach(t),mBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(EA.$$.fragment,kl),eHo=i(kl),Kd=n(kl,"P",{});var UU=s(Kd);oHo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),XG=n(UU,"A",{href:!0});var Pct=s(XG);rHo=r(Pct,"from_pretrained()"),Pct.forEach(t),tHo=r(UU," class method or the "),zG=n(UU,"A",{href:!0});var $ct=s(zG);aHo=r($ct,"from_config()"),$ct.forEach(t),nHo=r(UU,` class
method.`),UU.forEach(t),sHo=i(kl),CA=n(kl,"P",{});var M$e=s(CA);lHo=r(M$e,"This class cannot be instantiated directly using "),Bge=n(M$e,"CODE",{});var Ict=s(Bge);iHo=r(Ict,"__init__()"),Ict.forEach(t),dHo=r(M$e," (throws an error)."),M$e.forEach(t),cHo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(wA.$$.fragment,Sl),fHo=i(Sl),Pge=n(Sl,"P",{});var qct=s(Pge);mHo=r(qct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qct.forEach(t),gHo=i(Sl),Zd=n(Sl,"P",{});var JU=s(Zd);hHo=r(JU,`Note:
Loading a model from its configuration file does `),$ge=n(JU,"STRONG",{});var Nct=s($ge);pHo=r(Nct,"not"),Nct.forEach(t),_Ho=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(JU,"A",{href:!0});var jct=s(QG);uHo=r(jct,"from_pretrained()"),jct.forEach(t),bHo=r(JU," to load the model weights."),JU.forEach(t),FHo=i(Sl),Ige=n(Sl,"P",{});var Dct=s(Ige);vHo=r(Dct,"Examples:"),Dct.forEach(t),THo=i(Sl),m(AA.$$.fragment,Sl),Sl.forEach(t),MHo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m(yA.$$.fragment,aa),EHo=i(aa),qge=n(aa,"P",{});var Gct=s(qge);CHo=r(Gct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Gct.forEach(t),wHo=i(aa),fn=n(aa,"P",{});var W3=s(fn);AHo=r(W3,"The model class to instantiate is selected based on the "),Nge=n(W3,"CODE",{});var Oct=s(Nge);yHo=r(Oct,"model_type"),Oct.forEach(t),LHo=r(W3,` property of the config object (either
passed as an argument or loaded from `),jge=n(W3,"CODE",{});var Vct=s(jge);xHo=r(Vct,"pretrained_model_name_or_path"),Vct.forEach(t),kHo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(W3,"CODE",{});var Xct=s(Dge);SHo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),RHo=r(W3,":"),W3.forEach(t),BHo=i(aa),ec=n(aa,"UL",{});var YU=s(ec);iv=n(YU,"LI",{});var x8e=s(iv);Gge=n(x8e,"STRONG",{});var zct=s(Gge);PHo=r(zct,"deit"),zct.forEach(t),$Ho=r(x8e," \u2014 "),WG=n(x8e,"A",{href:!0});var Qct=s(WG);IHo=r(Qct,"DeiTForMaskedImageModeling"),Qct.forEach(t),qHo=r(x8e," (DeiT model)"),x8e.forEach(t),NHo=i(YU),dv=n(YU,"LI",{});var k8e=s(dv);Oge=n(k8e,"STRONG",{});var Wct=s(Oge);jHo=r(Wct,"swin"),Wct.forEach(t),DHo=r(k8e," \u2014 "),HG=n(k8e,"A",{href:!0});var Hct=s(HG);GHo=r(Hct,"SwinForMaskedImageModeling"),Hct.forEach(t),OHo=r(k8e," (Swin model)"),k8e.forEach(t),VHo=i(YU),cv=n(YU,"LI",{});var S8e=s(cv);Vge=n(S8e,"STRONG",{});var Uct=s(Vge);XHo=r(Uct,"vit"),Uct.forEach(t),zHo=r(S8e," \u2014 "),UG=n(S8e,"A",{href:!0});var Jct=s(UG);QHo=r(Jct,"ViTForMaskedImageModeling"),Jct.forEach(t),WHo=r(S8e," (ViT model)"),S8e.forEach(t),YU.forEach(t),HHo=i(aa),fv=n(aa,"P",{});var R8e=s(fv);UHo=r(R8e,"The model is set in evaluation mode by default using "),Xge=n(R8e,"CODE",{});var Yct=s(Xge);JHo=r(Yct,"model.eval()"),Yct.forEach(t),YHo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(R8e,"CODE",{});var Kct=s(zge);KHo=r(Kct,"model.train()"),Kct.forEach(t),R8e.forEach(t),ZHo=i(aa),Qge=n(aa,"P",{});var Zct=s(Qge);eUo=r(Zct,"Examples:"),Zct.forEach(t),oUo=i(aa),m(LA.$$.fragment,aa),aa.forEach(t),kl.forEach(t),gBe=i(c),oc=n(c,"H2",{class:!0});var E$e=s(oc);mv=n(E$e,"A",{id:!0,class:!0,href:!0});var eft=s(mv);Wge=n(eft,"SPAN",{});var oft=s(Wge);m(xA.$$.fragment,oft),oft.forEach(t),eft.forEach(t),rUo=i(E$e),Hge=n(E$e,"SPAN",{});var rft=s(Hge);tUo=r(rft,"AutoModelForObjectDetection"),rft.forEach(t),E$e.forEach(t),hBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(kA.$$.fragment,Rl),aUo=i(Rl),rc=n(Rl,"P",{});var KU=s(rc);nUo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),JG=n(KU,"A",{href:!0});var tft=s(JG);sUo=r(tft,"from_pretrained()"),tft.forEach(t),lUo=r(KU," class method or the "),YG=n(KU,"A",{href:!0});var aft=s(YG);iUo=r(aft,"from_config()"),aft.forEach(t),dUo=r(KU,` class
method.`),KU.forEach(t),cUo=i(Rl),SA=n(Rl,"P",{});var C$e=s(SA);fUo=r(C$e,"This class cannot be instantiated directly using "),Uge=n(C$e,"CODE",{});var nft=s(Uge);mUo=r(nft,"__init__()"),nft.forEach(t),gUo=r(C$e," (throws an error)."),C$e.forEach(t),hUo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(RA.$$.fragment,Bl),pUo=i(Bl),Jge=n(Bl,"P",{});var sft=s(Jge);_Uo=r(sft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sft.forEach(t),uUo=i(Bl),tc=n(Bl,"P",{});var ZU=s(tc);bUo=r(ZU,`Note:
Loading a model from its configuration file does `),Yge=n(ZU,"STRONG",{});var lft=s(Yge);FUo=r(lft,"not"),lft.forEach(t),vUo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(ZU,"A",{href:!0});var ift=s(KG);TUo=r(ift,"from_pretrained()"),ift.forEach(t),MUo=r(ZU," to load the model weights."),ZU.forEach(t),EUo=i(Bl),Kge=n(Bl,"P",{});var dft=s(Kge);CUo=r(dft,"Examples:"),dft.forEach(t),wUo=i(Bl),m(BA.$$.fragment,Bl),Bl.forEach(t),AUo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(PA.$$.fragment,na),yUo=i(na),Zge=n(na,"P",{});var cft=s(Zge);LUo=r(cft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),cft.forEach(t),xUo=i(na),mn=n(na,"P",{});var H3=s(mn);kUo=r(H3,"The model class to instantiate is selected based on the "),ehe=n(H3,"CODE",{});var fft=s(ehe);SUo=r(fft,"model_type"),fft.forEach(t),RUo=r(H3,` property of the config object (either
passed as an argument or loaded from `),ohe=n(H3,"CODE",{});var mft=s(ohe);BUo=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),PUo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(H3,"CODE",{});var gft=s(rhe);$Uo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),IUo=r(H3,":"),H3.forEach(t),qUo=i(na),the=n(na,"UL",{});var hft=s(the);gv=n(hft,"LI",{});var B8e=s(gv);ahe=n(B8e,"STRONG",{});var pft=s(ahe);NUo=r(pft,"detr"),pft.forEach(t),jUo=r(B8e," \u2014 "),ZG=n(B8e,"A",{href:!0});var _ft=s(ZG);DUo=r(_ft,"DetrForObjectDetection"),_ft.forEach(t),GUo=r(B8e," (DETR model)"),B8e.forEach(t),hft.forEach(t),OUo=i(na),hv=n(na,"P",{});var P8e=s(hv);VUo=r(P8e,"The model is set in evaluation mode by default using "),nhe=n(P8e,"CODE",{});var uft=s(nhe);XUo=r(uft,"model.eval()"),uft.forEach(t),zUo=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(P8e,"CODE",{});var bft=s(she);QUo=r(bft,"model.train()"),bft.forEach(t),P8e.forEach(t),WUo=i(na),lhe=n(na,"P",{});var Fft=s(lhe);HUo=r(Fft,"Examples:"),Fft.forEach(t),UUo=i(na),m($A.$$.fragment,na),na.forEach(t),Rl.forEach(t),pBe=i(c),ac=n(c,"H2",{class:!0});var w$e=s(ac);pv=n(w$e,"A",{id:!0,class:!0,href:!0});var vft=s(pv);ihe=n(vft,"SPAN",{});var Tft=s(ihe);m(IA.$$.fragment,Tft),Tft.forEach(t),vft.forEach(t),JUo=i(w$e),dhe=n(w$e,"SPAN",{});var Mft=s(dhe);YUo=r(Mft,"AutoModelForImageSegmentation"),Mft.forEach(t),w$e.forEach(t),_Be=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(qA.$$.fragment,Pl),KUo=i(Pl),nc=n(Pl,"P",{});var eJ=s(nc);ZUo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eO=n(eJ,"A",{href:!0});var Eft=s(eO);eJo=r(Eft,"from_pretrained()"),Eft.forEach(t),oJo=r(eJ," class method or the "),oO=n(eJ,"A",{href:!0});var Cft=s(oO);rJo=r(Cft,"from_config()"),Cft.forEach(t),tJo=r(eJ,` class
method.`),eJ.forEach(t),aJo=i(Pl),NA=n(Pl,"P",{});var A$e=s(NA);nJo=r(A$e,"This class cannot be instantiated directly using "),che=n(A$e,"CODE",{});var wft=s(che);sJo=r(wft,"__init__()"),wft.forEach(t),lJo=r(A$e," (throws an error)."),A$e.forEach(t),iJo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(jA.$$.fragment,$l),dJo=i($l),fhe=n($l,"P",{});var Aft=s(fhe);cJo=r(Aft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Aft.forEach(t),fJo=i($l),sc=n($l,"P",{});var oJ=s(sc);mJo=r(oJ,`Note:
Loading a model from its configuration file does `),mhe=n(oJ,"STRONG",{});var yft=s(mhe);gJo=r(yft,"not"),yft.forEach(t),hJo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(oJ,"A",{href:!0});var Lft=s(rO);pJo=r(Lft,"from_pretrained()"),Lft.forEach(t),_Jo=r(oJ," to load the model weights."),oJ.forEach(t),uJo=i($l),ghe=n($l,"P",{});var xft=s(ghe);bJo=r(xft,"Examples:"),xft.forEach(t),FJo=i($l),m(DA.$$.fragment,$l),$l.forEach(t),vJo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(GA.$$.fragment,sa),TJo=i(sa),hhe=n(sa,"P",{});var kft=s(hhe);MJo=r(kft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),kft.forEach(t),EJo=i(sa),gn=n(sa,"P",{});var U3=s(gn);CJo=r(U3,"The model class to instantiate is selected based on the "),phe=n(U3,"CODE",{});var Sft=s(phe);wJo=r(Sft,"model_type"),Sft.forEach(t),AJo=r(U3,` property of the config object (either
passed as an argument or loaded from `),_he=n(U3,"CODE",{});var Rft=s(_he);yJo=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),LJo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(U3,"CODE",{});var Bft=s(uhe);xJo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),kJo=r(U3,":"),U3.forEach(t),SJo=i(sa),bhe=n(sa,"UL",{});var Pft=s(bhe);_v=n(Pft,"LI",{});var $8e=s(_v);Fhe=n($8e,"STRONG",{});var $ft=s(Fhe);RJo=r($ft,"detr"),$ft.forEach(t),BJo=r($8e," \u2014 "),tO=n($8e,"A",{href:!0});var Ift=s(tO);PJo=r(Ift,"DetrForSegmentation"),Ift.forEach(t),$Jo=r($8e," (DETR model)"),$8e.forEach(t),Pft.forEach(t),IJo=i(sa),uv=n(sa,"P",{});var I8e=s(uv);qJo=r(I8e,"The model is set in evaluation mode by default using "),vhe=n(I8e,"CODE",{});var qft=s(vhe);NJo=r(qft,"model.eval()"),qft.forEach(t),jJo=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(I8e,"CODE",{});var Nft=s(The);DJo=r(Nft,"model.train()"),Nft.forEach(t),I8e.forEach(t),GJo=i(sa),Mhe=n(sa,"P",{});var jft=s(Mhe);OJo=r(jft,"Examples:"),jft.forEach(t),VJo=i(sa),m(OA.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),uBe=i(c),lc=n(c,"H2",{class:!0});var y$e=s(lc);bv=n(y$e,"A",{id:!0,class:!0,href:!0});var Dft=s(bv);Ehe=n(Dft,"SPAN",{});var Gft=s(Ehe);m(VA.$$.fragment,Gft),Gft.forEach(t),Dft.forEach(t),XJo=i(y$e),Che=n(y$e,"SPAN",{});var Oft=s(Che);zJo=r(Oft,"AutoModelForSemanticSegmentation"),Oft.forEach(t),y$e.forEach(t),bBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(XA.$$.fragment,Il),QJo=i(Il),ic=n(Il,"P",{});var rJ=s(ic);WJo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aO=n(rJ,"A",{href:!0});var Vft=s(aO);HJo=r(Vft,"from_pretrained()"),Vft.forEach(t),UJo=r(rJ," class method or the "),nO=n(rJ,"A",{href:!0});var Xft=s(nO);JJo=r(Xft,"from_config()"),Xft.forEach(t),YJo=r(rJ,` class
method.`),rJ.forEach(t),KJo=i(Il),zA=n(Il,"P",{});var L$e=s(zA);ZJo=r(L$e,"This class cannot be instantiated directly using "),whe=n(L$e,"CODE",{});var zft=s(whe);eYo=r(zft,"__init__()"),zft.forEach(t),oYo=r(L$e," (throws an error)."),L$e.forEach(t),rYo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(QA.$$.fragment,ql),tYo=i(ql),Ahe=n(ql,"P",{});var Qft=s(Ahe);aYo=r(Qft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qft.forEach(t),nYo=i(ql),dc=n(ql,"P",{});var tJ=s(dc);sYo=r(tJ,`Note:
Loading a model from its configuration file does `),yhe=n(tJ,"STRONG",{});var Wft=s(yhe);lYo=r(Wft,"not"),Wft.forEach(t),iYo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(tJ,"A",{href:!0});var Hft=s(sO);dYo=r(Hft,"from_pretrained()"),Hft.forEach(t),cYo=r(tJ," to load the model weights."),tJ.forEach(t),fYo=i(ql),Lhe=n(ql,"P",{});var Uft=s(Lhe);mYo=r(Uft,"Examples:"),Uft.forEach(t),gYo=i(ql),m(WA.$$.fragment,ql),ql.forEach(t),hYo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(HA.$$.fragment,la),pYo=i(la),xhe=n(la,"P",{});var Jft=s(xhe);_Yo=r(Jft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jft.forEach(t),uYo=i(la),hn=n(la,"P",{});var J3=s(hn);bYo=r(J3,"The model class to instantiate is selected based on the "),khe=n(J3,"CODE",{});var Yft=s(khe);FYo=r(Yft,"model_type"),Yft.forEach(t),vYo=r(J3,` property of the config object (either
passed as an argument or loaded from `),She=n(J3,"CODE",{});var Kft=s(She);TYo=r(Kft,"pretrained_model_name_or_path"),Kft.forEach(t),MYo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(J3,"CODE",{});var Zft=s(Rhe);EYo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),CYo=r(J3,":"),J3.forEach(t),wYo=i(la),cc=n(la,"UL",{});var aJ=s(cc);Fv=n(aJ,"LI",{});var q8e=s(Fv);Bhe=n(q8e,"STRONG",{});var emt=s(Bhe);AYo=r(emt,"beit"),emt.forEach(t),yYo=r(q8e," \u2014 "),lO=n(q8e,"A",{href:!0});var omt=s(lO);LYo=r(omt,"BeitForSemanticSegmentation"),omt.forEach(t),xYo=r(q8e," (BEiT model)"),q8e.forEach(t),kYo=i(aJ),vv=n(aJ,"LI",{});var N8e=s(vv);Phe=n(N8e,"STRONG",{});var rmt=s(Phe);SYo=r(rmt,"dpt"),rmt.forEach(t),RYo=r(N8e," \u2014 "),iO=n(N8e,"A",{href:!0});var tmt=s(iO);BYo=r(tmt,"DPTForSemanticSegmentation"),tmt.forEach(t),PYo=r(N8e," (DPT model)"),N8e.forEach(t),$Yo=i(aJ),Tv=n(aJ,"LI",{});var j8e=s(Tv);$he=n(j8e,"STRONG",{});var amt=s($he);IYo=r(amt,"segformer"),amt.forEach(t),qYo=r(j8e," \u2014 "),dO=n(j8e,"A",{href:!0});var nmt=s(dO);NYo=r(nmt,"SegformerForSemanticSegmentation"),nmt.forEach(t),jYo=r(j8e," (SegFormer model)"),j8e.forEach(t),aJ.forEach(t),DYo=i(la),Mv=n(la,"P",{});var D8e=s(Mv);GYo=r(D8e,"The model is set in evaluation mode by default using "),Ihe=n(D8e,"CODE",{});var smt=s(Ihe);OYo=r(smt,"model.eval()"),smt.forEach(t),VYo=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(D8e,"CODE",{});var lmt=s(qhe);XYo=r(lmt,"model.train()"),lmt.forEach(t),D8e.forEach(t),zYo=i(la),Nhe=n(la,"P",{});var imt=s(Nhe);QYo=r(imt,"Examples:"),imt.forEach(t),WYo=i(la),m(UA.$$.fragment,la),la.forEach(t),Il.forEach(t),FBe=i(c),fc=n(c,"H2",{class:!0});var x$e=s(fc);Ev=n(x$e,"A",{id:!0,class:!0,href:!0});var dmt=s(Ev);jhe=n(dmt,"SPAN",{});var cmt=s(jhe);m(JA.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),HYo=i(x$e),Dhe=n(x$e,"SPAN",{});var fmt=s(Dhe);UYo=r(fmt,"AutoModelForInstanceSegmentation"),fmt.forEach(t),x$e.forEach(t),vBe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(YA.$$.fragment,Nl),JYo=i(Nl),mc=n(Nl,"P",{});var nJ=s(mc);YYo=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),cO=n(nJ,"A",{href:!0});var mmt=s(cO);KYo=r(mmt,"from_pretrained()"),mmt.forEach(t),ZYo=r(nJ," class method or the "),fO=n(nJ,"A",{href:!0});var gmt=s(fO);eKo=r(gmt,"from_config()"),gmt.forEach(t),oKo=r(nJ,` class
method.`),nJ.forEach(t),rKo=i(Nl),KA=n(Nl,"P",{});var k$e=s(KA);tKo=r(k$e,"This class cannot be instantiated directly using "),Ghe=n(k$e,"CODE",{});var hmt=s(Ghe);aKo=r(hmt,"__init__()"),hmt.forEach(t),nKo=r(k$e," (throws an error)."),k$e.forEach(t),sKo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(ZA.$$.fragment,jl),lKo=i(jl),Ohe=n(jl,"P",{});var pmt=s(Ohe);iKo=r(pmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pmt.forEach(t),dKo=i(jl),gc=n(jl,"P",{});var sJ=s(gc);cKo=r(sJ,`Note:
Loading a model from its configuration file does `),Vhe=n(sJ,"STRONG",{});var _mt=s(Vhe);fKo=r(_mt,"not"),_mt.forEach(t),mKo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(sJ,"A",{href:!0});var umt=s(mO);gKo=r(umt,"from_pretrained()"),umt.forEach(t),hKo=r(sJ," to load the model weights."),sJ.forEach(t),pKo=i(jl),Xhe=n(jl,"P",{});var bmt=s(Xhe);_Ko=r(bmt,"Examples:"),bmt.forEach(t),uKo=i(jl),m(e0.$$.fragment,jl),jl.forEach(t),bKo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(o0.$$.fragment,ia),FKo=i(ia),zhe=n(ia,"P",{});var Fmt=s(zhe);vKo=r(Fmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Fmt.forEach(t),TKo=i(ia),pn=n(ia,"P",{});var Y3=s(pn);MKo=r(Y3,"The model class to instantiate is selected based on the "),Qhe=n(Y3,"CODE",{});var vmt=s(Qhe);EKo=r(vmt,"model_type"),vmt.forEach(t),CKo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Whe=n(Y3,"CODE",{});var Tmt=s(Whe);wKo=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),AKo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(Y3,"CODE",{});var Mmt=s(Hhe);yKo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),LKo=r(Y3,":"),Y3.forEach(t),xKo=i(ia),Uhe=n(ia,"UL",{});var Emt=s(Uhe);Cv=n(Emt,"LI",{});var G8e=s(Cv);Jhe=n(G8e,"STRONG",{});var Cmt=s(Jhe);kKo=r(Cmt,"maskformer"),Cmt.forEach(t),SKo=r(G8e," \u2014 "),gO=n(G8e,"A",{href:!0});var wmt=s(gO);RKo=r(wmt,"MaskFormerForInstanceSegmentation"),wmt.forEach(t),BKo=r(G8e," (MaskFormer model)"),G8e.forEach(t),Emt.forEach(t),PKo=i(ia),wv=n(ia,"P",{});var O8e=s(wv);$Ko=r(O8e,"The model is set in evaluation mode by default using "),Yhe=n(O8e,"CODE",{});var Amt=s(Yhe);IKo=r(Amt,"model.eval()"),Amt.forEach(t),qKo=r(O8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(O8e,"CODE",{});var ymt=s(Khe);NKo=r(ymt,"model.train()"),ymt.forEach(t),O8e.forEach(t),jKo=i(ia),Zhe=n(ia,"P",{});var Lmt=s(Zhe);DKo=r(Lmt,"Examples:"),Lmt.forEach(t),GKo=i(ia),m(r0.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),TBe=i(c),hc=n(c,"H2",{class:!0});var S$e=s(hc);Av=n(S$e,"A",{id:!0,class:!0,href:!0});var xmt=s(Av);epe=n(xmt,"SPAN",{});var kmt=s(epe);m(t0.$$.fragment,kmt),kmt.forEach(t),xmt.forEach(t),OKo=i(S$e),ope=n(S$e,"SPAN",{});var Smt=s(ope);VKo=r(Smt,"TFAutoModel"),Smt.forEach(t),S$e.forEach(t),MBe=i(c),Fr=n(c,"DIV",{class:!0});var Dl=s(Fr);m(a0.$$.fragment,Dl),XKo=i(Dl),pc=n(Dl,"P",{});var lJ=s(pc);zKo=r(lJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hO=n(lJ,"A",{href:!0});var Rmt=s(hO);QKo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),WKo=r(lJ," class method or the "),pO=n(lJ,"A",{href:!0});var Bmt=s(pO);HKo=r(Bmt,"from_config()"),Bmt.forEach(t),UKo=r(lJ,` class
method.`),lJ.forEach(t),JKo=i(Dl),n0=n(Dl,"P",{});var R$e=s(n0);YKo=r(R$e,"This class cannot be instantiated directly using "),rpe=n(R$e,"CODE",{});var Pmt=s(rpe);KKo=r(Pmt,"__init__()"),Pmt.forEach(t),ZKo=r(R$e," (throws an error)."),R$e.forEach(t),eZo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(s0.$$.fragment,Gl),oZo=i(Gl),tpe=n(Gl,"P",{});var $mt=s(tpe);rZo=r($mt,"Instantiates one of the base model classes of the library from a configuration."),$mt.forEach(t),tZo=i(Gl),_c=n(Gl,"P",{});var iJ=s(_c);aZo=r(iJ,`Note:
Loading a model from its configuration file does `),ape=n(iJ,"STRONG",{});var Imt=s(ape);nZo=r(Imt,"not"),Imt.forEach(t),sZo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(iJ,"A",{href:!0});var qmt=s(_O);lZo=r(qmt,"from_pretrained()"),qmt.forEach(t),iZo=r(iJ," to load the model weights."),iJ.forEach(t),dZo=i(Gl),npe=n(Gl,"P",{});var Nmt=s(npe);cZo=r(Nmt,"Examples:"),Nmt.forEach(t),fZo=i(Gl),m(l0.$$.fragment,Gl),Gl.forEach(t),mZo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(i0.$$.fragment,pa),gZo=i(pa),spe=n(pa,"P",{});var jmt=s(spe);hZo=r(jmt,"Instantiate one of the base model classes of the library from a pretrained model."),jmt.forEach(t),pZo=i(pa),_n=n(pa,"P",{});var K3=s(_n);_Zo=r(K3,"The model class to instantiate is selected based on the "),lpe=n(K3,"CODE",{});var Dmt=s(lpe);uZo=r(Dmt,"model_type"),Dmt.forEach(t),bZo=r(K3,` property of the config object (either
passed as an argument or loaded from `),ipe=n(K3,"CODE",{});var Gmt=s(ipe);FZo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),vZo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(K3,"CODE",{});var Omt=s(dpe);TZo=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),MZo=r(K3,":"),K3.forEach(t),EZo=i(pa),x=n(pa,"UL",{});var k=s(x);yv=n(k,"LI",{});var V8e=s(yv);cpe=n(V8e,"STRONG",{});var Vmt=s(cpe);CZo=r(Vmt,"albert"),Vmt.forEach(t),wZo=r(V8e," \u2014 "),uO=n(V8e,"A",{href:!0});var Xmt=s(uO);AZo=r(Xmt,"TFAlbertModel"),Xmt.forEach(t),yZo=r(V8e," (ALBERT model)"),V8e.forEach(t),LZo=i(k),Lv=n(k,"LI",{});var X8e=s(Lv);fpe=n(X8e,"STRONG",{});var zmt=s(fpe);xZo=r(zmt,"bart"),zmt.forEach(t),kZo=r(X8e," \u2014 "),bO=n(X8e,"A",{href:!0});var Qmt=s(bO);SZo=r(Qmt,"TFBartModel"),Qmt.forEach(t),RZo=r(X8e," (BART model)"),X8e.forEach(t),BZo=i(k),xv=n(k,"LI",{});var z8e=s(xv);mpe=n(z8e,"STRONG",{});var Wmt=s(mpe);PZo=r(Wmt,"bert"),Wmt.forEach(t),$Zo=r(z8e," \u2014 "),FO=n(z8e,"A",{href:!0});var Hmt=s(FO);IZo=r(Hmt,"TFBertModel"),Hmt.forEach(t),qZo=r(z8e," (BERT model)"),z8e.forEach(t),NZo=i(k),kv=n(k,"LI",{});var Q8e=s(kv);gpe=n(Q8e,"STRONG",{});var Umt=s(gpe);jZo=r(Umt,"blenderbot"),Umt.forEach(t),DZo=r(Q8e," \u2014 "),vO=n(Q8e,"A",{href:!0});var Jmt=s(vO);GZo=r(Jmt,"TFBlenderbotModel"),Jmt.forEach(t),OZo=r(Q8e," (Blenderbot model)"),Q8e.forEach(t),VZo=i(k),Sv=n(k,"LI",{});var W8e=s(Sv);hpe=n(W8e,"STRONG",{});var Ymt=s(hpe);XZo=r(Ymt,"blenderbot-small"),Ymt.forEach(t),zZo=r(W8e," \u2014 "),TO=n(W8e,"A",{href:!0});var Kmt=s(TO);QZo=r(Kmt,"TFBlenderbotSmallModel"),Kmt.forEach(t),WZo=r(W8e," (BlenderbotSmall model)"),W8e.forEach(t),HZo=i(k),Rv=n(k,"LI",{});var H8e=s(Rv);ppe=n(H8e,"STRONG",{});var Zmt=s(ppe);UZo=r(Zmt,"camembert"),Zmt.forEach(t),JZo=r(H8e," \u2014 "),MO=n(H8e,"A",{href:!0});var egt=s(MO);YZo=r(egt,"TFCamembertModel"),egt.forEach(t),KZo=r(H8e," (CamemBERT model)"),H8e.forEach(t),ZZo=i(k),Bv=n(k,"LI",{});var U8e=s(Bv);_pe=n(U8e,"STRONG",{});var ogt=s(_pe);eer=r(ogt,"clip"),ogt.forEach(t),oer=r(U8e," \u2014 "),EO=n(U8e,"A",{href:!0});var rgt=s(EO);rer=r(rgt,"TFCLIPModel"),rgt.forEach(t),ter=r(U8e," (CLIP model)"),U8e.forEach(t),aer=i(k),Pv=n(k,"LI",{});var J8e=s(Pv);upe=n(J8e,"STRONG",{});var tgt=s(upe);ner=r(tgt,"convbert"),tgt.forEach(t),ser=r(J8e," \u2014 "),CO=n(J8e,"A",{href:!0});var agt=s(CO);ler=r(agt,"TFConvBertModel"),agt.forEach(t),ier=r(J8e," (ConvBERT model)"),J8e.forEach(t),der=i(k),$v=n(k,"LI",{});var Y8e=s($v);bpe=n(Y8e,"STRONG",{});var ngt=s(bpe);cer=r(ngt,"convnext"),ngt.forEach(t),fer=r(Y8e," \u2014 "),wO=n(Y8e,"A",{href:!0});var sgt=s(wO);mer=r(sgt,"TFConvNextModel"),sgt.forEach(t),ger=r(Y8e," (ConvNext model)"),Y8e.forEach(t),her=i(k),Iv=n(k,"LI",{});var K8e=s(Iv);Fpe=n(K8e,"STRONG",{});var lgt=s(Fpe);per=r(lgt,"ctrl"),lgt.forEach(t),_er=r(K8e," \u2014 "),AO=n(K8e,"A",{href:!0});var igt=s(AO);uer=r(igt,"TFCTRLModel"),igt.forEach(t),ber=r(K8e," (CTRL model)"),K8e.forEach(t),Fer=i(k),qv=n(k,"LI",{});var Z8e=s(qv);vpe=n(Z8e,"STRONG",{});var dgt=s(vpe);ver=r(dgt,"deberta"),dgt.forEach(t),Ter=r(Z8e," \u2014 "),yO=n(Z8e,"A",{href:!0});var cgt=s(yO);Mer=r(cgt,"TFDebertaModel"),cgt.forEach(t),Eer=r(Z8e," (DeBERTa model)"),Z8e.forEach(t),Cer=i(k),Nv=n(k,"LI",{});var eLe=s(Nv);Tpe=n(eLe,"STRONG",{});var fgt=s(Tpe);wer=r(fgt,"deberta-v2"),fgt.forEach(t),Aer=r(eLe," \u2014 "),LO=n(eLe,"A",{href:!0});var mgt=s(LO);yer=r(mgt,"TFDebertaV2Model"),mgt.forEach(t),Ler=r(eLe," (DeBERTa-v2 model)"),eLe.forEach(t),xer=i(k),jv=n(k,"LI",{});var oLe=s(jv);Mpe=n(oLe,"STRONG",{});var ggt=s(Mpe);ker=r(ggt,"distilbert"),ggt.forEach(t),Ser=r(oLe," \u2014 "),xO=n(oLe,"A",{href:!0});var hgt=s(xO);Rer=r(hgt,"TFDistilBertModel"),hgt.forEach(t),Ber=r(oLe," (DistilBERT model)"),oLe.forEach(t),Per=i(k),Dv=n(k,"LI",{});var rLe=s(Dv);Epe=n(rLe,"STRONG",{});var pgt=s(Epe);$er=r(pgt,"dpr"),pgt.forEach(t),Ier=r(rLe," \u2014 "),kO=n(rLe,"A",{href:!0});var _gt=s(kO);qer=r(_gt,"TFDPRQuestionEncoder"),_gt.forEach(t),Ner=r(rLe," (DPR model)"),rLe.forEach(t),jer=i(k),Gv=n(k,"LI",{});var tLe=s(Gv);Cpe=n(tLe,"STRONG",{});var ugt=s(Cpe);Der=r(ugt,"electra"),ugt.forEach(t),Ger=r(tLe," \u2014 "),SO=n(tLe,"A",{href:!0});var bgt=s(SO);Oer=r(bgt,"TFElectraModel"),bgt.forEach(t),Ver=r(tLe," (ELECTRA model)"),tLe.forEach(t),Xer=i(k),Ov=n(k,"LI",{});var aLe=s(Ov);wpe=n(aLe,"STRONG",{});var Fgt=s(wpe);zer=r(Fgt,"flaubert"),Fgt.forEach(t),Qer=r(aLe," \u2014 "),RO=n(aLe,"A",{href:!0});var vgt=s(RO);Wer=r(vgt,"TFFlaubertModel"),vgt.forEach(t),Her=r(aLe," (FlauBERT model)"),aLe.forEach(t),Uer=i(k),Os=n(k,"LI",{});var p7=s(Os);Ape=n(p7,"STRONG",{});var Tgt=s(Ape);Jer=r(Tgt,"funnel"),Tgt.forEach(t),Yer=r(p7," \u2014 "),BO=n(p7,"A",{href:!0});var Mgt=s(BO);Ker=r(Mgt,"TFFunnelModel"),Mgt.forEach(t),Zer=r(p7," or "),PO=n(p7,"A",{href:!0});var Egt=s(PO);eor=r(Egt,"TFFunnelBaseModel"),Egt.forEach(t),oor=r(p7," (Funnel Transformer model)"),p7.forEach(t),ror=i(k),Vv=n(k,"LI",{});var nLe=s(Vv);ype=n(nLe,"STRONG",{});var Cgt=s(ype);tor=r(Cgt,"gpt2"),Cgt.forEach(t),aor=r(nLe," \u2014 "),$O=n(nLe,"A",{href:!0});var wgt=s($O);nor=r(wgt,"TFGPT2Model"),wgt.forEach(t),sor=r(nLe," (OpenAI GPT-2 model)"),nLe.forEach(t),lor=i(k),Xv=n(k,"LI",{});var sLe=s(Xv);Lpe=n(sLe,"STRONG",{});var Agt=s(Lpe);ior=r(Agt,"gptj"),Agt.forEach(t),dor=r(sLe," \u2014 "),IO=n(sLe,"A",{href:!0});var ygt=s(IO);cor=r(ygt,"TFGPTJModel"),ygt.forEach(t),mor=r(sLe," (GPT-J model)"),sLe.forEach(t),gor=i(k),zv=n(k,"LI",{});var lLe=s(zv);xpe=n(lLe,"STRONG",{});var Lgt=s(xpe);hor=r(Lgt,"hubert"),Lgt.forEach(t),por=r(lLe," \u2014 "),qO=n(lLe,"A",{href:!0});var xgt=s(qO);_or=r(xgt,"TFHubertModel"),xgt.forEach(t),uor=r(lLe," (Hubert model)"),lLe.forEach(t),bor=i(k),Qv=n(k,"LI",{});var iLe=s(Qv);kpe=n(iLe,"STRONG",{});var kgt=s(kpe);For=r(kgt,"layoutlm"),kgt.forEach(t),vor=r(iLe," \u2014 "),NO=n(iLe,"A",{href:!0});var Sgt=s(NO);Tor=r(Sgt,"TFLayoutLMModel"),Sgt.forEach(t),Mor=r(iLe," (LayoutLM model)"),iLe.forEach(t),Eor=i(k),Wv=n(k,"LI",{});var dLe=s(Wv);Spe=n(dLe,"STRONG",{});var Rgt=s(Spe);Cor=r(Rgt,"led"),Rgt.forEach(t),wor=r(dLe," \u2014 "),jO=n(dLe,"A",{href:!0});var Bgt=s(jO);Aor=r(Bgt,"TFLEDModel"),Bgt.forEach(t),yor=r(dLe," (LED model)"),dLe.forEach(t),Lor=i(k),Hv=n(k,"LI",{});var cLe=s(Hv);Rpe=n(cLe,"STRONG",{});var Pgt=s(Rpe);xor=r(Pgt,"longformer"),Pgt.forEach(t),kor=r(cLe," \u2014 "),DO=n(cLe,"A",{href:!0});var $gt=s(DO);Sor=r($gt,"TFLongformerModel"),$gt.forEach(t),Ror=r(cLe," (Longformer model)"),cLe.forEach(t),Bor=i(k),Uv=n(k,"LI",{});var fLe=s(Uv);Bpe=n(fLe,"STRONG",{});var Igt=s(Bpe);Por=r(Igt,"lxmert"),Igt.forEach(t),$or=r(fLe," \u2014 "),GO=n(fLe,"A",{href:!0});var qgt=s(GO);Ior=r(qgt,"TFLxmertModel"),qgt.forEach(t),qor=r(fLe," (LXMERT model)"),fLe.forEach(t),Nor=i(k),Jv=n(k,"LI",{});var mLe=s(Jv);Ppe=n(mLe,"STRONG",{});var Ngt=s(Ppe);jor=r(Ngt,"marian"),Ngt.forEach(t),Dor=r(mLe," \u2014 "),OO=n(mLe,"A",{href:!0});var jgt=s(OO);Gor=r(jgt,"TFMarianModel"),jgt.forEach(t),Oor=r(mLe," (Marian model)"),mLe.forEach(t),Vor=i(k),Yv=n(k,"LI",{});var gLe=s(Yv);$pe=n(gLe,"STRONG",{});var Dgt=s($pe);Xor=r(Dgt,"mbart"),Dgt.forEach(t),zor=r(gLe," \u2014 "),VO=n(gLe,"A",{href:!0});var Ggt=s(VO);Qor=r(Ggt,"TFMBartModel"),Ggt.forEach(t),Wor=r(gLe," (mBART model)"),gLe.forEach(t),Hor=i(k),Kv=n(k,"LI",{});var hLe=s(Kv);Ipe=n(hLe,"STRONG",{});var Ogt=s(Ipe);Uor=r(Ogt,"mobilebert"),Ogt.forEach(t),Jor=r(hLe," \u2014 "),XO=n(hLe,"A",{href:!0});var Vgt=s(XO);Yor=r(Vgt,"TFMobileBertModel"),Vgt.forEach(t),Kor=r(hLe," (MobileBERT model)"),hLe.forEach(t),Zor=i(k),Zv=n(k,"LI",{});var pLe=s(Zv);qpe=n(pLe,"STRONG",{});var Xgt=s(qpe);err=r(Xgt,"mpnet"),Xgt.forEach(t),orr=r(pLe," \u2014 "),zO=n(pLe,"A",{href:!0});var zgt=s(zO);rrr=r(zgt,"TFMPNetModel"),zgt.forEach(t),trr=r(pLe," (MPNet model)"),pLe.forEach(t),arr=i(k),eT=n(k,"LI",{});var _Le=s(eT);Npe=n(_Le,"STRONG",{});var Qgt=s(Npe);nrr=r(Qgt,"mt5"),Qgt.forEach(t),srr=r(_Le," \u2014 "),QO=n(_Le,"A",{href:!0});var Wgt=s(QO);lrr=r(Wgt,"TFMT5Model"),Wgt.forEach(t),irr=r(_Le," (mT5 model)"),_Le.forEach(t),drr=i(k),oT=n(k,"LI",{});var uLe=s(oT);jpe=n(uLe,"STRONG",{});var Hgt=s(jpe);crr=r(Hgt,"openai-gpt"),Hgt.forEach(t),frr=r(uLe," \u2014 "),WO=n(uLe,"A",{href:!0});var Ugt=s(WO);mrr=r(Ugt,"TFOpenAIGPTModel"),Ugt.forEach(t),grr=r(uLe," (OpenAI GPT model)"),uLe.forEach(t),hrr=i(k),rT=n(k,"LI",{});var bLe=s(rT);Dpe=n(bLe,"STRONG",{});var Jgt=s(Dpe);prr=r(Jgt,"pegasus"),Jgt.forEach(t),_rr=r(bLe," \u2014 "),HO=n(bLe,"A",{href:!0});var Ygt=s(HO);urr=r(Ygt,"TFPegasusModel"),Ygt.forEach(t),brr=r(bLe," (Pegasus model)"),bLe.forEach(t),Frr=i(k),tT=n(k,"LI",{});var FLe=s(tT);Gpe=n(FLe,"STRONG",{});var Kgt=s(Gpe);vrr=r(Kgt,"rembert"),Kgt.forEach(t),Trr=r(FLe," \u2014 "),UO=n(FLe,"A",{href:!0});var Zgt=s(UO);Mrr=r(Zgt,"TFRemBertModel"),Zgt.forEach(t),Err=r(FLe," (RemBERT model)"),FLe.forEach(t),Crr=i(k),aT=n(k,"LI",{});var vLe=s(aT);Ope=n(vLe,"STRONG",{});var eht=s(Ope);wrr=r(eht,"roberta"),eht.forEach(t),Arr=r(vLe," \u2014 "),JO=n(vLe,"A",{href:!0});var oht=s(JO);yrr=r(oht,"TFRobertaModel"),oht.forEach(t),Lrr=r(vLe," (RoBERTa model)"),vLe.forEach(t),xrr=i(k),nT=n(k,"LI",{});var TLe=s(nT);Vpe=n(TLe,"STRONG",{});var rht=s(Vpe);krr=r(rht,"roformer"),rht.forEach(t),Srr=r(TLe," \u2014 "),YO=n(TLe,"A",{href:!0});var tht=s(YO);Rrr=r(tht,"TFRoFormerModel"),tht.forEach(t),Brr=r(TLe," (RoFormer model)"),TLe.forEach(t),Prr=i(k),sT=n(k,"LI",{});var MLe=s(sT);Xpe=n(MLe,"STRONG",{});var aht=s(Xpe);$rr=r(aht,"speech_to_text"),aht.forEach(t),Irr=r(MLe," \u2014 "),KO=n(MLe,"A",{href:!0});var nht=s(KO);qrr=r(nht,"TFSpeech2TextModel"),nht.forEach(t),Nrr=r(MLe," (Speech2Text model)"),MLe.forEach(t),jrr=i(k),lT=n(k,"LI",{});var ELe=s(lT);zpe=n(ELe,"STRONG",{});var sht=s(zpe);Drr=r(sht,"t5"),sht.forEach(t),Grr=r(ELe," \u2014 "),ZO=n(ELe,"A",{href:!0});var lht=s(ZO);Orr=r(lht,"TFT5Model"),lht.forEach(t),Vrr=r(ELe," (T5 model)"),ELe.forEach(t),Xrr=i(k),iT=n(k,"LI",{});var CLe=s(iT);Qpe=n(CLe,"STRONG",{});var iht=s(Qpe);zrr=r(iht,"tapas"),iht.forEach(t),Qrr=r(CLe," \u2014 "),eV=n(CLe,"A",{href:!0});var dht=s(eV);Wrr=r(dht,"TFTapasModel"),dht.forEach(t),Hrr=r(CLe," (TAPAS model)"),CLe.forEach(t),Urr=i(k),dT=n(k,"LI",{});var wLe=s(dT);Wpe=n(wLe,"STRONG",{});var cht=s(Wpe);Jrr=r(cht,"transfo-xl"),cht.forEach(t),Yrr=r(wLe," \u2014 "),oV=n(wLe,"A",{href:!0});var fht=s(oV);Krr=r(fht,"TFTransfoXLModel"),fht.forEach(t),Zrr=r(wLe," (Transformer-XL model)"),wLe.forEach(t),etr=i(k),cT=n(k,"LI",{});var ALe=s(cT);Hpe=n(ALe,"STRONG",{});var mht=s(Hpe);otr=r(mht,"vit"),mht.forEach(t),rtr=r(ALe," \u2014 "),rV=n(ALe,"A",{href:!0});var ght=s(rV);ttr=r(ght,"TFViTModel"),ght.forEach(t),atr=r(ALe," (ViT model)"),ALe.forEach(t),ntr=i(k),fT=n(k,"LI",{});var yLe=s(fT);Upe=n(yLe,"STRONG",{});var hht=s(Upe);str=r(hht,"vit_mae"),hht.forEach(t),ltr=r(yLe," \u2014 "),tV=n(yLe,"A",{href:!0});var pht=s(tV);itr=r(pht,"TFViTMAEModel"),pht.forEach(t),dtr=r(yLe," (ViTMAE model)"),yLe.forEach(t),ctr=i(k),mT=n(k,"LI",{});var LLe=s(mT);Jpe=n(LLe,"STRONG",{});var _ht=s(Jpe);ftr=r(_ht,"wav2vec2"),_ht.forEach(t),mtr=r(LLe," \u2014 "),aV=n(LLe,"A",{href:!0});var uht=s(aV);gtr=r(uht,"TFWav2Vec2Model"),uht.forEach(t),htr=r(LLe," (Wav2Vec2 model)"),LLe.forEach(t),ptr=i(k),gT=n(k,"LI",{});var xLe=s(gT);Ype=n(xLe,"STRONG",{});var bht=s(Ype);_tr=r(bht,"xlm"),bht.forEach(t),utr=r(xLe," \u2014 "),nV=n(xLe,"A",{href:!0});var Fht=s(nV);btr=r(Fht,"TFXLMModel"),Fht.forEach(t),Ftr=r(xLe," (XLM model)"),xLe.forEach(t),vtr=i(k),hT=n(k,"LI",{});var kLe=s(hT);Kpe=n(kLe,"STRONG",{});var vht=s(Kpe);Ttr=r(vht,"xlm-roberta"),vht.forEach(t),Mtr=r(kLe," \u2014 "),sV=n(kLe,"A",{href:!0});var Tht=s(sV);Etr=r(Tht,"TFXLMRobertaModel"),Tht.forEach(t),Ctr=r(kLe," (XLM-RoBERTa model)"),kLe.forEach(t),wtr=i(k),pT=n(k,"LI",{});var SLe=s(pT);Zpe=n(SLe,"STRONG",{});var Mht=s(Zpe);Atr=r(Mht,"xlnet"),Mht.forEach(t),ytr=r(SLe," \u2014 "),lV=n(SLe,"A",{href:!0});var Eht=s(lV);Ltr=r(Eht,"TFXLNetModel"),Eht.forEach(t),xtr=r(SLe," (XLNet model)"),SLe.forEach(t),k.forEach(t),ktr=i(pa),e_e=n(pa,"P",{});var Cht=s(e_e);Str=r(Cht,"Examples:"),Cht.forEach(t),Rtr=i(pa),m(d0.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),EBe=i(c),uc=n(c,"H2",{class:!0});var B$e=s(uc);_T=n(B$e,"A",{id:!0,class:!0,href:!0});var wht=s(_T);o_e=n(wht,"SPAN",{});var Aht=s(o_e);m(c0.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),Btr=i(B$e),r_e=n(B$e,"SPAN",{});var yht=s(r_e);Ptr=r(yht,"TFAutoModelForPreTraining"),yht.forEach(t),B$e.forEach(t),CBe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);m(f0.$$.fragment,Ol),$tr=i(Ol),bc=n(Ol,"P",{});var dJ=s(bc);Itr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iV=n(dJ,"A",{href:!0});var Lht=s(iV);qtr=r(Lht,"from_pretrained()"),Lht.forEach(t),Ntr=r(dJ," class method or the "),dV=n(dJ,"A",{href:!0});var xht=s(dV);jtr=r(xht,"from_config()"),xht.forEach(t),Dtr=r(dJ,` class
method.`),dJ.forEach(t),Gtr=i(Ol),m0=n(Ol,"P",{});var P$e=s(m0);Otr=r(P$e,"This class cannot be instantiated directly using "),t_e=n(P$e,"CODE",{});var kht=s(t_e);Vtr=r(kht,"__init__()"),kht.forEach(t),Xtr=r(P$e," (throws an error)."),P$e.forEach(t),ztr=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(g0.$$.fragment,Vl),Qtr=i(Vl),a_e=n(Vl,"P",{});var Sht=s(a_e);Wtr=r(Sht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sht.forEach(t),Htr=i(Vl),Fc=n(Vl,"P",{});var cJ=s(Fc);Utr=r(cJ,`Note:
Loading a model from its configuration file does `),n_e=n(cJ,"STRONG",{});var Rht=s(n_e);Jtr=r(Rht,"not"),Rht.forEach(t),Ytr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(cJ,"A",{href:!0});var Bht=s(cV);Ktr=r(Bht,"from_pretrained()"),Bht.forEach(t),Ztr=r(cJ," to load the model weights."),cJ.forEach(t),ear=i(Vl),s_e=n(Vl,"P",{});var Pht=s(s_e);oar=r(Pht,"Examples:"),Pht.forEach(t),rar=i(Vl),m(h0.$$.fragment,Vl),Vl.forEach(t),tar=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(p0.$$.fragment,_a),aar=i(_a),l_e=n(_a,"P",{});var $ht=s(l_e);nar=r($ht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$ht.forEach(t),sar=i(_a),un=n(_a,"P",{});var Z3=s(un);lar=r(Z3,"The model class to instantiate is selected based on the "),i_e=n(Z3,"CODE",{});var Iht=s(i_e);iar=r(Iht,"model_type"),Iht.forEach(t),dar=r(Z3,` property of the config object (either
passed as an argument or loaded from `),d_e=n(Z3,"CODE",{});var qht=s(d_e);car=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),far=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(Z3,"CODE",{});var Nht=s(c_e);mar=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),gar=r(Z3,":"),Z3.forEach(t),har=i(_a),H=n(_a,"UL",{});var U=s(H);uT=n(U,"LI",{});var RLe=s(uT);f_e=n(RLe,"STRONG",{});var jht=s(f_e);par=r(jht,"albert"),jht.forEach(t),_ar=r(RLe," \u2014 "),fV=n(RLe,"A",{href:!0});var Dht=s(fV);uar=r(Dht,"TFAlbertForPreTraining"),Dht.forEach(t),bar=r(RLe," (ALBERT model)"),RLe.forEach(t),Far=i(U),bT=n(U,"LI",{});var BLe=s(bT);m_e=n(BLe,"STRONG",{});var Ght=s(m_e);Tar=r(Ght,"bart"),Ght.forEach(t),Mar=r(BLe," \u2014 "),mV=n(BLe,"A",{href:!0});var Oht=s(mV);Ear=r(Oht,"TFBartForConditionalGeneration"),Oht.forEach(t),Car=r(BLe," (BART model)"),BLe.forEach(t),war=i(U),FT=n(U,"LI",{});var PLe=s(FT);g_e=n(PLe,"STRONG",{});var Vht=s(g_e);Aar=r(Vht,"bert"),Vht.forEach(t),yar=r(PLe," \u2014 "),gV=n(PLe,"A",{href:!0});var Xht=s(gV);Lar=r(Xht,"TFBertForPreTraining"),Xht.forEach(t),xar=r(PLe," (BERT model)"),PLe.forEach(t),kar=i(U),vT=n(U,"LI",{});var $Le=s(vT);h_e=n($Le,"STRONG",{});var zht=s(h_e);Sar=r(zht,"camembert"),zht.forEach(t),Rar=r($Le," \u2014 "),hV=n($Le,"A",{href:!0});var Qht=s(hV);Bar=r(Qht,"TFCamembertForMaskedLM"),Qht.forEach(t),Par=r($Le," (CamemBERT model)"),$Le.forEach(t),$ar=i(U),TT=n(U,"LI",{});var ILe=s(TT);p_e=n(ILe,"STRONG",{});var Wht=s(p_e);Iar=r(Wht,"ctrl"),Wht.forEach(t),qar=r(ILe," \u2014 "),pV=n(ILe,"A",{href:!0});var Hht=s(pV);Nar=r(Hht,"TFCTRLLMHeadModel"),Hht.forEach(t),jar=r(ILe," (CTRL model)"),ILe.forEach(t),Dar=i(U),MT=n(U,"LI",{});var qLe=s(MT);__e=n(qLe,"STRONG",{});var Uht=s(__e);Gar=r(Uht,"distilbert"),Uht.forEach(t),Oar=r(qLe," \u2014 "),_V=n(qLe,"A",{href:!0});var Jht=s(_V);Var=r(Jht,"TFDistilBertForMaskedLM"),Jht.forEach(t),Xar=r(qLe," (DistilBERT model)"),qLe.forEach(t),zar=i(U),ET=n(U,"LI",{});var NLe=s(ET);u_e=n(NLe,"STRONG",{});var Yht=s(u_e);Qar=r(Yht,"electra"),Yht.forEach(t),War=r(NLe," \u2014 "),uV=n(NLe,"A",{href:!0});var Kht=s(uV);Har=r(Kht,"TFElectraForPreTraining"),Kht.forEach(t),Uar=r(NLe," (ELECTRA model)"),NLe.forEach(t),Jar=i(U),CT=n(U,"LI",{});var jLe=s(CT);b_e=n(jLe,"STRONG",{});var Zht=s(b_e);Yar=r(Zht,"flaubert"),Zht.forEach(t),Kar=r(jLe," \u2014 "),bV=n(jLe,"A",{href:!0});var ept=s(bV);Zar=r(ept,"TFFlaubertWithLMHeadModel"),ept.forEach(t),enr=r(jLe," (FlauBERT model)"),jLe.forEach(t),onr=i(U),wT=n(U,"LI",{});var DLe=s(wT);F_e=n(DLe,"STRONG",{});var opt=s(F_e);rnr=r(opt,"funnel"),opt.forEach(t),tnr=r(DLe," \u2014 "),FV=n(DLe,"A",{href:!0});var rpt=s(FV);anr=r(rpt,"TFFunnelForPreTraining"),rpt.forEach(t),nnr=r(DLe," (Funnel Transformer model)"),DLe.forEach(t),snr=i(U),AT=n(U,"LI",{});var GLe=s(AT);v_e=n(GLe,"STRONG",{});var tpt=s(v_e);lnr=r(tpt,"gpt2"),tpt.forEach(t),inr=r(GLe," \u2014 "),vV=n(GLe,"A",{href:!0});var apt=s(vV);dnr=r(apt,"TFGPT2LMHeadModel"),apt.forEach(t),cnr=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),fnr=i(U),yT=n(U,"LI",{});var OLe=s(yT);T_e=n(OLe,"STRONG",{});var npt=s(T_e);mnr=r(npt,"layoutlm"),npt.forEach(t),gnr=r(OLe," \u2014 "),TV=n(OLe,"A",{href:!0});var spt=s(TV);hnr=r(spt,"TFLayoutLMForMaskedLM"),spt.forEach(t),pnr=r(OLe," (LayoutLM model)"),OLe.forEach(t),_nr=i(U),LT=n(U,"LI",{});var VLe=s(LT);M_e=n(VLe,"STRONG",{});var lpt=s(M_e);unr=r(lpt,"lxmert"),lpt.forEach(t),bnr=r(VLe," \u2014 "),MV=n(VLe,"A",{href:!0});var ipt=s(MV);Fnr=r(ipt,"TFLxmertForPreTraining"),ipt.forEach(t),vnr=r(VLe," (LXMERT model)"),VLe.forEach(t),Tnr=i(U),xT=n(U,"LI",{});var XLe=s(xT);E_e=n(XLe,"STRONG",{});var dpt=s(E_e);Mnr=r(dpt,"mobilebert"),dpt.forEach(t),Enr=r(XLe," \u2014 "),EV=n(XLe,"A",{href:!0});var cpt=s(EV);Cnr=r(cpt,"TFMobileBertForPreTraining"),cpt.forEach(t),wnr=r(XLe," (MobileBERT model)"),XLe.forEach(t),Anr=i(U),kT=n(U,"LI",{});var zLe=s(kT);C_e=n(zLe,"STRONG",{});var fpt=s(C_e);ynr=r(fpt,"mpnet"),fpt.forEach(t),Lnr=r(zLe," \u2014 "),CV=n(zLe,"A",{href:!0});var mpt=s(CV);xnr=r(mpt,"TFMPNetForMaskedLM"),mpt.forEach(t),knr=r(zLe," (MPNet model)"),zLe.forEach(t),Snr=i(U),ST=n(U,"LI",{});var QLe=s(ST);w_e=n(QLe,"STRONG",{});var gpt=s(w_e);Rnr=r(gpt,"openai-gpt"),gpt.forEach(t),Bnr=r(QLe," \u2014 "),wV=n(QLe,"A",{href:!0});var hpt=s(wV);Pnr=r(hpt,"TFOpenAIGPTLMHeadModel"),hpt.forEach(t),$nr=r(QLe," (OpenAI GPT model)"),QLe.forEach(t),Inr=i(U),RT=n(U,"LI",{});var WLe=s(RT);A_e=n(WLe,"STRONG",{});var ppt=s(A_e);qnr=r(ppt,"roberta"),ppt.forEach(t),Nnr=r(WLe," \u2014 "),AV=n(WLe,"A",{href:!0});var _pt=s(AV);jnr=r(_pt,"TFRobertaForMaskedLM"),_pt.forEach(t),Dnr=r(WLe," (RoBERTa model)"),WLe.forEach(t),Gnr=i(U),BT=n(U,"LI",{});var HLe=s(BT);y_e=n(HLe,"STRONG",{});var upt=s(y_e);Onr=r(upt,"t5"),upt.forEach(t),Vnr=r(HLe," \u2014 "),yV=n(HLe,"A",{href:!0});var bpt=s(yV);Xnr=r(bpt,"TFT5ForConditionalGeneration"),bpt.forEach(t),znr=r(HLe," (T5 model)"),HLe.forEach(t),Qnr=i(U),PT=n(U,"LI",{});var ULe=s(PT);L_e=n(ULe,"STRONG",{});var Fpt=s(L_e);Wnr=r(Fpt,"tapas"),Fpt.forEach(t),Hnr=r(ULe," \u2014 "),LV=n(ULe,"A",{href:!0});var vpt=s(LV);Unr=r(vpt,"TFTapasForMaskedLM"),vpt.forEach(t),Jnr=r(ULe," (TAPAS model)"),ULe.forEach(t),Ynr=i(U),$T=n(U,"LI",{});var JLe=s($T);x_e=n(JLe,"STRONG",{});var Tpt=s(x_e);Knr=r(Tpt,"transfo-xl"),Tpt.forEach(t),Znr=r(JLe," \u2014 "),xV=n(JLe,"A",{href:!0});var Mpt=s(xV);esr=r(Mpt,"TFTransfoXLLMHeadModel"),Mpt.forEach(t),osr=r(JLe," (Transformer-XL model)"),JLe.forEach(t),rsr=i(U),IT=n(U,"LI",{});var YLe=s(IT);k_e=n(YLe,"STRONG",{});var Ept=s(k_e);tsr=r(Ept,"vit_mae"),Ept.forEach(t),asr=r(YLe," \u2014 "),kV=n(YLe,"A",{href:!0});var Cpt=s(kV);nsr=r(Cpt,"TFViTMAEForPreTraining"),Cpt.forEach(t),ssr=r(YLe," (ViTMAE model)"),YLe.forEach(t),lsr=i(U),qT=n(U,"LI",{});var KLe=s(qT);S_e=n(KLe,"STRONG",{});var wpt=s(S_e);isr=r(wpt,"xlm"),wpt.forEach(t),dsr=r(KLe," \u2014 "),SV=n(KLe,"A",{href:!0});var Apt=s(SV);csr=r(Apt,"TFXLMWithLMHeadModel"),Apt.forEach(t),fsr=r(KLe," (XLM model)"),KLe.forEach(t),msr=i(U),NT=n(U,"LI",{});var ZLe=s(NT);R_e=n(ZLe,"STRONG",{});var ypt=s(R_e);gsr=r(ypt,"xlm-roberta"),ypt.forEach(t),hsr=r(ZLe," \u2014 "),RV=n(ZLe,"A",{href:!0});var Lpt=s(RV);psr=r(Lpt,"TFXLMRobertaForMaskedLM"),Lpt.forEach(t),_sr=r(ZLe," (XLM-RoBERTa model)"),ZLe.forEach(t),usr=i(U),jT=n(U,"LI",{});var e7e=s(jT);B_e=n(e7e,"STRONG",{});var xpt=s(B_e);bsr=r(xpt,"xlnet"),xpt.forEach(t),Fsr=r(e7e," \u2014 "),BV=n(e7e,"A",{href:!0});var kpt=s(BV);vsr=r(kpt,"TFXLNetLMHeadModel"),kpt.forEach(t),Tsr=r(e7e," (XLNet model)"),e7e.forEach(t),U.forEach(t),Msr=i(_a),P_e=n(_a,"P",{});var Spt=s(P_e);Esr=r(Spt,"Examples:"),Spt.forEach(t),Csr=i(_a),m(_0.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),wBe=i(c),vc=n(c,"H2",{class:!0});var $$e=s(vc);DT=n($$e,"A",{id:!0,class:!0,href:!0});var Rpt=s(DT);$_e=n(Rpt,"SPAN",{});var Bpt=s($_e);m(u0.$$.fragment,Bpt),Bpt.forEach(t),Rpt.forEach(t),wsr=i($$e),I_e=n($$e,"SPAN",{});var Ppt=s(I_e);Asr=r(Ppt,"TFAutoModelForCausalLM"),Ppt.forEach(t),$$e.forEach(t),ABe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(b0.$$.fragment,Xl),ysr=i(Xl),Tc=n(Xl,"P",{});var fJ=s(Tc);Lsr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PV=n(fJ,"A",{href:!0});var $pt=s(PV);xsr=r($pt,"from_pretrained()"),$pt.forEach(t),ksr=r(fJ," class method or the "),$V=n(fJ,"A",{href:!0});var Ipt=s($V);Ssr=r(Ipt,"from_config()"),Ipt.forEach(t),Rsr=r(fJ,` class
method.`),fJ.forEach(t),Bsr=i(Xl),F0=n(Xl,"P",{});var I$e=s(F0);Psr=r(I$e,"This class cannot be instantiated directly using "),q_e=n(I$e,"CODE",{});var qpt=s(q_e);$sr=r(qpt,"__init__()"),qpt.forEach(t),Isr=r(I$e," (throws an error)."),I$e.forEach(t),qsr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(v0.$$.fragment,zl),Nsr=i(zl),N_e=n(zl,"P",{});var Npt=s(N_e);jsr=r(Npt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Npt.forEach(t),Dsr=i(zl),Mc=n(zl,"P",{});var mJ=s(Mc);Gsr=r(mJ,`Note:
Loading a model from its configuration file does `),j_e=n(mJ,"STRONG",{});var jpt=s(j_e);Osr=r(jpt,"not"),jpt.forEach(t),Vsr=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(mJ,"A",{href:!0});var Dpt=s(IV);Xsr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),zsr=r(mJ," to load the model weights."),mJ.forEach(t),Qsr=i(zl),D_e=n(zl,"P",{});var Gpt=s(D_e);Wsr=r(Gpt,"Examples:"),Gpt.forEach(t),Hsr=i(zl),m(T0.$$.fragment,zl),zl.forEach(t),Usr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(M0.$$.fragment,ua),Jsr=i(ua),G_e=n(ua,"P",{});var Opt=s(G_e);Ysr=r(Opt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Opt.forEach(t),Ksr=i(ua),bn=n(ua,"P",{});var eC=s(bn);Zsr=r(eC,"The model class to instantiate is selected based on the "),O_e=n(eC,"CODE",{});var Vpt=s(O_e);elr=r(Vpt,"model_type"),Vpt.forEach(t),olr=r(eC,` property of the config object (either
passed as an argument or loaded from `),V_e=n(eC,"CODE",{});var Xpt=s(V_e);rlr=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),tlr=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(eC,"CODE",{});var zpt=s(X_e);alr=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),nlr=r(eC,":"),eC.forEach(t),slr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);GT=n(pe,"LI",{});var o7e=s(GT);z_e=n(o7e,"STRONG",{});var Qpt=s(z_e);llr=r(Qpt,"bert"),Qpt.forEach(t),ilr=r(o7e," \u2014 "),qV=n(o7e,"A",{href:!0});var Wpt=s(qV);dlr=r(Wpt,"TFBertLMHeadModel"),Wpt.forEach(t),clr=r(o7e," (BERT model)"),o7e.forEach(t),flr=i(pe),OT=n(pe,"LI",{});var r7e=s(OT);Q_e=n(r7e,"STRONG",{});var Hpt=s(Q_e);mlr=r(Hpt,"camembert"),Hpt.forEach(t),glr=r(r7e," \u2014 "),NV=n(r7e,"A",{href:!0});var Upt=s(NV);hlr=r(Upt,"TFCamembertForCausalLM"),Upt.forEach(t),plr=r(r7e," (CamemBERT model)"),r7e.forEach(t),_lr=i(pe),VT=n(pe,"LI",{});var t7e=s(VT);W_e=n(t7e,"STRONG",{});var Jpt=s(W_e);ulr=r(Jpt,"ctrl"),Jpt.forEach(t),blr=r(t7e," \u2014 "),jV=n(t7e,"A",{href:!0});var Ypt=s(jV);Flr=r(Ypt,"TFCTRLLMHeadModel"),Ypt.forEach(t),vlr=r(t7e," (CTRL model)"),t7e.forEach(t),Tlr=i(pe),XT=n(pe,"LI",{});var a7e=s(XT);H_e=n(a7e,"STRONG",{});var Kpt=s(H_e);Mlr=r(Kpt,"gpt2"),Kpt.forEach(t),Elr=r(a7e," \u2014 "),DV=n(a7e,"A",{href:!0});var Zpt=s(DV);Clr=r(Zpt,"TFGPT2LMHeadModel"),Zpt.forEach(t),wlr=r(a7e," (OpenAI GPT-2 model)"),a7e.forEach(t),Alr=i(pe),zT=n(pe,"LI",{});var n7e=s(zT);U_e=n(n7e,"STRONG",{});var e_t=s(U_e);ylr=r(e_t,"gptj"),e_t.forEach(t),Llr=r(n7e," \u2014 "),GV=n(n7e,"A",{href:!0});var o_t=s(GV);xlr=r(o_t,"TFGPTJForCausalLM"),o_t.forEach(t),klr=r(n7e," (GPT-J model)"),n7e.forEach(t),Slr=i(pe),QT=n(pe,"LI",{});var s7e=s(QT);J_e=n(s7e,"STRONG",{});var r_t=s(J_e);Rlr=r(r_t,"openai-gpt"),r_t.forEach(t),Blr=r(s7e," \u2014 "),OV=n(s7e,"A",{href:!0});var t_t=s(OV);Plr=r(t_t,"TFOpenAIGPTLMHeadModel"),t_t.forEach(t),$lr=r(s7e," (OpenAI GPT model)"),s7e.forEach(t),Ilr=i(pe),WT=n(pe,"LI",{});var l7e=s(WT);Y_e=n(l7e,"STRONG",{});var a_t=s(Y_e);qlr=r(a_t,"rembert"),a_t.forEach(t),Nlr=r(l7e," \u2014 "),VV=n(l7e,"A",{href:!0});var n_t=s(VV);jlr=r(n_t,"TFRemBertForCausalLM"),n_t.forEach(t),Dlr=r(l7e," (RemBERT model)"),l7e.forEach(t),Glr=i(pe),HT=n(pe,"LI",{});var i7e=s(HT);K_e=n(i7e,"STRONG",{});var s_t=s(K_e);Olr=r(s_t,"roberta"),s_t.forEach(t),Vlr=r(i7e," \u2014 "),XV=n(i7e,"A",{href:!0});var l_t=s(XV);Xlr=r(l_t,"TFRobertaForCausalLM"),l_t.forEach(t),zlr=r(i7e," (RoBERTa model)"),i7e.forEach(t),Qlr=i(pe),UT=n(pe,"LI",{});var d7e=s(UT);Z_e=n(d7e,"STRONG",{});var i_t=s(Z_e);Wlr=r(i_t,"roformer"),i_t.forEach(t),Hlr=r(d7e," \u2014 "),zV=n(d7e,"A",{href:!0});var d_t=s(zV);Ulr=r(d_t,"TFRoFormerForCausalLM"),d_t.forEach(t),Jlr=r(d7e," (RoFormer model)"),d7e.forEach(t),Ylr=i(pe),JT=n(pe,"LI",{});var c7e=s(JT);eue=n(c7e,"STRONG",{});var c_t=s(eue);Klr=r(c_t,"transfo-xl"),c_t.forEach(t),Zlr=r(c7e," \u2014 "),QV=n(c7e,"A",{href:!0});var f_t=s(QV);eir=r(f_t,"TFTransfoXLLMHeadModel"),f_t.forEach(t),oir=r(c7e," (Transformer-XL model)"),c7e.forEach(t),rir=i(pe),YT=n(pe,"LI",{});var f7e=s(YT);oue=n(f7e,"STRONG",{});var m_t=s(oue);tir=r(m_t,"xlm"),m_t.forEach(t),air=r(f7e," \u2014 "),WV=n(f7e,"A",{href:!0});var g_t=s(WV);nir=r(g_t,"TFXLMWithLMHeadModel"),g_t.forEach(t),sir=r(f7e," (XLM model)"),f7e.forEach(t),lir=i(pe),KT=n(pe,"LI",{});var m7e=s(KT);rue=n(m7e,"STRONG",{});var h_t=s(rue);iir=r(h_t,"xlnet"),h_t.forEach(t),dir=r(m7e," \u2014 "),HV=n(m7e,"A",{href:!0});var p_t=s(HV);cir=r(p_t,"TFXLNetLMHeadModel"),p_t.forEach(t),fir=r(m7e," (XLNet model)"),m7e.forEach(t),pe.forEach(t),mir=i(ua),tue=n(ua,"P",{});var __t=s(tue);gir=r(__t,"Examples:"),__t.forEach(t),hir=i(ua),m(E0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),yBe=i(c),Ec=n(c,"H2",{class:!0});var q$e=s(Ec);ZT=n(q$e,"A",{id:!0,class:!0,href:!0});var u_t=s(ZT);aue=n(u_t,"SPAN",{});var b_t=s(aue);m(C0.$$.fragment,b_t),b_t.forEach(t),u_t.forEach(t),pir=i(q$e),nue=n(q$e,"SPAN",{});var F_t=s(nue);_ir=r(F_t,"TFAutoModelForImageClassification"),F_t.forEach(t),q$e.forEach(t),LBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(w0.$$.fragment,Ql),uir=i(Ql),Cc=n(Ql,"P",{});var gJ=s(Cc);bir=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UV=n(gJ,"A",{href:!0});var v_t=s(UV);Fir=r(v_t,"from_pretrained()"),v_t.forEach(t),vir=r(gJ," class method or the "),JV=n(gJ,"A",{href:!0});var T_t=s(JV);Tir=r(T_t,"from_config()"),T_t.forEach(t),Mir=r(gJ,` class
method.`),gJ.forEach(t),Eir=i(Ql),A0=n(Ql,"P",{});var N$e=s(A0);Cir=r(N$e,"This class cannot be instantiated directly using "),sue=n(N$e,"CODE",{});var M_t=s(sue);wir=r(M_t,"__init__()"),M_t.forEach(t),Air=r(N$e," (throws an error)."),N$e.forEach(t),yir=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(y0.$$.fragment,Wl),Lir=i(Wl),lue=n(Wl,"P",{});var E_t=s(lue);xir=r(E_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E_t.forEach(t),kir=i(Wl),wc=n(Wl,"P",{});var hJ=s(wc);Sir=r(hJ,`Note:
Loading a model from its configuration file does `),iue=n(hJ,"STRONG",{});var C_t=s(iue);Rir=r(C_t,"not"),C_t.forEach(t),Bir=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(hJ,"A",{href:!0});var w_t=s(YV);Pir=r(w_t,"from_pretrained()"),w_t.forEach(t),$ir=r(hJ," to load the model weights."),hJ.forEach(t),Iir=i(Wl),due=n(Wl,"P",{});var A_t=s(due);qir=r(A_t,"Examples:"),A_t.forEach(t),Nir=i(Wl),m(L0.$$.fragment,Wl),Wl.forEach(t),jir=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(x0.$$.fragment,ba),Dir=i(ba),cue=n(ba,"P",{});var y_t=s(cue);Gir=r(y_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y_t.forEach(t),Oir=i(ba),Fn=n(ba,"P",{});var oC=s(Fn);Vir=r(oC,"The model class to instantiate is selected based on the "),fue=n(oC,"CODE",{});var L_t=s(fue);Xir=r(L_t,"model_type"),L_t.forEach(t),zir=r(oC,` property of the config object (either
passed as an argument or loaded from `),mue=n(oC,"CODE",{});var x_t=s(mue);Qir=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),Wir=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(oC,"CODE",{});var k_t=s(gue);Hir=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),Uir=r(oC,":"),oC.forEach(t),Jir=i(ba),k0=n(ba,"UL",{});var j$e=s(k0);e9=n(j$e,"LI",{});var g7e=s(e9);hue=n(g7e,"STRONG",{});var S_t=s(hue);Yir=r(S_t,"convnext"),S_t.forEach(t),Kir=r(g7e," \u2014 "),KV=n(g7e,"A",{href:!0});var R_t=s(KV);Zir=r(R_t,"TFConvNextForImageClassification"),R_t.forEach(t),edr=r(g7e," (ConvNext model)"),g7e.forEach(t),odr=i(j$e),o9=n(j$e,"LI",{});var h7e=s(o9);pue=n(h7e,"STRONG",{});var B_t=s(pue);rdr=r(B_t,"vit"),B_t.forEach(t),tdr=r(h7e," \u2014 "),ZV=n(h7e,"A",{href:!0});var P_t=s(ZV);adr=r(P_t,"TFViTForImageClassification"),P_t.forEach(t),ndr=r(h7e," (ViT model)"),h7e.forEach(t),j$e.forEach(t),sdr=i(ba),_ue=n(ba,"P",{});var $_t=s(_ue);ldr=r($_t,"Examples:"),$_t.forEach(t),idr=i(ba),m(S0.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),xBe=i(c),Ac=n(c,"H2",{class:!0});var D$e=s(Ac);r9=n(D$e,"A",{id:!0,class:!0,href:!0});var I_t=s(r9);uue=n(I_t,"SPAN",{});var q_t=s(uue);m(R0.$$.fragment,q_t),q_t.forEach(t),I_t.forEach(t),ddr=i(D$e),bue=n(D$e,"SPAN",{});var N_t=s(bue);cdr=r(N_t,"TFAutoModelForMaskedLM"),N_t.forEach(t),D$e.forEach(t),kBe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(B0.$$.fragment,Hl),fdr=i(Hl),yc=n(Hl,"P",{});var pJ=s(yc);mdr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eX=n(pJ,"A",{href:!0});var j_t=s(eX);gdr=r(j_t,"from_pretrained()"),j_t.forEach(t),hdr=r(pJ," class method or the "),oX=n(pJ,"A",{href:!0});var D_t=s(oX);pdr=r(D_t,"from_config()"),D_t.forEach(t),_dr=r(pJ,` class
method.`),pJ.forEach(t),udr=i(Hl),P0=n(Hl,"P",{});var G$e=s(P0);bdr=r(G$e,"This class cannot be instantiated directly using "),Fue=n(G$e,"CODE",{});var G_t=s(Fue);Fdr=r(G_t,"__init__()"),G_t.forEach(t),vdr=r(G$e," (throws an error)."),G$e.forEach(t),Tdr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m($0.$$.fragment,Ul),Mdr=i(Ul),vue=n(Ul,"P",{});var O_t=s(vue);Edr=r(O_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O_t.forEach(t),Cdr=i(Ul),Lc=n(Ul,"P",{});var _J=s(Lc);wdr=r(_J,`Note:
Loading a model from its configuration file does `),Tue=n(_J,"STRONG",{});var V_t=s(Tue);Adr=r(V_t,"not"),V_t.forEach(t),ydr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(_J,"A",{href:!0});var X_t=s(rX);Ldr=r(X_t,"from_pretrained()"),X_t.forEach(t),xdr=r(_J," to load the model weights."),_J.forEach(t),kdr=i(Ul),Mue=n(Ul,"P",{});var z_t=s(Mue);Sdr=r(z_t,"Examples:"),z_t.forEach(t),Rdr=i(Ul),m(I0.$$.fragment,Ul),Ul.forEach(t),Bdr=i(Hl),bo=n(Hl,"DIV",{class:!0});var Fa=s(bo);m(q0.$$.fragment,Fa),Pdr=i(Fa),Eue=n(Fa,"P",{});var Q_t=s(Eue);$dr=r(Q_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q_t.forEach(t),Idr=i(Fa),vn=n(Fa,"P",{});var rC=s(vn);qdr=r(rC,"The model class to instantiate is selected based on the "),Cue=n(rC,"CODE",{});var W_t=s(Cue);Ndr=r(W_t,"model_type"),W_t.forEach(t),jdr=r(rC,` property of the config object (either
passed as an argument or loaded from `),wue=n(rC,"CODE",{});var H_t=s(wue);Ddr=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),Gdr=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(rC,"CODE",{});var U_t=s(Aue);Odr=r(U_t,"pretrained_model_name_or_path"),U_t.forEach(t),Vdr=r(rC,":"),rC.forEach(t),Xdr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);t9=n(oe,"LI",{});var p7e=s(t9);yue=n(p7e,"STRONG",{});var J_t=s(yue);zdr=r(J_t,"albert"),J_t.forEach(t),Qdr=r(p7e," \u2014 "),tX=n(p7e,"A",{href:!0});var Y_t=s(tX);Wdr=r(Y_t,"TFAlbertForMaskedLM"),Y_t.forEach(t),Hdr=r(p7e," (ALBERT model)"),p7e.forEach(t),Udr=i(oe),a9=n(oe,"LI",{});var _7e=s(a9);Lue=n(_7e,"STRONG",{});var K_t=s(Lue);Jdr=r(K_t,"bert"),K_t.forEach(t),Ydr=r(_7e," \u2014 "),aX=n(_7e,"A",{href:!0});var Z_t=s(aX);Kdr=r(Z_t,"TFBertForMaskedLM"),Z_t.forEach(t),Zdr=r(_7e," (BERT model)"),_7e.forEach(t),ecr=i(oe),n9=n(oe,"LI",{});var u7e=s(n9);xue=n(u7e,"STRONG",{});var eut=s(xue);ocr=r(eut,"camembert"),eut.forEach(t),rcr=r(u7e," \u2014 "),nX=n(u7e,"A",{href:!0});var out=s(nX);tcr=r(out,"TFCamembertForMaskedLM"),out.forEach(t),acr=r(u7e," (CamemBERT model)"),u7e.forEach(t),ncr=i(oe),s9=n(oe,"LI",{});var b7e=s(s9);kue=n(b7e,"STRONG",{});var rut=s(kue);scr=r(rut,"convbert"),rut.forEach(t),lcr=r(b7e," \u2014 "),sX=n(b7e,"A",{href:!0});var tut=s(sX);icr=r(tut,"TFConvBertForMaskedLM"),tut.forEach(t),dcr=r(b7e," (ConvBERT model)"),b7e.forEach(t),ccr=i(oe),l9=n(oe,"LI",{});var F7e=s(l9);Sue=n(F7e,"STRONG",{});var aut=s(Sue);fcr=r(aut,"deberta"),aut.forEach(t),mcr=r(F7e," \u2014 "),lX=n(F7e,"A",{href:!0});var nut=s(lX);gcr=r(nut,"TFDebertaForMaskedLM"),nut.forEach(t),hcr=r(F7e," (DeBERTa model)"),F7e.forEach(t),pcr=i(oe),i9=n(oe,"LI",{});var v7e=s(i9);Rue=n(v7e,"STRONG",{});var sut=s(Rue);_cr=r(sut,"deberta-v2"),sut.forEach(t),ucr=r(v7e," \u2014 "),iX=n(v7e,"A",{href:!0});var lut=s(iX);bcr=r(lut,"TFDebertaV2ForMaskedLM"),lut.forEach(t),Fcr=r(v7e," (DeBERTa-v2 model)"),v7e.forEach(t),vcr=i(oe),d9=n(oe,"LI",{});var T7e=s(d9);Bue=n(T7e,"STRONG",{});var iut=s(Bue);Tcr=r(iut,"distilbert"),iut.forEach(t),Mcr=r(T7e," \u2014 "),dX=n(T7e,"A",{href:!0});var dut=s(dX);Ecr=r(dut,"TFDistilBertForMaskedLM"),dut.forEach(t),Ccr=r(T7e," (DistilBERT model)"),T7e.forEach(t),wcr=i(oe),c9=n(oe,"LI",{});var M7e=s(c9);Pue=n(M7e,"STRONG",{});var cut=s(Pue);Acr=r(cut,"electra"),cut.forEach(t),ycr=r(M7e," \u2014 "),cX=n(M7e,"A",{href:!0});var fut=s(cX);Lcr=r(fut,"TFElectraForMaskedLM"),fut.forEach(t),xcr=r(M7e," (ELECTRA model)"),M7e.forEach(t),kcr=i(oe),f9=n(oe,"LI",{});var E7e=s(f9);$ue=n(E7e,"STRONG",{});var mut=s($ue);Scr=r(mut,"flaubert"),mut.forEach(t),Rcr=r(E7e," \u2014 "),fX=n(E7e,"A",{href:!0});var gut=s(fX);Bcr=r(gut,"TFFlaubertWithLMHeadModel"),gut.forEach(t),Pcr=r(E7e," (FlauBERT model)"),E7e.forEach(t),$cr=i(oe),m9=n(oe,"LI",{});var C7e=s(m9);Iue=n(C7e,"STRONG",{});var hut=s(Iue);Icr=r(hut,"funnel"),hut.forEach(t),qcr=r(C7e," \u2014 "),mX=n(C7e,"A",{href:!0});var put=s(mX);Ncr=r(put,"TFFunnelForMaskedLM"),put.forEach(t),jcr=r(C7e," (Funnel Transformer model)"),C7e.forEach(t),Dcr=i(oe),g9=n(oe,"LI",{});var w7e=s(g9);que=n(w7e,"STRONG",{});var _ut=s(que);Gcr=r(_ut,"layoutlm"),_ut.forEach(t),Ocr=r(w7e," \u2014 "),gX=n(w7e,"A",{href:!0});var uut=s(gX);Vcr=r(uut,"TFLayoutLMForMaskedLM"),uut.forEach(t),Xcr=r(w7e," (LayoutLM model)"),w7e.forEach(t),zcr=i(oe),h9=n(oe,"LI",{});var A7e=s(h9);Nue=n(A7e,"STRONG",{});var but=s(Nue);Qcr=r(but,"longformer"),but.forEach(t),Wcr=r(A7e," \u2014 "),hX=n(A7e,"A",{href:!0});var Fut=s(hX);Hcr=r(Fut,"TFLongformerForMaskedLM"),Fut.forEach(t),Ucr=r(A7e," (Longformer model)"),A7e.forEach(t),Jcr=i(oe),p9=n(oe,"LI",{});var y7e=s(p9);jue=n(y7e,"STRONG",{});var vut=s(jue);Ycr=r(vut,"mobilebert"),vut.forEach(t),Kcr=r(y7e," \u2014 "),pX=n(y7e,"A",{href:!0});var Tut=s(pX);Zcr=r(Tut,"TFMobileBertForMaskedLM"),Tut.forEach(t),efr=r(y7e," (MobileBERT model)"),y7e.forEach(t),ofr=i(oe),_9=n(oe,"LI",{});var L7e=s(_9);Due=n(L7e,"STRONG",{});var Mut=s(Due);rfr=r(Mut,"mpnet"),Mut.forEach(t),tfr=r(L7e," \u2014 "),_X=n(L7e,"A",{href:!0});var Eut=s(_X);afr=r(Eut,"TFMPNetForMaskedLM"),Eut.forEach(t),nfr=r(L7e," (MPNet model)"),L7e.forEach(t),sfr=i(oe),u9=n(oe,"LI",{});var x7e=s(u9);Gue=n(x7e,"STRONG",{});var Cut=s(Gue);lfr=r(Cut,"rembert"),Cut.forEach(t),ifr=r(x7e," \u2014 "),uX=n(x7e,"A",{href:!0});var wut=s(uX);dfr=r(wut,"TFRemBertForMaskedLM"),wut.forEach(t),cfr=r(x7e," (RemBERT model)"),x7e.forEach(t),ffr=i(oe),b9=n(oe,"LI",{});var k7e=s(b9);Oue=n(k7e,"STRONG",{});var Aut=s(Oue);mfr=r(Aut,"roberta"),Aut.forEach(t),gfr=r(k7e," \u2014 "),bX=n(k7e,"A",{href:!0});var yut=s(bX);hfr=r(yut,"TFRobertaForMaskedLM"),yut.forEach(t),pfr=r(k7e," (RoBERTa model)"),k7e.forEach(t),_fr=i(oe),F9=n(oe,"LI",{});var S7e=s(F9);Vue=n(S7e,"STRONG",{});var Lut=s(Vue);ufr=r(Lut,"roformer"),Lut.forEach(t),bfr=r(S7e," \u2014 "),FX=n(S7e,"A",{href:!0});var xut=s(FX);Ffr=r(xut,"TFRoFormerForMaskedLM"),xut.forEach(t),vfr=r(S7e," (RoFormer model)"),S7e.forEach(t),Tfr=i(oe),v9=n(oe,"LI",{});var R7e=s(v9);Xue=n(R7e,"STRONG",{});var kut=s(Xue);Mfr=r(kut,"tapas"),kut.forEach(t),Efr=r(R7e," \u2014 "),vX=n(R7e,"A",{href:!0});var Sut=s(vX);Cfr=r(Sut,"TFTapasForMaskedLM"),Sut.forEach(t),wfr=r(R7e," (TAPAS model)"),R7e.forEach(t),Afr=i(oe),T9=n(oe,"LI",{});var B7e=s(T9);zue=n(B7e,"STRONG",{});var Rut=s(zue);yfr=r(Rut,"xlm"),Rut.forEach(t),Lfr=r(B7e," \u2014 "),TX=n(B7e,"A",{href:!0});var But=s(TX);xfr=r(But,"TFXLMWithLMHeadModel"),But.forEach(t),kfr=r(B7e," (XLM model)"),B7e.forEach(t),Sfr=i(oe),M9=n(oe,"LI",{});var P7e=s(M9);Que=n(P7e,"STRONG",{});var Put=s(Que);Rfr=r(Put,"xlm-roberta"),Put.forEach(t),Bfr=r(P7e," \u2014 "),MX=n(P7e,"A",{href:!0});var $ut=s(MX);Pfr=r($ut,"TFXLMRobertaForMaskedLM"),$ut.forEach(t),$fr=r(P7e," (XLM-RoBERTa model)"),P7e.forEach(t),oe.forEach(t),Ifr=i(Fa),Wue=n(Fa,"P",{});var Iut=s(Wue);qfr=r(Iut,"Examples:"),Iut.forEach(t),Nfr=i(Fa),m(N0.$$.fragment,Fa),Fa.forEach(t),Hl.forEach(t),SBe=i(c),xc=n(c,"H2",{class:!0});var O$e=s(xc);E9=n(O$e,"A",{id:!0,class:!0,href:!0});var qut=s(E9);Hue=n(qut,"SPAN",{});var Nut=s(Hue);m(j0.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),jfr=i(O$e),Uue=n(O$e,"SPAN",{});var jut=s(Uue);Dfr=r(jut,"TFAutoModelForSeq2SeqLM"),jut.forEach(t),O$e.forEach(t),RBe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(D0.$$.fragment,Jl),Gfr=i(Jl),kc=n(Jl,"P",{});var uJ=s(kc);Ofr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EX=n(uJ,"A",{href:!0});var Dut=s(EX);Vfr=r(Dut,"from_pretrained()"),Dut.forEach(t),Xfr=r(uJ," class method or the "),CX=n(uJ,"A",{href:!0});var Gut=s(CX);zfr=r(Gut,"from_config()"),Gut.forEach(t),Qfr=r(uJ,` class
method.`),uJ.forEach(t),Wfr=i(Jl),G0=n(Jl,"P",{});var V$e=s(G0);Hfr=r(V$e,"This class cannot be instantiated directly using "),Jue=n(V$e,"CODE",{});var Out=s(Jue);Ufr=r(Out,"__init__()"),Out.forEach(t),Jfr=r(V$e," (throws an error)."),V$e.forEach(t),Yfr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(O0.$$.fragment,Yl),Kfr=i(Yl),Yue=n(Yl,"P",{});var Vut=s(Yue);Zfr=r(Vut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vut.forEach(t),emr=i(Yl),Sc=n(Yl,"P",{});var bJ=s(Sc);omr=r(bJ,`Note:
Loading a model from its configuration file does `),Kue=n(bJ,"STRONG",{});var Xut=s(Kue);rmr=r(Xut,"not"),Xut.forEach(t),tmr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(bJ,"A",{href:!0});var zut=s(wX);amr=r(zut,"from_pretrained()"),zut.forEach(t),nmr=r(bJ," to load the model weights."),bJ.forEach(t),smr=i(Yl),Zue=n(Yl,"P",{});var Qut=s(Zue);lmr=r(Qut,"Examples:"),Qut.forEach(t),imr=i(Yl),m(V0.$$.fragment,Yl),Yl.forEach(t),dmr=i(Jl),Fo=n(Jl,"DIV",{class:!0});var va=s(Fo);m(X0.$$.fragment,va),cmr=i(va),e5e=n(va,"P",{});var Wut=s(e5e);fmr=r(Wut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wut.forEach(t),mmr=i(va),Tn=n(va,"P",{});var tC=s(Tn);gmr=r(tC,"The model class to instantiate is selected based on the "),o5e=n(tC,"CODE",{});var Hut=s(o5e);hmr=r(Hut,"model_type"),Hut.forEach(t),pmr=r(tC,` property of the config object (either
passed as an argument or loaded from `),r5e=n(tC,"CODE",{});var Uut=s(r5e);_mr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),umr=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(tC,"CODE",{});var Jut=s(t5e);bmr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),Fmr=r(tC,":"),tC.forEach(t),vmr=i(va),be=n(va,"UL",{});var we=s(be);C9=n(we,"LI",{});var $7e=s(C9);a5e=n($7e,"STRONG",{});var Yut=s(a5e);Tmr=r(Yut,"bart"),Yut.forEach(t),Mmr=r($7e," \u2014 "),AX=n($7e,"A",{href:!0});var Kut=s(AX);Emr=r(Kut,"TFBartForConditionalGeneration"),Kut.forEach(t),Cmr=r($7e," (BART model)"),$7e.forEach(t),wmr=i(we),w9=n(we,"LI",{});var I7e=s(w9);n5e=n(I7e,"STRONG",{});var Zut=s(n5e);Amr=r(Zut,"blenderbot"),Zut.forEach(t),ymr=r(I7e," \u2014 "),yX=n(I7e,"A",{href:!0});var e5t=s(yX);Lmr=r(e5t,"TFBlenderbotForConditionalGeneration"),e5t.forEach(t),xmr=r(I7e," (Blenderbot model)"),I7e.forEach(t),kmr=i(we),A9=n(we,"LI",{});var q7e=s(A9);s5e=n(q7e,"STRONG",{});var o5t=s(s5e);Smr=r(o5t,"blenderbot-small"),o5t.forEach(t),Rmr=r(q7e," \u2014 "),LX=n(q7e,"A",{href:!0});var r5t=s(LX);Bmr=r(r5t,"TFBlenderbotSmallForConditionalGeneration"),r5t.forEach(t),Pmr=r(q7e," (BlenderbotSmall model)"),q7e.forEach(t),$mr=i(we),y9=n(we,"LI",{});var N7e=s(y9);l5e=n(N7e,"STRONG",{});var t5t=s(l5e);Imr=r(t5t,"encoder-decoder"),t5t.forEach(t),qmr=r(N7e," \u2014 "),xX=n(N7e,"A",{href:!0});var a5t=s(xX);Nmr=r(a5t,"TFEncoderDecoderModel"),a5t.forEach(t),jmr=r(N7e," (Encoder decoder model)"),N7e.forEach(t),Dmr=i(we),L9=n(we,"LI",{});var j7e=s(L9);i5e=n(j7e,"STRONG",{});var n5t=s(i5e);Gmr=r(n5t,"led"),n5t.forEach(t),Omr=r(j7e," \u2014 "),kX=n(j7e,"A",{href:!0});var s5t=s(kX);Vmr=r(s5t,"TFLEDForConditionalGeneration"),s5t.forEach(t),Xmr=r(j7e," (LED model)"),j7e.forEach(t),zmr=i(we),x9=n(we,"LI",{});var D7e=s(x9);d5e=n(D7e,"STRONG",{});var l5t=s(d5e);Qmr=r(l5t,"marian"),l5t.forEach(t),Wmr=r(D7e," \u2014 "),SX=n(D7e,"A",{href:!0});var i5t=s(SX);Hmr=r(i5t,"TFMarianMTModel"),i5t.forEach(t),Umr=r(D7e," (Marian model)"),D7e.forEach(t),Jmr=i(we),k9=n(we,"LI",{});var G7e=s(k9);c5e=n(G7e,"STRONG",{});var d5t=s(c5e);Ymr=r(d5t,"mbart"),d5t.forEach(t),Kmr=r(G7e," \u2014 "),RX=n(G7e,"A",{href:!0});var c5t=s(RX);Zmr=r(c5t,"TFMBartForConditionalGeneration"),c5t.forEach(t),egr=r(G7e," (mBART model)"),G7e.forEach(t),ogr=i(we),S9=n(we,"LI",{});var O7e=s(S9);f5e=n(O7e,"STRONG",{});var f5t=s(f5e);rgr=r(f5t,"mt5"),f5t.forEach(t),tgr=r(O7e," \u2014 "),BX=n(O7e,"A",{href:!0});var m5t=s(BX);agr=r(m5t,"TFMT5ForConditionalGeneration"),m5t.forEach(t),ngr=r(O7e," (mT5 model)"),O7e.forEach(t),sgr=i(we),R9=n(we,"LI",{});var V7e=s(R9);m5e=n(V7e,"STRONG",{});var g5t=s(m5e);lgr=r(g5t,"pegasus"),g5t.forEach(t),igr=r(V7e," \u2014 "),PX=n(V7e,"A",{href:!0});var h5t=s(PX);dgr=r(h5t,"TFPegasusForConditionalGeneration"),h5t.forEach(t),cgr=r(V7e," (Pegasus model)"),V7e.forEach(t),fgr=i(we),B9=n(we,"LI",{});var X7e=s(B9);g5e=n(X7e,"STRONG",{});var p5t=s(g5e);mgr=r(p5t,"t5"),p5t.forEach(t),ggr=r(X7e," \u2014 "),$X=n(X7e,"A",{href:!0});var _5t=s($X);hgr=r(_5t,"TFT5ForConditionalGeneration"),_5t.forEach(t),pgr=r(X7e," (T5 model)"),X7e.forEach(t),we.forEach(t),_gr=i(va),h5e=n(va,"P",{});var u5t=s(h5e);ugr=r(u5t,"Examples:"),u5t.forEach(t),bgr=i(va),m(z0.$$.fragment,va),va.forEach(t),Jl.forEach(t),BBe=i(c),Rc=n(c,"H2",{class:!0});var X$e=s(Rc);P9=n(X$e,"A",{id:!0,class:!0,href:!0});var b5t=s(P9);p5e=n(b5t,"SPAN",{});var F5t=s(p5e);m(Q0.$$.fragment,F5t),F5t.forEach(t),b5t.forEach(t),Fgr=i(X$e),_5e=n(X$e,"SPAN",{});var v5t=s(_5e);vgr=r(v5t,"TFAutoModelForSequenceClassification"),v5t.forEach(t),X$e.forEach(t),PBe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(W0.$$.fragment,Kl),Tgr=i(Kl),Bc=n(Kl,"P",{});var FJ=s(Bc);Mgr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IX=n(FJ,"A",{href:!0});var T5t=s(IX);Egr=r(T5t,"from_pretrained()"),T5t.forEach(t),Cgr=r(FJ," class method or the "),qX=n(FJ,"A",{href:!0});var M5t=s(qX);wgr=r(M5t,"from_config()"),M5t.forEach(t),Agr=r(FJ,` class
method.`),FJ.forEach(t),ygr=i(Kl),H0=n(Kl,"P",{});var z$e=s(H0);Lgr=r(z$e,"This class cannot be instantiated directly using "),u5e=n(z$e,"CODE",{});var E5t=s(u5e);xgr=r(E5t,"__init__()"),E5t.forEach(t),kgr=r(z$e," (throws an error)."),z$e.forEach(t),Sgr=i(Kl),Ft=n(Kl,"DIV",{class:!0});var Zl=s(Ft);m(U0.$$.fragment,Zl),Rgr=i(Zl),b5e=n(Zl,"P",{});var C5t=s(b5e);Bgr=r(C5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C5t.forEach(t),Pgr=i(Zl),Pc=n(Zl,"P",{});var vJ=s(Pc);$gr=r(vJ,`Note:
Loading a model from its configuration file does `),F5e=n(vJ,"STRONG",{});var w5t=s(F5e);Igr=r(w5t,"not"),w5t.forEach(t),qgr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(vJ,"A",{href:!0});var A5t=s(NX);Ngr=r(A5t,"from_pretrained()"),A5t.forEach(t),jgr=r(vJ," to load the model weights."),vJ.forEach(t),Dgr=i(Zl),v5e=n(Zl,"P",{});var y5t=s(v5e);Ggr=r(y5t,"Examples:"),y5t.forEach(t),Ogr=i(Zl),m(J0.$$.fragment,Zl),Zl.forEach(t),Vgr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Ta=s(vo);m(Y0.$$.fragment,Ta),Xgr=i(Ta),T5e=n(Ta,"P",{});var L5t=s(T5e);zgr=r(L5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L5t.forEach(t),Qgr=i(Ta),Mn=n(Ta,"P",{});var aC=s(Mn);Wgr=r(aC,"The model class to instantiate is selected based on the "),M5e=n(aC,"CODE",{});var x5t=s(M5e);Hgr=r(x5t,"model_type"),x5t.forEach(t),Ugr=r(aC,` property of the config object (either
passed as an argument or loaded from `),E5e=n(aC,"CODE",{});var k5t=s(E5e);Jgr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),Ygr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(aC,"CODE",{});var S5t=s(C5e);Kgr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),Zgr=r(aC,":"),aC.forEach(t),ehr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);$9=n(Q,"LI",{});var z7e=s($9);w5e=n(z7e,"STRONG",{});var R5t=s(w5e);ohr=r(R5t,"albert"),R5t.forEach(t),rhr=r(z7e," \u2014 "),jX=n(z7e,"A",{href:!0});var B5t=s(jX);thr=r(B5t,"TFAlbertForSequenceClassification"),B5t.forEach(t),ahr=r(z7e," (ALBERT model)"),z7e.forEach(t),nhr=i(Q),I9=n(Q,"LI",{});var Q7e=s(I9);A5e=n(Q7e,"STRONG",{});var P5t=s(A5e);shr=r(P5t,"bert"),P5t.forEach(t),lhr=r(Q7e," \u2014 "),DX=n(Q7e,"A",{href:!0});var $5t=s(DX);ihr=r($5t,"TFBertForSequenceClassification"),$5t.forEach(t),dhr=r(Q7e," (BERT model)"),Q7e.forEach(t),chr=i(Q),q9=n(Q,"LI",{});var W7e=s(q9);y5e=n(W7e,"STRONG",{});var I5t=s(y5e);fhr=r(I5t,"camembert"),I5t.forEach(t),mhr=r(W7e," \u2014 "),GX=n(W7e,"A",{href:!0});var q5t=s(GX);ghr=r(q5t,"TFCamembertForSequenceClassification"),q5t.forEach(t),hhr=r(W7e," (CamemBERT model)"),W7e.forEach(t),phr=i(Q),N9=n(Q,"LI",{});var H7e=s(N9);L5e=n(H7e,"STRONG",{});var N5t=s(L5e);_hr=r(N5t,"convbert"),N5t.forEach(t),uhr=r(H7e," \u2014 "),OX=n(H7e,"A",{href:!0});var j5t=s(OX);bhr=r(j5t,"TFConvBertForSequenceClassification"),j5t.forEach(t),Fhr=r(H7e," (ConvBERT model)"),H7e.forEach(t),vhr=i(Q),j9=n(Q,"LI",{});var U7e=s(j9);x5e=n(U7e,"STRONG",{});var D5t=s(x5e);Thr=r(D5t,"ctrl"),D5t.forEach(t),Mhr=r(U7e," \u2014 "),VX=n(U7e,"A",{href:!0});var G5t=s(VX);Ehr=r(G5t,"TFCTRLForSequenceClassification"),G5t.forEach(t),Chr=r(U7e," (CTRL model)"),U7e.forEach(t),whr=i(Q),D9=n(Q,"LI",{});var J7e=s(D9);k5e=n(J7e,"STRONG",{});var O5t=s(k5e);Ahr=r(O5t,"deberta"),O5t.forEach(t),yhr=r(J7e," \u2014 "),XX=n(J7e,"A",{href:!0});var V5t=s(XX);Lhr=r(V5t,"TFDebertaForSequenceClassification"),V5t.forEach(t),xhr=r(J7e," (DeBERTa model)"),J7e.forEach(t),khr=i(Q),G9=n(Q,"LI",{});var Y7e=s(G9);S5e=n(Y7e,"STRONG",{});var X5t=s(S5e);Shr=r(X5t,"deberta-v2"),X5t.forEach(t),Rhr=r(Y7e," \u2014 "),zX=n(Y7e,"A",{href:!0});var z5t=s(zX);Bhr=r(z5t,"TFDebertaV2ForSequenceClassification"),z5t.forEach(t),Phr=r(Y7e," (DeBERTa-v2 model)"),Y7e.forEach(t),$hr=i(Q),O9=n(Q,"LI",{});var K7e=s(O9);R5e=n(K7e,"STRONG",{});var Q5t=s(R5e);Ihr=r(Q5t,"distilbert"),Q5t.forEach(t),qhr=r(K7e," \u2014 "),QX=n(K7e,"A",{href:!0});var W5t=s(QX);Nhr=r(W5t,"TFDistilBertForSequenceClassification"),W5t.forEach(t),jhr=r(K7e," (DistilBERT model)"),K7e.forEach(t),Dhr=i(Q),V9=n(Q,"LI",{});var Z7e=s(V9);B5e=n(Z7e,"STRONG",{});var H5t=s(B5e);Ghr=r(H5t,"electra"),H5t.forEach(t),Ohr=r(Z7e," \u2014 "),WX=n(Z7e,"A",{href:!0});var U5t=s(WX);Vhr=r(U5t,"TFElectraForSequenceClassification"),U5t.forEach(t),Xhr=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),zhr=i(Q),X9=n(Q,"LI",{});var exe=s(X9);P5e=n(exe,"STRONG",{});var J5t=s(P5e);Qhr=r(J5t,"flaubert"),J5t.forEach(t),Whr=r(exe," \u2014 "),HX=n(exe,"A",{href:!0});var Y5t=s(HX);Hhr=r(Y5t,"TFFlaubertForSequenceClassification"),Y5t.forEach(t),Uhr=r(exe," (FlauBERT model)"),exe.forEach(t),Jhr=i(Q),z9=n(Q,"LI",{});var oxe=s(z9);$5e=n(oxe,"STRONG",{});var K5t=s($5e);Yhr=r(K5t,"funnel"),K5t.forEach(t),Khr=r(oxe," \u2014 "),UX=n(oxe,"A",{href:!0});var Z5t=s(UX);Zhr=r(Z5t,"TFFunnelForSequenceClassification"),Z5t.forEach(t),epr=r(oxe," (Funnel Transformer model)"),oxe.forEach(t),opr=i(Q),Q9=n(Q,"LI",{});var rxe=s(Q9);I5e=n(rxe,"STRONG",{});var e2t=s(I5e);rpr=r(e2t,"gpt2"),e2t.forEach(t),tpr=r(rxe," \u2014 "),JX=n(rxe,"A",{href:!0});var o2t=s(JX);apr=r(o2t,"TFGPT2ForSequenceClassification"),o2t.forEach(t),npr=r(rxe," (OpenAI GPT-2 model)"),rxe.forEach(t),spr=i(Q),W9=n(Q,"LI",{});var txe=s(W9);q5e=n(txe,"STRONG",{});var r2t=s(q5e);lpr=r(r2t,"gptj"),r2t.forEach(t),ipr=r(txe," \u2014 "),YX=n(txe,"A",{href:!0});var t2t=s(YX);dpr=r(t2t,"TFGPTJForSequenceClassification"),t2t.forEach(t),cpr=r(txe," (GPT-J model)"),txe.forEach(t),fpr=i(Q),H9=n(Q,"LI",{});var axe=s(H9);N5e=n(axe,"STRONG",{});var a2t=s(N5e);mpr=r(a2t,"layoutlm"),a2t.forEach(t),gpr=r(axe," \u2014 "),KX=n(axe,"A",{href:!0});var n2t=s(KX);hpr=r(n2t,"TFLayoutLMForSequenceClassification"),n2t.forEach(t),ppr=r(axe," (LayoutLM model)"),axe.forEach(t),_pr=i(Q),U9=n(Q,"LI",{});var nxe=s(U9);j5e=n(nxe,"STRONG",{});var s2t=s(j5e);upr=r(s2t,"longformer"),s2t.forEach(t),bpr=r(nxe," \u2014 "),ZX=n(nxe,"A",{href:!0});var l2t=s(ZX);Fpr=r(l2t,"TFLongformerForSequenceClassification"),l2t.forEach(t),vpr=r(nxe," (Longformer model)"),nxe.forEach(t),Tpr=i(Q),J9=n(Q,"LI",{});var sxe=s(J9);D5e=n(sxe,"STRONG",{});var i2t=s(D5e);Mpr=r(i2t,"mobilebert"),i2t.forEach(t),Epr=r(sxe," \u2014 "),ez=n(sxe,"A",{href:!0});var d2t=s(ez);Cpr=r(d2t,"TFMobileBertForSequenceClassification"),d2t.forEach(t),wpr=r(sxe," (MobileBERT model)"),sxe.forEach(t),Apr=i(Q),Y9=n(Q,"LI",{});var lxe=s(Y9);G5e=n(lxe,"STRONG",{});var c2t=s(G5e);ypr=r(c2t,"mpnet"),c2t.forEach(t),Lpr=r(lxe," \u2014 "),oz=n(lxe,"A",{href:!0});var f2t=s(oz);xpr=r(f2t,"TFMPNetForSequenceClassification"),f2t.forEach(t),kpr=r(lxe," (MPNet model)"),lxe.forEach(t),Spr=i(Q),K9=n(Q,"LI",{});var ixe=s(K9);O5e=n(ixe,"STRONG",{});var m2t=s(O5e);Rpr=r(m2t,"openai-gpt"),m2t.forEach(t),Bpr=r(ixe," \u2014 "),rz=n(ixe,"A",{href:!0});var g2t=s(rz);Ppr=r(g2t,"TFOpenAIGPTForSequenceClassification"),g2t.forEach(t),$pr=r(ixe," (OpenAI GPT model)"),ixe.forEach(t),Ipr=i(Q),Z9=n(Q,"LI",{});var dxe=s(Z9);V5e=n(dxe,"STRONG",{});var h2t=s(V5e);qpr=r(h2t,"rembert"),h2t.forEach(t),Npr=r(dxe," \u2014 "),tz=n(dxe,"A",{href:!0});var p2t=s(tz);jpr=r(p2t,"TFRemBertForSequenceClassification"),p2t.forEach(t),Dpr=r(dxe," (RemBERT model)"),dxe.forEach(t),Gpr=i(Q),eM=n(Q,"LI",{});var cxe=s(eM);X5e=n(cxe,"STRONG",{});var _2t=s(X5e);Opr=r(_2t,"roberta"),_2t.forEach(t),Vpr=r(cxe," \u2014 "),az=n(cxe,"A",{href:!0});var u2t=s(az);Xpr=r(u2t,"TFRobertaForSequenceClassification"),u2t.forEach(t),zpr=r(cxe," (RoBERTa model)"),cxe.forEach(t),Qpr=i(Q),oM=n(Q,"LI",{});var fxe=s(oM);z5e=n(fxe,"STRONG",{});var b2t=s(z5e);Wpr=r(b2t,"roformer"),b2t.forEach(t),Hpr=r(fxe," \u2014 "),nz=n(fxe,"A",{href:!0});var F2t=s(nz);Upr=r(F2t,"TFRoFormerForSequenceClassification"),F2t.forEach(t),Jpr=r(fxe," (RoFormer model)"),fxe.forEach(t),Ypr=i(Q),rM=n(Q,"LI",{});var mxe=s(rM);Q5e=n(mxe,"STRONG",{});var v2t=s(Q5e);Kpr=r(v2t,"tapas"),v2t.forEach(t),Zpr=r(mxe," \u2014 "),sz=n(mxe,"A",{href:!0});var T2t=s(sz);e_r=r(T2t,"TFTapasForSequenceClassification"),T2t.forEach(t),o_r=r(mxe," (TAPAS model)"),mxe.forEach(t),r_r=i(Q),tM=n(Q,"LI",{});var gxe=s(tM);W5e=n(gxe,"STRONG",{});var M2t=s(W5e);t_r=r(M2t,"transfo-xl"),M2t.forEach(t),a_r=r(gxe," \u2014 "),lz=n(gxe,"A",{href:!0});var E2t=s(lz);n_r=r(E2t,"TFTransfoXLForSequenceClassification"),E2t.forEach(t),s_r=r(gxe," (Transformer-XL model)"),gxe.forEach(t),l_r=i(Q),aM=n(Q,"LI",{});var hxe=s(aM);H5e=n(hxe,"STRONG",{});var C2t=s(H5e);i_r=r(C2t,"xlm"),C2t.forEach(t),d_r=r(hxe," \u2014 "),iz=n(hxe,"A",{href:!0});var w2t=s(iz);c_r=r(w2t,"TFXLMForSequenceClassification"),w2t.forEach(t),f_r=r(hxe," (XLM model)"),hxe.forEach(t),m_r=i(Q),nM=n(Q,"LI",{});var pxe=s(nM);U5e=n(pxe,"STRONG",{});var A2t=s(U5e);g_r=r(A2t,"xlm-roberta"),A2t.forEach(t),h_r=r(pxe," \u2014 "),dz=n(pxe,"A",{href:!0});var y2t=s(dz);p_r=r(y2t,"TFXLMRobertaForSequenceClassification"),y2t.forEach(t),__r=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),u_r=i(Q),sM=n(Q,"LI",{});var _xe=s(sM);J5e=n(_xe,"STRONG",{});var L2t=s(J5e);b_r=r(L2t,"xlnet"),L2t.forEach(t),F_r=r(_xe," \u2014 "),cz=n(_xe,"A",{href:!0});var x2t=s(cz);v_r=r(x2t,"TFXLNetForSequenceClassification"),x2t.forEach(t),T_r=r(_xe," (XLNet model)"),_xe.forEach(t),Q.forEach(t),M_r=i(Ta),Y5e=n(Ta,"P",{});var k2t=s(Y5e);E_r=r(k2t,"Examples:"),k2t.forEach(t),C_r=i(Ta),m(K0.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),$Be=i(c),$c=n(c,"H2",{class:!0});var Q$e=s($c);lM=n(Q$e,"A",{id:!0,class:!0,href:!0});var S2t=s(lM);K5e=n(S2t,"SPAN",{});var R2t=s(K5e);m(Z0.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),w_r=i(Q$e),Z5e=n(Q$e,"SPAN",{});var B2t=s(Z5e);A_r=r(B2t,"TFAutoModelForMultipleChoice"),B2t.forEach(t),Q$e.forEach(t),IBe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(ey.$$.fragment,ei),y_r=i(ei),Ic=n(ei,"P",{});var TJ=s(Ic);L_r=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fz=n(TJ,"A",{href:!0});var P2t=s(fz);x_r=r(P2t,"from_pretrained()"),P2t.forEach(t),k_r=r(TJ," class method or the "),mz=n(TJ,"A",{href:!0});var $2t=s(mz);S_r=r($2t,"from_config()"),$2t.forEach(t),R_r=r(TJ,` class
method.`),TJ.forEach(t),B_r=i(ei),oy=n(ei,"P",{});var W$e=s(oy);P_r=r(W$e,"This class cannot be instantiated directly using "),e2e=n(W$e,"CODE",{});var I2t=s(e2e);$_r=r(I2t,"__init__()"),I2t.forEach(t),I_r=r(W$e," (throws an error)."),W$e.forEach(t),q_r=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(ry.$$.fragment,oi),N_r=i(oi),o2e=n(oi,"P",{});var q2t=s(o2e);j_r=r(q2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),q2t.forEach(t),D_r=i(oi),qc=n(oi,"P",{});var MJ=s(qc);G_r=r(MJ,`Note:
Loading a model from its configuration file does `),r2e=n(MJ,"STRONG",{});var N2t=s(r2e);O_r=r(N2t,"not"),N2t.forEach(t),V_r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n(MJ,"A",{href:!0});var j2t=s(gz);X_r=r(j2t,"from_pretrained()"),j2t.forEach(t),z_r=r(MJ," to load the model weights."),MJ.forEach(t),Q_r=i(oi),t2e=n(oi,"P",{});var D2t=s(t2e);W_r=r(D2t,"Examples:"),D2t.forEach(t),H_r=i(oi),m(ty.$$.fragment,oi),oi.forEach(t),U_r=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(ay.$$.fragment,Ma),J_r=i(Ma),a2e=n(Ma,"P",{});var G2t=s(a2e);Y_r=r(G2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G2t.forEach(t),K_r=i(Ma),En=n(Ma,"P",{});var nC=s(En);Z_r=r(nC,"The model class to instantiate is selected based on the "),n2e=n(nC,"CODE",{});var O2t=s(n2e);eur=r(O2t,"model_type"),O2t.forEach(t),our=r(nC,` property of the config object (either
passed as an argument or loaded from `),s2e=n(nC,"CODE",{});var V2t=s(s2e);rur=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),tur=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(nC,"CODE",{});var X2t=s(l2e);aur=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),nur=r(nC,":"),nC.forEach(t),sur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);iM=n(ie,"LI",{});var uxe=s(iM);i2e=n(uxe,"STRONG",{});var z2t=s(i2e);lur=r(z2t,"albert"),z2t.forEach(t),iur=r(uxe," \u2014 "),hz=n(uxe,"A",{href:!0});var Q2t=s(hz);dur=r(Q2t,"TFAlbertForMultipleChoice"),Q2t.forEach(t),cur=r(uxe," (ALBERT model)"),uxe.forEach(t),fur=i(ie),dM=n(ie,"LI",{});var bxe=s(dM);d2e=n(bxe,"STRONG",{});var W2t=s(d2e);mur=r(W2t,"bert"),W2t.forEach(t),gur=r(bxe," \u2014 "),pz=n(bxe,"A",{href:!0});var H2t=s(pz);hur=r(H2t,"TFBertForMultipleChoice"),H2t.forEach(t),pur=r(bxe," (BERT model)"),bxe.forEach(t),_ur=i(ie),cM=n(ie,"LI",{});var Fxe=s(cM);c2e=n(Fxe,"STRONG",{});var U2t=s(c2e);uur=r(U2t,"camembert"),U2t.forEach(t),bur=r(Fxe," \u2014 "),_z=n(Fxe,"A",{href:!0});var J2t=s(_z);Fur=r(J2t,"TFCamembertForMultipleChoice"),J2t.forEach(t),vur=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),Tur=i(ie),fM=n(ie,"LI",{});var vxe=s(fM);f2e=n(vxe,"STRONG",{});var Y2t=s(f2e);Mur=r(Y2t,"convbert"),Y2t.forEach(t),Eur=r(vxe," \u2014 "),uz=n(vxe,"A",{href:!0});var K2t=s(uz);Cur=r(K2t,"TFConvBertForMultipleChoice"),K2t.forEach(t),wur=r(vxe," (ConvBERT model)"),vxe.forEach(t),Aur=i(ie),mM=n(ie,"LI",{});var Txe=s(mM);m2e=n(Txe,"STRONG",{});var Z2t=s(m2e);yur=r(Z2t,"distilbert"),Z2t.forEach(t),Lur=r(Txe," \u2014 "),bz=n(Txe,"A",{href:!0});var e1t=s(bz);xur=r(e1t,"TFDistilBertForMultipleChoice"),e1t.forEach(t),kur=r(Txe," (DistilBERT model)"),Txe.forEach(t),Sur=i(ie),gM=n(ie,"LI",{});var Mxe=s(gM);g2e=n(Mxe,"STRONG",{});var o1t=s(g2e);Rur=r(o1t,"electra"),o1t.forEach(t),Bur=r(Mxe," \u2014 "),Fz=n(Mxe,"A",{href:!0});var r1t=s(Fz);Pur=r(r1t,"TFElectraForMultipleChoice"),r1t.forEach(t),$ur=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),Iur=i(ie),hM=n(ie,"LI",{});var Exe=s(hM);h2e=n(Exe,"STRONG",{});var t1t=s(h2e);qur=r(t1t,"flaubert"),t1t.forEach(t),Nur=r(Exe," \u2014 "),vz=n(Exe,"A",{href:!0});var a1t=s(vz);jur=r(a1t,"TFFlaubertForMultipleChoice"),a1t.forEach(t),Dur=r(Exe," (FlauBERT model)"),Exe.forEach(t),Gur=i(ie),pM=n(ie,"LI",{});var Cxe=s(pM);p2e=n(Cxe,"STRONG",{});var n1t=s(p2e);Our=r(n1t,"funnel"),n1t.forEach(t),Vur=r(Cxe," \u2014 "),Tz=n(Cxe,"A",{href:!0});var s1t=s(Tz);Xur=r(s1t,"TFFunnelForMultipleChoice"),s1t.forEach(t),zur=r(Cxe," (Funnel Transformer model)"),Cxe.forEach(t),Qur=i(ie),_M=n(ie,"LI",{});var wxe=s(_M);_2e=n(wxe,"STRONG",{});var l1t=s(_2e);Wur=r(l1t,"longformer"),l1t.forEach(t),Hur=r(wxe," \u2014 "),Mz=n(wxe,"A",{href:!0});var i1t=s(Mz);Uur=r(i1t,"TFLongformerForMultipleChoice"),i1t.forEach(t),Jur=r(wxe," (Longformer model)"),wxe.forEach(t),Yur=i(ie),uM=n(ie,"LI",{});var Axe=s(uM);u2e=n(Axe,"STRONG",{});var d1t=s(u2e);Kur=r(d1t,"mobilebert"),d1t.forEach(t),Zur=r(Axe," \u2014 "),Ez=n(Axe,"A",{href:!0});var c1t=s(Ez);e5r=r(c1t,"TFMobileBertForMultipleChoice"),c1t.forEach(t),o5r=r(Axe," (MobileBERT model)"),Axe.forEach(t),r5r=i(ie),bM=n(ie,"LI",{});var yxe=s(bM);b2e=n(yxe,"STRONG",{});var f1t=s(b2e);t5r=r(f1t,"mpnet"),f1t.forEach(t),a5r=r(yxe," \u2014 "),Cz=n(yxe,"A",{href:!0});var m1t=s(Cz);n5r=r(m1t,"TFMPNetForMultipleChoice"),m1t.forEach(t),s5r=r(yxe," (MPNet model)"),yxe.forEach(t),l5r=i(ie),FM=n(ie,"LI",{});var Lxe=s(FM);F2e=n(Lxe,"STRONG",{});var g1t=s(F2e);i5r=r(g1t,"rembert"),g1t.forEach(t),d5r=r(Lxe," \u2014 "),wz=n(Lxe,"A",{href:!0});var h1t=s(wz);c5r=r(h1t,"TFRemBertForMultipleChoice"),h1t.forEach(t),f5r=r(Lxe," (RemBERT model)"),Lxe.forEach(t),m5r=i(ie),vM=n(ie,"LI",{});var xxe=s(vM);v2e=n(xxe,"STRONG",{});var p1t=s(v2e);g5r=r(p1t,"roberta"),p1t.forEach(t),h5r=r(xxe," \u2014 "),Az=n(xxe,"A",{href:!0});var _1t=s(Az);p5r=r(_1t,"TFRobertaForMultipleChoice"),_1t.forEach(t),_5r=r(xxe," (RoBERTa model)"),xxe.forEach(t),u5r=i(ie),TM=n(ie,"LI",{});var kxe=s(TM);T2e=n(kxe,"STRONG",{});var u1t=s(T2e);b5r=r(u1t,"roformer"),u1t.forEach(t),F5r=r(kxe," \u2014 "),yz=n(kxe,"A",{href:!0});var b1t=s(yz);v5r=r(b1t,"TFRoFormerForMultipleChoice"),b1t.forEach(t),T5r=r(kxe," (RoFormer model)"),kxe.forEach(t),M5r=i(ie),MM=n(ie,"LI",{});var Sxe=s(MM);M2e=n(Sxe,"STRONG",{});var F1t=s(M2e);E5r=r(F1t,"xlm"),F1t.forEach(t),C5r=r(Sxe," \u2014 "),Lz=n(Sxe,"A",{href:!0});var v1t=s(Lz);w5r=r(v1t,"TFXLMForMultipleChoice"),v1t.forEach(t),A5r=r(Sxe," (XLM model)"),Sxe.forEach(t),y5r=i(ie),EM=n(ie,"LI",{});var Rxe=s(EM);E2e=n(Rxe,"STRONG",{});var T1t=s(E2e);L5r=r(T1t,"xlm-roberta"),T1t.forEach(t),x5r=r(Rxe," \u2014 "),xz=n(Rxe,"A",{href:!0});var M1t=s(xz);k5r=r(M1t,"TFXLMRobertaForMultipleChoice"),M1t.forEach(t),S5r=r(Rxe," (XLM-RoBERTa model)"),Rxe.forEach(t),R5r=i(ie),CM=n(ie,"LI",{});var Bxe=s(CM);C2e=n(Bxe,"STRONG",{});var E1t=s(C2e);B5r=r(E1t,"xlnet"),E1t.forEach(t),P5r=r(Bxe," \u2014 "),kz=n(Bxe,"A",{href:!0});var C1t=s(kz);$5r=r(C1t,"TFXLNetForMultipleChoice"),C1t.forEach(t),I5r=r(Bxe," (XLNet model)"),Bxe.forEach(t),ie.forEach(t),q5r=i(Ma),w2e=n(Ma,"P",{});var w1t=s(w2e);N5r=r(w1t,"Examples:"),w1t.forEach(t),j5r=i(Ma),m(ny.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),qBe=i(c),Nc=n(c,"H2",{class:!0});var H$e=s(Nc);wM=n(H$e,"A",{id:!0,class:!0,href:!0});var A1t=s(wM);A2e=n(A1t,"SPAN",{});var y1t=s(A2e);m(sy.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),D5r=i(H$e),y2e=n(H$e,"SPAN",{});var L1t=s(y2e);G5r=r(L1t,"TFAutoModelForTableQuestionAnswering"),L1t.forEach(t),H$e.forEach(t),NBe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(ly.$$.fragment,ri),O5r=i(ri),jc=n(ri,"P",{});var EJ=s(jc);V5r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Sz=n(EJ,"A",{href:!0});var x1t=s(Sz);X5r=r(x1t,"from_pretrained()"),x1t.forEach(t),z5r=r(EJ," class method or the "),Rz=n(EJ,"A",{href:!0});var k1t=s(Rz);Q5r=r(k1t,"from_config()"),k1t.forEach(t),W5r=r(EJ,` class
method.`),EJ.forEach(t),H5r=i(ri),iy=n(ri,"P",{});var U$e=s(iy);U5r=r(U$e,"This class cannot be instantiated directly using "),L2e=n(U$e,"CODE",{});var S1t=s(L2e);J5r=r(S1t,"__init__()"),S1t.forEach(t),Y5r=r(U$e," (throws an error)."),U$e.forEach(t),K5r=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(dy.$$.fragment,ti),Z5r=i(ti),x2e=n(ti,"P",{});var R1t=s(x2e);e2r=r(R1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),R1t.forEach(t),o2r=i(ti),Dc=n(ti,"P",{});var CJ=s(Dc);r2r=r(CJ,`Note:
Loading a model from its configuration file does `),k2e=n(CJ,"STRONG",{});var B1t=s(k2e);t2r=r(B1t,"not"),B1t.forEach(t),a2r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(CJ,"A",{href:!0});var P1t=s(Bz);n2r=r(P1t,"from_pretrained()"),P1t.forEach(t),s2r=r(CJ," to load the model weights."),CJ.forEach(t),l2r=i(ti),S2e=n(ti,"P",{});var $1t=s(S2e);i2r=r($1t,"Examples:"),$1t.forEach(t),d2r=i(ti),m(cy.$$.fragment,ti),ti.forEach(t),c2r=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(fy.$$.fragment,Ea),f2r=i(Ea),R2e=n(Ea,"P",{});var I1t=s(R2e);m2r=r(I1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),I1t.forEach(t),g2r=i(Ea),Cn=n(Ea,"P",{});var sC=s(Cn);h2r=r(sC,"The model class to instantiate is selected based on the "),B2e=n(sC,"CODE",{});var q1t=s(B2e);p2r=r(q1t,"model_type"),q1t.forEach(t),_2r=r(sC,` property of the config object (either
passed as an argument or loaded from `),P2e=n(sC,"CODE",{});var N1t=s(P2e);u2r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),b2r=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(sC,"CODE",{});var j1t=s($2e);F2r=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),v2r=r(sC,":"),sC.forEach(t),T2r=i(Ea),I2e=n(Ea,"UL",{});var D1t=s(I2e);AM=n(D1t,"LI",{});var Pxe=s(AM);q2e=n(Pxe,"STRONG",{});var G1t=s(q2e);M2r=r(G1t,"tapas"),G1t.forEach(t),E2r=r(Pxe," \u2014 "),Pz=n(Pxe,"A",{href:!0});var O1t=s(Pz);C2r=r(O1t,"TFTapasForQuestionAnswering"),O1t.forEach(t),w2r=r(Pxe," (TAPAS model)"),Pxe.forEach(t),D1t.forEach(t),A2r=i(Ea),N2e=n(Ea,"P",{});var V1t=s(N2e);y2r=r(V1t,"Examples:"),V1t.forEach(t),L2r=i(Ea),m(my.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),jBe=i(c),Gc=n(c,"H2",{class:!0});var J$e=s(Gc);yM=n(J$e,"A",{id:!0,class:!0,href:!0});var X1t=s(yM);j2e=n(X1t,"SPAN",{});var z1t=s(j2e);m(gy.$$.fragment,z1t),z1t.forEach(t),X1t.forEach(t),x2r=i(J$e),D2e=n(J$e,"SPAN",{});var Q1t=s(D2e);k2r=r(Q1t,"TFAutoModelForTokenClassification"),Q1t.forEach(t),J$e.forEach(t),DBe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(hy.$$.fragment,ai),S2r=i(ai),Oc=n(ai,"P",{});var wJ=s(Oc);R2r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$z=n(wJ,"A",{href:!0});var W1t=s($z);B2r=r(W1t,"from_pretrained()"),W1t.forEach(t),P2r=r(wJ," class method or the "),Iz=n(wJ,"A",{href:!0});var H1t=s(Iz);$2r=r(H1t,"from_config()"),H1t.forEach(t),I2r=r(wJ,` class
method.`),wJ.forEach(t),q2r=i(ai),py=n(ai,"P",{});var Y$e=s(py);N2r=r(Y$e,"This class cannot be instantiated directly using "),G2e=n(Y$e,"CODE",{});var U1t=s(G2e);j2r=r(U1t,"__init__()"),U1t.forEach(t),D2r=r(Y$e," (throws an error)."),Y$e.forEach(t),G2r=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(_y.$$.fragment,ni),O2r=i(ni),O2e=n(ni,"P",{});var J1t=s(O2e);V2r=r(J1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J1t.forEach(t),X2r=i(ni),Vc=n(ni,"P",{});var AJ=s(Vc);z2r=r(AJ,`Note:
Loading a model from its configuration file does `),V2e=n(AJ,"STRONG",{});var Y1t=s(V2e);Q2r=r(Y1t,"not"),Y1t.forEach(t),W2r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(AJ,"A",{href:!0});var K1t=s(qz);H2r=r(K1t,"from_pretrained()"),K1t.forEach(t),U2r=r(AJ," to load the model weights."),AJ.forEach(t),J2r=i(ni),X2e=n(ni,"P",{});var Z1t=s(X2e);Y2r=r(Z1t,"Examples:"),Z1t.forEach(t),K2r=i(ni),m(uy.$$.fragment,ni),ni.forEach(t),Z2r=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(by.$$.fragment,Ca),e1r=i(Ca),z2e=n(Ca,"P",{});var ebt=s(z2e);o1r=r(ebt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ebt.forEach(t),r1r=i(Ca),wn=n(Ca,"P",{});var lC=s(wn);t1r=r(lC,"The model class to instantiate is selected based on the "),Q2e=n(lC,"CODE",{});var obt=s(Q2e);a1r=r(obt,"model_type"),obt.forEach(t),n1r=r(lC,` property of the config object (either
passed as an argument or loaded from `),W2e=n(lC,"CODE",{});var rbt=s(W2e);s1r=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),l1r=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(lC,"CODE",{});var tbt=s(H2e);i1r=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),d1r=r(lC,":"),lC.forEach(t),c1r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);LM=n(re,"LI",{});var $xe=s(LM);U2e=n($xe,"STRONG",{});var abt=s(U2e);f1r=r(abt,"albert"),abt.forEach(t),m1r=r($xe," \u2014 "),Nz=n($xe,"A",{href:!0});var nbt=s(Nz);g1r=r(nbt,"TFAlbertForTokenClassification"),nbt.forEach(t),h1r=r($xe," (ALBERT model)"),$xe.forEach(t),p1r=i(re),xM=n(re,"LI",{});var Ixe=s(xM);J2e=n(Ixe,"STRONG",{});var sbt=s(J2e);_1r=r(sbt,"bert"),sbt.forEach(t),u1r=r(Ixe," \u2014 "),jz=n(Ixe,"A",{href:!0});var lbt=s(jz);b1r=r(lbt,"TFBertForTokenClassification"),lbt.forEach(t),F1r=r(Ixe," (BERT model)"),Ixe.forEach(t),v1r=i(re),kM=n(re,"LI",{});var qxe=s(kM);Y2e=n(qxe,"STRONG",{});var ibt=s(Y2e);T1r=r(ibt,"camembert"),ibt.forEach(t),M1r=r(qxe," \u2014 "),Dz=n(qxe,"A",{href:!0});var dbt=s(Dz);E1r=r(dbt,"TFCamembertForTokenClassification"),dbt.forEach(t),C1r=r(qxe," (CamemBERT model)"),qxe.forEach(t),w1r=i(re),SM=n(re,"LI",{});var Nxe=s(SM);K2e=n(Nxe,"STRONG",{});var cbt=s(K2e);A1r=r(cbt,"convbert"),cbt.forEach(t),y1r=r(Nxe," \u2014 "),Gz=n(Nxe,"A",{href:!0});var fbt=s(Gz);L1r=r(fbt,"TFConvBertForTokenClassification"),fbt.forEach(t),x1r=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),k1r=i(re),RM=n(re,"LI",{});var jxe=s(RM);Z2e=n(jxe,"STRONG",{});var mbt=s(Z2e);S1r=r(mbt,"deberta"),mbt.forEach(t),R1r=r(jxe," \u2014 "),Oz=n(jxe,"A",{href:!0});var gbt=s(Oz);B1r=r(gbt,"TFDebertaForTokenClassification"),gbt.forEach(t),P1r=r(jxe," (DeBERTa model)"),jxe.forEach(t),$1r=i(re),BM=n(re,"LI",{});var Dxe=s(BM);e1e=n(Dxe,"STRONG",{});var hbt=s(e1e);I1r=r(hbt,"deberta-v2"),hbt.forEach(t),q1r=r(Dxe," \u2014 "),Vz=n(Dxe,"A",{href:!0});var pbt=s(Vz);N1r=r(pbt,"TFDebertaV2ForTokenClassification"),pbt.forEach(t),j1r=r(Dxe," (DeBERTa-v2 model)"),Dxe.forEach(t),D1r=i(re),PM=n(re,"LI",{});var Gxe=s(PM);o1e=n(Gxe,"STRONG",{});var _bt=s(o1e);G1r=r(_bt,"distilbert"),_bt.forEach(t),O1r=r(Gxe," \u2014 "),Xz=n(Gxe,"A",{href:!0});var ubt=s(Xz);V1r=r(ubt,"TFDistilBertForTokenClassification"),ubt.forEach(t),X1r=r(Gxe," (DistilBERT model)"),Gxe.forEach(t),z1r=i(re),$M=n(re,"LI",{});var Oxe=s($M);r1e=n(Oxe,"STRONG",{});var bbt=s(r1e);Q1r=r(bbt,"electra"),bbt.forEach(t),W1r=r(Oxe," \u2014 "),zz=n(Oxe,"A",{href:!0});var Fbt=s(zz);H1r=r(Fbt,"TFElectraForTokenClassification"),Fbt.forEach(t),U1r=r(Oxe," (ELECTRA model)"),Oxe.forEach(t),J1r=i(re),IM=n(re,"LI",{});var Vxe=s(IM);t1e=n(Vxe,"STRONG",{});var vbt=s(t1e);Y1r=r(vbt,"flaubert"),vbt.forEach(t),K1r=r(Vxe," \u2014 "),Qz=n(Vxe,"A",{href:!0});var Tbt=s(Qz);Z1r=r(Tbt,"TFFlaubertForTokenClassification"),Tbt.forEach(t),ebr=r(Vxe," (FlauBERT model)"),Vxe.forEach(t),obr=i(re),qM=n(re,"LI",{});var Xxe=s(qM);a1e=n(Xxe,"STRONG",{});var Mbt=s(a1e);rbr=r(Mbt,"funnel"),Mbt.forEach(t),tbr=r(Xxe," \u2014 "),Wz=n(Xxe,"A",{href:!0});var Ebt=s(Wz);abr=r(Ebt,"TFFunnelForTokenClassification"),Ebt.forEach(t),nbr=r(Xxe," (Funnel Transformer model)"),Xxe.forEach(t),sbr=i(re),NM=n(re,"LI",{});var zxe=s(NM);n1e=n(zxe,"STRONG",{});var Cbt=s(n1e);lbr=r(Cbt,"layoutlm"),Cbt.forEach(t),ibr=r(zxe," \u2014 "),Hz=n(zxe,"A",{href:!0});var wbt=s(Hz);dbr=r(wbt,"TFLayoutLMForTokenClassification"),wbt.forEach(t),cbr=r(zxe," (LayoutLM model)"),zxe.forEach(t),fbr=i(re),jM=n(re,"LI",{});var Qxe=s(jM);s1e=n(Qxe,"STRONG",{});var Abt=s(s1e);mbr=r(Abt,"longformer"),Abt.forEach(t),gbr=r(Qxe," \u2014 "),Uz=n(Qxe,"A",{href:!0});var ybt=s(Uz);hbr=r(ybt,"TFLongformerForTokenClassification"),ybt.forEach(t),pbr=r(Qxe," (Longformer model)"),Qxe.forEach(t),_br=i(re),DM=n(re,"LI",{});var Wxe=s(DM);l1e=n(Wxe,"STRONG",{});var Lbt=s(l1e);ubr=r(Lbt,"mobilebert"),Lbt.forEach(t),bbr=r(Wxe," \u2014 "),Jz=n(Wxe,"A",{href:!0});var xbt=s(Jz);Fbr=r(xbt,"TFMobileBertForTokenClassification"),xbt.forEach(t),vbr=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),Tbr=i(re),GM=n(re,"LI",{});var Hxe=s(GM);i1e=n(Hxe,"STRONG",{});var kbt=s(i1e);Mbr=r(kbt,"mpnet"),kbt.forEach(t),Ebr=r(Hxe," \u2014 "),Yz=n(Hxe,"A",{href:!0});var Sbt=s(Yz);Cbr=r(Sbt,"TFMPNetForTokenClassification"),Sbt.forEach(t),wbr=r(Hxe," (MPNet model)"),Hxe.forEach(t),Abr=i(re),OM=n(re,"LI",{});var Uxe=s(OM);d1e=n(Uxe,"STRONG",{});var Rbt=s(d1e);ybr=r(Rbt,"rembert"),Rbt.forEach(t),Lbr=r(Uxe," \u2014 "),Kz=n(Uxe,"A",{href:!0});var Bbt=s(Kz);xbr=r(Bbt,"TFRemBertForTokenClassification"),Bbt.forEach(t),kbr=r(Uxe," (RemBERT model)"),Uxe.forEach(t),Sbr=i(re),VM=n(re,"LI",{});var Jxe=s(VM);c1e=n(Jxe,"STRONG",{});var Pbt=s(c1e);Rbr=r(Pbt,"roberta"),Pbt.forEach(t),Bbr=r(Jxe," \u2014 "),Zz=n(Jxe,"A",{href:!0});var $bt=s(Zz);Pbr=r($bt,"TFRobertaForTokenClassification"),$bt.forEach(t),$br=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),Ibr=i(re),XM=n(re,"LI",{});var Yxe=s(XM);f1e=n(Yxe,"STRONG",{});var Ibt=s(f1e);qbr=r(Ibt,"roformer"),Ibt.forEach(t),Nbr=r(Yxe," \u2014 "),eQ=n(Yxe,"A",{href:!0});var qbt=s(eQ);jbr=r(qbt,"TFRoFormerForTokenClassification"),qbt.forEach(t),Dbr=r(Yxe," (RoFormer model)"),Yxe.forEach(t),Gbr=i(re),zM=n(re,"LI",{});var Kxe=s(zM);m1e=n(Kxe,"STRONG",{});var Nbt=s(m1e);Obr=r(Nbt,"xlm"),Nbt.forEach(t),Vbr=r(Kxe," \u2014 "),oQ=n(Kxe,"A",{href:!0});var jbt=s(oQ);Xbr=r(jbt,"TFXLMForTokenClassification"),jbt.forEach(t),zbr=r(Kxe," (XLM model)"),Kxe.forEach(t),Qbr=i(re),QM=n(re,"LI",{});var Zxe=s(QM);g1e=n(Zxe,"STRONG",{});var Dbt=s(g1e);Wbr=r(Dbt,"xlm-roberta"),Dbt.forEach(t),Hbr=r(Zxe," \u2014 "),rQ=n(Zxe,"A",{href:!0});var Gbt=s(rQ);Ubr=r(Gbt,"TFXLMRobertaForTokenClassification"),Gbt.forEach(t),Jbr=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),Ybr=i(re),WM=n(re,"LI",{});var eke=s(WM);h1e=n(eke,"STRONG",{});var Obt=s(h1e);Kbr=r(Obt,"xlnet"),Obt.forEach(t),Zbr=r(eke," \u2014 "),tQ=n(eke,"A",{href:!0});var Vbt=s(tQ);eFr=r(Vbt,"TFXLNetForTokenClassification"),Vbt.forEach(t),oFr=r(eke," (XLNet model)"),eke.forEach(t),re.forEach(t),rFr=i(Ca),p1e=n(Ca,"P",{});var Xbt=s(p1e);tFr=r(Xbt,"Examples:"),Xbt.forEach(t),aFr=i(Ca),m(Fy.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),GBe=i(c),Xc=n(c,"H2",{class:!0});var K$e=s(Xc);HM=n(K$e,"A",{id:!0,class:!0,href:!0});var zbt=s(HM);_1e=n(zbt,"SPAN",{});var Qbt=s(_1e);m(vy.$$.fragment,Qbt),Qbt.forEach(t),zbt.forEach(t),nFr=i(K$e),u1e=n(K$e,"SPAN",{});var Wbt=s(u1e);sFr=r(Wbt,"TFAutoModelForQuestionAnswering"),Wbt.forEach(t),K$e.forEach(t),OBe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(Ty.$$.fragment,si),lFr=i(si),zc=n(si,"P",{});var yJ=s(zc);iFr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aQ=n(yJ,"A",{href:!0});var Hbt=s(aQ);dFr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),cFr=r(yJ," class method or the "),nQ=n(yJ,"A",{href:!0});var Ubt=s(nQ);fFr=r(Ubt,"from_config()"),Ubt.forEach(t),mFr=r(yJ,` class
method.`),yJ.forEach(t),gFr=i(si),My=n(si,"P",{});var Z$e=s(My);hFr=r(Z$e,"This class cannot be instantiated directly using "),b1e=n(Z$e,"CODE",{});var Jbt=s(b1e);pFr=r(Jbt,"__init__()"),Jbt.forEach(t),_Fr=r(Z$e," (throws an error)."),Z$e.forEach(t),uFr=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(Ey.$$.fragment,li),bFr=i(li),F1e=n(li,"P",{});var Ybt=s(F1e);FFr=r(Ybt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ybt.forEach(t),vFr=i(li),Qc=n(li,"P",{});var LJ=s(Qc);TFr=r(LJ,`Note:
Loading a model from its configuration file does `),v1e=n(LJ,"STRONG",{});var Kbt=s(v1e);MFr=r(Kbt,"not"),Kbt.forEach(t),EFr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(LJ,"A",{href:!0});var Zbt=s(sQ);CFr=r(Zbt,"from_pretrained()"),Zbt.forEach(t),wFr=r(LJ," to load the model weights."),LJ.forEach(t),AFr=i(li),T1e=n(li,"P",{});var eFt=s(T1e);yFr=r(eFt,"Examples:"),eFt.forEach(t),LFr=i(li),m(Cy.$$.fragment,li),li.forEach(t),xFr=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(wy.$$.fragment,wa),kFr=i(wa),M1e=n(wa,"P",{});var oFt=s(M1e);SFr=r(oFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oFt.forEach(t),RFr=i(wa),An=n(wa,"P",{});var iC=s(An);BFr=r(iC,"The model class to instantiate is selected based on the "),E1e=n(iC,"CODE",{});var rFt=s(E1e);PFr=r(rFt,"model_type"),rFt.forEach(t),$Fr=r(iC,` property of the config object (either
passed as an argument or loaded from `),C1e=n(iC,"CODE",{});var tFt=s(C1e);IFr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),qFr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(iC,"CODE",{});var aFt=s(w1e);NFr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),jFr=r(iC,":"),iC.forEach(t),DFr=i(wa),K=n(wa,"UL",{});var te=s(K);UM=n(te,"LI",{});var oke=s(UM);A1e=n(oke,"STRONG",{});var nFt=s(A1e);GFr=r(nFt,"albert"),nFt.forEach(t),OFr=r(oke," \u2014 "),lQ=n(oke,"A",{href:!0});var sFt=s(lQ);VFr=r(sFt,"TFAlbertForQuestionAnswering"),sFt.forEach(t),XFr=r(oke," (ALBERT model)"),oke.forEach(t),zFr=i(te),JM=n(te,"LI",{});var rke=s(JM);y1e=n(rke,"STRONG",{});var lFt=s(y1e);QFr=r(lFt,"bert"),lFt.forEach(t),WFr=r(rke," \u2014 "),iQ=n(rke,"A",{href:!0});var iFt=s(iQ);HFr=r(iFt,"TFBertForQuestionAnswering"),iFt.forEach(t),UFr=r(rke," (BERT model)"),rke.forEach(t),JFr=i(te),YM=n(te,"LI",{});var tke=s(YM);L1e=n(tke,"STRONG",{});var dFt=s(L1e);YFr=r(dFt,"camembert"),dFt.forEach(t),KFr=r(tke," \u2014 "),dQ=n(tke,"A",{href:!0});var cFt=s(dQ);ZFr=r(cFt,"TFCamembertForQuestionAnswering"),cFt.forEach(t),evr=r(tke," (CamemBERT model)"),tke.forEach(t),ovr=i(te),KM=n(te,"LI",{});var ake=s(KM);x1e=n(ake,"STRONG",{});var fFt=s(x1e);rvr=r(fFt,"convbert"),fFt.forEach(t),tvr=r(ake," \u2014 "),cQ=n(ake,"A",{href:!0});var mFt=s(cQ);avr=r(mFt,"TFConvBertForQuestionAnswering"),mFt.forEach(t),nvr=r(ake," (ConvBERT model)"),ake.forEach(t),svr=i(te),ZM=n(te,"LI",{});var nke=s(ZM);k1e=n(nke,"STRONG",{});var gFt=s(k1e);lvr=r(gFt,"deberta"),gFt.forEach(t),ivr=r(nke," \u2014 "),fQ=n(nke,"A",{href:!0});var hFt=s(fQ);dvr=r(hFt,"TFDebertaForQuestionAnswering"),hFt.forEach(t),cvr=r(nke," (DeBERTa model)"),nke.forEach(t),fvr=i(te),e4=n(te,"LI",{});var ske=s(e4);S1e=n(ske,"STRONG",{});var pFt=s(S1e);mvr=r(pFt,"deberta-v2"),pFt.forEach(t),gvr=r(ske," \u2014 "),mQ=n(ske,"A",{href:!0});var _Ft=s(mQ);hvr=r(_Ft,"TFDebertaV2ForQuestionAnswering"),_Ft.forEach(t),pvr=r(ske," (DeBERTa-v2 model)"),ske.forEach(t),_vr=i(te),o4=n(te,"LI",{});var lke=s(o4);R1e=n(lke,"STRONG",{});var uFt=s(R1e);uvr=r(uFt,"distilbert"),uFt.forEach(t),bvr=r(lke," \u2014 "),gQ=n(lke,"A",{href:!0});var bFt=s(gQ);Fvr=r(bFt,"TFDistilBertForQuestionAnswering"),bFt.forEach(t),vvr=r(lke," (DistilBERT model)"),lke.forEach(t),Tvr=i(te),r4=n(te,"LI",{});var ike=s(r4);B1e=n(ike,"STRONG",{});var FFt=s(B1e);Mvr=r(FFt,"electra"),FFt.forEach(t),Evr=r(ike," \u2014 "),hQ=n(ike,"A",{href:!0});var vFt=s(hQ);Cvr=r(vFt,"TFElectraForQuestionAnswering"),vFt.forEach(t),wvr=r(ike," (ELECTRA model)"),ike.forEach(t),Avr=i(te),t4=n(te,"LI",{});var dke=s(t4);P1e=n(dke,"STRONG",{});var TFt=s(P1e);yvr=r(TFt,"flaubert"),TFt.forEach(t),Lvr=r(dke," \u2014 "),pQ=n(dke,"A",{href:!0});var MFt=s(pQ);xvr=r(MFt,"TFFlaubertForQuestionAnsweringSimple"),MFt.forEach(t),kvr=r(dke," (FlauBERT model)"),dke.forEach(t),Svr=i(te),a4=n(te,"LI",{});var cke=s(a4);$1e=n(cke,"STRONG",{});var EFt=s($1e);Rvr=r(EFt,"funnel"),EFt.forEach(t),Bvr=r(cke," \u2014 "),_Q=n(cke,"A",{href:!0});var CFt=s(_Q);Pvr=r(CFt,"TFFunnelForQuestionAnswering"),CFt.forEach(t),$vr=r(cke," (Funnel Transformer model)"),cke.forEach(t),Ivr=i(te),n4=n(te,"LI",{});var fke=s(n4);I1e=n(fke,"STRONG",{});var wFt=s(I1e);qvr=r(wFt,"gptj"),wFt.forEach(t),Nvr=r(fke," \u2014 "),uQ=n(fke,"A",{href:!0});var AFt=s(uQ);jvr=r(AFt,"TFGPTJForQuestionAnswering"),AFt.forEach(t),Dvr=r(fke," (GPT-J model)"),fke.forEach(t),Gvr=i(te),s4=n(te,"LI",{});var mke=s(s4);q1e=n(mke,"STRONG",{});var yFt=s(q1e);Ovr=r(yFt,"longformer"),yFt.forEach(t),Vvr=r(mke," \u2014 "),bQ=n(mke,"A",{href:!0});var LFt=s(bQ);Xvr=r(LFt,"TFLongformerForQuestionAnswering"),LFt.forEach(t),zvr=r(mke," (Longformer model)"),mke.forEach(t),Qvr=i(te),l4=n(te,"LI",{});var gke=s(l4);N1e=n(gke,"STRONG",{});var xFt=s(N1e);Wvr=r(xFt,"mobilebert"),xFt.forEach(t),Hvr=r(gke," \u2014 "),FQ=n(gke,"A",{href:!0});var kFt=s(FQ);Uvr=r(kFt,"TFMobileBertForQuestionAnswering"),kFt.forEach(t),Jvr=r(gke," (MobileBERT model)"),gke.forEach(t),Yvr=i(te),i4=n(te,"LI",{});var hke=s(i4);j1e=n(hke,"STRONG",{});var SFt=s(j1e);Kvr=r(SFt,"mpnet"),SFt.forEach(t),Zvr=r(hke," \u2014 "),vQ=n(hke,"A",{href:!0});var RFt=s(vQ);eTr=r(RFt,"TFMPNetForQuestionAnswering"),RFt.forEach(t),oTr=r(hke," (MPNet model)"),hke.forEach(t),rTr=i(te),d4=n(te,"LI",{});var pke=s(d4);D1e=n(pke,"STRONG",{});var BFt=s(D1e);tTr=r(BFt,"rembert"),BFt.forEach(t),aTr=r(pke," \u2014 "),TQ=n(pke,"A",{href:!0});var PFt=s(TQ);nTr=r(PFt,"TFRemBertForQuestionAnswering"),PFt.forEach(t),sTr=r(pke," (RemBERT model)"),pke.forEach(t),lTr=i(te),c4=n(te,"LI",{});var _ke=s(c4);G1e=n(_ke,"STRONG",{});var $Ft=s(G1e);iTr=r($Ft,"roberta"),$Ft.forEach(t),dTr=r(_ke," \u2014 "),MQ=n(_ke,"A",{href:!0});var IFt=s(MQ);cTr=r(IFt,"TFRobertaForQuestionAnswering"),IFt.forEach(t),fTr=r(_ke," (RoBERTa model)"),_ke.forEach(t),mTr=i(te),f4=n(te,"LI",{});var uke=s(f4);O1e=n(uke,"STRONG",{});var qFt=s(O1e);gTr=r(qFt,"roformer"),qFt.forEach(t),hTr=r(uke," \u2014 "),EQ=n(uke,"A",{href:!0});var NFt=s(EQ);pTr=r(NFt,"TFRoFormerForQuestionAnswering"),NFt.forEach(t),_Tr=r(uke," (RoFormer model)"),uke.forEach(t),uTr=i(te),m4=n(te,"LI",{});var bke=s(m4);V1e=n(bke,"STRONG",{});var jFt=s(V1e);bTr=r(jFt,"xlm"),jFt.forEach(t),FTr=r(bke," \u2014 "),CQ=n(bke,"A",{href:!0});var DFt=s(CQ);vTr=r(DFt,"TFXLMForQuestionAnsweringSimple"),DFt.forEach(t),TTr=r(bke," (XLM model)"),bke.forEach(t),MTr=i(te),g4=n(te,"LI",{});var Fke=s(g4);X1e=n(Fke,"STRONG",{});var GFt=s(X1e);ETr=r(GFt,"xlm-roberta"),GFt.forEach(t),CTr=r(Fke," \u2014 "),wQ=n(Fke,"A",{href:!0});var OFt=s(wQ);wTr=r(OFt,"TFXLMRobertaForQuestionAnswering"),OFt.forEach(t),ATr=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),yTr=i(te),h4=n(te,"LI",{});var vke=s(h4);z1e=n(vke,"STRONG",{});var VFt=s(z1e);LTr=r(VFt,"xlnet"),VFt.forEach(t),xTr=r(vke," \u2014 "),AQ=n(vke,"A",{href:!0});var XFt=s(AQ);kTr=r(XFt,"TFXLNetForQuestionAnsweringSimple"),XFt.forEach(t),STr=r(vke," (XLNet model)"),vke.forEach(t),te.forEach(t),RTr=i(wa),Q1e=n(wa,"P",{});var zFt=s(Q1e);BTr=r(zFt,"Examples:"),zFt.forEach(t),PTr=i(wa),m(Ay.$$.fragment,wa),wa.forEach(t),si.forEach(t),VBe=i(c),Wc=n(c,"H2",{class:!0});var eIe=s(Wc);p4=n(eIe,"A",{id:!0,class:!0,href:!0});var QFt=s(p4);W1e=n(QFt,"SPAN",{});var WFt=s(W1e);m(yy.$$.fragment,WFt),WFt.forEach(t),QFt.forEach(t),$Tr=i(eIe),H1e=n(eIe,"SPAN",{});var HFt=s(H1e);ITr=r(HFt,"TFAutoModelForVision2Seq"),HFt.forEach(t),eIe.forEach(t),XBe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(Ly.$$.fragment,ii),qTr=i(ii),Hc=n(ii,"P",{});var xJ=s(Hc);NTr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yQ=n(xJ,"A",{href:!0});var UFt=s(yQ);jTr=r(UFt,"from_pretrained()"),UFt.forEach(t),DTr=r(xJ," class method or the "),LQ=n(xJ,"A",{href:!0});var JFt=s(LQ);GTr=r(JFt,"from_config()"),JFt.forEach(t),OTr=r(xJ,` class
method.`),xJ.forEach(t),VTr=i(ii),xy=n(ii,"P",{});var oIe=s(xy);XTr=r(oIe,"This class cannot be instantiated directly using "),U1e=n(oIe,"CODE",{});var YFt=s(U1e);zTr=r(YFt,"__init__()"),YFt.forEach(t),QTr=r(oIe," (throws an error)."),oIe.forEach(t),WTr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(ky.$$.fragment,di),HTr=i(di),J1e=n(di,"P",{});var KFt=s(J1e);UTr=r(KFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KFt.forEach(t),JTr=i(di),Uc=n(di,"P",{});var kJ=s(Uc);YTr=r(kJ,`Note:
Loading a model from its configuration file does `),Y1e=n(kJ,"STRONG",{});var ZFt=s(Y1e);KTr=r(ZFt,"not"),ZFt.forEach(t),ZTr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(kJ,"A",{href:!0});var evt=s(xQ);e9r=r(evt,"from_pretrained()"),evt.forEach(t),o9r=r(kJ," to load the model weights."),kJ.forEach(t),r9r=i(di),K1e=n(di,"P",{});var ovt=s(K1e);t9r=r(ovt,"Examples:"),ovt.forEach(t),a9r=i(di),m(Sy.$$.fragment,di),di.forEach(t),n9r=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m(Ry.$$.fragment,Aa),s9r=i(Aa),Z1e=n(Aa,"P",{});var rvt=s(Z1e);l9r=r(rvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rvt.forEach(t),i9r=i(Aa),yn=n(Aa,"P",{});var dC=s(yn);d9r=r(dC,"The model class to instantiate is selected based on the "),ebe=n(dC,"CODE",{});var tvt=s(ebe);c9r=r(tvt,"model_type"),tvt.forEach(t),f9r=r(dC,` property of the config object (either
passed as an argument or loaded from `),obe=n(dC,"CODE",{});var avt=s(obe);m9r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),g9r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(dC,"CODE",{});var nvt=s(rbe);h9r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),p9r=r(dC,":"),dC.forEach(t),_9r=i(Aa),tbe=n(Aa,"UL",{});var svt=s(tbe);_4=n(svt,"LI",{});var Tke=s(_4);abe=n(Tke,"STRONG",{});var lvt=s(abe);u9r=r(lvt,"vision-encoder-decoder"),lvt.forEach(t),b9r=r(Tke," \u2014 "),kQ=n(Tke,"A",{href:!0});var ivt=s(kQ);F9r=r(ivt,"TFVisionEncoderDecoderModel"),ivt.forEach(t),v9r=r(Tke," (Vision Encoder decoder model)"),Tke.forEach(t),svt.forEach(t),T9r=i(Aa),nbe=n(Aa,"P",{});var dvt=s(nbe);M9r=r(dvt,"Examples:"),dvt.forEach(t),E9r=i(Aa),m(By.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),zBe=i(c),Jc=n(c,"H2",{class:!0});var rIe=s(Jc);u4=n(rIe,"A",{id:!0,class:!0,href:!0});var cvt=s(u4);sbe=n(cvt,"SPAN",{});var fvt=s(sbe);m(Py.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),C9r=i(rIe),lbe=n(rIe,"SPAN",{});var mvt=s(lbe);w9r=r(mvt,"TFAutoModelForSpeechSeq2Seq"),mvt.forEach(t),rIe.forEach(t),QBe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m($y.$$.fragment,ci),A9r=i(ci),Yc=n(ci,"P",{});var SJ=s(Yc);y9r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SQ=n(SJ,"A",{href:!0});var gvt=s(SQ);L9r=r(gvt,"from_pretrained()"),gvt.forEach(t),x9r=r(SJ," class method or the "),RQ=n(SJ,"A",{href:!0});var hvt=s(RQ);k9r=r(hvt,"from_config()"),hvt.forEach(t),S9r=r(SJ,` class
method.`),SJ.forEach(t),R9r=i(ci),Iy=n(ci,"P",{});var tIe=s(Iy);B9r=r(tIe,"This class cannot be instantiated directly using "),ibe=n(tIe,"CODE",{});var pvt=s(ibe);P9r=r(pvt,"__init__()"),pvt.forEach(t),$9r=r(tIe," (throws an error)."),tIe.forEach(t),I9r=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(qy.$$.fragment,fi),q9r=i(fi),dbe=n(fi,"P",{});var _vt=s(dbe);N9r=r(_vt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_vt.forEach(t),j9r=i(fi),Kc=n(fi,"P",{});var RJ=s(Kc);D9r=r(RJ,`Note:
Loading a model from its configuration file does `),cbe=n(RJ,"STRONG",{});var uvt=s(cbe);G9r=r(uvt,"not"),uvt.forEach(t),O9r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(RJ,"A",{href:!0});var bvt=s(BQ);V9r=r(bvt,"from_pretrained()"),bvt.forEach(t),X9r=r(RJ," to load the model weights."),RJ.forEach(t),z9r=i(fi),fbe=n(fi,"P",{});var Fvt=s(fbe);Q9r=r(Fvt,"Examples:"),Fvt.forEach(t),W9r=i(fi),m(Ny.$$.fragment,fi),fi.forEach(t),H9r=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(jy.$$.fragment,ya),U9r=i(ya),mbe=n(ya,"P",{});var vvt=s(mbe);J9r=r(vvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vvt.forEach(t),Y9r=i(ya),Ln=n(ya,"P",{});var cC=s(Ln);K9r=r(cC,"The model class to instantiate is selected based on the "),gbe=n(cC,"CODE",{});var Tvt=s(gbe);Z9r=r(Tvt,"model_type"),Tvt.forEach(t),eMr=r(cC,` property of the config object (either
passed as an argument or loaded from `),hbe=n(cC,"CODE",{});var Mvt=s(hbe);oMr=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),rMr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(cC,"CODE",{});var Evt=s(pbe);tMr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),aMr=r(cC,":"),cC.forEach(t),nMr=i(ya),_be=n(ya,"UL",{});var Cvt=s(_be);b4=n(Cvt,"LI",{});var Mke=s(b4);ube=n(Mke,"STRONG",{});var wvt=s(ube);sMr=r(wvt,"speech_to_text"),wvt.forEach(t),lMr=r(Mke," \u2014 "),PQ=n(Mke,"A",{href:!0});var Avt=s(PQ);iMr=r(Avt,"TFSpeech2TextForConditionalGeneration"),Avt.forEach(t),dMr=r(Mke," (Speech2Text model)"),Mke.forEach(t),Cvt.forEach(t),cMr=i(ya),bbe=n(ya,"P",{});var yvt=s(bbe);fMr=r(yvt,"Examples:"),yvt.forEach(t),mMr=i(ya),m(Dy.$$.fragment,ya),ya.forEach(t),ci.forEach(t),WBe=i(c),Zc=n(c,"H2",{class:!0});var aIe=s(Zc);F4=n(aIe,"A",{id:!0,class:!0,href:!0});var Lvt=s(F4);Fbe=n(Lvt,"SPAN",{});var xvt=s(Fbe);m(Gy.$$.fragment,xvt),xvt.forEach(t),Lvt.forEach(t),gMr=i(aIe),vbe=n(aIe,"SPAN",{});var kvt=s(vbe);hMr=r(kvt,"FlaxAutoModel"),kvt.forEach(t),aIe.forEach(t),HBe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(Oy.$$.fragment,mi),pMr=i(mi),ef=n(mi,"P",{});var BJ=s(ef);_Mr=r(BJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Q=n(BJ,"A",{href:!0});var Svt=s($Q);uMr=r(Svt,"from_pretrained()"),Svt.forEach(t),bMr=r(BJ," class method or the "),IQ=n(BJ,"A",{href:!0});var Rvt=s(IQ);FMr=r(Rvt,"from_config()"),Rvt.forEach(t),vMr=r(BJ,` class
method.`),BJ.forEach(t),TMr=i(mi),Vy=n(mi,"P",{});var nIe=s(Vy);MMr=r(nIe,"This class cannot be instantiated directly using "),Tbe=n(nIe,"CODE",{});var Bvt=s(Tbe);EMr=r(Bvt,"__init__()"),Bvt.forEach(t),CMr=r(nIe," (throws an error)."),nIe.forEach(t),wMr=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(Xy.$$.fragment,gi),AMr=i(gi),Mbe=n(gi,"P",{});var Pvt=s(Mbe);yMr=r(Pvt,"Instantiates one of the base model classes of the library from a configuration."),Pvt.forEach(t),LMr=i(gi),of=n(gi,"P",{});var PJ=s(of);xMr=r(PJ,`Note:
Loading a model from its configuration file does `),Ebe=n(PJ,"STRONG",{});var $vt=s(Ebe);kMr=r($vt,"not"),$vt.forEach(t),SMr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(PJ,"A",{href:!0});var Ivt=s(qQ);RMr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),BMr=r(PJ," to load the model weights."),PJ.forEach(t),PMr=i(gi),Cbe=n(gi,"P",{});var qvt=s(Cbe);$Mr=r(qvt,"Examples:"),qvt.forEach(t),IMr=i(gi),m(zy.$$.fragment,gi),gi.forEach(t),qMr=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(Qy.$$.fragment,La),NMr=i(La),wbe=n(La,"P",{});var Nvt=s(wbe);jMr=r(Nvt,"Instantiate one of the base model classes of the library from a pretrained model."),Nvt.forEach(t),DMr=i(La),xn=n(La,"P",{});var fC=s(xn);GMr=r(fC,"The model class to instantiate is selected based on the "),Abe=n(fC,"CODE",{});var jvt=s(Abe);OMr=r(jvt,"model_type"),jvt.forEach(t),VMr=r(fC,` property of the config object (either
passed as an argument or loaded from `),ybe=n(fC,"CODE",{});var Dvt=s(ybe);XMr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),zMr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(fC,"CODE",{});var Gvt=s(Lbe);QMr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),WMr=r(fC,":"),fC.forEach(t),HMr=i(La),z=n(La,"UL",{});var W=s(z);v4=n(W,"LI",{});var Eke=s(v4);xbe=n(Eke,"STRONG",{});var Ovt=s(xbe);UMr=r(Ovt,"albert"),Ovt.forEach(t),JMr=r(Eke," \u2014 "),NQ=n(Eke,"A",{href:!0});var Vvt=s(NQ);YMr=r(Vvt,"FlaxAlbertModel"),Vvt.forEach(t),KMr=r(Eke," (ALBERT model)"),Eke.forEach(t),ZMr=i(W),T4=n(W,"LI",{});var Cke=s(T4);kbe=n(Cke,"STRONG",{});var Xvt=s(kbe);e4r=r(Xvt,"bart"),Xvt.forEach(t),o4r=r(Cke," \u2014 "),jQ=n(Cke,"A",{href:!0});var zvt=s(jQ);r4r=r(zvt,"FlaxBartModel"),zvt.forEach(t),t4r=r(Cke," (BART model)"),Cke.forEach(t),a4r=i(W),M4=n(W,"LI",{});var wke=s(M4);Sbe=n(wke,"STRONG",{});var Qvt=s(Sbe);n4r=r(Qvt,"beit"),Qvt.forEach(t),s4r=r(wke," \u2014 "),DQ=n(wke,"A",{href:!0});var Wvt=s(DQ);l4r=r(Wvt,"FlaxBeitModel"),Wvt.forEach(t),i4r=r(wke," (BEiT model)"),wke.forEach(t),d4r=i(W),E4=n(W,"LI",{});var Ake=s(E4);Rbe=n(Ake,"STRONG",{});var Hvt=s(Rbe);c4r=r(Hvt,"bert"),Hvt.forEach(t),f4r=r(Ake," \u2014 "),GQ=n(Ake,"A",{href:!0});var Uvt=s(GQ);m4r=r(Uvt,"FlaxBertModel"),Uvt.forEach(t),g4r=r(Ake," (BERT model)"),Ake.forEach(t),h4r=i(W),C4=n(W,"LI",{});var yke=s(C4);Bbe=n(yke,"STRONG",{});var Jvt=s(Bbe);p4r=r(Jvt,"big_bird"),Jvt.forEach(t),_4r=r(yke," \u2014 "),OQ=n(yke,"A",{href:!0});var Yvt=s(OQ);u4r=r(Yvt,"FlaxBigBirdModel"),Yvt.forEach(t),b4r=r(yke," (BigBird model)"),yke.forEach(t),F4r=i(W),w4=n(W,"LI",{});var Lke=s(w4);Pbe=n(Lke,"STRONG",{});var Kvt=s(Pbe);v4r=r(Kvt,"blenderbot"),Kvt.forEach(t),T4r=r(Lke," \u2014 "),VQ=n(Lke,"A",{href:!0});var Zvt=s(VQ);M4r=r(Zvt,"FlaxBlenderbotModel"),Zvt.forEach(t),E4r=r(Lke," (Blenderbot model)"),Lke.forEach(t),C4r=i(W),A4=n(W,"LI",{});var xke=s(A4);$be=n(xke,"STRONG",{});var eTt=s($be);w4r=r(eTt,"blenderbot-small"),eTt.forEach(t),A4r=r(xke," \u2014 "),XQ=n(xke,"A",{href:!0});var oTt=s(XQ);y4r=r(oTt,"FlaxBlenderbotSmallModel"),oTt.forEach(t),L4r=r(xke," (BlenderbotSmall model)"),xke.forEach(t),x4r=i(W),y4=n(W,"LI",{});var kke=s(y4);Ibe=n(kke,"STRONG",{});var rTt=s(Ibe);k4r=r(rTt,"clip"),rTt.forEach(t),S4r=r(kke," \u2014 "),zQ=n(kke,"A",{href:!0});var tTt=s(zQ);R4r=r(tTt,"FlaxCLIPModel"),tTt.forEach(t),B4r=r(kke," (CLIP model)"),kke.forEach(t),P4r=i(W),L4=n(W,"LI",{});var Ske=s(L4);qbe=n(Ske,"STRONG",{});var aTt=s(qbe);$4r=r(aTt,"distilbert"),aTt.forEach(t),I4r=r(Ske," \u2014 "),QQ=n(Ske,"A",{href:!0});var nTt=s(QQ);q4r=r(nTt,"FlaxDistilBertModel"),nTt.forEach(t),N4r=r(Ske," (DistilBERT model)"),Ske.forEach(t),j4r=i(W),x4=n(W,"LI",{});var Rke=s(x4);Nbe=n(Rke,"STRONG",{});var sTt=s(Nbe);D4r=r(sTt,"electra"),sTt.forEach(t),G4r=r(Rke," \u2014 "),WQ=n(Rke,"A",{href:!0});var lTt=s(WQ);O4r=r(lTt,"FlaxElectraModel"),lTt.forEach(t),V4r=r(Rke," (ELECTRA model)"),Rke.forEach(t),X4r=i(W),k4=n(W,"LI",{});var Bke=s(k4);jbe=n(Bke,"STRONG",{});var iTt=s(jbe);z4r=r(iTt,"gpt2"),iTt.forEach(t),Q4r=r(Bke," \u2014 "),HQ=n(Bke,"A",{href:!0});var dTt=s(HQ);W4r=r(dTt,"FlaxGPT2Model"),dTt.forEach(t),H4r=r(Bke," (OpenAI GPT-2 model)"),Bke.forEach(t),U4r=i(W),S4=n(W,"LI",{});var Pke=s(S4);Dbe=n(Pke,"STRONG",{});var cTt=s(Dbe);J4r=r(cTt,"gpt_neo"),cTt.forEach(t),Y4r=r(Pke," \u2014 "),UQ=n(Pke,"A",{href:!0});var fTt=s(UQ);K4r=r(fTt,"FlaxGPTNeoModel"),fTt.forEach(t),Z4r=r(Pke," (GPT Neo model)"),Pke.forEach(t),eEr=i(W),R4=n(W,"LI",{});var $ke=s(R4);Gbe=n($ke,"STRONG",{});var mTt=s(Gbe);oEr=r(mTt,"gptj"),mTt.forEach(t),rEr=r($ke," \u2014 "),JQ=n($ke,"A",{href:!0});var gTt=s(JQ);tEr=r(gTt,"FlaxGPTJModel"),gTt.forEach(t),aEr=r($ke," (GPT-J model)"),$ke.forEach(t),nEr=i(W),B4=n(W,"LI",{});var Ike=s(B4);Obe=n(Ike,"STRONG",{});var hTt=s(Obe);sEr=r(hTt,"marian"),hTt.forEach(t),lEr=r(Ike," \u2014 "),YQ=n(Ike,"A",{href:!0});var pTt=s(YQ);iEr=r(pTt,"FlaxMarianModel"),pTt.forEach(t),dEr=r(Ike," (Marian model)"),Ike.forEach(t),cEr=i(W),P4=n(W,"LI",{});var qke=s(P4);Vbe=n(qke,"STRONG",{});var _Tt=s(Vbe);fEr=r(_Tt,"mbart"),_Tt.forEach(t),mEr=r(qke," \u2014 "),KQ=n(qke,"A",{href:!0});var uTt=s(KQ);gEr=r(uTt,"FlaxMBartModel"),uTt.forEach(t),hEr=r(qke," (mBART model)"),qke.forEach(t),pEr=i(W),$4=n(W,"LI",{});var Nke=s($4);Xbe=n(Nke,"STRONG",{});var bTt=s(Xbe);_Er=r(bTt,"mt5"),bTt.forEach(t),uEr=r(Nke," \u2014 "),ZQ=n(Nke,"A",{href:!0});var FTt=s(ZQ);bEr=r(FTt,"FlaxMT5Model"),FTt.forEach(t),FEr=r(Nke," (mT5 model)"),Nke.forEach(t),vEr=i(W),I4=n(W,"LI",{});var jke=s(I4);zbe=n(jke,"STRONG",{});var vTt=s(zbe);TEr=r(vTt,"pegasus"),vTt.forEach(t),MEr=r(jke," \u2014 "),eW=n(jke,"A",{href:!0});var TTt=s(eW);EEr=r(TTt,"FlaxPegasusModel"),TTt.forEach(t),CEr=r(jke," (Pegasus model)"),jke.forEach(t),wEr=i(W),q4=n(W,"LI",{});var Dke=s(q4);Qbe=n(Dke,"STRONG",{});var MTt=s(Qbe);AEr=r(MTt,"roberta"),MTt.forEach(t),yEr=r(Dke," \u2014 "),oW=n(Dke,"A",{href:!0});var ETt=s(oW);LEr=r(ETt,"FlaxRobertaModel"),ETt.forEach(t),xEr=r(Dke," (RoBERTa model)"),Dke.forEach(t),kEr=i(W),N4=n(W,"LI",{});var Gke=s(N4);Wbe=n(Gke,"STRONG",{});var CTt=s(Wbe);SEr=r(CTt,"roformer"),CTt.forEach(t),REr=r(Gke," \u2014 "),rW=n(Gke,"A",{href:!0});var wTt=s(rW);BEr=r(wTt,"FlaxRoFormerModel"),wTt.forEach(t),PEr=r(Gke," (RoFormer model)"),Gke.forEach(t),$Er=i(W),j4=n(W,"LI",{});var Oke=s(j4);Hbe=n(Oke,"STRONG",{});var ATt=s(Hbe);IEr=r(ATt,"t5"),ATt.forEach(t),qEr=r(Oke," \u2014 "),tW=n(Oke,"A",{href:!0});var yTt=s(tW);NEr=r(yTt,"FlaxT5Model"),yTt.forEach(t),jEr=r(Oke," (T5 model)"),Oke.forEach(t),DEr=i(W),D4=n(W,"LI",{});var Vke=s(D4);Ube=n(Vke,"STRONG",{});var LTt=s(Ube);GEr=r(LTt,"vision-text-dual-encoder"),LTt.forEach(t),OEr=r(Vke," \u2014 "),aW=n(Vke,"A",{href:!0});var xTt=s(aW);VEr=r(xTt,"FlaxVisionTextDualEncoderModel"),xTt.forEach(t),XEr=r(Vke," (VisionTextDualEncoder model)"),Vke.forEach(t),zEr=i(W),G4=n(W,"LI",{});var Xke=s(G4);Jbe=n(Xke,"STRONG",{});var kTt=s(Jbe);QEr=r(kTt,"vit"),kTt.forEach(t),WEr=r(Xke," \u2014 "),nW=n(Xke,"A",{href:!0});var STt=s(nW);HEr=r(STt,"FlaxViTModel"),STt.forEach(t),UEr=r(Xke," (ViT model)"),Xke.forEach(t),JEr=i(W),O4=n(W,"LI",{});var zke=s(O4);Ybe=n(zke,"STRONG",{});var RTt=s(Ybe);YEr=r(RTt,"wav2vec2"),RTt.forEach(t),KEr=r(zke," \u2014 "),sW=n(zke,"A",{href:!0});var BTt=s(sW);ZEr=r(BTt,"FlaxWav2Vec2Model"),BTt.forEach(t),e3r=r(zke," (Wav2Vec2 model)"),zke.forEach(t),o3r=i(W),V4=n(W,"LI",{});var Qke=s(V4);Kbe=n(Qke,"STRONG",{});var PTt=s(Kbe);r3r=r(PTt,"xglm"),PTt.forEach(t),t3r=r(Qke," \u2014 "),lW=n(Qke,"A",{href:!0});var $Tt=s(lW);a3r=r($Tt,"FlaxXGLMModel"),$Tt.forEach(t),n3r=r(Qke," (XGLM model)"),Qke.forEach(t),s3r=i(W),X4=n(W,"LI",{});var Wke=s(X4);Zbe=n(Wke,"STRONG",{});var ITt=s(Zbe);l3r=r(ITt,"xlm-roberta"),ITt.forEach(t),i3r=r(Wke," \u2014 "),iW=n(Wke,"A",{href:!0});var qTt=s(iW);d3r=r(qTt,"FlaxXLMRobertaModel"),qTt.forEach(t),c3r=r(Wke," (XLM-RoBERTa model)"),Wke.forEach(t),W.forEach(t),f3r=i(La),eFe=n(La,"P",{});var NTt=s(eFe);m3r=r(NTt,"Examples:"),NTt.forEach(t),g3r=i(La),m(Wy.$$.fragment,La),La.forEach(t),mi.forEach(t),UBe=i(c),rf=n(c,"H2",{class:!0});var sIe=s(rf);z4=n(sIe,"A",{id:!0,class:!0,href:!0});var jTt=s(z4);oFe=n(jTt,"SPAN",{});var DTt=s(oFe);m(Hy.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),h3r=i(sIe),rFe=n(sIe,"SPAN",{});var GTt=s(rFe);p3r=r(GTt,"FlaxAutoModelForCausalLM"),GTt.forEach(t),sIe.forEach(t),JBe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(Uy.$$.fragment,hi),_3r=i(hi),tf=n(hi,"P",{});var $J=s(tf);u3r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dW=n($J,"A",{href:!0});var OTt=s(dW);b3r=r(OTt,"from_pretrained()"),OTt.forEach(t),F3r=r($J," class method or the "),cW=n($J,"A",{href:!0});var VTt=s(cW);v3r=r(VTt,"from_config()"),VTt.forEach(t),T3r=r($J,` class
method.`),$J.forEach(t),M3r=i(hi),Jy=n(hi,"P",{});var lIe=s(Jy);E3r=r(lIe,"This class cannot be instantiated directly using "),tFe=n(lIe,"CODE",{});var XTt=s(tFe);C3r=r(XTt,"__init__()"),XTt.forEach(t),w3r=r(lIe," (throws an error)."),lIe.forEach(t),A3r=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(Yy.$$.fragment,pi),y3r=i(pi),aFe=n(pi,"P",{});var zTt=s(aFe);L3r=r(zTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zTt.forEach(t),x3r=i(pi),af=n(pi,"P",{});var IJ=s(af);k3r=r(IJ,`Note:
Loading a model from its configuration file does `),nFe=n(IJ,"STRONG",{});var QTt=s(nFe);S3r=r(QTt,"not"),QTt.forEach(t),R3r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(IJ,"A",{href:!0});var WTt=s(fW);B3r=r(WTt,"from_pretrained()"),WTt.forEach(t),P3r=r(IJ," to load the model weights."),IJ.forEach(t),$3r=i(pi),sFe=n(pi,"P",{});var HTt=s(sFe);I3r=r(HTt,"Examples:"),HTt.forEach(t),q3r=i(pi),m(Ky.$$.fragment,pi),pi.forEach(t),N3r=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(Zy.$$.fragment,xa),j3r=i(xa),lFe=n(xa,"P",{});var UTt=s(lFe);D3r=r(UTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UTt.forEach(t),G3r=i(xa),kn=n(xa,"P",{});var mC=s(kn);O3r=r(mC,"The model class to instantiate is selected based on the "),iFe=n(mC,"CODE",{});var JTt=s(iFe);V3r=r(JTt,"model_type"),JTt.forEach(t),X3r=r(mC,` property of the config object (either
passed as an argument or loaded from `),dFe=n(mC,"CODE",{});var YTt=s(dFe);z3r=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),Q3r=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(mC,"CODE",{});var KTt=s(cFe);W3r=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),H3r=r(mC,":"),mC.forEach(t),U3r=i(xa),ca=n(xa,"UL",{});var _i=s(ca);Q4=n(_i,"LI",{});var Hke=s(Q4);fFe=n(Hke,"STRONG",{});var ZTt=s(fFe);J3r=r(ZTt,"bart"),ZTt.forEach(t),Y3r=r(Hke," \u2014 "),mW=n(Hke,"A",{href:!0});var e9t=s(mW);K3r=r(e9t,"FlaxBartForCausalLM"),e9t.forEach(t),Z3r=r(Hke," (BART model)"),Hke.forEach(t),eCr=i(_i),W4=n(_i,"LI",{});var Uke=s(W4);mFe=n(Uke,"STRONG",{});var o9t=s(mFe);oCr=r(o9t,"gpt2"),o9t.forEach(t),rCr=r(Uke," \u2014 "),gW=n(Uke,"A",{href:!0});var r9t=s(gW);tCr=r(r9t,"FlaxGPT2LMHeadModel"),r9t.forEach(t),aCr=r(Uke," (OpenAI GPT-2 model)"),Uke.forEach(t),nCr=i(_i),H4=n(_i,"LI",{});var Jke=s(H4);gFe=n(Jke,"STRONG",{});var t9t=s(gFe);sCr=r(t9t,"gpt_neo"),t9t.forEach(t),lCr=r(Jke," \u2014 "),hW=n(Jke,"A",{href:!0});var a9t=s(hW);iCr=r(a9t,"FlaxGPTNeoForCausalLM"),a9t.forEach(t),dCr=r(Jke," (GPT Neo model)"),Jke.forEach(t),cCr=i(_i),U4=n(_i,"LI",{});var Yke=s(U4);hFe=n(Yke,"STRONG",{});var n9t=s(hFe);fCr=r(n9t,"gptj"),n9t.forEach(t),mCr=r(Yke," \u2014 "),pW=n(Yke,"A",{href:!0});var s9t=s(pW);gCr=r(s9t,"FlaxGPTJForCausalLM"),s9t.forEach(t),hCr=r(Yke," (GPT-J model)"),Yke.forEach(t),pCr=i(_i),J4=n(_i,"LI",{});var Kke=s(J4);pFe=n(Kke,"STRONG",{});var l9t=s(pFe);_Cr=r(l9t,"xglm"),l9t.forEach(t),uCr=r(Kke," \u2014 "),_W=n(Kke,"A",{href:!0});var i9t=s(_W);bCr=r(i9t,"FlaxXGLMForCausalLM"),i9t.forEach(t),FCr=r(Kke," (XGLM model)"),Kke.forEach(t),_i.forEach(t),vCr=i(xa),_Fe=n(xa,"P",{});var d9t=s(_Fe);TCr=r(d9t,"Examples:"),d9t.forEach(t),MCr=i(xa),m(e8.$$.fragment,xa),xa.forEach(t),hi.forEach(t),YBe=i(c),nf=n(c,"H2",{class:!0});var iIe=s(nf);Y4=n(iIe,"A",{id:!0,class:!0,href:!0});var c9t=s(Y4);uFe=n(c9t,"SPAN",{});var f9t=s(uFe);m(o8.$$.fragment,f9t),f9t.forEach(t),c9t.forEach(t),ECr=i(iIe),bFe=n(iIe,"SPAN",{});var m9t=s(bFe);CCr=r(m9t,"FlaxAutoModelForPreTraining"),m9t.forEach(t),iIe.forEach(t),KBe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(r8.$$.fragment,ui),wCr=i(ui),sf=n(ui,"P",{});var qJ=s(sf);ACr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uW=n(qJ,"A",{href:!0});var g9t=s(uW);yCr=r(g9t,"from_pretrained()"),g9t.forEach(t),LCr=r(qJ," class method or the "),bW=n(qJ,"A",{href:!0});var h9t=s(bW);xCr=r(h9t,"from_config()"),h9t.forEach(t),kCr=r(qJ,` class
method.`),qJ.forEach(t),SCr=i(ui),t8=n(ui,"P",{});var dIe=s(t8);RCr=r(dIe,"This class cannot be instantiated directly using "),FFe=n(dIe,"CODE",{});var p9t=s(FFe);BCr=r(p9t,"__init__()"),p9t.forEach(t),PCr=r(dIe," (throws an error)."),dIe.forEach(t),$Cr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(a8.$$.fragment,bi),ICr=i(bi),vFe=n(bi,"P",{});var _9t=s(vFe);qCr=r(_9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_9t.forEach(t),NCr=i(bi),lf=n(bi,"P",{});var NJ=s(lf);jCr=r(NJ,`Note:
Loading a model from its configuration file does `),TFe=n(NJ,"STRONG",{});var u9t=s(TFe);DCr=r(u9t,"not"),u9t.forEach(t),GCr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(NJ,"A",{href:!0});var b9t=s(FW);OCr=r(b9t,"from_pretrained()"),b9t.forEach(t),VCr=r(NJ," to load the model weights."),NJ.forEach(t),XCr=i(bi),MFe=n(bi,"P",{});var F9t=s(MFe);zCr=r(F9t,"Examples:"),F9t.forEach(t),QCr=i(bi),m(n8.$$.fragment,bi),bi.forEach(t),WCr=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(s8.$$.fragment,ka),HCr=i(ka),EFe=n(ka,"P",{});var v9t=s(EFe);UCr=r(v9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v9t.forEach(t),JCr=i(ka),Sn=n(ka,"P",{});var gC=s(Sn);YCr=r(gC,"The model class to instantiate is selected based on the "),CFe=n(gC,"CODE",{});var T9t=s(CFe);KCr=r(T9t,"model_type"),T9t.forEach(t),ZCr=r(gC,` property of the config object (either
passed as an argument or loaded from `),wFe=n(gC,"CODE",{});var M9t=s(wFe);ewr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),owr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(gC,"CODE",{});var E9t=s(AFe);rwr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),twr=r(gC,":"),gC.forEach(t),awr=i(ka),me=n(ka,"UL",{});var _e=s(me);K4=n(_e,"LI",{});var Zke=s(K4);yFe=n(Zke,"STRONG",{});var C9t=s(yFe);nwr=r(C9t,"albert"),C9t.forEach(t),swr=r(Zke," \u2014 "),vW=n(Zke,"A",{href:!0});var w9t=s(vW);lwr=r(w9t,"FlaxAlbertForPreTraining"),w9t.forEach(t),iwr=r(Zke," (ALBERT model)"),Zke.forEach(t),dwr=i(_e),Z4=n(_e,"LI",{});var eSe=s(Z4);LFe=n(eSe,"STRONG",{});var A9t=s(LFe);cwr=r(A9t,"bart"),A9t.forEach(t),fwr=r(eSe," \u2014 "),TW=n(eSe,"A",{href:!0});var y9t=s(TW);mwr=r(y9t,"FlaxBartForConditionalGeneration"),y9t.forEach(t),gwr=r(eSe," (BART model)"),eSe.forEach(t),hwr=i(_e),eE=n(_e,"LI",{});var oSe=s(eE);xFe=n(oSe,"STRONG",{});var L9t=s(xFe);pwr=r(L9t,"bert"),L9t.forEach(t),_wr=r(oSe," \u2014 "),MW=n(oSe,"A",{href:!0});var x9t=s(MW);uwr=r(x9t,"FlaxBertForPreTraining"),x9t.forEach(t),bwr=r(oSe," (BERT model)"),oSe.forEach(t),Fwr=i(_e),oE=n(_e,"LI",{});var rSe=s(oE);kFe=n(rSe,"STRONG",{});var k9t=s(kFe);vwr=r(k9t,"big_bird"),k9t.forEach(t),Twr=r(rSe," \u2014 "),EW=n(rSe,"A",{href:!0});var S9t=s(EW);Mwr=r(S9t,"FlaxBigBirdForPreTraining"),S9t.forEach(t),Ewr=r(rSe," (BigBird model)"),rSe.forEach(t),Cwr=i(_e),rE=n(_e,"LI",{});var tSe=s(rE);SFe=n(tSe,"STRONG",{});var R9t=s(SFe);wwr=r(R9t,"electra"),R9t.forEach(t),Awr=r(tSe," \u2014 "),CW=n(tSe,"A",{href:!0});var B9t=s(CW);ywr=r(B9t,"FlaxElectraForPreTraining"),B9t.forEach(t),Lwr=r(tSe," (ELECTRA model)"),tSe.forEach(t),xwr=i(_e),tE=n(_e,"LI",{});var aSe=s(tE);RFe=n(aSe,"STRONG",{});var P9t=s(RFe);kwr=r(P9t,"mbart"),P9t.forEach(t),Swr=r(aSe," \u2014 "),wW=n(aSe,"A",{href:!0});var $9t=s(wW);Rwr=r($9t,"FlaxMBartForConditionalGeneration"),$9t.forEach(t),Bwr=r(aSe," (mBART model)"),aSe.forEach(t),Pwr=i(_e),aE=n(_e,"LI",{});var nSe=s(aE);BFe=n(nSe,"STRONG",{});var I9t=s(BFe);$wr=r(I9t,"mt5"),I9t.forEach(t),Iwr=r(nSe," \u2014 "),AW=n(nSe,"A",{href:!0});var q9t=s(AW);qwr=r(q9t,"FlaxMT5ForConditionalGeneration"),q9t.forEach(t),Nwr=r(nSe," (mT5 model)"),nSe.forEach(t),jwr=i(_e),nE=n(_e,"LI",{});var sSe=s(nE);PFe=n(sSe,"STRONG",{});var N9t=s(PFe);Dwr=r(N9t,"roberta"),N9t.forEach(t),Gwr=r(sSe," \u2014 "),yW=n(sSe,"A",{href:!0});var j9t=s(yW);Owr=r(j9t,"FlaxRobertaForMaskedLM"),j9t.forEach(t),Vwr=r(sSe," (RoBERTa model)"),sSe.forEach(t),Xwr=i(_e),sE=n(_e,"LI",{});var lSe=s(sE);$Fe=n(lSe,"STRONG",{});var D9t=s($Fe);zwr=r(D9t,"roformer"),D9t.forEach(t),Qwr=r(lSe," \u2014 "),LW=n(lSe,"A",{href:!0});var G9t=s(LW);Wwr=r(G9t,"FlaxRoFormerForMaskedLM"),G9t.forEach(t),Hwr=r(lSe," (RoFormer model)"),lSe.forEach(t),Uwr=i(_e),lE=n(_e,"LI",{});var iSe=s(lE);IFe=n(iSe,"STRONG",{});var O9t=s(IFe);Jwr=r(O9t,"t5"),O9t.forEach(t),Ywr=r(iSe," \u2014 "),xW=n(iSe,"A",{href:!0});var V9t=s(xW);Kwr=r(V9t,"FlaxT5ForConditionalGeneration"),V9t.forEach(t),Zwr=r(iSe," (T5 model)"),iSe.forEach(t),e6r=i(_e),iE=n(_e,"LI",{});var dSe=s(iE);qFe=n(dSe,"STRONG",{});var X9t=s(qFe);o6r=r(X9t,"wav2vec2"),X9t.forEach(t),r6r=r(dSe," \u2014 "),kW=n(dSe,"A",{href:!0});var z9t=s(kW);t6r=r(z9t,"FlaxWav2Vec2ForPreTraining"),z9t.forEach(t),a6r=r(dSe," (Wav2Vec2 model)"),dSe.forEach(t),n6r=i(_e),dE=n(_e,"LI",{});var cSe=s(dE);NFe=n(cSe,"STRONG",{});var Q9t=s(NFe);s6r=r(Q9t,"xlm-roberta"),Q9t.forEach(t),l6r=r(cSe," \u2014 "),SW=n(cSe,"A",{href:!0});var W9t=s(SW);i6r=r(W9t,"FlaxXLMRobertaForMaskedLM"),W9t.forEach(t),d6r=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),_e.forEach(t),c6r=i(ka),jFe=n(ka,"P",{});var H9t=s(jFe);f6r=r(H9t,"Examples:"),H9t.forEach(t),m6r=i(ka),m(l8.$$.fragment,ka),ka.forEach(t),ui.forEach(t),ZBe=i(c),df=n(c,"H2",{class:!0});var cIe=s(df);cE=n(cIe,"A",{id:!0,class:!0,href:!0});var U9t=s(cE);DFe=n(U9t,"SPAN",{});var J9t=s(DFe);m(i8.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),g6r=i(cIe),GFe=n(cIe,"SPAN",{});var Y9t=s(GFe);h6r=r(Y9t,"FlaxAutoModelForMaskedLM"),Y9t.forEach(t),cIe.forEach(t),ePe=i(c),$r=n(c,"DIV",{class:!0});var Fi=s($r);m(d8.$$.fragment,Fi),p6r=i(Fi),cf=n(Fi,"P",{});var jJ=s(cf);_6r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RW=n(jJ,"A",{href:!0});var K9t=s(RW);u6r=r(K9t,"from_pretrained()"),K9t.forEach(t),b6r=r(jJ," class method or the "),BW=n(jJ,"A",{href:!0});var Z9t=s(BW);F6r=r(Z9t,"from_config()"),Z9t.forEach(t),v6r=r(jJ,` class
method.`),jJ.forEach(t),T6r=i(Fi),c8=n(Fi,"P",{});var fIe=s(c8);M6r=r(fIe,"This class cannot be instantiated directly using "),OFe=n(fIe,"CODE",{});var eMt=s(OFe);E6r=r(eMt,"__init__()"),eMt.forEach(t),C6r=r(fIe," (throws an error)."),fIe.forEach(t),w6r=i(Fi),xt=n(Fi,"DIV",{class:!0});var vi=s(xt);m(f8.$$.fragment,vi),A6r=i(vi),VFe=n(vi,"P",{});var oMt=s(VFe);y6r=r(oMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oMt.forEach(t),L6r=i(vi),ff=n(vi,"P",{});var DJ=s(ff);x6r=r(DJ,`Note:
Loading a model from its configuration file does `),XFe=n(DJ,"STRONG",{});var rMt=s(XFe);k6r=r(rMt,"not"),rMt.forEach(t),S6r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(DJ,"A",{href:!0});var tMt=s(PW);R6r=r(tMt,"from_pretrained()"),tMt.forEach(t),B6r=r(DJ," to load the model weights."),DJ.forEach(t),P6r=i(vi),zFe=n(vi,"P",{});var aMt=s(zFe);$6r=r(aMt,"Examples:"),aMt.forEach(t),I6r=i(vi),m(m8.$$.fragment,vi),vi.forEach(t),q6r=i(Fi),ko=n(Fi,"DIV",{class:!0});var Sa=s(ko);m(g8.$$.fragment,Sa),N6r=i(Sa),QFe=n(Sa,"P",{});var nMt=s(QFe);j6r=r(nMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nMt.forEach(t),D6r=i(Sa),Rn=n(Sa,"P",{});var hC=s(Rn);G6r=r(hC,"The model class to instantiate is selected based on the "),WFe=n(hC,"CODE",{});var sMt=s(WFe);O6r=r(sMt,"model_type"),sMt.forEach(t),V6r=r(hC,` property of the config object (either
passed as an argument or loaded from `),HFe=n(hC,"CODE",{});var lMt=s(HFe);X6r=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),z6r=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(hC,"CODE",{});var iMt=s(UFe);Q6r=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),W6r=r(hC,":"),hC.forEach(t),H6r=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);fE=n(Ae,"LI",{});var fSe=s(fE);JFe=n(fSe,"STRONG",{});var dMt=s(JFe);U6r=r(dMt,"albert"),dMt.forEach(t),J6r=r(fSe," \u2014 "),$W=n(fSe,"A",{href:!0});var cMt=s($W);Y6r=r(cMt,"FlaxAlbertForMaskedLM"),cMt.forEach(t),K6r=r(fSe," (ALBERT model)"),fSe.forEach(t),Z6r=i(Ae),mE=n(Ae,"LI",{});var mSe=s(mE);YFe=n(mSe,"STRONG",{});var fMt=s(YFe);eAr=r(fMt,"bart"),fMt.forEach(t),oAr=r(mSe," \u2014 "),IW=n(mSe,"A",{href:!0});var mMt=s(IW);rAr=r(mMt,"FlaxBartForConditionalGeneration"),mMt.forEach(t),tAr=r(mSe," (BART model)"),mSe.forEach(t),aAr=i(Ae),gE=n(Ae,"LI",{});var gSe=s(gE);KFe=n(gSe,"STRONG",{});var gMt=s(KFe);nAr=r(gMt,"bert"),gMt.forEach(t),sAr=r(gSe," \u2014 "),qW=n(gSe,"A",{href:!0});var hMt=s(qW);lAr=r(hMt,"FlaxBertForMaskedLM"),hMt.forEach(t),iAr=r(gSe," (BERT model)"),gSe.forEach(t),dAr=i(Ae),hE=n(Ae,"LI",{});var hSe=s(hE);ZFe=n(hSe,"STRONG",{});var pMt=s(ZFe);cAr=r(pMt,"big_bird"),pMt.forEach(t),fAr=r(hSe," \u2014 "),NW=n(hSe,"A",{href:!0});var _Mt=s(NW);mAr=r(_Mt,"FlaxBigBirdForMaskedLM"),_Mt.forEach(t),gAr=r(hSe," (BigBird model)"),hSe.forEach(t),hAr=i(Ae),pE=n(Ae,"LI",{});var pSe=s(pE);eve=n(pSe,"STRONG",{});var uMt=s(eve);pAr=r(uMt,"distilbert"),uMt.forEach(t),_Ar=r(pSe," \u2014 "),jW=n(pSe,"A",{href:!0});var bMt=s(jW);uAr=r(bMt,"FlaxDistilBertForMaskedLM"),bMt.forEach(t),bAr=r(pSe," (DistilBERT model)"),pSe.forEach(t),FAr=i(Ae),_E=n(Ae,"LI",{});var _Se=s(_E);ove=n(_Se,"STRONG",{});var FMt=s(ove);vAr=r(FMt,"electra"),FMt.forEach(t),TAr=r(_Se," \u2014 "),DW=n(_Se,"A",{href:!0});var vMt=s(DW);MAr=r(vMt,"FlaxElectraForMaskedLM"),vMt.forEach(t),EAr=r(_Se," (ELECTRA model)"),_Se.forEach(t),CAr=i(Ae),uE=n(Ae,"LI",{});var uSe=s(uE);rve=n(uSe,"STRONG",{});var TMt=s(rve);wAr=r(TMt,"mbart"),TMt.forEach(t),AAr=r(uSe," \u2014 "),GW=n(uSe,"A",{href:!0});var MMt=s(GW);yAr=r(MMt,"FlaxMBartForConditionalGeneration"),MMt.forEach(t),LAr=r(uSe," (mBART model)"),uSe.forEach(t),xAr=i(Ae),bE=n(Ae,"LI",{});var bSe=s(bE);tve=n(bSe,"STRONG",{});var EMt=s(tve);kAr=r(EMt,"roberta"),EMt.forEach(t),SAr=r(bSe," \u2014 "),OW=n(bSe,"A",{href:!0});var CMt=s(OW);RAr=r(CMt,"FlaxRobertaForMaskedLM"),CMt.forEach(t),BAr=r(bSe," (RoBERTa model)"),bSe.forEach(t),PAr=i(Ae),FE=n(Ae,"LI",{});var FSe=s(FE);ave=n(FSe,"STRONG",{});var wMt=s(ave);$Ar=r(wMt,"roformer"),wMt.forEach(t),IAr=r(FSe," \u2014 "),VW=n(FSe,"A",{href:!0});var AMt=s(VW);qAr=r(AMt,"FlaxRoFormerForMaskedLM"),AMt.forEach(t),NAr=r(FSe," (RoFormer model)"),FSe.forEach(t),jAr=i(Ae),vE=n(Ae,"LI",{});var vSe=s(vE);nve=n(vSe,"STRONG",{});var yMt=s(nve);DAr=r(yMt,"xlm-roberta"),yMt.forEach(t),GAr=r(vSe," \u2014 "),XW=n(vSe,"A",{href:!0});var LMt=s(XW);OAr=r(LMt,"FlaxXLMRobertaForMaskedLM"),LMt.forEach(t),VAr=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),Ae.forEach(t),XAr=i(Sa),sve=n(Sa,"P",{});var xMt=s(sve);zAr=r(xMt,"Examples:"),xMt.forEach(t),QAr=i(Sa),m(h8.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),oPe=i(c),mf=n(c,"H2",{class:!0});var mIe=s(mf);TE=n(mIe,"A",{id:!0,class:!0,href:!0});var kMt=s(TE);lve=n(kMt,"SPAN",{});var SMt=s(lve);m(p8.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),WAr=i(mIe),ive=n(mIe,"SPAN",{});var RMt=s(ive);HAr=r(RMt,"FlaxAutoModelForSeq2SeqLM"),RMt.forEach(t),mIe.forEach(t),rPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(_8.$$.fragment,Ti),UAr=i(Ti),gf=n(Ti,"P",{});var GJ=s(gf);JAr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zW=n(GJ,"A",{href:!0});var BMt=s(zW);YAr=r(BMt,"from_pretrained()"),BMt.forEach(t),KAr=r(GJ," class method or the "),QW=n(GJ,"A",{href:!0});var PMt=s(QW);ZAr=r(PMt,"from_config()"),PMt.forEach(t),e0r=r(GJ,` class
method.`),GJ.forEach(t),o0r=i(Ti),u8=n(Ti,"P",{});var gIe=s(u8);r0r=r(gIe,"This class cannot be instantiated directly using "),dve=n(gIe,"CODE",{});var $Mt=s(dve);t0r=r($Mt,"__init__()"),$Mt.forEach(t),a0r=r(gIe," (throws an error)."),gIe.forEach(t),n0r=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(b8.$$.fragment,Mi),s0r=i(Mi),cve=n(Mi,"P",{});var IMt=s(cve);l0r=r(IMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IMt.forEach(t),i0r=i(Mi),hf=n(Mi,"P",{});var OJ=s(hf);d0r=r(OJ,`Note:
Loading a model from its configuration file does `),fve=n(OJ,"STRONG",{});var qMt=s(fve);c0r=r(qMt,"not"),qMt.forEach(t),f0r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(OJ,"A",{href:!0});var NMt=s(WW);m0r=r(NMt,"from_pretrained()"),NMt.forEach(t),g0r=r(OJ," to load the model weights."),OJ.forEach(t),h0r=i(Mi),mve=n(Mi,"P",{});var jMt=s(mve);p0r=r(jMt,"Examples:"),jMt.forEach(t),_0r=i(Mi),m(F8.$$.fragment,Mi),Mi.forEach(t),u0r=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(v8.$$.fragment,Ra),b0r=i(Ra),gve=n(Ra,"P",{});var DMt=s(gve);F0r=r(DMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DMt.forEach(t),v0r=i(Ra),Bn=n(Ra,"P",{});var pC=s(Bn);T0r=r(pC,"The model class to instantiate is selected based on the "),hve=n(pC,"CODE",{});var GMt=s(hve);M0r=r(GMt,"model_type"),GMt.forEach(t),E0r=r(pC,` property of the config object (either
passed as an argument or loaded from `),pve=n(pC,"CODE",{});var OMt=s(pve);C0r=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),w0r=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(pC,"CODE",{});var VMt=s(_ve);A0r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),y0r=r(pC,":"),pC.forEach(t),L0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);ME=n(so,"LI",{});var TSe=s(ME);uve=n(TSe,"STRONG",{});var XMt=s(uve);x0r=r(XMt,"bart"),XMt.forEach(t),k0r=r(TSe," \u2014 "),HW=n(TSe,"A",{href:!0});var zMt=s(HW);S0r=r(zMt,"FlaxBartForConditionalGeneration"),zMt.forEach(t),R0r=r(TSe," (BART model)"),TSe.forEach(t),B0r=i(so),EE=n(so,"LI",{});var MSe=s(EE);bve=n(MSe,"STRONG",{});var QMt=s(bve);P0r=r(QMt,"blenderbot"),QMt.forEach(t),$0r=r(MSe," \u2014 "),UW=n(MSe,"A",{href:!0});var WMt=s(UW);I0r=r(WMt,"FlaxBlenderbotForConditionalGeneration"),WMt.forEach(t),q0r=r(MSe," (Blenderbot model)"),MSe.forEach(t),N0r=i(so),CE=n(so,"LI",{});var ESe=s(CE);Fve=n(ESe,"STRONG",{});var HMt=s(Fve);j0r=r(HMt,"blenderbot-small"),HMt.forEach(t),D0r=r(ESe," \u2014 "),JW=n(ESe,"A",{href:!0});var UMt=s(JW);G0r=r(UMt,"FlaxBlenderbotSmallForConditionalGeneration"),UMt.forEach(t),O0r=r(ESe," (BlenderbotSmall model)"),ESe.forEach(t),V0r=i(so),wE=n(so,"LI",{});var CSe=s(wE);vve=n(CSe,"STRONG",{});var JMt=s(vve);X0r=r(JMt,"encoder-decoder"),JMt.forEach(t),z0r=r(CSe," \u2014 "),YW=n(CSe,"A",{href:!0});var YMt=s(YW);Q0r=r(YMt,"FlaxEncoderDecoderModel"),YMt.forEach(t),W0r=r(CSe," (Encoder decoder model)"),CSe.forEach(t),H0r=i(so),AE=n(so,"LI",{});var wSe=s(AE);Tve=n(wSe,"STRONG",{});var KMt=s(Tve);U0r=r(KMt,"marian"),KMt.forEach(t),J0r=r(wSe," \u2014 "),KW=n(wSe,"A",{href:!0});var ZMt=s(KW);Y0r=r(ZMt,"FlaxMarianMTModel"),ZMt.forEach(t),K0r=r(wSe," (Marian model)"),wSe.forEach(t),Z0r=i(so),yE=n(so,"LI",{});var ASe=s(yE);Mve=n(ASe,"STRONG",{});var e4t=s(Mve);eyr=r(e4t,"mbart"),e4t.forEach(t),oyr=r(ASe," \u2014 "),ZW=n(ASe,"A",{href:!0});var o4t=s(ZW);ryr=r(o4t,"FlaxMBartForConditionalGeneration"),o4t.forEach(t),tyr=r(ASe," (mBART model)"),ASe.forEach(t),ayr=i(so),LE=n(so,"LI",{});var ySe=s(LE);Eve=n(ySe,"STRONG",{});var r4t=s(Eve);nyr=r(r4t,"mt5"),r4t.forEach(t),syr=r(ySe," \u2014 "),eH=n(ySe,"A",{href:!0});var t4t=s(eH);lyr=r(t4t,"FlaxMT5ForConditionalGeneration"),t4t.forEach(t),iyr=r(ySe," (mT5 model)"),ySe.forEach(t),dyr=i(so),xE=n(so,"LI",{});var LSe=s(xE);Cve=n(LSe,"STRONG",{});var a4t=s(Cve);cyr=r(a4t,"pegasus"),a4t.forEach(t),fyr=r(LSe," \u2014 "),oH=n(LSe,"A",{href:!0});var n4t=s(oH);myr=r(n4t,"FlaxPegasusForConditionalGeneration"),n4t.forEach(t),gyr=r(LSe," (Pegasus model)"),LSe.forEach(t),hyr=i(so),kE=n(so,"LI",{});var xSe=s(kE);wve=n(xSe,"STRONG",{});var s4t=s(wve);pyr=r(s4t,"t5"),s4t.forEach(t),_yr=r(xSe," \u2014 "),rH=n(xSe,"A",{href:!0});var l4t=s(rH);uyr=r(l4t,"FlaxT5ForConditionalGeneration"),l4t.forEach(t),byr=r(xSe," (T5 model)"),xSe.forEach(t),so.forEach(t),Fyr=i(Ra),Ave=n(Ra,"P",{});var i4t=s(Ave);vyr=r(i4t,"Examples:"),i4t.forEach(t),Tyr=i(Ra),m(T8.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),tPe=i(c),pf=n(c,"H2",{class:!0});var hIe=s(pf);SE=n(hIe,"A",{id:!0,class:!0,href:!0});var d4t=s(SE);yve=n(d4t,"SPAN",{});var c4t=s(yve);m(M8.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),Myr=i(hIe),Lve=n(hIe,"SPAN",{});var f4t=s(Lve);Eyr=r(f4t,"FlaxAutoModelForSequenceClassification"),f4t.forEach(t),hIe.forEach(t),aPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(E8.$$.fragment,Ei),Cyr=i(Ei),_f=n(Ei,"P",{});var VJ=s(_f);wyr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tH=n(VJ,"A",{href:!0});var m4t=s(tH);Ayr=r(m4t,"from_pretrained()"),m4t.forEach(t),yyr=r(VJ," class method or the "),aH=n(VJ,"A",{href:!0});var g4t=s(aH);Lyr=r(g4t,"from_config()"),g4t.forEach(t),xyr=r(VJ,` class
method.`),VJ.forEach(t),kyr=i(Ei),C8=n(Ei,"P",{});var pIe=s(C8);Syr=r(pIe,"This class cannot be instantiated directly using "),xve=n(pIe,"CODE",{});var h4t=s(xve);Ryr=r(h4t,"__init__()"),h4t.forEach(t),Byr=r(pIe," (throws an error)."),pIe.forEach(t),Pyr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(w8.$$.fragment,Ci),$yr=i(Ci),kve=n(Ci,"P",{});var p4t=s(kve);Iyr=r(p4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p4t.forEach(t),qyr=i(Ci),uf=n(Ci,"P",{});var XJ=s(uf);Nyr=r(XJ,`Note:
Loading a model from its configuration file does `),Sve=n(XJ,"STRONG",{});var _4t=s(Sve);jyr=r(_4t,"not"),_4t.forEach(t),Dyr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(XJ,"A",{href:!0});var u4t=s(nH);Gyr=r(u4t,"from_pretrained()"),u4t.forEach(t),Oyr=r(XJ," to load the model weights."),XJ.forEach(t),Vyr=i(Ci),Rve=n(Ci,"P",{});var b4t=s(Rve);Xyr=r(b4t,"Examples:"),b4t.forEach(t),zyr=i(Ci),m(A8.$$.fragment,Ci),Ci.forEach(t),Qyr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m(y8.$$.fragment,Ba),Wyr=i(Ba),Bve=n(Ba,"P",{});var F4t=s(Bve);Hyr=r(F4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F4t.forEach(t),Uyr=i(Ba),Pn=n(Ba,"P",{});var _C=s(Pn);Jyr=r(_C,"The model class to instantiate is selected based on the "),Pve=n(_C,"CODE",{});var v4t=s(Pve);Yyr=r(v4t,"model_type"),v4t.forEach(t),Kyr=r(_C,` property of the config object (either
passed as an argument or loaded from `),$ve=n(_C,"CODE",{});var T4t=s($ve);Zyr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),e8r=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(_C,"CODE",{});var M4t=s(Ive);o8r=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),r8r=r(_C,":"),_C.forEach(t),t8r=i(Ba),ve=n(Ba,"UL",{});var ye=s(ve);RE=n(ye,"LI",{});var kSe=s(RE);qve=n(kSe,"STRONG",{});var E4t=s(qve);a8r=r(E4t,"albert"),E4t.forEach(t),n8r=r(kSe," \u2014 "),sH=n(kSe,"A",{href:!0});var C4t=s(sH);s8r=r(C4t,"FlaxAlbertForSequenceClassification"),C4t.forEach(t),l8r=r(kSe," (ALBERT model)"),kSe.forEach(t),i8r=i(ye),BE=n(ye,"LI",{});var SSe=s(BE);Nve=n(SSe,"STRONG",{});var w4t=s(Nve);d8r=r(w4t,"bart"),w4t.forEach(t),c8r=r(SSe," \u2014 "),lH=n(SSe,"A",{href:!0});var A4t=s(lH);f8r=r(A4t,"FlaxBartForSequenceClassification"),A4t.forEach(t),m8r=r(SSe," (BART model)"),SSe.forEach(t),g8r=i(ye),PE=n(ye,"LI",{});var RSe=s(PE);jve=n(RSe,"STRONG",{});var y4t=s(jve);h8r=r(y4t,"bert"),y4t.forEach(t),p8r=r(RSe," \u2014 "),iH=n(RSe,"A",{href:!0});var L4t=s(iH);_8r=r(L4t,"FlaxBertForSequenceClassification"),L4t.forEach(t),u8r=r(RSe," (BERT model)"),RSe.forEach(t),b8r=i(ye),$E=n(ye,"LI",{});var BSe=s($E);Dve=n(BSe,"STRONG",{});var x4t=s(Dve);F8r=r(x4t,"big_bird"),x4t.forEach(t),v8r=r(BSe," \u2014 "),dH=n(BSe,"A",{href:!0});var k4t=s(dH);T8r=r(k4t,"FlaxBigBirdForSequenceClassification"),k4t.forEach(t),M8r=r(BSe," (BigBird model)"),BSe.forEach(t),E8r=i(ye),IE=n(ye,"LI",{});var PSe=s(IE);Gve=n(PSe,"STRONG",{});var S4t=s(Gve);C8r=r(S4t,"distilbert"),S4t.forEach(t),w8r=r(PSe," \u2014 "),cH=n(PSe,"A",{href:!0});var R4t=s(cH);A8r=r(R4t,"FlaxDistilBertForSequenceClassification"),R4t.forEach(t),y8r=r(PSe," (DistilBERT model)"),PSe.forEach(t),L8r=i(ye),qE=n(ye,"LI",{});var $Se=s(qE);Ove=n($Se,"STRONG",{});var B4t=s(Ove);x8r=r(B4t,"electra"),B4t.forEach(t),k8r=r($Se," \u2014 "),fH=n($Se,"A",{href:!0});var P4t=s(fH);S8r=r(P4t,"FlaxElectraForSequenceClassification"),P4t.forEach(t),R8r=r($Se," (ELECTRA model)"),$Se.forEach(t),B8r=i(ye),NE=n(ye,"LI",{});var ISe=s(NE);Vve=n(ISe,"STRONG",{});var $4t=s(Vve);P8r=r($4t,"mbart"),$4t.forEach(t),$8r=r(ISe," \u2014 "),mH=n(ISe,"A",{href:!0});var I4t=s(mH);I8r=r(I4t,"FlaxMBartForSequenceClassification"),I4t.forEach(t),q8r=r(ISe," (mBART model)"),ISe.forEach(t),N8r=i(ye),jE=n(ye,"LI",{});var qSe=s(jE);Xve=n(qSe,"STRONG",{});var q4t=s(Xve);j8r=r(q4t,"roberta"),q4t.forEach(t),D8r=r(qSe," \u2014 "),gH=n(qSe,"A",{href:!0});var N4t=s(gH);G8r=r(N4t,"FlaxRobertaForSequenceClassification"),N4t.forEach(t),O8r=r(qSe," (RoBERTa model)"),qSe.forEach(t),V8r=i(ye),DE=n(ye,"LI",{});var NSe=s(DE);zve=n(NSe,"STRONG",{});var j4t=s(zve);X8r=r(j4t,"roformer"),j4t.forEach(t),z8r=r(NSe," \u2014 "),hH=n(NSe,"A",{href:!0});var D4t=s(hH);Q8r=r(D4t,"FlaxRoFormerForSequenceClassification"),D4t.forEach(t),W8r=r(NSe," (RoFormer model)"),NSe.forEach(t),H8r=i(ye),GE=n(ye,"LI",{});var jSe=s(GE);Qve=n(jSe,"STRONG",{});var G4t=s(Qve);U8r=r(G4t,"xlm-roberta"),G4t.forEach(t),J8r=r(jSe," \u2014 "),pH=n(jSe,"A",{href:!0});var O4t=s(pH);Y8r=r(O4t,"FlaxXLMRobertaForSequenceClassification"),O4t.forEach(t),K8r=r(jSe," (XLM-RoBERTa model)"),jSe.forEach(t),ye.forEach(t),Z8r=i(Ba),Wve=n(Ba,"P",{});var V4t=s(Wve);eLr=r(V4t,"Examples:"),V4t.forEach(t),oLr=i(Ba),m(L8.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),nPe=i(c),bf=n(c,"H2",{class:!0});var _Ie=s(bf);OE=n(_Ie,"A",{id:!0,class:!0,href:!0});var X4t=s(OE);Hve=n(X4t,"SPAN",{});var z4t=s(Hve);m(x8.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),rLr=i(_Ie),Uve=n(_Ie,"SPAN",{});var Q4t=s(Uve);tLr=r(Q4t,"FlaxAutoModelForQuestionAnswering"),Q4t.forEach(t),_Ie.forEach(t),sPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(k8.$$.fragment,wi),aLr=i(wi),Ff=n(wi,"P",{});var zJ=s(Ff);nLr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_H=n(zJ,"A",{href:!0});var W4t=s(_H);sLr=r(W4t,"from_pretrained()"),W4t.forEach(t),lLr=r(zJ," class method or the "),uH=n(zJ,"A",{href:!0});var H4t=s(uH);iLr=r(H4t,"from_config()"),H4t.forEach(t),dLr=r(zJ,` class
method.`),zJ.forEach(t),cLr=i(wi),S8=n(wi,"P",{});var uIe=s(S8);fLr=r(uIe,"This class cannot be instantiated directly using "),Jve=n(uIe,"CODE",{});var U4t=s(Jve);mLr=r(U4t,"__init__()"),U4t.forEach(t),gLr=r(uIe," (throws an error)."),uIe.forEach(t),hLr=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(R8.$$.fragment,Ai),pLr=i(Ai),Yve=n(Ai,"P",{});var J4t=s(Yve);_Lr=r(J4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J4t.forEach(t),uLr=i(Ai),vf=n(Ai,"P",{});var QJ=s(vf);bLr=r(QJ,`Note:
Loading a model from its configuration file does `),Kve=n(QJ,"STRONG",{});var Y4t=s(Kve);FLr=r(Y4t,"not"),Y4t.forEach(t),vLr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(QJ,"A",{href:!0});var K4t=s(bH);TLr=r(K4t,"from_pretrained()"),K4t.forEach(t),MLr=r(QJ," to load the model weights."),QJ.forEach(t),ELr=i(Ai),Zve=n(Ai,"P",{});var Z4t=s(Zve);CLr=r(Z4t,"Examples:"),Z4t.forEach(t),wLr=i(Ai),m(B8.$$.fragment,Ai),Ai.forEach(t),ALr=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m(P8.$$.fragment,Pa),yLr=i(Pa),eTe=n(Pa,"P",{});var eEt=s(eTe);LLr=r(eEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eEt.forEach(t),xLr=i(Pa),$n=n(Pa,"P",{});var uC=s($n);kLr=r(uC,"The model class to instantiate is selected based on the "),oTe=n(uC,"CODE",{});var oEt=s(oTe);SLr=r(oEt,"model_type"),oEt.forEach(t),RLr=r(uC,` property of the config object (either
passed as an argument or loaded from `),rTe=n(uC,"CODE",{});var rEt=s(rTe);BLr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),PLr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(uC,"CODE",{});var tEt=s(tTe);$Lr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),ILr=r(uC,":"),uC.forEach(t),qLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);VE=n(Le,"LI",{});var DSe=s(VE);aTe=n(DSe,"STRONG",{});var aEt=s(aTe);NLr=r(aEt,"albert"),aEt.forEach(t),jLr=r(DSe," \u2014 "),FH=n(DSe,"A",{href:!0});var nEt=s(FH);DLr=r(nEt,"FlaxAlbertForQuestionAnswering"),nEt.forEach(t),GLr=r(DSe," (ALBERT model)"),DSe.forEach(t),OLr=i(Le),XE=n(Le,"LI",{});var GSe=s(XE);nTe=n(GSe,"STRONG",{});var sEt=s(nTe);VLr=r(sEt,"bart"),sEt.forEach(t),XLr=r(GSe," \u2014 "),vH=n(GSe,"A",{href:!0});var lEt=s(vH);zLr=r(lEt,"FlaxBartForQuestionAnswering"),lEt.forEach(t),QLr=r(GSe," (BART model)"),GSe.forEach(t),WLr=i(Le),zE=n(Le,"LI",{});var OSe=s(zE);sTe=n(OSe,"STRONG",{});var iEt=s(sTe);HLr=r(iEt,"bert"),iEt.forEach(t),ULr=r(OSe," \u2014 "),TH=n(OSe,"A",{href:!0});var dEt=s(TH);JLr=r(dEt,"FlaxBertForQuestionAnswering"),dEt.forEach(t),YLr=r(OSe," (BERT model)"),OSe.forEach(t),KLr=i(Le),QE=n(Le,"LI",{});var VSe=s(QE);lTe=n(VSe,"STRONG",{});var cEt=s(lTe);ZLr=r(cEt,"big_bird"),cEt.forEach(t),e7r=r(VSe," \u2014 "),MH=n(VSe,"A",{href:!0});var fEt=s(MH);o7r=r(fEt,"FlaxBigBirdForQuestionAnswering"),fEt.forEach(t),r7r=r(VSe," (BigBird model)"),VSe.forEach(t),t7r=i(Le),WE=n(Le,"LI",{});var XSe=s(WE);iTe=n(XSe,"STRONG",{});var mEt=s(iTe);a7r=r(mEt,"distilbert"),mEt.forEach(t),n7r=r(XSe," \u2014 "),EH=n(XSe,"A",{href:!0});var gEt=s(EH);s7r=r(gEt,"FlaxDistilBertForQuestionAnswering"),gEt.forEach(t),l7r=r(XSe," (DistilBERT model)"),XSe.forEach(t),i7r=i(Le),HE=n(Le,"LI",{});var zSe=s(HE);dTe=n(zSe,"STRONG",{});var hEt=s(dTe);d7r=r(hEt,"electra"),hEt.forEach(t),c7r=r(zSe," \u2014 "),CH=n(zSe,"A",{href:!0});var pEt=s(CH);f7r=r(pEt,"FlaxElectraForQuestionAnswering"),pEt.forEach(t),m7r=r(zSe," (ELECTRA model)"),zSe.forEach(t),g7r=i(Le),UE=n(Le,"LI",{});var QSe=s(UE);cTe=n(QSe,"STRONG",{});var _Et=s(cTe);h7r=r(_Et,"mbart"),_Et.forEach(t),p7r=r(QSe," \u2014 "),wH=n(QSe,"A",{href:!0});var uEt=s(wH);_7r=r(uEt,"FlaxMBartForQuestionAnswering"),uEt.forEach(t),u7r=r(QSe," (mBART model)"),QSe.forEach(t),b7r=i(Le),JE=n(Le,"LI",{});var WSe=s(JE);fTe=n(WSe,"STRONG",{});var bEt=s(fTe);F7r=r(bEt,"roberta"),bEt.forEach(t),v7r=r(WSe," \u2014 "),AH=n(WSe,"A",{href:!0});var FEt=s(AH);T7r=r(FEt,"FlaxRobertaForQuestionAnswering"),FEt.forEach(t),M7r=r(WSe," (RoBERTa model)"),WSe.forEach(t),E7r=i(Le),YE=n(Le,"LI",{});var HSe=s(YE);mTe=n(HSe,"STRONG",{});var vEt=s(mTe);C7r=r(vEt,"roformer"),vEt.forEach(t),w7r=r(HSe," \u2014 "),yH=n(HSe,"A",{href:!0});var TEt=s(yH);A7r=r(TEt,"FlaxRoFormerForQuestionAnswering"),TEt.forEach(t),y7r=r(HSe," (RoFormer model)"),HSe.forEach(t),L7r=i(Le),KE=n(Le,"LI",{});var USe=s(KE);gTe=n(USe,"STRONG",{});var MEt=s(gTe);x7r=r(MEt,"xlm-roberta"),MEt.forEach(t),k7r=r(USe," \u2014 "),LH=n(USe,"A",{href:!0});var EEt=s(LH);S7r=r(EEt,"FlaxXLMRobertaForQuestionAnswering"),EEt.forEach(t),R7r=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),Le.forEach(t),B7r=i(Pa),hTe=n(Pa,"P",{});var CEt=s(hTe);P7r=r(CEt,"Examples:"),CEt.forEach(t),$7r=i(Pa),m($8.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),lPe=i(c),Tf=n(c,"H2",{class:!0});var bIe=s(Tf);ZE=n(bIe,"A",{id:!0,class:!0,href:!0});var wEt=s(ZE);pTe=n(wEt,"SPAN",{});var AEt=s(pTe);m(I8.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),I7r=i(bIe),_Te=n(bIe,"SPAN",{});var yEt=s(_Te);q7r=r(yEt,"FlaxAutoModelForTokenClassification"),yEt.forEach(t),bIe.forEach(t),iPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(q8.$$.fragment,yi),N7r=i(yi),Mf=n(yi,"P",{});var WJ=s(Mf);j7r=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xH=n(WJ,"A",{href:!0});var LEt=s(xH);D7r=r(LEt,"from_pretrained()"),LEt.forEach(t),G7r=r(WJ," class method or the "),kH=n(WJ,"A",{href:!0});var xEt=s(kH);O7r=r(xEt,"from_config()"),xEt.forEach(t),V7r=r(WJ,` class
method.`),WJ.forEach(t),X7r=i(yi),N8=n(yi,"P",{});var FIe=s(N8);z7r=r(FIe,"This class cannot be instantiated directly using "),uTe=n(FIe,"CODE",{});var kEt=s(uTe);Q7r=r(kEt,"__init__()"),kEt.forEach(t),W7r=r(FIe," (throws an error)."),FIe.forEach(t),H7r=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(j8.$$.fragment,Li),U7r=i(Li),bTe=n(Li,"P",{});var SEt=s(bTe);J7r=r(SEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SEt.forEach(t),Y7r=i(Li),Ef=n(Li,"P",{});var HJ=s(Ef);K7r=r(HJ,`Note:
Loading a model from its configuration file does `),FTe=n(HJ,"STRONG",{});var REt=s(FTe);Z7r=r(REt,"not"),REt.forEach(t),exr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(HJ,"A",{href:!0});var BEt=s(SH);oxr=r(BEt,"from_pretrained()"),BEt.forEach(t),rxr=r(HJ," to load the model weights."),HJ.forEach(t),txr=i(Li),vTe=n(Li,"P",{});var PEt=s(vTe);axr=r(PEt,"Examples:"),PEt.forEach(t),nxr=i(Li),m(D8.$$.fragment,Li),Li.forEach(t),sxr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(G8.$$.fragment,$a),lxr=i($a),TTe=n($a,"P",{});var $Et=s(TTe);ixr=r($Et,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Et.forEach(t),dxr=i($a),In=n($a,"P",{});var bC=s(In);cxr=r(bC,"The model class to instantiate is selected based on the "),MTe=n(bC,"CODE",{});var IEt=s(MTe);fxr=r(IEt,"model_type"),IEt.forEach(t),mxr=r(bC,` property of the config object (either
passed as an argument or loaded from `),ETe=n(bC,"CODE",{});var qEt=s(ETe);gxr=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),hxr=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(bC,"CODE",{});var NEt=s(CTe);pxr=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),_xr=r(bC,":"),bC.forEach(t),uxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);e3=n(Oo,"LI",{});var JSe=s(e3);wTe=n(JSe,"STRONG",{});var jEt=s(wTe);bxr=r(jEt,"albert"),jEt.forEach(t),Fxr=r(JSe," \u2014 "),RH=n(JSe,"A",{href:!0});var DEt=s(RH);vxr=r(DEt,"FlaxAlbertForTokenClassification"),DEt.forEach(t),Txr=r(JSe," (ALBERT model)"),JSe.forEach(t),Mxr=i(Oo),o3=n(Oo,"LI",{});var YSe=s(o3);ATe=n(YSe,"STRONG",{});var GEt=s(ATe);Exr=r(GEt,"bert"),GEt.forEach(t),Cxr=r(YSe," \u2014 "),BH=n(YSe,"A",{href:!0});var OEt=s(BH);wxr=r(OEt,"FlaxBertForTokenClassification"),OEt.forEach(t),Axr=r(YSe," (BERT model)"),YSe.forEach(t),yxr=i(Oo),r3=n(Oo,"LI",{});var KSe=s(r3);yTe=n(KSe,"STRONG",{});var VEt=s(yTe);Lxr=r(VEt,"big_bird"),VEt.forEach(t),xxr=r(KSe," \u2014 "),PH=n(KSe,"A",{href:!0});var XEt=s(PH);kxr=r(XEt,"FlaxBigBirdForTokenClassification"),XEt.forEach(t),Sxr=r(KSe," (BigBird model)"),KSe.forEach(t),Rxr=i(Oo),t3=n(Oo,"LI",{});var ZSe=s(t3);LTe=n(ZSe,"STRONG",{});var zEt=s(LTe);Bxr=r(zEt,"distilbert"),zEt.forEach(t),Pxr=r(ZSe," \u2014 "),$H=n(ZSe,"A",{href:!0});var QEt=s($H);$xr=r(QEt,"FlaxDistilBertForTokenClassification"),QEt.forEach(t),Ixr=r(ZSe," (DistilBERT model)"),ZSe.forEach(t),qxr=i(Oo),a3=n(Oo,"LI",{});var eRe=s(a3);xTe=n(eRe,"STRONG",{});var WEt=s(xTe);Nxr=r(WEt,"electra"),WEt.forEach(t),jxr=r(eRe," \u2014 "),IH=n(eRe,"A",{href:!0});var HEt=s(IH);Dxr=r(HEt,"FlaxElectraForTokenClassification"),HEt.forEach(t),Gxr=r(eRe," (ELECTRA model)"),eRe.forEach(t),Oxr=i(Oo),n3=n(Oo,"LI",{});var oRe=s(n3);kTe=n(oRe,"STRONG",{});var UEt=s(kTe);Vxr=r(UEt,"roberta"),UEt.forEach(t),Xxr=r(oRe," \u2014 "),qH=n(oRe,"A",{href:!0});var JEt=s(qH);zxr=r(JEt,"FlaxRobertaForTokenClassification"),JEt.forEach(t),Qxr=r(oRe," (RoBERTa model)"),oRe.forEach(t),Wxr=i(Oo),s3=n(Oo,"LI",{});var rRe=s(s3);STe=n(rRe,"STRONG",{});var YEt=s(STe);Hxr=r(YEt,"roformer"),YEt.forEach(t),Uxr=r(rRe," \u2014 "),NH=n(rRe,"A",{href:!0});var KEt=s(NH);Jxr=r(KEt,"FlaxRoFormerForTokenClassification"),KEt.forEach(t),Yxr=r(rRe," (RoFormer model)"),rRe.forEach(t),Kxr=i(Oo),l3=n(Oo,"LI",{});var tRe=s(l3);RTe=n(tRe,"STRONG",{});var ZEt=s(RTe);Zxr=r(ZEt,"xlm-roberta"),ZEt.forEach(t),ekr=r(tRe," \u2014 "),jH=n(tRe,"A",{href:!0});var e3t=s(jH);okr=r(e3t,"FlaxXLMRobertaForTokenClassification"),e3t.forEach(t),rkr=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),Oo.forEach(t),tkr=i($a),BTe=n($a,"P",{});var o3t=s(BTe);akr=r(o3t,"Examples:"),o3t.forEach(t),nkr=i($a),m(O8.$$.fragment,$a),$a.forEach(t),yi.forEach(t),dPe=i(c),Cf=n(c,"H2",{class:!0});var vIe=s(Cf);i3=n(vIe,"A",{id:!0,class:!0,href:!0});var r3t=s(i3);PTe=n(r3t,"SPAN",{});var t3t=s(PTe);m(V8.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),skr=i(vIe),$Te=n(vIe,"SPAN",{});var a3t=s($Te);lkr=r(a3t,"FlaxAutoModelForMultipleChoice"),a3t.forEach(t),vIe.forEach(t),cPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(X8.$$.fragment,xi),ikr=i(xi),wf=n(xi,"P",{});var UJ=s(wf);dkr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DH=n(UJ,"A",{href:!0});var n3t=s(DH);ckr=r(n3t,"from_pretrained()"),n3t.forEach(t),fkr=r(UJ," class method or the "),GH=n(UJ,"A",{href:!0});var s3t=s(GH);mkr=r(s3t,"from_config()"),s3t.forEach(t),gkr=r(UJ,` class
method.`),UJ.forEach(t),hkr=i(xi),z8=n(xi,"P",{});var TIe=s(z8);pkr=r(TIe,"This class cannot be instantiated directly using "),ITe=n(TIe,"CODE",{});var l3t=s(ITe);_kr=r(l3t,"__init__()"),l3t.forEach(t),ukr=r(TIe," (throws an error)."),TIe.forEach(t),bkr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(Q8.$$.fragment,ki),Fkr=i(ki),qTe=n(ki,"P",{});var i3t=s(qTe);vkr=r(i3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),i3t.forEach(t),Tkr=i(ki),Af=n(ki,"P",{});var JJ=s(Af);Mkr=r(JJ,`Note:
Loading a model from its configuration file does `),NTe=n(JJ,"STRONG",{});var d3t=s(NTe);Ekr=r(d3t,"not"),d3t.forEach(t),Ckr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(JJ,"A",{href:!0});var c3t=s(OH);wkr=r(c3t,"from_pretrained()"),c3t.forEach(t),Akr=r(JJ," to load the model weights."),JJ.forEach(t),ykr=i(ki),jTe=n(ki,"P",{});var f3t=s(jTe);Lkr=r(f3t,"Examples:"),f3t.forEach(t),xkr=i(ki),m(W8.$$.fragment,ki),ki.forEach(t),kkr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(H8.$$.fragment,Ia),Skr=i(Ia),DTe=n(Ia,"P",{});var m3t=s(DTe);Rkr=r(m3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),m3t.forEach(t),Bkr=i(Ia),qn=n(Ia,"P",{});var FC=s(qn);Pkr=r(FC,"The model class to instantiate is selected based on the "),GTe=n(FC,"CODE",{});var g3t=s(GTe);$kr=r(g3t,"model_type"),g3t.forEach(t),Ikr=r(FC,` property of the config object (either
passed as an argument or loaded from `),OTe=n(FC,"CODE",{});var h3t=s(OTe);qkr=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),Nkr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(FC,"CODE",{});var p3t=s(VTe);jkr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),Dkr=r(FC,":"),FC.forEach(t),Gkr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);d3=n(Vo,"LI",{});var aRe=s(d3);XTe=n(aRe,"STRONG",{});var _3t=s(XTe);Okr=r(_3t,"albert"),_3t.forEach(t),Vkr=r(aRe," \u2014 "),VH=n(aRe,"A",{href:!0});var u3t=s(VH);Xkr=r(u3t,"FlaxAlbertForMultipleChoice"),u3t.forEach(t),zkr=r(aRe," (ALBERT model)"),aRe.forEach(t),Qkr=i(Vo),c3=n(Vo,"LI",{});var nRe=s(c3);zTe=n(nRe,"STRONG",{});var b3t=s(zTe);Wkr=r(b3t,"bert"),b3t.forEach(t),Hkr=r(nRe," \u2014 "),XH=n(nRe,"A",{href:!0});var F3t=s(XH);Ukr=r(F3t,"FlaxBertForMultipleChoice"),F3t.forEach(t),Jkr=r(nRe," (BERT model)"),nRe.forEach(t),Ykr=i(Vo),f3=n(Vo,"LI",{});var sRe=s(f3);QTe=n(sRe,"STRONG",{});var v3t=s(QTe);Kkr=r(v3t,"big_bird"),v3t.forEach(t),Zkr=r(sRe," \u2014 "),zH=n(sRe,"A",{href:!0});var T3t=s(zH);eSr=r(T3t,"FlaxBigBirdForMultipleChoice"),T3t.forEach(t),oSr=r(sRe," (BigBird model)"),sRe.forEach(t),rSr=i(Vo),m3=n(Vo,"LI",{});var lRe=s(m3);WTe=n(lRe,"STRONG",{});var M3t=s(WTe);tSr=r(M3t,"distilbert"),M3t.forEach(t),aSr=r(lRe," \u2014 "),QH=n(lRe,"A",{href:!0});var E3t=s(QH);nSr=r(E3t,"FlaxDistilBertForMultipleChoice"),E3t.forEach(t),sSr=r(lRe," (DistilBERT model)"),lRe.forEach(t),lSr=i(Vo),g3=n(Vo,"LI",{});var iRe=s(g3);HTe=n(iRe,"STRONG",{});var C3t=s(HTe);iSr=r(C3t,"electra"),C3t.forEach(t),dSr=r(iRe," \u2014 "),WH=n(iRe,"A",{href:!0});var w3t=s(WH);cSr=r(w3t,"FlaxElectraForMultipleChoice"),w3t.forEach(t),fSr=r(iRe," (ELECTRA model)"),iRe.forEach(t),mSr=i(Vo),h3=n(Vo,"LI",{});var dRe=s(h3);UTe=n(dRe,"STRONG",{});var A3t=s(UTe);gSr=r(A3t,"roberta"),A3t.forEach(t),hSr=r(dRe," \u2014 "),HH=n(dRe,"A",{href:!0});var y3t=s(HH);pSr=r(y3t,"FlaxRobertaForMultipleChoice"),y3t.forEach(t),_Sr=r(dRe," (RoBERTa model)"),dRe.forEach(t),uSr=i(Vo),p3=n(Vo,"LI",{});var cRe=s(p3);JTe=n(cRe,"STRONG",{});var L3t=s(JTe);bSr=r(L3t,"roformer"),L3t.forEach(t),FSr=r(cRe," \u2014 "),UH=n(cRe,"A",{href:!0});var x3t=s(UH);vSr=r(x3t,"FlaxRoFormerForMultipleChoice"),x3t.forEach(t),TSr=r(cRe," (RoFormer model)"),cRe.forEach(t),MSr=i(Vo),_3=n(Vo,"LI",{});var fRe=s(_3);YTe=n(fRe,"STRONG",{});var k3t=s(YTe);ESr=r(k3t,"xlm-roberta"),k3t.forEach(t),CSr=r(fRe," \u2014 "),JH=n(fRe,"A",{href:!0});var S3t=s(JH);wSr=r(S3t,"FlaxXLMRobertaForMultipleChoice"),S3t.forEach(t),ASr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),Vo.forEach(t),ySr=i(Ia),KTe=n(Ia,"P",{});var R3t=s(KTe);LSr=r(R3t,"Examples:"),R3t.forEach(t),xSr=i(Ia),m(U8.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),fPe=i(c),yf=n(c,"H2",{class:!0});var MIe=s(yf);u3=n(MIe,"A",{id:!0,class:!0,href:!0});var B3t=s(u3);ZTe=n(B3t,"SPAN",{});var P3t=s(ZTe);m(J8.$$.fragment,P3t),P3t.forEach(t),B3t.forEach(t),kSr=i(MIe),e9e=n(MIe,"SPAN",{});var $3t=s(e9e);SSr=r($3t,"FlaxAutoModelForNextSentencePrediction"),$3t.forEach(t),MIe.forEach(t),mPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(Y8.$$.fragment,Si),RSr=i(Si),Lf=n(Si,"P",{});var YJ=s(Lf);BSr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YH=n(YJ,"A",{href:!0});var I3t=s(YH);PSr=r(I3t,"from_pretrained()"),I3t.forEach(t),$Sr=r(YJ," class method or the "),KH=n(YJ,"A",{href:!0});var q3t=s(KH);ISr=r(q3t,"from_config()"),q3t.forEach(t),qSr=r(YJ,` class
method.`),YJ.forEach(t),NSr=i(Si),K8=n(Si,"P",{});var EIe=s(K8);jSr=r(EIe,"This class cannot be instantiated directly using "),o9e=n(EIe,"CODE",{});var N3t=s(o9e);DSr=r(N3t,"__init__()"),N3t.forEach(t),GSr=r(EIe," (throws an error)."),EIe.forEach(t),OSr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(Z8.$$.fragment,Ri),VSr=i(Ri),r9e=n(Ri,"P",{});var j3t=s(r9e);XSr=r(j3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j3t.forEach(t),zSr=i(Ri),xf=n(Ri,"P",{});var KJ=s(xf);QSr=r(KJ,`Note:
Loading a model from its configuration file does `),t9e=n(KJ,"STRONG",{});var D3t=s(t9e);WSr=r(D3t,"not"),D3t.forEach(t),HSr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(KJ,"A",{href:!0});var G3t=s(ZH);USr=r(G3t,"from_pretrained()"),G3t.forEach(t),JSr=r(KJ," to load the model weights."),KJ.forEach(t),YSr=i(Ri),a9e=n(Ri,"P",{});var O3t=s(a9e);KSr=r(O3t,"Examples:"),O3t.forEach(t),ZSr=i(Ri),m(eL.$$.fragment,Ri),Ri.forEach(t),eRr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(oL.$$.fragment,qa),oRr=i(qa),n9e=n(qa,"P",{});var V3t=s(n9e);rRr=r(V3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V3t.forEach(t),tRr=i(qa),Nn=n(qa,"P",{});var vC=s(Nn);aRr=r(vC,"The model class to instantiate is selected based on the "),s9e=n(vC,"CODE",{});var X3t=s(s9e);nRr=r(X3t,"model_type"),X3t.forEach(t),sRr=r(vC,` property of the config object (either
passed as an argument or loaded from `),l9e=n(vC,"CODE",{});var z3t=s(l9e);lRr=r(z3t,"pretrained_model_name_or_path"),z3t.forEach(t),iRr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i9e=n(vC,"CODE",{});var Q3t=s(i9e);dRr=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),cRr=r(vC,":"),vC.forEach(t),fRr=i(qa),d9e=n(qa,"UL",{});var W3t=s(d9e);b3=n(W3t,"LI",{});var mRe=s(b3);c9e=n(mRe,"STRONG",{});var H3t=s(c9e);mRr=r(H3t,"bert"),H3t.forEach(t),gRr=r(mRe," \u2014 "),eU=n(mRe,"A",{href:!0});var U3t=s(eU);hRr=r(U3t,"FlaxBertForNextSentencePrediction"),U3t.forEach(t),pRr=r(mRe," (BERT model)"),mRe.forEach(t),W3t.forEach(t),_Rr=i(qa),f9e=n(qa,"P",{});var J3t=s(f9e);uRr=r(J3t,"Examples:"),J3t.forEach(t),bRr=i(qa),m(rL.$$.fragment,qa),qa.forEach(t),Si.forEach(t),gPe=i(c),kf=n(c,"H2",{class:!0});var CIe=s(kf);F3=n(CIe,"A",{id:!0,class:!0,href:!0});var Y3t=s(F3);m9e=n(Y3t,"SPAN",{});var K3t=s(m9e);m(tL.$$.fragment,K3t),K3t.forEach(t),Y3t.forEach(t),FRr=i(CIe),g9e=n(CIe,"SPAN",{});var Z3t=s(g9e);vRr=r(Z3t,"FlaxAutoModelForImageClassification"),Z3t.forEach(t),CIe.forEach(t),hPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(aL.$$.fragment,Bi),TRr=i(Bi),Sf=n(Bi,"P",{});var ZJ=s(Sf);MRr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oU=n(ZJ,"A",{href:!0});var eCt=s(oU);ERr=r(eCt,"from_pretrained()"),eCt.forEach(t),CRr=r(ZJ," class method or the "),rU=n(ZJ,"A",{href:!0});var oCt=s(rU);wRr=r(oCt,"from_config()"),oCt.forEach(t),ARr=r(ZJ,` class
method.`),ZJ.forEach(t),yRr=i(Bi),nL=n(Bi,"P",{});var wIe=s(nL);LRr=r(wIe,"This class cannot be instantiated directly using "),h9e=n(wIe,"CODE",{});var rCt=s(h9e);xRr=r(rCt,"__init__()"),rCt.forEach(t),kRr=r(wIe," (throws an error)."),wIe.forEach(t),SRr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(sL.$$.fragment,Pi),RRr=i(Pi),p9e=n(Pi,"P",{});var tCt=s(p9e);BRr=r(tCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tCt.forEach(t),PRr=i(Pi),Rf=n(Pi,"P",{});var eY=s(Rf);$Rr=r(eY,`Note:
Loading a model from its configuration file does `),_9e=n(eY,"STRONG",{});var aCt=s(_9e);IRr=r(aCt,"not"),aCt.forEach(t),qRr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(eY,"A",{href:!0});var nCt=s(tU);NRr=r(nCt,"from_pretrained()"),nCt.forEach(t),jRr=r(eY," to load the model weights."),eY.forEach(t),DRr=i(Pi),u9e=n(Pi,"P",{});var sCt=s(u9e);GRr=r(sCt,"Examples:"),sCt.forEach(t),ORr=i(Pi),m(lL.$$.fragment,Pi),Pi.forEach(t),VRr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(iL.$$.fragment,Na),XRr=i(Na),b9e=n(Na,"P",{});var lCt=s(b9e);zRr=r(lCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lCt.forEach(t),QRr=i(Na),jn=n(Na,"P",{});var TC=s(jn);WRr=r(TC,"The model class to instantiate is selected based on the "),F9e=n(TC,"CODE",{});var iCt=s(F9e);HRr=r(iCt,"model_type"),iCt.forEach(t),URr=r(TC,` property of the config object (either
passed as an argument or loaded from `),v9e=n(TC,"CODE",{});var dCt=s(v9e);JRr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),YRr=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T9e=n(TC,"CODE",{});var cCt=s(T9e);KRr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),ZRr=r(TC,":"),TC.forEach(t),eBr=i(Na),dL=n(Na,"UL",{});var AIe=s(dL);v3=n(AIe,"LI",{});var gRe=s(v3);M9e=n(gRe,"STRONG",{});var fCt=s(M9e);oBr=r(fCt,"beit"),fCt.forEach(t),rBr=r(gRe," \u2014 "),aU=n(gRe,"A",{href:!0});var mCt=s(aU);tBr=r(mCt,"FlaxBeitForImageClassification"),mCt.forEach(t),aBr=r(gRe," (BEiT model)"),gRe.forEach(t),nBr=i(AIe),T3=n(AIe,"LI",{});var hRe=s(T3);E9e=n(hRe,"STRONG",{});var gCt=s(E9e);sBr=r(gCt,"vit"),gCt.forEach(t),lBr=r(hRe," \u2014 "),nU=n(hRe,"A",{href:!0});var hCt=s(nU);iBr=r(hCt,"FlaxViTForImageClassification"),hCt.forEach(t),dBr=r(hRe," (ViT model)"),hRe.forEach(t),AIe.forEach(t),cBr=i(Na),C9e=n(Na,"P",{});var pCt=s(C9e);fBr=r(pCt,"Examples:"),pCt.forEach(t),mBr=i(Na),m(cL.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),pPe=i(c),Bf=n(c,"H2",{class:!0});var yIe=s(Bf);M3=n(yIe,"A",{id:!0,class:!0,href:!0});var _Ct=s(M3);w9e=n(_Ct,"SPAN",{});var uCt=s(w9e);m(fL.$$.fragment,uCt),uCt.forEach(t),_Ct.forEach(t),gBr=i(yIe),A9e=n(yIe,"SPAN",{});var bCt=s(A9e);hBr=r(bCt,"FlaxAutoModelForVision2Seq"),bCt.forEach(t),yIe.forEach(t),_Pe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(mL.$$.fragment,$i),pBr=i($i),Pf=n($i,"P",{});var oY=s(Pf);_Br=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sU=n(oY,"A",{href:!0});var FCt=s(sU);uBr=r(FCt,"from_pretrained()"),FCt.forEach(t),bBr=r(oY," class method or the "),lU=n(oY,"A",{href:!0});var vCt=s(lU);FBr=r(vCt,"from_config()"),vCt.forEach(t),vBr=r(oY,` class
method.`),oY.forEach(t),TBr=i($i),gL=n($i,"P",{});var LIe=s(gL);MBr=r(LIe,"This class cannot be instantiated directly using "),y9e=n(LIe,"CODE",{});var TCt=s(y9e);EBr=r(TCt,"__init__()"),TCt.forEach(t),CBr=r(LIe," (throws an error)."),LIe.forEach(t),wBr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(hL.$$.fragment,Ii),ABr=i(Ii),L9e=n(Ii,"P",{});var MCt=s(L9e);yBr=r(MCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MCt.forEach(t),LBr=i(Ii),$f=n(Ii,"P",{});var rY=s($f);xBr=r(rY,`Note:
Loading a model from its configuration file does `),x9e=n(rY,"STRONG",{});var ECt=s(x9e);kBr=r(ECt,"not"),ECt.forEach(t),SBr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(rY,"A",{href:!0});var CCt=s(iU);RBr=r(CCt,"from_pretrained()"),CCt.forEach(t),BBr=r(rY," to load the model weights."),rY.forEach(t),PBr=i(Ii),k9e=n(Ii,"P",{});var wCt=s(k9e);$Br=r(wCt,"Examples:"),wCt.forEach(t),IBr=i(Ii),m(pL.$$.fragment,Ii),Ii.forEach(t),qBr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(_L.$$.fragment,ja),NBr=i(ja),S9e=n(ja,"P",{});var ACt=s(S9e);jBr=r(ACt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ACt.forEach(t),DBr=i(ja),Dn=n(ja,"P",{});var MC=s(Dn);GBr=r(MC,"The model class to instantiate is selected based on the "),R9e=n(MC,"CODE",{});var yCt=s(R9e);OBr=r(yCt,"model_type"),yCt.forEach(t),VBr=r(MC,` property of the config object (either
passed as an argument or loaded from `),B9e=n(MC,"CODE",{});var LCt=s(B9e);XBr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),zBr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=n(MC,"CODE",{});var xCt=s(P9e);QBr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),WBr=r(MC,":"),MC.forEach(t),HBr=i(ja),$9e=n(ja,"UL",{});var kCt=s($9e);E3=n(kCt,"LI",{});var pRe=s(E3);I9e=n(pRe,"STRONG",{});var SCt=s(I9e);UBr=r(SCt,"vision-encoder-decoder"),SCt.forEach(t),JBr=r(pRe," \u2014 "),dU=n(pRe,"A",{href:!0});var RCt=s(dU);YBr=r(RCt,"FlaxVisionEncoderDecoderModel"),RCt.forEach(t),KBr=r(pRe," (Vision Encoder decoder model)"),pRe.forEach(t),kCt.forEach(t),ZBr=i(ja),q9e=n(ja,"P",{});var BCt=s(q9e);ePr=r(BCt,"Examples:"),BCt.forEach(t),oPr=i(ja),m(uL.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(VCt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(M7,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(E7,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig"),d(C7,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig"),d(w7,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig"),d(A7,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig"),d(y7,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(L7,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig"),d(x7,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(k7,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(S7,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(R7,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig"),d(B7,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig"),d(P7,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig"),d($7,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig"),d(I7,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig"),d(q7,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig"),d(N7,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(j7,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(D7,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig"),d(G7,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(O7,"href","/docs/transformers/pr_15529/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(V7,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig"),d(X7,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig"),d(z7,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Q7,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig"),d(W7,"href","/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTConfig"),d(H7,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig"),d(U7,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(J7,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig"),d(Y7,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig"),d(K7,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig"),d(Z7,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig"),d(ex,"href","/docs/transformers/pr_15529/en/model_doc/glpn#transformers.GLPNConfig"),d(ox,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config"),d(rx,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(tx,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig"),d(ax,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig"),d(nx,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig"),d(sx,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(lx,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ix,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(dx,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig"),d(cx,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig"),d(fx,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeConfig"),d(mx,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig"),d(gx,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config"),d(hx,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig"),d(px,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(_x,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig"),d(ux,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(bx,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Fx,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig"),d(vx,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config"),d(Tx,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Mx,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Ex,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig"),d(Cx,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig"),d(wx,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig"),d(Ax,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(yx,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Lx,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(xx,"href","/docs/transformers/pr_15529/en/model_doc/rag#transformers.RagConfig"),d(kx,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmConfig"),d(Sx,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig"),d(Rx,"href","/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetConfig"),d(Bx,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig"),d(Px,"href","/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetConfig"),d($x,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig"),d(Ix,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig"),d(qx,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig"),d(Nx,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig"),d(jx,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig"),d(Dx,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig"),d(Gx,"href","/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Ox,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Vx,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Xx,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig"),d(zx,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Qx,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig"),d(Wx,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config"),d(Hx,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig"),d(Ux,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig"),d(Jx,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Yx,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRConfig"),d(Kx,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Zx,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(ek,"href","/docs/transformers/pr_15529/en/model_doc/van#transformers.VanConfig"),d(ok,"href","/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltConfig"),d(rk,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(tk,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(ak,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(nk,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig"),d(sk,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(lk,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(ik,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig"),d(dk,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig"),d(ck,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig"),d(fk,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(mk,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(gk,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(hk,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig"),d(pk,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(_k,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(uk,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertTokenizer"),d(bk,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Fk,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartTokenizer"),d(vk,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartTokenizerFast"),d(Tk,"href","/docs/transformers/pr_15529/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Mk,"href","/docs/transformers/pr_15529/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Ek,"href","/docs/transformers/pr_15529/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Ck,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizer"),d(wk,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizerFast"),d(Ak,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(yk,"href","/docs/transformers/pr_15529/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Lk,"href","/docs/transformers/pr_15529/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(xk,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(kk,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Sk,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Rk,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Bk,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Pk,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d($k,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ik,"href","/docs/transformers/pr_15529/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(qk,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Nk,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(jk,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineTokenizer"),d(Dk,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPTokenizer"),d(Gk,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Ok,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Vk,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Xk,"href","/docs/transformers/pr_15529/en/model_doc/cpm#transformers.CpmTokenizer"),d(zk,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Qk,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Wk,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Hk,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Uk,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(Jk,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Yk,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Kk,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Zk,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(eS,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraTokenizer"),d(oS,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(rS,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(tS,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetTokenizer"),d(aS,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(nS,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(sS,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelTokenizer"),d(lS,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(iS,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(dS,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(cS,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fS,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(mS,"href","/docs/transformers/pr_15529/en/model_doc/herbert#transformers.HerbertTokenizer"),d(gS,"href","/docs/transformers/pr_15529/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(hS,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(pS,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizer"),d(_S,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(uS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(bS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(FS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(vS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(TS,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(MS,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ES,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDTokenizer"),d(CS,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDTokenizerFast"),d(wS,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerTokenizer"),d(AS,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(yS,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeTokenizer"),d(LS,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(xS,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(kS,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(SS,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianTokenizer"),d(RS,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartTokenizer"),d(BS,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(PS,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBart50Tokenizer"),d($S,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(IS,"href","/docs/transformers/pr_15529/en/model_doc/mluke#transformers.MLukeTokenizer"),d(qS,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(NS,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(jS,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(DS,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(GS,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5Tokenizer"),d(OS,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5TokenizerFast"),d(VS,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(XS,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(zS,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(QS,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(WS,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(HS,"href","/docs/transformers/pr_15529/en/model_doc/phobert#transformers.PhobertTokenizer"),d(US,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartTokenizer"),d(JS,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(YS,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizer"),d(KS,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizerFast"),d(ZS,"href","/docs/transformers/pr_15529/en/model_doc/rag#transformers.RagTokenizer"),d(eR,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmTokenizer"),d(oR,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmTokenizerFast"),d(rR,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerTokenizer"),d(tR,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(aR,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertTokenizer"),d(nR,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(sR,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(lR,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(iR,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizer"),d(dR,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(cR,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(fR,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(mR,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(gR,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(hR,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterTokenizer"),d(pR,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(_R,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(uR,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(bR,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5Tokenizer"),d(FR,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5TokenizerFast"),d(vR,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasTokenizer"),d(TR,"href","/docs/transformers/pr_15529/en/model_doc/tapex#transformers.TapexTokenizer"),d(MR,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(ER,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(CR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(wR,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMTokenizer"),d(AR,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(yR,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMTokenizer"),d(LR,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(xR,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(kR,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(SR,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(RR,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"id","transformers.AutoFeatureExtractor"),d(_h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_h,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(BR,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(PR,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitFeatureExtractor"),d($R,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(IR,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qR,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(jR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(DR,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(GR,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(OR,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(VR,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(XR,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(zR,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(QR,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(WR,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(UR,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(YR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(KR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"id","transformers.AutoProcessor"),d(Nh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(ZR,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(eB,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPProcessor"),d(oB,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(rB,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(tB,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(aB,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(nB,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRProcessor"),d(sB,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(lB,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"id","transformers.AutoModel"),d(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(iB,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dB,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cB,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fB,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertModel"),d(mB,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartModel"),d(gB,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitModel"),d(hB,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel"),d(pB,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(_B,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdModel"),d(uB,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(bB,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(FB,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(vB,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertModel"),d(TB,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineModel"),d(MB,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPModel"),d(EB,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertModel"),d(CB,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextModel"),d(wB,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLModel"),d(AB,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(yB,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(LB,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaModel"),d(xB,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(kB,"href","/docs/transformers/pr_15529/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(SB,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTModel"),d(RB,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrModel"),d(BB,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertModel"),d(PB,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d($B,"href","/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTModel"),d(IB,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraModel"),d(qB,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertModel"),d(NB,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetModel"),d(jB,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTModel"),d(DB,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelModel"),d(GB,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelBaseModel"),d(OB,"href","/docs/transformers/pr_15529/en/model_doc/glpn#transformers.GLPNModel"),d(VB,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Model"),d(XB,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(zB,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJModel"),d(QB,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertModel"),d(WB,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertModel"),d(HB,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(UB,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(JB,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(YB,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDModel"),d(KB,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerModel"),d(ZB,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeModel"),d(eP,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertModel"),d(oP,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Model"),d(rP,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianModel"),d(tP,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerModel"),d(aP,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartModel"),d(nP,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(sP,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertModel"),d(lP,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetModel"),d(iP,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Model"),d(dP,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerModel"),d(cP,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(fP,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusModel"),d(mP,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverModel"),d(gP,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartModel"),d(hP,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerModel"),d(pP,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(_P,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertModel"),d(uP,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModel"),d(bP,"href","/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetModel"),d(FP,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertModel"),d(vP,"href","/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetModel"),d(TP,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel"),d(MP,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaModel"),d(EP,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerModel"),d(CP,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerModel"),d(wP,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWModel"),d(AP,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDModel"),d(yP,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(LP,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterModel"),d(xP,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(kP,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinModel"),d(SP,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Model"),d(RP,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasModel"),d(BP,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(PP,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechModel"),d($P,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(IP,"href","/docs/transformers/pr_15529/en/model_doc/van#transformers.VanModel"),d(qP,"href","/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltModel"),d(NP,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(jP,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertModel"),d(DP,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTModel"),d(GP,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(OP,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(VP,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMModel"),d(XP,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMModel"),d(zP,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMModel"),d(QP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(WP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(HP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(UP,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetModel"),d(JP,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($_,"id","transformers.AutoModelForPreTraining"),d($_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(YP,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KP,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZP,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e$,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForPreTraining"),d(o$,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(r$,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForPreTraining"),d(t$,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(a$,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(n$,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(s$,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(l$,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(i$,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(d$,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(c$,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForPreTraining"),d(f$,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(m$,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForPreTraining"),d(g$,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(h$,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(p$,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(_$,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(u$,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(b$,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(F$,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(v$,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(T$,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(M$,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(E$,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(C$,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel"),d(w$,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(A$,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(y$,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(x$,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(k$,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(S$,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(R$,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(B$,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(P$,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d($$,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(I$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(q$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(N$,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mu,"id","transformers.AutoModelForCausalLM"),d(Mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(j$,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(D$,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(G$,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O$,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForCausalLM"),d(V$,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertLMHeadModel"),d(X$,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(z$,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Q$,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(W$,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(H$,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(U$,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(J$,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(Y$,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(K$,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForCausalLM"),d(Z$,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(eI,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(oI,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(rI,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianForCausalLM"),d(tI,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForCausalLM"),d(aI,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(nI,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(sI,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(lI,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(iI,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(dI,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(cI,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(fI,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(mI,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(gI,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(hI,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(pI,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_I,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(uI,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(bI,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(FI,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(vI,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(TI,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(MI,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n5,"id","transformers.AutoModelForMaskedLM"),d(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n5,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(EI,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CI,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wI,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AI,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(yI,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMaskedLM"),d(xI,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(kI,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(SI,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(BI,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(PI,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d($I,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(II,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(qI,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NI,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(jI,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(DI,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(OI,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(VI,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(XI,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(zI,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(QI,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WI,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(HI,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(UI,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(YI,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(ZI,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(eq,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(oq,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(rq,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(tq,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(aq,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nq,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O5,"id","transformers.AutoModelForSeq2SeqLM"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(sq,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lq,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iq,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dq,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(hq,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(pq,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianMTModel"),d(bq,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l2,"id","transformers.AutoModelForSequenceClassification"),d(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l2,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Aq,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yq,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lq,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xq,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(kq,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d($q,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(qq,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(jq,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(zq,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(iN,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(cN,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(mN,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(gN,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(hN,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(pN,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification"),d(_N,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(uN,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(bN,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(FN,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(vN,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(TN,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r1,"id","transformers.AutoModelForMultipleChoice"),d(r1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r1,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(MN,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EN,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CN,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wN,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(LN,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kN,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(RN,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(PN,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d($N,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(IN,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(jN,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ON,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VN,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QN,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(WN,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(UN,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(JN,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(YN,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(KN,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R1,"id","transformers.AutoModelForNextSentencePrediction"),d(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R1,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(ZN,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ej,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oj,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rj,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(nj,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(sj,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j1,"id","transformers.AutoModelForTokenClassification"),d(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j1,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(lj,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ij,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dj,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cj,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(fj,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForTokenClassification"),d(mj,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(gj,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(hj,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForTokenClassification"),d(pj,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(_j,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(uj,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(bj,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Fj,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Tj,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Ej,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Cj,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(wj,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(yj,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Lj,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(xj,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(kj,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Rj,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Bj,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Pj,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d($j,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Ij,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(qj,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Nj,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(jj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Dj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Gj,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Oj,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vb,"id","transformers.AutoModelForQuestionAnswering"),d(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vb,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(Vj,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xj,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zj,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qj,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(sD,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(yD,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(kD,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lF,"id","transformers.AutoModelForTableQuestionAnswering"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(SD,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RD,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BD,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PD,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cF,"id","transformers.AutoModelForImageClassification"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d($D,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ID,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ND,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForImageClassification"),d(jD,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(DD,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassification"),d(GD,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(OD,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(VD,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(XD,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(zD,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(QD,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(WD,"href","/docs/transformers/pr_15529/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(HD,"href","/docs/transformers/pr_15529/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(UD,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(JD,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForImageClassification"),d(YD,"href","/docs/transformers/pr_15529/en/model_doc/van#transformers.VanForImageClassification"),d(KD,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MF,"id","transformers.AutoModelForVision2Seq"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(ZD,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rG,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wF,"id","transformers.AutoModelForAudioClassification"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sG,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(lG,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(iG,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(dG,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(cG,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(fG,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(mG,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(gG,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($F,"id","transformers.AutoModelForAudioFrameClassification"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(hG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_G,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uG,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(bG,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(FG,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(vG,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GF,"id","transformers.AutoModelForCTC"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(TG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CG,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(wG,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForCTC"),d(AG,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForCTC"),d(yG,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForCTC"),d(LG,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(xG,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(kG,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(SG,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(RG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($G,"href","/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(IG,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ov,"id","transformers.AutoModelForAudioXVector"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(qG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DG,"href","/docs/transformers/pr_15529/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(GG,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(OG,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(VG,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lv,"id","transformers.AutoModelForMaskedImageModeling"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(XG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WG,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(HG,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(UG,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mv,"id","transformers.AutoModelForObjectDetection"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(JG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZG,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pv,"id","transformers.AutoModelForImageSegmentation"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(eO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tO,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bv,"id","transformers.AutoModelForSemanticSegmentation"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(aO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lO,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(iO,"href","/docs/transformers/pr_15529/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(dO,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ev,"id","transformers.AutoModelForInstanceSegmentation"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(cO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gO,"href","/docs/transformers/pr_15529/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Av,"id","transformers.TFAutoModel"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(hO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pO,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_O,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uO,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertModel"),d(bO,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartModel"),d(FO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertModel"),d(vO,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(TO,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(MO,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertModel"),d(EO,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.TFCLIPModel"),d(CO,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertModel"),d(wO,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextModel"),d(AO,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLModel"),d(yO,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaModel"),d(LO,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(xO,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(kO,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(SO,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraModel"),d(RO,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(BO,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelModel"),d(PO,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d($O,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2Model"),d(IO,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJModel"),d(qO,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.TFHubertModel"),d(NO,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(jO,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDModel"),d(DO,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerModel"),d(GO,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertModel"),d(OO,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianModel"),d(VO,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartModel"),d(XO,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(zO,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetModel"),d(QO,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5Model"),d(WO,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(HO,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusModel"),d(UO,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertModel"),d(JO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaModel"),d(YO,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerModel"),d(KO,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(ZO,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5Model"),d(eV,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasModel"),d(oV,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(rV,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTModel"),d(tV,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(aV,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(nV,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMModel"),d(sV,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(lV,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_T,"id","transformers.TFAutoModelForPreTraining"),d(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_T,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(iV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fV,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(mV,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(gV,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForPreTraining"),d(hV,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(pV,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(_V,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(uV,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(bV,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(FV,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(vV,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(TV,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(MV,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(EV,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(CV,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(wV,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(AV,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(yV,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(LV,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(xV,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(kV,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(SV,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(RV,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(BV,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DT,"id","transformers.TFAutoModelForCausalLM"),d(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DT,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(PV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($V,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qV,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(NV,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(jV,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(DV,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(GV,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(OV,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(VV,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(XV,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(zV,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(QV,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(WV,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(HV,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZT,"id","transformers.TFAutoModelForImageClassification"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(UV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YV,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KV,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(ZV,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r9,"id","transformers.TFAutoModelForMaskedLM"),d(r9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r9,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(eX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(aX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(nX,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(sX,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(lX,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(iX,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(dX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(cX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(fX,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(mX,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(gX,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(hX,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(pX,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(uX,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(FX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(vX,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(TX,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(MX,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E9,"id","transformers.TFAutoModelForSeq2SeqLM"),d(E9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E9,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(EX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AX,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(LX,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(kX,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianMTModel"),d(RX,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(PX,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d($X,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P9,"id","transformers.TFAutoModelForSequenceClassification"),d(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P9,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(IX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NX,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(XX,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(zX,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(QX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(HX,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(JX,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(YX,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(KX,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(ez,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(rz,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(tz,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(nz,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(sz,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(lz,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(iz,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(dz,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(cz,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lM,"id","transformers.TFAutoModelForMultipleChoice"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(fz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hz,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(pz,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(_z,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(vz,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(wz,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(yz,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(xz,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(kz,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wM,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Sz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pz,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yM,"id","transformers.TFAutoModelForTokenClassification"),d(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yM,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d($z,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Iz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qz,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nz,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(jz,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Dz,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Vz,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Xz,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(zz,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Qz,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Hz,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Uz,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Jz,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Kz,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(eQ,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(oQ,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(rQ,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(tQ,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HM,"id","transformers.TFAutoModelForQuestionAnswering"),d(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(aQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lQ,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(_Q,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(wQ,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p4,"id","transformers.TFAutoModelForVision2Seq"),d(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p4,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(yQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kQ,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(SQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PQ,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F4,"id","transformers.FlaxAutoModel"),d(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F4,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d($Q,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qQ,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NQ,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertModel"),d(jQ,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartModel"),d(DQ,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitModel"),d(GQ,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertModel"),d(OQ,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(VQ,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(XQ,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(zQ,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.FlaxCLIPModel"),d(QQ,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(WQ,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraModel"),d(HQ,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(UQ,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(JQ,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(YQ,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianModel"),d(KQ,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartModel"),d(ZQ,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5Model"),d(eW,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(oW,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(rW,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(tW,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5Model"),d(aW,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(nW,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTModel"),d(sW,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(lW,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(iW,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z4,"id","transformers.FlaxAutoModelForCausalLM"),d(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z4,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(dW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mW,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(gW,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(hW,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(pW,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(_W,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y4,"id","transformers.FlaxAutoModelForPreTraining"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(uW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vW,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(TW,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(MW,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(EW,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(CW,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(wW,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(AW,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(yW,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(LW,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(xW,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(kW,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(SW,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cE,"id","transformers.FlaxAutoModelForMaskedLM"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(RW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($W,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(IW,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(NW,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(jW,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(DW,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(GW,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(OW,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(VW,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(XW,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(zW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WW,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HW,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(JW,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(KW,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(ZW,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(oH,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(tH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sH,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(lH,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(iH,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(dH,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(cH,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(fH,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(mH,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(gH,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(hH,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(pH,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(_H,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FH,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(vH,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(TH,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(MH,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZE,"id","transformers.FlaxAutoModelForTokenClassification"),d(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(xH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RH,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(BH,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(PH,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d($H,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(IH,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(qH,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(NH,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(jH,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(DH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VH,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(XH,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(zH,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(QH,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(WH,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(HH,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(UH,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(JH,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(YH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZH,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eU,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F3,"id","transformers.FlaxAutoModelForImageClassification"),d(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F3,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(oU,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rU,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tU,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aU,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(nU,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M3,"id","transformers.FlaxAutoModelForVision2Seq"),d(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(sU,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lU,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iU,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dU,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(ge,lo,null),e(de,Me),e(de,Xo),e(Xo,qi),b(c,Nf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,EC),e(fa,jf),b(c,xe,u),b(c,co,u),e(co,Di),e(co,Gn),e(Gn,CC),e(co,On),e(co,Vn),e(Vn,wC),e(co,Gi),e(co,Xn),e(Xn,AC),e(co,Oi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,_7),e(ue,Vi),e(Vi,u7),e(ue,b7),b(c,zo,u),b(c,Ga,u),e(Ga,F7),e(Ga,Gf),e(Gf,v7),e(Ga,xIe),b(c,_Re,u),b(c,Xi,u),e(Xi,Of),e(Of,tY),g(yC,tY,null),e(Xi,kIe),e(Xi,aY),e(aY,SIe),b(c,uRe,u),b(c,zn,u),e(zn,RIe),e(zn,nY),e(nY,BIe),e(zn,PIe),e(zn,sY),e(sY,$Ie),e(zn,IIe),b(c,bRe,u),g(LC,c,u),b(c,FRe,u),b(c,T7,u),e(T7,qIe),b(c,vRe,u),g(Vf,c,u),b(c,TRe,u),b(c,zi,u),e(zi,Xf),e(Xf,lY),g(xC,lY,null),e(zi,NIe),e(zi,iY),e(iY,jIe),b(c,MRe,u),b(c,Qo,u),g(kC,Qo,null),e(Qo,DIe),e(Qo,SC),e(SC,GIe),e(SC,M7),e(M7,OIe),e(SC,VIe),e(Qo,XIe),e(Qo,RC),e(RC,zIe),e(RC,dY),e(dY,QIe),e(RC,WIe),e(Qo,HIe),e(Qo,mo),g(BC,mo,null),e(mo,UIe),e(mo,cY),e(cY,JIe),e(mo,YIe),e(mo,Qi),e(Qi,KIe),e(Qi,fY),e(fY,ZIe),e(Qi,eqe),e(Qi,mY),e(mY,oqe),e(Qi,rqe),e(mo,tqe),e(mo,F),e(F,zf),e(zf,gY),e(gY,aqe),e(zf,nqe),e(zf,E7),e(E7,sqe),e(zf,lqe),e(F,iqe),e(F,Qf),e(Qf,hY),e(hY,dqe),e(Qf,cqe),e(Qf,C7),e(C7,fqe),e(Qf,mqe),e(F,gqe),e(F,Wf),e(Wf,pY),e(pY,hqe),e(Wf,pqe),e(Wf,w7),e(w7,_qe),e(Wf,uqe),e(F,bqe),e(F,Hf),e(Hf,_Y),e(_Y,Fqe),e(Hf,vqe),e(Hf,A7),e(A7,Tqe),e(Hf,Mqe),e(F,Eqe),e(F,Uf),e(Uf,uY),e(uY,Cqe),e(Uf,wqe),e(Uf,y7),e(y7,Aqe),e(Uf,yqe),e(F,Lqe),e(F,Jf),e(Jf,bY),e(bY,xqe),e(Jf,kqe),e(Jf,L7),e(L7,Sqe),e(Jf,Rqe),e(F,Bqe),e(F,Yf),e(Yf,FY),e(FY,Pqe),e(Yf,$qe),e(Yf,x7),e(x7,Iqe),e(Yf,qqe),e(F,Nqe),e(F,Kf),e(Kf,vY),e(vY,jqe),e(Kf,Dqe),e(Kf,k7),e(k7,Gqe),e(Kf,Oqe),e(F,Vqe),e(F,Zf),e(Zf,TY),e(TY,Xqe),e(Zf,zqe),e(Zf,S7),e(S7,Qqe),e(Zf,Wqe),e(F,Hqe),e(F,em),e(em,MY),e(MY,Uqe),e(em,Jqe),e(em,R7),e(R7,Yqe),e(em,Kqe),e(F,Zqe),e(F,om),e(om,EY),e(EY,eNe),e(om,oNe),e(om,B7),e(B7,rNe),e(om,tNe),e(F,aNe),e(F,rm),e(rm,CY),e(CY,nNe),e(rm,sNe),e(rm,P7),e(P7,lNe),e(rm,iNe),e(F,dNe),e(F,tm),e(tm,wY),e(wY,cNe),e(tm,fNe),e(tm,$7),e($7,mNe),e(tm,gNe),e(F,hNe),e(F,am),e(am,AY),e(AY,pNe),e(am,_Ne),e(am,I7),e(I7,uNe),e(am,bNe),e(F,FNe),e(F,nm),e(nm,yY),e(yY,vNe),e(nm,TNe),e(nm,q7),e(q7,MNe),e(nm,ENe),e(F,CNe),e(F,sm),e(sm,LY),e(LY,wNe),e(sm,ANe),e(sm,N7),e(N7,yNe),e(sm,LNe),e(F,xNe),e(F,lm),e(lm,xY),e(xY,kNe),e(lm,SNe),e(lm,j7),e(j7,RNe),e(lm,BNe),e(F,PNe),e(F,im),e(im,kY),e(kY,$Ne),e(im,INe),e(im,D7),e(D7,qNe),e(im,NNe),e(F,jNe),e(F,dm),e(dm,SY),e(SY,DNe),e(dm,GNe),e(dm,G7),e(G7,ONe),e(dm,VNe),e(F,XNe),e(F,cm),e(cm,RY),e(RY,zNe),e(cm,QNe),e(cm,O7),e(O7,WNe),e(cm,HNe),e(F,UNe),e(F,fm),e(fm,BY),e(BY,JNe),e(fm,YNe),e(fm,V7),e(V7,KNe),e(fm,ZNe),e(F,eje),e(F,mm),e(mm,PY),e(PY,oje),e(mm,rje),e(mm,X7),e(X7,tje),e(mm,aje),e(F,nje),e(F,gm),e(gm,$Y),e($Y,sje),e(gm,lje),e(gm,z7),e(z7,ije),e(gm,dje),e(F,cje),e(F,hm),e(hm,IY),e(IY,fje),e(hm,mje),e(hm,Q7),e(Q7,gje),e(hm,hje),e(F,pje),e(F,pm),e(pm,qY),e(qY,_je),e(pm,uje),e(pm,W7),e(W7,bje),e(pm,Fje),e(F,vje),e(F,_m),e(_m,NY),e(NY,Tje),e(_m,Mje),e(_m,H7),e(H7,Eje),e(_m,Cje),e(F,wje),e(F,um),e(um,jY),e(jY,Aje),e(um,yje),e(um,U7),e(U7,Lje),e(um,xje),e(F,kje),e(F,bm),e(bm,DY),e(DY,Sje),e(bm,Rje),e(bm,J7),e(J7,Bje),e(bm,Pje),e(F,$je),e(F,Fm),e(Fm,GY),e(GY,Ije),e(Fm,qje),e(Fm,Y7),e(Y7,Nje),e(Fm,jje),e(F,Dje),e(F,vm),e(vm,OY),e(OY,Gje),e(vm,Oje),e(vm,K7),e(K7,Vje),e(vm,Xje),e(F,zje),e(F,Tm),e(Tm,VY),e(VY,Qje),e(Tm,Wje),e(Tm,Z7),e(Z7,Hje),e(Tm,Uje),e(F,Jje),e(F,Mm),e(Mm,XY),e(XY,Yje),e(Mm,Kje),e(Mm,ex),e(ex,Zje),e(Mm,eDe),e(F,oDe),e(F,Em),e(Em,zY),e(zY,rDe),e(Em,tDe),e(Em,ox),e(ox,aDe),e(Em,nDe),e(F,sDe),e(F,Cm),e(Cm,QY),e(QY,lDe),e(Cm,iDe),e(Cm,rx),e(rx,dDe),e(Cm,cDe),e(F,fDe),e(F,wm),e(wm,WY),e(WY,mDe),e(wm,gDe),e(wm,tx),e(tx,hDe),e(wm,pDe),e(F,_De),e(F,Am),e(Am,HY),e(HY,uDe),e(Am,bDe),e(Am,ax),e(ax,FDe),e(Am,vDe),e(F,TDe),e(F,ym),e(ym,UY),e(UY,MDe),e(ym,EDe),e(ym,nx),e(nx,CDe),e(ym,wDe),e(F,ADe),e(F,Lm),e(Lm,JY),e(JY,yDe),e(Lm,LDe),e(Lm,sx),e(sx,xDe),e(Lm,kDe),e(F,SDe),e(F,xm),e(xm,YY),e(YY,RDe),e(xm,BDe),e(xm,lx),e(lx,PDe),e(xm,$De),e(F,IDe),e(F,km),e(km,KY),e(KY,qDe),e(km,NDe),e(km,ix),e(ix,jDe),e(km,DDe),e(F,GDe),e(F,Sm),e(Sm,ZY),e(ZY,ODe),e(Sm,VDe),e(Sm,dx),e(dx,XDe),e(Sm,zDe),e(F,QDe),e(F,Rm),e(Rm,eK),e(eK,WDe),e(Rm,HDe),e(Rm,cx),e(cx,UDe),e(Rm,JDe),e(F,YDe),e(F,Bm),e(Bm,oK),e(oK,KDe),e(Bm,ZDe),e(Bm,fx),e(fx,eGe),e(Bm,oGe),e(F,rGe),e(F,Pm),e(Pm,rK),e(rK,tGe),e(Pm,aGe),e(Pm,mx),e(mx,nGe),e(Pm,sGe),e(F,lGe),e(F,$m),e($m,tK),e(tK,iGe),e($m,dGe),e($m,gx),e(gx,cGe),e($m,fGe),e(F,mGe),e(F,Im),e(Im,aK),e(aK,gGe),e(Im,hGe),e(Im,hx),e(hx,pGe),e(Im,_Ge),e(F,uGe),e(F,qm),e(qm,nK),e(nK,bGe),e(qm,FGe),e(qm,px),e(px,vGe),e(qm,TGe),e(F,MGe),e(F,Nm),e(Nm,sK),e(sK,EGe),e(Nm,CGe),e(Nm,_x),e(_x,wGe),e(Nm,AGe),e(F,yGe),e(F,jm),e(jm,lK),e(lK,LGe),e(jm,xGe),e(jm,ux),e(ux,kGe),e(jm,SGe),e(F,RGe),e(F,Dm),e(Dm,iK),e(iK,BGe),e(Dm,PGe),e(Dm,bx),e(bx,$Ge),e(Dm,IGe),e(F,qGe),e(F,Gm),e(Gm,dK),e(dK,NGe),e(Gm,jGe),e(Gm,Fx),e(Fx,DGe),e(Gm,GGe),e(F,OGe),e(F,Om),e(Om,cK),e(cK,VGe),e(Om,XGe),e(Om,vx),e(vx,zGe),e(Om,QGe),e(F,WGe),e(F,Vm),e(Vm,fK),e(fK,HGe),e(Vm,UGe),e(Vm,Tx),e(Tx,JGe),e(Vm,YGe),e(F,KGe),e(F,Xm),e(Xm,mK),e(mK,ZGe),e(Xm,eOe),e(Xm,Mx),e(Mx,oOe),e(Xm,rOe),e(F,tOe),e(F,zm),e(zm,gK),e(gK,aOe),e(zm,nOe),e(zm,Ex),e(Ex,sOe),e(zm,lOe),e(F,iOe),e(F,Qm),e(Qm,hK),e(hK,dOe),e(Qm,cOe),e(Qm,Cx),e(Cx,fOe),e(Qm,mOe),e(F,gOe),e(F,Wm),e(Wm,pK),e(pK,hOe),e(Wm,pOe),e(Wm,wx),e(wx,_Oe),e(Wm,uOe),e(F,bOe),e(F,Hm),e(Hm,_K),e(_K,FOe),e(Hm,vOe),e(Hm,Ax),e(Ax,TOe),e(Hm,MOe),e(F,EOe),e(F,Um),e(Um,uK),e(uK,COe),e(Um,wOe),e(Um,yx),e(yx,AOe),e(Um,yOe),e(F,LOe),e(F,Jm),e(Jm,bK),e(bK,xOe),e(Jm,kOe),e(Jm,Lx),e(Lx,SOe),e(Jm,ROe),e(F,BOe),e(F,Ym),e(Ym,FK),e(FK,POe),e(Ym,$Oe),e(Ym,xx),e(xx,IOe),e(Ym,qOe),e(F,NOe),e(F,Km),e(Km,vK),e(vK,jOe),e(Km,DOe),e(Km,kx),e(kx,GOe),e(Km,OOe),e(F,VOe),e(F,Zm),e(Zm,TK),e(TK,XOe),e(Zm,zOe),e(Zm,Sx),e(Sx,QOe),e(Zm,WOe),e(F,HOe),e(F,eg),e(eg,MK),e(MK,UOe),e(eg,JOe),e(eg,Rx),e(Rx,YOe),e(eg,KOe),e(F,ZOe),e(F,og),e(og,EK),e(EK,eVe),e(og,oVe),e(og,Bx),e(Bx,rVe),e(og,tVe),e(F,aVe),e(F,rg),e(rg,CK),e(CK,nVe),e(rg,sVe),e(rg,Px),e(Px,lVe),e(rg,iVe),e(F,dVe),e(F,tg),e(tg,wK),e(wK,cVe),e(tg,fVe),e(tg,$x),e($x,mVe),e(tg,gVe),e(F,hVe),e(F,ag),e(ag,AK),e(AK,pVe),e(ag,_Ve),e(ag,Ix),e(Ix,uVe),e(ag,bVe),e(F,FVe),e(F,ng),e(ng,yK),e(yK,vVe),e(ng,TVe),e(ng,qx),e(qx,MVe),e(ng,EVe),e(F,CVe),e(F,sg),e(sg,LK),e(LK,wVe),e(sg,AVe),e(sg,Nx),e(Nx,yVe),e(sg,LVe),e(F,xVe),e(F,lg),e(lg,xK),e(xK,kVe),e(lg,SVe),e(lg,jx),e(jx,RVe),e(lg,BVe),e(F,PVe),e(F,ig),e(ig,kK),e(kK,$Ve),e(ig,IVe),e(ig,Dx),e(Dx,qVe),e(ig,NVe),e(F,jVe),e(F,dg),e(dg,SK),e(SK,DVe),e(dg,GVe),e(dg,Gx),e(Gx,OVe),e(dg,VVe),e(F,XVe),e(F,cg),e(cg,RK),e(RK,zVe),e(cg,QVe),e(cg,Ox),e(Ox,WVe),e(cg,HVe),e(F,UVe),e(F,fg),e(fg,BK),e(BK,JVe),e(fg,YVe),e(fg,Vx),e(Vx,KVe),e(fg,ZVe),e(F,eXe),e(F,mg),e(mg,PK),e(PK,oXe),e(mg,rXe),e(mg,Xx),e(Xx,tXe),e(mg,aXe),e(F,nXe),e(F,gg),e(gg,$K),e($K,sXe),e(gg,lXe),e(gg,zx),e(zx,iXe),e(gg,dXe),e(F,cXe),e(F,hg),e(hg,IK),e(IK,fXe),e(hg,mXe),e(hg,Qx),e(Qx,gXe),e(hg,hXe),e(F,pXe),e(F,pg),e(pg,qK),e(qK,_Xe),e(pg,uXe),e(pg,Wx),e(Wx,bXe),e(pg,FXe),e(F,vXe),e(F,_g),e(_g,NK),e(NK,TXe),e(_g,MXe),e(_g,Hx),e(Hx,EXe),e(_g,CXe),e(F,wXe),e(F,ug),e(ug,jK),e(jK,AXe),e(ug,yXe),e(ug,Ux),e(Ux,LXe),e(ug,xXe),e(F,kXe),e(F,bg),e(bg,DK),e(DK,SXe),e(bg,RXe),e(bg,Jx),e(Jx,BXe),e(bg,PXe),e(F,$Xe),e(F,Fg),e(Fg,GK),e(GK,IXe),e(Fg,qXe),e(Fg,Yx),e(Yx,NXe),e(Fg,jXe),e(F,DXe),e(F,vg),e(vg,OK),e(OK,GXe),e(vg,OXe),e(vg,Kx),e(Kx,VXe),e(vg,XXe),e(F,zXe),e(F,Tg),e(Tg,VK),e(VK,QXe),e(Tg,WXe),e(Tg,Zx),e(Zx,HXe),e(Tg,UXe),e(F,JXe),e(F,Mg),e(Mg,XK),e(XK,YXe),e(Mg,KXe),e(Mg,ek),e(ek,ZXe),e(Mg,eze),e(F,oze),e(F,Eg),e(Eg,zK),e(zK,rze),e(Eg,tze),e(Eg,ok),e(ok,aze),e(Eg,nze),e(F,sze),e(F,Cg),e(Cg,QK),e(QK,lze),e(Cg,ize),e(Cg,rk),e(rk,dze),e(Cg,cze),e(F,fze),e(F,wg),e(wg,WK),e(WK,mze),e(wg,gze),e(wg,tk),e(tk,hze),e(wg,pze),e(F,_ze),e(F,Ag),e(Ag,HK),e(HK,uze),e(Ag,bze),e(Ag,ak),e(ak,Fze),e(Ag,vze),e(F,Tze),e(F,yg),e(yg,UK),e(UK,Mze),e(yg,Eze),e(yg,nk),e(nk,Cze),e(yg,wze),e(F,Aze),e(F,Lg),e(Lg,JK),e(JK,yze),e(Lg,Lze),e(Lg,sk),e(sk,xze),e(Lg,kze),e(F,Sze),e(F,xg),e(xg,YK),e(YK,Rze),e(xg,Bze),e(xg,lk),e(lk,Pze),e(xg,$ze),e(F,Ize),e(F,kg),e(kg,KK),e(KK,qze),e(kg,Nze),e(kg,ik),e(ik,jze),e(kg,Dze),e(F,Gze),e(F,Sg),e(Sg,ZK),e(ZK,Oze),e(Sg,Vze),e(Sg,dk),e(dk,Xze),e(Sg,zze),e(F,Qze),e(F,Rg),e(Rg,eZ),e(eZ,Wze),e(Rg,Hze),e(Rg,ck),e(ck,Uze),e(Rg,Jze),e(F,Yze),e(F,Bg),e(Bg,oZ),e(oZ,Kze),e(Bg,Zze),e(Bg,fk),e(fk,eQe),e(Bg,oQe),e(F,rQe),e(F,Pg),e(Pg,rZ),e(rZ,tQe),e(Pg,aQe),e(Pg,mk),e(mk,nQe),e(Pg,sQe),e(F,lQe),e(F,$g),e($g,tZ),e(tZ,iQe),e($g,dQe),e($g,gk),e(gk,cQe),e($g,fQe),e(F,mQe),e(F,Ig),e(Ig,aZ),e(aZ,gQe),e(Ig,hQe),e(Ig,hk),e(hk,pQe),e(Ig,_Qe),e(F,uQe),e(F,qg),e(qg,nZ),e(nZ,bQe),e(qg,FQe),e(qg,pk),e(pk,vQe),e(qg,TQe),e(mo,MQe),e(mo,sZ),e(sZ,EQe),e(mo,CQe),g(PC,mo,null),e(Qo,wQe),e(Qo,Ng),g($C,Ng,null),e(Ng,AQe),e(Ng,lZ),e(lZ,yQe),b(c,ERe,u),b(c,Wi,u),e(Wi,jg),e(jg,iZ),g(IC,iZ,null),e(Wi,LQe),e(Wi,dZ),e(dZ,xQe),b(c,CRe,u),b(c,Wo,u),g(qC,Wo,null),e(Wo,kQe),e(Wo,NC),e(NC,SQe),e(NC,_k),e(_k,RQe),e(NC,BQe),e(Wo,PQe),e(Wo,jC),e(jC,$Qe),e(jC,cZ),e(cZ,IQe),e(jC,qQe),e(Wo,NQe),e(Wo,go),g(DC,go,null),e(go,jQe),e(go,fZ),e(fZ,DQe),e(go,GQe),e(go,Oa),e(Oa,OQe),e(Oa,mZ),e(mZ,VQe),e(Oa,XQe),e(Oa,gZ),e(gZ,zQe),e(Oa,QQe),e(Oa,hZ),e(hZ,WQe),e(Oa,HQe),e(go,UQe),e(go,E),e(E,Qn),e(Qn,pZ),e(pZ,JQe),e(Qn,YQe),e(Qn,uk),e(uk,KQe),e(Qn,ZQe),e(Qn,bk),e(bk,eWe),e(Qn,oWe),e(E,rWe),e(E,Wn),e(Wn,_Z),e(_Z,tWe),e(Wn,aWe),e(Wn,Fk),e(Fk,nWe),e(Wn,sWe),e(Wn,vk),e(vk,lWe),e(Wn,iWe),e(E,dWe),e(E,Hn),e(Hn,uZ),e(uZ,cWe),e(Hn,fWe),e(Hn,Tk),e(Tk,mWe),e(Hn,gWe),e(Hn,Mk),e(Mk,hWe),e(Hn,pWe),e(E,_We),e(E,Dg),e(Dg,bZ),e(bZ,uWe),e(Dg,bWe),e(Dg,Ek),e(Ek,FWe),e(Dg,vWe),e(E,TWe),e(E,Un),e(Un,FZ),e(FZ,MWe),e(Un,EWe),e(Un,Ck),e(Ck,CWe),e(Un,wWe),e(Un,wk),e(wk,AWe),e(Un,yWe),e(E,LWe),e(E,Gg),e(Gg,vZ),e(vZ,xWe),e(Gg,kWe),e(Gg,Ak),e(Ak,SWe),e(Gg,RWe),e(E,BWe),e(E,Og),e(Og,TZ),e(TZ,PWe),e(Og,$We),e(Og,yk),e(yk,IWe),e(Og,qWe),e(E,NWe),e(E,Vg),e(Vg,MZ),e(MZ,jWe),e(Vg,DWe),e(Vg,Lk),e(Lk,GWe),e(Vg,OWe),e(E,VWe),e(E,Jn),e(Jn,EZ),e(EZ,XWe),e(Jn,zWe),e(Jn,xk),e(xk,QWe),e(Jn,WWe),e(Jn,kk),e(kk,HWe),e(Jn,UWe),e(E,JWe),e(E,Yn),e(Yn,CZ),e(CZ,YWe),e(Yn,KWe),e(Yn,Sk),e(Sk,ZWe),e(Yn,eHe),e(Yn,Rk),e(Rk,oHe),e(Yn,rHe),e(E,tHe),e(E,Kn),e(Kn,wZ),e(wZ,aHe),e(Kn,nHe),e(Kn,Bk),e(Bk,sHe),e(Kn,lHe),e(Kn,Pk),e(Pk,iHe),e(Kn,dHe),e(E,cHe),e(E,Xg),e(Xg,AZ),e(AZ,fHe),e(Xg,mHe),e(Xg,$k),e($k,gHe),e(Xg,hHe),e(E,pHe),e(E,zg),e(zg,yZ),e(yZ,_He),e(zg,uHe),e(zg,Ik),e(Ik,bHe),e(zg,FHe),e(E,vHe),e(E,Zn),e(Zn,LZ),e(LZ,THe),e(Zn,MHe),e(Zn,qk),e(qk,EHe),e(Zn,CHe),e(Zn,Nk),e(Nk,wHe),e(Zn,AHe),e(E,yHe),e(E,Qg),e(Qg,xZ),e(xZ,LHe),e(Qg,xHe),e(Qg,jk),e(jk,kHe),e(Qg,SHe),e(E,RHe),e(E,es),e(es,kZ),e(kZ,BHe),e(es,PHe),e(es,Dk),e(Dk,$He),e(es,IHe),e(es,Gk),e(Gk,qHe),e(es,NHe),e(E,jHe),e(E,os),e(os,SZ),e(SZ,DHe),e(os,GHe),e(os,Ok),e(Ok,OHe),e(os,VHe),e(os,Vk),e(Vk,XHe),e(os,zHe),e(E,QHe),e(E,rs),e(rs,RZ),e(RZ,WHe),e(rs,HHe),e(rs,Xk),e(Xk,UHe),e(rs,JHe),e(rs,BZ),e(BZ,YHe),e(rs,KHe),e(E,ZHe),e(E,Wg),e(Wg,PZ),e(PZ,eUe),e(Wg,oUe),e(Wg,zk),e(zk,rUe),e(Wg,tUe),e(E,aUe),e(E,ts),e(ts,$Z),e($Z,nUe),e(ts,sUe),e(ts,Qk),e(Qk,lUe),e(ts,iUe),e(ts,Wk),e(Wk,dUe),e(ts,cUe),e(E,fUe),e(E,as),e(as,IZ),e(IZ,mUe),e(as,gUe),e(as,Hk),e(Hk,hUe),e(as,pUe),e(as,Uk),e(Uk,_Ue),e(as,uUe),e(E,bUe),e(E,ns),e(ns,qZ),e(qZ,FUe),e(ns,vUe),e(ns,Jk),e(Jk,TUe),e(ns,MUe),e(ns,Yk),e(Yk,EUe),e(ns,CUe),e(E,wUe),e(E,ss),e(ss,NZ),e(NZ,AUe),e(ss,yUe),e(ss,Kk),e(Kk,LUe),e(ss,xUe),e(ss,Zk),e(Zk,kUe),e(ss,SUe),e(E,RUe),e(E,ls),e(ls,jZ),e(jZ,BUe),e(ls,PUe),e(ls,eS),e(eS,$Ue),e(ls,IUe),e(ls,oS),e(oS,qUe),e(ls,NUe),e(E,jUe),e(E,Hg),e(Hg,DZ),e(DZ,DUe),e(Hg,GUe),e(Hg,rS),e(rS,OUe),e(Hg,VUe),e(E,XUe),e(E,is),e(is,GZ),e(GZ,zUe),e(is,QUe),e(is,tS),e(tS,WUe),e(is,HUe),e(is,aS),e(aS,UUe),e(is,JUe),e(E,YUe),e(E,Ug),e(Ug,OZ),e(OZ,KUe),e(Ug,ZUe),e(Ug,nS),e(nS,eJe),e(Ug,oJe),e(E,rJe),e(E,ds),e(ds,VZ),e(VZ,tJe),e(ds,aJe),e(ds,sS),e(sS,nJe),e(ds,sJe),e(ds,lS),e(lS,lJe),e(ds,iJe),e(E,dJe),e(E,cs),e(cs,XZ),e(XZ,cJe),e(cs,fJe),e(cs,iS),e(iS,mJe),e(cs,gJe),e(cs,dS),e(dS,hJe),e(cs,pJe),e(E,_Je),e(E,fs),e(fs,zZ),e(zZ,uJe),e(fs,bJe),e(fs,cS),e(cS,FJe),e(fs,vJe),e(fs,fS),e(fS,TJe),e(fs,MJe),e(E,EJe),e(E,ms),e(ms,QZ),e(QZ,CJe),e(ms,wJe),e(ms,mS),e(mS,AJe),e(ms,yJe),e(ms,gS),e(gS,LJe),e(ms,xJe),e(E,kJe),e(E,Jg),e(Jg,WZ),e(WZ,SJe),e(Jg,RJe),e(Jg,hS),e(hS,BJe),e(Jg,PJe),e(E,$Je),e(E,gs),e(gs,HZ),e(HZ,IJe),e(gs,qJe),e(gs,pS),e(pS,NJe),e(gs,jJe),e(gs,_S),e(_S,DJe),e(gs,GJe),e(E,OJe),e(E,hs),e(hs,UZ),e(UZ,VJe),e(hs,XJe),e(hs,uS),e(uS,zJe),e(hs,QJe),e(hs,bS),e(bS,WJe),e(hs,HJe),e(E,UJe),e(E,ps),e(ps,JZ),e(JZ,JJe),e(ps,YJe),e(ps,FS),e(FS,KJe),e(ps,ZJe),e(ps,vS),e(vS,eYe),e(ps,oYe),e(E,rYe),e(E,_s),e(_s,YZ),e(YZ,tYe),e(_s,aYe),e(_s,TS),e(TS,nYe),e(_s,sYe),e(_s,MS),e(MS,lYe),e(_s,iYe),e(E,dYe),e(E,us),e(us,KZ),e(KZ,cYe),e(us,fYe),e(us,ES),e(ES,mYe),e(us,gYe),e(us,CS),e(CS,hYe),e(us,pYe),e(E,_Ye),e(E,bs),e(bs,ZZ),e(ZZ,uYe),e(bs,bYe),e(bs,wS),e(wS,FYe),e(bs,vYe),e(bs,AS),e(AS,TYe),e(bs,MYe),e(E,EYe),e(E,Yg),e(Yg,eee),e(eee,CYe),e(Yg,wYe),e(Yg,yS),e(yS,AYe),e(Yg,yYe),e(E,LYe),e(E,Fs),e(Fs,oee),e(oee,xYe),e(Fs,kYe),e(Fs,LS),e(LS,SYe),e(Fs,RYe),e(Fs,xS),e(xS,BYe),e(Fs,PYe),e(E,$Ye),e(E,Kg),e(Kg,ree),e(ree,IYe),e(Kg,qYe),e(Kg,kS),e(kS,NYe),e(Kg,jYe),e(E,DYe),e(E,Zg),e(Zg,tee),e(tee,GYe),e(Zg,OYe),e(Zg,SS),e(SS,VYe),e(Zg,XYe),e(E,zYe),e(E,vs),e(vs,aee),e(aee,QYe),e(vs,WYe),e(vs,RS),e(RS,HYe),e(vs,UYe),e(vs,BS),e(BS,JYe),e(vs,YYe),e(E,KYe),e(E,Ts),e(Ts,nee),e(nee,ZYe),e(Ts,eKe),e(Ts,PS),e(PS,oKe),e(Ts,rKe),e(Ts,$S),e($S,tKe),e(Ts,aKe),e(E,nKe),e(E,eh),e(eh,see),e(see,sKe),e(eh,lKe),e(eh,IS),e(IS,iKe),e(eh,dKe),e(E,cKe),e(E,Ms),e(Ms,lee),e(lee,fKe),e(Ms,mKe),e(Ms,qS),e(qS,gKe),e(Ms,hKe),e(Ms,NS),e(NS,pKe),e(Ms,_Ke),e(E,uKe),e(E,Es),e(Es,iee),e(iee,bKe),e(Es,FKe),e(Es,jS),e(jS,vKe),e(Es,TKe),e(Es,DS),e(DS,MKe),e(Es,EKe),e(E,CKe),e(E,Cs),e(Cs,dee),e(dee,wKe),e(Cs,AKe),e(Cs,GS),e(GS,yKe),e(Cs,LKe),e(Cs,OS),e(OS,xKe),e(Cs,kKe),e(E,SKe),e(E,ws),e(ws,cee),e(cee,RKe),e(ws,BKe),e(ws,VS),e(VS,PKe),e(ws,$Ke),e(ws,XS),e(XS,IKe),e(ws,qKe),e(E,NKe),e(E,As),e(As,fee),e(fee,jKe),e(As,DKe),e(As,zS),e(zS,GKe),e(As,OKe),e(As,QS),e(QS,VKe),e(As,XKe),e(E,zKe),e(E,oh),e(oh,mee),e(mee,QKe),e(oh,WKe),e(oh,WS),e(WS,HKe),e(oh,UKe),e(E,JKe),e(E,rh),e(rh,gee),e(gee,YKe),e(rh,KKe),e(rh,HS),e(HS,ZKe),e(rh,eZe),e(E,oZe),e(E,th),e(th,hee),e(hee,rZe),e(th,tZe),e(th,US),e(US,aZe),e(th,nZe),e(E,sZe),e(E,ah),e(ah,pee),e(pee,lZe),e(ah,iZe),e(ah,JS),e(JS,dZe),e(ah,cZe),e(E,fZe),e(E,ys),e(ys,_ee),e(_ee,mZe),e(ys,gZe),e(ys,YS),e(YS,hZe),e(ys,pZe),e(ys,KS),e(KS,_Ze),e(ys,uZe),e(E,bZe),e(E,nh),e(nh,uee),e(uee,FZe),e(nh,vZe),e(nh,ZS),e(ZS,TZe),e(nh,MZe),e(E,EZe),e(E,Ls),e(Ls,bee),e(bee,CZe),e(Ls,wZe),e(Ls,eR),e(eR,AZe),e(Ls,yZe),e(Ls,oR),e(oR,LZe),e(Ls,xZe),e(E,kZe),e(E,xs),e(xs,Fee),e(Fee,SZe),e(xs,RZe),e(xs,rR),e(rR,BZe),e(xs,PZe),e(xs,tR),e(tR,$Ze),e(xs,IZe),e(E,qZe),e(E,ks),e(ks,vee),e(vee,NZe),e(ks,jZe),e(ks,aR),e(aR,DZe),e(ks,GZe),e(ks,nR),e(nR,OZe),e(ks,VZe),e(E,XZe),e(E,Ss),e(Ss,Tee),e(Tee,zZe),e(Ss,QZe),e(Ss,sR),e(sR,WZe),e(Ss,HZe),e(Ss,lR),e(lR,UZe),e(Ss,JZe),e(E,YZe),e(E,Rs),e(Rs,Mee),e(Mee,KZe),e(Rs,ZZe),e(Rs,iR),e(iR,eeo),e(Rs,oeo),e(Rs,dR),e(dR,reo),e(Rs,teo),e(E,aeo),e(E,Bs),e(Bs,Eee),e(Eee,neo),e(Bs,seo),e(Bs,cR),e(cR,leo),e(Bs,ieo),e(Bs,fR),e(fR,deo),e(Bs,ceo),e(E,feo),e(E,sh),e(sh,Cee),e(Cee,meo),e(sh,geo),e(sh,mR),e(mR,heo),e(sh,peo),e(E,_eo),e(E,lh),e(lh,wee),e(wee,ueo),e(lh,beo),e(lh,gR),e(gR,Feo),e(lh,veo),e(E,Teo),e(E,Ps),e(Ps,Aee),e(Aee,Meo),e(Ps,Eeo),e(Ps,hR),e(hR,Ceo),e(Ps,weo),e(Ps,pR),e(pR,Aeo),e(Ps,yeo),e(E,Leo),e(E,$s),e($s,yee),e(yee,xeo),e($s,keo),e($s,_R),e(_R,Seo),e($s,Reo),e($s,uR),e(uR,Beo),e($s,Peo),e(E,$eo),e(E,Is),e(Is,Lee),e(Lee,Ieo),e(Is,qeo),e(Is,bR),e(bR,Neo),e(Is,jeo),e(Is,FR),e(FR,Deo),e(Is,Geo),e(E,Oeo),e(E,ih),e(ih,xee),e(xee,Veo),e(ih,Xeo),e(ih,vR),e(vR,zeo),e(ih,Qeo),e(E,Weo),e(E,dh),e(dh,kee),e(kee,Heo),e(dh,Ueo),e(dh,TR),e(TR,Jeo),e(dh,Yeo),e(E,Keo),e(E,ch),e(ch,See),e(See,Zeo),e(ch,eoo),e(ch,MR),e(MR,ooo),e(ch,roo),e(E,too),e(E,fh),e(fh,Ree),e(Ree,aoo),e(fh,noo),e(fh,ER),e(ER,soo),e(fh,loo),e(E,ioo),e(E,mh),e(mh,Bee),e(Bee,doo),e(mh,coo),e(mh,CR),e(CR,foo),e(mh,moo),e(E,goo),e(E,qs),e(qs,Pee),e(Pee,hoo),e(qs,poo),e(qs,wR),e(wR,_oo),e(qs,uoo),e(qs,AR),e(AR,boo),e(qs,Foo),e(E,voo),e(E,gh),e(gh,$ee),e($ee,Too),e(gh,Moo),e(gh,yR),e(yR,Eoo),e(gh,Coo),e(E,woo),e(E,hh),e(hh,Iee),e(Iee,Aoo),e(hh,yoo),e(hh,LR),e(LR,Loo),e(hh,xoo),e(E,koo),e(E,Ns),e(Ns,qee),e(qee,Soo),e(Ns,Roo),e(Ns,xR),e(xR,Boo),e(Ns,Poo),e(Ns,kR),e(kR,$oo),e(Ns,Ioo),e(E,qoo),e(E,js),e(js,Nee),e(Nee,Noo),e(js,joo),e(js,SR),e(SR,Doo),e(js,Goo),e(js,RR),e(RR,Ooo),e(js,Voo),e(go,Xoo),e(go,jee),e(jee,zoo),e(go,Qoo),g(GC,go,null),e(Wo,Woo),e(Wo,ph),g(OC,ph,null),e(ph,Hoo),e(ph,Dee),e(Dee,Uoo),b(c,wRe,u),b(c,Hi,u),e(Hi,_h),e(_h,Gee),g(VC,Gee,null),e(Hi,Joo),e(Hi,Oee),e(Oee,Yoo),b(c,ARe,u),b(c,Ho,u),g(XC,Ho,null),e(Ho,Koo),e(Ho,zC),e(zC,Zoo),e(zC,BR),e(BR,ero),e(zC,oro),e(Ho,rro),e(Ho,QC),e(QC,tro),e(QC,Vee),e(Vee,aro),e(QC,nro),e(Ho,sro),e(Ho,$e),g(WC,$e,null),e($e,lro),e($e,Xee),e(Xee,iro),e($e,dro),e($e,Va),e(Va,cro),e(Va,zee),e(zee,fro),e(Va,mro),e(Va,Qee),e(Qee,gro),e(Va,hro),e(Va,Wee),e(Wee,pro),e(Va,_ro),e($e,uro),e($e,ee),e(ee,uh),e(uh,Hee),e(Hee,bro),e(uh,Fro),e(uh,PR),e(PR,vro),e(uh,Tro),e(ee,Mro),e(ee,bh),e(bh,Uee),e(Uee,Ero),e(bh,Cro),e(bh,$R),e($R,wro),e(bh,Aro),e(ee,yro),e(ee,Fh),e(Fh,Jee),e(Jee,Lro),e(Fh,xro),e(Fh,IR),e(IR,kro),e(Fh,Sro),e(ee,Rro),e(ee,vh),e(vh,Yee),e(Yee,Bro),e(vh,Pro),e(vh,qR),e(qR,$ro),e(vh,Iro),e(ee,qro),e(ee,Th),e(Th,Kee),e(Kee,Nro),e(Th,jro),e(Th,NR),e(NR,Dro),e(Th,Gro),e(ee,Oro),e(ee,Mh),e(Mh,Zee),e(Zee,Vro),e(Mh,Xro),e(Mh,jR),e(jR,zro),e(Mh,Qro),e(ee,Wro),e(ee,Eh),e(Eh,eoe),e(eoe,Hro),e(Eh,Uro),e(Eh,DR),e(DR,Jro),e(Eh,Yro),e(ee,Kro),e(ee,Ch),e(Ch,ooe),e(ooe,Zro),e(Ch,eto),e(Ch,GR),e(GR,oto),e(Ch,rto),e(ee,tto),e(ee,wh),e(wh,roe),e(roe,ato),e(wh,nto),e(wh,OR),e(OR,sto),e(wh,lto),e(ee,ito),e(ee,Ah),e(Ah,toe),e(toe,dto),e(Ah,cto),e(Ah,VR),e(VR,fto),e(Ah,mto),e(ee,gto),e(ee,yh),e(yh,aoe),e(aoe,hto),e(yh,pto),e(yh,XR),e(XR,_to),e(yh,uto),e(ee,bto),e(ee,Lh),e(Lh,noe),e(noe,Fto),e(Lh,vto),e(Lh,zR),e(zR,Tto),e(Lh,Mto),e(ee,Eto),e(ee,xh),e(xh,soe),e(soe,Cto),e(xh,wto),e(xh,QR),e(QR,Ato),e(xh,yto),e(ee,Lto),e(ee,kh),e(kh,loe),e(loe,xto),e(kh,kto),e(kh,WR),e(WR,Sto),e(kh,Rto),e(ee,Bto),e(ee,Sh),e(Sh,ioe),e(ioe,Pto),e(Sh,$to),e(Sh,HR),e(HR,Ito),e(Sh,qto),e(ee,Nto),e(ee,Rh),e(Rh,doe),e(doe,jto),e(Rh,Dto),e(Rh,UR),e(UR,Gto),e(Rh,Oto),e(ee,Vto),e(ee,Bh),e(Bh,coe),e(coe,Xto),e(Bh,zto),e(Bh,JR),e(JR,Qto),e(Bh,Wto),e(ee,Hto),e(ee,Ph),e(Ph,foe),e(foe,Uto),e(Ph,Jto),e(Ph,YR),e(YR,Yto),e(Ph,Kto),e(ee,Zto),e(ee,$h),e($h,moe),e(moe,eao),e($h,oao),e($h,KR),e(KR,rao),e($h,tao),e($e,aao),g(Ih,$e,null),e($e,nao),e($e,goe),e(goe,sao),e($e,lao),g(HC,$e,null),e(Ho,iao),e(Ho,qh),g(UC,qh,null),e(qh,dao),e(qh,hoe),e(hoe,cao),b(c,yRe,u),b(c,Ui,u),e(Ui,Nh),e(Nh,poe),g(JC,poe,null),e(Ui,fao),e(Ui,_oe),e(_oe,mao),b(c,LRe,u),b(c,Uo,u),g(YC,Uo,null),e(Uo,gao),e(Uo,KC),e(KC,hao),e(KC,ZR),e(ZR,pao),e(KC,_ao),e(Uo,uao),e(Uo,ZC),e(ZC,bao),e(ZC,uoe),e(uoe,Fao),e(ZC,vao),e(Uo,Tao),e(Uo,Ie),g(ew,Ie,null),e(Ie,Mao),e(Ie,boe),e(boe,Eao),e(Ie,Cao),e(Ie,Ji),e(Ji,wao),e(Ji,Foe),e(Foe,Aao),e(Ji,yao),e(Ji,voe),e(voe,Lao),e(Ji,xao),e(Ie,kao),e(Ie,ke),e(ke,jh),e(jh,Toe),e(Toe,Sao),e(jh,Rao),e(jh,eB),e(eB,Bao),e(jh,Pao),e(ke,$ao),e(ke,Dh),e(Dh,Moe),e(Moe,Iao),e(Dh,qao),e(Dh,oB),e(oB,Nao),e(Dh,jao),e(ke,Dao),e(ke,Gh),e(Gh,Eoe),e(Eoe,Gao),e(Gh,Oao),e(Gh,rB),e(rB,Vao),e(Gh,Xao),e(ke,zao),e(ke,Oh),e(Oh,Coe),e(Coe,Qao),e(Oh,Wao),e(Oh,tB),e(tB,Hao),e(Oh,Uao),e(ke,Jao),e(ke,Vh),e(Vh,woe),e(woe,Yao),e(Vh,Kao),e(Vh,aB),e(aB,Zao),e(Vh,eno),e(ke,ono),e(ke,Xh),e(Xh,Aoe),e(Aoe,rno),e(Xh,tno),e(Xh,nB),e(nB,ano),e(Xh,nno),e(ke,sno),e(ke,zh),e(zh,yoe),e(yoe,lno),e(zh,ino),e(zh,sB),e(sB,dno),e(zh,cno),e(ke,fno),e(ke,Qh),e(Qh,Loe),e(Loe,mno),e(Qh,gno),e(Qh,lB),e(lB,hno),e(Qh,pno),e(Ie,_no),g(Wh,Ie,null),e(Ie,uno),e(Ie,xoe),e(xoe,bno),e(Ie,Fno),g(ow,Ie,null),e(Uo,vno),e(Uo,Hh),g(rw,Hh,null),e(Hh,Tno),e(Hh,koe),e(koe,Mno),b(c,xRe,u),b(c,Yi,u),e(Yi,Uh),e(Uh,Soe),g(tw,Soe,null),e(Yi,Eno),e(Yi,Roe),e(Roe,Cno),b(c,kRe,u),b(c,Jo,u),g(aw,Jo,null),e(Jo,wno),e(Jo,Ki),e(Ki,Ano),e(Ki,iB),e(iB,yno),e(Ki,Lno),e(Ki,dB),e(dB,xno),e(Ki,kno),e(Jo,Sno),e(Jo,nw),e(nw,Rno),e(nw,Boe),e(Boe,Bno),e(nw,Pno),e(Jo,$no),e(Jo,Xr),g(sw,Xr,null),e(Xr,Ino),e(Xr,Poe),e(Poe,qno),e(Xr,Nno),e(Xr,Zi),e(Zi,jno),e(Zi,$oe),e($oe,Dno),e(Zi,Gno),e(Zi,cB),e(cB,Ono),e(Zi,Vno),e(Xr,Xno),e(Xr,Ioe),e(Ioe,zno),e(Xr,Qno),g(lw,Xr,null),e(Jo,Wno),e(Jo,qe),g(iw,qe,null),e(qe,Hno),e(qe,qoe),e(qoe,Uno),e(qe,Jno),e(qe,Xa),e(Xa,Yno),e(Xa,Noe),e(Noe,Kno),e(Xa,Zno),e(Xa,joe),e(joe,eso),e(Xa,oso),e(Xa,Doe),e(Doe,rso),e(Xa,tso),e(qe,aso),e(qe,T),e(T,Jh),e(Jh,Goe),e(Goe,nso),e(Jh,sso),e(Jh,fB),e(fB,lso),e(Jh,iso),e(T,dso),e(T,Yh),e(Yh,Ooe),e(Ooe,cso),e(Yh,fso),e(Yh,mB),e(mB,mso),e(Yh,gso),e(T,hso),e(T,Kh),e(Kh,Voe),e(Voe,pso),e(Kh,_so),e(Kh,gB),e(gB,uso),e(Kh,bso),e(T,Fso),e(T,Zh),e(Zh,Xoe),e(Xoe,vso),e(Zh,Tso),e(Zh,hB),e(hB,Mso),e(Zh,Eso),e(T,Cso),e(T,ep),e(ep,zoe),e(zoe,wso),e(ep,Aso),e(ep,pB),e(pB,yso),e(ep,Lso),e(T,xso),e(T,op),e(op,Qoe),e(Qoe,kso),e(op,Sso),e(op,_B),e(_B,Rso),e(op,Bso),e(T,Pso),e(T,rp),e(rp,Woe),e(Woe,$so),e(rp,Iso),e(rp,uB),e(uB,qso),e(rp,Nso),e(T,jso),e(T,tp),e(tp,Hoe),e(Hoe,Dso),e(tp,Gso),e(tp,bB),e(bB,Oso),e(tp,Vso),e(T,Xso),e(T,ap),e(ap,Uoe),e(Uoe,zso),e(ap,Qso),e(ap,FB),e(FB,Wso),e(ap,Hso),e(T,Uso),e(T,np),e(np,Joe),e(Joe,Jso),e(np,Yso),e(np,vB),e(vB,Kso),e(np,Zso),e(T,elo),e(T,sp),e(sp,Yoe),e(Yoe,olo),e(sp,rlo),e(sp,TB),e(TB,tlo),e(sp,alo),e(T,nlo),e(T,lp),e(lp,Koe),e(Koe,slo),e(lp,llo),e(lp,MB),e(MB,ilo),e(lp,dlo),e(T,clo),e(T,ip),e(ip,Zoe),e(Zoe,flo),e(ip,mlo),e(ip,EB),e(EB,glo),e(ip,hlo),e(T,plo),e(T,dp),e(dp,ere),e(ere,_lo),e(dp,ulo),e(dp,CB),e(CB,blo),e(dp,Flo),e(T,vlo),e(T,cp),e(cp,ore),e(ore,Tlo),e(cp,Mlo),e(cp,wB),e(wB,Elo),e(cp,Clo),e(T,wlo),e(T,fp),e(fp,rre),e(rre,Alo),e(fp,ylo),e(fp,AB),e(AB,Llo),e(fp,xlo),e(T,klo),e(T,mp),e(mp,tre),e(tre,Slo),e(mp,Rlo),e(mp,yB),e(yB,Blo),e(mp,Plo),e(T,$lo),e(T,gp),e(gp,are),e(are,Ilo),e(gp,qlo),e(gp,LB),e(LB,Nlo),e(gp,jlo),e(T,Dlo),e(T,hp),e(hp,nre),e(nre,Glo),e(hp,Olo),e(hp,xB),e(xB,Vlo),e(hp,Xlo),e(T,zlo),e(T,pp),e(pp,sre),e(sre,Qlo),e(pp,Wlo),e(pp,kB),e(kB,Hlo),e(pp,Ulo),e(T,Jlo),e(T,_p),e(_p,lre),e(lre,Ylo),e(_p,Klo),e(_p,SB),e(SB,Zlo),e(_p,eio),e(T,oio),e(T,up),e(up,ire),e(ire,rio),e(up,tio),e(up,RB),e(RB,aio),e(up,nio),e(T,sio),e(T,bp),e(bp,dre),e(dre,lio),e(bp,iio),e(bp,BB),e(BB,dio),e(bp,cio),e(T,fio),e(T,Fp),e(Fp,cre),e(cre,mio),e(Fp,gio),e(Fp,PB),e(PB,hio),e(Fp,pio),e(T,_io),e(T,vp),e(vp,fre),e(fre,uio),e(vp,bio),e(vp,$B),e($B,Fio),e(vp,vio),e(T,Tio),e(T,Tp),e(Tp,mre),e(mre,Mio),e(Tp,Eio),e(Tp,IB),e(IB,Cio),e(Tp,wio),e(T,Aio),e(T,Mp),e(Mp,gre),e(gre,yio),e(Mp,Lio),e(Mp,qB),e(qB,xio),e(Mp,kio),e(T,Sio),e(T,Ep),e(Ep,hre),e(hre,Rio),e(Ep,Bio),e(Ep,NB),e(NB,Pio),e(Ep,$io),e(T,Iio),e(T,Cp),e(Cp,pre),e(pre,qio),e(Cp,Nio),e(Cp,jB),e(jB,jio),e(Cp,Dio),e(T,Gio),e(T,Ds),e(Ds,_re),e(_re,Oio),e(Ds,Vio),e(Ds,DB),e(DB,Xio),e(Ds,zio),e(Ds,GB),e(GB,Qio),e(Ds,Wio),e(T,Hio),e(T,wp),e(wp,ure),e(ure,Uio),e(wp,Jio),e(wp,OB),e(OB,Yio),e(wp,Kio),e(T,Zio),e(T,Ap),e(Ap,bre),e(bre,edo),e(Ap,odo),e(Ap,VB),e(VB,rdo),e(Ap,tdo),e(T,ado),e(T,yp),e(yp,Fre),e(Fre,ndo),e(yp,sdo),e(yp,XB),e(XB,ldo),e(yp,ido),e(T,ddo),e(T,Lp),e(Lp,vre),e(vre,cdo),e(Lp,fdo),e(Lp,zB),e(zB,mdo),e(Lp,gdo),e(T,hdo),e(T,xp),e(xp,Tre),e(Tre,pdo),e(xp,_do),e(xp,QB),e(QB,udo),e(xp,bdo),e(T,Fdo),e(T,kp),e(kp,Mre),e(Mre,vdo),e(kp,Tdo),e(kp,WB),e(WB,Mdo),e(kp,Edo),e(T,Cdo),e(T,Sp),e(Sp,Ere),e(Ere,wdo),e(Sp,Ado),e(Sp,HB),e(HB,ydo),e(Sp,Ldo),e(T,xdo),e(T,Rp),e(Rp,Cre),e(Cre,kdo),e(Rp,Sdo),e(Rp,UB),e(UB,Rdo),e(Rp,Bdo),e(T,Pdo),e(T,Bp),e(Bp,wre),e(wre,$do),e(Bp,Ido),e(Bp,JB),e(JB,qdo),e(Bp,Ndo),e(T,jdo),e(T,Pp),e(Pp,Are),e(Are,Ddo),e(Pp,Gdo),e(Pp,YB),e(YB,Odo),e(Pp,Vdo),e(T,Xdo),e(T,$p),e($p,yre),e(yre,zdo),e($p,Qdo),e($p,KB),e(KB,Wdo),e($p,Hdo),e(T,Udo),e(T,Ip),e(Ip,Lre),e(Lre,Jdo),e(Ip,Ydo),e(Ip,ZB),e(ZB,Kdo),e(Ip,Zdo),e(T,eco),e(T,qp),e(qp,xre),e(xre,oco),e(qp,rco),e(qp,eP),e(eP,tco),e(qp,aco),e(T,nco),e(T,Np),e(Np,kre),e(kre,sco),e(Np,lco),e(Np,oP),e(oP,ico),e(Np,dco),e(T,cco),e(T,jp),e(jp,Sre),e(Sre,fco),e(jp,mco),e(jp,rP),e(rP,gco),e(jp,hco),e(T,pco),e(T,Dp),e(Dp,Rre),e(Rre,_co),e(Dp,uco),e(Dp,tP),e(tP,bco),e(Dp,Fco),e(T,vco),e(T,Gp),e(Gp,Bre),e(Bre,Tco),e(Gp,Mco),e(Gp,aP),e(aP,Eco),e(Gp,Cco),e(T,wco),e(T,Op),e(Op,Pre),e(Pre,Aco),e(Op,yco),e(Op,nP),e(nP,Lco),e(Op,xco),e(T,kco),e(T,Vp),e(Vp,$re),e($re,Sco),e(Vp,Rco),e(Vp,sP),e(sP,Bco),e(Vp,Pco),e(T,$co),e(T,Xp),e(Xp,Ire),e(Ire,Ico),e(Xp,qco),e(Xp,lP),e(lP,Nco),e(Xp,jco),e(T,Dco),e(T,zp),e(zp,qre),e(qre,Gco),e(zp,Oco),e(zp,iP),e(iP,Vco),e(zp,Xco),e(T,zco),e(T,Qp),e(Qp,Nre),e(Nre,Qco),e(Qp,Wco),e(Qp,dP),e(dP,Hco),e(Qp,Uco),e(T,Jco),e(T,Wp),e(Wp,jre),e(jre,Yco),e(Wp,Kco),e(Wp,cP),e(cP,Zco),e(Wp,efo),e(T,ofo),e(T,Hp),e(Hp,Dre),e(Dre,rfo),e(Hp,tfo),e(Hp,fP),e(fP,afo),e(Hp,nfo),e(T,sfo),e(T,Up),e(Up,Gre),e(Gre,lfo),e(Up,ifo),e(Up,mP),e(mP,dfo),e(Up,cfo),e(T,ffo),e(T,Jp),e(Jp,Ore),e(Ore,mfo),e(Jp,gfo),e(Jp,gP),e(gP,hfo),e(Jp,pfo),e(T,_fo),e(T,Yp),e(Yp,Vre),e(Vre,ufo),e(Yp,bfo),e(Yp,hP),e(hP,Ffo),e(Yp,vfo),e(T,Tfo),e(T,Kp),e(Kp,Xre),e(Xre,Mfo),e(Kp,Efo),e(Kp,pP),e(pP,Cfo),e(Kp,wfo),e(T,Afo),e(T,Zp),e(Zp,zre),e(zre,yfo),e(Zp,Lfo),e(Zp,_P),e(_P,xfo),e(Zp,kfo),e(T,Sfo),e(T,e_),e(e_,Qre),e(Qre,Rfo),e(e_,Bfo),e(e_,uP),e(uP,Pfo),e(e_,$fo),e(T,Ifo),e(T,o_),e(o_,Wre),e(Wre,qfo),e(o_,Nfo),e(o_,bP),e(bP,jfo),e(o_,Dfo),e(T,Gfo),e(T,r_),e(r_,Hre),e(Hre,Ofo),e(r_,Vfo),e(r_,FP),e(FP,Xfo),e(r_,zfo),e(T,Qfo),e(T,t_),e(t_,Ure),e(Ure,Wfo),e(t_,Hfo),e(t_,vP),e(vP,Ufo),e(t_,Jfo),e(T,Yfo),e(T,a_),e(a_,Jre),e(Jre,Kfo),e(a_,Zfo),e(a_,TP),e(TP,emo),e(a_,omo),e(T,rmo),e(T,n_),e(n_,Yre),e(Yre,tmo),e(n_,amo),e(n_,MP),e(MP,nmo),e(n_,smo),e(T,lmo),e(T,s_),e(s_,Kre),e(Kre,imo),e(s_,dmo),e(s_,EP),e(EP,cmo),e(s_,fmo),e(T,mmo),e(T,l_),e(l_,Zre),e(Zre,gmo),e(l_,hmo),e(l_,CP),e(CP,pmo),e(l_,_mo),e(T,umo),e(T,i_),e(i_,ete),e(ete,bmo),e(i_,Fmo),e(i_,wP),e(wP,vmo),e(i_,Tmo),e(T,Mmo),e(T,d_),e(d_,ote),e(ote,Emo),e(d_,Cmo),e(d_,AP),e(AP,wmo),e(d_,Amo),e(T,ymo),e(T,c_),e(c_,rte),e(rte,Lmo),e(c_,xmo),e(c_,yP),e(yP,kmo),e(c_,Smo),e(T,Rmo),e(T,f_),e(f_,tte),e(tte,Bmo),e(f_,Pmo),e(f_,LP),e(LP,$mo),e(f_,Imo),e(T,qmo),e(T,m_),e(m_,ate),e(ate,Nmo),e(m_,jmo),e(m_,xP),e(xP,Dmo),e(m_,Gmo),e(T,Omo),e(T,g_),e(g_,nte),e(nte,Vmo),e(g_,Xmo),e(g_,kP),e(kP,zmo),e(g_,Qmo),e(T,Wmo),e(T,h_),e(h_,ste),e(ste,Hmo),e(h_,Umo),e(h_,SP),e(SP,Jmo),e(h_,Ymo),e(T,Kmo),e(T,p_),e(p_,lte),e(lte,Zmo),e(p_,ego),e(p_,RP),e(RP,ogo),e(p_,rgo),e(T,tgo),e(T,__),e(__,ite),e(ite,ago),e(__,ngo),e(__,BP),e(BP,sgo),e(__,lgo),e(T,igo),e(T,u_),e(u_,dte),e(dte,dgo),e(u_,cgo),e(u_,PP),e(PP,fgo),e(u_,mgo),e(T,ggo),e(T,b_),e(b_,cte),e(cte,hgo),e(b_,pgo),e(b_,$P),e($P,_go),e(b_,ugo),e(T,bgo),e(T,F_),e(F_,fte),e(fte,Fgo),e(F_,vgo),e(F_,IP),e(IP,Tgo),e(F_,Mgo),e(T,Ego),e(T,v_),e(v_,mte),e(mte,Cgo),e(v_,wgo),e(v_,qP),e(qP,Ago),e(v_,ygo),e(T,Lgo),e(T,T_),e(T_,gte),e(gte,xgo),e(T_,kgo),e(T_,NP),e(NP,Sgo),e(T_,Rgo),e(T,Bgo),e(T,M_),e(M_,hte),e(hte,Pgo),e(M_,$go),e(M_,jP),e(jP,Igo),e(M_,qgo),e(T,Ngo),e(T,E_),e(E_,pte),e(pte,jgo),e(E_,Dgo),e(E_,DP),e(DP,Ggo),e(E_,Ogo),e(T,Vgo),e(T,C_),e(C_,_te),e(_te,Xgo),e(C_,zgo),e(C_,GP),e(GP,Qgo),e(C_,Wgo),e(T,Hgo),e(T,w_),e(w_,ute),e(ute,Ugo),e(w_,Jgo),e(w_,OP),e(OP,Ygo),e(w_,Kgo),e(T,Zgo),e(T,A_),e(A_,bte),e(bte,eho),e(A_,oho),e(A_,VP),e(VP,rho),e(A_,tho),e(T,aho),e(T,y_),e(y_,Fte),e(Fte,nho),e(y_,sho),e(y_,XP),e(XP,lho),e(y_,iho),e(T,dho),e(T,L_),e(L_,vte),e(vte,cho),e(L_,fho),e(L_,zP),e(zP,mho),e(L_,gho),e(T,hho),e(T,x_),e(x_,Tte),e(Tte,pho),e(x_,_ho),e(x_,QP),e(QP,uho),e(x_,bho),e(T,Fho),e(T,k_),e(k_,Mte),e(Mte,vho),e(k_,Tho),e(k_,WP),e(WP,Mho),e(k_,Eho),e(T,Cho),e(T,S_),e(S_,Ete),e(Ete,who),e(S_,Aho),e(S_,HP),e(HP,yho),e(S_,Lho),e(T,xho),e(T,R_),e(R_,Cte),e(Cte,kho),e(R_,Sho),e(R_,UP),e(UP,Rho),e(R_,Bho),e(T,Pho),e(T,B_),e(B_,wte),e(wte,$ho),e(B_,Iho),e(B_,JP),e(JP,qho),e(B_,Nho),e(qe,jho),e(qe,P_),e(P_,Dho),e(P_,Ate),e(Ate,Gho),e(P_,Oho),e(P_,yte),e(yte,Vho),e(qe,Xho),e(qe,Lte),e(Lte,zho),e(qe,Qho),g(dw,qe,null),b(c,SRe,u),b(c,ed,u),e(ed,$_),e($_,xte),g(cw,xte,null),e(ed,Who),e(ed,kte),e(kte,Hho),b(c,RRe,u),b(c,Yo,u),g(fw,Yo,null),e(Yo,Uho),e(Yo,od),e(od,Jho),e(od,YP),e(YP,Yho),e(od,Kho),e(od,KP),e(KP,Zho),e(od,epo),e(Yo,opo),e(Yo,mw),e(mw,rpo),e(mw,Ste),e(Ste,tpo),e(mw,apo),e(Yo,npo),e(Yo,zr),g(gw,zr,null),e(zr,spo),e(zr,Rte),e(Rte,lpo),e(zr,ipo),e(zr,rd),e(rd,dpo),e(rd,Bte),e(Bte,cpo),e(rd,fpo),e(rd,ZP),e(ZP,mpo),e(rd,gpo),e(zr,hpo),e(zr,Pte),e(Pte,ppo),e(zr,_po),g(hw,zr,null),e(Yo,upo),e(Yo,Ne),g(pw,Ne,null),e(Ne,bpo),e(Ne,$te),e($te,Fpo),e(Ne,vpo),e(Ne,za),e(za,Tpo),e(za,Ite),e(Ite,Mpo),e(za,Epo),e(za,qte),e(qte,Cpo),e(za,wpo),e(za,Nte),e(Nte,Apo),e(za,ypo),e(Ne,Lpo),e(Ne,S),e(S,I_),e(I_,jte),e(jte,xpo),e(I_,kpo),e(I_,e$),e(e$,Spo),e(I_,Rpo),e(S,Bpo),e(S,q_),e(q_,Dte),e(Dte,Ppo),e(q_,$po),e(q_,o$),e(o$,Ipo),e(q_,qpo),e(S,Npo),e(S,N_),e(N_,Gte),e(Gte,jpo),e(N_,Dpo),e(N_,r$),e(r$,Gpo),e(N_,Opo),e(S,Vpo),e(S,j_),e(j_,Ote),e(Ote,Xpo),e(j_,zpo),e(j_,t$),e(t$,Qpo),e(j_,Wpo),e(S,Hpo),e(S,D_),e(D_,Vte),e(Vte,Upo),e(D_,Jpo),e(D_,a$),e(a$,Ypo),e(D_,Kpo),e(S,Zpo),e(S,G_),e(G_,Xte),e(Xte,e_o),e(G_,o_o),e(G_,n$),e(n$,r_o),e(G_,t_o),e(S,a_o),e(S,O_),e(O_,zte),e(zte,n_o),e(O_,s_o),e(O_,s$),e(s$,l_o),e(O_,i_o),e(S,d_o),e(S,V_),e(V_,Qte),e(Qte,c_o),e(V_,f_o),e(V_,l$),e(l$,m_o),e(V_,g_o),e(S,h_o),e(S,X_),e(X_,Wte),e(Wte,p_o),e(X_,__o),e(X_,i$),e(i$,u_o),e(X_,b_o),e(S,F_o),e(S,z_),e(z_,Hte),e(Hte,v_o),e(z_,T_o),e(z_,d$),e(d$,M_o),e(z_,E_o),e(S,C_o),e(S,Q_),e(Q_,Ute),e(Ute,w_o),e(Q_,A_o),e(Q_,c$),e(c$,y_o),e(Q_,L_o),e(S,x_o),e(S,W_),e(W_,Jte),e(Jte,k_o),e(W_,S_o),e(W_,f$),e(f$,R_o),e(W_,B_o),e(S,P_o),e(S,H_),e(H_,Yte),e(Yte,$_o),e(H_,I_o),e(H_,m$),e(m$,q_o),e(H_,N_o),e(S,j_o),e(S,U_),e(U_,Kte),e(Kte,D_o),e(U_,G_o),e(U_,g$),e(g$,O_o),e(U_,V_o),e(S,X_o),e(S,J_),e(J_,Zte),e(Zte,z_o),e(J_,Q_o),e(J_,h$),e(h$,W_o),e(J_,H_o),e(S,U_o),e(S,Y_),e(Y_,eae),e(eae,J_o),e(Y_,Y_o),e(Y_,p$),e(p$,K_o),e(Y_,Z_o),e(S,euo),e(S,K_),e(K_,oae),e(oae,ouo),e(K_,ruo),e(K_,_$),e(_$,tuo),e(K_,auo),e(S,nuo),e(S,Z_),e(Z_,rae),e(rae,suo),e(Z_,luo),e(Z_,u$),e(u$,iuo),e(Z_,duo),e(S,cuo),e(S,eu),e(eu,tae),e(tae,fuo),e(eu,muo),e(eu,b$),e(b$,guo),e(eu,huo),e(S,puo),e(S,ou),e(ou,aae),e(aae,_uo),e(ou,uuo),e(ou,F$),e(F$,buo),e(ou,Fuo),e(S,vuo),e(S,ru),e(ru,nae),e(nae,Tuo),e(ru,Muo),e(ru,v$),e(v$,Euo),e(ru,Cuo),e(S,wuo),e(S,tu),e(tu,sae),e(sae,Auo),e(tu,yuo),e(tu,T$),e(T$,Luo),e(tu,xuo),e(S,kuo),e(S,au),e(au,lae),e(lae,Suo),e(au,Ruo),e(au,M$),e(M$,Buo),e(au,Puo),e(S,$uo),e(S,nu),e(nu,iae),e(iae,Iuo),e(nu,quo),e(nu,E$),e(E$,Nuo),e(nu,juo),e(S,Duo),e(S,su),e(su,dae),e(dae,Guo),e(su,Ouo),e(su,C$),e(C$,Vuo),e(su,Xuo),e(S,zuo),e(S,lu),e(lu,cae),e(cae,Quo),e(lu,Wuo),e(lu,w$),e(w$,Huo),e(lu,Uuo),e(S,Juo),e(S,iu),e(iu,fae),e(fae,Yuo),e(iu,Kuo),e(iu,A$),e(A$,Zuo),e(iu,e5o),e(S,o5o),e(S,du),e(du,mae),e(mae,r5o),e(du,t5o),e(du,y$),e(y$,a5o),e(du,n5o),e(S,s5o),e(S,cu),e(cu,gae),e(gae,l5o),e(cu,i5o),e(cu,L$),e(L$,d5o),e(cu,c5o),e(S,f5o),e(S,fu),e(fu,hae),e(hae,m5o),e(fu,g5o),e(fu,x$),e(x$,h5o),e(fu,p5o),e(S,_5o),e(S,mu),e(mu,pae),e(pae,u5o),e(mu,b5o),e(mu,k$),e(k$,F5o),e(mu,v5o),e(S,T5o),e(S,gu),e(gu,_ae),e(_ae,M5o),e(gu,E5o),e(gu,S$),e(S$,C5o),e(gu,w5o),e(S,A5o),e(S,hu),e(hu,uae),e(uae,y5o),e(hu,L5o),e(hu,R$),e(R$,x5o),e(hu,k5o),e(S,S5o),e(S,pu),e(pu,bae),e(bae,R5o),e(pu,B5o),e(pu,B$),e(B$,P5o),e(pu,$5o),e(S,I5o),e(S,_u),e(_u,Fae),e(Fae,q5o),e(_u,N5o),e(_u,P$),e(P$,j5o),e(_u,D5o),e(S,G5o),e(S,uu),e(uu,vae),e(vae,O5o),e(uu,V5o),e(uu,$$),e($$,X5o),e(uu,z5o),e(S,Q5o),e(S,bu),e(bu,Tae),e(Tae,W5o),e(bu,H5o),e(bu,I$),e(I$,U5o),e(bu,J5o),e(S,Y5o),e(S,Fu),e(Fu,Mae),e(Mae,K5o),e(Fu,Z5o),e(Fu,q$),e(q$,e2o),e(Fu,o2o),e(S,r2o),e(S,vu),e(vu,Eae),e(Eae,t2o),e(vu,a2o),e(vu,N$),e(N$,n2o),e(vu,s2o),e(Ne,l2o),e(Ne,Tu),e(Tu,i2o),e(Tu,Cae),e(Cae,d2o),e(Tu,c2o),e(Tu,wae),e(wae,f2o),e(Ne,m2o),e(Ne,Aae),e(Aae,g2o),e(Ne,h2o),g(_w,Ne,null),b(c,BRe,u),b(c,td,u),e(td,Mu),e(Mu,yae),g(uw,yae,null),e(td,p2o),e(td,Lae),e(Lae,_2o),b(c,PRe,u),b(c,Ko,u),g(bw,Ko,null),e(Ko,u2o),e(Ko,ad),e(ad,b2o),e(ad,j$),e(j$,F2o),e(ad,v2o),e(ad,D$),e(D$,T2o),e(ad,M2o),e(Ko,E2o),e(Ko,Fw),e(Fw,C2o),e(Fw,xae),e(xae,w2o),e(Fw,A2o),e(Ko,y2o),e(Ko,Qr),g(vw,Qr,null),e(Qr,L2o),e(Qr,kae),e(kae,x2o),e(Qr,k2o),e(Qr,nd),e(nd,S2o),e(nd,Sae),e(Sae,R2o),e(nd,B2o),e(nd,G$),e(G$,P2o),e(nd,$2o),e(Qr,I2o),e(Qr,Rae),e(Rae,q2o),e(Qr,N2o),g(Tw,Qr,null),e(Ko,j2o),e(Ko,je),g(Mw,je,null),e(je,D2o),e(je,Bae),e(Bae,G2o),e(je,O2o),e(je,Qa),e(Qa,V2o),e(Qa,Pae),e(Pae,X2o),e(Qa,z2o),e(Qa,$ae),e($ae,Q2o),e(Qa,W2o),e(Qa,Iae),e(Iae,H2o),e(Qa,U2o),e(je,J2o),e(je,$),e($,Eu),e(Eu,qae),e(qae,Y2o),e(Eu,K2o),e(Eu,O$),e(O$,Z2o),e(Eu,e1o),e($,o1o),e($,Cu),e(Cu,Nae),e(Nae,r1o),e(Cu,t1o),e(Cu,V$),e(V$,a1o),e(Cu,n1o),e($,s1o),e($,wu),e(wu,jae),e(jae,l1o),e(wu,i1o),e(wu,X$),e(X$,d1o),e(wu,c1o),e($,f1o),e($,Au),e(Au,Dae),e(Dae,m1o),e(Au,g1o),e(Au,z$),e(z$,h1o),e(Au,p1o),e($,_1o),e($,yu),e(yu,Gae),e(Gae,u1o),e(yu,b1o),e(yu,Q$),e(Q$,F1o),e(yu,v1o),e($,T1o),e($,Lu),e(Lu,Oae),e(Oae,M1o),e(Lu,E1o),e(Lu,W$),e(W$,C1o),e(Lu,w1o),e($,A1o),e($,xu),e(xu,Vae),e(Vae,y1o),e(xu,L1o),e(xu,H$),e(H$,x1o),e(xu,k1o),e($,S1o),e($,ku),e(ku,Xae),e(Xae,R1o),e(ku,B1o),e(ku,U$),e(U$,P1o),e(ku,$1o),e($,I1o),e($,Su),e(Su,zae),e(zae,q1o),e(Su,N1o),e(Su,J$),e(J$,j1o),e(Su,D1o),e($,G1o),e($,Ru),e(Ru,Qae),e(Qae,O1o),e(Ru,V1o),e(Ru,Y$),e(Y$,X1o),e(Ru,z1o),e($,Q1o),e($,Bu),e(Bu,Wae),e(Wae,W1o),e(Bu,H1o),e(Bu,K$),e(K$,U1o),e(Bu,J1o),e($,Y1o),e($,Pu),e(Pu,Hae),e(Hae,K1o),e(Pu,Z1o),e(Pu,Z$),e(Z$,ebo),e(Pu,obo),e($,rbo),e($,$u),e($u,Uae),e(Uae,tbo),e($u,abo),e($u,eI),e(eI,nbo),e($u,sbo),e($,lbo),e($,Iu),e(Iu,Jae),e(Jae,ibo),e(Iu,dbo),e(Iu,oI),e(oI,cbo),e(Iu,fbo),e($,mbo),e($,qu),e(qu,Yae),e(Yae,gbo),e(qu,hbo),e(qu,rI),e(rI,pbo),e(qu,_bo),e($,ubo),e($,Nu),e(Nu,Kae),e(Kae,bbo),e(Nu,Fbo),e(Nu,tI),e(tI,vbo),e(Nu,Tbo),e($,Mbo),e($,ju),e(ju,Zae),e(Zae,Ebo),e(ju,Cbo),e(ju,aI),e(aI,wbo),e(ju,Abo),e($,ybo),e($,Du),e(Du,ene),e(ene,Lbo),e(Du,xbo),e(Du,nI),e(nI,kbo),e(Du,Sbo),e($,Rbo),e($,Gu),e(Gu,one),e(one,Bbo),e(Gu,Pbo),e(Gu,sI),e(sI,$bo),e(Gu,Ibo),e($,qbo),e($,Ou),e(Ou,rne),e(rne,Nbo),e(Ou,jbo),e(Ou,lI),e(lI,Dbo),e(Ou,Gbo),e($,Obo),e($,Vu),e(Vu,tne),e(tne,Vbo),e(Vu,Xbo),e(Vu,iI),e(iI,zbo),e(Vu,Qbo),e($,Wbo),e($,Xu),e(Xu,ane),e(ane,Hbo),e(Xu,Ubo),e(Xu,dI),e(dI,Jbo),e(Xu,Ybo),e($,Kbo),e($,zu),e(zu,nne),e(nne,Zbo),e(zu,eFo),e(zu,cI),e(cI,oFo),e(zu,rFo),e($,tFo),e($,Qu),e(Qu,sne),e(sne,aFo),e(Qu,nFo),e(Qu,fI),e(fI,sFo),e(Qu,lFo),e($,iFo),e($,Wu),e(Wu,lne),e(lne,dFo),e(Wu,cFo),e(Wu,mI),e(mI,fFo),e(Wu,mFo),e($,gFo),e($,Hu),e(Hu,ine),e(ine,hFo),e(Hu,pFo),e(Hu,gI),e(gI,_Fo),e(Hu,uFo),e($,bFo),e($,Uu),e(Uu,dne),e(dne,FFo),e(Uu,vFo),e(Uu,hI),e(hI,TFo),e(Uu,MFo),e($,EFo),e($,Ju),e(Ju,cne),e(cne,CFo),e(Ju,wFo),e(Ju,pI),e(pI,AFo),e(Ju,yFo),e($,LFo),e($,Yu),e(Yu,fne),e(fne,xFo),e(Yu,kFo),e(Yu,_I),e(_I,SFo),e(Yu,RFo),e($,BFo),e($,Ku),e(Ku,mne),e(mne,PFo),e(Ku,$Fo),e(Ku,uI),e(uI,IFo),e(Ku,qFo),e($,NFo),e($,Zu),e(Zu,gne),e(gne,jFo),e(Zu,DFo),e(Zu,bI),e(bI,GFo),e(Zu,OFo),e($,VFo),e($,e5),e(e5,hne),e(hne,XFo),e(e5,zFo),e(e5,FI),e(FI,QFo),e(e5,WFo),e($,HFo),e($,o5),e(o5,pne),e(pne,UFo),e(o5,JFo),e(o5,vI),e(vI,YFo),e(o5,KFo),e($,ZFo),e($,r5),e(r5,_ne),e(_ne,evo),e(r5,ovo),e(r5,TI),e(TI,rvo),e(r5,tvo),e($,avo),e($,t5),e(t5,une),e(une,nvo),e(t5,svo),e(t5,MI),e(MI,lvo),e(t5,ivo),e(je,dvo),e(je,a5),e(a5,cvo),e(a5,bne),e(bne,fvo),e(a5,mvo),e(a5,Fne),e(Fne,gvo),e(je,hvo),e(je,vne),e(vne,pvo),e(je,_vo),g(Ew,je,null),b(c,$Re,u),b(c,sd,u),e(sd,n5),e(n5,Tne),g(Cw,Tne,null),e(sd,uvo),e(sd,Mne),e(Mne,bvo),b(c,IRe,u),b(c,Zo,u),g(ww,Zo,null),e(Zo,Fvo),e(Zo,ld),e(ld,vvo),e(ld,EI),e(EI,Tvo),e(ld,Mvo),e(ld,CI),e(CI,Evo),e(ld,Cvo),e(Zo,wvo),e(Zo,Aw),e(Aw,Avo),e(Aw,Ene),e(Ene,yvo),e(Aw,Lvo),e(Zo,xvo),e(Zo,Wr),g(yw,Wr,null),e(Wr,kvo),e(Wr,Cne),e(Cne,Svo),e(Wr,Rvo),e(Wr,id),e(id,Bvo),e(id,wne),e(wne,Pvo),e(id,$vo),e(id,wI),e(wI,Ivo),e(id,qvo),e(Wr,Nvo),e(Wr,Ane),e(Ane,jvo),e(Wr,Dvo),g(Lw,Wr,null),e(Zo,Gvo),e(Zo,De),g(xw,De,null),e(De,Ovo),e(De,yne),e(yne,Vvo),e(De,Xvo),e(De,Wa),e(Wa,zvo),e(Wa,Lne),e(Lne,Qvo),e(Wa,Wvo),e(Wa,xne),e(xne,Hvo),e(Wa,Uvo),e(Wa,kne),e(kne,Jvo),e(Wa,Yvo),e(De,Kvo),e(De,I),e(I,s5),e(s5,Sne),e(Sne,Zvo),e(s5,eTo),e(s5,AI),e(AI,oTo),e(s5,rTo),e(I,tTo),e(I,l5),e(l5,Rne),e(Rne,aTo),e(l5,nTo),e(l5,yI),e(yI,sTo),e(l5,lTo),e(I,iTo),e(I,i5),e(i5,Bne),e(Bne,dTo),e(i5,cTo),e(i5,LI),e(LI,fTo),e(i5,mTo),e(I,gTo),e(I,d5),e(d5,Pne),e(Pne,hTo),e(d5,pTo),e(d5,xI),e(xI,_To),e(d5,uTo),e(I,bTo),e(I,c5),e(c5,$ne),e($ne,FTo),e(c5,vTo),e(c5,kI),e(kI,TTo),e(c5,MTo),e(I,ETo),e(I,f5),e(f5,Ine),e(Ine,CTo),e(f5,wTo),e(f5,SI),e(SI,ATo),e(f5,yTo),e(I,LTo),e(I,m5),e(m5,qne),e(qne,xTo),e(m5,kTo),e(m5,RI),e(RI,STo),e(m5,RTo),e(I,BTo),e(I,g5),e(g5,Nne),e(Nne,PTo),e(g5,$To),e(g5,BI),e(BI,ITo),e(g5,qTo),e(I,NTo),e(I,h5),e(h5,jne),e(jne,jTo),e(h5,DTo),e(h5,PI),e(PI,GTo),e(h5,OTo),e(I,VTo),e(I,p5),e(p5,Dne),e(Dne,XTo),e(p5,zTo),e(p5,$I),e($I,QTo),e(p5,WTo),e(I,HTo),e(I,_5),e(_5,Gne),e(Gne,UTo),e(_5,JTo),e(_5,II),e(II,YTo),e(_5,KTo),e(I,ZTo),e(I,u5),e(u5,One),e(One,e9o),e(u5,o9o),e(u5,qI),e(qI,r9o),e(u5,t9o),e(I,a9o),e(I,b5),e(b5,Vne),e(Vne,n9o),e(b5,s9o),e(b5,NI),e(NI,l9o),e(b5,i9o),e(I,d9o),e(I,F5),e(F5,Xne),e(Xne,c9o),e(F5,f9o),e(F5,jI),e(jI,m9o),e(F5,g9o),e(I,h9o),e(I,v5),e(v5,zne),e(zne,p9o),e(v5,_9o),e(v5,DI),e(DI,u9o),e(v5,b9o),e(I,F9o),e(I,T5),e(T5,Qne),e(Qne,v9o),e(T5,T9o),e(T5,GI),e(GI,M9o),e(T5,E9o),e(I,C9o),e(I,M5),e(M5,Wne),e(Wne,w9o),e(M5,A9o),e(M5,OI),e(OI,y9o),e(M5,L9o),e(I,x9o),e(I,E5),e(E5,Hne),e(Hne,k9o),e(E5,S9o),e(E5,VI),e(VI,R9o),e(E5,B9o),e(I,P9o),e(I,C5),e(C5,Une),e(Une,$9o),e(C5,I9o),e(C5,XI),e(XI,q9o),e(C5,N9o),e(I,j9o),e(I,w5),e(w5,Jne),e(Jne,D9o),e(w5,G9o),e(w5,zI),e(zI,O9o),e(w5,V9o),e(I,X9o),e(I,A5),e(A5,Yne),e(Yne,z9o),e(A5,Q9o),e(A5,QI),e(QI,W9o),e(A5,H9o),e(I,U9o),e(I,y5),e(y5,Kne),e(Kne,J9o),e(y5,Y9o),e(y5,WI),e(WI,K9o),e(y5,Z9o),e(I,eMo),e(I,L5),e(L5,Zne),e(Zne,oMo),e(L5,rMo),e(L5,HI),e(HI,tMo),e(L5,aMo),e(I,nMo),e(I,x5),e(x5,ese),e(ese,sMo),e(x5,lMo),e(x5,UI),e(UI,iMo),e(x5,dMo),e(I,cMo),e(I,k5),e(k5,ose),e(ose,fMo),e(k5,mMo),e(k5,JI),e(JI,gMo),e(k5,hMo),e(I,pMo),e(I,S5),e(S5,rse),e(rse,_Mo),e(S5,uMo),e(S5,YI),e(YI,bMo),e(S5,FMo),e(I,vMo),e(I,R5),e(R5,tse),e(tse,TMo),e(R5,MMo),e(R5,KI),e(KI,EMo),e(R5,CMo),e(I,wMo),e(I,B5),e(B5,ase),e(ase,AMo),e(B5,yMo),e(B5,ZI),e(ZI,LMo),e(B5,xMo),e(I,kMo),e(I,P5),e(P5,nse),e(nse,SMo),e(P5,RMo),e(P5,eq),e(eq,BMo),e(P5,PMo),e(I,$Mo),e(I,$5),e($5,sse),e(sse,IMo),e($5,qMo),e($5,oq),e(oq,NMo),e($5,jMo),e(I,DMo),e(I,I5),e(I5,lse),e(lse,GMo),e(I5,OMo),e(I5,ise),e(ise,VMo),e(I5,XMo),e(I,zMo),e(I,q5),e(q5,dse),e(dse,QMo),e(q5,WMo),e(q5,rq),e(rq,HMo),e(q5,UMo),e(I,JMo),e(I,N5),e(N5,cse),e(cse,YMo),e(N5,KMo),e(N5,tq),e(tq,ZMo),e(N5,e4o),e(I,o4o),e(I,j5),e(j5,fse),e(fse,r4o),e(j5,t4o),e(j5,aq),e(aq,a4o),e(j5,n4o),e(I,s4o),e(I,D5),e(D5,mse),e(mse,l4o),e(D5,i4o),e(D5,nq),e(nq,d4o),e(D5,c4o),e(De,f4o),e(De,G5),e(G5,m4o),e(G5,gse),e(gse,g4o),e(G5,h4o),e(G5,hse),e(hse,p4o),e(De,_4o),e(De,pse),e(pse,u4o),e(De,b4o),g(kw,De,null),b(c,qRe,u),b(c,dd,u),e(dd,O5),e(O5,_se),g(Sw,_se,null),e(dd,F4o),e(dd,use),e(use,v4o),b(c,NRe,u),b(c,er,u),g(Rw,er,null),e(er,T4o),e(er,cd),e(cd,M4o),e(cd,sq),e(sq,E4o),e(cd,C4o),e(cd,lq),e(lq,w4o),e(cd,A4o),e(er,y4o),e(er,Bw),e(Bw,L4o),e(Bw,bse),e(bse,x4o),e(Bw,k4o),e(er,S4o),e(er,Hr),g(Pw,Hr,null),e(Hr,R4o),e(Hr,Fse),e(Fse,B4o),e(Hr,P4o),e(Hr,fd),e(fd,$4o),e(fd,vse),e(vse,I4o),e(fd,q4o),e(fd,iq),e(iq,N4o),e(fd,j4o),e(Hr,D4o),e(Hr,Tse),e(Tse,G4o),e(Hr,O4o),g($w,Hr,null),e(er,V4o),e(er,Ge),g(Iw,Ge,null),e(Ge,X4o),e(Ge,Mse),e(Mse,z4o),e(Ge,Q4o),e(Ge,Ha),e(Ha,W4o),e(Ha,Ese),e(Ese,H4o),e(Ha,U4o),e(Ha,Cse),e(Cse,J4o),e(Ha,Y4o),e(Ha,wse),e(wse,K4o),e(Ha,Z4o),e(Ge,eEo),e(Ge,ne),e(ne,V5),e(V5,Ase),e(Ase,oEo),e(V5,rEo),e(V5,dq),e(dq,tEo),e(V5,aEo),e(ne,nEo),e(ne,X5),e(X5,yse),e(yse,sEo),e(X5,lEo),e(X5,cq),e(cq,iEo),e(X5,dEo),e(ne,cEo),e(ne,z5),e(z5,Lse),e(Lse,fEo),e(z5,mEo),e(z5,fq),e(fq,gEo),e(z5,hEo),e(ne,pEo),e(ne,Q5),e(Q5,xse),e(xse,_Eo),e(Q5,uEo),e(Q5,mq),e(mq,bEo),e(Q5,FEo),e(ne,vEo),e(ne,W5),e(W5,kse),e(kse,TEo),e(W5,MEo),e(W5,gq),e(gq,EEo),e(W5,CEo),e(ne,wEo),e(ne,H5),e(H5,Sse),e(Sse,AEo),e(H5,yEo),e(H5,hq),e(hq,LEo),e(H5,xEo),e(ne,kEo),e(ne,U5),e(U5,Rse),e(Rse,SEo),e(U5,REo),e(U5,pq),e(pq,BEo),e(U5,PEo),e(ne,$Eo),e(ne,J5),e(J5,Bse),e(Bse,IEo),e(J5,qEo),e(J5,_q),e(_q,NEo),e(J5,jEo),e(ne,DEo),e(ne,Y5),e(Y5,Pse),e(Pse,GEo),e(Y5,OEo),e(Y5,uq),e(uq,VEo),e(Y5,XEo),e(ne,zEo),e(ne,K5),e(K5,$se),e($se,QEo),e(K5,WEo),e(K5,bq),e(bq,HEo),e(K5,UEo),e(ne,JEo),e(ne,Z5),e(Z5,Ise),e(Ise,YEo),e(Z5,KEo),e(Z5,Fq),e(Fq,ZEo),e(Z5,e3o),e(ne,o3o),e(ne,e2),e(e2,qse),e(qse,r3o),e(e2,t3o),e(e2,vq),e(vq,a3o),e(e2,n3o),e(ne,s3o),e(ne,o2),e(o2,Nse),e(Nse,l3o),e(o2,i3o),e(o2,Tq),e(Tq,d3o),e(o2,c3o),e(ne,f3o),e(ne,r2),e(r2,jse),e(jse,m3o),e(r2,g3o),e(r2,Mq),e(Mq,h3o),e(r2,p3o),e(ne,_3o),e(ne,t2),e(t2,Dse),e(Dse,u3o),e(t2,b3o),e(t2,Eq),e(Eq,F3o),e(t2,v3o),e(ne,T3o),e(ne,a2),e(a2,Gse),e(Gse,M3o),e(a2,E3o),e(a2,Cq),e(Cq,C3o),e(a2,w3o),e(ne,A3o),e(ne,n2),e(n2,Ose),e(Ose,y3o),e(n2,L3o),e(n2,wq),e(wq,x3o),e(n2,k3o),e(Ge,S3o),e(Ge,s2),e(s2,R3o),e(s2,Vse),e(Vse,B3o),e(s2,P3o),e(s2,Xse),e(Xse,$3o),e(Ge,I3o),e(Ge,zse),e(zse,q3o),e(Ge,N3o),g(qw,Ge,null),b(c,jRe,u),b(c,md,u),e(md,l2),e(l2,Qse),g(Nw,Qse,null),e(md,j3o),e(md,Wse),e(Wse,D3o),b(c,DRe,u),b(c,or,u),g(jw,or,null),e(or,G3o),e(or,gd),e(gd,O3o),e(gd,Aq),e(Aq,V3o),e(gd,X3o),e(gd,yq),e(yq,z3o),e(gd,Q3o),e(or,W3o),e(or,Dw),e(Dw,H3o),e(Dw,Hse),e(Hse,U3o),e(Dw,J3o),e(or,Y3o),e(or,Ur),g(Gw,Ur,null),e(Ur,K3o),e(Ur,Use),e(Use,Z3o),e(Ur,eCo),e(Ur,hd),e(hd,oCo),e(hd,Jse),e(Jse,rCo),e(hd,tCo),e(hd,Lq),e(Lq,aCo),e(hd,nCo),e(Ur,sCo),e(Ur,Yse),e(Yse,lCo),e(Ur,iCo),g(Ow,Ur,null),e(or,dCo),e(or,Oe),g(Vw,Oe,null),e(Oe,cCo),e(Oe,Kse),e(Kse,fCo),e(Oe,mCo),e(Oe,Ua),e(Ua,gCo),e(Ua,Zse),e(Zse,hCo),e(Ua,pCo),e(Ua,ele),e(ele,_Co),e(Ua,uCo),e(Ua,ole),e(ole,bCo),e(Ua,FCo),e(Oe,vCo),e(Oe,y),e(y,i2),e(i2,rle),e(rle,TCo),e(i2,MCo),e(i2,xq),e(xq,ECo),e(i2,CCo),e(y,wCo),e(y,d2),e(d2,tle),e(tle,ACo),e(d2,yCo),e(d2,kq),e(kq,LCo),e(d2,xCo),e(y,kCo),e(y,c2),e(c2,ale),e(ale,SCo),e(c2,RCo),e(c2,Sq),e(Sq,BCo),e(c2,PCo),e(y,$Co),e(y,f2),e(f2,nle),e(nle,ICo),e(f2,qCo),e(f2,Rq),e(Rq,NCo),e(f2,jCo),e(y,DCo),e(y,m2),e(m2,sle),e(sle,GCo),e(m2,OCo),e(m2,Bq),e(Bq,VCo),e(m2,XCo),e(y,zCo),e(y,g2),e(g2,lle),e(lle,QCo),e(g2,WCo),e(g2,Pq),e(Pq,HCo),e(g2,UCo),e(y,JCo),e(y,h2),e(h2,ile),e(ile,YCo),e(h2,KCo),e(h2,$q),e($q,ZCo),e(h2,ewo),e(y,owo),e(y,p2),e(p2,dle),e(dle,rwo),e(p2,two),e(p2,Iq),e(Iq,awo),e(p2,nwo),e(y,swo),e(y,_2),e(_2,cle),e(cle,lwo),e(_2,iwo),e(_2,qq),e(qq,dwo),e(_2,cwo),e(y,fwo),e(y,u2),e(u2,fle),e(fle,mwo),e(u2,gwo),e(u2,Nq),e(Nq,hwo),e(u2,pwo),e(y,_wo),e(y,b2),e(b2,mle),e(mle,uwo),e(b2,bwo),e(b2,jq),e(jq,Fwo),e(b2,vwo),e(y,Two),e(y,F2),e(F2,gle),e(gle,Mwo),e(F2,Ewo),e(F2,Dq),e(Dq,Cwo),e(F2,wwo),e(y,Awo),e(y,v2),e(v2,hle),e(hle,ywo),e(v2,Lwo),e(v2,Gq),e(Gq,xwo),e(v2,kwo),e(y,Swo),e(y,T2),e(T2,ple),e(ple,Rwo),e(T2,Bwo),e(T2,Oq),e(Oq,Pwo),e(T2,$wo),e(y,Iwo),e(y,M2),e(M2,_le),e(_le,qwo),e(M2,Nwo),e(M2,Vq),e(Vq,jwo),e(M2,Dwo),e(y,Gwo),e(y,E2),e(E2,ule),e(ule,Owo),e(E2,Vwo),e(E2,Xq),e(Xq,Xwo),e(E2,zwo),e(y,Qwo),e(y,C2),e(C2,ble),e(ble,Wwo),e(C2,Hwo),e(C2,zq),e(zq,Uwo),e(C2,Jwo),e(y,Ywo),e(y,w2),e(w2,Fle),e(Fle,Kwo),e(w2,Zwo),e(w2,Qq),e(Qq,e6o),e(w2,o6o),e(y,r6o),e(y,A2),e(A2,vle),e(vle,t6o),e(A2,a6o),e(A2,Wq),e(Wq,n6o),e(A2,s6o),e(y,l6o),e(y,y2),e(y2,Tle),e(Tle,i6o),e(y2,d6o),e(y2,Hq),e(Hq,c6o),e(y2,f6o),e(y,m6o),e(y,L2),e(L2,Mle),e(Mle,g6o),e(L2,h6o),e(L2,Uq),e(Uq,p6o),e(L2,_6o),e(y,u6o),e(y,x2),e(x2,Ele),e(Ele,b6o),e(x2,F6o),e(x2,Jq),e(Jq,v6o),e(x2,T6o),e(y,M6o),e(y,k2),e(k2,Cle),e(Cle,E6o),e(k2,C6o),e(k2,Yq),e(Yq,w6o),e(k2,A6o),e(y,y6o),e(y,S2),e(S2,wle),e(wle,L6o),e(S2,x6o),e(S2,Kq),e(Kq,k6o),e(S2,S6o),e(y,R6o),e(y,R2),e(R2,Ale),e(Ale,B6o),e(R2,P6o),e(R2,Zq),e(Zq,$6o),e(R2,I6o),e(y,q6o),e(y,B2),e(B2,yle),e(yle,N6o),e(B2,j6o),e(B2,eN),e(eN,D6o),e(B2,G6o),e(y,O6o),e(y,P2),e(P2,Lle),e(Lle,V6o),e(P2,X6o),e(P2,oN),e(oN,z6o),e(P2,Q6o),e(y,W6o),e(y,$2),e($2,xle),e(xle,H6o),e($2,U6o),e($2,rN),e(rN,J6o),e($2,Y6o),e(y,K6o),e(y,I2),e(I2,kle),e(kle,Z6o),e(I2,eAo),e(I2,tN),e(tN,oAo),e(I2,rAo),e(y,tAo),e(y,q2),e(q2,Sle),e(Sle,aAo),e(q2,nAo),e(q2,aN),e(aN,sAo),e(q2,lAo),e(y,iAo),e(y,N2),e(N2,Rle),e(Rle,dAo),e(N2,cAo),e(N2,nN),e(nN,fAo),e(N2,mAo),e(y,gAo),e(y,j2),e(j2,Ble),e(Ble,hAo),e(j2,pAo),e(j2,sN),e(sN,_Ao),e(j2,uAo),e(y,bAo),e(y,D2),e(D2,Ple),e(Ple,FAo),e(D2,vAo),e(D2,lN),e(lN,TAo),e(D2,MAo),e(y,EAo),e(y,G2),e(G2,$le),e($le,CAo),e(G2,wAo),e(G2,iN),e(iN,AAo),e(G2,yAo),e(y,LAo),e(y,O2),e(O2,Ile),e(Ile,xAo),e(O2,kAo),e(O2,dN),e(dN,SAo),e(O2,RAo),e(y,BAo),e(y,V2),e(V2,qle),e(qle,PAo),e(V2,$Ao),e(V2,cN),e(cN,IAo),e(V2,qAo),e(y,NAo),e(y,X2),e(X2,Nle),e(Nle,jAo),e(X2,DAo),e(X2,fN),e(fN,GAo),e(X2,OAo),e(y,VAo),e(y,z2),e(z2,jle),e(jle,XAo),e(z2,zAo),e(z2,mN),e(mN,QAo),e(z2,WAo),e(y,HAo),e(y,Q2),e(Q2,Dle),e(Dle,UAo),e(Q2,JAo),e(Q2,gN),e(gN,YAo),e(Q2,KAo),e(y,ZAo),e(y,W2),e(W2,Gle),e(Gle,e0o),e(W2,o0o),e(W2,hN),e(hN,r0o),e(W2,t0o),e(y,a0o),e(y,H2),e(H2,Ole),e(Ole,n0o),e(H2,s0o),e(H2,pN),e(pN,l0o),e(H2,i0o),e(y,d0o),e(y,U2),e(U2,Vle),e(Vle,c0o),e(U2,f0o),e(U2,_N),e(_N,m0o),e(U2,g0o),e(y,h0o),e(y,J2),e(J2,Xle),e(Xle,p0o),e(J2,_0o),e(J2,uN),e(uN,u0o),e(J2,b0o),e(y,F0o),e(y,Y2),e(Y2,zle),e(zle,v0o),e(Y2,T0o),e(Y2,bN),e(bN,M0o),e(Y2,E0o),e(y,C0o),e(y,K2),e(K2,Qle),e(Qle,w0o),e(K2,A0o),e(K2,FN),e(FN,y0o),e(K2,L0o),e(y,x0o),e(y,Z2),e(Z2,Wle),e(Wle,k0o),e(Z2,S0o),e(Z2,vN),e(vN,R0o),e(Z2,B0o),e(y,P0o),e(y,e1),e(e1,Hle),e(Hle,$0o),e(e1,I0o),e(e1,TN),e(TN,q0o),e(e1,N0o),e(Oe,j0o),e(Oe,o1),e(o1,D0o),e(o1,Ule),e(Ule,G0o),e(o1,O0o),e(o1,Jle),e(Jle,V0o),e(Oe,X0o),e(Oe,Yle),e(Yle,z0o),e(Oe,Q0o),g(Xw,Oe,null),b(c,GRe,u),b(c,pd,u),e(pd,r1),e(r1,Kle),g(zw,Kle,null),e(pd,W0o),e(pd,Zle),e(Zle,H0o),b(c,ORe,u),b(c,rr,u),g(Qw,rr,null),e(rr,U0o),e(rr,_d),e(_d,J0o),e(_d,MN),e(MN,Y0o),e(_d,K0o),e(_d,EN),e(EN,Z0o),e(_d,eyo),e(rr,oyo),e(rr,Ww),e(Ww,ryo),e(Ww,eie),e(eie,tyo),e(Ww,ayo),e(rr,nyo),e(rr,Jr),g(Hw,Jr,null),e(Jr,syo),e(Jr,oie),e(oie,lyo),e(Jr,iyo),e(Jr,ud),e(ud,dyo),e(ud,rie),e(rie,cyo),e(ud,fyo),e(ud,CN),e(CN,myo),e(ud,gyo),e(Jr,hyo),e(Jr,tie),e(tie,pyo),e(Jr,_yo),g(Uw,Jr,null),e(rr,uyo),e(rr,Ve),g(Jw,Ve,null),e(Ve,byo),e(Ve,aie),e(aie,Fyo),e(Ve,vyo),e(Ve,Ja),e(Ja,Tyo),e(Ja,nie),e(nie,Myo),e(Ja,Eyo),e(Ja,sie),e(sie,Cyo),e(Ja,wyo),e(Ja,lie),e(lie,Ayo),e(Ja,yyo),e(Ve,Lyo),e(Ve,G),e(G,t1),e(t1,iie),e(iie,xyo),e(t1,kyo),e(t1,wN),e(wN,Syo),e(t1,Ryo),e(G,Byo),e(G,a1),e(a1,die),e(die,Pyo),e(a1,$yo),e(a1,AN),e(AN,Iyo),e(a1,qyo),e(G,Nyo),e(G,n1),e(n1,cie),e(cie,jyo),e(n1,Dyo),e(n1,yN),e(yN,Gyo),e(n1,Oyo),e(G,Vyo),e(G,s1),e(s1,fie),e(fie,Xyo),e(s1,zyo),e(s1,LN),e(LN,Qyo),e(s1,Wyo),e(G,Hyo),e(G,l1),e(l1,mie),e(mie,Uyo),e(l1,Jyo),e(l1,xN),e(xN,Yyo),e(l1,Kyo),e(G,Zyo),e(G,i1),e(i1,gie),e(gie,e8o),e(i1,o8o),e(i1,kN),e(kN,r8o),e(i1,t8o),e(G,a8o),e(G,d1),e(d1,hie),e(hie,n8o),e(d1,s8o),e(d1,SN),e(SN,l8o),e(d1,i8o),e(G,d8o),e(G,c1),e(c1,pie),e(pie,c8o),e(c1,f8o),e(c1,RN),e(RN,m8o),e(c1,g8o),e(G,h8o),e(G,f1),e(f1,_ie),e(_ie,p8o),e(f1,_8o),e(f1,BN),e(BN,u8o),e(f1,b8o),e(G,F8o),e(G,m1),e(m1,uie),e(uie,v8o),e(m1,T8o),e(m1,PN),e(PN,M8o),e(m1,E8o),e(G,C8o),e(G,g1),e(g1,bie),e(bie,w8o),e(g1,A8o),e(g1,$N),e($N,y8o),e(g1,L8o),e(G,x8o),e(G,h1),e(h1,Fie),e(Fie,k8o),e(h1,S8o),e(h1,IN),e(IN,R8o),e(h1,B8o),e(G,P8o),e(G,p1),e(p1,vie),e(vie,$8o),e(p1,I8o),e(p1,qN),e(qN,q8o),e(p1,N8o),e(G,j8o),e(G,_1),e(_1,Tie),e(Tie,D8o),e(_1,G8o),e(_1,NN),e(NN,O8o),e(_1,V8o),e(G,X8o),e(G,u1),e(u1,Mie),e(Mie,z8o),e(u1,Q8o),e(u1,jN),e(jN,W8o),e(u1,H8o),e(G,U8o),e(G,b1),e(b1,Eie),e(Eie,J8o),e(b1,Y8o),e(b1,DN),e(DN,K8o),e(b1,Z8o),e(G,eLo),e(G,F1),e(F1,Cie),e(Cie,oLo),e(F1,rLo),e(F1,GN),e(GN,tLo),e(F1,aLo),e(G,nLo),e(G,v1),e(v1,wie),e(wie,sLo),e(v1,lLo),e(v1,ON),e(ON,iLo),e(v1,dLo),e(G,cLo),e(G,T1),e(T1,Aie),e(Aie,fLo),e(T1,mLo),e(T1,VN),e(VN,gLo),e(T1,hLo),e(G,pLo),e(G,M1),e(M1,yie),e(yie,_Lo),e(M1,uLo),e(M1,XN),e(XN,bLo),e(M1,FLo),e(G,vLo),e(G,E1),e(E1,Lie),e(Lie,TLo),e(E1,MLo),e(E1,zN),e(zN,ELo),e(E1,CLo),e(G,wLo),e(G,C1),e(C1,xie),e(xie,ALo),e(C1,yLo),e(C1,QN),e(QN,LLo),e(C1,xLo),e(G,kLo),e(G,w1),e(w1,kie),e(kie,SLo),e(w1,RLo),e(w1,WN),e(WN,BLo),e(w1,PLo),e(G,$Lo),e(G,A1),e(A1,Sie),e(Sie,ILo),e(A1,qLo),e(A1,HN),e(HN,NLo),e(A1,jLo),e(G,DLo),e(G,y1),e(y1,Rie),e(Rie,GLo),e(y1,OLo),e(y1,UN),e(UN,VLo),e(y1,XLo),e(G,zLo),e(G,L1),e(L1,Bie),e(Bie,QLo),e(L1,WLo),e(L1,JN),e(JN,HLo),e(L1,ULo),e(G,JLo),e(G,x1),e(x1,Pie),e(Pie,YLo),e(x1,KLo),e(x1,YN),e(YN,ZLo),e(x1,e7o),e(G,o7o),e(G,k1),e(k1,$ie),e($ie,r7o),e(k1,t7o),e(k1,KN),e(KN,a7o),e(k1,n7o),e(Ve,s7o),e(Ve,S1),e(S1,l7o),e(S1,Iie),e(Iie,i7o),e(S1,d7o),e(S1,qie),e(qie,c7o),e(Ve,f7o),e(Ve,Nie),e(Nie,m7o),e(Ve,g7o),g(Yw,Ve,null),b(c,VRe,u),b(c,bd,u),e(bd,R1),e(R1,jie),g(Kw,jie,null),e(bd,h7o),e(bd,Die),e(Die,p7o),b(c,XRe,u),b(c,tr,u),g(Zw,tr,null),e(tr,_7o),e(tr,Fd),e(Fd,u7o),e(Fd,ZN),e(ZN,b7o),e(Fd,F7o),e(Fd,ej),e(ej,v7o),e(Fd,T7o),e(tr,M7o),e(tr,e6),e(e6,E7o),e(e6,Gie),e(Gie,C7o),e(e6,w7o),e(tr,A7o),e(tr,Yr),g(o6,Yr,null),e(Yr,y7o),e(Yr,Oie),e(Oie,L7o),e(Yr,x7o),e(Yr,vd),e(vd,k7o),e(vd,Vie),e(Vie,S7o),e(vd,R7o),e(vd,oj),e(oj,B7o),e(vd,P7o),e(Yr,$7o),e(Yr,Xie),e(Xie,I7o),e(Yr,q7o),g(r6,Yr,null),e(tr,N7o),e(tr,Xe),g(t6,Xe,null),e(Xe,j7o),e(Xe,zie),e(zie,D7o),e(Xe,G7o),e(Xe,Ya),e(Ya,O7o),e(Ya,Qie),e(Qie,V7o),e(Ya,X7o),e(Ya,Wie),e(Wie,z7o),e(Ya,Q7o),e(Ya,Hie),e(Hie,W7o),e(Ya,H7o),e(Xe,U7o),e(Xe,da),e(da,B1),e(B1,Uie),e(Uie,J7o),e(B1,Y7o),e(B1,rj),e(rj,K7o),e(B1,Z7o),e(da,exo),e(da,P1),e(P1,Jie),e(Jie,oxo),e(P1,rxo),e(P1,tj),e(tj,txo),e(P1,axo),e(da,nxo),e(da,$1),e($1,Yie),e(Yie,sxo),e($1,lxo),e($1,aj),e(aj,ixo),e($1,dxo),e(da,cxo),e(da,I1),e(I1,Kie),e(Kie,fxo),e(I1,mxo),e(I1,nj),e(nj,gxo),e(I1,hxo),e(da,pxo),e(da,q1),e(q1,Zie),e(Zie,_xo),e(q1,uxo),e(q1,sj),e(sj,bxo),e(q1,Fxo),e(Xe,vxo),e(Xe,N1),e(N1,Txo),e(N1,ede),e(ede,Mxo),e(N1,Exo),e(N1,ode),e(ode,Cxo),e(Xe,wxo),e(Xe,rde),e(rde,Axo),e(Xe,yxo),g(a6,Xe,null),b(c,zRe,u),b(c,Td,u),e(Td,j1),e(j1,tde),g(n6,tde,null),e(Td,Lxo),e(Td,ade),e(ade,xxo),b(c,QRe,u),b(c,ar,u),g(s6,ar,null),e(ar,kxo),e(ar,Md),e(Md,Sxo),e(Md,lj),e(lj,Rxo),e(Md,Bxo),e(Md,ij),e(ij,Pxo),e(Md,$xo),e(ar,Ixo),e(ar,l6),e(l6,qxo),e(l6,nde),e(nde,Nxo),e(l6,jxo),e(ar,Dxo),e(ar,Kr),g(i6,Kr,null),e(Kr,Gxo),e(Kr,sde),e(sde,Oxo),e(Kr,Vxo),e(Kr,Ed),e(Ed,Xxo),e(Ed,lde),e(lde,zxo),e(Ed,Qxo),e(Ed,dj),e(dj,Wxo),e(Ed,Hxo),e(Kr,Uxo),e(Kr,ide),e(ide,Jxo),e(Kr,Yxo),g(d6,Kr,null),e(ar,Kxo),e(ar,ze),g(c6,ze,null),e(ze,Zxo),e(ze,dde),e(dde,eko),e(ze,oko),e(ze,Ka),e(Ka,rko),e(Ka,cde),e(cde,tko),e(Ka,ako),e(Ka,fde),e(fde,nko),e(Ka,sko),e(Ka,mde),e(mde,lko),e(Ka,iko),e(ze,dko),e(ze,j),e(j,D1),e(D1,gde),e(gde,cko),e(D1,fko),e(D1,cj),e(cj,mko),e(D1,gko),e(j,hko),e(j,G1),e(G1,hde),e(hde,pko),e(G1,_ko),e(G1,fj),e(fj,uko),e(G1,bko),e(j,Fko),e(j,O1),e(O1,pde),e(pde,vko),e(O1,Tko),e(O1,mj),e(mj,Mko),e(O1,Eko),e(j,Cko),e(j,V1),e(V1,_de),e(_de,wko),e(V1,Ako),e(V1,gj),e(gj,yko),e(V1,Lko),e(j,xko),e(j,X1),e(X1,ude),e(ude,kko),e(X1,Sko),e(X1,hj),e(hj,Rko),e(X1,Bko),e(j,Pko),e(j,z1),e(z1,bde),e(bde,$ko),e(z1,Iko),e(z1,pj),e(pj,qko),e(z1,Nko),e(j,jko),e(j,Q1),e(Q1,Fde),e(Fde,Dko),e(Q1,Gko),e(Q1,_j),e(_j,Oko),e(Q1,Vko),e(j,Xko),e(j,W1),e(W1,vde),e(vde,zko),e(W1,Qko),e(W1,uj),e(uj,Wko),e(W1,Hko),e(j,Uko),e(j,H1),e(H1,Tde),e(Tde,Jko),e(H1,Yko),e(H1,bj),e(bj,Kko),e(H1,Zko),e(j,eSo),e(j,U1),e(U1,Mde),e(Mde,oSo),e(U1,rSo),e(U1,Fj),e(Fj,tSo),e(U1,aSo),e(j,nSo),e(j,J1),e(J1,Ede),e(Ede,sSo),e(J1,lSo),e(J1,vj),e(vj,iSo),e(J1,dSo),e(j,cSo),e(j,Y1),e(Y1,Cde),e(Cde,fSo),e(Y1,mSo),e(Y1,Tj),e(Tj,gSo),e(Y1,hSo),e(j,pSo),e(j,K1),e(K1,wde),e(wde,_So),e(K1,uSo),e(K1,Mj),e(Mj,bSo),e(K1,FSo),e(j,vSo),e(j,Z1),e(Z1,Ade),e(Ade,TSo),e(Z1,MSo),e(Z1,Ej),e(Ej,ESo),e(Z1,CSo),e(j,wSo),e(j,eb),e(eb,yde),e(yde,ASo),e(eb,ySo),e(eb,Cj),e(Cj,LSo),e(eb,xSo),e(j,kSo),e(j,ob),e(ob,Lde),e(Lde,SSo),e(ob,RSo),e(ob,wj),e(wj,BSo),e(ob,PSo),e(j,$So),e(j,rb),e(rb,xde),e(xde,ISo),e(rb,qSo),e(rb,Aj),e(Aj,NSo),e(rb,jSo),e(j,DSo),e(j,tb),e(tb,kde),e(kde,GSo),e(tb,OSo),e(tb,yj),e(yj,VSo),e(tb,XSo),e(j,zSo),e(j,ab),e(ab,Sde),e(Sde,QSo),e(ab,WSo),e(ab,Lj),e(Lj,HSo),e(ab,USo),e(j,JSo),e(j,nb),e(nb,Rde),e(Rde,YSo),e(nb,KSo),e(nb,xj),e(xj,ZSo),e(nb,eRo),e(j,oRo),e(j,sb),e(sb,Bde),e(Bde,rRo),e(sb,tRo),e(sb,kj),e(kj,aRo),e(sb,nRo),e(j,sRo),e(j,lb),e(lb,Pde),e(Pde,lRo),e(lb,iRo),e(lb,Sj),e(Sj,dRo),e(lb,cRo),e(j,fRo),e(j,ib),e(ib,$de),e($de,mRo),e(ib,gRo),e(ib,Rj),e(Rj,hRo),e(ib,pRo),e(j,_Ro),e(j,db),e(db,Ide),e(Ide,uRo),e(db,bRo),e(db,Bj),e(Bj,FRo),e(db,vRo),e(j,TRo),e(j,cb),e(cb,qde),e(qde,MRo),e(cb,ERo),e(cb,Pj),e(Pj,CRo),e(cb,wRo),e(j,ARo),e(j,fb),e(fb,Nde),e(Nde,yRo),e(fb,LRo),e(fb,$j),e($j,xRo),e(fb,kRo),e(j,SRo),e(j,mb),e(mb,jde),e(jde,RRo),e(mb,BRo),e(mb,Ij),e(Ij,PRo),e(mb,$Ro),e(j,IRo),e(j,gb),e(gb,Dde),e(Dde,qRo),e(gb,NRo),e(gb,qj),e(qj,jRo),e(gb,DRo),e(j,GRo),e(j,hb),e(hb,Gde),e(Gde,ORo),e(hb,VRo),e(hb,Nj),e(Nj,XRo),e(hb,zRo),e(j,QRo),e(j,pb),e(pb,Ode),e(Ode,WRo),e(pb,HRo),e(pb,jj),e(jj,URo),e(pb,JRo),e(j,YRo),e(j,_b),e(_b,Vde),e(Vde,KRo),e(_b,ZRo),e(_b,Dj),e(Dj,eBo),e(_b,oBo),e(j,rBo),e(j,ub),e(ub,Xde),e(Xde,tBo),e(ub,aBo),e(ub,Gj),e(Gj,nBo),e(ub,sBo),e(j,lBo),e(j,bb),e(bb,zde),e(zde,iBo),e(bb,dBo),e(bb,Oj),e(Oj,cBo),e(bb,fBo),e(ze,mBo),e(ze,Fb),e(Fb,gBo),e(Fb,Qde),e(Qde,hBo),e(Fb,pBo),e(Fb,Wde),e(Wde,_Bo),e(ze,uBo),e(ze,Hde),e(Hde,bBo),e(ze,FBo),g(f6,ze,null),b(c,WRe,u),b(c,Cd,u),e(Cd,vb),e(vb,Ude),g(m6,Ude,null),e(Cd,vBo),e(Cd,Jde),e(Jde,TBo),b(c,HRe,u),b(c,nr,u),g(g6,nr,null),e(nr,MBo),e(nr,wd),e(wd,EBo),e(wd,Vj),e(Vj,CBo),e(wd,wBo),e(wd,Xj),e(Xj,ABo),e(wd,yBo),e(nr,LBo),e(nr,h6),e(h6,xBo),e(h6,Yde),e(Yde,kBo),e(h6,SBo),e(nr,RBo),e(nr,Zr),g(p6,Zr,null),e(Zr,BBo),e(Zr,Kde),e(Kde,PBo),e(Zr,$Bo),e(Zr,Ad),e(Ad,IBo),e(Ad,Zde),e(Zde,qBo),e(Ad,NBo),e(Ad,zj),e(zj,jBo),e(Ad,DBo),e(Zr,GBo),e(Zr,ece),e(ece,OBo),e(Zr,VBo),g(_6,Zr,null),e(nr,XBo),e(nr,Qe),g(u6,Qe,null),e(Qe,zBo),e(Qe,oce),e(oce,QBo),e(Qe,WBo),e(Qe,Za),e(Za,HBo),e(Za,rce),e(rce,UBo),e(Za,JBo),e(Za,tce),e(tce,YBo),e(Za,KBo),e(Za,ace),e(ace,ZBo),e(Za,ePo),e(Qe,oPo),e(Qe,R),e(R,Tb),e(Tb,nce),e(nce,rPo),e(Tb,tPo),e(Tb,Qj),e(Qj,aPo),e(Tb,nPo),e(R,sPo),e(R,Mb),e(Mb,sce),e(sce,lPo),e(Mb,iPo),e(Mb,Wj),e(Wj,dPo),e(Mb,cPo),e(R,fPo),e(R,Eb),e(Eb,lce),e(lce,mPo),e(Eb,gPo),e(Eb,Hj),e(Hj,hPo),e(Eb,pPo),e(R,_Po),e(R,Cb),e(Cb,ice),e(ice,uPo),e(Cb,bPo),e(Cb,Uj),e(Uj,FPo),e(Cb,vPo),e(R,TPo),e(R,wb),e(wb,dce),e(dce,MPo),e(wb,EPo),e(wb,Jj),e(Jj,CPo),e(wb,wPo),e(R,APo),e(R,Ab),e(Ab,cce),e(cce,yPo),e(Ab,LPo),e(Ab,Yj),e(Yj,xPo),e(Ab,kPo),e(R,SPo),e(R,yb),e(yb,fce),e(fce,RPo),e(yb,BPo),e(yb,Kj),e(Kj,PPo),e(yb,$Po),e(R,IPo),e(R,Lb),e(Lb,mce),e(mce,qPo),e(Lb,NPo),e(Lb,Zj),e(Zj,jPo),e(Lb,DPo),e(R,GPo),e(R,xb),e(xb,gce),e(gce,OPo),e(xb,VPo),e(xb,eD),e(eD,XPo),e(xb,zPo),e(R,QPo),e(R,kb),e(kb,hce),e(hce,WPo),e(kb,HPo),e(kb,oD),e(oD,UPo),e(kb,JPo),e(R,YPo),e(R,Sb),e(Sb,pce),e(pce,KPo),e(Sb,ZPo),e(Sb,rD),e(rD,e$o),e(Sb,o$o),e(R,r$o),e(R,Rb),e(Rb,_ce),e(_ce,t$o),e(Rb,a$o),e(Rb,tD),e(tD,n$o),e(Rb,s$o),e(R,l$o),e(R,Bb),e(Bb,uce),e(uce,i$o),e(Bb,d$o),e(Bb,aD),e(aD,c$o),e(Bb,f$o),e(R,m$o),e(R,Pb),e(Pb,bce),e(bce,g$o),e(Pb,h$o),e(Pb,nD),e(nD,p$o),e(Pb,_$o),e(R,u$o),e(R,$b),e($b,Fce),e(Fce,b$o),e($b,F$o),e($b,sD),e(sD,v$o),e($b,T$o),e(R,M$o),e(R,Ib),e(Ib,vce),e(vce,E$o),e(Ib,C$o),e(Ib,lD),e(lD,w$o),e(Ib,A$o),e(R,y$o),e(R,qb),e(qb,Tce),e(Tce,L$o),e(qb,x$o),e(qb,iD),e(iD,k$o),e(qb,S$o),e(R,R$o),e(R,Nb),e(Nb,Mce),e(Mce,B$o),e(Nb,P$o),e(Nb,dD),e(dD,$$o),e(Nb,I$o),e(R,q$o),e(R,jb),e(jb,Ece),e(Ece,N$o),e(jb,j$o),e(jb,cD),e(cD,D$o),e(jb,G$o),e(R,O$o),e(R,Db),e(Db,Cce),e(Cce,V$o),e(Db,X$o),e(Db,fD),e(fD,z$o),e(Db,Q$o),e(R,W$o),e(R,Gb),e(Gb,wce),e(wce,H$o),e(Gb,U$o),e(Gb,mD),e(mD,J$o),e(Gb,Y$o),e(R,K$o),e(R,Ob),e(Ob,Ace),e(Ace,Z$o),e(Ob,eIo),e(Ob,gD),e(gD,oIo),e(Ob,rIo),e(R,tIo),e(R,Vb),e(Vb,yce),e(yce,aIo),e(Vb,nIo),e(Vb,hD),e(hD,sIo),e(Vb,lIo),e(R,iIo),e(R,Xb),e(Xb,Lce),e(Lce,dIo),e(Xb,cIo),e(Xb,pD),e(pD,fIo),e(Xb,mIo),e(R,gIo),e(R,zb),e(zb,xce),e(xce,hIo),e(zb,pIo),e(zb,_D),e(_D,_Io),e(zb,uIo),e(R,bIo),e(R,Qb),e(Qb,kce),e(kce,FIo),e(Qb,vIo),e(Qb,uD),e(uD,TIo),e(Qb,MIo),e(R,EIo),e(R,Wb),e(Wb,Sce),e(Sce,CIo),e(Wb,wIo),e(Wb,bD),e(bD,AIo),e(Wb,yIo),e(R,LIo),e(R,Hb),e(Hb,Rce),e(Rce,xIo),e(Hb,kIo),e(Hb,FD),e(FD,SIo),e(Hb,RIo),e(R,BIo),e(R,Ub),e(Ub,Bce),e(Bce,PIo),e(Ub,$Io),e(Ub,vD),e(vD,IIo),e(Ub,qIo),e(R,NIo),e(R,Jb),e(Jb,Pce),e(Pce,jIo),e(Jb,DIo),e(Jb,TD),e(TD,GIo),e(Jb,OIo),e(R,VIo),e(R,Yb),e(Yb,$ce),e($ce,XIo),e(Yb,zIo),e(Yb,MD),e(MD,QIo),e(Yb,WIo),e(R,HIo),e(R,Kb),e(Kb,Ice),e(Ice,UIo),e(Kb,JIo),e(Kb,ED),e(ED,YIo),e(Kb,KIo),e(R,ZIo),e(R,Zb),e(Zb,qce),e(qce,eqo),e(Zb,oqo),e(Zb,CD),e(CD,rqo),e(Zb,tqo),e(R,aqo),e(R,eF),e(eF,Nce),e(Nce,nqo),e(eF,sqo),e(eF,wD),e(wD,lqo),e(eF,iqo),e(R,dqo),e(R,oF),e(oF,jce),e(jce,cqo),e(oF,fqo),e(oF,AD),e(AD,mqo),e(oF,gqo),e(R,hqo),e(R,rF),e(rF,Dce),e(Dce,pqo),e(rF,_qo),e(rF,yD),e(yD,uqo),e(rF,bqo),e(R,Fqo),e(R,tF),e(tF,Gce),e(Gce,vqo),e(tF,Tqo),e(tF,LD),e(LD,Mqo),e(tF,Eqo),e(R,Cqo),e(R,aF),e(aF,Oce),e(Oce,wqo),e(aF,Aqo),e(aF,xD),e(xD,yqo),e(aF,Lqo),e(R,xqo),e(R,nF),e(nF,Vce),e(Vce,kqo),e(nF,Sqo),e(nF,kD),e(kD,Rqo),e(nF,Bqo),e(Qe,Pqo),e(Qe,sF),e(sF,$qo),e(sF,Xce),e(Xce,Iqo),e(sF,qqo),e(sF,zce),e(zce,Nqo),e(Qe,jqo),e(Qe,Qce),e(Qce,Dqo),e(Qe,Gqo),g(b6,Qe,null),b(c,URe,u),b(c,yd,u),e(yd,lF),e(lF,Wce),g(F6,Wce,null),e(yd,Oqo),e(yd,Hce),e(Hce,Vqo),b(c,JRe,u),b(c,sr,u),g(v6,sr,null),e(sr,Xqo),e(sr,Ld),e(Ld,zqo),e(Ld,SD),e(SD,Qqo),e(Ld,Wqo),e(Ld,RD),e(RD,Hqo),e(Ld,Uqo),e(sr,Jqo),e(sr,T6),e(T6,Yqo),e(T6,Uce),e(Uce,Kqo),e(T6,Zqo),e(sr,eNo),e(sr,et),g(M6,et,null),e(et,oNo),e(et,Jce),e(Jce,rNo),e(et,tNo),e(et,xd),e(xd,aNo),e(xd,Yce),e(Yce,nNo),e(xd,sNo),e(xd,BD),e(BD,lNo),e(xd,iNo),e(et,dNo),e(et,Kce),e(Kce,cNo),e(et,fNo),g(E6,et,null),e(sr,mNo),e(sr,We),g(C6,We,null),e(We,gNo),e(We,Zce),e(Zce,hNo),e(We,pNo),e(We,en),e(en,_No),e(en,efe),e(efe,uNo),e(en,bNo),e(en,ofe),e(ofe,FNo),e(en,vNo),e(en,rfe),e(rfe,TNo),e(en,MNo),e(We,ENo),e(We,tfe),e(tfe,iF),e(iF,afe),e(afe,CNo),e(iF,wNo),e(iF,PD),e(PD,ANo),e(iF,yNo),e(We,LNo),e(We,dF),e(dF,xNo),e(dF,nfe),e(nfe,kNo),e(dF,SNo),e(dF,sfe),e(sfe,RNo),e(We,BNo),e(We,lfe),e(lfe,PNo),e(We,$No),g(w6,We,null),b(c,YRe,u),b(c,kd,u),e(kd,cF),e(cF,ife),g(A6,ife,null),e(kd,INo),e(kd,dfe),e(dfe,qNo),b(c,KRe,u),b(c,lr,u),g(y6,lr,null),e(lr,NNo),e(lr,Sd),e(Sd,jNo),e(Sd,$D),e($D,DNo),e(Sd,GNo),e(Sd,ID),e(ID,ONo),e(Sd,VNo),e(lr,XNo),e(lr,L6),e(L6,zNo),e(L6,cfe),e(cfe,QNo),e(L6,WNo),e(lr,HNo),e(lr,ot),g(x6,ot,null),e(ot,UNo),e(ot,ffe),e(ffe,JNo),e(ot,YNo),e(ot,Rd),e(Rd,KNo),e(Rd,mfe),e(mfe,ZNo),e(Rd,ejo),e(Rd,qD),e(qD,ojo),e(Rd,rjo),e(ot,tjo),e(ot,gfe),e(gfe,ajo),e(ot,njo),g(k6,ot,null),e(lr,sjo),e(lr,He),g(S6,He,null),e(He,ljo),e(He,hfe),e(hfe,ijo),e(He,djo),e(He,on),e(on,cjo),e(on,pfe),e(pfe,fjo),e(on,mjo),e(on,_fe),e(_fe,gjo),e(on,hjo),e(on,ufe),e(ufe,pjo),e(on,_jo),e(He,ujo),e(He,ce),e(ce,fF),e(fF,bfe),e(bfe,bjo),e(fF,Fjo),e(fF,ND),e(ND,vjo),e(fF,Tjo),e(ce,Mjo),e(ce,mF),e(mF,Ffe),e(Ffe,Ejo),e(mF,Cjo),e(mF,jD),e(jD,wjo),e(mF,Ajo),e(ce,yjo),e(ce,Gs),e(Gs,vfe),e(vfe,Ljo),e(Gs,xjo),e(Gs,DD),e(DD,kjo),e(Gs,Sjo),e(Gs,GD),e(GD,Rjo),e(Gs,Bjo),e(ce,Pjo),e(ce,gF),e(gF,Tfe),e(Tfe,$jo),e(gF,Ijo),e(gF,OD),e(OD,qjo),e(gF,Njo),e(ce,jjo),e(ce,ma),e(ma,Mfe),e(Mfe,Djo),e(ma,Gjo),e(ma,VD),e(VD,Ojo),e(ma,Vjo),e(ma,XD),e(XD,Xjo),e(ma,zjo),e(ma,zD),e(zD,Qjo),e(ma,Wjo),e(ce,Hjo),e(ce,hF),e(hF,Efe),e(Efe,Ujo),e(hF,Jjo),e(hF,QD),e(QD,Yjo),e(hF,Kjo),e(ce,Zjo),e(ce,pF),e(pF,Cfe),e(Cfe,eDo),e(pF,oDo),e(pF,WD),e(WD,rDo),e(pF,tDo),e(ce,aDo),e(ce,_F),e(_F,wfe),e(wfe,nDo),e(_F,sDo),e(_F,HD),e(HD,lDo),e(_F,iDo),e(ce,dDo),e(ce,uF),e(uF,Afe),e(Afe,cDo),e(uF,fDo),e(uF,UD),e(UD,mDo),e(uF,gDo),e(ce,hDo),e(ce,bF),e(bF,yfe),e(yfe,pDo),e(bF,_Do),e(bF,JD),e(JD,uDo),e(bF,bDo),e(ce,FDo),e(ce,FF),e(FF,Lfe),e(Lfe,vDo),e(FF,TDo),e(FF,YD),e(YD,MDo),e(FF,EDo),e(ce,CDo),e(ce,vF),e(vF,xfe),e(xfe,wDo),e(vF,ADo),e(vF,KD),e(KD,yDo),e(vF,LDo),e(He,xDo),e(He,TF),e(TF,kDo),e(TF,kfe),e(kfe,SDo),e(TF,RDo),e(TF,Sfe),e(Sfe,BDo),e(He,PDo),e(He,Rfe),e(Rfe,$Do),e(He,IDo),g(R6,He,null),b(c,ZRe,u),b(c,Bd,u),e(Bd,MF),e(MF,Bfe),g(B6,Bfe,null),e(Bd,qDo),e(Bd,Pfe),e(Pfe,NDo),b(c,eBe,u),b(c,ir,u),g(P6,ir,null),e(ir,jDo),e(ir,Pd),e(Pd,DDo),e(Pd,ZD),e(ZD,GDo),e(Pd,ODo),e(Pd,eG),e(eG,VDo),e(Pd,XDo),e(ir,zDo),e(ir,$6),e($6,QDo),e($6,$fe),e($fe,WDo),e($6,HDo),e(ir,UDo),e(ir,rt),g(I6,rt,null),e(rt,JDo),e(rt,Ife),e(Ife,YDo),e(rt,KDo),e(rt,$d),e($d,ZDo),e($d,qfe),e(qfe,eGo),e($d,oGo),e($d,oG),e(oG,rGo),e($d,tGo),e(rt,aGo),e(rt,Nfe),e(Nfe,nGo),e(rt,sGo),g(q6,rt,null),e(ir,lGo),e(ir,Ue),g(N6,Ue,null),e(Ue,iGo),e(Ue,jfe),e(jfe,dGo),e(Ue,cGo),e(Ue,rn),e(rn,fGo),e(rn,Dfe),e(Dfe,mGo),e(rn,gGo),e(rn,Gfe),e(Gfe,hGo),e(rn,pGo),e(rn,Ofe),e(Ofe,_Go),e(rn,uGo),e(Ue,bGo),e(Ue,Vfe),e(Vfe,EF),e(EF,Xfe),e(Xfe,FGo),e(EF,vGo),e(EF,rG),e(rG,TGo),e(EF,MGo),e(Ue,EGo),e(Ue,CF),e(CF,CGo),e(CF,zfe),e(zfe,wGo),e(CF,AGo),e(CF,Qfe),e(Qfe,yGo),e(Ue,LGo),e(Ue,Wfe),e(Wfe,xGo),e(Ue,kGo),g(j6,Ue,null),b(c,oBe,u),b(c,Id,u),e(Id,wF),e(wF,Hfe),g(D6,Hfe,null),e(Id,SGo),e(Id,Ufe),e(Ufe,RGo),b(c,rBe,u),b(c,dr,u),g(G6,dr,null),e(dr,BGo),e(dr,qd),e(qd,PGo),e(qd,tG),e(tG,$Go),e(qd,IGo),e(qd,aG),e(aG,qGo),e(qd,NGo),e(dr,jGo),e(dr,O6),e(O6,DGo),e(O6,Jfe),e(Jfe,GGo),e(O6,OGo),e(dr,VGo),e(dr,tt),g(V6,tt,null),e(tt,XGo),e(tt,Yfe),e(Yfe,zGo),e(tt,QGo),e(tt,Nd),e(Nd,WGo),e(Nd,Kfe),e(Kfe,HGo),e(Nd,UGo),e(Nd,nG),e(nG,JGo),e(Nd,YGo),e(tt,KGo),e(tt,Zfe),e(Zfe,ZGo),e(tt,eOo),g(X6,tt,null),e(dr,oOo),e(dr,Je),g(z6,Je,null),e(Je,rOo),e(Je,eme),e(eme,tOo),e(Je,aOo),e(Je,tn),e(tn,nOo),e(tn,ome),e(ome,sOo),e(tn,lOo),e(tn,rme),e(rme,iOo),e(tn,dOo),e(tn,tme),e(tme,cOo),e(tn,fOo),e(Je,mOo),e(Je,Se),e(Se,AF),e(AF,ame),e(ame,gOo),e(AF,hOo),e(AF,sG),e(sG,pOo),e(AF,_Oo),e(Se,uOo),e(Se,yF),e(yF,nme),e(nme,bOo),e(yF,FOo),e(yF,lG),e(lG,vOo),e(yF,TOo),e(Se,MOo),e(Se,LF),e(LF,sme),e(sme,EOo),e(LF,COo),e(LF,iG),e(iG,wOo),e(LF,AOo),e(Se,yOo),e(Se,xF),e(xF,lme),e(lme,LOo),e(xF,xOo),e(xF,dG),e(dG,kOo),e(xF,SOo),e(Se,ROo),e(Se,kF),e(kF,ime),e(ime,BOo),e(kF,POo),e(kF,cG),e(cG,$Oo),e(kF,IOo),e(Se,qOo),e(Se,SF),e(SF,dme),e(dme,NOo),e(SF,jOo),e(SF,fG),e(fG,DOo),e(SF,GOo),e(Se,OOo),e(Se,RF),e(RF,cme),e(cme,VOo),e(RF,XOo),e(RF,mG),e(mG,zOo),e(RF,QOo),e(Se,WOo),e(Se,BF),e(BF,fme),e(fme,HOo),e(BF,UOo),e(BF,gG),e(gG,JOo),e(BF,YOo),e(Je,KOo),e(Je,PF),e(PF,ZOo),e(PF,mme),e(mme,eVo),e(PF,oVo),e(PF,gme),e(gme,rVo),e(Je,tVo),e(Je,hme),e(hme,aVo),e(Je,nVo),g(Q6,Je,null),b(c,tBe,u),b(c,jd,u),e(jd,$F),e($F,pme),g(W6,pme,null),e(jd,sVo),e(jd,_me),e(_me,lVo),b(c,aBe,u),b(c,cr,u),g(H6,cr,null),e(cr,iVo),e(cr,Dd),e(Dd,dVo),e(Dd,hG),e(hG,cVo),e(Dd,fVo),e(Dd,pG),e(pG,mVo),e(Dd,gVo),e(cr,hVo),e(cr,U6),e(U6,pVo),e(U6,ume),e(ume,_Vo),e(U6,uVo),e(cr,bVo),e(cr,at),g(J6,at,null),e(at,FVo),e(at,bme),e(bme,vVo),e(at,TVo),e(at,Gd),e(Gd,MVo),e(Gd,Fme),e(Fme,EVo),e(Gd,CVo),e(Gd,_G),e(_G,wVo),e(Gd,AVo),e(at,yVo),e(at,vme),e(vme,LVo),e(at,xVo),g(Y6,at,null),e(cr,kVo),e(cr,Ye),g(K6,Ye,null),e(Ye,SVo),e(Ye,Tme),e(Tme,RVo),e(Ye,BVo),e(Ye,an),e(an,PVo),e(an,Mme),e(Mme,$Vo),e(an,IVo),e(an,Eme),e(Eme,qVo),e(an,NVo),e(an,Cme),e(Cme,jVo),e(an,DVo),e(Ye,GVo),e(Ye,nn),e(nn,IF),e(IF,wme),e(wme,OVo),e(IF,VVo),e(IF,uG),e(uG,XVo),e(IF,zVo),e(nn,QVo),e(nn,qF),e(qF,Ame),e(Ame,WVo),e(qF,HVo),e(qF,bG),e(bG,UVo),e(qF,JVo),e(nn,YVo),e(nn,NF),e(NF,yme),e(yme,KVo),e(NF,ZVo),e(NF,FG),e(FG,eXo),e(NF,oXo),e(nn,rXo),e(nn,jF),e(jF,Lme),e(Lme,tXo),e(jF,aXo),e(jF,vG),e(vG,nXo),e(jF,sXo),e(Ye,lXo),e(Ye,DF),e(DF,iXo),e(DF,xme),e(xme,dXo),e(DF,cXo),e(DF,kme),e(kme,fXo),e(Ye,mXo),e(Ye,Sme),e(Sme,gXo),e(Ye,hXo),g(Z6,Ye,null),b(c,nBe,u),b(c,Od,u),e(Od,GF),e(GF,Rme),g(eA,Rme,null),e(Od,pXo),e(Od,Bme),e(Bme,_Xo),b(c,sBe,u),b(c,fr,u),g(oA,fr,null),e(fr,uXo),e(fr,Vd),e(Vd,bXo),e(Vd,TG),e(TG,FXo),e(Vd,vXo),e(Vd,MG),e(MG,TXo),e(Vd,MXo),e(fr,EXo),e(fr,rA),e(rA,CXo),e(rA,Pme),e(Pme,wXo),e(rA,AXo),e(fr,yXo),e(fr,nt),g(tA,nt,null),e(nt,LXo),e(nt,$me),e($me,xXo),e(nt,kXo),e(nt,Xd),e(Xd,SXo),e(Xd,Ime),e(Ime,RXo),e(Xd,BXo),e(Xd,EG),e(EG,PXo),e(Xd,$Xo),e(nt,IXo),e(nt,qme),e(qme,qXo),e(nt,NXo),g(aA,nt,null),e(fr,jXo),e(fr,Ke),g(nA,Ke,null),e(Ke,DXo),e(Ke,Nme),e(Nme,GXo),e(Ke,OXo),e(Ke,sn),e(sn,VXo),e(sn,jme),e(jme,XXo),e(sn,zXo),e(sn,Dme),e(Dme,QXo),e(sn,WXo),e(sn,Gme),e(Gme,HXo),e(sn,UXo),e(Ke,JXo),e(Ke,Re),e(Re,OF),e(OF,Ome),e(Ome,YXo),e(OF,KXo),e(OF,CG),e(CG,ZXo),e(OF,ezo),e(Re,ozo),e(Re,VF),e(VF,Vme),e(Vme,rzo),e(VF,tzo),e(VF,wG),e(wG,azo),e(VF,nzo),e(Re,szo),e(Re,XF),e(XF,Xme),e(Xme,lzo),e(XF,izo),e(XF,AG),e(AG,dzo),e(XF,czo),e(Re,fzo),e(Re,zF),e(zF,zme),e(zme,mzo),e(zF,gzo),e(zF,yG),e(yG,hzo),e(zF,pzo),e(Re,_zo),e(Re,QF),e(QF,Qme),e(Qme,uzo),e(QF,bzo),e(QF,LG),e(LG,Fzo),e(QF,vzo),e(Re,Tzo),e(Re,WF),e(WF,Wme),e(Wme,Mzo),e(WF,Ezo),e(WF,xG),e(xG,Czo),e(WF,wzo),e(Re,Azo),e(Re,HF),e(HF,Hme),e(Hme,yzo),e(HF,Lzo),e(HF,kG),e(kG,xzo),e(HF,kzo),e(Re,Szo),e(Re,UF),e(UF,Ume),e(Ume,Rzo),e(UF,Bzo),e(UF,SG),e(SG,Pzo),e(UF,$zo),e(Ke,Izo),e(Ke,JF),e(JF,qzo),e(JF,Jme),e(Jme,Nzo),e(JF,jzo),e(JF,Yme),e(Yme,Dzo),e(Ke,Gzo),e(Ke,Kme),e(Kme,Ozo),e(Ke,Vzo),g(sA,Ke,null),b(c,lBe,u),b(c,zd,u),e(zd,YF),e(YF,Zme),g(lA,Zme,null),e(zd,Xzo),e(zd,ege),e(ege,zzo),b(c,iBe,u),b(c,mr,u),g(iA,mr,null),e(mr,Qzo),e(mr,Qd),e(Qd,Wzo),e(Qd,RG),e(RG,Hzo),e(Qd,Uzo),e(Qd,BG),e(BG,Jzo),e(Qd,Yzo),e(mr,Kzo),e(mr,dA),e(dA,Zzo),e(dA,oge),e(oge,eQo),e(dA,oQo),e(mr,rQo),e(mr,st),g(cA,st,null),e(st,tQo),e(st,rge),e(rge,aQo),e(st,nQo),e(st,Wd),e(Wd,sQo),e(Wd,tge),e(tge,lQo),e(Wd,iQo),e(Wd,PG),e(PG,dQo),e(Wd,cQo),e(st,fQo),e(st,age),e(age,mQo),e(st,gQo),g(fA,st,null),e(mr,hQo),e(mr,Ze),g(mA,Ze,null),e(Ze,pQo),e(Ze,nge),e(nge,_Qo),e(Ze,uQo),e(Ze,ln),e(ln,bQo),e(ln,sge),e(sge,FQo),e(ln,vQo),e(ln,lge),e(lge,TQo),e(ln,MQo),e(ln,ige),e(ige,EQo),e(ln,CQo),e(Ze,wQo),e(Ze,gA),e(gA,KF),e(KF,dge),e(dge,AQo),e(KF,yQo),e(KF,$G),e($G,LQo),e(KF,xQo),e(gA,kQo),e(gA,ZF),e(ZF,cge),e(cge,SQo),e(ZF,RQo),e(ZF,IG),e(IG,BQo),e(ZF,PQo),e(Ze,$Qo),e(Ze,ev),e(ev,IQo),e(ev,fge),e(fge,qQo),e(ev,NQo),e(ev,mge),e(mge,jQo),e(Ze,DQo),e(Ze,gge),e(gge,GQo),e(Ze,OQo),g(hA,Ze,null),b(c,dBe,u),b(c,Hd,u),e(Hd,ov),e(ov,hge),g(pA,hge,null),e(Hd,VQo),e(Hd,pge),e(pge,XQo),b(c,cBe,u),b(c,gr,u),g(_A,gr,null),e(gr,zQo),e(gr,Ud),e(Ud,QQo),e(Ud,qG),e(qG,WQo),e(Ud,HQo),e(Ud,NG),e(NG,UQo),e(Ud,JQo),e(gr,YQo),e(gr,uA),e(uA,KQo),e(uA,_ge),e(_ge,ZQo),e(uA,eWo),e(gr,oWo),e(gr,lt),g(bA,lt,null),e(lt,rWo),e(lt,uge),e(uge,tWo),e(lt,aWo),e(lt,Jd),e(Jd,nWo),e(Jd,bge),e(bge,sWo),e(Jd,lWo),e(Jd,jG),e(jG,iWo),e(Jd,dWo),e(lt,cWo),e(lt,Fge),e(Fge,fWo),e(lt,mWo),g(FA,lt,null),e(gr,gWo),e(gr,eo),g(vA,eo,null),e(eo,hWo),e(eo,vge),e(vge,pWo),e(eo,_Wo),e(eo,dn),e(dn,uWo),e(dn,Tge),e(Tge,bWo),e(dn,FWo),e(dn,Mge),e(Mge,vWo),e(dn,TWo),e(dn,Ege),e(Ege,MWo),e(dn,EWo),e(eo,CWo),e(eo,cn),e(cn,rv),e(rv,Cge),e(Cge,wWo),e(rv,AWo),e(rv,DG),e(DG,yWo),e(rv,LWo),e(cn,xWo),e(cn,tv),e(tv,wge),e(wge,kWo),e(tv,SWo),e(tv,GG),e(GG,RWo),e(tv,BWo),e(cn,PWo),e(cn,av),e(av,Age),e(Age,$Wo),e(av,IWo),e(av,OG),e(OG,qWo),e(av,NWo),e(cn,jWo),e(cn,nv),e(nv,yge),e(yge,DWo),e(nv,GWo),e(nv,VG),e(VG,OWo),e(nv,VWo),e(eo,XWo),e(eo,sv),e(sv,zWo),e(sv,Lge),e(Lge,QWo),e(sv,WWo),e(sv,xge),e(xge,HWo),e(eo,UWo),e(eo,kge),e(kge,JWo),e(eo,YWo),g(TA,eo,null),b(c,fBe,u),b(c,Yd,u),e(Yd,lv),e(lv,Sge),g(MA,Sge,null),e(Yd,KWo),e(Yd,Rge),e(Rge,ZWo),b(c,mBe,u),b(c,hr,u),g(EA,hr,null),e(hr,eHo),e(hr,Kd),e(Kd,oHo),e(Kd,XG),e(XG,rHo),e(Kd,tHo),e(Kd,zG),e(zG,aHo),e(Kd,nHo),e(hr,sHo),e(hr,CA),e(CA,lHo),e(CA,Bge),e(Bge,iHo),e(CA,dHo),e(hr,cHo),e(hr,it),g(wA,it,null),e(it,fHo),e(it,Pge),e(Pge,mHo),e(it,gHo),e(it,Zd),e(Zd,hHo),e(Zd,$ge),e($ge,pHo),e(Zd,_Ho),e(Zd,QG),e(QG,uHo),e(Zd,bHo),e(it,FHo),e(it,Ige),e(Ige,vHo),e(it,THo),g(AA,it,null),e(hr,MHo),e(hr,oo),g(yA,oo,null),e(oo,EHo),e(oo,qge),e(qge,CHo),e(oo,wHo),e(oo,fn),e(fn,AHo),e(fn,Nge),e(Nge,yHo),e(fn,LHo),e(fn,jge),e(jge,xHo),e(fn,kHo),e(fn,Dge),e(Dge,SHo),e(fn,RHo),e(oo,BHo),e(oo,ec),e(ec,iv),e(iv,Gge),e(Gge,PHo),e(iv,$Ho),e(iv,WG),e(WG,IHo),e(iv,qHo),e(ec,NHo),e(ec,dv),e(dv,Oge),e(Oge,jHo),e(dv,DHo),e(dv,HG),e(HG,GHo),e(dv,OHo),e(ec,VHo),e(ec,cv),e(cv,Vge),e(Vge,XHo),e(cv,zHo),e(cv,UG),e(UG,QHo),e(cv,WHo),e(oo,HHo),e(oo,fv),e(fv,UHo),e(fv,Xge),e(Xge,JHo),e(fv,YHo),e(fv,zge),e(zge,KHo),e(oo,ZHo),e(oo,Qge),e(Qge,eUo),e(oo,oUo),g(LA,oo,null),b(c,gBe,u),b(c,oc,u),e(oc,mv),e(mv,Wge),g(xA,Wge,null),e(oc,rUo),e(oc,Hge),e(Hge,tUo),b(c,hBe,u),b(c,pr,u),g(kA,pr,null),e(pr,aUo),e(pr,rc),e(rc,nUo),e(rc,JG),e(JG,sUo),e(rc,lUo),e(rc,YG),e(YG,iUo),e(rc,dUo),e(pr,cUo),e(pr,SA),e(SA,fUo),e(SA,Uge),e(Uge,mUo),e(SA,gUo),e(pr,hUo),e(pr,dt),g(RA,dt,null),e(dt,pUo),e(dt,Jge),e(Jge,_Uo),e(dt,uUo),e(dt,tc),e(tc,bUo),e(tc,Yge),e(Yge,FUo),e(tc,vUo),e(tc,KG),e(KG,TUo),e(tc,MUo),e(dt,EUo),e(dt,Kge),e(Kge,CUo),e(dt,wUo),g(BA,dt,null),e(pr,AUo),e(pr,ro),g(PA,ro,null),e(ro,yUo),e(ro,Zge),e(Zge,LUo),e(ro,xUo),e(ro,mn),e(mn,kUo),e(mn,ehe),e(ehe,SUo),e(mn,RUo),e(mn,ohe),e(ohe,BUo),e(mn,PUo),e(mn,rhe),e(rhe,$Uo),e(mn,IUo),e(ro,qUo),e(ro,the),e(the,gv),e(gv,ahe),e(ahe,NUo),e(gv,jUo),e(gv,ZG),e(ZG,DUo),e(gv,GUo),e(ro,OUo),e(ro,hv),e(hv,VUo),e(hv,nhe),e(nhe,XUo),e(hv,zUo),e(hv,she),e(she,QUo),e(ro,WUo),e(ro,lhe),e(lhe,HUo),e(ro,UUo),g($A,ro,null),b(c,pBe,u),b(c,ac,u),e(ac,pv),e(pv,ihe),g(IA,ihe,null),e(ac,JUo),e(ac,dhe),e(dhe,YUo),b(c,_Be,u),b(c,_r,u),g(qA,_r,null),e(_r,KUo),e(_r,nc),e(nc,ZUo),e(nc,eO),e(eO,eJo),e(nc,oJo),e(nc,oO),e(oO,rJo),e(nc,tJo),e(_r,aJo),e(_r,NA),e(NA,nJo),e(NA,che),e(che,sJo),e(NA,lJo),e(_r,iJo),e(_r,ct),g(jA,ct,null),e(ct,dJo),e(ct,fhe),e(fhe,cJo),e(ct,fJo),e(ct,sc),e(sc,mJo),e(sc,mhe),e(mhe,gJo),e(sc,hJo),e(sc,rO),e(rO,pJo),e(sc,_Jo),e(ct,uJo),e(ct,ghe),e(ghe,bJo),e(ct,FJo),g(DA,ct,null),e(_r,vJo),e(_r,to),g(GA,to,null),e(to,TJo),e(to,hhe),e(hhe,MJo),e(to,EJo),e(to,gn),e(gn,CJo),e(gn,phe),e(phe,wJo),e(gn,AJo),e(gn,_he),e(_he,yJo),e(gn,LJo),e(gn,uhe),e(uhe,xJo),e(gn,kJo),e(to,SJo),e(to,bhe),e(bhe,_v),e(_v,Fhe),e(Fhe,RJo),e(_v,BJo),e(_v,tO),e(tO,PJo),e(_v,$Jo),e(to,IJo),e(to,uv),e(uv,qJo),e(uv,vhe),e(vhe,NJo),e(uv,jJo),e(uv,The),e(The,DJo),e(to,GJo),e(to,Mhe),e(Mhe,OJo),e(to,VJo),g(OA,to,null),b(c,uBe,u),b(c,lc,u),e(lc,bv),e(bv,Ehe),g(VA,Ehe,null),e(lc,XJo),e(lc,Che),e(Che,zJo),b(c,bBe,u),b(c,ur,u),g(XA,ur,null),e(ur,QJo),e(ur,ic),e(ic,WJo),e(ic,aO),e(aO,HJo),e(ic,UJo),e(ic,nO),e(nO,JJo),e(ic,YJo),e(ur,KJo),e(ur,zA),e(zA,ZJo),e(zA,whe),e(whe,eYo),e(zA,oYo),e(ur,rYo),e(ur,ft),g(QA,ft,null),e(ft,tYo),e(ft,Ahe),e(Ahe,aYo),e(ft,nYo),e(ft,dc),e(dc,sYo),e(dc,yhe),e(yhe,lYo),e(dc,iYo),e(dc,sO),e(sO,dYo),e(dc,cYo),e(ft,fYo),e(ft,Lhe),e(Lhe,mYo),e(ft,gYo),g(WA,ft,null),e(ur,hYo),e(ur,ao),g(HA,ao,null),e(ao,pYo),e(ao,xhe),e(xhe,_Yo),e(ao,uYo),e(ao,hn),e(hn,bYo),e(hn,khe),e(khe,FYo),e(hn,vYo),e(hn,She),e(She,TYo),e(hn,MYo),e(hn,Rhe),e(Rhe,EYo),e(hn,CYo),e(ao,wYo),e(ao,cc),e(cc,Fv),e(Fv,Bhe),e(Bhe,AYo),e(Fv,yYo),e(Fv,lO),e(lO,LYo),e(Fv,xYo),e(cc,kYo),e(cc,vv),e(vv,Phe),e(Phe,SYo),e(vv,RYo),e(vv,iO),e(iO,BYo),e(vv,PYo),e(cc,$Yo),e(cc,Tv),e(Tv,$he),e($he,IYo),e(Tv,qYo),e(Tv,dO),e(dO,NYo),e(Tv,jYo),e(ao,DYo),e(ao,Mv),e(Mv,GYo),e(Mv,Ihe),e(Ihe,OYo),e(Mv,VYo),e(Mv,qhe),e(qhe,XYo),e(ao,zYo),e(ao,Nhe),e(Nhe,QYo),e(ao,WYo),g(UA,ao,null),b(c,FBe,u),b(c,fc,u),e(fc,Ev),e(Ev,jhe),g(JA,jhe,null),e(fc,HYo),e(fc,Dhe),e(Dhe,UYo),b(c,vBe,u),b(c,br,u),g(YA,br,null),e(br,JYo),e(br,mc),e(mc,YYo),e(mc,cO),e(cO,KYo),e(mc,ZYo),e(mc,fO),e(fO,eKo),e(mc,oKo),e(br,rKo),e(br,KA),e(KA,tKo),e(KA,Ghe),e(Ghe,aKo),e(KA,nKo),e(br,sKo),e(br,mt),g(ZA,mt,null),e(mt,lKo),e(mt,Ohe),e(Ohe,iKo),e(mt,dKo),e(mt,gc),e(gc,cKo),e(gc,Vhe),e(Vhe,fKo),e(gc,mKo),e(gc,mO),e(mO,gKo),e(gc,hKo),e(mt,pKo),e(mt,Xhe),e(Xhe,_Ko),e(mt,uKo),g(e0,mt,null),e(br,bKo),e(br,no),g(o0,no,null),e(no,FKo),e(no,zhe),e(zhe,vKo),e(no,TKo),e(no,pn),e(pn,MKo),e(pn,Qhe),e(Qhe,EKo),e(pn,CKo),e(pn,Whe),e(Whe,wKo),e(pn,AKo),e(pn,Hhe),e(Hhe,yKo),e(pn,LKo),e(no,xKo),e(no,Uhe),e(Uhe,Cv),e(Cv,Jhe),e(Jhe,kKo),e(Cv,SKo),e(Cv,gO),e(gO,RKo),e(Cv,BKo),e(no,PKo),e(no,wv),e(wv,$Ko),e(wv,Yhe),e(Yhe,IKo),e(wv,qKo),e(wv,Khe),e(Khe,NKo),e(no,jKo),e(no,Zhe),e(Zhe,DKo),e(no,GKo),g(r0,no,null),b(c,TBe,u),b(c,hc,u),e(hc,Av),e(Av,epe),g(t0,epe,null),e(hc,OKo),e(hc,ope),e(ope,VKo),b(c,MBe,u),b(c,Fr,u),g(a0,Fr,null),e(Fr,XKo),e(Fr,pc),e(pc,zKo),e(pc,hO),e(hO,QKo),e(pc,WKo),e(pc,pO),e(pO,HKo),e(pc,UKo),e(Fr,JKo),e(Fr,n0),e(n0,YKo),e(n0,rpe),e(rpe,KKo),e(n0,ZKo),e(Fr,eZo),e(Fr,gt),g(s0,gt,null),e(gt,oZo),e(gt,tpe),e(tpe,rZo),e(gt,tZo),e(gt,_c),e(_c,aZo),e(_c,ape),e(ape,nZo),e(_c,sZo),e(_c,_O),e(_O,lZo),e(_c,iZo),e(gt,dZo),e(gt,npe),e(npe,cZo),e(gt,fZo),g(l0,gt,null),e(Fr,mZo),e(Fr,ho),g(i0,ho,null),e(ho,gZo),e(ho,spe),e(spe,hZo),e(ho,pZo),e(ho,_n),e(_n,_Zo),e(_n,lpe),e(lpe,uZo),e(_n,bZo),e(_n,ipe),e(ipe,FZo),e(_n,vZo),e(_n,dpe),e(dpe,TZo),e(_n,MZo),e(ho,EZo),e(ho,x),e(x,yv),e(yv,cpe),e(cpe,CZo),e(yv,wZo),e(yv,uO),e(uO,AZo),e(yv,yZo),e(x,LZo),e(x,Lv),e(Lv,fpe),e(fpe,xZo),e(Lv,kZo),e(Lv,bO),e(bO,SZo),e(Lv,RZo),e(x,BZo),e(x,xv),e(xv,mpe),e(mpe,PZo),e(xv,$Zo),e(xv,FO),e(FO,IZo),e(xv,qZo),e(x,NZo),e(x,kv),e(kv,gpe),e(gpe,jZo),e(kv,DZo),e(kv,vO),e(vO,GZo),e(kv,OZo),e(x,VZo),e(x,Sv),e(Sv,hpe),e(hpe,XZo),e(Sv,zZo),e(Sv,TO),e(TO,QZo),e(Sv,WZo),e(x,HZo),e(x,Rv),e(Rv,ppe),e(ppe,UZo),e(Rv,JZo),e(Rv,MO),e(MO,YZo),e(Rv,KZo),e(x,ZZo),e(x,Bv),e(Bv,_pe),e(_pe,eer),e(Bv,oer),e(Bv,EO),e(EO,rer),e(Bv,ter),e(x,aer),e(x,Pv),e(Pv,upe),e(upe,ner),e(Pv,ser),e(Pv,CO),e(CO,ler),e(Pv,ier),e(x,der),e(x,$v),e($v,bpe),e(bpe,cer),e($v,fer),e($v,wO),e(wO,mer),e($v,ger),e(x,her),e(x,Iv),e(Iv,Fpe),e(Fpe,per),e(Iv,_er),e(Iv,AO),e(AO,uer),e(Iv,ber),e(x,Fer),e(x,qv),e(qv,vpe),e(vpe,ver),e(qv,Ter),e(qv,yO),e(yO,Mer),e(qv,Eer),e(x,Cer),e(x,Nv),e(Nv,Tpe),e(Tpe,wer),e(Nv,Aer),e(Nv,LO),e(LO,yer),e(Nv,Ler),e(x,xer),e(x,jv),e(jv,Mpe),e(Mpe,ker),e(jv,Ser),e(jv,xO),e(xO,Rer),e(jv,Ber),e(x,Per),e(x,Dv),e(Dv,Epe),e(Epe,$er),e(Dv,Ier),e(Dv,kO),e(kO,qer),e(Dv,Ner),e(x,jer),e(x,Gv),e(Gv,Cpe),e(Cpe,Der),e(Gv,Ger),e(Gv,SO),e(SO,Oer),e(Gv,Ver),e(x,Xer),e(x,Ov),e(Ov,wpe),e(wpe,zer),e(Ov,Qer),e(Ov,RO),e(RO,Wer),e(Ov,Her),e(x,Uer),e(x,Os),e(Os,Ape),e(Ape,Jer),e(Os,Yer),e(Os,BO),e(BO,Ker),e(Os,Zer),e(Os,PO),e(PO,eor),e(Os,oor),e(x,ror),e(x,Vv),e(Vv,ype),e(ype,tor),e(Vv,aor),e(Vv,$O),e($O,nor),e(Vv,sor),e(x,lor),e(x,Xv),e(Xv,Lpe),e(Lpe,ior),e(Xv,dor),e(Xv,IO),e(IO,cor),e(Xv,mor),e(x,gor),e(x,zv),e(zv,xpe),e(xpe,hor),e(zv,por),e(zv,qO),e(qO,_or),e(zv,uor),e(x,bor),e(x,Qv),e(Qv,kpe),e(kpe,For),e(Qv,vor),e(Qv,NO),e(NO,Tor),e(Qv,Mor),e(x,Eor),e(x,Wv),e(Wv,Spe),e(Spe,Cor),e(Wv,wor),e(Wv,jO),e(jO,Aor),e(Wv,yor),e(x,Lor),e(x,Hv),e(Hv,Rpe),e(Rpe,xor),e(Hv,kor),e(Hv,DO),e(DO,Sor),e(Hv,Ror),e(x,Bor),e(x,Uv),e(Uv,Bpe),e(Bpe,Por),e(Uv,$or),e(Uv,GO),e(GO,Ior),e(Uv,qor),e(x,Nor),e(x,Jv),e(Jv,Ppe),e(Ppe,jor),e(Jv,Dor),e(Jv,OO),e(OO,Gor),e(Jv,Oor),e(x,Vor),e(x,Yv),e(Yv,$pe),e($pe,Xor),e(Yv,zor),e(Yv,VO),e(VO,Qor),e(Yv,Wor),e(x,Hor),e(x,Kv),e(Kv,Ipe),e(Ipe,Uor),e(Kv,Jor),e(Kv,XO),e(XO,Yor),e(Kv,Kor),e(x,Zor),e(x,Zv),e(Zv,qpe),e(qpe,err),e(Zv,orr),e(Zv,zO),e(zO,rrr),e(Zv,trr),e(x,arr),e(x,eT),e(eT,Npe),e(Npe,nrr),e(eT,srr),e(eT,QO),e(QO,lrr),e(eT,irr),e(x,drr),e(x,oT),e(oT,jpe),e(jpe,crr),e(oT,frr),e(oT,WO),e(WO,mrr),e(oT,grr),e(x,hrr),e(x,rT),e(rT,Dpe),e(Dpe,prr),e(rT,_rr),e(rT,HO),e(HO,urr),e(rT,brr),e(x,Frr),e(x,tT),e(tT,Gpe),e(Gpe,vrr),e(tT,Trr),e(tT,UO),e(UO,Mrr),e(tT,Err),e(x,Crr),e(x,aT),e(aT,Ope),e(Ope,wrr),e(aT,Arr),e(aT,JO),e(JO,yrr),e(aT,Lrr),e(x,xrr),e(x,nT),e(nT,Vpe),e(Vpe,krr),e(nT,Srr),e(nT,YO),e(YO,Rrr),e(nT,Brr),e(x,Prr),e(x,sT),e(sT,Xpe),e(Xpe,$rr),e(sT,Irr),e(sT,KO),e(KO,qrr),e(sT,Nrr),e(x,jrr),e(x,lT),e(lT,zpe),e(zpe,Drr),e(lT,Grr),e(lT,ZO),e(ZO,Orr),e(lT,Vrr),e(x,Xrr),e(x,iT),e(iT,Qpe),e(Qpe,zrr),e(iT,Qrr),e(iT,eV),e(eV,Wrr),e(iT,Hrr),e(x,Urr),e(x,dT),e(dT,Wpe),e(Wpe,Jrr),e(dT,Yrr),e(dT,oV),e(oV,Krr),e(dT,Zrr),e(x,etr),e(x,cT),e(cT,Hpe),e(Hpe,otr),e(cT,rtr),e(cT,rV),e(rV,ttr),e(cT,atr),e(x,ntr),e(x,fT),e(fT,Upe),e(Upe,str),e(fT,ltr),e(fT,tV),e(tV,itr),e(fT,dtr),e(x,ctr),e(x,mT),e(mT,Jpe),e(Jpe,ftr),e(mT,mtr),e(mT,aV),e(aV,gtr),e(mT,htr),e(x,ptr),e(x,gT),e(gT,Ype),e(Ype,_tr),e(gT,utr),e(gT,nV),e(nV,btr),e(gT,Ftr),e(x,vtr),e(x,hT),e(hT,Kpe),e(Kpe,Ttr),e(hT,Mtr),e(hT,sV),e(sV,Etr),e(hT,Ctr),e(x,wtr),e(x,pT),e(pT,Zpe),e(Zpe,Atr),e(pT,ytr),e(pT,lV),e(lV,Ltr),e(pT,xtr),e(ho,ktr),e(ho,e_e),e(e_e,Str),e(ho,Rtr),g(d0,ho,null),b(c,EBe,u),b(c,uc,u),e(uc,_T),e(_T,o_e),g(c0,o_e,null),e(uc,Btr),e(uc,r_e),e(r_e,Ptr),b(c,CBe,u),b(c,vr,u),g(f0,vr,null),e(vr,$tr),e(vr,bc),e(bc,Itr),e(bc,iV),e(iV,qtr),e(bc,Ntr),e(bc,dV),e(dV,jtr),e(bc,Dtr),e(vr,Gtr),e(vr,m0),e(m0,Otr),e(m0,t_e),e(t_e,Vtr),e(m0,Xtr),e(vr,ztr),e(vr,ht),g(g0,ht,null),e(ht,Qtr),e(ht,a_e),e(a_e,Wtr),e(ht,Htr),e(ht,Fc),e(Fc,Utr),e(Fc,n_e),e(n_e,Jtr),e(Fc,Ytr),e(Fc,cV),e(cV,Ktr),e(Fc,Ztr),e(ht,ear),e(ht,s_e),e(s_e,oar),e(ht,rar),g(h0,ht,null),e(vr,tar),e(vr,po),g(p0,po,null),e(po,aar),e(po,l_e),e(l_e,nar),e(po,sar),e(po,un),e(un,lar),e(un,i_e),e(i_e,iar),e(un,dar),e(un,d_e),e(d_e,car),e(un,far),e(un,c_e),e(c_e,mar),e(un,gar),e(po,har),e(po,H),e(H,uT),e(uT,f_e),e(f_e,par),e(uT,_ar),e(uT,fV),e(fV,uar),e(uT,bar),e(H,Far),e(H,bT),e(bT,m_e),e(m_e,Tar),e(bT,Mar),e(bT,mV),e(mV,Ear),e(bT,Car),e(H,war),e(H,FT),e(FT,g_e),e(g_e,Aar),e(FT,yar),e(FT,gV),e(gV,Lar),e(FT,xar),e(H,kar),e(H,vT),e(vT,h_e),e(h_e,Sar),e(vT,Rar),e(vT,hV),e(hV,Bar),e(vT,Par),e(H,$ar),e(H,TT),e(TT,p_e),e(p_e,Iar),e(TT,qar),e(TT,pV),e(pV,Nar),e(TT,jar),e(H,Dar),e(H,MT),e(MT,__e),e(__e,Gar),e(MT,Oar),e(MT,_V),e(_V,Var),e(MT,Xar),e(H,zar),e(H,ET),e(ET,u_e),e(u_e,Qar),e(ET,War),e(ET,uV),e(uV,Har),e(ET,Uar),e(H,Jar),e(H,CT),e(CT,b_e),e(b_e,Yar),e(CT,Kar),e(CT,bV),e(bV,Zar),e(CT,enr),e(H,onr),e(H,wT),e(wT,F_e),e(F_e,rnr),e(wT,tnr),e(wT,FV),e(FV,anr),e(wT,nnr),e(H,snr),e(H,AT),e(AT,v_e),e(v_e,lnr),e(AT,inr),e(AT,vV),e(vV,dnr),e(AT,cnr),e(H,fnr),e(H,yT),e(yT,T_e),e(T_e,mnr),e(yT,gnr),e(yT,TV),e(TV,hnr),e(yT,pnr),e(H,_nr),e(H,LT),e(LT,M_e),e(M_e,unr),e(LT,bnr),e(LT,MV),e(MV,Fnr),e(LT,vnr),e(H,Tnr),e(H,xT),e(xT,E_e),e(E_e,Mnr),e(xT,Enr),e(xT,EV),e(EV,Cnr),e(xT,wnr),e(H,Anr),e(H,kT),e(kT,C_e),e(C_e,ynr),e(kT,Lnr),e(kT,CV),e(CV,xnr),e(kT,knr),e(H,Snr),e(H,ST),e(ST,w_e),e(w_e,Rnr),e(ST,Bnr),e(ST,wV),e(wV,Pnr),e(ST,$nr),e(H,Inr),e(H,RT),e(RT,A_e),e(A_e,qnr),e(RT,Nnr),e(RT,AV),e(AV,jnr),e(RT,Dnr),e(H,Gnr),e(H,BT),e(BT,y_e),e(y_e,Onr),e(BT,Vnr),e(BT,yV),e(yV,Xnr),e(BT,znr),e(H,Qnr),e(H,PT),e(PT,L_e),e(L_e,Wnr),e(PT,Hnr),e(PT,LV),e(LV,Unr),e(PT,Jnr),e(H,Ynr),e(H,$T),e($T,x_e),e(x_e,Knr),e($T,Znr),e($T,xV),e(xV,esr),e($T,osr),e(H,rsr),e(H,IT),e(IT,k_e),e(k_e,tsr),e(IT,asr),e(IT,kV),e(kV,nsr),e(IT,ssr),e(H,lsr),e(H,qT),e(qT,S_e),e(S_e,isr),e(qT,dsr),e(qT,SV),e(SV,csr),e(qT,fsr),e(H,msr),e(H,NT),e(NT,R_e),e(R_e,gsr),e(NT,hsr),e(NT,RV),e(RV,psr),e(NT,_sr),e(H,usr),e(H,jT),e(jT,B_e),e(B_e,bsr),e(jT,Fsr),e(jT,BV),e(BV,vsr),e(jT,Tsr),e(po,Msr),e(po,P_e),e(P_e,Esr),e(po,Csr),g(_0,po,null),b(c,wBe,u),b(c,vc,u),e(vc,DT),e(DT,$_e),g(u0,$_e,null),e(vc,wsr),e(vc,I_e),e(I_e,Asr),b(c,ABe,u),b(c,Tr,u),g(b0,Tr,null),e(Tr,ysr),e(Tr,Tc),e(Tc,Lsr),e(Tc,PV),e(PV,xsr),e(Tc,ksr),e(Tc,$V),e($V,Ssr),e(Tc,Rsr),e(Tr,Bsr),e(Tr,F0),e(F0,Psr),e(F0,q_e),e(q_e,$sr),e(F0,Isr),e(Tr,qsr),e(Tr,pt),g(v0,pt,null),e(pt,Nsr),e(pt,N_e),e(N_e,jsr),e(pt,Dsr),e(pt,Mc),e(Mc,Gsr),e(Mc,j_e),e(j_e,Osr),e(Mc,Vsr),e(Mc,IV),e(IV,Xsr),e(Mc,zsr),e(pt,Qsr),e(pt,D_e),e(D_e,Wsr),e(pt,Hsr),g(T0,pt,null),e(Tr,Usr),e(Tr,_o),g(M0,_o,null),e(_o,Jsr),e(_o,G_e),e(G_e,Ysr),e(_o,Ksr),e(_o,bn),e(bn,Zsr),e(bn,O_e),e(O_e,elr),e(bn,olr),e(bn,V_e),e(V_e,rlr),e(bn,tlr),e(bn,X_e),e(X_e,alr),e(bn,nlr),e(_o,slr),e(_o,fe),e(fe,GT),e(GT,z_e),e(z_e,llr),e(GT,ilr),e(GT,qV),e(qV,dlr),e(GT,clr),e(fe,flr),e(fe,OT),e(OT,Q_e),e(Q_e,mlr),e(OT,glr),e(OT,NV),e(NV,hlr),e(OT,plr),e(fe,_lr),e(fe,VT),e(VT,W_e),e(W_e,ulr),e(VT,blr),e(VT,jV),e(jV,Flr),e(VT,vlr),e(fe,Tlr),e(fe,XT),e(XT,H_e),e(H_e,Mlr),e(XT,Elr),e(XT,DV),e(DV,Clr),e(XT,wlr),e(fe,Alr),e(fe,zT),e(zT,U_e),e(U_e,ylr),e(zT,Llr),e(zT,GV),e(GV,xlr),e(zT,klr),e(fe,Slr),e(fe,QT),e(QT,J_e),e(J_e,Rlr),e(QT,Blr),e(QT,OV),e(OV,Plr),e(QT,$lr),e(fe,Ilr),e(fe,WT),e(WT,Y_e),e(Y_e,qlr),e(WT,Nlr),e(WT,VV),e(VV,jlr),e(WT,Dlr),e(fe,Glr),e(fe,HT),e(HT,K_e),e(K_e,Olr),e(HT,Vlr),e(HT,XV),e(XV,Xlr),e(HT,zlr),e(fe,Qlr),e(fe,UT),e(UT,Z_e),e(Z_e,Wlr),e(UT,Hlr),e(UT,zV),e(zV,Ulr),e(UT,Jlr),e(fe,Ylr),e(fe,JT),e(JT,eue),e(eue,Klr),e(JT,Zlr),e(JT,QV),e(QV,eir),e(JT,oir),e(fe,rir),e(fe,YT),e(YT,oue),e(oue,tir),e(YT,air),e(YT,WV),e(WV,nir),e(YT,sir),e(fe,lir),e(fe,KT),e(KT,rue),e(rue,iir),e(KT,dir),e(KT,HV),e(HV,cir),e(KT,fir),e(_o,mir),e(_o,tue),e(tue,gir),e(_o,hir),g(E0,_o,null),b(c,yBe,u),b(c,Ec,u),e(Ec,ZT),e(ZT,aue),g(C0,aue,null),e(Ec,pir),e(Ec,nue),e(nue,_ir),b(c,LBe,u),b(c,Mr,u),g(w0,Mr,null),e(Mr,uir),e(Mr,Cc),e(Cc,bir),e(Cc,UV),e(UV,Fir),e(Cc,vir),e(Cc,JV),e(JV,Tir),e(Cc,Mir),e(Mr,Eir),e(Mr,A0),e(A0,Cir),e(A0,sue),e(sue,wir),e(A0,Air),e(Mr,yir),e(Mr,_t),g(y0,_t,null),e(_t,Lir),e(_t,lue),e(lue,xir),e(_t,kir),e(_t,wc),e(wc,Sir),e(wc,iue),e(iue,Rir),e(wc,Bir),e(wc,YV),e(YV,Pir),e(wc,$ir),e(_t,Iir),e(_t,due),e(due,qir),e(_t,Nir),g(L0,_t,null),e(Mr,jir),e(Mr,uo),g(x0,uo,null),e(uo,Dir),e(uo,cue),e(cue,Gir),e(uo,Oir),e(uo,Fn),e(Fn,Vir),e(Fn,fue),e(fue,Xir),e(Fn,zir),e(Fn,mue),e(mue,Qir),e(Fn,Wir),e(Fn,gue),e(gue,Hir),e(Fn,Uir),e(uo,Jir),e(uo,k0),e(k0,e9),e(e9,hue),e(hue,Yir),e(e9,Kir),e(e9,KV),e(KV,Zir),e(e9,edr),e(k0,odr),e(k0,o9),e(o9,pue),e(pue,rdr),e(o9,tdr),e(o9,ZV),e(ZV,adr),e(o9,ndr),e(uo,sdr),e(uo,_ue),e(_ue,ldr),e(uo,idr),g(S0,uo,null),b(c,xBe,u),b(c,Ac,u),e(Ac,r9),e(r9,uue),g(R0,uue,null),e(Ac,ddr),e(Ac,bue),e(bue,cdr),b(c,kBe,u),b(c,Er,u),g(B0,Er,null),e(Er,fdr),e(Er,yc),e(yc,mdr),e(yc,eX),e(eX,gdr),e(yc,hdr),e(yc,oX),e(oX,pdr),e(yc,_dr),e(Er,udr),e(Er,P0),e(P0,bdr),e(P0,Fue),e(Fue,Fdr),e(P0,vdr),e(Er,Tdr),e(Er,ut),g($0,ut,null),e(ut,Mdr),e(ut,vue),e(vue,Edr),e(ut,Cdr),e(ut,Lc),e(Lc,wdr),e(Lc,Tue),e(Tue,Adr),e(Lc,ydr),e(Lc,rX),e(rX,Ldr),e(Lc,xdr),e(ut,kdr),e(ut,Mue),e(Mue,Sdr),e(ut,Rdr),g(I0,ut,null),e(Er,Bdr),e(Er,bo),g(q0,bo,null),e(bo,Pdr),e(bo,Eue),e(Eue,$dr),e(bo,Idr),e(bo,vn),e(vn,qdr),e(vn,Cue),e(Cue,Ndr),e(vn,jdr),e(vn,wue),e(wue,Ddr),e(vn,Gdr),e(vn,Aue),e(Aue,Odr),e(vn,Vdr),e(bo,Xdr),e(bo,J),e(J,t9),e(t9,yue),e(yue,zdr),e(t9,Qdr),e(t9,tX),e(tX,Wdr),e(t9,Hdr),e(J,Udr),e(J,a9),e(a9,Lue),e(Lue,Jdr),e(a9,Ydr),e(a9,aX),e(aX,Kdr),e(a9,Zdr),e(J,ecr),e(J,n9),e(n9,xue),e(xue,ocr),e(n9,rcr),e(n9,nX),e(nX,tcr),e(n9,acr),e(J,ncr),e(J,s9),e(s9,kue),e(kue,scr),e(s9,lcr),e(s9,sX),e(sX,icr),e(s9,dcr),e(J,ccr),e(J,l9),e(l9,Sue),e(Sue,fcr),e(l9,mcr),e(l9,lX),e(lX,gcr),e(l9,hcr),e(J,pcr),e(J,i9),e(i9,Rue),e(Rue,_cr),e(i9,ucr),e(i9,iX),e(iX,bcr),e(i9,Fcr),e(J,vcr),e(J,d9),e(d9,Bue),e(Bue,Tcr),e(d9,Mcr),e(d9,dX),e(dX,Ecr),e(d9,Ccr),e(J,wcr),e(J,c9),e(c9,Pue),e(Pue,Acr),e(c9,ycr),e(c9,cX),e(cX,Lcr),e(c9,xcr),e(J,kcr),e(J,f9),e(f9,$ue),e($ue,Scr),e(f9,Rcr),e(f9,fX),e(fX,Bcr),e(f9,Pcr),e(J,$cr),e(J,m9),e(m9,Iue),e(Iue,Icr),e(m9,qcr),e(m9,mX),e(mX,Ncr),e(m9,jcr),e(J,Dcr),e(J,g9),e(g9,que),e(que,Gcr),e(g9,Ocr),e(g9,gX),e(gX,Vcr),e(g9,Xcr),e(J,zcr),e(J,h9),e(h9,Nue),e(Nue,Qcr),e(h9,Wcr),e(h9,hX),e(hX,Hcr),e(h9,Ucr),e(J,Jcr),e(J,p9),e(p9,jue),e(jue,Ycr),e(p9,Kcr),e(p9,pX),e(pX,Zcr),e(p9,efr),e(J,ofr),e(J,_9),e(_9,Due),e(Due,rfr),e(_9,tfr),e(_9,_X),e(_X,afr),e(_9,nfr),e(J,sfr),e(J,u9),e(u9,Gue),e(Gue,lfr),e(u9,ifr),e(u9,uX),e(uX,dfr),e(u9,cfr),e(J,ffr),e(J,b9),e(b9,Oue),e(Oue,mfr),e(b9,gfr),e(b9,bX),e(bX,hfr),e(b9,pfr),e(J,_fr),e(J,F9),e(F9,Vue),e(Vue,ufr),e(F9,bfr),e(F9,FX),e(FX,Ffr),e(F9,vfr),e(J,Tfr),e(J,v9),e(v9,Xue),e(Xue,Mfr),e(v9,Efr),e(v9,vX),e(vX,Cfr),e(v9,wfr),e(J,Afr),e(J,T9),e(T9,zue),e(zue,yfr),e(T9,Lfr),e(T9,TX),e(TX,xfr),e(T9,kfr),e(J,Sfr),e(J,M9),e(M9,Que),e(Que,Rfr),e(M9,Bfr),e(M9,MX),e(MX,Pfr),e(M9,$fr),e(bo,Ifr),e(bo,Wue),e(Wue,qfr),e(bo,Nfr),g(N0,bo,null),b(c,SBe,u),b(c,xc,u),e(xc,E9),e(E9,Hue),g(j0,Hue,null),e(xc,jfr),e(xc,Uue),e(Uue,Dfr),b(c,RBe,u),b(c,Cr,u),g(D0,Cr,null),e(Cr,Gfr),e(Cr,kc),e(kc,Ofr),e(kc,EX),e(EX,Vfr),e(kc,Xfr),e(kc,CX),e(CX,zfr),e(kc,Qfr),e(Cr,Wfr),e(Cr,G0),e(G0,Hfr),e(G0,Jue),e(Jue,Ufr),e(G0,Jfr),e(Cr,Yfr),e(Cr,bt),g(O0,bt,null),e(bt,Kfr),e(bt,Yue),e(Yue,Zfr),e(bt,emr),e(bt,Sc),e(Sc,omr),e(Sc,Kue),e(Kue,rmr),e(Sc,tmr),e(Sc,wX),e(wX,amr),e(Sc,nmr),e(bt,smr),e(bt,Zue),e(Zue,lmr),e(bt,imr),g(V0,bt,null),e(Cr,dmr),e(Cr,Fo),g(X0,Fo,null),e(Fo,cmr),e(Fo,e5e),e(e5e,fmr),e(Fo,mmr),e(Fo,Tn),e(Tn,gmr),e(Tn,o5e),e(o5e,hmr),e(Tn,pmr),e(Tn,r5e),e(r5e,_mr),e(Tn,umr),e(Tn,t5e),e(t5e,bmr),e(Tn,Fmr),e(Fo,vmr),e(Fo,be),e(be,C9),e(C9,a5e),e(a5e,Tmr),e(C9,Mmr),e(C9,AX),e(AX,Emr),e(C9,Cmr),e(be,wmr),e(be,w9),e(w9,n5e),e(n5e,Amr),e(w9,ymr),e(w9,yX),e(yX,Lmr),e(w9,xmr),e(be,kmr),e(be,A9),e(A9,s5e),e(s5e,Smr),e(A9,Rmr),e(A9,LX),e(LX,Bmr),e(A9,Pmr),e(be,$mr),e(be,y9),e(y9,l5e),e(l5e,Imr),e(y9,qmr),e(y9,xX),e(xX,Nmr),e(y9,jmr),e(be,Dmr),e(be,L9),e(L9,i5e),e(i5e,Gmr),e(L9,Omr),e(L9,kX),e(kX,Vmr),e(L9,Xmr),e(be,zmr),e(be,x9),e(x9,d5e),e(d5e,Qmr),e(x9,Wmr),e(x9,SX),e(SX,Hmr),e(x9,Umr),e(be,Jmr),e(be,k9),e(k9,c5e),e(c5e,Ymr),e(k9,Kmr),e(k9,RX),e(RX,Zmr),e(k9,egr),e(be,ogr),e(be,S9),e(S9,f5e),e(f5e,rgr),e(S9,tgr),e(S9,BX),e(BX,agr),e(S9,ngr),e(be,sgr),e(be,R9),e(R9,m5e),e(m5e,lgr),e(R9,igr),e(R9,PX),e(PX,dgr),e(R9,cgr),e(be,fgr),e(be,B9),e(B9,g5e),e(g5e,mgr),e(B9,ggr),e(B9,$X),e($X,hgr),e(B9,pgr),e(Fo,_gr),e(Fo,h5e),e(h5e,ugr),e(Fo,bgr),g(z0,Fo,null),b(c,BBe,u),b(c,Rc,u),e(Rc,P9),e(P9,p5e),g(Q0,p5e,null),e(Rc,Fgr),e(Rc,_5e),e(_5e,vgr),b(c,PBe,u),b(c,wr,u),g(W0,wr,null),e(wr,Tgr),e(wr,Bc),e(Bc,Mgr),e(Bc,IX),e(IX,Egr),e(Bc,Cgr),e(Bc,qX),e(qX,wgr),e(Bc,Agr),e(wr,ygr),e(wr,H0),e(H0,Lgr),e(H0,u5e),e(u5e,xgr),e(H0,kgr),e(wr,Sgr),e(wr,Ft),g(U0,Ft,null),e(Ft,Rgr),e(Ft,b5e),e(b5e,Bgr),e(Ft,Pgr),e(Ft,Pc),e(Pc,$gr),e(Pc,F5e),e(F5e,Igr),e(Pc,qgr),e(Pc,NX),e(NX,Ngr),e(Pc,jgr),e(Ft,Dgr),e(Ft,v5e),e(v5e,Ggr),e(Ft,Ogr),g(J0,Ft,null),e(wr,Vgr),e(wr,vo),g(Y0,vo,null),e(vo,Xgr),e(vo,T5e),e(T5e,zgr),e(vo,Qgr),e(vo,Mn),e(Mn,Wgr),e(Mn,M5e),e(M5e,Hgr),e(Mn,Ugr),e(Mn,E5e),e(E5e,Jgr),e(Mn,Ygr),e(Mn,C5e),e(C5e,Kgr),e(Mn,Zgr),e(vo,ehr),e(vo,V),e(V,$9),e($9,w5e),e(w5e,ohr),e($9,rhr),e($9,jX),e(jX,thr),e($9,ahr),e(V,nhr),e(V,I9),e(I9,A5e),e(A5e,shr),e(I9,lhr),e(I9,DX),e(DX,ihr),e(I9,dhr),e(V,chr),e(V,q9),e(q9,y5e),e(y5e,fhr),e(q9,mhr),e(q9,GX),e(GX,ghr),e(q9,hhr),e(V,phr),e(V,N9),e(N9,L5e),e(L5e,_hr),e(N9,uhr),e(N9,OX),e(OX,bhr),e(N9,Fhr),e(V,vhr),e(V,j9),e(j9,x5e),e(x5e,Thr),e(j9,Mhr),e(j9,VX),e(VX,Ehr),e(j9,Chr),e(V,whr),e(V,D9),e(D9,k5e),e(k5e,Ahr),e(D9,yhr),e(D9,XX),e(XX,Lhr),e(D9,xhr),e(V,khr),e(V,G9),e(G9,S5e),e(S5e,Shr),e(G9,Rhr),e(G9,zX),e(zX,Bhr),e(G9,Phr),e(V,$hr),e(V,O9),e(O9,R5e),e(R5e,Ihr),e(O9,qhr),e(O9,QX),e(QX,Nhr),e(O9,jhr),e(V,Dhr),e(V,V9),e(V9,B5e),e(B5e,Ghr),e(V9,Ohr),e(V9,WX),e(WX,Vhr),e(V9,Xhr),e(V,zhr),e(V,X9),e(X9,P5e),e(P5e,Qhr),e(X9,Whr),e(X9,HX),e(HX,Hhr),e(X9,Uhr),e(V,Jhr),e(V,z9),e(z9,$5e),e($5e,Yhr),e(z9,Khr),e(z9,UX),e(UX,Zhr),e(z9,epr),e(V,opr),e(V,Q9),e(Q9,I5e),e(I5e,rpr),e(Q9,tpr),e(Q9,JX),e(JX,apr),e(Q9,npr),e(V,spr),e(V,W9),e(W9,q5e),e(q5e,lpr),e(W9,ipr),e(W9,YX),e(YX,dpr),e(W9,cpr),e(V,fpr),e(V,H9),e(H9,N5e),e(N5e,mpr),e(H9,gpr),e(H9,KX),e(KX,hpr),e(H9,ppr),e(V,_pr),e(V,U9),e(U9,j5e),e(j5e,upr),e(U9,bpr),e(U9,ZX),e(ZX,Fpr),e(U9,vpr),e(V,Tpr),e(V,J9),e(J9,D5e),e(D5e,Mpr),e(J9,Epr),e(J9,ez),e(ez,Cpr),e(J9,wpr),e(V,Apr),e(V,Y9),e(Y9,G5e),e(G5e,ypr),e(Y9,Lpr),e(Y9,oz),e(oz,xpr),e(Y9,kpr),e(V,Spr),e(V,K9),e(K9,O5e),e(O5e,Rpr),e(K9,Bpr),e(K9,rz),e(rz,Ppr),e(K9,$pr),e(V,Ipr),e(V,Z9),e(Z9,V5e),e(V5e,qpr),e(Z9,Npr),e(Z9,tz),e(tz,jpr),e(Z9,Dpr),e(V,Gpr),e(V,eM),e(eM,X5e),e(X5e,Opr),e(eM,Vpr),e(eM,az),e(az,Xpr),e(eM,zpr),e(V,Qpr),e(V,oM),e(oM,z5e),e(z5e,Wpr),e(oM,Hpr),e(oM,nz),e(nz,Upr),e(oM,Jpr),e(V,Ypr),e(V,rM),e(rM,Q5e),e(Q5e,Kpr),e(rM,Zpr),e(rM,sz),e(sz,e_r),e(rM,o_r),e(V,r_r),e(V,tM),e(tM,W5e),e(W5e,t_r),e(tM,a_r),e(tM,lz),e(lz,n_r),e(tM,s_r),e(V,l_r),e(V,aM),e(aM,H5e),e(H5e,i_r),e(aM,d_r),e(aM,iz),e(iz,c_r),e(aM,f_r),e(V,m_r),e(V,nM),e(nM,U5e),e(U5e,g_r),e(nM,h_r),e(nM,dz),e(dz,p_r),e(nM,__r),e(V,u_r),e(V,sM),e(sM,J5e),e(J5e,b_r),e(sM,F_r),e(sM,cz),e(cz,v_r),e(sM,T_r),e(vo,M_r),e(vo,Y5e),e(Y5e,E_r),e(vo,C_r),g(K0,vo,null),b(c,$Be,u),b(c,$c,u),e($c,lM),e(lM,K5e),g(Z0,K5e,null),e($c,w_r),e($c,Z5e),e(Z5e,A_r),b(c,IBe,u),b(c,Ar,u),g(ey,Ar,null),e(Ar,y_r),e(Ar,Ic),e(Ic,L_r),e(Ic,fz),e(fz,x_r),e(Ic,k_r),e(Ic,mz),e(mz,S_r),e(Ic,R_r),e(Ar,B_r),e(Ar,oy),e(oy,P_r),e(oy,e2e),e(e2e,$_r),e(oy,I_r),e(Ar,q_r),e(Ar,vt),g(ry,vt,null),e(vt,N_r),e(vt,o2e),e(o2e,j_r),e(vt,D_r),e(vt,qc),e(qc,G_r),e(qc,r2e),e(r2e,O_r),e(qc,V_r),e(qc,gz),e(gz,X_r),e(qc,z_r),e(vt,Q_r),e(vt,t2e),e(t2e,W_r),e(vt,H_r),g(ty,vt,null),e(Ar,U_r),e(Ar,To),g(ay,To,null),e(To,J_r),e(To,a2e),e(a2e,Y_r),e(To,K_r),e(To,En),e(En,Z_r),e(En,n2e),e(n2e,eur),e(En,our),e(En,s2e),e(s2e,rur),e(En,tur),e(En,l2e),e(l2e,aur),e(En,nur),e(To,sur),e(To,se),e(se,iM),e(iM,i2e),e(i2e,lur),e(iM,iur),e(iM,hz),e(hz,dur),e(iM,cur),e(se,fur),e(se,dM),e(dM,d2e),e(d2e,mur),e(dM,gur),e(dM,pz),e(pz,hur),e(dM,pur),e(se,_ur),e(se,cM),e(cM,c2e),e(c2e,uur),e(cM,bur),e(cM,_z),e(_z,Fur),e(cM,vur),e(se,Tur),e(se,fM),e(fM,f2e),e(f2e,Mur),e(fM,Eur),e(fM,uz),e(uz,Cur),e(fM,wur),e(se,Aur),e(se,mM),e(mM,m2e),e(m2e,yur),e(mM,Lur),e(mM,bz),e(bz,xur),e(mM,kur),e(se,Sur),e(se,gM),e(gM,g2e),e(g2e,Rur),e(gM,Bur),e(gM,Fz),e(Fz,Pur),e(gM,$ur),e(se,Iur),e(se,hM),e(hM,h2e),e(h2e,qur),e(hM,Nur),e(hM,vz),e(vz,jur),e(hM,Dur),e(se,Gur),e(se,pM),e(pM,p2e),e(p2e,Our),e(pM,Vur),e(pM,Tz),e(Tz,Xur),e(pM,zur),e(se,Qur),e(se,_M),e(_M,_2e),e(_2e,Wur),e(_M,Hur),e(_M,Mz),e(Mz,Uur),e(_M,Jur),e(se,Yur),e(se,uM),e(uM,u2e),e(u2e,Kur),e(uM,Zur),e(uM,Ez),e(Ez,e5r),e(uM,o5r),e(se,r5r),e(se,bM),e(bM,b2e),e(b2e,t5r),e(bM,a5r),e(bM,Cz),e(Cz,n5r),e(bM,s5r),e(se,l5r),e(se,FM),e(FM,F2e),e(F2e,i5r),e(FM,d5r),e(FM,wz),e(wz,c5r),e(FM,f5r),e(se,m5r),e(se,vM),e(vM,v2e),e(v2e,g5r),e(vM,h5r),e(vM,Az),e(Az,p5r),e(vM,_5r),e(se,u5r),e(se,TM),e(TM,T2e),e(T2e,b5r),e(TM,F5r),e(TM,yz),e(yz,v5r),e(TM,T5r),e(se,M5r),e(se,MM),e(MM,M2e),e(M2e,E5r),e(MM,C5r),e(MM,Lz),e(Lz,w5r),e(MM,A5r),e(se,y5r),e(se,EM),e(EM,E2e),e(E2e,L5r),e(EM,x5r),e(EM,xz),e(xz,k5r),e(EM,S5r),e(se,R5r),e(se,CM),e(CM,C2e),e(C2e,B5r),e(CM,P5r),e(CM,kz),e(kz,$5r),e(CM,I5r),e(To,q5r),e(To,w2e),e(w2e,N5r),e(To,j5r),g(ny,To,null),b(c,qBe,u),b(c,Nc,u),e(Nc,wM),e(wM,A2e),g(sy,A2e,null),e(Nc,D5r),e(Nc,y2e),e(y2e,G5r),b(c,NBe,u),b(c,yr,u),g(ly,yr,null),e(yr,O5r),e(yr,jc),e(jc,V5r),e(jc,Sz),e(Sz,X5r),e(jc,z5r),e(jc,Rz),e(Rz,Q5r),e(jc,W5r),e(yr,H5r),e(yr,iy),e(iy,U5r),e(iy,L2e),e(L2e,J5r),e(iy,Y5r),e(yr,K5r),e(yr,Tt),g(dy,Tt,null),e(Tt,Z5r),e(Tt,x2e),e(x2e,e2r),e(Tt,o2r),e(Tt,Dc),e(Dc,r2r),e(Dc,k2e),e(k2e,t2r),e(Dc,a2r),e(Dc,Bz),e(Bz,n2r),e(Dc,s2r),e(Tt,l2r),e(Tt,S2e),e(S2e,i2r),e(Tt,d2r),g(cy,Tt,null),e(yr,c2r),e(yr,Mo),g(fy,Mo,null),e(Mo,f2r),e(Mo,R2e),e(R2e,m2r),e(Mo,g2r),e(Mo,Cn),e(Cn,h2r),e(Cn,B2e),e(B2e,p2r),e(Cn,_2r),e(Cn,P2e),e(P2e,u2r),e(Cn,b2r),e(Cn,$2e),e($2e,F2r),e(Cn,v2r),e(Mo,T2r),e(Mo,I2e),e(I2e,AM),e(AM,q2e),e(q2e,M2r),e(AM,E2r),e(AM,Pz),e(Pz,C2r),e(AM,w2r),e(Mo,A2r),e(Mo,N2e),e(N2e,y2r),e(Mo,L2r),g(my,Mo,null),b(c,jBe,u),b(c,Gc,u),e(Gc,yM),e(yM,j2e),g(gy,j2e,null),e(Gc,x2r),e(Gc,D2e),e(D2e,k2r),b(c,DBe,u),b(c,Lr,u),g(hy,Lr,null),e(Lr,S2r),e(Lr,Oc),e(Oc,R2r),e(Oc,$z),e($z,B2r),e(Oc,P2r),e(Oc,Iz),e(Iz,$2r),e(Oc,I2r),e(Lr,q2r),e(Lr,py),e(py,N2r),e(py,G2e),e(G2e,j2r),e(py,D2r),e(Lr,G2r),e(Lr,Mt),g(_y,Mt,null),e(Mt,O2r),e(Mt,O2e),e(O2e,V2r),e(Mt,X2r),e(Mt,Vc),e(Vc,z2r),e(Vc,V2e),e(V2e,Q2r),e(Vc,W2r),e(Vc,qz),e(qz,H2r),e(Vc,U2r),e(Mt,J2r),e(Mt,X2e),e(X2e,Y2r),e(Mt,K2r),g(uy,Mt,null),e(Lr,Z2r),e(Lr,Eo),g(by,Eo,null),e(Eo,e1r),e(Eo,z2e),e(z2e,o1r),e(Eo,r1r),e(Eo,wn),e(wn,t1r),e(wn,Q2e),e(Q2e,a1r),e(wn,n1r),e(wn,W2e),e(W2e,s1r),e(wn,l1r),e(wn,H2e),e(H2e,i1r),e(wn,d1r),e(Eo,c1r),e(Eo,Y),e(Y,LM),e(LM,U2e),e(U2e,f1r),e(LM,m1r),e(LM,Nz),e(Nz,g1r),e(LM,h1r),e(Y,p1r),e(Y,xM),e(xM,J2e),e(J2e,_1r),e(xM,u1r),e(xM,jz),e(jz,b1r),e(xM,F1r),e(Y,v1r),e(Y,kM),e(kM,Y2e),e(Y2e,T1r),e(kM,M1r),e(kM,Dz),e(Dz,E1r),e(kM,C1r),e(Y,w1r),e(Y,SM),e(SM,K2e),e(K2e,A1r),e(SM,y1r),e(SM,Gz),e(Gz,L1r),e(SM,x1r),e(Y,k1r),e(Y,RM),e(RM,Z2e),e(Z2e,S1r),e(RM,R1r),e(RM,Oz),e(Oz,B1r),e(RM,P1r),e(Y,$1r),e(Y,BM),e(BM,e1e),e(e1e,I1r),e(BM,q1r),e(BM,Vz),e(Vz,N1r),e(BM,j1r),e(Y,D1r),e(Y,PM),e(PM,o1e),e(o1e,G1r),e(PM,O1r),e(PM,Xz),e(Xz,V1r),e(PM,X1r),e(Y,z1r),e(Y,$M),e($M,r1e),e(r1e,Q1r),e($M,W1r),e($M,zz),e(zz,H1r),e($M,U1r),e(Y,J1r),e(Y,IM),e(IM,t1e),e(t1e,Y1r),e(IM,K1r),e(IM,Qz),e(Qz,Z1r),e(IM,ebr),e(Y,obr),e(Y,qM),e(qM,a1e),e(a1e,rbr),e(qM,tbr),e(qM,Wz),e(Wz,abr),e(qM,nbr),e(Y,sbr),e(Y,NM),e(NM,n1e),e(n1e,lbr),e(NM,ibr),e(NM,Hz),e(Hz,dbr),e(NM,cbr),e(Y,fbr),e(Y,jM),e(jM,s1e),e(s1e,mbr),e(jM,gbr),e(jM,Uz),e(Uz,hbr),e(jM,pbr),e(Y,_br),e(Y,DM),e(DM,l1e),e(l1e,ubr),e(DM,bbr),e(DM,Jz),e(Jz,Fbr),e(DM,vbr),e(Y,Tbr),e(Y,GM),e(GM,i1e),e(i1e,Mbr),e(GM,Ebr),e(GM,Yz),e(Yz,Cbr),e(GM,wbr),e(Y,Abr),e(Y,OM),e(OM,d1e),e(d1e,ybr),e(OM,Lbr),e(OM,Kz),e(Kz,xbr),e(OM,kbr),e(Y,Sbr),e(Y,VM),e(VM,c1e),e(c1e,Rbr),e(VM,Bbr),e(VM,Zz),e(Zz,Pbr),e(VM,$br),e(Y,Ibr),e(Y,XM),e(XM,f1e),e(f1e,qbr),e(XM,Nbr),e(XM,eQ),e(eQ,jbr),e(XM,Dbr),e(Y,Gbr),e(Y,zM),e(zM,m1e),e(m1e,Obr),e(zM,Vbr),e(zM,oQ),e(oQ,Xbr),e(zM,zbr),e(Y,Qbr),e(Y,QM),e(QM,g1e),e(g1e,Wbr),e(QM,Hbr),e(QM,rQ),e(rQ,Ubr),e(QM,Jbr),e(Y,Ybr),e(Y,WM),e(WM,h1e),e(h1e,Kbr),e(WM,Zbr),e(WM,tQ),e(tQ,eFr),e(WM,oFr),e(Eo,rFr),e(Eo,p1e),e(p1e,tFr),e(Eo,aFr),g(Fy,Eo,null),b(c,GBe,u),b(c,Xc,u),e(Xc,HM),e(HM,_1e),g(vy,_1e,null),e(Xc,nFr),e(Xc,u1e),e(u1e,sFr),b(c,OBe,u),b(c,xr,u),g(Ty,xr,null),e(xr,lFr),e(xr,zc),e(zc,iFr),e(zc,aQ),e(aQ,dFr),e(zc,cFr),e(zc,nQ),e(nQ,fFr),e(zc,mFr),e(xr,gFr),e(xr,My),e(My,hFr),e(My,b1e),e(b1e,pFr),e(My,_Fr),e(xr,uFr),e(xr,Et),g(Ey,Et,null),e(Et,bFr),e(Et,F1e),e(F1e,FFr),e(Et,vFr),e(Et,Qc),e(Qc,TFr),e(Qc,v1e),e(v1e,MFr),e(Qc,EFr),e(Qc,sQ),e(sQ,CFr),e(Qc,wFr),e(Et,AFr),e(Et,T1e),e(T1e,yFr),e(Et,LFr),g(Cy,Et,null),e(xr,xFr),e(xr,Co),g(wy,Co,null),e(Co,kFr),e(Co,M1e),e(M1e,SFr),e(Co,RFr),e(Co,An),e(An,BFr),e(An,E1e),e(E1e,PFr),e(An,$Fr),e(An,C1e),e(C1e,IFr),e(An,qFr),e(An,w1e),e(w1e,NFr),e(An,jFr),e(Co,DFr),e(Co,K),e(K,UM),e(UM,A1e),e(A1e,GFr),e(UM,OFr),e(UM,lQ),e(lQ,VFr),e(UM,XFr),e(K,zFr),e(K,JM),e(JM,y1e),e(y1e,QFr),e(JM,WFr),e(JM,iQ),e(iQ,HFr),e(JM,UFr),e(K,JFr),e(K,YM),e(YM,L1e),e(L1e,YFr),e(YM,KFr),e(YM,dQ),e(dQ,ZFr),e(YM,evr),e(K,ovr),e(K,KM),e(KM,x1e),e(x1e,rvr),e(KM,tvr),e(KM,cQ),e(cQ,avr),e(KM,nvr),e(K,svr),e(K,ZM),e(ZM,k1e),e(k1e,lvr),e(ZM,ivr),e(ZM,fQ),e(fQ,dvr),e(ZM,cvr),e(K,fvr),e(K,e4),e(e4,S1e),e(S1e,mvr),e(e4,gvr),e(e4,mQ),e(mQ,hvr),e(e4,pvr),e(K,_vr),e(K,o4),e(o4,R1e),e(R1e,uvr),e(o4,bvr),e(o4,gQ),e(gQ,Fvr),e(o4,vvr),e(K,Tvr),e(K,r4),e(r4,B1e),e(B1e,Mvr),e(r4,Evr),e(r4,hQ),e(hQ,Cvr),e(r4,wvr),e(K,Avr),e(K,t4),e(t4,P1e),e(P1e,yvr),e(t4,Lvr),e(t4,pQ),e(pQ,xvr),e(t4,kvr),e(K,Svr),e(K,a4),e(a4,$1e),e($1e,Rvr),e(a4,Bvr),e(a4,_Q),e(_Q,Pvr),e(a4,$vr),e(K,Ivr),e(K,n4),e(n4,I1e),e(I1e,qvr),e(n4,Nvr),e(n4,uQ),e(uQ,jvr),e(n4,Dvr),e(K,Gvr),e(K,s4),e(s4,q1e),e(q1e,Ovr),e(s4,Vvr),e(s4,bQ),e(bQ,Xvr),e(s4,zvr),e(K,Qvr),e(K,l4),e(l4,N1e),e(N1e,Wvr),e(l4,Hvr),e(l4,FQ),e(FQ,Uvr),e(l4,Jvr),e(K,Yvr),e(K,i4),e(i4,j1e),e(j1e,Kvr),e(i4,Zvr),e(i4,vQ),e(vQ,eTr),e(i4,oTr),e(K,rTr),e(K,d4),e(d4,D1e),e(D1e,tTr),e(d4,aTr),e(d4,TQ),e(TQ,nTr),e(d4,sTr),e(K,lTr),e(K,c4),e(c4,G1e),e(G1e,iTr),e(c4,dTr),e(c4,MQ),e(MQ,cTr),e(c4,fTr),e(K,mTr),e(K,f4),e(f4,O1e),e(O1e,gTr),e(f4,hTr),e(f4,EQ),e(EQ,pTr),e(f4,_Tr),e(K,uTr),e(K,m4),e(m4,V1e),e(V1e,bTr),e(m4,FTr),e(m4,CQ),e(CQ,vTr),e(m4,TTr),e(K,MTr),e(K,g4),e(g4,X1e),e(X1e,ETr),e(g4,CTr),e(g4,wQ),e(wQ,wTr),e(g4,ATr),e(K,yTr),e(K,h4),e(h4,z1e),e(z1e,LTr),e(h4,xTr),e(h4,AQ),e(AQ,kTr),e(h4,STr),e(Co,RTr),e(Co,Q1e),e(Q1e,BTr),e(Co,PTr),g(Ay,Co,null),b(c,VBe,u),b(c,Wc,u),e(Wc,p4),e(p4,W1e),g(yy,W1e,null),e(Wc,$Tr),e(Wc,H1e),e(H1e,ITr),b(c,XBe,u),b(c,kr,u),g(Ly,kr,null),e(kr,qTr),e(kr,Hc),e(Hc,NTr),e(Hc,yQ),e(yQ,jTr),e(Hc,DTr),e(Hc,LQ),e(LQ,GTr),e(Hc,OTr),e(kr,VTr),e(kr,xy),e(xy,XTr),e(xy,U1e),e(U1e,zTr),e(xy,QTr),e(kr,WTr),e(kr,Ct),g(ky,Ct,null),e(Ct,HTr),e(Ct,J1e),e(J1e,UTr),e(Ct,JTr),e(Ct,Uc),e(Uc,YTr),e(Uc,Y1e),e(Y1e,KTr),e(Uc,ZTr),e(Uc,xQ),e(xQ,e9r),e(Uc,o9r),e(Ct,r9r),e(Ct,K1e),e(K1e,t9r),e(Ct,a9r),g(Sy,Ct,null),e(kr,n9r),e(kr,wo),g(Ry,wo,null),e(wo,s9r),e(wo,Z1e),e(Z1e,l9r),e(wo,i9r),e(wo,yn),e(yn,d9r),e(yn,ebe),e(ebe,c9r),e(yn,f9r),e(yn,obe),e(obe,m9r),e(yn,g9r),e(yn,rbe),e(rbe,h9r),e(yn,p9r),e(wo,_9r),e(wo,tbe),e(tbe,_4),e(_4,abe),e(abe,u9r),e(_4,b9r),e(_4,kQ),e(kQ,F9r),e(_4,v9r),e(wo,T9r),e(wo,nbe),e(nbe,M9r),e(wo,E9r),g(By,wo,null),b(c,zBe,u),b(c,Jc,u),e(Jc,u4),e(u4,sbe),g(Py,sbe,null),e(Jc,C9r),e(Jc,lbe),e(lbe,w9r),b(c,QBe,u),b(c,Sr,u),g($y,Sr,null),e(Sr,A9r),e(Sr,Yc),e(Yc,y9r),e(Yc,SQ),e(SQ,L9r),e(Yc,x9r),e(Yc,RQ),e(RQ,k9r),e(Yc,S9r),e(Sr,R9r),e(Sr,Iy),e(Iy,B9r),e(Iy,ibe),e(ibe,P9r),e(Iy,$9r),e(Sr,I9r),e(Sr,wt),g(qy,wt,null),e(wt,q9r),e(wt,dbe),e(dbe,N9r),e(wt,j9r),e(wt,Kc),e(Kc,D9r),e(Kc,cbe),e(cbe,G9r),e(Kc,O9r),e(Kc,BQ),e(BQ,V9r),e(Kc,X9r),e(wt,z9r),e(wt,fbe),e(fbe,Q9r),e(wt,W9r),g(Ny,wt,null),e(Sr,H9r),e(Sr,Ao),g(jy,Ao,null),e(Ao,U9r),e(Ao,mbe),e(mbe,J9r),e(Ao,Y9r),e(Ao,Ln),e(Ln,K9r),e(Ln,gbe),e(gbe,Z9r),e(Ln,eMr),e(Ln,hbe),e(hbe,oMr),e(Ln,rMr),e(Ln,pbe),e(pbe,tMr),e(Ln,aMr),e(Ao,nMr),e(Ao,_be),e(_be,b4),e(b4,ube),e(ube,sMr),e(b4,lMr),e(b4,PQ),e(PQ,iMr),e(b4,dMr),e(Ao,cMr),e(Ao,bbe),e(bbe,fMr),e(Ao,mMr),g(Dy,Ao,null),b(c,WBe,u),b(c,Zc,u),e(Zc,F4),e(F4,Fbe),g(Gy,Fbe,null),e(Zc,gMr),e(Zc,vbe),e(vbe,hMr),b(c,HBe,u),b(c,Rr,u),g(Oy,Rr,null),e(Rr,pMr),e(Rr,ef),e(ef,_Mr),e(ef,$Q),e($Q,uMr),e(ef,bMr),e(ef,IQ),e(IQ,FMr),e(ef,vMr),e(Rr,TMr),e(Rr,Vy),e(Vy,MMr),e(Vy,Tbe),e(Tbe,EMr),e(Vy,CMr),e(Rr,wMr),e(Rr,At),g(Xy,At,null),e(At,AMr),e(At,Mbe),e(Mbe,yMr),e(At,LMr),e(At,of),e(of,xMr),e(of,Ebe),e(Ebe,kMr),e(of,SMr),e(of,qQ),e(qQ,RMr),e(of,BMr),e(At,PMr),e(At,Cbe),e(Cbe,$Mr),e(At,IMr),g(zy,At,null),e(Rr,qMr),e(Rr,yo),g(Qy,yo,null),e(yo,NMr),e(yo,wbe),e(wbe,jMr),e(yo,DMr),e(yo,xn),e(xn,GMr),e(xn,Abe),e(Abe,OMr),e(xn,VMr),e(xn,ybe),e(ybe,XMr),e(xn,zMr),e(xn,Lbe),e(Lbe,QMr),e(xn,WMr),e(yo,HMr),e(yo,z),e(z,v4),e(v4,xbe),e(xbe,UMr),e(v4,JMr),e(v4,NQ),e(NQ,YMr),e(v4,KMr),e(z,ZMr),e(z,T4),e(T4,kbe),e(kbe,e4r),e(T4,o4r),e(T4,jQ),e(jQ,r4r),e(T4,t4r),e(z,a4r),e(z,M4),e(M4,Sbe),e(Sbe,n4r),e(M4,s4r),e(M4,DQ),e(DQ,l4r),e(M4,i4r),e(z,d4r),e(z,E4),e(E4,Rbe),e(Rbe,c4r),e(E4,f4r),e(E4,GQ),e(GQ,m4r),e(E4,g4r),e(z,h4r),e(z,C4),e(C4,Bbe),e(Bbe,p4r),e(C4,_4r),e(C4,OQ),e(OQ,u4r),e(C4,b4r),e(z,F4r),e(z,w4),e(w4,Pbe),e(Pbe,v4r),e(w4,T4r),e(w4,VQ),e(VQ,M4r),e(w4,E4r),e(z,C4r),e(z,A4),e(A4,$be),e($be,w4r),e(A4,A4r),e(A4,XQ),e(XQ,y4r),e(A4,L4r),e(z,x4r),e(z,y4),e(y4,Ibe),e(Ibe,k4r),e(y4,S4r),e(y4,zQ),e(zQ,R4r),e(y4,B4r),e(z,P4r),e(z,L4),e(L4,qbe),e(qbe,$4r),e(L4,I4r),e(L4,QQ),e(QQ,q4r),e(L4,N4r),e(z,j4r),e(z,x4),e(x4,Nbe),e(Nbe,D4r),e(x4,G4r),e(x4,WQ),e(WQ,O4r),e(x4,V4r),e(z,X4r),e(z,k4),e(k4,jbe),e(jbe,z4r),e(k4,Q4r),e(k4,HQ),e(HQ,W4r),e(k4,H4r),e(z,U4r),e(z,S4),e(S4,Dbe),e(Dbe,J4r),e(S4,Y4r),e(S4,UQ),e(UQ,K4r),e(S4,Z4r),e(z,eEr),e(z,R4),e(R4,Gbe),e(Gbe,oEr),e(R4,rEr),e(R4,JQ),e(JQ,tEr),e(R4,aEr),e(z,nEr),e(z,B4),e(B4,Obe),e(Obe,sEr),e(B4,lEr),e(B4,YQ),e(YQ,iEr),e(B4,dEr),e(z,cEr),e(z,P4),e(P4,Vbe),e(Vbe,fEr),e(P4,mEr),e(P4,KQ),e(KQ,gEr),e(P4,hEr),e(z,pEr),e(z,$4),e($4,Xbe),e(Xbe,_Er),e($4,uEr),e($4,ZQ),e(ZQ,bEr),e($4,FEr),e(z,vEr),e(z,I4),e(I4,zbe),e(zbe,TEr),e(I4,MEr),e(I4,eW),e(eW,EEr),e(I4,CEr),e(z,wEr),e(z,q4),e(q4,Qbe),e(Qbe,AEr),e(q4,yEr),e(q4,oW),e(oW,LEr),e(q4,xEr),e(z,kEr),e(z,N4),e(N4,Wbe),e(Wbe,SEr),e(N4,REr),e(N4,rW),e(rW,BEr),e(N4,PEr),e(z,$Er),e(z,j4),e(j4,Hbe),e(Hbe,IEr),e(j4,qEr),e(j4,tW),e(tW,NEr),e(j4,jEr),e(z,DEr),e(z,D4),e(D4,Ube),e(Ube,GEr),e(D4,OEr),e(D4,aW),e(aW,VEr),e(D4,XEr),e(z,zEr),e(z,G4),e(G4,Jbe),e(Jbe,QEr),e(G4,WEr),e(G4,nW),e(nW,HEr),e(G4,UEr),e(z,JEr),e(z,O4),e(O4,Ybe),e(Ybe,YEr),e(O4,KEr),e(O4,sW),e(sW,ZEr),e(O4,e3r),e(z,o3r),e(z,V4),e(V4,Kbe),e(Kbe,r3r),e(V4,t3r),e(V4,lW),e(lW,a3r),e(V4,n3r),e(z,s3r),e(z,X4),e(X4,Zbe),e(Zbe,l3r),e(X4,i3r),e(X4,iW),e(iW,d3r),e(X4,c3r),e(yo,f3r),e(yo,eFe),e(eFe,m3r),e(yo,g3r),g(Wy,yo,null),b(c,UBe,u),b(c,rf,u),e(rf,z4),e(z4,oFe),g(Hy,oFe,null),e(rf,h3r),e(rf,rFe),e(rFe,p3r),b(c,JBe,u),b(c,Br,u),g(Uy,Br,null),e(Br,_3r),e(Br,tf),e(tf,u3r),e(tf,dW),e(dW,b3r),e(tf,F3r),e(tf,cW),e(cW,v3r),e(tf,T3r),e(Br,M3r),e(Br,Jy),e(Jy,E3r),e(Jy,tFe),e(tFe,C3r),e(Jy,w3r),e(Br,A3r),e(Br,yt),g(Yy,yt,null),e(yt,y3r),e(yt,aFe),e(aFe,L3r),e(yt,x3r),e(yt,af),e(af,k3r),e(af,nFe),e(nFe,S3r),e(af,R3r),e(af,fW),e(fW,B3r),e(af,P3r),e(yt,$3r),e(yt,sFe),e(sFe,I3r),e(yt,q3r),g(Ky,yt,null),e(Br,N3r),e(Br,Lo),g(Zy,Lo,null),e(Lo,j3r),e(Lo,lFe),e(lFe,D3r),e(Lo,G3r),e(Lo,kn),e(kn,O3r),e(kn,iFe),e(iFe,V3r),e(kn,X3r),e(kn,dFe),e(dFe,z3r),e(kn,Q3r),e(kn,cFe),e(cFe,W3r),e(kn,H3r),e(Lo,U3r),e(Lo,ca),e(ca,Q4),e(Q4,fFe),e(fFe,J3r),e(Q4,Y3r),e(Q4,mW),e(mW,K3r),e(Q4,Z3r),e(ca,eCr),e(ca,W4),e(W4,mFe),e(mFe,oCr),e(W4,rCr),e(W4,gW),e(gW,tCr),e(W4,aCr),e(ca,nCr),e(ca,H4),e(H4,gFe),e(gFe,sCr),e(H4,lCr),e(H4,hW),e(hW,iCr),e(H4,dCr),e(ca,cCr),e(ca,U4),e(U4,hFe),e(hFe,fCr),e(U4,mCr),e(U4,pW),e(pW,gCr),e(U4,hCr),e(ca,pCr),e(ca,J4),e(J4,pFe),e(pFe,_Cr),e(J4,uCr),e(J4,_W),e(_W,bCr),e(J4,FCr),e(Lo,vCr),e(Lo,_Fe),e(_Fe,TCr),e(Lo,MCr),g(e8,Lo,null),b(c,YBe,u),b(c,nf,u),e(nf,Y4),e(Y4,uFe),g(o8,uFe,null),e(nf,ECr),e(nf,bFe),e(bFe,CCr),b(c,KBe,u),b(c,Pr,u),g(r8,Pr,null),e(Pr,wCr),e(Pr,sf),e(sf,ACr),e(sf,uW),e(uW,yCr),e(sf,LCr),e(sf,bW),e(bW,xCr),e(sf,kCr),e(Pr,SCr),e(Pr,t8),e(t8,RCr),e(t8,FFe),e(FFe,BCr),e(t8,PCr),e(Pr,$Cr),e(Pr,Lt),g(a8,Lt,null),e(Lt,ICr),e(Lt,vFe),e(vFe,qCr),e(Lt,NCr),e(Lt,lf),e(lf,jCr),e(lf,TFe),e(TFe,DCr),e(lf,GCr),e(lf,FW),e(FW,OCr),e(lf,VCr),e(Lt,XCr),e(Lt,MFe),e(MFe,zCr),e(Lt,QCr),g(n8,Lt,null),e(Pr,WCr),e(Pr,xo),g(s8,xo,null),e(xo,HCr),e(xo,EFe),e(EFe,UCr),e(xo,JCr),e(xo,Sn),e(Sn,YCr),e(Sn,CFe),e(CFe,KCr),e(Sn,ZCr),e(Sn,wFe),e(wFe,ewr),e(Sn,owr),e(Sn,AFe),e(AFe,rwr),e(Sn,twr),e(xo,awr),e(xo,me),e(me,K4),e(K4,yFe),e(yFe,nwr),e(K4,swr),e(K4,vW),e(vW,lwr),e(K4,iwr),e(me,dwr),e(me,Z4),e(Z4,LFe),e(LFe,cwr),e(Z4,fwr),e(Z4,TW),e(TW,mwr),e(Z4,gwr),e(me,hwr),e(me,eE),e(eE,xFe),e(xFe,pwr),e(eE,_wr),e(eE,MW),e(MW,uwr),e(eE,bwr),e(me,Fwr),e(me,oE),e(oE,kFe),e(kFe,vwr),e(oE,Twr),e(oE,EW),e(EW,Mwr),e(oE,Ewr),e(me,Cwr),e(me,rE),e(rE,SFe),e(SFe,wwr),e(rE,Awr),e(rE,CW),e(CW,ywr),e(rE,Lwr),e(me,xwr),e(me,tE),e(tE,RFe),e(RFe,kwr),e(tE,Swr),e(tE,wW),e(wW,Rwr),e(tE,Bwr),e(me,Pwr),e(me,aE),e(aE,BFe),e(BFe,$wr),e(aE,Iwr),e(aE,AW),e(AW,qwr),e(aE,Nwr),e(me,jwr),e(me,nE),e(nE,PFe),e(PFe,Dwr),e(nE,Gwr),e(nE,yW),e(yW,Owr),e(nE,Vwr),e(me,Xwr),e(me,sE),e(sE,$Fe),e($Fe,zwr),e(sE,Qwr),e(sE,LW),e(LW,Wwr),e(sE,Hwr),e(me,Uwr),e(me,lE),e(lE,IFe),e(IFe,Jwr),e(lE,Ywr),e(lE,xW),e(xW,Kwr),e(lE,Zwr),e(me,e6r),e(me,iE),e(iE,qFe),e(qFe,o6r),e(iE,r6r),e(iE,kW),e(kW,t6r),e(iE,a6r),e(me,n6r),e(me,dE),e(dE,NFe),e(NFe,s6r),e(dE,l6r),e(dE,SW),e(SW,i6r),e(dE,d6r),e(xo,c6r),e(xo,jFe),e(jFe,f6r),e(xo,m6r),g(l8,xo,null),b(c,ZBe,u),b(c,df,u),e(df,cE),e(cE,DFe),g(i8,DFe,null),e(df,g6r),e(df,GFe),e(GFe,h6r),b(c,ePe,u),b(c,$r,u),g(d8,$r,null),e($r,p6r),e($r,cf),e(cf,_6r),e(cf,RW),e(RW,u6r),e(cf,b6r),e(cf,BW),e(BW,F6r),e(cf,v6r),e($r,T6r),e($r,c8),e(c8,M6r),e(c8,OFe),e(OFe,E6r),e(c8,C6r),e($r,w6r),e($r,xt),g(f8,xt,null),e(xt,A6r),e(xt,VFe),e(VFe,y6r),e(xt,L6r),e(xt,ff),e(ff,x6r),e(ff,XFe),e(XFe,k6r),e(ff,S6r),e(ff,PW),e(PW,R6r),e(ff,B6r),e(xt,P6r),e(xt,zFe),e(zFe,$6r),e(xt,I6r),g(m8,xt,null),e($r,q6r),e($r,ko),g(g8,ko,null),e(ko,N6r),e(ko,QFe),e(QFe,j6r),e(ko,D6r),e(ko,Rn),e(Rn,G6r),e(Rn,WFe),e(WFe,O6r),e(Rn,V6r),e(Rn,HFe),e(HFe,X6r),e(Rn,z6r),e(Rn,UFe),e(UFe,Q6r),e(Rn,W6r),e(ko,H6r),e(ko,Fe),e(Fe,fE),e(fE,JFe),e(JFe,U6r),e(fE,J6r),e(fE,$W),e($W,Y6r),e(fE,K6r),e(Fe,Z6r),e(Fe,mE),e(mE,YFe),e(YFe,eAr),e(mE,oAr),e(mE,IW),e(IW,rAr),e(mE,tAr),e(Fe,aAr),e(Fe,gE),e(gE,KFe),e(KFe,nAr),e(gE,sAr),e(gE,qW),e(qW,lAr),e(gE,iAr),e(Fe,dAr),e(Fe,hE),e(hE,ZFe),e(ZFe,cAr),e(hE,fAr),e(hE,NW),e(NW,mAr),e(hE,gAr),e(Fe,hAr),e(Fe,pE),e(pE,eve),e(eve,pAr),e(pE,_Ar),e(pE,jW),e(jW,uAr),e(pE,bAr),e(Fe,FAr),e(Fe,_E),e(_E,ove),e(ove,vAr),e(_E,TAr),e(_E,DW),e(DW,MAr),e(_E,EAr),e(Fe,CAr),e(Fe,uE),e(uE,rve),e(rve,wAr),e(uE,AAr),e(uE,GW),e(GW,yAr),e(uE,LAr),e(Fe,xAr),e(Fe,bE),e(bE,tve),e(tve,kAr),e(bE,SAr),e(bE,OW),e(OW,RAr),e(bE,BAr),e(Fe,PAr),e(Fe,FE),e(FE,ave),e(ave,$Ar),e(FE,IAr),e(FE,VW),e(VW,qAr),e(FE,NAr),e(Fe,jAr),e(Fe,vE),e(vE,nve),e(nve,DAr),e(vE,GAr),e(vE,XW),e(XW,OAr),e(vE,VAr),e(ko,XAr),e(ko,sve),e(sve,zAr),e(ko,QAr),g(h8,ko,null),b(c,oPe,u),b(c,mf,u),e(mf,TE),e(TE,lve),g(p8,lve,null),e(mf,WAr),e(mf,ive),e(ive,HAr),b(c,rPe,u),b(c,Ir,u),g(_8,Ir,null),e(Ir,UAr),e(Ir,gf),e(gf,JAr),e(gf,zW),e(zW,YAr),e(gf,KAr),e(gf,QW),e(QW,ZAr),e(gf,e0r),e(Ir,o0r),e(Ir,u8),e(u8,r0r),e(u8,dve),e(dve,t0r),e(u8,a0r),e(Ir,n0r),e(Ir,kt),g(b8,kt,null),e(kt,s0r),e(kt,cve),e(cve,l0r),e(kt,i0r),e(kt,hf),e(hf,d0r),e(hf,fve),e(fve,c0r),e(hf,f0r),e(hf,WW),e(WW,m0r),e(hf,g0r),e(kt,h0r),e(kt,mve),e(mve,p0r),e(kt,_0r),g(F8,kt,null),e(Ir,u0r),e(Ir,So),g(v8,So,null),e(So,b0r),e(So,gve),e(gve,F0r),e(So,v0r),e(So,Bn),e(Bn,T0r),e(Bn,hve),e(hve,M0r),e(Bn,E0r),e(Bn,pve),e(pve,C0r),e(Bn,w0r),e(Bn,_ve),e(_ve,A0r),e(Bn,y0r),e(So,L0r),e(So,Ee),e(Ee,ME),e(ME,uve),e(uve,x0r),e(ME,k0r),e(ME,HW),e(HW,S0r),e(ME,R0r),e(Ee,B0r),e(Ee,EE),e(EE,bve),e(bve,P0r),e(EE,$0r),e(EE,UW),e(UW,I0r),e(EE,q0r),e(Ee,N0r),e(Ee,CE),e(CE,Fve),e(Fve,j0r),e(CE,D0r),e(CE,JW),e(JW,G0r),e(CE,O0r),e(Ee,V0r),e(Ee,wE),e(wE,vve),e(vve,X0r),e(wE,z0r),e(wE,YW),e(YW,Q0r),e(wE,W0r),e(Ee,H0r),e(Ee,AE),e(AE,Tve),e(Tve,U0r),e(AE,J0r),e(AE,KW),e(KW,Y0r),e(AE,K0r),e(Ee,Z0r),e(Ee,yE),e(yE,Mve),e(Mve,eyr),e(yE,oyr),e(yE,ZW),e(ZW,ryr),e(yE,tyr),e(Ee,ayr),e(Ee,LE),e(LE,Eve),e(Eve,nyr),e(LE,syr),e(LE,eH),e(eH,lyr),e(LE,iyr),e(Ee,dyr),e(Ee,xE),e(xE,Cve),e(Cve,cyr),e(xE,fyr),e(xE,oH),e(oH,myr),e(xE,gyr),e(Ee,hyr),e(Ee,kE),e(kE,wve),e(wve,pyr),e(kE,_yr),e(kE,rH),e(rH,uyr),e(kE,byr),e(So,Fyr),e(So,Ave),e(Ave,vyr),e(So,Tyr),g(T8,So,null),b(c,tPe,u),b(c,pf,u),e(pf,SE),e(SE,yve),g(M8,yve,null),e(pf,Myr),e(pf,Lve),e(Lve,Eyr),b(c,aPe,u),b(c,qr,u),g(E8,qr,null),e(qr,Cyr),e(qr,_f),e(_f,wyr),e(_f,tH),e(tH,Ayr),e(_f,yyr),e(_f,aH),e(aH,Lyr),e(_f,xyr),e(qr,kyr),e(qr,C8),e(C8,Syr),e(C8,xve),e(xve,Ryr),e(C8,Byr),e(qr,Pyr),e(qr,St),g(w8,St,null),e(St,$yr),e(St,kve),e(kve,Iyr),e(St,qyr),e(St,uf),e(uf,Nyr),e(uf,Sve),e(Sve,jyr),e(uf,Dyr),e(uf,nH),e(nH,Gyr),e(uf,Oyr),e(St,Vyr),e(St,Rve),e(Rve,Xyr),e(St,zyr),g(A8,St,null),e(qr,Qyr),e(qr,Ro),g(y8,Ro,null),e(Ro,Wyr),e(Ro,Bve),e(Bve,Hyr),e(Ro,Uyr),e(Ro,Pn),e(Pn,Jyr),e(Pn,Pve),e(Pve,Yyr),e(Pn,Kyr),e(Pn,$ve),e($ve,Zyr),e(Pn,e8r),e(Pn,Ive),e(Ive,o8r),e(Pn,r8r),e(Ro,t8r),e(Ro,ve),e(ve,RE),e(RE,qve),e(qve,a8r),e(RE,n8r),e(RE,sH),e(sH,s8r),e(RE,l8r),e(ve,i8r),e(ve,BE),e(BE,Nve),e(Nve,d8r),e(BE,c8r),e(BE,lH),e(lH,f8r),e(BE,m8r),e(ve,g8r),e(ve,PE),e(PE,jve),e(jve,h8r),e(PE,p8r),e(PE,iH),e(iH,_8r),e(PE,u8r),e(ve,b8r),e(ve,$E),e($E,Dve),e(Dve,F8r),e($E,v8r),e($E,dH),e(dH,T8r),e($E,M8r),e(ve,E8r),e(ve,IE),e(IE,Gve),e(Gve,C8r),e(IE,w8r),e(IE,cH),e(cH,A8r),e(IE,y8r),e(ve,L8r),e(ve,qE),e(qE,Ove),e(Ove,x8r),e(qE,k8r),e(qE,fH),e(fH,S8r),e(qE,R8r),e(ve,B8r),e(ve,NE),e(NE,Vve),e(Vve,P8r),e(NE,$8r),e(NE,mH),e(mH,I8r),e(NE,q8r),e(ve,N8r),e(ve,jE),e(jE,Xve),e(Xve,j8r),e(jE,D8r),e(jE,gH),e(gH,G8r),e(jE,O8r),e(ve,V8r),e(ve,DE),e(DE,zve),e(zve,X8r),e(DE,z8r),e(DE,hH),e(hH,Q8r),e(DE,W8r),e(ve,H8r),e(ve,GE),e(GE,Qve),e(Qve,U8r),e(GE,J8r),e(GE,pH),e(pH,Y8r),e(GE,K8r),e(Ro,Z8r),e(Ro,Wve),e(Wve,eLr),e(Ro,oLr),g(L8,Ro,null),b(c,nPe,u),b(c,bf,u),e(bf,OE),e(OE,Hve),g(x8,Hve,null),e(bf,rLr),e(bf,Uve),e(Uve,tLr),b(c,sPe,u),b(c,Nr,u),g(k8,Nr,null),e(Nr,aLr),e(Nr,Ff),e(Ff,nLr),e(Ff,_H),e(_H,sLr),e(Ff,lLr),e(Ff,uH),e(uH,iLr),e(Ff,dLr),e(Nr,cLr),e(Nr,S8),e(S8,fLr),e(S8,Jve),e(Jve,mLr),e(S8,gLr),e(Nr,hLr),e(Nr,Rt),g(R8,Rt,null),e(Rt,pLr),e(Rt,Yve),e(Yve,_Lr),e(Rt,uLr),e(Rt,vf),e(vf,bLr),e(vf,Kve),e(Kve,FLr),e(vf,vLr),e(vf,bH),e(bH,TLr),e(vf,MLr),e(Rt,ELr),e(Rt,Zve),e(Zve,CLr),e(Rt,wLr),g(B8,Rt,null),e(Nr,ALr),e(Nr,Bo),g(P8,Bo,null),e(Bo,yLr),e(Bo,eTe),e(eTe,LLr),e(Bo,xLr),e(Bo,$n),e($n,kLr),e($n,oTe),e(oTe,SLr),e($n,RLr),e($n,rTe),e(rTe,BLr),e($n,PLr),e($n,tTe),e(tTe,$Lr),e($n,ILr),e(Bo,qLr),e(Bo,Te),e(Te,VE),e(VE,aTe),e(aTe,NLr),e(VE,jLr),e(VE,FH),e(FH,DLr),e(VE,GLr),e(Te,OLr),e(Te,XE),e(XE,nTe),e(nTe,VLr),e(XE,XLr),e(XE,vH),e(vH,zLr),e(XE,QLr),e(Te,WLr),e(Te,zE),e(zE,sTe),e(sTe,HLr),e(zE,ULr),e(zE,TH),e(TH,JLr),e(zE,YLr),e(Te,KLr),e(Te,QE),e(QE,lTe),e(lTe,ZLr),e(QE,e7r),e(QE,MH),e(MH,o7r),e(QE,r7r),e(Te,t7r),e(Te,WE),e(WE,iTe),e(iTe,a7r),e(WE,n7r),e(WE,EH),e(EH,s7r),e(WE,l7r),e(Te,i7r),e(Te,HE),e(HE,dTe),e(dTe,d7r),e(HE,c7r),e(HE,CH),e(CH,f7r),e(HE,m7r),e(Te,g7r),e(Te,UE),e(UE,cTe),e(cTe,h7r),e(UE,p7r),e(UE,wH),e(wH,_7r),e(UE,u7r),e(Te,b7r),e(Te,JE),e(JE,fTe),e(fTe,F7r),e(JE,v7r),e(JE,AH),e(AH,T7r),e(JE,M7r),e(Te,E7r),e(Te,YE),e(YE,mTe),e(mTe,C7r),e(YE,w7r),e(YE,yH),e(yH,A7r),e(YE,y7r),e(Te,L7r),e(Te,KE),e(KE,gTe),e(gTe,x7r),e(KE,k7r),e(KE,LH),e(LH,S7r),e(KE,R7r),e(Bo,B7r),e(Bo,hTe),e(hTe,P7r),e(Bo,$7r),g($8,Bo,null),b(c,lPe,u),b(c,Tf,u),e(Tf,ZE),e(ZE,pTe),g(I8,pTe,null),e(Tf,I7r),e(Tf,_Te),e(_Te,q7r),b(c,iPe,u),b(c,jr,u),g(q8,jr,null),e(jr,N7r),e(jr,Mf),e(Mf,j7r),e(Mf,xH),e(xH,D7r),e(Mf,G7r),e(Mf,kH),e(kH,O7r),e(Mf,V7r),e(jr,X7r),e(jr,N8),e(N8,z7r),e(N8,uTe),e(uTe,Q7r),e(N8,W7r),e(jr,H7r),e(jr,Bt),g(j8,Bt,null),e(Bt,U7r),e(Bt,bTe),e(bTe,J7r),e(Bt,Y7r),e(Bt,Ef),e(Ef,K7r),e(Ef,FTe),e(FTe,Z7r),e(Ef,exr),e(Ef,SH),e(SH,oxr),e(Ef,rxr),e(Bt,txr),e(Bt,vTe),e(vTe,axr),e(Bt,nxr),g(D8,Bt,null),e(jr,sxr),e(jr,Po),g(G8,Po,null),e(Po,lxr),e(Po,TTe),e(TTe,ixr),e(Po,dxr),e(Po,In),e(In,cxr),e(In,MTe),e(MTe,fxr),e(In,mxr),e(In,ETe),e(ETe,gxr),e(In,hxr),e(In,CTe),e(CTe,pxr),e(In,_xr),e(Po,uxr),e(Po,Be),e(Be,e3),e(e3,wTe),e(wTe,bxr),e(e3,Fxr),e(e3,RH),e(RH,vxr),e(e3,Txr),e(Be,Mxr),e(Be,o3),e(o3,ATe),e(ATe,Exr),e(o3,Cxr),e(o3,BH),e(BH,wxr),e(o3,Axr),e(Be,yxr),e(Be,r3),e(r3,yTe),e(yTe,Lxr),e(r3,xxr),e(r3,PH),e(PH,kxr),e(r3,Sxr),e(Be,Rxr),e(Be,t3),e(t3,LTe),e(LTe,Bxr),e(t3,Pxr),e(t3,$H),e($H,$xr),e(t3,Ixr),e(Be,qxr),e(Be,a3),e(a3,xTe),e(xTe,Nxr),e(a3,jxr),e(a3,IH),e(IH,Dxr),e(a3,Gxr),e(Be,Oxr),e(Be,n3),e(n3,kTe),e(kTe,Vxr),e(n3,Xxr),e(n3,qH),e(qH,zxr),e(n3,Qxr),e(Be,Wxr),e(Be,s3),e(s3,STe),e(STe,Hxr),e(s3,Uxr),e(s3,NH),e(NH,Jxr),e(s3,Yxr),e(Be,Kxr),e(Be,l3),e(l3,RTe),e(RTe,Zxr),e(l3,ekr),e(l3,jH),e(jH,okr),e(l3,rkr),e(Po,tkr),e(Po,BTe),e(BTe,akr),e(Po,nkr),g(O8,Po,null),b(c,dPe,u),b(c,Cf,u),e(Cf,i3),e(i3,PTe),g(V8,PTe,null),e(Cf,skr),e(Cf,$Te),e($Te,lkr),b(c,cPe,u),b(c,Dr,u),g(X8,Dr,null),e(Dr,ikr),e(Dr,wf),e(wf,dkr),e(wf,DH),e(DH,ckr),e(wf,fkr),e(wf,GH),e(GH,mkr),e(wf,gkr),e(Dr,hkr),e(Dr,z8),e(z8,pkr),e(z8,ITe),e(ITe,_kr),e(z8,ukr),e(Dr,bkr),e(Dr,Pt),g(Q8,Pt,null),e(Pt,Fkr),e(Pt,qTe),e(qTe,vkr),e(Pt,Tkr),e(Pt,Af),e(Af,Mkr),e(Af,NTe),e(NTe,Ekr),e(Af,Ckr),e(Af,OH),e(OH,wkr),e(Af,Akr),e(Pt,ykr),e(Pt,jTe),e(jTe,Lkr),e(Pt,xkr),g(W8,Pt,null),e(Dr,kkr),e(Dr,$o),g(H8,$o,null),e($o,Skr),e($o,DTe),e(DTe,Rkr),e($o,Bkr),e($o,qn),e(qn,Pkr),e(qn,GTe),e(GTe,$kr),e(qn,Ikr),e(qn,OTe),e(OTe,qkr),e(qn,Nkr),e(qn,VTe),e(VTe,jkr),e(qn,Dkr),e($o,Gkr),e($o,Pe),e(Pe,d3),e(d3,XTe),e(XTe,Okr),e(d3,Vkr),e(d3,VH),e(VH,Xkr),e(d3,zkr),e(Pe,Qkr),e(Pe,c3),e(c3,zTe),e(zTe,Wkr),e(c3,Hkr),e(c3,XH),e(XH,Ukr),e(c3,Jkr),e(Pe,Ykr),e(Pe,f3),e(f3,QTe),e(QTe,Kkr),e(f3,Zkr),e(f3,zH),e(zH,eSr),e(f3,oSr),e(Pe,rSr),e(Pe,m3),e(m3,WTe),e(WTe,tSr),e(m3,aSr),e(m3,QH),e(QH,nSr),e(m3,sSr),e(Pe,lSr),e(Pe,g3),e(g3,HTe),e(HTe,iSr),e(g3,dSr),e(g3,WH),e(WH,cSr),e(g3,fSr),e(Pe,mSr),e(Pe,h3),e(h3,UTe),e(UTe,gSr),e(h3,hSr),e(h3,HH),e(HH,pSr),e(h3,_Sr),e(Pe,uSr),e(Pe,p3),e(p3,JTe),e(JTe,bSr),e(p3,FSr),e(p3,UH),e(UH,vSr),e(p3,TSr),e(Pe,MSr),e(Pe,_3),e(_3,YTe),e(YTe,ESr),e(_3,CSr),e(_3,JH),e(JH,wSr),e(_3,ASr),e($o,ySr),e($o,KTe),e(KTe,LSr),e($o,xSr),g(U8,$o,null),b(c,fPe,u),b(c,yf,u),e(yf,u3),e(u3,ZTe),g(J8,ZTe,null),e(yf,kSr),e(yf,e9e),e(e9e,SSr),b(c,mPe,u),b(c,Gr,u),g(Y8,Gr,null),e(Gr,RSr),e(Gr,Lf),e(Lf,BSr),e(Lf,YH),e(YH,PSr),e(Lf,$Sr),e(Lf,KH),e(KH,ISr),e(Lf,qSr),e(Gr,NSr),e(Gr,K8),e(K8,jSr),e(K8,o9e),e(o9e,DSr),e(K8,GSr),e(Gr,OSr),e(Gr,$t),g(Z8,$t,null),e($t,VSr),e($t,r9e),e(r9e,XSr),e($t,zSr),e($t,xf),e(xf,QSr),e(xf,t9e),e(t9e,WSr),e(xf,HSr),e(xf,ZH),e(ZH,USr),e(xf,JSr),e($t,YSr),e($t,a9e),e(a9e,KSr),e($t,ZSr),g(eL,$t,null),e(Gr,eRr),e(Gr,Io),g(oL,Io,null),e(Io,oRr),e(Io,n9e),e(n9e,rRr),e(Io,tRr),e(Io,Nn),e(Nn,aRr),e(Nn,s9e),e(s9e,nRr),e(Nn,sRr),e(Nn,l9e),e(l9e,lRr),e(Nn,iRr),e(Nn,i9e),e(i9e,dRr),e(Nn,cRr),e(Io,fRr),e(Io,d9e),e(d9e,b3),e(b3,c9e),e(c9e,mRr),e(b3,gRr),e(b3,eU),e(eU,hRr),e(b3,pRr),e(Io,_Rr),e(Io,f9e),e(f9e,uRr),e(Io,bRr),g(rL,Io,null),b(c,gPe,u),b(c,kf,u),e(kf,F3),e(F3,m9e),g(tL,m9e,null),e(kf,FRr),e(kf,g9e),e(g9e,vRr),b(c,hPe,u),b(c,Or,u),g(aL,Or,null),e(Or,TRr),e(Or,Sf),e(Sf,MRr),e(Sf,oU),e(oU,ERr),e(Sf,CRr),e(Sf,rU),e(rU,wRr),e(Sf,ARr),e(Or,yRr),e(Or,nL),e(nL,LRr),e(nL,h9e),e(h9e,xRr),e(nL,kRr),e(Or,SRr),e(Or,It),g(sL,It,null),e(It,RRr),e(It,p9e),e(p9e,BRr),e(It,PRr),e(It,Rf),e(Rf,$Rr),e(Rf,_9e),e(_9e,IRr),e(Rf,qRr),e(Rf,tU),e(tU,NRr),e(Rf,jRr),e(It,DRr),e(It,u9e),e(u9e,GRr),e(It,ORr),g(lL,It,null),e(Or,VRr),e(Or,qo),g(iL,qo,null),e(qo,XRr),e(qo,b9e),e(b9e,zRr),e(qo,QRr),e(qo,jn),e(jn,WRr),e(jn,F9e),e(F9e,HRr),e(jn,URr),e(jn,v9e),e(v9e,JRr),e(jn,YRr),e(jn,T9e),e(T9e,KRr),e(jn,ZRr),e(qo,eBr),e(qo,dL),e(dL,v3),e(v3,M9e),e(M9e,oBr),e(v3,rBr),e(v3,aU),e(aU,tBr),e(v3,aBr),e(dL,nBr),e(dL,T3),e(T3,E9e),e(E9e,sBr),e(T3,lBr),e(T3,nU),e(nU,iBr),e(T3,dBr),e(qo,cBr),e(qo,C9e),e(C9e,fBr),e(qo,mBr),g(cL,qo,null),b(c,pPe,u),b(c,Bf,u),e(Bf,M3),e(M3,w9e),g(fL,w9e,null),e(Bf,gBr),e(Bf,A9e),e(A9e,hBr),b(c,_Pe,u),b(c,Vr,u),g(mL,Vr,null),e(Vr,pBr),e(Vr,Pf),e(Pf,_Br),e(Pf,sU),e(sU,uBr),e(Pf,bBr),e(Pf,lU),e(lU,FBr),e(Pf,vBr),e(Vr,TBr),e(Vr,gL),e(gL,MBr),e(gL,y9e),e(y9e,EBr),e(gL,CBr),e(Vr,wBr),e(Vr,qt),g(hL,qt,null),e(qt,ABr),e(qt,L9e),e(L9e,yBr),e(qt,LBr),e(qt,$f),e($f,xBr),e($f,x9e),e(x9e,kBr),e($f,SBr),e($f,iU),e(iU,RBr),e($f,BBr),e(qt,PBr),e(qt,k9e),e(k9e,$Br),e(qt,IBr),g(pL,qt,null),e(Vr,qBr),e(Vr,No),g(_L,No,null),e(No,NBr),e(No,S9e),e(S9e,jBr),e(No,DBr),e(No,Dn),e(Dn,GBr),e(Dn,R9e),e(R9e,OBr),e(Dn,VBr),e(Dn,B9e),e(B9e,XBr),e(Dn,zBr),e(Dn,P9e),e(P9e,QBr),e(Dn,WBr),e(No,HBr),e(No,$9e),e($9e,E3),e(E3,I9e),e(I9e,UBr),e(E3,JBr),e(E3,dU),e(dU,YBr),e(E3,KBr),e(No,ZBr),e(No,q9e),e(q9e,ePr),e(No,oPr),g(uL,No,null),uPe=!0},p(c,[u]){const bL={};u&2&&(bL.$$scope={dirty:u,ctx:c}),Vf.$set(bL);const N9e={};u&2&&(N9e.$$scope={dirty:u,ctx:c}),Ih.$set(N9e);const j9e={};u&2&&(j9e.$$scope={dirty:u,ctx:c}),Wh.$set(j9e)},i(c){uPe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(Vf.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(WC.$$.fragment,c),h(Ih.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(ew.$$.fragment,c),h(Wh.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(F6.$$.fragment,c),h(v6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(Z8.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),uPe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(Vf.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(WC.$$.fragment,c),p(Ih.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(ew.$$.fragment,c),p(Wh.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(F6.$$.fragment,c),p(v6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(C6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(y6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(S6.$$.fragment,c),p(R6.$$.fragment,c),p(B6.$$.fragment,c),p(P6.$$.fragment,c),p(I6.$$.fragment,c),p(q6.$$.fragment,c),p(N6.$$.fragment,c),p(j6.$$.fragment,c),p(D6.$$.fragment,c),p(G6.$$.fragment,c),p(V6.$$.fragment,c),p(X6.$$.fragment,c),p(z6.$$.fragment,c),p(Q6.$$.fragment,c),p(W6.$$.fragment,c),p(H6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(b8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(Z8.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),uPe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(ge),c&&t(Nf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(_Re),c&&t(Xi),_(yC),c&&t(uRe),c&&t(zn),c&&t(bRe),_(LC,c),c&&t(FRe),c&&t(T7),c&&t(vRe),_(Vf,c),c&&t(TRe),c&&t(zi),_(xC),c&&t(MRe),c&&t(Qo),_(kC),_(BC),_(PC),_($C),c&&t(ERe),c&&t(Wi),_(IC),c&&t(CRe),c&&t(Wo),_(qC),_(DC),_(GC),_(OC),c&&t(wRe),c&&t(Hi),_(VC),c&&t(ARe),c&&t(Ho),_(XC),_(WC),_(Ih),_(HC),_(UC),c&&t(yRe),c&&t(Ui),_(JC),c&&t(LRe),c&&t(Uo),_(YC),_(ew),_(Wh),_(ow),_(rw),c&&t(xRe),c&&t(Yi),_(tw),c&&t(kRe),c&&t(Jo),_(aw),_(sw),_(lw),_(iw),_(dw),c&&t(SRe),c&&t(ed),_(cw),c&&t(RRe),c&&t(Yo),_(fw),_(gw),_(hw),_(pw),_(_w),c&&t(BRe),c&&t(td),_(uw),c&&t(PRe),c&&t(Ko),_(bw),_(vw),_(Tw),_(Mw),_(Ew),c&&t($Re),c&&t(sd),_(Cw),c&&t(IRe),c&&t(Zo),_(ww),_(yw),_(Lw),_(xw),_(kw),c&&t(qRe),c&&t(dd),_(Sw),c&&t(NRe),c&&t(er),_(Rw),_(Pw),_($w),_(Iw),_(qw),c&&t(jRe),c&&t(md),_(Nw),c&&t(DRe),c&&t(or),_(jw),_(Gw),_(Ow),_(Vw),_(Xw),c&&t(GRe),c&&t(pd),_(zw),c&&t(ORe),c&&t(rr),_(Qw),_(Hw),_(Uw),_(Jw),_(Yw),c&&t(VRe),c&&t(bd),_(Kw),c&&t(XRe),c&&t(tr),_(Zw),_(o6),_(r6),_(t6),_(a6),c&&t(zRe),c&&t(Td),_(n6),c&&t(QRe),c&&t(ar),_(s6),_(i6),_(d6),_(c6),_(f6),c&&t(WRe),c&&t(Cd),_(m6),c&&t(HRe),c&&t(nr),_(g6),_(p6),_(_6),_(u6),_(b6),c&&t(URe),c&&t(yd),_(F6),c&&t(JRe),c&&t(sr),_(v6),_(M6),_(E6),_(C6),_(w6),c&&t(YRe),c&&t(kd),_(A6),c&&t(KRe),c&&t(lr),_(y6),_(x6),_(k6),_(S6),_(R6),c&&t(ZRe),c&&t(Bd),_(B6),c&&t(eBe),c&&t(ir),_(P6),_(I6),_(q6),_(N6),_(j6),c&&t(oBe),c&&t(Id),_(D6),c&&t(rBe),c&&t(dr),_(G6),_(V6),_(X6),_(z6),_(Q6),c&&t(tBe),c&&t(jd),_(W6),c&&t(aBe),c&&t(cr),_(H6),_(J6),_(Y6),_(K6),_(Z6),c&&t(nBe),c&&t(Od),_(eA),c&&t(sBe),c&&t(fr),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(lBe),c&&t(zd),_(lA),c&&t(iBe),c&&t(mr),_(iA),_(cA),_(fA),_(mA),_(hA),c&&t(dBe),c&&t(Hd),_(pA),c&&t(cBe),c&&t(gr),_(_A),_(bA),_(FA),_(vA),_(TA),c&&t(fBe),c&&t(Yd),_(MA),c&&t(mBe),c&&t(hr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(gBe),c&&t(oc),_(xA),c&&t(hBe),c&&t(pr),_(kA),_(RA),_(BA),_(PA),_($A),c&&t(pBe),c&&t(ac),_(IA),c&&t(_Be),c&&t(_r),_(qA),_(jA),_(DA),_(GA),_(OA),c&&t(uBe),c&&t(lc),_(VA),c&&t(bBe),c&&t(ur),_(XA),_(QA),_(WA),_(HA),_(UA),c&&t(FBe),c&&t(fc),_(JA),c&&t(vBe),c&&t(br),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(TBe),c&&t(hc),_(t0),c&&t(MBe),c&&t(Fr),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(EBe),c&&t(uc),_(c0),c&&t(CBe),c&&t(vr),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(wBe),c&&t(vc),_(u0),c&&t(ABe),c&&t(Tr),_(b0),_(v0),_(T0),_(M0),_(E0),c&&t(yBe),c&&t(Ec),_(C0),c&&t(LBe),c&&t(Mr),_(w0),_(y0),_(L0),_(x0),_(S0),c&&t(xBe),c&&t(Ac),_(R0),c&&t(kBe),c&&t(Er),_(B0),_($0),_(I0),_(q0),_(N0),c&&t(SBe),c&&t(xc),_(j0),c&&t(RBe),c&&t(Cr),_(D0),_(O0),_(V0),_(X0),_(z0),c&&t(BBe),c&&t(Rc),_(Q0),c&&t(PBe),c&&t(wr),_(W0),_(U0),_(J0),_(Y0),_(K0),c&&t($Be),c&&t($c),_(Z0),c&&t(IBe),c&&t(Ar),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(qBe),c&&t(Nc),_(sy),c&&t(NBe),c&&t(yr),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(jBe),c&&t(Gc),_(gy),c&&t(DBe),c&&t(Lr),_(hy),_(_y),_(uy),_(by),_(Fy),c&&t(GBe),c&&t(Xc),_(vy),c&&t(OBe),c&&t(xr),_(Ty),_(Ey),_(Cy),_(wy),_(Ay),c&&t(VBe),c&&t(Wc),_(yy),c&&t(XBe),c&&t(kr),_(Ly),_(ky),_(Sy),_(Ry),_(By),c&&t(zBe),c&&t(Jc),_(Py),c&&t(QBe),c&&t(Sr),_($y),_(qy),_(Ny),_(jy),_(Dy),c&&t(WBe),c&&t(Zc),_(Gy),c&&t(HBe),c&&t(Rr),_(Oy),_(Xy),_(zy),_(Qy),_(Wy),c&&t(UBe),c&&t(rf),_(Hy),c&&t(JBe),c&&t(Br),_(Uy),_(Yy),_(Ky),_(Zy),_(e8),c&&t(YBe),c&&t(nf),_(o8),c&&t(KBe),c&&t(Pr),_(r8),_(a8),_(n8),_(s8),_(l8),c&&t(ZBe),c&&t(df),_(i8),c&&t(ePe),c&&t($r),_(d8),_(f8),_(m8),_(g8),_(h8),c&&t(oPe),c&&t(mf),_(p8),c&&t(rPe),c&&t(Ir),_(_8),_(b8),_(F8),_(v8),_(T8),c&&t(tPe),c&&t(pf),_(M8),c&&t(aPe),c&&t(qr),_(E8),_(w8),_(A8),_(y8),_(L8),c&&t(nPe),c&&t(bf),_(x8),c&&t(sPe),c&&t(Nr),_(k8),_(R8),_(B8),_(P8),_($8),c&&t(lPe),c&&t(Tf),_(I8),c&&t(iPe),c&&t(jr),_(q8),_(j8),_(D8),_(G8),_(O8),c&&t(dPe),c&&t(Cf),_(V8),c&&t(cPe),c&&t(Dr),_(X8),_(Q8),_(W8),_(H8),_(U8),c&&t(fPe),c&&t(yf),_(J8),c&&t(mPe),c&&t(Gr),_(Y8),_(Z8),_(eL),_(oL),_(rL),c&&t(gPe),c&&t(kf),_(tL),c&&t(hPe),c&&t(Or),_(aL),_(sL),_(lL),_(iL),_(cL),c&&t(pPe),c&&t(Bf),_(fL),c&&t(_Pe),c&&t(Vr),_(mL),_(hL),_(pL),_(_L),_(uL)}}}const VCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function XCt(qf){return NCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class JCt extends PCt{constructor(Z){super();$Ct(this,Z,XCt,OCt,ICt,{})}}export{JCt as default,VCt as metadata};
