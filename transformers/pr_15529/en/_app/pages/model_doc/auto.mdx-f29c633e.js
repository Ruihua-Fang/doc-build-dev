import{S as X_t,i as z_t,s as V_t,e as a,k as l,w as f,t as o,M as W_t,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as Nwr}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-44c5af16.js";import{C as w}from"../../chunks/CodeBlock-90ffda97.js";import{I as z}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function Q_t(wi){let J,Ae,ie,me,to,ce,ue,Do,Ai,yf,sa,Li,Bi,tE,wf,ye,io,xi,Pn,aE,$n,In,nE,ki,jn,sE,Ri,Af,$a;return{c(){J=a("p"),Ae=o("If your "),ie=a("code"),me=o("NewModelConfig"),to=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Do=o(`, make sure its
`),Ai=a("code"),yf=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),Bi=o('"new-model"'),tE=o(")."),wf=l(),ye=a("p"),io=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),aE=o(" is a subclass of "),$n=a("a"),In=o("PreTrainedModel"),nE=o(`, make sure its
`),ki=a("code"),jn=o("config_class"),sE=o(` attribute is set to the same class you use when registering the model (here
`),Ri=a("code"),Af=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Ae=r(ge,"If your "),ie=n(ge,"CODE",{});var XL=s(ie);me=r(XL,"NewModelConfig"),XL.forEach(t),to=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var Si=s(ce);ue=r(Si,"PretrainedConfig"),Si.forEach(t),Do=r(ge,`, make sure its
`),Ai=n(ge,"CODE",{});var zL=s(Ai);yf=r(zL,"model_type"),zL.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),Li=n(ge,"CODE",{});var VL=s(Li);Bi=r(VL,'"new-model"'),VL.forEach(t),tE=r(ge,")."),ge.forEach(t),wf=i(co),ye=n(co,"P",{});var qo=s(ye);io=r(qo,"Likewise, if your "),xi=n(qo,"CODE",{});var Ia=s(xi);Pn=r(Ia,"NewModel"),Ia.forEach(t),aE=r(qo," is a subclass of "),$n=n(qo,"A",{href:!0});var WL=s($n);In=r(WL,"PreTrainedModel"),WL.forEach(t),nE=r(qo,`, make sure its
`),ki=n(qo,"CODE",{});var Lf=s(ki);jn=r(Lf,"config_class"),Lf.forEach(t),sE=r(qo,` attribute is set to the same class you use when registering the model (here
`),Ri=n(qo,"CODE",{});var QL=s(Ri);Af=r(QL,"NewModelConfig"),QL.forEach(t),$a=r(qo,")."),qo.forEach(t),this.h()},h(){c($n,"href","/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Ae),e(J,ie),e(ie,me),e(J,to),e(J,ce),e(ce,ue),e(J,Do),e(J,Ai),e(Ai,yf),e(J,sa),e(J,Li),e(Li,Bi),e(J,tE),b(co,wf,ge),b(co,ye,ge),e(ye,io),e(ye,xi),e(xi,Pn),e(ye,aE),e(ye,$n),e($n,In),e(ye,nE),e(ye,ki),e(ki,jn),e(ye,sE),e(ye,Ri),e(Ri,Af),e(ye,$a)},d(co){co&&t(J),co&&t(wf),co&&t(ye)}}}function H_t(wi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function U_t(wi){let J,Ae,ie,me,to;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),to=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var Do=s(ie);me=r(Do,"use_auth_token=True"),Do.forEach(t),to=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,to)},d(ce){ce&&t(J)}}}function J_t(wi){let J,Ae,ie,me,to,ce,ue,Do,Ai,yf,sa,Li,Bi,tE,wf,ye,io,xi,Pn,aE,$n,In,nE,ki,jn,sE,Ri,Af,$a,co,ge,XL,Si,zL,VL,qo,Ia,WL,Lf,QL,Cke,m7e,Pi,Bf,OV,lE,Mke,XV,Eke,g7e,Nn,yke,zV,wke,Ake,VV,Lke,Bke,h7e,iE,p7e,HL,xke,_7e,xf,u7e,$i,kf,WV,dE,kke,QV,Rke,b7e,Go,cE,Ske,fE,Pke,UL,$ke,Ike,jke,mE,Nke,HV,Dke,qke,Gke,fo,gE,Oke,UV,Xke,zke,Ii,Vke,JV,Wke,Qke,YV,Hke,Uke,Jke,v,Rf,KV,Yke,Kke,JL,Zke,eRe,oRe,Sf,ZV,rRe,tRe,YL,aRe,nRe,sRe,Pf,eW,lRe,iRe,KL,dRe,cRe,fRe,$f,oW,mRe,gRe,ZL,hRe,pRe,_Re,If,rW,uRe,bRe,e7,vRe,TRe,FRe,jf,tW,CRe,MRe,o7,ERe,yRe,wRe,Nf,aW,ARe,LRe,r7,BRe,xRe,kRe,Df,nW,RRe,SRe,t7,PRe,$Re,IRe,qf,sW,jRe,NRe,a7,DRe,qRe,GRe,Gf,lW,ORe,XRe,n7,zRe,VRe,WRe,Of,iW,QRe,HRe,s7,URe,JRe,YRe,Xf,dW,KRe,ZRe,l7,eSe,oSe,rSe,zf,cW,tSe,aSe,i7,nSe,sSe,lSe,Vf,fW,iSe,dSe,d7,cSe,fSe,mSe,Wf,mW,gSe,hSe,c7,pSe,_Se,uSe,Qf,gW,bSe,vSe,f7,TSe,FSe,CSe,Hf,hW,MSe,ESe,m7,ySe,wSe,ASe,Uf,pW,LSe,BSe,g7,xSe,kSe,RSe,Jf,_W,SSe,PSe,h7,$Se,ISe,jSe,Yf,uW,NSe,DSe,p7,qSe,GSe,OSe,Kf,bW,XSe,zSe,_7,VSe,WSe,QSe,Zf,vW,HSe,USe,u7,JSe,YSe,KSe,em,TW,ZSe,ePe,b7,oPe,rPe,tPe,om,FW,aPe,nPe,v7,sPe,lPe,iPe,rm,CW,dPe,cPe,T7,fPe,mPe,gPe,tm,MW,hPe,pPe,F7,_Pe,uPe,bPe,am,EW,vPe,TPe,C7,FPe,CPe,MPe,nm,yW,EPe,yPe,M7,wPe,APe,LPe,sm,wW,BPe,xPe,E7,kPe,RPe,SPe,lm,AW,PPe,$Pe,y7,IPe,jPe,NPe,im,LW,DPe,qPe,w7,GPe,OPe,XPe,dm,BW,zPe,VPe,A7,WPe,QPe,HPe,cm,xW,UPe,JPe,L7,YPe,KPe,ZPe,fm,kW,e$e,o$e,B7,r$e,t$e,a$e,mm,RW,n$e,s$e,x7,l$e,i$e,d$e,gm,SW,c$e,f$e,k7,m$e,g$e,h$e,hm,PW,p$e,_$e,R7,u$e,b$e,v$e,pm,$W,T$e,F$e,S7,C$e,M$e,E$e,_m,IW,y$e,w$e,P7,A$e,L$e,B$e,um,jW,x$e,k$e,$7,R$e,S$e,P$e,bm,NW,$$e,I$e,I7,j$e,N$e,D$e,vm,DW,q$e,G$e,j7,O$e,X$e,z$e,Tm,qW,V$e,W$e,N7,Q$e,H$e,U$e,Fm,GW,J$e,Y$e,D7,K$e,Z$e,eIe,Cm,OW,oIe,rIe,q7,tIe,aIe,nIe,Mm,XW,sIe,lIe,G7,iIe,dIe,cIe,Em,zW,fIe,mIe,O7,gIe,hIe,pIe,ym,VW,_Ie,uIe,X7,bIe,vIe,TIe,wm,WW,FIe,CIe,z7,MIe,EIe,yIe,Am,QW,wIe,AIe,V7,LIe,BIe,xIe,Lm,HW,kIe,RIe,W7,SIe,PIe,$Ie,Bm,UW,IIe,jIe,Q7,NIe,DIe,qIe,xm,JW,GIe,OIe,H7,XIe,zIe,VIe,km,YW,WIe,QIe,U7,HIe,UIe,JIe,Rm,KW,YIe,KIe,J7,ZIe,eje,oje,Sm,ZW,rje,tje,Y7,aje,nje,sje,Pm,eQ,lje,ije,K7,dje,cje,fje,$m,oQ,mje,gje,Z7,hje,pje,_je,Im,rQ,uje,bje,e8,vje,Tje,Fje,jm,tQ,Cje,Mje,o8,Eje,yje,wje,Nm,aQ,Aje,Lje,r8,Bje,xje,kje,Dm,nQ,Rje,Sje,t8,Pje,$je,Ije,qm,sQ,jje,Nje,a8,Dje,qje,Gje,Gm,lQ,Oje,Xje,n8,zje,Vje,Wje,Om,iQ,Qje,Hje,s8,Uje,Jje,Yje,Xm,dQ,Kje,Zje,l8,eNe,oNe,rNe,zm,cQ,tNe,aNe,i8,nNe,sNe,lNe,Vm,fQ,iNe,dNe,d8,cNe,fNe,mNe,Wm,mQ,gNe,hNe,c8,pNe,_Ne,uNe,Qm,gQ,bNe,vNe,f8,TNe,FNe,CNe,Hm,hQ,MNe,ENe,m8,yNe,wNe,ANe,Um,pQ,LNe,BNe,g8,xNe,kNe,RNe,Jm,_Q,SNe,PNe,h8,$Ne,INe,jNe,Ym,uQ,NNe,DNe,p8,qNe,GNe,ONe,Km,bQ,XNe,zNe,_8,VNe,WNe,QNe,Zm,vQ,HNe,UNe,u8,JNe,YNe,KNe,eg,TQ,ZNe,eDe,b8,oDe,rDe,tDe,og,FQ,aDe,nDe,v8,sDe,lDe,iDe,rg,CQ,dDe,cDe,T8,fDe,mDe,gDe,tg,MQ,hDe,pDe,F8,_De,uDe,bDe,ag,EQ,vDe,TDe,C8,FDe,CDe,MDe,ng,yQ,EDe,yDe,M8,wDe,ADe,LDe,sg,wQ,BDe,xDe,E8,kDe,RDe,SDe,lg,AQ,PDe,$De,y8,IDe,jDe,NDe,ig,LQ,DDe,qDe,w8,GDe,ODe,XDe,dg,BQ,zDe,VDe,A8,WDe,QDe,HDe,cg,xQ,UDe,JDe,L8,YDe,KDe,ZDe,fg,kQ,eqe,oqe,B8,rqe,tqe,aqe,mg,RQ,nqe,sqe,x8,lqe,iqe,dqe,gg,SQ,cqe,fqe,k8,mqe,gqe,hqe,hg,PQ,pqe,_qe,R8,uqe,bqe,vqe,$Q,Tqe,Fqe,hE,Cqe,pg,pE,Mqe,IQ,Eqe,v7e,ji,_g,jQ,_E,yqe,NQ,wqe,T7e,Oo,uE,Aqe,bE,Lqe,S8,Bqe,xqe,kqe,vE,Rqe,DQ,Sqe,Pqe,$qe,mo,TE,Iqe,qQ,jqe,Nqe,ja,Dqe,GQ,qqe,Gqe,OQ,Oqe,Xqe,XQ,zqe,Vqe,Wqe,M,Dn,zQ,Qqe,Hqe,P8,Uqe,Jqe,$8,Yqe,Kqe,Zqe,qn,VQ,eGe,oGe,I8,rGe,tGe,j8,aGe,nGe,sGe,Gn,WQ,lGe,iGe,N8,dGe,cGe,D8,fGe,mGe,gGe,ug,QQ,hGe,pGe,q8,_Ge,uGe,bGe,On,HQ,vGe,TGe,G8,FGe,CGe,O8,MGe,EGe,yGe,bg,UQ,wGe,AGe,X8,LGe,BGe,xGe,vg,JQ,kGe,RGe,z8,SGe,PGe,$Ge,Tg,YQ,IGe,jGe,V8,NGe,DGe,qGe,Xn,KQ,GGe,OGe,W8,XGe,zGe,Q8,VGe,WGe,QGe,zn,ZQ,HGe,UGe,H8,JGe,YGe,U8,KGe,ZGe,eOe,Vn,eH,oOe,rOe,J8,tOe,aOe,Y8,nOe,sOe,lOe,Fg,oH,iOe,dOe,K8,cOe,fOe,mOe,Cg,rH,gOe,hOe,Z8,pOe,_Oe,uOe,Wn,tH,bOe,vOe,eB,TOe,FOe,oB,COe,MOe,EOe,Mg,aH,yOe,wOe,rB,AOe,LOe,BOe,Qn,nH,xOe,kOe,tB,ROe,SOe,aB,POe,$Oe,IOe,Hn,sH,jOe,NOe,nB,DOe,qOe,sB,GOe,OOe,XOe,Un,lH,zOe,VOe,lB,WOe,QOe,iH,HOe,UOe,JOe,Eg,dH,YOe,KOe,iB,ZOe,eXe,oXe,Jn,cH,rXe,tXe,dB,aXe,nXe,cB,sXe,lXe,iXe,Yn,fH,dXe,cXe,fB,fXe,mXe,mB,gXe,hXe,pXe,Kn,mH,_Xe,uXe,gB,bXe,vXe,hB,TXe,FXe,CXe,Zn,gH,MXe,EXe,pB,yXe,wXe,_B,AXe,LXe,BXe,es,hH,xXe,kXe,uB,RXe,SXe,bB,PXe,$Xe,IXe,yg,pH,jXe,NXe,vB,DXe,qXe,GXe,os,_H,OXe,XXe,TB,zXe,VXe,FB,WXe,QXe,HXe,wg,uH,UXe,JXe,CB,YXe,KXe,ZXe,rs,bH,eze,oze,MB,rze,tze,EB,aze,nze,sze,ts,vH,lze,ize,yB,dze,cze,wB,fze,mze,gze,as,TH,hze,pze,AB,_ze,uze,LB,bze,vze,Tze,ns,FH,Fze,Cze,BB,Mze,Eze,xB,yze,wze,Aze,Ag,CH,Lze,Bze,kB,xze,kze,Rze,ss,MH,Sze,Pze,RB,$ze,Ize,SB,jze,Nze,Dze,ls,EH,qze,Gze,PB,Oze,Xze,$B,zze,Vze,Wze,is,yH,Qze,Hze,IB,Uze,Jze,jB,Yze,Kze,Zze,ds,wH,eVe,oVe,NB,rVe,tVe,DB,aVe,nVe,sVe,cs,AH,lVe,iVe,qB,dVe,cVe,GB,fVe,mVe,gVe,fs,LH,hVe,pVe,OB,_Ve,uVe,XB,bVe,vVe,TVe,Lg,BH,FVe,CVe,zB,MVe,EVe,yVe,ms,xH,wVe,AVe,VB,LVe,BVe,WB,xVe,kVe,RVe,Bg,kH,SVe,PVe,QB,$Ve,IVe,jVe,xg,RH,NVe,DVe,HB,qVe,GVe,OVe,gs,SH,XVe,zVe,UB,VVe,WVe,JB,QVe,HVe,UVe,hs,PH,JVe,YVe,YB,KVe,ZVe,KB,eWe,oWe,rWe,kg,$H,tWe,aWe,ZB,nWe,sWe,lWe,ps,IH,iWe,dWe,ex,cWe,fWe,ox,mWe,gWe,hWe,_s,jH,pWe,_We,rx,uWe,bWe,tx,vWe,TWe,FWe,us,NH,CWe,MWe,ax,EWe,yWe,nx,wWe,AWe,LWe,bs,DH,BWe,xWe,sx,kWe,RWe,lx,SWe,PWe,$We,vs,qH,IWe,jWe,ix,NWe,DWe,dx,qWe,GWe,OWe,Rg,GH,XWe,zWe,cx,VWe,WWe,QWe,Sg,OH,HWe,UWe,fx,JWe,YWe,KWe,Pg,XH,ZWe,eQe,mx,oQe,rQe,tQe,$g,zH,aQe,nQe,gx,sQe,lQe,iQe,Ts,VH,dQe,cQe,hx,fQe,mQe,px,gQe,hQe,pQe,Ig,WH,_Qe,uQe,_x,bQe,vQe,TQe,Fs,QH,FQe,CQe,ux,MQe,EQe,bx,yQe,wQe,AQe,Cs,HH,LQe,BQe,vx,xQe,kQe,Tx,RQe,SQe,PQe,Ms,UH,$Qe,IQe,Fx,jQe,NQe,Cx,DQe,qQe,GQe,Es,JH,OQe,XQe,Mx,zQe,VQe,Ex,WQe,QQe,HQe,ys,YH,UQe,JQe,yx,YQe,KQe,wx,ZQe,eHe,oHe,jg,KH,rHe,tHe,Ax,aHe,nHe,sHe,Ng,ZH,lHe,iHe,Lx,dHe,cHe,fHe,ws,eU,mHe,gHe,Bx,hHe,pHe,xx,_He,uHe,bHe,As,oU,vHe,THe,kx,FHe,CHe,Rx,MHe,EHe,yHe,Ls,rU,wHe,AHe,Sx,LHe,BHe,Px,xHe,kHe,RHe,Dg,tU,SHe,PHe,$x,$He,IHe,jHe,qg,aU,NHe,DHe,Ix,qHe,GHe,OHe,Gg,nU,XHe,zHe,jx,VHe,WHe,QHe,Og,sU,HHe,UHe,Nx,JHe,YHe,KHe,Bs,lU,ZHe,eUe,Dx,oUe,rUe,qx,tUe,aUe,nUe,Xg,iU,sUe,lUe,Gx,iUe,dUe,cUe,zg,dU,fUe,mUe,Ox,gUe,hUe,pUe,xs,cU,_Ue,uUe,Xx,bUe,vUe,zx,TUe,FUe,CUe,ks,fU,MUe,EUe,Vx,yUe,wUe,Wx,AUe,LUe,BUe,mU,xUe,kUe,FE,RUe,Vg,CE,SUe,gU,PUe,F7e,Ni,Wg,hU,ME,$Ue,pU,IUe,C7e,Xo,EE,jUe,yE,NUe,Qx,DUe,qUe,GUe,wE,OUe,_U,XUe,zUe,VUe,Le,AE,WUe,uU,QUe,HUe,Na,UUe,bU,JUe,YUe,vU,KUe,ZUe,TU,eJe,oJe,rJe,se,Qg,FU,tJe,aJe,Hx,nJe,sJe,lJe,Hg,CU,iJe,dJe,Ux,cJe,fJe,mJe,Ug,MU,gJe,hJe,Jx,pJe,_Je,uJe,Jg,EU,bJe,vJe,Yx,TJe,FJe,CJe,Yg,yU,MJe,EJe,Kx,yJe,wJe,AJe,Kg,wU,LJe,BJe,Zx,xJe,kJe,RJe,Zg,AU,SJe,PJe,ek,$Je,IJe,jJe,eh,LU,NJe,DJe,ok,qJe,GJe,OJe,oh,BU,XJe,zJe,rk,VJe,WJe,QJe,rh,xU,HJe,UJe,tk,JJe,YJe,KJe,th,kU,ZJe,eYe,ak,oYe,rYe,tYe,ah,RU,aYe,nYe,nk,sYe,lYe,iYe,nh,SU,dYe,cYe,sk,fYe,mYe,gYe,sh,PU,hYe,pYe,lk,_Ye,uYe,bYe,lh,$U,vYe,TYe,ik,FYe,CYe,MYe,ih,EYe,IU,yYe,wYe,LE,AYe,dh,BE,LYe,jU,BYe,M7e,Di,ch,NU,xE,xYe,DU,kYe,E7e,zo,kE,RYe,RE,SYe,dk,PYe,$Ye,IYe,SE,jYe,qU,NYe,DYe,qYe,Be,PE,GYe,GU,OYe,XYe,qi,zYe,OU,VYe,WYe,XU,QYe,HYe,UYe,we,fh,zU,JYe,YYe,ck,KYe,ZYe,eKe,mh,VU,oKe,rKe,fk,tKe,aKe,nKe,gh,WU,sKe,lKe,mk,iKe,dKe,cKe,hh,QU,fKe,mKe,gk,gKe,hKe,pKe,ph,HU,_Ke,uKe,hk,bKe,vKe,TKe,_h,UU,FKe,CKe,pk,MKe,EKe,yKe,uh,JU,wKe,AKe,_k,LKe,BKe,xKe,bh,YU,kKe,RKe,uk,SKe,PKe,$Ke,vh,IKe,KU,jKe,NKe,$E,DKe,Th,IE,qKe,ZU,GKe,y7e,Gi,Fh,eJ,jE,OKe,oJ,XKe,w7e,Vo,NE,zKe,Oi,VKe,rJ,WKe,QKe,tJ,HKe,UKe,JKe,DE,YKe,aJ,KKe,ZKe,eZe,Nr,qE,oZe,nJ,rZe,tZe,Xi,aZe,sJ,nZe,sZe,lJ,lZe,iZe,dZe,iJ,cZe,fZe,GE,mZe,xe,OE,gZe,dJ,hZe,pZe,Da,_Ze,cJ,uZe,bZe,fJ,vZe,TZe,mJ,FZe,CZe,MZe,F,Ch,gJ,EZe,yZe,bk,wZe,AZe,LZe,Mh,hJ,BZe,xZe,vk,kZe,RZe,SZe,Eh,pJ,PZe,$Ze,Tk,IZe,jZe,NZe,yh,_J,DZe,qZe,Fk,GZe,OZe,XZe,wh,uJ,zZe,VZe,Ck,WZe,QZe,HZe,Ah,bJ,UZe,JZe,Mk,YZe,KZe,ZZe,Lh,vJ,eeo,oeo,Ek,reo,teo,aeo,Bh,TJ,neo,seo,yk,leo,ieo,deo,xh,FJ,ceo,feo,wk,meo,geo,heo,kh,CJ,peo,_eo,Ak,ueo,beo,veo,Rh,MJ,Teo,Feo,Lk,Ceo,Meo,Eeo,Sh,EJ,yeo,weo,Bk,Aeo,Leo,Beo,Ph,yJ,xeo,keo,xk,Reo,Seo,Peo,$h,wJ,$eo,Ieo,kk,jeo,Neo,Deo,Ih,AJ,qeo,Geo,Rk,Oeo,Xeo,zeo,jh,LJ,Veo,Weo,Sk,Qeo,Heo,Ueo,Nh,BJ,Jeo,Yeo,Pk,Keo,Zeo,eoo,Dh,xJ,ooo,roo,$k,too,aoo,noo,qh,kJ,soo,loo,Ik,ioo,doo,coo,Gh,RJ,foo,moo,jk,goo,hoo,poo,Oh,SJ,_oo,uoo,Nk,boo,voo,Too,Xh,PJ,Foo,Coo,Dk,Moo,Eoo,yoo,zh,$J,woo,Aoo,qk,Loo,Boo,xoo,Vh,IJ,koo,Roo,Gk,Soo,Poo,$oo,Wh,jJ,Ioo,joo,Ok,Noo,Doo,qoo,Rs,NJ,Goo,Ooo,Xk,Xoo,zoo,zk,Voo,Woo,Qoo,Qh,DJ,Hoo,Uoo,Vk,Joo,Yoo,Koo,Hh,qJ,Zoo,ero,Wk,oro,rro,tro,Uh,GJ,aro,nro,Qk,sro,lro,iro,Jh,OJ,dro,cro,Hk,fro,mro,gro,Yh,XJ,hro,pro,Uk,_ro,uro,bro,Kh,zJ,vro,Tro,Jk,Fro,Cro,Mro,Zh,VJ,Ero,yro,Yk,wro,Aro,Lro,ep,WJ,Bro,xro,Kk,kro,Rro,Sro,op,QJ,Pro,$ro,Zk,Iro,jro,Nro,rp,HJ,Dro,qro,eR,Gro,Oro,Xro,tp,UJ,zro,Vro,oR,Wro,Qro,Hro,ap,JJ,Uro,Jro,rR,Yro,Kro,Zro,np,YJ,eto,oto,tR,rto,tto,ato,sp,KJ,nto,sto,aR,lto,ito,dto,lp,ZJ,cto,fto,nR,mto,gto,hto,ip,eY,pto,_to,sR,uto,bto,vto,dp,oY,Tto,Fto,lR,Cto,Mto,Eto,cp,rY,yto,wto,iR,Ato,Lto,Bto,fp,tY,xto,kto,dR,Rto,Sto,Pto,mp,aY,$to,Ito,cR,jto,Nto,Dto,gp,nY,qto,Gto,fR,Oto,Xto,zto,hp,sY,Vto,Wto,mR,Qto,Hto,Uto,pp,lY,Jto,Yto,gR,Kto,Zto,eao,_p,iY,oao,rao,hR,tao,aao,nao,up,dY,sao,lao,pR,iao,dao,cao,bp,cY,fao,mao,_R,gao,hao,pao,vp,fY,_ao,uao,uR,bao,vao,Tao,Tp,mY,Fao,Cao,bR,Mao,Eao,yao,Fp,gY,wao,Aao,vR,Lao,Bao,xao,Cp,hY,kao,Rao,TR,Sao,Pao,$ao,Mp,pY,Iao,jao,FR,Nao,Dao,qao,Ep,_Y,Gao,Oao,CR,Xao,zao,Vao,yp,uY,Wao,Qao,MR,Hao,Uao,Jao,wp,bY,Yao,Kao,ER,Zao,eno,ono,Ap,vY,rno,tno,yR,ano,nno,sno,Lp,TY,lno,ino,wR,dno,cno,fno,Bp,FY,mno,gno,AR,hno,pno,_no,xp,CY,uno,bno,LR,vno,Tno,Fno,kp,MY,Cno,Mno,BR,Eno,yno,wno,Rp,EY,Ano,Lno,xR,Bno,xno,kno,Sp,yY,Rno,Sno,kR,Pno,$no,Ino,Pp,wY,jno,Nno,RR,Dno,qno,Gno,$p,AY,Ono,Xno,SR,zno,Vno,Wno,Ip,LY,Qno,Hno,PR,Uno,Jno,Yno,jp,BY,Kno,Zno,$R,eso,oso,rso,Np,xY,tso,aso,IR,nso,sso,lso,Dp,kY,iso,dso,jR,cso,fso,mso,qp,RY,gso,hso,NR,pso,_so,uso,Gp,SY,bso,vso,DR,Tso,Fso,Cso,Op,PY,Mso,Eso,qR,yso,wso,Aso,Xp,$Y,Lso,Bso,GR,xso,kso,Rso,zp,IY,Sso,Pso,OR,$so,Iso,jso,Vp,jY,Nso,Dso,XR,qso,Gso,Oso,Wp,NY,Xso,zso,zR,Vso,Wso,Qso,Qp,DY,Hso,Uso,VR,Jso,Yso,Kso,Hp,qY,Zso,elo,WR,olo,rlo,tlo,Up,GY,alo,nlo,QR,slo,llo,ilo,Jp,OY,dlo,clo,HR,flo,mlo,glo,Yp,hlo,XY,plo,_lo,zY,ulo,blo,VY,vlo,Tlo,XE,A7e,zi,Kp,WY,zE,Flo,QY,Clo,L7e,Wo,VE,Mlo,Vi,Elo,HY,ylo,wlo,UY,Alo,Llo,Blo,WE,xlo,JY,klo,Rlo,Slo,Dr,QE,Plo,YY,$lo,Ilo,Wi,jlo,KY,Nlo,Dlo,ZY,qlo,Glo,Olo,eK,Xlo,zlo,HE,Vlo,ke,UE,Wlo,oK,Qlo,Hlo,qa,Ulo,rK,Jlo,Ylo,tK,Klo,Zlo,aK,eio,oio,rio,k,Zp,nK,tio,aio,UR,nio,sio,lio,e_,sK,iio,dio,JR,cio,fio,mio,o_,lK,gio,hio,YR,pio,_io,uio,r_,iK,bio,vio,KR,Tio,Fio,Cio,t_,dK,Mio,Eio,ZR,yio,wio,Aio,a_,cK,Lio,Bio,eS,xio,kio,Rio,n_,fK,Sio,Pio,oS,$io,Iio,jio,s_,mK,Nio,Dio,rS,qio,Gio,Oio,l_,gK,Xio,zio,tS,Vio,Wio,Qio,i_,hK,Hio,Uio,aS,Jio,Yio,Kio,d_,pK,Zio,edo,nS,odo,rdo,tdo,c_,_K,ado,ndo,sS,sdo,ldo,ido,f_,uK,ddo,cdo,lS,fdo,mdo,gdo,m_,bK,hdo,pdo,iS,_do,udo,bdo,g_,vK,vdo,Tdo,dS,Fdo,Cdo,Mdo,h_,TK,Edo,ydo,cS,wdo,Ado,Ldo,p_,FK,Bdo,xdo,fS,kdo,Rdo,Sdo,__,CK,Pdo,$do,mS,Ido,jdo,Ndo,u_,MK,Ddo,qdo,gS,Gdo,Odo,Xdo,b_,EK,zdo,Vdo,hS,Wdo,Qdo,Hdo,v_,yK,Udo,Jdo,pS,Ydo,Kdo,Zdo,T_,wK,eco,oco,_S,rco,tco,aco,F_,AK,nco,sco,uS,lco,ico,dco,C_,LK,cco,fco,bS,mco,gco,hco,M_,BK,pco,_co,vS,uco,bco,vco,E_,xK,Tco,Fco,TS,Cco,Mco,Eco,y_,kK,yco,wco,FS,Aco,Lco,Bco,w_,RK,xco,kco,CS,Rco,Sco,Pco,A_,SK,$co,Ico,MS,jco,Nco,Dco,L_,PK,qco,Gco,ES,Oco,Xco,zco,B_,$K,Vco,Wco,yS,Qco,Hco,Uco,x_,IK,Jco,Yco,wS,Kco,Zco,efo,k_,jK,ofo,rfo,AS,tfo,afo,nfo,R_,NK,sfo,lfo,LS,ifo,dfo,cfo,S_,DK,ffo,mfo,BS,gfo,hfo,pfo,P_,qK,_fo,ufo,xS,bfo,vfo,Tfo,$_,GK,Ffo,Cfo,kS,Mfo,Efo,yfo,I_,OK,wfo,Afo,RS,Lfo,Bfo,xfo,j_,kfo,XK,Rfo,Sfo,zK,Pfo,$fo,VK,Ifo,jfo,JE,B7e,Qi,N_,WK,YE,Nfo,QK,Dfo,x7e,Qo,KE,qfo,Hi,Gfo,HK,Ofo,Xfo,UK,zfo,Vfo,Wfo,ZE,Qfo,JK,Hfo,Ufo,Jfo,qr,e3,Yfo,YK,Kfo,Zfo,Ui,emo,KK,omo,rmo,ZK,tmo,amo,nmo,eZ,smo,lmo,o3,imo,Re,r3,dmo,oZ,cmo,fmo,Ga,mmo,rZ,gmo,hmo,tZ,pmo,_mo,aZ,umo,bmo,vmo,$,D_,nZ,Tmo,Fmo,SS,Cmo,Mmo,Emo,q_,sZ,ymo,wmo,PS,Amo,Lmo,Bmo,G_,lZ,xmo,kmo,$S,Rmo,Smo,Pmo,O_,iZ,$mo,Imo,IS,jmo,Nmo,Dmo,X_,dZ,qmo,Gmo,jS,Omo,Xmo,zmo,z_,cZ,Vmo,Wmo,NS,Qmo,Hmo,Umo,V_,fZ,Jmo,Ymo,DS,Kmo,Zmo,ego,W_,mZ,ogo,rgo,qS,tgo,ago,ngo,Q_,gZ,sgo,lgo,GS,igo,dgo,cgo,H_,hZ,fgo,mgo,OS,ggo,hgo,pgo,U_,pZ,_go,ugo,XS,bgo,vgo,Tgo,J_,_Z,Fgo,Cgo,zS,Mgo,Ego,ygo,Y_,uZ,wgo,Ago,VS,Lgo,Bgo,xgo,K_,bZ,kgo,Rgo,WS,Sgo,Pgo,$go,Z_,vZ,Igo,jgo,QS,Ngo,Dgo,qgo,eu,TZ,Ggo,Ogo,HS,Xgo,zgo,Vgo,ou,FZ,Wgo,Qgo,US,Hgo,Ugo,Jgo,ru,CZ,Ygo,Kgo,JS,Zgo,eho,oho,tu,MZ,rho,tho,YS,aho,nho,sho,au,EZ,lho,iho,KS,dho,cho,fho,nu,yZ,mho,gho,ZS,hho,pho,_ho,su,wZ,uho,bho,eP,vho,Tho,Fho,lu,AZ,Cho,Mho,oP,Eho,yho,who,iu,LZ,Aho,Lho,rP,Bho,xho,kho,du,BZ,Rho,Sho,tP,Pho,$ho,Iho,cu,xZ,jho,Nho,aP,Dho,qho,Gho,fu,kZ,Oho,Xho,nP,zho,Vho,Who,mu,RZ,Qho,Hho,sP,Uho,Jho,Yho,gu,SZ,Kho,Zho,lP,epo,opo,rpo,hu,PZ,tpo,apo,iP,npo,spo,lpo,pu,$Z,ipo,dpo,dP,cpo,fpo,mpo,_u,IZ,gpo,hpo,cP,ppo,_po,upo,uu,jZ,bpo,vpo,fP,Tpo,Fpo,Cpo,bu,NZ,Mpo,Epo,mP,ypo,wpo,Apo,vu,Lpo,DZ,Bpo,xpo,qZ,kpo,Rpo,GZ,Spo,Ppo,t3,k7e,Ji,Tu,OZ,a3,$po,XZ,Ipo,R7e,Ho,n3,jpo,Yi,Npo,zZ,Dpo,qpo,VZ,Gpo,Opo,Xpo,s3,zpo,WZ,Vpo,Wpo,Qpo,Gr,l3,Hpo,QZ,Upo,Jpo,Ki,Ypo,HZ,Kpo,Zpo,UZ,e_o,o_o,r_o,JZ,t_o,a_o,i3,n_o,Se,d3,s_o,YZ,l_o,i_o,Oa,d_o,KZ,c_o,f_o,ZZ,m_o,g_o,eee,h_o,p_o,__o,I,Fu,oee,u_o,b_o,gP,v_o,T_o,F_o,Cu,ree,C_o,M_o,hP,E_o,y_o,w_o,Mu,tee,A_o,L_o,pP,B_o,x_o,k_o,Eu,aee,R_o,S_o,_P,P_o,$_o,I_o,yu,nee,j_o,N_o,uP,D_o,q_o,G_o,wu,see,O_o,X_o,bP,z_o,V_o,W_o,Au,lee,Q_o,H_o,vP,U_o,J_o,Y_o,Lu,iee,K_o,Z_o,TP,euo,ouo,ruo,Bu,dee,tuo,auo,FP,nuo,suo,luo,xu,cee,iuo,duo,CP,cuo,fuo,muo,ku,fee,guo,huo,MP,puo,_uo,uuo,Ru,mee,buo,vuo,EP,Tuo,Fuo,Cuo,Su,gee,Muo,Euo,yP,yuo,wuo,Auo,Pu,hee,Luo,Buo,wP,xuo,kuo,Ruo,$u,pee,Suo,Puo,AP,$uo,Iuo,juo,Iu,_ee,Nuo,Duo,LP,quo,Guo,Ouo,ju,uee,Xuo,zuo,BP,Vuo,Wuo,Quo,Nu,bee,Huo,Uuo,xP,Juo,Yuo,Kuo,Du,vee,Zuo,e5o,kP,o5o,r5o,t5o,qu,Tee,a5o,n5o,RP,s5o,l5o,i5o,Gu,Fee,d5o,c5o,SP,f5o,m5o,g5o,Ou,Cee,h5o,p5o,PP,_5o,u5o,b5o,Xu,Mee,v5o,T5o,$P,F5o,C5o,M5o,zu,Eee,E5o,y5o,IP,w5o,A5o,L5o,Vu,yee,B5o,x5o,jP,k5o,R5o,S5o,Wu,wee,P5o,$5o,NP,I5o,j5o,N5o,Qu,Aee,D5o,q5o,DP,G5o,O5o,X5o,Hu,Lee,z5o,V5o,qP,W5o,Q5o,H5o,Uu,Bee,U5o,J5o,GP,Y5o,K5o,Z5o,Ju,xee,e2o,o2o,kee,r2o,t2o,a2o,Yu,Ree,n2o,s2o,OP,l2o,i2o,d2o,Ku,See,c2o,f2o,XP,m2o,g2o,h2o,Zu,Pee,p2o,_2o,zP,u2o,b2o,v2o,e5,$ee,T2o,F2o,VP,C2o,M2o,E2o,o5,y2o,Iee,w2o,A2o,jee,L2o,B2o,Nee,x2o,k2o,c3,S7e,Zi,r5,Dee,f3,R2o,qee,S2o,P7e,Uo,m3,P2o,ed,$2o,Gee,I2o,j2o,Oee,N2o,D2o,q2o,g3,G2o,Xee,O2o,X2o,z2o,Or,h3,V2o,zee,W2o,Q2o,od,H2o,Vee,U2o,J2o,Wee,Y2o,K2o,Z2o,Qee,e1o,o1o,p3,r1o,Pe,_3,t1o,Hee,a1o,n1o,Xa,s1o,Uee,l1o,i1o,Jee,d1o,c1o,Yee,f1o,m1o,g1o,ae,t5,Kee,h1o,p1o,WP,_1o,u1o,b1o,a5,Zee,v1o,T1o,QP,F1o,C1o,M1o,n5,eoe,E1o,y1o,HP,w1o,A1o,L1o,s5,ooe,B1o,x1o,UP,k1o,R1o,S1o,l5,roe,P1o,$1o,JP,I1o,j1o,N1o,i5,toe,D1o,q1o,YP,G1o,O1o,X1o,d5,aoe,z1o,V1o,KP,W1o,Q1o,H1o,c5,noe,U1o,J1o,ZP,Y1o,K1o,Z1o,f5,soe,ebo,obo,e$,rbo,tbo,abo,m5,loe,nbo,sbo,o$,lbo,ibo,dbo,g5,ioe,cbo,fbo,r$,mbo,gbo,hbo,h5,doe,pbo,_bo,t$,ubo,bbo,vbo,p5,coe,Tbo,Fbo,a$,Cbo,Mbo,Ebo,_5,foe,ybo,wbo,n$,Abo,Lbo,Bbo,u5,moe,xbo,kbo,s$,Rbo,Sbo,Pbo,b5,goe,$bo,Ibo,l$,jbo,Nbo,Dbo,v5,qbo,hoe,Gbo,Obo,poe,Xbo,zbo,_oe,Vbo,Wbo,u3,$7e,rd,T5,uoe,b3,Qbo,boe,Hbo,I7e,Jo,v3,Ubo,td,Jbo,voe,Ybo,Kbo,Toe,Zbo,evo,ovo,T3,rvo,Foe,tvo,avo,nvo,Xr,F3,svo,Coe,lvo,ivo,ad,dvo,Moe,cvo,fvo,Eoe,mvo,gvo,hvo,yoe,pvo,_vo,C3,uvo,$e,M3,bvo,woe,vvo,Tvo,za,Fvo,Aoe,Cvo,Mvo,Loe,Evo,yvo,Boe,wvo,Avo,Lvo,A,F5,xoe,Bvo,xvo,i$,kvo,Rvo,Svo,C5,koe,Pvo,$vo,d$,Ivo,jvo,Nvo,M5,Roe,Dvo,qvo,c$,Gvo,Ovo,Xvo,E5,Soe,zvo,Vvo,f$,Wvo,Qvo,Hvo,y5,Poe,Uvo,Jvo,m$,Yvo,Kvo,Zvo,w5,$oe,eTo,oTo,g$,rTo,tTo,aTo,A5,Ioe,nTo,sTo,h$,lTo,iTo,dTo,L5,joe,cTo,fTo,p$,mTo,gTo,hTo,B5,Noe,pTo,_To,_$,uTo,bTo,vTo,x5,Doe,TTo,FTo,u$,CTo,MTo,ETo,k5,qoe,yTo,wTo,b$,ATo,LTo,BTo,R5,Goe,xTo,kTo,v$,RTo,STo,PTo,S5,Ooe,$To,ITo,T$,jTo,NTo,DTo,P5,Xoe,qTo,GTo,F$,OTo,XTo,zTo,$5,zoe,VTo,WTo,C$,QTo,HTo,UTo,I5,Voe,JTo,YTo,M$,KTo,ZTo,eFo,j5,Woe,oFo,rFo,E$,tFo,aFo,nFo,N5,Qoe,sFo,lFo,y$,iFo,dFo,cFo,D5,Hoe,fFo,mFo,w$,gFo,hFo,pFo,q5,Uoe,_Fo,uFo,A$,bFo,vFo,TFo,G5,Joe,FFo,CFo,L$,MFo,EFo,yFo,O5,Yoe,wFo,AFo,B$,LFo,BFo,xFo,X5,Koe,kFo,RFo,x$,SFo,PFo,$Fo,z5,Zoe,IFo,jFo,k$,NFo,DFo,qFo,V5,ere,GFo,OFo,R$,XFo,zFo,VFo,W5,ore,WFo,QFo,S$,HFo,UFo,JFo,Q5,rre,YFo,KFo,P$,ZFo,e9o,o9o,H5,tre,r9o,t9o,$$,a9o,n9o,s9o,U5,are,l9o,i9o,I$,d9o,c9o,f9o,J5,nre,m9o,g9o,j$,h9o,p9o,_9o,Y5,sre,u9o,b9o,N$,v9o,T9o,F9o,K5,lre,C9o,M9o,D$,E9o,y9o,w9o,Z5,ire,A9o,L9o,q$,B9o,x9o,k9o,e2,dre,R9o,S9o,G$,P9o,$9o,I9o,o2,cre,j9o,N9o,O$,D9o,q9o,G9o,r2,fre,O9o,X9o,X$,z9o,V9o,W9o,t2,mre,Q9o,H9o,z$,U9o,J9o,Y9o,a2,gre,K9o,Z9o,V$,eCo,oCo,rCo,n2,hre,tCo,aCo,W$,nCo,sCo,lCo,s2,pre,iCo,dCo,Q$,cCo,fCo,mCo,l2,_re,gCo,hCo,H$,pCo,_Co,uCo,i2,ure,bCo,vCo,U$,TCo,FCo,CCo,d2,bre,MCo,ECo,J$,yCo,wCo,ACo,c2,vre,LCo,BCo,Y$,xCo,kCo,RCo,f2,Tre,SCo,PCo,K$,$Co,ICo,jCo,m2,NCo,Fre,DCo,qCo,Cre,GCo,OCo,Mre,XCo,zCo,E3,j7e,nd,g2,Ere,y3,VCo,yre,WCo,N7e,Yo,w3,QCo,sd,HCo,wre,UCo,JCo,Are,YCo,KCo,ZCo,A3,e4o,Lre,o4o,r4o,t4o,zr,L3,a4o,Bre,n4o,s4o,ld,l4o,xre,i4o,d4o,kre,c4o,f4o,m4o,Rre,g4o,h4o,B3,p4o,Ie,x3,_4o,Sre,u4o,b4o,Va,v4o,Pre,T4o,F4o,$re,C4o,M4o,Ire,E4o,y4o,w4o,G,h2,jre,A4o,L4o,Z$,B4o,x4o,k4o,p2,Nre,R4o,S4o,eI,P4o,$4o,I4o,_2,Dre,j4o,N4o,oI,D4o,q4o,G4o,u2,qre,O4o,X4o,rI,z4o,V4o,W4o,b2,Gre,Q4o,H4o,tI,U4o,J4o,Y4o,v2,Ore,K4o,Z4o,aI,eMo,oMo,rMo,T2,Xre,tMo,aMo,nI,nMo,sMo,lMo,F2,zre,iMo,dMo,sI,cMo,fMo,mMo,C2,Vre,gMo,hMo,lI,pMo,_Mo,uMo,M2,Wre,bMo,vMo,iI,TMo,FMo,CMo,E2,Qre,MMo,EMo,dI,yMo,wMo,AMo,y2,Hre,LMo,BMo,cI,xMo,kMo,RMo,w2,Ure,SMo,PMo,fI,$Mo,IMo,jMo,A2,Jre,NMo,DMo,mI,qMo,GMo,OMo,L2,Yre,XMo,zMo,gI,VMo,WMo,QMo,B2,Kre,HMo,UMo,hI,JMo,YMo,KMo,x2,Zre,ZMo,eEo,pI,oEo,rEo,tEo,k2,ete,aEo,nEo,_I,sEo,lEo,iEo,R2,ote,dEo,cEo,uI,fEo,mEo,gEo,S2,rte,hEo,pEo,bI,_Eo,uEo,bEo,P2,tte,vEo,TEo,vI,FEo,CEo,MEo,$2,ate,EEo,yEo,TI,wEo,AEo,LEo,I2,nte,BEo,xEo,FI,kEo,REo,SEo,j2,ste,PEo,$Eo,CI,IEo,jEo,NEo,N2,lte,DEo,qEo,MI,GEo,OEo,XEo,D2,ite,zEo,VEo,EI,WEo,QEo,HEo,q2,dte,UEo,JEo,yI,YEo,KEo,ZEo,G2,e3o,cte,o3o,r3o,fte,t3o,a3o,mte,n3o,s3o,k3,D7e,id,O2,gte,R3,l3o,hte,i3o,q7e,Ko,S3,d3o,dd,c3o,pte,f3o,m3o,_te,g3o,h3o,p3o,P3,_3o,ute,u3o,b3o,v3o,Vr,$3,T3o,bte,F3o,C3o,cd,M3o,vte,E3o,y3o,Tte,w3o,A3o,L3o,Fte,B3o,x3o,I3,k3o,je,j3,R3o,Cte,S3o,P3o,Wa,$3o,Mte,I3o,j3o,Ete,N3o,D3o,yte,q3o,G3o,O3o,na,X2,wte,X3o,z3o,wI,V3o,W3o,Q3o,z2,Ate,H3o,U3o,AI,J3o,Y3o,K3o,V2,Lte,Z3o,eyo,LI,oyo,ryo,tyo,W2,Bte,ayo,nyo,BI,syo,lyo,iyo,Q2,xte,dyo,cyo,xI,fyo,myo,gyo,H2,hyo,kte,pyo,_yo,Rte,uyo,byo,Ste,vyo,Tyo,N3,G7e,fd,U2,Pte,D3,Fyo,$te,Cyo,O7e,Zo,q3,Myo,md,Eyo,Ite,yyo,wyo,jte,Ayo,Lyo,Byo,G3,xyo,Nte,kyo,Ryo,Syo,Wr,O3,Pyo,Dte,$yo,Iyo,gd,jyo,qte,Nyo,Dyo,Gte,qyo,Gyo,Oyo,Ote,Xyo,zyo,X3,Vyo,Ne,z3,Wyo,Xte,Qyo,Hyo,Qa,Uyo,zte,Jyo,Yyo,Vte,Kyo,Zyo,Wte,ewo,owo,rwo,D,J2,Qte,two,awo,kI,nwo,swo,lwo,Y2,Hte,iwo,dwo,RI,cwo,fwo,mwo,K2,Ute,gwo,hwo,SI,pwo,_wo,uwo,Z2,Jte,bwo,vwo,PI,Two,Fwo,Cwo,e1,Yte,Mwo,Ewo,$I,ywo,wwo,Awo,o1,Kte,Lwo,Bwo,II,xwo,kwo,Rwo,r1,Zte,Swo,Pwo,jI,$wo,Iwo,jwo,t1,eae,Nwo,Dwo,NI,qwo,Gwo,Owo,a1,oae,Xwo,zwo,DI,Vwo,Wwo,Qwo,n1,rae,Hwo,Uwo,qI,Jwo,Ywo,Kwo,s1,tae,Zwo,eAo,GI,oAo,rAo,tAo,l1,aae,aAo,nAo,OI,sAo,lAo,iAo,i1,nae,dAo,cAo,XI,fAo,mAo,gAo,d1,sae,hAo,pAo,zI,_Ao,uAo,bAo,c1,lae,vAo,TAo,VI,FAo,CAo,MAo,f1,iae,EAo,yAo,WI,wAo,AAo,LAo,m1,dae,BAo,xAo,QI,kAo,RAo,SAo,g1,cae,PAo,$Ao,HI,IAo,jAo,NAo,h1,fae,DAo,qAo,UI,GAo,OAo,XAo,p1,mae,zAo,VAo,JI,WAo,QAo,HAo,_1,gae,UAo,JAo,YI,YAo,KAo,ZAo,u1,hae,e6o,o6o,KI,r6o,t6o,a6o,b1,pae,n6o,s6o,ZI,l6o,i6o,d6o,v1,_ae,c6o,f6o,ej,m6o,g6o,h6o,T1,uae,p6o,_6o,oj,u6o,b6o,v6o,F1,bae,T6o,F6o,rj,C6o,M6o,E6o,C1,vae,y6o,w6o,tj,A6o,L6o,B6o,M1,Tae,x6o,k6o,aj,R6o,S6o,P6o,E1,Fae,$6o,I6o,nj,j6o,N6o,D6o,y1,Cae,q6o,G6o,sj,O6o,X6o,z6o,w1,Mae,V6o,W6o,lj,Q6o,H6o,U6o,A1,Eae,J6o,Y6o,ij,K6o,Z6o,e0o,L1,o0o,yae,r0o,t0o,wae,a0o,n0o,Aae,s0o,l0o,V3,X7e,hd,B1,Lae,W3,i0o,Bae,d0o,z7e,er,Q3,c0o,pd,f0o,xae,m0o,g0o,kae,h0o,p0o,_0o,H3,u0o,Rae,b0o,v0o,T0o,Qr,U3,F0o,Sae,C0o,M0o,_d,E0o,Pae,y0o,w0o,$ae,A0o,L0o,B0o,Iae,x0o,k0o,J3,R0o,De,Y3,S0o,jae,P0o,$0o,Ha,I0o,Nae,j0o,N0o,Dae,D0o,q0o,qae,G0o,O0o,X0o,R,x1,Gae,z0o,V0o,dj,W0o,Q0o,H0o,k1,Oae,U0o,J0o,cj,Y0o,K0o,Z0o,R1,Xae,eLo,oLo,fj,rLo,tLo,aLo,S1,zae,nLo,sLo,mj,lLo,iLo,dLo,P1,Vae,cLo,fLo,gj,mLo,gLo,hLo,$1,Wae,pLo,_Lo,hj,uLo,bLo,vLo,I1,Qae,TLo,FLo,pj,CLo,MLo,ELo,j1,Hae,yLo,wLo,_j,ALo,LLo,BLo,N1,Uae,xLo,kLo,uj,RLo,SLo,PLo,D1,Jae,$Lo,ILo,bj,jLo,NLo,DLo,q1,Yae,qLo,GLo,vj,OLo,XLo,zLo,G1,Kae,VLo,WLo,Tj,QLo,HLo,ULo,O1,Zae,JLo,YLo,Fj,KLo,ZLo,e7o,X1,ene,o7o,r7o,Cj,t7o,a7o,n7o,z1,one,s7o,l7o,Mj,i7o,d7o,c7o,V1,rne,f7o,m7o,Ej,g7o,h7o,p7o,W1,tne,_7o,u7o,yj,b7o,v7o,T7o,Q1,ane,F7o,C7o,wj,M7o,E7o,y7o,H1,nne,w7o,A7o,Aj,L7o,B7o,x7o,U1,sne,k7o,R7o,Lj,S7o,P7o,$7o,J1,lne,I7o,j7o,Bj,N7o,D7o,q7o,Y1,ine,G7o,O7o,xj,X7o,z7o,V7o,K1,dne,W7o,Q7o,kj,H7o,U7o,J7o,Z1,cne,Y7o,K7o,Rj,Z7o,e8o,o8o,eb,fne,r8o,t8o,Sj,a8o,n8o,s8o,ob,mne,l8o,i8o,Pj,d8o,c8o,f8o,rb,gne,m8o,g8o,$j,h8o,p8o,_8o,tb,hne,u8o,b8o,Ij,v8o,T8o,F8o,ab,pne,C8o,M8o,jj,E8o,y8o,w8o,nb,_ne,A8o,L8o,Nj,B8o,x8o,k8o,sb,une,R8o,S8o,Dj,P8o,$8o,I8o,lb,bne,j8o,N8o,qj,D8o,q8o,G8o,ib,vne,O8o,X8o,Gj,z8o,V8o,W8o,db,Tne,Q8o,H8o,Oj,U8o,J8o,Y8o,cb,Fne,K8o,Z8o,Xj,eBo,oBo,rBo,fb,Cne,tBo,aBo,zj,nBo,sBo,lBo,mb,Mne,iBo,dBo,Vj,cBo,fBo,mBo,gb,Ene,gBo,hBo,Wj,pBo,_Bo,uBo,hb,bBo,yne,vBo,TBo,wne,FBo,CBo,Ane,MBo,EBo,K3,V7e,ud,pb,Lne,Z3,yBo,Bne,wBo,W7e,or,ey,ABo,bd,LBo,xne,BBo,xBo,kne,kBo,RBo,SBo,oy,PBo,Rne,$Bo,IBo,jBo,Hr,ry,NBo,Sne,DBo,qBo,vd,GBo,Pne,OBo,XBo,$ne,zBo,VBo,WBo,Ine,QBo,HBo,ty,UBo,qe,ay,JBo,jne,YBo,KBo,Ua,ZBo,Nne,exo,oxo,Dne,rxo,txo,qne,axo,nxo,sxo,Gne,_b,One,lxo,ixo,Qj,dxo,cxo,fxo,ub,mxo,Xne,gxo,hxo,zne,pxo,_xo,Vne,uxo,bxo,ny,Q7e,Td,bb,Wne,sy,vxo,Qne,Txo,H7e,rr,ly,Fxo,Fd,Cxo,Hne,Mxo,Exo,Une,yxo,wxo,Axo,iy,Lxo,Jne,Bxo,xxo,kxo,Ur,dy,Rxo,Yne,Sxo,Pxo,Cd,$xo,Kne,Ixo,jxo,Zne,Nxo,Dxo,qxo,ese,Gxo,Oxo,cy,Xxo,Ge,fy,zxo,ose,Vxo,Wxo,Ja,Qxo,rse,Hxo,Uxo,tse,Jxo,Yxo,ase,Kxo,Zxo,eko,be,vb,nse,oko,rko,Hj,tko,ako,nko,Tb,sse,sko,lko,Uj,iko,dko,cko,Ss,lse,fko,mko,Jj,gko,hko,Yj,pko,_ko,uko,Fb,ise,bko,vko,Kj,Tko,Fko,Cko,la,dse,Mko,Eko,Zj,yko,wko,eN,Ako,Lko,oN,Bko,xko,kko,Cb,cse,Rko,Sko,rN,Pko,$ko,Iko,Mb,fse,jko,Nko,tN,Dko,qko,Gko,Eb,mse,Oko,Xko,aN,zko,Vko,Wko,yb,gse,Qko,Hko,nN,Uko,Jko,Yko,wb,Kko,hse,Zko,eRo,pse,oRo,rRo,_se,tRo,aRo,my,U7e,Md,Ab,use,gy,nRo,bse,sRo,J7e,tr,hy,lRo,Ed,iRo,vse,dRo,cRo,Tse,fRo,mRo,gRo,py,hRo,Fse,pRo,_Ro,uRo,Jr,_y,bRo,Cse,vRo,TRo,yd,FRo,Mse,CRo,MRo,Ese,ERo,yRo,wRo,yse,ARo,LRo,uy,BRo,Oe,by,xRo,wse,kRo,RRo,Ya,SRo,Ase,PRo,$Ro,Lse,IRo,jRo,Bse,NRo,DRo,qRo,xse,Lb,kse,GRo,ORo,sN,XRo,zRo,VRo,Bb,WRo,Rse,QRo,HRo,Sse,URo,JRo,Pse,YRo,KRo,vy,Y7e,wd,xb,$se,Ty,ZRo,Ise,eSo,K7e,ar,Fy,oSo,Ad,rSo,jse,tSo,aSo,Nse,nSo,sSo,lSo,Cy,iSo,Dse,dSo,cSo,fSo,Yr,My,mSo,qse,gSo,hSo,Ld,pSo,Gse,_So,uSo,Ose,bSo,vSo,TSo,Xse,FSo,CSo,Ey,MSo,Xe,yy,ESo,zse,ySo,wSo,Ka,ASo,Vse,LSo,BSo,Wse,xSo,kSo,Qse,RSo,SSo,PSo,ao,kb,Hse,$So,ISo,lN,jSo,NSo,DSo,Rb,Use,qSo,GSo,iN,OSo,XSo,zSo,Sb,Jse,VSo,WSo,dN,QSo,HSo,USo,Pb,Yse,JSo,YSo,cN,KSo,ZSo,ePo,$b,Kse,oPo,rPo,fN,tPo,aPo,nPo,Ib,Zse,sPo,lPo,mN,iPo,dPo,cPo,jb,ele,fPo,mPo,gN,gPo,hPo,pPo,Nb,_Po,ole,uPo,bPo,rle,vPo,TPo,tle,FPo,CPo,wy,Z7e,Bd,Db,ale,Ay,MPo,nle,EPo,e8e,nr,Ly,yPo,xd,wPo,sle,APo,LPo,lle,BPo,xPo,kPo,By,RPo,ile,SPo,PPo,$Po,Kr,xy,IPo,dle,jPo,NPo,kd,DPo,cle,qPo,GPo,fle,OPo,XPo,zPo,mle,VPo,WPo,ky,QPo,ze,Ry,HPo,gle,UPo,JPo,Za,YPo,hle,KPo,ZPo,ple,e$o,o$o,_le,r$o,t$o,a$o,Rd,qb,ule,n$o,s$o,hN,l$o,i$o,d$o,Gb,ble,c$o,f$o,pN,m$o,g$o,h$o,Ob,vle,p$o,_$o,_N,u$o,b$o,v$o,Xb,T$o,Tle,F$o,C$o,Fle,M$o,E$o,Cle,y$o,w$o,Sy,o8e,Sd,zb,Mle,Py,A$o,Ele,L$o,r8e,sr,$y,B$o,Pd,x$o,yle,k$o,R$o,wle,S$o,P$o,$$o,Iy,I$o,Ale,j$o,N$o,D$o,Zr,jy,q$o,Lle,G$o,O$o,$d,X$o,Ble,z$o,V$o,xle,W$o,Q$o,H$o,kle,U$o,J$o,Ny,Y$o,Ve,Dy,K$o,Rle,Z$o,eIo,en,oIo,Sle,rIo,tIo,Ple,aIo,nIo,$le,sIo,lIo,iIo,no,Vb,Ile,dIo,cIo,uN,fIo,mIo,gIo,Wb,jle,hIo,pIo,bN,_Io,uIo,bIo,Qb,Nle,vIo,TIo,vN,FIo,CIo,MIo,Hb,Dle,EIo,yIo,TN,wIo,AIo,LIo,Ub,qle,BIo,xIo,FN,kIo,RIo,SIo,Jb,Gle,PIo,$Io,CN,IIo,jIo,NIo,Yb,Ole,DIo,qIo,MN,GIo,OIo,XIo,Kb,zIo,Xle,VIo,WIo,zle,QIo,HIo,Vle,UIo,JIo,qy,t8e,Id,Zb,Wle,Gy,YIo,Qle,KIo,a8e,lr,Oy,ZIo,jd,ejo,Hle,ojo,rjo,Ule,tjo,ajo,njo,Xy,sjo,Jle,ljo,ijo,djo,et,zy,cjo,Yle,fjo,mjo,Nd,gjo,Kle,hjo,pjo,Zle,_jo,ujo,bjo,eie,vjo,Tjo,Vy,Fjo,We,Wy,Cjo,oie,Mjo,Ejo,on,yjo,rie,wjo,Ajo,tie,Ljo,Bjo,aie,xjo,kjo,Rjo,Qy,ev,nie,Sjo,Pjo,EN,$jo,Ijo,jjo,ov,sie,Njo,Djo,yN,qjo,Gjo,Ojo,rv,Xjo,lie,zjo,Vjo,iie,Wjo,Qjo,die,Hjo,Ujo,Hy,n8e,Dd,tv,cie,Uy,Jjo,fie,Yjo,s8e,ir,Jy,Kjo,qd,Zjo,mie,eNo,oNo,gie,rNo,tNo,aNo,Yy,nNo,hie,sNo,lNo,iNo,ot,Ky,dNo,pie,cNo,fNo,Gd,mNo,_ie,gNo,hNo,uie,pNo,_No,uNo,bie,bNo,vNo,Zy,TNo,Qe,ew,FNo,vie,CNo,MNo,rn,ENo,Tie,yNo,wNo,Fie,ANo,LNo,Cie,BNo,xNo,kNo,Od,av,Mie,RNo,SNo,wN,PNo,$No,INo,nv,Eie,jNo,NNo,AN,DNo,qNo,GNo,sv,yie,ONo,XNo,LN,zNo,VNo,WNo,lv,QNo,wie,HNo,UNo,Aie,JNo,YNo,Lie,KNo,ZNo,ow,l8e,Xd,iv,Bie,rw,eDo,xie,oDo,i8e,dr,tw,rDo,zd,tDo,kie,aDo,nDo,Rie,sDo,lDo,iDo,aw,dDo,Sie,cDo,fDo,mDo,rt,nw,gDo,Pie,hDo,pDo,Vd,_Do,$ie,uDo,bDo,Iie,vDo,TDo,FDo,jie,CDo,MDo,sw,EDo,He,lw,yDo,Nie,wDo,ADo,tn,LDo,Die,BDo,xDo,qie,kDo,RDo,Gie,SDo,PDo,$Do,Wd,dv,Oie,IDo,jDo,BN,NDo,DDo,qDo,cv,Xie,GDo,ODo,xN,XDo,zDo,VDo,fv,zie,WDo,QDo,kN,HDo,UDo,JDo,mv,YDo,Vie,KDo,ZDo,Wie,eqo,oqo,Qie,rqo,tqo,iw,d8e,Qd,gv,Hie,dw,aqo,Uie,nqo,c8e,cr,cw,sqo,Hd,lqo,Jie,iqo,dqo,Yie,cqo,fqo,mqo,fw,gqo,Kie,hqo,pqo,_qo,tt,mw,uqo,Zie,bqo,vqo,Ud,Tqo,ede,Fqo,Cqo,ode,Mqo,Eqo,yqo,rde,wqo,Aqo,gw,Lqo,Ue,hw,Bqo,tde,xqo,kqo,an,Rqo,ade,Sqo,Pqo,nde,$qo,Iqo,sde,jqo,Nqo,Dqo,lde,hv,ide,qqo,Gqo,RN,Oqo,Xqo,zqo,pv,Vqo,dde,Wqo,Qqo,cde,Hqo,Uqo,fde,Jqo,Yqo,pw,f8e,Jd,_v,mde,_w,Kqo,gde,Zqo,m8e,fr,uw,eGo,Yd,oGo,hde,rGo,tGo,pde,aGo,nGo,sGo,bw,lGo,_de,iGo,dGo,cGo,at,vw,fGo,ude,mGo,gGo,Kd,hGo,bde,pGo,_Go,vde,uGo,bGo,vGo,Tde,TGo,FGo,Tw,CGo,Je,Fw,MGo,Fde,EGo,yGo,nn,wGo,Cde,AGo,LGo,Mde,BGo,xGo,Ede,kGo,RGo,SGo,yde,uv,wde,PGo,$Go,SN,IGo,jGo,NGo,bv,DGo,Ade,qGo,GGo,Lde,OGo,XGo,Bde,zGo,VGo,Cw,g8e,Zd,vv,xde,Mw,WGo,kde,QGo,h8e,mr,Ew,HGo,ec,UGo,Rde,JGo,YGo,Sde,KGo,ZGo,eOo,yw,oOo,Pde,rOo,tOo,aOo,nt,ww,nOo,$de,sOo,lOo,oc,iOo,Ide,dOo,cOo,jde,fOo,mOo,gOo,Nde,hOo,pOo,Aw,_Oo,Ye,Lw,uOo,Dde,bOo,vOo,sn,TOo,qde,FOo,COo,Gde,MOo,EOo,Ode,yOo,wOo,AOo,Bw,Tv,Xde,LOo,BOo,PN,xOo,kOo,ROo,Fv,zde,SOo,POo,$N,$Oo,IOo,jOo,Cv,NOo,Vde,DOo,qOo,Wde,GOo,OOo,Qde,XOo,zOo,xw,p8e,rc,Mv,Hde,kw,VOo,Ude,WOo,_8e,gr,Rw,QOo,tc,HOo,Jde,UOo,JOo,Yde,YOo,KOo,ZOo,Sw,eXo,Kde,oXo,rXo,tXo,st,Pw,aXo,Zde,nXo,sXo,ac,lXo,ece,iXo,dXo,oce,cXo,fXo,mXo,rce,gXo,hXo,$w,pXo,go,Iw,_Xo,tce,uXo,bXo,ln,vXo,ace,TXo,FXo,nce,CXo,MXo,sce,EXo,yXo,wXo,B,Ev,lce,AXo,LXo,IN,BXo,xXo,kXo,yv,ice,RXo,SXo,jN,PXo,$Xo,IXo,wv,dce,jXo,NXo,NN,DXo,qXo,GXo,Av,cce,OXo,XXo,DN,zXo,VXo,WXo,Lv,fce,QXo,HXo,qN,UXo,JXo,YXo,Bv,mce,KXo,ZXo,GN,ezo,ozo,rzo,xv,gce,tzo,azo,ON,nzo,szo,lzo,kv,hce,izo,dzo,XN,czo,fzo,mzo,Rv,pce,gzo,hzo,zN,pzo,_zo,uzo,Sv,_ce,bzo,vzo,VN,Tzo,Fzo,Czo,Pv,uce,Mzo,Ezo,WN,yzo,wzo,Azo,$v,bce,Lzo,Bzo,QN,xzo,kzo,Rzo,Iv,vce,Szo,Pzo,HN,$zo,Izo,jzo,jv,Tce,Nzo,Dzo,UN,qzo,Gzo,Ozo,Nv,Fce,Xzo,zzo,JN,Vzo,Wzo,Qzo,Dv,Cce,Hzo,Uzo,YN,Jzo,Yzo,Kzo,Ps,Mce,Zzo,eVo,KN,oVo,rVo,ZN,tVo,aVo,nVo,qv,Ece,sVo,lVo,eD,iVo,dVo,cVo,Gv,yce,fVo,mVo,oD,gVo,hVo,pVo,Ov,wce,_Vo,uVo,rD,bVo,vVo,TVo,Xv,Ace,FVo,CVo,tD,MVo,EVo,yVo,zv,Lce,wVo,AVo,aD,LVo,BVo,xVo,Vv,Bce,kVo,RVo,nD,SVo,PVo,$Vo,Wv,xce,IVo,jVo,sD,NVo,DVo,qVo,Qv,kce,GVo,OVo,lD,XVo,zVo,VVo,Hv,Rce,WVo,QVo,iD,HVo,UVo,JVo,Uv,Sce,YVo,KVo,dD,ZVo,eWo,oWo,Jv,Pce,rWo,tWo,cD,aWo,nWo,sWo,Yv,$ce,lWo,iWo,fD,dWo,cWo,fWo,Kv,Ice,mWo,gWo,mD,hWo,pWo,_Wo,Zv,jce,uWo,bWo,gD,vWo,TWo,FWo,eT,Nce,CWo,MWo,hD,EWo,yWo,wWo,oT,Dce,AWo,LWo,pD,BWo,xWo,kWo,rT,qce,RWo,SWo,_D,PWo,$Wo,IWo,tT,Gce,jWo,NWo,uD,DWo,qWo,GWo,aT,Oce,OWo,XWo,bD,zWo,VWo,WWo,nT,Xce,QWo,HWo,vD,UWo,JWo,YWo,sT,zce,KWo,ZWo,TD,eQo,oQo,rQo,lT,Vce,tQo,aQo,FD,nQo,sQo,lQo,iT,Wce,iQo,dQo,CD,cQo,fQo,mQo,dT,Qce,gQo,hQo,MD,pQo,_Qo,uQo,cT,Hce,bQo,vQo,ED,TQo,FQo,CQo,Uce,MQo,EQo,jw,u8e,nc,fT,Jce,Nw,yQo,Yce,wQo,b8e,hr,Dw,AQo,sc,LQo,Kce,BQo,xQo,Zce,kQo,RQo,SQo,qw,PQo,efe,$Qo,IQo,jQo,lt,Gw,NQo,ofe,DQo,qQo,lc,GQo,rfe,OQo,XQo,tfe,zQo,VQo,WQo,afe,QQo,HQo,Ow,UQo,ho,Xw,JQo,nfe,YQo,KQo,dn,ZQo,sfe,eHo,oHo,lfe,rHo,tHo,ife,aHo,nHo,sHo,H,mT,dfe,lHo,iHo,yD,dHo,cHo,fHo,gT,cfe,mHo,gHo,wD,hHo,pHo,_Ho,hT,ffe,uHo,bHo,AD,vHo,THo,FHo,pT,mfe,CHo,MHo,LD,EHo,yHo,wHo,_T,gfe,AHo,LHo,BD,BHo,xHo,kHo,uT,hfe,RHo,SHo,xD,PHo,$Ho,IHo,bT,pfe,jHo,NHo,kD,DHo,qHo,GHo,vT,_fe,OHo,XHo,RD,zHo,VHo,WHo,TT,ufe,QHo,HHo,SD,UHo,JHo,YHo,FT,bfe,KHo,ZHo,PD,eUo,oUo,rUo,CT,vfe,tUo,aUo,$D,nUo,sUo,lUo,MT,Tfe,iUo,dUo,ID,cUo,fUo,mUo,ET,Ffe,gUo,hUo,jD,pUo,_Uo,uUo,yT,Cfe,bUo,vUo,ND,TUo,FUo,CUo,wT,Mfe,MUo,EUo,DD,yUo,wUo,AUo,AT,Efe,LUo,BUo,qD,xUo,kUo,RUo,LT,yfe,SUo,PUo,GD,$Uo,IUo,jUo,BT,wfe,NUo,DUo,OD,qUo,GUo,OUo,xT,Afe,XUo,zUo,XD,VUo,WUo,QUo,kT,Lfe,HUo,UUo,zD,JUo,YUo,KUo,RT,Bfe,ZUo,eJo,VD,oJo,rJo,tJo,ST,xfe,aJo,nJo,WD,sJo,lJo,iJo,kfe,dJo,cJo,zw,v8e,ic,PT,Rfe,Vw,fJo,Sfe,mJo,T8e,pr,Ww,gJo,dc,hJo,Pfe,pJo,_Jo,$fe,uJo,bJo,vJo,Qw,TJo,Ife,FJo,CJo,MJo,it,Hw,EJo,jfe,yJo,wJo,cc,AJo,Nfe,LJo,BJo,Dfe,xJo,kJo,RJo,qfe,SJo,PJo,Uw,$Jo,po,Jw,IJo,Gfe,jJo,NJo,cn,DJo,Ofe,qJo,GJo,Xfe,OJo,XJo,zfe,zJo,VJo,WJo,he,$T,Vfe,QJo,HJo,QD,UJo,JJo,YJo,IT,Wfe,KJo,ZJo,HD,eYo,oYo,rYo,jT,Qfe,tYo,aYo,UD,nYo,sYo,lYo,NT,Hfe,iYo,dYo,JD,cYo,fYo,mYo,DT,Ufe,gYo,hYo,YD,pYo,_Yo,uYo,qT,Jfe,bYo,vYo,KD,TYo,FYo,CYo,GT,Yfe,MYo,EYo,ZD,yYo,wYo,AYo,OT,Kfe,LYo,BYo,eq,xYo,kYo,RYo,XT,Zfe,SYo,PYo,oq,$Yo,IYo,jYo,zT,eme,NYo,DYo,rq,qYo,GYo,OYo,ome,XYo,zYo,Yw,F8e,fc,VT,rme,Kw,VYo,tme,WYo,C8e,_r,Zw,QYo,mc,HYo,ame,UYo,JYo,nme,YYo,KYo,ZYo,eA,eKo,sme,oKo,rKo,tKo,dt,oA,aKo,lme,nKo,sKo,gc,lKo,ime,iKo,dKo,dme,cKo,fKo,mKo,cme,gKo,hKo,rA,pKo,_o,tA,_Ko,fme,uKo,bKo,fn,vKo,mme,TKo,FKo,gme,CKo,MKo,hme,EKo,yKo,wKo,aA,WT,pme,AKo,LKo,tq,BKo,xKo,kKo,QT,_me,RKo,SKo,aq,PKo,$Ko,IKo,ume,jKo,NKo,nA,M8e,hc,HT,bme,sA,DKo,vme,qKo,E8e,ur,lA,GKo,pc,OKo,Tme,XKo,zKo,Fme,VKo,WKo,QKo,iA,HKo,Cme,UKo,JKo,YKo,ct,dA,KKo,Mme,ZKo,eZo,_c,oZo,Eme,rZo,tZo,yme,aZo,nZo,sZo,wme,lZo,iZo,cA,dZo,uo,fA,cZo,Ame,fZo,mZo,mn,gZo,Lme,hZo,pZo,Bme,_Zo,uZo,xme,bZo,vZo,TZo,Y,UT,kme,FZo,CZo,nq,MZo,EZo,yZo,JT,Rme,wZo,AZo,sq,LZo,BZo,xZo,YT,Sme,kZo,RZo,lq,SZo,PZo,$Zo,KT,Pme,IZo,jZo,iq,NZo,DZo,qZo,ZT,$me,GZo,OZo,dq,XZo,zZo,VZo,eF,Ime,WZo,QZo,cq,HZo,UZo,JZo,oF,jme,YZo,KZo,fq,ZZo,eer,oer,rF,Nme,rer,ter,mq,aer,ner,ser,tF,Dme,ler,ier,gq,der,cer,fer,aF,qme,mer,ger,hq,her,per,_er,nF,Gme,uer,ber,pq,ver,Ter,Fer,sF,Ome,Cer,Mer,_q,Eer,yer,wer,lF,Xme,Aer,Ler,uq,Ber,xer,ker,iF,zme,Rer,Ser,bq,Per,$er,Ier,dF,Vme,jer,Ner,vq,Der,qer,Ger,cF,Wme,Oer,Xer,Tq,zer,Ver,Wer,fF,Qme,Qer,Her,Fq,Uer,Jer,Yer,mF,Hme,Ker,Zer,Cq,eor,oor,ror,gF,Ume,tor,aor,Mq,nor,sor,lor,hF,Jme,ior,dor,Eq,cor,mor,gor,Yme,hor,por,mA,y8e,uc,pF,Kme,gA,_or,Zme,uor,w8e,br,hA,bor,bc,vor,ege,Tor,For,oge,Cor,Mor,Eor,pA,yor,rge,wor,Aor,Lor,ft,_A,Bor,tge,xor,kor,vc,Ror,age,Sor,Por,nge,$or,Ior,jor,sge,Nor,Dor,uA,qor,bo,bA,Gor,lge,Oor,Xor,gn,zor,ige,Vor,Wor,dge,Qor,Hor,cge,Uor,Jor,Yor,pe,_F,fge,Kor,Zor,yq,err,orr,rrr,uF,mge,trr,arr,wq,nrr,srr,lrr,bF,gge,irr,drr,Aq,crr,frr,mrr,vF,hge,grr,hrr,Lq,prr,_rr,urr,TF,pge,brr,vrr,Bq,Trr,Frr,Crr,FF,_ge,Mrr,Err,xq,yrr,wrr,Arr,CF,uge,Lrr,Brr,kq,xrr,krr,Rrr,MF,bge,Srr,Prr,Rq,$rr,Irr,jrr,EF,vge,Nrr,Drr,Sq,qrr,Grr,Orr,yF,Tge,Xrr,zrr,Pq,Vrr,Wrr,Qrr,Fge,Hrr,Urr,vA,A8e,Tc,wF,Cge,TA,Jrr,Mge,Yrr,L8e,vr,FA,Krr,Fc,Zrr,Ege,etr,otr,yge,rtr,ttr,atr,CA,ntr,wge,str,ltr,itr,mt,MA,dtr,Age,ctr,ftr,Cc,mtr,Lge,gtr,htr,Bge,ptr,_tr,utr,xge,btr,vtr,EA,Ttr,vo,yA,Ftr,kge,Ctr,Mtr,hn,Etr,Rge,ytr,wtr,Sge,Atr,Ltr,Pge,Btr,xtr,ktr,X,AF,$ge,Rtr,Str,$q,Ptr,$tr,Itr,LF,Ige,jtr,Ntr,Iq,Dtr,qtr,Gtr,BF,jge,Otr,Xtr,jq,ztr,Vtr,Wtr,xF,Nge,Qtr,Htr,Nq,Utr,Jtr,Ytr,kF,Dge,Ktr,Ztr,Dq,ear,oar,rar,RF,qge,tar,aar,qq,nar,sar,lar,SF,Gge,iar,dar,Gq,car,far,mar,PF,Oge,gar,har,Oq,par,_ar,uar,$F,Xge,bar,Tar,Xq,Far,Car,Mar,IF,zge,Ear,yar,zq,war,Aar,Lar,jF,Vge,Bar,xar,Vq,kar,Rar,Sar,NF,Wge,Par,$ar,Wq,Iar,jar,Nar,DF,Qge,Dar,qar,Qq,Gar,Oar,Xar,qF,Hge,zar,Var,Hq,War,Qar,Har,GF,Uge,Uar,Jar,Uq,Yar,Kar,Zar,OF,Jge,enr,onr,Jq,rnr,tnr,anr,XF,Yge,nnr,snr,Yq,lnr,inr,dnr,zF,Kge,cnr,fnr,Kq,mnr,gnr,hnr,VF,Zge,pnr,_nr,Zq,unr,bnr,vnr,WF,ehe,Tnr,Fnr,eG,Cnr,Mnr,Enr,QF,ohe,ynr,wnr,oG,Anr,Lnr,Bnr,HF,rhe,xnr,knr,rG,Rnr,Snr,Pnr,UF,the,$nr,Inr,tG,jnr,Nnr,Dnr,JF,ahe,qnr,Gnr,aG,Onr,Xnr,znr,YF,nhe,Vnr,Wnr,nG,Qnr,Hnr,Unr,she,Jnr,Ynr,wA,B8e,Mc,KF,lhe,AA,Knr,ihe,Znr,x8e,Tr,LA,esr,Ec,osr,dhe,rsr,tsr,che,asr,nsr,ssr,BA,lsr,fhe,isr,dsr,csr,gt,xA,fsr,mhe,msr,gsr,yc,hsr,ghe,psr,_sr,hhe,usr,bsr,vsr,phe,Tsr,Fsr,kA,Csr,To,RA,Msr,_he,Esr,ysr,pn,wsr,uhe,Asr,Lsr,bhe,Bsr,xsr,vhe,ksr,Rsr,Ssr,te,ZF,The,Psr,$sr,sG,Isr,jsr,Nsr,e9,Fhe,Dsr,qsr,lG,Gsr,Osr,Xsr,o9,Che,zsr,Vsr,iG,Wsr,Qsr,Hsr,r9,Mhe,Usr,Jsr,dG,Ysr,Ksr,Zsr,t9,Ehe,elr,olr,cG,rlr,tlr,alr,a9,yhe,nlr,slr,fG,llr,ilr,dlr,n9,whe,clr,flr,mG,mlr,glr,hlr,s9,Ahe,plr,_lr,gG,ulr,blr,vlr,l9,Lhe,Tlr,Flr,hG,Clr,Mlr,Elr,i9,Bhe,ylr,wlr,pG,Alr,Llr,Blr,d9,xhe,xlr,klr,_G,Rlr,Slr,Plr,c9,khe,$lr,Ilr,uG,jlr,Nlr,Dlr,f9,Rhe,qlr,Glr,bG,Olr,Xlr,zlr,m9,She,Vlr,Wlr,vG,Qlr,Hlr,Ulr,g9,Phe,Jlr,Ylr,TG,Klr,Zlr,eir,h9,$he,oir,rir,FG,tir,air,nir,p9,Ihe,sir,lir,CG,iir,dir,cir,jhe,fir,mir,SA,k8e,wc,_9,Nhe,PA,gir,Dhe,hir,R8e,Fr,$A,pir,Ac,_ir,qhe,uir,bir,Ghe,vir,Tir,Fir,IA,Cir,Ohe,Mir,Eir,yir,ht,jA,wir,Xhe,Air,Lir,Lc,Bir,zhe,xir,kir,Vhe,Rir,Sir,Pir,Whe,$ir,Iir,NA,jir,Fo,DA,Nir,Qhe,Dir,qir,_n,Gir,Hhe,Oir,Xir,Uhe,zir,Vir,Jhe,Wir,Qir,Hir,Yhe,u9,Khe,Uir,Jir,MG,Yir,Kir,Zir,Zhe,edr,odr,qA,S8e,Bc,b9,epe,GA,rdr,ope,tdr,P8e,Cr,OA,adr,xc,ndr,rpe,sdr,ldr,tpe,idr,ddr,cdr,XA,fdr,ape,mdr,gdr,hdr,pt,zA,pdr,npe,_dr,udr,kc,bdr,spe,vdr,Tdr,lpe,Fdr,Cdr,Mdr,ipe,Edr,ydr,VA,wdr,Co,WA,Adr,dpe,Ldr,Bdr,un,xdr,cpe,kdr,Rdr,fpe,Sdr,Pdr,mpe,$dr,Idr,jdr,K,v9,gpe,Ndr,Ddr,EG,qdr,Gdr,Odr,T9,hpe,Xdr,zdr,yG,Vdr,Wdr,Qdr,F9,ppe,Hdr,Udr,wG,Jdr,Ydr,Kdr,C9,_pe,Zdr,ecr,AG,ocr,rcr,tcr,M9,upe,acr,ncr,LG,scr,lcr,icr,E9,bpe,dcr,ccr,BG,fcr,mcr,gcr,y9,vpe,hcr,pcr,xG,_cr,ucr,bcr,w9,Tpe,vcr,Tcr,kG,Fcr,Ccr,Mcr,A9,Fpe,Ecr,ycr,RG,wcr,Acr,Lcr,L9,Cpe,Bcr,xcr,SG,kcr,Rcr,Scr,B9,Mpe,Pcr,$cr,PG,Icr,jcr,Ncr,x9,Epe,Dcr,qcr,$G,Gcr,Ocr,Xcr,k9,ype,zcr,Vcr,IG,Wcr,Qcr,Hcr,R9,wpe,Ucr,Jcr,jG,Ycr,Kcr,Zcr,S9,Ape,efr,ofr,NG,rfr,tfr,afr,P9,Lpe,nfr,sfr,DG,lfr,ifr,dfr,$9,Bpe,cfr,ffr,qG,mfr,gfr,hfr,I9,xpe,pfr,_fr,GG,ufr,bfr,vfr,j9,kpe,Tfr,Ffr,OG,Cfr,Mfr,Efr,N9,Rpe,yfr,wfr,XG,Afr,Lfr,Bfr,Spe,xfr,kfr,QA,$8e,Rc,D9,Ppe,HA,Rfr,$pe,Sfr,I8e,Mr,UA,Pfr,Sc,$fr,Ipe,Ifr,jfr,jpe,Nfr,Dfr,qfr,JA,Gfr,Npe,Ofr,Xfr,zfr,_t,YA,Vfr,Dpe,Wfr,Qfr,Pc,Hfr,qpe,Ufr,Jfr,Gpe,Yfr,Kfr,Zfr,Ope,emr,omr,KA,rmr,Mo,ZA,tmr,Xpe,amr,nmr,bn,smr,zpe,lmr,imr,Vpe,dmr,cmr,Wpe,fmr,mmr,gmr,Z,q9,Qpe,hmr,pmr,zG,_mr,umr,bmr,G9,Hpe,vmr,Tmr,VG,Fmr,Cmr,Mmr,O9,Upe,Emr,ymr,WG,wmr,Amr,Lmr,X9,Jpe,Bmr,xmr,QG,kmr,Rmr,Smr,z9,Ype,Pmr,$mr,HG,Imr,jmr,Nmr,V9,Kpe,Dmr,qmr,UG,Gmr,Omr,Xmr,W9,Zpe,zmr,Vmr,JG,Wmr,Qmr,Hmr,Q9,e_e,Umr,Jmr,YG,Ymr,Kmr,Zmr,H9,o_e,egr,ogr,KG,rgr,tgr,agr,U9,r_e,ngr,sgr,ZG,lgr,igr,dgr,J9,t_e,cgr,fgr,eO,mgr,ggr,hgr,Y9,a_e,pgr,_gr,oO,ugr,bgr,vgr,K9,n_e,Tgr,Fgr,rO,Cgr,Mgr,Egr,Z9,s_e,ygr,wgr,tO,Agr,Lgr,Bgr,eC,l_e,xgr,kgr,aO,Rgr,Sgr,Pgr,oC,i_e,$gr,Igr,nO,jgr,Ngr,Dgr,rC,d_e,qgr,Ggr,sO,Ogr,Xgr,zgr,tC,c_e,Vgr,Wgr,lO,Qgr,Hgr,Ugr,aC,f_e,Jgr,Ygr,iO,Kgr,Zgr,ehr,m_e,ohr,rhr,e6,j8e,$c,nC,g_e,o6,thr,h_e,ahr,N8e,Er,r6,nhr,Ic,shr,p_e,lhr,ihr,__e,dhr,chr,fhr,t6,mhr,u_e,ghr,hhr,phr,ut,a6,_hr,b_e,uhr,bhr,jc,vhr,v_e,Thr,Fhr,T_e,Chr,Mhr,Ehr,F_e,yhr,whr,n6,Ahr,Eo,s6,Lhr,C_e,Bhr,xhr,vn,khr,M_e,Rhr,Shr,E_e,Phr,$hr,y_e,Ihr,jhr,Nhr,w_e,sC,A_e,Dhr,qhr,dO,Ghr,Ohr,Xhr,L_e,zhr,Vhr,l6,D8e,Nc,lC,B_e,i6,Whr,x_e,Qhr,q8e,yr,d6,Hhr,Dc,Uhr,k_e,Jhr,Yhr,R_e,Khr,Zhr,epr,c6,opr,S_e,rpr,tpr,apr,bt,f6,npr,P_e,spr,lpr,qc,ipr,$_e,dpr,cpr,I_e,fpr,mpr,gpr,j_e,hpr,ppr,m6,_pr,yo,g6,upr,N_e,bpr,vpr,Tn,Tpr,D_e,Fpr,Cpr,q_e,Mpr,Epr,G_e,ypr,wpr,Apr,O_e,iC,X_e,Lpr,Bpr,cO,xpr,kpr,Rpr,z_e,Spr,Ppr,h6,G8e,Gc,dC,V_e,p6,$pr,W_e,Ipr,O8e,wr,_6,jpr,Oc,Npr,Q_e,Dpr,qpr,H_e,Gpr,Opr,Xpr,u6,zpr,U_e,Vpr,Wpr,Qpr,vt,b6,Hpr,J_e,Upr,Jpr,Xc,Ypr,Y_e,Kpr,Zpr,K_e,e_r,o_r,r_r,Z_e,t_r,a_r,v6,n_r,wo,T6,s_r,eue,l_r,i_r,Fn,d_r,oue,c_r,f_r,rue,m_r,g_r,tue,h_r,p_r,__r,V,cC,aue,u_r,b_r,fO,v_r,T_r,F_r,fC,nue,C_r,M_r,mO,E_r,y_r,w_r,mC,sue,A_r,L_r,gO,B_r,x_r,k_r,gC,lue,R_r,S_r,hO,P_r,$_r,I_r,hC,iue,j_r,N_r,pO,D_r,q_r,G_r,pC,due,O_r,X_r,_O,z_r,V_r,W_r,_C,cue,Q_r,H_r,uO,U_r,J_r,Y_r,uC,fue,K_r,Z_r,bO,eur,our,rur,bC,mue,tur,aur,vO,nur,sur,lur,vC,gue,iur,dur,TO,cur,fur,mur,TC,hue,gur,hur,FO,pur,_ur,uur,FC,pue,bur,vur,CO,Tur,Fur,Cur,CC,_ue,Mur,Eur,MO,yur,wur,Aur,MC,uue,Lur,Bur,EO,xur,kur,Rur,EC,bue,Sur,Pur,yO,$ur,Iur,jur,yC,vue,Nur,Dur,wO,qur,Gur,Our,wC,Tue,Xur,zur,AO,Vur,Wur,Qur,AC,Fue,Hur,Uur,LO,Jur,Yur,Kur,LC,Cue,Zur,e5r,BO,o5r,r5r,t5r,BC,Mue,a5r,n5r,xO,s5r,l5r,i5r,xC,Eue,d5r,c5r,kO,f5r,m5r,g5r,kC,yue,h5r,p5r,RO,_5r,u5r,b5r,RC,wue,v5r,T5r,SO,F5r,C5r,M5r,SC,Aue,E5r,y5r,PO,w5r,A5r,L5r,Lue,B5r,x5r,F6,X8e,zc,PC,Bue,C6,k5r,xue,R5r,z8e,Ar,M6,S5r,Vc,P5r,kue,$5r,I5r,Rue,j5r,N5r,D5r,E6,q5r,Sue,G5r,O5r,X5r,Tt,y6,z5r,Pue,V5r,W5r,Wc,Q5r,$ue,H5r,U5r,Iue,J5r,Y5r,K5r,jue,Z5r,e2r,w6,o2r,Ao,A6,r2r,Nue,t2r,a2r,Cn,n2r,Due,s2r,l2r,que,i2r,d2r,Gue,c2r,f2r,m2r,Mn,$C,Oue,g2r,h2r,$O,p2r,_2r,u2r,IC,Xue,b2r,v2r,IO,T2r,F2r,C2r,jC,zue,M2r,E2r,jO,y2r,w2r,A2r,NC,Vue,L2r,B2r,NO,x2r,k2r,R2r,Wue,S2r,P2r,L6,V8e,Qc,DC,Que,B6,$2r,Hue,I2r,W8e,Lr,x6,j2r,Hc,N2r,Uue,D2r,q2r,Jue,G2r,O2r,X2r,k6,z2r,Yue,V2r,W2r,Q2r,Ft,R6,H2r,Kue,U2r,J2r,Uc,Y2r,Zue,K2r,Z2r,e5e,e1r,o1r,r1r,o5e,t1r,a1r,S6,n1r,Lo,P6,s1r,r5e,l1r,i1r,En,d1r,t5e,c1r,f1r,a5e,m1r,g1r,n5e,h1r,p1r,_1r,fe,qC,s5e,u1r,b1r,DO,v1r,T1r,F1r,GC,l5e,C1r,M1r,qO,E1r,y1r,w1r,OC,i5e,A1r,L1r,GO,B1r,x1r,k1r,XC,d5e,R1r,S1r,OO,P1r,$1r,I1r,zC,c5e,j1r,N1r,XO,D1r,q1r,G1r,VC,f5e,O1r,X1r,zO,z1r,V1r,W1r,WC,m5e,Q1r,H1r,VO,U1r,J1r,Y1r,QC,g5e,K1r,Z1r,WO,ebr,obr,rbr,HC,h5e,tbr,abr,QO,nbr,sbr,lbr,UC,p5e,ibr,dbr,HO,cbr,fbr,mbr,JC,_5e,gbr,hbr,UO,pbr,_br,ubr,u5e,bbr,vbr,$6,Q8e,Jc,YC,b5e,I6,Tbr,v5e,Fbr,H8e,Br,j6,Cbr,Yc,Mbr,T5e,Ebr,ybr,F5e,wbr,Abr,Lbr,N6,Bbr,C5e,xbr,kbr,Rbr,Ct,D6,Sbr,M5e,Pbr,$br,Kc,Ibr,E5e,jbr,Nbr,y5e,Dbr,qbr,Gbr,w5e,Obr,Xbr,q6,zbr,Bo,G6,Vbr,A5e,Wbr,Qbr,yn,Hbr,L5e,Ubr,Jbr,B5e,Ybr,Kbr,x5e,Zbr,evr,ovr,ve,KC,k5e,rvr,tvr,JO,avr,nvr,svr,ZC,R5e,lvr,ivr,YO,dvr,cvr,fvr,e4,S5e,mvr,gvr,KO,hvr,pvr,_vr,o4,P5e,uvr,bvr,ZO,vvr,Tvr,Fvr,r4,$5e,Cvr,Mvr,eX,Evr,yvr,wvr,t4,I5e,Avr,Lvr,oX,Bvr,xvr,kvr,a4,j5e,Rvr,Svr,rX,Pvr,$vr,Ivr,n4,N5e,jvr,Nvr,tX,Dvr,qvr,Gvr,s4,D5e,Ovr,Xvr,aX,zvr,Vvr,Wvr,q5e,Qvr,Hvr,O6,U8e,Zc,l4,G5e,X6,Uvr,O5e,Jvr,J8e,xr,z6,Yvr,ef,Kvr,X5e,Zvr,eTr,z5e,oTr,rTr,tTr,V6,aTr,V5e,nTr,sTr,lTr,Mt,W6,iTr,W5e,dTr,cTr,of,fTr,Q5e,mTr,gTr,H5e,hTr,pTr,_Tr,U5e,uTr,bTr,Q6,vTr,xo,H6,TTr,J5e,FTr,CTr,wn,MTr,Y5e,ETr,yTr,K5e,wTr,ATr,Z5e,LTr,BTr,xTr,Te,i4,e2e,kTr,RTr,nX,STr,PTr,$Tr,d4,o2e,ITr,jTr,sX,NTr,DTr,qTr,c4,r2e,GTr,OTr,lX,XTr,zTr,VTr,f4,t2e,WTr,QTr,iX,HTr,UTr,JTr,m4,a2e,YTr,KTr,dX,ZTr,eFr,oFr,g4,n2e,rFr,tFr,cX,aFr,nFr,sFr,h4,s2e,lFr,iFr,fX,dFr,cFr,fFr,p4,l2e,mFr,gFr,mX,hFr,pFr,_Fr,_4,i2e,uFr,bFr,gX,vFr,TFr,FFr,d2e,CFr,MFr,U6,Y8e,rf,u4,c2e,J6,EFr,f2e,yFr,K8e,kr,Y6,wFr,tf,AFr,m2e,LFr,BFr,g2e,xFr,kFr,RFr,K6,SFr,h2e,PFr,$Fr,IFr,Et,Z6,jFr,p2e,NFr,DFr,af,qFr,_2e,GFr,OFr,u2e,XFr,zFr,VFr,b2e,WFr,QFr,e0,HFr,ko,o0,UFr,v2e,JFr,YFr,An,KFr,T2e,ZFr,e9r,F2e,o9r,r9r,C2e,t9r,a9r,n9r,Fe,b4,M2e,s9r,l9r,hX,i9r,d9r,c9r,v4,E2e,f9r,m9r,pX,g9r,h9r,p9r,T4,y2e,_9r,u9r,_X,b9r,v9r,T9r,F4,w2e,F9r,C9r,uX,M9r,E9r,y9r,C4,A2e,w9r,A9r,bX,L9r,B9r,x9r,M4,L2e,k9r,R9r,vX,S9r,P9r,$9r,E4,B2e,I9r,j9r,TX,N9r,D9r,q9r,y4,x2e,G9r,O9r,FX,X9r,z9r,V9r,w4,k2e,W9r,Q9r,CX,H9r,U9r,J9r,R2e,Y9r,K9r,r0,Z8e,nf,A4,S2e,t0,Z9r,P2e,eCr,eBe,Rr,a0,oCr,sf,rCr,$2e,tCr,aCr,I2e,nCr,sCr,lCr,n0,iCr,j2e,dCr,cCr,fCr,yt,s0,mCr,N2e,gCr,hCr,lf,pCr,D2e,_Cr,uCr,q2e,bCr,vCr,TCr,G2e,FCr,CCr,l0,MCr,Ro,i0,ECr,O2e,yCr,wCr,Ln,ACr,X2e,LCr,BCr,z2e,xCr,kCr,V2e,RCr,SCr,PCr,Ce,L4,W2e,$Cr,ICr,MX,jCr,NCr,DCr,B4,Q2e,qCr,GCr,EX,OCr,XCr,zCr,x4,H2e,VCr,WCr,yX,QCr,HCr,UCr,k4,U2e,JCr,YCr,wX,KCr,ZCr,e4r,R4,J2e,o4r,r4r,AX,t4r,a4r,n4r,S4,Y2e,s4r,l4r,LX,i4r,d4r,c4r,P4,K2e,f4r,m4r,BX,g4r,h4r,p4r,$4,Z2e,_4r,u4r,xX,b4r,v4r,T4r,I4,e1e,F4r,C4r,kX,M4r,E4r,y4r,o1e,w4r,A4r,d0,oBe,df,j4,r1e,c0,L4r,t1e,B4r,rBe,Sr,f0,x4r,cf,k4r,a1e,R4r,S4r,n1e,P4r,$4r,I4r,m0,j4r,s1e,N4r,D4r,q4r,wt,g0,G4r,l1e,O4r,X4r,ff,z4r,i1e,V4r,W4r,d1e,Q4r,H4r,U4r,c1e,J4r,Y4r,h0,K4r,So,p0,Z4r,f1e,eMr,oMr,Bn,rMr,m1e,tMr,aMr,g1e,nMr,sMr,h1e,lMr,iMr,dMr,so,N4,p1e,cMr,fMr,RX,mMr,gMr,hMr,D4,_1e,pMr,_Mr,SX,uMr,bMr,vMr,q4,u1e,TMr,FMr,PX,CMr,MMr,EMr,G4,b1e,yMr,wMr,$X,AMr,LMr,BMr,O4,v1e,xMr,kMr,IX,RMr,SMr,PMr,X4,T1e,$Mr,IMr,jX,jMr,NMr,DMr,z4,F1e,qMr,GMr,NX,OMr,XMr,zMr,C1e,VMr,WMr,_0,tBe,mf,V4,M1e,u0,QMr,E1e,HMr,aBe,Pr,b0,UMr,gf,JMr,y1e,YMr,KMr,w1e,ZMr,eEr,oEr,v0,rEr,A1e,tEr,aEr,nEr,At,T0,sEr,L1e,lEr,iEr,hf,dEr,B1e,cEr,fEr,x1e,mEr,gEr,hEr,k1e,pEr,_Er,F0,uEr,Po,C0,bEr,R1e,vEr,TEr,xn,FEr,S1e,CEr,MEr,P1e,EEr,yEr,$1e,wEr,AEr,LEr,lo,W4,I1e,BEr,xEr,DX,kEr,REr,SEr,Q4,j1e,PEr,$Er,qX,IEr,jEr,NEr,H4,N1e,DEr,qEr,GX,GEr,OEr,XEr,U4,D1e,zEr,VEr,OX,WEr,QEr,HEr,J4,q1e,UEr,JEr,XX,YEr,KEr,ZEr,Y4,G1e,e3r,o3r,zX,r3r,t3r,a3r,K4,O1e,n3r,s3r,VX,l3r,i3r,d3r,X1e,c3r,f3r,M0,nBe,pf,Z4,z1e,E0,m3r,V1e,g3r,sBe,$r,y0,h3r,_f,p3r,W1e,_3r,u3r,Q1e,b3r,v3r,T3r,w0,F3r,H1e,C3r,M3r,E3r,Lt,A0,y3r,U1e,w3r,A3r,uf,L3r,J1e,B3r,x3r,Y1e,k3r,R3r,S3r,K1e,P3r,$3r,L0,I3r,$o,B0,j3r,Z1e,N3r,D3r,kn,q3r,ebe,G3r,O3r,obe,X3r,z3r,rbe,V3r,W3r,Q3r,tbe,eM,abe,H3r,U3r,WX,J3r,Y3r,K3r,nbe,Z3r,eyr,x0,lBe,bf,oM,sbe,k0,oyr,lbe,ryr,iBe,Ir,R0,tyr,vf,ayr,ibe,nyr,syr,dbe,lyr,iyr,dyr,S0,cyr,cbe,fyr,myr,gyr,Bt,P0,hyr,fbe,pyr,_yr,Tf,uyr,mbe,byr,vyr,gbe,Tyr,Fyr,Cyr,hbe,Myr,Eyr,$0,yyr,Io,I0,wyr,pbe,Ayr,Lyr,Rn,Byr,_be,xyr,kyr,ube,Ryr,Syr,bbe,Pyr,$yr,Iyr,j0,rM,vbe,jyr,Nyr,QX,Dyr,qyr,Gyr,tM,Tbe,Oyr,Xyr,HX,zyr,Vyr,Wyr,Fbe,Qyr,Hyr,N0,dBe,Ff,aM,Cbe,D0,Uyr,Mbe,Jyr,cBe,jr,q0,Yyr,Cf,Kyr,Ebe,Zyr,ewr,ybe,owr,rwr,twr,G0,awr,wbe,nwr,swr,lwr,xt,O0,iwr,Abe,dwr,cwr,Mf,fwr,Lbe,mwr,gwr,Bbe,hwr,pwr,_wr,xbe,uwr,bwr,X0,vwr,jo,z0,Twr,kbe,Fwr,Cwr,Sn,Mwr,Rbe,Ewr,ywr,Sbe,wwr,Awr,Pbe,Lwr,Bwr,xwr,$be,nM,Ibe,kwr,Rwr,UX,Swr,Pwr,$wr,jbe,Iwr,jwr,V0,fBe;return ce=new z({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),lE=new z({}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),xf=new Nwr({props:{warning:"&lcub;true}",$$slots:{default:[Q_t]},$$scope:{ctx:wi}}}),dE=new z({}),cE=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L515"}}),gE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L538",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),hE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),pE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/configuration_auto.py#L660",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),_E=new z({}),uE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L357"}}),TE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L371",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15529/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),FE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),CE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/tokenization_auto.py#L567",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),ME=new z({}),EE=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),AE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15529/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),ih=new Nwr({props:{$$slots:{default:[H_t]},$$scope:{ctx:wi}}}),LE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),BE=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),xE=new z({}),kE=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L71"}}),PE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),vh=new Nwr({props:{$$slots:{default:[U_t]},$$scope:{ctx:wi}}}),$E=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),IE=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),jE=new z({}),NE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L672"}}),qE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),OE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zE=new z({}),VE=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L679"}}),QE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),UE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YE=new z({}),KE=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L694"}}),e3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),r3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a3=new z({}),n3=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L701"}}),l3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),d3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f3=new z({}),m3=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L708"}}),h3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),_3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b3=new z({}),v3=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L717"}}),F3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),C3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),M3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y3=new z({}),w3=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L751"}}),L3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),B3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),x3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R3=new z({}),S3=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L758"}}),$3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),I3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),j3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new z({}),q3=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L744"}}),O3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),z3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W3=new z({}),Q3=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L726"}}),U3=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Y3=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new z({}),ey=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L733"}}),ry=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),ay=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new z({}),ly=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L767"}}),dy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),fy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new z({}),hy=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L797"}}),_y=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),by=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new z({}),Fy=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L804"}}),My=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),yy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new z({}),Ly=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L827"}}),xy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Ry=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new z({}),$y=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L811"}}),jy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Dy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new z({}),Oy=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L818"}}),zy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Wy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new z({}),Jy=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L836"}}),Ky=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),ew=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new z({}),tw=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L843"}}),nw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),lw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new z({}),cw=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L790"}}),mw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),hw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new z({}),uw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L774"}}),vw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Fw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new z({}),Ew=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_auto.py#L781"}}),ww=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Lw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new z({}),Rw=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),Pw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Iw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new z({}),Dw=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),Gw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Xw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new z({}),Ww=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),Hw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Jw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new z({}),Zw=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),oA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),tA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new z({}),lA=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),dA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),fA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new z({}),hA=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),_A=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),bA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new z({}),FA=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),MA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),yA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new z({}),LA=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),xA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),RA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PA=new z({}),$A=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),jA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),DA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new z({}),OA=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),zA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),WA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HA=new z({}),UA=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),YA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),ZA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new z({}),r6=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),a6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),s6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new z({}),d6=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),f6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),g6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new z({}),_6=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),b6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),T6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new z({}),M6=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),y6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),A6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new z({}),x6=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),R6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),P6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new z({}),j6=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),D6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),G6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new z({}),z6=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),W6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),H6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U6=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new z({}),Y6=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Z6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),e0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),o0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new z({}),a0=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),s0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),i0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new z({}),f0=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),g0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),p0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new z({}),b0=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),T0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),C0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new z({}),y0=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),A0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),B0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new z({}),R0=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),P0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),I0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new z({}),q0=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),O0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),z0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15529/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),ie=a("h1"),me=a("a"),to=a("span"),f(ce.$$.fragment),ue=l(),Do=a("span"),Ai=o("Auto Classes"),yf=l(),sa=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Bi=a("code"),tE=o("from_pretrained()"),wf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),xi=o("Instantiating one of "),Pn=a("a"),aE=o("AutoConfig"),$n=o(", "),In=a("a"),nE=o("AutoModel"),ki=o(`, and
`),jn=a("a"),sE=o("AutoTokenizer"),Ri=o(" will directly create a class of the relevant architecture. For instance"),Af=l(),f($a.$$.fragment),co=l(),ge=a("p"),XL=o("will create a model that is an instance of "),Si=a("a"),zL=o("BertModel"),VL=o("."),qo=l(),Ia=a("p"),WL=o("There is one class of "),Lf=a("code"),QL=o("AutoModel"),Cke=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),m7e=l(),Pi=a("h2"),Bf=a("a"),OV=a("span"),f(lE.$$.fragment),Mke=l(),XV=a("span"),Eke=o("Extending the Auto Classes"),g7e=l(),Nn=a("p"),yke=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zV=a("code"),wke=o("NewModel"),Ake=o(", make sure you have a "),VV=a("code"),Lke=o("NewModelConfig"),Bke=o(` then you can add those to the auto
classes like this:`),h7e=l(),f(iE.$$.fragment),p7e=l(),HL=a("p"),xke=o("You will then be able to use the auto classes like you would usually do!"),_7e=l(),f(xf.$$.fragment),u7e=l(),$i=a("h2"),kf=a("a"),WV=a("span"),f(dE.$$.fragment),kke=l(),QV=a("span"),Rke=o("AutoConfig"),b7e=l(),Go=a("div"),f(cE.$$.fragment),Ske=l(),fE=a("p"),Pke=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),UL=a("a"),$ke=o("from_pretrained()"),Ike=o(" class method."),jke=l(),mE=a("p"),Nke=o("This class cannot be instantiated directly using "),HV=a("code"),Dke=o("__init__()"),qke=o(" (throws an error)."),Gke=l(),fo=a("div"),f(gE.$$.fragment),Oke=l(),UV=a("p"),Xke=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),zke=l(),Ii=a("p"),Vke=o("The configuration class to instantiate is selected based on the "),JV=a("code"),Wke=o("model_type"),Qke=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),YV=a("code"),Hke=o("pretrained_model_name_or_path"),Uke=o(":"),Jke=l(),v=a("ul"),Rf=a("li"),KV=a("strong"),Yke=o("albert"),Kke=o(" \u2014 "),JL=a("a"),Zke=o("AlbertConfig"),eRe=o(" (ALBERT model)"),oRe=l(),Sf=a("li"),ZV=a("strong"),rRe=o("bart"),tRe=o(" \u2014 "),YL=a("a"),aRe=o("BartConfig"),nRe=o(" (BART model)"),sRe=l(),Pf=a("li"),eW=a("strong"),lRe=o("beit"),iRe=o(" \u2014 "),KL=a("a"),dRe=o("BeitConfig"),cRe=o(" (BEiT model)"),fRe=l(),$f=a("li"),oW=a("strong"),mRe=o("bert"),gRe=o(" \u2014 "),ZL=a("a"),hRe=o("BertConfig"),pRe=o(" (BERT model)"),_Re=l(),If=a("li"),rW=a("strong"),uRe=o("bert-generation"),bRe=o(" \u2014 "),e7=a("a"),vRe=o("BertGenerationConfig"),TRe=o(" (Bert Generation model)"),FRe=l(),jf=a("li"),tW=a("strong"),CRe=o("big_bird"),MRe=o(" \u2014 "),o7=a("a"),ERe=o("BigBirdConfig"),yRe=o(" (BigBird model)"),wRe=l(),Nf=a("li"),aW=a("strong"),ARe=o("bigbird_pegasus"),LRe=o(" \u2014 "),r7=a("a"),BRe=o("BigBirdPegasusConfig"),xRe=o(" (BigBirdPegasus model)"),kRe=l(),Df=a("li"),nW=a("strong"),RRe=o("blenderbot"),SRe=o(" \u2014 "),t7=a("a"),PRe=o("BlenderbotConfig"),$Re=o(" (Blenderbot model)"),IRe=l(),qf=a("li"),sW=a("strong"),jRe=o("blenderbot-small"),NRe=o(" \u2014 "),a7=a("a"),DRe=o("BlenderbotSmallConfig"),qRe=o(" (BlenderbotSmall model)"),GRe=l(),Gf=a("li"),lW=a("strong"),ORe=o("camembert"),XRe=o(" \u2014 "),n7=a("a"),zRe=o("CamembertConfig"),VRe=o(" (CamemBERT model)"),WRe=l(),Of=a("li"),iW=a("strong"),QRe=o("canine"),HRe=o(" \u2014 "),s7=a("a"),URe=o("CanineConfig"),JRe=o(" (Canine model)"),YRe=l(),Xf=a("li"),dW=a("strong"),KRe=o("clip"),ZRe=o(" \u2014 "),l7=a("a"),eSe=o("CLIPConfig"),oSe=o(" (CLIP model)"),rSe=l(),zf=a("li"),cW=a("strong"),tSe=o("convbert"),aSe=o(" \u2014 "),i7=a("a"),nSe=o("ConvBertConfig"),sSe=o(" (ConvBERT model)"),lSe=l(),Vf=a("li"),fW=a("strong"),iSe=o("convnext"),dSe=o(" \u2014 "),d7=a("a"),cSe=o("ConvNextConfig"),fSe=o(" (ConvNext model)"),mSe=l(),Wf=a("li"),mW=a("strong"),gSe=o("ctrl"),hSe=o(" \u2014 "),c7=a("a"),pSe=o("CTRLConfig"),_Se=o(" (CTRL model)"),uSe=l(),Qf=a("li"),gW=a("strong"),bSe=o("deberta"),vSe=o(" \u2014 "),f7=a("a"),TSe=o("DebertaConfig"),FSe=o(" (DeBERTa model)"),CSe=l(),Hf=a("li"),hW=a("strong"),MSe=o("deberta-v2"),ESe=o(" \u2014 "),m7=a("a"),ySe=o("DebertaV2Config"),wSe=o(" (DeBERTa-v2 model)"),ASe=l(),Uf=a("li"),pW=a("strong"),LSe=o("deit"),BSe=o(" \u2014 "),g7=a("a"),xSe=o("DeiTConfig"),kSe=o(" (DeiT model)"),RSe=l(),Jf=a("li"),_W=a("strong"),SSe=o("detr"),PSe=o(" \u2014 "),h7=a("a"),$Se=o("DetrConfig"),ISe=o(" (DETR model)"),jSe=l(),Yf=a("li"),uW=a("strong"),NSe=o("distilbert"),DSe=o(" \u2014 "),p7=a("a"),qSe=o("DistilBertConfig"),GSe=o(" (DistilBERT model)"),OSe=l(),Kf=a("li"),bW=a("strong"),XSe=o("dpr"),zSe=o(" \u2014 "),_7=a("a"),VSe=o("DPRConfig"),WSe=o(" (DPR model)"),QSe=l(),Zf=a("li"),vW=a("strong"),HSe=o("electra"),USe=o(" \u2014 "),u7=a("a"),JSe=o("ElectraConfig"),YSe=o(" (ELECTRA model)"),KSe=l(),em=a("li"),TW=a("strong"),ZSe=o("encoder-decoder"),ePe=o(" \u2014 "),b7=a("a"),oPe=o("EncoderDecoderConfig"),rPe=o(" (Encoder decoder model)"),tPe=l(),om=a("li"),FW=a("strong"),aPe=o("flaubert"),nPe=o(" \u2014 "),v7=a("a"),sPe=o("FlaubertConfig"),lPe=o(" (FlauBERT model)"),iPe=l(),rm=a("li"),CW=a("strong"),dPe=o("fnet"),cPe=o(" \u2014 "),T7=a("a"),fPe=o("FNetConfig"),mPe=o(" (FNet model)"),gPe=l(),tm=a("li"),MW=a("strong"),hPe=o("fsmt"),pPe=o(" \u2014 "),F7=a("a"),_Pe=o("FSMTConfig"),uPe=o(" (FairSeq Machine-Translation model)"),bPe=l(),am=a("li"),EW=a("strong"),vPe=o("funnel"),TPe=o(" \u2014 "),C7=a("a"),FPe=o("FunnelConfig"),CPe=o(" (Funnel Transformer model)"),MPe=l(),nm=a("li"),yW=a("strong"),EPe=o("gpt2"),yPe=o(" \u2014 "),M7=a("a"),wPe=o("GPT2Config"),APe=o(" (OpenAI GPT-2 model)"),LPe=l(),sm=a("li"),wW=a("strong"),BPe=o("gpt_neo"),xPe=o(" \u2014 "),E7=a("a"),kPe=o("GPTNeoConfig"),RPe=o(" (GPT Neo model)"),SPe=l(),lm=a("li"),AW=a("strong"),PPe=o("gptj"),$Pe=o(" \u2014 "),y7=a("a"),IPe=o("GPTJConfig"),jPe=o(" (GPT-J model)"),NPe=l(),im=a("li"),LW=a("strong"),DPe=o("hubert"),qPe=o(" \u2014 "),w7=a("a"),GPe=o("HubertConfig"),OPe=o(" (Hubert model)"),XPe=l(),dm=a("li"),BW=a("strong"),zPe=o("ibert"),VPe=o(" \u2014 "),A7=a("a"),WPe=o("IBertConfig"),QPe=o(" (I-BERT model)"),HPe=l(),cm=a("li"),xW=a("strong"),UPe=o("imagegpt"),JPe=o(" \u2014 "),L7=a("a"),YPe=o("ImageGPTConfig"),KPe=o(" (ImageGPT model)"),ZPe=l(),fm=a("li"),kW=a("strong"),e$e=o("layoutlm"),o$e=o(" \u2014 "),B7=a("a"),r$e=o("LayoutLMConfig"),t$e=o(" (LayoutLM model)"),a$e=l(),mm=a("li"),RW=a("strong"),n$e=o("layoutlmv2"),s$e=o(" \u2014 "),x7=a("a"),l$e=o("LayoutLMv2Config"),i$e=o(" (LayoutLMv2 model)"),d$e=l(),gm=a("li"),SW=a("strong"),c$e=o("led"),f$e=o(" \u2014 "),k7=a("a"),m$e=o("LEDConfig"),g$e=o(" (LED model)"),h$e=l(),hm=a("li"),PW=a("strong"),p$e=o("longformer"),_$e=o(" \u2014 "),R7=a("a"),u$e=o("LongformerConfig"),b$e=o(" (Longformer model)"),v$e=l(),pm=a("li"),$W=a("strong"),T$e=o("luke"),F$e=o(" \u2014 "),S7=a("a"),C$e=o("LukeConfig"),M$e=o(" (LUKE model)"),E$e=l(),_m=a("li"),IW=a("strong"),y$e=o("lxmert"),w$e=o(" \u2014 "),P7=a("a"),A$e=o("LxmertConfig"),L$e=o(" (LXMERT model)"),B$e=l(),um=a("li"),jW=a("strong"),x$e=o("m2m_100"),k$e=o(" \u2014 "),$7=a("a"),R$e=o("M2M100Config"),S$e=o(" (M2M100 model)"),P$e=l(),bm=a("li"),NW=a("strong"),$$e=o("marian"),I$e=o(" \u2014 "),I7=a("a"),j$e=o("MarianConfig"),N$e=o(" (Marian model)"),D$e=l(),vm=a("li"),DW=a("strong"),q$e=o("mbart"),G$e=o(" \u2014 "),j7=a("a"),O$e=o("MBartConfig"),X$e=o(" (mBART model)"),z$e=l(),Tm=a("li"),qW=a("strong"),V$e=o("megatron-bert"),W$e=o(" \u2014 "),N7=a("a"),Q$e=o("MegatronBertConfig"),H$e=o(" (MegatronBert model)"),U$e=l(),Fm=a("li"),GW=a("strong"),J$e=o("mobilebert"),Y$e=o(" \u2014 "),D7=a("a"),K$e=o("MobileBertConfig"),Z$e=o(" (MobileBERT model)"),eIe=l(),Cm=a("li"),OW=a("strong"),oIe=o("mpnet"),rIe=o(" \u2014 "),q7=a("a"),tIe=o("MPNetConfig"),aIe=o(" (MPNet model)"),nIe=l(),Mm=a("li"),XW=a("strong"),sIe=o("mt5"),lIe=o(" \u2014 "),G7=a("a"),iIe=o("MT5Config"),dIe=o(" (mT5 model)"),cIe=l(),Em=a("li"),zW=a("strong"),fIe=o("nystromformer"),mIe=o(" \u2014 "),O7=a("a"),gIe=o("NystromformerConfig"),hIe=o(" (Nystromformer model)"),pIe=l(),ym=a("li"),VW=a("strong"),_Ie=o("openai-gpt"),uIe=o(" \u2014 "),X7=a("a"),bIe=o("OpenAIGPTConfig"),vIe=o(" (OpenAI GPT model)"),TIe=l(),wm=a("li"),WW=a("strong"),FIe=o("pegasus"),CIe=o(" \u2014 "),z7=a("a"),MIe=o("PegasusConfig"),EIe=o(" (Pegasus model)"),yIe=l(),Am=a("li"),QW=a("strong"),wIe=o("perceiver"),AIe=o(" \u2014 "),V7=a("a"),LIe=o("PerceiverConfig"),BIe=o(" (Perceiver model)"),xIe=l(),Lm=a("li"),HW=a("strong"),kIe=o("plbart"),RIe=o(" \u2014 "),W7=a("a"),SIe=o("PLBartConfig"),PIe=o(" (PLBart model)"),$Ie=l(),Bm=a("li"),UW=a("strong"),IIe=o("poolformer"),jIe=o(" \u2014 "),Q7=a("a"),NIe=o("PoolFormerConfig"),DIe=o(" (PoolFormer model)"),qIe=l(),xm=a("li"),JW=a("strong"),GIe=o("prophetnet"),OIe=o(" \u2014 "),H7=a("a"),XIe=o("ProphetNetConfig"),zIe=o(" (ProphetNet model)"),VIe=l(),km=a("li"),YW=a("strong"),WIe=o("qdqbert"),QIe=o(" \u2014 "),U7=a("a"),HIe=o("QDQBertConfig"),UIe=o(" (QDQBert model)"),JIe=l(),Rm=a("li"),KW=a("strong"),YIe=o("rag"),KIe=o(" \u2014 "),J7=a("a"),ZIe=o("RagConfig"),eje=o(" (RAG model)"),oje=l(),Sm=a("li"),ZW=a("strong"),rje=o("realm"),tje=o(" \u2014 "),Y7=a("a"),aje=o("RealmConfig"),nje=o(" (Realm model)"),sje=l(),Pm=a("li"),eQ=a("strong"),lje=o("reformer"),ije=o(" \u2014 "),K7=a("a"),dje=o("ReformerConfig"),cje=o(" (Reformer model)"),fje=l(),$m=a("li"),oQ=a("strong"),mje=o("rembert"),gje=o(" \u2014 "),Z7=a("a"),hje=o("RemBertConfig"),pje=o(" (RemBERT model)"),_je=l(),Im=a("li"),rQ=a("strong"),uje=o("retribert"),bje=o(" \u2014 "),e8=a("a"),vje=o("RetriBertConfig"),Tje=o(" (RetriBERT model)"),Fje=l(),jm=a("li"),tQ=a("strong"),Cje=o("roberta"),Mje=o(" \u2014 "),o8=a("a"),Eje=o("RobertaConfig"),yje=o(" (RoBERTa model)"),wje=l(),Nm=a("li"),aQ=a("strong"),Aje=o("roformer"),Lje=o(" \u2014 "),r8=a("a"),Bje=o("RoFormerConfig"),xje=o(" (RoFormer model)"),kje=l(),Dm=a("li"),nQ=a("strong"),Rje=o("segformer"),Sje=o(" \u2014 "),t8=a("a"),Pje=o("SegformerConfig"),$je=o(" (SegFormer model)"),Ije=l(),qm=a("li"),sQ=a("strong"),jje=o("sew"),Nje=o(" \u2014 "),a8=a("a"),Dje=o("SEWConfig"),qje=o(" (SEW model)"),Gje=l(),Gm=a("li"),lQ=a("strong"),Oje=o("sew-d"),Xje=o(" \u2014 "),n8=a("a"),zje=o("SEWDConfig"),Vje=o(" (SEW-D model)"),Wje=l(),Om=a("li"),iQ=a("strong"),Qje=o("speech-encoder-decoder"),Hje=o(" \u2014 "),s8=a("a"),Uje=o("SpeechEncoderDecoderConfig"),Jje=o(" (Speech Encoder decoder model)"),Yje=l(),Xm=a("li"),dQ=a("strong"),Kje=o("speech_to_text"),Zje=o(" \u2014 "),l8=a("a"),eNe=o("Speech2TextConfig"),oNe=o(" (Speech2Text model)"),rNe=l(),zm=a("li"),cQ=a("strong"),tNe=o("speech_to_text_2"),aNe=o(" \u2014 "),i8=a("a"),nNe=o("Speech2Text2Config"),sNe=o(" (Speech2Text2 model)"),lNe=l(),Vm=a("li"),fQ=a("strong"),iNe=o("splinter"),dNe=o(" \u2014 "),d8=a("a"),cNe=o("SplinterConfig"),fNe=o(" (Splinter model)"),mNe=l(),Wm=a("li"),mQ=a("strong"),gNe=o("squeezebert"),hNe=o(" \u2014 "),c8=a("a"),pNe=o("SqueezeBertConfig"),_Ne=o(" (SqueezeBERT model)"),uNe=l(),Qm=a("li"),gQ=a("strong"),bNe=o("swin"),vNe=o(" \u2014 "),f8=a("a"),TNe=o("SwinConfig"),FNe=o(" (Swin model)"),CNe=l(),Hm=a("li"),hQ=a("strong"),MNe=o("t5"),ENe=o(" \u2014 "),m8=a("a"),yNe=o("T5Config"),wNe=o(" (T5 model)"),ANe=l(),Um=a("li"),pQ=a("strong"),LNe=o("tapas"),BNe=o(" \u2014 "),g8=a("a"),xNe=o("TapasConfig"),kNe=o(" (TAPAS model)"),RNe=l(),Jm=a("li"),_Q=a("strong"),SNe=o("transfo-xl"),PNe=o(" \u2014 "),h8=a("a"),$Ne=o("TransfoXLConfig"),INe=o(" (Transformer-XL model)"),jNe=l(),Ym=a("li"),uQ=a("strong"),NNe=o("trocr"),DNe=o(" \u2014 "),p8=a("a"),qNe=o("TrOCRConfig"),GNe=o(" (TrOCR model)"),ONe=l(),Km=a("li"),bQ=a("strong"),XNe=o("unispeech"),zNe=o(" \u2014 "),_8=a("a"),VNe=o("UniSpeechConfig"),WNe=o(" (UniSpeech model)"),QNe=l(),Zm=a("li"),vQ=a("strong"),HNe=o("unispeech-sat"),UNe=o(" \u2014 "),u8=a("a"),JNe=o("UniSpeechSatConfig"),YNe=o(" (UniSpeechSat model)"),KNe=l(),eg=a("li"),TQ=a("strong"),ZNe=o("vilt"),eDe=o(" \u2014 "),b8=a("a"),oDe=o("ViltConfig"),rDe=o(" (ViLT model)"),tDe=l(),og=a("li"),FQ=a("strong"),aDe=o("vision-encoder-decoder"),nDe=o(" \u2014 "),v8=a("a"),sDe=o("VisionEncoderDecoderConfig"),lDe=o(" (Vision Encoder decoder model)"),iDe=l(),rg=a("li"),CQ=a("strong"),dDe=o("vision-text-dual-encoder"),cDe=o(" \u2014 "),T8=a("a"),fDe=o("VisionTextDualEncoderConfig"),mDe=o(" (VisionTextDualEncoder model)"),gDe=l(),tg=a("li"),MQ=a("strong"),hDe=o("visual_bert"),pDe=o(" \u2014 "),F8=a("a"),_De=o("VisualBertConfig"),uDe=o(" (VisualBert model)"),bDe=l(),ag=a("li"),EQ=a("strong"),vDe=o("vit"),TDe=o(" \u2014 "),C8=a("a"),FDe=o("ViTConfig"),CDe=o(" (ViT model)"),MDe=l(),ng=a("li"),yQ=a("strong"),EDe=o("vit_mae"),yDe=o(" \u2014 "),M8=a("a"),wDe=o("ViTMAEConfig"),ADe=o(" (ViTMAE model)"),LDe=l(),sg=a("li"),wQ=a("strong"),BDe=o("wav2vec2"),xDe=o(" \u2014 "),E8=a("a"),kDe=o("Wav2Vec2Config"),RDe=o(" (Wav2Vec2 model)"),SDe=l(),lg=a("li"),AQ=a("strong"),PDe=o("wavlm"),$De=o(" \u2014 "),y8=a("a"),IDe=o("WavLMConfig"),jDe=o(" (WavLM model)"),NDe=l(),ig=a("li"),LQ=a("strong"),DDe=o("xglm"),qDe=o(" \u2014 "),w8=a("a"),GDe=o("XGLMConfig"),ODe=o(" (XGLM model)"),XDe=l(),dg=a("li"),BQ=a("strong"),zDe=o("xlm"),VDe=o(" \u2014 "),A8=a("a"),WDe=o("XLMConfig"),QDe=o(" (XLM model)"),HDe=l(),cg=a("li"),xQ=a("strong"),UDe=o("xlm-prophetnet"),JDe=o(" \u2014 "),L8=a("a"),YDe=o("XLMProphetNetConfig"),KDe=o(" (XLMProphetNet model)"),ZDe=l(),fg=a("li"),kQ=a("strong"),eqe=o("xlm-roberta"),oqe=o(" \u2014 "),B8=a("a"),rqe=o("XLMRobertaConfig"),tqe=o(" (XLM-RoBERTa model)"),aqe=l(),mg=a("li"),RQ=a("strong"),nqe=o("xlm-roberta-xl"),sqe=o(" \u2014 "),x8=a("a"),lqe=o("XLMRobertaXLConfig"),iqe=o(" (XLM-RoBERTa-XL model)"),dqe=l(),gg=a("li"),SQ=a("strong"),cqe=o("xlnet"),fqe=o(" \u2014 "),k8=a("a"),mqe=o("XLNetConfig"),gqe=o(" (XLNet model)"),hqe=l(),hg=a("li"),PQ=a("strong"),pqe=o("yoso"),_qe=o(" \u2014 "),R8=a("a"),uqe=o("YosoConfig"),bqe=o(" (YOSO model)"),vqe=l(),$Q=a("p"),Tqe=o("Examples:"),Fqe=l(),f(hE.$$.fragment),Cqe=l(),pg=a("div"),f(pE.$$.fragment),Mqe=l(),IQ=a("p"),Eqe=o("Register a new configuration for this class."),v7e=l(),ji=a("h2"),_g=a("a"),jQ=a("span"),f(_E.$$.fragment),yqe=l(),NQ=a("span"),wqe=o("AutoTokenizer"),T7e=l(),Oo=a("div"),f(uE.$$.fragment),Aqe=l(),bE=a("p"),Lqe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),S8=a("a"),Bqe=o("AutoTokenizer.from_pretrained()"),xqe=o(" class method."),kqe=l(),vE=a("p"),Rqe=o("This class cannot be instantiated directly using "),DQ=a("code"),Sqe=o("__init__()"),Pqe=o(" (throws an error)."),$qe=l(),mo=a("div"),f(TE.$$.fragment),Iqe=l(),qQ=a("p"),jqe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Nqe=l(),ja=a("p"),Dqe=o("The tokenizer class to instantiate is selected based on the "),GQ=a("code"),qqe=o("model_type"),Gqe=o(` property of the config object (either
passed as an argument or loaded from `),OQ=a("code"),Oqe=o("pretrained_model_name_or_path"),Xqe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XQ=a("code"),zqe=o("pretrained_model_name_or_path"),Vqe=o(":"),Wqe=l(),M=a("ul"),Dn=a("li"),zQ=a("strong"),Qqe=o("albert"),Hqe=o(" \u2014 "),P8=a("a"),Uqe=o("AlbertTokenizer"),Jqe=o(" or "),$8=a("a"),Yqe=o("AlbertTokenizerFast"),Kqe=o(" (ALBERT model)"),Zqe=l(),qn=a("li"),VQ=a("strong"),eGe=o("bart"),oGe=o(" \u2014 "),I8=a("a"),rGe=o("BartTokenizer"),tGe=o(" or "),j8=a("a"),aGe=o("BartTokenizerFast"),nGe=o(" (BART model)"),sGe=l(),Gn=a("li"),WQ=a("strong"),lGe=o("barthez"),iGe=o(" \u2014 "),N8=a("a"),dGe=o("BarthezTokenizer"),cGe=o(" or "),D8=a("a"),fGe=o("BarthezTokenizerFast"),mGe=o(" (BARThez model)"),gGe=l(),ug=a("li"),QQ=a("strong"),hGe=o("bartpho"),pGe=o(" \u2014 "),q8=a("a"),_Ge=o("BartphoTokenizer"),uGe=o(" (BARTpho model)"),bGe=l(),On=a("li"),HQ=a("strong"),vGe=o("bert"),TGe=o(" \u2014 "),G8=a("a"),FGe=o("BertTokenizer"),CGe=o(" or "),O8=a("a"),MGe=o("BertTokenizerFast"),EGe=o(" (BERT model)"),yGe=l(),bg=a("li"),UQ=a("strong"),wGe=o("bert-generation"),AGe=o(" \u2014 "),X8=a("a"),LGe=o("BertGenerationTokenizer"),BGe=o(" (Bert Generation model)"),xGe=l(),vg=a("li"),JQ=a("strong"),kGe=o("bert-japanese"),RGe=o(" \u2014 "),z8=a("a"),SGe=o("BertJapaneseTokenizer"),PGe=o(" (BertJapanese model)"),$Ge=l(),Tg=a("li"),YQ=a("strong"),IGe=o("bertweet"),jGe=o(" \u2014 "),V8=a("a"),NGe=o("BertweetTokenizer"),DGe=o(" (Bertweet model)"),qGe=l(),Xn=a("li"),KQ=a("strong"),GGe=o("big_bird"),OGe=o(" \u2014 "),W8=a("a"),XGe=o("BigBirdTokenizer"),zGe=o(" or "),Q8=a("a"),VGe=o("BigBirdTokenizerFast"),WGe=o(" (BigBird model)"),QGe=l(),zn=a("li"),ZQ=a("strong"),HGe=o("bigbird_pegasus"),UGe=o(" \u2014 "),H8=a("a"),JGe=o("PegasusTokenizer"),YGe=o(" or "),U8=a("a"),KGe=o("PegasusTokenizerFast"),ZGe=o(" (BigBirdPegasus model)"),eOe=l(),Vn=a("li"),eH=a("strong"),oOe=o("blenderbot"),rOe=o(" \u2014 "),J8=a("a"),tOe=o("BlenderbotTokenizer"),aOe=o(" or "),Y8=a("a"),nOe=o("BlenderbotTokenizerFast"),sOe=o(" (Blenderbot model)"),lOe=l(),Fg=a("li"),oH=a("strong"),iOe=o("blenderbot-small"),dOe=o(" \u2014 "),K8=a("a"),cOe=o("BlenderbotSmallTokenizer"),fOe=o(" (BlenderbotSmall model)"),mOe=l(),Cg=a("li"),rH=a("strong"),gOe=o("byt5"),hOe=o(" \u2014 "),Z8=a("a"),pOe=o("ByT5Tokenizer"),_Oe=o(" (ByT5 model)"),uOe=l(),Wn=a("li"),tH=a("strong"),bOe=o("camembert"),vOe=o(" \u2014 "),eB=a("a"),TOe=o("CamembertTokenizer"),FOe=o(" or "),oB=a("a"),COe=o("CamembertTokenizerFast"),MOe=o(" (CamemBERT model)"),EOe=l(),Mg=a("li"),aH=a("strong"),yOe=o("canine"),wOe=o(" \u2014 "),rB=a("a"),AOe=o("CanineTokenizer"),LOe=o(" (Canine model)"),BOe=l(),Qn=a("li"),nH=a("strong"),xOe=o("clip"),kOe=o(" \u2014 "),tB=a("a"),ROe=o("CLIPTokenizer"),SOe=o(" or "),aB=a("a"),POe=o("CLIPTokenizerFast"),$Oe=o(" (CLIP model)"),IOe=l(),Hn=a("li"),sH=a("strong"),jOe=o("convbert"),NOe=o(" \u2014 "),nB=a("a"),DOe=o("ConvBertTokenizer"),qOe=o(" or "),sB=a("a"),GOe=o("ConvBertTokenizerFast"),OOe=o(" (ConvBERT model)"),XOe=l(),Un=a("li"),lH=a("strong"),zOe=o("cpm"),VOe=o(" \u2014 "),lB=a("a"),WOe=o("CpmTokenizer"),QOe=o(" or "),iH=a("code"),HOe=o("CpmTokenizerFast"),UOe=o(" (CPM model)"),JOe=l(),Eg=a("li"),dH=a("strong"),YOe=o("ctrl"),KOe=o(" \u2014 "),iB=a("a"),ZOe=o("CTRLTokenizer"),eXe=o(" (CTRL model)"),oXe=l(),Jn=a("li"),cH=a("strong"),rXe=o("deberta"),tXe=o(" \u2014 "),dB=a("a"),aXe=o("DebertaTokenizer"),nXe=o(" or "),cB=a("a"),sXe=o("DebertaTokenizerFast"),lXe=o(" (DeBERTa model)"),iXe=l(),Yn=a("li"),fH=a("strong"),dXe=o("deberta-v2"),cXe=o(" \u2014 "),fB=a("a"),fXe=o("DebertaV2Tokenizer"),mXe=o(" or "),mB=a("a"),gXe=o("DebertaV2TokenizerFast"),hXe=o(" (DeBERTa-v2 model)"),pXe=l(),Kn=a("li"),mH=a("strong"),_Xe=o("distilbert"),uXe=o(" \u2014 "),gB=a("a"),bXe=o("DistilBertTokenizer"),vXe=o(" or "),hB=a("a"),TXe=o("DistilBertTokenizerFast"),FXe=o(" (DistilBERT model)"),CXe=l(),Zn=a("li"),gH=a("strong"),MXe=o("dpr"),EXe=o(" \u2014 "),pB=a("a"),yXe=o("DPRQuestionEncoderTokenizer"),wXe=o(" or "),_B=a("a"),AXe=o("DPRQuestionEncoderTokenizerFast"),LXe=o(" (DPR model)"),BXe=l(),es=a("li"),hH=a("strong"),xXe=o("electra"),kXe=o(" \u2014 "),uB=a("a"),RXe=o("ElectraTokenizer"),SXe=o(" or "),bB=a("a"),PXe=o("ElectraTokenizerFast"),$Xe=o(" (ELECTRA model)"),IXe=l(),yg=a("li"),pH=a("strong"),jXe=o("flaubert"),NXe=o(" \u2014 "),vB=a("a"),DXe=o("FlaubertTokenizer"),qXe=o(" (FlauBERT model)"),GXe=l(),os=a("li"),_H=a("strong"),OXe=o("fnet"),XXe=o(" \u2014 "),TB=a("a"),zXe=o("FNetTokenizer"),VXe=o(" or "),FB=a("a"),WXe=o("FNetTokenizerFast"),QXe=o(" (FNet model)"),HXe=l(),wg=a("li"),uH=a("strong"),UXe=o("fsmt"),JXe=o(" \u2014 "),CB=a("a"),YXe=o("FSMTTokenizer"),KXe=o(" (FairSeq Machine-Translation model)"),ZXe=l(),rs=a("li"),bH=a("strong"),eze=o("funnel"),oze=o(" \u2014 "),MB=a("a"),rze=o("FunnelTokenizer"),tze=o(" or "),EB=a("a"),aze=o("FunnelTokenizerFast"),nze=o(" (Funnel Transformer model)"),sze=l(),ts=a("li"),vH=a("strong"),lze=o("gpt2"),ize=o(" \u2014 "),yB=a("a"),dze=o("GPT2Tokenizer"),cze=o(" or "),wB=a("a"),fze=o("GPT2TokenizerFast"),mze=o(" (OpenAI GPT-2 model)"),gze=l(),as=a("li"),TH=a("strong"),hze=o("gpt_neo"),pze=o(" \u2014 "),AB=a("a"),_ze=o("GPT2Tokenizer"),uze=o(" or "),LB=a("a"),bze=o("GPT2TokenizerFast"),vze=o(" (GPT Neo model)"),Tze=l(),ns=a("li"),FH=a("strong"),Fze=o("herbert"),Cze=o(" \u2014 "),BB=a("a"),Mze=o("HerbertTokenizer"),Eze=o(" or "),xB=a("a"),yze=o("HerbertTokenizerFast"),wze=o(" (HerBERT model)"),Aze=l(),Ag=a("li"),CH=a("strong"),Lze=o("hubert"),Bze=o(" \u2014 "),kB=a("a"),xze=o("Wav2Vec2CTCTokenizer"),kze=o(" (Hubert model)"),Rze=l(),ss=a("li"),MH=a("strong"),Sze=o("ibert"),Pze=o(" \u2014 "),RB=a("a"),$ze=o("RobertaTokenizer"),Ize=o(" or "),SB=a("a"),jze=o("RobertaTokenizerFast"),Nze=o(" (I-BERT model)"),Dze=l(),ls=a("li"),EH=a("strong"),qze=o("layoutlm"),Gze=o(" \u2014 "),PB=a("a"),Oze=o("LayoutLMTokenizer"),Xze=o(" or "),$B=a("a"),zze=o("LayoutLMTokenizerFast"),Vze=o(" (LayoutLM model)"),Wze=l(),is=a("li"),yH=a("strong"),Qze=o("layoutlmv2"),Hze=o(" \u2014 "),IB=a("a"),Uze=o("LayoutLMv2Tokenizer"),Jze=o(" or "),jB=a("a"),Yze=o("LayoutLMv2TokenizerFast"),Kze=o(" (LayoutLMv2 model)"),Zze=l(),ds=a("li"),wH=a("strong"),eVe=o("layoutxlm"),oVe=o(" \u2014 "),NB=a("a"),rVe=o("LayoutXLMTokenizer"),tVe=o(" or "),DB=a("a"),aVe=o("LayoutXLMTokenizerFast"),nVe=o(" (LayoutXLM model)"),sVe=l(),cs=a("li"),AH=a("strong"),lVe=o("led"),iVe=o(" \u2014 "),qB=a("a"),dVe=o("LEDTokenizer"),cVe=o(" or "),GB=a("a"),fVe=o("LEDTokenizerFast"),mVe=o(" (LED model)"),gVe=l(),fs=a("li"),LH=a("strong"),hVe=o("longformer"),pVe=o(" \u2014 "),OB=a("a"),_Ve=o("LongformerTokenizer"),uVe=o(" or "),XB=a("a"),bVe=o("LongformerTokenizerFast"),vVe=o(" (Longformer model)"),TVe=l(),Lg=a("li"),BH=a("strong"),FVe=o("luke"),CVe=o(" \u2014 "),zB=a("a"),MVe=o("LukeTokenizer"),EVe=o(" (LUKE model)"),yVe=l(),ms=a("li"),xH=a("strong"),wVe=o("lxmert"),AVe=o(" \u2014 "),VB=a("a"),LVe=o("LxmertTokenizer"),BVe=o(" or "),WB=a("a"),xVe=o("LxmertTokenizerFast"),kVe=o(" (LXMERT model)"),RVe=l(),Bg=a("li"),kH=a("strong"),SVe=o("m2m_100"),PVe=o(" \u2014 "),QB=a("a"),$Ve=o("M2M100Tokenizer"),IVe=o(" (M2M100 model)"),jVe=l(),xg=a("li"),RH=a("strong"),NVe=o("marian"),DVe=o(" \u2014 "),HB=a("a"),qVe=o("MarianTokenizer"),GVe=o(" (Marian model)"),OVe=l(),gs=a("li"),SH=a("strong"),XVe=o("mbart"),zVe=o(" \u2014 "),UB=a("a"),VVe=o("MBartTokenizer"),WVe=o(" or "),JB=a("a"),QVe=o("MBartTokenizerFast"),HVe=o(" (mBART model)"),UVe=l(),hs=a("li"),PH=a("strong"),JVe=o("mbart50"),YVe=o(" \u2014 "),YB=a("a"),KVe=o("MBart50Tokenizer"),ZVe=o(" or "),KB=a("a"),eWe=o("MBart50TokenizerFast"),oWe=o(" (mBART-50 model)"),rWe=l(),kg=a("li"),$H=a("strong"),tWe=o("mluke"),aWe=o(" \u2014 "),ZB=a("a"),nWe=o("MLukeTokenizer"),sWe=o(" (mLUKE model)"),lWe=l(),ps=a("li"),IH=a("strong"),iWe=o("mobilebert"),dWe=o(" \u2014 "),ex=a("a"),cWe=o("MobileBertTokenizer"),fWe=o(" or "),ox=a("a"),mWe=o("MobileBertTokenizerFast"),gWe=o(" (MobileBERT model)"),hWe=l(),_s=a("li"),jH=a("strong"),pWe=o("mpnet"),_We=o(" \u2014 "),rx=a("a"),uWe=o("MPNetTokenizer"),bWe=o(" or "),tx=a("a"),vWe=o("MPNetTokenizerFast"),TWe=o(" (MPNet model)"),FWe=l(),us=a("li"),NH=a("strong"),CWe=o("mt5"),MWe=o(" \u2014 "),ax=a("a"),EWe=o("MT5Tokenizer"),yWe=o(" or "),nx=a("a"),wWe=o("MT5TokenizerFast"),AWe=o(" (mT5 model)"),LWe=l(),bs=a("li"),DH=a("strong"),BWe=o("openai-gpt"),xWe=o(" \u2014 "),sx=a("a"),kWe=o("OpenAIGPTTokenizer"),RWe=o(" or "),lx=a("a"),SWe=o("OpenAIGPTTokenizerFast"),PWe=o(" (OpenAI GPT model)"),$We=l(),vs=a("li"),qH=a("strong"),IWe=o("pegasus"),jWe=o(" \u2014 "),ix=a("a"),NWe=o("PegasusTokenizer"),DWe=o(" or "),dx=a("a"),qWe=o("PegasusTokenizerFast"),GWe=o(" (Pegasus model)"),OWe=l(),Rg=a("li"),GH=a("strong"),XWe=o("perceiver"),zWe=o(" \u2014 "),cx=a("a"),VWe=o("PerceiverTokenizer"),WWe=o(" (Perceiver model)"),QWe=l(),Sg=a("li"),OH=a("strong"),HWe=o("phobert"),UWe=o(" \u2014 "),fx=a("a"),JWe=o("PhobertTokenizer"),YWe=o(" (PhoBERT model)"),KWe=l(),Pg=a("li"),XH=a("strong"),ZWe=o("plbart"),eQe=o(" \u2014 "),mx=a("a"),oQe=o("PLBartTokenizer"),rQe=o(" (PLBart model)"),tQe=l(),$g=a("li"),zH=a("strong"),aQe=o("prophetnet"),nQe=o(" \u2014 "),gx=a("a"),sQe=o("ProphetNetTokenizer"),lQe=o(" (ProphetNet model)"),iQe=l(),Ts=a("li"),VH=a("strong"),dQe=o("qdqbert"),cQe=o(" \u2014 "),hx=a("a"),fQe=o("BertTokenizer"),mQe=o(" or "),px=a("a"),gQe=o("BertTokenizerFast"),hQe=o(" (QDQBert model)"),pQe=l(),Ig=a("li"),WH=a("strong"),_Qe=o("rag"),uQe=o(" \u2014 "),_x=a("a"),bQe=o("RagTokenizer"),vQe=o(" (RAG model)"),TQe=l(),Fs=a("li"),QH=a("strong"),FQe=o("reformer"),CQe=o(" \u2014 "),ux=a("a"),MQe=o("ReformerTokenizer"),EQe=o(" or "),bx=a("a"),yQe=o("ReformerTokenizerFast"),wQe=o(" (Reformer model)"),AQe=l(),Cs=a("li"),HH=a("strong"),LQe=o("rembert"),BQe=o(" \u2014 "),vx=a("a"),xQe=o("RemBertTokenizer"),kQe=o(" or "),Tx=a("a"),RQe=o("RemBertTokenizerFast"),SQe=o(" (RemBERT model)"),PQe=l(),Ms=a("li"),UH=a("strong"),$Qe=o("retribert"),IQe=o(" \u2014 "),Fx=a("a"),jQe=o("RetriBertTokenizer"),NQe=o(" or "),Cx=a("a"),DQe=o("RetriBertTokenizerFast"),qQe=o(" (RetriBERT model)"),GQe=l(),Es=a("li"),JH=a("strong"),OQe=o("roberta"),XQe=o(" \u2014 "),Mx=a("a"),zQe=o("RobertaTokenizer"),VQe=o(" or "),Ex=a("a"),WQe=o("RobertaTokenizerFast"),QQe=o(" (RoBERTa model)"),HQe=l(),ys=a("li"),YH=a("strong"),UQe=o("roformer"),JQe=o(" \u2014 "),yx=a("a"),YQe=o("RoFormerTokenizer"),KQe=o(" or "),wx=a("a"),ZQe=o("RoFormerTokenizerFast"),eHe=o(" (RoFormer model)"),oHe=l(),jg=a("li"),KH=a("strong"),rHe=o("speech_to_text"),tHe=o(" \u2014 "),Ax=a("a"),aHe=o("Speech2TextTokenizer"),nHe=o(" (Speech2Text model)"),sHe=l(),Ng=a("li"),ZH=a("strong"),lHe=o("speech_to_text_2"),iHe=o(" \u2014 "),Lx=a("a"),dHe=o("Speech2Text2Tokenizer"),cHe=o(" (Speech2Text2 model)"),fHe=l(),ws=a("li"),eU=a("strong"),mHe=o("splinter"),gHe=o(" \u2014 "),Bx=a("a"),hHe=o("SplinterTokenizer"),pHe=o(" or "),xx=a("a"),_He=o("SplinterTokenizerFast"),uHe=o(" (Splinter model)"),bHe=l(),As=a("li"),oU=a("strong"),vHe=o("squeezebert"),THe=o(" \u2014 "),kx=a("a"),FHe=o("SqueezeBertTokenizer"),CHe=o(" or "),Rx=a("a"),MHe=o("SqueezeBertTokenizerFast"),EHe=o(" (SqueezeBERT model)"),yHe=l(),Ls=a("li"),rU=a("strong"),wHe=o("t5"),AHe=o(" \u2014 "),Sx=a("a"),LHe=o("T5Tokenizer"),BHe=o(" or "),Px=a("a"),xHe=o("T5TokenizerFast"),kHe=o(" (T5 model)"),RHe=l(),Dg=a("li"),tU=a("strong"),SHe=o("tapas"),PHe=o(" \u2014 "),$x=a("a"),$He=o("TapasTokenizer"),IHe=o(" (TAPAS model)"),jHe=l(),qg=a("li"),aU=a("strong"),NHe=o("transfo-xl"),DHe=o(" \u2014 "),Ix=a("a"),qHe=o("TransfoXLTokenizer"),GHe=o(" (Transformer-XL model)"),OHe=l(),Gg=a("li"),nU=a("strong"),XHe=o("wav2vec2"),zHe=o(" \u2014 "),jx=a("a"),VHe=o("Wav2Vec2CTCTokenizer"),WHe=o(" (Wav2Vec2 model)"),QHe=l(),Og=a("li"),sU=a("strong"),HHe=o("wav2vec2_phoneme"),UHe=o(" \u2014 "),Nx=a("a"),JHe=o("Wav2Vec2PhonemeCTCTokenizer"),YHe=o(" (Wav2Vec2Phoneme model)"),KHe=l(),Bs=a("li"),lU=a("strong"),ZHe=o("xglm"),eUe=o(" \u2014 "),Dx=a("a"),oUe=o("XGLMTokenizer"),rUe=o(" or "),qx=a("a"),tUe=o("XGLMTokenizerFast"),aUe=o(" (XGLM model)"),nUe=l(),Xg=a("li"),iU=a("strong"),sUe=o("xlm"),lUe=o(" \u2014 "),Gx=a("a"),iUe=o("XLMTokenizer"),dUe=o(" (XLM model)"),cUe=l(),zg=a("li"),dU=a("strong"),fUe=o("xlm-prophetnet"),mUe=o(" \u2014 "),Ox=a("a"),gUe=o("XLMProphetNetTokenizer"),hUe=o(" (XLMProphetNet model)"),pUe=l(),xs=a("li"),cU=a("strong"),_Ue=o("xlm-roberta"),uUe=o(" \u2014 "),Xx=a("a"),bUe=o("XLMRobertaTokenizer"),vUe=o(" or "),zx=a("a"),TUe=o("XLMRobertaTokenizerFast"),FUe=o(" (XLM-RoBERTa model)"),CUe=l(),ks=a("li"),fU=a("strong"),MUe=o("xlnet"),EUe=o(" \u2014 "),Vx=a("a"),yUe=o("XLNetTokenizer"),wUe=o(" or "),Wx=a("a"),AUe=o("XLNetTokenizerFast"),LUe=o(" (XLNet model)"),BUe=l(),mU=a("p"),xUe=o("Examples:"),kUe=l(),f(FE.$$.fragment),RUe=l(),Vg=a("div"),f(CE.$$.fragment),SUe=l(),gU=a("p"),PUe=o("Register a new tokenizer in this mapping."),F7e=l(),Ni=a("h2"),Wg=a("a"),hU=a("span"),f(ME.$$.fragment),$Ue=l(),pU=a("span"),IUe=o("AutoFeatureExtractor"),C7e=l(),Xo=a("div"),f(EE.$$.fragment),jUe=l(),yE=a("p"),NUe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Qx=a("a"),DUe=o("AutoFeatureExtractor.from_pretrained()"),qUe=o(" class method."),GUe=l(),wE=a("p"),OUe=o("This class cannot be instantiated directly using "),_U=a("code"),XUe=o("__init__()"),zUe=o(" (throws an error)."),VUe=l(),Le=a("div"),f(AE.$$.fragment),WUe=l(),uU=a("p"),QUe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HUe=l(),Na=a("p"),UUe=o("The feature extractor class to instantiate is selected based on the "),bU=a("code"),JUe=o("model_type"),YUe=o(` property of the config object
(either passed as an argument or loaded from `),vU=a("code"),KUe=o("pretrained_model_name_or_path"),ZUe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),TU=a("code"),eJe=o("pretrained_model_name_or_path"),oJe=o(":"),rJe=l(),se=a("ul"),Qg=a("li"),FU=a("strong"),tJe=o("beit"),aJe=o(" \u2014 "),Hx=a("a"),nJe=o("BeitFeatureExtractor"),sJe=o(" (BEiT model)"),lJe=l(),Hg=a("li"),CU=a("strong"),iJe=o("clip"),dJe=o(" \u2014 "),Ux=a("a"),cJe=o("CLIPFeatureExtractor"),fJe=o(" (CLIP model)"),mJe=l(),Ug=a("li"),MU=a("strong"),gJe=o("convnext"),hJe=o(" \u2014 "),Jx=a("a"),pJe=o("ConvNextFeatureExtractor"),_Je=o(" (ConvNext model)"),uJe=l(),Jg=a("li"),EU=a("strong"),bJe=o("deit"),vJe=o(" \u2014 "),Yx=a("a"),TJe=o("DeiTFeatureExtractor"),FJe=o(" (DeiT model)"),CJe=l(),Yg=a("li"),yU=a("strong"),MJe=o("detr"),EJe=o(" \u2014 "),Kx=a("a"),yJe=o("DetrFeatureExtractor"),wJe=o(" (DETR model)"),AJe=l(),Kg=a("li"),wU=a("strong"),LJe=o("hubert"),BJe=o(" \u2014 "),Zx=a("a"),xJe=o("Wav2Vec2FeatureExtractor"),kJe=o(" (Hubert model)"),RJe=l(),Zg=a("li"),AU=a("strong"),SJe=o("layoutlmv2"),PJe=o(" \u2014 "),ek=a("a"),$Je=o("LayoutLMv2FeatureExtractor"),IJe=o(" (LayoutLMv2 model)"),jJe=l(),eh=a("li"),LU=a("strong"),NJe=o("perceiver"),DJe=o(" \u2014 "),ok=a("a"),qJe=o("PerceiverFeatureExtractor"),GJe=o(" (Perceiver model)"),OJe=l(),oh=a("li"),BU=a("strong"),XJe=o("poolformer"),zJe=o(" \u2014 "),rk=a("a"),VJe=o("PoolFormerFeatureExtractor"),WJe=o(" (PoolFormer model)"),QJe=l(),rh=a("li"),xU=a("strong"),HJe=o("segformer"),UJe=o(" \u2014 "),tk=a("a"),JJe=o("SegformerFeatureExtractor"),YJe=o(" (SegFormer model)"),KJe=l(),th=a("li"),kU=a("strong"),ZJe=o("speech_to_text"),eYe=o(" \u2014 "),ak=a("a"),oYe=o("Speech2TextFeatureExtractor"),rYe=o(" (Speech2Text model)"),tYe=l(),ah=a("li"),RU=a("strong"),aYe=o("swin"),nYe=o(" \u2014 "),nk=a("a"),sYe=o("ViTFeatureExtractor"),lYe=o(" (Swin model)"),iYe=l(),nh=a("li"),SU=a("strong"),dYe=o("vit"),cYe=o(" \u2014 "),sk=a("a"),fYe=o("ViTFeatureExtractor"),mYe=o(" (ViT model)"),gYe=l(),sh=a("li"),PU=a("strong"),hYe=o("vit_mae"),pYe=o(" \u2014 "),lk=a("a"),_Ye=o("ViTFeatureExtractor"),uYe=o(" (ViTMAE model)"),bYe=l(),lh=a("li"),$U=a("strong"),vYe=o("wav2vec2"),TYe=o(" \u2014 "),ik=a("a"),FYe=o("Wav2Vec2FeatureExtractor"),CYe=o(" (Wav2Vec2 model)"),MYe=l(),f(ih.$$.fragment),EYe=l(),IU=a("p"),yYe=o("Examples:"),wYe=l(),f(LE.$$.fragment),AYe=l(),dh=a("div"),f(BE.$$.fragment),LYe=l(),jU=a("p"),BYe=o("Register a new feature extractor for this class."),M7e=l(),Di=a("h2"),ch=a("a"),NU=a("span"),f(xE.$$.fragment),xYe=l(),DU=a("span"),kYe=o("AutoProcessor"),E7e=l(),zo=a("div"),f(kE.$$.fragment),RYe=l(),RE=a("p"),SYe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dk=a("a"),PYe=o("AutoProcessor.from_pretrained()"),$Ye=o(" class method."),IYe=l(),SE=a("p"),jYe=o("This class cannot be instantiated directly using "),qU=a("code"),NYe=o("__init__()"),DYe=o(" (throws an error)."),qYe=l(),Be=a("div"),f(PE.$$.fragment),GYe=l(),GU=a("p"),OYe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XYe=l(),qi=a("p"),zYe=o("The processor class to instantiate is selected based on the "),OU=a("code"),VYe=o("model_type"),WYe=o(` property of the config object (either
passed as an argument or loaded from `),XU=a("code"),QYe=o("pretrained_model_name_or_path"),HYe=o(" if possible):"),UYe=l(),we=a("ul"),fh=a("li"),zU=a("strong"),JYe=o("clip"),YYe=o(" \u2014 "),ck=a("a"),KYe=o("CLIPProcessor"),ZYe=o(" (CLIP model)"),eKe=l(),mh=a("li"),VU=a("strong"),oKe=o("layoutlmv2"),rKe=o(" \u2014 "),fk=a("a"),tKe=o("LayoutLMv2Processor"),aKe=o(" (LayoutLMv2 model)"),nKe=l(),gh=a("li"),WU=a("strong"),sKe=o("layoutxlm"),lKe=o(" \u2014 "),mk=a("a"),iKe=o("LayoutXLMProcessor"),dKe=o(" (LayoutXLM model)"),cKe=l(),hh=a("li"),QU=a("strong"),fKe=o("speech_to_text"),mKe=o(" \u2014 "),gk=a("a"),gKe=o("Speech2TextProcessor"),hKe=o(" (Speech2Text model)"),pKe=l(),ph=a("li"),HU=a("strong"),_Ke=o("speech_to_text_2"),uKe=o(" \u2014 "),hk=a("a"),bKe=o("Speech2Text2Processor"),vKe=o(" (Speech2Text2 model)"),TKe=l(),_h=a("li"),UU=a("strong"),FKe=o("trocr"),CKe=o(" \u2014 "),pk=a("a"),MKe=o("TrOCRProcessor"),EKe=o(" (TrOCR model)"),yKe=l(),uh=a("li"),JU=a("strong"),wKe=o("vision-text-dual-encoder"),AKe=o(" \u2014 "),_k=a("a"),LKe=o("VisionTextDualEncoderProcessor"),BKe=o(" (VisionTextDualEncoder model)"),xKe=l(),bh=a("li"),YU=a("strong"),kKe=o("wav2vec2"),RKe=o(" \u2014 "),uk=a("a"),SKe=o("Wav2Vec2Processor"),PKe=o(" (Wav2Vec2 model)"),$Ke=l(),f(vh.$$.fragment),IKe=l(),KU=a("p"),jKe=o("Examples:"),NKe=l(),f($E.$$.fragment),DKe=l(),Th=a("div"),f(IE.$$.fragment),qKe=l(),ZU=a("p"),GKe=o("Register a new processor for this class."),y7e=l(),Gi=a("h2"),Fh=a("a"),eJ=a("span"),f(jE.$$.fragment),OKe=l(),oJ=a("span"),XKe=o("AutoModel"),w7e=l(),Vo=a("div"),f(NE.$$.fragment),zKe=l(),Oi=a("p"),VKe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rJ=a("code"),WKe=o("from_pretrained()"),QKe=o("class method or the "),tJ=a("code"),HKe=o("from_config()"),UKe=o(`class
method.`),JKe=l(),DE=a("p"),YKe=o("This class cannot be instantiated directly using "),aJ=a("code"),KKe=o("__init__()"),ZKe=o(" (throws an error)."),eZe=l(),Nr=a("div"),f(qE.$$.fragment),oZe=l(),nJ=a("p"),rZe=o("Instantiates one of the base model classes of the library from a configuration."),tZe=l(),Xi=a("p"),aZe=o(`Note:
Loading a model from its configuration file does `),sJ=a("strong"),nZe=o("not"),sZe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("code"),lZe=o("from_pretrained()"),iZe=o("to load the model weights."),dZe=l(),iJ=a("p"),cZe=o("Examples:"),fZe=l(),f(GE.$$.fragment),mZe=l(),xe=a("div"),f(OE.$$.fragment),gZe=l(),dJ=a("p"),hZe=o("Instantiate one of the base model classes of the library from a pretrained model."),pZe=l(),Da=a("p"),_Ze=o("The model class to instantiate is selected based on the "),cJ=a("code"),uZe=o("model_type"),bZe=o(` property of the config object (either
passed as an argument or loaded from `),fJ=a("code"),vZe=o("pretrained_model_name_or_path"),TZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mJ=a("code"),FZe=o("pretrained_model_name_or_path"),CZe=o(":"),MZe=l(),F=a("ul"),Ch=a("li"),gJ=a("strong"),EZe=o("albert"),yZe=o(" \u2014 "),bk=a("a"),wZe=o("AlbertModel"),AZe=o(" (ALBERT model)"),LZe=l(),Mh=a("li"),hJ=a("strong"),BZe=o("bart"),xZe=o(" \u2014 "),vk=a("a"),kZe=o("BartModel"),RZe=o(" (BART model)"),SZe=l(),Eh=a("li"),pJ=a("strong"),PZe=o("beit"),$Ze=o(" \u2014 "),Tk=a("a"),IZe=o("BeitModel"),jZe=o(" (BEiT model)"),NZe=l(),yh=a("li"),_J=a("strong"),DZe=o("bert"),qZe=o(" \u2014 "),Fk=a("a"),GZe=o("BertModel"),OZe=o(" (BERT model)"),XZe=l(),wh=a("li"),uJ=a("strong"),zZe=o("bert-generation"),VZe=o(" \u2014 "),Ck=a("a"),WZe=o("BertGenerationEncoder"),QZe=o(" (Bert Generation model)"),HZe=l(),Ah=a("li"),bJ=a("strong"),UZe=o("big_bird"),JZe=o(" \u2014 "),Mk=a("a"),YZe=o("BigBirdModel"),KZe=o(" (BigBird model)"),ZZe=l(),Lh=a("li"),vJ=a("strong"),eeo=o("bigbird_pegasus"),oeo=o(" \u2014 "),Ek=a("a"),reo=o("BigBirdPegasusModel"),teo=o(" (BigBirdPegasus model)"),aeo=l(),Bh=a("li"),TJ=a("strong"),neo=o("blenderbot"),seo=o(" \u2014 "),yk=a("a"),leo=o("BlenderbotModel"),ieo=o(" (Blenderbot model)"),deo=l(),xh=a("li"),FJ=a("strong"),ceo=o("blenderbot-small"),feo=o(" \u2014 "),wk=a("a"),meo=o("BlenderbotSmallModel"),geo=o(" (BlenderbotSmall model)"),heo=l(),kh=a("li"),CJ=a("strong"),peo=o("camembert"),_eo=o(" \u2014 "),Ak=a("a"),ueo=o("CamembertModel"),beo=o(" (CamemBERT model)"),veo=l(),Rh=a("li"),MJ=a("strong"),Teo=o("canine"),Feo=o(" \u2014 "),Lk=a("a"),Ceo=o("CanineModel"),Meo=o(" (Canine model)"),Eeo=l(),Sh=a("li"),EJ=a("strong"),yeo=o("clip"),weo=o(" \u2014 "),Bk=a("a"),Aeo=o("CLIPModel"),Leo=o(" (CLIP model)"),Beo=l(),Ph=a("li"),yJ=a("strong"),xeo=o("convbert"),keo=o(" \u2014 "),xk=a("a"),Reo=o("ConvBertModel"),Seo=o(" (ConvBERT model)"),Peo=l(),$h=a("li"),wJ=a("strong"),$eo=o("convnext"),Ieo=o(" \u2014 "),kk=a("a"),jeo=o("ConvNextModel"),Neo=o(" (ConvNext model)"),Deo=l(),Ih=a("li"),AJ=a("strong"),qeo=o("ctrl"),Geo=o(" \u2014 "),Rk=a("a"),Oeo=o("CTRLModel"),Xeo=o(" (CTRL model)"),zeo=l(),jh=a("li"),LJ=a("strong"),Veo=o("deberta"),Weo=o(" \u2014 "),Sk=a("a"),Qeo=o("DebertaModel"),Heo=o(" (DeBERTa model)"),Ueo=l(),Nh=a("li"),BJ=a("strong"),Jeo=o("deberta-v2"),Yeo=o(" \u2014 "),Pk=a("a"),Keo=o("DebertaV2Model"),Zeo=o(" (DeBERTa-v2 model)"),eoo=l(),Dh=a("li"),xJ=a("strong"),ooo=o("deit"),roo=o(" \u2014 "),$k=a("a"),too=o("DeiTModel"),aoo=o(" (DeiT model)"),noo=l(),qh=a("li"),kJ=a("strong"),soo=o("detr"),loo=o(" \u2014 "),Ik=a("a"),ioo=o("DetrModel"),doo=o(" (DETR model)"),coo=l(),Gh=a("li"),RJ=a("strong"),foo=o("distilbert"),moo=o(" \u2014 "),jk=a("a"),goo=o("DistilBertModel"),hoo=o(" (DistilBERT model)"),poo=l(),Oh=a("li"),SJ=a("strong"),_oo=o("dpr"),uoo=o(" \u2014 "),Nk=a("a"),boo=o("DPRQuestionEncoder"),voo=o(" (DPR model)"),Too=l(),Xh=a("li"),PJ=a("strong"),Foo=o("electra"),Coo=o(" \u2014 "),Dk=a("a"),Moo=o("ElectraModel"),Eoo=o(" (ELECTRA model)"),yoo=l(),zh=a("li"),$J=a("strong"),woo=o("flaubert"),Aoo=o(" \u2014 "),qk=a("a"),Loo=o("FlaubertModel"),Boo=o(" (FlauBERT model)"),xoo=l(),Vh=a("li"),IJ=a("strong"),koo=o("fnet"),Roo=o(" \u2014 "),Gk=a("a"),Soo=o("FNetModel"),Poo=o(" (FNet model)"),$oo=l(),Wh=a("li"),jJ=a("strong"),Ioo=o("fsmt"),joo=o(" \u2014 "),Ok=a("a"),Noo=o("FSMTModel"),Doo=o(" (FairSeq Machine-Translation model)"),qoo=l(),Rs=a("li"),NJ=a("strong"),Goo=o("funnel"),Ooo=o(" \u2014 "),Xk=a("a"),Xoo=o("FunnelModel"),zoo=o(" or "),zk=a("a"),Voo=o("FunnelBaseModel"),Woo=o(" (Funnel Transformer model)"),Qoo=l(),Qh=a("li"),DJ=a("strong"),Hoo=o("gpt2"),Uoo=o(" \u2014 "),Vk=a("a"),Joo=o("GPT2Model"),Yoo=o(" (OpenAI GPT-2 model)"),Koo=l(),Hh=a("li"),qJ=a("strong"),Zoo=o("gpt_neo"),ero=o(" \u2014 "),Wk=a("a"),oro=o("GPTNeoModel"),rro=o(" (GPT Neo model)"),tro=l(),Uh=a("li"),GJ=a("strong"),aro=o("gptj"),nro=o(" \u2014 "),Qk=a("a"),sro=o("GPTJModel"),lro=o(" (GPT-J model)"),iro=l(),Jh=a("li"),OJ=a("strong"),dro=o("hubert"),cro=o(" \u2014 "),Hk=a("a"),fro=o("HubertModel"),mro=o(" (Hubert model)"),gro=l(),Yh=a("li"),XJ=a("strong"),hro=o("ibert"),pro=o(" \u2014 "),Uk=a("a"),_ro=o("IBertModel"),uro=o(" (I-BERT model)"),bro=l(),Kh=a("li"),zJ=a("strong"),vro=o("imagegpt"),Tro=o(" \u2014 "),Jk=a("a"),Fro=o("ImageGPTModel"),Cro=o(" (ImageGPT model)"),Mro=l(),Zh=a("li"),VJ=a("strong"),Ero=o("layoutlm"),yro=o(" \u2014 "),Yk=a("a"),wro=o("LayoutLMModel"),Aro=o(" (LayoutLM model)"),Lro=l(),ep=a("li"),WJ=a("strong"),Bro=o("layoutlmv2"),xro=o(" \u2014 "),Kk=a("a"),kro=o("LayoutLMv2Model"),Rro=o(" (LayoutLMv2 model)"),Sro=l(),op=a("li"),QJ=a("strong"),Pro=o("led"),$ro=o(" \u2014 "),Zk=a("a"),Iro=o("LEDModel"),jro=o(" (LED model)"),Nro=l(),rp=a("li"),HJ=a("strong"),Dro=o("longformer"),qro=o(" \u2014 "),eR=a("a"),Gro=o("LongformerModel"),Oro=o(" (Longformer model)"),Xro=l(),tp=a("li"),UJ=a("strong"),zro=o("luke"),Vro=o(" \u2014 "),oR=a("a"),Wro=o("LukeModel"),Qro=o(" (LUKE model)"),Hro=l(),ap=a("li"),JJ=a("strong"),Uro=o("lxmert"),Jro=o(" \u2014 "),rR=a("a"),Yro=o("LxmertModel"),Kro=o(" (LXMERT model)"),Zro=l(),np=a("li"),YJ=a("strong"),eto=o("m2m_100"),oto=o(" \u2014 "),tR=a("a"),rto=o("M2M100Model"),tto=o(" (M2M100 model)"),ato=l(),sp=a("li"),KJ=a("strong"),nto=o("marian"),sto=o(" \u2014 "),aR=a("a"),lto=o("MarianModel"),ito=o(" (Marian model)"),dto=l(),lp=a("li"),ZJ=a("strong"),cto=o("mbart"),fto=o(" \u2014 "),nR=a("a"),mto=o("MBartModel"),gto=o(" (mBART model)"),hto=l(),ip=a("li"),eY=a("strong"),pto=o("megatron-bert"),_to=o(" \u2014 "),sR=a("a"),uto=o("MegatronBertModel"),bto=o(" (MegatronBert model)"),vto=l(),dp=a("li"),oY=a("strong"),Tto=o("mobilebert"),Fto=o(" \u2014 "),lR=a("a"),Cto=o("MobileBertModel"),Mto=o(" (MobileBERT model)"),Eto=l(),cp=a("li"),rY=a("strong"),yto=o("mpnet"),wto=o(" \u2014 "),iR=a("a"),Ato=o("MPNetModel"),Lto=o(" (MPNet model)"),Bto=l(),fp=a("li"),tY=a("strong"),xto=o("mt5"),kto=o(" \u2014 "),dR=a("a"),Rto=o("MT5Model"),Sto=o(" (mT5 model)"),Pto=l(),mp=a("li"),aY=a("strong"),$to=o("nystromformer"),Ito=o(" \u2014 "),cR=a("a"),jto=o("NystromformerModel"),Nto=o(" (Nystromformer model)"),Dto=l(),gp=a("li"),nY=a("strong"),qto=o("openai-gpt"),Gto=o(" \u2014 "),fR=a("a"),Oto=o("OpenAIGPTModel"),Xto=o(" (OpenAI GPT model)"),zto=l(),hp=a("li"),sY=a("strong"),Vto=o("pegasus"),Wto=o(" \u2014 "),mR=a("a"),Qto=o("PegasusModel"),Hto=o(" (Pegasus model)"),Uto=l(),pp=a("li"),lY=a("strong"),Jto=o("perceiver"),Yto=o(" \u2014 "),gR=a("a"),Kto=o("PerceiverModel"),Zto=o(" (Perceiver model)"),eao=l(),_p=a("li"),iY=a("strong"),oao=o("plbart"),rao=o(" \u2014 "),hR=a("a"),tao=o("PLBartModel"),aao=o(" (PLBart model)"),nao=l(),up=a("li"),dY=a("strong"),sao=o("poolformer"),lao=o(" \u2014 "),pR=a("a"),iao=o("PoolFormerModel"),dao=o(" (PoolFormer model)"),cao=l(),bp=a("li"),cY=a("strong"),fao=o("prophetnet"),mao=o(" \u2014 "),_R=a("a"),gao=o("ProphetNetModel"),hao=o(" (ProphetNet model)"),pao=l(),vp=a("li"),fY=a("strong"),_ao=o("qdqbert"),uao=o(" \u2014 "),uR=a("a"),bao=o("QDQBertModel"),vao=o(" (QDQBert model)"),Tao=l(),Tp=a("li"),mY=a("strong"),Fao=o("reformer"),Cao=o(" \u2014 "),bR=a("a"),Mao=o("ReformerModel"),Eao=o(" (Reformer model)"),yao=l(),Fp=a("li"),gY=a("strong"),wao=o("rembert"),Aao=o(" \u2014 "),vR=a("a"),Lao=o("RemBertModel"),Bao=o(" (RemBERT model)"),xao=l(),Cp=a("li"),hY=a("strong"),kao=o("retribert"),Rao=o(" \u2014 "),TR=a("a"),Sao=o("RetriBertModel"),Pao=o(" (RetriBERT model)"),$ao=l(),Mp=a("li"),pY=a("strong"),Iao=o("roberta"),jao=o(" \u2014 "),FR=a("a"),Nao=o("RobertaModel"),Dao=o(" (RoBERTa model)"),qao=l(),Ep=a("li"),_Y=a("strong"),Gao=o("roformer"),Oao=o(" \u2014 "),CR=a("a"),Xao=o("RoFormerModel"),zao=o(" (RoFormer model)"),Vao=l(),yp=a("li"),uY=a("strong"),Wao=o("segformer"),Qao=o(" \u2014 "),MR=a("a"),Hao=o("SegformerModel"),Uao=o(" (SegFormer model)"),Jao=l(),wp=a("li"),bY=a("strong"),Yao=o("sew"),Kao=o(" \u2014 "),ER=a("a"),Zao=o("SEWModel"),eno=o(" (SEW model)"),ono=l(),Ap=a("li"),vY=a("strong"),rno=o("sew-d"),tno=o(" \u2014 "),yR=a("a"),ano=o("SEWDModel"),nno=o(" (SEW-D model)"),sno=l(),Lp=a("li"),TY=a("strong"),lno=o("speech_to_text"),ino=o(" \u2014 "),wR=a("a"),dno=o("Speech2TextModel"),cno=o(" (Speech2Text model)"),fno=l(),Bp=a("li"),FY=a("strong"),mno=o("splinter"),gno=o(" \u2014 "),AR=a("a"),hno=o("SplinterModel"),pno=o(" (Splinter model)"),_no=l(),xp=a("li"),CY=a("strong"),uno=o("squeezebert"),bno=o(" \u2014 "),LR=a("a"),vno=o("SqueezeBertModel"),Tno=o(" (SqueezeBERT model)"),Fno=l(),kp=a("li"),MY=a("strong"),Cno=o("swin"),Mno=o(" \u2014 "),BR=a("a"),Eno=o("SwinModel"),yno=o(" (Swin model)"),wno=l(),Rp=a("li"),EY=a("strong"),Ano=o("t5"),Lno=o(" \u2014 "),xR=a("a"),Bno=o("T5Model"),xno=o(" (T5 model)"),kno=l(),Sp=a("li"),yY=a("strong"),Rno=o("tapas"),Sno=o(" \u2014 "),kR=a("a"),Pno=o("TapasModel"),$no=o(" (TAPAS model)"),Ino=l(),Pp=a("li"),wY=a("strong"),jno=o("transfo-xl"),Nno=o(" \u2014 "),RR=a("a"),Dno=o("TransfoXLModel"),qno=o(" (Transformer-XL model)"),Gno=l(),$p=a("li"),AY=a("strong"),Ono=o("unispeech"),Xno=o(" \u2014 "),SR=a("a"),zno=o("UniSpeechModel"),Vno=o(" (UniSpeech model)"),Wno=l(),Ip=a("li"),LY=a("strong"),Qno=o("unispeech-sat"),Hno=o(" \u2014 "),PR=a("a"),Uno=o("UniSpeechSatModel"),Jno=o(" (UniSpeechSat model)"),Yno=l(),jp=a("li"),BY=a("strong"),Kno=o("vilt"),Zno=o(" \u2014 "),$R=a("a"),eso=o("ViltModel"),oso=o(" (ViLT model)"),rso=l(),Np=a("li"),xY=a("strong"),tso=o("vision-text-dual-encoder"),aso=o(" \u2014 "),IR=a("a"),nso=o("VisionTextDualEncoderModel"),sso=o(" (VisionTextDualEncoder model)"),lso=l(),Dp=a("li"),kY=a("strong"),iso=o("visual_bert"),dso=o(" \u2014 "),jR=a("a"),cso=o("VisualBertModel"),fso=o(" (VisualBert model)"),mso=l(),qp=a("li"),RY=a("strong"),gso=o("vit"),hso=o(" \u2014 "),NR=a("a"),pso=o("ViTModel"),_so=o(" (ViT model)"),uso=l(),Gp=a("li"),SY=a("strong"),bso=o("vit_mae"),vso=o(" \u2014 "),DR=a("a"),Tso=o("ViTMAEModel"),Fso=o(" (ViTMAE model)"),Cso=l(),Op=a("li"),PY=a("strong"),Mso=o("wav2vec2"),Eso=o(" \u2014 "),qR=a("a"),yso=o("Wav2Vec2Model"),wso=o(" (Wav2Vec2 model)"),Aso=l(),Xp=a("li"),$Y=a("strong"),Lso=o("wavlm"),Bso=o(" \u2014 "),GR=a("a"),xso=o("WavLMModel"),kso=o(" (WavLM model)"),Rso=l(),zp=a("li"),IY=a("strong"),Sso=o("xglm"),Pso=o(" \u2014 "),OR=a("a"),$so=o("XGLMModel"),Iso=o(" (XGLM model)"),jso=l(),Vp=a("li"),jY=a("strong"),Nso=o("xlm"),Dso=o(" \u2014 "),XR=a("a"),qso=o("XLMModel"),Gso=o(" (XLM model)"),Oso=l(),Wp=a("li"),NY=a("strong"),Xso=o("xlm-prophetnet"),zso=o(" \u2014 "),zR=a("a"),Vso=o("XLMProphetNetModel"),Wso=o(" (XLMProphetNet model)"),Qso=l(),Qp=a("li"),DY=a("strong"),Hso=o("xlm-roberta"),Uso=o(" \u2014 "),VR=a("a"),Jso=o("XLMRobertaModel"),Yso=o(" (XLM-RoBERTa model)"),Kso=l(),Hp=a("li"),qY=a("strong"),Zso=o("xlm-roberta-xl"),elo=o(" \u2014 "),WR=a("a"),olo=o("XLMRobertaXLModel"),rlo=o(" (XLM-RoBERTa-XL model)"),tlo=l(),Up=a("li"),GY=a("strong"),alo=o("xlnet"),nlo=o(" \u2014 "),QR=a("a"),slo=o("XLNetModel"),llo=o(" (XLNet model)"),ilo=l(),Jp=a("li"),OY=a("strong"),dlo=o("yoso"),clo=o(" \u2014 "),HR=a("a"),flo=o("YosoModel"),mlo=o(" (YOSO model)"),glo=l(),Yp=a("p"),hlo=o("The model is set in evaluation mode by default using "),XY=a("code"),plo=o("model.eval()"),_lo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zY=a("code"),ulo=o("model.train()"),blo=l(),VY=a("p"),vlo=o("Examples:"),Tlo=l(),f(XE.$$.fragment),A7e=l(),zi=a("h2"),Kp=a("a"),WY=a("span"),f(zE.$$.fragment),Flo=l(),QY=a("span"),Clo=o("AutoModelForPreTraining"),L7e=l(),Wo=a("div"),f(VE.$$.fragment),Mlo=l(),Vi=a("p"),Elo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),HY=a("code"),ylo=o("from_pretrained()"),wlo=o("class method or the "),UY=a("code"),Alo=o("from_config()"),Llo=o(`class
method.`),Blo=l(),WE=a("p"),xlo=o("This class cannot be instantiated directly using "),JY=a("code"),klo=o("__init__()"),Rlo=o(" (throws an error)."),Slo=l(),Dr=a("div"),f(QE.$$.fragment),Plo=l(),YY=a("p"),$lo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ilo=l(),Wi=a("p"),jlo=o(`Note:
Loading a model from its configuration file does `),KY=a("strong"),Nlo=o("not"),Dlo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("code"),qlo=o("from_pretrained()"),Glo=o("to load the model weights."),Olo=l(),eK=a("p"),Xlo=o("Examples:"),zlo=l(),f(HE.$$.fragment),Vlo=l(),ke=a("div"),f(UE.$$.fragment),Wlo=l(),oK=a("p"),Qlo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hlo=l(),qa=a("p"),Ulo=o("The model class to instantiate is selected based on the "),rK=a("code"),Jlo=o("model_type"),Ylo=o(` property of the config object (either
passed as an argument or loaded from `),tK=a("code"),Klo=o("pretrained_model_name_or_path"),Zlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aK=a("code"),eio=o("pretrained_model_name_or_path"),oio=o(":"),rio=l(),k=a("ul"),Zp=a("li"),nK=a("strong"),tio=o("albert"),aio=o(" \u2014 "),UR=a("a"),nio=o("AlbertForPreTraining"),sio=o(" (ALBERT model)"),lio=l(),e_=a("li"),sK=a("strong"),iio=o("bart"),dio=o(" \u2014 "),JR=a("a"),cio=o("BartForConditionalGeneration"),fio=o(" (BART model)"),mio=l(),o_=a("li"),lK=a("strong"),gio=o("bert"),hio=o(" \u2014 "),YR=a("a"),pio=o("BertForPreTraining"),_io=o(" (BERT model)"),uio=l(),r_=a("li"),iK=a("strong"),bio=o("big_bird"),vio=o(" \u2014 "),KR=a("a"),Tio=o("BigBirdForPreTraining"),Fio=o(" (BigBird model)"),Cio=l(),t_=a("li"),dK=a("strong"),Mio=o("camembert"),Eio=o(" \u2014 "),ZR=a("a"),yio=o("CamembertForMaskedLM"),wio=o(" (CamemBERT model)"),Aio=l(),a_=a("li"),cK=a("strong"),Lio=o("ctrl"),Bio=o(" \u2014 "),eS=a("a"),xio=o("CTRLLMHeadModel"),kio=o(" (CTRL model)"),Rio=l(),n_=a("li"),fK=a("strong"),Sio=o("deberta"),Pio=o(" \u2014 "),oS=a("a"),$io=o("DebertaForMaskedLM"),Iio=o(" (DeBERTa model)"),jio=l(),s_=a("li"),mK=a("strong"),Nio=o("deberta-v2"),Dio=o(" \u2014 "),rS=a("a"),qio=o("DebertaV2ForMaskedLM"),Gio=o(" (DeBERTa-v2 model)"),Oio=l(),l_=a("li"),gK=a("strong"),Xio=o("distilbert"),zio=o(" \u2014 "),tS=a("a"),Vio=o("DistilBertForMaskedLM"),Wio=o(" (DistilBERT model)"),Qio=l(),i_=a("li"),hK=a("strong"),Hio=o("electra"),Uio=o(" \u2014 "),aS=a("a"),Jio=o("ElectraForPreTraining"),Yio=o(" (ELECTRA model)"),Kio=l(),d_=a("li"),pK=a("strong"),Zio=o("flaubert"),edo=o(" \u2014 "),nS=a("a"),odo=o("FlaubertWithLMHeadModel"),rdo=o(" (FlauBERT model)"),tdo=l(),c_=a("li"),_K=a("strong"),ado=o("fnet"),ndo=o(" \u2014 "),sS=a("a"),sdo=o("FNetForPreTraining"),ldo=o(" (FNet model)"),ido=l(),f_=a("li"),uK=a("strong"),ddo=o("fsmt"),cdo=o(" \u2014 "),lS=a("a"),fdo=o("FSMTForConditionalGeneration"),mdo=o(" (FairSeq Machine-Translation model)"),gdo=l(),m_=a("li"),bK=a("strong"),hdo=o("funnel"),pdo=o(" \u2014 "),iS=a("a"),_do=o("FunnelForPreTraining"),udo=o(" (Funnel Transformer model)"),bdo=l(),g_=a("li"),vK=a("strong"),vdo=o("gpt2"),Tdo=o(" \u2014 "),dS=a("a"),Fdo=o("GPT2LMHeadModel"),Cdo=o(" (OpenAI GPT-2 model)"),Mdo=l(),h_=a("li"),TK=a("strong"),Edo=o("ibert"),ydo=o(" \u2014 "),cS=a("a"),wdo=o("IBertForMaskedLM"),Ado=o(" (I-BERT model)"),Ldo=l(),p_=a("li"),FK=a("strong"),Bdo=o("layoutlm"),xdo=o(" \u2014 "),fS=a("a"),kdo=o("LayoutLMForMaskedLM"),Rdo=o(" (LayoutLM model)"),Sdo=l(),__=a("li"),CK=a("strong"),Pdo=o("longformer"),$do=o(" \u2014 "),mS=a("a"),Ido=o("LongformerForMaskedLM"),jdo=o(" (Longformer model)"),Ndo=l(),u_=a("li"),MK=a("strong"),Ddo=o("lxmert"),qdo=o(" \u2014 "),gS=a("a"),Gdo=o("LxmertForPreTraining"),Odo=o(" (LXMERT model)"),Xdo=l(),b_=a("li"),EK=a("strong"),zdo=o("megatron-bert"),Vdo=o(" \u2014 "),hS=a("a"),Wdo=o("MegatronBertForPreTraining"),Qdo=o(" (MegatronBert model)"),Hdo=l(),v_=a("li"),yK=a("strong"),Udo=o("mobilebert"),Jdo=o(" \u2014 "),pS=a("a"),Ydo=o("MobileBertForPreTraining"),Kdo=o(" (MobileBERT model)"),Zdo=l(),T_=a("li"),wK=a("strong"),eco=o("mpnet"),oco=o(" \u2014 "),_S=a("a"),rco=o("MPNetForMaskedLM"),tco=o(" (MPNet model)"),aco=l(),F_=a("li"),AK=a("strong"),nco=o("openai-gpt"),sco=o(" \u2014 "),uS=a("a"),lco=o("OpenAIGPTLMHeadModel"),ico=o(" (OpenAI GPT model)"),dco=l(),C_=a("li"),LK=a("strong"),cco=o("retribert"),fco=o(" \u2014 "),bS=a("a"),mco=o("RetriBertModel"),gco=o(" (RetriBERT model)"),hco=l(),M_=a("li"),BK=a("strong"),pco=o("roberta"),_co=o(" \u2014 "),vS=a("a"),uco=o("RobertaForMaskedLM"),bco=o(" (RoBERTa model)"),vco=l(),E_=a("li"),xK=a("strong"),Tco=o("squeezebert"),Fco=o(" \u2014 "),TS=a("a"),Cco=o("SqueezeBertForMaskedLM"),Mco=o(" (SqueezeBERT model)"),Eco=l(),y_=a("li"),kK=a("strong"),yco=o("t5"),wco=o(" \u2014 "),FS=a("a"),Aco=o("T5ForConditionalGeneration"),Lco=o(" (T5 model)"),Bco=l(),w_=a("li"),RK=a("strong"),xco=o("tapas"),kco=o(" \u2014 "),CS=a("a"),Rco=o("TapasForMaskedLM"),Sco=o(" (TAPAS model)"),Pco=l(),A_=a("li"),SK=a("strong"),$co=o("transfo-xl"),Ico=o(" \u2014 "),MS=a("a"),jco=o("TransfoXLLMHeadModel"),Nco=o(" (Transformer-XL model)"),Dco=l(),L_=a("li"),PK=a("strong"),qco=o("unispeech"),Gco=o(" \u2014 "),ES=a("a"),Oco=o("UniSpeechForPreTraining"),Xco=o(" (UniSpeech model)"),zco=l(),B_=a("li"),$K=a("strong"),Vco=o("unispeech-sat"),Wco=o(" \u2014 "),yS=a("a"),Qco=o("UniSpeechSatForPreTraining"),Hco=o(" (UniSpeechSat model)"),Uco=l(),x_=a("li"),IK=a("strong"),Jco=o("visual_bert"),Yco=o(" \u2014 "),wS=a("a"),Kco=o("VisualBertForPreTraining"),Zco=o(" (VisualBert model)"),efo=l(),k_=a("li"),jK=a("strong"),ofo=o("vit_mae"),rfo=o(" \u2014 "),AS=a("a"),tfo=o("ViTMAEForPreTraining"),afo=o(" (ViTMAE model)"),nfo=l(),R_=a("li"),NK=a("strong"),sfo=o("wav2vec2"),lfo=o(" \u2014 "),LS=a("a"),ifo=o("Wav2Vec2ForPreTraining"),dfo=o(" (Wav2Vec2 model)"),cfo=l(),S_=a("li"),DK=a("strong"),ffo=o("xlm"),mfo=o(" \u2014 "),BS=a("a"),gfo=o("XLMWithLMHeadModel"),hfo=o(" (XLM model)"),pfo=l(),P_=a("li"),qK=a("strong"),_fo=o("xlm-roberta"),ufo=o(" \u2014 "),xS=a("a"),bfo=o("XLMRobertaForMaskedLM"),vfo=o(" (XLM-RoBERTa model)"),Tfo=l(),$_=a("li"),GK=a("strong"),Ffo=o("xlm-roberta-xl"),Cfo=o(" \u2014 "),kS=a("a"),Mfo=o("XLMRobertaXLForMaskedLM"),Efo=o(" (XLM-RoBERTa-XL model)"),yfo=l(),I_=a("li"),OK=a("strong"),wfo=o("xlnet"),Afo=o(" \u2014 "),RS=a("a"),Lfo=o("XLNetLMHeadModel"),Bfo=o(" (XLNet model)"),xfo=l(),j_=a("p"),kfo=o("The model is set in evaluation mode by default using "),XK=a("code"),Rfo=o("model.eval()"),Sfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zK=a("code"),Pfo=o("model.train()"),$fo=l(),VK=a("p"),Ifo=o("Examples:"),jfo=l(),f(JE.$$.fragment),B7e=l(),Qi=a("h2"),N_=a("a"),WK=a("span"),f(YE.$$.fragment),Nfo=l(),QK=a("span"),Dfo=o("AutoModelForCausalLM"),x7e=l(),Qo=a("div"),f(KE.$$.fragment),qfo=l(),Hi=a("p"),Gfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HK=a("code"),Ofo=o("from_pretrained()"),Xfo=o("class method or the "),UK=a("code"),zfo=o("from_config()"),Vfo=o(`class
method.`),Wfo=l(),ZE=a("p"),Qfo=o("This class cannot be instantiated directly using "),JK=a("code"),Hfo=o("__init__()"),Ufo=o(" (throws an error)."),Jfo=l(),qr=a("div"),f(e3.$$.fragment),Yfo=l(),YK=a("p"),Kfo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zfo=l(),Ui=a("p"),emo=o(`Note:
Loading a model from its configuration file does `),KK=a("strong"),omo=o("not"),rmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("code"),tmo=o("from_pretrained()"),amo=o("to load the model weights."),nmo=l(),eZ=a("p"),smo=o("Examples:"),lmo=l(),f(o3.$$.fragment),imo=l(),Re=a("div"),f(r3.$$.fragment),dmo=l(),oZ=a("p"),cmo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fmo=l(),Ga=a("p"),mmo=o("The model class to instantiate is selected based on the "),rZ=a("code"),gmo=o("model_type"),hmo=o(` property of the config object (either
passed as an argument or loaded from `),tZ=a("code"),pmo=o("pretrained_model_name_or_path"),_mo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aZ=a("code"),umo=o("pretrained_model_name_or_path"),bmo=o(":"),vmo=l(),$=a("ul"),D_=a("li"),nZ=a("strong"),Tmo=o("bart"),Fmo=o(" \u2014 "),SS=a("a"),Cmo=o("BartForCausalLM"),Mmo=o(" (BART model)"),Emo=l(),q_=a("li"),sZ=a("strong"),ymo=o("bert"),wmo=o(" \u2014 "),PS=a("a"),Amo=o("BertLMHeadModel"),Lmo=o(" (BERT model)"),Bmo=l(),G_=a("li"),lZ=a("strong"),xmo=o("bert-generation"),kmo=o(" \u2014 "),$S=a("a"),Rmo=o("BertGenerationDecoder"),Smo=o(" (Bert Generation model)"),Pmo=l(),O_=a("li"),iZ=a("strong"),$mo=o("big_bird"),Imo=o(" \u2014 "),IS=a("a"),jmo=o("BigBirdForCausalLM"),Nmo=o(" (BigBird model)"),Dmo=l(),X_=a("li"),dZ=a("strong"),qmo=o("bigbird_pegasus"),Gmo=o(" \u2014 "),jS=a("a"),Omo=o("BigBirdPegasusForCausalLM"),Xmo=o(" (BigBirdPegasus model)"),zmo=l(),z_=a("li"),cZ=a("strong"),Vmo=o("blenderbot"),Wmo=o(" \u2014 "),NS=a("a"),Qmo=o("BlenderbotForCausalLM"),Hmo=o(" (Blenderbot model)"),Umo=l(),V_=a("li"),fZ=a("strong"),Jmo=o("blenderbot-small"),Ymo=o(" \u2014 "),DS=a("a"),Kmo=o("BlenderbotSmallForCausalLM"),Zmo=o(" (BlenderbotSmall model)"),ego=l(),W_=a("li"),mZ=a("strong"),ogo=o("camembert"),rgo=o(" \u2014 "),qS=a("a"),tgo=o("CamembertForCausalLM"),ago=o(" (CamemBERT model)"),ngo=l(),Q_=a("li"),gZ=a("strong"),sgo=o("ctrl"),lgo=o(" \u2014 "),GS=a("a"),igo=o("CTRLLMHeadModel"),dgo=o(" (CTRL model)"),cgo=l(),H_=a("li"),hZ=a("strong"),fgo=o("electra"),mgo=o(" \u2014 "),OS=a("a"),ggo=o("ElectraForCausalLM"),hgo=o(" (ELECTRA model)"),pgo=l(),U_=a("li"),pZ=a("strong"),_go=o("gpt2"),ugo=o(" \u2014 "),XS=a("a"),bgo=o("GPT2LMHeadModel"),vgo=o(" (OpenAI GPT-2 model)"),Tgo=l(),J_=a("li"),_Z=a("strong"),Fgo=o("gpt_neo"),Cgo=o(" \u2014 "),zS=a("a"),Mgo=o("GPTNeoForCausalLM"),Ego=o(" (GPT Neo model)"),ygo=l(),Y_=a("li"),uZ=a("strong"),wgo=o("gptj"),Ago=o(" \u2014 "),VS=a("a"),Lgo=o("GPTJForCausalLM"),Bgo=o(" (GPT-J model)"),xgo=l(),K_=a("li"),bZ=a("strong"),kgo=o("marian"),Rgo=o(" \u2014 "),WS=a("a"),Sgo=o("MarianForCausalLM"),Pgo=o(" (Marian model)"),$go=l(),Z_=a("li"),vZ=a("strong"),Igo=o("mbart"),jgo=o(" \u2014 "),QS=a("a"),Ngo=o("MBartForCausalLM"),Dgo=o(" (mBART model)"),qgo=l(),eu=a("li"),TZ=a("strong"),Ggo=o("megatron-bert"),Ogo=o(" \u2014 "),HS=a("a"),Xgo=o("MegatronBertForCausalLM"),zgo=o(" (MegatronBert model)"),Vgo=l(),ou=a("li"),FZ=a("strong"),Wgo=o("openai-gpt"),Qgo=o(" \u2014 "),US=a("a"),Hgo=o("OpenAIGPTLMHeadModel"),Ugo=o(" (OpenAI GPT model)"),Jgo=l(),ru=a("li"),CZ=a("strong"),Ygo=o("pegasus"),Kgo=o(" \u2014 "),JS=a("a"),Zgo=o("PegasusForCausalLM"),eho=o(" (Pegasus model)"),oho=l(),tu=a("li"),MZ=a("strong"),rho=o("plbart"),tho=o(" \u2014 "),YS=a("a"),aho=o("PLBartForCausalLM"),nho=o(" (PLBart model)"),sho=l(),au=a("li"),EZ=a("strong"),lho=o("prophetnet"),iho=o(" \u2014 "),KS=a("a"),dho=o("ProphetNetForCausalLM"),cho=o(" (ProphetNet model)"),fho=l(),nu=a("li"),yZ=a("strong"),mho=o("qdqbert"),gho=o(" \u2014 "),ZS=a("a"),hho=o("QDQBertLMHeadModel"),pho=o(" (QDQBert model)"),_ho=l(),su=a("li"),wZ=a("strong"),uho=o("reformer"),bho=o(" \u2014 "),eP=a("a"),vho=o("ReformerModelWithLMHead"),Tho=o(" (Reformer model)"),Fho=l(),lu=a("li"),AZ=a("strong"),Cho=o("rembert"),Mho=o(" \u2014 "),oP=a("a"),Eho=o("RemBertForCausalLM"),yho=o(" (RemBERT model)"),who=l(),iu=a("li"),LZ=a("strong"),Aho=o("roberta"),Lho=o(" \u2014 "),rP=a("a"),Bho=o("RobertaForCausalLM"),xho=o(" (RoBERTa model)"),kho=l(),du=a("li"),BZ=a("strong"),Rho=o("roformer"),Sho=o(" \u2014 "),tP=a("a"),Pho=o("RoFormerForCausalLM"),$ho=o(" (RoFormer model)"),Iho=l(),cu=a("li"),xZ=a("strong"),jho=o("speech_to_text_2"),Nho=o(" \u2014 "),aP=a("a"),Dho=o("Speech2Text2ForCausalLM"),qho=o(" (Speech2Text2 model)"),Gho=l(),fu=a("li"),kZ=a("strong"),Oho=o("transfo-xl"),Xho=o(" \u2014 "),nP=a("a"),zho=o("TransfoXLLMHeadModel"),Vho=o(" (Transformer-XL model)"),Who=l(),mu=a("li"),RZ=a("strong"),Qho=o("trocr"),Hho=o(" \u2014 "),sP=a("a"),Uho=o("TrOCRForCausalLM"),Jho=o(" (TrOCR model)"),Yho=l(),gu=a("li"),SZ=a("strong"),Kho=o("xglm"),Zho=o(" \u2014 "),lP=a("a"),epo=o("XGLMForCausalLM"),opo=o(" (XGLM model)"),rpo=l(),hu=a("li"),PZ=a("strong"),tpo=o("xlm"),apo=o(" \u2014 "),iP=a("a"),npo=o("XLMWithLMHeadModel"),spo=o(" (XLM model)"),lpo=l(),pu=a("li"),$Z=a("strong"),ipo=o("xlm-prophetnet"),dpo=o(" \u2014 "),dP=a("a"),cpo=o("XLMProphetNetForCausalLM"),fpo=o(" (XLMProphetNet model)"),mpo=l(),_u=a("li"),IZ=a("strong"),gpo=o("xlm-roberta"),hpo=o(" \u2014 "),cP=a("a"),ppo=o("XLMRobertaForCausalLM"),_po=o(" (XLM-RoBERTa model)"),upo=l(),uu=a("li"),jZ=a("strong"),bpo=o("xlm-roberta-xl"),vpo=o(" \u2014 "),fP=a("a"),Tpo=o("XLMRobertaXLForCausalLM"),Fpo=o(" (XLM-RoBERTa-XL model)"),Cpo=l(),bu=a("li"),NZ=a("strong"),Mpo=o("xlnet"),Epo=o(" \u2014 "),mP=a("a"),ypo=o("XLNetLMHeadModel"),wpo=o(" (XLNet model)"),Apo=l(),vu=a("p"),Lpo=o("The model is set in evaluation mode by default using "),DZ=a("code"),Bpo=o("model.eval()"),xpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qZ=a("code"),kpo=o("model.train()"),Rpo=l(),GZ=a("p"),Spo=o("Examples:"),Ppo=l(),f(t3.$$.fragment),k7e=l(),Ji=a("h2"),Tu=a("a"),OZ=a("span"),f(a3.$$.fragment),$po=l(),XZ=a("span"),Ipo=o("AutoModelForMaskedLM"),R7e=l(),Ho=a("div"),f(n3.$$.fragment),jpo=l(),Yi=a("p"),Npo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zZ=a("code"),Dpo=o("from_pretrained()"),qpo=o("class method or the "),VZ=a("code"),Gpo=o("from_config()"),Opo=o(`class
method.`),Xpo=l(),s3=a("p"),zpo=o("This class cannot be instantiated directly using "),WZ=a("code"),Vpo=o("__init__()"),Wpo=o(" (throws an error)."),Qpo=l(),Gr=a("div"),f(l3.$$.fragment),Hpo=l(),QZ=a("p"),Upo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jpo=l(),Ki=a("p"),Ypo=o(`Note:
Loading a model from its configuration file does `),HZ=a("strong"),Kpo=o("not"),Zpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("code"),e_o=o("from_pretrained()"),o_o=o("to load the model weights."),r_o=l(),JZ=a("p"),t_o=o("Examples:"),a_o=l(),f(i3.$$.fragment),n_o=l(),Se=a("div"),f(d3.$$.fragment),s_o=l(),YZ=a("p"),l_o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i_o=l(),Oa=a("p"),d_o=o("The model class to instantiate is selected based on the "),KZ=a("code"),c_o=o("model_type"),f_o=o(` property of the config object (either
passed as an argument or loaded from `),ZZ=a("code"),m_o=o("pretrained_model_name_or_path"),g_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eee=a("code"),h_o=o("pretrained_model_name_or_path"),p_o=o(":"),__o=l(),I=a("ul"),Fu=a("li"),oee=a("strong"),u_o=o("albert"),b_o=o(" \u2014 "),gP=a("a"),v_o=o("AlbertForMaskedLM"),T_o=o(" (ALBERT model)"),F_o=l(),Cu=a("li"),ree=a("strong"),C_o=o("bart"),M_o=o(" \u2014 "),hP=a("a"),E_o=o("BartForConditionalGeneration"),y_o=o(" (BART model)"),w_o=l(),Mu=a("li"),tee=a("strong"),A_o=o("bert"),L_o=o(" \u2014 "),pP=a("a"),B_o=o("BertForMaskedLM"),x_o=o(" (BERT model)"),k_o=l(),Eu=a("li"),aee=a("strong"),R_o=o("big_bird"),S_o=o(" \u2014 "),_P=a("a"),P_o=o("BigBirdForMaskedLM"),$_o=o(" (BigBird model)"),I_o=l(),yu=a("li"),nee=a("strong"),j_o=o("camembert"),N_o=o(" \u2014 "),uP=a("a"),D_o=o("CamembertForMaskedLM"),q_o=o(" (CamemBERT model)"),G_o=l(),wu=a("li"),see=a("strong"),O_o=o("convbert"),X_o=o(" \u2014 "),bP=a("a"),z_o=o("ConvBertForMaskedLM"),V_o=o(" (ConvBERT model)"),W_o=l(),Au=a("li"),lee=a("strong"),Q_o=o("deberta"),H_o=o(" \u2014 "),vP=a("a"),U_o=o("DebertaForMaskedLM"),J_o=o(" (DeBERTa model)"),Y_o=l(),Lu=a("li"),iee=a("strong"),K_o=o("deberta-v2"),Z_o=o(" \u2014 "),TP=a("a"),euo=o("DebertaV2ForMaskedLM"),ouo=o(" (DeBERTa-v2 model)"),ruo=l(),Bu=a("li"),dee=a("strong"),tuo=o("distilbert"),auo=o(" \u2014 "),FP=a("a"),nuo=o("DistilBertForMaskedLM"),suo=o(" (DistilBERT model)"),luo=l(),xu=a("li"),cee=a("strong"),iuo=o("electra"),duo=o(" \u2014 "),CP=a("a"),cuo=o("ElectraForMaskedLM"),fuo=o(" (ELECTRA model)"),muo=l(),ku=a("li"),fee=a("strong"),guo=o("flaubert"),huo=o(" \u2014 "),MP=a("a"),puo=o("FlaubertWithLMHeadModel"),_uo=o(" (FlauBERT model)"),uuo=l(),Ru=a("li"),mee=a("strong"),buo=o("fnet"),vuo=o(" \u2014 "),EP=a("a"),Tuo=o("FNetForMaskedLM"),Fuo=o(" (FNet model)"),Cuo=l(),Su=a("li"),gee=a("strong"),Muo=o("funnel"),Euo=o(" \u2014 "),yP=a("a"),yuo=o("FunnelForMaskedLM"),wuo=o(" (Funnel Transformer model)"),Auo=l(),Pu=a("li"),hee=a("strong"),Luo=o("ibert"),Buo=o(" \u2014 "),wP=a("a"),xuo=o("IBertForMaskedLM"),kuo=o(" (I-BERT model)"),Ruo=l(),$u=a("li"),pee=a("strong"),Suo=o("layoutlm"),Puo=o(" \u2014 "),AP=a("a"),$uo=o("LayoutLMForMaskedLM"),Iuo=o(" (LayoutLM model)"),juo=l(),Iu=a("li"),_ee=a("strong"),Nuo=o("longformer"),Duo=o(" \u2014 "),LP=a("a"),quo=o("LongformerForMaskedLM"),Guo=o(" (Longformer model)"),Ouo=l(),ju=a("li"),uee=a("strong"),Xuo=o("mbart"),zuo=o(" \u2014 "),BP=a("a"),Vuo=o("MBartForConditionalGeneration"),Wuo=o(" (mBART model)"),Quo=l(),Nu=a("li"),bee=a("strong"),Huo=o("megatron-bert"),Uuo=o(" \u2014 "),xP=a("a"),Juo=o("MegatronBertForMaskedLM"),Yuo=o(" (MegatronBert model)"),Kuo=l(),Du=a("li"),vee=a("strong"),Zuo=o("mobilebert"),e5o=o(" \u2014 "),kP=a("a"),o5o=o("MobileBertForMaskedLM"),r5o=o(" (MobileBERT model)"),t5o=l(),qu=a("li"),Tee=a("strong"),a5o=o("mpnet"),n5o=o(" \u2014 "),RP=a("a"),s5o=o("MPNetForMaskedLM"),l5o=o(" (MPNet model)"),i5o=l(),Gu=a("li"),Fee=a("strong"),d5o=o("nystromformer"),c5o=o(" \u2014 "),SP=a("a"),f5o=o("NystromformerForMaskedLM"),m5o=o(" (Nystromformer model)"),g5o=l(),Ou=a("li"),Cee=a("strong"),h5o=o("perceiver"),p5o=o(" \u2014 "),PP=a("a"),_5o=o("PerceiverForMaskedLM"),u5o=o(" (Perceiver model)"),b5o=l(),Xu=a("li"),Mee=a("strong"),v5o=o("qdqbert"),T5o=o(" \u2014 "),$P=a("a"),F5o=o("QDQBertForMaskedLM"),C5o=o(" (QDQBert model)"),M5o=l(),zu=a("li"),Eee=a("strong"),E5o=o("reformer"),y5o=o(" \u2014 "),IP=a("a"),w5o=o("ReformerForMaskedLM"),A5o=o(" (Reformer model)"),L5o=l(),Vu=a("li"),yee=a("strong"),B5o=o("rembert"),x5o=o(" \u2014 "),jP=a("a"),k5o=o("RemBertForMaskedLM"),R5o=o(" (RemBERT model)"),S5o=l(),Wu=a("li"),wee=a("strong"),P5o=o("roberta"),$5o=o(" \u2014 "),NP=a("a"),I5o=o("RobertaForMaskedLM"),j5o=o(" (RoBERTa model)"),N5o=l(),Qu=a("li"),Aee=a("strong"),D5o=o("roformer"),q5o=o(" \u2014 "),DP=a("a"),G5o=o("RoFormerForMaskedLM"),O5o=o(" (RoFormer model)"),X5o=l(),Hu=a("li"),Lee=a("strong"),z5o=o("squeezebert"),V5o=o(" \u2014 "),qP=a("a"),W5o=o("SqueezeBertForMaskedLM"),Q5o=o(" (SqueezeBERT model)"),H5o=l(),Uu=a("li"),Bee=a("strong"),U5o=o("tapas"),J5o=o(" \u2014 "),GP=a("a"),Y5o=o("TapasForMaskedLM"),K5o=o(" (TAPAS model)"),Z5o=l(),Ju=a("li"),xee=a("strong"),e2o=o("wav2vec2"),o2o=o(" \u2014 "),kee=a("code"),r2o=o("Wav2Vec2ForMaskedLM"),t2o=o("(Wav2Vec2 model)"),a2o=l(),Yu=a("li"),Ree=a("strong"),n2o=o("xlm"),s2o=o(" \u2014 "),OP=a("a"),l2o=o("XLMWithLMHeadModel"),i2o=o(" (XLM model)"),d2o=l(),Ku=a("li"),See=a("strong"),c2o=o("xlm-roberta"),f2o=o(" \u2014 "),XP=a("a"),m2o=o("XLMRobertaForMaskedLM"),g2o=o(" (XLM-RoBERTa model)"),h2o=l(),Zu=a("li"),Pee=a("strong"),p2o=o("xlm-roberta-xl"),_2o=o(" \u2014 "),zP=a("a"),u2o=o("XLMRobertaXLForMaskedLM"),b2o=o(" (XLM-RoBERTa-XL model)"),v2o=l(),e5=a("li"),$ee=a("strong"),T2o=o("yoso"),F2o=o(" \u2014 "),VP=a("a"),C2o=o("YosoForMaskedLM"),M2o=o(" (YOSO model)"),E2o=l(),o5=a("p"),y2o=o("The model is set in evaluation mode by default using "),Iee=a("code"),w2o=o("model.eval()"),A2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jee=a("code"),L2o=o("model.train()"),B2o=l(),Nee=a("p"),x2o=o("Examples:"),k2o=l(),f(c3.$$.fragment),S7e=l(),Zi=a("h2"),r5=a("a"),Dee=a("span"),f(f3.$$.fragment),R2o=l(),qee=a("span"),S2o=o("AutoModelForSeq2SeqLM"),P7e=l(),Uo=a("div"),f(m3.$$.fragment),P2o=l(),ed=a("p"),$2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gee=a("code"),I2o=o("from_pretrained()"),j2o=o("class method or the "),Oee=a("code"),N2o=o("from_config()"),D2o=o(`class
method.`),q2o=l(),g3=a("p"),G2o=o("This class cannot be instantiated directly using "),Xee=a("code"),O2o=o("__init__()"),X2o=o(" (throws an error)."),z2o=l(),Or=a("div"),f(h3.$$.fragment),V2o=l(),zee=a("p"),W2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q2o=l(),od=a("p"),H2o=o(`Note:
Loading a model from its configuration file does `),Vee=a("strong"),U2o=o("not"),J2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("code"),Y2o=o("from_pretrained()"),K2o=o("to load the model weights."),Z2o=l(),Qee=a("p"),e1o=o("Examples:"),o1o=l(),f(p3.$$.fragment),r1o=l(),Pe=a("div"),f(_3.$$.fragment),t1o=l(),Hee=a("p"),a1o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),n1o=l(),Xa=a("p"),s1o=o("The model class to instantiate is selected based on the "),Uee=a("code"),l1o=o("model_type"),i1o=o(` property of the config object (either
passed as an argument or loaded from `),Jee=a("code"),d1o=o("pretrained_model_name_or_path"),c1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yee=a("code"),f1o=o("pretrained_model_name_or_path"),m1o=o(":"),g1o=l(),ae=a("ul"),t5=a("li"),Kee=a("strong"),h1o=o("bart"),p1o=o(" \u2014 "),WP=a("a"),_1o=o("BartForConditionalGeneration"),u1o=o(" (BART model)"),b1o=l(),a5=a("li"),Zee=a("strong"),v1o=o("bigbird_pegasus"),T1o=o(" \u2014 "),QP=a("a"),F1o=o("BigBirdPegasusForConditionalGeneration"),C1o=o(" (BigBirdPegasus model)"),M1o=l(),n5=a("li"),eoe=a("strong"),E1o=o("blenderbot"),y1o=o(" \u2014 "),HP=a("a"),w1o=o("BlenderbotForConditionalGeneration"),A1o=o(" (Blenderbot model)"),L1o=l(),s5=a("li"),ooe=a("strong"),B1o=o("blenderbot-small"),x1o=o(" \u2014 "),UP=a("a"),k1o=o("BlenderbotSmallForConditionalGeneration"),R1o=o(" (BlenderbotSmall model)"),S1o=l(),l5=a("li"),roe=a("strong"),P1o=o("encoder-decoder"),$1o=o(" \u2014 "),JP=a("a"),I1o=o("EncoderDecoderModel"),j1o=o(" (Encoder decoder model)"),N1o=l(),i5=a("li"),toe=a("strong"),D1o=o("fsmt"),q1o=o(" \u2014 "),YP=a("a"),G1o=o("FSMTForConditionalGeneration"),O1o=o(" (FairSeq Machine-Translation model)"),X1o=l(),d5=a("li"),aoe=a("strong"),z1o=o("led"),V1o=o(" \u2014 "),KP=a("a"),W1o=o("LEDForConditionalGeneration"),Q1o=o(" (LED model)"),H1o=l(),c5=a("li"),noe=a("strong"),U1o=o("m2m_100"),J1o=o(" \u2014 "),ZP=a("a"),Y1o=o("M2M100ForConditionalGeneration"),K1o=o(" (M2M100 model)"),Z1o=l(),f5=a("li"),soe=a("strong"),ebo=o("marian"),obo=o(" \u2014 "),e$=a("a"),rbo=o("MarianMTModel"),tbo=o(" (Marian model)"),abo=l(),m5=a("li"),loe=a("strong"),nbo=o("mbart"),sbo=o(" \u2014 "),o$=a("a"),lbo=o("MBartForConditionalGeneration"),ibo=o(" (mBART model)"),dbo=l(),g5=a("li"),ioe=a("strong"),cbo=o("mt5"),fbo=o(" \u2014 "),r$=a("a"),mbo=o("MT5ForConditionalGeneration"),gbo=o(" (mT5 model)"),hbo=l(),h5=a("li"),doe=a("strong"),pbo=o("pegasus"),_bo=o(" \u2014 "),t$=a("a"),ubo=o("PegasusForConditionalGeneration"),bbo=o(" (Pegasus model)"),vbo=l(),p5=a("li"),coe=a("strong"),Tbo=o("plbart"),Fbo=o(" \u2014 "),a$=a("a"),Cbo=o("PLBartForConditionalGeneration"),Mbo=o(" (PLBart model)"),Ebo=l(),_5=a("li"),foe=a("strong"),ybo=o("prophetnet"),wbo=o(" \u2014 "),n$=a("a"),Abo=o("ProphetNetForConditionalGeneration"),Lbo=o(" (ProphetNet model)"),Bbo=l(),u5=a("li"),moe=a("strong"),xbo=o("t5"),kbo=o(" \u2014 "),s$=a("a"),Rbo=o("T5ForConditionalGeneration"),Sbo=o(" (T5 model)"),Pbo=l(),b5=a("li"),goe=a("strong"),$bo=o("xlm-prophetnet"),Ibo=o(" \u2014 "),l$=a("a"),jbo=o("XLMProphetNetForConditionalGeneration"),Nbo=o(" (XLMProphetNet model)"),Dbo=l(),v5=a("p"),qbo=o("The model is set in evaluation mode by default using "),hoe=a("code"),Gbo=o("model.eval()"),Obo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),poe=a("code"),Xbo=o("model.train()"),zbo=l(),_oe=a("p"),Vbo=o("Examples:"),Wbo=l(),f(u3.$$.fragment),$7e=l(),rd=a("h2"),T5=a("a"),uoe=a("span"),f(b3.$$.fragment),Qbo=l(),boe=a("span"),Hbo=o("AutoModelForSequenceClassification"),I7e=l(),Jo=a("div"),f(v3.$$.fragment),Ubo=l(),td=a("p"),Jbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),voe=a("code"),Ybo=o("from_pretrained()"),Kbo=o("class method or the "),Toe=a("code"),Zbo=o("from_config()"),evo=o(`class
method.`),ovo=l(),T3=a("p"),rvo=o("This class cannot be instantiated directly using "),Foe=a("code"),tvo=o("__init__()"),avo=o(" (throws an error)."),nvo=l(),Xr=a("div"),f(F3.$$.fragment),svo=l(),Coe=a("p"),lvo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ivo=l(),ad=a("p"),dvo=o(`Note:
Loading a model from its configuration file does `),Moe=a("strong"),cvo=o("not"),fvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("code"),mvo=o("from_pretrained()"),gvo=o("to load the model weights."),hvo=l(),yoe=a("p"),pvo=o("Examples:"),_vo=l(),f(C3.$$.fragment),uvo=l(),$e=a("div"),f(M3.$$.fragment),bvo=l(),woe=a("p"),vvo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Tvo=l(),za=a("p"),Fvo=o("The model class to instantiate is selected based on the "),Aoe=a("code"),Cvo=o("model_type"),Mvo=o(` property of the config object (either
passed as an argument or loaded from `),Loe=a("code"),Evo=o("pretrained_model_name_or_path"),yvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Boe=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(":"),Lvo=l(),A=a("ul"),F5=a("li"),xoe=a("strong"),Bvo=o("albert"),xvo=o(" \u2014 "),i$=a("a"),kvo=o("AlbertForSequenceClassification"),Rvo=o(" (ALBERT model)"),Svo=l(),C5=a("li"),koe=a("strong"),Pvo=o("bart"),$vo=o(" \u2014 "),d$=a("a"),Ivo=o("BartForSequenceClassification"),jvo=o(" (BART model)"),Nvo=l(),M5=a("li"),Roe=a("strong"),Dvo=o("bert"),qvo=o(" \u2014 "),c$=a("a"),Gvo=o("BertForSequenceClassification"),Ovo=o(" (BERT model)"),Xvo=l(),E5=a("li"),Soe=a("strong"),zvo=o("big_bird"),Vvo=o(" \u2014 "),f$=a("a"),Wvo=o("BigBirdForSequenceClassification"),Qvo=o(" (BigBird model)"),Hvo=l(),y5=a("li"),Poe=a("strong"),Uvo=o("bigbird_pegasus"),Jvo=o(" \u2014 "),m$=a("a"),Yvo=o("BigBirdPegasusForSequenceClassification"),Kvo=o(" (BigBirdPegasus model)"),Zvo=l(),w5=a("li"),$oe=a("strong"),eTo=o("camembert"),oTo=o(" \u2014 "),g$=a("a"),rTo=o("CamembertForSequenceClassification"),tTo=o(" (CamemBERT model)"),aTo=l(),A5=a("li"),Ioe=a("strong"),nTo=o("canine"),sTo=o(" \u2014 "),h$=a("a"),lTo=o("CanineForSequenceClassification"),iTo=o(" (Canine model)"),dTo=l(),L5=a("li"),joe=a("strong"),cTo=o("convbert"),fTo=o(" \u2014 "),p$=a("a"),mTo=o("ConvBertForSequenceClassification"),gTo=o(" (ConvBERT model)"),hTo=l(),B5=a("li"),Noe=a("strong"),pTo=o("ctrl"),_To=o(" \u2014 "),_$=a("a"),uTo=o("CTRLForSequenceClassification"),bTo=o(" (CTRL model)"),vTo=l(),x5=a("li"),Doe=a("strong"),TTo=o("deberta"),FTo=o(" \u2014 "),u$=a("a"),CTo=o("DebertaForSequenceClassification"),MTo=o(" (DeBERTa model)"),ETo=l(),k5=a("li"),qoe=a("strong"),yTo=o("deberta-v2"),wTo=o(" \u2014 "),b$=a("a"),ATo=o("DebertaV2ForSequenceClassification"),LTo=o(" (DeBERTa-v2 model)"),BTo=l(),R5=a("li"),Goe=a("strong"),xTo=o("distilbert"),kTo=o(" \u2014 "),v$=a("a"),RTo=o("DistilBertForSequenceClassification"),STo=o(" (DistilBERT model)"),PTo=l(),S5=a("li"),Ooe=a("strong"),$To=o("electra"),ITo=o(" \u2014 "),T$=a("a"),jTo=o("ElectraForSequenceClassification"),NTo=o(" (ELECTRA model)"),DTo=l(),P5=a("li"),Xoe=a("strong"),qTo=o("flaubert"),GTo=o(" \u2014 "),F$=a("a"),OTo=o("FlaubertForSequenceClassification"),XTo=o(" (FlauBERT model)"),zTo=l(),$5=a("li"),zoe=a("strong"),VTo=o("fnet"),WTo=o(" \u2014 "),C$=a("a"),QTo=o("FNetForSequenceClassification"),HTo=o(" (FNet model)"),UTo=l(),I5=a("li"),Voe=a("strong"),JTo=o("funnel"),YTo=o(" \u2014 "),M$=a("a"),KTo=o("FunnelForSequenceClassification"),ZTo=o(" (Funnel Transformer model)"),eFo=l(),j5=a("li"),Woe=a("strong"),oFo=o("gpt2"),rFo=o(" \u2014 "),E$=a("a"),tFo=o("GPT2ForSequenceClassification"),aFo=o(" (OpenAI GPT-2 model)"),nFo=l(),N5=a("li"),Qoe=a("strong"),sFo=o("gpt_neo"),lFo=o(" \u2014 "),y$=a("a"),iFo=o("GPTNeoForSequenceClassification"),dFo=o(" (GPT Neo model)"),cFo=l(),D5=a("li"),Hoe=a("strong"),fFo=o("gptj"),mFo=o(" \u2014 "),w$=a("a"),gFo=o("GPTJForSequenceClassification"),hFo=o(" (GPT-J model)"),pFo=l(),q5=a("li"),Uoe=a("strong"),_Fo=o("ibert"),uFo=o(" \u2014 "),A$=a("a"),bFo=o("IBertForSequenceClassification"),vFo=o(" (I-BERT model)"),TFo=l(),G5=a("li"),Joe=a("strong"),FFo=o("layoutlm"),CFo=o(" \u2014 "),L$=a("a"),MFo=o("LayoutLMForSequenceClassification"),EFo=o(" (LayoutLM model)"),yFo=l(),O5=a("li"),Yoe=a("strong"),wFo=o("layoutlmv2"),AFo=o(" \u2014 "),B$=a("a"),LFo=o("LayoutLMv2ForSequenceClassification"),BFo=o(" (LayoutLMv2 model)"),xFo=l(),X5=a("li"),Koe=a("strong"),kFo=o("led"),RFo=o(" \u2014 "),x$=a("a"),SFo=o("LEDForSequenceClassification"),PFo=o(" (LED model)"),$Fo=l(),z5=a("li"),Zoe=a("strong"),IFo=o("longformer"),jFo=o(" \u2014 "),k$=a("a"),NFo=o("LongformerForSequenceClassification"),DFo=o(" (Longformer model)"),qFo=l(),V5=a("li"),ere=a("strong"),GFo=o("mbart"),OFo=o(" \u2014 "),R$=a("a"),XFo=o("MBartForSequenceClassification"),zFo=o(" (mBART model)"),VFo=l(),W5=a("li"),ore=a("strong"),WFo=o("megatron-bert"),QFo=o(" \u2014 "),S$=a("a"),HFo=o("MegatronBertForSequenceClassification"),UFo=o(" (MegatronBert model)"),JFo=l(),Q5=a("li"),rre=a("strong"),YFo=o("mobilebert"),KFo=o(" \u2014 "),P$=a("a"),ZFo=o("MobileBertForSequenceClassification"),e9o=o(" (MobileBERT model)"),o9o=l(),H5=a("li"),tre=a("strong"),r9o=o("mpnet"),t9o=o(" \u2014 "),$$=a("a"),a9o=o("MPNetForSequenceClassification"),n9o=o(" (MPNet model)"),s9o=l(),U5=a("li"),are=a("strong"),l9o=o("nystromformer"),i9o=o(" \u2014 "),I$=a("a"),d9o=o("NystromformerForSequenceClassification"),c9o=o(" (Nystromformer model)"),f9o=l(),J5=a("li"),nre=a("strong"),m9o=o("openai-gpt"),g9o=o(" \u2014 "),j$=a("a"),h9o=o("OpenAIGPTForSequenceClassification"),p9o=o(" (OpenAI GPT model)"),_9o=l(),Y5=a("li"),sre=a("strong"),u9o=o("perceiver"),b9o=o(" \u2014 "),N$=a("a"),v9o=o("PerceiverForSequenceClassification"),T9o=o(" (Perceiver model)"),F9o=l(),K5=a("li"),lre=a("strong"),C9o=o("plbart"),M9o=o(" \u2014 "),D$=a("a"),E9o=o("PLBartForSequenceClassification"),y9o=o(" (PLBart model)"),w9o=l(),Z5=a("li"),ire=a("strong"),A9o=o("qdqbert"),L9o=o(" \u2014 "),q$=a("a"),B9o=o("QDQBertForSequenceClassification"),x9o=o(" (QDQBert model)"),k9o=l(),e2=a("li"),dre=a("strong"),R9o=o("reformer"),S9o=o(" \u2014 "),G$=a("a"),P9o=o("ReformerForSequenceClassification"),$9o=o(" (Reformer model)"),I9o=l(),o2=a("li"),cre=a("strong"),j9o=o("rembert"),N9o=o(" \u2014 "),O$=a("a"),D9o=o("RemBertForSequenceClassification"),q9o=o(" (RemBERT model)"),G9o=l(),r2=a("li"),fre=a("strong"),O9o=o("roberta"),X9o=o(" \u2014 "),X$=a("a"),z9o=o("RobertaForSequenceClassification"),V9o=o(" (RoBERTa model)"),W9o=l(),t2=a("li"),mre=a("strong"),Q9o=o("roformer"),H9o=o(" \u2014 "),z$=a("a"),U9o=o("RoFormerForSequenceClassification"),J9o=o(" (RoFormer model)"),Y9o=l(),a2=a("li"),gre=a("strong"),K9o=o("squeezebert"),Z9o=o(" \u2014 "),V$=a("a"),eCo=o("SqueezeBertForSequenceClassification"),oCo=o(" (SqueezeBERT model)"),rCo=l(),n2=a("li"),hre=a("strong"),tCo=o("tapas"),aCo=o(" \u2014 "),W$=a("a"),nCo=o("TapasForSequenceClassification"),sCo=o(" (TAPAS model)"),lCo=l(),s2=a("li"),pre=a("strong"),iCo=o("transfo-xl"),dCo=o(" \u2014 "),Q$=a("a"),cCo=o("TransfoXLForSequenceClassification"),fCo=o(" (Transformer-XL model)"),mCo=l(),l2=a("li"),_re=a("strong"),gCo=o("xlm"),hCo=o(" \u2014 "),H$=a("a"),pCo=o("XLMForSequenceClassification"),_Co=o(" (XLM model)"),uCo=l(),i2=a("li"),ure=a("strong"),bCo=o("xlm-roberta"),vCo=o(" \u2014 "),U$=a("a"),TCo=o("XLMRobertaForSequenceClassification"),FCo=o(" (XLM-RoBERTa model)"),CCo=l(),d2=a("li"),bre=a("strong"),MCo=o("xlm-roberta-xl"),ECo=o(" \u2014 "),J$=a("a"),yCo=o("XLMRobertaXLForSequenceClassification"),wCo=o(" (XLM-RoBERTa-XL model)"),ACo=l(),c2=a("li"),vre=a("strong"),LCo=o("xlnet"),BCo=o(" \u2014 "),Y$=a("a"),xCo=o("XLNetForSequenceClassification"),kCo=o(" (XLNet model)"),RCo=l(),f2=a("li"),Tre=a("strong"),SCo=o("yoso"),PCo=o(" \u2014 "),K$=a("a"),$Co=o("YosoForSequenceClassification"),ICo=o(" (YOSO model)"),jCo=l(),m2=a("p"),NCo=o("The model is set in evaluation mode by default using "),Fre=a("code"),DCo=o("model.eval()"),qCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cre=a("code"),GCo=o("model.train()"),OCo=l(),Mre=a("p"),XCo=o("Examples:"),zCo=l(),f(E3.$$.fragment),j7e=l(),nd=a("h2"),g2=a("a"),Ere=a("span"),f(y3.$$.fragment),VCo=l(),yre=a("span"),WCo=o("AutoModelForMultipleChoice"),N7e=l(),Yo=a("div"),f(w3.$$.fragment),QCo=l(),sd=a("p"),HCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wre=a("code"),UCo=o("from_pretrained()"),JCo=o("class method or the "),Are=a("code"),YCo=o("from_config()"),KCo=o(`class
method.`),ZCo=l(),A3=a("p"),e4o=o("This class cannot be instantiated directly using "),Lre=a("code"),o4o=o("__init__()"),r4o=o(" (throws an error)."),t4o=l(),zr=a("div"),f(L3.$$.fragment),a4o=l(),Bre=a("p"),n4o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),s4o=l(),ld=a("p"),l4o=o(`Note:
Loading a model from its configuration file does `),xre=a("strong"),i4o=o("not"),d4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=a("code"),c4o=o("from_pretrained()"),f4o=o("to load the model weights."),m4o=l(),Rre=a("p"),g4o=o("Examples:"),h4o=l(),f(B3.$$.fragment),p4o=l(),Ie=a("div"),f(x3.$$.fragment),_4o=l(),Sre=a("p"),u4o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b4o=l(),Va=a("p"),v4o=o("The model class to instantiate is selected based on the "),Pre=a("code"),T4o=o("model_type"),F4o=o(` property of the config object (either
passed as an argument or loaded from `),$re=a("code"),C4o=o("pretrained_model_name_or_path"),M4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ire=a("code"),E4o=o("pretrained_model_name_or_path"),y4o=o(":"),w4o=l(),G=a("ul"),h2=a("li"),jre=a("strong"),A4o=o("albert"),L4o=o(" \u2014 "),Z$=a("a"),B4o=o("AlbertForMultipleChoice"),x4o=o(" (ALBERT model)"),k4o=l(),p2=a("li"),Nre=a("strong"),R4o=o("bert"),S4o=o(" \u2014 "),eI=a("a"),P4o=o("BertForMultipleChoice"),$4o=o(" (BERT model)"),I4o=l(),_2=a("li"),Dre=a("strong"),j4o=o("big_bird"),N4o=o(" \u2014 "),oI=a("a"),D4o=o("BigBirdForMultipleChoice"),q4o=o(" (BigBird model)"),G4o=l(),u2=a("li"),qre=a("strong"),O4o=o("camembert"),X4o=o(" \u2014 "),rI=a("a"),z4o=o("CamembertForMultipleChoice"),V4o=o(" (CamemBERT model)"),W4o=l(),b2=a("li"),Gre=a("strong"),Q4o=o("canine"),H4o=o(" \u2014 "),tI=a("a"),U4o=o("CanineForMultipleChoice"),J4o=o(" (Canine model)"),Y4o=l(),v2=a("li"),Ore=a("strong"),K4o=o("convbert"),Z4o=o(" \u2014 "),aI=a("a"),eMo=o("ConvBertForMultipleChoice"),oMo=o(" (ConvBERT model)"),rMo=l(),T2=a("li"),Xre=a("strong"),tMo=o("distilbert"),aMo=o(" \u2014 "),nI=a("a"),nMo=o("DistilBertForMultipleChoice"),sMo=o(" (DistilBERT model)"),lMo=l(),F2=a("li"),zre=a("strong"),iMo=o("electra"),dMo=o(" \u2014 "),sI=a("a"),cMo=o("ElectraForMultipleChoice"),fMo=o(" (ELECTRA model)"),mMo=l(),C2=a("li"),Vre=a("strong"),gMo=o("flaubert"),hMo=o(" \u2014 "),lI=a("a"),pMo=o("FlaubertForMultipleChoice"),_Mo=o(" (FlauBERT model)"),uMo=l(),M2=a("li"),Wre=a("strong"),bMo=o("fnet"),vMo=o(" \u2014 "),iI=a("a"),TMo=o("FNetForMultipleChoice"),FMo=o(" (FNet model)"),CMo=l(),E2=a("li"),Qre=a("strong"),MMo=o("funnel"),EMo=o(" \u2014 "),dI=a("a"),yMo=o("FunnelForMultipleChoice"),wMo=o(" (Funnel Transformer model)"),AMo=l(),y2=a("li"),Hre=a("strong"),LMo=o("ibert"),BMo=o(" \u2014 "),cI=a("a"),xMo=o("IBertForMultipleChoice"),kMo=o(" (I-BERT model)"),RMo=l(),w2=a("li"),Ure=a("strong"),SMo=o("longformer"),PMo=o(" \u2014 "),fI=a("a"),$Mo=o("LongformerForMultipleChoice"),IMo=o(" (Longformer model)"),jMo=l(),A2=a("li"),Jre=a("strong"),NMo=o("megatron-bert"),DMo=o(" \u2014 "),mI=a("a"),qMo=o("MegatronBertForMultipleChoice"),GMo=o(" (MegatronBert model)"),OMo=l(),L2=a("li"),Yre=a("strong"),XMo=o("mobilebert"),zMo=o(" \u2014 "),gI=a("a"),VMo=o("MobileBertForMultipleChoice"),WMo=o(" (MobileBERT model)"),QMo=l(),B2=a("li"),Kre=a("strong"),HMo=o("mpnet"),UMo=o(" \u2014 "),hI=a("a"),JMo=o("MPNetForMultipleChoice"),YMo=o(" (MPNet model)"),KMo=l(),x2=a("li"),Zre=a("strong"),ZMo=o("nystromformer"),eEo=o(" \u2014 "),pI=a("a"),oEo=o("NystromformerForMultipleChoice"),rEo=o(" (Nystromformer model)"),tEo=l(),k2=a("li"),ete=a("strong"),aEo=o("qdqbert"),nEo=o(" \u2014 "),_I=a("a"),sEo=o("QDQBertForMultipleChoice"),lEo=o(" (QDQBert model)"),iEo=l(),R2=a("li"),ote=a("strong"),dEo=o("rembert"),cEo=o(" \u2014 "),uI=a("a"),fEo=o("RemBertForMultipleChoice"),mEo=o(" (RemBERT model)"),gEo=l(),S2=a("li"),rte=a("strong"),hEo=o("roberta"),pEo=o(" \u2014 "),bI=a("a"),_Eo=o("RobertaForMultipleChoice"),uEo=o(" (RoBERTa model)"),bEo=l(),P2=a("li"),tte=a("strong"),vEo=o("roformer"),TEo=o(" \u2014 "),vI=a("a"),FEo=o("RoFormerForMultipleChoice"),CEo=o(" (RoFormer model)"),MEo=l(),$2=a("li"),ate=a("strong"),EEo=o("squeezebert"),yEo=o(" \u2014 "),TI=a("a"),wEo=o("SqueezeBertForMultipleChoice"),AEo=o(" (SqueezeBERT model)"),LEo=l(),I2=a("li"),nte=a("strong"),BEo=o("xlm"),xEo=o(" \u2014 "),FI=a("a"),kEo=o("XLMForMultipleChoice"),REo=o(" (XLM model)"),SEo=l(),j2=a("li"),ste=a("strong"),PEo=o("xlm-roberta"),$Eo=o(" \u2014 "),CI=a("a"),IEo=o("XLMRobertaForMultipleChoice"),jEo=o(" (XLM-RoBERTa model)"),NEo=l(),N2=a("li"),lte=a("strong"),DEo=o("xlm-roberta-xl"),qEo=o(" \u2014 "),MI=a("a"),GEo=o("XLMRobertaXLForMultipleChoice"),OEo=o(" (XLM-RoBERTa-XL model)"),XEo=l(),D2=a("li"),ite=a("strong"),zEo=o("xlnet"),VEo=o(" \u2014 "),EI=a("a"),WEo=o("XLNetForMultipleChoice"),QEo=o(" (XLNet model)"),HEo=l(),q2=a("li"),dte=a("strong"),UEo=o("yoso"),JEo=o(" \u2014 "),yI=a("a"),YEo=o("YosoForMultipleChoice"),KEo=o(" (YOSO model)"),ZEo=l(),G2=a("p"),e3o=o("The model is set in evaluation mode by default using "),cte=a("code"),o3o=o("model.eval()"),r3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=a("code"),t3o=o("model.train()"),a3o=l(),mte=a("p"),n3o=o("Examples:"),s3o=l(),f(k3.$$.fragment),D7e=l(),id=a("h2"),O2=a("a"),gte=a("span"),f(R3.$$.fragment),l3o=l(),hte=a("span"),i3o=o("AutoModelForNextSentencePrediction"),q7e=l(),Ko=a("div"),f(S3.$$.fragment),d3o=l(),dd=a("p"),c3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pte=a("code"),f3o=o("from_pretrained()"),m3o=o("class method or the "),_te=a("code"),g3o=o("from_config()"),h3o=o(`class
method.`),p3o=l(),P3=a("p"),_3o=o("This class cannot be instantiated directly using "),ute=a("code"),u3o=o("__init__()"),b3o=o(" (throws an error)."),v3o=l(),Vr=a("div"),f($3.$$.fragment),T3o=l(),bte=a("p"),F3o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),C3o=l(),cd=a("p"),M3o=o(`Note:
Loading a model from its configuration file does `),vte=a("strong"),E3o=o("not"),y3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=a("code"),w3o=o("from_pretrained()"),A3o=o("to load the model weights."),L3o=l(),Fte=a("p"),B3o=o("Examples:"),x3o=l(),f(I3.$$.fragment),k3o=l(),je=a("div"),f(j3.$$.fragment),R3o=l(),Cte=a("p"),S3o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P3o=l(),Wa=a("p"),$3o=o("The model class to instantiate is selected based on the "),Mte=a("code"),I3o=o("model_type"),j3o=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),N3o=o("pretrained_model_name_or_path"),D3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=a("code"),q3o=o("pretrained_model_name_or_path"),G3o=o(":"),O3o=l(),na=a("ul"),X2=a("li"),wte=a("strong"),X3o=o("bert"),z3o=o(" \u2014 "),wI=a("a"),V3o=o("BertForNextSentencePrediction"),W3o=o(" (BERT model)"),Q3o=l(),z2=a("li"),Ate=a("strong"),H3o=o("fnet"),U3o=o(" \u2014 "),AI=a("a"),J3o=o("FNetForNextSentencePrediction"),Y3o=o(" (FNet model)"),K3o=l(),V2=a("li"),Lte=a("strong"),Z3o=o("megatron-bert"),eyo=o(" \u2014 "),LI=a("a"),oyo=o("MegatronBertForNextSentencePrediction"),ryo=o(" (MegatronBert model)"),tyo=l(),W2=a("li"),Bte=a("strong"),ayo=o("mobilebert"),nyo=o(" \u2014 "),BI=a("a"),syo=o("MobileBertForNextSentencePrediction"),lyo=o(" (MobileBERT model)"),iyo=l(),Q2=a("li"),xte=a("strong"),dyo=o("qdqbert"),cyo=o(" \u2014 "),xI=a("a"),fyo=o("QDQBertForNextSentencePrediction"),myo=o(" (QDQBert model)"),gyo=l(),H2=a("p"),hyo=o("The model is set in evaluation mode by default using "),kte=a("code"),pyo=o("model.eval()"),_yo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rte=a("code"),uyo=o("model.train()"),byo=l(),Ste=a("p"),vyo=o("Examples:"),Tyo=l(),f(N3.$$.fragment),G7e=l(),fd=a("h2"),U2=a("a"),Pte=a("span"),f(D3.$$.fragment),Fyo=l(),$te=a("span"),Cyo=o("AutoModelForTokenClassification"),O7e=l(),Zo=a("div"),f(q3.$$.fragment),Myo=l(),md=a("p"),Eyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ite=a("code"),yyo=o("from_pretrained()"),wyo=o("class method or the "),jte=a("code"),Ayo=o("from_config()"),Lyo=o(`class
method.`),Byo=l(),G3=a("p"),xyo=o("This class cannot be instantiated directly using "),Nte=a("code"),kyo=o("__init__()"),Ryo=o(" (throws an error)."),Syo=l(),Wr=a("div"),f(O3.$$.fragment),Pyo=l(),Dte=a("p"),$yo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Iyo=l(),gd=a("p"),jyo=o(`Note:
Loading a model from its configuration file does `),qte=a("strong"),Nyo=o("not"),Dyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=a("code"),qyo=o("from_pretrained()"),Gyo=o("to load the model weights."),Oyo=l(),Ote=a("p"),Xyo=o("Examples:"),zyo=l(),f(X3.$$.fragment),Vyo=l(),Ne=a("div"),f(z3.$$.fragment),Wyo=l(),Xte=a("p"),Qyo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hyo=l(),Qa=a("p"),Uyo=o("The model class to instantiate is selected based on the "),zte=a("code"),Jyo=o("model_type"),Yyo=o(` property of the config object (either
passed as an argument or loaded from `),Vte=a("code"),Kyo=o("pretrained_model_name_or_path"),Zyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wte=a("code"),ewo=o("pretrained_model_name_or_path"),owo=o(":"),rwo=l(),D=a("ul"),J2=a("li"),Qte=a("strong"),two=o("albert"),awo=o(" \u2014 "),kI=a("a"),nwo=o("AlbertForTokenClassification"),swo=o(" (ALBERT model)"),lwo=l(),Y2=a("li"),Hte=a("strong"),iwo=o("bert"),dwo=o(" \u2014 "),RI=a("a"),cwo=o("BertForTokenClassification"),fwo=o(" (BERT model)"),mwo=l(),K2=a("li"),Ute=a("strong"),gwo=o("big_bird"),hwo=o(" \u2014 "),SI=a("a"),pwo=o("BigBirdForTokenClassification"),_wo=o(" (BigBird model)"),uwo=l(),Z2=a("li"),Jte=a("strong"),bwo=o("camembert"),vwo=o(" \u2014 "),PI=a("a"),Two=o("CamembertForTokenClassification"),Fwo=o(" (CamemBERT model)"),Cwo=l(),e1=a("li"),Yte=a("strong"),Mwo=o("canine"),Ewo=o(" \u2014 "),$I=a("a"),ywo=o("CanineForTokenClassification"),wwo=o(" (Canine model)"),Awo=l(),o1=a("li"),Kte=a("strong"),Lwo=o("convbert"),Bwo=o(" \u2014 "),II=a("a"),xwo=o("ConvBertForTokenClassification"),kwo=o(" (ConvBERT model)"),Rwo=l(),r1=a("li"),Zte=a("strong"),Swo=o("deberta"),Pwo=o(" \u2014 "),jI=a("a"),$wo=o("DebertaForTokenClassification"),Iwo=o(" (DeBERTa model)"),jwo=l(),t1=a("li"),eae=a("strong"),Nwo=o("deberta-v2"),Dwo=o(" \u2014 "),NI=a("a"),qwo=o("DebertaV2ForTokenClassification"),Gwo=o(" (DeBERTa-v2 model)"),Owo=l(),a1=a("li"),oae=a("strong"),Xwo=o("distilbert"),zwo=o(" \u2014 "),DI=a("a"),Vwo=o("DistilBertForTokenClassification"),Wwo=o(" (DistilBERT model)"),Qwo=l(),n1=a("li"),rae=a("strong"),Hwo=o("electra"),Uwo=o(" \u2014 "),qI=a("a"),Jwo=o("ElectraForTokenClassification"),Ywo=o(" (ELECTRA model)"),Kwo=l(),s1=a("li"),tae=a("strong"),Zwo=o("flaubert"),eAo=o(" \u2014 "),GI=a("a"),oAo=o("FlaubertForTokenClassification"),rAo=o(" (FlauBERT model)"),tAo=l(),l1=a("li"),aae=a("strong"),aAo=o("fnet"),nAo=o(" \u2014 "),OI=a("a"),sAo=o("FNetForTokenClassification"),lAo=o(" (FNet model)"),iAo=l(),i1=a("li"),nae=a("strong"),dAo=o("funnel"),cAo=o(" \u2014 "),XI=a("a"),fAo=o("FunnelForTokenClassification"),mAo=o(" (Funnel Transformer model)"),gAo=l(),d1=a("li"),sae=a("strong"),hAo=o("gpt2"),pAo=o(" \u2014 "),zI=a("a"),_Ao=o("GPT2ForTokenClassification"),uAo=o(" (OpenAI GPT-2 model)"),bAo=l(),c1=a("li"),lae=a("strong"),vAo=o("ibert"),TAo=o(" \u2014 "),VI=a("a"),FAo=o("IBertForTokenClassification"),CAo=o(" (I-BERT model)"),MAo=l(),f1=a("li"),iae=a("strong"),EAo=o("layoutlm"),yAo=o(" \u2014 "),WI=a("a"),wAo=o("LayoutLMForTokenClassification"),AAo=o(" (LayoutLM model)"),LAo=l(),m1=a("li"),dae=a("strong"),BAo=o("layoutlmv2"),xAo=o(" \u2014 "),QI=a("a"),kAo=o("LayoutLMv2ForTokenClassification"),RAo=o(" (LayoutLMv2 model)"),SAo=l(),g1=a("li"),cae=a("strong"),PAo=o("longformer"),$Ao=o(" \u2014 "),HI=a("a"),IAo=o("LongformerForTokenClassification"),jAo=o(" (Longformer model)"),NAo=l(),h1=a("li"),fae=a("strong"),DAo=o("megatron-bert"),qAo=o(" \u2014 "),UI=a("a"),GAo=o("MegatronBertForTokenClassification"),OAo=o(" (MegatronBert model)"),XAo=l(),p1=a("li"),mae=a("strong"),zAo=o("mobilebert"),VAo=o(" \u2014 "),JI=a("a"),WAo=o("MobileBertForTokenClassification"),QAo=o(" (MobileBERT model)"),HAo=l(),_1=a("li"),gae=a("strong"),UAo=o("mpnet"),JAo=o(" \u2014 "),YI=a("a"),YAo=o("MPNetForTokenClassification"),KAo=o(" (MPNet model)"),ZAo=l(),u1=a("li"),hae=a("strong"),e6o=o("nystromformer"),o6o=o(" \u2014 "),KI=a("a"),r6o=o("NystromformerForTokenClassification"),t6o=o(" (Nystromformer model)"),a6o=l(),b1=a("li"),pae=a("strong"),n6o=o("qdqbert"),s6o=o(" \u2014 "),ZI=a("a"),l6o=o("QDQBertForTokenClassification"),i6o=o(" (QDQBert model)"),d6o=l(),v1=a("li"),_ae=a("strong"),c6o=o("rembert"),f6o=o(" \u2014 "),ej=a("a"),m6o=o("RemBertForTokenClassification"),g6o=o(" (RemBERT model)"),h6o=l(),T1=a("li"),uae=a("strong"),p6o=o("roberta"),_6o=o(" \u2014 "),oj=a("a"),u6o=o("RobertaForTokenClassification"),b6o=o(" (RoBERTa model)"),v6o=l(),F1=a("li"),bae=a("strong"),T6o=o("roformer"),F6o=o(" \u2014 "),rj=a("a"),C6o=o("RoFormerForTokenClassification"),M6o=o(" (RoFormer model)"),E6o=l(),C1=a("li"),vae=a("strong"),y6o=o("squeezebert"),w6o=o(" \u2014 "),tj=a("a"),A6o=o("SqueezeBertForTokenClassification"),L6o=o(" (SqueezeBERT model)"),B6o=l(),M1=a("li"),Tae=a("strong"),x6o=o("xlm"),k6o=o(" \u2014 "),aj=a("a"),R6o=o("XLMForTokenClassification"),S6o=o(" (XLM model)"),P6o=l(),E1=a("li"),Fae=a("strong"),$6o=o("xlm-roberta"),I6o=o(" \u2014 "),nj=a("a"),j6o=o("XLMRobertaForTokenClassification"),N6o=o(" (XLM-RoBERTa model)"),D6o=l(),y1=a("li"),Cae=a("strong"),q6o=o("xlm-roberta-xl"),G6o=o(" \u2014 "),sj=a("a"),O6o=o("XLMRobertaXLForTokenClassification"),X6o=o(" (XLM-RoBERTa-XL model)"),z6o=l(),w1=a("li"),Mae=a("strong"),V6o=o("xlnet"),W6o=o(" \u2014 "),lj=a("a"),Q6o=o("XLNetForTokenClassification"),H6o=o(" (XLNet model)"),U6o=l(),A1=a("li"),Eae=a("strong"),J6o=o("yoso"),Y6o=o(" \u2014 "),ij=a("a"),K6o=o("YosoForTokenClassification"),Z6o=o(" (YOSO model)"),e0o=l(),L1=a("p"),o0o=o("The model is set in evaluation mode by default using "),yae=a("code"),r0o=o("model.eval()"),t0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=a("code"),a0o=o("model.train()"),n0o=l(),Aae=a("p"),s0o=o("Examples:"),l0o=l(),f(V3.$$.fragment),X7e=l(),hd=a("h2"),B1=a("a"),Lae=a("span"),f(W3.$$.fragment),i0o=l(),Bae=a("span"),d0o=o("AutoModelForQuestionAnswering"),z7e=l(),er=a("div"),f(Q3.$$.fragment),c0o=l(),pd=a("p"),f0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xae=a("code"),m0o=o("from_pretrained()"),g0o=o("class method or the "),kae=a("code"),h0o=o("from_config()"),p0o=o(`class
method.`),_0o=l(),H3=a("p"),u0o=o("This class cannot be instantiated directly using "),Rae=a("code"),b0o=o("__init__()"),v0o=o(" (throws an error)."),T0o=l(),Qr=a("div"),f(U3.$$.fragment),F0o=l(),Sae=a("p"),C0o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M0o=l(),_d=a("p"),E0o=o(`Note:
Loading a model from its configuration file does `),Pae=a("strong"),y0o=o("not"),w0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=a("code"),A0o=o("from_pretrained()"),L0o=o("to load the model weights."),B0o=l(),Iae=a("p"),x0o=o("Examples:"),k0o=l(),f(J3.$$.fragment),R0o=l(),De=a("div"),f(Y3.$$.fragment),S0o=l(),jae=a("p"),P0o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$0o=l(),Ha=a("p"),I0o=o("The model class to instantiate is selected based on the "),Nae=a("code"),j0o=o("model_type"),N0o=o(` property of the config object (either
passed as an argument or loaded from `),Dae=a("code"),D0o=o("pretrained_model_name_or_path"),q0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qae=a("code"),G0o=o("pretrained_model_name_or_path"),O0o=o(":"),X0o=l(),R=a("ul"),x1=a("li"),Gae=a("strong"),z0o=o("albert"),V0o=o(" \u2014 "),dj=a("a"),W0o=o("AlbertForQuestionAnswering"),Q0o=o(" (ALBERT model)"),H0o=l(),k1=a("li"),Oae=a("strong"),U0o=o("bart"),J0o=o(" \u2014 "),cj=a("a"),Y0o=o("BartForQuestionAnswering"),K0o=o(" (BART model)"),Z0o=l(),R1=a("li"),Xae=a("strong"),eLo=o("bert"),oLo=o(" \u2014 "),fj=a("a"),rLo=o("BertForQuestionAnswering"),tLo=o(" (BERT model)"),aLo=l(),S1=a("li"),zae=a("strong"),nLo=o("big_bird"),sLo=o(" \u2014 "),mj=a("a"),lLo=o("BigBirdForQuestionAnswering"),iLo=o(" (BigBird model)"),dLo=l(),P1=a("li"),Vae=a("strong"),cLo=o("bigbird_pegasus"),fLo=o(" \u2014 "),gj=a("a"),mLo=o("BigBirdPegasusForQuestionAnswering"),gLo=o(" (BigBirdPegasus model)"),hLo=l(),$1=a("li"),Wae=a("strong"),pLo=o("camembert"),_Lo=o(" \u2014 "),hj=a("a"),uLo=o("CamembertForQuestionAnswering"),bLo=o(" (CamemBERT model)"),vLo=l(),I1=a("li"),Qae=a("strong"),TLo=o("canine"),FLo=o(" \u2014 "),pj=a("a"),CLo=o("CanineForQuestionAnswering"),MLo=o(" (Canine model)"),ELo=l(),j1=a("li"),Hae=a("strong"),yLo=o("convbert"),wLo=o(" \u2014 "),_j=a("a"),ALo=o("ConvBertForQuestionAnswering"),LLo=o(" (ConvBERT model)"),BLo=l(),N1=a("li"),Uae=a("strong"),xLo=o("deberta"),kLo=o(" \u2014 "),uj=a("a"),RLo=o("DebertaForQuestionAnswering"),SLo=o(" (DeBERTa model)"),PLo=l(),D1=a("li"),Jae=a("strong"),$Lo=o("deberta-v2"),ILo=o(" \u2014 "),bj=a("a"),jLo=o("DebertaV2ForQuestionAnswering"),NLo=o(" (DeBERTa-v2 model)"),DLo=l(),q1=a("li"),Yae=a("strong"),qLo=o("distilbert"),GLo=o(" \u2014 "),vj=a("a"),OLo=o("DistilBertForQuestionAnswering"),XLo=o(" (DistilBERT model)"),zLo=l(),G1=a("li"),Kae=a("strong"),VLo=o("electra"),WLo=o(" \u2014 "),Tj=a("a"),QLo=o("ElectraForQuestionAnswering"),HLo=o(" (ELECTRA model)"),ULo=l(),O1=a("li"),Zae=a("strong"),JLo=o("flaubert"),YLo=o(" \u2014 "),Fj=a("a"),KLo=o("FlaubertForQuestionAnsweringSimple"),ZLo=o(" (FlauBERT model)"),e7o=l(),X1=a("li"),ene=a("strong"),o7o=o("fnet"),r7o=o(" \u2014 "),Cj=a("a"),t7o=o("FNetForQuestionAnswering"),a7o=o(" (FNet model)"),n7o=l(),z1=a("li"),one=a("strong"),s7o=o("funnel"),l7o=o(" \u2014 "),Mj=a("a"),i7o=o("FunnelForQuestionAnswering"),d7o=o(" (Funnel Transformer model)"),c7o=l(),V1=a("li"),rne=a("strong"),f7o=o("gptj"),m7o=o(" \u2014 "),Ej=a("a"),g7o=o("GPTJForQuestionAnswering"),h7o=o(" (GPT-J model)"),p7o=l(),W1=a("li"),tne=a("strong"),_7o=o("ibert"),u7o=o(" \u2014 "),yj=a("a"),b7o=o("IBertForQuestionAnswering"),v7o=o(" (I-BERT model)"),T7o=l(),Q1=a("li"),ane=a("strong"),F7o=o("layoutlmv2"),C7o=o(" \u2014 "),wj=a("a"),M7o=o("LayoutLMv2ForQuestionAnswering"),E7o=o(" (LayoutLMv2 model)"),y7o=l(),H1=a("li"),nne=a("strong"),w7o=o("led"),A7o=o(" \u2014 "),Aj=a("a"),L7o=o("LEDForQuestionAnswering"),B7o=o(" (LED model)"),x7o=l(),U1=a("li"),sne=a("strong"),k7o=o("longformer"),R7o=o(" \u2014 "),Lj=a("a"),S7o=o("LongformerForQuestionAnswering"),P7o=o(" (Longformer model)"),$7o=l(),J1=a("li"),lne=a("strong"),I7o=o("lxmert"),j7o=o(" \u2014 "),Bj=a("a"),N7o=o("LxmertForQuestionAnswering"),D7o=o(" (LXMERT model)"),q7o=l(),Y1=a("li"),ine=a("strong"),G7o=o("mbart"),O7o=o(" \u2014 "),xj=a("a"),X7o=o("MBartForQuestionAnswering"),z7o=o(" (mBART model)"),V7o=l(),K1=a("li"),dne=a("strong"),W7o=o("megatron-bert"),Q7o=o(" \u2014 "),kj=a("a"),H7o=o("MegatronBertForQuestionAnswering"),U7o=o(" (MegatronBert model)"),J7o=l(),Z1=a("li"),cne=a("strong"),Y7o=o("mobilebert"),K7o=o(" \u2014 "),Rj=a("a"),Z7o=o("MobileBertForQuestionAnswering"),e8o=o(" (MobileBERT model)"),o8o=l(),eb=a("li"),fne=a("strong"),r8o=o("mpnet"),t8o=o(" \u2014 "),Sj=a("a"),a8o=o("MPNetForQuestionAnswering"),n8o=o(" (MPNet model)"),s8o=l(),ob=a("li"),mne=a("strong"),l8o=o("nystromformer"),i8o=o(" \u2014 "),Pj=a("a"),d8o=o("NystromformerForQuestionAnswering"),c8o=o(" (Nystromformer model)"),f8o=l(),rb=a("li"),gne=a("strong"),m8o=o("qdqbert"),g8o=o(" \u2014 "),$j=a("a"),h8o=o("QDQBertForQuestionAnswering"),p8o=o(" (QDQBert model)"),_8o=l(),tb=a("li"),hne=a("strong"),u8o=o("reformer"),b8o=o(" \u2014 "),Ij=a("a"),v8o=o("ReformerForQuestionAnswering"),T8o=o(" (Reformer model)"),F8o=l(),ab=a("li"),pne=a("strong"),C8o=o("rembert"),M8o=o(" \u2014 "),jj=a("a"),E8o=o("RemBertForQuestionAnswering"),y8o=o(" (RemBERT model)"),w8o=l(),nb=a("li"),_ne=a("strong"),A8o=o("roberta"),L8o=o(" \u2014 "),Nj=a("a"),B8o=o("RobertaForQuestionAnswering"),x8o=o(" (RoBERTa model)"),k8o=l(),sb=a("li"),une=a("strong"),R8o=o("roformer"),S8o=o(" \u2014 "),Dj=a("a"),P8o=o("RoFormerForQuestionAnswering"),$8o=o(" (RoFormer model)"),I8o=l(),lb=a("li"),bne=a("strong"),j8o=o("splinter"),N8o=o(" \u2014 "),qj=a("a"),D8o=o("SplinterForQuestionAnswering"),q8o=o(" (Splinter model)"),G8o=l(),ib=a("li"),vne=a("strong"),O8o=o("squeezebert"),X8o=o(" \u2014 "),Gj=a("a"),z8o=o("SqueezeBertForQuestionAnswering"),V8o=o(" (SqueezeBERT model)"),W8o=l(),db=a("li"),Tne=a("strong"),Q8o=o("xlm"),H8o=o(" \u2014 "),Oj=a("a"),U8o=o("XLMForQuestionAnsweringSimple"),J8o=o(" (XLM model)"),Y8o=l(),cb=a("li"),Fne=a("strong"),K8o=o("xlm-roberta"),Z8o=o(" \u2014 "),Xj=a("a"),eBo=o("XLMRobertaForQuestionAnswering"),oBo=o(" (XLM-RoBERTa model)"),rBo=l(),fb=a("li"),Cne=a("strong"),tBo=o("xlm-roberta-xl"),aBo=o(" \u2014 "),zj=a("a"),nBo=o("XLMRobertaXLForQuestionAnswering"),sBo=o(" (XLM-RoBERTa-XL model)"),lBo=l(),mb=a("li"),Mne=a("strong"),iBo=o("xlnet"),dBo=o(" \u2014 "),Vj=a("a"),cBo=o("XLNetForQuestionAnsweringSimple"),fBo=o(" (XLNet model)"),mBo=l(),gb=a("li"),Ene=a("strong"),gBo=o("yoso"),hBo=o(" \u2014 "),Wj=a("a"),pBo=o("YosoForQuestionAnswering"),_Bo=o(" (YOSO model)"),uBo=l(),hb=a("p"),bBo=o("The model is set in evaluation mode by default using "),yne=a("code"),vBo=o("model.eval()"),TBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wne=a("code"),FBo=o("model.train()"),CBo=l(),Ane=a("p"),MBo=o("Examples:"),EBo=l(),f(K3.$$.fragment),V7e=l(),ud=a("h2"),pb=a("a"),Lne=a("span"),f(Z3.$$.fragment),yBo=l(),Bne=a("span"),wBo=o("AutoModelForTableQuestionAnswering"),W7e=l(),or=a("div"),f(ey.$$.fragment),ABo=l(),bd=a("p"),LBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xne=a("code"),BBo=o("from_pretrained()"),xBo=o("class method or the "),kne=a("code"),kBo=o("from_config()"),RBo=o(`class
method.`),SBo=l(),oy=a("p"),PBo=o("This class cannot be instantiated directly using "),Rne=a("code"),$Bo=o("__init__()"),IBo=o(" (throws an error)."),jBo=l(),Hr=a("div"),f(ry.$$.fragment),NBo=l(),Sne=a("p"),DBo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qBo=l(),vd=a("p"),GBo=o(`Note:
Loading a model from its configuration file does `),Pne=a("strong"),OBo=o("not"),XBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ne=a("code"),zBo=o("from_pretrained()"),VBo=o("to load the model weights."),WBo=l(),Ine=a("p"),QBo=o("Examples:"),HBo=l(),f(ty.$$.fragment),UBo=l(),qe=a("div"),f(ay.$$.fragment),JBo=l(),jne=a("p"),YBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),KBo=l(),Ua=a("p"),ZBo=o("The model class to instantiate is selected based on the "),Nne=a("code"),exo=o("model_type"),oxo=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),rxo=o("pretrained_model_name_or_path"),txo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=a("code"),axo=o("pretrained_model_name_or_path"),nxo=o(":"),sxo=l(),Gne=a("ul"),_b=a("li"),One=a("strong"),lxo=o("tapas"),ixo=o(" \u2014 "),Qj=a("a"),dxo=o("TapasForQuestionAnswering"),cxo=o(" (TAPAS model)"),fxo=l(),ub=a("p"),mxo=o("The model is set in evaluation mode by default using "),Xne=a("code"),gxo=o("model.eval()"),hxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),pxo=o("model.train()"),_xo=l(),Vne=a("p"),uxo=o("Examples:"),bxo=l(),f(ny.$$.fragment),Q7e=l(),Td=a("h2"),bb=a("a"),Wne=a("span"),f(sy.$$.fragment),vxo=l(),Qne=a("span"),Txo=o("AutoModelForImageClassification"),H7e=l(),rr=a("div"),f(ly.$$.fragment),Fxo=l(),Fd=a("p"),Cxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hne=a("code"),Mxo=o("from_pretrained()"),Exo=o("class method or the "),Une=a("code"),yxo=o("from_config()"),wxo=o(`class
method.`),Axo=l(),iy=a("p"),Lxo=o("This class cannot be instantiated directly using "),Jne=a("code"),Bxo=o("__init__()"),xxo=o(" (throws an error)."),kxo=l(),Ur=a("div"),f(dy.$$.fragment),Rxo=l(),Yne=a("p"),Sxo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pxo=l(),Cd=a("p"),$xo=o(`Note:
Loading a model from its configuration file does `),Kne=a("strong"),Ixo=o("not"),jxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=a("code"),Nxo=o("from_pretrained()"),Dxo=o("to load the model weights."),qxo=l(),ese=a("p"),Gxo=o("Examples:"),Oxo=l(),f(cy.$$.fragment),Xxo=l(),Ge=a("div"),f(fy.$$.fragment),zxo=l(),ose=a("p"),Vxo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wxo=l(),Ja=a("p"),Qxo=o("The model class to instantiate is selected based on the "),rse=a("code"),Hxo=o("model_type"),Uxo=o(` property of the config object (either
passed as an argument or loaded from `),tse=a("code"),Jxo=o("pretrained_model_name_or_path"),Yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=a("code"),Kxo=o("pretrained_model_name_or_path"),Zxo=o(":"),eko=l(),be=a("ul"),vb=a("li"),nse=a("strong"),oko=o("beit"),rko=o(" \u2014 "),Hj=a("a"),tko=o("BeitForImageClassification"),ako=o(" (BEiT model)"),nko=l(),Tb=a("li"),sse=a("strong"),sko=o("convnext"),lko=o(" \u2014 "),Uj=a("a"),iko=o("ConvNextForImageClassification"),dko=o(" (ConvNext model)"),cko=l(),Ss=a("li"),lse=a("strong"),fko=o("deit"),mko=o(" \u2014 "),Jj=a("a"),gko=o("DeiTForImageClassification"),hko=o(" or "),Yj=a("a"),pko=o("DeiTForImageClassificationWithTeacher"),_ko=o(" (DeiT model)"),uko=l(),Fb=a("li"),ise=a("strong"),bko=o("imagegpt"),vko=o(" \u2014 "),Kj=a("a"),Tko=o("ImageGPTForImageClassification"),Fko=o(" (ImageGPT model)"),Cko=l(),la=a("li"),dse=a("strong"),Mko=o("perceiver"),Eko=o(" \u2014 "),Zj=a("a"),yko=o("PerceiverForImageClassificationLearned"),wko=o(" or "),eN=a("a"),Ako=o("PerceiverForImageClassificationFourier"),Lko=o(" or "),oN=a("a"),Bko=o("PerceiverForImageClassificationConvProcessing"),xko=o(" (Perceiver model)"),kko=l(),Cb=a("li"),cse=a("strong"),Rko=o("poolformer"),Sko=o(" \u2014 "),rN=a("a"),Pko=o("PoolFormerForImageClassification"),$ko=o(" (PoolFormer model)"),Iko=l(),Mb=a("li"),fse=a("strong"),jko=o("segformer"),Nko=o(" \u2014 "),tN=a("a"),Dko=o("SegformerForImageClassification"),qko=o(" (SegFormer model)"),Gko=l(),Eb=a("li"),mse=a("strong"),Oko=o("swin"),Xko=o(" \u2014 "),aN=a("a"),zko=o("SwinForImageClassification"),Vko=o(" (Swin model)"),Wko=l(),yb=a("li"),gse=a("strong"),Qko=o("vit"),Hko=o(" \u2014 "),nN=a("a"),Uko=o("ViTForImageClassification"),Jko=o(" (ViT model)"),Yko=l(),wb=a("p"),Kko=o("The model is set in evaluation mode by default using "),hse=a("code"),Zko=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=a("code"),oRo=o("model.train()"),rRo=l(),_se=a("p"),tRo=o("Examples:"),aRo=l(),f(my.$$.fragment),U7e=l(),Md=a("h2"),Ab=a("a"),use=a("span"),f(gy.$$.fragment),nRo=l(),bse=a("span"),sRo=o("AutoModelForVision2Seq"),J7e=l(),tr=a("div"),f(hy.$$.fragment),lRo=l(),Ed=a("p"),iRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vse=a("code"),dRo=o("from_pretrained()"),cRo=o("class method or the "),Tse=a("code"),fRo=o("from_config()"),mRo=o(`class
method.`),gRo=l(),py=a("p"),hRo=o("This class cannot be instantiated directly using "),Fse=a("code"),pRo=o("__init__()"),_Ro=o(" (throws an error)."),uRo=l(),Jr=a("div"),f(_y.$$.fragment),bRo=l(),Cse=a("p"),vRo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TRo=l(),yd=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),CRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ese=a("code"),ERo=o("from_pretrained()"),yRo=o("to load the model weights."),wRo=l(),yse=a("p"),ARo=o("Examples:"),LRo=l(),f(uy.$$.fragment),BRo=l(),Oe=a("div"),f(by.$$.fragment),xRo=l(),wse=a("p"),kRo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RRo=l(),Ya=a("p"),SRo=o("The model class to instantiate is selected based on the "),Ase=a("code"),PRo=o("model_type"),$Ro=o(` property of the config object (either
passed as an argument or loaded from `),Lse=a("code"),IRo=o("pretrained_model_name_or_path"),jRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),NRo=o("pretrained_model_name_or_path"),DRo=o(":"),qRo=l(),xse=a("ul"),Lb=a("li"),kse=a("strong"),GRo=o("vision-encoder-decoder"),ORo=o(" \u2014 "),sN=a("a"),XRo=o("VisionEncoderDecoderModel"),zRo=o(" (Vision Encoder decoder model)"),VRo=l(),Bb=a("p"),WRo=o("The model is set in evaluation mode by default using "),Rse=a("code"),QRo=o("model.eval()"),HRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=a("code"),URo=o("model.train()"),JRo=l(),Pse=a("p"),YRo=o("Examples:"),KRo=l(),f(vy.$$.fragment),Y7e=l(),wd=a("h2"),xb=a("a"),$se=a("span"),f(Ty.$$.fragment),ZRo=l(),Ise=a("span"),eSo=o("AutoModelForAudioClassification"),K7e=l(),ar=a("div"),f(Fy.$$.fragment),oSo=l(),Ad=a("p"),rSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jse=a("code"),tSo=o("from_pretrained()"),aSo=o("class method or the "),Nse=a("code"),nSo=o("from_config()"),sSo=o(`class
method.`),lSo=l(),Cy=a("p"),iSo=o("This class cannot be instantiated directly using "),Dse=a("code"),dSo=o("__init__()"),cSo=o(" (throws an error)."),fSo=l(),Yr=a("div"),f(My.$$.fragment),mSo=l(),qse=a("p"),gSo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hSo=l(),Ld=a("p"),pSo=o(`Note:
Loading a model from its configuration file does `),Gse=a("strong"),_So=o("not"),uSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ose=a("code"),bSo=o("from_pretrained()"),vSo=o("to load the model weights."),TSo=l(),Xse=a("p"),FSo=o("Examples:"),CSo=l(),f(Ey.$$.fragment),MSo=l(),Xe=a("div"),f(yy.$$.fragment),ESo=l(),zse=a("p"),ySo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wSo=l(),Ka=a("p"),ASo=o("The model class to instantiate is selected based on the "),Vse=a("code"),LSo=o("model_type"),BSo=o(` property of the config object (either
passed as an argument or loaded from `),Wse=a("code"),xSo=o("pretrained_model_name_or_path"),kSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=a("code"),RSo=o("pretrained_model_name_or_path"),SSo=o(":"),PSo=l(),ao=a("ul"),kb=a("li"),Hse=a("strong"),$So=o("hubert"),ISo=o(" \u2014 "),lN=a("a"),jSo=o("HubertForSequenceClassification"),NSo=o(" (Hubert model)"),DSo=l(),Rb=a("li"),Use=a("strong"),qSo=o("sew"),GSo=o(" \u2014 "),iN=a("a"),OSo=o("SEWForSequenceClassification"),XSo=o(" (SEW model)"),zSo=l(),Sb=a("li"),Jse=a("strong"),VSo=o("sew-d"),WSo=o(" \u2014 "),dN=a("a"),QSo=o("SEWDForSequenceClassification"),HSo=o(" (SEW-D model)"),USo=l(),Pb=a("li"),Yse=a("strong"),JSo=o("unispeech"),YSo=o(" \u2014 "),cN=a("a"),KSo=o("UniSpeechForSequenceClassification"),ZSo=o(" (UniSpeech model)"),ePo=l(),$b=a("li"),Kse=a("strong"),oPo=o("unispeech-sat"),rPo=o(" \u2014 "),fN=a("a"),tPo=o("UniSpeechSatForSequenceClassification"),aPo=o(" (UniSpeechSat model)"),nPo=l(),Ib=a("li"),Zse=a("strong"),sPo=o("wav2vec2"),lPo=o(" \u2014 "),mN=a("a"),iPo=o("Wav2Vec2ForSequenceClassification"),dPo=o(" (Wav2Vec2 model)"),cPo=l(),jb=a("li"),ele=a("strong"),fPo=o("wavlm"),mPo=o(" \u2014 "),gN=a("a"),gPo=o("WavLMForSequenceClassification"),hPo=o(" (WavLM model)"),pPo=l(),Nb=a("p"),_Po=o("The model is set in evaluation mode by default using "),ole=a("code"),uPo=o("model.eval()"),bPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=a("code"),vPo=o("model.train()"),TPo=l(),tle=a("p"),FPo=o("Examples:"),CPo=l(),f(wy.$$.fragment),Z7e=l(),Bd=a("h2"),Db=a("a"),ale=a("span"),f(Ay.$$.fragment),MPo=l(),nle=a("span"),EPo=o("AutoModelForAudioFrameClassification"),e8e=l(),nr=a("div"),f(Ly.$$.fragment),yPo=l(),xd=a("p"),wPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sle=a("code"),APo=o("from_pretrained()"),LPo=o("class method or the "),lle=a("code"),BPo=o("from_config()"),xPo=o(`class
method.`),kPo=l(),By=a("p"),RPo=o("This class cannot be instantiated directly using "),ile=a("code"),SPo=o("__init__()"),PPo=o(" (throws an error)."),$Po=l(),Kr=a("div"),f(xy.$$.fragment),IPo=l(),dle=a("p"),jPo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),NPo=l(),kd=a("p"),DPo=o(`Note:
Loading a model from its configuration file does `),cle=a("strong"),qPo=o("not"),GPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fle=a("code"),OPo=o("from_pretrained()"),XPo=o("to load the model weights."),zPo=l(),mle=a("p"),VPo=o("Examples:"),WPo=l(),f(ky.$$.fragment),QPo=l(),ze=a("div"),f(Ry.$$.fragment),HPo=l(),gle=a("p"),UPo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JPo=l(),Za=a("p"),YPo=o("The model class to instantiate is selected based on the "),hle=a("code"),KPo=o("model_type"),ZPo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),e$o=o("pretrained_model_name_or_path"),o$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),r$o=o("pretrained_model_name_or_path"),t$o=o(":"),a$o=l(),Rd=a("ul"),qb=a("li"),ule=a("strong"),n$o=o("unispeech-sat"),s$o=o(" \u2014 "),hN=a("a"),l$o=o("UniSpeechSatForAudioFrameClassification"),i$o=o(" (UniSpeechSat model)"),d$o=l(),Gb=a("li"),ble=a("strong"),c$o=o("wav2vec2"),f$o=o(" \u2014 "),pN=a("a"),m$o=o("Wav2Vec2ForAudioFrameClassification"),g$o=o(" (Wav2Vec2 model)"),h$o=l(),Ob=a("li"),vle=a("strong"),p$o=o("wavlm"),_$o=o(" \u2014 "),_N=a("a"),u$o=o("WavLMForAudioFrameClassification"),b$o=o(" (WavLM model)"),v$o=l(),Xb=a("p"),T$o=o("The model is set in evaluation mode by default using "),Tle=a("code"),F$o=o("model.eval()"),C$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=a("code"),M$o=o("model.train()"),E$o=l(),Cle=a("p"),y$o=o("Examples:"),w$o=l(),f(Sy.$$.fragment),o8e=l(),Sd=a("h2"),zb=a("a"),Mle=a("span"),f(Py.$$.fragment),A$o=l(),Ele=a("span"),L$o=o("AutoModelForCTC"),r8e=l(),sr=a("div"),f($y.$$.fragment),B$o=l(),Pd=a("p"),x$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yle=a("code"),k$o=o("from_pretrained()"),R$o=o("class method or the "),wle=a("code"),S$o=o("from_config()"),P$o=o(`class
method.`),$$o=l(),Iy=a("p"),I$o=o("This class cannot be instantiated directly using "),Ale=a("code"),j$o=o("__init__()"),N$o=o(" (throws an error)."),D$o=l(),Zr=a("div"),f(jy.$$.fragment),q$o=l(),Lle=a("p"),G$o=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),O$o=l(),$d=a("p"),X$o=o(`Note:
Loading a model from its configuration file does `),Ble=a("strong"),z$o=o("not"),V$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xle=a("code"),W$o=o("from_pretrained()"),Q$o=o("to load the model weights."),H$o=l(),kle=a("p"),U$o=o("Examples:"),J$o=l(),f(Ny.$$.fragment),Y$o=l(),Ve=a("div"),f(Dy.$$.fragment),K$o=l(),Rle=a("p"),Z$o=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),eIo=l(),en=a("p"),oIo=o("The model class to instantiate is selected based on the "),Sle=a("code"),rIo=o("model_type"),tIo=o(` property of the config object (either
passed as an argument or loaded from `),Ple=a("code"),aIo=o("pretrained_model_name_or_path"),nIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),sIo=o("pretrained_model_name_or_path"),lIo=o(":"),iIo=l(),no=a("ul"),Vb=a("li"),Ile=a("strong"),dIo=o("hubert"),cIo=o(" \u2014 "),uN=a("a"),fIo=o("HubertForCTC"),mIo=o(" (Hubert model)"),gIo=l(),Wb=a("li"),jle=a("strong"),hIo=o("sew"),pIo=o(" \u2014 "),bN=a("a"),_Io=o("SEWForCTC"),uIo=o(" (SEW model)"),bIo=l(),Qb=a("li"),Nle=a("strong"),vIo=o("sew-d"),TIo=o(" \u2014 "),vN=a("a"),FIo=o("SEWDForCTC"),CIo=o(" (SEW-D model)"),MIo=l(),Hb=a("li"),Dle=a("strong"),EIo=o("unispeech"),yIo=o(" \u2014 "),TN=a("a"),wIo=o("UniSpeechForCTC"),AIo=o(" (UniSpeech model)"),LIo=l(),Ub=a("li"),qle=a("strong"),BIo=o("unispeech-sat"),xIo=o(" \u2014 "),FN=a("a"),kIo=o("UniSpeechSatForCTC"),RIo=o(" (UniSpeechSat model)"),SIo=l(),Jb=a("li"),Gle=a("strong"),PIo=o("wav2vec2"),$Io=o(" \u2014 "),CN=a("a"),IIo=o("Wav2Vec2ForCTC"),jIo=o(" (Wav2Vec2 model)"),NIo=l(),Yb=a("li"),Ole=a("strong"),DIo=o("wavlm"),qIo=o(" \u2014 "),MN=a("a"),GIo=o("WavLMForCTC"),OIo=o(" (WavLM model)"),XIo=l(),Kb=a("p"),zIo=o("The model is set in evaluation mode by default using "),Xle=a("code"),VIo=o("model.eval()"),WIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=a("code"),QIo=o("model.train()"),HIo=l(),Vle=a("p"),UIo=o("Examples:"),JIo=l(),f(qy.$$.fragment),t8e=l(),Id=a("h2"),Zb=a("a"),Wle=a("span"),f(Gy.$$.fragment),YIo=l(),Qle=a("span"),KIo=o("AutoModelForSpeechSeq2Seq"),a8e=l(),lr=a("div"),f(Oy.$$.fragment),ZIo=l(),jd=a("p"),ejo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hle=a("code"),ojo=o("from_pretrained()"),rjo=o("class method or the "),Ule=a("code"),tjo=o("from_config()"),ajo=o(`class
method.`),njo=l(),Xy=a("p"),sjo=o("This class cannot be instantiated directly using "),Jle=a("code"),ljo=o("__init__()"),ijo=o(" (throws an error)."),djo=l(),et=a("div"),f(zy.$$.fragment),cjo=l(),Yle=a("p"),fjo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mjo=l(),Nd=a("p"),gjo=o(`Note:
Loading a model from its configuration file does `),Kle=a("strong"),hjo=o("not"),pjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zle=a("code"),_jo=o("from_pretrained()"),ujo=o("to load the model weights."),bjo=l(),eie=a("p"),vjo=o("Examples:"),Tjo=l(),f(Vy.$$.fragment),Fjo=l(),We=a("div"),f(Wy.$$.fragment),Cjo=l(),oie=a("p"),Mjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ejo=l(),on=a("p"),yjo=o("The model class to instantiate is selected based on the "),rie=a("code"),wjo=o("model_type"),Ajo=o(` property of the config object (either
passed as an argument or loaded from `),tie=a("code"),Ljo=o("pretrained_model_name_or_path"),Bjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aie=a("code"),xjo=o("pretrained_model_name_or_path"),kjo=o(":"),Rjo=l(),Qy=a("ul"),ev=a("li"),nie=a("strong"),Sjo=o("speech-encoder-decoder"),Pjo=o(" \u2014 "),EN=a("a"),$jo=o("SpeechEncoderDecoderModel"),Ijo=o(" (Speech Encoder decoder model)"),jjo=l(),ov=a("li"),sie=a("strong"),Njo=o("speech_to_text"),Djo=o(" \u2014 "),yN=a("a"),qjo=o("Speech2TextForConditionalGeneration"),Gjo=o(" (Speech2Text model)"),Ojo=l(),rv=a("p"),Xjo=o("The model is set in evaluation mode by default using "),lie=a("code"),zjo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=a("code"),Wjo=o("model.train()"),Qjo=l(),die=a("p"),Hjo=o("Examples:"),Ujo=l(),f(Hy.$$.fragment),n8e=l(),Dd=a("h2"),tv=a("a"),cie=a("span"),f(Uy.$$.fragment),Jjo=l(),fie=a("span"),Yjo=o("AutoModelForAudioXVector"),s8e=l(),ir=a("div"),f(Jy.$$.fragment),Kjo=l(),qd=a("p"),Zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mie=a("code"),eNo=o("from_pretrained()"),oNo=o("class method or the "),gie=a("code"),rNo=o("from_config()"),tNo=o(`class
method.`),aNo=l(),Yy=a("p"),nNo=o("This class cannot be instantiated directly using "),hie=a("code"),sNo=o("__init__()"),lNo=o(" (throws an error)."),iNo=l(),ot=a("div"),f(Ky.$$.fragment),dNo=l(),pie=a("p"),cNo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fNo=l(),Gd=a("p"),mNo=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),gNo=o("not"),hNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=a("code"),pNo=o("from_pretrained()"),_No=o("to load the model weights."),uNo=l(),bie=a("p"),bNo=o("Examples:"),vNo=l(),f(Zy.$$.fragment),TNo=l(),Qe=a("div"),f(ew.$$.fragment),FNo=l(),vie=a("p"),CNo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MNo=l(),rn=a("p"),ENo=o("The model class to instantiate is selected based on the "),Tie=a("code"),yNo=o("model_type"),wNo=o(` property of the config object (either
passed as an argument or loaded from `),Fie=a("code"),ANo=o("pretrained_model_name_or_path"),LNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=a("code"),BNo=o("pretrained_model_name_or_path"),xNo=o(":"),kNo=l(),Od=a("ul"),av=a("li"),Mie=a("strong"),RNo=o("unispeech-sat"),SNo=o(" \u2014 "),wN=a("a"),PNo=o("UniSpeechSatForXVector"),$No=o(" (UniSpeechSat model)"),INo=l(),nv=a("li"),Eie=a("strong"),jNo=o("wav2vec2"),NNo=o(" \u2014 "),AN=a("a"),DNo=o("Wav2Vec2ForXVector"),qNo=o(" (Wav2Vec2 model)"),GNo=l(),sv=a("li"),yie=a("strong"),ONo=o("wavlm"),XNo=o(" \u2014 "),LN=a("a"),zNo=o("WavLMForXVector"),VNo=o(" (WavLM model)"),WNo=l(),lv=a("p"),QNo=o("The model is set in evaluation mode by default using "),wie=a("code"),HNo=o("model.eval()"),UNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),JNo=o("model.train()"),YNo=l(),Lie=a("p"),KNo=o("Examples:"),ZNo=l(),f(ow.$$.fragment),l8e=l(),Xd=a("h2"),iv=a("a"),Bie=a("span"),f(rw.$$.fragment),eDo=l(),xie=a("span"),oDo=o("AutoModelForMaskedImageModeling"),i8e=l(),dr=a("div"),f(tw.$$.fragment),rDo=l(),zd=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kie=a("code"),aDo=o("from_pretrained()"),nDo=o("class method or the "),Rie=a("code"),sDo=o("from_config()"),lDo=o(`class
method.`),iDo=l(),aw=a("p"),dDo=o("This class cannot be instantiated directly using "),Sie=a("code"),cDo=o("__init__()"),fDo=o(" (throws an error)."),mDo=l(),rt=a("div"),f(nw.$$.fragment),gDo=l(),Pie=a("p"),hDo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),pDo=l(),Vd=a("p"),_Do=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),uDo=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iie=a("code"),vDo=o("from_pretrained()"),TDo=o("to load the model weights."),FDo=l(),jie=a("p"),CDo=o("Examples:"),MDo=l(),f(sw.$$.fragment),EDo=l(),He=a("div"),f(lw.$$.fragment),yDo=l(),Nie=a("p"),wDo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ADo=l(),tn=a("p"),LDo=o("The model class to instantiate is selected based on the "),Die=a("code"),BDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),qie=a("code"),kDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=a("code"),SDo=o("pretrained_model_name_or_path"),PDo=o(":"),$Do=l(),Wd=a("ul"),dv=a("li"),Oie=a("strong"),IDo=o("deit"),jDo=o(" \u2014 "),BN=a("a"),NDo=o("DeiTForMaskedImageModeling"),DDo=o(" (DeiT model)"),qDo=l(),cv=a("li"),Xie=a("strong"),GDo=o("swin"),ODo=o(" \u2014 "),xN=a("a"),XDo=o("SwinForMaskedImageModeling"),zDo=o(" (Swin model)"),VDo=l(),fv=a("li"),zie=a("strong"),WDo=o("vit"),QDo=o(" \u2014 "),kN=a("a"),HDo=o("ViTForMaskedImageModeling"),UDo=o(" (ViT model)"),JDo=l(),mv=a("p"),YDo=o("The model is set in evaluation mode by default using "),Vie=a("code"),KDo=o("model.eval()"),ZDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),eqo=o("model.train()"),oqo=l(),Qie=a("p"),rqo=o("Examples:"),tqo=l(),f(iw.$$.fragment),d8e=l(),Qd=a("h2"),gv=a("a"),Hie=a("span"),f(dw.$$.fragment),aqo=l(),Uie=a("span"),nqo=o("AutoModelForObjectDetection"),c8e=l(),cr=a("div"),f(cw.$$.fragment),sqo=l(),Hd=a("p"),lqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Jie=a("code"),iqo=o("from_pretrained()"),dqo=o("class method or the "),Yie=a("code"),cqo=o("from_config()"),fqo=o(`class
method.`),mqo=l(),fw=a("p"),gqo=o("This class cannot be instantiated directly using "),Kie=a("code"),hqo=o("__init__()"),pqo=o(" (throws an error)."),_qo=l(),tt=a("div"),f(mw.$$.fragment),uqo=l(),Zie=a("p"),bqo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vqo=l(),Ud=a("p"),Tqo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),Fqo=o("not"),Cqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=a("code"),Mqo=o("from_pretrained()"),Eqo=o("to load the model weights."),yqo=l(),rde=a("p"),wqo=o("Examples:"),Aqo=l(),f(gw.$$.fragment),Lqo=l(),Ue=a("div"),f(hw.$$.fragment),Bqo=l(),tde=a("p"),xqo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kqo=l(),an=a("p"),Rqo=o("The model class to instantiate is selected based on the "),ade=a("code"),Sqo=o("model_type"),Pqo=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),jqo=o("pretrained_model_name_or_path"),Nqo=o(":"),Dqo=l(),lde=a("ul"),hv=a("li"),ide=a("strong"),qqo=o("detr"),Gqo=o(" \u2014 "),RN=a("a"),Oqo=o("DetrForObjectDetection"),Xqo=o(" (DETR model)"),zqo=l(),pv=a("p"),Vqo=o("The model is set in evaluation mode by default using "),dde=a("code"),Wqo=o("model.eval()"),Qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),Hqo=o("model.train()"),Uqo=l(),fde=a("p"),Jqo=o("Examples:"),Yqo=l(),f(pw.$$.fragment),f8e=l(),Jd=a("h2"),_v=a("a"),mde=a("span"),f(_w.$$.fragment),Kqo=l(),gde=a("span"),Zqo=o("AutoModelForImageSegmentation"),m8e=l(),fr=a("div"),f(uw.$$.fragment),eGo=l(),Yd=a("p"),oGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hde=a("code"),rGo=o("from_pretrained()"),tGo=o("class method or the "),pde=a("code"),aGo=o("from_config()"),nGo=o(`class
method.`),sGo=l(),bw=a("p"),lGo=o("This class cannot be instantiated directly using "),_de=a("code"),iGo=o("__init__()"),dGo=o(" (throws an error)."),cGo=l(),at=a("div"),f(vw.$$.fragment),fGo=l(),ude=a("p"),mGo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gGo=l(),Kd=a("p"),hGo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),pGo=o("not"),_Go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=a("code"),uGo=o("from_pretrained()"),bGo=o("to load the model weights."),vGo=l(),Tde=a("p"),TGo=o("Examples:"),FGo=l(),f(Tw.$$.fragment),CGo=l(),Je=a("div"),f(Fw.$$.fragment),MGo=l(),Fde=a("p"),EGo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),yGo=l(),nn=a("p"),wGo=o("The model class to instantiate is selected based on the "),Cde=a("code"),AGo=o("model_type"),LGo=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),BGo=o("pretrained_model_name_or_path"),xGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),kGo=o("pretrained_model_name_or_path"),RGo=o(":"),SGo=l(),yde=a("ul"),uv=a("li"),wde=a("strong"),PGo=o("detr"),$Go=o(" \u2014 "),SN=a("a"),IGo=o("DetrForSegmentation"),jGo=o(" (DETR model)"),NGo=l(),bv=a("p"),DGo=o("The model is set in evaluation mode by default using "),Ade=a("code"),qGo=o("model.eval()"),GGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=a("code"),OGo=o("model.train()"),XGo=l(),Bde=a("p"),zGo=o("Examples:"),VGo=l(),f(Cw.$$.fragment),g8e=l(),Zd=a("h2"),vv=a("a"),xde=a("span"),f(Mw.$$.fragment),WGo=l(),kde=a("span"),QGo=o("AutoModelForSemanticSegmentation"),h8e=l(),mr=a("div"),f(Ew.$$.fragment),HGo=l(),ec=a("p"),UGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Rde=a("code"),JGo=o("from_pretrained()"),YGo=o("class method or the "),Sde=a("code"),KGo=o("from_config()"),ZGo=o(`class
method.`),eOo=l(),yw=a("p"),oOo=o("This class cannot be instantiated directly using "),Pde=a("code"),rOo=o("__init__()"),tOo=o(" (throws an error)."),aOo=l(),nt=a("div"),f(ww.$$.fragment),nOo=l(),$de=a("p"),sOo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lOo=l(),oc=a("p"),iOo=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),dOo=o("not"),cOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jde=a("code"),fOo=o("from_pretrained()"),mOo=o("to load the model weights."),gOo=l(),Nde=a("p"),hOo=o("Examples:"),pOo=l(),f(Aw.$$.fragment),_Oo=l(),Ye=a("div"),f(Lw.$$.fragment),uOo=l(),Dde=a("p"),bOo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vOo=l(),sn=a("p"),TOo=o("The model class to instantiate is selected based on the "),qde=a("code"),FOo=o("model_type"),COo=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),MOo=o("pretrained_model_name_or_path"),EOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),yOo=o("pretrained_model_name_or_path"),wOo=o(":"),AOo=l(),Bw=a("ul"),Tv=a("li"),Xde=a("strong"),LOo=o("beit"),BOo=o(" \u2014 "),PN=a("a"),xOo=o("BeitForSemanticSegmentation"),kOo=o(" (BEiT model)"),ROo=l(),Fv=a("li"),zde=a("strong"),SOo=o("segformer"),POo=o(" \u2014 "),$N=a("a"),$Oo=o("SegformerForSemanticSegmentation"),IOo=o(" (SegFormer model)"),jOo=l(),Cv=a("p"),NOo=o("The model is set in evaluation mode by default using "),Vde=a("code"),DOo=o("model.eval()"),qOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),GOo=o("model.train()"),OOo=l(),Qde=a("p"),XOo=o("Examples:"),zOo=l(),f(xw.$$.fragment),p8e=l(),rc=a("h2"),Mv=a("a"),Hde=a("span"),f(kw.$$.fragment),VOo=l(),Ude=a("span"),WOo=o("TFAutoModel"),_8e=l(),gr=a("div"),f(Rw.$$.fragment),QOo=l(),tc=a("p"),HOo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jde=a("code"),UOo=o("from_pretrained()"),JOo=o("class method or the "),Yde=a("code"),YOo=o("from_config()"),KOo=o(`class
method.`),ZOo=l(),Sw=a("p"),eXo=o("This class cannot be instantiated directly using "),Kde=a("code"),oXo=o("__init__()"),rXo=o(" (throws an error)."),tXo=l(),st=a("div"),f(Pw.$$.fragment),aXo=l(),Zde=a("p"),nXo=o("Instantiates one of the base model classes of the library from a configuration."),sXo=l(),ac=a("p"),lXo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),iXo=o("not"),dXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),cXo=o("from_pretrained()"),fXo=o("to load the model weights."),mXo=l(),rce=a("p"),gXo=o("Examples:"),hXo=l(),f($w.$$.fragment),pXo=l(),go=a("div"),f(Iw.$$.fragment),_Xo=l(),tce=a("p"),uXo=o("Instantiate one of the base model classes of the library from a pretrained model."),bXo=l(),ln=a("p"),vXo=o("The model class to instantiate is selected based on the "),ace=a("code"),TXo=o("model_type"),FXo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),CXo=o("pretrained_model_name_or_path"),MXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),EXo=o("pretrained_model_name_or_path"),yXo=o(":"),wXo=l(),B=a("ul"),Ev=a("li"),lce=a("strong"),AXo=o("albert"),LXo=o(" \u2014 "),IN=a("a"),BXo=o("TFAlbertModel"),xXo=o(" (ALBERT model)"),kXo=l(),yv=a("li"),ice=a("strong"),RXo=o("bart"),SXo=o(" \u2014 "),jN=a("a"),PXo=o("TFBartModel"),$Xo=o(" (BART model)"),IXo=l(),wv=a("li"),dce=a("strong"),jXo=o("bert"),NXo=o(" \u2014 "),NN=a("a"),DXo=o("TFBertModel"),qXo=o(" (BERT model)"),GXo=l(),Av=a("li"),cce=a("strong"),OXo=o("blenderbot"),XXo=o(" \u2014 "),DN=a("a"),zXo=o("TFBlenderbotModel"),VXo=o(" (Blenderbot model)"),WXo=l(),Lv=a("li"),fce=a("strong"),QXo=o("blenderbot-small"),HXo=o(" \u2014 "),qN=a("a"),UXo=o("TFBlenderbotSmallModel"),JXo=o(" (BlenderbotSmall model)"),YXo=l(),Bv=a("li"),mce=a("strong"),KXo=o("camembert"),ZXo=o(" \u2014 "),GN=a("a"),ezo=o("TFCamembertModel"),ozo=o(" (CamemBERT model)"),rzo=l(),xv=a("li"),gce=a("strong"),tzo=o("clip"),azo=o(" \u2014 "),ON=a("a"),nzo=o("TFCLIPModel"),szo=o(" (CLIP model)"),lzo=l(),kv=a("li"),hce=a("strong"),izo=o("convbert"),dzo=o(" \u2014 "),XN=a("a"),czo=o("TFConvBertModel"),fzo=o(" (ConvBERT model)"),mzo=l(),Rv=a("li"),pce=a("strong"),gzo=o("convnext"),hzo=o(" \u2014 "),zN=a("a"),pzo=o("TFConvNextModel"),_zo=o(" (ConvNext model)"),uzo=l(),Sv=a("li"),_ce=a("strong"),bzo=o("ctrl"),vzo=o(" \u2014 "),VN=a("a"),Tzo=o("TFCTRLModel"),Fzo=o(" (CTRL model)"),Czo=l(),Pv=a("li"),uce=a("strong"),Mzo=o("deberta"),Ezo=o(" \u2014 "),WN=a("a"),yzo=o("TFDebertaModel"),wzo=o(" (DeBERTa model)"),Azo=l(),$v=a("li"),bce=a("strong"),Lzo=o("deberta-v2"),Bzo=o(" \u2014 "),QN=a("a"),xzo=o("TFDebertaV2Model"),kzo=o(" (DeBERTa-v2 model)"),Rzo=l(),Iv=a("li"),vce=a("strong"),Szo=o("distilbert"),Pzo=o(" \u2014 "),HN=a("a"),$zo=o("TFDistilBertModel"),Izo=o(" (DistilBERT model)"),jzo=l(),jv=a("li"),Tce=a("strong"),Nzo=o("dpr"),Dzo=o(" \u2014 "),UN=a("a"),qzo=o("TFDPRQuestionEncoder"),Gzo=o(" (DPR model)"),Ozo=l(),Nv=a("li"),Fce=a("strong"),Xzo=o("electra"),zzo=o(" \u2014 "),JN=a("a"),Vzo=o("TFElectraModel"),Wzo=o(" (ELECTRA model)"),Qzo=l(),Dv=a("li"),Cce=a("strong"),Hzo=o("flaubert"),Uzo=o(" \u2014 "),YN=a("a"),Jzo=o("TFFlaubertModel"),Yzo=o(" (FlauBERT model)"),Kzo=l(),Ps=a("li"),Mce=a("strong"),Zzo=o("funnel"),eVo=o(" \u2014 "),KN=a("a"),oVo=o("TFFunnelModel"),rVo=o(" or "),ZN=a("a"),tVo=o("TFFunnelBaseModel"),aVo=o(" (Funnel Transformer model)"),nVo=l(),qv=a("li"),Ece=a("strong"),sVo=o("gpt2"),lVo=o(" \u2014 "),eD=a("a"),iVo=o("TFGPT2Model"),dVo=o(" (OpenAI GPT-2 model)"),cVo=l(),Gv=a("li"),yce=a("strong"),fVo=o("hubert"),mVo=o(" \u2014 "),oD=a("a"),gVo=o("TFHubertModel"),hVo=o(" (Hubert model)"),pVo=l(),Ov=a("li"),wce=a("strong"),_Vo=o("layoutlm"),uVo=o(" \u2014 "),rD=a("a"),bVo=o("TFLayoutLMModel"),vVo=o(" (LayoutLM model)"),TVo=l(),Xv=a("li"),Ace=a("strong"),FVo=o("led"),CVo=o(" \u2014 "),tD=a("a"),MVo=o("TFLEDModel"),EVo=o(" (LED model)"),yVo=l(),zv=a("li"),Lce=a("strong"),wVo=o("longformer"),AVo=o(" \u2014 "),aD=a("a"),LVo=o("TFLongformerModel"),BVo=o(" (Longformer model)"),xVo=l(),Vv=a("li"),Bce=a("strong"),kVo=o("lxmert"),RVo=o(" \u2014 "),nD=a("a"),SVo=o("TFLxmertModel"),PVo=o(" (LXMERT model)"),$Vo=l(),Wv=a("li"),xce=a("strong"),IVo=o("marian"),jVo=o(" \u2014 "),sD=a("a"),NVo=o("TFMarianModel"),DVo=o(" (Marian model)"),qVo=l(),Qv=a("li"),kce=a("strong"),GVo=o("mbart"),OVo=o(" \u2014 "),lD=a("a"),XVo=o("TFMBartModel"),zVo=o(" (mBART model)"),VVo=l(),Hv=a("li"),Rce=a("strong"),WVo=o("mobilebert"),QVo=o(" \u2014 "),iD=a("a"),HVo=o("TFMobileBertModel"),UVo=o(" (MobileBERT model)"),JVo=l(),Uv=a("li"),Sce=a("strong"),YVo=o("mpnet"),KVo=o(" \u2014 "),dD=a("a"),ZVo=o("TFMPNetModel"),eWo=o(" (MPNet model)"),oWo=l(),Jv=a("li"),Pce=a("strong"),rWo=o("mt5"),tWo=o(" \u2014 "),cD=a("a"),aWo=o("TFMT5Model"),nWo=o(" (mT5 model)"),sWo=l(),Yv=a("li"),$ce=a("strong"),lWo=o("openai-gpt"),iWo=o(" \u2014 "),fD=a("a"),dWo=o("TFOpenAIGPTModel"),cWo=o(" (OpenAI GPT model)"),fWo=l(),Kv=a("li"),Ice=a("strong"),mWo=o("pegasus"),gWo=o(" \u2014 "),mD=a("a"),hWo=o("TFPegasusModel"),pWo=o(" (Pegasus model)"),_Wo=l(),Zv=a("li"),jce=a("strong"),uWo=o("rembert"),bWo=o(" \u2014 "),gD=a("a"),vWo=o("TFRemBertModel"),TWo=o(" (RemBERT model)"),FWo=l(),eT=a("li"),Nce=a("strong"),CWo=o("roberta"),MWo=o(" \u2014 "),hD=a("a"),EWo=o("TFRobertaModel"),yWo=o(" (RoBERTa model)"),wWo=l(),oT=a("li"),Dce=a("strong"),AWo=o("roformer"),LWo=o(" \u2014 "),pD=a("a"),BWo=o("TFRoFormerModel"),xWo=o(" (RoFormer model)"),kWo=l(),rT=a("li"),qce=a("strong"),RWo=o("speech_to_text"),SWo=o(" \u2014 "),_D=a("a"),PWo=o("TFSpeech2TextModel"),$Wo=o(" (Speech2Text model)"),IWo=l(),tT=a("li"),Gce=a("strong"),jWo=o("t5"),NWo=o(" \u2014 "),uD=a("a"),DWo=o("TFT5Model"),qWo=o(" (T5 model)"),GWo=l(),aT=a("li"),Oce=a("strong"),OWo=o("tapas"),XWo=o(" \u2014 "),bD=a("a"),zWo=o("TFTapasModel"),VWo=o(" (TAPAS model)"),WWo=l(),nT=a("li"),Xce=a("strong"),QWo=o("transfo-xl"),HWo=o(" \u2014 "),vD=a("a"),UWo=o("TFTransfoXLModel"),JWo=o(" (Transformer-XL model)"),YWo=l(),sT=a("li"),zce=a("strong"),KWo=o("vit"),ZWo=o(" \u2014 "),TD=a("a"),eQo=o("TFViTModel"),oQo=o(" (ViT model)"),rQo=l(),lT=a("li"),Vce=a("strong"),tQo=o("wav2vec2"),aQo=o(" \u2014 "),FD=a("a"),nQo=o("TFWav2Vec2Model"),sQo=o(" (Wav2Vec2 model)"),lQo=l(),iT=a("li"),Wce=a("strong"),iQo=o("xlm"),dQo=o(" \u2014 "),CD=a("a"),cQo=o("TFXLMModel"),fQo=o(" (XLM model)"),mQo=l(),dT=a("li"),Qce=a("strong"),gQo=o("xlm-roberta"),hQo=o(" \u2014 "),MD=a("a"),pQo=o("TFXLMRobertaModel"),_Qo=o(" (XLM-RoBERTa model)"),uQo=l(),cT=a("li"),Hce=a("strong"),bQo=o("xlnet"),vQo=o(" \u2014 "),ED=a("a"),TQo=o("TFXLNetModel"),FQo=o(" (XLNet model)"),CQo=l(),Uce=a("p"),MQo=o("Examples:"),EQo=l(),f(jw.$$.fragment),u8e=l(),nc=a("h2"),fT=a("a"),Jce=a("span"),f(Nw.$$.fragment),yQo=l(),Yce=a("span"),wQo=o("TFAutoModelForPreTraining"),b8e=l(),hr=a("div"),f(Dw.$$.fragment),AQo=l(),sc=a("p"),LQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kce=a("code"),BQo=o("from_pretrained()"),xQo=o("class method or the "),Zce=a("code"),kQo=o("from_config()"),RQo=o(`class
method.`),SQo=l(),qw=a("p"),PQo=o("This class cannot be instantiated directly using "),efe=a("code"),$Qo=o("__init__()"),IQo=o(" (throws an error)."),jQo=l(),lt=a("div"),f(Gw.$$.fragment),NQo=l(),ofe=a("p"),DQo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qQo=l(),lc=a("p"),GQo=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),OQo=o("not"),XQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tfe=a("code"),zQo=o("from_pretrained()"),VQo=o("to load the model weights."),WQo=l(),afe=a("p"),QQo=o("Examples:"),HQo=l(),f(Ow.$$.fragment),UQo=l(),ho=a("div"),f(Xw.$$.fragment),JQo=l(),nfe=a("p"),YQo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KQo=l(),dn=a("p"),ZQo=o("The model class to instantiate is selected based on the "),sfe=a("code"),eHo=o("model_type"),oHo=o(` property of the config object (either
passed as an argument or loaded from `),lfe=a("code"),rHo=o("pretrained_model_name_or_path"),tHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(":"),sHo=l(),H=a("ul"),mT=a("li"),dfe=a("strong"),lHo=o("albert"),iHo=o(" \u2014 "),yD=a("a"),dHo=o("TFAlbertForPreTraining"),cHo=o(" (ALBERT model)"),fHo=l(),gT=a("li"),cfe=a("strong"),mHo=o("bart"),gHo=o(" \u2014 "),wD=a("a"),hHo=o("TFBartForConditionalGeneration"),pHo=o(" (BART model)"),_Ho=l(),hT=a("li"),ffe=a("strong"),uHo=o("bert"),bHo=o(" \u2014 "),AD=a("a"),vHo=o("TFBertForPreTraining"),THo=o(" (BERT model)"),FHo=l(),pT=a("li"),mfe=a("strong"),CHo=o("camembert"),MHo=o(" \u2014 "),LD=a("a"),EHo=o("TFCamembertForMaskedLM"),yHo=o(" (CamemBERT model)"),wHo=l(),_T=a("li"),gfe=a("strong"),AHo=o("ctrl"),LHo=o(" \u2014 "),BD=a("a"),BHo=o("TFCTRLLMHeadModel"),xHo=o(" (CTRL model)"),kHo=l(),uT=a("li"),hfe=a("strong"),RHo=o("distilbert"),SHo=o(" \u2014 "),xD=a("a"),PHo=o("TFDistilBertForMaskedLM"),$Ho=o(" (DistilBERT model)"),IHo=l(),bT=a("li"),pfe=a("strong"),jHo=o("electra"),NHo=o(" \u2014 "),kD=a("a"),DHo=o("TFElectraForPreTraining"),qHo=o(" (ELECTRA model)"),GHo=l(),vT=a("li"),_fe=a("strong"),OHo=o("flaubert"),XHo=o(" \u2014 "),RD=a("a"),zHo=o("TFFlaubertWithLMHeadModel"),VHo=o(" (FlauBERT model)"),WHo=l(),TT=a("li"),ufe=a("strong"),QHo=o("funnel"),HHo=o(" \u2014 "),SD=a("a"),UHo=o("TFFunnelForPreTraining"),JHo=o(" (Funnel Transformer model)"),YHo=l(),FT=a("li"),bfe=a("strong"),KHo=o("gpt2"),ZHo=o(" \u2014 "),PD=a("a"),eUo=o("TFGPT2LMHeadModel"),oUo=o(" (OpenAI GPT-2 model)"),rUo=l(),CT=a("li"),vfe=a("strong"),tUo=o("layoutlm"),aUo=o(" \u2014 "),$D=a("a"),nUo=o("TFLayoutLMForMaskedLM"),sUo=o(" (LayoutLM model)"),lUo=l(),MT=a("li"),Tfe=a("strong"),iUo=o("lxmert"),dUo=o(" \u2014 "),ID=a("a"),cUo=o("TFLxmertForPreTraining"),fUo=o(" (LXMERT model)"),mUo=l(),ET=a("li"),Ffe=a("strong"),gUo=o("mobilebert"),hUo=o(" \u2014 "),jD=a("a"),pUo=o("TFMobileBertForPreTraining"),_Uo=o(" (MobileBERT model)"),uUo=l(),yT=a("li"),Cfe=a("strong"),bUo=o("mpnet"),vUo=o(" \u2014 "),ND=a("a"),TUo=o("TFMPNetForMaskedLM"),FUo=o(" (MPNet model)"),CUo=l(),wT=a("li"),Mfe=a("strong"),MUo=o("openai-gpt"),EUo=o(" \u2014 "),DD=a("a"),yUo=o("TFOpenAIGPTLMHeadModel"),wUo=o(" (OpenAI GPT model)"),AUo=l(),AT=a("li"),Efe=a("strong"),LUo=o("roberta"),BUo=o(" \u2014 "),qD=a("a"),xUo=o("TFRobertaForMaskedLM"),kUo=o(" (RoBERTa model)"),RUo=l(),LT=a("li"),yfe=a("strong"),SUo=o("t5"),PUo=o(" \u2014 "),GD=a("a"),$Uo=o("TFT5ForConditionalGeneration"),IUo=o(" (T5 model)"),jUo=l(),BT=a("li"),wfe=a("strong"),NUo=o("tapas"),DUo=o(" \u2014 "),OD=a("a"),qUo=o("TFTapasForMaskedLM"),GUo=o(" (TAPAS model)"),OUo=l(),xT=a("li"),Afe=a("strong"),XUo=o("transfo-xl"),zUo=o(" \u2014 "),XD=a("a"),VUo=o("TFTransfoXLLMHeadModel"),WUo=o(" (Transformer-XL model)"),QUo=l(),kT=a("li"),Lfe=a("strong"),HUo=o("xlm"),UUo=o(" \u2014 "),zD=a("a"),JUo=o("TFXLMWithLMHeadModel"),YUo=o(" (XLM model)"),KUo=l(),RT=a("li"),Bfe=a("strong"),ZUo=o("xlm-roberta"),eJo=o(" \u2014 "),VD=a("a"),oJo=o("TFXLMRobertaForMaskedLM"),rJo=o(" (XLM-RoBERTa model)"),tJo=l(),ST=a("li"),xfe=a("strong"),aJo=o("xlnet"),nJo=o(" \u2014 "),WD=a("a"),sJo=o("TFXLNetLMHeadModel"),lJo=o(" (XLNet model)"),iJo=l(),kfe=a("p"),dJo=o("Examples:"),cJo=l(),f(zw.$$.fragment),v8e=l(),ic=a("h2"),PT=a("a"),Rfe=a("span"),f(Vw.$$.fragment),fJo=l(),Sfe=a("span"),mJo=o("TFAutoModelForCausalLM"),T8e=l(),pr=a("div"),f(Ww.$$.fragment),gJo=l(),dc=a("p"),hJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pfe=a("code"),pJo=o("from_pretrained()"),_Jo=o("class method or the "),$fe=a("code"),uJo=o("from_config()"),bJo=o(`class
method.`),vJo=l(),Qw=a("p"),TJo=o("This class cannot be instantiated directly using "),Ife=a("code"),FJo=o("__init__()"),CJo=o(" (throws an error)."),MJo=l(),it=a("div"),f(Hw.$$.fragment),EJo=l(),jfe=a("p"),yJo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wJo=l(),cc=a("p"),AJo=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),LJo=o("not"),BJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dfe=a("code"),xJo=o("from_pretrained()"),kJo=o("to load the model weights."),RJo=l(),qfe=a("p"),SJo=o("Examples:"),PJo=l(),f(Uw.$$.fragment),$Jo=l(),po=a("div"),f(Jw.$$.fragment),IJo=l(),Gfe=a("p"),jJo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NJo=l(),cn=a("p"),DJo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),qJo=o("model_type"),GJo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),OJo=o("pretrained_model_name_or_path"),XJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),zJo=o("pretrained_model_name_or_path"),VJo=o(":"),WJo=l(),he=a("ul"),$T=a("li"),Vfe=a("strong"),QJo=o("bert"),HJo=o(" \u2014 "),QD=a("a"),UJo=o("TFBertLMHeadModel"),JJo=o(" (BERT model)"),YJo=l(),IT=a("li"),Wfe=a("strong"),KJo=o("ctrl"),ZJo=o(" \u2014 "),HD=a("a"),eYo=o("TFCTRLLMHeadModel"),oYo=o(" (CTRL model)"),rYo=l(),jT=a("li"),Qfe=a("strong"),tYo=o("gpt2"),aYo=o(" \u2014 "),UD=a("a"),nYo=o("TFGPT2LMHeadModel"),sYo=o(" (OpenAI GPT-2 model)"),lYo=l(),NT=a("li"),Hfe=a("strong"),iYo=o("openai-gpt"),dYo=o(" \u2014 "),JD=a("a"),cYo=o("TFOpenAIGPTLMHeadModel"),fYo=o(" (OpenAI GPT model)"),mYo=l(),DT=a("li"),Ufe=a("strong"),gYo=o("rembert"),hYo=o(" \u2014 "),YD=a("a"),pYo=o("TFRemBertForCausalLM"),_Yo=o(" (RemBERT model)"),uYo=l(),qT=a("li"),Jfe=a("strong"),bYo=o("roberta"),vYo=o(" \u2014 "),KD=a("a"),TYo=o("TFRobertaForCausalLM"),FYo=o(" (RoBERTa model)"),CYo=l(),GT=a("li"),Yfe=a("strong"),MYo=o("roformer"),EYo=o(" \u2014 "),ZD=a("a"),yYo=o("TFRoFormerForCausalLM"),wYo=o(" (RoFormer model)"),AYo=l(),OT=a("li"),Kfe=a("strong"),LYo=o("transfo-xl"),BYo=o(" \u2014 "),eq=a("a"),xYo=o("TFTransfoXLLMHeadModel"),kYo=o(" (Transformer-XL model)"),RYo=l(),XT=a("li"),Zfe=a("strong"),SYo=o("xlm"),PYo=o(" \u2014 "),oq=a("a"),$Yo=o("TFXLMWithLMHeadModel"),IYo=o(" (XLM model)"),jYo=l(),zT=a("li"),eme=a("strong"),NYo=o("xlnet"),DYo=o(" \u2014 "),rq=a("a"),qYo=o("TFXLNetLMHeadModel"),GYo=o(" (XLNet model)"),OYo=l(),ome=a("p"),XYo=o("Examples:"),zYo=l(),f(Yw.$$.fragment),F8e=l(),fc=a("h2"),VT=a("a"),rme=a("span"),f(Kw.$$.fragment),VYo=l(),tme=a("span"),WYo=o("TFAutoModelForImageClassification"),C8e=l(),_r=a("div"),f(Zw.$$.fragment),QYo=l(),mc=a("p"),HYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ame=a("code"),UYo=o("from_pretrained()"),JYo=o("class method or the "),nme=a("code"),YYo=o("from_config()"),KYo=o(`class
method.`),ZYo=l(),eA=a("p"),eKo=o("This class cannot be instantiated directly using "),sme=a("code"),oKo=o("__init__()"),rKo=o(" (throws an error)."),tKo=l(),dt=a("div"),f(oA.$$.fragment),aKo=l(),lme=a("p"),nKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sKo=l(),gc=a("p"),lKo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),iKo=o("not"),dKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=a("code"),cKo=o("from_pretrained()"),fKo=o("to load the model weights."),mKo=l(),cme=a("p"),gKo=o("Examples:"),hKo=l(),f(rA.$$.fragment),pKo=l(),_o=a("div"),f(tA.$$.fragment),_Ko=l(),fme=a("p"),uKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bKo=l(),fn=a("p"),vKo=o("The model class to instantiate is selected based on the "),mme=a("code"),TKo=o("model_type"),FKo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),CKo=o("pretrained_model_name_or_path"),MKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),EKo=o("pretrained_model_name_or_path"),yKo=o(":"),wKo=l(),aA=a("ul"),WT=a("li"),pme=a("strong"),AKo=o("convnext"),LKo=o(" \u2014 "),tq=a("a"),BKo=o("TFConvNextForImageClassification"),xKo=o(" (ConvNext model)"),kKo=l(),QT=a("li"),_me=a("strong"),RKo=o("vit"),SKo=o(" \u2014 "),aq=a("a"),PKo=o("TFViTForImageClassification"),$Ko=o(" (ViT model)"),IKo=l(),ume=a("p"),jKo=o("Examples:"),NKo=l(),f(nA.$$.fragment),M8e=l(),hc=a("h2"),HT=a("a"),bme=a("span"),f(sA.$$.fragment),DKo=l(),vme=a("span"),qKo=o("TFAutoModelForMaskedLM"),E8e=l(),ur=a("div"),f(lA.$$.fragment),GKo=l(),pc=a("p"),OKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Tme=a("code"),XKo=o("from_pretrained()"),zKo=o("class method or the "),Fme=a("code"),VKo=o("from_config()"),WKo=o(`class
method.`),QKo=l(),iA=a("p"),HKo=o("This class cannot be instantiated directly using "),Cme=a("code"),UKo=o("__init__()"),JKo=o(" (throws an error)."),YKo=l(),ct=a("div"),f(dA.$$.fragment),KKo=l(),Mme=a("p"),ZKo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eZo=l(),_c=a("p"),oZo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),rZo=o("not"),tZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yme=a("code"),aZo=o("from_pretrained()"),nZo=o("to load the model weights."),sZo=l(),wme=a("p"),lZo=o("Examples:"),iZo=l(),f(cA.$$.fragment),dZo=l(),uo=a("div"),f(fA.$$.fragment),cZo=l(),Ame=a("p"),fZo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mZo=l(),mn=a("p"),gZo=o("The model class to instantiate is selected based on the "),Lme=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),TZo=l(),Y=a("ul"),UT=a("li"),kme=a("strong"),FZo=o("albert"),CZo=o(" \u2014 "),nq=a("a"),MZo=o("TFAlbertForMaskedLM"),EZo=o(" (ALBERT model)"),yZo=l(),JT=a("li"),Rme=a("strong"),wZo=o("bert"),AZo=o(" \u2014 "),sq=a("a"),LZo=o("TFBertForMaskedLM"),BZo=o(" (BERT model)"),xZo=l(),YT=a("li"),Sme=a("strong"),kZo=o("camembert"),RZo=o(" \u2014 "),lq=a("a"),SZo=o("TFCamembertForMaskedLM"),PZo=o(" (CamemBERT model)"),$Zo=l(),KT=a("li"),Pme=a("strong"),IZo=o("convbert"),jZo=o(" \u2014 "),iq=a("a"),NZo=o("TFConvBertForMaskedLM"),DZo=o(" (ConvBERT model)"),qZo=l(),ZT=a("li"),$me=a("strong"),GZo=o("deberta"),OZo=o(" \u2014 "),dq=a("a"),XZo=o("TFDebertaForMaskedLM"),zZo=o(" (DeBERTa model)"),VZo=l(),eF=a("li"),Ime=a("strong"),WZo=o("deberta-v2"),QZo=o(" \u2014 "),cq=a("a"),HZo=o("TFDebertaV2ForMaskedLM"),UZo=o(" (DeBERTa-v2 model)"),JZo=l(),oF=a("li"),jme=a("strong"),YZo=o("distilbert"),KZo=o(" \u2014 "),fq=a("a"),ZZo=o("TFDistilBertForMaskedLM"),eer=o(" (DistilBERT model)"),oer=l(),rF=a("li"),Nme=a("strong"),rer=o("electra"),ter=o(" \u2014 "),mq=a("a"),aer=o("TFElectraForMaskedLM"),ner=o(" (ELECTRA model)"),ser=l(),tF=a("li"),Dme=a("strong"),ler=o("flaubert"),ier=o(" \u2014 "),gq=a("a"),der=o("TFFlaubertWithLMHeadModel"),cer=o(" (FlauBERT model)"),fer=l(),aF=a("li"),qme=a("strong"),mer=o("funnel"),ger=o(" \u2014 "),hq=a("a"),her=o("TFFunnelForMaskedLM"),per=o(" (Funnel Transformer model)"),_er=l(),nF=a("li"),Gme=a("strong"),uer=o("layoutlm"),ber=o(" \u2014 "),pq=a("a"),ver=o("TFLayoutLMForMaskedLM"),Ter=o(" (LayoutLM model)"),Fer=l(),sF=a("li"),Ome=a("strong"),Cer=o("longformer"),Mer=o(" \u2014 "),_q=a("a"),Eer=o("TFLongformerForMaskedLM"),yer=o(" (Longformer model)"),wer=l(),lF=a("li"),Xme=a("strong"),Aer=o("mobilebert"),Ler=o(" \u2014 "),uq=a("a"),Ber=o("TFMobileBertForMaskedLM"),xer=o(" (MobileBERT model)"),ker=l(),iF=a("li"),zme=a("strong"),Rer=o("mpnet"),Ser=o(" \u2014 "),bq=a("a"),Per=o("TFMPNetForMaskedLM"),$er=o(" (MPNet model)"),Ier=l(),dF=a("li"),Vme=a("strong"),jer=o("rembert"),Ner=o(" \u2014 "),vq=a("a"),Der=o("TFRemBertForMaskedLM"),qer=o(" (RemBERT model)"),Ger=l(),cF=a("li"),Wme=a("strong"),Oer=o("roberta"),Xer=o(" \u2014 "),Tq=a("a"),zer=o("TFRobertaForMaskedLM"),Ver=o(" (RoBERTa model)"),Wer=l(),fF=a("li"),Qme=a("strong"),Qer=o("roformer"),Her=o(" \u2014 "),Fq=a("a"),Uer=o("TFRoFormerForMaskedLM"),Jer=o(" (RoFormer model)"),Yer=l(),mF=a("li"),Hme=a("strong"),Ker=o("tapas"),Zer=o(" \u2014 "),Cq=a("a"),eor=o("TFTapasForMaskedLM"),oor=o(" (TAPAS model)"),ror=l(),gF=a("li"),Ume=a("strong"),tor=o("xlm"),aor=o(" \u2014 "),Mq=a("a"),nor=o("TFXLMWithLMHeadModel"),sor=o(" (XLM model)"),lor=l(),hF=a("li"),Jme=a("strong"),ior=o("xlm-roberta"),dor=o(" \u2014 "),Eq=a("a"),cor=o("TFXLMRobertaForMaskedLM"),mor=o(" (XLM-RoBERTa model)"),gor=l(),Yme=a("p"),hor=o("Examples:"),por=l(),f(mA.$$.fragment),y8e=l(),uc=a("h2"),pF=a("a"),Kme=a("span"),f(gA.$$.fragment),_or=l(),Zme=a("span"),uor=o("TFAutoModelForSeq2SeqLM"),w8e=l(),br=a("div"),f(hA.$$.fragment),bor=l(),bc=a("p"),vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ege=a("code"),Tor=o("from_pretrained()"),For=o("class method or the "),oge=a("code"),Cor=o("from_config()"),Mor=o(`class
method.`),Eor=l(),pA=a("p"),yor=o("This class cannot be instantiated directly using "),rge=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),ft=a("div"),f(_A.$$.fragment),Bor=l(),tge=a("p"),xor=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kor=l(),vc=a("p"),Ror=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),Sor=o("not"),Por=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nge=a("code"),$or=o("from_pretrained()"),Ior=o("to load the model weights."),jor=l(),sge=a("p"),Nor=o("Examples:"),Dor=l(),f(uA.$$.fragment),qor=l(),bo=a("div"),f(bA.$$.fragment),Gor=l(),lge=a("p"),Oor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xor=l(),gn=a("p"),zor=o("The model class to instantiate is selected based on the "),ige=a("code"),Vor=o("model_type"),Wor=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),Qor=o("pretrained_model_name_or_path"),Hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),Uor=o("pretrained_model_name_or_path"),Jor=o(":"),Yor=l(),pe=a("ul"),_F=a("li"),fge=a("strong"),Kor=o("bart"),Zor=o(" \u2014 "),yq=a("a"),err=o("TFBartForConditionalGeneration"),orr=o(" (BART model)"),rrr=l(),uF=a("li"),mge=a("strong"),trr=o("blenderbot"),arr=o(" \u2014 "),wq=a("a"),nrr=o("TFBlenderbotForConditionalGeneration"),srr=o(" (Blenderbot model)"),lrr=l(),bF=a("li"),gge=a("strong"),irr=o("blenderbot-small"),drr=o(" \u2014 "),Aq=a("a"),crr=o("TFBlenderbotSmallForConditionalGeneration"),frr=o(" (BlenderbotSmall model)"),mrr=l(),vF=a("li"),hge=a("strong"),grr=o("encoder-decoder"),hrr=o(" \u2014 "),Lq=a("a"),prr=o("TFEncoderDecoderModel"),_rr=o(" (Encoder decoder model)"),urr=l(),TF=a("li"),pge=a("strong"),brr=o("led"),vrr=o(" \u2014 "),Bq=a("a"),Trr=o("TFLEDForConditionalGeneration"),Frr=o(" (LED model)"),Crr=l(),FF=a("li"),_ge=a("strong"),Mrr=o("marian"),Err=o(" \u2014 "),xq=a("a"),yrr=o("TFMarianMTModel"),wrr=o(" (Marian model)"),Arr=l(),CF=a("li"),uge=a("strong"),Lrr=o("mbart"),Brr=o(" \u2014 "),kq=a("a"),xrr=o("TFMBartForConditionalGeneration"),krr=o(" (mBART model)"),Rrr=l(),MF=a("li"),bge=a("strong"),Srr=o("mt5"),Prr=o(" \u2014 "),Rq=a("a"),$rr=o("TFMT5ForConditionalGeneration"),Irr=o(" (mT5 model)"),jrr=l(),EF=a("li"),vge=a("strong"),Nrr=o("pegasus"),Drr=o(" \u2014 "),Sq=a("a"),qrr=o("TFPegasusForConditionalGeneration"),Grr=o(" (Pegasus model)"),Orr=l(),yF=a("li"),Tge=a("strong"),Xrr=o("t5"),zrr=o(" \u2014 "),Pq=a("a"),Vrr=o("TFT5ForConditionalGeneration"),Wrr=o(" (T5 model)"),Qrr=l(),Fge=a("p"),Hrr=o("Examples:"),Urr=l(),f(vA.$$.fragment),A8e=l(),Tc=a("h2"),wF=a("a"),Cge=a("span"),f(TA.$$.fragment),Jrr=l(),Mge=a("span"),Yrr=o("TFAutoModelForSequenceClassification"),L8e=l(),vr=a("div"),f(FA.$$.fragment),Krr=l(),Fc=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ege=a("code"),etr=o("from_pretrained()"),otr=o("class method or the "),yge=a("code"),rtr=o("from_config()"),ttr=o(`class
method.`),atr=l(),CA=a("p"),ntr=o("This class cannot be instantiated directly using "),wge=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),mt=a("div"),f(MA.$$.fragment),dtr=l(),Age=a("p"),ctr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ftr=l(),Cc=a("p"),mtr=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bge=a("code"),ptr=o("from_pretrained()"),_tr=o("to load the model weights."),utr=l(),xge=a("p"),btr=o("Examples:"),vtr=l(),f(EA.$$.fragment),Ttr=l(),vo=a("div"),f(yA.$$.fragment),Ftr=l(),kge=a("p"),Ctr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Mtr=l(),hn=a("p"),Etr=o("The model class to instantiate is selected based on the "),Rge=a("code"),ytr=o("model_type"),wtr=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),Atr=o("pretrained_model_name_or_path"),Ltr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),Btr=o("pretrained_model_name_or_path"),xtr=o(":"),ktr=l(),X=a("ul"),AF=a("li"),$ge=a("strong"),Rtr=o("albert"),Str=o(" \u2014 "),$q=a("a"),Ptr=o("TFAlbertForSequenceClassification"),$tr=o(" (ALBERT model)"),Itr=l(),LF=a("li"),Ige=a("strong"),jtr=o("bert"),Ntr=o(" \u2014 "),Iq=a("a"),Dtr=o("TFBertForSequenceClassification"),qtr=o(" (BERT model)"),Gtr=l(),BF=a("li"),jge=a("strong"),Otr=o("camembert"),Xtr=o(" \u2014 "),jq=a("a"),ztr=o("TFCamembertForSequenceClassification"),Vtr=o(" (CamemBERT model)"),Wtr=l(),xF=a("li"),Nge=a("strong"),Qtr=o("convbert"),Htr=o(" \u2014 "),Nq=a("a"),Utr=o("TFConvBertForSequenceClassification"),Jtr=o(" (ConvBERT model)"),Ytr=l(),kF=a("li"),Dge=a("strong"),Ktr=o("ctrl"),Ztr=o(" \u2014 "),Dq=a("a"),ear=o("TFCTRLForSequenceClassification"),oar=o(" (CTRL model)"),rar=l(),RF=a("li"),qge=a("strong"),tar=o("deberta"),aar=o(" \u2014 "),qq=a("a"),nar=o("TFDebertaForSequenceClassification"),sar=o(" (DeBERTa model)"),lar=l(),SF=a("li"),Gge=a("strong"),iar=o("deberta-v2"),dar=o(" \u2014 "),Gq=a("a"),car=o("TFDebertaV2ForSequenceClassification"),far=o(" (DeBERTa-v2 model)"),mar=l(),PF=a("li"),Oge=a("strong"),gar=o("distilbert"),har=o(" \u2014 "),Oq=a("a"),par=o("TFDistilBertForSequenceClassification"),_ar=o(" (DistilBERT model)"),uar=l(),$F=a("li"),Xge=a("strong"),bar=o("electra"),Tar=o(" \u2014 "),Xq=a("a"),Far=o("TFElectraForSequenceClassification"),Car=o(" (ELECTRA model)"),Mar=l(),IF=a("li"),zge=a("strong"),Ear=o("flaubert"),yar=o(" \u2014 "),zq=a("a"),war=o("TFFlaubertForSequenceClassification"),Aar=o(" (FlauBERT model)"),Lar=l(),jF=a("li"),Vge=a("strong"),Bar=o("funnel"),xar=o(" \u2014 "),Vq=a("a"),kar=o("TFFunnelForSequenceClassification"),Rar=o(" (Funnel Transformer model)"),Sar=l(),NF=a("li"),Wge=a("strong"),Par=o("gpt2"),$ar=o(" \u2014 "),Wq=a("a"),Iar=o("TFGPT2ForSequenceClassification"),jar=o(" (OpenAI GPT-2 model)"),Nar=l(),DF=a("li"),Qge=a("strong"),Dar=o("layoutlm"),qar=o(" \u2014 "),Qq=a("a"),Gar=o("TFLayoutLMForSequenceClassification"),Oar=o(" (LayoutLM model)"),Xar=l(),qF=a("li"),Hge=a("strong"),zar=o("longformer"),Var=o(" \u2014 "),Hq=a("a"),War=o("TFLongformerForSequenceClassification"),Qar=o(" (Longformer model)"),Har=l(),GF=a("li"),Uge=a("strong"),Uar=o("mobilebert"),Jar=o(" \u2014 "),Uq=a("a"),Yar=o("TFMobileBertForSequenceClassification"),Kar=o(" (MobileBERT model)"),Zar=l(),OF=a("li"),Jge=a("strong"),enr=o("mpnet"),onr=o(" \u2014 "),Jq=a("a"),rnr=o("TFMPNetForSequenceClassification"),tnr=o(" (MPNet model)"),anr=l(),XF=a("li"),Yge=a("strong"),nnr=o("openai-gpt"),snr=o(" \u2014 "),Yq=a("a"),lnr=o("TFOpenAIGPTForSequenceClassification"),inr=o(" (OpenAI GPT model)"),dnr=l(),zF=a("li"),Kge=a("strong"),cnr=o("rembert"),fnr=o(" \u2014 "),Kq=a("a"),mnr=o("TFRemBertForSequenceClassification"),gnr=o(" (RemBERT model)"),hnr=l(),VF=a("li"),Zge=a("strong"),pnr=o("roberta"),_nr=o(" \u2014 "),Zq=a("a"),unr=o("TFRobertaForSequenceClassification"),bnr=o(" (RoBERTa model)"),vnr=l(),WF=a("li"),ehe=a("strong"),Tnr=o("roformer"),Fnr=o(" \u2014 "),eG=a("a"),Cnr=o("TFRoFormerForSequenceClassification"),Mnr=o(" (RoFormer model)"),Enr=l(),QF=a("li"),ohe=a("strong"),ynr=o("tapas"),wnr=o(" \u2014 "),oG=a("a"),Anr=o("TFTapasForSequenceClassification"),Lnr=o(" (TAPAS model)"),Bnr=l(),HF=a("li"),rhe=a("strong"),xnr=o("transfo-xl"),knr=o(" \u2014 "),rG=a("a"),Rnr=o("TFTransfoXLForSequenceClassification"),Snr=o(" (Transformer-XL model)"),Pnr=l(),UF=a("li"),the=a("strong"),$nr=o("xlm"),Inr=o(" \u2014 "),tG=a("a"),jnr=o("TFXLMForSequenceClassification"),Nnr=o(" (XLM model)"),Dnr=l(),JF=a("li"),ahe=a("strong"),qnr=o("xlm-roberta"),Gnr=o(" \u2014 "),aG=a("a"),Onr=o("TFXLMRobertaForSequenceClassification"),Xnr=o(" (XLM-RoBERTa model)"),znr=l(),YF=a("li"),nhe=a("strong"),Vnr=o("xlnet"),Wnr=o(" \u2014 "),nG=a("a"),Qnr=o("TFXLNetForSequenceClassification"),Hnr=o(" (XLNet model)"),Unr=l(),she=a("p"),Jnr=o("Examples:"),Ynr=l(),f(wA.$$.fragment),B8e=l(),Mc=a("h2"),KF=a("a"),lhe=a("span"),f(AA.$$.fragment),Knr=l(),ihe=a("span"),Znr=o("TFAutoModelForMultipleChoice"),x8e=l(),Tr=a("div"),f(LA.$$.fragment),esr=l(),Ec=a("p"),osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dhe=a("code"),rsr=o("from_pretrained()"),tsr=o("class method or the "),che=a("code"),asr=o("from_config()"),nsr=o(`class
method.`),ssr=l(),BA=a("p"),lsr=o("This class cannot be instantiated directly using "),fhe=a("code"),isr=o("__init__()"),dsr=o(" (throws an error)."),csr=l(),gt=a("div"),f(xA.$$.fragment),fsr=l(),mhe=a("p"),msr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gsr=l(),yc=a("p"),hsr=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),psr=o("not"),_sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hhe=a("code"),usr=o("from_pretrained()"),bsr=o("to load the model weights."),vsr=l(),phe=a("p"),Tsr=o("Examples:"),Fsr=l(),f(kA.$$.fragment),Csr=l(),To=a("div"),f(RA.$$.fragment),Msr=l(),_he=a("p"),Esr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ysr=l(),pn=a("p"),wsr=o("The model class to instantiate is selected based on the "),uhe=a("code"),Asr=o("model_type"),Lsr=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),Bsr=o("pretrained_model_name_or_path"),xsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),ksr=o("pretrained_model_name_or_path"),Rsr=o(":"),Ssr=l(),te=a("ul"),ZF=a("li"),The=a("strong"),Psr=o("albert"),$sr=o(" \u2014 "),sG=a("a"),Isr=o("TFAlbertForMultipleChoice"),jsr=o(" (ALBERT model)"),Nsr=l(),e9=a("li"),Fhe=a("strong"),Dsr=o("bert"),qsr=o(" \u2014 "),lG=a("a"),Gsr=o("TFBertForMultipleChoice"),Osr=o(" (BERT model)"),Xsr=l(),o9=a("li"),Che=a("strong"),zsr=o("camembert"),Vsr=o(" \u2014 "),iG=a("a"),Wsr=o("TFCamembertForMultipleChoice"),Qsr=o(" (CamemBERT model)"),Hsr=l(),r9=a("li"),Mhe=a("strong"),Usr=o("convbert"),Jsr=o(" \u2014 "),dG=a("a"),Ysr=o("TFConvBertForMultipleChoice"),Ksr=o(" (ConvBERT model)"),Zsr=l(),t9=a("li"),Ehe=a("strong"),elr=o("distilbert"),olr=o(" \u2014 "),cG=a("a"),rlr=o("TFDistilBertForMultipleChoice"),tlr=o(" (DistilBERT model)"),alr=l(),a9=a("li"),yhe=a("strong"),nlr=o("electra"),slr=o(" \u2014 "),fG=a("a"),llr=o("TFElectraForMultipleChoice"),ilr=o(" (ELECTRA model)"),dlr=l(),n9=a("li"),whe=a("strong"),clr=o("flaubert"),flr=o(" \u2014 "),mG=a("a"),mlr=o("TFFlaubertForMultipleChoice"),glr=o(" (FlauBERT model)"),hlr=l(),s9=a("li"),Ahe=a("strong"),plr=o("funnel"),_lr=o(" \u2014 "),gG=a("a"),ulr=o("TFFunnelForMultipleChoice"),blr=o(" (Funnel Transformer model)"),vlr=l(),l9=a("li"),Lhe=a("strong"),Tlr=o("longformer"),Flr=o(" \u2014 "),hG=a("a"),Clr=o("TFLongformerForMultipleChoice"),Mlr=o(" (Longformer model)"),Elr=l(),i9=a("li"),Bhe=a("strong"),ylr=o("mobilebert"),wlr=o(" \u2014 "),pG=a("a"),Alr=o("TFMobileBertForMultipleChoice"),Llr=o(" (MobileBERT model)"),Blr=l(),d9=a("li"),xhe=a("strong"),xlr=o("mpnet"),klr=o(" \u2014 "),_G=a("a"),Rlr=o("TFMPNetForMultipleChoice"),Slr=o(" (MPNet model)"),Plr=l(),c9=a("li"),khe=a("strong"),$lr=o("rembert"),Ilr=o(" \u2014 "),uG=a("a"),jlr=o("TFRemBertForMultipleChoice"),Nlr=o(" (RemBERT model)"),Dlr=l(),f9=a("li"),Rhe=a("strong"),qlr=o("roberta"),Glr=o(" \u2014 "),bG=a("a"),Olr=o("TFRobertaForMultipleChoice"),Xlr=o(" (RoBERTa model)"),zlr=l(),m9=a("li"),She=a("strong"),Vlr=o("roformer"),Wlr=o(" \u2014 "),vG=a("a"),Qlr=o("TFRoFormerForMultipleChoice"),Hlr=o(" (RoFormer model)"),Ulr=l(),g9=a("li"),Phe=a("strong"),Jlr=o("xlm"),Ylr=o(" \u2014 "),TG=a("a"),Klr=o("TFXLMForMultipleChoice"),Zlr=o(" (XLM model)"),eir=l(),h9=a("li"),$he=a("strong"),oir=o("xlm-roberta"),rir=o(" \u2014 "),FG=a("a"),tir=o("TFXLMRobertaForMultipleChoice"),air=o(" (XLM-RoBERTa model)"),nir=l(),p9=a("li"),Ihe=a("strong"),sir=o("xlnet"),lir=o(" \u2014 "),CG=a("a"),iir=o("TFXLNetForMultipleChoice"),dir=o(" (XLNet model)"),cir=l(),jhe=a("p"),fir=o("Examples:"),mir=l(),f(SA.$$.fragment),k8e=l(),wc=a("h2"),_9=a("a"),Nhe=a("span"),f(PA.$$.fragment),gir=l(),Dhe=a("span"),hir=o("TFAutoModelForTableQuestionAnswering"),R8e=l(),Fr=a("div"),f($A.$$.fragment),pir=l(),Ac=a("p"),_ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qhe=a("code"),uir=o("from_pretrained()"),bir=o("class method or the "),Ghe=a("code"),vir=o("from_config()"),Tir=o(`class
method.`),Fir=l(),IA=a("p"),Cir=o("This class cannot be instantiated directly using "),Ohe=a("code"),Mir=o("__init__()"),Eir=o(" (throws an error)."),yir=l(),ht=a("div"),f(jA.$$.fragment),wir=l(),Xhe=a("p"),Air=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lir=l(),Lc=a("p"),Bir=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),xir=o("not"),kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vhe=a("code"),Rir=o("from_pretrained()"),Sir=o("to load the model weights."),Pir=l(),Whe=a("p"),$ir=o("Examples:"),Iir=l(),f(NA.$$.fragment),jir=l(),Fo=a("div"),f(DA.$$.fragment),Nir=l(),Qhe=a("p"),Dir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qir=l(),_n=a("p"),Gir=o("The model class to instantiate is selected based on the "),Hhe=a("code"),Oir=o("model_type"),Xir=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),zir=o("pretrained_model_name_or_path"),Vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),Wir=o("pretrained_model_name_or_path"),Qir=o(":"),Hir=l(),Yhe=a("ul"),u9=a("li"),Khe=a("strong"),Uir=o("tapas"),Jir=o(" \u2014 "),MG=a("a"),Yir=o("TFTapasForQuestionAnswering"),Kir=o(" (TAPAS model)"),Zir=l(),Zhe=a("p"),edr=o("Examples:"),odr=l(),f(qA.$$.fragment),S8e=l(),Bc=a("h2"),b9=a("a"),epe=a("span"),f(GA.$$.fragment),rdr=l(),ope=a("span"),tdr=o("TFAutoModelForTokenClassification"),P8e=l(),Cr=a("div"),f(OA.$$.fragment),adr=l(),xc=a("p"),ndr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rpe=a("code"),sdr=o("from_pretrained()"),ldr=o("class method or the "),tpe=a("code"),idr=o("from_config()"),ddr=o(`class
method.`),cdr=l(),XA=a("p"),fdr=o("This class cannot be instantiated directly using "),ape=a("code"),mdr=o("__init__()"),gdr=o(" (throws an error)."),hdr=l(),pt=a("div"),f(zA.$$.fragment),pdr=l(),npe=a("p"),_dr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),udr=l(),kc=a("p"),bdr=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),vdr=o("not"),Tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lpe=a("code"),Fdr=o("from_pretrained()"),Cdr=o("to load the model weights."),Mdr=l(),ipe=a("p"),Edr=o("Examples:"),ydr=l(),f(VA.$$.fragment),wdr=l(),Co=a("div"),f(WA.$$.fragment),Adr=l(),dpe=a("p"),Ldr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bdr=l(),un=a("p"),xdr=o("The model class to instantiate is selected based on the "),cpe=a("code"),kdr=o("model_type"),Rdr=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),Sdr=o("pretrained_model_name_or_path"),Pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),$dr=o("pretrained_model_name_or_path"),Idr=o(":"),jdr=l(),K=a("ul"),v9=a("li"),gpe=a("strong"),Ndr=o("albert"),Ddr=o(" \u2014 "),EG=a("a"),qdr=o("TFAlbertForTokenClassification"),Gdr=o(" (ALBERT model)"),Odr=l(),T9=a("li"),hpe=a("strong"),Xdr=o("bert"),zdr=o(" \u2014 "),yG=a("a"),Vdr=o("TFBertForTokenClassification"),Wdr=o(" (BERT model)"),Qdr=l(),F9=a("li"),ppe=a("strong"),Hdr=o("camembert"),Udr=o(" \u2014 "),wG=a("a"),Jdr=o("TFCamembertForTokenClassification"),Ydr=o(" (CamemBERT model)"),Kdr=l(),C9=a("li"),_pe=a("strong"),Zdr=o("convbert"),ecr=o(" \u2014 "),AG=a("a"),ocr=o("TFConvBertForTokenClassification"),rcr=o(" (ConvBERT model)"),tcr=l(),M9=a("li"),upe=a("strong"),acr=o("deberta"),ncr=o(" \u2014 "),LG=a("a"),scr=o("TFDebertaForTokenClassification"),lcr=o(" (DeBERTa model)"),icr=l(),E9=a("li"),bpe=a("strong"),dcr=o("deberta-v2"),ccr=o(" \u2014 "),BG=a("a"),fcr=o("TFDebertaV2ForTokenClassification"),mcr=o(" (DeBERTa-v2 model)"),gcr=l(),y9=a("li"),vpe=a("strong"),hcr=o("distilbert"),pcr=o(" \u2014 "),xG=a("a"),_cr=o("TFDistilBertForTokenClassification"),ucr=o(" (DistilBERT model)"),bcr=l(),w9=a("li"),Tpe=a("strong"),vcr=o("electra"),Tcr=o(" \u2014 "),kG=a("a"),Fcr=o("TFElectraForTokenClassification"),Ccr=o(" (ELECTRA model)"),Mcr=l(),A9=a("li"),Fpe=a("strong"),Ecr=o("flaubert"),ycr=o(" \u2014 "),RG=a("a"),wcr=o("TFFlaubertForTokenClassification"),Acr=o(" (FlauBERT model)"),Lcr=l(),L9=a("li"),Cpe=a("strong"),Bcr=o("funnel"),xcr=o(" \u2014 "),SG=a("a"),kcr=o("TFFunnelForTokenClassification"),Rcr=o(" (Funnel Transformer model)"),Scr=l(),B9=a("li"),Mpe=a("strong"),Pcr=o("layoutlm"),$cr=o(" \u2014 "),PG=a("a"),Icr=o("TFLayoutLMForTokenClassification"),jcr=o(" (LayoutLM model)"),Ncr=l(),x9=a("li"),Epe=a("strong"),Dcr=o("longformer"),qcr=o(" \u2014 "),$G=a("a"),Gcr=o("TFLongformerForTokenClassification"),Ocr=o(" (Longformer model)"),Xcr=l(),k9=a("li"),ype=a("strong"),zcr=o("mobilebert"),Vcr=o(" \u2014 "),IG=a("a"),Wcr=o("TFMobileBertForTokenClassification"),Qcr=o(" (MobileBERT model)"),Hcr=l(),R9=a("li"),wpe=a("strong"),Ucr=o("mpnet"),Jcr=o(" \u2014 "),jG=a("a"),Ycr=o("TFMPNetForTokenClassification"),Kcr=o(" (MPNet model)"),Zcr=l(),S9=a("li"),Ape=a("strong"),efr=o("rembert"),ofr=o(" \u2014 "),NG=a("a"),rfr=o("TFRemBertForTokenClassification"),tfr=o(" (RemBERT model)"),afr=l(),P9=a("li"),Lpe=a("strong"),nfr=o("roberta"),sfr=o(" \u2014 "),DG=a("a"),lfr=o("TFRobertaForTokenClassification"),ifr=o(" (RoBERTa model)"),dfr=l(),$9=a("li"),Bpe=a("strong"),cfr=o("roformer"),ffr=o(" \u2014 "),qG=a("a"),mfr=o("TFRoFormerForTokenClassification"),gfr=o(" (RoFormer model)"),hfr=l(),I9=a("li"),xpe=a("strong"),pfr=o("xlm"),_fr=o(" \u2014 "),GG=a("a"),ufr=o("TFXLMForTokenClassification"),bfr=o(" (XLM model)"),vfr=l(),j9=a("li"),kpe=a("strong"),Tfr=o("xlm-roberta"),Ffr=o(" \u2014 "),OG=a("a"),Cfr=o("TFXLMRobertaForTokenClassification"),Mfr=o(" (XLM-RoBERTa model)"),Efr=l(),N9=a("li"),Rpe=a("strong"),yfr=o("xlnet"),wfr=o(" \u2014 "),XG=a("a"),Afr=o("TFXLNetForTokenClassification"),Lfr=o(" (XLNet model)"),Bfr=l(),Spe=a("p"),xfr=o("Examples:"),kfr=l(),f(QA.$$.fragment),$8e=l(),Rc=a("h2"),D9=a("a"),Ppe=a("span"),f(HA.$$.fragment),Rfr=l(),$pe=a("span"),Sfr=o("TFAutoModelForQuestionAnswering"),I8e=l(),Mr=a("div"),f(UA.$$.fragment),Pfr=l(),Sc=a("p"),$fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ipe=a("code"),Ifr=o("from_pretrained()"),jfr=o("class method or the "),jpe=a("code"),Nfr=o("from_config()"),Dfr=o(`class
method.`),qfr=l(),JA=a("p"),Gfr=o("This class cannot be instantiated directly using "),Npe=a("code"),Ofr=o("__init__()"),Xfr=o(" (throws an error)."),zfr=l(),_t=a("div"),f(YA.$$.fragment),Vfr=l(),Dpe=a("p"),Wfr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qfr=l(),Pc=a("p"),Hfr=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),Ufr=o("not"),Jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gpe=a("code"),Yfr=o("from_pretrained()"),Kfr=o("to load the model weights."),Zfr=l(),Ope=a("p"),emr=o("Examples:"),omr=l(),f(KA.$$.fragment),rmr=l(),Mo=a("div"),f(ZA.$$.fragment),tmr=l(),Xpe=a("p"),amr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nmr=l(),bn=a("p"),smr=o("The model class to instantiate is selected based on the "),zpe=a("code"),lmr=o("model_type"),imr=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),fmr=o("pretrained_model_name_or_path"),mmr=o(":"),gmr=l(),Z=a("ul"),q9=a("li"),Qpe=a("strong"),hmr=o("albert"),pmr=o(" \u2014 "),zG=a("a"),_mr=o("TFAlbertForQuestionAnswering"),umr=o(" (ALBERT model)"),bmr=l(),G9=a("li"),Hpe=a("strong"),vmr=o("bert"),Tmr=o(" \u2014 "),VG=a("a"),Fmr=o("TFBertForQuestionAnswering"),Cmr=o(" (BERT model)"),Mmr=l(),O9=a("li"),Upe=a("strong"),Emr=o("camembert"),ymr=o(" \u2014 "),WG=a("a"),wmr=o("TFCamembertForQuestionAnswering"),Amr=o(" (CamemBERT model)"),Lmr=l(),X9=a("li"),Jpe=a("strong"),Bmr=o("convbert"),xmr=o(" \u2014 "),QG=a("a"),kmr=o("TFConvBertForQuestionAnswering"),Rmr=o(" (ConvBERT model)"),Smr=l(),z9=a("li"),Ype=a("strong"),Pmr=o("deberta"),$mr=o(" \u2014 "),HG=a("a"),Imr=o("TFDebertaForQuestionAnswering"),jmr=o(" (DeBERTa model)"),Nmr=l(),V9=a("li"),Kpe=a("strong"),Dmr=o("deberta-v2"),qmr=o(" \u2014 "),UG=a("a"),Gmr=o("TFDebertaV2ForQuestionAnswering"),Omr=o(" (DeBERTa-v2 model)"),Xmr=l(),W9=a("li"),Zpe=a("strong"),zmr=o("distilbert"),Vmr=o(" \u2014 "),JG=a("a"),Wmr=o("TFDistilBertForQuestionAnswering"),Qmr=o(" (DistilBERT model)"),Hmr=l(),Q9=a("li"),e_e=a("strong"),Umr=o("electra"),Jmr=o(" \u2014 "),YG=a("a"),Ymr=o("TFElectraForQuestionAnswering"),Kmr=o(" (ELECTRA model)"),Zmr=l(),H9=a("li"),o_e=a("strong"),egr=o("flaubert"),ogr=o(" \u2014 "),KG=a("a"),rgr=o("TFFlaubertForQuestionAnsweringSimple"),tgr=o(" (FlauBERT model)"),agr=l(),U9=a("li"),r_e=a("strong"),ngr=o("funnel"),sgr=o(" \u2014 "),ZG=a("a"),lgr=o("TFFunnelForQuestionAnswering"),igr=o(" (Funnel Transformer model)"),dgr=l(),J9=a("li"),t_e=a("strong"),cgr=o("longformer"),fgr=o(" \u2014 "),eO=a("a"),mgr=o("TFLongformerForQuestionAnswering"),ggr=o(" (Longformer model)"),hgr=l(),Y9=a("li"),a_e=a("strong"),pgr=o("mobilebert"),_gr=o(" \u2014 "),oO=a("a"),ugr=o("TFMobileBertForQuestionAnswering"),bgr=o(" (MobileBERT model)"),vgr=l(),K9=a("li"),n_e=a("strong"),Tgr=o("mpnet"),Fgr=o(" \u2014 "),rO=a("a"),Cgr=o("TFMPNetForQuestionAnswering"),Mgr=o(" (MPNet model)"),Egr=l(),Z9=a("li"),s_e=a("strong"),ygr=o("rembert"),wgr=o(" \u2014 "),tO=a("a"),Agr=o("TFRemBertForQuestionAnswering"),Lgr=o(" (RemBERT model)"),Bgr=l(),eC=a("li"),l_e=a("strong"),xgr=o("roberta"),kgr=o(" \u2014 "),aO=a("a"),Rgr=o("TFRobertaForQuestionAnswering"),Sgr=o(" (RoBERTa model)"),Pgr=l(),oC=a("li"),i_e=a("strong"),$gr=o("roformer"),Igr=o(" \u2014 "),nO=a("a"),jgr=o("TFRoFormerForQuestionAnswering"),Ngr=o(" (RoFormer model)"),Dgr=l(),rC=a("li"),d_e=a("strong"),qgr=o("xlm"),Ggr=o(" \u2014 "),sO=a("a"),Ogr=o("TFXLMForQuestionAnsweringSimple"),Xgr=o(" (XLM model)"),zgr=l(),tC=a("li"),c_e=a("strong"),Vgr=o("xlm-roberta"),Wgr=o(" \u2014 "),lO=a("a"),Qgr=o("TFXLMRobertaForQuestionAnswering"),Hgr=o(" (XLM-RoBERTa model)"),Ugr=l(),aC=a("li"),f_e=a("strong"),Jgr=o("xlnet"),Ygr=o(" \u2014 "),iO=a("a"),Kgr=o("TFXLNetForQuestionAnsweringSimple"),Zgr=o(" (XLNet model)"),ehr=l(),m_e=a("p"),ohr=o("Examples:"),rhr=l(),f(e6.$$.fragment),j8e=l(),$c=a("h2"),nC=a("a"),g_e=a("span"),f(o6.$$.fragment),thr=l(),h_e=a("span"),ahr=o("TFAutoModelForVision2Seq"),N8e=l(),Er=a("div"),f(r6.$$.fragment),nhr=l(),Ic=a("p"),shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),p_e=a("code"),lhr=o("from_pretrained()"),ihr=o("class method or the "),__e=a("code"),dhr=o("from_config()"),chr=o(`class
method.`),fhr=l(),t6=a("p"),mhr=o("This class cannot be instantiated directly using "),u_e=a("code"),ghr=o("__init__()"),hhr=o(" (throws an error)."),phr=l(),ut=a("div"),f(a6.$$.fragment),_hr=l(),b_e=a("p"),uhr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bhr=l(),jc=a("p"),vhr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Thr=o("not"),Fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),T_e=a("code"),Chr=o("from_pretrained()"),Mhr=o("to load the model weights."),Ehr=l(),F_e=a("p"),yhr=o("Examples:"),whr=l(),f(n6.$$.fragment),Ahr=l(),Eo=a("div"),f(s6.$$.fragment),Lhr=l(),C_e=a("p"),Bhr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xhr=l(),vn=a("p"),khr=o("The model class to instantiate is selected based on the "),M_e=a("code"),Rhr=o("model_type"),Shr=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),Phr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),Ihr=o("pretrained_model_name_or_path"),jhr=o(":"),Nhr=l(),w_e=a("ul"),sC=a("li"),A_e=a("strong"),Dhr=o("vision-encoder-decoder"),qhr=o(" \u2014 "),dO=a("a"),Ghr=o("TFVisionEncoderDecoderModel"),Ohr=o(" (Vision Encoder decoder model)"),Xhr=l(),L_e=a("p"),zhr=o("Examples:"),Vhr=l(),f(l6.$$.fragment),D8e=l(),Nc=a("h2"),lC=a("a"),B_e=a("span"),f(i6.$$.fragment),Whr=l(),x_e=a("span"),Qhr=o("TFAutoModelForSpeechSeq2Seq"),q8e=l(),yr=a("div"),f(d6.$$.fragment),Hhr=l(),Dc=a("p"),Uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),k_e=a("code"),Jhr=o("from_pretrained()"),Yhr=o("class method or the "),R_e=a("code"),Khr=o("from_config()"),Zhr=o(`class
method.`),epr=l(),c6=a("p"),opr=o("This class cannot be instantiated directly using "),S_e=a("code"),rpr=o("__init__()"),tpr=o(" (throws an error)."),apr=l(),bt=a("div"),f(f6.$$.fragment),npr=l(),P_e=a("p"),spr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lpr=l(),qc=a("p"),ipr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),dpr=o("not"),cpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=a("code"),fpr=o("from_pretrained()"),mpr=o("to load the model weights."),gpr=l(),j_e=a("p"),hpr=o("Examples:"),ppr=l(),f(m6.$$.fragment),_pr=l(),yo=a("div"),f(g6.$$.fragment),upr=l(),N_e=a("p"),bpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vpr=l(),Tn=a("p"),Tpr=o("The model class to instantiate is selected based on the "),D_e=a("code"),Fpr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),ypr=o("pretrained_model_name_or_path"),wpr=o(":"),Apr=l(),O_e=a("ul"),iC=a("li"),X_e=a("strong"),Lpr=o("speech_to_text"),Bpr=o(" \u2014 "),cO=a("a"),xpr=o("TFSpeech2TextForConditionalGeneration"),kpr=o(" (Speech2Text model)"),Rpr=l(),z_e=a("p"),Spr=o("Examples:"),Ppr=l(),f(h6.$$.fragment),G8e=l(),Gc=a("h2"),dC=a("a"),V_e=a("span"),f(p6.$$.fragment),$pr=l(),W_e=a("span"),Ipr=o("FlaxAutoModel"),O8e=l(),wr=a("div"),f(_6.$$.fragment),jpr=l(),Oc=a("p"),Npr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Q_e=a("code"),Dpr=o("from_pretrained()"),qpr=o("class method or the "),H_e=a("code"),Gpr=o("from_config()"),Opr=o(`class
method.`),Xpr=l(),u6=a("p"),zpr=o("This class cannot be instantiated directly using "),U_e=a("code"),Vpr=o("__init__()"),Wpr=o(" (throws an error)."),Qpr=l(),vt=a("div"),f(b6.$$.fragment),Hpr=l(),J_e=a("p"),Upr=o("Instantiates one of the base model classes of the library from a configuration."),Jpr=l(),Xc=a("p"),Ypr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Kpr=o("not"),Zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=a("code"),e_r=o("from_pretrained()"),o_r=o("to load the model weights."),r_r=l(),Z_e=a("p"),t_r=o("Examples:"),a_r=l(),f(v6.$$.fragment),n_r=l(),wo=a("div"),f(T6.$$.fragment),s_r=l(),eue=a("p"),l_r=o("Instantiate one of the base model classes of the library from a pretrained model."),i_r=l(),Fn=a("p"),d_r=o("The model class to instantiate is selected based on the "),oue=a("code"),c_r=o("model_type"),f_r=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),h_r=o("pretrained_model_name_or_path"),p_r=o(":"),__r=l(),V=a("ul"),cC=a("li"),aue=a("strong"),u_r=o("albert"),b_r=o(" \u2014 "),fO=a("a"),v_r=o("FlaxAlbertModel"),T_r=o(" (ALBERT model)"),F_r=l(),fC=a("li"),nue=a("strong"),C_r=o("bart"),M_r=o(" \u2014 "),mO=a("a"),E_r=o("FlaxBartModel"),y_r=o(" (BART model)"),w_r=l(),mC=a("li"),sue=a("strong"),A_r=o("beit"),L_r=o(" \u2014 "),gO=a("a"),B_r=o("FlaxBeitModel"),x_r=o(" (BEiT model)"),k_r=l(),gC=a("li"),lue=a("strong"),R_r=o("bert"),S_r=o(" \u2014 "),hO=a("a"),P_r=o("FlaxBertModel"),$_r=o(" (BERT model)"),I_r=l(),hC=a("li"),iue=a("strong"),j_r=o("big_bird"),N_r=o(" \u2014 "),pO=a("a"),D_r=o("FlaxBigBirdModel"),q_r=o(" (BigBird model)"),G_r=l(),pC=a("li"),due=a("strong"),O_r=o("blenderbot"),X_r=o(" \u2014 "),_O=a("a"),z_r=o("FlaxBlenderbotModel"),V_r=o(" (Blenderbot model)"),W_r=l(),_C=a("li"),cue=a("strong"),Q_r=o("blenderbot-small"),H_r=o(" \u2014 "),uO=a("a"),U_r=o("FlaxBlenderbotSmallModel"),J_r=o(" (BlenderbotSmall model)"),Y_r=l(),uC=a("li"),fue=a("strong"),K_r=o("clip"),Z_r=o(" \u2014 "),bO=a("a"),eur=o("FlaxCLIPModel"),our=o(" (CLIP model)"),rur=l(),bC=a("li"),mue=a("strong"),tur=o("distilbert"),aur=o(" \u2014 "),vO=a("a"),nur=o("FlaxDistilBertModel"),sur=o(" (DistilBERT model)"),lur=l(),vC=a("li"),gue=a("strong"),iur=o("electra"),dur=o(" \u2014 "),TO=a("a"),cur=o("FlaxElectraModel"),fur=o(" (ELECTRA model)"),mur=l(),TC=a("li"),hue=a("strong"),gur=o("gpt2"),hur=o(" \u2014 "),FO=a("a"),pur=o("FlaxGPT2Model"),_ur=o(" (OpenAI GPT-2 model)"),uur=l(),FC=a("li"),pue=a("strong"),bur=o("gpt_neo"),vur=o(" \u2014 "),CO=a("a"),Tur=o("FlaxGPTNeoModel"),Fur=o(" (GPT Neo model)"),Cur=l(),CC=a("li"),_ue=a("strong"),Mur=o("gptj"),Eur=o(" \u2014 "),MO=a("a"),yur=o("FlaxGPTJModel"),wur=o(" (GPT-J model)"),Aur=l(),MC=a("li"),uue=a("strong"),Lur=o("marian"),Bur=o(" \u2014 "),EO=a("a"),xur=o("FlaxMarianModel"),kur=o(" (Marian model)"),Rur=l(),EC=a("li"),bue=a("strong"),Sur=o("mbart"),Pur=o(" \u2014 "),yO=a("a"),$ur=o("FlaxMBartModel"),Iur=o(" (mBART model)"),jur=l(),yC=a("li"),vue=a("strong"),Nur=o("mt5"),Dur=o(" \u2014 "),wO=a("a"),qur=o("FlaxMT5Model"),Gur=o(" (mT5 model)"),Our=l(),wC=a("li"),Tue=a("strong"),Xur=o("pegasus"),zur=o(" \u2014 "),AO=a("a"),Vur=o("FlaxPegasusModel"),Wur=o(" (Pegasus model)"),Qur=l(),AC=a("li"),Fue=a("strong"),Hur=o("roberta"),Uur=o(" \u2014 "),LO=a("a"),Jur=o("FlaxRobertaModel"),Yur=o(" (RoBERTa model)"),Kur=l(),LC=a("li"),Cue=a("strong"),Zur=o("roformer"),e5r=o(" \u2014 "),BO=a("a"),o5r=o("FlaxRoFormerModel"),r5r=o(" (RoFormer model)"),t5r=l(),BC=a("li"),Mue=a("strong"),a5r=o("t5"),n5r=o(" \u2014 "),xO=a("a"),s5r=o("FlaxT5Model"),l5r=o(" (T5 model)"),i5r=l(),xC=a("li"),Eue=a("strong"),d5r=o("vision-text-dual-encoder"),c5r=o(" \u2014 "),kO=a("a"),f5r=o("FlaxVisionTextDualEncoderModel"),m5r=o(" (VisionTextDualEncoder model)"),g5r=l(),kC=a("li"),yue=a("strong"),h5r=o("vit"),p5r=o(" \u2014 "),RO=a("a"),_5r=o("FlaxViTModel"),u5r=o(" (ViT model)"),b5r=l(),RC=a("li"),wue=a("strong"),v5r=o("wav2vec2"),T5r=o(" \u2014 "),SO=a("a"),F5r=o("FlaxWav2Vec2Model"),C5r=o(" (Wav2Vec2 model)"),M5r=l(),SC=a("li"),Aue=a("strong"),E5r=o("xglm"),y5r=o(" \u2014 "),PO=a("a"),w5r=o("FlaxXGLMModel"),A5r=o(" (XGLM model)"),L5r=l(),Lue=a("p"),B5r=o("Examples:"),x5r=l(),f(F6.$$.fragment),X8e=l(),zc=a("h2"),PC=a("a"),Bue=a("span"),f(C6.$$.fragment),k5r=l(),xue=a("span"),R5r=o("FlaxAutoModelForCausalLM"),z8e=l(),Ar=a("div"),f(M6.$$.fragment),S5r=l(),Vc=a("p"),P5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kue=a("code"),$5r=o("from_pretrained()"),I5r=o("class method or the "),Rue=a("code"),j5r=o("from_config()"),N5r=o(`class
method.`),D5r=l(),E6=a("p"),q5r=o("This class cannot be instantiated directly using "),Sue=a("code"),G5r=o("__init__()"),O5r=o(" (throws an error)."),X5r=l(),Tt=a("div"),f(y6.$$.fragment),z5r=l(),Pue=a("p"),V5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W5r=l(),Wc=a("p"),Q5r=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),H5r=o("not"),U5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iue=a("code"),J5r=o("from_pretrained()"),Y5r=o("to load the model weights."),K5r=l(),jue=a("p"),Z5r=o("Examples:"),e2r=l(),f(w6.$$.fragment),o2r=l(),Ao=a("div"),f(A6.$$.fragment),r2r=l(),Nue=a("p"),t2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a2r=l(),Cn=a("p"),n2r=o("The model class to instantiate is selected based on the "),Due=a("code"),s2r=o("model_type"),l2r=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),c2r=o("pretrained_model_name_or_path"),f2r=o(":"),m2r=l(),Mn=a("ul"),$C=a("li"),Oue=a("strong"),g2r=o("gpt2"),h2r=o(" \u2014 "),$O=a("a"),p2r=o("FlaxGPT2LMHeadModel"),_2r=o(" (OpenAI GPT-2 model)"),u2r=l(),IC=a("li"),Xue=a("strong"),b2r=o("gpt_neo"),v2r=o(" \u2014 "),IO=a("a"),T2r=o("FlaxGPTNeoForCausalLM"),F2r=o(" (GPT Neo model)"),C2r=l(),jC=a("li"),zue=a("strong"),M2r=o("gptj"),E2r=o(" \u2014 "),jO=a("a"),y2r=o("FlaxGPTJForCausalLM"),w2r=o(" (GPT-J model)"),A2r=l(),NC=a("li"),Vue=a("strong"),L2r=o("xglm"),B2r=o(" \u2014 "),NO=a("a"),x2r=o("FlaxXGLMForCausalLM"),k2r=o(" (XGLM model)"),R2r=l(),Wue=a("p"),S2r=o("Examples:"),P2r=l(),f(L6.$$.fragment),V8e=l(),Qc=a("h2"),DC=a("a"),Que=a("span"),f(B6.$$.fragment),$2r=l(),Hue=a("span"),I2r=o("FlaxAutoModelForPreTraining"),W8e=l(),Lr=a("div"),f(x6.$$.fragment),j2r=l(),Hc=a("p"),N2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uue=a("code"),D2r=o("from_pretrained()"),q2r=o("class method or the "),Jue=a("code"),G2r=o("from_config()"),O2r=o(`class
method.`),X2r=l(),k6=a("p"),z2r=o("This class cannot be instantiated directly using "),Yue=a("code"),V2r=o("__init__()"),W2r=o(" (throws an error)."),Q2r=l(),Ft=a("div"),f(R6.$$.fragment),H2r=l(),Kue=a("p"),U2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J2r=l(),Uc=a("p"),Y2r=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),K2r=o("not"),Z2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=a("code"),e1r=o("from_pretrained()"),o1r=o("to load the model weights."),r1r=l(),o5e=a("p"),t1r=o("Examples:"),a1r=l(),f(S6.$$.fragment),n1r=l(),Lo=a("div"),f(P6.$$.fragment),s1r=l(),r5e=a("p"),l1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),i1r=l(),En=a("p"),d1r=o("The model class to instantiate is selected based on the "),t5e=a("code"),c1r=o("model_type"),f1r=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),m1r=o("pretrained_model_name_or_path"),g1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(":"),_1r=l(),fe=a("ul"),qC=a("li"),s5e=a("strong"),u1r=o("albert"),b1r=o(" \u2014 "),DO=a("a"),v1r=o("FlaxAlbertForPreTraining"),T1r=o(" (ALBERT model)"),F1r=l(),GC=a("li"),l5e=a("strong"),C1r=o("bart"),M1r=o(" \u2014 "),qO=a("a"),E1r=o("FlaxBartForConditionalGeneration"),y1r=o(" (BART model)"),w1r=l(),OC=a("li"),i5e=a("strong"),A1r=o("bert"),L1r=o(" \u2014 "),GO=a("a"),B1r=o("FlaxBertForPreTraining"),x1r=o(" (BERT model)"),k1r=l(),XC=a("li"),d5e=a("strong"),R1r=o("big_bird"),S1r=o(" \u2014 "),OO=a("a"),P1r=o("FlaxBigBirdForPreTraining"),$1r=o(" (BigBird model)"),I1r=l(),zC=a("li"),c5e=a("strong"),j1r=o("electra"),N1r=o(" \u2014 "),XO=a("a"),D1r=o("FlaxElectraForPreTraining"),q1r=o(" (ELECTRA model)"),G1r=l(),VC=a("li"),f5e=a("strong"),O1r=o("mbart"),X1r=o(" \u2014 "),zO=a("a"),z1r=o("FlaxMBartForConditionalGeneration"),V1r=o(" (mBART model)"),W1r=l(),WC=a("li"),m5e=a("strong"),Q1r=o("mt5"),H1r=o(" \u2014 "),VO=a("a"),U1r=o("FlaxMT5ForConditionalGeneration"),J1r=o(" (mT5 model)"),Y1r=l(),QC=a("li"),g5e=a("strong"),K1r=o("roberta"),Z1r=o(" \u2014 "),WO=a("a"),ebr=o("FlaxRobertaForMaskedLM"),obr=o(" (RoBERTa model)"),rbr=l(),HC=a("li"),h5e=a("strong"),tbr=o("roformer"),abr=o(" \u2014 "),QO=a("a"),nbr=o("FlaxRoFormerForMaskedLM"),sbr=o(" (RoFormer model)"),lbr=l(),UC=a("li"),p5e=a("strong"),ibr=o("t5"),dbr=o(" \u2014 "),HO=a("a"),cbr=o("FlaxT5ForConditionalGeneration"),fbr=o(" (T5 model)"),mbr=l(),JC=a("li"),_5e=a("strong"),gbr=o("wav2vec2"),hbr=o(" \u2014 "),UO=a("a"),pbr=o("FlaxWav2Vec2ForPreTraining"),_br=o(" (Wav2Vec2 model)"),ubr=l(),u5e=a("p"),bbr=o("Examples:"),vbr=l(),f($6.$$.fragment),Q8e=l(),Jc=a("h2"),YC=a("a"),b5e=a("span"),f(I6.$$.fragment),Tbr=l(),v5e=a("span"),Fbr=o("FlaxAutoModelForMaskedLM"),H8e=l(),Br=a("div"),f(j6.$$.fragment),Cbr=l(),Yc=a("p"),Mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),T5e=a("code"),Ebr=o("from_pretrained()"),ybr=o("class method or the "),F5e=a("code"),wbr=o("from_config()"),Abr=o(`class
method.`),Lbr=l(),N6=a("p"),Bbr=o("This class cannot be instantiated directly using "),C5e=a("code"),xbr=o("__init__()"),kbr=o(" (throws an error)."),Rbr=l(),Ct=a("div"),f(D6.$$.fragment),Sbr=l(),M5e=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$br=l(),Kc=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),jbr=o("not"),Nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=a("code"),Dbr=o("from_pretrained()"),qbr=o("to load the model weights."),Gbr=l(),w5e=a("p"),Obr=o("Examples:"),Xbr=l(),f(q6.$$.fragment),zbr=l(),Bo=a("div"),f(G6.$$.fragment),Vbr=l(),A5e=a("p"),Wbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qbr=l(),yn=a("p"),Hbr=o("The model class to instantiate is selected based on the "),L5e=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),Zbr=o("pretrained_model_name_or_path"),evr=o(":"),ovr=l(),ve=a("ul"),KC=a("li"),k5e=a("strong"),rvr=o("albert"),tvr=o(" \u2014 "),JO=a("a"),avr=o("FlaxAlbertForMaskedLM"),nvr=o(" (ALBERT model)"),svr=l(),ZC=a("li"),R5e=a("strong"),lvr=o("bart"),ivr=o(" \u2014 "),YO=a("a"),dvr=o("FlaxBartForConditionalGeneration"),cvr=o(" (BART model)"),fvr=l(),e4=a("li"),S5e=a("strong"),mvr=o("bert"),gvr=o(" \u2014 "),KO=a("a"),hvr=o("FlaxBertForMaskedLM"),pvr=o(" (BERT model)"),_vr=l(),o4=a("li"),P5e=a("strong"),uvr=o("big_bird"),bvr=o(" \u2014 "),ZO=a("a"),vvr=o("FlaxBigBirdForMaskedLM"),Tvr=o(" (BigBird model)"),Fvr=l(),r4=a("li"),$5e=a("strong"),Cvr=o("distilbert"),Mvr=o(" \u2014 "),eX=a("a"),Evr=o("FlaxDistilBertForMaskedLM"),yvr=o(" (DistilBERT model)"),wvr=l(),t4=a("li"),I5e=a("strong"),Avr=o("electra"),Lvr=o(" \u2014 "),oX=a("a"),Bvr=o("FlaxElectraForMaskedLM"),xvr=o(" (ELECTRA model)"),kvr=l(),a4=a("li"),j5e=a("strong"),Rvr=o("mbart"),Svr=o(" \u2014 "),rX=a("a"),Pvr=o("FlaxMBartForConditionalGeneration"),$vr=o(" (mBART model)"),Ivr=l(),n4=a("li"),N5e=a("strong"),jvr=o("roberta"),Nvr=o(" \u2014 "),tX=a("a"),Dvr=o("FlaxRobertaForMaskedLM"),qvr=o(" (RoBERTa model)"),Gvr=l(),s4=a("li"),D5e=a("strong"),Ovr=o("roformer"),Xvr=o(" \u2014 "),aX=a("a"),zvr=o("FlaxRoFormerForMaskedLM"),Vvr=o(" (RoFormer model)"),Wvr=l(),q5e=a("p"),Qvr=o("Examples:"),Hvr=l(),f(O6.$$.fragment),U8e=l(),Zc=a("h2"),l4=a("a"),G5e=a("span"),f(X6.$$.fragment),Uvr=l(),O5e=a("span"),Jvr=o("FlaxAutoModelForSeq2SeqLM"),J8e=l(),xr=a("div"),f(z6.$$.fragment),Yvr=l(),ef=a("p"),Kvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),X5e=a("code"),Zvr=o("from_pretrained()"),eTr=o("class method or the "),z5e=a("code"),oTr=o("from_config()"),rTr=o(`class
method.`),tTr=l(),V6=a("p"),aTr=o("This class cannot be instantiated directly using "),V5e=a("code"),nTr=o("__init__()"),sTr=o(" (throws an error)."),lTr=l(),Mt=a("div"),f(W6.$$.fragment),iTr=l(),W5e=a("p"),dTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cTr=l(),of=a("p"),fTr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),mTr=o("not"),gTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H5e=a("code"),hTr=o("from_pretrained()"),pTr=o("to load the model weights."),_Tr=l(),U5e=a("p"),uTr=o("Examples:"),bTr=l(),f(Q6.$$.fragment),vTr=l(),xo=a("div"),f(H6.$$.fragment),TTr=l(),J5e=a("p"),FTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CTr=l(),wn=a("p"),MTr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),ETr=o("model_type"),yTr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),LTr=o("pretrained_model_name_or_path"),BTr=o(":"),xTr=l(),Te=a("ul"),i4=a("li"),e2e=a("strong"),kTr=o("bart"),RTr=o(" \u2014 "),nX=a("a"),STr=o("FlaxBartForConditionalGeneration"),PTr=o(" (BART model)"),$Tr=l(),d4=a("li"),o2e=a("strong"),ITr=o("blenderbot"),jTr=o(" \u2014 "),sX=a("a"),NTr=o("FlaxBlenderbotForConditionalGeneration"),DTr=o(" (Blenderbot model)"),qTr=l(),c4=a("li"),r2e=a("strong"),GTr=o("blenderbot-small"),OTr=o(" \u2014 "),lX=a("a"),XTr=o("FlaxBlenderbotSmallForConditionalGeneration"),zTr=o(" (BlenderbotSmall model)"),VTr=l(),f4=a("li"),t2e=a("strong"),WTr=o("encoder-decoder"),QTr=o(" \u2014 "),iX=a("a"),HTr=o("FlaxEncoderDecoderModel"),UTr=o(" (Encoder decoder model)"),JTr=l(),m4=a("li"),a2e=a("strong"),YTr=o("marian"),KTr=o(" \u2014 "),dX=a("a"),ZTr=o("FlaxMarianMTModel"),eFr=o(" (Marian model)"),oFr=l(),g4=a("li"),n2e=a("strong"),rFr=o("mbart"),tFr=o(" \u2014 "),cX=a("a"),aFr=o("FlaxMBartForConditionalGeneration"),nFr=o(" (mBART model)"),sFr=l(),h4=a("li"),s2e=a("strong"),lFr=o("mt5"),iFr=o(" \u2014 "),fX=a("a"),dFr=o("FlaxMT5ForConditionalGeneration"),cFr=o(" (mT5 model)"),fFr=l(),p4=a("li"),l2e=a("strong"),mFr=o("pegasus"),gFr=o(" \u2014 "),mX=a("a"),hFr=o("FlaxPegasusForConditionalGeneration"),pFr=o(" (Pegasus model)"),_Fr=l(),_4=a("li"),i2e=a("strong"),uFr=o("t5"),bFr=o(" \u2014 "),gX=a("a"),vFr=o("FlaxT5ForConditionalGeneration"),TFr=o(" (T5 model)"),FFr=l(),d2e=a("p"),CFr=o("Examples:"),MFr=l(),f(U6.$$.fragment),Y8e=l(),rf=a("h2"),u4=a("a"),c2e=a("span"),f(J6.$$.fragment),EFr=l(),f2e=a("span"),yFr=o("FlaxAutoModelForSequenceClassification"),K8e=l(),kr=a("div"),f(Y6.$$.fragment),wFr=l(),tf=a("p"),AFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),m2e=a("code"),LFr=o("from_pretrained()"),BFr=o("class method or the "),g2e=a("code"),xFr=o("from_config()"),kFr=o(`class
method.`),RFr=l(),K6=a("p"),SFr=o("This class cannot be instantiated directly using "),h2e=a("code"),PFr=o("__init__()"),$Fr=o(" (throws an error)."),IFr=l(),Et=a("div"),f(Z6.$$.fragment),jFr=l(),p2e=a("p"),NFr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DFr=l(),af=a("p"),qFr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),GFr=o("not"),OFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=a("code"),XFr=o("from_pretrained()"),zFr=o("to load the model weights."),VFr=l(),b2e=a("p"),WFr=o("Examples:"),QFr=l(),f(e0.$$.fragment),HFr=l(),ko=a("div"),f(o0.$$.fragment),UFr=l(),v2e=a("p"),JFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YFr=l(),An=a("p"),KFr=o("The model class to instantiate is selected based on the "),T2e=a("code"),ZFr=o("model_type"),e9r=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(":"),n9r=l(),Fe=a("ul"),b4=a("li"),M2e=a("strong"),s9r=o("albert"),l9r=o(" \u2014 "),hX=a("a"),i9r=o("FlaxAlbertForSequenceClassification"),d9r=o(" (ALBERT model)"),c9r=l(),v4=a("li"),E2e=a("strong"),f9r=o("bart"),m9r=o(" \u2014 "),pX=a("a"),g9r=o("FlaxBartForSequenceClassification"),h9r=o(" (BART model)"),p9r=l(),T4=a("li"),y2e=a("strong"),_9r=o("bert"),u9r=o(" \u2014 "),_X=a("a"),b9r=o("FlaxBertForSequenceClassification"),v9r=o(" (BERT model)"),T9r=l(),F4=a("li"),w2e=a("strong"),F9r=o("big_bird"),C9r=o(" \u2014 "),uX=a("a"),M9r=o("FlaxBigBirdForSequenceClassification"),E9r=o(" (BigBird model)"),y9r=l(),C4=a("li"),A2e=a("strong"),w9r=o("distilbert"),A9r=o(" \u2014 "),bX=a("a"),L9r=o("FlaxDistilBertForSequenceClassification"),B9r=o(" (DistilBERT model)"),x9r=l(),M4=a("li"),L2e=a("strong"),k9r=o("electra"),R9r=o(" \u2014 "),vX=a("a"),S9r=o("FlaxElectraForSequenceClassification"),P9r=o(" (ELECTRA model)"),$9r=l(),E4=a("li"),B2e=a("strong"),I9r=o("mbart"),j9r=o(" \u2014 "),TX=a("a"),N9r=o("FlaxMBartForSequenceClassification"),D9r=o(" (mBART model)"),q9r=l(),y4=a("li"),x2e=a("strong"),G9r=o("roberta"),O9r=o(" \u2014 "),FX=a("a"),X9r=o("FlaxRobertaForSequenceClassification"),z9r=o(" (RoBERTa model)"),V9r=l(),w4=a("li"),k2e=a("strong"),W9r=o("roformer"),Q9r=o(" \u2014 "),CX=a("a"),H9r=o("FlaxRoFormerForSequenceClassification"),U9r=o(" (RoFormer model)"),J9r=l(),R2e=a("p"),Y9r=o("Examples:"),K9r=l(),f(r0.$$.fragment),Z8e=l(),nf=a("h2"),A4=a("a"),S2e=a("span"),f(t0.$$.fragment),Z9r=l(),P2e=a("span"),eCr=o("FlaxAutoModelForQuestionAnswering"),eBe=l(),Rr=a("div"),f(a0.$$.fragment),oCr=l(),sf=a("p"),rCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$2e=a("code"),tCr=o("from_pretrained()"),aCr=o("class method or the "),I2e=a("code"),nCr=o("from_config()"),sCr=o(`class
method.`),lCr=l(),n0=a("p"),iCr=o("This class cannot be instantiated directly using "),j2e=a("code"),dCr=o("__init__()"),cCr=o(" (throws an error)."),fCr=l(),yt=a("div"),f(s0.$$.fragment),mCr=l(),N2e=a("p"),gCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hCr=l(),lf=a("p"),pCr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),_Cr=o("not"),uCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=a("code"),bCr=o("from_pretrained()"),vCr=o("to load the model weights."),TCr=l(),G2e=a("p"),FCr=o("Examples:"),CCr=l(),f(l0.$$.fragment),MCr=l(),Ro=a("div"),f(i0.$$.fragment),ECr=l(),O2e=a("p"),yCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wCr=l(),Ln=a("p"),ACr=o("The model class to instantiate is selected based on the "),X2e=a("code"),LCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),xCr=o("pretrained_model_name_or_path"),kCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),RCr=o("pretrained_model_name_or_path"),SCr=o(":"),PCr=l(),Ce=a("ul"),L4=a("li"),W2e=a("strong"),$Cr=o("albert"),ICr=o(" \u2014 "),MX=a("a"),jCr=o("FlaxAlbertForQuestionAnswering"),NCr=o(" (ALBERT model)"),DCr=l(),B4=a("li"),Q2e=a("strong"),qCr=o("bart"),GCr=o(" \u2014 "),EX=a("a"),OCr=o("FlaxBartForQuestionAnswering"),XCr=o(" (BART model)"),zCr=l(),x4=a("li"),H2e=a("strong"),VCr=o("bert"),WCr=o(" \u2014 "),yX=a("a"),QCr=o("FlaxBertForQuestionAnswering"),HCr=o(" (BERT model)"),UCr=l(),k4=a("li"),U2e=a("strong"),JCr=o("big_bird"),YCr=o(" \u2014 "),wX=a("a"),KCr=o("FlaxBigBirdForQuestionAnswering"),ZCr=o(" (BigBird model)"),e4r=l(),R4=a("li"),J2e=a("strong"),o4r=o("distilbert"),r4r=o(" \u2014 "),AX=a("a"),t4r=o("FlaxDistilBertForQuestionAnswering"),a4r=o(" (DistilBERT model)"),n4r=l(),S4=a("li"),Y2e=a("strong"),s4r=o("electra"),l4r=o(" \u2014 "),LX=a("a"),i4r=o("FlaxElectraForQuestionAnswering"),d4r=o(" (ELECTRA model)"),c4r=l(),P4=a("li"),K2e=a("strong"),f4r=o("mbart"),m4r=o(" \u2014 "),BX=a("a"),g4r=o("FlaxMBartForQuestionAnswering"),h4r=o(" (mBART model)"),p4r=l(),$4=a("li"),Z2e=a("strong"),_4r=o("roberta"),u4r=o(" \u2014 "),xX=a("a"),b4r=o("FlaxRobertaForQuestionAnswering"),v4r=o(" (RoBERTa model)"),T4r=l(),I4=a("li"),e1e=a("strong"),F4r=o("roformer"),C4r=o(" \u2014 "),kX=a("a"),M4r=o("FlaxRoFormerForQuestionAnswering"),E4r=o(" (RoFormer model)"),y4r=l(),o1e=a("p"),w4r=o("Examples:"),A4r=l(),f(d0.$$.fragment),oBe=l(),df=a("h2"),j4=a("a"),r1e=a("span"),f(c0.$$.fragment),L4r=l(),t1e=a("span"),B4r=o("FlaxAutoModelForTokenClassification"),rBe=l(),Sr=a("div"),f(f0.$$.fragment),x4r=l(),cf=a("p"),k4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),a1e=a("code"),R4r=o("from_pretrained()"),S4r=o("class method or the "),n1e=a("code"),P4r=o("from_config()"),$4r=o(`class
method.`),I4r=l(),m0=a("p"),j4r=o("This class cannot be instantiated directly using "),s1e=a("code"),N4r=o("__init__()"),D4r=o(" (throws an error)."),q4r=l(),wt=a("div"),f(g0.$$.fragment),G4r=l(),l1e=a("p"),O4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X4r=l(),ff=a("p"),z4r=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),V4r=o("not"),W4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d1e=a("code"),Q4r=o("from_pretrained()"),H4r=o("to load the model weights."),U4r=l(),c1e=a("p"),J4r=o("Examples:"),Y4r=l(),f(h0.$$.fragment),K4r=l(),So=a("div"),f(p0.$$.fragment),Z4r=l(),f1e=a("p"),eMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oMr=l(),Bn=a("p"),rMr=o("The model class to instantiate is selected based on the "),m1e=a("code"),tMr=o("model_type"),aMr=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),nMr=o("pretrained_model_name_or_path"),sMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),lMr=o("pretrained_model_name_or_path"),iMr=o(":"),dMr=l(),so=a("ul"),N4=a("li"),p1e=a("strong"),cMr=o("albert"),fMr=o(" \u2014 "),RX=a("a"),mMr=o("FlaxAlbertForTokenClassification"),gMr=o(" (ALBERT model)"),hMr=l(),D4=a("li"),_1e=a("strong"),pMr=o("bert"),_Mr=o(" \u2014 "),SX=a("a"),uMr=o("FlaxBertForTokenClassification"),bMr=o(" (BERT model)"),vMr=l(),q4=a("li"),u1e=a("strong"),TMr=o("big_bird"),FMr=o(" \u2014 "),PX=a("a"),CMr=o("FlaxBigBirdForTokenClassification"),MMr=o(" (BigBird model)"),EMr=l(),G4=a("li"),b1e=a("strong"),yMr=o("distilbert"),wMr=o(" \u2014 "),$X=a("a"),AMr=o("FlaxDistilBertForTokenClassification"),LMr=o(" (DistilBERT model)"),BMr=l(),O4=a("li"),v1e=a("strong"),xMr=o("electra"),kMr=o(" \u2014 "),IX=a("a"),RMr=o("FlaxElectraForTokenClassification"),SMr=o(" (ELECTRA model)"),PMr=l(),X4=a("li"),T1e=a("strong"),$Mr=o("roberta"),IMr=o(" \u2014 "),jX=a("a"),jMr=o("FlaxRobertaForTokenClassification"),NMr=o(" (RoBERTa model)"),DMr=l(),z4=a("li"),F1e=a("strong"),qMr=o("roformer"),GMr=o(" \u2014 "),NX=a("a"),OMr=o("FlaxRoFormerForTokenClassification"),XMr=o(" (RoFormer model)"),zMr=l(),C1e=a("p"),VMr=o("Examples:"),WMr=l(),f(_0.$$.fragment),tBe=l(),mf=a("h2"),V4=a("a"),M1e=a("span"),f(u0.$$.fragment),QMr=l(),E1e=a("span"),HMr=o("FlaxAutoModelForMultipleChoice"),aBe=l(),Pr=a("div"),f(b0.$$.fragment),UMr=l(),gf=a("p"),JMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),y1e=a("code"),YMr=o("from_pretrained()"),KMr=o("class method or the "),w1e=a("code"),ZMr=o("from_config()"),eEr=o(`class
method.`),oEr=l(),v0=a("p"),rEr=o("This class cannot be instantiated directly using "),A1e=a("code"),tEr=o("__init__()"),aEr=o(" (throws an error)."),nEr=l(),At=a("div"),f(T0.$$.fragment),sEr=l(),L1e=a("p"),lEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iEr=l(),hf=a("p"),dEr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),cEr=o("not"),fEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x1e=a("code"),mEr=o("from_pretrained()"),gEr=o("to load the model weights."),hEr=l(),k1e=a("p"),pEr=o("Examples:"),_Er=l(),f(F0.$$.fragment),uEr=l(),Po=a("div"),f(C0.$$.fragment),bEr=l(),R1e=a("p"),vEr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TEr=l(),xn=a("p"),FEr=o("The model class to instantiate is selected based on the "),S1e=a("code"),CEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),EEr=o("pretrained_model_name_or_path"),yEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),LEr=l(),lo=a("ul"),W4=a("li"),I1e=a("strong"),BEr=o("albert"),xEr=o(" \u2014 "),DX=a("a"),kEr=o("FlaxAlbertForMultipleChoice"),REr=o(" (ALBERT model)"),SEr=l(),Q4=a("li"),j1e=a("strong"),PEr=o("bert"),$Er=o(" \u2014 "),qX=a("a"),IEr=o("FlaxBertForMultipleChoice"),jEr=o(" (BERT model)"),NEr=l(),H4=a("li"),N1e=a("strong"),DEr=o("big_bird"),qEr=o(" \u2014 "),GX=a("a"),GEr=o("FlaxBigBirdForMultipleChoice"),OEr=o(" (BigBird model)"),XEr=l(),U4=a("li"),D1e=a("strong"),zEr=o("distilbert"),VEr=o(" \u2014 "),OX=a("a"),WEr=o("FlaxDistilBertForMultipleChoice"),QEr=o(" (DistilBERT model)"),HEr=l(),J4=a("li"),q1e=a("strong"),UEr=o("electra"),JEr=o(" \u2014 "),XX=a("a"),YEr=o("FlaxElectraForMultipleChoice"),KEr=o(" (ELECTRA model)"),ZEr=l(),Y4=a("li"),G1e=a("strong"),e3r=o("roberta"),o3r=o(" \u2014 "),zX=a("a"),r3r=o("FlaxRobertaForMultipleChoice"),t3r=o(" (RoBERTa model)"),a3r=l(),K4=a("li"),O1e=a("strong"),n3r=o("roformer"),s3r=o(" \u2014 "),VX=a("a"),l3r=o("FlaxRoFormerForMultipleChoice"),i3r=o(" (RoFormer model)"),d3r=l(),X1e=a("p"),c3r=o("Examples:"),f3r=l(),f(M0.$$.fragment),nBe=l(),pf=a("h2"),Z4=a("a"),z1e=a("span"),f(E0.$$.fragment),m3r=l(),V1e=a("span"),g3r=o("FlaxAutoModelForNextSentencePrediction"),sBe=l(),$r=a("div"),f(y0.$$.fragment),h3r=l(),_f=a("p"),p3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W1e=a("code"),_3r=o("from_pretrained()"),u3r=o("class method or the "),Q1e=a("code"),b3r=o("from_config()"),v3r=o(`class
method.`),T3r=l(),w0=a("p"),F3r=o("This class cannot be instantiated directly using "),H1e=a("code"),C3r=o("__init__()"),M3r=o(" (throws an error)."),E3r=l(),Lt=a("div"),f(A0.$$.fragment),y3r=l(),U1e=a("p"),w3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A3r=l(),uf=a("p"),L3r=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),B3r=o("not"),x3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y1e=a("code"),k3r=o("from_pretrained()"),R3r=o("to load the model weights."),S3r=l(),K1e=a("p"),P3r=o("Examples:"),$3r=l(),f(L0.$$.fragment),I3r=l(),$o=a("div"),f(B0.$$.fragment),j3r=l(),Z1e=a("p"),N3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D3r=l(),kn=a("p"),q3r=o("The model class to instantiate is selected based on the "),ebe=a("code"),G3r=o("model_type"),O3r=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),X3r=o("pretrained_model_name_or_path"),z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),V3r=o("pretrained_model_name_or_path"),W3r=o(":"),Q3r=l(),tbe=a("ul"),eM=a("li"),abe=a("strong"),H3r=o("bert"),U3r=o(" \u2014 "),WX=a("a"),J3r=o("FlaxBertForNextSentencePrediction"),Y3r=o(" (BERT model)"),K3r=l(),nbe=a("p"),Z3r=o("Examples:"),eyr=l(),f(x0.$$.fragment),lBe=l(),bf=a("h2"),oM=a("a"),sbe=a("span"),f(k0.$$.fragment),oyr=l(),lbe=a("span"),ryr=o("FlaxAutoModelForImageClassification"),iBe=l(),Ir=a("div"),f(R0.$$.fragment),tyr=l(),vf=a("p"),ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ibe=a("code"),nyr=o("from_pretrained()"),syr=o("class method or the "),dbe=a("code"),lyr=o("from_config()"),iyr=o(`class
method.`),dyr=l(),S0=a("p"),cyr=o("This class cannot be instantiated directly using "),cbe=a("code"),fyr=o("__init__()"),myr=o(" (throws an error)."),gyr=l(),Bt=a("div"),f(P0.$$.fragment),hyr=l(),fbe=a("p"),pyr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_yr=l(),Tf=a("p"),uyr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),byr=o("not"),vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gbe=a("code"),Tyr=o("from_pretrained()"),Fyr=o("to load the model weights."),Cyr=l(),hbe=a("p"),Myr=o("Examples:"),Eyr=l(),f($0.$$.fragment),yyr=l(),Io=a("div"),f(I0.$$.fragment),wyr=l(),pbe=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lyr=l(),Rn=a("p"),Byr=o("The model class to instantiate is selected based on the "),_be=a("code"),xyr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),Ryr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=a("code"),Pyr=o("pretrained_model_name_or_path"),$yr=o(":"),Iyr=l(),j0=a("ul"),rM=a("li"),vbe=a("strong"),jyr=o("beit"),Nyr=o(" \u2014 "),QX=a("a"),Dyr=o("FlaxBeitForImageClassification"),qyr=o(" (BEiT model)"),Gyr=l(),tM=a("li"),Tbe=a("strong"),Oyr=o("vit"),Xyr=o(" \u2014 "),HX=a("a"),zyr=o("FlaxViTForImageClassification"),Vyr=o(" (ViT model)"),Wyr=l(),Fbe=a("p"),Qyr=o("Examples:"),Hyr=l(),f(N0.$$.fragment),dBe=l(),Ff=a("h2"),aM=a("a"),Cbe=a("span"),f(D0.$$.fragment),Uyr=l(),Mbe=a("span"),Jyr=o("FlaxAutoModelForVision2Seq"),cBe=l(),jr=a("div"),f(q0.$$.fragment),Yyr=l(),Cf=a("p"),Kyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ebe=a("code"),Zyr=o("from_pretrained()"),ewr=o("class method or the "),ybe=a("code"),owr=o("from_config()"),rwr=o(`class
method.`),twr=l(),G0=a("p"),awr=o("This class cannot be instantiated directly using "),wbe=a("code"),nwr=o("__init__()"),swr=o(" (throws an error)."),lwr=l(),xt=a("div"),f(O0.$$.fragment),iwr=l(),Abe=a("p"),dwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cwr=l(),Mf=a("p"),fwr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),mwr=o("not"),gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=a("code"),hwr=o("from_pretrained()"),pwr=o("to load the model weights."),_wr=l(),xbe=a("p"),uwr=o("Examples:"),bwr=l(),f(X0.$$.fragment),vwr=l(),jo=a("div"),f(z0.$$.fragment),Twr=l(),kbe=a("p"),Fwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Cwr=l(),Sn=a("p"),Mwr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Ewr=o("model_type"),ywr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),Lwr=o("pretrained_model_name_or_path"),Bwr=o(":"),xwr=l(),$be=a("ul"),nM=a("li"),Ibe=a("strong"),kwr=o("vision-encoder-decoder"),Rwr=o(" \u2014 "),UX=a("a"),Swr=o("FlaxVisionEncoderDecoderModel"),Pwr=o(" (Vision Encoder decoder model)"),$wr=l(),jbe=a("p"),Iwr=o("Examples:"),jwr=l(),f(V0.$$.fragment),this.h()},l(d){const u=W_t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),ie=n(d,"H1",{class:!0});var W0=s(ie);me=n(W0,"A",{id:!0,class:!0,href:!0});var Nbe=s(me);to=n(Nbe,"SPAN",{});var Dbe=s(to);m(ce.$$.fragment,Dbe),Dbe.forEach(t),Nbe.forEach(t),ue=i(W0),Do=n(W0,"SPAN",{});var Dwr=s(Do);Ai=r(Dwr,"Auto Classes"),Dwr.forEach(t),W0.forEach(t),yf=i(d),sa=n(d,"P",{});var mBe=s(sa);Li=r(mBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Bi=n(mBe,"CODE",{});var qwr=s(Bi);tE=r(qwr,"from_pretrained()"),qwr.forEach(t),wf=r(mBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),mBe.forEach(t),ye=i(d),io=n(d,"P",{});var sM=s(io);xi=r(sM,"Instantiating one of "),Pn=n(sM,"A",{href:!0});var Gwr=s(Pn);aE=r(Gwr,"AutoConfig"),Gwr.forEach(t),$n=r(sM,", "),In=n(sM,"A",{href:!0});var Owr=s(In);nE=r(Owr,"AutoModel"),Owr.forEach(t),ki=r(sM,`, and
`),jn=n(sM,"A",{href:!0});var Xwr=s(jn);sE=r(Xwr,"AutoTokenizer"),Xwr.forEach(t),Ri=r(sM," will directly create a class of the relevant architecture. For instance"),sM.forEach(t),Af=i(d),m($a.$$.fragment,d),co=i(d),ge=n(d,"P",{});var gBe=s(ge);XL=r(gBe,"will create a model that is an instance of "),Si=n(gBe,"A",{href:!0});var zwr=s(Si);zL=r(zwr,"BertModel"),zwr.forEach(t),VL=r(gBe,"."),gBe.forEach(t),qo=i(d),Ia=n(d,"P",{});var hBe=s(Ia);WL=r(hBe,"There is one class of "),Lf=n(hBe,"CODE",{});var Vwr=s(Lf);QL=r(Vwr,"AutoModel"),Vwr.forEach(t),Cke=r(hBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hBe.forEach(t),m7e=i(d),Pi=n(d,"H2",{class:!0});var pBe=s(Pi);Bf=n(pBe,"A",{id:!0,class:!0,href:!0});var Wwr=s(Bf);OV=n(Wwr,"SPAN",{});var Qwr=s(OV);m(lE.$$.fragment,Qwr),Qwr.forEach(t),Wwr.forEach(t),Mke=i(pBe),XV=n(pBe,"SPAN",{});var Hwr=s(XV);Eke=r(Hwr,"Extending the Auto Classes"),Hwr.forEach(t),pBe.forEach(t),g7e=i(d),Nn=n(d,"P",{});var JX=s(Nn);yke=r(JX,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),zV=n(JX,"CODE",{});var Uwr=s(zV);wke=r(Uwr,"NewModel"),Uwr.forEach(t),Ake=r(JX,", make sure you have a "),VV=n(JX,"CODE",{});var Jwr=s(VV);Lke=r(Jwr,"NewModelConfig"),Jwr.forEach(t),Bke=r(JX,` then you can add those to the auto
classes like this:`),JX.forEach(t),h7e=i(d),m(iE.$$.fragment,d),p7e=i(d),HL=n(d,"P",{});var Ywr=s(HL);xke=r(Ywr,"You will then be able to use the auto classes like you would usually do!"),Ywr.forEach(t),_7e=i(d),m(xf.$$.fragment,d),u7e=i(d),$i=n(d,"H2",{class:!0});var _Be=s($i);kf=n(_Be,"A",{id:!0,class:!0,href:!0});var Kwr=s(kf);WV=n(Kwr,"SPAN",{});var Zwr=s(WV);m(dE.$$.fragment,Zwr),Zwr.forEach(t),Kwr.forEach(t),kke=i(_Be),QV=n(_Be,"SPAN",{});var eAr=s(QV);Rke=r(eAr,"AutoConfig"),eAr.forEach(t),_Be.forEach(t),b7e=i(d),Go=n(d,"DIV",{class:!0});var $s=s(Go);m(cE.$$.fragment,$s),Ske=i($s),fE=n($s,"P",{});var uBe=s(fE);Pke=r(uBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),UL=n(uBe,"A",{href:!0});var oAr=s(UL);$ke=r(oAr,"from_pretrained()"),oAr.forEach(t),Ike=r(uBe," class method."),uBe.forEach(t),jke=i($s),mE=n($s,"P",{});var bBe=s(mE);Nke=r(bBe,"This class cannot be instantiated directly using "),HV=n(bBe,"CODE",{});var rAr=s(HV);Dke=r(rAr,"__init__()"),rAr.forEach(t),qke=r(bBe," (throws an error)."),bBe.forEach(t),Gke=i($s),fo=n($s,"DIV",{class:!0});var ia=s(fo);m(gE.$$.fragment,ia),Oke=i(ia),UV=n(ia,"P",{});var tAr=s(UV);Xke=r(tAr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tAr.forEach(t),zke=i(ia),Ii=n(ia,"P",{});var YX=s(Ii);Vke=r(YX,"The configuration class to instantiate is selected based on the "),JV=n(YX,"CODE",{});var aAr=s(JV);Wke=r(aAr,"model_type"),aAr.forEach(t),Qke=r(YX,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),YV=n(YX,"CODE",{});var nAr=s(YV);Hke=r(nAr,"pretrained_model_name_or_path"),nAr.forEach(t),Uke=r(YX,":"),YX.forEach(t),Jke=i(ia),v=n(ia,"UL",{});var T=s(v);Rf=n(T,"LI",{});var qbe=s(Rf);KV=n(qbe,"STRONG",{});var sAr=s(KV);Yke=r(sAr,"albert"),sAr.forEach(t),Kke=r(qbe," \u2014 "),JL=n(qbe,"A",{href:!0});var lAr=s(JL);Zke=r(lAr,"AlbertConfig"),lAr.forEach(t),eRe=r(qbe," (ALBERT model)"),qbe.forEach(t),oRe=i(T),Sf=n(T,"LI",{});var Gbe=s(Sf);ZV=n(Gbe,"STRONG",{});var iAr=s(ZV);rRe=r(iAr,"bart"),iAr.forEach(t),tRe=r(Gbe," \u2014 "),YL=n(Gbe,"A",{href:!0});var dAr=s(YL);aRe=r(dAr,"BartConfig"),dAr.forEach(t),nRe=r(Gbe," (BART model)"),Gbe.forEach(t),sRe=i(T),Pf=n(T,"LI",{});var Obe=s(Pf);eW=n(Obe,"STRONG",{});var cAr=s(eW);lRe=r(cAr,"beit"),cAr.forEach(t),iRe=r(Obe," \u2014 "),KL=n(Obe,"A",{href:!0});var fAr=s(KL);dRe=r(fAr,"BeitConfig"),fAr.forEach(t),cRe=r(Obe," (BEiT model)"),Obe.forEach(t),fRe=i(T),$f=n(T,"LI",{});var Xbe=s($f);oW=n(Xbe,"STRONG",{});var mAr=s(oW);mRe=r(mAr,"bert"),mAr.forEach(t),gRe=r(Xbe," \u2014 "),ZL=n(Xbe,"A",{href:!0});var gAr=s(ZL);hRe=r(gAr,"BertConfig"),gAr.forEach(t),pRe=r(Xbe," (BERT model)"),Xbe.forEach(t),_Re=i(T),If=n(T,"LI",{});var zbe=s(If);rW=n(zbe,"STRONG",{});var hAr=s(rW);uRe=r(hAr,"bert-generation"),hAr.forEach(t),bRe=r(zbe," \u2014 "),e7=n(zbe,"A",{href:!0});var pAr=s(e7);vRe=r(pAr,"BertGenerationConfig"),pAr.forEach(t),TRe=r(zbe," (Bert Generation model)"),zbe.forEach(t),FRe=i(T),jf=n(T,"LI",{});var Vbe=s(jf);tW=n(Vbe,"STRONG",{});var _Ar=s(tW);CRe=r(_Ar,"big_bird"),_Ar.forEach(t),MRe=r(Vbe," \u2014 "),o7=n(Vbe,"A",{href:!0});var uAr=s(o7);ERe=r(uAr,"BigBirdConfig"),uAr.forEach(t),yRe=r(Vbe," (BigBird model)"),Vbe.forEach(t),wRe=i(T),Nf=n(T,"LI",{});var Wbe=s(Nf);aW=n(Wbe,"STRONG",{});var bAr=s(aW);ARe=r(bAr,"bigbird_pegasus"),bAr.forEach(t),LRe=r(Wbe," \u2014 "),r7=n(Wbe,"A",{href:!0});var vAr=s(r7);BRe=r(vAr,"BigBirdPegasusConfig"),vAr.forEach(t),xRe=r(Wbe," (BigBirdPegasus model)"),Wbe.forEach(t),kRe=i(T),Df=n(T,"LI",{});var Qbe=s(Df);nW=n(Qbe,"STRONG",{});var TAr=s(nW);RRe=r(TAr,"blenderbot"),TAr.forEach(t),SRe=r(Qbe," \u2014 "),t7=n(Qbe,"A",{href:!0});var FAr=s(t7);PRe=r(FAr,"BlenderbotConfig"),FAr.forEach(t),$Re=r(Qbe," (Blenderbot model)"),Qbe.forEach(t),IRe=i(T),qf=n(T,"LI",{});var Hbe=s(qf);sW=n(Hbe,"STRONG",{});var CAr=s(sW);jRe=r(CAr,"blenderbot-small"),CAr.forEach(t),NRe=r(Hbe," \u2014 "),a7=n(Hbe,"A",{href:!0});var MAr=s(a7);DRe=r(MAr,"BlenderbotSmallConfig"),MAr.forEach(t),qRe=r(Hbe," (BlenderbotSmall model)"),Hbe.forEach(t),GRe=i(T),Gf=n(T,"LI",{});var Ube=s(Gf);lW=n(Ube,"STRONG",{});var EAr=s(lW);ORe=r(EAr,"camembert"),EAr.forEach(t),XRe=r(Ube," \u2014 "),n7=n(Ube,"A",{href:!0});var yAr=s(n7);zRe=r(yAr,"CamembertConfig"),yAr.forEach(t),VRe=r(Ube," (CamemBERT model)"),Ube.forEach(t),WRe=i(T),Of=n(T,"LI",{});var Jbe=s(Of);iW=n(Jbe,"STRONG",{});var wAr=s(iW);QRe=r(wAr,"canine"),wAr.forEach(t),HRe=r(Jbe," \u2014 "),s7=n(Jbe,"A",{href:!0});var AAr=s(s7);URe=r(AAr,"CanineConfig"),AAr.forEach(t),JRe=r(Jbe," (Canine model)"),Jbe.forEach(t),YRe=i(T),Xf=n(T,"LI",{});var Ybe=s(Xf);dW=n(Ybe,"STRONG",{});var LAr=s(dW);KRe=r(LAr,"clip"),LAr.forEach(t),ZRe=r(Ybe," \u2014 "),l7=n(Ybe,"A",{href:!0});var BAr=s(l7);eSe=r(BAr,"CLIPConfig"),BAr.forEach(t),oSe=r(Ybe," (CLIP model)"),Ybe.forEach(t),rSe=i(T),zf=n(T,"LI",{});var Kbe=s(zf);cW=n(Kbe,"STRONG",{});var xAr=s(cW);tSe=r(xAr,"convbert"),xAr.forEach(t),aSe=r(Kbe," \u2014 "),i7=n(Kbe,"A",{href:!0});var kAr=s(i7);nSe=r(kAr,"ConvBertConfig"),kAr.forEach(t),sSe=r(Kbe," (ConvBERT model)"),Kbe.forEach(t),lSe=i(T),Vf=n(T,"LI",{});var Zbe=s(Vf);fW=n(Zbe,"STRONG",{});var RAr=s(fW);iSe=r(RAr,"convnext"),RAr.forEach(t),dSe=r(Zbe," \u2014 "),d7=n(Zbe,"A",{href:!0});var SAr=s(d7);cSe=r(SAr,"ConvNextConfig"),SAr.forEach(t),fSe=r(Zbe," (ConvNext model)"),Zbe.forEach(t),mSe=i(T),Wf=n(T,"LI",{});var eve=s(Wf);mW=n(eve,"STRONG",{});var PAr=s(mW);gSe=r(PAr,"ctrl"),PAr.forEach(t),hSe=r(eve," \u2014 "),c7=n(eve,"A",{href:!0});var $Ar=s(c7);pSe=r($Ar,"CTRLConfig"),$Ar.forEach(t),_Se=r(eve," (CTRL model)"),eve.forEach(t),uSe=i(T),Qf=n(T,"LI",{});var ove=s(Qf);gW=n(ove,"STRONG",{});var IAr=s(gW);bSe=r(IAr,"deberta"),IAr.forEach(t),vSe=r(ove," \u2014 "),f7=n(ove,"A",{href:!0});var jAr=s(f7);TSe=r(jAr,"DebertaConfig"),jAr.forEach(t),FSe=r(ove," (DeBERTa model)"),ove.forEach(t),CSe=i(T),Hf=n(T,"LI",{});var rve=s(Hf);hW=n(rve,"STRONG",{});var NAr=s(hW);MSe=r(NAr,"deberta-v2"),NAr.forEach(t),ESe=r(rve," \u2014 "),m7=n(rve,"A",{href:!0});var DAr=s(m7);ySe=r(DAr,"DebertaV2Config"),DAr.forEach(t),wSe=r(rve," (DeBERTa-v2 model)"),rve.forEach(t),ASe=i(T),Uf=n(T,"LI",{});var tve=s(Uf);pW=n(tve,"STRONG",{});var qAr=s(pW);LSe=r(qAr,"deit"),qAr.forEach(t),BSe=r(tve," \u2014 "),g7=n(tve,"A",{href:!0});var GAr=s(g7);xSe=r(GAr,"DeiTConfig"),GAr.forEach(t),kSe=r(tve," (DeiT model)"),tve.forEach(t),RSe=i(T),Jf=n(T,"LI",{});var ave=s(Jf);_W=n(ave,"STRONG",{});var OAr=s(_W);SSe=r(OAr,"detr"),OAr.forEach(t),PSe=r(ave," \u2014 "),h7=n(ave,"A",{href:!0});var XAr=s(h7);$Se=r(XAr,"DetrConfig"),XAr.forEach(t),ISe=r(ave," (DETR model)"),ave.forEach(t),jSe=i(T),Yf=n(T,"LI",{});var nve=s(Yf);uW=n(nve,"STRONG",{});var zAr=s(uW);NSe=r(zAr,"distilbert"),zAr.forEach(t),DSe=r(nve," \u2014 "),p7=n(nve,"A",{href:!0});var VAr=s(p7);qSe=r(VAr,"DistilBertConfig"),VAr.forEach(t),GSe=r(nve," (DistilBERT model)"),nve.forEach(t),OSe=i(T),Kf=n(T,"LI",{});var sve=s(Kf);bW=n(sve,"STRONG",{});var WAr=s(bW);XSe=r(WAr,"dpr"),WAr.forEach(t),zSe=r(sve," \u2014 "),_7=n(sve,"A",{href:!0});var QAr=s(_7);VSe=r(QAr,"DPRConfig"),QAr.forEach(t),WSe=r(sve," (DPR model)"),sve.forEach(t),QSe=i(T),Zf=n(T,"LI",{});var lve=s(Zf);vW=n(lve,"STRONG",{});var HAr=s(vW);HSe=r(HAr,"electra"),HAr.forEach(t),USe=r(lve," \u2014 "),u7=n(lve,"A",{href:!0});var UAr=s(u7);JSe=r(UAr,"ElectraConfig"),UAr.forEach(t),YSe=r(lve," (ELECTRA model)"),lve.forEach(t),KSe=i(T),em=n(T,"LI",{});var ive=s(em);TW=n(ive,"STRONG",{});var JAr=s(TW);ZSe=r(JAr,"encoder-decoder"),JAr.forEach(t),ePe=r(ive," \u2014 "),b7=n(ive,"A",{href:!0});var YAr=s(b7);oPe=r(YAr,"EncoderDecoderConfig"),YAr.forEach(t),rPe=r(ive," (Encoder decoder model)"),ive.forEach(t),tPe=i(T),om=n(T,"LI",{});var dve=s(om);FW=n(dve,"STRONG",{});var KAr=s(FW);aPe=r(KAr,"flaubert"),KAr.forEach(t),nPe=r(dve," \u2014 "),v7=n(dve,"A",{href:!0});var ZAr=s(v7);sPe=r(ZAr,"FlaubertConfig"),ZAr.forEach(t),lPe=r(dve," (FlauBERT model)"),dve.forEach(t),iPe=i(T),rm=n(T,"LI",{});var cve=s(rm);CW=n(cve,"STRONG",{});var e6r=s(CW);dPe=r(e6r,"fnet"),e6r.forEach(t),cPe=r(cve," \u2014 "),T7=n(cve,"A",{href:!0});var o6r=s(T7);fPe=r(o6r,"FNetConfig"),o6r.forEach(t),mPe=r(cve," (FNet model)"),cve.forEach(t),gPe=i(T),tm=n(T,"LI",{});var fve=s(tm);MW=n(fve,"STRONG",{});var r6r=s(MW);hPe=r(r6r,"fsmt"),r6r.forEach(t),pPe=r(fve," \u2014 "),F7=n(fve,"A",{href:!0});var t6r=s(F7);_Pe=r(t6r,"FSMTConfig"),t6r.forEach(t),uPe=r(fve," (FairSeq Machine-Translation model)"),fve.forEach(t),bPe=i(T),am=n(T,"LI",{});var mve=s(am);EW=n(mve,"STRONG",{});var a6r=s(EW);vPe=r(a6r,"funnel"),a6r.forEach(t),TPe=r(mve," \u2014 "),C7=n(mve,"A",{href:!0});var n6r=s(C7);FPe=r(n6r,"FunnelConfig"),n6r.forEach(t),CPe=r(mve," (Funnel Transformer model)"),mve.forEach(t),MPe=i(T),nm=n(T,"LI",{});var gve=s(nm);yW=n(gve,"STRONG",{});var s6r=s(yW);EPe=r(s6r,"gpt2"),s6r.forEach(t),yPe=r(gve," \u2014 "),M7=n(gve,"A",{href:!0});var l6r=s(M7);wPe=r(l6r,"GPT2Config"),l6r.forEach(t),APe=r(gve," (OpenAI GPT-2 model)"),gve.forEach(t),LPe=i(T),sm=n(T,"LI",{});var hve=s(sm);wW=n(hve,"STRONG",{});var i6r=s(wW);BPe=r(i6r,"gpt_neo"),i6r.forEach(t),xPe=r(hve," \u2014 "),E7=n(hve,"A",{href:!0});var d6r=s(E7);kPe=r(d6r,"GPTNeoConfig"),d6r.forEach(t),RPe=r(hve," (GPT Neo model)"),hve.forEach(t),SPe=i(T),lm=n(T,"LI",{});var pve=s(lm);AW=n(pve,"STRONG",{});var c6r=s(AW);PPe=r(c6r,"gptj"),c6r.forEach(t),$Pe=r(pve," \u2014 "),y7=n(pve,"A",{href:!0});var f6r=s(y7);IPe=r(f6r,"GPTJConfig"),f6r.forEach(t),jPe=r(pve," (GPT-J model)"),pve.forEach(t),NPe=i(T),im=n(T,"LI",{});var _ve=s(im);LW=n(_ve,"STRONG",{});var m6r=s(LW);DPe=r(m6r,"hubert"),m6r.forEach(t),qPe=r(_ve," \u2014 "),w7=n(_ve,"A",{href:!0});var g6r=s(w7);GPe=r(g6r,"HubertConfig"),g6r.forEach(t),OPe=r(_ve," (Hubert model)"),_ve.forEach(t),XPe=i(T),dm=n(T,"LI",{});var uve=s(dm);BW=n(uve,"STRONG",{});var h6r=s(BW);zPe=r(h6r,"ibert"),h6r.forEach(t),VPe=r(uve," \u2014 "),A7=n(uve,"A",{href:!0});var p6r=s(A7);WPe=r(p6r,"IBertConfig"),p6r.forEach(t),QPe=r(uve," (I-BERT model)"),uve.forEach(t),HPe=i(T),cm=n(T,"LI",{});var bve=s(cm);xW=n(bve,"STRONG",{});var _6r=s(xW);UPe=r(_6r,"imagegpt"),_6r.forEach(t),JPe=r(bve," \u2014 "),L7=n(bve,"A",{href:!0});var u6r=s(L7);YPe=r(u6r,"ImageGPTConfig"),u6r.forEach(t),KPe=r(bve," (ImageGPT model)"),bve.forEach(t),ZPe=i(T),fm=n(T,"LI",{});var vve=s(fm);kW=n(vve,"STRONG",{});var b6r=s(kW);e$e=r(b6r,"layoutlm"),b6r.forEach(t),o$e=r(vve," \u2014 "),B7=n(vve,"A",{href:!0});var v6r=s(B7);r$e=r(v6r,"LayoutLMConfig"),v6r.forEach(t),t$e=r(vve," (LayoutLM model)"),vve.forEach(t),a$e=i(T),mm=n(T,"LI",{});var Tve=s(mm);RW=n(Tve,"STRONG",{});var T6r=s(RW);n$e=r(T6r,"layoutlmv2"),T6r.forEach(t),s$e=r(Tve," \u2014 "),x7=n(Tve,"A",{href:!0});var F6r=s(x7);l$e=r(F6r,"LayoutLMv2Config"),F6r.forEach(t),i$e=r(Tve," (LayoutLMv2 model)"),Tve.forEach(t),d$e=i(T),gm=n(T,"LI",{});var Fve=s(gm);SW=n(Fve,"STRONG",{});var C6r=s(SW);c$e=r(C6r,"led"),C6r.forEach(t),f$e=r(Fve," \u2014 "),k7=n(Fve,"A",{href:!0});var M6r=s(k7);m$e=r(M6r,"LEDConfig"),M6r.forEach(t),g$e=r(Fve," (LED model)"),Fve.forEach(t),h$e=i(T),hm=n(T,"LI",{});var Cve=s(hm);PW=n(Cve,"STRONG",{});var E6r=s(PW);p$e=r(E6r,"longformer"),E6r.forEach(t),_$e=r(Cve," \u2014 "),R7=n(Cve,"A",{href:!0});var y6r=s(R7);u$e=r(y6r,"LongformerConfig"),y6r.forEach(t),b$e=r(Cve," (Longformer model)"),Cve.forEach(t),v$e=i(T),pm=n(T,"LI",{});var Mve=s(pm);$W=n(Mve,"STRONG",{});var w6r=s($W);T$e=r(w6r,"luke"),w6r.forEach(t),F$e=r(Mve," \u2014 "),S7=n(Mve,"A",{href:!0});var A6r=s(S7);C$e=r(A6r,"LukeConfig"),A6r.forEach(t),M$e=r(Mve," (LUKE model)"),Mve.forEach(t),E$e=i(T),_m=n(T,"LI",{});var Eve=s(_m);IW=n(Eve,"STRONG",{});var L6r=s(IW);y$e=r(L6r,"lxmert"),L6r.forEach(t),w$e=r(Eve," \u2014 "),P7=n(Eve,"A",{href:!0});var B6r=s(P7);A$e=r(B6r,"LxmertConfig"),B6r.forEach(t),L$e=r(Eve," (LXMERT model)"),Eve.forEach(t),B$e=i(T),um=n(T,"LI",{});var yve=s(um);jW=n(yve,"STRONG",{});var x6r=s(jW);x$e=r(x6r,"m2m_100"),x6r.forEach(t),k$e=r(yve," \u2014 "),$7=n(yve,"A",{href:!0});var k6r=s($7);R$e=r(k6r,"M2M100Config"),k6r.forEach(t),S$e=r(yve," (M2M100 model)"),yve.forEach(t),P$e=i(T),bm=n(T,"LI",{});var wve=s(bm);NW=n(wve,"STRONG",{});var R6r=s(NW);$$e=r(R6r,"marian"),R6r.forEach(t),I$e=r(wve," \u2014 "),I7=n(wve,"A",{href:!0});var S6r=s(I7);j$e=r(S6r,"MarianConfig"),S6r.forEach(t),N$e=r(wve," (Marian model)"),wve.forEach(t),D$e=i(T),vm=n(T,"LI",{});var Ave=s(vm);DW=n(Ave,"STRONG",{});var P6r=s(DW);q$e=r(P6r,"mbart"),P6r.forEach(t),G$e=r(Ave," \u2014 "),j7=n(Ave,"A",{href:!0});var $6r=s(j7);O$e=r($6r,"MBartConfig"),$6r.forEach(t),X$e=r(Ave," (mBART model)"),Ave.forEach(t),z$e=i(T),Tm=n(T,"LI",{});var Lve=s(Tm);qW=n(Lve,"STRONG",{});var I6r=s(qW);V$e=r(I6r,"megatron-bert"),I6r.forEach(t),W$e=r(Lve," \u2014 "),N7=n(Lve,"A",{href:!0});var j6r=s(N7);Q$e=r(j6r,"MegatronBertConfig"),j6r.forEach(t),H$e=r(Lve," (MegatronBert model)"),Lve.forEach(t),U$e=i(T),Fm=n(T,"LI",{});var Bve=s(Fm);GW=n(Bve,"STRONG",{});var N6r=s(GW);J$e=r(N6r,"mobilebert"),N6r.forEach(t),Y$e=r(Bve," \u2014 "),D7=n(Bve,"A",{href:!0});var D6r=s(D7);K$e=r(D6r,"MobileBertConfig"),D6r.forEach(t),Z$e=r(Bve," (MobileBERT model)"),Bve.forEach(t),eIe=i(T),Cm=n(T,"LI",{});var xve=s(Cm);OW=n(xve,"STRONG",{});var q6r=s(OW);oIe=r(q6r,"mpnet"),q6r.forEach(t),rIe=r(xve," \u2014 "),q7=n(xve,"A",{href:!0});var G6r=s(q7);tIe=r(G6r,"MPNetConfig"),G6r.forEach(t),aIe=r(xve," (MPNet model)"),xve.forEach(t),nIe=i(T),Mm=n(T,"LI",{});var kve=s(Mm);XW=n(kve,"STRONG",{});var O6r=s(XW);sIe=r(O6r,"mt5"),O6r.forEach(t),lIe=r(kve," \u2014 "),G7=n(kve,"A",{href:!0});var X6r=s(G7);iIe=r(X6r,"MT5Config"),X6r.forEach(t),dIe=r(kve," (mT5 model)"),kve.forEach(t),cIe=i(T),Em=n(T,"LI",{});var Rve=s(Em);zW=n(Rve,"STRONG",{});var z6r=s(zW);fIe=r(z6r,"nystromformer"),z6r.forEach(t),mIe=r(Rve," \u2014 "),O7=n(Rve,"A",{href:!0});var V6r=s(O7);gIe=r(V6r,"NystromformerConfig"),V6r.forEach(t),hIe=r(Rve," (Nystromformer model)"),Rve.forEach(t),pIe=i(T),ym=n(T,"LI",{});var Sve=s(ym);VW=n(Sve,"STRONG",{});var W6r=s(VW);_Ie=r(W6r,"openai-gpt"),W6r.forEach(t),uIe=r(Sve," \u2014 "),X7=n(Sve,"A",{href:!0});var Q6r=s(X7);bIe=r(Q6r,"OpenAIGPTConfig"),Q6r.forEach(t),vIe=r(Sve," (OpenAI GPT model)"),Sve.forEach(t),TIe=i(T),wm=n(T,"LI",{});var Pve=s(wm);WW=n(Pve,"STRONG",{});var H6r=s(WW);FIe=r(H6r,"pegasus"),H6r.forEach(t),CIe=r(Pve," \u2014 "),z7=n(Pve,"A",{href:!0});var U6r=s(z7);MIe=r(U6r,"PegasusConfig"),U6r.forEach(t),EIe=r(Pve," (Pegasus model)"),Pve.forEach(t),yIe=i(T),Am=n(T,"LI",{});var $ve=s(Am);QW=n($ve,"STRONG",{});var J6r=s(QW);wIe=r(J6r,"perceiver"),J6r.forEach(t),AIe=r($ve," \u2014 "),V7=n($ve,"A",{href:!0});var Y6r=s(V7);LIe=r(Y6r,"PerceiverConfig"),Y6r.forEach(t),BIe=r($ve," (Perceiver model)"),$ve.forEach(t),xIe=i(T),Lm=n(T,"LI",{});var Ive=s(Lm);HW=n(Ive,"STRONG",{});var K6r=s(HW);kIe=r(K6r,"plbart"),K6r.forEach(t),RIe=r(Ive," \u2014 "),W7=n(Ive,"A",{href:!0});var Z6r=s(W7);SIe=r(Z6r,"PLBartConfig"),Z6r.forEach(t),PIe=r(Ive," (PLBart model)"),Ive.forEach(t),$Ie=i(T),Bm=n(T,"LI",{});var jve=s(Bm);UW=n(jve,"STRONG",{});var e0r=s(UW);IIe=r(e0r,"poolformer"),e0r.forEach(t),jIe=r(jve," \u2014 "),Q7=n(jve,"A",{href:!0});var o0r=s(Q7);NIe=r(o0r,"PoolFormerConfig"),o0r.forEach(t),DIe=r(jve," (PoolFormer model)"),jve.forEach(t),qIe=i(T),xm=n(T,"LI",{});var Nve=s(xm);JW=n(Nve,"STRONG",{});var r0r=s(JW);GIe=r(r0r,"prophetnet"),r0r.forEach(t),OIe=r(Nve," \u2014 "),H7=n(Nve,"A",{href:!0});var t0r=s(H7);XIe=r(t0r,"ProphetNetConfig"),t0r.forEach(t),zIe=r(Nve," (ProphetNet model)"),Nve.forEach(t),VIe=i(T),km=n(T,"LI",{});var Dve=s(km);YW=n(Dve,"STRONG",{});var a0r=s(YW);WIe=r(a0r,"qdqbert"),a0r.forEach(t),QIe=r(Dve," \u2014 "),U7=n(Dve,"A",{href:!0});var n0r=s(U7);HIe=r(n0r,"QDQBertConfig"),n0r.forEach(t),UIe=r(Dve," (QDQBert model)"),Dve.forEach(t),JIe=i(T),Rm=n(T,"LI",{});var qve=s(Rm);KW=n(qve,"STRONG",{});var s0r=s(KW);YIe=r(s0r,"rag"),s0r.forEach(t),KIe=r(qve," \u2014 "),J7=n(qve,"A",{href:!0});var l0r=s(J7);ZIe=r(l0r,"RagConfig"),l0r.forEach(t),eje=r(qve," (RAG model)"),qve.forEach(t),oje=i(T),Sm=n(T,"LI",{});var Gve=s(Sm);ZW=n(Gve,"STRONG",{});var i0r=s(ZW);rje=r(i0r,"realm"),i0r.forEach(t),tje=r(Gve," \u2014 "),Y7=n(Gve,"A",{href:!0});var d0r=s(Y7);aje=r(d0r,"RealmConfig"),d0r.forEach(t),nje=r(Gve," (Realm model)"),Gve.forEach(t),sje=i(T),Pm=n(T,"LI",{});var Ove=s(Pm);eQ=n(Ove,"STRONG",{});var c0r=s(eQ);lje=r(c0r,"reformer"),c0r.forEach(t),ije=r(Ove," \u2014 "),K7=n(Ove,"A",{href:!0});var f0r=s(K7);dje=r(f0r,"ReformerConfig"),f0r.forEach(t),cje=r(Ove," (Reformer model)"),Ove.forEach(t),fje=i(T),$m=n(T,"LI",{});var Xve=s($m);oQ=n(Xve,"STRONG",{});var m0r=s(oQ);mje=r(m0r,"rembert"),m0r.forEach(t),gje=r(Xve," \u2014 "),Z7=n(Xve,"A",{href:!0});var g0r=s(Z7);hje=r(g0r,"RemBertConfig"),g0r.forEach(t),pje=r(Xve," (RemBERT model)"),Xve.forEach(t),_je=i(T),Im=n(T,"LI",{});var zve=s(Im);rQ=n(zve,"STRONG",{});var h0r=s(rQ);uje=r(h0r,"retribert"),h0r.forEach(t),bje=r(zve," \u2014 "),e8=n(zve,"A",{href:!0});var p0r=s(e8);vje=r(p0r,"RetriBertConfig"),p0r.forEach(t),Tje=r(zve," (RetriBERT model)"),zve.forEach(t),Fje=i(T),jm=n(T,"LI",{});var Vve=s(jm);tQ=n(Vve,"STRONG",{});var _0r=s(tQ);Cje=r(_0r,"roberta"),_0r.forEach(t),Mje=r(Vve," \u2014 "),o8=n(Vve,"A",{href:!0});var u0r=s(o8);Eje=r(u0r,"RobertaConfig"),u0r.forEach(t),yje=r(Vve," (RoBERTa model)"),Vve.forEach(t),wje=i(T),Nm=n(T,"LI",{});var Wve=s(Nm);aQ=n(Wve,"STRONG",{});var b0r=s(aQ);Aje=r(b0r,"roformer"),b0r.forEach(t),Lje=r(Wve," \u2014 "),r8=n(Wve,"A",{href:!0});var v0r=s(r8);Bje=r(v0r,"RoFormerConfig"),v0r.forEach(t),xje=r(Wve," (RoFormer model)"),Wve.forEach(t),kje=i(T),Dm=n(T,"LI",{});var Qve=s(Dm);nQ=n(Qve,"STRONG",{});var T0r=s(nQ);Rje=r(T0r,"segformer"),T0r.forEach(t),Sje=r(Qve," \u2014 "),t8=n(Qve,"A",{href:!0});var F0r=s(t8);Pje=r(F0r,"SegformerConfig"),F0r.forEach(t),$je=r(Qve," (SegFormer model)"),Qve.forEach(t),Ije=i(T),qm=n(T,"LI",{});var Hve=s(qm);sQ=n(Hve,"STRONG",{});var C0r=s(sQ);jje=r(C0r,"sew"),C0r.forEach(t),Nje=r(Hve," \u2014 "),a8=n(Hve,"A",{href:!0});var M0r=s(a8);Dje=r(M0r,"SEWConfig"),M0r.forEach(t),qje=r(Hve," (SEW model)"),Hve.forEach(t),Gje=i(T),Gm=n(T,"LI",{});var Uve=s(Gm);lQ=n(Uve,"STRONG",{});var E0r=s(lQ);Oje=r(E0r,"sew-d"),E0r.forEach(t),Xje=r(Uve," \u2014 "),n8=n(Uve,"A",{href:!0});var y0r=s(n8);zje=r(y0r,"SEWDConfig"),y0r.forEach(t),Vje=r(Uve," (SEW-D model)"),Uve.forEach(t),Wje=i(T),Om=n(T,"LI",{});var Jve=s(Om);iQ=n(Jve,"STRONG",{});var w0r=s(iQ);Qje=r(w0r,"speech-encoder-decoder"),w0r.forEach(t),Hje=r(Jve," \u2014 "),s8=n(Jve,"A",{href:!0});var A0r=s(s8);Uje=r(A0r,"SpeechEncoderDecoderConfig"),A0r.forEach(t),Jje=r(Jve," (Speech Encoder decoder model)"),Jve.forEach(t),Yje=i(T),Xm=n(T,"LI",{});var Yve=s(Xm);dQ=n(Yve,"STRONG",{});var L0r=s(dQ);Kje=r(L0r,"speech_to_text"),L0r.forEach(t),Zje=r(Yve," \u2014 "),l8=n(Yve,"A",{href:!0});var B0r=s(l8);eNe=r(B0r,"Speech2TextConfig"),B0r.forEach(t),oNe=r(Yve," (Speech2Text model)"),Yve.forEach(t),rNe=i(T),zm=n(T,"LI",{});var Kve=s(zm);cQ=n(Kve,"STRONG",{});var x0r=s(cQ);tNe=r(x0r,"speech_to_text_2"),x0r.forEach(t),aNe=r(Kve," \u2014 "),i8=n(Kve,"A",{href:!0});var k0r=s(i8);nNe=r(k0r,"Speech2Text2Config"),k0r.forEach(t),sNe=r(Kve," (Speech2Text2 model)"),Kve.forEach(t),lNe=i(T),Vm=n(T,"LI",{});var Zve=s(Vm);fQ=n(Zve,"STRONG",{});var R0r=s(fQ);iNe=r(R0r,"splinter"),R0r.forEach(t),dNe=r(Zve," \u2014 "),d8=n(Zve,"A",{href:!0});var S0r=s(d8);cNe=r(S0r,"SplinterConfig"),S0r.forEach(t),fNe=r(Zve," (Splinter model)"),Zve.forEach(t),mNe=i(T),Wm=n(T,"LI",{});var eTe=s(Wm);mQ=n(eTe,"STRONG",{});var P0r=s(mQ);gNe=r(P0r,"squeezebert"),P0r.forEach(t),hNe=r(eTe," \u2014 "),c8=n(eTe,"A",{href:!0});var $0r=s(c8);pNe=r($0r,"SqueezeBertConfig"),$0r.forEach(t),_Ne=r(eTe," (SqueezeBERT model)"),eTe.forEach(t),uNe=i(T),Qm=n(T,"LI",{});var oTe=s(Qm);gQ=n(oTe,"STRONG",{});var I0r=s(gQ);bNe=r(I0r,"swin"),I0r.forEach(t),vNe=r(oTe," \u2014 "),f8=n(oTe,"A",{href:!0});var j0r=s(f8);TNe=r(j0r,"SwinConfig"),j0r.forEach(t),FNe=r(oTe," (Swin model)"),oTe.forEach(t),CNe=i(T),Hm=n(T,"LI",{});var rTe=s(Hm);hQ=n(rTe,"STRONG",{});var N0r=s(hQ);MNe=r(N0r,"t5"),N0r.forEach(t),ENe=r(rTe," \u2014 "),m8=n(rTe,"A",{href:!0});var D0r=s(m8);yNe=r(D0r,"T5Config"),D0r.forEach(t),wNe=r(rTe," (T5 model)"),rTe.forEach(t),ANe=i(T),Um=n(T,"LI",{});var tTe=s(Um);pQ=n(tTe,"STRONG",{});var q0r=s(pQ);LNe=r(q0r,"tapas"),q0r.forEach(t),BNe=r(tTe," \u2014 "),g8=n(tTe,"A",{href:!0});var G0r=s(g8);xNe=r(G0r,"TapasConfig"),G0r.forEach(t),kNe=r(tTe," (TAPAS model)"),tTe.forEach(t),RNe=i(T),Jm=n(T,"LI",{});var aTe=s(Jm);_Q=n(aTe,"STRONG",{});var O0r=s(_Q);SNe=r(O0r,"transfo-xl"),O0r.forEach(t),PNe=r(aTe," \u2014 "),h8=n(aTe,"A",{href:!0});var X0r=s(h8);$Ne=r(X0r,"TransfoXLConfig"),X0r.forEach(t),INe=r(aTe," (Transformer-XL model)"),aTe.forEach(t),jNe=i(T),Ym=n(T,"LI",{});var nTe=s(Ym);uQ=n(nTe,"STRONG",{});var z0r=s(uQ);NNe=r(z0r,"trocr"),z0r.forEach(t),DNe=r(nTe," \u2014 "),p8=n(nTe,"A",{href:!0});var V0r=s(p8);qNe=r(V0r,"TrOCRConfig"),V0r.forEach(t),GNe=r(nTe," (TrOCR model)"),nTe.forEach(t),ONe=i(T),Km=n(T,"LI",{});var sTe=s(Km);bQ=n(sTe,"STRONG",{});var W0r=s(bQ);XNe=r(W0r,"unispeech"),W0r.forEach(t),zNe=r(sTe," \u2014 "),_8=n(sTe,"A",{href:!0});var Q0r=s(_8);VNe=r(Q0r,"UniSpeechConfig"),Q0r.forEach(t),WNe=r(sTe," (UniSpeech model)"),sTe.forEach(t),QNe=i(T),Zm=n(T,"LI",{});var lTe=s(Zm);vQ=n(lTe,"STRONG",{});var H0r=s(vQ);HNe=r(H0r,"unispeech-sat"),H0r.forEach(t),UNe=r(lTe," \u2014 "),u8=n(lTe,"A",{href:!0});var U0r=s(u8);JNe=r(U0r,"UniSpeechSatConfig"),U0r.forEach(t),YNe=r(lTe," (UniSpeechSat model)"),lTe.forEach(t),KNe=i(T),eg=n(T,"LI",{});var iTe=s(eg);TQ=n(iTe,"STRONG",{});var J0r=s(TQ);ZNe=r(J0r,"vilt"),J0r.forEach(t),eDe=r(iTe," \u2014 "),b8=n(iTe,"A",{href:!0});var Y0r=s(b8);oDe=r(Y0r,"ViltConfig"),Y0r.forEach(t),rDe=r(iTe," (ViLT model)"),iTe.forEach(t),tDe=i(T),og=n(T,"LI",{});var dTe=s(og);FQ=n(dTe,"STRONG",{});var K0r=s(FQ);aDe=r(K0r,"vision-encoder-decoder"),K0r.forEach(t),nDe=r(dTe," \u2014 "),v8=n(dTe,"A",{href:!0});var Z0r=s(v8);sDe=r(Z0r,"VisionEncoderDecoderConfig"),Z0r.forEach(t),lDe=r(dTe," (Vision Encoder decoder model)"),dTe.forEach(t),iDe=i(T),rg=n(T,"LI",{});var cTe=s(rg);CQ=n(cTe,"STRONG",{});var eLr=s(CQ);dDe=r(eLr,"vision-text-dual-encoder"),eLr.forEach(t),cDe=r(cTe," \u2014 "),T8=n(cTe,"A",{href:!0});var oLr=s(T8);fDe=r(oLr,"VisionTextDualEncoderConfig"),oLr.forEach(t),mDe=r(cTe," (VisionTextDualEncoder model)"),cTe.forEach(t),gDe=i(T),tg=n(T,"LI",{});var fTe=s(tg);MQ=n(fTe,"STRONG",{});var rLr=s(MQ);hDe=r(rLr,"visual_bert"),rLr.forEach(t),pDe=r(fTe," \u2014 "),F8=n(fTe,"A",{href:!0});var tLr=s(F8);_De=r(tLr,"VisualBertConfig"),tLr.forEach(t),uDe=r(fTe," (VisualBert model)"),fTe.forEach(t),bDe=i(T),ag=n(T,"LI",{});var mTe=s(ag);EQ=n(mTe,"STRONG",{});var aLr=s(EQ);vDe=r(aLr,"vit"),aLr.forEach(t),TDe=r(mTe," \u2014 "),C8=n(mTe,"A",{href:!0});var nLr=s(C8);FDe=r(nLr,"ViTConfig"),nLr.forEach(t),CDe=r(mTe," (ViT model)"),mTe.forEach(t),MDe=i(T),ng=n(T,"LI",{});var gTe=s(ng);yQ=n(gTe,"STRONG",{});var sLr=s(yQ);EDe=r(sLr,"vit_mae"),sLr.forEach(t),yDe=r(gTe," \u2014 "),M8=n(gTe,"A",{href:!0});var lLr=s(M8);wDe=r(lLr,"ViTMAEConfig"),lLr.forEach(t),ADe=r(gTe," (ViTMAE model)"),gTe.forEach(t),LDe=i(T),sg=n(T,"LI",{});var hTe=s(sg);wQ=n(hTe,"STRONG",{});var iLr=s(wQ);BDe=r(iLr,"wav2vec2"),iLr.forEach(t),xDe=r(hTe," \u2014 "),E8=n(hTe,"A",{href:!0});var dLr=s(E8);kDe=r(dLr,"Wav2Vec2Config"),dLr.forEach(t),RDe=r(hTe," (Wav2Vec2 model)"),hTe.forEach(t),SDe=i(T),lg=n(T,"LI",{});var pTe=s(lg);AQ=n(pTe,"STRONG",{});var cLr=s(AQ);PDe=r(cLr,"wavlm"),cLr.forEach(t),$De=r(pTe," \u2014 "),y8=n(pTe,"A",{href:!0});var fLr=s(y8);IDe=r(fLr,"WavLMConfig"),fLr.forEach(t),jDe=r(pTe," (WavLM model)"),pTe.forEach(t),NDe=i(T),ig=n(T,"LI",{});var _Te=s(ig);LQ=n(_Te,"STRONG",{});var mLr=s(LQ);DDe=r(mLr,"xglm"),mLr.forEach(t),qDe=r(_Te," \u2014 "),w8=n(_Te,"A",{href:!0});var gLr=s(w8);GDe=r(gLr,"XGLMConfig"),gLr.forEach(t),ODe=r(_Te," (XGLM model)"),_Te.forEach(t),XDe=i(T),dg=n(T,"LI",{});var uTe=s(dg);BQ=n(uTe,"STRONG",{});var hLr=s(BQ);zDe=r(hLr,"xlm"),hLr.forEach(t),VDe=r(uTe," \u2014 "),A8=n(uTe,"A",{href:!0});var pLr=s(A8);WDe=r(pLr,"XLMConfig"),pLr.forEach(t),QDe=r(uTe," (XLM model)"),uTe.forEach(t),HDe=i(T),cg=n(T,"LI",{});var bTe=s(cg);xQ=n(bTe,"STRONG",{});var _Lr=s(xQ);UDe=r(_Lr,"xlm-prophetnet"),_Lr.forEach(t),JDe=r(bTe," \u2014 "),L8=n(bTe,"A",{href:!0});var uLr=s(L8);YDe=r(uLr,"XLMProphetNetConfig"),uLr.forEach(t),KDe=r(bTe," (XLMProphetNet model)"),bTe.forEach(t),ZDe=i(T),fg=n(T,"LI",{});var vTe=s(fg);kQ=n(vTe,"STRONG",{});var bLr=s(kQ);eqe=r(bLr,"xlm-roberta"),bLr.forEach(t),oqe=r(vTe," \u2014 "),B8=n(vTe,"A",{href:!0});var vLr=s(B8);rqe=r(vLr,"XLMRobertaConfig"),vLr.forEach(t),tqe=r(vTe," (XLM-RoBERTa model)"),vTe.forEach(t),aqe=i(T),mg=n(T,"LI",{});var TTe=s(mg);RQ=n(TTe,"STRONG",{});var TLr=s(RQ);nqe=r(TLr,"xlm-roberta-xl"),TLr.forEach(t),sqe=r(TTe," \u2014 "),x8=n(TTe,"A",{href:!0});var FLr=s(x8);lqe=r(FLr,"XLMRobertaXLConfig"),FLr.forEach(t),iqe=r(TTe," (XLM-RoBERTa-XL model)"),TTe.forEach(t),dqe=i(T),gg=n(T,"LI",{});var FTe=s(gg);SQ=n(FTe,"STRONG",{});var CLr=s(SQ);cqe=r(CLr,"xlnet"),CLr.forEach(t),fqe=r(FTe," \u2014 "),k8=n(FTe,"A",{href:!0});var MLr=s(k8);mqe=r(MLr,"XLNetConfig"),MLr.forEach(t),gqe=r(FTe," (XLNet model)"),FTe.forEach(t),hqe=i(T),hg=n(T,"LI",{});var CTe=s(hg);PQ=n(CTe,"STRONG",{});var ELr=s(PQ);pqe=r(ELr,"yoso"),ELr.forEach(t),_qe=r(CTe," \u2014 "),R8=n(CTe,"A",{href:!0});var yLr=s(R8);uqe=r(yLr,"YosoConfig"),yLr.forEach(t),bqe=r(CTe," (YOSO model)"),CTe.forEach(t),T.forEach(t),vqe=i(ia),$Q=n(ia,"P",{});var wLr=s($Q);Tqe=r(wLr,"Examples:"),wLr.forEach(t),Fqe=i(ia),m(hE.$$.fragment,ia),ia.forEach(t),Cqe=i($s),pg=n($s,"DIV",{class:!0});var vBe=s(pg);m(pE.$$.fragment,vBe),Mqe=i(vBe),IQ=n(vBe,"P",{});var ALr=s(IQ);Eqe=r(ALr,"Register a new configuration for this class."),ALr.forEach(t),vBe.forEach(t),$s.forEach(t),v7e=i(d),ji=n(d,"H2",{class:!0});var TBe=s(ji);_g=n(TBe,"A",{id:!0,class:!0,href:!0});var LLr=s(_g);jQ=n(LLr,"SPAN",{});var BLr=s(jQ);m(_E.$$.fragment,BLr),BLr.forEach(t),LLr.forEach(t),yqe=i(TBe),NQ=n(TBe,"SPAN",{});var xLr=s(NQ);wqe=r(xLr,"AutoTokenizer"),xLr.forEach(t),TBe.forEach(t),T7e=i(d),Oo=n(d,"DIV",{class:!0});var Is=s(Oo);m(uE.$$.fragment,Is),Aqe=i(Is),bE=n(Is,"P",{});var FBe=s(bE);Lqe=r(FBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),S8=n(FBe,"A",{href:!0});var kLr=s(S8);Bqe=r(kLr,"AutoTokenizer.from_pretrained()"),kLr.forEach(t),xqe=r(FBe," class method."),FBe.forEach(t),kqe=i(Is),vE=n(Is,"P",{});var CBe=s(vE);Rqe=r(CBe,"This class cannot be instantiated directly using "),DQ=n(CBe,"CODE",{});var RLr=s(DQ);Sqe=r(RLr,"__init__()"),RLr.forEach(t),Pqe=r(CBe," (throws an error)."),CBe.forEach(t),$qe=i(Is),mo=n(Is,"DIV",{class:!0});var da=s(mo);m(TE.$$.fragment,da),Iqe=i(da),qQ=n(da,"P",{});var SLr=s(qQ);jqe=r(SLr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SLr.forEach(t),Nqe=i(da),ja=n(da,"P",{});var lM=s(ja);Dqe=r(lM,"The tokenizer class to instantiate is selected based on the "),GQ=n(lM,"CODE",{});var PLr=s(GQ);qqe=r(PLr,"model_type"),PLr.forEach(t),Gqe=r(lM,` property of the config object (either
passed as an argument or loaded from `),OQ=n(lM,"CODE",{});var $Lr=s(OQ);Oqe=r($Lr,"pretrained_model_name_or_path"),$Lr.forEach(t),Xqe=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XQ=n(lM,"CODE",{});var ILr=s(XQ);zqe=r(ILr,"pretrained_model_name_or_path"),ILr.forEach(t),Vqe=r(lM,":"),lM.forEach(t),Wqe=i(da),M=n(da,"UL",{});var y=s(M);Dn=n(y,"LI",{});var Q0=s(Dn);zQ=n(Q0,"STRONG",{});var jLr=s(zQ);Qqe=r(jLr,"albert"),jLr.forEach(t),Hqe=r(Q0," \u2014 "),P8=n(Q0,"A",{href:!0});var NLr=s(P8);Uqe=r(NLr,"AlbertTokenizer"),NLr.forEach(t),Jqe=r(Q0," or "),$8=n(Q0,"A",{href:!0});var DLr=s($8);Yqe=r(DLr,"AlbertTokenizerFast"),DLr.forEach(t),Kqe=r(Q0," (ALBERT model)"),Q0.forEach(t),Zqe=i(y),qn=n(y,"LI",{});var H0=s(qn);VQ=n(H0,"STRONG",{});var qLr=s(VQ);eGe=r(qLr,"bart"),qLr.forEach(t),oGe=r(H0," \u2014 "),I8=n(H0,"A",{href:!0});var GLr=s(I8);rGe=r(GLr,"BartTokenizer"),GLr.forEach(t),tGe=r(H0," or "),j8=n(H0,"A",{href:!0});var OLr=s(j8);aGe=r(OLr,"BartTokenizerFast"),OLr.forEach(t),nGe=r(H0," (BART model)"),H0.forEach(t),sGe=i(y),Gn=n(y,"LI",{});var U0=s(Gn);WQ=n(U0,"STRONG",{});var XLr=s(WQ);lGe=r(XLr,"barthez"),XLr.forEach(t),iGe=r(U0," \u2014 "),N8=n(U0,"A",{href:!0});var zLr=s(N8);dGe=r(zLr,"BarthezTokenizer"),zLr.forEach(t),cGe=r(U0," or "),D8=n(U0,"A",{href:!0});var VLr=s(D8);fGe=r(VLr,"BarthezTokenizerFast"),VLr.forEach(t),mGe=r(U0," (BARThez model)"),U0.forEach(t),gGe=i(y),ug=n(y,"LI",{});var MTe=s(ug);QQ=n(MTe,"STRONG",{});var WLr=s(QQ);hGe=r(WLr,"bartpho"),WLr.forEach(t),pGe=r(MTe," \u2014 "),q8=n(MTe,"A",{href:!0});var QLr=s(q8);_Ge=r(QLr,"BartphoTokenizer"),QLr.forEach(t),uGe=r(MTe," (BARTpho model)"),MTe.forEach(t),bGe=i(y),On=n(y,"LI",{});var J0=s(On);HQ=n(J0,"STRONG",{});var HLr=s(HQ);vGe=r(HLr,"bert"),HLr.forEach(t),TGe=r(J0," \u2014 "),G8=n(J0,"A",{href:!0});var ULr=s(G8);FGe=r(ULr,"BertTokenizer"),ULr.forEach(t),CGe=r(J0," or "),O8=n(J0,"A",{href:!0});var JLr=s(O8);MGe=r(JLr,"BertTokenizerFast"),JLr.forEach(t),EGe=r(J0," (BERT model)"),J0.forEach(t),yGe=i(y),bg=n(y,"LI",{});var ETe=s(bg);UQ=n(ETe,"STRONG",{});var YLr=s(UQ);wGe=r(YLr,"bert-generation"),YLr.forEach(t),AGe=r(ETe," \u2014 "),X8=n(ETe,"A",{href:!0});var KLr=s(X8);LGe=r(KLr,"BertGenerationTokenizer"),KLr.forEach(t),BGe=r(ETe," (Bert Generation model)"),ETe.forEach(t),xGe=i(y),vg=n(y,"LI",{});var yTe=s(vg);JQ=n(yTe,"STRONG",{});var ZLr=s(JQ);kGe=r(ZLr,"bert-japanese"),ZLr.forEach(t),RGe=r(yTe," \u2014 "),z8=n(yTe,"A",{href:!0});var e7r=s(z8);SGe=r(e7r,"BertJapaneseTokenizer"),e7r.forEach(t),PGe=r(yTe," (BertJapanese model)"),yTe.forEach(t),$Ge=i(y),Tg=n(y,"LI",{});var wTe=s(Tg);YQ=n(wTe,"STRONG",{});var o7r=s(YQ);IGe=r(o7r,"bertweet"),o7r.forEach(t),jGe=r(wTe," \u2014 "),V8=n(wTe,"A",{href:!0});var r7r=s(V8);NGe=r(r7r,"BertweetTokenizer"),r7r.forEach(t),DGe=r(wTe," (Bertweet model)"),wTe.forEach(t),qGe=i(y),Xn=n(y,"LI",{});var Y0=s(Xn);KQ=n(Y0,"STRONG",{});var t7r=s(KQ);GGe=r(t7r,"big_bird"),t7r.forEach(t),OGe=r(Y0," \u2014 "),W8=n(Y0,"A",{href:!0});var a7r=s(W8);XGe=r(a7r,"BigBirdTokenizer"),a7r.forEach(t),zGe=r(Y0," or "),Q8=n(Y0,"A",{href:!0});var n7r=s(Q8);VGe=r(n7r,"BigBirdTokenizerFast"),n7r.forEach(t),WGe=r(Y0," (BigBird model)"),Y0.forEach(t),QGe=i(y),zn=n(y,"LI",{});var K0=s(zn);ZQ=n(K0,"STRONG",{});var s7r=s(ZQ);HGe=r(s7r,"bigbird_pegasus"),s7r.forEach(t),UGe=r(K0," \u2014 "),H8=n(K0,"A",{href:!0});var l7r=s(H8);JGe=r(l7r,"PegasusTokenizer"),l7r.forEach(t),YGe=r(K0," or "),U8=n(K0,"A",{href:!0});var i7r=s(U8);KGe=r(i7r,"PegasusTokenizerFast"),i7r.forEach(t),ZGe=r(K0," (BigBirdPegasus model)"),K0.forEach(t),eOe=i(y),Vn=n(y,"LI",{});var Z0=s(Vn);eH=n(Z0,"STRONG",{});var d7r=s(eH);oOe=r(d7r,"blenderbot"),d7r.forEach(t),rOe=r(Z0," \u2014 "),J8=n(Z0,"A",{href:!0});var c7r=s(J8);tOe=r(c7r,"BlenderbotTokenizer"),c7r.forEach(t),aOe=r(Z0," or "),Y8=n(Z0,"A",{href:!0});var f7r=s(Y8);nOe=r(f7r,"BlenderbotTokenizerFast"),f7r.forEach(t),sOe=r(Z0," (Blenderbot model)"),Z0.forEach(t),lOe=i(y),Fg=n(y,"LI",{});var ATe=s(Fg);oH=n(ATe,"STRONG",{});var m7r=s(oH);iOe=r(m7r,"blenderbot-small"),m7r.forEach(t),dOe=r(ATe," \u2014 "),K8=n(ATe,"A",{href:!0});var g7r=s(K8);cOe=r(g7r,"BlenderbotSmallTokenizer"),g7r.forEach(t),fOe=r(ATe," (BlenderbotSmall model)"),ATe.forEach(t),mOe=i(y),Cg=n(y,"LI",{});var LTe=s(Cg);rH=n(LTe,"STRONG",{});var h7r=s(rH);gOe=r(h7r,"byt5"),h7r.forEach(t),hOe=r(LTe," \u2014 "),Z8=n(LTe,"A",{href:!0});var p7r=s(Z8);pOe=r(p7r,"ByT5Tokenizer"),p7r.forEach(t),_Oe=r(LTe," (ByT5 model)"),LTe.forEach(t),uOe=i(y),Wn=n(y,"LI",{});var eL=s(Wn);tH=n(eL,"STRONG",{});var _7r=s(tH);bOe=r(_7r,"camembert"),_7r.forEach(t),vOe=r(eL," \u2014 "),eB=n(eL,"A",{href:!0});var u7r=s(eB);TOe=r(u7r,"CamembertTokenizer"),u7r.forEach(t),FOe=r(eL," or "),oB=n(eL,"A",{href:!0});var b7r=s(oB);COe=r(b7r,"CamembertTokenizerFast"),b7r.forEach(t),MOe=r(eL," (CamemBERT model)"),eL.forEach(t),EOe=i(y),Mg=n(y,"LI",{});var BTe=s(Mg);aH=n(BTe,"STRONG",{});var v7r=s(aH);yOe=r(v7r,"canine"),v7r.forEach(t),wOe=r(BTe," \u2014 "),rB=n(BTe,"A",{href:!0});var T7r=s(rB);AOe=r(T7r,"CanineTokenizer"),T7r.forEach(t),LOe=r(BTe," (Canine model)"),BTe.forEach(t),BOe=i(y),Qn=n(y,"LI",{});var oL=s(Qn);nH=n(oL,"STRONG",{});var F7r=s(nH);xOe=r(F7r,"clip"),F7r.forEach(t),kOe=r(oL," \u2014 "),tB=n(oL,"A",{href:!0});var C7r=s(tB);ROe=r(C7r,"CLIPTokenizer"),C7r.forEach(t),SOe=r(oL," or "),aB=n(oL,"A",{href:!0});var M7r=s(aB);POe=r(M7r,"CLIPTokenizerFast"),M7r.forEach(t),$Oe=r(oL," (CLIP model)"),oL.forEach(t),IOe=i(y),Hn=n(y,"LI",{});var rL=s(Hn);sH=n(rL,"STRONG",{});var E7r=s(sH);jOe=r(E7r,"convbert"),E7r.forEach(t),NOe=r(rL," \u2014 "),nB=n(rL,"A",{href:!0});var y7r=s(nB);DOe=r(y7r,"ConvBertTokenizer"),y7r.forEach(t),qOe=r(rL," or "),sB=n(rL,"A",{href:!0});var w7r=s(sB);GOe=r(w7r,"ConvBertTokenizerFast"),w7r.forEach(t),OOe=r(rL," (ConvBERT model)"),rL.forEach(t),XOe=i(y),Un=n(y,"LI",{});var tL=s(Un);lH=n(tL,"STRONG",{});var A7r=s(lH);zOe=r(A7r,"cpm"),A7r.forEach(t),VOe=r(tL," \u2014 "),lB=n(tL,"A",{href:!0});var L7r=s(lB);WOe=r(L7r,"CpmTokenizer"),L7r.forEach(t),QOe=r(tL," or "),iH=n(tL,"CODE",{});var B7r=s(iH);HOe=r(B7r,"CpmTokenizerFast"),B7r.forEach(t),UOe=r(tL," (CPM model)"),tL.forEach(t),JOe=i(y),Eg=n(y,"LI",{});var xTe=s(Eg);dH=n(xTe,"STRONG",{});var x7r=s(dH);YOe=r(x7r,"ctrl"),x7r.forEach(t),KOe=r(xTe," \u2014 "),iB=n(xTe,"A",{href:!0});var k7r=s(iB);ZOe=r(k7r,"CTRLTokenizer"),k7r.forEach(t),eXe=r(xTe," (CTRL model)"),xTe.forEach(t),oXe=i(y),Jn=n(y,"LI",{});var aL=s(Jn);cH=n(aL,"STRONG",{});var R7r=s(cH);rXe=r(R7r,"deberta"),R7r.forEach(t),tXe=r(aL," \u2014 "),dB=n(aL,"A",{href:!0});var S7r=s(dB);aXe=r(S7r,"DebertaTokenizer"),S7r.forEach(t),nXe=r(aL," or "),cB=n(aL,"A",{href:!0});var P7r=s(cB);sXe=r(P7r,"DebertaTokenizerFast"),P7r.forEach(t),lXe=r(aL," (DeBERTa model)"),aL.forEach(t),iXe=i(y),Yn=n(y,"LI",{});var nL=s(Yn);fH=n(nL,"STRONG",{});var $7r=s(fH);dXe=r($7r,"deberta-v2"),$7r.forEach(t),cXe=r(nL," \u2014 "),fB=n(nL,"A",{href:!0});var I7r=s(fB);fXe=r(I7r,"DebertaV2Tokenizer"),I7r.forEach(t),mXe=r(nL," or "),mB=n(nL,"A",{href:!0});var j7r=s(mB);gXe=r(j7r,"DebertaV2TokenizerFast"),j7r.forEach(t),hXe=r(nL," (DeBERTa-v2 model)"),nL.forEach(t),pXe=i(y),Kn=n(y,"LI",{});var sL=s(Kn);mH=n(sL,"STRONG",{});var N7r=s(mH);_Xe=r(N7r,"distilbert"),N7r.forEach(t),uXe=r(sL," \u2014 "),gB=n(sL,"A",{href:!0});var D7r=s(gB);bXe=r(D7r,"DistilBertTokenizer"),D7r.forEach(t),vXe=r(sL," or "),hB=n(sL,"A",{href:!0});var q7r=s(hB);TXe=r(q7r,"DistilBertTokenizerFast"),q7r.forEach(t),FXe=r(sL," (DistilBERT model)"),sL.forEach(t),CXe=i(y),Zn=n(y,"LI",{});var lL=s(Zn);gH=n(lL,"STRONG",{});var G7r=s(gH);MXe=r(G7r,"dpr"),G7r.forEach(t),EXe=r(lL," \u2014 "),pB=n(lL,"A",{href:!0});var O7r=s(pB);yXe=r(O7r,"DPRQuestionEncoderTokenizer"),O7r.forEach(t),wXe=r(lL," or "),_B=n(lL,"A",{href:!0});var X7r=s(_B);AXe=r(X7r,"DPRQuestionEncoderTokenizerFast"),X7r.forEach(t),LXe=r(lL," (DPR model)"),lL.forEach(t),BXe=i(y),es=n(y,"LI",{});var iL=s(es);hH=n(iL,"STRONG",{});var z7r=s(hH);xXe=r(z7r,"electra"),z7r.forEach(t),kXe=r(iL," \u2014 "),uB=n(iL,"A",{href:!0});var V7r=s(uB);RXe=r(V7r,"ElectraTokenizer"),V7r.forEach(t),SXe=r(iL," or "),bB=n(iL,"A",{href:!0});var W7r=s(bB);PXe=r(W7r,"ElectraTokenizerFast"),W7r.forEach(t),$Xe=r(iL," (ELECTRA model)"),iL.forEach(t),IXe=i(y),yg=n(y,"LI",{});var kTe=s(yg);pH=n(kTe,"STRONG",{});var Q7r=s(pH);jXe=r(Q7r,"flaubert"),Q7r.forEach(t),NXe=r(kTe," \u2014 "),vB=n(kTe,"A",{href:!0});var H7r=s(vB);DXe=r(H7r,"FlaubertTokenizer"),H7r.forEach(t),qXe=r(kTe," (FlauBERT model)"),kTe.forEach(t),GXe=i(y),os=n(y,"LI",{});var dL=s(os);_H=n(dL,"STRONG",{});var U7r=s(_H);OXe=r(U7r,"fnet"),U7r.forEach(t),XXe=r(dL," \u2014 "),TB=n(dL,"A",{href:!0});var J7r=s(TB);zXe=r(J7r,"FNetTokenizer"),J7r.forEach(t),VXe=r(dL," or "),FB=n(dL,"A",{href:!0});var Y7r=s(FB);WXe=r(Y7r,"FNetTokenizerFast"),Y7r.forEach(t),QXe=r(dL," (FNet model)"),dL.forEach(t),HXe=i(y),wg=n(y,"LI",{});var RTe=s(wg);uH=n(RTe,"STRONG",{});var K7r=s(uH);UXe=r(K7r,"fsmt"),K7r.forEach(t),JXe=r(RTe," \u2014 "),CB=n(RTe,"A",{href:!0});var Z7r=s(CB);YXe=r(Z7r,"FSMTTokenizer"),Z7r.forEach(t),KXe=r(RTe," (FairSeq Machine-Translation model)"),RTe.forEach(t),ZXe=i(y),rs=n(y,"LI",{});var cL=s(rs);bH=n(cL,"STRONG",{});var e8r=s(bH);eze=r(e8r,"funnel"),e8r.forEach(t),oze=r(cL," \u2014 "),MB=n(cL,"A",{href:!0});var o8r=s(MB);rze=r(o8r,"FunnelTokenizer"),o8r.forEach(t),tze=r(cL," or "),EB=n(cL,"A",{href:!0});var r8r=s(EB);aze=r(r8r,"FunnelTokenizerFast"),r8r.forEach(t),nze=r(cL," (Funnel Transformer model)"),cL.forEach(t),sze=i(y),ts=n(y,"LI",{});var fL=s(ts);vH=n(fL,"STRONG",{});var t8r=s(vH);lze=r(t8r,"gpt2"),t8r.forEach(t),ize=r(fL," \u2014 "),yB=n(fL,"A",{href:!0});var a8r=s(yB);dze=r(a8r,"GPT2Tokenizer"),a8r.forEach(t),cze=r(fL," or "),wB=n(fL,"A",{href:!0});var n8r=s(wB);fze=r(n8r,"GPT2TokenizerFast"),n8r.forEach(t),mze=r(fL," (OpenAI GPT-2 model)"),fL.forEach(t),gze=i(y),as=n(y,"LI",{});var mL=s(as);TH=n(mL,"STRONG",{});var s8r=s(TH);hze=r(s8r,"gpt_neo"),s8r.forEach(t),pze=r(mL," \u2014 "),AB=n(mL,"A",{href:!0});var l8r=s(AB);_ze=r(l8r,"GPT2Tokenizer"),l8r.forEach(t),uze=r(mL," or "),LB=n(mL,"A",{href:!0});var i8r=s(LB);bze=r(i8r,"GPT2TokenizerFast"),i8r.forEach(t),vze=r(mL," (GPT Neo model)"),mL.forEach(t),Tze=i(y),ns=n(y,"LI",{});var gL=s(ns);FH=n(gL,"STRONG",{});var d8r=s(FH);Fze=r(d8r,"herbert"),d8r.forEach(t),Cze=r(gL," \u2014 "),BB=n(gL,"A",{href:!0});var c8r=s(BB);Mze=r(c8r,"HerbertTokenizer"),c8r.forEach(t),Eze=r(gL," or "),xB=n(gL,"A",{href:!0});var f8r=s(xB);yze=r(f8r,"HerbertTokenizerFast"),f8r.forEach(t),wze=r(gL," (HerBERT model)"),gL.forEach(t),Aze=i(y),Ag=n(y,"LI",{});var STe=s(Ag);CH=n(STe,"STRONG",{});var m8r=s(CH);Lze=r(m8r,"hubert"),m8r.forEach(t),Bze=r(STe," \u2014 "),kB=n(STe,"A",{href:!0});var g8r=s(kB);xze=r(g8r,"Wav2Vec2CTCTokenizer"),g8r.forEach(t),kze=r(STe," (Hubert model)"),STe.forEach(t),Rze=i(y),ss=n(y,"LI",{});var hL=s(ss);MH=n(hL,"STRONG",{});var h8r=s(MH);Sze=r(h8r,"ibert"),h8r.forEach(t),Pze=r(hL," \u2014 "),RB=n(hL,"A",{href:!0});var p8r=s(RB);$ze=r(p8r,"RobertaTokenizer"),p8r.forEach(t),Ize=r(hL," or "),SB=n(hL,"A",{href:!0});var _8r=s(SB);jze=r(_8r,"RobertaTokenizerFast"),_8r.forEach(t),Nze=r(hL," (I-BERT model)"),hL.forEach(t),Dze=i(y),ls=n(y,"LI",{});var pL=s(ls);EH=n(pL,"STRONG",{});var u8r=s(EH);qze=r(u8r,"layoutlm"),u8r.forEach(t),Gze=r(pL," \u2014 "),PB=n(pL,"A",{href:!0});var b8r=s(PB);Oze=r(b8r,"LayoutLMTokenizer"),b8r.forEach(t),Xze=r(pL," or "),$B=n(pL,"A",{href:!0});var v8r=s($B);zze=r(v8r,"LayoutLMTokenizerFast"),v8r.forEach(t),Vze=r(pL," (LayoutLM model)"),pL.forEach(t),Wze=i(y),is=n(y,"LI",{});var _L=s(is);yH=n(_L,"STRONG",{});var T8r=s(yH);Qze=r(T8r,"layoutlmv2"),T8r.forEach(t),Hze=r(_L," \u2014 "),IB=n(_L,"A",{href:!0});var F8r=s(IB);Uze=r(F8r,"LayoutLMv2Tokenizer"),F8r.forEach(t),Jze=r(_L," or "),jB=n(_L,"A",{href:!0});var C8r=s(jB);Yze=r(C8r,"LayoutLMv2TokenizerFast"),C8r.forEach(t),Kze=r(_L," (LayoutLMv2 model)"),_L.forEach(t),Zze=i(y),ds=n(y,"LI",{});var uL=s(ds);wH=n(uL,"STRONG",{});var M8r=s(wH);eVe=r(M8r,"layoutxlm"),M8r.forEach(t),oVe=r(uL," \u2014 "),NB=n(uL,"A",{href:!0});var E8r=s(NB);rVe=r(E8r,"LayoutXLMTokenizer"),E8r.forEach(t),tVe=r(uL," or "),DB=n(uL,"A",{href:!0});var y8r=s(DB);aVe=r(y8r,"LayoutXLMTokenizerFast"),y8r.forEach(t),nVe=r(uL," (LayoutXLM model)"),uL.forEach(t),sVe=i(y),cs=n(y,"LI",{});var bL=s(cs);AH=n(bL,"STRONG",{});var w8r=s(AH);lVe=r(w8r,"led"),w8r.forEach(t),iVe=r(bL," \u2014 "),qB=n(bL,"A",{href:!0});var A8r=s(qB);dVe=r(A8r,"LEDTokenizer"),A8r.forEach(t),cVe=r(bL," or "),GB=n(bL,"A",{href:!0});var L8r=s(GB);fVe=r(L8r,"LEDTokenizerFast"),L8r.forEach(t),mVe=r(bL," (LED model)"),bL.forEach(t),gVe=i(y),fs=n(y,"LI",{});var vL=s(fs);LH=n(vL,"STRONG",{});var B8r=s(LH);hVe=r(B8r,"longformer"),B8r.forEach(t),pVe=r(vL," \u2014 "),OB=n(vL,"A",{href:!0});var x8r=s(OB);_Ve=r(x8r,"LongformerTokenizer"),x8r.forEach(t),uVe=r(vL," or "),XB=n(vL,"A",{href:!0});var k8r=s(XB);bVe=r(k8r,"LongformerTokenizerFast"),k8r.forEach(t),vVe=r(vL," (Longformer model)"),vL.forEach(t),TVe=i(y),Lg=n(y,"LI",{});var PTe=s(Lg);BH=n(PTe,"STRONG",{});var R8r=s(BH);FVe=r(R8r,"luke"),R8r.forEach(t),CVe=r(PTe," \u2014 "),zB=n(PTe,"A",{href:!0});var S8r=s(zB);MVe=r(S8r,"LukeTokenizer"),S8r.forEach(t),EVe=r(PTe," (LUKE model)"),PTe.forEach(t),yVe=i(y),ms=n(y,"LI",{});var TL=s(ms);xH=n(TL,"STRONG",{});var P8r=s(xH);wVe=r(P8r,"lxmert"),P8r.forEach(t),AVe=r(TL," \u2014 "),VB=n(TL,"A",{href:!0});var $8r=s(VB);LVe=r($8r,"LxmertTokenizer"),$8r.forEach(t),BVe=r(TL," or "),WB=n(TL,"A",{href:!0});var I8r=s(WB);xVe=r(I8r,"LxmertTokenizerFast"),I8r.forEach(t),kVe=r(TL," (LXMERT model)"),TL.forEach(t),RVe=i(y),Bg=n(y,"LI",{});var $Te=s(Bg);kH=n($Te,"STRONG",{});var j8r=s(kH);SVe=r(j8r,"m2m_100"),j8r.forEach(t),PVe=r($Te," \u2014 "),QB=n($Te,"A",{href:!0});var N8r=s(QB);$Ve=r(N8r,"M2M100Tokenizer"),N8r.forEach(t),IVe=r($Te," (M2M100 model)"),$Te.forEach(t),jVe=i(y),xg=n(y,"LI",{});var ITe=s(xg);RH=n(ITe,"STRONG",{});var D8r=s(RH);NVe=r(D8r,"marian"),D8r.forEach(t),DVe=r(ITe," \u2014 "),HB=n(ITe,"A",{href:!0});var q8r=s(HB);qVe=r(q8r,"MarianTokenizer"),q8r.forEach(t),GVe=r(ITe," (Marian model)"),ITe.forEach(t),OVe=i(y),gs=n(y,"LI",{});var FL=s(gs);SH=n(FL,"STRONG",{});var G8r=s(SH);XVe=r(G8r,"mbart"),G8r.forEach(t),zVe=r(FL," \u2014 "),UB=n(FL,"A",{href:!0});var O8r=s(UB);VVe=r(O8r,"MBartTokenizer"),O8r.forEach(t),WVe=r(FL," or "),JB=n(FL,"A",{href:!0});var X8r=s(JB);QVe=r(X8r,"MBartTokenizerFast"),X8r.forEach(t),HVe=r(FL," (mBART model)"),FL.forEach(t),UVe=i(y),hs=n(y,"LI",{});var CL=s(hs);PH=n(CL,"STRONG",{});var z8r=s(PH);JVe=r(z8r,"mbart50"),z8r.forEach(t),YVe=r(CL," \u2014 "),YB=n(CL,"A",{href:!0});var V8r=s(YB);KVe=r(V8r,"MBart50Tokenizer"),V8r.forEach(t),ZVe=r(CL," or "),KB=n(CL,"A",{href:!0});var W8r=s(KB);eWe=r(W8r,"MBart50TokenizerFast"),W8r.forEach(t),oWe=r(CL," (mBART-50 model)"),CL.forEach(t),rWe=i(y),kg=n(y,"LI",{});var jTe=s(kg);$H=n(jTe,"STRONG",{});var Q8r=s($H);tWe=r(Q8r,"mluke"),Q8r.forEach(t),aWe=r(jTe," \u2014 "),ZB=n(jTe,"A",{href:!0});var H8r=s(ZB);nWe=r(H8r,"MLukeTokenizer"),H8r.forEach(t),sWe=r(jTe," (mLUKE model)"),jTe.forEach(t),lWe=i(y),ps=n(y,"LI",{});var ML=s(ps);IH=n(ML,"STRONG",{});var U8r=s(IH);iWe=r(U8r,"mobilebert"),U8r.forEach(t),dWe=r(ML," \u2014 "),ex=n(ML,"A",{href:!0});var J8r=s(ex);cWe=r(J8r,"MobileBertTokenizer"),J8r.forEach(t),fWe=r(ML," or "),ox=n(ML,"A",{href:!0});var Y8r=s(ox);mWe=r(Y8r,"MobileBertTokenizerFast"),Y8r.forEach(t),gWe=r(ML," (MobileBERT model)"),ML.forEach(t),hWe=i(y),_s=n(y,"LI",{});var EL=s(_s);jH=n(EL,"STRONG",{});var K8r=s(jH);pWe=r(K8r,"mpnet"),K8r.forEach(t),_We=r(EL," \u2014 "),rx=n(EL,"A",{href:!0});var Z8r=s(rx);uWe=r(Z8r,"MPNetTokenizer"),Z8r.forEach(t),bWe=r(EL," or "),tx=n(EL,"A",{href:!0});var eBr=s(tx);vWe=r(eBr,"MPNetTokenizerFast"),eBr.forEach(t),TWe=r(EL," (MPNet model)"),EL.forEach(t),FWe=i(y),us=n(y,"LI",{});var yL=s(us);NH=n(yL,"STRONG",{});var oBr=s(NH);CWe=r(oBr,"mt5"),oBr.forEach(t),MWe=r(yL," \u2014 "),ax=n(yL,"A",{href:!0});var rBr=s(ax);EWe=r(rBr,"MT5Tokenizer"),rBr.forEach(t),yWe=r(yL," or "),nx=n(yL,"A",{href:!0});var tBr=s(nx);wWe=r(tBr,"MT5TokenizerFast"),tBr.forEach(t),AWe=r(yL," (mT5 model)"),yL.forEach(t),LWe=i(y),bs=n(y,"LI",{});var wL=s(bs);DH=n(wL,"STRONG",{});var aBr=s(DH);BWe=r(aBr,"openai-gpt"),aBr.forEach(t),xWe=r(wL," \u2014 "),sx=n(wL,"A",{href:!0});var nBr=s(sx);kWe=r(nBr,"OpenAIGPTTokenizer"),nBr.forEach(t),RWe=r(wL," or "),lx=n(wL,"A",{href:!0});var sBr=s(lx);SWe=r(sBr,"OpenAIGPTTokenizerFast"),sBr.forEach(t),PWe=r(wL," (OpenAI GPT model)"),wL.forEach(t),$We=i(y),vs=n(y,"LI",{});var AL=s(vs);qH=n(AL,"STRONG",{});var lBr=s(qH);IWe=r(lBr,"pegasus"),lBr.forEach(t),jWe=r(AL," \u2014 "),ix=n(AL,"A",{href:!0});var iBr=s(ix);NWe=r(iBr,"PegasusTokenizer"),iBr.forEach(t),DWe=r(AL," or "),dx=n(AL,"A",{href:!0});var dBr=s(dx);qWe=r(dBr,"PegasusTokenizerFast"),dBr.forEach(t),GWe=r(AL," (Pegasus model)"),AL.forEach(t),OWe=i(y),Rg=n(y,"LI",{});var NTe=s(Rg);GH=n(NTe,"STRONG",{});var cBr=s(GH);XWe=r(cBr,"perceiver"),cBr.forEach(t),zWe=r(NTe," \u2014 "),cx=n(NTe,"A",{href:!0});var fBr=s(cx);VWe=r(fBr,"PerceiverTokenizer"),fBr.forEach(t),WWe=r(NTe," (Perceiver model)"),NTe.forEach(t),QWe=i(y),Sg=n(y,"LI",{});var DTe=s(Sg);OH=n(DTe,"STRONG",{});var mBr=s(OH);HWe=r(mBr,"phobert"),mBr.forEach(t),UWe=r(DTe," \u2014 "),fx=n(DTe,"A",{href:!0});var gBr=s(fx);JWe=r(gBr,"PhobertTokenizer"),gBr.forEach(t),YWe=r(DTe," (PhoBERT model)"),DTe.forEach(t),KWe=i(y),Pg=n(y,"LI",{});var qTe=s(Pg);XH=n(qTe,"STRONG",{});var hBr=s(XH);ZWe=r(hBr,"plbart"),hBr.forEach(t),eQe=r(qTe," \u2014 "),mx=n(qTe,"A",{href:!0});var pBr=s(mx);oQe=r(pBr,"PLBartTokenizer"),pBr.forEach(t),rQe=r(qTe," (PLBart model)"),qTe.forEach(t),tQe=i(y),$g=n(y,"LI",{});var GTe=s($g);zH=n(GTe,"STRONG",{});var _Br=s(zH);aQe=r(_Br,"prophetnet"),_Br.forEach(t),nQe=r(GTe," \u2014 "),gx=n(GTe,"A",{href:!0});var uBr=s(gx);sQe=r(uBr,"ProphetNetTokenizer"),uBr.forEach(t),lQe=r(GTe," (ProphetNet model)"),GTe.forEach(t),iQe=i(y),Ts=n(y,"LI",{});var LL=s(Ts);VH=n(LL,"STRONG",{});var bBr=s(VH);dQe=r(bBr,"qdqbert"),bBr.forEach(t),cQe=r(LL," \u2014 "),hx=n(LL,"A",{href:!0});var vBr=s(hx);fQe=r(vBr,"BertTokenizer"),vBr.forEach(t),mQe=r(LL," or "),px=n(LL,"A",{href:!0});var TBr=s(px);gQe=r(TBr,"BertTokenizerFast"),TBr.forEach(t),hQe=r(LL," (QDQBert model)"),LL.forEach(t),pQe=i(y),Ig=n(y,"LI",{});var OTe=s(Ig);WH=n(OTe,"STRONG",{});var FBr=s(WH);_Qe=r(FBr,"rag"),FBr.forEach(t),uQe=r(OTe," \u2014 "),_x=n(OTe,"A",{href:!0});var CBr=s(_x);bQe=r(CBr,"RagTokenizer"),CBr.forEach(t),vQe=r(OTe," (RAG model)"),OTe.forEach(t),TQe=i(y),Fs=n(y,"LI",{});var BL=s(Fs);QH=n(BL,"STRONG",{});var MBr=s(QH);FQe=r(MBr,"reformer"),MBr.forEach(t),CQe=r(BL," \u2014 "),ux=n(BL,"A",{href:!0});var EBr=s(ux);MQe=r(EBr,"ReformerTokenizer"),EBr.forEach(t),EQe=r(BL," or "),bx=n(BL,"A",{href:!0});var yBr=s(bx);yQe=r(yBr,"ReformerTokenizerFast"),yBr.forEach(t),wQe=r(BL," (Reformer model)"),BL.forEach(t),AQe=i(y),Cs=n(y,"LI",{});var xL=s(Cs);HH=n(xL,"STRONG",{});var wBr=s(HH);LQe=r(wBr,"rembert"),wBr.forEach(t),BQe=r(xL," \u2014 "),vx=n(xL,"A",{href:!0});var ABr=s(vx);xQe=r(ABr,"RemBertTokenizer"),ABr.forEach(t),kQe=r(xL," or "),Tx=n(xL,"A",{href:!0});var LBr=s(Tx);RQe=r(LBr,"RemBertTokenizerFast"),LBr.forEach(t),SQe=r(xL," (RemBERT model)"),xL.forEach(t),PQe=i(y),Ms=n(y,"LI",{});var kL=s(Ms);UH=n(kL,"STRONG",{});var BBr=s(UH);$Qe=r(BBr,"retribert"),BBr.forEach(t),IQe=r(kL," \u2014 "),Fx=n(kL,"A",{href:!0});var xBr=s(Fx);jQe=r(xBr,"RetriBertTokenizer"),xBr.forEach(t),NQe=r(kL," or "),Cx=n(kL,"A",{href:!0});var kBr=s(Cx);DQe=r(kBr,"RetriBertTokenizerFast"),kBr.forEach(t),qQe=r(kL," (RetriBERT model)"),kL.forEach(t),GQe=i(y),Es=n(y,"LI",{});var RL=s(Es);JH=n(RL,"STRONG",{});var RBr=s(JH);OQe=r(RBr,"roberta"),RBr.forEach(t),XQe=r(RL," \u2014 "),Mx=n(RL,"A",{href:!0});var SBr=s(Mx);zQe=r(SBr,"RobertaTokenizer"),SBr.forEach(t),VQe=r(RL," or "),Ex=n(RL,"A",{href:!0});var PBr=s(Ex);WQe=r(PBr,"RobertaTokenizerFast"),PBr.forEach(t),QQe=r(RL," (RoBERTa model)"),RL.forEach(t),HQe=i(y),ys=n(y,"LI",{});var SL=s(ys);YH=n(SL,"STRONG",{});var $Br=s(YH);UQe=r($Br,"roformer"),$Br.forEach(t),JQe=r(SL," \u2014 "),yx=n(SL,"A",{href:!0});var IBr=s(yx);YQe=r(IBr,"RoFormerTokenizer"),IBr.forEach(t),KQe=r(SL," or "),wx=n(SL,"A",{href:!0});var jBr=s(wx);ZQe=r(jBr,"RoFormerTokenizerFast"),jBr.forEach(t),eHe=r(SL," (RoFormer model)"),SL.forEach(t),oHe=i(y),jg=n(y,"LI",{});var XTe=s(jg);KH=n(XTe,"STRONG",{});var NBr=s(KH);rHe=r(NBr,"speech_to_text"),NBr.forEach(t),tHe=r(XTe," \u2014 "),Ax=n(XTe,"A",{href:!0});var DBr=s(Ax);aHe=r(DBr,"Speech2TextTokenizer"),DBr.forEach(t),nHe=r(XTe," (Speech2Text model)"),XTe.forEach(t),sHe=i(y),Ng=n(y,"LI",{});var zTe=s(Ng);ZH=n(zTe,"STRONG",{});var qBr=s(ZH);lHe=r(qBr,"speech_to_text_2"),qBr.forEach(t),iHe=r(zTe," \u2014 "),Lx=n(zTe,"A",{href:!0});var GBr=s(Lx);dHe=r(GBr,"Speech2Text2Tokenizer"),GBr.forEach(t),cHe=r(zTe," (Speech2Text2 model)"),zTe.forEach(t),fHe=i(y),ws=n(y,"LI",{});var PL=s(ws);eU=n(PL,"STRONG",{});var OBr=s(eU);mHe=r(OBr,"splinter"),OBr.forEach(t),gHe=r(PL," \u2014 "),Bx=n(PL,"A",{href:!0});var XBr=s(Bx);hHe=r(XBr,"SplinterTokenizer"),XBr.forEach(t),pHe=r(PL," or "),xx=n(PL,"A",{href:!0});var zBr=s(xx);_He=r(zBr,"SplinterTokenizerFast"),zBr.forEach(t),uHe=r(PL," (Splinter model)"),PL.forEach(t),bHe=i(y),As=n(y,"LI",{});var $L=s(As);oU=n($L,"STRONG",{});var VBr=s(oU);vHe=r(VBr,"squeezebert"),VBr.forEach(t),THe=r($L," \u2014 "),kx=n($L,"A",{href:!0});var WBr=s(kx);FHe=r(WBr,"SqueezeBertTokenizer"),WBr.forEach(t),CHe=r($L," or "),Rx=n($L,"A",{href:!0});var QBr=s(Rx);MHe=r(QBr,"SqueezeBertTokenizerFast"),QBr.forEach(t),EHe=r($L," (SqueezeBERT model)"),$L.forEach(t),yHe=i(y),Ls=n(y,"LI",{});var IL=s(Ls);rU=n(IL,"STRONG",{});var HBr=s(rU);wHe=r(HBr,"t5"),HBr.forEach(t),AHe=r(IL," \u2014 "),Sx=n(IL,"A",{href:!0});var UBr=s(Sx);LHe=r(UBr,"T5Tokenizer"),UBr.forEach(t),BHe=r(IL," or "),Px=n(IL,"A",{href:!0});var JBr=s(Px);xHe=r(JBr,"T5TokenizerFast"),JBr.forEach(t),kHe=r(IL," (T5 model)"),IL.forEach(t),RHe=i(y),Dg=n(y,"LI",{});var VTe=s(Dg);tU=n(VTe,"STRONG",{});var YBr=s(tU);SHe=r(YBr,"tapas"),YBr.forEach(t),PHe=r(VTe," \u2014 "),$x=n(VTe,"A",{href:!0});var KBr=s($x);$He=r(KBr,"TapasTokenizer"),KBr.forEach(t),IHe=r(VTe," (TAPAS model)"),VTe.forEach(t),jHe=i(y),qg=n(y,"LI",{});var WTe=s(qg);aU=n(WTe,"STRONG",{});var ZBr=s(aU);NHe=r(ZBr,"transfo-xl"),ZBr.forEach(t),DHe=r(WTe," \u2014 "),Ix=n(WTe,"A",{href:!0});var exr=s(Ix);qHe=r(exr,"TransfoXLTokenizer"),exr.forEach(t),GHe=r(WTe," (Transformer-XL model)"),WTe.forEach(t),OHe=i(y),Gg=n(y,"LI",{});var QTe=s(Gg);nU=n(QTe,"STRONG",{});var oxr=s(nU);XHe=r(oxr,"wav2vec2"),oxr.forEach(t),zHe=r(QTe," \u2014 "),jx=n(QTe,"A",{href:!0});var rxr=s(jx);VHe=r(rxr,"Wav2Vec2CTCTokenizer"),rxr.forEach(t),WHe=r(QTe," (Wav2Vec2 model)"),QTe.forEach(t),QHe=i(y),Og=n(y,"LI",{});var HTe=s(Og);sU=n(HTe,"STRONG",{});var txr=s(sU);HHe=r(txr,"wav2vec2_phoneme"),txr.forEach(t),UHe=r(HTe," \u2014 "),Nx=n(HTe,"A",{href:!0});var axr=s(Nx);JHe=r(axr,"Wav2Vec2PhonemeCTCTokenizer"),axr.forEach(t),YHe=r(HTe," (Wav2Vec2Phoneme model)"),HTe.forEach(t),KHe=i(y),Bs=n(y,"LI",{});var jL=s(Bs);lU=n(jL,"STRONG",{});var nxr=s(lU);ZHe=r(nxr,"xglm"),nxr.forEach(t),eUe=r(jL," \u2014 "),Dx=n(jL,"A",{href:!0});var sxr=s(Dx);oUe=r(sxr,"XGLMTokenizer"),sxr.forEach(t),rUe=r(jL," or "),qx=n(jL,"A",{href:!0});var lxr=s(qx);tUe=r(lxr,"XGLMTokenizerFast"),lxr.forEach(t),aUe=r(jL," (XGLM model)"),jL.forEach(t),nUe=i(y),Xg=n(y,"LI",{});var UTe=s(Xg);iU=n(UTe,"STRONG",{});var ixr=s(iU);sUe=r(ixr,"xlm"),ixr.forEach(t),lUe=r(UTe," \u2014 "),Gx=n(UTe,"A",{href:!0});var dxr=s(Gx);iUe=r(dxr,"XLMTokenizer"),dxr.forEach(t),dUe=r(UTe," (XLM model)"),UTe.forEach(t),cUe=i(y),zg=n(y,"LI",{});var JTe=s(zg);dU=n(JTe,"STRONG",{});var cxr=s(dU);fUe=r(cxr,"xlm-prophetnet"),cxr.forEach(t),mUe=r(JTe," \u2014 "),Ox=n(JTe,"A",{href:!0});var fxr=s(Ox);gUe=r(fxr,"XLMProphetNetTokenizer"),fxr.forEach(t),hUe=r(JTe," (XLMProphetNet model)"),JTe.forEach(t),pUe=i(y),xs=n(y,"LI",{});var NL=s(xs);cU=n(NL,"STRONG",{});var mxr=s(cU);_Ue=r(mxr,"xlm-roberta"),mxr.forEach(t),uUe=r(NL," \u2014 "),Xx=n(NL,"A",{href:!0});var gxr=s(Xx);bUe=r(gxr,"XLMRobertaTokenizer"),gxr.forEach(t),vUe=r(NL," or "),zx=n(NL,"A",{href:!0});var hxr=s(zx);TUe=r(hxr,"XLMRobertaTokenizerFast"),hxr.forEach(t),FUe=r(NL," (XLM-RoBERTa model)"),NL.forEach(t),CUe=i(y),ks=n(y,"LI",{});var DL=s(ks);fU=n(DL,"STRONG",{});var pxr=s(fU);MUe=r(pxr,"xlnet"),pxr.forEach(t),EUe=r(DL," \u2014 "),Vx=n(DL,"A",{href:!0});var _xr=s(Vx);yUe=r(_xr,"XLNetTokenizer"),_xr.forEach(t),wUe=r(DL," or "),Wx=n(DL,"A",{href:!0});var uxr=s(Wx);AUe=r(uxr,"XLNetTokenizerFast"),uxr.forEach(t),LUe=r(DL," (XLNet model)"),DL.forEach(t),y.forEach(t),BUe=i(da),mU=n(da,"P",{});var bxr=s(mU);xUe=r(bxr,"Examples:"),bxr.forEach(t),kUe=i(da),m(FE.$$.fragment,da),da.forEach(t),RUe=i(Is),Vg=n(Is,"DIV",{class:!0});var MBe=s(Vg);m(CE.$$.fragment,MBe),SUe=i(MBe),gU=n(MBe,"P",{});var vxr=s(gU);PUe=r(vxr,"Register a new tokenizer in this mapping."),vxr.forEach(t),MBe.forEach(t),Is.forEach(t),F7e=i(d),Ni=n(d,"H2",{class:!0});var EBe=s(Ni);Wg=n(EBe,"A",{id:!0,class:!0,href:!0});var Txr=s(Wg);hU=n(Txr,"SPAN",{});var Fxr=s(hU);m(ME.$$.fragment,Fxr),Fxr.forEach(t),Txr.forEach(t),$Ue=i(EBe),pU=n(EBe,"SPAN",{});var Cxr=s(pU);IUe=r(Cxr,"AutoFeatureExtractor"),Cxr.forEach(t),EBe.forEach(t),C7e=i(d),Xo=n(d,"DIV",{class:!0});var js=s(Xo);m(EE.$$.fragment,js),jUe=i(js),yE=n(js,"P",{});var yBe=s(yE);NUe=r(yBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Qx=n(yBe,"A",{href:!0});var Mxr=s(Qx);DUe=r(Mxr,"AutoFeatureExtractor.from_pretrained()"),Mxr.forEach(t),qUe=r(yBe," class method."),yBe.forEach(t),GUe=i(js),wE=n(js,"P",{});var wBe=s(wE);OUe=r(wBe,"This class cannot be instantiated directly using "),_U=n(wBe,"CODE",{});var Exr=s(_U);XUe=r(Exr,"__init__()"),Exr.forEach(t),zUe=r(wBe," (throws an error)."),wBe.forEach(t),VUe=i(js),Le=n(js,"DIV",{class:!0});var kt=s(Le);m(AE.$$.fragment,kt),WUe=i(kt),uU=n(kt,"P",{});var yxr=s(uU);QUe=r(yxr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yxr.forEach(t),HUe=i(kt),Na=n(kt,"P",{});var iM=s(Na);UUe=r(iM,"The feature extractor class to instantiate is selected based on the "),bU=n(iM,"CODE",{});var wxr=s(bU);JUe=r(wxr,"model_type"),wxr.forEach(t),YUe=r(iM,` property of the config object
(either passed as an argument or loaded from `),vU=n(iM,"CODE",{});var Axr=s(vU);KUe=r(Axr,"pretrained_model_name_or_path"),Axr.forEach(t),ZUe=r(iM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),TU=n(iM,"CODE",{});var Lxr=s(TU);eJe=r(Lxr,"pretrained_model_name_or_path"),Lxr.forEach(t),oJe=r(iM,":"),iM.forEach(t),rJe=i(kt),se=n(kt,"UL",{});var de=s(se);Qg=n(de,"LI",{});var YTe=s(Qg);FU=n(YTe,"STRONG",{});var Bxr=s(FU);tJe=r(Bxr,"beit"),Bxr.forEach(t),aJe=r(YTe," \u2014 "),Hx=n(YTe,"A",{href:!0});var xxr=s(Hx);nJe=r(xxr,"BeitFeatureExtractor"),xxr.forEach(t),sJe=r(YTe," (BEiT model)"),YTe.forEach(t),lJe=i(de),Hg=n(de,"LI",{});var KTe=s(Hg);CU=n(KTe,"STRONG",{});var kxr=s(CU);iJe=r(kxr,"clip"),kxr.forEach(t),dJe=r(KTe," \u2014 "),Ux=n(KTe,"A",{href:!0});var Rxr=s(Ux);cJe=r(Rxr,"CLIPFeatureExtractor"),Rxr.forEach(t),fJe=r(KTe," (CLIP model)"),KTe.forEach(t),mJe=i(de),Ug=n(de,"LI",{});var ZTe=s(Ug);MU=n(ZTe,"STRONG",{});var Sxr=s(MU);gJe=r(Sxr,"convnext"),Sxr.forEach(t),hJe=r(ZTe," \u2014 "),Jx=n(ZTe,"A",{href:!0});var Pxr=s(Jx);pJe=r(Pxr,"ConvNextFeatureExtractor"),Pxr.forEach(t),_Je=r(ZTe," (ConvNext model)"),ZTe.forEach(t),uJe=i(de),Jg=n(de,"LI",{});var eFe=s(Jg);EU=n(eFe,"STRONG",{});var $xr=s(EU);bJe=r($xr,"deit"),$xr.forEach(t),vJe=r(eFe," \u2014 "),Yx=n(eFe,"A",{href:!0});var Ixr=s(Yx);TJe=r(Ixr,"DeiTFeatureExtractor"),Ixr.forEach(t),FJe=r(eFe," (DeiT model)"),eFe.forEach(t),CJe=i(de),Yg=n(de,"LI",{});var oFe=s(Yg);yU=n(oFe,"STRONG",{});var jxr=s(yU);MJe=r(jxr,"detr"),jxr.forEach(t),EJe=r(oFe," \u2014 "),Kx=n(oFe,"A",{href:!0});var Nxr=s(Kx);yJe=r(Nxr,"DetrFeatureExtractor"),Nxr.forEach(t),wJe=r(oFe," (DETR model)"),oFe.forEach(t),AJe=i(de),Kg=n(de,"LI",{});var rFe=s(Kg);wU=n(rFe,"STRONG",{});var Dxr=s(wU);LJe=r(Dxr,"hubert"),Dxr.forEach(t),BJe=r(rFe," \u2014 "),Zx=n(rFe,"A",{href:!0});var qxr=s(Zx);xJe=r(qxr,"Wav2Vec2FeatureExtractor"),qxr.forEach(t),kJe=r(rFe," (Hubert model)"),rFe.forEach(t),RJe=i(de),Zg=n(de,"LI",{});var tFe=s(Zg);AU=n(tFe,"STRONG",{});var Gxr=s(AU);SJe=r(Gxr,"layoutlmv2"),Gxr.forEach(t),PJe=r(tFe," \u2014 "),ek=n(tFe,"A",{href:!0});var Oxr=s(ek);$Je=r(Oxr,"LayoutLMv2FeatureExtractor"),Oxr.forEach(t),IJe=r(tFe," (LayoutLMv2 model)"),tFe.forEach(t),jJe=i(de),eh=n(de,"LI",{});var aFe=s(eh);LU=n(aFe,"STRONG",{});var Xxr=s(LU);NJe=r(Xxr,"perceiver"),Xxr.forEach(t),DJe=r(aFe," \u2014 "),ok=n(aFe,"A",{href:!0});var zxr=s(ok);qJe=r(zxr,"PerceiverFeatureExtractor"),zxr.forEach(t),GJe=r(aFe," (Perceiver model)"),aFe.forEach(t),OJe=i(de),oh=n(de,"LI",{});var nFe=s(oh);BU=n(nFe,"STRONG",{});var Vxr=s(BU);XJe=r(Vxr,"poolformer"),Vxr.forEach(t),zJe=r(nFe," \u2014 "),rk=n(nFe,"A",{href:!0});var Wxr=s(rk);VJe=r(Wxr,"PoolFormerFeatureExtractor"),Wxr.forEach(t),WJe=r(nFe," (PoolFormer model)"),nFe.forEach(t),QJe=i(de),rh=n(de,"LI",{});var sFe=s(rh);xU=n(sFe,"STRONG",{});var Qxr=s(xU);HJe=r(Qxr,"segformer"),Qxr.forEach(t),UJe=r(sFe," \u2014 "),tk=n(sFe,"A",{href:!0});var Hxr=s(tk);JJe=r(Hxr,"SegformerFeatureExtractor"),Hxr.forEach(t),YJe=r(sFe," (SegFormer model)"),sFe.forEach(t),KJe=i(de),th=n(de,"LI",{});var lFe=s(th);kU=n(lFe,"STRONG",{});var Uxr=s(kU);ZJe=r(Uxr,"speech_to_text"),Uxr.forEach(t),eYe=r(lFe," \u2014 "),ak=n(lFe,"A",{href:!0});var Jxr=s(ak);oYe=r(Jxr,"Speech2TextFeatureExtractor"),Jxr.forEach(t),rYe=r(lFe," (Speech2Text model)"),lFe.forEach(t),tYe=i(de),ah=n(de,"LI",{});var iFe=s(ah);RU=n(iFe,"STRONG",{});var Yxr=s(RU);aYe=r(Yxr,"swin"),Yxr.forEach(t),nYe=r(iFe," \u2014 "),nk=n(iFe,"A",{href:!0});var Kxr=s(nk);sYe=r(Kxr,"ViTFeatureExtractor"),Kxr.forEach(t),lYe=r(iFe," (Swin model)"),iFe.forEach(t),iYe=i(de),nh=n(de,"LI",{});var dFe=s(nh);SU=n(dFe,"STRONG",{});var Zxr=s(SU);dYe=r(Zxr,"vit"),Zxr.forEach(t),cYe=r(dFe," \u2014 "),sk=n(dFe,"A",{href:!0});var ekr=s(sk);fYe=r(ekr,"ViTFeatureExtractor"),ekr.forEach(t),mYe=r(dFe," (ViT model)"),dFe.forEach(t),gYe=i(de),sh=n(de,"LI",{});var cFe=s(sh);PU=n(cFe,"STRONG",{});var okr=s(PU);hYe=r(okr,"vit_mae"),okr.forEach(t),pYe=r(cFe," \u2014 "),lk=n(cFe,"A",{href:!0});var rkr=s(lk);_Ye=r(rkr,"ViTFeatureExtractor"),rkr.forEach(t),uYe=r(cFe," (ViTMAE model)"),cFe.forEach(t),bYe=i(de),lh=n(de,"LI",{});var fFe=s(lh);$U=n(fFe,"STRONG",{});var tkr=s($U);vYe=r(tkr,"wav2vec2"),tkr.forEach(t),TYe=r(fFe," \u2014 "),ik=n(fFe,"A",{href:!0});var akr=s(ik);FYe=r(akr,"Wav2Vec2FeatureExtractor"),akr.forEach(t),CYe=r(fFe," (Wav2Vec2 model)"),fFe.forEach(t),de.forEach(t),MYe=i(kt),m(ih.$$.fragment,kt),EYe=i(kt),IU=n(kt,"P",{});var nkr=s(IU);yYe=r(nkr,"Examples:"),nkr.forEach(t),wYe=i(kt),m(LE.$$.fragment,kt),kt.forEach(t),AYe=i(js),dh=n(js,"DIV",{class:!0});var ABe=s(dh);m(BE.$$.fragment,ABe),LYe=i(ABe),jU=n(ABe,"P",{});var skr=s(jU);BYe=r(skr,"Register a new feature extractor for this class."),skr.forEach(t),ABe.forEach(t),js.forEach(t),M7e=i(d),Di=n(d,"H2",{class:!0});var LBe=s(Di);ch=n(LBe,"A",{id:!0,class:!0,href:!0});var lkr=s(ch);NU=n(lkr,"SPAN",{});var ikr=s(NU);m(xE.$$.fragment,ikr),ikr.forEach(t),lkr.forEach(t),xYe=i(LBe),DU=n(LBe,"SPAN",{});var dkr=s(DU);kYe=r(dkr,"AutoProcessor"),dkr.forEach(t),LBe.forEach(t),E7e=i(d),zo=n(d,"DIV",{class:!0});var Ns=s(zo);m(kE.$$.fragment,Ns),RYe=i(Ns),RE=n(Ns,"P",{});var BBe=s(RE);SYe=r(BBe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dk=n(BBe,"A",{href:!0});var ckr=s(dk);PYe=r(ckr,"AutoProcessor.from_pretrained()"),ckr.forEach(t),$Ye=r(BBe," class method."),BBe.forEach(t),IYe=i(Ns),SE=n(Ns,"P",{});var xBe=s(SE);jYe=r(xBe,"This class cannot be instantiated directly using "),qU=n(xBe,"CODE",{});var fkr=s(qU);NYe=r(fkr,"__init__()"),fkr.forEach(t),DYe=r(xBe," (throws an error)."),xBe.forEach(t),qYe=i(Ns),Be=n(Ns,"DIV",{class:!0});var Rt=s(Be);m(PE.$$.fragment,Rt),GYe=i(Rt),GU=n(Rt,"P",{});var mkr=s(GU);OYe=r(mkr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mkr.forEach(t),XYe=i(Rt),qi=n(Rt,"P",{});var KX=s(qi);zYe=r(KX,"The processor class to instantiate is selected based on the "),OU=n(KX,"CODE",{});var gkr=s(OU);VYe=r(gkr,"model_type"),gkr.forEach(t),WYe=r(KX,` property of the config object (either
passed as an argument or loaded from `),XU=n(KX,"CODE",{});var hkr=s(XU);QYe=r(hkr,"pretrained_model_name_or_path"),hkr.forEach(t),HYe=r(KX," if possible):"),KX.forEach(t),UYe=i(Rt),we=n(Rt,"UL",{});var No=s(we);fh=n(No,"LI",{});var mFe=s(fh);zU=n(mFe,"STRONG",{});var pkr=s(zU);JYe=r(pkr,"clip"),pkr.forEach(t),YYe=r(mFe," \u2014 "),ck=n(mFe,"A",{href:!0});var _kr=s(ck);KYe=r(_kr,"CLIPProcessor"),_kr.forEach(t),ZYe=r(mFe," (CLIP model)"),mFe.forEach(t),eKe=i(No),mh=n(No,"LI",{});var gFe=s(mh);VU=n(gFe,"STRONG",{});var ukr=s(VU);oKe=r(ukr,"layoutlmv2"),ukr.forEach(t),rKe=r(gFe," \u2014 "),fk=n(gFe,"A",{href:!0});var bkr=s(fk);tKe=r(bkr,"LayoutLMv2Processor"),bkr.forEach(t),aKe=r(gFe," (LayoutLMv2 model)"),gFe.forEach(t),nKe=i(No),gh=n(No,"LI",{});var hFe=s(gh);WU=n(hFe,"STRONG",{});var vkr=s(WU);sKe=r(vkr,"layoutxlm"),vkr.forEach(t),lKe=r(hFe," \u2014 "),mk=n(hFe,"A",{href:!0});var Tkr=s(mk);iKe=r(Tkr,"LayoutXLMProcessor"),Tkr.forEach(t),dKe=r(hFe," (LayoutXLM model)"),hFe.forEach(t),cKe=i(No),hh=n(No,"LI",{});var pFe=s(hh);QU=n(pFe,"STRONG",{});var Fkr=s(QU);fKe=r(Fkr,"speech_to_text"),Fkr.forEach(t),mKe=r(pFe," \u2014 "),gk=n(pFe,"A",{href:!0});var Ckr=s(gk);gKe=r(Ckr,"Speech2TextProcessor"),Ckr.forEach(t),hKe=r(pFe," (Speech2Text model)"),pFe.forEach(t),pKe=i(No),ph=n(No,"LI",{});var _Fe=s(ph);HU=n(_Fe,"STRONG",{});var Mkr=s(HU);_Ke=r(Mkr,"speech_to_text_2"),Mkr.forEach(t),uKe=r(_Fe," \u2014 "),hk=n(_Fe,"A",{href:!0});var Ekr=s(hk);bKe=r(Ekr,"Speech2Text2Processor"),Ekr.forEach(t),vKe=r(_Fe," (Speech2Text2 model)"),_Fe.forEach(t),TKe=i(No),_h=n(No,"LI",{});var uFe=s(_h);UU=n(uFe,"STRONG",{});var ykr=s(UU);FKe=r(ykr,"trocr"),ykr.forEach(t),CKe=r(uFe," \u2014 "),pk=n(uFe,"A",{href:!0});var wkr=s(pk);MKe=r(wkr,"TrOCRProcessor"),wkr.forEach(t),EKe=r(uFe," (TrOCR model)"),uFe.forEach(t),yKe=i(No),uh=n(No,"LI",{});var bFe=s(uh);JU=n(bFe,"STRONG",{});var Akr=s(JU);wKe=r(Akr,"vision-text-dual-encoder"),Akr.forEach(t),AKe=r(bFe," \u2014 "),_k=n(bFe,"A",{href:!0});var Lkr=s(_k);LKe=r(Lkr,"VisionTextDualEncoderProcessor"),Lkr.forEach(t),BKe=r(bFe," (VisionTextDualEncoder model)"),bFe.forEach(t),xKe=i(No),bh=n(No,"LI",{});var vFe=s(bh);YU=n(vFe,"STRONG",{});var Bkr=s(YU);kKe=r(Bkr,"wav2vec2"),Bkr.forEach(t),RKe=r(vFe," \u2014 "),uk=n(vFe,"A",{href:!0});var xkr=s(uk);SKe=r(xkr,"Wav2Vec2Processor"),xkr.forEach(t),PKe=r(vFe," (Wav2Vec2 model)"),vFe.forEach(t),No.forEach(t),$Ke=i(Rt),m(vh.$$.fragment,Rt),IKe=i(Rt),KU=n(Rt,"P",{});var kkr=s(KU);jKe=r(kkr,"Examples:"),kkr.forEach(t),NKe=i(Rt),m($E.$$.fragment,Rt),Rt.forEach(t),DKe=i(Ns),Th=n(Ns,"DIV",{class:!0});var kBe=s(Th);m(IE.$$.fragment,kBe),qKe=i(kBe),ZU=n(kBe,"P",{});var Rkr=s(ZU);GKe=r(Rkr,"Register a new processor for this class."),Rkr.forEach(t),kBe.forEach(t),Ns.forEach(t),y7e=i(d),Gi=n(d,"H2",{class:!0});var RBe=s(Gi);Fh=n(RBe,"A",{id:!0,class:!0,href:!0});var Skr=s(Fh);eJ=n(Skr,"SPAN",{});var Pkr=s(eJ);m(jE.$$.fragment,Pkr),Pkr.forEach(t),Skr.forEach(t),OKe=i(RBe),oJ=n(RBe,"SPAN",{});var $kr=s(oJ);XKe=r($kr,"AutoModel"),$kr.forEach(t),RBe.forEach(t),w7e=i(d),Vo=n(d,"DIV",{class:!0});var Ds=s(Vo);m(NE.$$.fragment,Ds),zKe=i(Ds),Oi=n(Ds,"P",{});var ZX=s(Oi);VKe=r(ZX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rJ=n(ZX,"CODE",{});var Ikr=s(rJ);WKe=r(Ikr,"from_pretrained()"),Ikr.forEach(t),QKe=r(ZX,"class method or the "),tJ=n(ZX,"CODE",{});var jkr=s(tJ);HKe=r(jkr,"from_config()"),jkr.forEach(t),UKe=r(ZX,`class
method.`),ZX.forEach(t),JKe=i(Ds),DE=n(Ds,"P",{});var SBe=s(DE);YKe=r(SBe,"This class cannot be instantiated directly using "),aJ=n(SBe,"CODE",{});var Nkr=s(aJ);KKe=r(Nkr,"__init__()"),Nkr.forEach(t),ZKe=r(SBe," (throws an error)."),SBe.forEach(t),eZe=i(Ds),Nr=n(Ds,"DIV",{class:!0});var qs=s(Nr);m(qE.$$.fragment,qs),oZe=i(qs),nJ=n(qs,"P",{});var Dkr=s(nJ);rZe=r(Dkr,"Instantiates one of the base model classes of the library from a configuration."),Dkr.forEach(t),tZe=i(qs),Xi=n(qs,"P",{});var ez=s(Xi);aZe=r(ez,`Note:
Loading a model from its configuration file does `),sJ=n(ez,"STRONG",{});var qkr=s(sJ);nZe=r(qkr,"not"),qkr.forEach(t),sZe=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(ez,"CODE",{});var Gkr=s(lJ);lZe=r(Gkr,"from_pretrained()"),Gkr.forEach(t),iZe=r(ez,"to load the model weights."),ez.forEach(t),dZe=i(qs),iJ=n(qs,"P",{});var Okr=s(iJ);cZe=r(Okr,"Examples:"),Okr.forEach(t),fZe=i(qs),m(GE.$$.fragment,qs),qs.forEach(t),mZe=i(Ds),xe=n(Ds,"DIV",{class:!0});var St=s(xe);m(OE.$$.fragment,St),gZe=i(St),dJ=n(St,"P",{});var Xkr=s(dJ);hZe=r(Xkr,"Instantiate one of the base model classes of the library from a pretrained model."),Xkr.forEach(t),pZe=i(St),Da=n(St,"P",{});var dM=s(Da);_Ze=r(dM,"The model class to instantiate is selected based on the "),cJ=n(dM,"CODE",{});var zkr=s(cJ);uZe=r(zkr,"model_type"),zkr.forEach(t),bZe=r(dM,` property of the config object (either
passed as an argument or loaded from `),fJ=n(dM,"CODE",{});var Vkr=s(fJ);vZe=r(Vkr,"pretrained_model_name_or_path"),Vkr.forEach(t),TZe=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mJ=n(dM,"CODE",{});var Wkr=s(mJ);FZe=r(Wkr,"pretrained_model_name_or_path"),Wkr.forEach(t),CZe=r(dM,":"),dM.forEach(t),MZe=i(St),F=n(St,"UL",{});var C=s(F);Ch=n(C,"LI",{});var TFe=s(Ch);gJ=n(TFe,"STRONG",{});var Qkr=s(gJ);EZe=r(Qkr,"albert"),Qkr.forEach(t),yZe=r(TFe," \u2014 "),bk=n(TFe,"A",{href:!0});var Hkr=s(bk);wZe=r(Hkr,"AlbertModel"),Hkr.forEach(t),AZe=r(TFe," (ALBERT model)"),TFe.forEach(t),LZe=i(C),Mh=n(C,"LI",{});var FFe=s(Mh);hJ=n(FFe,"STRONG",{});var Ukr=s(hJ);BZe=r(Ukr,"bart"),Ukr.forEach(t),xZe=r(FFe," \u2014 "),vk=n(FFe,"A",{href:!0});var Jkr=s(vk);kZe=r(Jkr,"BartModel"),Jkr.forEach(t),RZe=r(FFe," (BART model)"),FFe.forEach(t),SZe=i(C),Eh=n(C,"LI",{});var CFe=s(Eh);pJ=n(CFe,"STRONG",{});var Ykr=s(pJ);PZe=r(Ykr,"beit"),Ykr.forEach(t),$Ze=r(CFe," \u2014 "),Tk=n(CFe,"A",{href:!0});var Kkr=s(Tk);IZe=r(Kkr,"BeitModel"),Kkr.forEach(t),jZe=r(CFe," (BEiT model)"),CFe.forEach(t),NZe=i(C),yh=n(C,"LI",{});var MFe=s(yh);_J=n(MFe,"STRONG",{});var Zkr=s(_J);DZe=r(Zkr,"bert"),Zkr.forEach(t),qZe=r(MFe," \u2014 "),Fk=n(MFe,"A",{href:!0});var eRr=s(Fk);GZe=r(eRr,"BertModel"),eRr.forEach(t),OZe=r(MFe," (BERT model)"),MFe.forEach(t),XZe=i(C),wh=n(C,"LI",{});var EFe=s(wh);uJ=n(EFe,"STRONG",{});var oRr=s(uJ);zZe=r(oRr,"bert-generation"),oRr.forEach(t),VZe=r(EFe," \u2014 "),Ck=n(EFe,"A",{href:!0});var rRr=s(Ck);WZe=r(rRr,"BertGenerationEncoder"),rRr.forEach(t),QZe=r(EFe," (Bert Generation model)"),EFe.forEach(t),HZe=i(C),Ah=n(C,"LI",{});var yFe=s(Ah);bJ=n(yFe,"STRONG",{});var tRr=s(bJ);UZe=r(tRr,"big_bird"),tRr.forEach(t),JZe=r(yFe," \u2014 "),Mk=n(yFe,"A",{href:!0});var aRr=s(Mk);YZe=r(aRr,"BigBirdModel"),aRr.forEach(t),KZe=r(yFe," (BigBird model)"),yFe.forEach(t),ZZe=i(C),Lh=n(C,"LI",{});var wFe=s(Lh);vJ=n(wFe,"STRONG",{});var nRr=s(vJ);eeo=r(nRr,"bigbird_pegasus"),nRr.forEach(t),oeo=r(wFe," \u2014 "),Ek=n(wFe,"A",{href:!0});var sRr=s(Ek);reo=r(sRr,"BigBirdPegasusModel"),sRr.forEach(t),teo=r(wFe," (BigBirdPegasus model)"),wFe.forEach(t),aeo=i(C),Bh=n(C,"LI",{});var AFe=s(Bh);TJ=n(AFe,"STRONG",{});var lRr=s(TJ);neo=r(lRr,"blenderbot"),lRr.forEach(t),seo=r(AFe," \u2014 "),yk=n(AFe,"A",{href:!0});var iRr=s(yk);leo=r(iRr,"BlenderbotModel"),iRr.forEach(t),ieo=r(AFe," (Blenderbot model)"),AFe.forEach(t),deo=i(C),xh=n(C,"LI",{});var LFe=s(xh);FJ=n(LFe,"STRONG",{});var dRr=s(FJ);ceo=r(dRr,"blenderbot-small"),dRr.forEach(t),feo=r(LFe," \u2014 "),wk=n(LFe,"A",{href:!0});var cRr=s(wk);meo=r(cRr,"BlenderbotSmallModel"),cRr.forEach(t),geo=r(LFe," (BlenderbotSmall model)"),LFe.forEach(t),heo=i(C),kh=n(C,"LI",{});var BFe=s(kh);CJ=n(BFe,"STRONG",{});var fRr=s(CJ);peo=r(fRr,"camembert"),fRr.forEach(t),_eo=r(BFe," \u2014 "),Ak=n(BFe,"A",{href:!0});var mRr=s(Ak);ueo=r(mRr,"CamembertModel"),mRr.forEach(t),beo=r(BFe," (CamemBERT model)"),BFe.forEach(t),veo=i(C),Rh=n(C,"LI",{});var xFe=s(Rh);MJ=n(xFe,"STRONG",{});var gRr=s(MJ);Teo=r(gRr,"canine"),gRr.forEach(t),Feo=r(xFe," \u2014 "),Lk=n(xFe,"A",{href:!0});var hRr=s(Lk);Ceo=r(hRr,"CanineModel"),hRr.forEach(t),Meo=r(xFe," (Canine model)"),xFe.forEach(t),Eeo=i(C),Sh=n(C,"LI",{});var kFe=s(Sh);EJ=n(kFe,"STRONG",{});var pRr=s(EJ);yeo=r(pRr,"clip"),pRr.forEach(t),weo=r(kFe," \u2014 "),Bk=n(kFe,"A",{href:!0});var _Rr=s(Bk);Aeo=r(_Rr,"CLIPModel"),_Rr.forEach(t),Leo=r(kFe," (CLIP model)"),kFe.forEach(t),Beo=i(C),Ph=n(C,"LI",{});var RFe=s(Ph);yJ=n(RFe,"STRONG",{});var uRr=s(yJ);xeo=r(uRr,"convbert"),uRr.forEach(t),keo=r(RFe," \u2014 "),xk=n(RFe,"A",{href:!0});var bRr=s(xk);Reo=r(bRr,"ConvBertModel"),bRr.forEach(t),Seo=r(RFe," (ConvBERT model)"),RFe.forEach(t),Peo=i(C),$h=n(C,"LI",{});var SFe=s($h);wJ=n(SFe,"STRONG",{});var vRr=s(wJ);$eo=r(vRr,"convnext"),vRr.forEach(t),Ieo=r(SFe," \u2014 "),kk=n(SFe,"A",{href:!0});var TRr=s(kk);jeo=r(TRr,"ConvNextModel"),TRr.forEach(t),Neo=r(SFe," (ConvNext model)"),SFe.forEach(t),Deo=i(C),Ih=n(C,"LI",{});var PFe=s(Ih);AJ=n(PFe,"STRONG",{});var FRr=s(AJ);qeo=r(FRr,"ctrl"),FRr.forEach(t),Geo=r(PFe," \u2014 "),Rk=n(PFe,"A",{href:!0});var CRr=s(Rk);Oeo=r(CRr,"CTRLModel"),CRr.forEach(t),Xeo=r(PFe," (CTRL model)"),PFe.forEach(t),zeo=i(C),jh=n(C,"LI",{});var $Fe=s(jh);LJ=n($Fe,"STRONG",{});var MRr=s(LJ);Veo=r(MRr,"deberta"),MRr.forEach(t),Weo=r($Fe," \u2014 "),Sk=n($Fe,"A",{href:!0});var ERr=s(Sk);Qeo=r(ERr,"DebertaModel"),ERr.forEach(t),Heo=r($Fe," (DeBERTa model)"),$Fe.forEach(t),Ueo=i(C),Nh=n(C,"LI",{});var IFe=s(Nh);BJ=n(IFe,"STRONG",{});var yRr=s(BJ);Jeo=r(yRr,"deberta-v2"),yRr.forEach(t),Yeo=r(IFe," \u2014 "),Pk=n(IFe,"A",{href:!0});var wRr=s(Pk);Keo=r(wRr,"DebertaV2Model"),wRr.forEach(t),Zeo=r(IFe," (DeBERTa-v2 model)"),IFe.forEach(t),eoo=i(C),Dh=n(C,"LI",{});var jFe=s(Dh);xJ=n(jFe,"STRONG",{});var ARr=s(xJ);ooo=r(ARr,"deit"),ARr.forEach(t),roo=r(jFe," \u2014 "),$k=n(jFe,"A",{href:!0});var LRr=s($k);too=r(LRr,"DeiTModel"),LRr.forEach(t),aoo=r(jFe," (DeiT model)"),jFe.forEach(t),noo=i(C),qh=n(C,"LI",{});var NFe=s(qh);kJ=n(NFe,"STRONG",{});var BRr=s(kJ);soo=r(BRr,"detr"),BRr.forEach(t),loo=r(NFe," \u2014 "),Ik=n(NFe,"A",{href:!0});var xRr=s(Ik);ioo=r(xRr,"DetrModel"),xRr.forEach(t),doo=r(NFe," (DETR model)"),NFe.forEach(t),coo=i(C),Gh=n(C,"LI",{});var DFe=s(Gh);RJ=n(DFe,"STRONG",{});var kRr=s(RJ);foo=r(kRr,"distilbert"),kRr.forEach(t),moo=r(DFe," \u2014 "),jk=n(DFe,"A",{href:!0});var RRr=s(jk);goo=r(RRr,"DistilBertModel"),RRr.forEach(t),hoo=r(DFe," (DistilBERT model)"),DFe.forEach(t),poo=i(C),Oh=n(C,"LI",{});var qFe=s(Oh);SJ=n(qFe,"STRONG",{});var SRr=s(SJ);_oo=r(SRr,"dpr"),SRr.forEach(t),uoo=r(qFe," \u2014 "),Nk=n(qFe,"A",{href:!0});var PRr=s(Nk);boo=r(PRr,"DPRQuestionEncoder"),PRr.forEach(t),voo=r(qFe," (DPR model)"),qFe.forEach(t),Too=i(C),Xh=n(C,"LI",{});var GFe=s(Xh);PJ=n(GFe,"STRONG",{});var $Rr=s(PJ);Foo=r($Rr,"electra"),$Rr.forEach(t),Coo=r(GFe," \u2014 "),Dk=n(GFe,"A",{href:!0});var IRr=s(Dk);Moo=r(IRr,"ElectraModel"),IRr.forEach(t),Eoo=r(GFe," (ELECTRA model)"),GFe.forEach(t),yoo=i(C),zh=n(C,"LI",{});var OFe=s(zh);$J=n(OFe,"STRONG",{});var jRr=s($J);woo=r(jRr,"flaubert"),jRr.forEach(t),Aoo=r(OFe," \u2014 "),qk=n(OFe,"A",{href:!0});var NRr=s(qk);Loo=r(NRr,"FlaubertModel"),NRr.forEach(t),Boo=r(OFe," (FlauBERT model)"),OFe.forEach(t),xoo=i(C),Vh=n(C,"LI",{});var XFe=s(Vh);IJ=n(XFe,"STRONG",{});var DRr=s(IJ);koo=r(DRr,"fnet"),DRr.forEach(t),Roo=r(XFe," \u2014 "),Gk=n(XFe,"A",{href:!0});var qRr=s(Gk);Soo=r(qRr,"FNetModel"),qRr.forEach(t),Poo=r(XFe," (FNet model)"),XFe.forEach(t),$oo=i(C),Wh=n(C,"LI",{});var zFe=s(Wh);jJ=n(zFe,"STRONG",{});var GRr=s(jJ);Ioo=r(GRr,"fsmt"),GRr.forEach(t),joo=r(zFe," \u2014 "),Ok=n(zFe,"A",{href:!0});var ORr=s(Ok);Noo=r(ORr,"FSMTModel"),ORr.forEach(t),Doo=r(zFe," (FairSeq Machine-Translation model)"),zFe.forEach(t),qoo=i(C),Rs=n(C,"LI",{});var qL=s(Rs);NJ=n(qL,"STRONG",{});var XRr=s(NJ);Goo=r(XRr,"funnel"),XRr.forEach(t),Ooo=r(qL," \u2014 "),Xk=n(qL,"A",{href:!0});var zRr=s(Xk);Xoo=r(zRr,"FunnelModel"),zRr.forEach(t),zoo=r(qL," or "),zk=n(qL,"A",{href:!0});var VRr=s(zk);Voo=r(VRr,"FunnelBaseModel"),VRr.forEach(t),Woo=r(qL," (Funnel Transformer model)"),qL.forEach(t),Qoo=i(C),Qh=n(C,"LI",{});var VFe=s(Qh);DJ=n(VFe,"STRONG",{});var WRr=s(DJ);Hoo=r(WRr,"gpt2"),WRr.forEach(t),Uoo=r(VFe," \u2014 "),Vk=n(VFe,"A",{href:!0});var QRr=s(Vk);Joo=r(QRr,"GPT2Model"),QRr.forEach(t),Yoo=r(VFe," (OpenAI GPT-2 model)"),VFe.forEach(t),Koo=i(C),Hh=n(C,"LI",{});var WFe=s(Hh);qJ=n(WFe,"STRONG",{});var HRr=s(qJ);Zoo=r(HRr,"gpt_neo"),HRr.forEach(t),ero=r(WFe," \u2014 "),Wk=n(WFe,"A",{href:!0});var URr=s(Wk);oro=r(URr,"GPTNeoModel"),URr.forEach(t),rro=r(WFe," (GPT Neo model)"),WFe.forEach(t),tro=i(C),Uh=n(C,"LI",{});var QFe=s(Uh);GJ=n(QFe,"STRONG",{});var JRr=s(GJ);aro=r(JRr,"gptj"),JRr.forEach(t),nro=r(QFe," \u2014 "),Qk=n(QFe,"A",{href:!0});var YRr=s(Qk);sro=r(YRr,"GPTJModel"),YRr.forEach(t),lro=r(QFe," (GPT-J model)"),QFe.forEach(t),iro=i(C),Jh=n(C,"LI",{});var HFe=s(Jh);OJ=n(HFe,"STRONG",{});var KRr=s(OJ);dro=r(KRr,"hubert"),KRr.forEach(t),cro=r(HFe," \u2014 "),Hk=n(HFe,"A",{href:!0});var ZRr=s(Hk);fro=r(ZRr,"HubertModel"),ZRr.forEach(t),mro=r(HFe," (Hubert model)"),HFe.forEach(t),gro=i(C),Yh=n(C,"LI",{});var UFe=s(Yh);XJ=n(UFe,"STRONG",{});var eSr=s(XJ);hro=r(eSr,"ibert"),eSr.forEach(t),pro=r(UFe," \u2014 "),Uk=n(UFe,"A",{href:!0});var oSr=s(Uk);_ro=r(oSr,"IBertModel"),oSr.forEach(t),uro=r(UFe," (I-BERT model)"),UFe.forEach(t),bro=i(C),Kh=n(C,"LI",{});var JFe=s(Kh);zJ=n(JFe,"STRONG",{});var rSr=s(zJ);vro=r(rSr,"imagegpt"),rSr.forEach(t),Tro=r(JFe," \u2014 "),Jk=n(JFe,"A",{href:!0});var tSr=s(Jk);Fro=r(tSr,"ImageGPTModel"),tSr.forEach(t),Cro=r(JFe," (ImageGPT model)"),JFe.forEach(t),Mro=i(C),Zh=n(C,"LI",{});var YFe=s(Zh);VJ=n(YFe,"STRONG",{});var aSr=s(VJ);Ero=r(aSr,"layoutlm"),aSr.forEach(t),yro=r(YFe," \u2014 "),Yk=n(YFe,"A",{href:!0});var nSr=s(Yk);wro=r(nSr,"LayoutLMModel"),nSr.forEach(t),Aro=r(YFe," (LayoutLM model)"),YFe.forEach(t),Lro=i(C),ep=n(C,"LI",{});var KFe=s(ep);WJ=n(KFe,"STRONG",{});var sSr=s(WJ);Bro=r(sSr,"layoutlmv2"),sSr.forEach(t),xro=r(KFe," \u2014 "),Kk=n(KFe,"A",{href:!0});var lSr=s(Kk);kro=r(lSr,"LayoutLMv2Model"),lSr.forEach(t),Rro=r(KFe," (LayoutLMv2 model)"),KFe.forEach(t),Sro=i(C),op=n(C,"LI",{});var ZFe=s(op);QJ=n(ZFe,"STRONG",{});var iSr=s(QJ);Pro=r(iSr,"led"),iSr.forEach(t),$ro=r(ZFe," \u2014 "),Zk=n(ZFe,"A",{href:!0});var dSr=s(Zk);Iro=r(dSr,"LEDModel"),dSr.forEach(t),jro=r(ZFe," (LED model)"),ZFe.forEach(t),Nro=i(C),rp=n(C,"LI",{});var e9e=s(rp);HJ=n(e9e,"STRONG",{});var cSr=s(HJ);Dro=r(cSr,"longformer"),cSr.forEach(t),qro=r(e9e," \u2014 "),eR=n(e9e,"A",{href:!0});var fSr=s(eR);Gro=r(fSr,"LongformerModel"),fSr.forEach(t),Oro=r(e9e," (Longformer model)"),e9e.forEach(t),Xro=i(C),tp=n(C,"LI",{});var o9e=s(tp);UJ=n(o9e,"STRONG",{});var mSr=s(UJ);zro=r(mSr,"luke"),mSr.forEach(t),Vro=r(o9e," \u2014 "),oR=n(o9e,"A",{href:!0});var gSr=s(oR);Wro=r(gSr,"LukeModel"),gSr.forEach(t),Qro=r(o9e," (LUKE model)"),o9e.forEach(t),Hro=i(C),ap=n(C,"LI",{});var r9e=s(ap);JJ=n(r9e,"STRONG",{});var hSr=s(JJ);Uro=r(hSr,"lxmert"),hSr.forEach(t),Jro=r(r9e," \u2014 "),rR=n(r9e,"A",{href:!0});var pSr=s(rR);Yro=r(pSr,"LxmertModel"),pSr.forEach(t),Kro=r(r9e," (LXMERT model)"),r9e.forEach(t),Zro=i(C),np=n(C,"LI",{});var t9e=s(np);YJ=n(t9e,"STRONG",{});var _Sr=s(YJ);eto=r(_Sr,"m2m_100"),_Sr.forEach(t),oto=r(t9e," \u2014 "),tR=n(t9e,"A",{href:!0});var uSr=s(tR);rto=r(uSr,"M2M100Model"),uSr.forEach(t),tto=r(t9e," (M2M100 model)"),t9e.forEach(t),ato=i(C),sp=n(C,"LI",{});var a9e=s(sp);KJ=n(a9e,"STRONG",{});var bSr=s(KJ);nto=r(bSr,"marian"),bSr.forEach(t),sto=r(a9e," \u2014 "),aR=n(a9e,"A",{href:!0});var vSr=s(aR);lto=r(vSr,"MarianModel"),vSr.forEach(t),ito=r(a9e," (Marian model)"),a9e.forEach(t),dto=i(C),lp=n(C,"LI",{});var n9e=s(lp);ZJ=n(n9e,"STRONG",{});var TSr=s(ZJ);cto=r(TSr,"mbart"),TSr.forEach(t),fto=r(n9e," \u2014 "),nR=n(n9e,"A",{href:!0});var FSr=s(nR);mto=r(FSr,"MBartModel"),FSr.forEach(t),gto=r(n9e," (mBART model)"),n9e.forEach(t),hto=i(C),ip=n(C,"LI",{});var s9e=s(ip);eY=n(s9e,"STRONG",{});var CSr=s(eY);pto=r(CSr,"megatron-bert"),CSr.forEach(t),_to=r(s9e," \u2014 "),sR=n(s9e,"A",{href:!0});var MSr=s(sR);uto=r(MSr,"MegatronBertModel"),MSr.forEach(t),bto=r(s9e," (MegatronBert model)"),s9e.forEach(t),vto=i(C),dp=n(C,"LI",{});var l9e=s(dp);oY=n(l9e,"STRONG",{});var ESr=s(oY);Tto=r(ESr,"mobilebert"),ESr.forEach(t),Fto=r(l9e," \u2014 "),lR=n(l9e,"A",{href:!0});var ySr=s(lR);Cto=r(ySr,"MobileBertModel"),ySr.forEach(t),Mto=r(l9e," (MobileBERT model)"),l9e.forEach(t),Eto=i(C),cp=n(C,"LI",{});var i9e=s(cp);rY=n(i9e,"STRONG",{});var wSr=s(rY);yto=r(wSr,"mpnet"),wSr.forEach(t),wto=r(i9e," \u2014 "),iR=n(i9e,"A",{href:!0});var ASr=s(iR);Ato=r(ASr,"MPNetModel"),ASr.forEach(t),Lto=r(i9e," (MPNet model)"),i9e.forEach(t),Bto=i(C),fp=n(C,"LI",{});var d9e=s(fp);tY=n(d9e,"STRONG",{});var LSr=s(tY);xto=r(LSr,"mt5"),LSr.forEach(t),kto=r(d9e," \u2014 "),dR=n(d9e,"A",{href:!0});var BSr=s(dR);Rto=r(BSr,"MT5Model"),BSr.forEach(t),Sto=r(d9e," (mT5 model)"),d9e.forEach(t),Pto=i(C),mp=n(C,"LI",{});var c9e=s(mp);aY=n(c9e,"STRONG",{});var xSr=s(aY);$to=r(xSr,"nystromformer"),xSr.forEach(t),Ito=r(c9e," \u2014 "),cR=n(c9e,"A",{href:!0});var kSr=s(cR);jto=r(kSr,"NystromformerModel"),kSr.forEach(t),Nto=r(c9e," (Nystromformer model)"),c9e.forEach(t),Dto=i(C),gp=n(C,"LI",{});var f9e=s(gp);nY=n(f9e,"STRONG",{});var RSr=s(nY);qto=r(RSr,"openai-gpt"),RSr.forEach(t),Gto=r(f9e," \u2014 "),fR=n(f9e,"A",{href:!0});var SSr=s(fR);Oto=r(SSr,"OpenAIGPTModel"),SSr.forEach(t),Xto=r(f9e," (OpenAI GPT model)"),f9e.forEach(t),zto=i(C),hp=n(C,"LI",{});var m9e=s(hp);sY=n(m9e,"STRONG",{});var PSr=s(sY);Vto=r(PSr,"pegasus"),PSr.forEach(t),Wto=r(m9e," \u2014 "),mR=n(m9e,"A",{href:!0});var $Sr=s(mR);Qto=r($Sr,"PegasusModel"),$Sr.forEach(t),Hto=r(m9e," (Pegasus model)"),m9e.forEach(t),Uto=i(C),pp=n(C,"LI",{});var g9e=s(pp);lY=n(g9e,"STRONG",{});var ISr=s(lY);Jto=r(ISr,"perceiver"),ISr.forEach(t),Yto=r(g9e," \u2014 "),gR=n(g9e,"A",{href:!0});var jSr=s(gR);Kto=r(jSr,"PerceiverModel"),jSr.forEach(t),Zto=r(g9e," (Perceiver model)"),g9e.forEach(t),eao=i(C),_p=n(C,"LI",{});var h9e=s(_p);iY=n(h9e,"STRONG",{});var NSr=s(iY);oao=r(NSr,"plbart"),NSr.forEach(t),rao=r(h9e," \u2014 "),hR=n(h9e,"A",{href:!0});var DSr=s(hR);tao=r(DSr,"PLBartModel"),DSr.forEach(t),aao=r(h9e," (PLBart model)"),h9e.forEach(t),nao=i(C),up=n(C,"LI",{});var p9e=s(up);dY=n(p9e,"STRONG",{});var qSr=s(dY);sao=r(qSr,"poolformer"),qSr.forEach(t),lao=r(p9e," \u2014 "),pR=n(p9e,"A",{href:!0});var GSr=s(pR);iao=r(GSr,"PoolFormerModel"),GSr.forEach(t),dao=r(p9e," (PoolFormer model)"),p9e.forEach(t),cao=i(C),bp=n(C,"LI",{});var _9e=s(bp);cY=n(_9e,"STRONG",{});var OSr=s(cY);fao=r(OSr,"prophetnet"),OSr.forEach(t),mao=r(_9e," \u2014 "),_R=n(_9e,"A",{href:!0});var XSr=s(_R);gao=r(XSr,"ProphetNetModel"),XSr.forEach(t),hao=r(_9e," (ProphetNet model)"),_9e.forEach(t),pao=i(C),vp=n(C,"LI",{});var u9e=s(vp);fY=n(u9e,"STRONG",{});var zSr=s(fY);_ao=r(zSr,"qdqbert"),zSr.forEach(t),uao=r(u9e," \u2014 "),uR=n(u9e,"A",{href:!0});var VSr=s(uR);bao=r(VSr,"QDQBertModel"),VSr.forEach(t),vao=r(u9e," (QDQBert model)"),u9e.forEach(t),Tao=i(C),Tp=n(C,"LI",{});var b9e=s(Tp);mY=n(b9e,"STRONG",{});var WSr=s(mY);Fao=r(WSr,"reformer"),WSr.forEach(t),Cao=r(b9e," \u2014 "),bR=n(b9e,"A",{href:!0});var QSr=s(bR);Mao=r(QSr,"ReformerModel"),QSr.forEach(t),Eao=r(b9e," (Reformer model)"),b9e.forEach(t),yao=i(C),Fp=n(C,"LI",{});var v9e=s(Fp);gY=n(v9e,"STRONG",{});var HSr=s(gY);wao=r(HSr,"rembert"),HSr.forEach(t),Aao=r(v9e," \u2014 "),vR=n(v9e,"A",{href:!0});var USr=s(vR);Lao=r(USr,"RemBertModel"),USr.forEach(t),Bao=r(v9e," (RemBERT model)"),v9e.forEach(t),xao=i(C),Cp=n(C,"LI",{});var T9e=s(Cp);hY=n(T9e,"STRONG",{});var JSr=s(hY);kao=r(JSr,"retribert"),JSr.forEach(t),Rao=r(T9e," \u2014 "),TR=n(T9e,"A",{href:!0});var YSr=s(TR);Sao=r(YSr,"RetriBertModel"),YSr.forEach(t),Pao=r(T9e," (RetriBERT model)"),T9e.forEach(t),$ao=i(C),Mp=n(C,"LI",{});var F9e=s(Mp);pY=n(F9e,"STRONG",{});var KSr=s(pY);Iao=r(KSr,"roberta"),KSr.forEach(t),jao=r(F9e," \u2014 "),FR=n(F9e,"A",{href:!0});var ZSr=s(FR);Nao=r(ZSr,"RobertaModel"),ZSr.forEach(t),Dao=r(F9e," (RoBERTa model)"),F9e.forEach(t),qao=i(C),Ep=n(C,"LI",{});var C9e=s(Ep);_Y=n(C9e,"STRONG",{});var ePr=s(_Y);Gao=r(ePr,"roformer"),ePr.forEach(t),Oao=r(C9e," \u2014 "),CR=n(C9e,"A",{href:!0});var oPr=s(CR);Xao=r(oPr,"RoFormerModel"),oPr.forEach(t),zao=r(C9e," (RoFormer model)"),C9e.forEach(t),Vao=i(C),yp=n(C,"LI",{});var M9e=s(yp);uY=n(M9e,"STRONG",{});var rPr=s(uY);Wao=r(rPr,"segformer"),rPr.forEach(t),Qao=r(M9e," \u2014 "),MR=n(M9e,"A",{href:!0});var tPr=s(MR);Hao=r(tPr,"SegformerModel"),tPr.forEach(t),Uao=r(M9e," (SegFormer model)"),M9e.forEach(t),Jao=i(C),wp=n(C,"LI",{});var E9e=s(wp);bY=n(E9e,"STRONG",{});var aPr=s(bY);Yao=r(aPr,"sew"),aPr.forEach(t),Kao=r(E9e," \u2014 "),ER=n(E9e,"A",{href:!0});var nPr=s(ER);Zao=r(nPr,"SEWModel"),nPr.forEach(t),eno=r(E9e," (SEW model)"),E9e.forEach(t),ono=i(C),Ap=n(C,"LI",{});var y9e=s(Ap);vY=n(y9e,"STRONG",{});var sPr=s(vY);rno=r(sPr,"sew-d"),sPr.forEach(t),tno=r(y9e," \u2014 "),yR=n(y9e,"A",{href:!0});var lPr=s(yR);ano=r(lPr,"SEWDModel"),lPr.forEach(t),nno=r(y9e," (SEW-D model)"),y9e.forEach(t),sno=i(C),Lp=n(C,"LI",{});var w9e=s(Lp);TY=n(w9e,"STRONG",{});var iPr=s(TY);lno=r(iPr,"speech_to_text"),iPr.forEach(t),ino=r(w9e," \u2014 "),wR=n(w9e,"A",{href:!0});var dPr=s(wR);dno=r(dPr,"Speech2TextModel"),dPr.forEach(t),cno=r(w9e," (Speech2Text model)"),w9e.forEach(t),fno=i(C),Bp=n(C,"LI",{});var A9e=s(Bp);FY=n(A9e,"STRONG",{});var cPr=s(FY);mno=r(cPr,"splinter"),cPr.forEach(t),gno=r(A9e," \u2014 "),AR=n(A9e,"A",{href:!0});var fPr=s(AR);hno=r(fPr,"SplinterModel"),fPr.forEach(t),pno=r(A9e," (Splinter model)"),A9e.forEach(t),_no=i(C),xp=n(C,"LI",{});var L9e=s(xp);CY=n(L9e,"STRONG",{});var mPr=s(CY);uno=r(mPr,"squeezebert"),mPr.forEach(t),bno=r(L9e," \u2014 "),LR=n(L9e,"A",{href:!0});var gPr=s(LR);vno=r(gPr,"SqueezeBertModel"),gPr.forEach(t),Tno=r(L9e," (SqueezeBERT model)"),L9e.forEach(t),Fno=i(C),kp=n(C,"LI",{});var B9e=s(kp);MY=n(B9e,"STRONG",{});var hPr=s(MY);Cno=r(hPr,"swin"),hPr.forEach(t),Mno=r(B9e," \u2014 "),BR=n(B9e,"A",{href:!0});var pPr=s(BR);Eno=r(pPr,"SwinModel"),pPr.forEach(t),yno=r(B9e," (Swin model)"),B9e.forEach(t),wno=i(C),Rp=n(C,"LI",{});var x9e=s(Rp);EY=n(x9e,"STRONG",{});var _Pr=s(EY);Ano=r(_Pr,"t5"),_Pr.forEach(t),Lno=r(x9e," \u2014 "),xR=n(x9e,"A",{href:!0});var uPr=s(xR);Bno=r(uPr,"T5Model"),uPr.forEach(t),xno=r(x9e," (T5 model)"),x9e.forEach(t),kno=i(C),Sp=n(C,"LI",{});var k9e=s(Sp);yY=n(k9e,"STRONG",{});var bPr=s(yY);Rno=r(bPr,"tapas"),bPr.forEach(t),Sno=r(k9e," \u2014 "),kR=n(k9e,"A",{href:!0});var vPr=s(kR);Pno=r(vPr,"TapasModel"),vPr.forEach(t),$no=r(k9e," (TAPAS model)"),k9e.forEach(t),Ino=i(C),Pp=n(C,"LI",{});var R9e=s(Pp);wY=n(R9e,"STRONG",{});var TPr=s(wY);jno=r(TPr,"transfo-xl"),TPr.forEach(t),Nno=r(R9e," \u2014 "),RR=n(R9e,"A",{href:!0});var FPr=s(RR);Dno=r(FPr,"TransfoXLModel"),FPr.forEach(t),qno=r(R9e," (Transformer-XL model)"),R9e.forEach(t),Gno=i(C),$p=n(C,"LI",{});var S9e=s($p);AY=n(S9e,"STRONG",{});var CPr=s(AY);Ono=r(CPr,"unispeech"),CPr.forEach(t),Xno=r(S9e," \u2014 "),SR=n(S9e,"A",{href:!0});var MPr=s(SR);zno=r(MPr,"UniSpeechModel"),MPr.forEach(t),Vno=r(S9e," (UniSpeech model)"),S9e.forEach(t),Wno=i(C),Ip=n(C,"LI",{});var P9e=s(Ip);LY=n(P9e,"STRONG",{});var EPr=s(LY);Qno=r(EPr,"unispeech-sat"),EPr.forEach(t),Hno=r(P9e," \u2014 "),PR=n(P9e,"A",{href:!0});var yPr=s(PR);Uno=r(yPr,"UniSpeechSatModel"),yPr.forEach(t),Jno=r(P9e," (UniSpeechSat model)"),P9e.forEach(t),Yno=i(C),jp=n(C,"LI",{});var $9e=s(jp);BY=n($9e,"STRONG",{});var wPr=s(BY);Kno=r(wPr,"vilt"),wPr.forEach(t),Zno=r($9e," \u2014 "),$R=n($9e,"A",{href:!0});var APr=s($R);eso=r(APr,"ViltModel"),APr.forEach(t),oso=r($9e," (ViLT model)"),$9e.forEach(t),rso=i(C),Np=n(C,"LI",{});var I9e=s(Np);xY=n(I9e,"STRONG",{});var LPr=s(xY);tso=r(LPr,"vision-text-dual-encoder"),LPr.forEach(t),aso=r(I9e," \u2014 "),IR=n(I9e,"A",{href:!0});var BPr=s(IR);nso=r(BPr,"VisionTextDualEncoderModel"),BPr.forEach(t),sso=r(I9e," (VisionTextDualEncoder model)"),I9e.forEach(t),lso=i(C),Dp=n(C,"LI",{});var j9e=s(Dp);kY=n(j9e,"STRONG",{});var xPr=s(kY);iso=r(xPr,"visual_bert"),xPr.forEach(t),dso=r(j9e," \u2014 "),jR=n(j9e,"A",{href:!0});var kPr=s(jR);cso=r(kPr,"VisualBertModel"),kPr.forEach(t),fso=r(j9e," (VisualBert model)"),j9e.forEach(t),mso=i(C),qp=n(C,"LI",{});var N9e=s(qp);RY=n(N9e,"STRONG",{});var RPr=s(RY);gso=r(RPr,"vit"),RPr.forEach(t),hso=r(N9e," \u2014 "),NR=n(N9e,"A",{href:!0});var SPr=s(NR);pso=r(SPr,"ViTModel"),SPr.forEach(t),_so=r(N9e," (ViT model)"),N9e.forEach(t),uso=i(C),Gp=n(C,"LI",{});var D9e=s(Gp);SY=n(D9e,"STRONG",{});var PPr=s(SY);bso=r(PPr,"vit_mae"),PPr.forEach(t),vso=r(D9e," \u2014 "),DR=n(D9e,"A",{href:!0});var $Pr=s(DR);Tso=r($Pr,"ViTMAEModel"),$Pr.forEach(t),Fso=r(D9e," (ViTMAE model)"),D9e.forEach(t),Cso=i(C),Op=n(C,"LI",{});var q9e=s(Op);PY=n(q9e,"STRONG",{});var IPr=s(PY);Mso=r(IPr,"wav2vec2"),IPr.forEach(t),Eso=r(q9e," \u2014 "),qR=n(q9e,"A",{href:!0});var jPr=s(qR);yso=r(jPr,"Wav2Vec2Model"),jPr.forEach(t),wso=r(q9e," (Wav2Vec2 model)"),q9e.forEach(t),Aso=i(C),Xp=n(C,"LI",{});var G9e=s(Xp);$Y=n(G9e,"STRONG",{});var NPr=s($Y);Lso=r(NPr,"wavlm"),NPr.forEach(t),Bso=r(G9e," \u2014 "),GR=n(G9e,"A",{href:!0});var DPr=s(GR);xso=r(DPr,"WavLMModel"),DPr.forEach(t),kso=r(G9e," (WavLM model)"),G9e.forEach(t),Rso=i(C),zp=n(C,"LI",{});var O9e=s(zp);IY=n(O9e,"STRONG",{});var qPr=s(IY);Sso=r(qPr,"xglm"),qPr.forEach(t),Pso=r(O9e," \u2014 "),OR=n(O9e,"A",{href:!0});var GPr=s(OR);$so=r(GPr,"XGLMModel"),GPr.forEach(t),Iso=r(O9e," (XGLM model)"),O9e.forEach(t),jso=i(C),Vp=n(C,"LI",{});var X9e=s(Vp);jY=n(X9e,"STRONG",{});var OPr=s(jY);Nso=r(OPr,"xlm"),OPr.forEach(t),Dso=r(X9e," \u2014 "),XR=n(X9e,"A",{href:!0});var XPr=s(XR);qso=r(XPr,"XLMModel"),XPr.forEach(t),Gso=r(X9e," (XLM model)"),X9e.forEach(t),Oso=i(C),Wp=n(C,"LI",{});var z9e=s(Wp);NY=n(z9e,"STRONG",{});var zPr=s(NY);Xso=r(zPr,"xlm-prophetnet"),zPr.forEach(t),zso=r(z9e," \u2014 "),zR=n(z9e,"A",{href:!0});var VPr=s(zR);Vso=r(VPr,"XLMProphetNetModel"),VPr.forEach(t),Wso=r(z9e," (XLMProphetNet model)"),z9e.forEach(t),Qso=i(C),Qp=n(C,"LI",{});var V9e=s(Qp);DY=n(V9e,"STRONG",{});var WPr=s(DY);Hso=r(WPr,"xlm-roberta"),WPr.forEach(t),Uso=r(V9e," \u2014 "),VR=n(V9e,"A",{href:!0});var QPr=s(VR);Jso=r(QPr,"XLMRobertaModel"),QPr.forEach(t),Yso=r(V9e," (XLM-RoBERTa model)"),V9e.forEach(t),Kso=i(C),Hp=n(C,"LI",{});var W9e=s(Hp);qY=n(W9e,"STRONG",{});var HPr=s(qY);Zso=r(HPr,"xlm-roberta-xl"),HPr.forEach(t),elo=r(W9e," \u2014 "),WR=n(W9e,"A",{href:!0});var UPr=s(WR);olo=r(UPr,"XLMRobertaXLModel"),UPr.forEach(t),rlo=r(W9e," (XLM-RoBERTa-XL model)"),W9e.forEach(t),tlo=i(C),Up=n(C,"LI",{});var Q9e=s(Up);GY=n(Q9e,"STRONG",{});var JPr=s(GY);alo=r(JPr,"xlnet"),JPr.forEach(t),nlo=r(Q9e," \u2014 "),QR=n(Q9e,"A",{href:!0});var YPr=s(QR);slo=r(YPr,"XLNetModel"),YPr.forEach(t),llo=r(Q9e," (XLNet model)"),Q9e.forEach(t),ilo=i(C),Jp=n(C,"LI",{});var H9e=s(Jp);OY=n(H9e,"STRONG",{});var KPr=s(OY);dlo=r(KPr,"yoso"),KPr.forEach(t),clo=r(H9e," \u2014 "),HR=n(H9e,"A",{href:!0});var ZPr=s(HR);flo=r(ZPr,"YosoModel"),ZPr.forEach(t),mlo=r(H9e," (YOSO model)"),H9e.forEach(t),C.forEach(t),glo=i(St),Yp=n(St,"P",{});var U9e=s(Yp);hlo=r(U9e,"The model is set in evaluation mode by default using "),XY=n(U9e,"CODE",{});var e$r=s(XY);plo=r(e$r,"model.eval()"),e$r.forEach(t),_lo=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zY=n(U9e,"CODE",{});var o$r=s(zY);ulo=r(o$r,"model.train()"),o$r.forEach(t),U9e.forEach(t),blo=i(St),VY=n(St,"P",{});var r$r=s(VY);vlo=r(r$r,"Examples:"),r$r.forEach(t),Tlo=i(St),m(XE.$$.fragment,St),St.forEach(t),Ds.forEach(t),A7e=i(d),zi=n(d,"H2",{class:!0});var PBe=s(zi);Kp=n(PBe,"A",{id:!0,class:!0,href:!0});var t$r=s(Kp);WY=n(t$r,"SPAN",{});var a$r=s(WY);m(zE.$$.fragment,a$r),a$r.forEach(t),t$r.forEach(t),Flo=i(PBe),QY=n(PBe,"SPAN",{});var n$r=s(QY);Clo=r(n$r,"AutoModelForPreTraining"),n$r.forEach(t),PBe.forEach(t),L7e=i(d),Wo=n(d,"DIV",{class:!0});var Gs=s(Wo);m(VE.$$.fragment,Gs),Mlo=i(Gs),Vi=n(Gs,"P",{});var oz=s(Vi);Elo=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),HY=n(oz,"CODE",{});var s$r=s(HY);ylo=r(s$r,"from_pretrained()"),s$r.forEach(t),wlo=r(oz,"class method or the "),UY=n(oz,"CODE",{});var l$r=s(UY);Alo=r(l$r,"from_config()"),l$r.forEach(t),Llo=r(oz,`class
method.`),oz.forEach(t),Blo=i(Gs),WE=n(Gs,"P",{});var $Be=s(WE);xlo=r($Be,"This class cannot be instantiated directly using "),JY=n($Be,"CODE",{});var i$r=s(JY);klo=r(i$r,"__init__()"),i$r.forEach(t),Rlo=r($Be," (throws an error)."),$Be.forEach(t),Slo=i(Gs),Dr=n(Gs,"DIV",{class:!0});var Os=s(Dr);m(QE.$$.fragment,Os),Plo=i(Os),YY=n(Os,"P",{});var d$r=s(YY);$lo=r(d$r,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d$r.forEach(t),Ilo=i(Os),Wi=n(Os,"P",{});var rz=s(Wi);jlo=r(rz,`Note:
Loading a model from its configuration file does `),KY=n(rz,"STRONG",{});var c$r=s(KY);Nlo=r(c$r,"not"),c$r.forEach(t),Dlo=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(rz,"CODE",{});var f$r=s(ZY);qlo=r(f$r,"from_pretrained()"),f$r.forEach(t),Glo=r(rz,"to load the model weights."),rz.forEach(t),Olo=i(Os),eK=n(Os,"P",{});var m$r=s(eK);Xlo=r(m$r,"Examples:"),m$r.forEach(t),zlo=i(Os),m(HE.$$.fragment,Os),Os.forEach(t),Vlo=i(Gs),ke=n(Gs,"DIV",{class:!0});var Pt=s(ke);m(UE.$$.fragment,Pt),Wlo=i(Pt),oK=n(Pt,"P",{});var g$r=s(oK);Qlo=r(g$r,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),g$r.forEach(t),Hlo=i(Pt),qa=n(Pt,"P",{});var cM=s(qa);Ulo=r(cM,"The model class to instantiate is selected based on the "),rK=n(cM,"CODE",{});var h$r=s(rK);Jlo=r(h$r,"model_type"),h$r.forEach(t),Ylo=r(cM,` property of the config object (either
passed as an argument or loaded from `),tK=n(cM,"CODE",{});var p$r=s(tK);Klo=r(p$r,"pretrained_model_name_or_path"),p$r.forEach(t),Zlo=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aK=n(cM,"CODE",{});var _$r=s(aK);eio=r(_$r,"pretrained_model_name_or_path"),_$r.forEach(t),oio=r(cM,":"),cM.forEach(t),rio=i(Pt),k=n(Pt,"UL",{});var S=s(k);Zp=n(S,"LI",{});var J9e=s(Zp);nK=n(J9e,"STRONG",{});var u$r=s(nK);tio=r(u$r,"albert"),u$r.forEach(t),aio=r(J9e," \u2014 "),UR=n(J9e,"A",{href:!0});var b$r=s(UR);nio=r(b$r,"AlbertForPreTraining"),b$r.forEach(t),sio=r(J9e," (ALBERT model)"),J9e.forEach(t),lio=i(S),e_=n(S,"LI",{});var Y9e=s(e_);sK=n(Y9e,"STRONG",{});var v$r=s(sK);iio=r(v$r,"bart"),v$r.forEach(t),dio=r(Y9e," \u2014 "),JR=n(Y9e,"A",{href:!0});var T$r=s(JR);cio=r(T$r,"BartForConditionalGeneration"),T$r.forEach(t),fio=r(Y9e," (BART model)"),Y9e.forEach(t),mio=i(S),o_=n(S,"LI",{});var K9e=s(o_);lK=n(K9e,"STRONG",{});var F$r=s(lK);gio=r(F$r,"bert"),F$r.forEach(t),hio=r(K9e," \u2014 "),YR=n(K9e,"A",{href:!0});var C$r=s(YR);pio=r(C$r,"BertForPreTraining"),C$r.forEach(t),_io=r(K9e," (BERT model)"),K9e.forEach(t),uio=i(S),r_=n(S,"LI",{});var Z9e=s(r_);iK=n(Z9e,"STRONG",{});var M$r=s(iK);bio=r(M$r,"big_bird"),M$r.forEach(t),vio=r(Z9e," \u2014 "),KR=n(Z9e,"A",{href:!0});var E$r=s(KR);Tio=r(E$r,"BigBirdForPreTraining"),E$r.forEach(t),Fio=r(Z9e," (BigBird model)"),Z9e.forEach(t),Cio=i(S),t_=n(S,"LI",{});var eCe=s(t_);dK=n(eCe,"STRONG",{});var y$r=s(dK);Mio=r(y$r,"camembert"),y$r.forEach(t),Eio=r(eCe," \u2014 "),ZR=n(eCe,"A",{href:!0});var w$r=s(ZR);yio=r(w$r,"CamembertForMaskedLM"),w$r.forEach(t),wio=r(eCe," (CamemBERT model)"),eCe.forEach(t),Aio=i(S),a_=n(S,"LI",{});var oCe=s(a_);cK=n(oCe,"STRONG",{});var A$r=s(cK);Lio=r(A$r,"ctrl"),A$r.forEach(t),Bio=r(oCe," \u2014 "),eS=n(oCe,"A",{href:!0});var L$r=s(eS);xio=r(L$r,"CTRLLMHeadModel"),L$r.forEach(t),kio=r(oCe," (CTRL model)"),oCe.forEach(t),Rio=i(S),n_=n(S,"LI",{});var rCe=s(n_);fK=n(rCe,"STRONG",{});var B$r=s(fK);Sio=r(B$r,"deberta"),B$r.forEach(t),Pio=r(rCe," \u2014 "),oS=n(rCe,"A",{href:!0});var x$r=s(oS);$io=r(x$r,"DebertaForMaskedLM"),x$r.forEach(t),Iio=r(rCe," (DeBERTa model)"),rCe.forEach(t),jio=i(S),s_=n(S,"LI",{});var tCe=s(s_);mK=n(tCe,"STRONG",{});var k$r=s(mK);Nio=r(k$r,"deberta-v2"),k$r.forEach(t),Dio=r(tCe," \u2014 "),rS=n(tCe,"A",{href:!0});var R$r=s(rS);qio=r(R$r,"DebertaV2ForMaskedLM"),R$r.forEach(t),Gio=r(tCe," (DeBERTa-v2 model)"),tCe.forEach(t),Oio=i(S),l_=n(S,"LI",{});var aCe=s(l_);gK=n(aCe,"STRONG",{});var S$r=s(gK);Xio=r(S$r,"distilbert"),S$r.forEach(t),zio=r(aCe," \u2014 "),tS=n(aCe,"A",{href:!0});var P$r=s(tS);Vio=r(P$r,"DistilBertForMaskedLM"),P$r.forEach(t),Wio=r(aCe," (DistilBERT model)"),aCe.forEach(t),Qio=i(S),i_=n(S,"LI",{});var nCe=s(i_);hK=n(nCe,"STRONG",{});var $$r=s(hK);Hio=r($$r,"electra"),$$r.forEach(t),Uio=r(nCe," \u2014 "),aS=n(nCe,"A",{href:!0});var I$r=s(aS);Jio=r(I$r,"ElectraForPreTraining"),I$r.forEach(t),Yio=r(nCe," (ELECTRA model)"),nCe.forEach(t),Kio=i(S),d_=n(S,"LI",{});var sCe=s(d_);pK=n(sCe,"STRONG",{});var j$r=s(pK);Zio=r(j$r,"flaubert"),j$r.forEach(t),edo=r(sCe," \u2014 "),nS=n(sCe,"A",{href:!0});var N$r=s(nS);odo=r(N$r,"FlaubertWithLMHeadModel"),N$r.forEach(t),rdo=r(sCe," (FlauBERT model)"),sCe.forEach(t),tdo=i(S),c_=n(S,"LI",{});var lCe=s(c_);_K=n(lCe,"STRONG",{});var D$r=s(_K);ado=r(D$r,"fnet"),D$r.forEach(t),ndo=r(lCe," \u2014 "),sS=n(lCe,"A",{href:!0});var q$r=s(sS);sdo=r(q$r,"FNetForPreTraining"),q$r.forEach(t),ldo=r(lCe," (FNet model)"),lCe.forEach(t),ido=i(S),f_=n(S,"LI",{});var iCe=s(f_);uK=n(iCe,"STRONG",{});var G$r=s(uK);ddo=r(G$r,"fsmt"),G$r.forEach(t),cdo=r(iCe," \u2014 "),lS=n(iCe,"A",{href:!0});var O$r=s(lS);fdo=r(O$r,"FSMTForConditionalGeneration"),O$r.forEach(t),mdo=r(iCe," (FairSeq Machine-Translation model)"),iCe.forEach(t),gdo=i(S),m_=n(S,"LI",{});var dCe=s(m_);bK=n(dCe,"STRONG",{});var X$r=s(bK);hdo=r(X$r,"funnel"),X$r.forEach(t),pdo=r(dCe," \u2014 "),iS=n(dCe,"A",{href:!0});var z$r=s(iS);_do=r(z$r,"FunnelForPreTraining"),z$r.forEach(t),udo=r(dCe," (Funnel Transformer model)"),dCe.forEach(t),bdo=i(S),g_=n(S,"LI",{});var cCe=s(g_);vK=n(cCe,"STRONG",{});var V$r=s(vK);vdo=r(V$r,"gpt2"),V$r.forEach(t),Tdo=r(cCe," \u2014 "),dS=n(cCe,"A",{href:!0});var W$r=s(dS);Fdo=r(W$r,"GPT2LMHeadModel"),W$r.forEach(t),Cdo=r(cCe," (OpenAI GPT-2 model)"),cCe.forEach(t),Mdo=i(S),h_=n(S,"LI",{});var fCe=s(h_);TK=n(fCe,"STRONG",{});var Q$r=s(TK);Edo=r(Q$r,"ibert"),Q$r.forEach(t),ydo=r(fCe," \u2014 "),cS=n(fCe,"A",{href:!0});var H$r=s(cS);wdo=r(H$r,"IBertForMaskedLM"),H$r.forEach(t),Ado=r(fCe," (I-BERT model)"),fCe.forEach(t),Ldo=i(S),p_=n(S,"LI",{});var mCe=s(p_);FK=n(mCe,"STRONG",{});var U$r=s(FK);Bdo=r(U$r,"layoutlm"),U$r.forEach(t),xdo=r(mCe," \u2014 "),fS=n(mCe,"A",{href:!0});var J$r=s(fS);kdo=r(J$r,"LayoutLMForMaskedLM"),J$r.forEach(t),Rdo=r(mCe," (LayoutLM model)"),mCe.forEach(t),Sdo=i(S),__=n(S,"LI",{});var gCe=s(__);CK=n(gCe,"STRONG",{});var Y$r=s(CK);Pdo=r(Y$r,"longformer"),Y$r.forEach(t),$do=r(gCe," \u2014 "),mS=n(gCe,"A",{href:!0});var K$r=s(mS);Ido=r(K$r,"LongformerForMaskedLM"),K$r.forEach(t),jdo=r(gCe," (Longformer model)"),gCe.forEach(t),Ndo=i(S),u_=n(S,"LI",{});var hCe=s(u_);MK=n(hCe,"STRONG",{});var Z$r=s(MK);Ddo=r(Z$r,"lxmert"),Z$r.forEach(t),qdo=r(hCe," \u2014 "),gS=n(hCe,"A",{href:!0});var eIr=s(gS);Gdo=r(eIr,"LxmertForPreTraining"),eIr.forEach(t),Odo=r(hCe," (LXMERT model)"),hCe.forEach(t),Xdo=i(S),b_=n(S,"LI",{});var pCe=s(b_);EK=n(pCe,"STRONG",{});var oIr=s(EK);zdo=r(oIr,"megatron-bert"),oIr.forEach(t),Vdo=r(pCe," \u2014 "),hS=n(pCe,"A",{href:!0});var rIr=s(hS);Wdo=r(rIr,"MegatronBertForPreTraining"),rIr.forEach(t),Qdo=r(pCe," (MegatronBert model)"),pCe.forEach(t),Hdo=i(S),v_=n(S,"LI",{});var _Ce=s(v_);yK=n(_Ce,"STRONG",{});var tIr=s(yK);Udo=r(tIr,"mobilebert"),tIr.forEach(t),Jdo=r(_Ce," \u2014 "),pS=n(_Ce,"A",{href:!0});var aIr=s(pS);Ydo=r(aIr,"MobileBertForPreTraining"),aIr.forEach(t),Kdo=r(_Ce," (MobileBERT model)"),_Ce.forEach(t),Zdo=i(S),T_=n(S,"LI",{});var uCe=s(T_);wK=n(uCe,"STRONG",{});var nIr=s(wK);eco=r(nIr,"mpnet"),nIr.forEach(t),oco=r(uCe," \u2014 "),_S=n(uCe,"A",{href:!0});var sIr=s(_S);rco=r(sIr,"MPNetForMaskedLM"),sIr.forEach(t),tco=r(uCe," (MPNet model)"),uCe.forEach(t),aco=i(S),F_=n(S,"LI",{});var bCe=s(F_);AK=n(bCe,"STRONG",{});var lIr=s(AK);nco=r(lIr,"openai-gpt"),lIr.forEach(t),sco=r(bCe," \u2014 "),uS=n(bCe,"A",{href:!0});var iIr=s(uS);lco=r(iIr,"OpenAIGPTLMHeadModel"),iIr.forEach(t),ico=r(bCe," (OpenAI GPT model)"),bCe.forEach(t),dco=i(S),C_=n(S,"LI",{});var vCe=s(C_);LK=n(vCe,"STRONG",{});var dIr=s(LK);cco=r(dIr,"retribert"),dIr.forEach(t),fco=r(vCe," \u2014 "),bS=n(vCe,"A",{href:!0});var cIr=s(bS);mco=r(cIr,"RetriBertModel"),cIr.forEach(t),gco=r(vCe," (RetriBERT model)"),vCe.forEach(t),hco=i(S),M_=n(S,"LI",{});var TCe=s(M_);BK=n(TCe,"STRONG",{});var fIr=s(BK);pco=r(fIr,"roberta"),fIr.forEach(t),_co=r(TCe," \u2014 "),vS=n(TCe,"A",{href:!0});var mIr=s(vS);uco=r(mIr,"RobertaForMaskedLM"),mIr.forEach(t),bco=r(TCe," (RoBERTa model)"),TCe.forEach(t),vco=i(S),E_=n(S,"LI",{});var FCe=s(E_);xK=n(FCe,"STRONG",{});var gIr=s(xK);Tco=r(gIr,"squeezebert"),gIr.forEach(t),Fco=r(FCe," \u2014 "),TS=n(FCe,"A",{href:!0});var hIr=s(TS);Cco=r(hIr,"SqueezeBertForMaskedLM"),hIr.forEach(t),Mco=r(FCe," (SqueezeBERT model)"),FCe.forEach(t),Eco=i(S),y_=n(S,"LI",{});var CCe=s(y_);kK=n(CCe,"STRONG",{});var pIr=s(kK);yco=r(pIr,"t5"),pIr.forEach(t),wco=r(CCe," \u2014 "),FS=n(CCe,"A",{href:!0});var _Ir=s(FS);Aco=r(_Ir,"T5ForConditionalGeneration"),_Ir.forEach(t),Lco=r(CCe," (T5 model)"),CCe.forEach(t),Bco=i(S),w_=n(S,"LI",{});var MCe=s(w_);RK=n(MCe,"STRONG",{});var uIr=s(RK);xco=r(uIr,"tapas"),uIr.forEach(t),kco=r(MCe," \u2014 "),CS=n(MCe,"A",{href:!0});var bIr=s(CS);Rco=r(bIr,"TapasForMaskedLM"),bIr.forEach(t),Sco=r(MCe," (TAPAS model)"),MCe.forEach(t),Pco=i(S),A_=n(S,"LI",{});var ECe=s(A_);SK=n(ECe,"STRONG",{});var vIr=s(SK);$co=r(vIr,"transfo-xl"),vIr.forEach(t),Ico=r(ECe," \u2014 "),MS=n(ECe,"A",{href:!0});var TIr=s(MS);jco=r(TIr,"TransfoXLLMHeadModel"),TIr.forEach(t),Nco=r(ECe," (Transformer-XL model)"),ECe.forEach(t),Dco=i(S),L_=n(S,"LI",{});var yCe=s(L_);PK=n(yCe,"STRONG",{});var FIr=s(PK);qco=r(FIr,"unispeech"),FIr.forEach(t),Gco=r(yCe," \u2014 "),ES=n(yCe,"A",{href:!0});var CIr=s(ES);Oco=r(CIr,"UniSpeechForPreTraining"),CIr.forEach(t),Xco=r(yCe," (UniSpeech model)"),yCe.forEach(t),zco=i(S),B_=n(S,"LI",{});var wCe=s(B_);$K=n(wCe,"STRONG",{});var MIr=s($K);Vco=r(MIr,"unispeech-sat"),MIr.forEach(t),Wco=r(wCe," \u2014 "),yS=n(wCe,"A",{href:!0});var EIr=s(yS);Qco=r(EIr,"UniSpeechSatForPreTraining"),EIr.forEach(t),Hco=r(wCe," (UniSpeechSat model)"),wCe.forEach(t),Uco=i(S),x_=n(S,"LI",{});var ACe=s(x_);IK=n(ACe,"STRONG",{});var yIr=s(IK);Jco=r(yIr,"visual_bert"),yIr.forEach(t),Yco=r(ACe," \u2014 "),wS=n(ACe,"A",{href:!0});var wIr=s(wS);Kco=r(wIr,"VisualBertForPreTraining"),wIr.forEach(t),Zco=r(ACe," (VisualBert model)"),ACe.forEach(t),efo=i(S),k_=n(S,"LI",{});var LCe=s(k_);jK=n(LCe,"STRONG",{});var AIr=s(jK);ofo=r(AIr,"vit_mae"),AIr.forEach(t),rfo=r(LCe," \u2014 "),AS=n(LCe,"A",{href:!0});var LIr=s(AS);tfo=r(LIr,"ViTMAEForPreTraining"),LIr.forEach(t),afo=r(LCe," (ViTMAE model)"),LCe.forEach(t),nfo=i(S),R_=n(S,"LI",{});var BCe=s(R_);NK=n(BCe,"STRONG",{});var BIr=s(NK);sfo=r(BIr,"wav2vec2"),BIr.forEach(t),lfo=r(BCe," \u2014 "),LS=n(BCe,"A",{href:!0});var xIr=s(LS);ifo=r(xIr,"Wav2Vec2ForPreTraining"),xIr.forEach(t),dfo=r(BCe," (Wav2Vec2 model)"),BCe.forEach(t),cfo=i(S),S_=n(S,"LI",{});var xCe=s(S_);DK=n(xCe,"STRONG",{});var kIr=s(DK);ffo=r(kIr,"xlm"),kIr.forEach(t),mfo=r(xCe," \u2014 "),BS=n(xCe,"A",{href:!0});var RIr=s(BS);gfo=r(RIr,"XLMWithLMHeadModel"),RIr.forEach(t),hfo=r(xCe," (XLM model)"),xCe.forEach(t),pfo=i(S),P_=n(S,"LI",{});var kCe=s(P_);qK=n(kCe,"STRONG",{});var SIr=s(qK);_fo=r(SIr,"xlm-roberta"),SIr.forEach(t),ufo=r(kCe," \u2014 "),xS=n(kCe,"A",{href:!0});var PIr=s(xS);bfo=r(PIr,"XLMRobertaForMaskedLM"),PIr.forEach(t),vfo=r(kCe," (XLM-RoBERTa model)"),kCe.forEach(t),Tfo=i(S),$_=n(S,"LI",{});var RCe=s($_);GK=n(RCe,"STRONG",{});var $Ir=s(GK);Ffo=r($Ir,"xlm-roberta-xl"),$Ir.forEach(t),Cfo=r(RCe," \u2014 "),kS=n(RCe,"A",{href:!0});var IIr=s(kS);Mfo=r(IIr,"XLMRobertaXLForMaskedLM"),IIr.forEach(t),Efo=r(RCe," (XLM-RoBERTa-XL model)"),RCe.forEach(t),yfo=i(S),I_=n(S,"LI",{});var SCe=s(I_);OK=n(SCe,"STRONG",{});var jIr=s(OK);wfo=r(jIr,"xlnet"),jIr.forEach(t),Afo=r(SCe," \u2014 "),RS=n(SCe,"A",{href:!0});var NIr=s(RS);Lfo=r(NIr,"XLNetLMHeadModel"),NIr.forEach(t),Bfo=r(SCe," (XLNet model)"),SCe.forEach(t),S.forEach(t),xfo=i(Pt),j_=n(Pt,"P",{});var PCe=s(j_);kfo=r(PCe,"The model is set in evaluation mode by default using "),XK=n(PCe,"CODE",{});var DIr=s(XK);Rfo=r(DIr,"model.eval()"),DIr.forEach(t),Sfo=r(PCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zK=n(PCe,"CODE",{});var qIr=s(zK);Pfo=r(qIr,"model.train()"),qIr.forEach(t),PCe.forEach(t),$fo=i(Pt),VK=n(Pt,"P",{});var GIr=s(VK);Ifo=r(GIr,"Examples:"),GIr.forEach(t),jfo=i(Pt),m(JE.$$.fragment,Pt),Pt.forEach(t),Gs.forEach(t),B7e=i(d),Qi=n(d,"H2",{class:!0});var IBe=s(Qi);N_=n(IBe,"A",{id:!0,class:!0,href:!0});var OIr=s(N_);WK=n(OIr,"SPAN",{});var XIr=s(WK);m(YE.$$.fragment,XIr),XIr.forEach(t),OIr.forEach(t),Nfo=i(IBe),QK=n(IBe,"SPAN",{});var zIr=s(QK);Dfo=r(zIr,"AutoModelForCausalLM"),zIr.forEach(t),IBe.forEach(t),x7e=i(d),Qo=n(d,"DIV",{class:!0});var Xs=s(Qo);m(KE.$$.fragment,Xs),qfo=i(Xs),Hi=n(Xs,"P",{});var tz=s(Hi);Gfo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HK=n(tz,"CODE",{});var VIr=s(HK);Ofo=r(VIr,"from_pretrained()"),VIr.forEach(t),Xfo=r(tz,"class method or the "),UK=n(tz,"CODE",{});var WIr=s(UK);zfo=r(WIr,"from_config()"),WIr.forEach(t),Vfo=r(tz,`class
method.`),tz.forEach(t),Wfo=i(Xs),ZE=n(Xs,"P",{});var jBe=s(ZE);Qfo=r(jBe,"This class cannot be instantiated directly using "),JK=n(jBe,"CODE",{});var QIr=s(JK);Hfo=r(QIr,"__init__()"),QIr.forEach(t),Ufo=r(jBe," (throws an error)."),jBe.forEach(t),Jfo=i(Xs),qr=n(Xs,"DIV",{class:!0});var zs=s(qr);m(e3.$$.fragment,zs),Yfo=i(zs),YK=n(zs,"P",{});var HIr=s(YK);Kfo=r(HIr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HIr.forEach(t),Zfo=i(zs),Ui=n(zs,"P",{});var az=s(Ui);emo=r(az,`Note:
Loading a model from its configuration file does `),KK=n(az,"STRONG",{});var UIr=s(KK);omo=r(UIr,"not"),UIr.forEach(t),rmo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(az,"CODE",{});var JIr=s(ZK);tmo=r(JIr,"from_pretrained()"),JIr.forEach(t),amo=r(az,"to load the model weights."),az.forEach(t),nmo=i(zs),eZ=n(zs,"P",{});var YIr=s(eZ);smo=r(YIr,"Examples:"),YIr.forEach(t),lmo=i(zs),m(o3.$$.fragment,zs),zs.forEach(t),imo=i(Xs),Re=n(Xs,"DIV",{class:!0});var $t=s(Re);m(r3.$$.fragment,$t),dmo=i($t),oZ=n($t,"P",{});var KIr=s(oZ);cmo=r(KIr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KIr.forEach(t),fmo=i($t),Ga=n($t,"P",{});var fM=s(Ga);mmo=r(fM,"The model class to instantiate is selected based on the "),rZ=n(fM,"CODE",{});var ZIr=s(rZ);gmo=r(ZIr,"model_type"),ZIr.forEach(t),hmo=r(fM,` property of the config object (either
passed as an argument or loaded from `),tZ=n(fM,"CODE",{});var ejr=s(tZ);pmo=r(ejr,"pretrained_model_name_or_path"),ejr.forEach(t),_mo=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aZ=n(fM,"CODE",{});var ojr=s(aZ);umo=r(ojr,"pretrained_model_name_or_path"),ojr.forEach(t),bmo=r(fM,":"),fM.forEach(t),vmo=i($t),$=n($t,"UL",{});var j=s($);D_=n(j,"LI",{});var $Ce=s(D_);nZ=n($Ce,"STRONG",{});var rjr=s(nZ);Tmo=r(rjr,"bart"),rjr.forEach(t),Fmo=r($Ce," \u2014 "),SS=n($Ce,"A",{href:!0});var tjr=s(SS);Cmo=r(tjr,"BartForCausalLM"),tjr.forEach(t),Mmo=r($Ce," (BART model)"),$Ce.forEach(t),Emo=i(j),q_=n(j,"LI",{});var ICe=s(q_);sZ=n(ICe,"STRONG",{});var ajr=s(sZ);ymo=r(ajr,"bert"),ajr.forEach(t),wmo=r(ICe," \u2014 "),PS=n(ICe,"A",{href:!0});var njr=s(PS);Amo=r(njr,"BertLMHeadModel"),njr.forEach(t),Lmo=r(ICe," (BERT model)"),ICe.forEach(t),Bmo=i(j),G_=n(j,"LI",{});var jCe=s(G_);lZ=n(jCe,"STRONG",{});var sjr=s(lZ);xmo=r(sjr,"bert-generation"),sjr.forEach(t),kmo=r(jCe," \u2014 "),$S=n(jCe,"A",{href:!0});var ljr=s($S);Rmo=r(ljr,"BertGenerationDecoder"),ljr.forEach(t),Smo=r(jCe," (Bert Generation model)"),jCe.forEach(t),Pmo=i(j),O_=n(j,"LI",{});var NCe=s(O_);iZ=n(NCe,"STRONG",{});var ijr=s(iZ);$mo=r(ijr,"big_bird"),ijr.forEach(t),Imo=r(NCe," \u2014 "),IS=n(NCe,"A",{href:!0});var djr=s(IS);jmo=r(djr,"BigBirdForCausalLM"),djr.forEach(t),Nmo=r(NCe," (BigBird model)"),NCe.forEach(t),Dmo=i(j),X_=n(j,"LI",{});var DCe=s(X_);dZ=n(DCe,"STRONG",{});var cjr=s(dZ);qmo=r(cjr,"bigbird_pegasus"),cjr.forEach(t),Gmo=r(DCe," \u2014 "),jS=n(DCe,"A",{href:!0});var fjr=s(jS);Omo=r(fjr,"BigBirdPegasusForCausalLM"),fjr.forEach(t),Xmo=r(DCe," (BigBirdPegasus model)"),DCe.forEach(t),zmo=i(j),z_=n(j,"LI",{});var qCe=s(z_);cZ=n(qCe,"STRONG",{});var mjr=s(cZ);Vmo=r(mjr,"blenderbot"),mjr.forEach(t),Wmo=r(qCe," \u2014 "),NS=n(qCe,"A",{href:!0});var gjr=s(NS);Qmo=r(gjr,"BlenderbotForCausalLM"),gjr.forEach(t),Hmo=r(qCe," (Blenderbot model)"),qCe.forEach(t),Umo=i(j),V_=n(j,"LI",{});var GCe=s(V_);fZ=n(GCe,"STRONG",{});var hjr=s(fZ);Jmo=r(hjr,"blenderbot-small"),hjr.forEach(t),Ymo=r(GCe," \u2014 "),DS=n(GCe,"A",{href:!0});var pjr=s(DS);Kmo=r(pjr,"BlenderbotSmallForCausalLM"),pjr.forEach(t),Zmo=r(GCe," (BlenderbotSmall model)"),GCe.forEach(t),ego=i(j),W_=n(j,"LI",{});var OCe=s(W_);mZ=n(OCe,"STRONG",{});var _jr=s(mZ);ogo=r(_jr,"camembert"),_jr.forEach(t),rgo=r(OCe," \u2014 "),qS=n(OCe,"A",{href:!0});var ujr=s(qS);tgo=r(ujr,"CamembertForCausalLM"),ujr.forEach(t),ago=r(OCe," (CamemBERT model)"),OCe.forEach(t),ngo=i(j),Q_=n(j,"LI",{});var XCe=s(Q_);gZ=n(XCe,"STRONG",{});var bjr=s(gZ);sgo=r(bjr,"ctrl"),bjr.forEach(t),lgo=r(XCe," \u2014 "),GS=n(XCe,"A",{href:!0});var vjr=s(GS);igo=r(vjr,"CTRLLMHeadModel"),vjr.forEach(t),dgo=r(XCe," (CTRL model)"),XCe.forEach(t),cgo=i(j),H_=n(j,"LI",{});var zCe=s(H_);hZ=n(zCe,"STRONG",{});var Tjr=s(hZ);fgo=r(Tjr,"electra"),Tjr.forEach(t),mgo=r(zCe," \u2014 "),OS=n(zCe,"A",{href:!0});var Fjr=s(OS);ggo=r(Fjr,"ElectraForCausalLM"),Fjr.forEach(t),hgo=r(zCe," (ELECTRA model)"),zCe.forEach(t),pgo=i(j),U_=n(j,"LI",{});var VCe=s(U_);pZ=n(VCe,"STRONG",{});var Cjr=s(pZ);_go=r(Cjr,"gpt2"),Cjr.forEach(t),ugo=r(VCe," \u2014 "),XS=n(VCe,"A",{href:!0});var Mjr=s(XS);bgo=r(Mjr,"GPT2LMHeadModel"),Mjr.forEach(t),vgo=r(VCe," (OpenAI GPT-2 model)"),VCe.forEach(t),Tgo=i(j),J_=n(j,"LI",{});var WCe=s(J_);_Z=n(WCe,"STRONG",{});var Ejr=s(_Z);Fgo=r(Ejr,"gpt_neo"),Ejr.forEach(t),Cgo=r(WCe," \u2014 "),zS=n(WCe,"A",{href:!0});var yjr=s(zS);Mgo=r(yjr,"GPTNeoForCausalLM"),yjr.forEach(t),Ego=r(WCe," (GPT Neo model)"),WCe.forEach(t),ygo=i(j),Y_=n(j,"LI",{});var QCe=s(Y_);uZ=n(QCe,"STRONG",{});var wjr=s(uZ);wgo=r(wjr,"gptj"),wjr.forEach(t),Ago=r(QCe," \u2014 "),VS=n(QCe,"A",{href:!0});var Ajr=s(VS);Lgo=r(Ajr,"GPTJForCausalLM"),Ajr.forEach(t),Bgo=r(QCe," (GPT-J model)"),QCe.forEach(t),xgo=i(j),K_=n(j,"LI",{});var HCe=s(K_);bZ=n(HCe,"STRONG",{});var Ljr=s(bZ);kgo=r(Ljr,"marian"),Ljr.forEach(t),Rgo=r(HCe," \u2014 "),WS=n(HCe,"A",{href:!0});var Bjr=s(WS);Sgo=r(Bjr,"MarianForCausalLM"),Bjr.forEach(t),Pgo=r(HCe," (Marian model)"),HCe.forEach(t),$go=i(j),Z_=n(j,"LI",{});var UCe=s(Z_);vZ=n(UCe,"STRONG",{});var xjr=s(vZ);Igo=r(xjr,"mbart"),xjr.forEach(t),jgo=r(UCe," \u2014 "),QS=n(UCe,"A",{href:!0});var kjr=s(QS);Ngo=r(kjr,"MBartForCausalLM"),kjr.forEach(t),Dgo=r(UCe," (mBART model)"),UCe.forEach(t),qgo=i(j),eu=n(j,"LI",{});var JCe=s(eu);TZ=n(JCe,"STRONG",{});var Rjr=s(TZ);Ggo=r(Rjr,"megatron-bert"),Rjr.forEach(t),Ogo=r(JCe," \u2014 "),HS=n(JCe,"A",{href:!0});var Sjr=s(HS);Xgo=r(Sjr,"MegatronBertForCausalLM"),Sjr.forEach(t),zgo=r(JCe," (MegatronBert model)"),JCe.forEach(t),Vgo=i(j),ou=n(j,"LI",{});var YCe=s(ou);FZ=n(YCe,"STRONG",{});var Pjr=s(FZ);Wgo=r(Pjr,"openai-gpt"),Pjr.forEach(t),Qgo=r(YCe," \u2014 "),US=n(YCe,"A",{href:!0});var $jr=s(US);Hgo=r($jr,"OpenAIGPTLMHeadModel"),$jr.forEach(t),Ugo=r(YCe," (OpenAI GPT model)"),YCe.forEach(t),Jgo=i(j),ru=n(j,"LI",{});var KCe=s(ru);CZ=n(KCe,"STRONG",{});var Ijr=s(CZ);Ygo=r(Ijr,"pegasus"),Ijr.forEach(t),Kgo=r(KCe," \u2014 "),JS=n(KCe,"A",{href:!0});var jjr=s(JS);Zgo=r(jjr,"PegasusForCausalLM"),jjr.forEach(t),eho=r(KCe," (Pegasus model)"),KCe.forEach(t),oho=i(j),tu=n(j,"LI",{});var ZCe=s(tu);MZ=n(ZCe,"STRONG",{});var Njr=s(MZ);rho=r(Njr,"plbart"),Njr.forEach(t),tho=r(ZCe," \u2014 "),YS=n(ZCe,"A",{href:!0});var Djr=s(YS);aho=r(Djr,"PLBartForCausalLM"),Djr.forEach(t),nho=r(ZCe," (PLBart model)"),ZCe.forEach(t),sho=i(j),au=n(j,"LI",{});var e4e=s(au);EZ=n(e4e,"STRONG",{});var qjr=s(EZ);lho=r(qjr,"prophetnet"),qjr.forEach(t),iho=r(e4e," \u2014 "),KS=n(e4e,"A",{href:!0});var Gjr=s(KS);dho=r(Gjr,"ProphetNetForCausalLM"),Gjr.forEach(t),cho=r(e4e," (ProphetNet model)"),e4e.forEach(t),fho=i(j),nu=n(j,"LI",{});var o4e=s(nu);yZ=n(o4e,"STRONG",{});var Ojr=s(yZ);mho=r(Ojr,"qdqbert"),Ojr.forEach(t),gho=r(o4e," \u2014 "),ZS=n(o4e,"A",{href:!0});var Xjr=s(ZS);hho=r(Xjr,"QDQBertLMHeadModel"),Xjr.forEach(t),pho=r(o4e," (QDQBert model)"),o4e.forEach(t),_ho=i(j),su=n(j,"LI",{});var r4e=s(su);wZ=n(r4e,"STRONG",{});var zjr=s(wZ);uho=r(zjr,"reformer"),zjr.forEach(t),bho=r(r4e," \u2014 "),eP=n(r4e,"A",{href:!0});var Vjr=s(eP);vho=r(Vjr,"ReformerModelWithLMHead"),Vjr.forEach(t),Tho=r(r4e," (Reformer model)"),r4e.forEach(t),Fho=i(j),lu=n(j,"LI",{});var t4e=s(lu);AZ=n(t4e,"STRONG",{});var Wjr=s(AZ);Cho=r(Wjr,"rembert"),Wjr.forEach(t),Mho=r(t4e," \u2014 "),oP=n(t4e,"A",{href:!0});var Qjr=s(oP);Eho=r(Qjr,"RemBertForCausalLM"),Qjr.forEach(t),yho=r(t4e," (RemBERT model)"),t4e.forEach(t),who=i(j),iu=n(j,"LI",{});var a4e=s(iu);LZ=n(a4e,"STRONG",{});var Hjr=s(LZ);Aho=r(Hjr,"roberta"),Hjr.forEach(t),Lho=r(a4e," \u2014 "),rP=n(a4e,"A",{href:!0});var Ujr=s(rP);Bho=r(Ujr,"RobertaForCausalLM"),Ujr.forEach(t),xho=r(a4e," (RoBERTa model)"),a4e.forEach(t),kho=i(j),du=n(j,"LI",{});var n4e=s(du);BZ=n(n4e,"STRONG",{});var Jjr=s(BZ);Rho=r(Jjr,"roformer"),Jjr.forEach(t),Sho=r(n4e," \u2014 "),tP=n(n4e,"A",{href:!0});var Yjr=s(tP);Pho=r(Yjr,"RoFormerForCausalLM"),Yjr.forEach(t),$ho=r(n4e," (RoFormer model)"),n4e.forEach(t),Iho=i(j),cu=n(j,"LI",{});var s4e=s(cu);xZ=n(s4e,"STRONG",{});var Kjr=s(xZ);jho=r(Kjr,"speech_to_text_2"),Kjr.forEach(t),Nho=r(s4e," \u2014 "),aP=n(s4e,"A",{href:!0});var Zjr=s(aP);Dho=r(Zjr,"Speech2Text2ForCausalLM"),Zjr.forEach(t),qho=r(s4e," (Speech2Text2 model)"),s4e.forEach(t),Gho=i(j),fu=n(j,"LI",{});var l4e=s(fu);kZ=n(l4e,"STRONG",{});var eNr=s(kZ);Oho=r(eNr,"transfo-xl"),eNr.forEach(t),Xho=r(l4e," \u2014 "),nP=n(l4e,"A",{href:!0});var oNr=s(nP);zho=r(oNr,"TransfoXLLMHeadModel"),oNr.forEach(t),Vho=r(l4e," (Transformer-XL model)"),l4e.forEach(t),Who=i(j),mu=n(j,"LI",{});var i4e=s(mu);RZ=n(i4e,"STRONG",{});var rNr=s(RZ);Qho=r(rNr,"trocr"),rNr.forEach(t),Hho=r(i4e," \u2014 "),sP=n(i4e,"A",{href:!0});var tNr=s(sP);Uho=r(tNr,"TrOCRForCausalLM"),tNr.forEach(t),Jho=r(i4e," (TrOCR model)"),i4e.forEach(t),Yho=i(j),gu=n(j,"LI",{});var d4e=s(gu);SZ=n(d4e,"STRONG",{});var aNr=s(SZ);Kho=r(aNr,"xglm"),aNr.forEach(t),Zho=r(d4e," \u2014 "),lP=n(d4e,"A",{href:!0});var nNr=s(lP);epo=r(nNr,"XGLMForCausalLM"),nNr.forEach(t),opo=r(d4e," (XGLM model)"),d4e.forEach(t),rpo=i(j),hu=n(j,"LI",{});var c4e=s(hu);PZ=n(c4e,"STRONG",{});var sNr=s(PZ);tpo=r(sNr,"xlm"),sNr.forEach(t),apo=r(c4e," \u2014 "),iP=n(c4e,"A",{href:!0});var lNr=s(iP);npo=r(lNr,"XLMWithLMHeadModel"),lNr.forEach(t),spo=r(c4e," (XLM model)"),c4e.forEach(t),lpo=i(j),pu=n(j,"LI",{});var f4e=s(pu);$Z=n(f4e,"STRONG",{});var iNr=s($Z);ipo=r(iNr,"xlm-prophetnet"),iNr.forEach(t),dpo=r(f4e," \u2014 "),dP=n(f4e,"A",{href:!0});var dNr=s(dP);cpo=r(dNr,"XLMProphetNetForCausalLM"),dNr.forEach(t),fpo=r(f4e," (XLMProphetNet model)"),f4e.forEach(t),mpo=i(j),_u=n(j,"LI",{});var m4e=s(_u);IZ=n(m4e,"STRONG",{});var cNr=s(IZ);gpo=r(cNr,"xlm-roberta"),cNr.forEach(t),hpo=r(m4e," \u2014 "),cP=n(m4e,"A",{href:!0});var fNr=s(cP);ppo=r(fNr,"XLMRobertaForCausalLM"),fNr.forEach(t),_po=r(m4e," (XLM-RoBERTa model)"),m4e.forEach(t),upo=i(j),uu=n(j,"LI",{});var g4e=s(uu);jZ=n(g4e,"STRONG",{});var mNr=s(jZ);bpo=r(mNr,"xlm-roberta-xl"),mNr.forEach(t),vpo=r(g4e," \u2014 "),fP=n(g4e,"A",{href:!0});var gNr=s(fP);Tpo=r(gNr,"XLMRobertaXLForCausalLM"),gNr.forEach(t),Fpo=r(g4e," (XLM-RoBERTa-XL model)"),g4e.forEach(t),Cpo=i(j),bu=n(j,"LI",{});var h4e=s(bu);NZ=n(h4e,"STRONG",{});var hNr=s(NZ);Mpo=r(hNr,"xlnet"),hNr.forEach(t),Epo=r(h4e," \u2014 "),mP=n(h4e,"A",{href:!0});var pNr=s(mP);ypo=r(pNr,"XLNetLMHeadModel"),pNr.forEach(t),wpo=r(h4e," (XLNet model)"),h4e.forEach(t),j.forEach(t),Apo=i($t),vu=n($t,"P",{});var p4e=s(vu);Lpo=r(p4e,"The model is set in evaluation mode by default using "),DZ=n(p4e,"CODE",{});var _Nr=s(DZ);Bpo=r(_Nr,"model.eval()"),_Nr.forEach(t),xpo=r(p4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qZ=n(p4e,"CODE",{});var uNr=s(qZ);kpo=r(uNr,"model.train()"),uNr.forEach(t),p4e.forEach(t),Rpo=i($t),GZ=n($t,"P",{});var bNr=s(GZ);Spo=r(bNr,"Examples:"),bNr.forEach(t),Ppo=i($t),m(t3.$$.fragment,$t),$t.forEach(t),Xs.forEach(t),k7e=i(d),Ji=n(d,"H2",{class:!0});var NBe=s(Ji);Tu=n(NBe,"A",{id:!0,class:!0,href:!0});var vNr=s(Tu);OZ=n(vNr,"SPAN",{});var TNr=s(OZ);m(a3.$$.fragment,TNr),TNr.forEach(t),vNr.forEach(t),$po=i(NBe),XZ=n(NBe,"SPAN",{});var FNr=s(XZ);Ipo=r(FNr,"AutoModelForMaskedLM"),FNr.forEach(t),NBe.forEach(t),R7e=i(d),Ho=n(d,"DIV",{class:!0});var Vs=s(Ho);m(n3.$$.fragment,Vs),jpo=i(Vs),Yi=n(Vs,"P",{});var nz=s(Yi);Npo=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zZ=n(nz,"CODE",{});var CNr=s(zZ);Dpo=r(CNr,"from_pretrained()"),CNr.forEach(t),qpo=r(nz,"class method or the "),VZ=n(nz,"CODE",{});var MNr=s(VZ);Gpo=r(MNr,"from_config()"),MNr.forEach(t),Opo=r(nz,`class
method.`),nz.forEach(t),Xpo=i(Vs),s3=n(Vs,"P",{});var DBe=s(s3);zpo=r(DBe,"This class cannot be instantiated directly using "),WZ=n(DBe,"CODE",{});var ENr=s(WZ);Vpo=r(ENr,"__init__()"),ENr.forEach(t),Wpo=r(DBe," (throws an error)."),DBe.forEach(t),Qpo=i(Vs),Gr=n(Vs,"DIV",{class:!0});var Ws=s(Gr);m(l3.$$.fragment,Ws),Hpo=i(Ws),QZ=n(Ws,"P",{});var yNr=s(QZ);Upo=r(yNr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yNr.forEach(t),Jpo=i(Ws),Ki=n(Ws,"P",{});var sz=s(Ki);Ypo=r(sz,`Note:
Loading a model from its configuration file does `),HZ=n(sz,"STRONG",{});var wNr=s(HZ);Kpo=r(wNr,"not"),wNr.forEach(t),Zpo=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(sz,"CODE",{});var ANr=s(UZ);e_o=r(ANr,"from_pretrained()"),ANr.forEach(t),o_o=r(sz,"to load the model weights."),sz.forEach(t),r_o=i(Ws),JZ=n(Ws,"P",{});var LNr=s(JZ);t_o=r(LNr,"Examples:"),LNr.forEach(t),a_o=i(Ws),m(i3.$$.fragment,Ws),Ws.forEach(t),n_o=i(Vs),Se=n(Vs,"DIV",{class:!0});var It=s(Se);m(d3.$$.fragment,It),s_o=i(It),YZ=n(It,"P",{});var BNr=s(YZ);l_o=r(BNr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BNr.forEach(t),i_o=i(It),Oa=n(It,"P",{});var mM=s(Oa);d_o=r(mM,"The model class to instantiate is selected based on the "),KZ=n(mM,"CODE",{});var xNr=s(KZ);c_o=r(xNr,"model_type"),xNr.forEach(t),f_o=r(mM,` property of the config object (either
passed as an argument or loaded from `),ZZ=n(mM,"CODE",{});var kNr=s(ZZ);m_o=r(kNr,"pretrained_model_name_or_path"),kNr.forEach(t),g_o=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eee=n(mM,"CODE",{});var RNr=s(eee);h_o=r(RNr,"pretrained_model_name_or_path"),RNr.forEach(t),p_o=r(mM,":"),mM.forEach(t),__o=i(It),I=n(It,"UL",{});var N=s(I);Fu=n(N,"LI",{});var _4e=s(Fu);oee=n(_4e,"STRONG",{});var SNr=s(oee);u_o=r(SNr,"albert"),SNr.forEach(t),b_o=r(_4e," \u2014 "),gP=n(_4e,"A",{href:!0});var PNr=s(gP);v_o=r(PNr,"AlbertForMaskedLM"),PNr.forEach(t),T_o=r(_4e," (ALBERT model)"),_4e.forEach(t),F_o=i(N),Cu=n(N,"LI",{});var u4e=s(Cu);ree=n(u4e,"STRONG",{});var $Nr=s(ree);C_o=r($Nr,"bart"),$Nr.forEach(t),M_o=r(u4e," \u2014 "),hP=n(u4e,"A",{href:!0});var INr=s(hP);E_o=r(INr,"BartForConditionalGeneration"),INr.forEach(t),y_o=r(u4e," (BART model)"),u4e.forEach(t),w_o=i(N),Mu=n(N,"LI",{});var b4e=s(Mu);tee=n(b4e,"STRONG",{});var jNr=s(tee);A_o=r(jNr,"bert"),jNr.forEach(t),L_o=r(b4e," \u2014 "),pP=n(b4e,"A",{href:!0});var NNr=s(pP);B_o=r(NNr,"BertForMaskedLM"),NNr.forEach(t),x_o=r(b4e," (BERT model)"),b4e.forEach(t),k_o=i(N),Eu=n(N,"LI",{});var v4e=s(Eu);aee=n(v4e,"STRONG",{});var DNr=s(aee);R_o=r(DNr,"big_bird"),DNr.forEach(t),S_o=r(v4e," \u2014 "),_P=n(v4e,"A",{href:!0});var qNr=s(_P);P_o=r(qNr,"BigBirdForMaskedLM"),qNr.forEach(t),$_o=r(v4e," (BigBird model)"),v4e.forEach(t),I_o=i(N),yu=n(N,"LI",{});var T4e=s(yu);nee=n(T4e,"STRONG",{});var GNr=s(nee);j_o=r(GNr,"camembert"),GNr.forEach(t),N_o=r(T4e," \u2014 "),uP=n(T4e,"A",{href:!0});var ONr=s(uP);D_o=r(ONr,"CamembertForMaskedLM"),ONr.forEach(t),q_o=r(T4e," (CamemBERT model)"),T4e.forEach(t),G_o=i(N),wu=n(N,"LI",{});var F4e=s(wu);see=n(F4e,"STRONG",{});var XNr=s(see);O_o=r(XNr,"convbert"),XNr.forEach(t),X_o=r(F4e," \u2014 "),bP=n(F4e,"A",{href:!0});var zNr=s(bP);z_o=r(zNr,"ConvBertForMaskedLM"),zNr.forEach(t),V_o=r(F4e," (ConvBERT model)"),F4e.forEach(t),W_o=i(N),Au=n(N,"LI",{});var C4e=s(Au);lee=n(C4e,"STRONG",{});var VNr=s(lee);Q_o=r(VNr,"deberta"),VNr.forEach(t),H_o=r(C4e," \u2014 "),vP=n(C4e,"A",{href:!0});var WNr=s(vP);U_o=r(WNr,"DebertaForMaskedLM"),WNr.forEach(t),J_o=r(C4e," (DeBERTa model)"),C4e.forEach(t),Y_o=i(N),Lu=n(N,"LI",{});var M4e=s(Lu);iee=n(M4e,"STRONG",{});var QNr=s(iee);K_o=r(QNr,"deberta-v2"),QNr.forEach(t),Z_o=r(M4e," \u2014 "),TP=n(M4e,"A",{href:!0});var HNr=s(TP);euo=r(HNr,"DebertaV2ForMaskedLM"),HNr.forEach(t),ouo=r(M4e," (DeBERTa-v2 model)"),M4e.forEach(t),ruo=i(N),Bu=n(N,"LI",{});var E4e=s(Bu);dee=n(E4e,"STRONG",{});var UNr=s(dee);tuo=r(UNr,"distilbert"),UNr.forEach(t),auo=r(E4e," \u2014 "),FP=n(E4e,"A",{href:!0});var JNr=s(FP);nuo=r(JNr,"DistilBertForMaskedLM"),JNr.forEach(t),suo=r(E4e," (DistilBERT model)"),E4e.forEach(t),luo=i(N),xu=n(N,"LI",{});var y4e=s(xu);cee=n(y4e,"STRONG",{});var YNr=s(cee);iuo=r(YNr,"electra"),YNr.forEach(t),duo=r(y4e," \u2014 "),CP=n(y4e,"A",{href:!0});var KNr=s(CP);cuo=r(KNr,"ElectraForMaskedLM"),KNr.forEach(t),fuo=r(y4e," (ELECTRA model)"),y4e.forEach(t),muo=i(N),ku=n(N,"LI",{});var w4e=s(ku);fee=n(w4e,"STRONG",{});var ZNr=s(fee);guo=r(ZNr,"flaubert"),ZNr.forEach(t),huo=r(w4e," \u2014 "),MP=n(w4e,"A",{href:!0});var eDr=s(MP);puo=r(eDr,"FlaubertWithLMHeadModel"),eDr.forEach(t),_uo=r(w4e," (FlauBERT model)"),w4e.forEach(t),uuo=i(N),Ru=n(N,"LI",{});var A4e=s(Ru);mee=n(A4e,"STRONG",{});var oDr=s(mee);buo=r(oDr,"fnet"),oDr.forEach(t),vuo=r(A4e," \u2014 "),EP=n(A4e,"A",{href:!0});var rDr=s(EP);Tuo=r(rDr,"FNetForMaskedLM"),rDr.forEach(t),Fuo=r(A4e," (FNet model)"),A4e.forEach(t),Cuo=i(N),Su=n(N,"LI",{});var L4e=s(Su);gee=n(L4e,"STRONG",{});var tDr=s(gee);Muo=r(tDr,"funnel"),tDr.forEach(t),Euo=r(L4e," \u2014 "),yP=n(L4e,"A",{href:!0});var aDr=s(yP);yuo=r(aDr,"FunnelForMaskedLM"),aDr.forEach(t),wuo=r(L4e," (Funnel Transformer model)"),L4e.forEach(t),Auo=i(N),Pu=n(N,"LI",{});var B4e=s(Pu);hee=n(B4e,"STRONG",{});var nDr=s(hee);Luo=r(nDr,"ibert"),nDr.forEach(t),Buo=r(B4e," \u2014 "),wP=n(B4e,"A",{href:!0});var sDr=s(wP);xuo=r(sDr,"IBertForMaskedLM"),sDr.forEach(t),kuo=r(B4e," (I-BERT model)"),B4e.forEach(t),Ruo=i(N),$u=n(N,"LI",{});var x4e=s($u);pee=n(x4e,"STRONG",{});var lDr=s(pee);Suo=r(lDr,"layoutlm"),lDr.forEach(t),Puo=r(x4e," \u2014 "),AP=n(x4e,"A",{href:!0});var iDr=s(AP);$uo=r(iDr,"LayoutLMForMaskedLM"),iDr.forEach(t),Iuo=r(x4e," (LayoutLM model)"),x4e.forEach(t),juo=i(N),Iu=n(N,"LI",{});var k4e=s(Iu);_ee=n(k4e,"STRONG",{});var dDr=s(_ee);Nuo=r(dDr,"longformer"),dDr.forEach(t),Duo=r(k4e," \u2014 "),LP=n(k4e,"A",{href:!0});var cDr=s(LP);quo=r(cDr,"LongformerForMaskedLM"),cDr.forEach(t),Guo=r(k4e," (Longformer model)"),k4e.forEach(t),Ouo=i(N),ju=n(N,"LI",{});var R4e=s(ju);uee=n(R4e,"STRONG",{});var fDr=s(uee);Xuo=r(fDr,"mbart"),fDr.forEach(t),zuo=r(R4e," \u2014 "),BP=n(R4e,"A",{href:!0});var mDr=s(BP);Vuo=r(mDr,"MBartForConditionalGeneration"),mDr.forEach(t),Wuo=r(R4e," (mBART model)"),R4e.forEach(t),Quo=i(N),Nu=n(N,"LI",{});var S4e=s(Nu);bee=n(S4e,"STRONG",{});var gDr=s(bee);Huo=r(gDr,"megatron-bert"),gDr.forEach(t),Uuo=r(S4e," \u2014 "),xP=n(S4e,"A",{href:!0});var hDr=s(xP);Juo=r(hDr,"MegatronBertForMaskedLM"),hDr.forEach(t),Yuo=r(S4e," (MegatronBert model)"),S4e.forEach(t),Kuo=i(N),Du=n(N,"LI",{});var P4e=s(Du);vee=n(P4e,"STRONG",{});var pDr=s(vee);Zuo=r(pDr,"mobilebert"),pDr.forEach(t),e5o=r(P4e," \u2014 "),kP=n(P4e,"A",{href:!0});var _Dr=s(kP);o5o=r(_Dr,"MobileBertForMaskedLM"),_Dr.forEach(t),r5o=r(P4e," (MobileBERT model)"),P4e.forEach(t),t5o=i(N),qu=n(N,"LI",{});var $4e=s(qu);Tee=n($4e,"STRONG",{});var uDr=s(Tee);a5o=r(uDr,"mpnet"),uDr.forEach(t),n5o=r($4e," \u2014 "),RP=n($4e,"A",{href:!0});var bDr=s(RP);s5o=r(bDr,"MPNetForMaskedLM"),bDr.forEach(t),l5o=r($4e," (MPNet model)"),$4e.forEach(t),i5o=i(N),Gu=n(N,"LI",{});var I4e=s(Gu);Fee=n(I4e,"STRONG",{});var vDr=s(Fee);d5o=r(vDr,"nystromformer"),vDr.forEach(t),c5o=r(I4e," \u2014 "),SP=n(I4e,"A",{href:!0});var TDr=s(SP);f5o=r(TDr,"NystromformerForMaskedLM"),TDr.forEach(t),m5o=r(I4e," (Nystromformer model)"),I4e.forEach(t),g5o=i(N),Ou=n(N,"LI",{});var j4e=s(Ou);Cee=n(j4e,"STRONG",{});var FDr=s(Cee);h5o=r(FDr,"perceiver"),FDr.forEach(t),p5o=r(j4e," \u2014 "),PP=n(j4e,"A",{href:!0});var CDr=s(PP);_5o=r(CDr,"PerceiverForMaskedLM"),CDr.forEach(t),u5o=r(j4e," (Perceiver model)"),j4e.forEach(t),b5o=i(N),Xu=n(N,"LI",{});var N4e=s(Xu);Mee=n(N4e,"STRONG",{});var MDr=s(Mee);v5o=r(MDr,"qdqbert"),MDr.forEach(t),T5o=r(N4e," \u2014 "),$P=n(N4e,"A",{href:!0});var EDr=s($P);F5o=r(EDr,"QDQBertForMaskedLM"),EDr.forEach(t),C5o=r(N4e," (QDQBert model)"),N4e.forEach(t),M5o=i(N),zu=n(N,"LI",{});var D4e=s(zu);Eee=n(D4e,"STRONG",{});var yDr=s(Eee);E5o=r(yDr,"reformer"),yDr.forEach(t),y5o=r(D4e," \u2014 "),IP=n(D4e,"A",{href:!0});var wDr=s(IP);w5o=r(wDr,"ReformerForMaskedLM"),wDr.forEach(t),A5o=r(D4e," (Reformer model)"),D4e.forEach(t),L5o=i(N),Vu=n(N,"LI",{});var q4e=s(Vu);yee=n(q4e,"STRONG",{});var ADr=s(yee);B5o=r(ADr,"rembert"),ADr.forEach(t),x5o=r(q4e," \u2014 "),jP=n(q4e,"A",{href:!0});var LDr=s(jP);k5o=r(LDr,"RemBertForMaskedLM"),LDr.forEach(t),R5o=r(q4e," (RemBERT model)"),q4e.forEach(t),S5o=i(N),Wu=n(N,"LI",{});var G4e=s(Wu);wee=n(G4e,"STRONG",{});var BDr=s(wee);P5o=r(BDr,"roberta"),BDr.forEach(t),$5o=r(G4e," \u2014 "),NP=n(G4e,"A",{href:!0});var xDr=s(NP);I5o=r(xDr,"RobertaForMaskedLM"),xDr.forEach(t),j5o=r(G4e," (RoBERTa model)"),G4e.forEach(t),N5o=i(N),Qu=n(N,"LI",{});var O4e=s(Qu);Aee=n(O4e,"STRONG",{});var kDr=s(Aee);D5o=r(kDr,"roformer"),kDr.forEach(t),q5o=r(O4e," \u2014 "),DP=n(O4e,"A",{href:!0});var RDr=s(DP);G5o=r(RDr,"RoFormerForMaskedLM"),RDr.forEach(t),O5o=r(O4e," (RoFormer model)"),O4e.forEach(t),X5o=i(N),Hu=n(N,"LI",{});var X4e=s(Hu);Lee=n(X4e,"STRONG",{});var SDr=s(Lee);z5o=r(SDr,"squeezebert"),SDr.forEach(t),V5o=r(X4e," \u2014 "),qP=n(X4e,"A",{href:!0});var PDr=s(qP);W5o=r(PDr,"SqueezeBertForMaskedLM"),PDr.forEach(t),Q5o=r(X4e," (SqueezeBERT model)"),X4e.forEach(t),H5o=i(N),Uu=n(N,"LI",{});var z4e=s(Uu);Bee=n(z4e,"STRONG",{});var $Dr=s(Bee);U5o=r($Dr,"tapas"),$Dr.forEach(t),J5o=r(z4e," \u2014 "),GP=n(z4e,"A",{href:!0});var IDr=s(GP);Y5o=r(IDr,"TapasForMaskedLM"),IDr.forEach(t),K5o=r(z4e," (TAPAS model)"),z4e.forEach(t),Z5o=i(N),Ju=n(N,"LI",{});var V4e=s(Ju);xee=n(V4e,"STRONG",{});var jDr=s(xee);e2o=r(jDr,"wav2vec2"),jDr.forEach(t),o2o=r(V4e," \u2014 "),kee=n(V4e,"CODE",{});var NDr=s(kee);r2o=r(NDr,"Wav2Vec2ForMaskedLM"),NDr.forEach(t),t2o=r(V4e,"(Wav2Vec2 model)"),V4e.forEach(t),a2o=i(N),Yu=n(N,"LI",{});var W4e=s(Yu);Ree=n(W4e,"STRONG",{});var DDr=s(Ree);n2o=r(DDr,"xlm"),DDr.forEach(t),s2o=r(W4e," \u2014 "),OP=n(W4e,"A",{href:!0});var qDr=s(OP);l2o=r(qDr,"XLMWithLMHeadModel"),qDr.forEach(t),i2o=r(W4e," (XLM model)"),W4e.forEach(t),d2o=i(N),Ku=n(N,"LI",{});var Q4e=s(Ku);See=n(Q4e,"STRONG",{});var GDr=s(See);c2o=r(GDr,"xlm-roberta"),GDr.forEach(t),f2o=r(Q4e," \u2014 "),XP=n(Q4e,"A",{href:!0});var ODr=s(XP);m2o=r(ODr,"XLMRobertaForMaskedLM"),ODr.forEach(t),g2o=r(Q4e," (XLM-RoBERTa model)"),Q4e.forEach(t),h2o=i(N),Zu=n(N,"LI",{});var H4e=s(Zu);Pee=n(H4e,"STRONG",{});var XDr=s(Pee);p2o=r(XDr,"xlm-roberta-xl"),XDr.forEach(t),_2o=r(H4e," \u2014 "),zP=n(H4e,"A",{href:!0});var zDr=s(zP);u2o=r(zDr,"XLMRobertaXLForMaskedLM"),zDr.forEach(t),b2o=r(H4e," (XLM-RoBERTa-XL model)"),H4e.forEach(t),v2o=i(N),e5=n(N,"LI",{});var U4e=s(e5);$ee=n(U4e,"STRONG",{});var VDr=s($ee);T2o=r(VDr,"yoso"),VDr.forEach(t),F2o=r(U4e," \u2014 "),VP=n(U4e,"A",{href:!0});var WDr=s(VP);C2o=r(WDr,"YosoForMaskedLM"),WDr.forEach(t),M2o=r(U4e," (YOSO model)"),U4e.forEach(t),N.forEach(t),E2o=i(It),o5=n(It,"P",{});var J4e=s(o5);y2o=r(J4e,"The model is set in evaluation mode by default using "),Iee=n(J4e,"CODE",{});var QDr=s(Iee);w2o=r(QDr,"model.eval()"),QDr.forEach(t),A2o=r(J4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jee=n(J4e,"CODE",{});var HDr=s(jee);L2o=r(HDr,"model.train()"),HDr.forEach(t),J4e.forEach(t),B2o=i(It),Nee=n(It,"P",{});var UDr=s(Nee);x2o=r(UDr,"Examples:"),UDr.forEach(t),k2o=i(It),m(c3.$$.fragment,It),It.forEach(t),Vs.forEach(t),S7e=i(d),Zi=n(d,"H2",{class:!0});var qBe=s(Zi);r5=n(qBe,"A",{id:!0,class:!0,href:!0});var JDr=s(r5);Dee=n(JDr,"SPAN",{});var YDr=s(Dee);m(f3.$$.fragment,YDr),YDr.forEach(t),JDr.forEach(t),R2o=i(qBe),qee=n(qBe,"SPAN",{});var KDr=s(qee);S2o=r(KDr,"AutoModelForSeq2SeqLM"),KDr.forEach(t),qBe.forEach(t),P7e=i(d),Uo=n(d,"DIV",{class:!0});var Qs=s(Uo);m(m3.$$.fragment,Qs),P2o=i(Qs),ed=n(Qs,"P",{});var lz=s(ed);$2o=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gee=n(lz,"CODE",{});var ZDr=s(Gee);I2o=r(ZDr,"from_pretrained()"),ZDr.forEach(t),j2o=r(lz,"class method or the "),Oee=n(lz,"CODE",{});var eqr=s(Oee);N2o=r(eqr,"from_config()"),eqr.forEach(t),D2o=r(lz,`class
method.`),lz.forEach(t),q2o=i(Qs),g3=n(Qs,"P",{});var GBe=s(g3);G2o=r(GBe,"This class cannot be instantiated directly using "),Xee=n(GBe,"CODE",{});var oqr=s(Xee);O2o=r(oqr,"__init__()"),oqr.forEach(t),X2o=r(GBe," (throws an error)."),GBe.forEach(t),z2o=i(Qs),Or=n(Qs,"DIV",{class:!0});var Hs=s(Or);m(h3.$$.fragment,Hs),V2o=i(Hs),zee=n(Hs,"P",{});var rqr=s(zee);W2o=r(rqr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rqr.forEach(t),Q2o=i(Hs),od=n(Hs,"P",{});var iz=s(od);H2o=r(iz,`Note:
Loading a model from its configuration file does `),Vee=n(iz,"STRONG",{});var tqr=s(Vee);U2o=r(tqr,"not"),tqr.forEach(t),J2o=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(iz,"CODE",{});var aqr=s(Wee);Y2o=r(aqr,"from_pretrained()"),aqr.forEach(t),K2o=r(iz,"to load the model weights."),iz.forEach(t),Z2o=i(Hs),Qee=n(Hs,"P",{});var nqr=s(Qee);e1o=r(nqr,"Examples:"),nqr.forEach(t),o1o=i(Hs),m(p3.$$.fragment,Hs),Hs.forEach(t),r1o=i(Qs),Pe=n(Qs,"DIV",{class:!0});var jt=s(Pe);m(_3.$$.fragment,jt),t1o=i(jt),Hee=n(jt,"P",{});var sqr=s(Hee);a1o=r(sqr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sqr.forEach(t),n1o=i(jt),Xa=n(jt,"P",{});var gM=s(Xa);s1o=r(gM,"The model class to instantiate is selected based on the "),Uee=n(gM,"CODE",{});var lqr=s(Uee);l1o=r(lqr,"model_type"),lqr.forEach(t),i1o=r(gM,` property of the config object (either
passed as an argument or loaded from `),Jee=n(gM,"CODE",{});var iqr=s(Jee);d1o=r(iqr,"pretrained_model_name_or_path"),iqr.forEach(t),c1o=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yee=n(gM,"CODE",{});var dqr=s(Yee);f1o=r(dqr,"pretrained_model_name_or_path"),dqr.forEach(t),m1o=r(gM,":"),gM.forEach(t),g1o=i(jt),ae=n(jt,"UL",{});var le=s(ae);t5=n(le,"LI",{});var Y4e=s(t5);Kee=n(Y4e,"STRONG",{});var cqr=s(Kee);h1o=r(cqr,"bart"),cqr.forEach(t),p1o=r(Y4e," \u2014 "),WP=n(Y4e,"A",{href:!0});var fqr=s(WP);_1o=r(fqr,"BartForConditionalGeneration"),fqr.forEach(t),u1o=r(Y4e," (BART model)"),Y4e.forEach(t),b1o=i(le),a5=n(le,"LI",{});var K4e=s(a5);Zee=n(K4e,"STRONG",{});var mqr=s(Zee);v1o=r(mqr,"bigbird_pegasus"),mqr.forEach(t),T1o=r(K4e," \u2014 "),QP=n(K4e,"A",{href:!0});var gqr=s(QP);F1o=r(gqr,"BigBirdPegasusForConditionalGeneration"),gqr.forEach(t),C1o=r(K4e," (BigBirdPegasus model)"),K4e.forEach(t),M1o=i(le),n5=n(le,"LI",{});var Z4e=s(n5);eoe=n(Z4e,"STRONG",{});var hqr=s(eoe);E1o=r(hqr,"blenderbot"),hqr.forEach(t),y1o=r(Z4e," \u2014 "),HP=n(Z4e,"A",{href:!0});var pqr=s(HP);w1o=r(pqr,"BlenderbotForConditionalGeneration"),pqr.forEach(t),A1o=r(Z4e," (Blenderbot model)"),Z4e.forEach(t),L1o=i(le),s5=n(le,"LI",{});var eMe=s(s5);ooe=n(eMe,"STRONG",{});var _qr=s(ooe);B1o=r(_qr,"blenderbot-small"),_qr.forEach(t),x1o=r(eMe," \u2014 "),UP=n(eMe,"A",{href:!0});var uqr=s(UP);k1o=r(uqr,"BlenderbotSmallForConditionalGeneration"),uqr.forEach(t),R1o=r(eMe," (BlenderbotSmall model)"),eMe.forEach(t),S1o=i(le),l5=n(le,"LI",{});var oMe=s(l5);roe=n(oMe,"STRONG",{});var bqr=s(roe);P1o=r(bqr,"encoder-decoder"),bqr.forEach(t),$1o=r(oMe," \u2014 "),JP=n(oMe,"A",{href:!0});var vqr=s(JP);I1o=r(vqr,"EncoderDecoderModel"),vqr.forEach(t),j1o=r(oMe," (Encoder decoder model)"),oMe.forEach(t),N1o=i(le),i5=n(le,"LI",{});var rMe=s(i5);toe=n(rMe,"STRONG",{});var Tqr=s(toe);D1o=r(Tqr,"fsmt"),Tqr.forEach(t),q1o=r(rMe," \u2014 "),YP=n(rMe,"A",{href:!0});var Fqr=s(YP);G1o=r(Fqr,"FSMTForConditionalGeneration"),Fqr.forEach(t),O1o=r(rMe," (FairSeq Machine-Translation model)"),rMe.forEach(t),X1o=i(le),d5=n(le,"LI",{});var tMe=s(d5);aoe=n(tMe,"STRONG",{});var Cqr=s(aoe);z1o=r(Cqr,"led"),Cqr.forEach(t),V1o=r(tMe," \u2014 "),KP=n(tMe,"A",{href:!0});var Mqr=s(KP);W1o=r(Mqr,"LEDForConditionalGeneration"),Mqr.forEach(t),Q1o=r(tMe," (LED model)"),tMe.forEach(t),H1o=i(le),c5=n(le,"LI",{});var aMe=s(c5);noe=n(aMe,"STRONG",{});var Eqr=s(noe);U1o=r(Eqr,"m2m_100"),Eqr.forEach(t),J1o=r(aMe," \u2014 "),ZP=n(aMe,"A",{href:!0});var yqr=s(ZP);Y1o=r(yqr,"M2M100ForConditionalGeneration"),yqr.forEach(t),K1o=r(aMe," (M2M100 model)"),aMe.forEach(t),Z1o=i(le),f5=n(le,"LI",{});var nMe=s(f5);soe=n(nMe,"STRONG",{});var wqr=s(soe);ebo=r(wqr,"marian"),wqr.forEach(t),obo=r(nMe," \u2014 "),e$=n(nMe,"A",{href:!0});var Aqr=s(e$);rbo=r(Aqr,"MarianMTModel"),Aqr.forEach(t),tbo=r(nMe," (Marian model)"),nMe.forEach(t),abo=i(le),m5=n(le,"LI",{});var sMe=s(m5);loe=n(sMe,"STRONG",{});var Lqr=s(loe);nbo=r(Lqr,"mbart"),Lqr.forEach(t),sbo=r(sMe," \u2014 "),o$=n(sMe,"A",{href:!0});var Bqr=s(o$);lbo=r(Bqr,"MBartForConditionalGeneration"),Bqr.forEach(t),ibo=r(sMe," (mBART model)"),sMe.forEach(t),dbo=i(le),g5=n(le,"LI",{});var lMe=s(g5);ioe=n(lMe,"STRONG",{});var xqr=s(ioe);cbo=r(xqr,"mt5"),xqr.forEach(t),fbo=r(lMe," \u2014 "),r$=n(lMe,"A",{href:!0});var kqr=s(r$);mbo=r(kqr,"MT5ForConditionalGeneration"),kqr.forEach(t),gbo=r(lMe," (mT5 model)"),lMe.forEach(t),hbo=i(le),h5=n(le,"LI",{});var iMe=s(h5);doe=n(iMe,"STRONG",{});var Rqr=s(doe);pbo=r(Rqr,"pegasus"),Rqr.forEach(t),_bo=r(iMe," \u2014 "),t$=n(iMe,"A",{href:!0});var Sqr=s(t$);ubo=r(Sqr,"PegasusForConditionalGeneration"),Sqr.forEach(t),bbo=r(iMe," (Pegasus model)"),iMe.forEach(t),vbo=i(le),p5=n(le,"LI",{});var dMe=s(p5);coe=n(dMe,"STRONG",{});var Pqr=s(coe);Tbo=r(Pqr,"plbart"),Pqr.forEach(t),Fbo=r(dMe," \u2014 "),a$=n(dMe,"A",{href:!0});var $qr=s(a$);Cbo=r($qr,"PLBartForConditionalGeneration"),$qr.forEach(t),Mbo=r(dMe," (PLBart model)"),dMe.forEach(t),Ebo=i(le),_5=n(le,"LI",{});var cMe=s(_5);foe=n(cMe,"STRONG",{});var Iqr=s(foe);ybo=r(Iqr,"prophetnet"),Iqr.forEach(t),wbo=r(cMe," \u2014 "),n$=n(cMe,"A",{href:!0});var jqr=s(n$);Abo=r(jqr,"ProphetNetForConditionalGeneration"),jqr.forEach(t),Lbo=r(cMe," (ProphetNet model)"),cMe.forEach(t),Bbo=i(le),u5=n(le,"LI",{});var fMe=s(u5);moe=n(fMe,"STRONG",{});var Nqr=s(moe);xbo=r(Nqr,"t5"),Nqr.forEach(t),kbo=r(fMe," \u2014 "),s$=n(fMe,"A",{href:!0});var Dqr=s(s$);Rbo=r(Dqr,"T5ForConditionalGeneration"),Dqr.forEach(t),Sbo=r(fMe," (T5 model)"),fMe.forEach(t),Pbo=i(le),b5=n(le,"LI",{});var mMe=s(b5);goe=n(mMe,"STRONG",{});var qqr=s(goe);$bo=r(qqr,"xlm-prophetnet"),qqr.forEach(t),Ibo=r(mMe," \u2014 "),l$=n(mMe,"A",{href:!0});var Gqr=s(l$);jbo=r(Gqr,"XLMProphetNetForConditionalGeneration"),Gqr.forEach(t),Nbo=r(mMe," (XLMProphetNet model)"),mMe.forEach(t),le.forEach(t),Dbo=i(jt),v5=n(jt,"P",{});var gMe=s(v5);qbo=r(gMe,"The model is set in evaluation mode by default using "),hoe=n(gMe,"CODE",{});var Oqr=s(hoe);Gbo=r(Oqr,"model.eval()"),Oqr.forEach(t),Obo=r(gMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),poe=n(gMe,"CODE",{});var Xqr=s(poe);Xbo=r(Xqr,"model.train()"),Xqr.forEach(t),gMe.forEach(t),zbo=i(jt),_oe=n(jt,"P",{});var zqr=s(_oe);Vbo=r(zqr,"Examples:"),zqr.forEach(t),Wbo=i(jt),m(u3.$$.fragment,jt),jt.forEach(t),Qs.forEach(t),$7e=i(d),rd=n(d,"H2",{class:!0});var OBe=s(rd);T5=n(OBe,"A",{id:!0,class:!0,href:!0});var Vqr=s(T5);uoe=n(Vqr,"SPAN",{});var Wqr=s(uoe);m(b3.$$.fragment,Wqr),Wqr.forEach(t),Vqr.forEach(t),Qbo=i(OBe),boe=n(OBe,"SPAN",{});var Qqr=s(boe);Hbo=r(Qqr,"AutoModelForSequenceClassification"),Qqr.forEach(t),OBe.forEach(t),I7e=i(d),Jo=n(d,"DIV",{class:!0});var Us=s(Jo);m(v3.$$.fragment,Us),Ubo=i(Us),td=n(Us,"P",{});var dz=s(td);Jbo=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),voe=n(dz,"CODE",{});var Hqr=s(voe);Ybo=r(Hqr,"from_pretrained()"),Hqr.forEach(t),Kbo=r(dz,"class method or the "),Toe=n(dz,"CODE",{});var Uqr=s(Toe);Zbo=r(Uqr,"from_config()"),Uqr.forEach(t),evo=r(dz,`class
method.`),dz.forEach(t),ovo=i(Us),T3=n(Us,"P",{});var XBe=s(T3);rvo=r(XBe,"This class cannot be instantiated directly using "),Foe=n(XBe,"CODE",{});var Jqr=s(Foe);tvo=r(Jqr,"__init__()"),Jqr.forEach(t),avo=r(XBe," (throws an error)."),XBe.forEach(t),nvo=i(Us),Xr=n(Us,"DIV",{class:!0});var Js=s(Xr);m(F3.$$.fragment,Js),svo=i(Js),Coe=n(Js,"P",{});var Yqr=s(Coe);lvo=r(Yqr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Yqr.forEach(t),ivo=i(Js),ad=n(Js,"P",{});var cz=s(ad);dvo=r(cz,`Note:
Loading a model from its configuration file does `),Moe=n(cz,"STRONG",{});var Kqr=s(Moe);cvo=r(Kqr,"not"),Kqr.forEach(t),fvo=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(cz,"CODE",{});var Zqr=s(Eoe);mvo=r(Zqr,"from_pretrained()"),Zqr.forEach(t),gvo=r(cz,"to load the model weights."),cz.forEach(t),hvo=i(Js),yoe=n(Js,"P",{});var eGr=s(yoe);pvo=r(eGr,"Examples:"),eGr.forEach(t),_vo=i(Js),m(C3.$$.fragment,Js),Js.forEach(t),uvo=i(Us),$e=n(Us,"DIV",{class:!0});var Nt=s($e);m(M3.$$.fragment,Nt),bvo=i(Nt),woe=n(Nt,"P",{});var oGr=s(woe);vvo=r(oGr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oGr.forEach(t),Tvo=i(Nt),za=n(Nt,"P",{});var hM=s(za);Fvo=r(hM,"The model class to instantiate is selected based on the "),Aoe=n(hM,"CODE",{});var rGr=s(Aoe);Cvo=r(rGr,"model_type"),rGr.forEach(t),Mvo=r(hM,` property of the config object (either
passed as an argument or loaded from `),Loe=n(hM,"CODE",{});var tGr=s(Loe);Evo=r(tGr,"pretrained_model_name_or_path"),tGr.forEach(t),yvo=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Boe=n(hM,"CODE",{});var aGr=s(Boe);wvo=r(aGr,"pretrained_model_name_or_path"),aGr.forEach(t),Avo=r(hM,":"),hM.forEach(t),Lvo=i(Nt),A=n(Nt,"UL",{});var L=s(A);F5=n(L,"LI",{});var hMe=s(F5);xoe=n(hMe,"STRONG",{});var nGr=s(xoe);Bvo=r(nGr,"albert"),nGr.forEach(t),xvo=r(hMe," \u2014 "),i$=n(hMe,"A",{href:!0});var sGr=s(i$);kvo=r(sGr,"AlbertForSequenceClassification"),sGr.forEach(t),Rvo=r(hMe," (ALBERT model)"),hMe.forEach(t),Svo=i(L),C5=n(L,"LI",{});var pMe=s(C5);koe=n(pMe,"STRONG",{});var lGr=s(koe);Pvo=r(lGr,"bart"),lGr.forEach(t),$vo=r(pMe," \u2014 "),d$=n(pMe,"A",{href:!0});var iGr=s(d$);Ivo=r(iGr,"BartForSequenceClassification"),iGr.forEach(t),jvo=r(pMe," (BART model)"),pMe.forEach(t),Nvo=i(L),M5=n(L,"LI",{});var _Me=s(M5);Roe=n(_Me,"STRONG",{});var dGr=s(Roe);Dvo=r(dGr,"bert"),dGr.forEach(t),qvo=r(_Me," \u2014 "),c$=n(_Me,"A",{href:!0});var cGr=s(c$);Gvo=r(cGr,"BertForSequenceClassification"),cGr.forEach(t),Ovo=r(_Me," (BERT model)"),_Me.forEach(t),Xvo=i(L),E5=n(L,"LI",{});var uMe=s(E5);Soe=n(uMe,"STRONG",{});var fGr=s(Soe);zvo=r(fGr,"big_bird"),fGr.forEach(t),Vvo=r(uMe," \u2014 "),f$=n(uMe,"A",{href:!0});var mGr=s(f$);Wvo=r(mGr,"BigBirdForSequenceClassification"),mGr.forEach(t),Qvo=r(uMe," (BigBird model)"),uMe.forEach(t),Hvo=i(L),y5=n(L,"LI",{});var bMe=s(y5);Poe=n(bMe,"STRONG",{});var gGr=s(Poe);Uvo=r(gGr,"bigbird_pegasus"),gGr.forEach(t),Jvo=r(bMe," \u2014 "),m$=n(bMe,"A",{href:!0});var hGr=s(m$);Yvo=r(hGr,"BigBirdPegasusForSequenceClassification"),hGr.forEach(t),Kvo=r(bMe," (BigBirdPegasus model)"),bMe.forEach(t),Zvo=i(L),w5=n(L,"LI",{});var vMe=s(w5);$oe=n(vMe,"STRONG",{});var pGr=s($oe);eTo=r(pGr,"camembert"),pGr.forEach(t),oTo=r(vMe," \u2014 "),g$=n(vMe,"A",{href:!0});var _Gr=s(g$);rTo=r(_Gr,"CamembertForSequenceClassification"),_Gr.forEach(t),tTo=r(vMe," (CamemBERT model)"),vMe.forEach(t),aTo=i(L),A5=n(L,"LI",{});var TMe=s(A5);Ioe=n(TMe,"STRONG",{});var uGr=s(Ioe);nTo=r(uGr,"canine"),uGr.forEach(t),sTo=r(TMe," \u2014 "),h$=n(TMe,"A",{href:!0});var bGr=s(h$);lTo=r(bGr,"CanineForSequenceClassification"),bGr.forEach(t),iTo=r(TMe," (Canine model)"),TMe.forEach(t),dTo=i(L),L5=n(L,"LI",{});var FMe=s(L5);joe=n(FMe,"STRONG",{});var vGr=s(joe);cTo=r(vGr,"convbert"),vGr.forEach(t),fTo=r(FMe," \u2014 "),p$=n(FMe,"A",{href:!0});var TGr=s(p$);mTo=r(TGr,"ConvBertForSequenceClassification"),TGr.forEach(t),gTo=r(FMe," (ConvBERT model)"),FMe.forEach(t),hTo=i(L),B5=n(L,"LI",{});var CMe=s(B5);Noe=n(CMe,"STRONG",{});var FGr=s(Noe);pTo=r(FGr,"ctrl"),FGr.forEach(t),_To=r(CMe," \u2014 "),_$=n(CMe,"A",{href:!0});var CGr=s(_$);uTo=r(CGr,"CTRLForSequenceClassification"),CGr.forEach(t),bTo=r(CMe," (CTRL model)"),CMe.forEach(t),vTo=i(L),x5=n(L,"LI",{});var MMe=s(x5);Doe=n(MMe,"STRONG",{});var MGr=s(Doe);TTo=r(MGr,"deberta"),MGr.forEach(t),FTo=r(MMe," \u2014 "),u$=n(MMe,"A",{href:!0});var EGr=s(u$);CTo=r(EGr,"DebertaForSequenceClassification"),EGr.forEach(t),MTo=r(MMe," (DeBERTa model)"),MMe.forEach(t),ETo=i(L),k5=n(L,"LI",{});var EMe=s(k5);qoe=n(EMe,"STRONG",{});var yGr=s(qoe);yTo=r(yGr,"deberta-v2"),yGr.forEach(t),wTo=r(EMe," \u2014 "),b$=n(EMe,"A",{href:!0});var wGr=s(b$);ATo=r(wGr,"DebertaV2ForSequenceClassification"),wGr.forEach(t),LTo=r(EMe," (DeBERTa-v2 model)"),EMe.forEach(t),BTo=i(L),R5=n(L,"LI",{});var yMe=s(R5);Goe=n(yMe,"STRONG",{});var AGr=s(Goe);xTo=r(AGr,"distilbert"),AGr.forEach(t),kTo=r(yMe," \u2014 "),v$=n(yMe,"A",{href:!0});var LGr=s(v$);RTo=r(LGr,"DistilBertForSequenceClassification"),LGr.forEach(t),STo=r(yMe," (DistilBERT model)"),yMe.forEach(t),PTo=i(L),S5=n(L,"LI",{});var wMe=s(S5);Ooe=n(wMe,"STRONG",{});var BGr=s(Ooe);$To=r(BGr,"electra"),BGr.forEach(t),ITo=r(wMe," \u2014 "),T$=n(wMe,"A",{href:!0});var xGr=s(T$);jTo=r(xGr,"ElectraForSequenceClassification"),xGr.forEach(t),NTo=r(wMe," (ELECTRA model)"),wMe.forEach(t),DTo=i(L),P5=n(L,"LI",{});var AMe=s(P5);Xoe=n(AMe,"STRONG",{});var kGr=s(Xoe);qTo=r(kGr,"flaubert"),kGr.forEach(t),GTo=r(AMe," \u2014 "),F$=n(AMe,"A",{href:!0});var RGr=s(F$);OTo=r(RGr,"FlaubertForSequenceClassification"),RGr.forEach(t),XTo=r(AMe," (FlauBERT model)"),AMe.forEach(t),zTo=i(L),$5=n(L,"LI",{});var LMe=s($5);zoe=n(LMe,"STRONG",{});var SGr=s(zoe);VTo=r(SGr,"fnet"),SGr.forEach(t),WTo=r(LMe," \u2014 "),C$=n(LMe,"A",{href:!0});var PGr=s(C$);QTo=r(PGr,"FNetForSequenceClassification"),PGr.forEach(t),HTo=r(LMe," (FNet model)"),LMe.forEach(t),UTo=i(L),I5=n(L,"LI",{});var BMe=s(I5);Voe=n(BMe,"STRONG",{});var $Gr=s(Voe);JTo=r($Gr,"funnel"),$Gr.forEach(t),YTo=r(BMe," \u2014 "),M$=n(BMe,"A",{href:!0});var IGr=s(M$);KTo=r(IGr,"FunnelForSequenceClassification"),IGr.forEach(t),ZTo=r(BMe," (Funnel Transformer model)"),BMe.forEach(t),eFo=i(L),j5=n(L,"LI",{});var xMe=s(j5);Woe=n(xMe,"STRONG",{});var jGr=s(Woe);oFo=r(jGr,"gpt2"),jGr.forEach(t),rFo=r(xMe," \u2014 "),E$=n(xMe,"A",{href:!0});var NGr=s(E$);tFo=r(NGr,"GPT2ForSequenceClassification"),NGr.forEach(t),aFo=r(xMe," (OpenAI GPT-2 model)"),xMe.forEach(t),nFo=i(L),N5=n(L,"LI",{});var kMe=s(N5);Qoe=n(kMe,"STRONG",{});var DGr=s(Qoe);sFo=r(DGr,"gpt_neo"),DGr.forEach(t),lFo=r(kMe," \u2014 "),y$=n(kMe,"A",{href:!0});var qGr=s(y$);iFo=r(qGr,"GPTNeoForSequenceClassification"),qGr.forEach(t),dFo=r(kMe," (GPT Neo model)"),kMe.forEach(t),cFo=i(L),D5=n(L,"LI",{});var RMe=s(D5);Hoe=n(RMe,"STRONG",{});var GGr=s(Hoe);fFo=r(GGr,"gptj"),GGr.forEach(t),mFo=r(RMe," \u2014 "),w$=n(RMe,"A",{href:!0});var OGr=s(w$);gFo=r(OGr,"GPTJForSequenceClassification"),OGr.forEach(t),hFo=r(RMe," (GPT-J model)"),RMe.forEach(t),pFo=i(L),q5=n(L,"LI",{});var SMe=s(q5);Uoe=n(SMe,"STRONG",{});var XGr=s(Uoe);_Fo=r(XGr,"ibert"),XGr.forEach(t),uFo=r(SMe," \u2014 "),A$=n(SMe,"A",{href:!0});var zGr=s(A$);bFo=r(zGr,"IBertForSequenceClassification"),zGr.forEach(t),vFo=r(SMe," (I-BERT model)"),SMe.forEach(t),TFo=i(L),G5=n(L,"LI",{});var PMe=s(G5);Joe=n(PMe,"STRONG",{});var VGr=s(Joe);FFo=r(VGr,"layoutlm"),VGr.forEach(t),CFo=r(PMe," \u2014 "),L$=n(PMe,"A",{href:!0});var WGr=s(L$);MFo=r(WGr,"LayoutLMForSequenceClassification"),WGr.forEach(t),EFo=r(PMe," (LayoutLM model)"),PMe.forEach(t),yFo=i(L),O5=n(L,"LI",{});var $Me=s(O5);Yoe=n($Me,"STRONG",{});var QGr=s(Yoe);wFo=r(QGr,"layoutlmv2"),QGr.forEach(t),AFo=r($Me," \u2014 "),B$=n($Me,"A",{href:!0});var HGr=s(B$);LFo=r(HGr,"LayoutLMv2ForSequenceClassification"),HGr.forEach(t),BFo=r($Me," (LayoutLMv2 model)"),$Me.forEach(t),xFo=i(L),X5=n(L,"LI",{});var IMe=s(X5);Koe=n(IMe,"STRONG",{});var UGr=s(Koe);kFo=r(UGr,"led"),UGr.forEach(t),RFo=r(IMe," \u2014 "),x$=n(IMe,"A",{href:!0});var JGr=s(x$);SFo=r(JGr,"LEDForSequenceClassification"),JGr.forEach(t),PFo=r(IMe," (LED model)"),IMe.forEach(t),$Fo=i(L),z5=n(L,"LI",{});var jMe=s(z5);Zoe=n(jMe,"STRONG",{});var YGr=s(Zoe);IFo=r(YGr,"longformer"),YGr.forEach(t),jFo=r(jMe," \u2014 "),k$=n(jMe,"A",{href:!0});var KGr=s(k$);NFo=r(KGr,"LongformerForSequenceClassification"),KGr.forEach(t),DFo=r(jMe," (Longformer model)"),jMe.forEach(t),qFo=i(L),V5=n(L,"LI",{});var NMe=s(V5);ere=n(NMe,"STRONG",{});var ZGr=s(ere);GFo=r(ZGr,"mbart"),ZGr.forEach(t),OFo=r(NMe," \u2014 "),R$=n(NMe,"A",{href:!0});var eOr=s(R$);XFo=r(eOr,"MBartForSequenceClassification"),eOr.forEach(t),zFo=r(NMe," (mBART model)"),NMe.forEach(t),VFo=i(L),W5=n(L,"LI",{});var DMe=s(W5);ore=n(DMe,"STRONG",{});var oOr=s(ore);WFo=r(oOr,"megatron-bert"),oOr.forEach(t),QFo=r(DMe," \u2014 "),S$=n(DMe,"A",{href:!0});var rOr=s(S$);HFo=r(rOr,"MegatronBertForSequenceClassification"),rOr.forEach(t),UFo=r(DMe," (MegatronBert model)"),DMe.forEach(t),JFo=i(L),Q5=n(L,"LI",{});var qMe=s(Q5);rre=n(qMe,"STRONG",{});var tOr=s(rre);YFo=r(tOr,"mobilebert"),tOr.forEach(t),KFo=r(qMe," \u2014 "),P$=n(qMe,"A",{href:!0});var aOr=s(P$);ZFo=r(aOr,"MobileBertForSequenceClassification"),aOr.forEach(t),e9o=r(qMe," (MobileBERT model)"),qMe.forEach(t),o9o=i(L),H5=n(L,"LI",{});var GMe=s(H5);tre=n(GMe,"STRONG",{});var nOr=s(tre);r9o=r(nOr,"mpnet"),nOr.forEach(t),t9o=r(GMe," \u2014 "),$$=n(GMe,"A",{href:!0});var sOr=s($$);a9o=r(sOr,"MPNetForSequenceClassification"),sOr.forEach(t),n9o=r(GMe," (MPNet model)"),GMe.forEach(t),s9o=i(L),U5=n(L,"LI",{});var OMe=s(U5);are=n(OMe,"STRONG",{});var lOr=s(are);l9o=r(lOr,"nystromformer"),lOr.forEach(t),i9o=r(OMe," \u2014 "),I$=n(OMe,"A",{href:!0});var iOr=s(I$);d9o=r(iOr,"NystromformerForSequenceClassification"),iOr.forEach(t),c9o=r(OMe," (Nystromformer model)"),OMe.forEach(t),f9o=i(L),J5=n(L,"LI",{});var XMe=s(J5);nre=n(XMe,"STRONG",{});var dOr=s(nre);m9o=r(dOr,"openai-gpt"),dOr.forEach(t),g9o=r(XMe," \u2014 "),j$=n(XMe,"A",{href:!0});var cOr=s(j$);h9o=r(cOr,"OpenAIGPTForSequenceClassification"),cOr.forEach(t),p9o=r(XMe," (OpenAI GPT model)"),XMe.forEach(t),_9o=i(L),Y5=n(L,"LI",{});var zMe=s(Y5);sre=n(zMe,"STRONG",{});var fOr=s(sre);u9o=r(fOr,"perceiver"),fOr.forEach(t),b9o=r(zMe," \u2014 "),N$=n(zMe,"A",{href:!0});var mOr=s(N$);v9o=r(mOr,"PerceiverForSequenceClassification"),mOr.forEach(t),T9o=r(zMe," (Perceiver model)"),zMe.forEach(t),F9o=i(L),K5=n(L,"LI",{});var VMe=s(K5);lre=n(VMe,"STRONG",{});var gOr=s(lre);C9o=r(gOr,"plbart"),gOr.forEach(t),M9o=r(VMe," \u2014 "),D$=n(VMe,"A",{href:!0});var hOr=s(D$);E9o=r(hOr,"PLBartForSequenceClassification"),hOr.forEach(t),y9o=r(VMe," (PLBart model)"),VMe.forEach(t),w9o=i(L),Z5=n(L,"LI",{});var WMe=s(Z5);ire=n(WMe,"STRONG",{});var pOr=s(ire);A9o=r(pOr,"qdqbert"),pOr.forEach(t),L9o=r(WMe," \u2014 "),q$=n(WMe,"A",{href:!0});var _Or=s(q$);B9o=r(_Or,"QDQBertForSequenceClassification"),_Or.forEach(t),x9o=r(WMe," (QDQBert model)"),WMe.forEach(t),k9o=i(L),e2=n(L,"LI",{});var QMe=s(e2);dre=n(QMe,"STRONG",{});var uOr=s(dre);R9o=r(uOr,"reformer"),uOr.forEach(t),S9o=r(QMe," \u2014 "),G$=n(QMe,"A",{href:!0});var bOr=s(G$);P9o=r(bOr,"ReformerForSequenceClassification"),bOr.forEach(t),$9o=r(QMe," (Reformer model)"),QMe.forEach(t),I9o=i(L),o2=n(L,"LI",{});var HMe=s(o2);cre=n(HMe,"STRONG",{});var vOr=s(cre);j9o=r(vOr,"rembert"),vOr.forEach(t),N9o=r(HMe," \u2014 "),O$=n(HMe,"A",{href:!0});var TOr=s(O$);D9o=r(TOr,"RemBertForSequenceClassification"),TOr.forEach(t),q9o=r(HMe," (RemBERT model)"),HMe.forEach(t),G9o=i(L),r2=n(L,"LI",{});var UMe=s(r2);fre=n(UMe,"STRONG",{});var FOr=s(fre);O9o=r(FOr,"roberta"),FOr.forEach(t),X9o=r(UMe," \u2014 "),X$=n(UMe,"A",{href:!0});var COr=s(X$);z9o=r(COr,"RobertaForSequenceClassification"),COr.forEach(t),V9o=r(UMe," (RoBERTa model)"),UMe.forEach(t),W9o=i(L),t2=n(L,"LI",{});var JMe=s(t2);mre=n(JMe,"STRONG",{});var MOr=s(mre);Q9o=r(MOr,"roformer"),MOr.forEach(t),H9o=r(JMe," \u2014 "),z$=n(JMe,"A",{href:!0});var EOr=s(z$);U9o=r(EOr,"RoFormerForSequenceClassification"),EOr.forEach(t),J9o=r(JMe," (RoFormer model)"),JMe.forEach(t),Y9o=i(L),a2=n(L,"LI",{});var YMe=s(a2);gre=n(YMe,"STRONG",{});var yOr=s(gre);K9o=r(yOr,"squeezebert"),yOr.forEach(t),Z9o=r(YMe," \u2014 "),V$=n(YMe,"A",{href:!0});var wOr=s(V$);eCo=r(wOr,"SqueezeBertForSequenceClassification"),wOr.forEach(t),oCo=r(YMe," (SqueezeBERT model)"),YMe.forEach(t),rCo=i(L),n2=n(L,"LI",{});var KMe=s(n2);hre=n(KMe,"STRONG",{});var AOr=s(hre);tCo=r(AOr,"tapas"),AOr.forEach(t),aCo=r(KMe," \u2014 "),W$=n(KMe,"A",{href:!0});var LOr=s(W$);nCo=r(LOr,"TapasForSequenceClassification"),LOr.forEach(t),sCo=r(KMe," (TAPAS model)"),KMe.forEach(t),lCo=i(L),s2=n(L,"LI",{});var ZMe=s(s2);pre=n(ZMe,"STRONG",{});var BOr=s(pre);iCo=r(BOr,"transfo-xl"),BOr.forEach(t),dCo=r(ZMe," \u2014 "),Q$=n(ZMe,"A",{href:!0});var xOr=s(Q$);cCo=r(xOr,"TransfoXLForSequenceClassification"),xOr.forEach(t),fCo=r(ZMe," (Transformer-XL model)"),ZMe.forEach(t),mCo=i(L),l2=n(L,"LI",{});var eEe=s(l2);_re=n(eEe,"STRONG",{});var kOr=s(_re);gCo=r(kOr,"xlm"),kOr.forEach(t),hCo=r(eEe," \u2014 "),H$=n(eEe,"A",{href:!0});var ROr=s(H$);pCo=r(ROr,"XLMForSequenceClassification"),ROr.forEach(t),_Co=r(eEe," (XLM model)"),eEe.forEach(t),uCo=i(L),i2=n(L,"LI",{});var oEe=s(i2);ure=n(oEe,"STRONG",{});var SOr=s(ure);bCo=r(SOr,"xlm-roberta"),SOr.forEach(t),vCo=r(oEe," \u2014 "),U$=n(oEe,"A",{href:!0});var POr=s(U$);TCo=r(POr,"XLMRobertaForSequenceClassification"),POr.forEach(t),FCo=r(oEe," (XLM-RoBERTa model)"),oEe.forEach(t),CCo=i(L),d2=n(L,"LI",{});var rEe=s(d2);bre=n(rEe,"STRONG",{});var $Or=s(bre);MCo=r($Or,"xlm-roberta-xl"),$Or.forEach(t),ECo=r(rEe," \u2014 "),J$=n(rEe,"A",{href:!0});var IOr=s(J$);yCo=r(IOr,"XLMRobertaXLForSequenceClassification"),IOr.forEach(t),wCo=r(rEe," (XLM-RoBERTa-XL model)"),rEe.forEach(t),ACo=i(L),c2=n(L,"LI",{});var tEe=s(c2);vre=n(tEe,"STRONG",{});var jOr=s(vre);LCo=r(jOr,"xlnet"),jOr.forEach(t),BCo=r(tEe," \u2014 "),Y$=n(tEe,"A",{href:!0});var NOr=s(Y$);xCo=r(NOr,"XLNetForSequenceClassification"),NOr.forEach(t),kCo=r(tEe," (XLNet model)"),tEe.forEach(t),RCo=i(L),f2=n(L,"LI",{});var aEe=s(f2);Tre=n(aEe,"STRONG",{});var DOr=s(Tre);SCo=r(DOr,"yoso"),DOr.forEach(t),PCo=r(aEe," \u2014 "),K$=n(aEe,"A",{href:!0});var qOr=s(K$);$Co=r(qOr,"YosoForSequenceClassification"),qOr.forEach(t),ICo=r(aEe," (YOSO model)"),aEe.forEach(t),L.forEach(t),jCo=i(Nt),m2=n(Nt,"P",{});var nEe=s(m2);NCo=r(nEe,"The model is set in evaluation mode by default using "),Fre=n(nEe,"CODE",{});var GOr=s(Fre);DCo=r(GOr,"model.eval()"),GOr.forEach(t),qCo=r(nEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cre=n(nEe,"CODE",{});var OOr=s(Cre);GCo=r(OOr,"model.train()"),OOr.forEach(t),nEe.forEach(t),OCo=i(Nt),Mre=n(Nt,"P",{});var XOr=s(Mre);XCo=r(XOr,"Examples:"),XOr.forEach(t),zCo=i(Nt),m(E3.$$.fragment,Nt),Nt.forEach(t),Us.forEach(t),j7e=i(d),nd=n(d,"H2",{class:!0});var zBe=s(nd);g2=n(zBe,"A",{id:!0,class:!0,href:!0});var zOr=s(g2);Ere=n(zOr,"SPAN",{});var VOr=s(Ere);m(y3.$$.fragment,VOr),VOr.forEach(t),zOr.forEach(t),VCo=i(zBe),yre=n(zBe,"SPAN",{});var WOr=s(yre);WCo=r(WOr,"AutoModelForMultipleChoice"),WOr.forEach(t),zBe.forEach(t),N7e=i(d),Yo=n(d,"DIV",{class:!0});var Ys=s(Yo);m(w3.$$.fragment,Ys),QCo=i(Ys),sd=n(Ys,"P",{});var fz=s(sd);HCo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wre=n(fz,"CODE",{});var QOr=s(wre);UCo=r(QOr,"from_pretrained()"),QOr.forEach(t),JCo=r(fz,"class method or the "),Are=n(fz,"CODE",{});var HOr=s(Are);YCo=r(HOr,"from_config()"),HOr.forEach(t),KCo=r(fz,`class
method.`),fz.forEach(t),ZCo=i(Ys),A3=n(Ys,"P",{});var VBe=s(A3);e4o=r(VBe,"This class cannot be instantiated directly using "),Lre=n(VBe,"CODE",{});var UOr=s(Lre);o4o=r(UOr,"__init__()"),UOr.forEach(t),r4o=r(VBe," (throws an error)."),VBe.forEach(t),t4o=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(L3.$$.fragment,Ks),a4o=i(Ks),Bre=n(Ks,"P",{});var JOr=s(Bre);n4o=r(JOr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JOr.forEach(t),s4o=i(Ks),ld=n(Ks,"P",{});var mz=s(ld);l4o=r(mz,`Note:
Loading a model from its configuration file does `),xre=n(mz,"STRONG",{});var YOr=s(xre);i4o=r(YOr,"not"),YOr.forEach(t),d4o=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),kre=n(mz,"CODE",{});var KOr=s(kre);c4o=r(KOr,"from_pretrained()"),KOr.forEach(t),f4o=r(mz,"to load the model weights."),mz.forEach(t),m4o=i(Ks),Rre=n(Ks,"P",{});var ZOr=s(Rre);g4o=r(ZOr,"Examples:"),ZOr.forEach(t),h4o=i(Ks),m(B3.$$.fragment,Ks),Ks.forEach(t),p4o=i(Ys),Ie=n(Ys,"DIV",{class:!0});var Dt=s(Ie);m(x3.$$.fragment,Dt),_4o=i(Dt),Sre=n(Dt,"P",{});var eXr=s(Sre);u4o=r(eXr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eXr.forEach(t),b4o=i(Dt),Va=n(Dt,"P",{});var pM=s(Va);v4o=r(pM,"The model class to instantiate is selected based on the "),Pre=n(pM,"CODE",{});var oXr=s(Pre);T4o=r(oXr,"model_type"),oXr.forEach(t),F4o=r(pM,` property of the config object (either
passed as an argument or loaded from `),$re=n(pM,"CODE",{});var rXr=s($re);C4o=r(rXr,"pretrained_model_name_or_path"),rXr.forEach(t),M4o=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ire=n(pM,"CODE",{});var tXr=s(Ire);E4o=r(tXr,"pretrained_model_name_or_path"),tXr.forEach(t),y4o=r(pM,":"),pM.forEach(t),w4o=i(Dt),G=n(Dt,"UL",{});var O=s(G);h2=n(O,"LI",{});var sEe=s(h2);jre=n(sEe,"STRONG",{});var aXr=s(jre);A4o=r(aXr,"albert"),aXr.forEach(t),L4o=r(sEe," \u2014 "),Z$=n(sEe,"A",{href:!0});var nXr=s(Z$);B4o=r(nXr,"AlbertForMultipleChoice"),nXr.forEach(t),x4o=r(sEe," (ALBERT model)"),sEe.forEach(t),k4o=i(O),p2=n(O,"LI",{});var lEe=s(p2);Nre=n(lEe,"STRONG",{});var sXr=s(Nre);R4o=r(sXr,"bert"),sXr.forEach(t),S4o=r(lEe," \u2014 "),eI=n(lEe,"A",{href:!0});var lXr=s(eI);P4o=r(lXr,"BertForMultipleChoice"),lXr.forEach(t),$4o=r(lEe," (BERT model)"),lEe.forEach(t),I4o=i(O),_2=n(O,"LI",{});var iEe=s(_2);Dre=n(iEe,"STRONG",{});var iXr=s(Dre);j4o=r(iXr,"big_bird"),iXr.forEach(t),N4o=r(iEe," \u2014 "),oI=n(iEe,"A",{href:!0});var dXr=s(oI);D4o=r(dXr,"BigBirdForMultipleChoice"),dXr.forEach(t),q4o=r(iEe," (BigBird model)"),iEe.forEach(t),G4o=i(O),u2=n(O,"LI",{});var dEe=s(u2);qre=n(dEe,"STRONG",{});var cXr=s(qre);O4o=r(cXr,"camembert"),cXr.forEach(t),X4o=r(dEe," \u2014 "),rI=n(dEe,"A",{href:!0});var fXr=s(rI);z4o=r(fXr,"CamembertForMultipleChoice"),fXr.forEach(t),V4o=r(dEe," (CamemBERT model)"),dEe.forEach(t),W4o=i(O),b2=n(O,"LI",{});var cEe=s(b2);Gre=n(cEe,"STRONG",{});var mXr=s(Gre);Q4o=r(mXr,"canine"),mXr.forEach(t),H4o=r(cEe," \u2014 "),tI=n(cEe,"A",{href:!0});var gXr=s(tI);U4o=r(gXr,"CanineForMultipleChoice"),gXr.forEach(t),J4o=r(cEe," (Canine model)"),cEe.forEach(t),Y4o=i(O),v2=n(O,"LI",{});var fEe=s(v2);Ore=n(fEe,"STRONG",{});var hXr=s(Ore);K4o=r(hXr,"convbert"),hXr.forEach(t),Z4o=r(fEe," \u2014 "),aI=n(fEe,"A",{href:!0});var pXr=s(aI);eMo=r(pXr,"ConvBertForMultipleChoice"),pXr.forEach(t),oMo=r(fEe," (ConvBERT model)"),fEe.forEach(t),rMo=i(O),T2=n(O,"LI",{});var mEe=s(T2);Xre=n(mEe,"STRONG",{});var _Xr=s(Xre);tMo=r(_Xr,"distilbert"),_Xr.forEach(t),aMo=r(mEe," \u2014 "),nI=n(mEe,"A",{href:!0});var uXr=s(nI);nMo=r(uXr,"DistilBertForMultipleChoice"),uXr.forEach(t),sMo=r(mEe," (DistilBERT model)"),mEe.forEach(t),lMo=i(O),F2=n(O,"LI",{});var gEe=s(F2);zre=n(gEe,"STRONG",{});var bXr=s(zre);iMo=r(bXr,"electra"),bXr.forEach(t),dMo=r(gEe," \u2014 "),sI=n(gEe,"A",{href:!0});var vXr=s(sI);cMo=r(vXr,"ElectraForMultipleChoice"),vXr.forEach(t),fMo=r(gEe," (ELECTRA model)"),gEe.forEach(t),mMo=i(O),C2=n(O,"LI",{});var hEe=s(C2);Vre=n(hEe,"STRONG",{});var TXr=s(Vre);gMo=r(TXr,"flaubert"),TXr.forEach(t),hMo=r(hEe," \u2014 "),lI=n(hEe,"A",{href:!0});var FXr=s(lI);pMo=r(FXr,"FlaubertForMultipleChoice"),FXr.forEach(t),_Mo=r(hEe," (FlauBERT model)"),hEe.forEach(t),uMo=i(O),M2=n(O,"LI",{});var pEe=s(M2);Wre=n(pEe,"STRONG",{});var CXr=s(Wre);bMo=r(CXr,"fnet"),CXr.forEach(t),vMo=r(pEe," \u2014 "),iI=n(pEe,"A",{href:!0});var MXr=s(iI);TMo=r(MXr,"FNetForMultipleChoice"),MXr.forEach(t),FMo=r(pEe," (FNet model)"),pEe.forEach(t),CMo=i(O),E2=n(O,"LI",{});var _Ee=s(E2);Qre=n(_Ee,"STRONG",{});var EXr=s(Qre);MMo=r(EXr,"funnel"),EXr.forEach(t),EMo=r(_Ee," \u2014 "),dI=n(_Ee,"A",{href:!0});var yXr=s(dI);yMo=r(yXr,"FunnelForMultipleChoice"),yXr.forEach(t),wMo=r(_Ee," (Funnel Transformer model)"),_Ee.forEach(t),AMo=i(O),y2=n(O,"LI",{});var uEe=s(y2);Hre=n(uEe,"STRONG",{});var wXr=s(Hre);LMo=r(wXr,"ibert"),wXr.forEach(t),BMo=r(uEe," \u2014 "),cI=n(uEe,"A",{href:!0});var AXr=s(cI);xMo=r(AXr,"IBertForMultipleChoice"),AXr.forEach(t),kMo=r(uEe," (I-BERT model)"),uEe.forEach(t),RMo=i(O),w2=n(O,"LI",{});var bEe=s(w2);Ure=n(bEe,"STRONG",{});var LXr=s(Ure);SMo=r(LXr,"longformer"),LXr.forEach(t),PMo=r(bEe," \u2014 "),fI=n(bEe,"A",{href:!0});var BXr=s(fI);$Mo=r(BXr,"LongformerForMultipleChoice"),BXr.forEach(t),IMo=r(bEe," (Longformer model)"),bEe.forEach(t),jMo=i(O),A2=n(O,"LI",{});var vEe=s(A2);Jre=n(vEe,"STRONG",{});var xXr=s(Jre);NMo=r(xXr,"megatron-bert"),xXr.forEach(t),DMo=r(vEe," \u2014 "),mI=n(vEe,"A",{href:!0});var kXr=s(mI);qMo=r(kXr,"MegatronBertForMultipleChoice"),kXr.forEach(t),GMo=r(vEe," (MegatronBert model)"),vEe.forEach(t),OMo=i(O),L2=n(O,"LI",{});var TEe=s(L2);Yre=n(TEe,"STRONG",{});var RXr=s(Yre);XMo=r(RXr,"mobilebert"),RXr.forEach(t),zMo=r(TEe," \u2014 "),gI=n(TEe,"A",{href:!0});var SXr=s(gI);VMo=r(SXr,"MobileBertForMultipleChoice"),SXr.forEach(t),WMo=r(TEe," (MobileBERT model)"),TEe.forEach(t),QMo=i(O),B2=n(O,"LI",{});var FEe=s(B2);Kre=n(FEe,"STRONG",{});var PXr=s(Kre);HMo=r(PXr,"mpnet"),PXr.forEach(t),UMo=r(FEe," \u2014 "),hI=n(FEe,"A",{href:!0});var $Xr=s(hI);JMo=r($Xr,"MPNetForMultipleChoice"),$Xr.forEach(t),YMo=r(FEe," (MPNet model)"),FEe.forEach(t),KMo=i(O),x2=n(O,"LI",{});var CEe=s(x2);Zre=n(CEe,"STRONG",{});var IXr=s(Zre);ZMo=r(IXr,"nystromformer"),IXr.forEach(t),eEo=r(CEe," \u2014 "),pI=n(CEe,"A",{href:!0});var jXr=s(pI);oEo=r(jXr,"NystromformerForMultipleChoice"),jXr.forEach(t),rEo=r(CEe," (Nystromformer model)"),CEe.forEach(t),tEo=i(O),k2=n(O,"LI",{});var MEe=s(k2);ete=n(MEe,"STRONG",{});var NXr=s(ete);aEo=r(NXr,"qdqbert"),NXr.forEach(t),nEo=r(MEe," \u2014 "),_I=n(MEe,"A",{href:!0});var DXr=s(_I);sEo=r(DXr,"QDQBertForMultipleChoice"),DXr.forEach(t),lEo=r(MEe," (QDQBert model)"),MEe.forEach(t),iEo=i(O),R2=n(O,"LI",{});var EEe=s(R2);ote=n(EEe,"STRONG",{});var qXr=s(ote);dEo=r(qXr,"rembert"),qXr.forEach(t),cEo=r(EEe," \u2014 "),uI=n(EEe,"A",{href:!0});var GXr=s(uI);fEo=r(GXr,"RemBertForMultipleChoice"),GXr.forEach(t),mEo=r(EEe," (RemBERT model)"),EEe.forEach(t),gEo=i(O),S2=n(O,"LI",{});var yEe=s(S2);rte=n(yEe,"STRONG",{});var OXr=s(rte);hEo=r(OXr,"roberta"),OXr.forEach(t),pEo=r(yEe," \u2014 "),bI=n(yEe,"A",{href:!0});var XXr=s(bI);_Eo=r(XXr,"RobertaForMultipleChoice"),XXr.forEach(t),uEo=r(yEe," (RoBERTa model)"),yEe.forEach(t),bEo=i(O),P2=n(O,"LI",{});var wEe=s(P2);tte=n(wEe,"STRONG",{});var zXr=s(tte);vEo=r(zXr,"roformer"),zXr.forEach(t),TEo=r(wEe," \u2014 "),vI=n(wEe,"A",{href:!0});var VXr=s(vI);FEo=r(VXr,"RoFormerForMultipleChoice"),VXr.forEach(t),CEo=r(wEe," (RoFormer model)"),wEe.forEach(t),MEo=i(O),$2=n(O,"LI",{});var AEe=s($2);ate=n(AEe,"STRONG",{});var WXr=s(ate);EEo=r(WXr,"squeezebert"),WXr.forEach(t),yEo=r(AEe," \u2014 "),TI=n(AEe,"A",{href:!0});var QXr=s(TI);wEo=r(QXr,"SqueezeBertForMultipleChoice"),QXr.forEach(t),AEo=r(AEe," (SqueezeBERT model)"),AEe.forEach(t),LEo=i(O),I2=n(O,"LI",{});var LEe=s(I2);nte=n(LEe,"STRONG",{});var HXr=s(nte);BEo=r(HXr,"xlm"),HXr.forEach(t),xEo=r(LEe," \u2014 "),FI=n(LEe,"A",{href:!0});var UXr=s(FI);kEo=r(UXr,"XLMForMultipleChoice"),UXr.forEach(t),REo=r(LEe," (XLM model)"),LEe.forEach(t),SEo=i(O),j2=n(O,"LI",{});var BEe=s(j2);ste=n(BEe,"STRONG",{});var JXr=s(ste);PEo=r(JXr,"xlm-roberta"),JXr.forEach(t),$Eo=r(BEe," \u2014 "),CI=n(BEe,"A",{href:!0});var YXr=s(CI);IEo=r(YXr,"XLMRobertaForMultipleChoice"),YXr.forEach(t),jEo=r(BEe," (XLM-RoBERTa model)"),BEe.forEach(t),NEo=i(O),N2=n(O,"LI",{});var xEe=s(N2);lte=n(xEe,"STRONG",{});var KXr=s(lte);DEo=r(KXr,"xlm-roberta-xl"),KXr.forEach(t),qEo=r(xEe," \u2014 "),MI=n(xEe,"A",{href:!0});var ZXr=s(MI);GEo=r(ZXr,"XLMRobertaXLForMultipleChoice"),ZXr.forEach(t),OEo=r(xEe," (XLM-RoBERTa-XL model)"),xEe.forEach(t),XEo=i(O),D2=n(O,"LI",{});var kEe=s(D2);ite=n(kEe,"STRONG",{});var ezr=s(ite);zEo=r(ezr,"xlnet"),ezr.forEach(t),VEo=r(kEe," \u2014 "),EI=n(kEe,"A",{href:!0});var ozr=s(EI);WEo=r(ozr,"XLNetForMultipleChoice"),ozr.forEach(t),QEo=r(kEe," (XLNet model)"),kEe.forEach(t),HEo=i(O),q2=n(O,"LI",{});var REe=s(q2);dte=n(REe,"STRONG",{});var rzr=s(dte);UEo=r(rzr,"yoso"),rzr.forEach(t),JEo=r(REe," \u2014 "),yI=n(REe,"A",{href:!0});var tzr=s(yI);YEo=r(tzr,"YosoForMultipleChoice"),tzr.forEach(t),KEo=r(REe," (YOSO model)"),REe.forEach(t),O.forEach(t),ZEo=i(Dt),G2=n(Dt,"P",{});var SEe=s(G2);e3o=r(SEe,"The model is set in evaluation mode by default using "),cte=n(SEe,"CODE",{});var azr=s(cte);o3o=r(azr,"model.eval()"),azr.forEach(t),r3o=r(SEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=n(SEe,"CODE",{});var nzr=s(fte);t3o=r(nzr,"model.train()"),nzr.forEach(t),SEe.forEach(t),a3o=i(Dt),mte=n(Dt,"P",{});var szr=s(mte);n3o=r(szr,"Examples:"),szr.forEach(t),s3o=i(Dt),m(k3.$$.fragment,Dt),Dt.forEach(t),Ys.forEach(t),D7e=i(d),id=n(d,"H2",{class:!0});var WBe=s(id);O2=n(WBe,"A",{id:!0,class:!0,href:!0});var lzr=s(O2);gte=n(lzr,"SPAN",{});var izr=s(gte);m(R3.$$.fragment,izr),izr.forEach(t),lzr.forEach(t),l3o=i(WBe),hte=n(WBe,"SPAN",{});var dzr=s(hte);i3o=r(dzr,"AutoModelForNextSentencePrediction"),dzr.forEach(t),WBe.forEach(t),q7e=i(d),Ko=n(d,"DIV",{class:!0});var Zs=s(Ko);m(S3.$$.fragment,Zs),d3o=i(Zs),dd=n(Zs,"P",{});var gz=s(dd);c3o=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pte=n(gz,"CODE",{});var czr=s(pte);f3o=r(czr,"from_pretrained()"),czr.forEach(t),m3o=r(gz,"class method or the "),_te=n(gz,"CODE",{});var fzr=s(_te);g3o=r(fzr,"from_config()"),fzr.forEach(t),h3o=r(gz,`class
method.`),gz.forEach(t),p3o=i(Zs),P3=n(Zs,"P",{});var QBe=s(P3);_3o=r(QBe,"This class cannot be instantiated directly using "),ute=n(QBe,"CODE",{});var mzr=s(ute);u3o=r(mzr,"__init__()"),mzr.forEach(t),b3o=r(QBe," (throws an error)."),QBe.forEach(t),v3o=i(Zs),Vr=n(Zs,"DIV",{class:!0});var el=s(Vr);m($3.$$.fragment,el),T3o=i(el),bte=n(el,"P",{});var gzr=s(bte);F3o=r(gzr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gzr.forEach(t),C3o=i(el),cd=n(el,"P",{});var hz=s(cd);M3o=r(hz,`Note:
Loading a model from its configuration file does `),vte=n(hz,"STRONG",{});var hzr=s(vte);E3o=r(hzr,"not"),hzr.forEach(t),y3o=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tte=n(hz,"CODE",{});var pzr=s(Tte);w3o=r(pzr,"from_pretrained()"),pzr.forEach(t),A3o=r(hz,"to load the model weights."),hz.forEach(t),L3o=i(el),Fte=n(el,"P",{});var _zr=s(Fte);B3o=r(_zr,"Examples:"),_zr.forEach(t),x3o=i(el),m(I3.$$.fragment,el),el.forEach(t),k3o=i(Zs),je=n(Zs,"DIV",{class:!0});var qt=s(je);m(j3.$$.fragment,qt),R3o=i(qt),Cte=n(qt,"P",{});var uzr=s(Cte);S3o=r(uzr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uzr.forEach(t),P3o=i(qt),Wa=n(qt,"P",{});var _M=s(Wa);$3o=r(_M,"The model class to instantiate is selected based on the "),Mte=n(_M,"CODE",{});var bzr=s(Mte);I3o=r(bzr,"model_type"),bzr.forEach(t),j3o=r(_M,` property of the config object (either
passed as an argument or loaded from `),Ete=n(_M,"CODE",{});var vzr=s(Ete);N3o=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),D3o=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yte=n(_M,"CODE",{});var Tzr=s(yte);q3o=r(Tzr,"pretrained_model_name_or_path"),Tzr.forEach(t),G3o=r(_M,":"),_M.forEach(t),O3o=i(qt),na=n(qt,"UL",{});var ol=s(na);X2=n(ol,"LI",{});var PEe=s(X2);wte=n(PEe,"STRONG",{});var Fzr=s(wte);X3o=r(Fzr,"bert"),Fzr.forEach(t),z3o=r(PEe," \u2014 "),wI=n(PEe,"A",{href:!0});var Czr=s(wI);V3o=r(Czr,"BertForNextSentencePrediction"),Czr.forEach(t),W3o=r(PEe," (BERT model)"),PEe.forEach(t),Q3o=i(ol),z2=n(ol,"LI",{});var $Ee=s(z2);Ate=n($Ee,"STRONG",{});var Mzr=s(Ate);H3o=r(Mzr,"fnet"),Mzr.forEach(t),U3o=r($Ee," \u2014 "),AI=n($Ee,"A",{href:!0});var Ezr=s(AI);J3o=r(Ezr,"FNetForNextSentencePrediction"),Ezr.forEach(t),Y3o=r($Ee," (FNet model)"),$Ee.forEach(t),K3o=i(ol),V2=n(ol,"LI",{});var IEe=s(V2);Lte=n(IEe,"STRONG",{});var yzr=s(Lte);Z3o=r(yzr,"megatron-bert"),yzr.forEach(t),eyo=r(IEe," \u2014 "),LI=n(IEe,"A",{href:!0});var wzr=s(LI);oyo=r(wzr,"MegatronBertForNextSentencePrediction"),wzr.forEach(t),ryo=r(IEe," (MegatronBert model)"),IEe.forEach(t),tyo=i(ol),W2=n(ol,"LI",{});var jEe=s(W2);Bte=n(jEe,"STRONG",{});var Azr=s(Bte);ayo=r(Azr,"mobilebert"),Azr.forEach(t),nyo=r(jEe," \u2014 "),BI=n(jEe,"A",{href:!0});var Lzr=s(BI);syo=r(Lzr,"MobileBertForNextSentencePrediction"),Lzr.forEach(t),lyo=r(jEe," (MobileBERT model)"),jEe.forEach(t),iyo=i(ol),Q2=n(ol,"LI",{});var NEe=s(Q2);xte=n(NEe,"STRONG",{});var Bzr=s(xte);dyo=r(Bzr,"qdqbert"),Bzr.forEach(t),cyo=r(NEe," \u2014 "),xI=n(NEe,"A",{href:!0});var xzr=s(xI);fyo=r(xzr,"QDQBertForNextSentencePrediction"),xzr.forEach(t),myo=r(NEe," (QDQBert model)"),NEe.forEach(t),ol.forEach(t),gyo=i(qt),H2=n(qt,"P",{});var DEe=s(H2);hyo=r(DEe,"The model is set in evaluation mode by default using "),kte=n(DEe,"CODE",{});var kzr=s(kte);pyo=r(kzr,"model.eval()"),kzr.forEach(t),_yo=r(DEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rte=n(DEe,"CODE",{});var Rzr=s(Rte);uyo=r(Rzr,"model.train()"),Rzr.forEach(t),DEe.forEach(t),byo=i(qt),Ste=n(qt,"P",{});var Szr=s(Ste);vyo=r(Szr,"Examples:"),Szr.forEach(t),Tyo=i(qt),m(N3.$$.fragment,qt),qt.forEach(t),Zs.forEach(t),G7e=i(d),fd=n(d,"H2",{class:!0});var HBe=s(fd);U2=n(HBe,"A",{id:!0,class:!0,href:!0});var Pzr=s(U2);Pte=n(Pzr,"SPAN",{});var $zr=s(Pte);m(D3.$$.fragment,$zr),$zr.forEach(t),Pzr.forEach(t),Fyo=i(HBe),$te=n(HBe,"SPAN",{});var Izr=s($te);Cyo=r(Izr,"AutoModelForTokenClassification"),Izr.forEach(t),HBe.forEach(t),O7e=i(d),Zo=n(d,"DIV",{class:!0});var rl=s(Zo);m(q3.$$.fragment,rl),Myo=i(rl),md=n(rl,"P",{});var pz=s(md);Eyo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ite=n(pz,"CODE",{});var jzr=s(Ite);yyo=r(jzr,"from_pretrained()"),jzr.forEach(t),wyo=r(pz,"class method or the "),jte=n(pz,"CODE",{});var Nzr=s(jte);Ayo=r(Nzr,"from_config()"),Nzr.forEach(t),Lyo=r(pz,`class
method.`),pz.forEach(t),Byo=i(rl),G3=n(rl,"P",{});var UBe=s(G3);xyo=r(UBe,"This class cannot be instantiated directly using "),Nte=n(UBe,"CODE",{});var Dzr=s(Nte);kyo=r(Dzr,"__init__()"),Dzr.forEach(t),Ryo=r(UBe," (throws an error)."),UBe.forEach(t),Syo=i(rl),Wr=n(rl,"DIV",{class:!0});var tl=s(Wr);m(O3.$$.fragment,tl),Pyo=i(tl),Dte=n(tl,"P",{});var qzr=s(Dte);$yo=r(qzr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qzr.forEach(t),Iyo=i(tl),gd=n(tl,"P",{});var _z=s(gd);jyo=r(_z,`Note:
Loading a model from its configuration file does `),qte=n(_z,"STRONG",{});var Gzr=s(qte);Nyo=r(Gzr,"not"),Gzr.forEach(t),Dyo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=n(_z,"CODE",{});var Ozr=s(Gte);qyo=r(Ozr,"from_pretrained()"),Ozr.forEach(t),Gyo=r(_z,"to load the model weights."),_z.forEach(t),Oyo=i(tl),Ote=n(tl,"P",{});var Xzr=s(Ote);Xyo=r(Xzr,"Examples:"),Xzr.forEach(t),zyo=i(tl),m(X3.$$.fragment,tl),tl.forEach(t),Vyo=i(rl),Ne=n(rl,"DIV",{class:!0});var Gt=s(Ne);m(z3.$$.fragment,Gt),Wyo=i(Gt),Xte=n(Gt,"P",{});var zzr=s(Xte);Qyo=r(zzr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zzr.forEach(t),Hyo=i(Gt),Qa=n(Gt,"P",{});var uM=s(Qa);Uyo=r(uM,"The model class to instantiate is selected based on the "),zte=n(uM,"CODE",{});var Vzr=s(zte);Jyo=r(Vzr,"model_type"),Vzr.forEach(t),Yyo=r(uM,` property of the config object (either
passed as an argument or loaded from `),Vte=n(uM,"CODE",{});var Wzr=s(Vte);Kyo=r(Wzr,"pretrained_model_name_or_path"),Wzr.forEach(t),Zyo=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wte=n(uM,"CODE",{});var Qzr=s(Wte);ewo=r(Qzr,"pretrained_model_name_or_path"),Qzr.forEach(t),owo=r(uM,":"),uM.forEach(t),rwo=i(Gt),D=n(Gt,"UL",{});var q=s(D);J2=n(q,"LI",{});var qEe=s(J2);Qte=n(qEe,"STRONG",{});var Hzr=s(Qte);two=r(Hzr,"albert"),Hzr.forEach(t),awo=r(qEe," \u2014 "),kI=n(qEe,"A",{href:!0});var Uzr=s(kI);nwo=r(Uzr,"AlbertForTokenClassification"),Uzr.forEach(t),swo=r(qEe," (ALBERT model)"),qEe.forEach(t),lwo=i(q),Y2=n(q,"LI",{});var GEe=s(Y2);Hte=n(GEe,"STRONG",{});var Jzr=s(Hte);iwo=r(Jzr,"bert"),Jzr.forEach(t),dwo=r(GEe," \u2014 "),RI=n(GEe,"A",{href:!0});var Yzr=s(RI);cwo=r(Yzr,"BertForTokenClassification"),Yzr.forEach(t),fwo=r(GEe," (BERT model)"),GEe.forEach(t),mwo=i(q),K2=n(q,"LI",{});var OEe=s(K2);Ute=n(OEe,"STRONG",{});var Kzr=s(Ute);gwo=r(Kzr,"big_bird"),Kzr.forEach(t),hwo=r(OEe," \u2014 "),SI=n(OEe,"A",{href:!0});var Zzr=s(SI);pwo=r(Zzr,"BigBirdForTokenClassification"),Zzr.forEach(t),_wo=r(OEe," (BigBird model)"),OEe.forEach(t),uwo=i(q),Z2=n(q,"LI",{});var XEe=s(Z2);Jte=n(XEe,"STRONG",{});var eVr=s(Jte);bwo=r(eVr,"camembert"),eVr.forEach(t),vwo=r(XEe," \u2014 "),PI=n(XEe,"A",{href:!0});var oVr=s(PI);Two=r(oVr,"CamembertForTokenClassification"),oVr.forEach(t),Fwo=r(XEe," (CamemBERT model)"),XEe.forEach(t),Cwo=i(q),e1=n(q,"LI",{});var zEe=s(e1);Yte=n(zEe,"STRONG",{});var rVr=s(Yte);Mwo=r(rVr,"canine"),rVr.forEach(t),Ewo=r(zEe," \u2014 "),$I=n(zEe,"A",{href:!0});var tVr=s($I);ywo=r(tVr,"CanineForTokenClassification"),tVr.forEach(t),wwo=r(zEe," (Canine model)"),zEe.forEach(t),Awo=i(q),o1=n(q,"LI",{});var VEe=s(o1);Kte=n(VEe,"STRONG",{});var aVr=s(Kte);Lwo=r(aVr,"convbert"),aVr.forEach(t),Bwo=r(VEe," \u2014 "),II=n(VEe,"A",{href:!0});var nVr=s(II);xwo=r(nVr,"ConvBertForTokenClassification"),nVr.forEach(t),kwo=r(VEe," (ConvBERT model)"),VEe.forEach(t),Rwo=i(q),r1=n(q,"LI",{});var WEe=s(r1);Zte=n(WEe,"STRONG",{});var sVr=s(Zte);Swo=r(sVr,"deberta"),sVr.forEach(t),Pwo=r(WEe," \u2014 "),jI=n(WEe,"A",{href:!0});var lVr=s(jI);$wo=r(lVr,"DebertaForTokenClassification"),lVr.forEach(t),Iwo=r(WEe," (DeBERTa model)"),WEe.forEach(t),jwo=i(q),t1=n(q,"LI",{});var QEe=s(t1);eae=n(QEe,"STRONG",{});var iVr=s(eae);Nwo=r(iVr,"deberta-v2"),iVr.forEach(t),Dwo=r(QEe," \u2014 "),NI=n(QEe,"A",{href:!0});var dVr=s(NI);qwo=r(dVr,"DebertaV2ForTokenClassification"),dVr.forEach(t),Gwo=r(QEe," (DeBERTa-v2 model)"),QEe.forEach(t),Owo=i(q),a1=n(q,"LI",{});var HEe=s(a1);oae=n(HEe,"STRONG",{});var cVr=s(oae);Xwo=r(cVr,"distilbert"),cVr.forEach(t),zwo=r(HEe," \u2014 "),DI=n(HEe,"A",{href:!0});var fVr=s(DI);Vwo=r(fVr,"DistilBertForTokenClassification"),fVr.forEach(t),Wwo=r(HEe," (DistilBERT model)"),HEe.forEach(t),Qwo=i(q),n1=n(q,"LI",{});var UEe=s(n1);rae=n(UEe,"STRONG",{});var mVr=s(rae);Hwo=r(mVr,"electra"),mVr.forEach(t),Uwo=r(UEe," \u2014 "),qI=n(UEe,"A",{href:!0});var gVr=s(qI);Jwo=r(gVr,"ElectraForTokenClassification"),gVr.forEach(t),Ywo=r(UEe," (ELECTRA model)"),UEe.forEach(t),Kwo=i(q),s1=n(q,"LI",{});var JEe=s(s1);tae=n(JEe,"STRONG",{});var hVr=s(tae);Zwo=r(hVr,"flaubert"),hVr.forEach(t),eAo=r(JEe," \u2014 "),GI=n(JEe,"A",{href:!0});var pVr=s(GI);oAo=r(pVr,"FlaubertForTokenClassification"),pVr.forEach(t),rAo=r(JEe," (FlauBERT model)"),JEe.forEach(t),tAo=i(q),l1=n(q,"LI",{});var YEe=s(l1);aae=n(YEe,"STRONG",{});var _Vr=s(aae);aAo=r(_Vr,"fnet"),_Vr.forEach(t),nAo=r(YEe," \u2014 "),OI=n(YEe,"A",{href:!0});var uVr=s(OI);sAo=r(uVr,"FNetForTokenClassification"),uVr.forEach(t),lAo=r(YEe," (FNet model)"),YEe.forEach(t),iAo=i(q),i1=n(q,"LI",{});var KEe=s(i1);nae=n(KEe,"STRONG",{});var bVr=s(nae);dAo=r(bVr,"funnel"),bVr.forEach(t),cAo=r(KEe," \u2014 "),XI=n(KEe,"A",{href:!0});var vVr=s(XI);fAo=r(vVr,"FunnelForTokenClassification"),vVr.forEach(t),mAo=r(KEe," (Funnel Transformer model)"),KEe.forEach(t),gAo=i(q),d1=n(q,"LI",{});var ZEe=s(d1);sae=n(ZEe,"STRONG",{});var TVr=s(sae);hAo=r(TVr,"gpt2"),TVr.forEach(t),pAo=r(ZEe," \u2014 "),zI=n(ZEe,"A",{href:!0});var FVr=s(zI);_Ao=r(FVr,"GPT2ForTokenClassification"),FVr.forEach(t),uAo=r(ZEe," (OpenAI GPT-2 model)"),ZEe.forEach(t),bAo=i(q),c1=n(q,"LI",{});var e3e=s(c1);lae=n(e3e,"STRONG",{});var CVr=s(lae);vAo=r(CVr,"ibert"),CVr.forEach(t),TAo=r(e3e," \u2014 "),VI=n(e3e,"A",{href:!0});var MVr=s(VI);FAo=r(MVr,"IBertForTokenClassification"),MVr.forEach(t),CAo=r(e3e," (I-BERT model)"),e3e.forEach(t),MAo=i(q),f1=n(q,"LI",{});var o3e=s(f1);iae=n(o3e,"STRONG",{});var EVr=s(iae);EAo=r(EVr,"layoutlm"),EVr.forEach(t),yAo=r(o3e," \u2014 "),WI=n(o3e,"A",{href:!0});var yVr=s(WI);wAo=r(yVr,"LayoutLMForTokenClassification"),yVr.forEach(t),AAo=r(o3e," (LayoutLM model)"),o3e.forEach(t),LAo=i(q),m1=n(q,"LI",{});var r3e=s(m1);dae=n(r3e,"STRONG",{});var wVr=s(dae);BAo=r(wVr,"layoutlmv2"),wVr.forEach(t),xAo=r(r3e," \u2014 "),QI=n(r3e,"A",{href:!0});var AVr=s(QI);kAo=r(AVr,"LayoutLMv2ForTokenClassification"),AVr.forEach(t),RAo=r(r3e," (LayoutLMv2 model)"),r3e.forEach(t),SAo=i(q),g1=n(q,"LI",{});var t3e=s(g1);cae=n(t3e,"STRONG",{});var LVr=s(cae);PAo=r(LVr,"longformer"),LVr.forEach(t),$Ao=r(t3e," \u2014 "),HI=n(t3e,"A",{href:!0});var BVr=s(HI);IAo=r(BVr,"LongformerForTokenClassification"),BVr.forEach(t),jAo=r(t3e," (Longformer model)"),t3e.forEach(t),NAo=i(q),h1=n(q,"LI",{});var a3e=s(h1);fae=n(a3e,"STRONG",{});var xVr=s(fae);DAo=r(xVr,"megatron-bert"),xVr.forEach(t),qAo=r(a3e," \u2014 "),UI=n(a3e,"A",{href:!0});var kVr=s(UI);GAo=r(kVr,"MegatronBertForTokenClassification"),kVr.forEach(t),OAo=r(a3e," (MegatronBert model)"),a3e.forEach(t),XAo=i(q),p1=n(q,"LI",{});var n3e=s(p1);mae=n(n3e,"STRONG",{});var RVr=s(mae);zAo=r(RVr,"mobilebert"),RVr.forEach(t),VAo=r(n3e," \u2014 "),JI=n(n3e,"A",{href:!0});var SVr=s(JI);WAo=r(SVr,"MobileBertForTokenClassification"),SVr.forEach(t),QAo=r(n3e," (MobileBERT model)"),n3e.forEach(t),HAo=i(q),_1=n(q,"LI",{});var s3e=s(_1);gae=n(s3e,"STRONG",{});var PVr=s(gae);UAo=r(PVr,"mpnet"),PVr.forEach(t),JAo=r(s3e," \u2014 "),YI=n(s3e,"A",{href:!0});var $Vr=s(YI);YAo=r($Vr,"MPNetForTokenClassification"),$Vr.forEach(t),KAo=r(s3e," (MPNet model)"),s3e.forEach(t),ZAo=i(q),u1=n(q,"LI",{});var l3e=s(u1);hae=n(l3e,"STRONG",{});var IVr=s(hae);e6o=r(IVr,"nystromformer"),IVr.forEach(t),o6o=r(l3e," \u2014 "),KI=n(l3e,"A",{href:!0});var jVr=s(KI);r6o=r(jVr,"NystromformerForTokenClassification"),jVr.forEach(t),t6o=r(l3e," (Nystromformer model)"),l3e.forEach(t),a6o=i(q),b1=n(q,"LI",{});var i3e=s(b1);pae=n(i3e,"STRONG",{});var NVr=s(pae);n6o=r(NVr,"qdqbert"),NVr.forEach(t),s6o=r(i3e," \u2014 "),ZI=n(i3e,"A",{href:!0});var DVr=s(ZI);l6o=r(DVr,"QDQBertForTokenClassification"),DVr.forEach(t),i6o=r(i3e," (QDQBert model)"),i3e.forEach(t),d6o=i(q),v1=n(q,"LI",{});var d3e=s(v1);_ae=n(d3e,"STRONG",{});var qVr=s(_ae);c6o=r(qVr,"rembert"),qVr.forEach(t),f6o=r(d3e," \u2014 "),ej=n(d3e,"A",{href:!0});var GVr=s(ej);m6o=r(GVr,"RemBertForTokenClassification"),GVr.forEach(t),g6o=r(d3e," (RemBERT model)"),d3e.forEach(t),h6o=i(q),T1=n(q,"LI",{});var c3e=s(T1);uae=n(c3e,"STRONG",{});var OVr=s(uae);p6o=r(OVr,"roberta"),OVr.forEach(t),_6o=r(c3e," \u2014 "),oj=n(c3e,"A",{href:!0});var XVr=s(oj);u6o=r(XVr,"RobertaForTokenClassification"),XVr.forEach(t),b6o=r(c3e," (RoBERTa model)"),c3e.forEach(t),v6o=i(q),F1=n(q,"LI",{});var f3e=s(F1);bae=n(f3e,"STRONG",{});var zVr=s(bae);T6o=r(zVr,"roformer"),zVr.forEach(t),F6o=r(f3e," \u2014 "),rj=n(f3e,"A",{href:!0});var VVr=s(rj);C6o=r(VVr,"RoFormerForTokenClassification"),VVr.forEach(t),M6o=r(f3e," (RoFormer model)"),f3e.forEach(t),E6o=i(q),C1=n(q,"LI",{});var m3e=s(C1);vae=n(m3e,"STRONG",{});var WVr=s(vae);y6o=r(WVr,"squeezebert"),WVr.forEach(t),w6o=r(m3e," \u2014 "),tj=n(m3e,"A",{href:!0});var QVr=s(tj);A6o=r(QVr,"SqueezeBertForTokenClassification"),QVr.forEach(t),L6o=r(m3e," (SqueezeBERT model)"),m3e.forEach(t),B6o=i(q),M1=n(q,"LI",{});var g3e=s(M1);Tae=n(g3e,"STRONG",{});var HVr=s(Tae);x6o=r(HVr,"xlm"),HVr.forEach(t),k6o=r(g3e," \u2014 "),aj=n(g3e,"A",{href:!0});var UVr=s(aj);R6o=r(UVr,"XLMForTokenClassification"),UVr.forEach(t),S6o=r(g3e," (XLM model)"),g3e.forEach(t),P6o=i(q),E1=n(q,"LI",{});var h3e=s(E1);Fae=n(h3e,"STRONG",{});var JVr=s(Fae);$6o=r(JVr,"xlm-roberta"),JVr.forEach(t),I6o=r(h3e," \u2014 "),nj=n(h3e,"A",{href:!0});var YVr=s(nj);j6o=r(YVr,"XLMRobertaForTokenClassification"),YVr.forEach(t),N6o=r(h3e," (XLM-RoBERTa model)"),h3e.forEach(t),D6o=i(q),y1=n(q,"LI",{});var p3e=s(y1);Cae=n(p3e,"STRONG",{});var KVr=s(Cae);q6o=r(KVr,"xlm-roberta-xl"),KVr.forEach(t),G6o=r(p3e," \u2014 "),sj=n(p3e,"A",{href:!0});var ZVr=s(sj);O6o=r(ZVr,"XLMRobertaXLForTokenClassification"),ZVr.forEach(t),X6o=r(p3e," (XLM-RoBERTa-XL model)"),p3e.forEach(t),z6o=i(q),w1=n(q,"LI",{});var _3e=s(w1);Mae=n(_3e,"STRONG",{});var eWr=s(Mae);V6o=r(eWr,"xlnet"),eWr.forEach(t),W6o=r(_3e," \u2014 "),lj=n(_3e,"A",{href:!0});var oWr=s(lj);Q6o=r(oWr,"XLNetForTokenClassification"),oWr.forEach(t),H6o=r(_3e," (XLNet model)"),_3e.forEach(t),U6o=i(q),A1=n(q,"LI",{});var u3e=s(A1);Eae=n(u3e,"STRONG",{});var rWr=s(Eae);J6o=r(rWr,"yoso"),rWr.forEach(t),Y6o=r(u3e," \u2014 "),ij=n(u3e,"A",{href:!0});var tWr=s(ij);K6o=r(tWr,"YosoForTokenClassification"),tWr.forEach(t),Z6o=r(u3e," (YOSO model)"),u3e.forEach(t),q.forEach(t),e0o=i(Gt),L1=n(Gt,"P",{});var b3e=s(L1);o0o=r(b3e,"The model is set in evaluation mode by default using "),yae=n(b3e,"CODE",{});var aWr=s(yae);r0o=r(aWr,"model.eval()"),aWr.forEach(t),t0o=r(b3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=n(b3e,"CODE",{});var nWr=s(wae);a0o=r(nWr,"model.train()"),nWr.forEach(t),b3e.forEach(t),n0o=i(Gt),Aae=n(Gt,"P",{});var sWr=s(Aae);s0o=r(sWr,"Examples:"),sWr.forEach(t),l0o=i(Gt),m(V3.$$.fragment,Gt),Gt.forEach(t),rl.forEach(t),X7e=i(d),hd=n(d,"H2",{class:!0});var JBe=s(hd);B1=n(JBe,"A",{id:!0,class:!0,href:!0});var lWr=s(B1);Lae=n(lWr,"SPAN",{});var iWr=s(Lae);m(W3.$$.fragment,iWr),iWr.forEach(t),lWr.forEach(t),i0o=i(JBe),Bae=n(JBe,"SPAN",{});var dWr=s(Bae);d0o=r(dWr,"AutoModelForQuestionAnswering"),dWr.forEach(t),JBe.forEach(t),z7e=i(d),er=n(d,"DIV",{class:!0});var al=s(er);m(Q3.$$.fragment,al),c0o=i(al),pd=n(al,"P",{});var uz=s(pd);f0o=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xae=n(uz,"CODE",{});var cWr=s(xae);m0o=r(cWr,"from_pretrained()"),cWr.forEach(t),g0o=r(uz,"class method or the "),kae=n(uz,"CODE",{});var fWr=s(kae);h0o=r(fWr,"from_config()"),fWr.forEach(t),p0o=r(uz,`class
method.`),uz.forEach(t),_0o=i(al),H3=n(al,"P",{});var YBe=s(H3);u0o=r(YBe,"This class cannot be instantiated directly using "),Rae=n(YBe,"CODE",{});var mWr=s(Rae);b0o=r(mWr,"__init__()"),mWr.forEach(t),v0o=r(YBe," (throws an error)."),YBe.forEach(t),T0o=i(al),Qr=n(al,"DIV",{class:!0});var nl=s(Qr);m(U3.$$.fragment,nl),F0o=i(nl),Sae=n(nl,"P",{});var gWr=s(Sae);C0o=r(gWr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gWr.forEach(t),M0o=i(nl),_d=n(nl,"P",{});var bz=s(_d);E0o=r(bz,`Note:
Loading a model from its configuration file does `),Pae=n(bz,"STRONG",{});var hWr=s(Pae);y0o=r(hWr,"not"),hWr.forEach(t),w0o=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=n(bz,"CODE",{});var pWr=s($ae);A0o=r(pWr,"from_pretrained()"),pWr.forEach(t),L0o=r(bz,"to load the model weights."),bz.forEach(t),B0o=i(nl),Iae=n(nl,"P",{});var _Wr=s(Iae);x0o=r(_Wr,"Examples:"),_Wr.forEach(t),k0o=i(nl),m(J3.$$.fragment,nl),nl.forEach(t),R0o=i(al),De=n(al,"DIV",{class:!0});var Ot=s(De);m(Y3.$$.fragment,Ot),S0o=i(Ot),jae=n(Ot,"P",{});var uWr=s(jae);P0o=r(uWr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uWr.forEach(t),$0o=i(Ot),Ha=n(Ot,"P",{});var bM=s(Ha);I0o=r(bM,"The model class to instantiate is selected based on the "),Nae=n(bM,"CODE",{});var bWr=s(Nae);j0o=r(bWr,"model_type"),bWr.forEach(t),N0o=r(bM,` property of the config object (either
passed as an argument or loaded from `),Dae=n(bM,"CODE",{});var vWr=s(Dae);D0o=r(vWr,"pretrained_model_name_or_path"),vWr.forEach(t),q0o=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qae=n(bM,"CODE",{});var TWr=s(qae);G0o=r(TWr,"pretrained_model_name_or_path"),TWr.forEach(t),O0o=r(bM,":"),bM.forEach(t),X0o=i(Ot),R=n(Ot,"UL",{});var P=s(R);x1=n(P,"LI",{});var v3e=s(x1);Gae=n(v3e,"STRONG",{});var FWr=s(Gae);z0o=r(FWr,"albert"),FWr.forEach(t),V0o=r(v3e," \u2014 "),dj=n(v3e,"A",{href:!0});var CWr=s(dj);W0o=r(CWr,"AlbertForQuestionAnswering"),CWr.forEach(t),Q0o=r(v3e," (ALBERT model)"),v3e.forEach(t),H0o=i(P),k1=n(P,"LI",{});var T3e=s(k1);Oae=n(T3e,"STRONG",{});var MWr=s(Oae);U0o=r(MWr,"bart"),MWr.forEach(t),J0o=r(T3e," \u2014 "),cj=n(T3e,"A",{href:!0});var EWr=s(cj);Y0o=r(EWr,"BartForQuestionAnswering"),EWr.forEach(t),K0o=r(T3e," (BART model)"),T3e.forEach(t),Z0o=i(P),R1=n(P,"LI",{});var F3e=s(R1);Xae=n(F3e,"STRONG",{});var yWr=s(Xae);eLo=r(yWr,"bert"),yWr.forEach(t),oLo=r(F3e," \u2014 "),fj=n(F3e,"A",{href:!0});var wWr=s(fj);rLo=r(wWr,"BertForQuestionAnswering"),wWr.forEach(t),tLo=r(F3e," (BERT model)"),F3e.forEach(t),aLo=i(P),S1=n(P,"LI",{});var C3e=s(S1);zae=n(C3e,"STRONG",{});var AWr=s(zae);nLo=r(AWr,"big_bird"),AWr.forEach(t),sLo=r(C3e," \u2014 "),mj=n(C3e,"A",{href:!0});var LWr=s(mj);lLo=r(LWr,"BigBirdForQuestionAnswering"),LWr.forEach(t),iLo=r(C3e," (BigBird model)"),C3e.forEach(t),dLo=i(P),P1=n(P,"LI",{});var M3e=s(P1);Vae=n(M3e,"STRONG",{});var BWr=s(Vae);cLo=r(BWr,"bigbird_pegasus"),BWr.forEach(t),fLo=r(M3e," \u2014 "),gj=n(M3e,"A",{href:!0});var xWr=s(gj);mLo=r(xWr,"BigBirdPegasusForQuestionAnswering"),xWr.forEach(t),gLo=r(M3e," (BigBirdPegasus model)"),M3e.forEach(t),hLo=i(P),$1=n(P,"LI",{});var E3e=s($1);Wae=n(E3e,"STRONG",{});var kWr=s(Wae);pLo=r(kWr,"camembert"),kWr.forEach(t),_Lo=r(E3e," \u2014 "),hj=n(E3e,"A",{href:!0});var RWr=s(hj);uLo=r(RWr,"CamembertForQuestionAnswering"),RWr.forEach(t),bLo=r(E3e," (CamemBERT model)"),E3e.forEach(t),vLo=i(P),I1=n(P,"LI",{});var y3e=s(I1);Qae=n(y3e,"STRONG",{});var SWr=s(Qae);TLo=r(SWr,"canine"),SWr.forEach(t),FLo=r(y3e," \u2014 "),pj=n(y3e,"A",{href:!0});var PWr=s(pj);CLo=r(PWr,"CanineForQuestionAnswering"),PWr.forEach(t),MLo=r(y3e," (Canine model)"),y3e.forEach(t),ELo=i(P),j1=n(P,"LI",{});var w3e=s(j1);Hae=n(w3e,"STRONG",{});var $Wr=s(Hae);yLo=r($Wr,"convbert"),$Wr.forEach(t),wLo=r(w3e," \u2014 "),_j=n(w3e,"A",{href:!0});var IWr=s(_j);ALo=r(IWr,"ConvBertForQuestionAnswering"),IWr.forEach(t),LLo=r(w3e," (ConvBERT model)"),w3e.forEach(t),BLo=i(P),N1=n(P,"LI",{});var A3e=s(N1);Uae=n(A3e,"STRONG",{});var jWr=s(Uae);xLo=r(jWr,"deberta"),jWr.forEach(t),kLo=r(A3e," \u2014 "),uj=n(A3e,"A",{href:!0});var NWr=s(uj);RLo=r(NWr,"DebertaForQuestionAnswering"),NWr.forEach(t),SLo=r(A3e," (DeBERTa model)"),A3e.forEach(t),PLo=i(P),D1=n(P,"LI",{});var L3e=s(D1);Jae=n(L3e,"STRONG",{});var DWr=s(Jae);$Lo=r(DWr,"deberta-v2"),DWr.forEach(t),ILo=r(L3e," \u2014 "),bj=n(L3e,"A",{href:!0});var qWr=s(bj);jLo=r(qWr,"DebertaV2ForQuestionAnswering"),qWr.forEach(t),NLo=r(L3e," (DeBERTa-v2 model)"),L3e.forEach(t),DLo=i(P),q1=n(P,"LI",{});var B3e=s(q1);Yae=n(B3e,"STRONG",{});var GWr=s(Yae);qLo=r(GWr,"distilbert"),GWr.forEach(t),GLo=r(B3e," \u2014 "),vj=n(B3e,"A",{href:!0});var OWr=s(vj);OLo=r(OWr,"DistilBertForQuestionAnswering"),OWr.forEach(t),XLo=r(B3e," (DistilBERT model)"),B3e.forEach(t),zLo=i(P),G1=n(P,"LI",{});var x3e=s(G1);Kae=n(x3e,"STRONG",{});var XWr=s(Kae);VLo=r(XWr,"electra"),XWr.forEach(t),WLo=r(x3e," \u2014 "),Tj=n(x3e,"A",{href:!0});var zWr=s(Tj);QLo=r(zWr,"ElectraForQuestionAnswering"),zWr.forEach(t),HLo=r(x3e," (ELECTRA model)"),x3e.forEach(t),ULo=i(P),O1=n(P,"LI",{});var k3e=s(O1);Zae=n(k3e,"STRONG",{});var VWr=s(Zae);JLo=r(VWr,"flaubert"),VWr.forEach(t),YLo=r(k3e," \u2014 "),Fj=n(k3e,"A",{href:!0});var WWr=s(Fj);KLo=r(WWr,"FlaubertForQuestionAnsweringSimple"),WWr.forEach(t),ZLo=r(k3e," (FlauBERT model)"),k3e.forEach(t),e7o=i(P),X1=n(P,"LI",{});var R3e=s(X1);ene=n(R3e,"STRONG",{});var QWr=s(ene);o7o=r(QWr,"fnet"),QWr.forEach(t),r7o=r(R3e," \u2014 "),Cj=n(R3e,"A",{href:!0});var HWr=s(Cj);t7o=r(HWr,"FNetForQuestionAnswering"),HWr.forEach(t),a7o=r(R3e," (FNet model)"),R3e.forEach(t),n7o=i(P),z1=n(P,"LI",{});var S3e=s(z1);one=n(S3e,"STRONG",{});var UWr=s(one);s7o=r(UWr,"funnel"),UWr.forEach(t),l7o=r(S3e," \u2014 "),Mj=n(S3e,"A",{href:!0});var JWr=s(Mj);i7o=r(JWr,"FunnelForQuestionAnswering"),JWr.forEach(t),d7o=r(S3e," (Funnel Transformer model)"),S3e.forEach(t),c7o=i(P),V1=n(P,"LI",{});var P3e=s(V1);rne=n(P3e,"STRONG",{});var YWr=s(rne);f7o=r(YWr,"gptj"),YWr.forEach(t),m7o=r(P3e," \u2014 "),Ej=n(P3e,"A",{href:!0});var KWr=s(Ej);g7o=r(KWr,"GPTJForQuestionAnswering"),KWr.forEach(t),h7o=r(P3e," (GPT-J model)"),P3e.forEach(t),p7o=i(P),W1=n(P,"LI",{});var $3e=s(W1);tne=n($3e,"STRONG",{});var ZWr=s(tne);_7o=r(ZWr,"ibert"),ZWr.forEach(t),u7o=r($3e," \u2014 "),yj=n($3e,"A",{href:!0});var eQr=s(yj);b7o=r(eQr,"IBertForQuestionAnswering"),eQr.forEach(t),v7o=r($3e," (I-BERT model)"),$3e.forEach(t),T7o=i(P),Q1=n(P,"LI",{});var I3e=s(Q1);ane=n(I3e,"STRONG",{});var oQr=s(ane);F7o=r(oQr,"layoutlmv2"),oQr.forEach(t),C7o=r(I3e," \u2014 "),wj=n(I3e,"A",{href:!0});var rQr=s(wj);M7o=r(rQr,"LayoutLMv2ForQuestionAnswering"),rQr.forEach(t),E7o=r(I3e," (LayoutLMv2 model)"),I3e.forEach(t),y7o=i(P),H1=n(P,"LI",{});var j3e=s(H1);nne=n(j3e,"STRONG",{});var tQr=s(nne);w7o=r(tQr,"led"),tQr.forEach(t),A7o=r(j3e," \u2014 "),Aj=n(j3e,"A",{href:!0});var aQr=s(Aj);L7o=r(aQr,"LEDForQuestionAnswering"),aQr.forEach(t),B7o=r(j3e," (LED model)"),j3e.forEach(t),x7o=i(P),U1=n(P,"LI",{});var N3e=s(U1);sne=n(N3e,"STRONG",{});var nQr=s(sne);k7o=r(nQr,"longformer"),nQr.forEach(t),R7o=r(N3e," \u2014 "),Lj=n(N3e,"A",{href:!0});var sQr=s(Lj);S7o=r(sQr,"LongformerForQuestionAnswering"),sQr.forEach(t),P7o=r(N3e," (Longformer model)"),N3e.forEach(t),$7o=i(P),J1=n(P,"LI",{});var D3e=s(J1);lne=n(D3e,"STRONG",{});var lQr=s(lne);I7o=r(lQr,"lxmert"),lQr.forEach(t),j7o=r(D3e," \u2014 "),Bj=n(D3e,"A",{href:!0});var iQr=s(Bj);N7o=r(iQr,"LxmertForQuestionAnswering"),iQr.forEach(t),D7o=r(D3e," (LXMERT model)"),D3e.forEach(t),q7o=i(P),Y1=n(P,"LI",{});var q3e=s(Y1);ine=n(q3e,"STRONG",{});var dQr=s(ine);G7o=r(dQr,"mbart"),dQr.forEach(t),O7o=r(q3e," \u2014 "),xj=n(q3e,"A",{href:!0});var cQr=s(xj);X7o=r(cQr,"MBartForQuestionAnswering"),cQr.forEach(t),z7o=r(q3e," (mBART model)"),q3e.forEach(t),V7o=i(P),K1=n(P,"LI",{});var G3e=s(K1);dne=n(G3e,"STRONG",{});var fQr=s(dne);W7o=r(fQr,"megatron-bert"),fQr.forEach(t),Q7o=r(G3e," \u2014 "),kj=n(G3e,"A",{href:!0});var mQr=s(kj);H7o=r(mQr,"MegatronBertForQuestionAnswering"),mQr.forEach(t),U7o=r(G3e," (MegatronBert model)"),G3e.forEach(t),J7o=i(P),Z1=n(P,"LI",{});var O3e=s(Z1);cne=n(O3e,"STRONG",{});var gQr=s(cne);Y7o=r(gQr,"mobilebert"),gQr.forEach(t),K7o=r(O3e," \u2014 "),Rj=n(O3e,"A",{href:!0});var hQr=s(Rj);Z7o=r(hQr,"MobileBertForQuestionAnswering"),hQr.forEach(t),e8o=r(O3e," (MobileBERT model)"),O3e.forEach(t),o8o=i(P),eb=n(P,"LI",{});var X3e=s(eb);fne=n(X3e,"STRONG",{});var pQr=s(fne);r8o=r(pQr,"mpnet"),pQr.forEach(t),t8o=r(X3e," \u2014 "),Sj=n(X3e,"A",{href:!0});var _Qr=s(Sj);a8o=r(_Qr,"MPNetForQuestionAnswering"),_Qr.forEach(t),n8o=r(X3e," (MPNet model)"),X3e.forEach(t),s8o=i(P),ob=n(P,"LI",{});var z3e=s(ob);mne=n(z3e,"STRONG",{});var uQr=s(mne);l8o=r(uQr,"nystromformer"),uQr.forEach(t),i8o=r(z3e," \u2014 "),Pj=n(z3e,"A",{href:!0});var bQr=s(Pj);d8o=r(bQr,"NystromformerForQuestionAnswering"),bQr.forEach(t),c8o=r(z3e," (Nystromformer model)"),z3e.forEach(t),f8o=i(P),rb=n(P,"LI",{});var V3e=s(rb);gne=n(V3e,"STRONG",{});var vQr=s(gne);m8o=r(vQr,"qdqbert"),vQr.forEach(t),g8o=r(V3e," \u2014 "),$j=n(V3e,"A",{href:!0});var TQr=s($j);h8o=r(TQr,"QDQBertForQuestionAnswering"),TQr.forEach(t),p8o=r(V3e," (QDQBert model)"),V3e.forEach(t),_8o=i(P),tb=n(P,"LI",{});var W3e=s(tb);hne=n(W3e,"STRONG",{});var FQr=s(hne);u8o=r(FQr,"reformer"),FQr.forEach(t),b8o=r(W3e," \u2014 "),Ij=n(W3e,"A",{href:!0});var CQr=s(Ij);v8o=r(CQr,"ReformerForQuestionAnswering"),CQr.forEach(t),T8o=r(W3e," (Reformer model)"),W3e.forEach(t),F8o=i(P),ab=n(P,"LI",{});var Q3e=s(ab);pne=n(Q3e,"STRONG",{});var MQr=s(pne);C8o=r(MQr,"rembert"),MQr.forEach(t),M8o=r(Q3e," \u2014 "),jj=n(Q3e,"A",{href:!0});var EQr=s(jj);E8o=r(EQr,"RemBertForQuestionAnswering"),EQr.forEach(t),y8o=r(Q3e," (RemBERT model)"),Q3e.forEach(t),w8o=i(P),nb=n(P,"LI",{});var H3e=s(nb);_ne=n(H3e,"STRONG",{});var yQr=s(_ne);A8o=r(yQr,"roberta"),yQr.forEach(t),L8o=r(H3e," \u2014 "),Nj=n(H3e,"A",{href:!0});var wQr=s(Nj);B8o=r(wQr,"RobertaForQuestionAnswering"),wQr.forEach(t),x8o=r(H3e," (RoBERTa model)"),H3e.forEach(t),k8o=i(P),sb=n(P,"LI",{});var U3e=s(sb);une=n(U3e,"STRONG",{});var AQr=s(une);R8o=r(AQr,"roformer"),AQr.forEach(t),S8o=r(U3e," \u2014 "),Dj=n(U3e,"A",{href:!0});var LQr=s(Dj);P8o=r(LQr,"RoFormerForQuestionAnswering"),LQr.forEach(t),$8o=r(U3e," (RoFormer model)"),U3e.forEach(t),I8o=i(P),lb=n(P,"LI",{});var J3e=s(lb);bne=n(J3e,"STRONG",{});var BQr=s(bne);j8o=r(BQr,"splinter"),BQr.forEach(t),N8o=r(J3e," \u2014 "),qj=n(J3e,"A",{href:!0});var xQr=s(qj);D8o=r(xQr,"SplinterForQuestionAnswering"),xQr.forEach(t),q8o=r(J3e," (Splinter model)"),J3e.forEach(t),G8o=i(P),ib=n(P,"LI",{});var Y3e=s(ib);vne=n(Y3e,"STRONG",{});var kQr=s(vne);O8o=r(kQr,"squeezebert"),kQr.forEach(t),X8o=r(Y3e," \u2014 "),Gj=n(Y3e,"A",{href:!0});var RQr=s(Gj);z8o=r(RQr,"SqueezeBertForQuestionAnswering"),RQr.forEach(t),V8o=r(Y3e," (SqueezeBERT model)"),Y3e.forEach(t),W8o=i(P),db=n(P,"LI",{});var K3e=s(db);Tne=n(K3e,"STRONG",{});var SQr=s(Tne);Q8o=r(SQr,"xlm"),SQr.forEach(t),H8o=r(K3e," \u2014 "),Oj=n(K3e,"A",{href:!0});var PQr=s(Oj);U8o=r(PQr,"XLMForQuestionAnsweringSimple"),PQr.forEach(t),J8o=r(K3e," (XLM model)"),K3e.forEach(t),Y8o=i(P),cb=n(P,"LI",{});var Z3e=s(cb);Fne=n(Z3e,"STRONG",{});var $Qr=s(Fne);K8o=r($Qr,"xlm-roberta"),$Qr.forEach(t),Z8o=r(Z3e," \u2014 "),Xj=n(Z3e,"A",{href:!0});var IQr=s(Xj);eBo=r(IQr,"XLMRobertaForQuestionAnswering"),IQr.forEach(t),oBo=r(Z3e," (XLM-RoBERTa model)"),Z3e.forEach(t),rBo=i(P),fb=n(P,"LI",{});var eye=s(fb);Cne=n(eye,"STRONG",{});var jQr=s(Cne);tBo=r(jQr,"xlm-roberta-xl"),jQr.forEach(t),aBo=r(eye," \u2014 "),zj=n(eye,"A",{href:!0});var NQr=s(zj);nBo=r(NQr,"XLMRobertaXLForQuestionAnswering"),NQr.forEach(t),sBo=r(eye," (XLM-RoBERTa-XL model)"),eye.forEach(t),lBo=i(P),mb=n(P,"LI",{});var oye=s(mb);Mne=n(oye,"STRONG",{});var DQr=s(Mne);iBo=r(DQr,"xlnet"),DQr.forEach(t),dBo=r(oye," \u2014 "),Vj=n(oye,"A",{href:!0});var qQr=s(Vj);cBo=r(qQr,"XLNetForQuestionAnsweringSimple"),qQr.forEach(t),fBo=r(oye," (XLNet model)"),oye.forEach(t),mBo=i(P),gb=n(P,"LI",{});var rye=s(gb);Ene=n(rye,"STRONG",{});var GQr=s(Ene);gBo=r(GQr,"yoso"),GQr.forEach(t),hBo=r(rye," \u2014 "),Wj=n(rye,"A",{href:!0});var OQr=s(Wj);pBo=r(OQr,"YosoForQuestionAnswering"),OQr.forEach(t),_Bo=r(rye," (YOSO model)"),rye.forEach(t),P.forEach(t),uBo=i(Ot),hb=n(Ot,"P",{});var tye=s(hb);bBo=r(tye,"The model is set in evaluation mode by default using "),yne=n(tye,"CODE",{});var XQr=s(yne);vBo=r(XQr,"model.eval()"),XQr.forEach(t),TBo=r(tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wne=n(tye,"CODE",{});var zQr=s(wne);FBo=r(zQr,"model.train()"),zQr.forEach(t),tye.forEach(t),CBo=i(Ot),Ane=n(Ot,"P",{});var VQr=s(Ane);MBo=r(VQr,"Examples:"),VQr.forEach(t),EBo=i(Ot),m(K3.$$.fragment,Ot),Ot.forEach(t),al.forEach(t),V7e=i(d),ud=n(d,"H2",{class:!0});var KBe=s(ud);pb=n(KBe,"A",{id:!0,class:!0,href:!0});var WQr=s(pb);Lne=n(WQr,"SPAN",{});var QQr=s(Lne);m(Z3.$$.fragment,QQr),QQr.forEach(t),WQr.forEach(t),yBo=i(KBe),Bne=n(KBe,"SPAN",{});var HQr=s(Bne);wBo=r(HQr,"AutoModelForTableQuestionAnswering"),HQr.forEach(t),KBe.forEach(t),W7e=i(d),or=n(d,"DIV",{class:!0});var sl=s(or);m(ey.$$.fragment,sl),ABo=i(sl),bd=n(sl,"P",{});var vz=s(bd);LBo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xne=n(vz,"CODE",{});var UQr=s(xne);BBo=r(UQr,"from_pretrained()"),UQr.forEach(t),xBo=r(vz,"class method or the "),kne=n(vz,"CODE",{});var JQr=s(kne);kBo=r(JQr,"from_config()"),JQr.forEach(t),RBo=r(vz,`class
method.`),vz.forEach(t),SBo=i(sl),oy=n(sl,"P",{});var ZBe=s(oy);PBo=r(ZBe,"This class cannot be instantiated directly using "),Rne=n(ZBe,"CODE",{});var YQr=s(Rne);$Bo=r(YQr,"__init__()"),YQr.forEach(t),IBo=r(ZBe," (throws an error)."),ZBe.forEach(t),jBo=i(sl),Hr=n(sl,"DIV",{class:!0});var ll=s(Hr);m(ry.$$.fragment,ll),NBo=i(ll),Sne=n(ll,"P",{});var KQr=s(Sne);DBo=r(KQr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KQr.forEach(t),qBo=i(ll),vd=n(ll,"P",{});var Tz=s(vd);GBo=r(Tz,`Note:
Loading a model from its configuration file does `),Pne=n(Tz,"STRONG",{});var ZQr=s(Pne);OBo=r(ZQr,"not"),ZQr.forEach(t),XBo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ne=n(Tz,"CODE",{});var eHr=s($ne);zBo=r(eHr,"from_pretrained()"),eHr.forEach(t),VBo=r(Tz,"to load the model weights."),Tz.forEach(t),WBo=i(ll),Ine=n(ll,"P",{});var oHr=s(Ine);QBo=r(oHr,"Examples:"),oHr.forEach(t),HBo=i(ll),m(ty.$$.fragment,ll),ll.forEach(t),UBo=i(sl),qe=n(sl,"DIV",{class:!0});var Xt=s(qe);m(ay.$$.fragment,Xt),JBo=i(Xt),jne=n(Xt,"P",{});var rHr=s(jne);YBo=r(rHr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rHr.forEach(t),KBo=i(Xt),Ua=n(Xt,"P",{});var vM=s(Ua);ZBo=r(vM,"The model class to instantiate is selected based on the "),Nne=n(vM,"CODE",{});var tHr=s(Nne);exo=r(tHr,"model_type"),tHr.forEach(t),oxo=r(vM,` property of the config object (either
passed as an argument or loaded from `),Dne=n(vM,"CODE",{});var aHr=s(Dne);rxo=r(aHr,"pretrained_model_name_or_path"),aHr.forEach(t),txo=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qne=n(vM,"CODE",{});var nHr=s(qne);axo=r(nHr,"pretrained_model_name_or_path"),nHr.forEach(t),nxo=r(vM,":"),vM.forEach(t),sxo=i(Xt),Gne=n(Xt,"UL",{});var sHr=s(Gne);_b=n(sHr,"LI",{});var aye=s(_b);One=n(aye,"STRONG",{});var lHr=s(One);lxo=r(lHr,"tapas"),lHr.forEach(t),ixo=r(aye," \u2014 "),Qj=n(aye,"A",{href:!0});var iHr=s(Qj);dxo=r(iHr,"TapasForQuestionAnswering"),iHr.forEach(t),cxo=r(aye," (TAPAS model)"),aye.forEach(t),sHr.forEach(t),fxo=i(Xt),ub=n(Xt,"P",{});var nye=s(ub);mxo=r(nye,"The model is set in evaluation mode by default using "),Xne=n(nye,"CODE",{});var dHr=s(Xne);gxo=r(dHr,"model.eval()"),dHr.forEach(t),hxo=r(nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(nye,"CODE",{});var cHr=s(zne);pxo=r(cHr,"model.train()"),cHr.forEach(t),nye.forEach(t),_xo=i(Xt),Vne=n(Xt,"P",{});var fHr=s(Vne);uxo=r(fHr,"Examples:"),fHr.forEach(t),bxo=i(Xt),m(ny.$$.fragment,Xt),Xt.forEach(t),sl.forEach(t),Q7e=i(d),Td=n(d,"H2",{class:!0});var exe=s(Td);bb=n(exe,"A",{id:!0,class:!0,href:!0});var mHr=s(bb);Wne=n(mHr,"SPAN",{});var gHr=s(Wne);m(sy.$$.fragment,gHr),gHr.forEach(t),mHr.forEach(t),vxo=i(exe),Qne=n(exe,"SPAN",{});var hHr=s(Qne);Txo=r(hHr,"AutoModelForImageClassification"),hHr.forEach(t),exe.forEach(t),H7e=i(d),rr=n(d,"DIV",{class:!0});var il=s(rr);m(ly.$$.fragment,il),Fxo=i(il),Fd=n(il,"P",{});var Fz=s(Fd);Cxo=r(Fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hne=n(Fz,"CODE",{});var pHr=s(Hne);Mxo=r(pHr,"from_pretrained()"),pHr.forEach(t),Exo=r(Fz,"class method or the "),Une=n(Fz,"CODE",{});var _Hr=s(Une);yxo=r(_Hr,"from_config()"),_Hr.forEach(t),wxo=r(Fz,`class
method.`),Fz.forEach(t),Axo=i(il),iy=n(il,"P",{});var oxe=s(iy);Lxo=r(oxe,"This class cannot be instantiated directly using "),Jne=n(oxe,"CODE",{});var uHr=s(Jne);Bxo=r(uHr,"__init__()"),uHr.forEach(t),xxo=r(oxe," (throws an error)."),oxe.forEach(t),kxo=i(il),Ur=n(il,"DIV",{class:!0});var dl=s(Ur);m(dy.$$.fragment,dl),Rxo=i(dl),Yne=n(dl,"P",{});var bHr=s(Yne);Sxo=r(bHr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bHr.forEach(t),Pxo=i(dl),Cd=n(dl,"P",{});var Cz=s(Cd);$xo=r(Cz,`Note:
Loading a model from its configuration file does `),Kne=n(Cz,"STRONG",{});var vHr=s(Kne);Ixo=r(vHr,"not"),vHr.forEach(t),jxo=r(Cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=n(Cz,"CODE",{});var THr=s(Zne);Nxo=r(THr,"from_pretrained()"),THr.forEach(t),Dxo=r(Cz,"to load the model weights."),Cz.forEach(t),qxo=i(dl),ese=n(dl,"P",{});var FHr=s(ese);Gxo=r(FHr,"Examples:"),FHr.forEach(t),Oxo=i(dl),m(cy.$$.fragment,dl),dl.forEach(t),Xxo=i(il),Ge=n(il,"DIV",{class:!0});var zt=s(Ge);m(fy.$$.fragment,zt),zxo=i(zt),ose=n(zt,"P",{});var CHr=s(ose);Vxo=r(CHr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CHr.forEach(t),Wxo=i(zt),Ja=n(zt,"P",{});var TM=s(Ja);Qxo=r(TM,"The model class to instantiate is selected based on the "),rse=n(TM,"CODE",{});var MHr=s(rse);Hxo=r(MHr,"model_type"),MHr.forEach(t),Uxo=r(TM,` property of the config object (either
passed as an argument or loaded from `),tse=n(TM,"CODE",{});var EHr=s(tse);Jxo=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),Yxo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=n(TM,"CODE",{});var yHr=s(ase);Kxo=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),Zxo=r(TM,":"),TM.forEach(t),eko=i(zt),be=n(zt,"UL",{});var Ke=s(be);vb=n(Ke,"LI",{});var sye=s(vb);nse=n(sye,"STRONG",{});var wHr=s(nse);oko=r(wHr,"beit"),wHr.forEach(t),rko=r(sye," \u2014 "),Hj=n(sye,"A",{href:!0});var AHr=s(Hj);tko=r(AHr,"BeitForImageClassification"),AHr.forEach(t),ako=r(sye," (BEiT model)"),sye.forEach(t),nko=i(Ke),Tb=n(Ke,"LI",{});var lye=s(Tb);sse=n(lye,"STRONG",{});var LHr=s(sse);sko=r(LHr,"convnext"),LHr.forEach(t),lko=r(lye," \u2014 "),Uj=n(lye,"A",{href:!0});var BHr=s(Uj);iko=r(BHr,"ConvNextForImageClassification"),BHr.forEach(t),dko=r(lye," (ConvNext model)"),lye.forEach(t),cko=i(Ke),Ss=n(Ke,"LI",{});var GL=s(Ss);lse=n(GL,"STRONG",{});var xHr=s(lse);fko=r(xHr,"deit"),xHr.forEach(t),mko=r(GL," \u2014 "),Jj=n(GL,"A",{href:!0});var kHr=s(Jj);gko=r(kHr,"DeiTForImageClassification"),kHr.forEach(t),hko=r(GL," or "),Yj=n(GL,"A",{href:!0});var RHr=s(Yj);pko=r(RHr,"DeiTForImageClassificationWithTeacher"),RHr.forEach(t),_ko=r(GL," (DeiT model)"),GL.forEach(t),uko=i(Ke),Fb=n(Ke,"LI",{});var iye=s(Fb);ise=n(iye,"STRONG",{});var SHr=s(ise);bko=r(SHr,"imagegpt"),SHr.forEach(t),vko=r(iye," \u2014 "),Kj=n(iye,"A",{href:!0});var PHr=s(Kj);Tko=r(PHr,"ImageGPTForImageClassification"),PHr.forEach(t),Fko=r(iye," (ImageGPT model)"),iye.forEach(t),Cko=i(Ke),la=n(Ke,"LI",{});var Ef=s(la);dse=n(Ef,"STRONG",{});var $Hr=s(dse);Mko=r($Hr,"perceiver"),$Hr.forEach(t),Eko=r(Ef," \u2014 "),Zj=n(Ef,"A",{href:!0});var IHr=s(Zj);yko=r(IHr,"PerceiverForImageClassificationLearned"),IHr.forEach(t),wko=r(Ef," or "),eN=n(Ef,"A",{href:!0});var jHr=s(eN);Ako=r(jHr,"PerceiverForImageClassificationFourier"),jHr.forEach(t),Lko=r(Ef," or "),oN=n(Ef,"A",{href:!0});var NHr=s(oN);Bko=r(NHr,"PerceiverForImageClassificationConvProcessing"),NHr.forEach(t),xko=r(Ef," (Perceiver model)"),Ef.forEach(t),kko=i(Ke),Cb=n(Ke,"LI",{});var dye=s(Cb);cse=n(dye,"STRONG",{});var DHr=s(cse);Rko=r(DHr,"poolformer"),DHr.forEach(t),Sko=r(dye," \u2014 "),rN=n(dye,"A",{href:!0});var qHr=s(rN);Pko=r(qHr,"PoolFormerForImageClassification"),qHr.forEach(t),$ko=r(dye," (PoolFormer model)"),dye.forEach(t),Iko=i(Ke),Mb=n(Ke,"LI",{});var cye=s(Mb);fse=n(cye,"STRONG",{});var GHr=s(fse);jko=r(GHr,"segformer"),GHr.forEach(t),Nko=r(cye," \u2014 "),tN=n(cye,"A",{href:!0});var OHr=s(tN);Dko=r(OHr,"SegformerForImageClassification"),OHr.forEach(t),qko=r(cye," (SegFormer model)"),cye.forEach(t),Gko=i(Ke),Eb=n(Ke,"LI",{});var fye=s(Eb);mse=n(fye,"STRONG",{});var XHr=s(mse);Oko=r(XHr,"swin"),XHr.forEach(t),Xko=r(fye," \u2014 "),aN=n(fye,"A",{href:!0});var zHr=s(aN);zko=r(zHr,"SwinForImageClassification"),zHr.forEach(t),Vko=r(fye," (Swin model)"),fye.forEach(t),Wko=i(Ke),yb=n(Ke,"LI",{});var mye=s(yb);gse=n(mye,"STRONG",{});var VHr=s(gse);Qko=r(VHr,"vit"),VHr.forEach(t),Hko=r(mye," \u2014 "),nN=n(mye,"A",{href:!0});var WHr=s(nN);Uko=r(WHr,"ViTForImageClassification"),WHr.forEach(t),Jko=r(mye," (ViT model)"),mye.forEach(t),Ke.forEach(t),Yko=i(zt),wb=n(zt,"P",{});var gye=s(wb);Kko=r(gye,"The model is set in evaluation mode by default using "),hse=n(gye,"CODE",{});var QHr=s(hse);Zko=r(QHr,"model.eval()"),QHr.forEach(t),eRo=r(gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=n(gye,"CODE",{});var HHr=s(pse);oRo=r(HHr,"model.train()"),HHr.forEach(t),gye.forEach(t),rRo=i(zt),_se=n(zt,"P",{});var UHr=s(_se);tRo=r(UHr,"Examples:"),UHr.forEach(t),aRo=i(zt),m(my.$$.fragment,zt),zt.forEach(t),il.forEach(t),U7e=i(d),Md=n(d,"H2",{class:!0});var rxe=s(Md);Ab=n(rxe,"A",{id:!0,class:!0,href:!0});var JHr=s(Ab);use=n(JHr,"SPAN",{});var YHr=s(use);m(gy.$$.fragment,YHr),YHr.forEach(t),JHr.forEach(t),nRo=i(rxe),bse=n(rxe,"SPAN",{});var KHr=s(bse);sRo=r(KHr,"AutoModelForVision2Seq"),KHr.forEach(t),rxe.forEach(t),J7e=i(d),tr=n(d,"DIV",{class:!0});var cl=s(tr);m(hy.$$.fragment,cl),lRo=i(cl),Ed=n(cl,"P",{});var Mz=s(Ed);iRo=r(Mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vse=n(Mz,"CODE",{});var ZHr=s(vse);dRo=r(ZHr,"from_pretrained()"),ZHr.forEach(t),cRo=r(Mz,"class method or the "),Tse=n(Mz,"CODE",{});var eUr=s(Tse);fRo=r(eUr,"from_config()"),eUr.forEach(t),mRo=r(Mz,`class
method.`),Mz.forEach(t),gRo=i(cl),py=n(cl,"P",{});var txe=s(py);hRo=r(txe,"This class cannot be instantiated directly using "),Fse=n(txe,"CODE",{});var oUr=s(Fse);pRo=r(oUr,"__init__()"),oUr.forEach(t),_Ro=r(txe," (throws an error)."),txe.forEach(t),uRo=i(cl),Jr=n(cl,"DIV",{class:!0});var fl=s(Jr);m(_y.$$.fragment,fl),bRo=i(fl),Cse=n(fl,"P",{});var rUr=s(Cse);vRo=r(rUr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rUr.forEach(t),TRo=i(fl),yd=n(fl,"P",{});var Ez=s(yd);FRo=r(Ez,`Note:
Loading a model from its configuration file does `),Mse=n(Ez,"STRONG",{});var tUr=s(Mse);CRo=r(tUr,"not"),tUr.forEach(t),MRo=r(Ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ese=n(Ez,"CODE",{});var aUr=s(Ese);ERo=r(aUr,"from_pretrained()"),aUr.forEach(t),yRo=r(Ez,"to load the model weights."),Ez.forEach(t),wRo=i(fl),yse=n(fl,"P",{});var nUr=s(yse);ARo=r(nUr,"Examples:"),nUr.forEach(t),LRo=i(fl),m(uy.$$.fragment,fl),fl.forEach(t),BRo=i(cl),Oe=n(cl,"DIV",{class:!0});var Vt=s(Oe);m(by.$$.fragment,Vt),xRo=i(Vt),wse=n(Vt,"P",{});var sUr=s(wse);kRo=r(sUr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sUr.forEach(t),RRo=i(Vt),Ya=n(Vt,"P",{});var FM=s(Ya);SRo=r(FM,"The model class to instantiate is selected based on the "),Ase=n(FM,"CODE",{});var lUr=s(Ase);PRo=r(lUr,"model_type"),lUr.forEach(t),$Ro=r(FM,` property of the config object (either
passed as an argument or loaded from `),Lse=n(FM,"CODE",{});var iUr=s(Lse);IRo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),jRo=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=n(FM,"CODE",{});var dUr=s(Bse);NRo=r(dUr,"pretrained_model_name_or_path"),dUr.forEach(t),DRo=r(FM,":"),FM.forEach(t),qRo=i(Vt),xse=n(Vt,"UL",{});var cUr=s(xse);Lb=n(cUr,"LI",{});var hye=s(Lb);kse=n(hye,"STRONG",{});var fUr=s(kse);GRo=r(fUr,"vision-encoder-decoder"),fUr.forEach(t),ORo=r(hye," \u2014 "),sN=n(hye,"A",{href:!0});var mUr=s(sN);XRo=r(mUr,"VisionEncoderDecoderModel"),mUr.forEach(t),zRo=r(hye," (Vision Encoder decoder model)"),hye.forEach(t),cUr.forEach(t),VRo=i(Vt),Bb=n(Vt,"P",{});var pye=s(Bb);WRo=r(pye,"The model is set in evaluation mode by default using "),Rse=n(pye,"CODE",{});var gUr=s(Rse);QRo=r(gUr,"model.eval()"),gUr.forEach(t),HRo=r(pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=n(pye,"CODE",{});var hUr=s(Sse);URo=r(hUr,"model.train()"),hUr.forEach(t),pye.forEach(t),JRo=i(Vt),Pse=n(Vt,"P",{});var pUr=s(Pse);YRo=r(pUr,"Examples:"),pUr.forEach(t),KRo=i(Vt),m(vy.$$.fragment,Vt),Vt.forEach(t),cl.forEach(t),Y7e=i(d),wd=n(d,"H2",{class:!0});var axe=s(wd);xb=n(axe,"A",{id:!0,class:!0,href:!0});var _Ur=s(xb);$se=n(_Ur,"SPAN",{});var uUr=s($se);m(Ty.$$.fragment,uUr),uUr.forEach(t),_Ur.forEach(t),ZRo=i(axe),Ise=n(axe,"SPAN",{});var bUr=s(Ise);eSo=r(bUr,"AutoModelForAudioClassification"),bUr.forEach(t),axe.forEach(t),K7e=i(d),ar=n(d,"DIV",{class:!0});var ml=s(ar);m(Fy.$$.fragment,ml),oSo=i(ml),Ad=n(ml,"P",{});var yz=s(Ad);rSo=r(yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jse=n(yz,"CODE",{});var vUr=s(jse);tSo=r(vUr,"from_pretrained()"),vUr.forEach(t),aSo=r(yz,"class method or the "),Nse=n(yz,"CODE",{});var TUr=s(Nse);nSo=r(TUr,"from_config()"),TUr.forEach(t),sSo=r(yz,`class
method.`),yz.forEach(t),lSo=i(ml),Cy=n(ml,"P",{});var nxe=s(Cy);iSo=r(nxe,"This class cannot be instantiated directly using "),Dse=n(nxe,"CODE",{});var FUr=s(Dse);dSo=r(FUr,"__init__()"),FUr.forEach(t),cSo=r(nxe," (throws an error)."),nxe.forEach(t),fSo=i(ml),Yr=n(ml,"DIV",{class:!0});var gl=s(Yr);m(My.$$.fragment,gl),mSo=i(gl),qse=n(gl,"P",{});var CUr=s(qse);gSo=r(CUr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),CUr.forEach(t),hSo=i(gl),Ld=n(gl,"P",{});var wz=s(Ld);pSo=r(wz,`Note:
Loading a model from its configuration file does `),Gse=n(wz,"STRONG",{});var MUr=s(Gse);_So=r(MUr,"not"),MUr.forEach(t),uSo=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ose=n(wz,"CODE",{});var EUr=s(Ose);bSo=r(EUr,"from_pretrained()"),EUr.forEach(t),vSo=r(wz,"to load the model weights."),wz.forEach(t),TSo=i(gl),Xse=n(gl,"P",{});var yUr=s(Xse);FSo=r(yUr,"Examples:"),yUr.forEach(t),CSo=i(gl),m(Ey.$$.fragment,gl),gl.forEach(t),MSo=i(ml),Xe=n(ml,"DIV",{class:!0});var Wt=s(Xe);m(yy.$$.fragment,Wt),ESo=i(Wt),zse=n(Wt,"P",{});var wUr=s(zse);ySo=r(wUr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wUr.forEach(t),wSo=i(Wt),Ka=n(Wt,"P",{});var CM=s(Ka);ASo=r(CM,"The model class to instantiate is selected based on the "),Vse=n(CM,"CODE",{});var AUr=s(Vse);LSo=r(AUr,"model_type"),AUr.forEach(t),BSo=r(CM,` property of the config object (either
passed as an argument or loaded from `),Wse=n(CM,"CODE",{});var LUr=s(Wse);xSo=r(LUr,"pretrained_model_name_or_path"),LUr.forEach(t),kSo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qse=n(CM,"CODE",{});var BUr=s(Qse);RSo=r(BUr,"pretrained_model_name_or_path"),BUr.forEach(t),SSo=r(CM,":"),CM.forEach(t),PSo=i(Wt),ao=n(Wt,"UL",{});var Qt=s(ao);kb=n(Qt,"LI",{});var _ye=s(kb);Hse=n(_ye,"STRONG",{});var xUr=s(Hse);$So=r(xUr,"hubert"),xUr.forEach(t),ISo=r(_ye," \u2014 "),lN=n(_ye,"A",{href:!0});var kUr=s(lN);jSo=r(kUr,"HubertForSequenceClassification"),kUr.forEach(t),NSo=r(_ye," (Hubert model)"),_ye.forEach(t),DSo=i(Qt),Rb=n(Qt,"LI",{});var uye=s(Rb);Use=n(uye,"STRONG",{});var RUr=s(Use);qSo=r(RUr,"sew"),RUr.forEach(t),GSo=r(uye," \u2014 "),iN=n(uye,"A",{href:!0});var SUr=s(iN);OSo=r(SUr,"SEWForSequenceClassification"),SUr.forEach(t),XSo=r(uye," (SEW model)"),uye.forEach(t),zSo=i(Qt),Sb=n(Qt,"LI",{});var bye=s(Sb);Jse=n(bye,"STRONG",{});var PUr=s(Jse);VSo=r(PUr,"sew-d"),PUr.forEach(t),WSo=r(bye," \u2014 "),dN=n(bye,"A",{href:!0});var $Ur=s(dN);QSo=r($Ur,"SEWDForSequenceClassification"),$Ur.forEach(t),HSo=r(bye," (SEW-D model)"),bye.forEach(t),USo=i(Qt),Pb=n(Qt,"LI",{});var vye=s(Pb);Yse=n(vye,"STRONG",{});var IUr=s(Yse);JSo=r(IUr,"unispeech"),IUr.forEach(t),YSo=r(vye," \u2014 "),cN=n(vye,"A",{href:!0});var jUr=s(cN);KSo=r(jUr,"UniSpeechForSequenceClassification"),jUr.forEach(t),ZSo=r(vye," (UniSpeech model)"),vye.forEach(t),ePo=i(Qt),$b=n(Qt,"LI",{});var Tye=s($b);Kse=n(Tye,"STRONG",{});var NUr=s(Kse);oPo=r(NUr,"unispeech-sat"),NUr.forEach(t),rPo=r(Tye," \u2014 "),fN=n(Tye,"A",{href:!0});var DUr=s(fN);tPo=r(DUr,"UniSpeechSatForSequenceClassification"),DUr.forEach(t),aPo=r(Tye," (UniSpeechSat model)"),Tye.forEach(t),nPo=i(Qt),Ib=n(Qt,"LI",{});var Fye=s(Ib);Zse=n(Fye,"STRONG",{});var qUr=s(Zse);sPo=r(qUr,"wav2vec2"),qUr.forEach(t),lPo=r(Fye," \u2014 "),mN=n(Fye,"A",{href:!0});var GUr=s(mN);iPo=r(GUr,"Wav2Vec2ForSequenceClassification"),GUr.forEach(t),dPo=r(Fye," (Wav2Vec2 model)"),Fye.forEach(t),cPo=i(Qt),jb=n(Qt,"LI",{});var Cye=s(jb);ele=n(Cye,"STRONG",{});var OUr=s(ele);fPo=r(OUr,"wavlm"),OUr.forEach(t),mPo=r(Cye," \u2014 "),gN=n(Cye,"A",{href:!0});var XUr=s(gN);gPo=r(XUr,"WavLMForSequenceClassification"),XUr.forEach(t),hPo=r(Cye," (WavLM model)"),Cye.forEach(t),Qt.forEach(t),pPo=i(Wt),Nb=n(Wt,"P",{});var Mye=s(Nb);_Po=r(Mye,"The model is set in evaluation mode by default using "),ole=n(Mye,"CODE",{});var zUr=s(ole);uPo=r(zUr,"model.eval()"),zUr.forEach(t),bPo=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=n(Mye,"CODE",{});var VUr=s(rle);vPo=r(VUr,"model.train()"),VUr.forEach(t),Mye.forEach(t),TPo=i(Wt),tle=n(Wt,"P",{});var WUr=s(tle);FPo=r(WUr,"Examples:"),WUr.forEach(t),CPo=i(Wt),m(wy.$$.fragment,Wt),Wt.forEach(t),ml.forEach(t),Z7e=i(d),Bd=n(d,"H2",{class:!0});var sxe=s(Bd);Db=n(sxe,"A",{id:!0,class:!0,href:!0});var QUr=s(Db);ale=n(QUr,"SPAN",{});var HUr=s(ale);m(Ay.$$.fragment,HUr),HUr.forEach(t),QUr.forEach(t),MPo=i(sxe),nle=n(sxe,"SPAN",{});var UUr=s(nle);EPo=r(UUr,"AutoModelForAudioFrameClassification"),UUr.forEach(t),sxe.forEach(t),e8e=i(d),nr=n(d,"DIV",{class:!0});var hl=s(nr);m(Ly.$$.fragment,hl),yPo=i(hl),xd=n(hl,"P",{});var Az=s(xd);wPo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sle=n(Az,"CODE",{});var JUr=s(sle);APo=r(JUr,"from_pretrained()"),JUr.forEach(t),LPo=r(Az,"class method or the "),lle=n(Az,"CODE",{});var YUr=s(lle);BPo=r(YUr,"from_config()"),YUr.forEach(t),xPo=r(Az,`class
method.`),Az.forEach(t),kPo=i(hl),By=n(hl,"P",{});var lxe=s(By);RPo=r(lxe,"This class cannot be instantiated directly using "),ile=n(lxe,"CODE",{});var KUr=s(ile);SPo=r(KUr,"__init__()"),KUr.forEach(t),PPo=r(lxe," (throws an error)."),lxe.forEach(t),$Po=i(hl),Kr=n(hl,"DIV",{class:!0});var pl=s(Kr);m(xy.$$.fragment,pl),IPo=i(pl),dle=n(pl,"P",{});var ZUr=s(dle);jPo=r(ZUr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZUr.forEach(t),NPo=i(pl),kd=n(pl,"P",{});var Lz=s(kd);DPo=r(Lz,`Note:
Loading a model from its configuration file does `),cle=n(Lz,"STRONG",{});var eJr=s(cle);qPo=r(eJr,"not"),eJr.forEach(t),GPo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fle=n(Lz,"CODE",{});var oJr=s(fle);OPo=r(oJr,"from_pretrained()"),oJr.forEach(t),XPo=r(Lz,"to load the model weights."),Lz.forEach(t),zPo=i(pl),mle=n(pl,"P",{});var rJr=s(mle);VPo=r(rJr,"Examples:"),rJr.forEach(t),WPo=i(pl),m(ky.$$.fragment,pl),pl.forEach(t),QPo=i(hl),ze=n(hl,"DIV",{class:!0});var Ht=s(ze);m(Ry.$$.fragment,Ht),HPo=i(Ht),gle=n(Ht,"P",{});var tJr=s(gle);UPo=r(tJr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tJr.forEach(t),JPo=i(Ht),Za=n(Ht,"P",{});var MM=s(Za);YPo=r(MM,"The model class to instantiate is selected based on the "),hle=n(MM,"CODE",{});var aJr=s(hle);KPo=r(aJr,"model_type"),aJr.forEach(t),ZPo=r(MM,` property of the config object (either
passed as an argument or loaded from `),ple=n(MM,"CODE",{});var nJr=s(ple);e$o=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),o$o=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(MM,"CODE",{});var sJr=s(_le);r$o=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),t$o=r(MM,":"),MM.forEach(t),a$o=i(Ht),Rd=n(Ht,"UL",{});var Bz=s(Rd);qb=n(Bz,"LI",{});var Eye=s(qb);ule=n(Eye,"STRONG",{});var lJr=s(ule);n$o=r(lJr,"unispeech-sat"),lJr.forEach(t),s$o=r(Eye," \u2014 "),hN=n(Eye,"A",{href:!0});var iJr=s(hN);l$o=r(iJr,"UniSpeechSatForAudioFrameClassification"),iJr.forEach(t),i$o=r(Eye," (UniSpeechSat model)"),Eye.forEach(t),d$o=i(Bz),Gb=n(Bz,"LI",{});var yye=s(Gb);ble=n(yye,"STRONG",{});var dJr=s(ble);c$o=r(dJr,"wav2vec2"),dJr.forEach(t),f$o=r(yye," \u2014 "),pN=n(yye,"A",{href:!0});var cJr=s(pN);m$o=r(cJr,"Wav2Vec2ForAudioFrameClassification"),cJr.forEach(t),g$o=r(yye," (Wav2Vec2 model)"),yye.forEach(t),h$o=i(Bz),Ob=n(Bz,"LI",{});var wye=s(Ob);vle=n(wye,"STRONG",{});var fJr=s(vle);p$o=r(fJr,"wavlm"),fJr.forEach(t),_$o=r(wye," \u2014 "),_N=n(wye,"A",{href:!0});var mJr=s(_N);u$o=r(mJr,"WavLMForAudioFrameClassification"),mJr.forEach(t),b$o=r(wye," (WavLM model)"),wye.forEach(t),Bz.forEach(t),v$o=i(Ht),Xb=n(Ht,"P",{});var Aye=s(Xb);T$o=r(Aye,"The model is set in evaluation mode by default using "),Tle=n(Aye,"CODE",{});var gJr=s(Tle);F$o=r(gJr,"model.eval()"),gJr.forEach(t),C$o=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=n(Aye,"CODE",{});var hJr=s(Fle);M$o=r(hJr,"model.train()"),hJr.forEach(t),Aye.forEach(t),E$o=i(Ht),Cle=n(Ht,"P",{});var pJr=s(Cle);y$o=r(pJr,"Examples:"),pJr.forEach(t),w$o=i(Ht),m(Sy.$$.fragment,Ht),Ht.forEach(t),hl.forEach(t),o8e=i(d),Sd=n(d,"H2",{class:!0});var ixe=s(Sd);zb=n(ixe,"A",{id:!0,class:!0,href:!0});var _Jr=s(zb);Mle=n(_Jr,"SPAN",{});var uJr=s(Mle);m(Py.$$.fragment,uJr),uJr.forEach(t),_Jr.forEach(t),A$o=i(ixe),Ele=n(ixe,"SPAN",{});var bJr=s(Ele);L$o=r(bJr,"AutoModelForCTC"),bJr.forEach(t),ixe.forEach(t),r8e=i(d),sr=n(d,"DIV",{class:!0});var _l=s(sr);m($y.$$.fragment,_l),B$o=i(_l),Pd=n(_l,"P",{});var xz=s(Pd);x$o=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yle=n(xz,"CODE",{});var vJr=s(yle);k$o=r(vJr,"from_pretrained()"),vJr.forEach(t),R$o=r(xz,"class method or the "),wle=n(xz,"CODE",{});var TJr=s(wle);S$o=r(TJr,"from_config()"),TJr.forEach(t),P$o=r(xz,`class
method.`),xz.forEach(t),$$o=i(_l),Iy=n(_l,"P",{});var dxe=s(Iy);I$o=r(dxe,"This class cannot be instantiated directly using "),Ale=n(dxe,"CODE",{});var FJr=s(Ale);j$o=r(FJr,"__init__()"),FJr.forEach(t),N$o=r(dxe," (throws an error)."),dxe.forEach(t),D$o=i(_l),Zr=n(_l,"DIV",{class:!0});var ul=s(Zr);m(jy.$$.fragment,ul),q$o=i(ul),Lle=n(ul,"P",{});var CJr=s(Lle);G$o=r(CJr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),CJr.forEach(t),O$o=i(ul),$d=n(ul,"P",{});var kz=s($d);X$o=r(kz,`Note:
Loading a model from its configuration file does `),Ble=n(kz,"STRONG",{});var MJr=s(Ble);z$o=r(MJr,"not"),MJr.forEach(t),V$o=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xle=n(kz,"CODE",{});var EJr=s(xle);W$o=r(EJr,"from_pretrained()"),EJr.forEach(t),Q$o=r(kz,"to load the model weights."),kz.forEach(t),H$o=i(ul),kle=n(ul,"P",{});var yJr=s(kle);U$o=r(yJr,"Examples:"),yJr.forEach(t),J$o=i(ul),m(Ny.$$.fragment,ul),ul.forEach(t),Y$o=i(_l),Ve=n(_l,"DIV",{class:!0});var Ut=s(Ve);m(Dy.$$.fragment,Ut),K$o=i(Ut),Rle=n(Ut,"P",{});var wJr=s(Rle);Z$o=r(wJr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wJr.forEach(t),eIo=i(Ut),en=n(Ut,"P",{});var EM=s(en);oIo=r(EM,"The model class to instantiate is selected based on the "),Sle=n(EM,"CODE",{});var AJr=s(Sle);rIo=r(AJr,"model_type"),AJr.forEach(t),tIo=r(EM,` property of the config object (either
passed as an argument or loaded from `),Ple=n(EM,"CODE",{});var LJr=s(Ple);aIo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),nIo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(EM,"CODE",{});var BJr=s($le);sIo=r(BJr,"pretrained_model_name_or_path"),BJr.forEach(t),lIo=r(EM,":"),EM.forEach(t),iIo=i(Ut),no=n(Ut,"UL",{});var Jt=s(no);Vb=n(Jt,"LI",{});var Lye=s(Vb);Ile=n(Lye,"STRONG",{});var xJr=s(Ile);dIo=r(xJr,"hubert"),xJr.forEach(t),cIo=r(Lye," \u2014 "),uN=n(Lye,"A",{href:!0});var kJr=s(uN);fIo=r(kJr,"HubertForCTC"),kJr.forEach(t),mIo=r(Lye," (Hubert model)"),Lye.forEach(t),gIo=i(Jt),Wb=n(Jt,"LI",{});var Bye=s(Wb);jle=n(Bye,"STRONG",{});var RJr=s(jle);hIo=r(RJr,"sew"),RJr.forEach(t),pIo=r(Bye," \u2014 "),bN=n(Bye,"A",{href:!0});var SJr=s(bN);_Io=r(SJr,"SEWForCTC"),SJr.forEach(t),uIo=r(Bye," (SEW model)"),Bye.forEach(t),bIo=i(Jt),Qb=n(Jt,"LI",{});var xye=s(Qb);Nle=n(xye,"STRONG",{});var PJr=s(Nle);vIo=r(PJr,"sew-d"),PJr.forEach(t),TIo=r(xye," \u2014 "),vN=n(xye,"A",{href:!0});var $Jr=s(vN);FIo=r($Jr,"SEWDForCTC"),$Jr.forEach(t),CIo=r(xye," (SEW-D model)"),xye.forEach(t),MIo=i(Jt),Hb=n(Jt,"LI",{});var kye=s(Hb);Dle=n(kye,"STRONG",{});var IJr=s(Dle);EIo=r(IJr,"unispeech"),IJr.forEach(t),yIo=r(kye," \u2014 "),TN=n(kye,"A",{href:!0});var jJr=s(TN);wIo=r(jJr,"UniSpeechForCTC"),jJr.forEach(t),AIo=r(kye," (UniSpeech model)"),kye.forEach(t),LIo=i(Jt),Ub=n(Jt,"LI",{});var Rye=s(Ub);qle=n(Rye,"STRONG",{});var NJr=s(qle);BIo=r(NJr,"unispeech-sat"),NJr.forEach(t),xIo=r(Rye," \u2014 "),FN=n(Rye,"A",{href:!0});var DJr=s(FN);kIo=r(DJr,"UniSpeechSatForCTC"),DJr.forEach(t),RIo=r(Rye," (UniSpeechSat model)"),Rye.forEach(t),SIo=i(Jt),Jb=n(Jt,"LI",{});var Sye=s(Jb);Gle=n(Sye,"STRONG",{});var qJr=s(Gle);PIo=r(qJr,"wav2vec2"),qJr.forEach(t),$Io=r(Sye," \u2014 "),CN=n(Sye,"A",{href:!0});var GJr=s(CN);IIo=r(GJr,"Wav2Vec2ForCTC"),GJr.forEach(t),jIo=r(Sye," (Wav2Vec2 model)"),Sye.forEach(t),NIo=i(Jt),Yb=n(Jt,"LI",{});var Pye=s(Yb);Ole=n(Pye,"STRONG",{});var OJr=s(Ole);DIo=r(OJr,"wavlm"),OJr.forEach(t),qIo=r(Pye," \u2014 "),MN=n(Pye,"A",{href:!0});var XJr=s(MN);GIo=r(XJr,"WavLMForCTC"),XJr.forEach(t),OIo=r(Pye," (WavLM model)"),Pye.forEach(t),Jt.forEach(t),XIo=i(Ut),Kb=n(Ut,"P",{});var $ye=s(Kb);zIo=r($ye,"The model is set in evaluation mode by default using "),Xle=n($ye,"CODE",{});var zJr=s(Xle);VIo=r(zJr,"model.eval()"),zJr.forEach(t),WIo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zle=n($ye,"CODE",{});var VJr=s(zle);QIo=r(VJr,"model.train()"),VJr.forEach(t),$ye.forEach(t),HIo=i(Ut),Vle=n(Ut,"P",{});var WJr=s(Vle);UIo=r(WJr,"Examples:"),WJr.forEach(t),JIo=i(Ut),m(qy.$$.fragment,Ut),Ut.forEach(t),_l.forEach(t),t8e=i(d),Id=n(d,"H2",{class:!0});var cxe=s(Id);Zb=n(cxe,"A",{id:!0,class:!0,href:!0});var QJr=s(Zb);Wle=n(QJr,"SPAN",{});var HJr=s(Wle);m(Gy.$$.fragment,HJr),HJr.forEach(t),QJr.forEach(t),YIo=i(cxe),Qle=n(cxe,"SPAN",{});var UJr=s(Qle);KIo=r(UJr,"AutoModelForSpeechSeq2Seq"),UJr.forEach(t),cxe.forEach(t),a8e=i(d),lr=n(d,"DIV",{class:!0});var bl=s(lr);m(Oy.$$.fragment,bl),ZIo=i(bl),jd=n(bl,"P",{});var Rz=s(jd);ejo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Hle=n(Rz,"CODE",{});var JJr=s(Hle);ojo=r(JJr,"from_pretrained()"),JJr.forEach(t),rjo=r(Rz,"class method or the "),Ule=n(Rz,"CODE",{});var YJr=s(Ule);tjo=r(YJr,"from_config()"),YJr.forEach(t),ajo=r(Rz,`class
method.`),Rz.forEach(t),njo=i(bl),Xy=n(bl,"P",{});var fxe=s(Xy);sjo=r(fxe,"This class cannot be instantiated directly using "),Jle=n(fxe,"CODE",{});var KJr=s(Jle);ljo=r(KJr,"__init__()"),KJr.forEach(t),ijo=r(fxe," (throws an error)."),fxe.forEach(t),djo=i(bl),et=n(bl,"DIV",{class:!0});var vl=s(et);m(zy.$$.fragment,vl),cjo=i(vl),Yle=n(vl,"P",{});var ZJr=s(Yle);fjo=r(ZJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZJr.forEach(t),mjo=i(vl),Nd=n(vl,"P",{});var Sz=s(Nd);gjo=r(Sz,`Note:
Loading a model from its configuration file does `),Kle=n(Sz,"STRONG",{});var eYr=s(Kle);hjo=r(eYr,"not"),eYr.forEach(t),pjo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zle=n(Sz,"CODE",{});var oYr=s(Zle);_jo=r(oYr,"from_pretrained()"),oYr.forEach(t),ujo=r(Sz,"to load the model weights."),Sz.forEach(t),bjo=i(vl),eie=n(vl,"P",{});var rYr=s(eie);vjo=r(rYr,"Examples:"),rYr.forEach(t),Tjo=i(vl),m(Vy.$$.fragment,vl),vl.forEach(t),Fjo=i(bl),We=n(bl,"DIV",{class:!0});var Yt=s(We);m(Wy.$$.fragment,Yt),Cjo=i(Yt),oie=n(Yt,"P",{});var tYr=s(oie);Mjo=r(tYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tYr.forEach(t),Ejo=i(Yt),on=n(Yt,"P",{});var yM=s(on);yjo=r(yM,"The model class to instantiate is selected based on the "),rie=n(yM,"CODE",{});var aYr=s(rie);wjo=r(aYr,"model_type"),aYr.forEach(t),Ajo=r(yM,` property of the config object (either
passed as an argument or loaded from `),tie=n(yM,"CODE",{});var nYr=s(tie);Ljo=r(nYr,"pretrained_model_name_or_path"),nYr.forEach(t),Bjo=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aie=n(yM,"CODE",{});var sYr=s(aie);xjo=r(sYr,"pretrained_model_name_or_path"),sYr.forEach(t),kjo=r(yM,":"),yM.forEach(t),Rjo=i(Yt),Qy=n(Yt,"UL",{});var mxe=s(Qy);ev=n(mxe,"LI",{});var Iye=s(ev);nie=n(Iye,"STRONG",{});var lYr=s(nie);Sjo=r(lYr,"speech-encoder-decoder"),lYr.forEach(t),Pjo=r(Iye," \u2014 "),EN=n(Iye,"A",{href:!0});var iYr=s(EN);$jo=r(iYr,"SpeechEncoderDecoderModel"),iYr.forEach(t),Ijo=r(Iye," (Speech Encoder decoder model)"),Iye.forEach(t),jjo=i(mxe),ov=n(mxe,"LI",{});var jye=s(ov);sie=n(jye,"STRONG",{});var dYr=s(sie);Njo=r(dYr,"speech_to_text"),dYr.forEach(t),Djo=r(jye," \u2014 "),yN=n(jye,"A",{href:!0});var cYr=s(yN);qjo=r(cYr,"Speech2TextForConditionalGeneration"),cYr.forEach(t),Gjo=r(jye," (Speech2Text model)"),jye.forEach(t),mxe.forEach(t),Ojo=i(Yt),rv=n(Yt,"P",{});var Nye=s(rv);Xjo=r(Nye,"The model is set in evaluation mode by default using "),lie=n(Nye,"CODE",{});var fYr=s(lie);zjo=r(fYr,"model.eval()"),fYr.forEach(t),Vjo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=n(Nye,"CODE",{});var mYr=s(iie);Wjo=r(mYr,"model.train()"),mYr.forEach(t),Nye.forEach(t),Qjo=i(Yt),die=n(Yt,"P",{});var gYr=s(die);Hjo=r(gYr,"Examples:"),gYr.forEach(t),Ujo=i(Yt),m(Hy.$$.fragment,Yt),Yt.forEach(t),bl.forEach(t),n8e=i(d),Dd=n(d,"H2",{class:!0});var gxe=s(Dd);tv=n(gxe,"A",{id:!0,class:!0,href:!0});var hYr=s(tv);cie=n(hYr,"SPAN",{});var pYr=s(cie);m(Uy.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),Jjo=i(gxe),fie=n(gxe,"SPAN",{});var _Yr=s(fie);Yjo=r(_Yr,"AutoModelForAudioXVector"),_Yr.forEach(t),gxe.forEach(t),s8e=i(d),ir=n(d,"DIV",{class:!0});var Tl=s(ir);m(Jy.$$.fragment,Tl),Kjo=i(Tl),qd=n(Tl,"P",{});var Pz=s(qd);Zjo=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),mie=n(Pz,"CODE",{});var uYr=s(mie);eNo=r(uYr,"from_pretrained()"),uYr.forEach(t),oNo=r(Pz,"class method or the "),gie=n(Pz,"CODE",{});var bYr=s(gie);rNo=r(bYr,"from_config()"),bYr.forEach(t),tNo=r(Pz,`class
method.`),Pz.forEach(t),aNo=i(Tl),Yy=n(Tl,"P",{});var hxe=s(Yy);nNo=r(hxe,"This class cannot be instantiated directly using "),hie=n(hxe,"CODE",{});var vYr=s(hie);sNo=r(vYr,"__init__()"),vYr.forEach(t),lNo=r(hxe," (throws an error)."),hxe.forEach(t),iNo=i(Tl),ot=n(Tl,"DIV",{class:!0});var Fl=s(ot);m(Ky.$$.fragment,Fl),dNo=i(Fl),pie=n(Fl,"P",{});var TYr=s(pie);cNo=r(TYr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),TYr.forEach(t),fNo=i(Fl),Gd=n(Fl,"P",{});var $z=s(Gd);mNo=r($z,`Note:
Loading a model from its configuration file does `),_ie=n($z,"STRONG",{});var FYr=s(_ie);gNo=r(FYr,"not"),FYr.forEach(t),hNo=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=n($z,"CODE",{});var CYr=s(uie);pNo=r(CYr,"from_pretrained()"),CYr.forEach(t),_No=r($z,"to load the model weights."),$z.forEach(t),uNo=i(Fl),bie=n(Fl,"P",{});var MYr=s(bie);bNo=r(MYr,"Examples:"),MYr.forEach(t),vNo=i(Fl),m(Zy.$$.fragment,Fl),Fl.forEach(t),TNo=i(Tl),Qe=n(Tl,"DIV",{class:!0});var Kt=s(Qe);m(ew.$$.fragment,Kt),FNo=i(Kt),vie=n(Kt,"P",{});var EYr=s(vie);CNo=r(EYr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),EYr.forEach(t),MNo=i(Kt),rn=n(Kt,"P",{});var wM=s(rn);ENo=r(wM,"The model class to instantiate is selected based on the "),Tie=n(wM,"CODE",{});var yYr=s(Tie);yNo=r(yYr,"model_type"),yYr.forEach(t),wNo=r(wM,` property of the config object (either
passed as an argument or loaded from `),Fie=n(wM,"CODE",{});var wYr=s(Fie);ANo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),LNo=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=n(wM,"CODE",{});var AYr=s(Cie);BNo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),xNo=r(wM,":"),wM.forEach(t),kNo=i(Kt),Od=n(Kt,"UL",{});var Iz=s(Od);av=n(Iz,"LI",{});var Dye=s(av);Mie=n(Dye,"STRONG",{});var LYr=s(Mie);RNo=r(LYr,"unispeech-sat"),LYr.forEach(t),SNo=r(Dye," \u2014 "),wN=n(Dye,"A",{href:!0});var BYr=s(wN);PNo=r(BYr,"UniSpeechSatForXVector"),BYr.forEach(t),$No=r(Dye," (UniSpeechSat model)"),Dye.forEach(t),INo=i(Iz),nv=n(Iz,"LI",{});var qye=s(nv);Eie=n(qye,"STRONG",{});var xYr=s(Eie);jNo=r(xYr,"wav2vec2"),xYr.forEach(t),NNo=r(qye," \u2014 "),AN=n(qye,"A",{href:!0});var kYr=s(AN);DNo=r(kYr,"Wav2Vec2ForXVector"),kYr.forEach(t),qNo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),GNo=i(Iz),sv=n(Iz,"LI",{});var Gye=s(sv);yie=n(Gye,"STRONG",{});var RYr=s(yie);ONo=r(RYr,"wavlm"),RYr.forEach(t),XNo=r(Gye," \u2014 "),LN=n(Gye,"A",{href:!0});var SYr=s(LN);zNo=r(SYr,"WavLMForXVector"),SYr.forEach(t),VNo=r(Gye," (WavLM model)"),Gye.forEach(t),Iz.forEach(t),WNo=i(Kt),lv=n(Kt,"P",{});var Oye=s(lv);QNo=r(Oye,"The model is set in evaluation mode by default using "),wie=n(Oye,"CODE",{});var PYr=s(wie);HNo=r(PYr,"model.eval()"),PYr.forEach(t),UNo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(Oye,"CODE",{});var $Yr=s(Aie);JNo=r($Yr,"model.train()"),$Yr.forEach(t),Oye.forEach(t),YNo=i(Kt),Lie=n(Kt,"P",{});var IYr=s(Lie);KNo=r(IYr,"Examples:"),IYr.forEach(t),ZNo=i(Kt),m(ow.$$.fragment,Kt),Kt.forEach(t),Tl.forEach(t),l8e=i(d),Xd=n(d,"H2",{class:!0});var pxe=s(Xd);iv=n(pxe,"A",{id:!0,class:!0,href:!0});var jYr=s(iv);Bie=n(jYr,"SPAN",{});var NYr=s(Bie);m(rw.$$.fragment,NYr),NYr.forEach(t),jYr.forEach(t),eDo=i(pxe),xie=n(pxe,"SPAN",{});var DYr=s(xie);oDo=r(DYr,"AutoModelForMaskedImageModeling"),DYr.forEach(t),pxe.forEach(t),i8e=i(d),dr=n(d,"DIV",{class:!0});var Cl=s(dr);m(tw.$$.fragment,Cl),rDo=i(Cl),zd=n(Cl,"P",{});var jz=s(zd);tDo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kie=n(jz,"CODE",{});var qYr=s(kie);aDo=r(qYr,"from_pretrained()"),qYr.forEach(t),nDo=r(jz,"class method or the "),Rie=n(jz,"CODE",{});var GYr=s(Rie);sDo=r(GYr,"from_config()"),GYr.forEach(t),lDo=r(jz,`class
method.`),jz.forEach(t),iDo=i(Cl),aw=n(Cl,"P",{});var _xe=s(aw);dDo=r(_xe,"This class cannot be instantiated directly using "),Sie=n(_xe,"CODE",{});var OYr=s(Sie);cDo=r(OYr,"__init__()"),OYr.forEach(t),fDo=r(_xe," (throws an error)."),_xe.forEach(t),mDo=i(Cl),rt=n(Cl,"DIV",{class:!0});var Ml=s(rt);m(nw.$$.fragment,Ml),gDo=i(Ml),Pie=n(Ml,"P",{});var XYr=s(Pie);hDo=r(XYr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XYr.forEach(t),pDo=i(Ml),Vd=n(Ml,"P",{});var Nz=s(Vd);_Do=r(Nz,`Note:
Loading a model from its configuration file does `),$ie=n(Nz,"STRONG",{});var zYr=s($ie);uDo=r(zYr,"not"),zYr.forEach(t),bDo=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iie=n(Nz,"CODE",{});var VYr=s(Iie);vDo=r(VYr,"from_pretrained()"),VYr.forEach(t),TDo=r(Nz,"to load the model weights."),Nz.forEach(t),FDo=i(Ml),jie=n(Ml,"P",{});var WYr=s(jie);CDo=r(WYr,"Examples:"),WYr.forEach(t),MDo=i(Ml),m(sw.$$.fragment,Ml),Ml.forEach(t),EDo=i(Cl),He=n(Cl,"DIV",{class:!0});var Zt=s(He);m(lw.$$.fragment,Zt),yDo=i(Zt),Nie=n(Zt,"P",{});var QYr=s(Nie);wDo=r(QYr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),QYr.forEach(t),ADo=i(Zt),tn=n(Zt,"P",{});var AM=s(tn);LDo=r(AM,"The model class to instantiate is selected based on the "),Die=n(AM,"CODE",{});var HYr=s(Die);BDo=r(HYr,"model_type"),HYr.forEach(t),xDo=r(AM,` property of the config object (either
passed as an argument or loaded from `),qie=n(AM,"CODE",{});var UYr=s(qie);kDo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),RDo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=n(AM,"CODE",{});var JYr=s(Gie);SDo=r(JYr,"pretrained_model_name_or_path"),JYr.forEach(t),PDo=r(AM,":"),AM.forEach(t),$Do=i(Zt),Wd=n(Zt,"UL",{});var Dz=s(Wd);dv=n(Dz,"LI",{});var Xye=s(dv);Oie=n(Xye,"STRONG",{});var YYr=s(Oie);IDo=r(YYr,"deit"),YYr.forEach(t),jDo=r(Xye," \u2014 "),BN=n(Xye,"A",{href:!0});var KYr=s(BN);NDo=r(KYr,"DeiTForMaskedImageModeling"),KYr.forEach(t),DDo=r(Xye," (DeiT model)"),Xye.forEach(t),qDo=i(Dz),cv=n(Dz,"LI",{});var zye=s(cv);Xie=n(zye,"STRONG",{});var ZYr=s(Xie);GDo=r(ZYr,"swin"),ZYr.forEach(t),ODo=r(zye," \u2014 "),xN=n(zye,"A",{href:!0});var eKr=s(xN);XDo=r(eKr,"SwinForMaskedImageModeling"),eKr.forEach(t),zDo=r(zye," (Swin model)"),zye.forEach(t),VDo=i(Dz),fv=n(Dz,"LI",{});var Vye=s(fv);zie=n(Vye,"STRONG",{});var oKr=s(zie);WDo=r(oKr,"vit"),oKr.forEach(t),QDo=r(Vye," \u2014 "),kN=n(Vye,"A",{href:!0});var rKr=s(kN);HDo=r(rKr,"ViTForMaskedImageModeling"),rKr.forEach(t),UDo=r(Vye," (ViT model)"),Vye.forEach(t),Dz.forEach(t),JDo=i(Zt),mv=n(Zt,"P",{});var Wye=s(mv);YDo=r(Wye,"The model is set in evaluation mode by default using "),Vie=n(Wye,"CODE",{});var tKr=s(Vie);KDo=r(tKr,"model.eval()"),tKr.forEach(t),ZDo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(Wye,"CODE",{});var aKr=s(Wie);eqo=r(aKr,"model.train()"),aKr.forEach(t),Wye.forEach(t),oqo=i(Zt),Qie=n(Zt,"P",{});var nKr=s(Qie);rqo=r(nKr,"Examples:"),nKr.forEach(t),tqo=i(Zt),m(iw.$$.fragment,Zt),Zt.forEach(t),Cl.forEach(t),d8e=i(d),Qd=n(d,"H2",{class:!0});var uxe=s(Qd);gv=n(uxe,"A",{id:!0,class:!0,href:!0});var sKr=s(gv);Hie=n(sKr,"SPAN",{});var lKr=s(Hie);m(dw.$$.fragment,lKr),lKr.forEach(t),sKr.forEach(t),aqo=i(uxe),Uie=n(uxe,"SPAN",{});var iKr=s(Uie);nqo=r(iKr,"AutoModelForObjectDetection"),iKr.forEach(t),uxe.forEach(t),c8e=i(d),cr=n(d,"DIV",{class:!0});var El=s(cr);m(cw.$$.fragment,El),sqo=i(El),Hd=n(El,"P",{});var qz=s(Hd);lqo=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Jie=n(qz,"CODE",{});var dKr=s(Jie);iqo=r(dKr,"from_pretrained()"),dKr.forEach(t),dqo=r(qz,"class method or the "),Yie=n(qz,"CODE",{});var cKr=s(Yie);cqo=r(cKr,"from_config()"),cKr.forEach(t),fqo=r(qz,`class
method.`),qz.forEach(t),mqo=i(El),fw=n(El,"P",{});var bxe=s(fw);gqo=r(bxe,"This class cannot be instantiated directly using "),Kie=n(bxe,"CODE",{});var fKr=s(Kie);hqo=r(fKr,"__init__()"),fKr.forEach(t),pqo=r(bxe," (throws an error)."),bxe.forEach(t),_qo=i(El),tt=n(El,"DIV",{class:!0});var yl=s(tt);m(mw.$$.fragment,yl),uqo=i(yl),Zie=n(yl,"P",{});var mKr=s(Zie);bqo=r(mKr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mKr.forEach(t),vqo=i(yl),Ud=n(yl,"P",{});var Gz=s(Ud);Tqo=r(Gz,`Note:
Loading a model from its configuration file does `),ede=n(Gz,"STRONG",{});var gKr=s(ede);Fqo=r(gKr,"not"),gKr.forEach(t),Cqo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=n(Gz,"CODE",{});var hKr=s(ode);Mqo=r(hKr,"from_pretrained()"),hKr.forEach(t),Eqo=r(Gz,"to load the model weights."),Gz.forEach(t),yqo=i(yl),rde=n(yl,"P",{});var pKr=s(rde);wqo=r(pKr,"Examples:"),pKr.forEach(t),Aqo=i(yl),m(gw.$$.fragment,yl),yl.forEach(t),Lqo=i(El),Ue=n(El,"DIV",{class:!0});var ea=s(Ue);m(hw.$$.fragment,ea),Bqo=i(ea),tde=n(ea,"P",{});var _Kr=s(tde);xqo=r(_Kr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_Kr.forEach(t),kqo=i(ea),an=n(ea,"P",{});var LM=s(an);Rqo=r(LM,"The model class to instantiate is selected based on the "),ade=n(LM,"CODE",{});var uKr=s(ade);Sqo=r(uKr,"model_type"),uKr.forEach(t),Pqo=r(LM,` property of the config object (either
passed as an argument or loaded from `),nde=n(LM,"CODE",{});var bKr=s(nde);$qo=r(bKr,"pretrained_model_name_or_path"),bKr.forEach(t),Iqo=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(LM,"CODE",{});var vKr=s(sde);jqo=r(vKr,"pretrained_model_name_or_path"),vKr.forEach(t),Nqo=r(LM,":"),LM.forEach(t),Dqo=i(ea),lde=n(ea,"UL",{});var TKr=s(lde);hv=n(TKr,"LI",{});var Qye=s(hv);ide=n(Qye,"STRONG",{});var FKr=s(ide);qqo=r(FKr,"detr"),FKr.forEach(t),Gqo=r(Qye," \u2014 "),RN=n(Qye,"A",{href:!0});var CKr=s(RN);Oqo=r(CKr,"DetrForObjectDetection"),CKr.forEach(t),Xqo=r(Qye," (DETR model)"),Qye.forEach(t),TKr.forEach(t),zqo=i(ea),pv=n(ea,"P",{});var Hye=s(pv);Vqo=r(Hye,"The model is set in evaluation mode by default using "),dde=n(Hye,"CODE",{});var MKr=s(dde);Wqo=r(MKr,"model.eval()"),MKr.forEach(t),Qqo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(Hye,"CODE",{});var EKr=s(cde);Hqo=r(EKr,"model.train()"),EKr.forEach(t),Hye.forEach(t),Uqo=i(ea),fde=n(ea,"P",{});var yKr=s(fde);Jqo=r(yKr,"Examples:"),yKr.forEach(t),Yqo=i(ea),m(pw.$$.fragment,ea),ea.forEach(t),El.forEach(t),f8e=i(d),Jd=n(d,"H2",{class:!0});var vxe=s(Jd);_v=n(vxe,"A",{id:!0,class:!0,href:!0});var wKr=s(_v);mde=n(wKr,"SPAN",{});var AKr=s(mde);m(_w.$$.fragment,AKr),AKr.forEach(t),wKr.forEach(t),Kqo=i(vxe),gde=n(vxe,"SPAN",{});var LKr=s(gde);Zqo=r(LKr,"AutoModelForImageSegmentation"),LKr.forEach(t),vxe.forEach(t),m8e=i(d),fr=n(d,"DIV",{class:!0});var wl=s(fr);m(uw.$$.fragment,wl),eGo=i(wl),Yd=n(wl,"P",{});var Oz=s(Yd);oGo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hde=n(Oz,"CODE",{});var BKr=s(hde);rGo=r(BKr,"from_pretrained()"),BKr.forEach(t),tGo=r(Oz,"class method or the "),pde=n(Oz,"CODE",{});var xKr=s(pde);aGo=r(xKr,"from_config()"),xKr.forEach(t),nGo=r(Oz,`class
method.`),Oz.forEach(t),sGo=i(wl),bw=n(wl,"P",{});var Txe=s(bw);lGo=r(Txe,"This class cannot be instantiated directly using "),_de=n(Txe,"CODE",{});var kKr=s(_de);iGo=r(kKr,"__init__()"),kKr.forEach(t),dGo=r(Txe," (throws an error)."),Txe.forEach(t),cGo=i(wl),at=n(wl,"DIV",{class:!0});var Al=s(at);m(vw.$$.fragment,Al),fGo=i(Al),ude=n(Al,"P",{});var RKr=s(ude);mGo=r(RKr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),RKr.forEach(t),gGo=i(Al),Kd=n(Al,"P",{});var Xz=s(Kd);hGo=r(Xz,`Note:
Loading a model from its configuration file does `),bde=n(Xz,"STRONG",{});var SKr=s(bde);pGo=r(SKr,"not"),SKr.forEach(t),_Go=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=n(Xz,"CODE",{});var PKr=s(vde);uGo=r(PKr,"from_pretrained()"),PKr.forEach(t),bGo=r(Xz,"to load the model weights."),Xz.forEach(t),vGo=i(Al),Tde=n(Al,"P",{});var $Kr=s(Tde);TGo=r($Kr,"Examples:"),$Kr.forEach(t),FGo=i(Al),m(Tw.$$.fragment,Al),Al.forEach(t),CGo=i(wl),Je=n(wl,"DIV",{class:!0});var oa=s(Je);m(Fw.$$.fragment,oa),MGo=i(oa),Fde=n(oa,"P",{});var IKr=s(Fde);EGo=r(IKr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),IKr.forEach(t),yGo=i(oa),nn=n(oa,"P",{});var BM=s(nn);wGo=r(BM,"The model class to instantiate is selected based on the "),Cde=n(BM,"CODE",{});var jKr=s(Cde);AGo=r(jKr,"model_type"),jKr.forEach(t),LGo=r(BM,` property of the config object (either
passed as an argument or loaded from `),Mde=n(BM,"CODE",{});var NKr=s(Mde);BGo=r(NKr,"pretrained_model_name_or_path"),NKr.forEach(t),xGo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=n(BM,"CODE",{});var DKr=s(Ede);kGo=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),RGo=r(BM,":"),BM.forEach(t),SGo=i(oa),yde=n(oa,"UL",{});var qKr=s(yde);uv=n(qKr,"LI",{});var Uye=s(uv);wde=n(Uye,"STRONG",{});var GKr=s(wde);PGo=r(GKr,"detr"),GKr.forEach(t),$Go=r(Uye," \u2014 "),SN=n(Uye,"A",{href:!0});var OKr=s(SN);IGo=r(OKr,"DetrForSegmentation"),OKr.forEach(t),jGo=r(Uye," (DETR model)"),Uye.forEach(t),qKr.forEach(t),NGo=i(oa),bv=n(oa,"P",{});var Jye=s(bv);DGo=r(Jye,"The model is set in evaluation mode by default using "),Ade=n(Jye,"CODE",{});var XKr=s(Ade);qGo=r(XKr,"model.eval()"),XKr.forEach(t),GGo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=n(Jye,"CODE",{});var zKr=s(Lde);OGo=r(zKr,"model.train()"),zKr.forEach(t),Jye.forEach(t),XGo=i(oa),Bde=n(oa,"P",{});var VKr=s(Bde);zGo=r(VKr,"Examples:"),VKr.forEach(t),VGo=i(oa),m(Cw.$$.fragment,oa),oa.forEach(t),wl.forEach(t),g8e=i(d),Zd=n(d,"H2",{class:!0});var Fxe=s(Zd);vv=n(Fxe,"A",{id:!0,class:!0,href:!0});var WKr=s(vv);xde=n(WKr,"SPAN",{});var QKr=s(xde);m(Mw.$$.fragment,QKr),QKr.forEach(t),WKr.forEach(t),WGo=i(Fxe),kde=n(Fxe,"SPAN",{});var HKr=s(kde);QGo=r(HKr,"AutoModelForSemanticSegmentation"),HKr.forEach(t),Fxe.forEach(t),h8e=i(d),mr=n(d,"DIV",{class:!0});var Ll=s(mr);m(Ew.$$.fragment,Ll),HGo=i(Ll),ec=n(Ll,"P",{});var zz=s(ec);UGo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Rde=n(zz,"CODE",{});var UKr=s(Rde);JGo=r(UKr,"from_pretrained()"),UKr.forEach(t),YGo=r(zz,"class method or the "),Sde=n(zz,"CODE",{});var JKr=s(Sde);KGo=r(JKr,"from_config()"),JKr.forEach(t),ZGo=r(zz,`class
method.`),zz.forEach(t),eOo=i(Ll),yw=n(Ll,"P",{});var Cxe=s(yw);oOo=r(Cxe,"This class cannot be instantiated directly using "),Pde=n(Cxe,"CODE",{});var YKr=s(Pde);rOo=r(YKr,"__init__()"),YKr.forEach(t),tOo=r(Cxe," (throws an error)."),Cxe.forEach(t),aOo=i(Ll),nt=n(Ll,"DIV",{class:!0});var Bl=s(nt);m(ww.$$.fragment,Bl),nOo=i(Bl),$de=n(Bl,"P",{});var KKr=s($de);sOo=r(KKr,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),KKr.forEach(t),lOo=i(Bl),oc=n(Bl,"P",{});var Vz=s(oc);iOo=r(Vz,`Note:
Loading a model from its configuration file does `),Ide=n(Vz,"STRONG",{});var ZKr=s(Ide);dOo=r(ZKr,"not"),ZKr.forEach(t),cOo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jde=n(Vz,"CODE",{});var eZr=s(jde);fOo=r(eZr,"from_pretrained()"),eZr.forEach(t),mOo=r(Vz,"to load the model weights."),Vz.forEach(t),gOo=i(Bl),Nde=n(Bl,"P",{});var oZr=s(Nde);hOo=r(oZr,"Examples:"),oZr.forEach(t),pOo=i(Bl),m(Aw.$$.fragment,Bl),Bl.forEach(t),_Oo=i(Ll),Ye=n(Ll,"DIV",{class:!0});var ra=s(Ye);m(Lw.$$.fragment,ra),uOo=i(ra),Dde=n(ra,"P",{});var rZr=s(Dde);bOo=r(rZr,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rZr.forEach(t),vOo=i(ra),sn=n(ra,"P",{});var xM=s(sn);TOo=r(xM,"The model class to instantiate is selected based on the "),qde=n(xM,"CODE",{});var tZr=s(qde);FOo=r(tZr,"model_type"),tZr.forEach(t),COo=r(xM,` property of the config object (either
passed as an argument or loaded from `),Gde=n(xM,"CODE",{});var aZr=s(Gde);MOo=r(aZr,"pretrained_model_name_or_path"),aZr.forEach(t),EOo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(xM,"CODE",{});var nZr=s(Ode);yOo=r(nZr,"pretrained_model_name_or_path"),nZr.forEach(t),wOo=r(xM,":"),xM.forEach(t),AOo=i(ra),Bw=n(ra,"UL",{});var Mxe=s(Bw);Tv=n(Mxe,"LI",{});var Yye=s(Tv);Xde=n(Yye,"STRONG",{});var sZr=s(Xde);LOo=r(sZr,"beit"),sZr.forEach(t),BOo=r(Yye," \u2014 "),PN=n(Yye,"A",{href:!0});var lZr=s(PN);xOo=r(lZr,"BeitForSemanticSegmentation"),lZr.forEach(t),kOo=r(Yye," (BEiT model)"),Yye.forEach(t),ROo=i(Mxe),Fv=n(Mxe,"LI",{});var Kye=s(Fv);zde=n(Kye,"STRONG",{});var iZr=s(zde);SOo=r(iZr,"segformer"),iZr.forEach(t),POo=r(Kye," \u2014 "),$N=n(Kye,"A",{href:!0});var dZr=s($N);$Oo=r(dZr,"SegformerForSemanticSegmentation"),dZr.forEach(t),IOo=r(Kye," (SegFormer model)"),Kye.forEach(t),Mxe.forEach(t),jOo=i(ra),Cv=n(ra,"P",{});var Zye=s(Cv);NOo=r(Zye,"The model is set in evaluation mode by default using "),Vde=n(Zye,"CODE",{});var cZr=s(Vde);DOo=r(cZr,"model.eval()"),cZr.forEach(t),qOo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(Zye,"CODE",{});var fZr=s(Wde);GOo=r(fZr,"model.train()"),fZr.forEach(t),Zye.forEach(t),OOo=i(ra),Qde=n(ra,"P",{});var mZr=s(Qde);XOo=r(mZr,"Examples:"),mZr.forEach(t),zOo=i(ra),m(xw.$$.fragment,ra),ra.forEach(t),Ll.forEach(t),p8e=i(d),rc=n(d,"H2",{class:!0});var Exe=s(rc);Mv=n(Exe,"A",{id:!0,class:!0,href:!0});var gZr=s(Mv);Hde=n(gZr,"SPAN",{});var hZr=s(Hde);m(kw.$$.fragment,hZr),hZr.forEach(t),gZr.forEach(t),VOo=i(Exe),Ude=n(Exe,"SPAN",{});var pZr=s(Ude);WOo=r(pZr,"TFAutoModel"),pZr.forEach(t),Exe.forEach(t),_8e=i(d),gr=n(d,"DIV",{class:!0});var xl=s(gr);m(Rw.$$.fragment,xl),QOo=i(xl),tc=n(xl,"P",{});var Wz=s(tc);HOo=r(Wz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jde=n(Wz,"CODE",{});var _Zr=s(Jde);UOo=r(_Zr,"from_pretrained()"),_Zr.forEach(t),JOo=r(Wz,"class method or the "),Yde=n(Wz,"CODE",{});var uZr=s(Yde);YOo=r(uZr,"from_config()"),uZr.forEach(t),KOo=r(Wz,`class
method.`),Wz.forEach(t),ZOo=i(xl),Sw=n(xl,"P",{});var yxe=s(Sw);eXo=r(yxe,"This class cannot be instantiated directly using "),Kde=n(yxe,"CODE",{});var bZr=s(Kde);oXo=r(bZr,"__init__()"),bZr.forEach(t),rXo=r(yxe," (throws an error)."),yxe.forEach(t),tXo=i(xl),st=n(xl,"DIV",{class:!0});var kl=s(st);m(Pw.$$.fragment,kl),aXo=i(kl),Zde=n(kl,"P",{});var vZr=s(Zde);nXo=r(vZr,"Instantiates one of the base model classes of the library from a configuration."),vZr.forEach(t),sXo=i(kl),ac=n(kl,"P",{});var Qz=s(ac);lXo=r(Qz,`Note:
Loading a model from its configuration file does `),ece=n(Qz,"STRONG",{});var TZr=s(ece);iXo=r(TZr,"not"),TZr.forEach(t),dXo=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=n(Qz,"CODE",{});var FZr=s(oce);cXo=r(FZr,"from_pretrained()"),FZr.forEach(t),fXo=r(Qz,"to load the model weights."),Qz.forEach(t),mXo=i(kl),rce=n(kl,"P",{});var CZr=s(rce);gXo=r(CZr,"Examples:"),CZr.forEach(t),hXo=i(kl),m($w.$$.fragment,kl),kl.forEach(t),pXo=i(xl),go=n(xl,"DIV",{class:!0});var ca=s(go);m(Iw.$$.fragment,ca),_Xo=i(ca),tce=n(ca,"P",{});var MZr=s(tce);uXo=r(MZr,"Instantiate one of the base model classes of the library from a pretrained model."),MZr.forEach(t),bXo=i(ca),ln=n(ca,"P",{});var kM=s(ln);vXo=r(kM,"The model class to instantiate is selected based on the "),ace=n(kM,"CODE",{});var EZr=s(ace);TXo=r(EZr,"model_type"),EZr.forEach(t),FXo=r(kM,` property of the config object (either
passed as an argument or loaded from `),nce=n(kM,"CODE",{});var yZr=s(nce);CXo=r(yZr,"pretrained_model_name_or_path"),yZr.forEach(t),MXo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(kM,"CODE",{});var wZr=s(sce);EXo=r(wZr,"pretrained_model_name_or_path"),wZr.forEach(t),yXo=r(kM,":"),kM.forEach(t),wXo=i(ca),B=n(ca,"UL",{});var x=s(B);Ev=n(x,"LI",{});var ewe=s(Ev);lce=n(ewe,"STRONG",{});var AZr=s(lce);AXo=r(AZr,"albert"),AZr.forEach(t),LXo=r(ewe," \u2014 "),IN=n(ewe,"A",{href:!0});var LZr=s(IN);BXo=r(LZr,"TFAlbertModel"),LZr.forEach(t),xXo=r(ewe," (ALBERT model)"),ewe.forEach(t),kXo=i(x),yv=n(x,"LI",{});var owe=s(yv);ice=n(owe,"STRONG",{});var BZr=s(ice);RXo=r(BZr,"bart"),BZr.forEach(t),SXo=r(owe," \u2014 "),jN=n(owe,"A",{href:!0});var xZr=s(jN);PXo=r(xZr,"TFBartModel"),xZr.forEach(t),$Xo=r(owe," (BART model)"),owe.forEach(t),IXo=i(x),wv=n(x,"LI",{});var rwe=s(wv);dce=n(rwe,"STRONG",{});var kZr=s(dce);jXo=r(kZr,"bert"),kZr.forEach(t),NXo=r(rwe," \u2014 "),NN=n(rwe,"A",{href:!0});var RZr=s(NN);DXo=r(RZr,"TFBertModel"),RZr.forEach(t),qXo=r(rwe," (BERT model)"),rwe.forEach(t),GXo=i(x),Av=n(x,"LI",{});var twe=s(Av);cce=n(twe,"STRONG",{});var SZr=s(cce);OXo=r(SZr,"blenderbot"),SZr.forEach(t),XXo=r(twe," \u2014 "),DN=n(twe,"A",{href:!0});var PZr=s(DN);zXo=r(PZr,"TFBlenderbotModel"),PZr.forEach(t),VXo=r(twe," (Blenderbot model)"),twe.forEach(t),WXo=i(x),Lv=n(x,"LI",{});var awe=s(Lv);fce=n(awe,"STRONG",{});var $Zr=s(fce);QXo=r($Zr,"blenderbot-small"),$Zr.forEach(t),HXo=r(awe," \u2014 "),qN=n(awe,"A",{href:!0});var IZr=s(qN);UXo=r(IZr,"TFBlenderbotSmallModel"),IZr.forEach(t),JXo=r(awe," (BlenderbotSmall model)"),awe.forEach(t),YXo=i(x),Bv=n(x,"LI",{});var nwe=s(Bv);mce=n(nwe,"STRONG",{});var jZr=s(mce);KXo=r(jZr,"camembert"),jZr.forEach(t),ZXo=r(nwe," \u2014 "),GN=n(nwe,"A",{href:!0});var NZr=s(GN);ezo=r(NZr,"TFCamembertModel"),NZr.forEach(t),ozo=r(nwe," (CamemBERT model)"),nwe.forEach(t),rzo=i(x),xv=n(x,"LI",{});var swe=s(xv);gce=n(swe,"STRONG",{});var DZr=s(gce);tzo=r(DZr,"clip"),DZr.forEach(t),azo=r(swe," \u2014 "),ON=n(swe,"A",{href:!0});var qZr=s(ON);nzo=r(qZr,"TFCLIPModel"),qZr.forEach(t),szo=r(swe," (CLIP model)"),swe.forEach(t),lzo=i(x),kv=n(x,"LI",{});var lwe=s(kv);hce=n(lwe,"STRONG",{});var GZr=s(hce);izo=r(GZr,"convbert"),GZr.forEach(t),dzo=r(lwe," \u2014 "),XN=n(lwe,"A",{href:!0});var OZr=s(XN);czo=r(OZr,"TFConvBertModel"),OZr.forEach(t),fzo=r(lwe," (ConvBERT model)"),lwe.forEach(t),mzo=i(x),Rv=n(x,"LI",{});var iwe=s(Rv);pce=n(iwe,"STRONG",{});var XZr=s(pce);gzo=r(XZr,"convnext"),XZr.forEach(t),hzo=r(iwe," \u2014 "),zN=n(iwe,"A",{href:!0});var zZr=s(zN);pzo=r(zZr,"TFConvNextModel"),zZr.forEach(t),_zo=r(iwe," (ConvNext model)"),iwe.forEach(t),uzo=i(x),Sv=n(x,"LI",{});var dwe=s(Sv);_ce=n(dwe,"STRONG",{});var VZr=s(_ce);bzo=r(VZr,"ctrl"),VZr.forEach(t),vzo=r(dwe," \u2014 "),VN=n(dwe,"A",{href:!0});var WZr=s(VN);Tzo=r(WZr,"TFCTRLModel"),WZr.forEach(t),Fzo=r(dwe," (CTRL model)"),dwe.forEach(t),Czo=i(x),Pv=n(x,"LI",{});var cwe=s(Pv);uce=n(cwe,"STRONG",{});var QZr=s(uce);Mzo=r(QZr,"deberta"),QZr.forEach(t),Ezo=r(cwe," \u2014 "),WN=n(cwe,"A",{href:!0});var HZr=s(WN);yzo=r(HZr,"TFDebertaModel"),HZr.forEach(t),wzo=r(cwe," (DeBERTa model)"),cwe.forEach(t),Azo=i(x),$v=n(x,"LI",{});var fwe=s($v);bce=n(fwe,"STRONG",{});var UZr=s(bce);Lzo=r(UZr,"deberta-v2"),UZr.forEach(t),Bzo=r(fwe," \u2014 "),QN=n(fwe,"A",{href:!0});var JZr=s(QN);xzo=r(JZr,"TFDebertaV2Model"),JZr.forEach(t),kzo=r(fwe," (DeBERTa-v2 model)"),fwe.forEach(t),Rzo=i(x),Iv=n(x,"LI",{});var mwe=s(Iv);vce=n(mwe,"STRONG",{});var YZr=s(vce);Szo=r(YZr,"distilbert"),YZr.forEach(t),Pzo=r(mwe," \u2014 "),HN=n(mwe,"A",{href:!0});var KZr=s(HN);$zo=r(KZr,"TFDistilBertModel"),KZr.forEach(t),Izo=r(mwe," (DistilBERT model)"),mwe.forEach(t),jzo=i(x),jv=n(x,"LI",{});var gwe=s(jv);Tce=n(gwe,"STRONG",{});var ZZr=s(Tce);Nzo=r(ZZr,"dpr"),ZZr.forEach(t),Dzo=r(gwe," \u2014 "),UN=n(gwe,"A",{href:!0});var eet=s(UN);qzo=r(eet,"TFDPRQuestionEncoder"),eet.forEach(t),Gzo=r(gwe," (DPR model)"),gwe.forEach(t),Ozo=i(x),Nv=n(x,"LI",{});var hwe=s(Nv);Fce=n(hwe,"STRONG",{});var oet=s(Fce);Xzo=r(oet,"electra"),oet.forEach(t),zzo=r(hwe," \u2014 "),JN=n(hwe,"A",{href:!0});var ret=s(JN);Vzo=r(ret,"TFElectraModel"),ret.forEach(t),Wzo=r(hwe," (ELECTRA model)"),hwe.forEach(t),Qzo=i(x),Dv=n(x,"LI",{});var pwe=s(Dv);Cce=n(pwe,"STRONG",{});var tet=s(Cce);Hzo=r(tet,"flaubert"),tet.forEach(t),Uzo=r(pwe," \u2014 "),YN=n(pwe,"A",{href:!0});var aet=s(YN);Jzo=r(aet,"TFFlaubertModel"),aet.forEach(t),Yzo=r(pwe," (FlauBERT model)"),pwe.forEach(t),Kzo=i(x),Ps=n(x,"LI",{});var OL=s(Ps);Mce=n(OL,"STRONG",{});var net=s(Mce);Zzo=r(net,"funnel"),net.forEach(t),eVo=r(OL," \u2014 "),KN=n(OL,"A",{href:!0});var set=s(KN);oVo=r(set,"TFFunnelModel"),set.forEach(t),rVo=r(OL," or "),ZN=n(OL,"A",{href:!0});var iet=s(ZN);tVo=r(iet,"TFFunnelBaseModel"),iet.forEach(t),aVo=r(OL," (Funnel Transformer model)"),OL.forEach(t),nVo=i(x),qv=n(x,"LI",{});var _we=s(qv);Ece=n(_we,"STRONG",{});var det=s(Ece);sVo=r(det,"gpt2"),det.forEach(t),lVo=r(_we," \u2014 "),eD=n(_we,"A",{href:!0});var cet=s(eD);iVo=r(cet,"TFGPT2Model"),cet.forEach(t),dVo=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),cVo=i(x),Gv=n(x,"LI",{});var uwe=s(Gv);yce=n(uwe,"STRONG",{});var fet=s(yce);fVo=r(fet,"hubert"),fet.forEach(t),mVo=r(uwe," \u2014 "),oD=n(uwe,"A",{href:!0});var met=s(oD);gVo=r(met,"TFHubertModel"),met.forEach(t),hVo=r(uwe," (Hubert model)"),uwe.forEach(t),pVo=i(x),Ov=n(x,"LI",{});var bwe=s(Ov);wce=n(bwe,"STRONG",{});var get=s(wce);_Vo=r(get,"layoutlm"),get.forEach(t),uVo=r(bwe," \u2014 "),rD=n(bwe,"A",{href:!0});var het=s(rD);bVo=r(het,"TFLayoutLMModel"),het.forEach(t),vVo=r(bwe," (LayoutLM model)"),bwe.forEach(t),TVo=i(x),Xv=n(x,"LI",{});var vwe=s(Xv);Ace=n(vwe,"STRONG",{});var pet=s(Ace);FVo=r(pet,"led"),pet.forEach(t),CVo=r(vwe," \u2014 "),tD=n(vwe,"A",{href:!0});var _et=s(tD);MVo=r(_et,"TFLEDModel"),_et.forEach(t),EVo=r(vwe," (LED model)"),vwe.forEach(t),yVo=i(x),zv=n(x,"LI",{});var Twe=s(zv);Lce=n(Twe,"STRONG",{});var uet=s(Lce);wVo=r(uet,"longformer"),uet.forEach(t),AVo=r(Twe," \u2014 "),aD=n(Twe,"A",{href:!0});var bet=s(aD);LVo=r(bet,"TFLongformerModel"),bet.forEach(t),BVo=r(Twe," (Longformer model)"),Twe.forEach(t),xVo=i(x),Vv=n(x,"LI",{});var Fwe=s(Vv);Bce=n(Fwe,"STRONG",{});var vet=s(Bce);kVo=r(vet,"lxmert"),vet.forEach(t),RVo=r(Fwe," \u2014 "),nD=n(Fwe,"A",{href:!0});var Tet=s(nD);SVo=r(Tet,"TFLxmertModel"),Tet.forEach(t),PVo=r(Fwe," (LXMERT model)"),Fwe.forEach(t),$Vo=i(x),Wv=n(x,"LI",{});var Cwe=s(Wv);xce=n(Cwe,"STRONG",{});var Fet=s(xce);IVo=r(Fet,"marian"),Fet.forEach(t),jVo=r(Cwe," \u2014 "),sD=n(Cwe,"A",{href:!0});var Cet=s(sD);NVo=r(Cet,"TFMarianModel"),Cet.forEach(t),DVo=r(Cwe," (Marian model)"),Cwe.forEach(t),qVo=i(x),Qv=n(x,"LI",{});var Mwe=s(Qv);kce=n(Mwe,"STRONG",{});var Met=s(kce);GVo=r(Met,"mbart"),Met.forEach(t),OVo=r(Mwe," \u2014 "),lD=n(Mwe,"A",{href:!0});var Eet=s(lD);XVo=r(Eet,"TFMBartModel"),Eet.forEach(t),zVo=r(Mwe," (mBART model)"),Mwe.forEach(t),VVo=i(x),Hv=n(x,"LI",{});var Ewe=s(Hv);Rce=n(Ewe,"STRONG",{});var yet=s(Rce);WVo=r(yet,"mobilebert"),yet.forEach(t),QVo=r(Ewe," \u2014 "),iD=n(Ewe,"A",{href:!0});var wet=s(iD);HVo=r(wet,"TFMobileBertModel"),wet.forEach(t),UVo=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),JVo=i(x),Uv=n(x,"LI",{});var ywe=s(Uv);Sce=n(ywe,"STRONG",{});var Aet=s(Sce);YVo=r(Aet,"mpnet"),Aet.forEach(t),KVo=r(ywe," \u2014 "),dD=n(ywe,"A",{href:!0});var Let=s(dD);ZVo=r(Let,"TFMPNetModel"),Let.forEach(t),eWo=r(ywe," (MPNet model)"),ywe.forEach(t),oWo=i(x),Jv=n(x,"LI",{});var wwe=s(Jv);Pce=n(wwe,"STRONG",{});var Bet=s(Pce);rWo=r(Bet,"mt5"),Bet.forEach(t),tWo=r(wwe," \u2014 "),cD=n(wwe,"A",{href:!0});var xet=s(cD);aWo=r(xet,"TFMT5Model"),xet.forEach(t),nWo=r(wwe," (mT5 model)"),wwe.forEach(t),sWo=i(x),Yv=n(x,"LI",{});var Awe=s(Yv);$ce=n(Awe,"STRONG",{});var ket=s($ce);lWo=r(ket,"openai-gpt"),ket.forEach(t),iWo=r(Awe," \u2014 "),fD=n(Awe,"A",{href:!0});var Ret=s(fD);dWo=r(Ret,"TFOpenAIGPTModel"),Ret.forEach(t),cWo=r(Awe," (OpenAI GPT model)"),Awe.forEach(t),fWo=i(x),Kv=n(x,"LI",{});var Lwe=s(Kv);Ice=n(Lwe,"STRONG",{});var Set=s(Ice);mWo=r(Set,"pegasus"),Set.forEach(t),gWo=r(Lwe," \u2014 "),mD=n(Lwe,"A",{href:!0});var Pet=s(mD);hWo=r(Pet,"TFPegasusModel"),Pet.forEach(t),pWo=r(Lwe," (Pegasus model)"),Lwe.forEach(t),_Wo=i(x),Zv=n(x,"LI",{});var Bwe=s(Zv);jce=n(Bwe,"STRONG",{});var $et=s(jce);uWo=r($et,"rembert"),$et.forEach(t),bWo=r(Bwe," \u2014 "),gD=n(Bwe,"A",{href:!0});var Iet=s(gD);vWo=r(Iet,"TFRemBertModel"),Iet.forEach(t),TWo=r(Bwe," (RemBERT model)"),Bwe.forEach(t),FWo=i(x),eT=n(x,"LI",{});var xwe=s(eT);Nce=n(xwe,"STRONG",{});var jet=s(Nce);CWo=r(jet,"roberta"),jet.forEach(t),MWo=r(xwe," \u2014 "),hD=n(xwe,"A",{href:!0});var Net=s(hD);EWo=r(Net,"TFRobertaModel"),Net.forEach(t),yWo=r(xwe," (RoBERTa model)"),xwe.forEach(t),wWo=i(x),oT=n(x,"LI",{});var kwe=s(oT);Dce=n(kwe,"STRONG",{});var Det=s(Dce);AWo=r(Det,"roformer"),Det.forEach(t),LWo=r(kwe," \u2014 "),pD=n(kwe,"A",{href:!0});var qet=s(pD);BWo=r(qet,"TFRoFormerModel"),qet.forEach(t),xWo=r(kwe," (RoFormer model)"),kwe.forEach(t),kWo=i(x),rT=n(x,"LI",{});var Rwe=s(rT);qce=n(Rwe,"STRONG",{});var Get=s(qce);RWo=r(Get,"speech_to_text"),Get.forEach(t),SWo=r(Rwe," \u2014 "),_D=n(Rwe,"A",{href:!0});var Oet=s(_D);PWo=r(Oet,"TFSpeech2TextModel"),Oet.forEach(t),$Wo=r(Rwe," (Speech2Text model)"),Rwe.forEach(t),IWo=i(x),tT=n(x,"LI",{});var Swe=s(tT);Gce=n(Swe,"STRONG",{});var Xet=s(Gce);jWo=r(Xet,"t5"),Xet.forEach(t),NWo=r(Swe," \u2014 "),uD=n(Swe,"A",{href:!0});var zet=s(uD);DWo=r(zet,"TFT5Model"),zet.forEach(t),qWo=r(Swe," (T5 model)"),Swe.forEach(t),GWo=i(x),aT=n(x,"LI",{});var Pwe=s(aT);Oce=n(Pwe,"STRONG",{});var Vet=s(Oce);OWo=r(Vet,"tapas"),Vet.forEach(t),XWo=r(Pwe," \u2014 "),bD=n(Pwe,"A",{href:!0});var Wet=s(bD);zWo=r(Wet,"TFTapasModel"),Wet.forEach(t),VWo=r(Pwe," (TAPAS model)"),Pwe.forEach(t),WWo=i(x),nT=n(x,"LI",{});var $we=s(nT);Xce=n($we,"STRONG",{});var Qet=s(Xce);QWo=r(Qet,"transfo-xl"),Qet.forEach(t),HWo=r($we," \u2014 "),vD=n($we,"A",{href:!0});var Het=s(vD);UWo=r(Het,"TFTransfoXLModel"),Het.forEach(t),JWo=r($we," (Transformer-XL model)"),$we.forEach(t),YWo=i(x),sT=n(x,"LI",{});var Iwe=s(sT);zce=n(Iwe,"STRONG",{});var Uet=s(zce);KWo=r(Uet,"vit"),Uet.forEach(t),ZWo=r(Iwe," \u2014 "),TD=n(Iwe,"A",{href:!0});var Jet=s(TD);eQo=r(Jet,"TFViTModel"),Jet.forEach(t),oQo=r(Iwe," (ViT model)"),Iwe.forEach(t),rQo=i(x),lT=n(x,"LI",{});var jwe=s(lT);Vce=n(jwe,"STRONG",{});var Yet=s(Vce);tQo=r(Yet,"wav2vec2"),Yet.forEach(t),aQo=r(jwe," \u2014 "),FD=n(jwe,"A",{href:!0});var Ket=s(FD);nQo=r(Ket,"TFWav2Vec2Model"),Ket.forEach(t),sQo=r(jwe," (Wav2Vec2 model)"),jwe.forEach(t),lQo=i(x),iT=n(x,"LI",{});var Nwe=s(iT);Wce=n(Nwe,"STRONG",{});var Zet=s(Wce);iQo=r(Zet,"xlm"),Zet.forEach(t),dQo=r(Nwe," \u2014 "),CD=n(Nwe,"A",{href:!0});var eot=s(CD);cQo=r(eot,"TFXLMModel"),eot.forEach(t),fQo=r(Nwe," (XLM model)"),Nwe.forEach(t),mQo=i(x),dT=n(x,"LI",{});var Dwe=s(dT);Qce=n(Dwe,"STRONG",{});var oot=s(Qce);gQo=r(oot,"xlm-roberta"),oot.forEach(t),hQo=r(Dwe," \u2014 "),MD=n(Dwe,"A",{href:!0});var rot=s(MD);pQo=r(rot,"TFXLMRobertaModel"),rot.forEach(t),_Qo=r(Dwe," (XLM-RoBERTa model)"),Dwe.forEach(t),uQo=i(x),cT=n(x,"LI",{});var qwe=s(cT);Hce=n(qwe,"STRONG",{});var tot=s(Hce);bQo=r(tot,"xlnet"),tot.forEach(t),vQo=r(qwe," \u2014 "),ED=n(qwe,"A",{href:!0});var aot=s(ED);TQo=r(aot,"TFXLNetModel"),aot.forEach(t),FQo=r(qwe," (XLNet model)"),qwe.forEach(t),x.forEach(t),CQo=i(ca),Uce=n(ca,"P",{});var not=s(Uce);MQo=r(not,"Examples:"),not.forEach(t),EQo=i(ca),m(jw.$$.fragment,ca),ca.forEach(t),xl.forEach(t),u8e=i(d),nc=n(d,"H2",{class:!0});var wxe=s(nc);fT=n(wxe,"A",{id:!0,class:!0,href:!0});var sot=s(fT);Jce=n(sot,"SPAN",{});var lot=s(Jce);m(Nw.$$.fragment,lot),lot.forEach(t),sot.forEach(t),yQo=i(wxe),Yce=n(wxe,"SPAN",{});var iot=s(Yce);wQo=r(iot,"TFAutoModelForPreTraining"),iot.forEach(t),wxe.forEach(t),b8e=i(d),hr=n(d,"DIV",{class:!0});var Rl=s(hr);m(Dw.$$.fragment,Rl),AQo=i(Rl),sc=n(Rl,"P",{});var Hz=s(sc);LQo=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kce=n(Hz,"CODE",{});var dot=s(Kce);BQo=r(dot,"from_pretrained()"),dot.forEach(t),xQo=r(Hz,"class method or the "),Zce=n(Hz,"CODE",{});var cot=s(Zce);kQo=r(cot,"from_config()"),cot.forEach(t),RQo=r(Hz,`class
method.`),Hz.forEach(t),SQo=i(Rl),qw=n(Rl,"P",{});var Axe=s(qw);PQo=r(Axe,"This class cannot be instantiated directly using "),efe=n(Axe,"CODE",{});var fot=s(efe);$Qo=r(fot,"__init__()"),fot.forEach(t),IQo=r(Axe," (throws an error)."),Axe.forEach(t),jQo=i(Rl),lt=n(Rl,"DIV",{class:!0});var Sl=s(lt);m(Gw.$$.fragment,Sl),NQo=i(Sl),ofe=n(Sl,"P",{});var mot=s(ofe);DQo=r(mot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mot.forEach(t),qQo=i(Sl),lc=n(Sl,"P",{});var Uz=s(lc);GQo=r(Uz,`Note:
Loading a model from its configuration file does `),rfe=n(Uz,"STRONG",{});var got=s(rfe);OQo=r(got,"not"),got.forEach(t),XQo=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tfe=n(Uz,"CODE",{});var hot=s(tfe);zQo=r(hot,"from_pretrained()"),hot.forEach(t),VQo=r(Uz,"to load the model weights."),Uz.forEach(t),WQo=i(Sl),afe=n(Sl,"P",{});var pot=s(afe);QQo=r(pot,"Examples:"),pot.forEach(t),HQo=i(Sl),m(Ow.$$.fragment,Sl),Sl.forEach(t),UQo=i(Rl),ho=n(Rl,"DIV",{class:!0});var fa=s(ho);m(Xw.$$.fragment,fa),JQo=i(fa),nfe=n(fa,"P",{});var _ot=s(nfe);YQo=r(_ot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_ot.forEach(t),KQo=i(fa),dn=n(fa,"P",{});var RM=s(dn);ZQo=r(RM,"The model class to instantiate is selected based on the "),sfe=n(RM,"CODE",{});var uot=s(sfe);eHo=r(uot,"model_type"),uot.forEach(t),oHo=r(RM,` property of the config object (either
passed as an argument or loaded from `),lfe=n(RM,"CODE",{});var bot=s(lfe);rHo=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),tHo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=n(RM,"CODE",{});var vot=s(ife);aHo=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),nHo=r(RM,":"),RM.forEach(t),sHo=i(fa),H=n(fa,"UL",{});var U=s(H);mT=n(U,"LI",{});var Gwe=s(mT);dfe=n(Gwe,"STRONG",{});var Tot=s(dfe);lHo=r(Tot,"albert"),Tot.forEach(t),iHo=r(Gwe," \u2014 "),yD=n(Gwe,"A",{href:!0});var Fot=s(yD);dHo=r(Fot,"TFAlbertForPreTraining"),Fot.forEach(t),cHo=r(Gwe," (ALBERT model)"),Gwe.forEach(t),fHo=i(U),gT=n(U,"LI",{});var Owe=s(gT);cfe=n(Owe,"STRONG",{});var Cot=s(cfe);mHo=r(Cot,"bart"),Cot.forEach(t),gHo=r(Owe," \u2014 "),wD=n(Owe,"A",{href:!0});var Mot=s(wD);hHo=r(Mot,"TFBartForConditionalGeneration"),Mot.forEach(t),pHo=r(Owe," (BART model)"),Owe.forEach(t),_Ho=i(U),hT=n(U,"LI",{});var Xwe=s(hT);ffe=n(Xwe,"STRONG",{});var Eot=s(ffe);uHo=r(Eot,"bert"),Eot.forEach(t),bHo=r(Xwe," \u2014 "),AD=n(Xwe,"A",{href:!0});var yot=s(AD);vHo=r(yot,"TFBertForPreTraining"),yot.forEach(t),THo=r(Xwe," (BERT model)"),Xwe.forEach(t),FHo=i(U),pT=n(U,"LI",{});var zwe=s(pT);mfe=n(zwe,"STRONG",{});var wot=s(mfe);CHo=r(wot,"camembert"),wot.forEach(t),MHo=r(zwe," \u2014 "),LD=n(zwe,"A",{href:!0});var Aot=s(LD);EHo=r(Aot,"TFCamembertForMaskedLM"),Aot.forEach(t),yHo=r(zwe," (CamemBERT model)"),zwe.forEach(t),wHo=i(U),_T=n(U,"LI",{});var Vwe=s(_T);gfe=n(Vwe,"STRONG",{});var Lot=s(gfe);AHo=r(Lot,"ctrl"),Lot.forEach(t),LHo=r(Vwe," \u2014 "),BD=n(Vwe,"A",{href:!0});var Bot=s(BD);BHo=r(Bot,"TFCTRLLMHeadModel"),Bot.forEach(t),xHo=r(Vwe," (CTRL model)"),Vwe.forEach(t),kHo=i(U),uT=n(U,"LI",{});var Wwe=s(uT);hfe=n(Wwe,"STRONG",{});var xot=s(hfe);RHo=r(xot,"distilbert"),xot.forEach(t),SHo=r(Wwe," \u2014 "),xD=n(Wwe,"A",{href:!0});var kot=s(xD);PHo=r(kot,"TFDistilBertForMaskedLM"),kot.forEach(t),$Ho=r(Wwe," (DistilBERT model)"),Wwe.forEach(t),IHo=i(U),bT=n(U,"LI",{});var Qwe=s(bT);pfe=n(Qwe,"STRONG",{});var Rot=s(pfe);jHo=r(Rot,"electra"),Rot.forEach(t),NHo=r(Qwe," \u2014 "),kD=n(Qwe,"A",{href:!0});var Sot=s(kD);DHo=r(Sot,"TFElectraForPreTraining"),Sot.forEach(t),qHo=r(Qwe," (ELECTRA model)"),Qwe.forEach(t),GHo=i(U),vT=n(U,"LI",{});var Hwe=s(vT);_fe=n(Hwe,"STRONG",{});var Pot=s(_fe);OHo=r(Pot,"flaubert"),Pot.forEach(t),XHo=r(Hwe," \u2014 "),RD=n(Hwe,"A",{href:!0});var $ot=s(RD);zHo=r($ot,"TFFlaubertWithLMHeadModel"),$ot.forEach(t),VHo=r(Hwe," (FlauBERT model)"),Hwe.forEach(t),WHo=i(U),TT=n(U,"LI",{});var Uwe=s(TT);ufe=n(Uwe,"STRONG",{});var Iot=s(ufe);QHo=r(Iot,"funnel"),Iot.forEach(t),HHo=r(Uwe," \u2014 "),SD=n(Uwe,"A",{href:!0});var jot=s(SD);UHo=r(jot,"TFFunnelForPreTraining"),jot.forEach(t),JHo=r(Uwe," (Funnel Transformer model)"),Uwe.forEach(t),YHo=i(U),FT=n(U,"LI",{});var Jwe=s(FT);bfe=n(Jwe,"STRONG",{});var Not=s(bfe);KHo=r(Not,"gpt2"),Not.forEach(t),ZHo=r(Jwe," \u2014 "),PD=n(Jwe,"A",{href:!0});var Dot=s(PD);eUo=r(Dot,"TFGPT2LMHeadModel"),Dot.forEach(t),oUo=r(Jwe," (OpenAI GPT-2 model)"),Jwe.forEach(t),rUo=i(U),CT=n(U,"LI",{});var Ywe=s(CT);vfe=n(Ywe,"STRONG",{});var qot=s(vfe);tUo=r(qot,"layoutlm"),qot.forEach(t),aUo=r(Ywe," \u2014 "),$D=n(Ywe,"A",{href:!0});var Got=s($D);nUo=r(Got,"TFLayoutLMForMaskedLM"),Got.forEach(t),sUo=r(Ywe," (LayoutLM model)"),Ywe.forEach(t),lUo=i(U),MT=n(U,"LI",{});var Kwe=s(MT);Tfe=n(Kwe,"STRONG",{});var Oot=s(Tfe);iUo=r(Oot,"lxmert"),Oot.forEach(t),dUo=r(Kwe," \u2014 "),ID=n(Kwe,"A",{href:!0});var Xot=s(ID);cUo=r(Xot,"TFLxmertForPreTraining"),Xot.forEach(t),fUo=r(Kwe," (LXMERT model)"),Kwe.forEach(t),mUo=i(U),ET=n(U,"LI",{});var Zwe=s(ET);Ffe=n(Zwe,"STRONG",{});var zot=s(Ffe);gUo=r(zot,"mobilebert"),zot.forEach(t),hUo=r(Zwe," \u2014 "),jD=n(Zwe,"A",{href:!0});var Vot=s(jD);pUo=r(Vot,"TFMobileBertForPreTraining"),Vot.forEach(t),_Uo=r(Zwe," (MobileBERT model)"),Zwe.forEach(t),uUo=i(U),yT=n(U,"LI",{});var eAe=s(yT);Cfe=n(eAe,"STRONG",{});var Wot=s(Cfe);bUo=r(Wot,"mpnet"),Wot.forEach(t),vUo=r(eAe," \u2014 "),ND=n(eAe,"A",{href:!0});var Qot=s(ND);TUo=r(Qot,"TFMPNetForMaskedLM"),Qot.forEach(t),FUo=r(eAe," (MPNet model)"),eAe.forEach(t),CUo=i(U),wT=n(U,"LI",{});var oAe=s(wT);Mfe=n(oAe,"STRONG",{});var Hot=s(Mfe);MUo=r(Hot,"openai-gpt"),Hot.forEach(t),EUo=r(oAe," \u2014 "),DD=n(oAe,"A",{href:!0});var Uot=s(DD);yUo=r(Uot,"TFOpenAIGPTLMHeadModel"),Uot.forEach(t),wUo=r(oAe," (OpenAI GPT model)"),oAe.forEach(t),AUo=i(U),AT=n(U,"LI",{});var rAe=s(AT);Efe=n(rAe,"STRONG",{});var Jot=s(Efe);LUo=r(Jot,"roberta"),Jot.forEach(t),BUo=r(rAe," \u2014 "),qD=n(rAe,"A",{href:!0});var Yot=s(qD);xUo=r(Yot,"TFRobertaForMaskedLM"),Yot.forEach(t),kUo=r(rAe," (RoBERTa model)"),rAe.forEach(t),RUo=i(U),LT=n(U,"LI",{});var tAe=s(LT);yfe=n(tAe,"STRONG",{});var Kot=s(yfe);SUo=r(Kot,"t5"),Kot.forEach(t),PUo=r(tAe," \u2014 "),GD=n(tAe,"A",{href:!0});var Zot=s(GD);$Uo=r(Zot,"TFT5ForConditionalGeneration"),Zot.forEach(t),IUo=r(tAe," (T5 model)"),tAe.forEach(t),jUo=i(U),BT=n(U,"LI",{});var aAe=s(BT);wfe=n(aAe,"STRONG",{});var ert=s(wfe);NUo=r(ert,"tapas"),ert.forEach(t),DUo=r(aAe," \u2014 "),OD=n(aAe,"A",{href:!0});var ort=s(OD);qUo=r(ort,"TFTapasForMaskedLM"),ort.forEach(t),GUo=r(aAe," (TAPAS model)"),aAe.forEach(t),OUo=i(U),xT=n(U,"LI",{});var nAe=s(xT);Afe=n(nAe,"STRONG",{});var rrt=s(Afe);XUo=r(rrt,"transfo-xl"),rrt.forEach(t),zUo=r(nAe," \u2014 "),XD=n(nAe,"A",{href:!0});var trt=s(XD);VUo=r(trt,"TFTransfoXLLMHeadModel"),trt.forEach(t),WUo=r(nAe," (Transformer-XL model)"),nAe.forEach(t),QUo=i(U),kT=n(U,"LI",{});var sAe=s(kT);Lfe=n(sAe,"STRONG",{});var art=s(Lfe);HUo=r(art,"xlm"),art.forEach(t),UUo=r(sAe," \u2014 "),zD=n(sAe,"A",{href:!0});var nrt=s(zD);JUo=r(nrt,"TFXLMWithLMHeadModel"),nrt.forEach(t),YUo=r(sAe," (XLM model)"),sAe.forEach(t),KUo=i(U),RT=n(U,"LI",{});var lAe=s(RT);Bfe=n(lAe,"STRONG",{});var srt=s(Bfe);ZUo=r(srt,"xlm-roberta"),srt.forEach(t),eJo=r(lAe," \u2014 "),VD=n(lAe,"A",{href:!0});var lrt=s(VD);oJo=r(lrt,"TFXLMRobertaForMaskedLM"),lrt.forEach(t),rJo=r(lAe," (XLM-RoBERTa model)"),lAe.forEach(t),tJo=i(U),ST=n(U,"LI",{});var iAe=s(ST);xfe=n(iAe,"STRONG",{});var irt=s(xfe);aJo=r(irt,"xlnet"),irt.forEach(t),nJo=r(iAe," \u2014 "),WD=n(iAe,"A",{href:!0});var drt=s(WD);sJo=r(drt,"TFXLNetLMHeadModel"),drt.forEach(t),lJo=r(iAe," (XLNet model)"),iAe.forEach(t),U.forEach(t),iJo=i(fa),kfe=n(fa,"P",{});var crt=s(kfe);dJo=r(crt,"Examples:"),crt.forEach(t),cJo=i(fa),m(zw.$$.fragment,fa),fa.forEach(t),Rl.forEach(t),v8e=i(d),ic=n(d,"H2",{class:!0});var Lxe=s(ic);PT=n(Lxe,"A",{id:!0,class:!0,href:!0});var frt=s(PT);Rfe=n(frt,"SPAN",{});var mrt=s(Rfe);m(Vw.$$.fragment,mrt),mrt.forEach(t),frt.forEach(t),fJo=i(Lxe),Sfe=n(Lxe,"SPAN",{});var grt=s(Sfe);mJo=r(grt,"TFAutoModelForCausalLM"),grt.forEach(t),Lxe.forEach(t),T8e=i(d),pr=n(d,"DIV",{class:!0});var Pl=s(pr);m(Ww.$$.fragment,Pl),gJo=i(Pl),dc=n(Pl,"P",{});var Jz=s(dc);hJo=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pfe=n(Jz,"CODE",{});var hrt=s(Pfe);pJo=r(hrt,"from_pretrained()"),hrt.forEach(t),_Jo=r(Jz,"class method or the "),$fe=n(Jz,"CODE",{});var prt=s($fe);uJo=r(prt,"from_config()"),prt.forEach(t),bJo=r(Jz,`class
method.`),Jz.forEach(t),vJo=i(Pl),Qw=n(Pl,"P",{});var Bxe=s(Qw);TJo=r(Bxe,"This class cannot be instantiated directly using "),Ife=n(Bxe,"CODE",{});var _rt=s(Ife);FJo=r(_rt,"__init__()"),_rt.forEach(t),CJo=r(Bxe," (throws an error)."),Bxe.forEach(t),MJo=i(Pl),it=n(Pl,"DIV",{class:!0});var $l=s(it);m(Hw.$$.fragment,$l),EJo=i($l),jfe=n($l,"P",{});var urt=s(jfe);yJo=r(urt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),urt.forEach(t),wJo=i($l),cc=n($l,"P",{});var Yz=s(cc);AJo=r(Yz,`Note:
Loading a model from its configuration file does `),Nfe=n(Yz,"STRONG",{});var brt=s(Nfe);LJo=r(brt,"not"),brt.forEach(t),BJo=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dfe=n(Yz,"CODE",{});var vrt=s(Dfe);xJo=r(vrt,"from_pretrained()"),vrt.forEach(t),kJo=r(Yz,"to load the model weights."),Yz.forEach(t),RJo=i($l),qfe=n($l,"P",{});var Trt=s(qfe);SJo=r(Trt,"Examples:"),Trt.forEach(t),PJo=i($l),m(Uw.$$.fragment,$l),$l.forEach(t),$Jo=i(Pl),po=n(Pl,"DIV",{class:!0});var ma=s(po);m(Jw.$$.fragment,ma),IJo=i(ma),Gfe=n(ma,"P",{});var Frt=s(Gfe);jJo=r(Frt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Frt.forEach(t),NJo=i(ma),cn=n(ma,"P",{});var SM=s(cn);DJo=r(SM,"The model class to instantiate is selected based on the "),Ofe=n(SM,"CODE",{});var Crt=s(Ofe);qJo=r(Crt,"model_type"),Crt.forEach(t),GJo=r(SM,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(SM,"CODE",{});var Mrt=s(Xfe);OJo=r(Mrt,"pretrained_model_name_or_path"),Mrt.forEach(t),XJo=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(SM,"CODE",{});var Ert=s(zfe);zJo=r(Ert,"pretrained_model_name_or_path"),Ert.forEach(t),VJo=r(SM,":"),SM.forEach(t),WJo=i(ma),he=n(ma,"UL",{});var Me=s(he);$T=n(Me,"LI",{});var dAe=s($T);Vfe=n(dAe,"STRONG",{});var yrt=s(Vfe);QJo=r(yrt,"bert"),yrt.forEach(t),HJo=r(dAe," \u2014 "),QD=n(dAe,"A",{href:!0});var wrt=s(QD);UJo=r(wrt,"TFBertLMHeadModel"),wrt.forEach(t),JJo=r(dAe," (BERT model)"),dAe.forEach(t),YJo=i(Me),IT=n(Me,"LI",{});var cAe=s(IT);Wfe=n(cAe,"STRONG",{});var Art=s(Wfe);KJo=r(Art,"ctrl"),Art.forEach(t),ZJo=r(cAe," \u2014 "),HD=n(cAe,"A",{href:!0});var Lrt=s(HD);eYo=r(Lrt,"TFCTRLLMHeadModel"),Lrt.forEach(t),oYo=r(cAe," (CTRL model)"),cAe.forEach(t),rYo=i(Me),jT=n(Me,"LI",{});var fAe=s(jT);Qfe=n(fAe,"STRONG",{});var Brt=s(Qfe);tYo=r(Brt,"gpt2"),Brt.forEach(t),aYo=r(fAe," \u2014 "),UD=n(fAe,"A",{href:!0});var xrt=s(UD);nYo=r(xrt,"TFGPT2LMHeadModel"),xrt.forEach(t),sYo=r(fAe," (OpenAI GPT-2 model)"),fAe.forEach(t),lYo=i(Me),NT=n(Me,"LI",{});var mAe=s(NT);Hfe=n(mAe,"STRONG",{});var krt=s(Hfe);iYo=r(krt,"openai-gpt"),krt.forEach(t),dYo=r(mAe," \u2014 "),JD=n(mAe,"A",{href:!0});var Rrt=s(JD);cYo=r(Rrt,"TFOpenAIGPTLMHeadModel"),Rrt.forEach(t),fYo=r(mAe," (OpenAI GPT model)"),mAe.forEach(t),mYo=i(Me),DT=n(Me,"LI",{});var gAe=s(DT);Ufe=n(gAe,"STRONG",{});var Srt=s(Ufe);gYo=r(Srt,"rembert"),Srt.forEach(t),hYo=r(gAe," \u2014 "),YD=n(gAe,"A",{href:!0});var Prt=s(YD);pYo=r(Prt,"TFRemBertForCausalLM"),Prt.forEach(t),_Yo=r(gAe," (RemBERT model)"),gAe.forEach(t),uYo=i(Me),qT=n(Me,"LI",{});var hAe=s(qT);Jfe=n(hAe,"STRONG",{});var $rt=s(Jfe);bYo=r($rt,"roberta"),$rt.forEach(t),vYo=r(hAe," \u2014 "),KD=n(hAe,"A",{href:!0});var Irt=s(KD);TYo=r(Irt,"TFRobertaForCausalLM"),Irt.forEach(t),FYo=r(hAe," (RoBERTa model)"),hAe.forEach(t),CYo=i(Me),GT=n(Me,"LI",{});var pAe=s(GT);Yfe=n(pAe,"STRONG",{});var jrt=s(Yfe);MYo=r(jrt,"roformer"),jrt.forEach(t),EYo=r(pAe," \u2014 "),ZD=n(pAe,"A",{href:!0});var Nrt=s(ZD);yYo=r(Nrt,"TFRoFormerForCausalLM"),Nrt.forEach(t),wYo=r(pAe," (RoFormer model)"),pAe.forEach(t),AYo=i(Me),OT=n(Me,"LI",{});var _Ae=s(OT);Kfe=n(_Ae,"STRONG",{});var Drt=s(Kfe);LYo=r(Drt,"transfo-xl"),Drt.forEach(t),BYo=r(_Ae," \u2014 "),eq=n(_Ae,"A",{href:!0});var qrt=s(eq);xYo=r(qrt,"TFTransfoXLLMHeadModel"),qrt.forEach(t),kYo=r(_Ae," (Transformer-XL model)"),_Ae.forEach(t),RYo=i(Me),XT=n(Me,"LI",{});var uAe=s(XT);Zfe=n(uAe,"STRONG",{});var Grt=s(Zfe);SYo=r(Grt,"xlm"),Grt.forEach(t),PYo=r(uAe," \u2014 "),oq=n(uAe,"A",{href:!0});var Ort=s(oq);$Yo=r(Ort,"TFXLMWithLMHeadModel"),Ort.forEach(t),IYo=r(uAe," (XLM model)"),uAe.forEach(t),jYo=i(Me),zT=n(Me,"LI",{});var bAe=s(zT);eme=n(bAe,"STRONG",{});var Xrt=s(eme);NYo=r(Xrt,"xlnet"),Xrt.forEach(t),DYo=r(bAe," \u2014 "),rq=n(bAe,"A",{href:!0});var zrt=s(rq);qYo=r(zrt,"TFXLNetLMHeadModel"),zrt.forEach(t),GYo=r(bAe," (XLNet model)"),bAe.forEach(t),Me.forEach(t),OYo=i(ma),ome=n(ma,"P",{});var Vrt=s(ome);XYo=r(Vrt,"Examples:"),Vrt.forEach(t),zYo=i(ma),m(Yw.$$.fragment,ma),ma.forEach(t),Pl.forEach(t),F8e=i(d),fc=n(d,"H2",{class:!0});var xxe=s(fc);VT=n(xxe,"A",{id:!0,class:!0,href:!0});var Wrt=s(VT);rme=n(Wrt,"SPAN",{});var Qrt=s(rme);m(Kw.$$.fragment,Qrt),Qrt.forEach(t),Wrt.forEach(t),VYo=i(xxe),tme=n(xxe,"SPAN",{});var Hrt=s(tme);WYo=r(Hrt,"TFAutoModelForImageClassification"),Hrt.forEach(t),xxe.forEach(t),C8e=i(d),_r=n(d,"DIV",{class:!0});var Il=s(_r);m(Zw.$$.fragment,Il),QYo=i(Il),mc=n(Il,"P",{});var Kz=s(mc);HYo=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ame=n(Kz,"CODE",{});var Urt=s(ame);UYo=r(Urt,"from_pretrained()"),Urt.forEach(t),JYo=r(Kz,"class method or the "),nme=n(Kz,"CODE",{});var Jrt=s(nme);YYo=r(Jrt,"from_config()"),Jrt.forEach(t),KYo=r(Kz,`class
method.`),Kz.forEach(t),ZYo=i(Il),eA=n(Il,"P",{});var kxe=s(eA);eKo=r(kxe,"This class cannot be instantiated directly using "),sme=n(kxe,"CODE",{});var Yrt=s(sme);oKo=r(Yrt,"__init__()"),Yrt.forEach(t),rKo=r(kxe," (throws an error)."),kxe.forEach(t),tKo=i(Il),dt=n(Il,"DIV",{class:!0});var jl=s(dt);m(oA.$$.fragment,jl),aKo=i(jl),lme=n(jl,"P",{});var Krt=s(lme);nKo=r(Krt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Krt.forEach(t),sKo=i(jl),gc=n(jl,"P",{});var Zz=s(gc);lKo=r(Zz,`Note:
Loading a model from its configuration file does `),ime=n(Zz,"STRONG",{});var Zrt=s(ime);iKo=r(Zrt,"not"),Zrt.forEach(t),dKo=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=n(Zz,"CODE",{});var ett=s(dme);cKo=r(ett,"from_pretrained()"),ett.forEach(t),fKo=r(Zz,"to load the model weights."),Zz.forEach(t),mKo=i(jl),cme=n(jl,"P",{});var ott=s(cme);gKo=r(ott,"Examples:"),ott.forEach(t),hKo=i(jl),m(rA.$$.fragment,jl),jl.forEach(t),pKo=i(Il),_o=n(Il,"DIV",{class:!0});var ga=s(_o);m(tA.$$.fragment,ga),_Ko=i(ga),fme=n(ga,"P",{});var rtt=s(fme);uKo=r(rtt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rtt.forEach(t),bKo=i(ga),fn=n(ga,"P",{});var PM=s(fn);vKo=r(PM,"The model class to instantiate is selected based on the "),mme=n(PM,"CODE",{});var ttt=s(mme);TKo=r(ttt,"model_type"),ttt.forEach(t),FKo=r(PM,` property of the config object (either
passed as an argument or loaded from `),gme=n(PM,"CODE",{});var att=s(gme);CKo=r(att,"pretrained_model_name_or_path"),att.forEach(t),MKo=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(PM,"CODE",{});var ntt=s(hme);EKo=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),yKo=r(PM,":"),PM.forEach(t),wKo=i(ga),aA=n(ga,"UL",{});var Rxe=s(aA);WT=n(Rxe,"LI",{});var vAe=s(WT);pme=n(vAe,"STRONG",{});var stt=s(pme);AKo=r(stt,"convnext"),stt.forEach(t),LKo=r(vAe," \u2014 "),tq=n(vAe,"A",{href:!0});var ltt=s(tq);BKo=r(ltt,"TFConvNextForImageClassification"),ltt.forEach(t),xKo=r(vAe," (ConvNext model)"),vAe.forEach(t),kKo=i(Rxe),QT=n(Rxe,"LI",{});var TAe=s(QT);_me=n(TAe,"STRONG",{});var itt=s(_me);RKo=r(itt,"vit"),itt.forEach(t),SKo=r(TAe," \u2014 "),aq=n(TAe,"A",{href:!0});var dtt=s(aq);PKo=r(dtt,"TFViTForImageClassification"),dtt.forEach(t),$Ko=r(TAe," (ViT model)"),TAe.forEach(t),Rxe.forEach(t),IKo=i(ga),ume=n(ga,"P",{});var ctt=s(ume);jKo=r(ctt,"Examples:"),ctt.forEach(t),NKo=i(ga),m(nA.$$.fragment,ga),ga.forEach(t),Il.forEach(t),M8e=i(d),hc=n(d,"H2",{class:!0});var Sxe=s(hc);HT=n(Sxe,"A",{id:!0,class:!0,href:!0});var ftt=s(HT);bme=n(ftt,"SPAN",{});var mtt=s(bme);m(sA.$$.fragment,mtt),mtt.forEach(t),ftt.forEach(t),DKo=i(Sxe),vme=n(Sxe,"SPAN",{});var gtt=s(vme);qKo=r(gtt,"TFAutoModelForMaskedLM"),gtt.forEach(t),Sxe.forEach(t),E8e=i(d),ur=n(d,"DIV",{class:!0});var Nl=s(ur);m(lA.$$.fragment,Nl),GKo=i(Nl),pc=n(Nl,"P",{});var eV=s(pc);OKo=r(eV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Tme=n(eV,"CODE",{});var htt=s(Tme);XKo=r(htt,"from_pretrained()"),htt.forEach(t),zKo=r(eV,"class method or the "),Fme=n(eV,"CODE",{});var ptt=s(Fme);VKo=r(ptt,"from_config()"),ptt.forEach(t),WKo=r(eV,`class
method.`),eV.forEach(t),QKo=i(Nl),iA=n(Nl,"P",{});var Pxe=s(iA);HKo=r(Pxe,"This class cannot be instantiated directly using "),Cme=n(Pxe,"CODE",{});var _tt=s(Cme);UKo=r(_tt,"__init__()"),_tt.forEach(t),JKo=r(Pxe," (throws an error)."),Pxe.forEach(t),YKo=i(Nl),ct=n(Nl,"DIV",{class:!0});var Dl=s(ct);m(dA.$$.fragment,Dl),KKo=i(Dl),Mme=n(Dl,"P",{});var utt=s(Mme);ZKo=r(utt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),utt.forEach(t),eZo=i(Dl),_c=n(Dl,"P",{});var oV=s(_c);oZo=r(oV,`Note:
Loading a model from its configuration file does `),Eme=n(oV,"STRONG",{});var btt=s(Eme);rZo=r(btt,"not"),btt.forEach(t),tZo=r(oV,` load the model weights. It only affects the
model\u2019s configuration. Use `),yme=n(oV,"CODE",{});var vtt=s(yme);aZo=r(vtt,"from_pretrained()"),vtt.forEach(t),nZo=r(oV,"to load the model weights."),oV.forEach(t),sZo=i(Dl),wme=n(Dl,"P",{});var Ttt=s(wme);lZo=r(Ttt,"Examples:"),Ttt.forEach(t),iZo=i(Dl),m(cA.$$.fragment,Dl),Dl.forEach(t),dZo=i(Nl),uo=n(Nl,"DIV",{class:!0});var ha=s(uo);m(fA.$$.fragment,ha),cZo=i(ha),Ame=n(ha,"P",{});var Ftt=s(Ame);fZo=r(Ftt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ftt.forEach(t),mZo=i(ha),mn=n(ha,"P",{});var $M=s(mn);gZo=r($M,"The model class to instantiate is selected based on the "),Lme=n($M,"CODE",{});var Ctt=s(Lme);hZo=r(Ctt,"model_type"),Ctt.forEach(t),pZo=r($M,` property of the config object (either
passed as an argument or loaded from `),Bme=n($M,"CODE",{});var Mtt=s(Bme);_Zo=r(Mtt,"pretrained_model_name_or_path"),Mtt.forEach(t),uZo=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n($M,"CODE",{});var Ett=s(xme);bZo=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),vZo=r($M,":"),$M.forEach(t),TZo=i(ha),Y=n(ha,"UL",{});var ee=s(Y);UT=n(ee,"LI",{});var FAe=s(UT);kme=n(FAe,"STRONG",{});var ytt=s(kme);FZo=r(ytt,"albert"),ytt.forEach(t),CZo=r(FAe," \u2014 "),nq=n(FAe,"A",{href:!0});var wtt=s(nq);MZo=r(wtt,"TFAlbertForMaskedLM"),wtt.forEach(t),EZo=r(FAe," (ALBERT model)"),FAe.forEach(t),yZo=i(ee),JT=n(ee,"LI",{});var CAe=s(JT);Rme=n(CAe,"STRONG",{});var Att=s(Rme);wZo=r(Att,"bert"),Att.forEach(t),AZo=r(CAe," \u2014 "),sq=n(CAe,"A",{href:!0});var Ltt=s(sq);LZo=r(Ltt,"TFBertForMaskedLM"),Ltt.forEach(t),BZo=r(CAe," (BERT model)"),CAe.forEach(t),xZo=i(ee),YT=n(ee,"LI",{});var MAe=s(YT);Sme=n(MAe,"STRONG",{});var Btt=s(Sme);kZo=r(Btt,"camembert"),Btt.forEach(t),RZo=r(MAe," \u2014 "),lq=n(MAe,"A",{href:!0});var xtt=s(lq);SZo=r(xtt,"TFCamembertForMaskedLM"),xtt.forEach(t),PZo=r(MAe," (CamemBERT model)"),MAe.forEach(t),$Zo=i(ee),KT=n(ee,"LI",{});var EAe=s(KT);Pme=n(EAe,"STRONG",{});var ktt=s(Pme);IZo=r(ktt,"convbert"),ktt.forEach(t),jZo=r(EAe," \u2014 "),iq=n(EAe,"A",{href:!0});var Rtt=s(iq);NZo=r(Rtt,"TFConvBertForMaskedLM"),Rtt.forEach(t),DZo=r(EAe," (ConvBERT model)"),EAe.forEach(t),qZo=i(ee),ZT=n(ee,"LI",{});var yAe=s(ZT);$me=n(yAe,"STRONG",{});var Stt=s($me);GZo=r(Stt,"deberta"),Stt.forEach(t),OZo=r(yAe," \u2014 "),dq=n(yAe,"A",{href:!0});var Ptt=s(dq);XZo=r(Ptt,"TFDebertaForMaskedLM"),Ptt.forEach(t),zZo=r(yAe," (DeBERTa model)"),yAe.forEach(t),VZo=i(ee),eF=n(ee,"LI",{});var wAe=s(eF);Ime=n(wAe,"STRONG",{});var $tt=s(Ime);WZo=r($tt,"deberta-v2"),$tt.forEach(t),QZo=r(wAe," \u2014 "),cq=n(wAe,"A",{href:!0});var Itt=s(cq);HZo=r(Itt,"TFDebertaV2ForMaskedLM"),Itt.forEach(t),UZo=r(wAe," (DeBERTa-v2 model)"),wAe.forEach(t),JZo=i(ee),oF=n(ee,"LI",{});var AAe=s(oF);jme=n(AAe,"STRONG",{});var jtt=s(jme);YZo=r(jtt,"distilbert"),jtt.forEach(t),KZo=r(AAe," \u2014 "),fq=n(AAe,"A",{href:!0});var Ntt=s(fq);ZZo=r(Ntt,"TFDistilBertForMaskedLM"),Ntt.forEach(t),eer=r(AAe," (DistilBERT model)"),AAe.forEach(t),oer=i(ee),rF=n(ee,"LI",{});var LAe=s(rF);Nme=n(LAe,"STRONG",{});var Dtt=s(Nme);rer=r(Dtt,"electra"),Dtt.forEach(t),ter=r(LAe," \u2014 "),mq=n(LAe,"A",{href:!0});var qtt=s(mq);aer=r(qtt,"TFElectraForMaskedLM"),qtt.forEach(t),ner=r(LAe," (ELECTRA model)"),LAe.forEach(t),ser=i(ee),tF=n(ee,"LI",{});var BAe=s(tF);Dme=n(BAe,"STRONG",{});var Gtt=s(Dme);ler=r(Gtt,"flaubert"),Gtt.forEach(t),ier=r(BAe," \u2014 "),gq=n(BAe,"A",{href:!0});var Ott=s(gq);der=r(Ott,"TFFlaubertWithLMHeadModel"),Ott.forEach(t),cer=r(BAe," (FlauBERT model)"),BAe.forEach(t),fer=i(ee),aF=n(ee,"LI",{});var xAe=s(aF);qme=n(xAe,"STRONG",{});var Xtt=s(qme);mer=r(Xtt,"funnel"),Xtt.forEach(t),ger=r(xAe," \u2014 "),hq=n(xAe,"A",{href:!0});var ztt=s(hq);her=r(ztt,"TFFunnelForMaskedLM"),ztt.forEach(t),per=r(xAe," (Funnel Transformer model)"),xAe.forEach(t),_er=i(ee),nF=n(ee,"LI",{});var kAe=s(nF);Gme=n(kAe,"STRONG",{});var Vtt=s(Gme);uer=r(Vtt,"layoutlm"),Vtt.forEach(t),ber=r(kAe," \u2014 "),pq=n(kAe,"A",{href:!0});var Wtt=s(pq);ver=r(Wtt,"TFLayoutLMForMaskedLM"),Wtt.forEach(t),Ter=r(kAe," (LayoutLM model)"),kAe.forEach(t),Fer=i(ee),sF=n(ee,"LI",{});var RAe=s(sF);Ome=n(RAe,"STRONG",{});var Qtt=s(Ome);Cer=r(Qtt,"longformer"),Qtt.forEach(t),Mer=r(RAe," \u2014 "),_q=n(RAe,"A",{href:!0});var Htt=s(_q);Eer=r(Htt,"TFLongformerForMaskedLM"),Htt.forEach(t),yer=r(RAe," (Longformer model)"),RAe.forEach(t),wer=i(ee),lF=n(ee,"LI",{});var SAe=s(lF);Xme=n(SAe,"STRONG",{});var Utt=s(Xme);Aer=r(Utt,"mobilebert"),Utt.forEach(t),Ler=r(SAe," \u2014 "),uq=n(SAe,"A",{href:!0});var Jtt=s(uq);Ber=r(Jtt,"TFMobileBertForMaskedLM"),Jtt.forEach(t),xer=r(SAe," (MobileBERT model)"),SAe.forEach(t),ker=i(ee),iF=n(ee,"LI",{});var PAe=s(iF);zme=n(PAe,"STRONG",{});var Ytt=s(zme);Rer=r(Ytt,"mpnet"),Ytt.forEach(t),Ser=r(PAe," \u2014 "),bq=n(PAe,"A",{href:!0});var Ktt=s(bq);Per=r(Ktt,"TFMPNetForMaskedLM"),Ktt.forEach(t),$er=r(PAe," (MPNet model)"),PAe.forEach(t),Ier=i(ee),dF=n(ee,"LI",{});var $Ae=s(dF);Vme=n($Ae,"STRONG",{});var Ztt=s(Vme);jer=r(Ztt,"rembert"),Ztt.forEach(t),Ner=r($Ae," \u2014 "),vq=n($Ae,"A",{href:!0});var eat=s(vq);Der=r(eat,"TFRemBertForMaskedLM"),eat.forEach(t),qer=r($Ae," (RemBERT model)"),$Ae.forEach(t),Ger=i(ee),cF=n(ee,"LI",{});var IAe=s(cF);Wme=n(IAe,"STRONG",{});var oat=s(Wme);Oer=r(oat,"roberta"),oat.forEach(t),Xer=r(IAe," \u2014 "),Tq=n(IAe,"A",{href:!0});var rat=s(Tq);zer=r(rat,"TFRobertaForMaskedLM"),rat.forEach(t),Ver=r(IAe," (RoBERTa model)"),IAe.forEach(t),Wer=i(ee),fF=n(ee,"LI",{});var jAe=s(fF);Qme=n(jAe,"STRONG",{});var tat=s(Qme);Qer=r(tat,"roformer"),tat.forEach(t),Her=r(jAe," \u2014 "),Fq=n(jAe,"A",{href:!0});var aat=s(Fq);Uer=r(aat,"TFRoFormerForMaskedLM"),aat.forEach(t),Jer=r(jAe," (RoFormer model)"),jAe.forEach(t),Yer=i(ee),mF=n(ee,"LI",{});var NAe=s(mF);Hme=n(NAe,"STRONG",{});var nat=s(Hme);Ker=r(nat,"tapas"),nat.forEach(t),Zer=r(NAe," \u2014 "),Cq=n(NAe,"A",{href:!0});var sat=s(Cq);eor=r(sat,"TFTapasForMaskedLM"),sat.forEach(t),oor=r(NAe," (TAPAS model)"),NAe.forEach(t),ror=i(ee),gF=n(ee,"LI",{});var DAe=s(gF);Ume=n(DAe,"STRONG",{});var lat=s(Ume);tor=r(lat,"xlm"),lat.forEach(t),aor=r(DAe," \u2014 "),Mq=n(DAe,"A",{href:!0});var iat=s(Mq);nor=r(iat,"TFXLMWithLMHeadModel"),iat.forEach(t),sor=r(DAe," (XLM model)"),DAe.forEach(t),lor=i(ee),hF=n(ee,"LI",{});var qAe=s(hF);Jme=n(qAe,"STRONG",{});var dat=s(Jme);ior=r(dat,"xlm-roberta"),dat.forEach(t),dor=r(qAe," \u2014 "),Eq=n(qAe,"A",{href:!0});var cat=s(Eq);cor=r(cat,"TFXLMRobertaForMaskedLM"),cat.forEach(t),mor=r(qAe," (XLM-RoBERTa model)"),qAe.forEach(t),ee.forEach(t),gor=i(ha),Yme=n(ha,"P",{});var fat=s(Yme);hor=r(fat,"Examples:"),fat.forEach(t),por=i(ha),m(mA.$$.fragment,ha),ha.forEach(t),Nl.forEach(t),y8e=i(d),uc=n(d,"H2",{class:!0});var $xe=s(uc);pF=n($xe,"A",{id:!0,class:!0,href:!0});var mat=s(pF);Kme=n(mat,"SPAN",{});var gat=s(Kme);m(gA.$$.fragment,gat),gat.forEach(t),mat.forEach(t),_or=i($xe),Zme=n($xe,"SPAN",{});var hat=s(Zme);uor=r(hat,"TFAutoModelForSeq2SeqLM"),hat.forEach(t),$xe.forEach(t),w8e=i(d),br=n(d,"DIV",{class:!0});var ql=s(br);m(hA.$$.fragment,ql),bor=i(ql),bc=n(ql,"P",{});var rV=s(bc);vor=r(rV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ege=n(rV,"CODE",{});var pat=s(ege);Tor=r(pat,"from_pretrained()"),pat.forEach(t),For=r(rV,"class method or the "),oge=n(rV,"CODE",{});var _at=s(oge);Cor=r(_at,"from_config()"),_at.forEach(t),Mor=r(rV,`class
method.`),rV.forEach(t),Eor=i(ql),pA=n(ql,"P",{});var Ixe=s(pA);yor=r(Ixe,"This class cannot be instantiated directly using "),rge=n(Ixe,"CODE",{});var uat=s(rge);wor=r(uat,"__init__()"),uat.forEach(t),Aor=r(Ixe," (throws an error)."),Ixe.forEach(t),Lor=i(ql),ft=n(ql,"DIV",{class:!0});var Gl=s(ft);m(_A.$$.fragment,Gl),Bor=i(Gl),tge=n(Gl,"P",{});var bat=s(tge);xor=r(bat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bat.forEach(t),kor=i(Gl),vc=n(Gl,"P",{});var tV=s(vc);Ror=r(tV,`Note:
Loading a model from its configuration file does `),age=n(tV,"STRONG",{});var vat=s(age);Sor=r(vat,"not"),vat.forEach(t),Por=r(tV,` load the model weights. It only affects the
model\u2019s configuration. Use `),nge=n(tV,"CODE",{});var Tat=s(nge);$or=r(Tat,"from_pretrained()"),Tat.forEach(t),Ior=r(tV,"to load the model weights."),tV.forEach(t),jor=i(Gl),sge=n(Gl,"P",{});var Fat=s(sge);Nor=r(Fat,"Examples:"),Fat.forEach(t),Dor=i(Gl),m(uA.$$.fragment,Gl),Gl.forEach(t),qor=i(ql),bo=n(ql,"DIV",{class:!0});var pa=s(bo);m(bA.$$.fragment,pa),Gor=i(pa),lge=n(pa,"P",{});var Cat=s(lge);Oor=r(Cat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cat.forEach(t),Xor=i(pa),gn=n(pa,"P",{});var IM=s(gn);zor=r(IM,"The model class to instantiate is selected based on the "),ige=n(IM,"CODE",{});var Mat=s(ige);Vor=r(Mat,"model_type"),Mat.forEach(t),Wor=r(IM,` property of the config object (either
passed as an argument or loaded from `),dge=n(IM,"CODE",{});var Eat=s(dge);Qor=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),Hor=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(IM,"CODE",{});var yat=s(cge);Uor=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),Jor=r(IM,":"),IM.forEach(t),Yor=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);_F=n(Ee,"LI",{});var GAe=s(_F);fge=n(GAe,"STRONG",{});var wat=s(fge);Kor=r(wat,"bart"),wat.forEach(t),Zor=r(GAe," \u2014 "),yq=n(GAe,"A",{href:!0});var Aat=s(yq);err=r(Aat,"TFBartForConditionalGeneration"),Aat.forEach(t),orr=r(GAe," (BART model)"),GAe.forEach(t),rrr=i(Ee),uF=n(Ee,"LI",{});var OAe=s(uF);mge=n(OAe,"STRONG",{});var Lat=s(mge);trr=r(Lat,"blenderbot"),Lat.forEach(t),arr=r(OAe," \u2014 "),wq=n(OAe,"A",{href:!0});var Bat=s(wq);nrr=r(Bat,"TFBlenderbotForConditionalGeneration"),Bat.forEach(t),srr=r(OAe," (Blenderbot model)"),OAe.forEach(t),lrr=i(Ee),bF=n(Ee,"LI",{});var XAe=s(bF);gge=n(XAe,"STRONG",{});var xat=s(gge);irr=r(xat,"blenderbot-small"),xat.forEach(t),drr=r(XAe," \u2014 "),Aq=n(XAe,"A",{href:!0});var kat=s(Aq);crr=r(kat,"TFBlenderbotSmallForConditionalGeneration"),kat.forEach(t),frr=r(XAe," (BlenderbotSmall model)"),XAe.forEach(t),mrr=i(Ee),vF=n(Ee,"LI",{});var zAe=s(vF);hge=n(zAe,"STRONG",{});var Rat=s(hge);grr=r(Rat,"encoder-decoder"),Rat.forEach(t),hrr=r(zAe," \u2014 "),Lq=n(zAe,"A",{href:!0});var Sat=s(Lq);prr=r(Sat,"TFEncoderDecoderModel"),Sat.forEach(t),_rr=r(zAe," (Encoder decoder model)"),zAe.forEach(t),urr=i(Ee),TF=n(Ee,"LI",{});var VAe=s(TF);pge=n(VAe,"STRONG",{});var Pat=s(pge);brr=r(Pat,"led"),Pat.forEach(t),vrr=r(VAe," \u2014 "),Bq=n(VAe,"A",{href:!0});var $at=s(Bq);Trr=r($at,"TFLEDForConditionalGeneration"),$at.forEach(t),Frr=r(VAe," (LED model)"),VAe.forEach(t),Crr=i(Ee),FF=n(Ee,"LI",{});var WAe=s(FF);_ge=n(WAe,"STRONG",{});var Iat=s(_ge);Mrr=r(Iat,"marian"),Iat.forEach(t),Err=r(WAe," \u2014 "),xq=n(WAe,"A",{href:!0});var jat=s(xq);yrr=r(jat,"TFMarianMTModel"),jat.forEach(t),wrr=r(WAe," (Marian model)"),WAe.forEach(t),Arr=i(Ee),CF=n(Ee,"LI",{});var QAe=s(CF);uge=n(QAe,"STRONG",{});var Nat=s(uge);Lrr=r(Nat,"mbart"),Nat.forEach(t),Brr=r(QAe," \u2014 "),kq=n(QAe,"A",{href:!0});var Dat=s(kq);xrr=r(Dat,"TFMBartForConditionalGeneration"),Dat.forEach(t),krr=r(QAe," (mBART model)"),QAe.forEach(t),Rrr=i(Ee),MF=n(Ee,"LI",{});var HAe=s(MF);bge=n(HAe,"STRONG",{});var qat=s(bge);Srr=r(qat,"mt5"),qat.forEach(t),Prr=r(HAe," \u2014 "),Rq=n(HAe,"A",{href:!0});var Gat=s(Rq);$rr=r(Gat,"TFMT5ForConditionalGeneration"),Gat.forEach(t),Irr=r(HAe," (mT5 model)"),HAe.forEach(t),jrr=i(Ee),EF=n(Ee,"LI",{});var UAe=s(EF);vge=n(UAe,"STRONG",{});var Oat=s(vge);Nrr=r(Oat,"pegasus"),Oat.forEach(t),Drr=r(UAe," \u2014 "),Sq=n(UAe,"A",{href:!0});var Xat=s(Sq);qrr=r(Xat,"TFPegasusForConditionalGeneration"),Xat.forEach(t),Grr=r(UAe," (Pegasus model)"),UAe.forEach(t),Orr=i(Ee),yF=n(Ee,"LI",{});var JAe=s(yF);Tge=n(JAe,"STRONG",{});var zat=s(Tge);Xrr=r(zat,"t5"),zat.forEach(t),zrr=r(JAe," \u2014 "),Pq=n(JAe,"A",{href:!0});var Vat=s(Pq);Vrr=r(Vat,"TFT5ForConditionalGeneration"),Vat.forEach(t),Wrr=r(JAe," (T5 model)"),JAe.forEach(t),Ee.forEach(t),Qrr=i(pa),Fge=n(pa,"P",{});var Wat=s(Fge);Hrr=r(Wat,"Examples:"),Wat.forEach(t),Urr=i(pa),m(vA.$$.fragment,pa),pa.forEach(t),ql.forEach(t),A8e=i(d),Tc=n(d,"H2",{class:!0});var jxe=s(Tc);wF=n(jxe,"A",{id:!0,class:!0,href:!0});var Qat=s(wF);Cge=n(Qat,"SPAN",{});var Hat=s(Cge);m(TA.$$.fragment,Hat),Hat.forEach(t),Qat.forEach(t),Jrr=i(jxe),Mge=n(jxe,"SPAN",{});var Uat=s(Mge);Yrr=r(Uat,"TFAutoModelForSequenceClassification"),Uat.forEach(t),jxe.forEach(t),L8e=i(d),vr=n(d,"DIV",{class:!0});var Ol=s(vr);m(FA.$$.fragment,Ol),Krr=i(Ol),Fc=n(Ol,"P",{});var aV=s(Fc);Zrr=r(aV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ege=n(aV,"CODE",{});var Jat=s(Ege);etr=r(Jat,"from_pretrained()"),Jat.forEach(t),otr=r(aV,"class method or the "),yge=n(aV,"CODE",{});var Yat=s(yge);rtr=r(Yat,"from_config()"),Yat.forEach(t),ttr=r(aV,`class
method.`),aV.forEach(t),atr=i(Ol),CA=n(Ol,"P",{});var Nxe=s(CA);ntr=r(Nxe,"This class cannot be instantiated directly using "),wge=n(Nxe,"CODE",{});var Kat=s(wge);str=r(Kat,"__init__()"),Kat.forEach(t),ltr=r(Nxe," (throws an error)."),Nxe.forEach(t),itr=i(Ol),mt=n(Ol,"DIV",{class:!0});var Xl=s(mt);m(MA.$$.fragment,Xl),dtr=i(Xl),Age=n(Xl,"P",{});var Zat=s(Age);ctr=r(Zat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zat.forEach(t),ftr=i(Xl),Cc=n(Xl,"P",{});var nV=s(Cc);mtr=r(nV,`Note:
Loading a model from its configuration file does `),Lge=n(nV,"STRONG",{});var ent=s(Lge);gtr=r(ent,"not"),ent.forEach(t),htr=r(nV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bge=n(nV,"CODE",{});var ont=s(Bge);ptr=r(ont,"from_pretrained()"),ont.forEach(t),_tr=r(nV,"to load the model weights."),nV.forEach(t),utr=i(Xl),xge=n(Xl,"P",{});var rnt=s(xge);btr=r(rnt,"Examples:"),rnt.forEach(t),vtr=i(Xl),m(EA.$$.fragment,Xl),Xl.forEach(t),Ttr=i(Ol),vo=n(Ol,"DIV",{class:!0});var _a=s(vo);m(yA.$$.fragment,_a),Ftr=i(_a),kge=n(_a,"P",{});var tnt=s(kge);Ctr=r(tnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tnt.forEach(t),Mtr=i(_a),hn=n(_a,"P",{});var jM=s(hn);Etr=r(jM,"The model class to instantiate is selected based on the "),Rge=n(jM,"CODE",{});var ant=s(Rge);ytr=r(ant,"model_type"),ant.forEach(t),wtr=r(jM,` property of the config object (either
passed as an argument or loaded from `),Sge=n(jM,"CODE",{});var nnt=s(Sge);Atr=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),Ltr=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(jM,"CODE",{});var snt=s(Pge);Btr=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),xtr=r(jM,":"),jM.forEach(t),ktr=i(_a),X=n(_a,"UL",{});var W=s(X);AF=n(W,"LI",{});var YAe=s(AF);$ge=n(YAe,"STRONG",{});var lnt=s($ge);Rtr=r(lnt,"albert"),lnt.forEach(t),Str=r(YAe," \u2014 "),$q=n(YAe,"A",{href:!0});var int=s($q);Ptr=r(int,"TFAlbertForSequenceClassification"),int.forEach(t),$tr=r(YAe," (ALBERT model)"),YAe.forEach(t),Itr=i(W),LF=n(W,"LI",{});var KAe=s(LF);Ige=n(KAe,"STRONG",{});var dnt=s(Ige);jtr=r(dnt,"bert"),dnt.forEach(t),Ntr=r(KAe," \u2014 "),Iq=n(KAe,"A",{href:!0});var cnt=s(Iq);Dtr=r(cnt,"TFBertForSequenceClassification"),cnt.forEach(t),qtr=r(KAe," (BERT model)"),KAe.forEach(t),Gtr=i(W),BF=n(W,"LI",{});var ZAe=s(BF);jge=n(ZAe,"STRONG",{});var fnt=s(jge);Otr=r(fnt,"camembert"),fnt.forEach(t),Xtr=r(ZAe," \u2014 "),jq=n(ZAe,"A",{href:!0});var mnt=s(jq);ztr=r(mnt,"TFCamembertForSequenceClassification"),mnt.forEach(t),Vtr=r(ZAe," (CamemBERT model)"),ZAe.forEach(t),Wtr=i(W),xF=n(W,"LI",{});var e6e=s(xF);Nge=n(e6e,"STRONG",{});var gnt=s(Nge);Qtr=r(gnt,"convbert"),gnt.forEach(t),Htr=r(e6e," \u2014 "),Nq=n(e6e,"A",{href:!0});var hnt=s(Nq);Utr=r(hnt,"TFConvBertForSequenceClassification"),hnt.forEach(t),Jtr=r(e6e," (ConvBERT model)"),e6e.forEach(t),Ytr=i(W),kF=n(W,"LI",{});var o6e=s(kF);Dge=n(o6e,"STRONG",{});var pnt=s(Dge);Ktr=r(pnt,"ctrl"),pnt.forEach(t),Ztr=r(o6e," \u2014 "),Dq=n(o6e,"A",{href:!0});var _nt=s(Dq);ear=r(_nt,"TFCTRLForSequenceClassification"),_nt.forEach(t),oar=r(o6e," (CTRL model)"),o6e.forEach(t),rar=i(W),RF=n(W,"LI",{});var r6e=s(RF);qge=n(r6e,"STRONG",{});var unt=s(qge);tar=r(unt,"deberta"),unt.forEach(t),aar=r(r6e," \u2014 "),qq=n(r6e,"A",{href:!0});var bnt=s(qq);nar=r(bnt,"TFDebertaForSequenceClassification"),bnt.forEach(t),sar=r(r6e," (DeBERTa model)"),r6e.forEach(t),lar=i(W),SF=n(W,"LI",{});var t6e=s(SF);Gge=n(t6e,"STRONG",{});var vnt=s(Gge);iar=r(vnt,"deberta-v2"),vnt.forEach(t),dar=r(t6e," \u2014 "),Gq=n(t6e,"A",{href:!0});var Tnt=s(Gq);car=r(Tnt,"TFDebertaV2ForSequenceClassification"),Tnt.forEach(t),far=r(t6e," (DeBERTa-v2 model)"),t6e.forEach(t),mar=i(W),PF=n(W,"LI",{});var a6e=s(PF);Oge=n(a6e,"STRONG",{});var Fnt=s(Oge);gar=r(Fnt,"distilbert"),Fnt.forEach(t),har=r(a6e," \u2014 "),Oq=n(a6e,"A",{href:!0});var Cnt=s(Oq);par=r(Cnt,"TFDistilBertForSequenceClassification"),Cnt.forEach(t),_ar=r(a6e," (DistilBERT model)"),a6e.forEach(t),uar=i(W),$F=n(W,"LI",{});var n6e=s($F);Xge=n(n6e,"STRONG",{});var Mnt=s(Xge);bar=r(Mnt,"electra"),Mnt.forEach(t),Tar=r(n6e," \u2014 "),Xq=n(n6e,"A",{href:!0});var Ent=s(Xq);Far=r(Ent,"TFElectraForSequenceClassification"),Ent.forEach(t),Car=r(n6e," (ELECTRA model)"),n6e.forEach(t),Mar=i(W),IF=n(W,"LI",{});var s6e=s(IF);zge=n(s6e,"STRONG",{});var ynt=s(zge);Ear=r(ynt,"flaubert"),ynt.forEach(t),yar=r(s6e," \u2014 "),zq=n(s6e,"A",{href:!0});var wnt=s(zq);war=r(wnt,"TFFlaubertForSequenceClassification"),wnt.forEach(t),Aar=r(s6e," (FlauBERT model)"),s6e.forEach(t),Lar=i(W),jF=n(W,"LI",{});var l6e=s(jF);Vge=n(l6e,"STRONG",{});var Ant=s(Vge);Bar=r(Ant,"funnel"),Ant.forEach(t),xar=r(l6e," \u2014 "),Vq=n(l6e,"A",{href:!0});var Lnt=s(Vq);kar=r(Lnt,"TFFunnelForSequenceClassification"),Lnt.forEach(t),Rar=r(l6e," (Funnel Transformer model)"),l6e.forEach(t),Sar=i(W),NF=n(W,"LI",{});var i6e=s(NF);Wge=n(i6e,"STRONG",{});var Bnt=s(Wge);Par=r(Bnt,"gpt2"),Bnt.forEach(t),$ar=r(i6e," \u2014 "),Wq=n(i6e,"A",{href:!0});var xnt=s(Wq);Iar=r(xnt,"TFGPT2ForSequenceClassification"),xnt.forEach(t),jar=r(i6e," (OpenAI GPT-2 model)"),i6e.forEach(t),Nar=i(W),DF=n(W,"LI",{});var d6e=s(DF);Qge=n(d6e,"STRONG",{});var knt=s(Qge);Dar=r(knt,"layoutlm"),knt.forEach(t),qar=r(d6e," \u2014 "),Qq=n(d6e,"A",{href:!0});var Rnt=s(Qq);Gar=r(Rnt,"TFLayoutLMForSequenceClassification"),Rnt.forEach(t),Oar=r(d6e," (LayoutLM model)"),d6e.forEach(t),Xar=i(W),qF=n(W,"LI",{});var c6e=s(qF);Hge=n(c6e,"STRONG",{});var Snt=s(Hge);zar=r(Snt,"longformer"),Snt.forEach(t),Var=r(c6e," \u2014 "),Hq=n(c6e,"A",{href:!0});var Pnt=s(Hq);War=r(Pnt,"TFLongformerForSequenceClassification"),Pnt.forEach(t),Qar=r(c6e," (Longformer model)"),c6e.forEach(t),Har=i(W),GF=n(W,"LI",{});var f6e=s(GF);Uge=n(f6e,"STRONG",{});var $nt=s(Uge);Uar=r($nt,"mobilebert"),$nt.forEach(t),Jar=r(f6e," \u2014 "),Uq=n(f6e,"A",{href:!0});var Int=s(Uq);Yar=r(Int,"TFMobileBertForSequenceClassification"),Int.forEach(t),Kar=r(f6e," (MobileBERT model)"),f6e.forEach(t),Zar=i(W),OF=n(W,"LI",{});var m6e=s(OF);Jge=n(m6e,"STRONG",{});var jnt=s(Jge);enr=r(jnt,"mpnet"),jnt.forEach(t),onr=r(m6e," \u2014 "),Jq=n(m6e,"A",{href:!0});var Nnt=s(Jq);rnr=r(Nnt,"TFMPNetForSequenceClassification"),Nnt.forEach(t),tnr=r(m6e," (MPNet model)"),m6e.forEach(t),anr=i(W),XF=n(W,"LI",{});var g6e=s(XF);Yge=n(g6e,"STRONG",{});var Dnt=s(Yge);nnr=r(Dnt,"openai-gpt"),Dnt.forEach(t),snr=r(g6e," \u2014 "),Yq=n(g6e,"A",{href:!0});var qnt=s(Yq);lnr=r(qnt,"TFOpenAIGPTForSequenceClassification"),qnt.forEach(t),inr=r(g6e," (OpenAI GPT model)"),g6e.forEach(t),dnr=i(W),zF=n(W,"LI",{});var h6e=s(zF);Kge=n(h6e,"STRONG",{});var Gnt=s(Kge);cnr=r(Gnt,"rembert"),Gnt.forEach(t),fnr=r(h6e," \u2014 "),Kq=n(h6e,"A",{href:!0});var Ont=s(Kq);mnr=r(Ont,"TFRemBertForSequenceClassification"),Ont.forEach(t),gnr=r(h6e," (RemBERT model)"),h6e.forEach(t),hnr=i(W),VF=n(W,"LI",{});var p6e=s(VF);Zge=n(p6e,"STRONG",{});var Xnt=s(Zge);pnr=r(Xnt,"roberta"),Xnt.forEach(t),_nr=r(p6e," \u2014 "),Zq=n(p6e,"A",{href:!0});var znt=s(Zq);unr=r(znt,"TFRobertaForSequenceClassification"),znt.forEach(t),bnr=r(p6e," (RoBERTa model)"),p6e.forEach(t),vnr=i(W),WF=n(W,"LI",{});var _6e=s(WF);ehe=n(_6e,"STRONG",{});var Vnt=s(ehe);Tnr=r(Vnt,"roformer"),Vnt.forEach(t),Fnr=r(_6e," \u2014 "),eG=n(_6e,"A",{href:!0});var Wnt=s(eG);Cnr=r(Wnt,"TFRoFormerForSequenceClassification"),Wnt.forEach(t),Mnr=r(_6e," (RoFormer model)"),_6e.forEach(t),Enr=i(W),QF=n(W,"LI",{});var u6e=s(QF);ohe=n(u6e,"STRONG",{});var Qnt=s(ohe);ynr=r(Qnt,"tapas"),Qnt.forEach(t),wnr=r(u6e," \u2014 "),oG=n(u6e,"A",{href:!0});var Hnt=s(oG);Anr=r(Hnt,"TFTapasForSequenceClassification"),Hnt.forEach(t),Lnr=r(u6e," (TAPAS model)"),u6e.forEach(t),Bnr=i(W),HF=n(W,"LI",{});var b6e=s(HF);rhe=n(b6e,"STRONG",{});var Unt=s(rhe);xnr=r(Unt,"transfo-xl"),Unt.forEach(t),knr=r(b6e," \u2014 "),rG=n(b6e,"A",{href:!0});var Jnt=s(rG);Rnr=r(Jnt,"TFTransfoXLForSequenceClassification"),Jnt.forEach(t),Snr=r(b6e," (Transformer-XL model)"),b6e.forEach(t),Pnr=i(W),UF=n(W,"LI",{});var v6e=s(UF);the=n(v6e,"STRONG",{});var Ynt=s(the);$nr=r(Ynt,"xlm"),Ynt.forEach(t),Inr=r(v6e," \u2014 "),tG=n(v6e,"A",{href:!0});var Knt=s(tG);jnr=r(Knt,"TFXLMForSequenceClassification"),Knt.forEach(t),Nnr=r(v6e," (XLM model)"),v6e.forEach(t),Dnr=i(W),JF=n(W,"LI",{});var T6e=s(JF);ahe=n(T6e,"STRONG",{});var Znt=s(ahe);qnr=r(Znt,"xlm-roberta"),Znt.forEach(t),Gnr=r(T6e," \u2014 "),aG=n(T6e,"A",{href:!0});var est=s(aG);Onr=r(est,"TFXLMRobertaForSequenceClassification"),est.forEach(t),Xnr=r(T6e," (XLM-RoBERTa model)"),T6e.forEach(t),znr=i(W),YF=n(W,"LI",{});var F6e=s(YF);nhe=n(F6e,"STRONG",{});var ost=s(nhe);Vnr=r(ost,"xlnet"),ost.forEach(t),Wnr=r(F6e," \u2014 "),nG=n(F6e,"A",{href:!0});var rst=s(nG);Qnr=r(rst,"TFXLNetForSequenceClassification"),rst.forEach(t),Hnr=r(F6e," (XLNet model)"),F6e.forEach(t),W.forEach(t),Unr=i(_a),she=n(_a,"P",{});var tst=s(she);Jnr=r(tst,"Examples:"),tst.forEach(t),Ynr=i(_a),m(wA.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),B8e=i(d),Mc=n(d,"H2",{class:!0});var Dxe=s(Mc);KF=n(Dxe,"A",{id:!0,class:!0,href:!0});var ast=s(KF);lhe=n(ast,"SPAN",{});var nst=s(lhe);m(AA.$$.fragment,nst),nst.forEach(t),ast.forEach(t),Knr=i(Dxe),ihe=n(Dxe,"SPAN",{});var sst=s(ihe);Znr=r(sst,"TFAutoModelForMultipleChoice"),sst.forEach(t),Dxe.forEach(t),x8e=i(d),Tr=n(d,"DIV",{class:!0});var zl=s(Tr);m(LA.$$.fragment,zl),esr=i(zl),Ec=n(zl,"P",{});var sV=s(Ec);osr=r(sV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dhe=n(sV,"CODE",{});var lst=s(dhe);rsr=r(lst,"from_pretrained()"),lst.forEach(t),tsr=r(sV,"class method or the "),che=n(sV,"CODE",{});var ist=s(che);asr=r(ist,"from_config()"),ist.forEach(t),nsr=r(sV,`class
method.`),sV.forEach(t),ssr=i(zl),BA=n(zl,"P",{});var qxe=s(BA);lsr=r(qxe,"This class cannot be instantiated directly using "),fhe=n(qxe,"CODE",{});var dst=s(fhe);isr=r(dst,"__init__()"),dst.forEach(t),dsr=r(qxe," (throws an error)."),qxe.forEach(t),csr=i(zl),gt=n(zl,"DIV",{class:!0});var Vl=s(gt);m(xA.$$.fragment,Vl),fsr=i(Vl),mhe=n(Vl,"P",{});var cst=s(mhe);msr=r(cst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cst.forEach(t),gsr=i(Vl),yc=n(Vl,"P",{});var lV=s(yc);hsr=r(lV,`Note:
Loading a model from its configuration file does `),ghe=n(lV,"STRONG",{});var fst=s(ghe);psr=r(fst,"not"),fst.forEach(t),_sr=r(lV,` load the model weights. It only affects the
model\u2019s configuration. Use `),hhe=n(lV,"CODE",{});var mst=s(hhe);usr=r(mst,"from_pretrained()"),mst.forEach(t),bsr=r(lV,"to load the model weights."),lV.forEach(t),vsr=i(Vl),phe=n(Vl,"P",{});var gst=s(phe);Tsr=r(gst,"Examples:"),gst.forEach(t),Fsr=i(Vl),m(kA.$$.fragment,Vl),Vl.forEach(t),Csr=i(zl),To=n(zl,"DIV",{class:!0});var ua=s(To);m(RA.$$.fragment,ua),Msr=i(ua),_he=n(ua,"P",{});var hst=s(_he);Esr=r(hst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hst.forEach(t),ysr=i(ua),pn=n(ua,"P",{});var NM=s(pn);wsr=r(NM,"The model class to instantiate is selected based on the "),uhe=n(NM,"CODE",{});var pst=s(uhe);Asr=r(pst,"model_type"),pst.forEach(t),Lsr=r(NM,` property of the config object (either
passed as an argument or loaded from `),bhe=n(NM,"CODE",{});var _st=s(bhe);Bsr=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),xsr=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(NM,"CODE",{});var ust=s(vhe);ksr=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),Rsr=r(NM,":"),NM.forEach(t),Ssr=i(ua),te=n(ua,"UL",{});var ne=s(te);ZF=n(ne,"LI",{});var C6e=s(ZF);The=n(C6e,"STRONG",{});var bst=s(The);Psr=r(bst,"albert"),bst.forEach(t),$sr=r(C6e," \u2014 "),sG=n(C6e,"A",{href:!0});var vst=s(sG);Isr=r(vst,"TFAlbertForMultipleChoice"),vst.forEach(t),jsr=r(C6e," (ALBERT model)"),C6e.forEach(t),Nsr=i(ne),e9=n(ne,"LI",{});var M6e=s(e9);Fhe=n(M6e,"STRONG",{});var Tst=s(Fhe);Dsr=r(Tst,"bert"),Tst.forEach(t),qsr=r(M6e," \u2014 "),lG=n(M6e,"A",{href:!0});var Fst=s(lG);Gsr=r(Fst,"TFBertForMultipleChoice"),Fst.forEach(t),Osr=r(M6e," (BERT model)"),M6e.forEach(t),Xsr=i(ne),o9=n(ne,"LI",{});var E6e=s(o9);Che=n(E6e,"STRONG",{});var Cst=s(Che);zsr=r(Cst,"camembert"),Cst.forEach(t),Vsr=r(E6e," \u2014 "),iG=n(E6e,"A",{href:!0});var Mst=s(iG);Wsr=r(Mst,"TFCamembertForMultipleChoice"),Mst.forEach(t),Qsr=r(E6e," (CamemBERT model)"),E6e.forEach(t),Hsr=i(ne),r9=n(ne,"LI",{});var y6e=s(r9);Mhe=n(y6e,"STRONG",{});var Est=s(Mhe);Usr=r(Est,"convbert"),Est.forEach(t),Jsr=r(y6e," \u2014 "),dG=n(y6e,"A",{href:!0});var yst=s(dG);Ysr=r(yst,"TFConvBertForMultipleChoice"),yst.forEach(t),Ksr=r(y6e," (ConvBERT model)"),y6e.forEach(t),Zsr=i(ne),t9=n(ne,"LI",{});var w6e=s(t9);Ehe=n(w6e,"STRONG",{});var wst=s(Ehe);elr=r(wst,"distilbert"),wst.forEach(t),olr=r(w6e," \u2014 "),cG=n(w6e,"A",{href:!0});var Ast=s(cG);rlr=r(Ast,"TFDistilBertForMultipleChoice"),Ast.forEach(t),tlr=r(w6e," (DistilBERT model)"),w6e.forEach(t),alr=i(ne),a9=n(ne,"LI",{});var A6e=s(a9);yhe=n(A6e,"STRONG",{});var Lst=s(yhe);nlr=r(Lst,"electra"),Lst.forEach(t),slr=r(A6e," \u2014 "),fG=n(A6e,"A",{href:!0});var Bst=s(fG);llr=r(Bst,"TFElectraForMultipleChoice"),Bst.forEach(t),ilr=r(A6e," (ELECTRA model)"),A6e.forEach(t),dlr=i(ne),n9=n(ne,"LI",{});var L6e=s(n9);whe=n(L6e,"STRONG",{});var xst=s(whe);clr=r(xst,"flaubert"),xst.forEach(t),flr=r(L6e," \u2014 "),mG=n(L6e,"A",{href:!0});var kst=s(mG);mlr=r(kst,"TFFlaubertForMultipleChoice"),kst.forEach(t),glr=r(L6e," (FlauBERT model)"),L6e.forEach(t),hlr=i(ne),s9=n(ne,"LI",{});var B6e=s(s9);Ahe=n(B6e,"STRONG",{});var Rst=s(Ahe);plr=r(Rst,"funnel"),Rst.forEach(t),_lr=r(B6e," \u2014 "),gG=n(B6e,"A",{href:!0});var Sst=s(gG);ulr=r(Sst,"TFFunnelForMultipleChoice"),Sst.forEach(t),blr=r(B6e," (Funnel Transformer model)"),B6e.forEach(t),vlr=i(ne),l9=n(ne,"LI",{});var x6e=s(l9);Lhe=n(x6e,"STRONG",{});var Pst=s(Lhe);Tlr=r(Pst,"longformer"),Pst.forEach(t),Flr=r(x6e," \u2014 "),hG=n(x6e,"A",{href:!0});var $st=s(hG);Clr=r($st,"TFLongformerForMultipleChoice"),$st.forEach(t),Mlr=r(x6e," (Longformer model)"),x6e.forEach(t),Elr=i(ne),i9=n(ne,"LI",{});var k6e=s(i9);Bhe=n(k6e,"STRONG",{});var Ist=s(Bhe);ylr=r(Ist,"mobilebert"),Ist.forEach(t),wlr=r(k6e," \u2014 "),pG=n(k6e,"A",{href:!0});var jst=s(pG);Alr=r(jst,"TFMobileBertForMultipleChoice"),jst.forEach(t),Llr=r(k6e," (MobileBERT model)"),k6e.forEach(t),Blr=i(ne),d9=n(ne,"LI",{});var R6e=s(d9);xhe=n(R6e,"STRONG",{});var Nst=s(xhe);xlr=r(Nst,"mpnet"),Nst.forEach(t),klr=r(R6e," \u2014 "),_G=n(R6e,"A",{href:!0});var Dst=s(_G);Rlr=r(Dst,"TFMPNetForMultipleChoice"),Dst.forEach(t),Slr=r(R6e," (MPNet model)"),R6e.forEach(t),Plr=i(ne),c9=n(ne,"LI",{});var S6e=s(c9);khe=n(S6e,"STRONG",{});var qst=s(khe);$lr=r(qst,"rembert"),qst.forEach(t),Ilr=r(S6e," \u2014 "),uG=n(S6e,"A",{href:!0});var Gst=s(uG);jlr=r(Gst,"TFRemBertForMultipleChoice"),Gst.forEach(t),Nlr=r(S6e," (RemBERT model)"),S6e.forEach(t),Dlr=i(ne),f9=n(ne,"LI",{});var P6e=s(f9);Rhe=n(P6e,"STRONG",{});var Ost=s(Rhe);qlr=r(Ost,"roberta"),Ost.forEach(t),Glr=r(P6e," \u2014 "),bG=n(P6e,"A",{href:!0});var Xst=s(bG);Olr=r(Xst,"TFRobertaForMultipleChoice"),Xst.forEach(t),Xlr=r(P6e," (RoBERTa model)"),P6e.forEach(t),zlr=i(ne),m9=n(ne,"LI",{});var $6e=s(m9);She=n($6e,"STRONG",{});var zst=s(She);Vlr=r(zst,"roformer"),zst.forEach(t),Wlr=r($6e," \u2014 "),vG=n($6e,"A",{href:!0});var Vst=s(vG);Qlr=r(Vst,"TFRoFormerForMultipleChoice"),Vst.forEach(t),Hlr=r($6e," (RoFormer model)"),$6e.forEach(t),Ulr=i(ne),g9=n(ne,"LI",{});var I6e=s(g9);Phe=n(I6e,"STRONG",{});var Wst=s(Phe);Jlr=r(Wst,"xlm"),Wst.forEach(t),Ylr=r(I6e," \u2014 "),TG=n(I6e,"A",{href:!0});var Qst=s(TG);Klr=r(Qst,"TFXLMForMultipleChoice"),Qst.forEach(t),Zlr=r(I6e," (XLM model)"),I6e.forEach(t),eir=i(ne),h9=n(ne,"LI",{});var j6e=s(h9);$he=n(j6e,"STRONG",{});var Hst=s($he);oir=r(Hst,"xlm-roberta"),Hst.forEach(t),rir=r(j6e," \u2014 "),FG=n(j6e,"A",{href:!0});var Ust=s(FG);tir=r(Ust,"TFXLMRobertaForMultipleChoice"),Ust.forEach(t),air=r(j6e," (XLM-RoBERTa model)"),j6e.forEach(t),nir=i(ne),p9=n(ne,"LI",{});var N6e=s(p9);Ihe=n(N6e,"STRONG",{});var Jst=s(Ihe);sir=r(Jst,"xlnet"),Jst.forEach(t),lir=r(N6e," \u2014 "),CG=n(N6e,"A",{href:!0});var Yst=s(CG);iir=r(Yst,"TFXLNetForMultipleChoice"),Yst.forEach(t),dir=r(N6e," (XLNet model)"),N6e.forEach(t),ne.forEach(t),cir=i(ua),jhe=n(ua,"P",{});var Kst=s(jhe);fir=r(Kst,"Examples:"),Kst.forEach(t),mir=i(ua),m(SA.$$.fragment,ua),ua.forEach(t),zl.forEach(t),k8e=i(d),wc=n(d,"H2",{class:!0});var Gxe=s(wc);_9=n(Gxe,"A",{id:!0,class:!0,href:!0});var Zst=s(_9);Nhe=n(Zst,"SPAN",{});var elt=s(Nhe);m(PA.$$.fragment,elt),elt.forEach(t),Zst.forEach(t),gir=i(Gxe),Dhe=n(Gxe,"SPAN",{});var olt=s(Dhe);hir=r(olt,"TFAutoModelForTableQuestionAnswering"),olt.forEach(t),Gxe.forEach(t),R8e=i(d),Fr=n(d,"DIV",{class:!0});var Wl=s(Fr);m($A.$$.fragment,Wl),pir=i(Wl),Ac=n(Wl,"P",{});var iV=s(Ac);_ir=r(iV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qhe=n(iV,"CODE",{});var rlt=s(qhe);uir=r(rlt,"from_pretrained()"),rlt.forEach(t),bir=r(iV,"class method or the "),Ghe=n(iV,"CODE",{});var tlt=s(Ghe);vir=r(tlt,"from_config()"),tlt.forEach(t),Tir=r(iV,`class
method.`),iV.forEach(t),Fir=i(Wl),IA=n(Wl,"P",{});var Oxe=s(IA);Cir=r(Oxe,"This class cannot be instantiated directly using "),Ohe=n(Oxe,"CODE",{});var alt=s(Ohe);Mir=r(alt,"__init__()"),alt.forEach(t),Eir=r(Oxe," (throws an error)."),Oxe.forEach(t),yir=i(Wl),ht=n(Wl,"DIV",{class:!0});var Ql=s(ht);m(jA.$$.fragment,Ql),wir=i(Ql),Xhe=n(Ql,"P",{});var nlt=s(Xhe);Air=r(nlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nlt.forEach(t),Lir=i(Ql),Lc=n(Ql,"P",{});var dV=s(Lc);Bir=r(dV,`Note:
Loading a model from its configuration file does `),zhe=n(dV,"STRONG",{});var slt=s(zhe);xir=r(slt,"not"),slt.forEach(t),kir=r(dV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vhe=n(dV,"CODE",{});var llt=s(Vhe);Rir=r(llt,"from_pretrained()"),llt.forEach(t),Sir=r(dV,"to load the model weights."),dV.forEach(t),Pir=i(Ql),Whe=n(Ql,"P",{});var ilt=s(Whe);$ir=r(ilt,"Examples:"),ilt.forEach(t),Iir=i(Ql),m(NA.$$.fragment,Ql),Ql.forEach(t),jir=i(Wl),Fo=n(Wl,"DIV",{class:!0});var ba=s(Fo);m(DA.$$.fragment,ba),Nir=i(ba),Qhe=n(ba,"P",{});var dlt=s(Qhe);Dir=r(dlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dlt.forEach(t),qir=i(ba),_n=n(ba,"P",{});var DM=s(_n);Gir=r(DM,"The model class to instantiate is selected based on the "),Hhe=n(DM,"CODE",{});var clt=s(Hhe);Oir=r(clt,"model_type"),clt.forEach(t),Xir=r(DM,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(DM,"CODE",{});var flt=s(Uhe);zir=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),Vir=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(DM,"CODE",{});var mlt=s(Jhe);Wir=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),Qir=r(DM,":"),DM.forEach(t),Hir=i(ba),Yhe=n(ba,"UL",{});var glt=s(Yhe);u9=n(glt,"LI",{});var D6e=s(u9);Khe=n(D6e,"STRONG",{});var hlt=s(Khe);Uir=r(hlt,"tapas"),hlt.forEach(t),Jir=r(D6e," \u2014 "),MG=n(D6e,"A",{href:!0});var plt=s(MG);Yir=r(plt,"TFTapasForQuestionAnswering"),plt.forEach(t),Kir=r(D6e," (TAPAS model)"),D6e.forEach(t),glt.forEach(t),Zir=i(ba),Zhe=n(ba,"P",{});var _lt=s(Zhe);edr=r(_lt,"Examples:"),_lt.forEach(t),odr=i(ba),m(qA.$$.fragment,ba),ba.forEach(t),Wl.forEach(t),S8e=i(d),Bc=n(d,"H2",{class:!0});var Xxe=s(Bc);b9=n(Xxe,"A",{id:!0,class:!0,href:!0});var ult=s(b9);epe=n(ult,"SPAN",{});var blt=s(epe);m(GA.$$.fragment,blt),blt.forEach(t),ult.forEach(t),rdr=i(Xxe),ope=n(Xxe,"SPAN",{});var vlt=s(ope);tdr=r(vlt,"TFAutoModelForTokenClassification"),vlt.forEach(t),Xxe.forEach(t),P8e=i(d),Cr=n(d,"DIV",{class:!0});var Hl=s(Cr);m(OA.$$.fragment,Hl),adr=i(Hl),xc=n(Hl,"P",{});var cV=s(xc);ndr=r(cV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rpe=n(cV,"CODE",{});var Tlt=s(rpe);sdr=r(Tlt,"from_pretrained()"),Tlt.forEach(t),ldr=r(cV,"class method or the "),tpe=n(cV,"CODE",{});var Flt=s(tpe);idr=r(Flt,"from_config()"),Flt.forEach(t),ddr=r(cV,`class
method.`),cV.forEach(t),cdr=i(Hl),XA=n(Hl,"P",{});var zxe=s(XA);fdr=r(zxe,"This class cannot be instantiated directly using "),ape=n(zxe,"CODE",{});var Clt=s(ape);mdr=r(Clt,"__init__()"),Clt.forEach(t),gdr=r(zxe," (throws an error)."),zxe.forEach(t),hdr=i(Hl),pt=n(Hl,"DIV",{class:!0});var Ul=s(pt);m(zA.$$.fragment,Ul),pdr=i(Ul),npe=n(Ul,"P",{});var Mlt=s(npe);_dr=r(Mlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mlt.forEach(t),udr=i(Ul),kc=n(Ul,"P",{});var fV=s(kc);bdr=r(fV,`Note:
Loading a model from its configuration file does `),spe=n(fV,"STRONG",{});var Elt=s(spe);vdr=r(Elt,"not"),Elt.forEach(t),Tdr=r(fV,` load the model weights. It only affects the
model\u2019s configuration. Use `),lpe=n(fV,"CODE",{});var ylt=s(lpe);Fdr=r(ylt,"from_pretrained()"),ylt.forEach(t),Cdr=r(fV,"to load the model weights."),fV.forEach(t),Mdr=i(Ul),ipe=n(Ul,"P",{});var wlt=s(ipe);Edr=r(wlt,"Examples:"),wlt.forEach(t),ydr=i(Ul),m(VA.$$.fragment,Ul),Ul.forEach(t),wdr=i(Hl),Co=n(Hl,"DIV",{class:!0});var va=s(Co);m(WA.$$.fragment,va),Adr=i(va),dpe=n(va,"P",{});var Alt=s(dpe);Ldr=r(Alt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Alt.forEach(t),Bdr=i(va),un=n(va,"P",{});var qM=s(un);xdr=r(qM,"The model class to instantiate is selected based on the "),cpe=n(qM,"CODE",{});var Llt=s(cpe);kdr=r(Llt,"model_type"),Llt.forEach(t),Rdr=r(qM,` property of the config object (either
passed as an argument or loaded from `),fpe=n(qM,"CODE",{});var Blt=s(fpe);Sdr=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),Pdr=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(qM,"CODE",{});var xlt=s(mpe);$dr=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),Idr=r(qM,":"),qM.forEach(t),jdr=i(va),K=n(va,"UL",{});var oe=s(K);v9=n(oe,"LI",{});var q6e=s(v9);gpe=n(q6e,"STRONG",{});var klt=s(gpe);Ndr=r(klt,"albert"),klt.forEach(t),Ddr=r(q6e," \u2014 "),EG=n(q6e,"A",{href:!0});var Rlt=s(EG);qdr=r(Rlt,"TFAlbertForTokenClassification"),Rlt.forEach(t),Gdr=r(q6e," (ALBERT model)"),q6e.forEach(t),Odr=i(oe),T9=n(oe,"LI",{});var G6e=s(T9);hpe=n(G6e,"STRONG",{});var Slt=s(hpe);Xdr=r(Slt,"bert"),Slt.forEach(t),zdr=r(G6e," \u2014 "),yG=n(G6e,"A",{href:!0});var Plt=s(yG);Vdr=r(Plt,"TFBertForTokenClassification"),Plt.forEach(t),Wdr=r(G6e," (BERT model)"),G6e.forEach(t),Qdr=i(oe),F9=n(oe,"LI",{});var O6e=s(F9);ppe=n(O6e,"STRONG",{});var $lt=s(ppe);Hdr=r($lt,"camembert"),$lt.forEach(t),Udr=r(O6e," \u2014 "),wG=n(O6e,"A",{href:!0});var Ilt=s(wG);Jdr=r(Ilt,"TFCamembertForTokenClassification"),Ilt.forEach(t),Ydr=r(O6e," (CamemBERT model)"),O6e.forEach(t),Kdr=i(oe),C9=n(oe,"LI",{});var X6e=s(C9);_pe=n(X6e,"STRONG",{});var jlt=s(_pe);Zdr=r(jlt,"convbert"),jlt.forEach(t),ecr=r(X6e," \u2014 "),AG=n(X6e,"A",{href:!0});var Nlt=s(AG);ocr=r(Nlt,"TFConvBertForTokenClassification"),Nlt.forEach(t),rcr=r(X6e," (ConvBERT model)"),X6e.forEach(t),tcr=i(oe),M9=n(oe,"LI",{});var z6e=s(M9);upe=n(z6e,"STRONG",{});var Dlt=s(upe);acr=r(Dlt,"deberta"),Dlt.forEach(t),ncr=r(z6e," \u2014 "),LG=n(z6e,"A",{href:!0});var qlt=s(LG);scr=r(qlt,"TFDebertaForTokenClassification"),qlt.forEach(t),lcr=r(z6e," (DeBERTa model)"),z6e.forEach(t),icr=i(oe),E9=n(oe,"LI",{});var V6e=s(E9);bpe=n(V6e,"STRONG",{});var Glt=s(bpe);dcr=r(Glt,"deberta-v2"),Glt.forEach(t),ccr=r(V6e," \u2014 "),BG=n(V6e,"A",{href:!0});var Olt=s(BG);fcr=r(Olt,"TFDebertaV2ForTokenClassification"),Olt.forEach(t),mcr=r(V6e," (DeBERTa-v2 model)"),V6e.forEach(t),gcr=i(oe),y9=n(oe,"LI",{});var W6e=s(y9);vpe=n(W6e,"STRONG",{});var Xlt=s(vpe);hcr=r(Xlt,"distilbert"),Xlt.forEach(t),pcr=r(W6e," \u2014 "),xG=n(W6e,"A",{href:!0});var zlt=s(xG);_cr=r(zlt,"TFDistilBertForTokenClassification"),zlt.forEach(t),ucr=r(W6e," (DistilBERT model)"),W6e.forEach(t),bcr=i(oe),w9=n(oe,"LI",{});var Q6e=s(w9);Tpe=n(Q6e,"STRONG",{});var Vlt=s(Tpe);vcr=r(Vlt,"electra"),Vlt.forEach(t),Tcr=r(Q6e," \u2014 "),kG=n(Q6e,"A",{href:!0});var Wlt=s(kG);Fcr=r(Wlt,"TFElectraForTokenClassification"),Wlt.forEach(t),Ccr=r(Q6e," (ELECTRA model)"),Q6e.forEach(t),Mcr=i(oe),A9=n(oe,"LI",{});var H6e=s(A9);Fpe=n(H6e,"STRONG",{});var Qlt=s(Fpe);Ecr=r(Qlt,"flaubert"),Qlt.forEach(t),ycr=r(H6e," \u2014 "),RG=n(H6e,"A",{href:!0});var Hlt=s(RG);wcr=r(Hlt,"TFFlaubertForTokenClassification"),Hlt.forEach(t),Acr=r(H6e," (FlauBERT model)"),H6e.forEach(t),Lcr=i(oe),L9=n(oe,"LI",{});var U6e=s(L9);Cpe=n(U6e,"STRONG",{});var Ult=s(Cpe);Bcr=r(Ult,"funnel"),Ult.forEach(t),xcr=r(U6e," \u2014 "),SG=n(U6e,"A",{href:!0});var Jlt=s(SG);kcr=r(Jlt,"TFFunnelForTokenClassification"),Jlt.forEach(t),Rcr=r(U6e," (Funnel Transformer model)"),U6e.forEach(t),Scr=i(oe),B9=n(oe,"LI",{});var J6e=s(B9);Mpe=n(J6e,"STRONG",{});var Ylt=s(Mpe);Pcr=r(Ylt,"layoutlm"),Ylt.forEach(t),$cr=r(J6e," \u2014 "),PG=n(J6e,"A",{href:!0});var Klt=s(PG);Icr=r(Klt,"TFLayoutLMForTokenClassification"),Klt.forEach(t),jcr=r(J6e," (LayoutLM model)"),J6e.forEach(t),Ncr=i(oe),x9=n(oe,"LI",{});var Y6e=s(x9);Epe=n(Y6e,"STRONG",{});var Zlt=s(Epe);Dcr=r(Zlt,"longformer"),Zlt.forEach(t),qcr=r(Y6e," \u2014 "),$G=n(Y6e,"A",{href:!0});var eit=s($G);Gcr=r(eit,"TFLongformerForTokenClassification"),eit.forEach(t),Ocr=r(Y6e," (Longformer model)"),Y6e.forEach(t),Xcr=i(oe),k9=n(oe,"LI",{});var K6e=s(k9);ype=n(K6e,"STRONG",{});var oit=s(ype);zcr=r(oit,"mobilebert"),oit.forEach(t),Vcr=r(K6e," \u2014 "),IG=n(K6e,"A",{href:!0});var rit=s(IG);Wcr=r(rit,"TFMobileBertForTokenClassification"),rit.forEach(t),Qcr=r(K6e," (MobileBERT model)"),K6e.forEach(t),Hcr=i(oe),R9=n(oe,"LI",{});var Z6e=s(R9);wpe=n(Z6e,"STRONG",{});var tit=s(wpe);Ucr=r(tit,"mpnet"),tit.forEach(t),Jcr=r(Z6e," \u2014 "),jG=n(Z6e,"A",{href:!0});var ait=s(jG);Ycr=r(ait,"TFMPNetForTokenClassification"),ait.forEach(t),Kcr=r(Z6e," (MPNet model)"),Z6e.forEach(t),Zcr=i(oe),S9=n(oe,"LI",{});var e0e=s(S9);Ape=n(e0e,"STRONG",{});var nit=s(Ape);efr=r(nit,"rembert"),nit.forEach(t),ofr=r(e0e," \u2014 "),NG=n(e0e,"A",{href:!0});var sit=s(NG);rfr=r(sit,"TFRemBertForTokenClassification"),sit.forEach(t),tfr=r(e0e," (RemBERT model)"),e0e.forEach(t),afr=i(oe),P9=n(oe,"LI",{});var o0e=s(P9);Lpe=n(o0e,"STRONG",{});var lit=s(Lpe);nfr=r(lit,"roberta"),lit.forEach(t),sfr=r(o0e," \u2014 "),DG=n(o0e,"A",{href:!0});var iit=s(DG);lfr=r(iit,"TFRobertaForTokenClassification"),iit.forEach(t),ifr=r(o0e," (RoBERTa model)"),o0e.forEach(t),dfr=i(oe),$9=n(oe,"LI",{});var r0e=s($9);Bpe=n(r0e,"STRONG",{});var dit=s(Bpe);cfr=r(dit,"roformer"),dit.forEach(t),ffr=r(r0e," \u2014 "),qG=n(r0e,"A",{href:!0});var cit=s(qG);mfr=r(cit,"TFRoFormerForTokenClassification"),cit.forEach(t),gfr=r(r0e," (RoFormer model)"),r0e.forEach(t),hfr=i(oe),I9=n(oe,"LI",{});var t0e=s(I9);xpe=n(t0e,"STRONG",{});var fit=s(xpe);pfr=r(fit,"xlm"),fit.forEach(t),_fr=r(t0e," \u2014 "),GG=n(t0e,"A",{href:!0});var mit=s(GG);ufr=r(mit,"TFXLMForTokenClassification"),mit.forEach(t),bfr=r(t0e," (XLM model)"),t0e.forEach(t),vfr=i(oe),j9=n(oe,"LI",{});var a0e=s(j9);kpe=n(a0e,"STRONG",{});var git=s(kpe);Tfr=r(git,"xlm-roberta"),git.forEach(t),Ffr=r(a0e," \u2014 "),OG=n(a0e,"A",{href:!0});var hit=s(OG);Cfr=r(hit,"TFXLMRobertaForTokenClassification"),hit.forEach(t),Mfr=r(a0e," (XLM-RoBERTa model)"),a0e.forEach(t),Efr=i(oe),N9=n(oe,"LI",{});var n0e=s(N9);Rpe=n(n0e,"STRONG",{});var pit=s(Rpe);yfr=r(pit,"xlnet"),pit.forEach(t),wfr=r(n0e," \u2014 "),XG=n(n0e,"A",{href:!0});var _it=s(XG);Afr=r(_it,"TFXLNetForTokenClassification"),_it.forEach(t),Lfr=r(n0e," (XLNet model)"),n0e.forEach(t),oe.forEach(t),Bfr=i(va),Spe=n(va,"P",{});var uit=s(Spe);xfr=r(uit,"Examples:"),uit.forEach(t),kfr=i(va),m(QA.$$.fragment,va),va.forEach(t),Hl.forEach(t),$8e=i(d),Rc=n(d,"H2",{class:!0});var Vxe=s(Rc);D9=n(Vxe,"A",{id:!0,class:!0,href:!0});var bit=s(D9);Ppe=n(bit,"SPAN",{});var vit=s(Ppe);m(HA.$$.fragment,vit),vit.forEach(t),bit.forEach(t),Rfr=i(Vxe),$pe=n(Vxe,"SPAN",{});var Tit=s($pe);Sfr=r(Tit,"TFAutoModelForQuestionAnswering"),Tit.forEach(t),Vxe.forEach(t),I8e=i(d),Mr=n(d,"DIV",{class:!0});var Jl=s(Mr);m(UA.$$.fragment,Jl),Pfr=i(Jl),Sc=n(Jl,"P",{});var mV=s(Sc);$fr=r(mV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ipe=n(mV,"CODE",{});var Fit=s(Ipe);Ifr=r(Fit,"from_pretrained()"),Fit.forEach(t),jfr=r(mV,"class method or the "),jpe=n(mV,"CODE",{});var Cit=s(jpe);Nfr=r(Cit,"from_config()"),Cit.forEach(t),Dfr=r(mV,`class
method.`),mV.forEach(t),qfr=i(Jl),JA=n(Jl,"P",{});var Wxe=s(JA);Gfr=r(Wxe,"This class cannot be instantiated directly using "),Npe=n(Wxe,"CODE",{});var Mit=s(Npe);Ofr=r(Mit,"__init__()"),Mit.forEach(t),Xfr=r(Wxe," (throws an error)."),Wxe.forEach(t),zfr=i(Jl),_t=n(Jl,"DIV",{class:!0});var Yl=s(_t);m(YA.$$.fragment,Yl),Vfr=i(Yl),Dpe=n(Yl,"P",{});var Eit=s(Dpe);Wfr=r(Eit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eit.forEach(t),Qfr=i(Yl),Pc=n(Yl,"P",{});var gV=s(Pc);Hfr=r(gV,`Note:
Loading a model from its configuration file does `),qpe=n(gV,"STRONG",{});var yit=s(qpe);Ufr=r(yit,"not"),yit.forEach(t),Jfr=r(gV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gpe=n(gV,"CODE",{});var wit=s(Gpe);Yfr=r(wit,"from_pretrained()"),wit.forEach(t),Kfr=r(gV,"to load the model weights."),gV.forEach(t),Zfr=i(Yl),Ope=n(Yl,"P",{});var Ait=s(Ope);emr=r(Ait,"Examples:"),Ait.forEach(t),omr=i(Yl),m(KA.$$.fragment,Yl),Yl.forEach(t),rmr=i(Jl),Mo=n(Jl,"DIV",{class:!0});var Ta=s(Mo);m(ZA.$$.fragment,Ta),tmr=i(Ta),Xpe=n(Ta,"P",{});var Lit=s(Xpe);amr=r(Lit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lit.forEach(t),nmr=i(Ta),bn=n(Ta,"P",{});var GM=s(bn);smr=r(GM,"The model class to instantiate is selected based on the "),zpe=n(GM,"CODE",{});var Bit=s(zpe);lmr=r(Bit,"model_type"),Bit.forEach(t),imr=r(GM,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(GM,"CODE",{});var xit=s(Vpe);dmr=r(xit,"pretrained_model_name_or_path"),xit.forEach(t),cmr=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(GM,"CODE",{});var kit=s(Wpe);fmr=r(kit,"pretrained_model_name_or_path"),kit.forEach(t),mmr=r(GM,":"),GM.forEach(t),gmr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);q9=n(re,"LI",{});var s0e=s(q9);Qpe=n(s0e,"STRONG",{});var Rit=s(Qpe);hmr=r(Rit,"albert"),Rit.forEach(t),pmr=r(s0e," \u2014 "),zG=n(s0e,"A",{href:!0});var Sit=s(zG);_mr=r(Sit,"TFAlbertForQuestionAnswering"),Sit.forEach(t),umr=r(s0e," (ALBERT model)"),s0e.forEach(t),bmr=i(re),G9=n(re,"LI",{});var l0e=s(G9);Hpe=n(l0e,"STRONG",{});var Pit=s(Hpe);vmr=r(Pit,"bert"),Pit.forEach(t),Tmr=r(l0e," \u2014 "),VG=n(l0e,"A",{href:!0});var $it=s(VG);Fmr=r($it,"TFBertForQuestionAnswering"),$it.forEach(t),Cmr=r(l0e," (BERT model)"),l0e.forEach(t),Mmr=i(re),O9=n(re,"LI",{});var i0e=s(O9);Upe=n(i0e,"STRONG",{});var Iit=s(Upe);Emr=r(Iit,"camembert"),Iit.forEach(t),ymr=r(i0e," \u2014 "),WG=n(i0e,"A",{href:!0});var jit=s(WG);wmr=r(jit,"TFCamembertForQuestionAnswering"),jit.forEach(t),Amr=r(i0e," (CamemBERT model)"),i0e.forEach(t),Lmr=i(re),X9=n(re,"LI",{});var d0e=s(X9);Jpe=n(d0e,"STRONG",{});var Nit=s(Jpe);Bmr=r(Nit,"convbert"),Nit.forEach(t),xmr=r(d0e," \u2014 "),QG=n(d0e,"A",{href:!0});var Dit=s(QG);kmr=r(Dit,"TFConvBertForQuestionAnswering"),Dit.forEach(t),Rmr=r(d0e," (ConvBERT model)"),d0e.forEach(t),Smr=i(re),z9=n(re,"LI",{});var c0e=s(z9);Ype=n(c0e,"STRONG",{});var qit=s(Ype);Pmr=r(qit,"deberta"),qit.forEach(t),$mr=r(c0e," \u2014 "),HG=n(c0e,"A",{href:!0});var Git=s(HG);Imr=r(Git,"TFDebertaForQuestionAnswering"),Git.forEach(t),jmr=r(c0e," (DeBERTa model)"),c0e.forEach(t),Nmr=i(re),V9=n(re,"LI",{});var f0e=s(V9);Kpe=n(f0e,"STRONG",{});var Oit=s(Kpe);Dmr=r(Oit,"deberta-v2"),Oit.forEach(t),qmr=r(f0e," \u2014 "),UG=n(f0e,"A",{href:!0});var Xit=s(UG);Gmr=r(Xit,"TFDebertaV2ForQuestionAnswering"),Xit.forEach(t),Omr=r(f0e," (DeBERTa-v2 model)"),f0e.forEach(t),Xmr=i(re),W9=n(re,"LI",{});var m0e=s(W9);Zpe=n(m0e,"STRONG",{});var zit=s(Zpe);zmr=r(zit,"distilbert"),zit.forEach(t),Vmr=r(m0e," \u2014 "),JG=n(m0e,"A",{href:!0});var Vit=s(JG);Wmr=r(Vit,"TFDistilBertForQuestionAnswering"),Vit.forEach(t),Qmr=r(m0e," (DistilBERT model)"),m0e.forEach(t),Hmr=i(re),Q9=n(re,"LI",{});var g0e=s(Q9);e_e=n(g0e,"STRONG",{});var Wit=s(e_e);Umr=r(Wit,"electra"),Wit.forEach(t),Jmr=r(g0e," \u2014 "),YG=n(g0e,"A",{href:!0});var Qit=s(YG);Ymr=r(Qit,"TFElectraForQuestionAnswering"),Qit.forEach(t),Kmr=r(g0e," (ELECTRA model)"),g0e.forEach(t),Zmr=i(re),H9=n(re,"LI",{});var h0e=s(H9);o_e=n(h0e,"STRONG",{});var Hit=s(o_e);egr=r(Hit,"flaubert"),Hit.forEach(t),ogr=r(h0e," \u2014 "),KG=n(h0e,"A",{href:!0});var Uit=s(KG);rgr=r(Uit,"TFFlaubertForQuestionAnsweringSimple"),Uit.forEach(t),tgr=r(h0e," (FlauBERT model)"),h0e.forEach(t),agr=i(re),U9=n(re,"LI",{});var p0e=s(U9);r_e=n(p0e,"STRONG",{});var Jit=s(r_e);ngr=r(Jit,"funnel"),Jit.forEach(t),sgr=r(p0e," \u2014 "),ZG=n(p0e,"A",{href:!0});var Yit=s(ZG);lgr=r(Yit,"TFFunnelForQuestionAnswering"),Yit.forEach(t),igr=r(p0e," (Funnel Transformer model)"),p0e.forEach(t),dgr=i(re),J9=n(re,"LI",{});var _0e=s(J9);t_e=n(_0e,"STRONG",{});var Kit=s(t_e);cgr=r(Kit,"longformer"),Kit.forEach(t),fgr=r(_0e," \u2014 "),eO=n(_0e,"A",{href:!0});var Zit=s(eO);mgr=r(Zit,"TFLongformerForQuestionAnswering"),Zit.forEach(t),ggr=r(_0e," (Longformer model)"),_0e.forEach(t),hgr=i(re),Y9=n(re,"LI",{});var u0e=s(Y9);a_e=n(u0e,"STRONG",{});var edt=s(a_e);pgr=r(edt,"mobilebert"),edt.forEach(t),_gr=r(u0e," \u2014 "),oO=n(u0e,"A",{href:!0});var odt=s(oO);ugr=r(odt,"TFMobileBertForQuestionAnswering"),odt.forEach(t),bgr=r(u0e," (MobileBERT model)"),u0e.forEach(t),vgr=i(re),K9=n(re,"LI",{});var b0e=s(K9);n_e=n(b0e,"STRONG",{});var rdt=s(n_e);Tgr=r(rdt,"mpnet"),rdt.forEach(t),Fgr=r(b0e," \u2014 "),rO=n(b0e,"A",{href:!0});var tdt=s(rO);Cgr=r(tdt,"TFMPNetForQuestionAnswering"),tdt.forEach(t),Mgr=r(b0e," (MPNet model)"),b0e.forEach(t),Egr=i(re),Z9=n(re,"LI",{});var v0e=s(Z9);s_e=n(v0e,"STRONG",{});var adt=s(s_e);ygr=r(adt,"rembert"),adt.forEach(t),wgr=r(v0e," \u2014 "),tO=n(v0e,"A",{href:!0});var ndt=s(tO);Agr=r(ndt,"TFRemBertForQuestionAnswering"),ndt.forEach(t),Lgr=r(v0e," (RemBERT model)"),v0e.forEach(t),Bgr=i(re),eC=n(re,"LI",{});var T0e=s(eC);l_e=n(T0e,"STRONG",{});var sdt=s(l_e);xgr=r(sdt,"roberta"),sdt.forEach(t),kgr=r(T0e," \u2014 "),aO=n(T0e,"A",{href:!0});var ldt=s(aO);Rgr=r(ldt,"TFRobertaForQuestionAnswering"),ldt.forEach(t),Sgr=r(T0e," (RoBERTa model)"),T0e.forEach(t),Pgr=i(re),oC=n(re,"LI",{});var F0e=s(oC);i_e=n(F0e,"STRONG",{});var idt=s(i_e);$gr=r(idt,"roformer"),idt.forEach(t),Igr=r(F0e," \u2014 "),nO=n(F0e,"A",{href:!0});var ddt=s(nO);jgr=r(ddt,"TFRoFormerForQuestionAnswering"),ddt.forEach(t),Ngr=r(F0e," (RoFormer model)"),F0e.forEach(t),Dgr=i(re),rC=n(re,"LI",{});var C0e=s(rC);d_e=n(C0e,"STRONG",{});var cdt=s(d_e);qgr=r(cdt,"xlm"),cdt.forEach(t),Ggr=r(C0e," \u2014 "),sO=n(C0e,"A",{href:!0});var fdt=s(sO);Ogr=r(fdt,"TFXLMForQuestionAnsweringSimple"),fdt.forEach(t),Xgr=r(C0e," (XLM model)"),C0e.forEach(t),zgr=i(re),tC=n(re,"LI",{});var M0e=s(tC);c_e=n(M0e,"STRONG",{});var mdt=s(c_e);Vgr=r(mdt,"xlm-roberta"),mdt.forEach(t),Wgr=r(M0e," \u2014 "),lO=n(M0e,"A",{href:!0});var gdt=s(lO);Qgr=r(gdt,"TFXLMRobertaForQuestionAnswering"),gdt.forEach(t),Hgr=r(M0e," (XLM-RoBERTa model)"),M0e.forEach(t),Ugr=i(re),aC=n(re,"LI",{});var E0e=s(aC);f_e=n(E0e,"STRONG",{});var hdt=s(f_e);Jgr=r(hdt,"xlnet"),hdt.forEach(t),Ygr=r(E0e," \u2014 "),iO=n(E0e,"A",{href:!0});var pdt=s(iO);Kgr=r(pdt,"TFXLNetForQuestionAnsweringSimple"),pdt.forEach(t),Zgr=r(E0e," (XLNet model)"),E0e.forEach(t),re.forEach(t),ehr=i(Ta),m_e=n(Ta,"P",{});var _dt=s(m_e);ohr=r(_dt,"Examples:"),_dt.forEach(t),rhr=i(Ta),m(e6.$$.fragment,Ta),Ta.forEach(t),Jl.forEach(t),j8e=i(d),$c=n(d,"H2",{class:!0});var Qxe=s($c);nC=n(Qxe,"A",{id:!0,class:!0,href:!0});var udt=s(nC);g_e=n(udt,"SPAN",{});var bdt=s(g_e);m(o6.$$.fragment,bdt),bdt.forEach(t),udt.forEach(t),thr=i(Qxe),h_e=n(Qxe,"SPAN",{});var vdt=s(h_e);ahr=r(vdt,"TFAutoModelForVision2Seq"),vdt.forEach(t),Qxe.forEach(t),N8e=i(d),Er=n(d,"DIV",{class:!0});var Kl=s(Er);m(r6.$$.fragment,Kl),nhr=i(Kl),Ic=n(Kl,"P",{});var hV=s(Ic);shr=r(hV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),p_e=n(hV,"CODE",{});var Tdt=s(p_e);lhr=r(Tdt,"from_pretrained()"),Tdt.forEach(t),ihr=r(hV,"class method or the "),__e=n(hV,"CODE",{});var Fdt=s(__e);dhr=r(Fdt,"from_config()"),Fdt.forEach(t),chr=r(hV,`class
method.`),hV.forEach(t),fhr=i(Kl),t6=n(Kl,"P",{});var Hxe=s(t6);mhr=r(Hxe,"This class cannot be instantiated directly using "),u_e=n(Hxe,"CODE",{});var Cdt=s(u_e);ghr=r(Cdt,"__init__()"),Cdt.forEach(t),hhr=r(Hxe," (throws an error)."),Hxe.forEach(t),phr=i(Kl),ut=n(Kl,"DIV",{class:!0});var Zl=s(ut);m(a6.$$.fragment,Zl),_hr=i(Zl),b_e=n(Zl,"P",{});var Mdt=s(b_e);uhr=r(Mdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Mdt.forEach(t),bhr=i(Zl),jc=n(Zl,"P",{});var pV=s(jc);vhr=r(pV,`Note:
Loading a model from its configuration file does `),v_e=n(pV,"STRONG",{});var Edt=s(v_e);Thr=r(Edt,"not"),Edt.forEach(t),Fhr=r(pV,` load the model weights. It only affects the
model\u2019s configuration. Use `),T_e=n(pV,"CODE",{});var ydt=s(T_e);Chr=r(ydt,"from_pretrained()"),ydt.forEach(t),Mhr=r(pV,"to load the model weights."),pV.forEach(t),Ehr=i(Zl),F_e=n(Zl,"P",{});var wdt=s(F_e);yhr=r(wdt,"Examples:"),wdt.forEach(t),whr=i(Zl),m(n6.$$.fragment,Zl),Zl.forEach(t),Ahr=i(Kl),Eo=n(Kl,"DIV",{class:!0});var Fa=s(Eo);m(s6.$$.fragment,Fa),Lhr=i(Fa),C_e=n(Fa,"P",{});var Adt=s(C_e);Bhr=r(Adt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Adt.forEach(t),xhr=i(Fa),vn=n(Fa,"P",{});var OM=s(vn);khr=r(OM,"The model class to instantiate is selected based on the "),M_e=n(OM,"CODE",{});var Ldt=s(M_e);Rhr=r(Ldt,"model_type"),Ldt.forEach(t),Shr=r(OM,` property of the config object (either
passed as an argument or loaded from `),E_e=n(OM,"CODE",{});var Bdt=s(E_e);Phr=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),$hr=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(OM,"CODE",{});var xdt=s(y_e);Ihr=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),jhr=r(OM,":"),OM.forEach(t),Nhr=i(Fa),w_e=n(Fa,"UL",{});var kdt=s(w_e);sC=n(kdt,"LI",{});var y0e=s(sC);A_e=n(y0e,"STRONG",{});var Rdt=s(A_e);Dhr=r(Rdt,"vision-encoder-decoder"),Rdt.forEach(t),qhr=r(y0e," \u2014 "),dO=n(y0e,"A",{href:!0});var Sdt=s(dO);Ghr=r(Sdt,"TFVisionEncoderDecoderModel"),Sdt.forEach(t),Ohr=r(y0e," (Vision Encoder decoder model)"),y0e.forEach(t),kdt.forEach(t),Xhr=i(Fa),L_e=n(Fa,"P",{});var Pdt=s(L_e);zhr=r(Pdt,"Examples:"),Pdt.forEach(t),Vhr=i(Fa),m(l6.$$.fragment,Fa),Fa.forEach(t),Kl.forEach(t),D8e=i(d),Nc=n(d,"H2",{class:!0});var Uxe=s(Nc);lC=n(Uxe,"A",{id:!0,class:!0,href:!0});var $dt=s(lC);B_e=n($dt,"SPAN",{});var Idt=s(B_e);m(i6.$$.fragment,Idt),Idt.forEach(t),$dt.forEach(t),Whr=i(Uxe),x_e=n(Uxe,"SPAN",{});var jdt=s(x_e);Qhr=r(jdt,"TFAutoModelForSpeechSeq2Seq"),jdt.forEach(t),Uxe.forEach(t),q8e=i(d),yr=n(d,"DIV",{class:!0});var ei=s(yr);m(d6.$$.fragment,ei),Hhr=i(ei),Dc=n(ei,"P",{});var _V=s(Dc);Uhr=r(_V,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),k_e=n(_V,"CODE",{});var Ndt=s(k_e);Jhr=r(Ndt,"from_pretrained()"),Ndt.forEach(t),Yhr=r(_V,"class method or the "),R_e=n(_V,"CODE",{});var Ddt=s(R_e);Khr=r(Ddt,"from_config()"),Ddt.forEach(t),Zhr=r(_V,`class
method.`),_V.forEach(t),epr=i(ei),c6=n(ei,"P",{});var Jxe=s(c6);opr=r(Jxe,"This class cannot be instantiated directly using "),S_e=n(Jxe,"CODE",{});var qdt=s(S_e);rpr=r(qdt,"__init__()"),qdt.forEach(t),tpr=r(Jxe," (throws an error)."),Jxe.forEach(t),apr=i(ei),bt=n(ei,"DIV",{class:!0});var oi=s(bt);m(f6.$$.fragment,oi),npr=i(oi),P_e=n(oi,"P",{});var Gdt=s(P_e);spr=r(Gdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gdt.forEach(t),lpr=i(oi),qc=n(oi,"P",{});var uV=s(qc);ipr=r(uV,`Note:
Loading a model from its configuration file does `),$_e=n(uV,"STRONG",{});var Odt=s($_e);dpr=r(Odt,"not"),Odt.forEach(t),cpr=r(uV,` load the model weights. It only affects the
model\u2019s configuration. Use `),I_e=n(uV,"CODE",{});var Xdt=s(I_e);fpr=r(Xdt,"from_pretrained()"),Xdt.forEach(t),mpr=r(uV,"to load the model weights."),uV.forEach(t),gpr=i(oi),j_e=n(oi,"P",{});var zdt=s(j_e);hpr=r(zdt,"Examples:"),zdt.forEach(t),ppr=i(oi),m(m6.$$.fragment,oi),oi.forEach(t),_pr=i(ei),yo=n(ei,"DIV",{class:!0});var Ca=s(yo);m(g6.$$.fragment,Ca),upr=i(Ca),N_e=n(Ca,"P",{});var Vdt=s(N_e);bpr=r(Vdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Vdt.forEach(t),vpr=i(Ca),Tn=n(Ca,"P",{});var XM=s(Tn);Tpr=r(XM,"The model class to instantiate is selected based on the "),D_e=n(XM,"CODE",{});var Wdt=s(D_e);Fpr=r(Wdt,"model_type"),Wdt.forEach(t),Cpr=r(XM,` property of the config object (either
passed as an argument or loaded from `),q_e=n(XM,"CODE",{});var Qdt=s(q_e);Mpr=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),Epr=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(XM,"CODE",{});var Hdt=s(G_e);ypr=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),wpr=r(XM,":"),XM.forEach(t),Apr=i(Ca),O_e=n(Ca,"UL",{});var Udt=s(O_e);iC=n(Udt,"LI",{});var w0e=s(iC);X_e=n(w0e,"STRONG",{});var Jdt=s(X_e);Lpr=r(Jdt,"speech_to_text"),Jdt.forEach(t),Bpr=r(w0e," \u2014 "),cO=n(w0e,"A",{href:!0});var Ydt=s(cO);xpr=r(Ydt,"TFSpeech2TextForConditionalGeneration"),Ydt.forEach(t),kpr=r(w0e," (Speech2Text model)"),w0e.forEach(t),Udt.forEach(t),Rpr=i(Ca),z_e=n(Ca,"P",{});var Kdt=s(z_e);Spr=r(Kdt,"Examples:"),Kdt.forEach(t),Ppr=i(Ca),m(h6.$$.fragment,Ca),Ca.forEach(t),ei.forEach(t),G8e=i(d),Gc=n(d,"H2",{class:!0});var Yxe=s(Gc);dC=n(Yxe,"A",{id:!0,class:!0,href:!0});var Zdt=s(dC);V_e=n(Zdt,"SPAN",{});var ect=s(V_e);m(p6.$$.fragment,ect),ect.forEach(t),Zdt.forEach(t),$pr=i(Yxe),W_e=n(Yxe,"SPAN",{});var oct=s(W_e);Ipr=r(oct,"FlaxAutoModel"),oct.forEach(t),Yxe.forEach(t),O8e=i(d),wr=n(d,"DIV",{class:!0});var ri=s(wr);m(_6.$$.fragment,ri),jpr=i(ri),Oc=n(ri,"P",{});var bV=s(Oc);Npr=r(bV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Q_e=n(bV,"CODE",{});var rct=s(Q_e);Dpr=r(rct,"from_pretrained()"),rct.forEach(t),qpr=r(bV,"class method or the "),H_e=n(bV,"CODE",{});var tct=s(H_e);Gpr=r(tct,"from_config()"),tct.forEach(t),Opr=r(bV,`class
method.`),bV.forEach(t),Xpr=i(ri),u6=n(ri,"P",{});var Kxe=s(u6);zpr=r(Kxe,"This class cannot be instantiated directly using "),U_e=n(Kxe,"CODE",{});var act=s(U_e);Vpr=r(act,"__init__()"),act.forEach(t),Wpr=r(Kxe," (throws an error)."),Kxe.forEach(t),Qpr=i(ri),vt=n(ri,"DIV",{class:!0});var ti=s(vt);m(b6.$$.fragment,ti),Hpr=i(ti),J_e=n(ti,"P",{});var nct=s(J_e);Upr=r(nct,"Instantiates one of the base model classes of the library from a configuration."),nct.forEach(t),Jpr=i(ti),Xc=n(ti,"P",{});var vV=s(Xc);Ypr=r(vV,`Note:
Loading a model from its configuration file does `),Y_e=n(vV,"STRONG",{});var sct=s(Y_e);Kpr=r(sct,"not"),sct.forEach(t),Zpr=r(vV,` load the model weights. It only affects the
model\u2019s configuration. Use `),K_e=n(vV,"CODE",{});var lct=s(K_e);e_r=r(lct,"from_pretrained()"),lct.forEach(t),o_r=r(vV,"to load the model weights."),vV.forEach(t),r_r=i(ti),Z_e=n(ti,"P",{});var ict=s(Z_e);t_r=r(ict,"Examples:"),ict.forEach(t),a_r=i(ti),m(v6.$$.fragment,ti),ti.forEach(t),n_r=i(ri),wo=n(ri,"DIV",{class:!0});var Ma=s(wo);m(T6.$$.fragment,Ma),s_r=i(Ma),eue=n(Ma,"P",{});var dct=s(eue);l_r=r(dct,"Instantiate one of the base model classes of the library from a pretrained model."),dct.forEach(t),i_r=i(Ma),Fn=n(Ma,"P",{});var zM=s(Fn);d_r=r(zM,"The model class to instantiate is selected based on the "),oue=n(zM,"CODE",{});var cct=s(oue);c_r=r(cct,"model_type"),cct.forEach(t),f_r=r(zM,` property of the config object (either
passed as an argument or loaded from `),rue=n(zM,"CODE",{});var fct=s(rue);m_r=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),g_r=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(zM,"CODE",{});var mct=s(tue);h_r=r(mct,"pretrained_model_name_or_path"),mct.forEach(t),p_r=r(zM,":"),zM.forEach(t),__r=i(Ma),V=n(Ma,"UL",{});var Q=s(V);cC=n(Q,"LI",{});var A0e=s(cC);aue=n(A0e,"STRONG",{});var gct=s(aue);u_r=r(gct,"albert"),gct.forEach(t),b_r=r(A0e," \u2014 "),fO=n(A0e,"A",{href:!0});var hct=s(fO);v_r=r(hct,"FlaxAlbertModel"),hct.forEach(t),T_r=r(A0e," (ALBERT model)"),A0e.forEach(t),F_r=i(Q),fC=n(Q,"LI",{});var L0e=s(fC);nue=n(L0e,"STRONG",{});var pct=s(nue);C_r=r(pct,"bart"),pct.forEach(t),M_r=r(L0e," \u2014 "),mO=n(L0e,"A",{href:!0});var _ct=s(mO);E_r=r(_ct,"FlaxBartModel"),_ct.forEach(t),y_r=r(L0e," (BART model)"),L0e.forEach(t),w_r=i(Q),mC=n(Q,"LI",{});var B0e=s(mC);sue=n(B0e,"STRONG",{});var uct=s(sue);A_r=r(uct,"beit"),uct.forEach(t),L_r=r(B0e," \u2014 "),gO=n(B0e,"A",{href:!0});var bct=s(gO);B_r=r(bct,"FlaxBeitModel"),bct.forEach(t),x_r=r(B0e," (BEiT model)"),B0e.forEach(t),k_r=i(Q),gC=n(Q,"LI",{});var x0e=s(gC);lue=n(x0e,"STRONG",{});var vct=s(lue);R_r=r(vct,"bert"),vct.forEach(t),S_r=r(x0e," \u2014 "),hO=n(x0e,"A",{href:!0});var Tct=s(hO);P_r=r(Tct,"FlaxBertModel"),Tct.forEach(t),$_r=r(x0e," (BERT model)"),x0e.forEach(t),I_r=i(Q),hC=n(Q,"LI",{});var k0e=s(hC);iue=n(k0e,"STRONG",{});var Fct=s(iue);j_r=r(Fct,"big_bird"),Fct.forEach(t),N_r=r(k0e," \u2014 "),pO=n(k0e,"A",{href:!0});var Cct=s(pO);D_r=r(Cct,"FlaxBigBirdModel"),Cct.forEach(t),q_r=r(k0e," (BigBird model)"),k0e.forEach(t),G_r=i(Q),pC=n(Q,"LI",{});var R0e=s(pC);due=n(R0e,"STRONG",{});var Mct=s(due);O_r=r(Mct,"blenderbot"),Mct.forEach(t),X_r=r(R0e," \u2014 "),_O=n(R0e,"A",{href:!0});var Ect=s(_O);z_r=r(Ect,"FlaxBlenderbotModel"),Ect.forEach(t),V_r=r(R0e," (Blenderbot model)"),R0e.forEach(t),W_r=i(Q),_C=n(Q,"LI",{});var S0e=s(_C);cue=n(S0e,"STRONG",{});var yct=s(cue);Q_r=r(yct,"blenderbot-small"),yct.forEach(t),H_r=r(S0e," \u2014 "),uO=n(S0e,"A",{href:!0});var wct=s(uO);U_r=r(wct,"FlaxBlenderbotSmallModel"),wct.forEach(t),J_r=r(S0e," (BlenderbotSmall model)"),S0e.forEach(t),Y_r=i(Q),uC=n(Q,"LI",{});var P0e=s(uC);fue=n(P0e,"STRONG",{});var Act=s(fue);K_r=r(Act,"clip"),Act.forEach(t),Z_r=r(P0e," \u2014 "),bO=n(P0e,"A",{href:!0});var Lct=s(bO);eur=r(Lct,"FlaxCLIPModel"),Lct.forEach(t),our=r(P0e," (CLIP model)"),P0e.forEach(t),rur=i(Q),bC=n(Q,"LI",{});var $0e=s(bC);mue=n($0e,"STRONG",{});var Bct=s(mue);tur=r(Bct,"distilbert"),Bct.forEach(t),aur=r($0e," \u2014 "),vO=n($0e,"A",{href:!0});var xct=s(vO);nur=r(xct,"FlaxDistilBertModel"),xct.forEach(t),sur=r($0e," (DistilBERT model)"),$0e.forEach(t),lur=i(Q),vC=n(Q,"LI",{});var I0e=s(vC);gue=n(I0e,"STRONG",{});var kct=s(gue);iur=r(kct,"electra"),kct.forEach(t),dur=r(I0e," \u2014 "),TO=n(I0e,"A",{href:!0});var Rct=s(TO);cur=r(Rct,"FlaxElectraModel"),Rct.forEach(t),fur=r(I0e," (ELECTRA model)"),I0e.forEach(t),mur=i(Q),TC=n(Q,"LI",{});var j0e=s(TC);hue=n(j0e,"STRONG",{});var Sct=s(hue);gur=r(Sct,"gpt2"),Sct.forEach(t),hur=r(j0e," \u2014 "),FO=n(j0e,"A",{href:!0});var Pct=s(FO);pur=r(Pct,"FlaxGPT2Model"),Pct.forEach(t),_ur=r(j0e," (OpenAI GPT-2 model)"),j0e.forEach(t),uur=i(Q),FC=n(Q,"LI",{});var N0e=s(FC);pue=n(N0e,"STRONG",{});var $ct=s(pue);bur=r($ct,"gpt_neo"),$ct.forEach(t),vur=r(N0e," \u2014 "),CO=n(N0e,"A",{href:!0});var Ict=s(CO);Tur=r(Ict,"FlaxGPTNeoModel"),Ict.forEach(t),Fur=r(N0e," (GPT Neo model)"),N0e.forEach(t),Cur=i(Q),CC=n(Q,"LI",{});var D0e=s(CC);_ue=n(D0e,"STRONG",{});var jct=s(_ue);Mur=r(jct,"gptj"),jct.forEach(t),Eur=r(D0e," \u2014 "),MO=n(D0e,"A",{href:!0});var Nct=s(MO);yur=r(Nct,"FlaxGPTJModel"),Nct.forEach(t),wur=r(D0e," (GPT-J model)"),D0e.forEach(t),Aur=i(Q),MC=n(Q,"LI",{});var q0e=s(MC);uue=n(q0e,"STRONG",{});var Dct=s(uue);Lur=r(Dct,"marian"),Dct.forEach(t),Bur=r(q0e," \u2014 "),EO=n(q0e,"A",{href:!0});var qct=s(EO);xur=r(qct,"FlaxMarianModel"),qct.forEach(t),kur=r(q0e," (Marian model)"),q0e.forEach(t),Rur=i(Q),EC=n(Q,"LI",{});var G0e=s(EC);bue=n(G0e,"STRONG",{});var Gct=s(bue);Sur=r(Gct,"mbart"),Gct.forEach(t),Pur=r(G0e," \u2014 "),yO=n(G0e,"A",{href:!0});var Oct=s(yO);$ur=r(Oct,"FlaxMBartModel"),Oct.forEach(t),Iur=r(G0e," (mBART model)"),G0e.forEach(t),jur=i(Q),yC=n(Q,"LI",{});var O0e=s(yC);vue=n(O0e,"STRONG",{});var Xct=s(vue);Nur=r(Xct,"mt5"),Xct.forEach(t),Dur=r(O0e," \u2014 "),wO=n(O0e,"A",{href:!0});var zct=s(wO);qur=r(zct,"FlaxMT5Model"),zct.forEach(t),Gur=r(O0e," (mT5 model)"),O0e.forEach(t),Our=i(Q),wC=n(Q,"LI",{});var X0e=s(wC);Tue=n(X0e,"STRONG",{});var Vct=s(Tue);Xur=r(Vct,"pegasus"),Vct.forEach(t),zur=r(X0e," \u2014 "),AO=n(X0e,"A",{href:!0});var Wct=s(AO);Vur=r(Wct,"FlaxPegasusModel"),Wct.forEach(t),Wur=r(X0e," (Pegasus model)"),X0e.forEach(t),Qur=i(Q),AC=n(Q,"LI",{});var z0e=s(AC);Fue=n(z0e,"STRONG",{});var Qct=s(Fue);Hur=r(Qct,"roberta"),Qct.forEach(t),Uur=r(z0e," \u2014 "),LO=n(z0e,"A",{href:!0});var Hct=s(LO);Jur=r(Hct,"FlaxRobertaModel"),Hct.forEach(t),Yur=r(z0e," (RoBERTa model)"),z0e.forEach(t),Kur=i(Q),LC=n(Q,"LI",{});var V0e=s(LC);Cue=n(V0e,"STRONG",{});var Uct=s(Cue);Zur=r(Uct,"roformer"),Uct.forEach(t),e5r=r(V0e," \u2014 "),BO=n(V0e,"A",{href:!0});var Jct=s(BO);o5r=r(Jct,"FlaxRoFormerModel"),Jct.forEach(t),r5r=r(V0e," (RoFormer model)"),V0e.forEach(t),t5r=i(Q),BC=n(Q,"LI",{});var W0e=s(BC);Mue=n(W0e,"STRONG",{});var Yct=s(Mue);a5r=r(Yct,"t5"),Yct.forEach(t),n5r=r(W0e," \u2014 "),xO=n(W0e,"A",{href:!0});var Kct=s(xO);s5r=r(Kct,"FlaxT5Model"),Kct.forEach(t),l5r=r(W0e," (T5 model)"),W0e.forEach(t),i5r=i(Q),xC=n(Q,"LI",{});var Q0e=s(xC);Eue=n(Q0e,"STRONG",{});var Zct=s(Eue);d5r=r(Zct,"vision-text-dual-encoder"),Zct.forEach(t),c5r=r(Q0e," \u2014 "),kO=n(Q0e,"A",{href:!0});var eft=s(kO);f5r=r(eft,"FlaxVisionTextDualEncoderModel"),eft.forEach(t),m5r=r(Q0e," (VisionTextDualEncoder model)"),Q0e.forEach(t),g5r=i(Q),kC=n(Q,"LI",{});var H0e=s(kC);yue=n(H0e,"STRONG",{});var oft=s(yue);h5r=r(oft,"vit"),oft.forEach(t),p5r=r(H0e," \u2014 "),RO=n(H0e,"A",{href:!0});var rft=s(RO);_5r=r(rft,"FlaxViTModel"),rft.forEach(t),u5r=r(H0e," (ViT model)"),H0e.forEach(t),b5r=i(Q),RC=n(Q,"LI",{});var U0e=s(RC);wue=n(U0e,"STRONG",{});var tft=s(wue);v5r=r(tft,"wav2vec2"),tft.forEach(t),T5r=r(U0e," \u2014 "),SO=n(U0e,"A",{href:!0});var aft=s(SO);F5r=r(aft,"FlaxWav2Vec2Model"),aft.forEach(t),C5r=r(U0e," (Wav2Vec2 model)"),U0e.forEach(t),M5r=i(Q),SC=n(Q,"LI",{});var J0e=s(SC);Aue=n(J0e,"STRONG",{});var nft=s(Aue);E5r=r(nft,"xglm"),nft.forEach(t),y5r=r(J0e," \u2014 "),PO=n(J0e,"A",{href:!0});var sft=s(PO);w5r=r(sft,"FlaxXGLMModel"),sft.forEach(t),A5r=r(J0e," (XGLM model)"),J0e.forEach(t),Q.forEach(t),L5r=i(Ma),Lue=n(Ma,"P",{});var lft=s(Lue);B5r=r(lft,"Examples:"),lft.forEach(t),x5r=i(Ma),m(F6.$$.fragment,Ma),Ma.forEach(t),ri.forEach(t),X8e=i(d),zc=n(d,"H2",{class:!0});var Zxe=s(zc);PC=n(Zxe,"A",{id:!0,class:!0,href:!0});var ift=s(PC);Bue=n(ift,"SPAN",{});var dft=s(Bue);m(C6.$$.fragment,dft),dft.forEach(t),ift.forEach(t),k5r=i(Zxe),xue=n(Zxe,"SPAN",{});var cft=s(xue);R5r=r(cft,"FlaxAutoModelForCausalLM"),cft.forEach(t),Zxe.forEach(t),z8e=i(d),Ar=n(d,"DIV",{class:!0});var ai=s(Ar);m(M6.$$.fragment,ai),S5r=i(ai),Vc=n(ai,"P",{});var TV=s(Vc);P5r=r(TV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kue=n(TV,"CODE",{});var fft=s(kue);$5r=r(fft,"from_pretrained()"),fft.forEach(t),I5r=r(TV,"class method or the "),Rue=n(TV,"CODE",{});var mft=s(Rue);j5r=r(mft,"from_config()"),mft.forEach(t),N5r=r(TV,`class
method.`),TV.forEach(t),D5r=i(ai),E6=n(ai,"P",{});var eke=s(E6);q5r=r(eke,"This class cannot be instantiated directly using "),Sue=n(eke,"CODE",{});var gft=s(Sue);G5r=r(gft,"__init__()"),gft.forEach(t),O5r=r(eke," (throws an error)."),eke.forEach(t),X5r=i(ai),Tt=n(ai,"DIV",{class:!0});var ni=s(Tt);m(y6.$$.fragment,ni),z5r=i(ni),Pue=n(ni,"P",{});var hft=s(Pue);V5r=r(hft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hft.forEach(t),W5r=i(ni),Wc=n(ni,"P",{});var FV=s(Wc);Q5r=r(FV,`Note:
Loading a model from its configuration file does `),$ue=n(FV,"STRONG",{});var pft=s($ue);H5r=r(pft,"not"),pft.forEach(t),U5r=r(FV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iue=n(FV,"CODE",{});var _ft=s(Iue);J5r=r(_ft,"from_pretrained()"),_ft.forEach(t),Y5r=r(FV,"to load the model weights."),FV.forEach(t),K5r=i(ni),jue=n(ni,"P",{});var uft=s(jue);Z5r=r(uft,"Examples:"),uft.forEach(t),e2r=i(ni),m(w6.$$.fragment,ni),ni.forEach(t),o2r=i(ai),Ao=n(ai,"DIV",{class:!0});var Ea=s(Ao);m(A6.$$.fragment,Ea),r2r=i(Ea),Nue=n(Ea,"P",{});var bft=s(Nue);t2r=r(bft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bft.forEach(t),a2r=i(Ea),Cn=n(Ea,"P",{});var VM=s(Cn);n2r=r(VM,"The model class to instantiate is selected based on the "),Due=n(VM,"CODE",{});var vft=s(Due);s2r=r(vft,"model_type"),vft.forEach(t),l2r=r(VM,` property of the config object (either
passed as an argument or loaded from `),que=n(VM,"CODE",{});var Tft=s(que);i2r=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),d2r=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(VM,"CODE",{});var Fft=s(Gue);c2r=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),f2r=r(VM,":"),VM.forEach(t),m2r=i(Ea),Mn=n(Ea,"UL",{});var WM=s(Mn);$C=n(WM,"LI",{});var Y0e=s($C);Oue=n(Y0e,"STRONG",{});var Cft=s(Oue);g2r=r(Cft,"gpt2"),Cft.forEach(t),h2r=r(Y0e," \u2014 "),$O=n(Y0e,"A",{href:!0});var Mft=s($O);p2r=r(Mft,"FlaxGPT2LMHeadModel"),Mft.forEach(t),_2r=r(Y0e," (OpenAI GPT-2 model)"),Y0e.forEach(t),u2r=i(WM),IC=n(WM,"LI",{});var K0e=s(IC);Xue=n(K0e,"STRONG",{});var Eft=s(Xue);b2r=r(Eft,"gpt_neo"),Eft.forEach(t),v2r=r(K0e," \u2014 "),IO=n(K0e,"A",{href:!0});var yft=s(IO);T2r=r(yft,"FlaxGPTNeoForCausalLM"),yft.forEach(t),F2r=r(K0e," (GPT Neo model)"),K0e.forEach(t),C2r=i(WM),jC=n(WM,"LI",{});var Z0e=s(jC);zue=n(Z0e,"STRONG",{});var wft=s(zue);M2r=r(wft,"gptj"),wft.forEach(t),E2r=r(Z0e," \u2014 "),jO=n(Z0e,"A",{href:!0});var Aft=s(jO);y2r=r(Aft,"FlaxGPTJForCausalLM"),Aft.forEach(t),w2r=r(Z0e," (GPT-J model)"),Z0e.forEach(t),A2r=i(WM),NC=n(WM,"LI",{});var eLe=s(NC);Vue=n(eLe,"STRONG",{});var Lft=s(Vue);L2r=r(Lft,"xglm"),Lft.forEach(t),B2r=r(eLe," \u2014 "),NO=n(eLe,"A",{href:!0});var Bft=s(NO);x2r=r(Bft,"FlaxXGLMForCausalLM"),Bft.forEach(t),k2r=r(eLe," (XGLM model)"),eLe.forEach(t),WM.forEach(t),R2r=i(Ea),Wue=n(Ea,"P",{});var xft=s(Wue);S2r=r(xft,"Examples:"),xft.forEach(t),P2r=i(Ea),m(L6.$$.fragment,Ea),Ea.forEach(t),ai.forEach(t),V8e=i(d),Qc=n(d,"H2",{class:!0});var oke=s(Qc);DC=n(oke,"A",{id:!0,class:!0,href:!0});var kft=s(DC);Que=n(kft,"SPAN",{});var Rft=s(Que);m(B6.$$.fragment,Rft),Rft.forEach(t),kft.forEach(t),$2r=i(oke),Hue=n(oke,"SPAN",{});var Sft=s(Hue);I2r=r(Sft,"FlaxAutoModelForPreTraining"),Sft.forEach(t),oke.forEach(t),W8e=i(d),Lr=n(d,"DIV",{class:!0});var si=s(Lr);m(x6.$$.fragment,si),j2r=i(si),Hc=n(si,"P",{});var CV=s(Hc);N2r=r(CV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Uue=n(CV,"CODE",{});var Pft=s(Uue);D2r=r(Pft,"from_pretrained()"),Pft.forEach(t),q2r=r(CV,"class method or the "),Jue=n(CV,"CODE",{});var $ft=s(Jue);G2r=r($ft,"from_config()"),$ft.forEach(t),O2r=r(CV,`class
method.`),CV.forEach(t),X2r=i(si),k6=n(si,"P",{});var rke=s(k6);z2r=r(rke,"This class cannot be instantiated directly using "),Yue=n(rke,"CODE",{});var Ift=s(Yue);V2r=r(Ift,"__init__()"),Ift.forEach(t),W2r=r(rke," (throws an error)."),rke.forEach(t),Q2r=i(si),Ft=n(si,"DIV",{class:!0});var li=s(Ft);m(R6.$$.fragment,li),H2r=i(li),Kue=n(li,"P",{});var jft=s(Kue);U2r=r(jft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jft.forEach(t),J2r=i(li),Uc=n(li,"P",{});var MV=s(Uc);Y2r=r(MV,`Note:
Loading a model from its configuration file does `),Zue=n(MV,"STRONG",{});var Nft=s(Zue);K2r=r(Nft,"not"),Nft.forEach(t),Z2r=r(MV,` load the model weights. It only affects the
model\u2019s configuration. Use `),e5e=n(MV,"CODE",{});var Dft=s(e5e);e1r=r(Dft,"from_pretrained()"),Dft.forEach(t),o1r=r(MV,"to load the model weights."),MV.forEach(t),r1r=i(li),o5e=n(li,"P",{});var qft=s(o5e);t1r=r(qft,"Examples:"),qft.forEach(t),a1r=i(li),m(S6.$$.fragment,li),li.forEach(t),n1r=i(si),Lo=n(si,"DIV",{class:!0});var ya=s(Lo);m(P6.$$.fragment,ya),s1r=i(ya),r5e=n(ya,"P",{});var Gft=s(r5e);l1r=r(Gft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gft.forEach(t),i1r=i(ya),En=n(ya,"P",{});var QM=s(En);d1r=r(QM,"The model class to instantiate is selected based on the "),t5e=n(QM,"CODE",{});var Oft=s(t5e);c1r=r(Oft,"model_type"),Oft.forEach(t),f1r=r(QM,` property of the config object (either
passed as an argument or loaded from `),a5e=n(QM,"CODE",{});var Xft=s(a5e);m1r=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),g1r=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(QM,"CODE",{});var zft=s(n5e);h1r=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),p1r=r(QM,":"),QM.forEach(t),_1r=i(ya),fe=n(ya,"UL",{});var _e=s(fe);qC=n(_e,"LI",{});var oLe=s(qC);s5e=n(oLe,"STRONG",{});var Vft=s(s5e);u1r=r(Vft,"albert"),Vft.forEach(t),b1r=r(oLe," \u2014 "),DO=n(oLe,"A",{href:!0});var Wft=s(DO);v1r=r(Wft,"FlaxAlbertForPreTraining"),Wft.forEach(t),T1r=r(oLe," (ALBERT model)"),oLe.forEach(t),F1r=i(_e),GC=n(_e,"LI",{});var rLe=s(GC);l5e=n(rLe,"STRONG",{});var Qft=s(l5e);C1r=r(Qft,"bart"),Qft.forEach(t),M1r=r(rLe," \u2014 "),qO=n(rLe,"A",{href:!0});var Hft=s(qO);E1r=r(Hft,"FlaxBartForConditionalGeneration"),Hft.forEach(t),y1r=r(rLe," (BART model)"),rLe.forEach(t),w1r=i(_e),OC=n(_e,"LI",{});var tLe=s(OC);i5e=n(tLe,"STRONG",{});var Uft=s(i5e);A1r=r(Uft,"bert"),Uft.forEach(t),L1r=r(tLe," \u2014 "),GO=n(tLe,"A",{href:!0});var Jft=s(GO);B1r=r(Jft,"FlaxBertForPreTraining"),Jft.forEach(t),x1r=r(tLe," (BERT model)"),tLe.forEach(t),k1r=i(_e),XC=n(_e,"LI",{});var aLe=s(XC);d5e=n(aLe,"STRONG",{});var Yft=s(d5e);R1r=r(Yft,"big_bird"),Yft.forEach(t),S1r=r(aLe," \u2014 "),OO=n(aLe,"A",{href:!0});var Kft=s(OO);P1r=r(Kft,"FlaxBigBirdForPreTraining"),Kft.forEach(t),$1r=r(aLe," (BigBird model)"),aLe.forEach(t),I1r=i(_e),zC=n(_e,"LI",{});var nLe=s(zC);c5e=n(nLe,"STRONG",{});var Zft=s(c5e);j1r=r(Zft,"electra"),Zft.forEach(t),N1r=r(nLe," \u2014 "),XO=n(nLe,"A",{href:!0});var emt=s(XO);D1r=r(emt,"FlaxElectraForPreTraining"),emt.forEach(t),q1r=r(nLe," (ELECTRA model)"),nLe.forEach(t),G1r=i(_e),VC=n(_e,"LI",{});var sLe=s(VC);f5e=n(sLe,"STRONG",{});var omt=s(f5e);O1r=r(omt,"mbart"),omt.forEach(t),X1r=r(sLe," \u2014 "),zO=n(sLe,"A",{href:!0});var rmt=s(zO);z1r=r(rmt,"FlaxMBartForConditionalGeneration"),rmt.forEach(t),V1r=r(sLe," (mBART model)"),sLe.forEach(t),W1r=i(_e),WC=n(_e,"LI",{});var lLe=s(WC);m5e=n(lLe,"STRONG",{});var tmt=s(m5e);Q1r=r(tmt,"mt5"),tmt.forEach(t),H1r=r(lLe," \u2014 "),VO=n(lLe,"A",{href:!0});var amt=s(VO);U1r=r(amt,"FlaxMT5ForConditionalGeneration"),amt.forEach(t),J1r=r(lLe," (mT5 model)"),lLe.forEach(t),Y1r=i(_e),QC=n(_e,"LI",{});var iLe=s(QC);g5e=n(iLe,"STRONG",{});var nmt=s(g5e);K1r=r(nmt,"roberta"),nmt.forEach(t),Z1r=r(iLe," \u2014 "),WO=n(iLe,"A",{href:!0});var smt=s(WO);ebr=r(smt,"FlaxRobertaForMaskedLM"),smt.forEach(t),obr=r(iLe," (RoBERTa model)"),iLe.forEach(t),rbr=i(_e),HC=n(_e,"LI",{});var dLe=s(HC);h5e=n(dLe,"STRONG",{});var lmt=s(h5e);tbr=r(lmt,"roformer"),lmt.forEach(t),abr=r(dLe," \u2014 "),QO=n(dLe,"A",{href:!0});var imt=s(QO);nbr=r(imt,"FlaxRoFormerForMaskedLM"),imt.forEach(t),sbr=r(dLe," (RoFormer model)"),dLe.forEach(t),lbr=i(_e),UC=n(_e,"LI",{});var cLe=s(UC);p5e=n(cLe,"STRONG",{});var dmt=s(p5e);ibr=r(dmt,"t5"),dmt.forEach(t),dbr=r(cLe," \u2014 "),HO=n(cLe,"A",{href:!0});var cmt=s(HO);cbr=r(cmt,"FlaxT5ForConditionalGeneration"),cmt.forEach(t),fbr=r(cLe," (T5 model)"),cLe.forEach(t),mbr=i(_e),JC=n(_e,"LI",{});var fLe=s(JC);_5e=n(fLe,"STRONG",{});var fmt=s(_5e);gbr=r(fmt,"wav2vec2"),fmt.forEach(t),hbr=r(fLe," \u2014 "),UO=n(fLe,"A",{href:!0});var mmt=s(UO);pbr=r(mmt,"FlaxWav2Vec2ForPreTraining"),mmt.forEach(t),_br=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),_e.forEach(t),ubr=i(ya),u5e=n(ya,"P",{});var gmt=s(u5e);bbr=r(gmt,"Examples:"),gmt.forEach(t),vbr=i(ya),m($6.$$.fragment,ya),ya.forEach(t),si.forEach(t),Q8e=i(d),Jc=n(d,"H2",{class:!0});var tke=s(Jc);YC=n(tke,"A",{id:!0,class:!0,href:!0});var hmt=s(YC);b5e=n(hmt,"SPAN",{});var pmt=s(b5e);m(I6.$$.fragment,pmt),pmt.forEach(t),hmt.forEach(t),Tbr=i(tke),v5e=n(tke,"SPAN",{});var _mt=s(v5e);Fbr=r(_mt,"FlaxAutoModelForMaskedLM"),_mt.forEach(t),tke.forEach(t),H8e=i(d),Br=n(d,"DIV",{class:!0});var ii=s(Br);m(j6.$$.fragment,ii),Cbr=i(ii),Yc=n(ii,"P",{});var EV=s(Yc);Mbr=r(EV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),T5e=n(EV,"CODE",{});var umt=s(T5e);Ebr=r(umt,"from_pretrained()"),umt.forEach(t),ybr=r(EV,"class method or the "),F5e=n(EV,"CODE",{});var bmt=s(F5e);wbr=r(bmt,"from_config()"),bmt.forEach(t),Abr=r(EV,`class
method.`),EV.forEach(t),Lbr=i(ii),N6=n(ii,"P",{});var ake=s(N6);Bbr=r(ake,"This class cannot be instantiated directly using "),C5e=n(ake,"CODE",{});var vmt=s(C5e);xbr=r(vmt,"__init__()"),vmt.forEach(t),kbr=r(ake," (throws an error)."),ake.forEach(t),Rbr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(D6.$$.fragment,di),Sbr=i(di),M5e=n(di,"P",{});var Tmt=s(M5e);Pbr=r(Tmt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tmt.forEach(t),$br=i(di),Kc=n(di,"P",{});var yV=s(Kc);Ibr=r(yV,`Note:
Loading a model from its configuration file does `),E5e=n(yV,"STRONG",{});var Fmt=s(E5e);jbr=r(Fmt,"not"),Fmt.forEach(t),Nbr=r(yV,` load the model weights. It only affects the
model\u2019s configuration. Use `),y5e=n(yV,"CODE",{});var Cmt=s(y5e);Dbr=r(Cmt,"from_pretrained()"),Cmt.forEach(t),qbr=r(yV,"to load the model weights."),yV.forEach(t),Gbr=i(di),w5e=n(di,"P",{});var Mmt=s(w5e);Obr=r(Mmt,"Examples:"),Mmt.forEach(t),Xbr=i(di),m(q6.$$.fragment,di),di.forEach(t),zbr=i(ii),Bo=n(ii,"DIV",{class:!0});var wa=s(Bo);m(G6.$$.fragment,wa),Vbr=i(wa),A5e=n(wa,"P",{});var Emt=s(A5e);Wbr=r(Emt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Emt.forEach(t),Qbr=i(wa),yn=n(wa,"P",{});var HM=s(yn);Hbr=r(HM,"The model class to instantiate is selected based on the "),L5e=n(HM,"CODE",{});var ymt=s(L5e);Ubr=r(ymt,"model_type"),ymt.forEach(t),Jbr=r(HM,` property of the config object (either
passed as an argument or loaded from `),B5e=n(HM,"CODE",{});var wmt=s(B5e);Ybr=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),Kbr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(HM,"CODE",{});var Amt=s(x5e);Zbr=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),evr=r(HM,":"),HM.forEach(t),ovr=i(wa),ve=n(wa,"UL",{});var Ze=s(ve);KC=n(Ze,"LI",{});var mLe=s(KC);k5e=n(mLe,"STRONG",{});var Lmt=s(k5e);rvr=r(Lmt,"albert"),Lmt.forEach(t),tvr=r(mLe," \u2014 "),JO=n(mLe,"A",{href:!0});var Bmt=s(JO);avr=r(Bmt,"FlaxAlbertForMaskedLM"),Bmt.forEach(t),nvr=r(mLe," (ALBERT model)"),mLe.forEach(t),svr=i(Ze),ZC=n(Ze,"LI",{});var gLe=s(ZC);R5e=n(gLe,"STRONG",{});var xmt=s(R5e);lvr=r(xmt,"bart"),xmt.forEach(t),ivr=r(gLe," \u2014 "),YO=n(gLe,"A",{href:!0});var kmt=s(YO);dvr=r(kmt,"FlaxBartForConditionalGeneration"),kmt.forEach(t),cvr=r(gLe," (BART model)"),gLe.forEach(t),fvr=i(Ze),e4=n(Ze,"LI",{});var hLe=s(e4);S5e=n(hLe,"STRONG",{});var Rmt=s(S5e);mvr=r(Rmt,"bert"),Rmt.forEach(t),gvr=r(hLe," \u2014 "),KO=n(hLe,"A",{href:!0});var Smt=s(KO);hvr=r(Smt,"FlaxBertForMaskedLM"),Smt.forEach(t),pvr=r(hLe," (BERT model)"),hLe.forEach(t),_vr=i(Ze),o4=n(Ze,"LI",{});var pLe=s(o4);P5e=n(pLe,"STRONG",{});var Pmt=s(P5e);uvr=r(Pmt,"big_bird"),Pmt.forEach(t),bvr=r(pLe," \u2014 "),ZO=n(pLe,"A",{href:!0});var $mt=s(ZO);vvr=r($mt,"FlaxBigBirdForMaskedLM"),$mt.forEach(t),Tvr=r(pLe," (BigBird model)"),pLe.forEach(t),Fvr=i(Ze),r4=n(Ze,"LI",{});var _Le=s(r4);$5e=n(_Le,"STRONG",{});var Imt=s($5e);Cvr=r(Imt,"distilbert"),Imt.forEach(t),Mvr=r(_Le," \u2014 "),eX=n(_Le,"A",{href:!0});var jmt=s(eX);Evr=r(jmt,"FlaxDistilBertForMaskedLM"),jmt.forEach(t),yvr=r(_Le," (DistilBERT model)"),_Le.forEach(t),wvr=i(Ze),t4=n(Ze,"LI",{});var uLe=s(t4);I5e=n(uLe,"STRONG",{});var Nmt=s(I5e);Avr=r(Nmt,"electra"),Nmt.forEach(t),Lvr=r(uLe," \u2014 "),oX=n(uLe,"A",{href:!0});var Dmt=s(oX);Bvr=r(Dmt,"FlaxElectraForMaskedLM"),Dmt.forEach(t),xvr=r(uLe," (ELECTRA model)"),uLe.forEach(t),kvr=i(Ze),a4=n(Ze,"LI",{});var bLe=s(a4);j5e=n(bLe,"STRONG",{});var qmt=s(j5e);Rvr=r(qmt,"mbart"),qmt.forEach(t),Svr=r(bLe," \u2014 "),rX=n(bLe,"A",{href:!0});var Gmt=s(rX);Pvr=r(Gmt,"FlaxMBartForConditionalGeneration"),Gmt.forEach(t),$vr=r(bLe," (mBART model)"),bLe.forEach(t),Ivr=i(Ze),n4=n(Ze,"LI",{});var vLe=s(n4);N5e=n(vLe,"STRONG",{});var Omt=s(N5e);jvr=r(Omt,"roberta"),Omt.forEach(t),Nvr=r(vLe," \u2014 "),tX=n(vLe,"A",{href:!0});var Xmt=s(tX);Dvr=r(Xmt,"FlaxRobertaForMaskedLM"),Xmt.forEach(t),qvr=r(vLe," (RoBERTa model)"),vLe.forEach(t),Gvr=i(Ze),s4=n(Ze,"LI",{});var TLe=s(s4);D5e=n(TLe,"STRONG",{});var zmt=s(D5e);Ovr=r(zmt,"roformer"),zmt.forEach(t),Xvr=r(TLe," \u2014 "),aX=n(TLe,"A",{href:!0});var Vmt=s(aX);zvr=r(Vmt,"FlaxRoFormerForMaskedLM"),Vmt.forEach(t),Vvr=r(TLe," (RoFormer model)"),TLe.forEach(t),Ze.forEach(t),Wvr=i(wa),q5e=n(wa,"P",{});var Wmt=s(q5e);Qvr=r(Wmt,"Examples:"),Wmt.forEach(t),Hvr=i(wa),m(O6.$$.fragment,wa),wa.forEach(t),ii.forEach(t),U8e=i(d),Zc=n(d,"H2",{class:!0});var nke=s(Zc);l4=n(nke,"A",{id:!0,class:!0,href:!0});var Qmt=s(l4);G5e=n(Qmt,"SPAN",{});var Hmt=s(G5e);m(X6.$$.fragment,Hmt),Hmt.forEach(t),Qmt.forEach(t),Uvr=i(nke),O5e=n(nke,"SPAN",{});var Umt=s(O5e);Jvr=r(Umt,"FlaxAutoModelForSeq2SeqLM"),Umt.forEach(t),nke.forEach(t),J8e=i(d),xr=n(d,"DIV",{class:!0});var ci=s(xr);m(z6.$$.fragment,ci),Yvr=i(ci),ef=n(ci,"P",{});var wV=s(ef);Kvr=r(wV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),X5e=n(wV,"CODE",{});var Jmt=s(X5e);Zvr=r(Jmt,"from_pretrained()"),Jmt.forEach(t),eTr=r(wV,"class method or the "),z5e=n(wV,"CODE",{});var Ymt=s(z5e);oTr=r(Ymt,"from_config()"),Ymt.forEach(t),rTr=r(wV,`class
method.`),wV.forEach(t),tTr=i(ci),V6=n(ci,"P",{});var ske=s(V6);aTr=r(ske,"This class cannot be instantiated directly using "),V5e=n(ske,"CODE",{});var Kmt=s(V5e);nTr=r(Kmt,"__init__()"),Kmt.forEach(t),sTr=r(ske," (throws an error)."),ske.forEach(t),lTr=i(ci),Mt=n(ci,"DIV",{class:!0});var fi=s(Mt);m(W6.$$.fragment,fi),iTr=i(fi),W5e=n(fi,"P",{});var Zmt=s(W5e);dTr=r(Zmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zmt.forEach(t),cTr=i(fi),of=n(fi,"P",{});var AV=s(of);fTr=r(AV,`Note:
Loading a model from its configuration file does `),Q5e=n(AV,"STRONG",{});var egt=s(Q5e);mTr=r(egt,"not"),egt.forEach(t),gTr=r(AV,` load the model weights. It only affects the
model\u2019s configuration. Use `),H5e=n(AV,"CODE",{});var ogt=s(H5e);hTr=r(ogt,"from_pretrained()"),ogt.forEach(t),pTr=r(AV,"to load the model weights."),AV.forEach(t),_Tr=i(fi),U5e=n(fi,"P",{});var rgt=s(U5e);uTr=r(rgt,"Examples:"),rgt.forEach(t),bTr=i(fi),m(Q6.$$.fragment,fi),fi.forEach(t),vTr=i(ci),xo=n(ci,"DIV",{class:!0});var Aa=s(xo);m(H6.$$.fragment,Aa),TTr=i(Aa),J5e=n(Aa,"P",{});var tgt=s(J5e);FTr=r(tgt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tgt.forEach(t),CTr=i(Aa),wn=n(Aa,"P",{});var UM=s(wn);MTr=r(UM,"The model class to instantiate is selected based on the "),Y5e=n(UM,"CODE",{});var agt=s(Y5e);ETr=r(agt,"model_type"),agt.forEach(t),yTr=r(UM,` property of the config object (either
passed as an argument or loaded from `),K5e=n(UM,"CODE",{});var ngt=s(K5e);wTr=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),ATr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(UM,"CODE",{});var sgt=s(Z5e);LTr=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),BTr=r(UM,":"),UM.forEach(t),xTr=i(Aa),Te=n(Aa,"UL",{});var eo=s(Te);i4=n(eo,"LI",{});var FLe=s(i4);e2e=n(FLe,"STRONG",{});var lgt=s(e2e);kTr=r(lgt,"bart"),lgt.forEach(t),RTr=r(FLe," \u2014 "),nX=n(FLe,"A",{href:!0});var igt=s(nX);STr=r(igt,"FlaxBartForConditionalGeneration"),igt.forEach(t),PTr=r(FLe," (BART model)"),FLe.forEach(t),$Tr=i(eo),d4=n(eo,"LI",{});var CLe=s(d4);o2e=n(CLe,"STRONG",{});var dgt=s(o2e);ITr=r(dgt,"blenderbot"),dgt.forEach(t),jTr=r(CLe," \u2014 "),sX=n(CLe,"A",{href:!0});var cgt=s(sX);NTr=r(cgt,"FlaxBlenderbotForConditionalGeneration"),cgt.forEach(t),DTr=r(CLe," (Blenderbot model)"),CLe.forEach(t),qTr=i(eo),c4=n(eo,"LI",{});var MLe=s(c4);r2e=n(MLe,"STRONG",{});var fgt=s(r2e);GTr=r(fgt,"blenderbot-small"),fgt.forEach(t),OTr=r(MLe," \u2014 "),lX=n(MLe,"A",{href:!0});var mgt=s(lX);XTr=r(mgt,"FlaxBlenderbotSmallForConditionalGeneration"),mgt.forEach(t),zTr=r(MLe," (BlenderbotSmall model)"),MLe.forEach(t),VTr=i(eo),f4=n(eo,"LI",{});var ELe=s(f4);t2e=n(ELe,"STRONG",{});var ggt=s(t2e);WTr=r(ggt,"encoder-decoder"),ggt.forEach(t),QTr=r(ELe," \u2014 "),iX=n(ELe,"A",{href:!0});var hgt=s(iX);HTr=r(hgt,"FlaxEncoderDecoderModel"),hgt.forEach(t),UTr=r(ELe," (Encoder decoder model)"),ELe.forEach(t),JTr=i(eo),m4=n(eo,"LI",{});var yLe=s(m4);a2e=n(yLe,"STRONG",{});var pgt=s(a2e);YTr=r(pgt,"marian"),pgt.forEach(t),KTr=r(yLe," \u2014 "),dX=n(yLe,"A",{href:!0});var _gt=s(dX);ZTr=r(_gt,"FlaxMarianMTModel"),_gt.forEach(t),eFr=r(yLe," (Marian model)"),yLe.forEach(t),oFr=i(eo),g4=n(eo,"LI",{});var wLe=s(g4);n2e=n(wLe,"STRONG",{});var ugt=s(n2e);rFr=r(ugt,"mbart"),ugt.forEach(t),tFr=r(wLe," \u2014 "),cX=n(wLe,"A",{href:!0});var bgt=s(cX);aFr=r(bgt,"FlaxMBartForConditionalGeneration"),bgt.forEach(t),nFr=r(wLe," (mBART model)"),wLe.forEach(t),sFr=i(eo),h4=n(eo,"LI",{});var ALe=s(h4);s2e=n(ALe,"STRONG",{});var vgt=s(s2e);lFr=r(vgt,"mt5"),vgt.forEach(t),iFr=r(ALe," \u2014 "),fX=n(ALe,"A",{href:!0});var Tgt=s(fX);dFr=r(Tgt,"FlaxMT5ForConditionalGeneration"),Tgt.forEach(t),cFr=r(ALe," (mT5 model)"),ALe.forEach(t),fFr=i(eo),p4=n(eo,"LI",{});var LLe=s(p4);l2e=n(LLe,"STRONG",{});var Fgt=s(l2e);mFr=r(Fgt,"pegasus"),Fgt.forEach(t),gFr=r(LLe," \u2014 "),mX=n(LLe,"A",{href:!0});var Cgt=s(mX);hFr=r(Cgt,"FlaxPegasusForConditionalGeneration"),Cgt.forEach(t),pFr=r(LLe," (Pegasus model)"),LLe.forEach(t),_Fr=i(eo),_4=n(eo,"LI",{});var BLe=s(_4);i2e=n(BLe,"STRONG",{});var Mgt=s(i2e);uFr=r(Mgt,"t5"),Mgt.forEach(t),bFr=r(BLe," \u2014 "),gX=n(BLe,"A",{href:!0});var Egt=s(gX);vFr=r(Egt,"FlaxT5ForConditionalGeneration"),Egt.forEach(t),TFr=r(BLe," (T5 model)"),BLe.forEach(t),eo.forEach(t),FFr=i(Aa),d2e=n(Aa,"P",{});var ygt=s(d2e);CFr=r(ygt,"Examples:"),ygt.forEach(t),MFr=i(Aa),m(U6.$$.fragment,Aa),Aa.forEach(t),ci.forEach(t),Y8e=i(d),rf=n(d,"H2",{class:!0});var lke=s(rf);u4=n(lke,"A",{id:!0,class:!0,href:!0});var wgt=s(u4);c2e=n(wgt,"SPAN",{});var Agt=s(c2e);m(J6.$$.fragment,Agt),Agt.forEach(t),wgt.forEach(t),EFr=i(lke),f2e=n(lke,"SPAN",{});var Lgt=s(f2e);yFr=r(Lgt,"FlaxAutoModelForSequenceClassification"),Lgt.forEach(t),lke.forEach(t),K8e=i(d),kr=n(d,"DIV",{class:!0});var mi=s(kr);m(Y6.$$.fragment,mi),wFr=i(mi),tf=n(mi,"P",{});var LV=s(tf);AFr=r(LV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),m2e=n(LV,"CODE",{});var Bgt=s(m2e);LFr=r(Bgt,"from_pretrained()"),Bgt.forEach(t),BFr=r(LV,"class method or the "),g2e=n(LV,"CODE",{});var xgt=s(g2e);xFr=r(xgt,"from_config()"),xgt.forEach(t),kFr=r(LV,`class
method.`),LV.forEach(t),RFr=i(mi),K6=n(mi,"P",{});var ike=s(K6);SFr=r(ike,"This class cannot be instantiated directly using "),h2e=n(ike,"CODE",{});var kgt=s(h2e);PFr=r(kgt,"__init__()"),kgt.forEach(t),$Fr=r(ike," (throws an error)."),ike.forEach(t),IFr=i(mi),Et=n(mi,"DIV",{class:!0});var gi=s(Et);m(Z6.$$.fragment,gi),jFr=i(gi),p2e=n(gi,"P",{});var Rgt=s(p2e);NFr=r(Rgt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rgt.forEach(t),DFr=i(gi),af=n(gi,"P",{});var BV=s(af);qFr=r(BV,`Note:
Loading a model from its configuration file does `),_2e=n(BV,"STRONG",{});var Sgt=s(_2e);GFr=r(Sgt,"not"),Sgt.forEach(t),OFr=r(BV,` load the model weights. It only affects the
model\u2019s configuration. Use `),u2e=n(BV,"CODE",{});var Pgt=s(u2e);XFr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),zFr=r(BV,"to load the model weights."),BV.forEach(t),VFr=i(gi),b2e=n(gi,"P",{});var $gt=s(b2e);WFr=r($gt,"Examples:"),$gt.forEach(t),QFr=i(gi),m(e0.$$.fragment,gi),gi.forEach(t),HFr=i(mi),ko=n(mi,"DIV",{class:!0});var La=s(ko);m(o0.$$.fragment,La),UFr=i(La),v2e=n(La,"P",{});var Igt=s(v2e);JFr=r(Igt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Igt.forEach(t),YFr=i(La),An=n(La,"P",{});var JM=s(An);KFr=r(JM,"The model class to instantiate is selected based on the "),T2e=n(JM,"CODE",{});var jgt=s(T2e);ZFr=r(jgt,"model_type"),jgt.forEach(t),e9r=r(JM,` property of the config object (either
passed as an argument or loaded from `),F2e=n(JM,"CODE",{});var Ngt=s(F2e);o9r=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),r9r=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(JM,"CODE",{});var Dgt=s(C2e);t9r=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),a9r=r(JM,":"),JM.forEach(t),n9r=i(La),Fe=n(La,"UL",{});var oo=s(Fe);b4=n(oo,"LI",{});var xLe=s(b4);M2e=n(xLe,"STRONG",{});var qgt=s(M2e);s9r=r(qgt,"albert"),qgt.forEach(t),l9r=r(xLe," \u2014 "),hX=n(xLe,"A",{href:!0});var Ggt=s(hX);i9r=r(Ggt,"FlaxAlbertForSequenceClassification"),Ggt.forEach(t),d9r=r(xLe," (ALBERT model)"),xLe.forEach(t),c9r=i(oo),v4=n(oo,"LI",{});var kLe=s(v4);E2e=n(kLe,"STRONG",{});var Ogt=s(E2e);f9r=r(Ogt,"bart"),Ogt.forEach(t),m9r=r(kLe," \u2014 "),pX=n(kLe,"A",{href:!0});var Xgt=s(pX);g9r=r(Xgt,"FlaxBartForSequenceClassification"),Xgt.forEach(t),h9r=r(kLe," (BART model)"),kLe.forEach(t),p9r=i(oo),T4=n(oo,"LI",{});var RLe=s(T4);y2e=n(RLe,"STRONG",{});var zgt=s(y2e);_9r=r(zgt,"bert"),zgt.forEach(t),u9r=r(RLe," \u2014 "),_X=n(RLe,"A",{href:!0});var Vgt=s(_X);b9r=r(Vgt,"FlaxBertForSequenceClassification"),Vgt.forEach(t),v9r=r(RLe," (BERT model)"),RLe.forEach(t),T9r=i(oo),F4=n(oo,"LI",{});var SLe=s(F4);w2e=n(SLe,"STRONG",{});var Wgt=s(w2e);F9r=r(Wgt,"big_bird"),Wgt.forEach(t),C9r=r(SLe," \u2014 "),uX=n(SLe,"A",{href:!0});var Qgt=s(uX);M9r=r(Qgt,"FlaxBigBirdForSequenceClassification"),Qgt.forEach(t),E9r=r(SLe," (BigBird model)"),SLe.forEach(t),y9r=i(oo),C4=n(oo,"LI",{});var PLe=s(C4);A2e=n(PLe,"STRONG",{});var Hgt=s(A2e);w9r=r(Hgt,"distilbert"),Hgt.forEach(t),A9r=r(PLe," \u2014 "),bX=n(PLe,"A",{href:!0});var Ugt=s(bX);L9r=r(Ugt,"FlaxDistilBertForSequenceClassification"),Ugt.forEach(t),B9r=r(PLe," (DistilBERT model)"),PLe.forEach(t),x9r=i(oo),M4=n(oo,"LI",{});var $Le=s(M4);L2e=n($Le,"STRONG",{});var Jgt=s(L2e);k9r=r(Jgt,"electra"),Jgt.forEach(t),R9r=r($Le," \u2014 "),vX=n($Le,"A",{href:!0});var Ygt=s(vX);S9r=r(Ygt,"FlaxElectraForSequenceClassification"),Ygt.forEach(t),P9r=r($Le," (ELECTRA model)"),$Le.forEach(t),$9r=i(oo),E4=n(oo,"LI",{});var ILe=s(E4);B2e=n(ILe,"STRONG",{});var Kgt=s(B2e);I9r=r(Kgt,"mbart"),Kgt.forEach(t),j9r=r(ILe," \u2014 "),TX=n(ILe,"A",{href:!0});var Zgt=s(TX);N9r=r(Zgt,"FlaxMBartForSequenceClassification"),Zgt.forEach(t),D9r=r(ILe," (mBART model)"),ILe.forEach(t),q9r=i(oo),y4=n(oo,"LI",{});var jLe=s(y4);x2e=n(jLe,"STRONG",{});var eht=s(x2e);G9r=r(eht,"roberta"),eht.forEach(t),O9r=r(jLe," \u2014 "),FX=n(jLe,"A",{href:!0});var oht=s(FX);X9r=r(oht,"FlaxRobertaForSequenceClassification"),oht.forEach(t),z9r=r(jLe," (RoBERTa model)"),jLe.forEach(t),V9r=i(oo),w4=n(oo,"LI",{});var NLe=s(w4);k2e=n(NLe,"STRONG",{});var rht=s(k2e);W9r=r(rht,"roformer"),rht.forEach(t),Q9r=r(NLe," \u2014 "),CX=n(NLe,"A",{href:!0});var tht=s(CX);H9r=r(tht,"FlaxRoFormerForSequenceClassification"),tht.forEach(t),U9r=r(NLe," (RoFormer model)"),NLe.forEach(t),oo.forEach(t),J9r=i(La),R2e=n(La,"P",{});var aht=s(R2e);Y9r=r(aht,"Examples:"),aht.forEach(t),K9r=i(La),m(r0.$$.fragment,La),La.forEach(t),mi.forEach(t),Z8e=i(d),nf=n(d,"H2",{class:!0});var dke=s(nf);A4=n(dke,"A",{id:!0,class:!0,href:!0});var nht=s(A4);S2e=n(nht,"SPAN",{});var sht=s(S2e);m(t0.$$.fragment,sht),sht.forEach(t),nht.forEach(t),Z9r=i(dke),P2e=n(dke,"SPAN",{});var lht=s(P2e);eCr=r(lht,"FlaxAutoModelForQuestionAnswering"),lht.forEach(t),dke.forEach(t),eBe=i(d),Rr=n(d,"DIV",{class:!0});var hi=s(Rr);m(a0.$$.fragment,hi),oCr=i(hi),sf=n(hi,"P",{});var xV=s(sf);rCr=r(xV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$2e=n(xV,"CODE",{});var iht=s($2e);tCr=r(iht,"from_pretrained()"),iht.forEach(t),aCr=r(xV,"class method or the "),I2e=n(xV,"CODE",{});var dht=s(I2e);nCr=r(dht,"from_config()"),dht.forEach(t),sCr=r(xV,`class
method.`),xV.forEach(t),lCr=i(hi),n0=n(hi,"P",{});var cke=s(n0);iCr=r(cke,"This class cannot be instantiated directly using "),j2e=n(cke,"CODE",{});var cht=s(j2e);dCr=r(cht,"__init__()"),cht.forEach(t),cCr=r(cke," (throws an error)."),cke.forEach(t),fCr=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(s0.$$.fragment,pi),mCr=i(pi),N2e=n(pi,"P",{});var fht=s(N2e);gCr=r(fht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fht.forEach(t),hCr=i(pi),lf=n(pi,"P",{});var kV=s(lf);pCr=r(kV,`Note:
Loading a model from its configuration file does `),D2e=n(kV,"STRONG",{});var mht=s(D2e);_Cr=r(mht,"not"),mht.forEach(t),uCr=r(kV,` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=n(kV,"CODE",{});var ght=s(q2e);bCr=r(ght,"from_pretrained()"),ght.forEach(t),vCr=r(kV,"to load the model weights."),kV.forEach(t),TCr=i(pi),G2e=n(pi,"P",{});var hht=s(G2e);FCr=r(hht,"Examples:"),hht.forEach(t),CCr=i(pi),m(l0.$$.fragment,pi),pi.forEach(t),MCr=i(hi),Ro=n(hi,"DIV",{class:!0});var Ba=s(Ro);m(i0.$$.fragment,Ba),ECr=i(Ba),O2e=n(Ba,"P",{});var pht=s(O2e);yCr=r(pht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pht.forEach(t),wCr=i(Ba),Ln=n(Ba,"P",{});var YM=s(Ln);ACr=r(YM,"The model class to instantiate is selected based on the "),X2e=n(YM,"CODE",{});var _ht=s(X2e);LCr=r(_ht,"model_type"),_ht.forEach(t),BCr=r(YM,` property of the config object (either
passed as an argument or loaded from `),z2e=n(YM,"CODE",{});var uht=s(z2e);xCr=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),kCr=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(YM,"CODE",{});var bht=s(V2e);RCr=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),SCr=r(YM,":"),YM.forEach(t),PCr=i(Ba),Ce=n(Ba,"UL",{});var ro=s(Ce);L4=n(ro,"LI",{});var DLe=s(L4);W2e=n(DLe,"STRONG",{});var vht=s(W2e);$Cr=r(vht,"albert"),vht.forEach(t),ICr=r(DLe," \u2014 "),MX=n(DLe,"A",{href:!0});var Tht=s(MX);jCr=r(Tht,"FlaxAlbertForQuestionAnswering"),Tht.forEach(t),NCr=r(DLe," (ALBERT model)"),DLe.forEach(t),DCr=i(ro),B4=n(ro,"LI",{});var qLe=s(B4);Q2e=n(qLe,"STRONG",{});var Fht=s(Q2e);qCr=r(Fht,"bart"),Fht.forEach(t),GCr=r(qLe," \u2014 "),EX=n(qLe,"A",{href:!0});var Cht=s(EX);OCr=r(Cht,"FlaxBartForQuestionAnswering"),Cht.forEach(t),XCr=r(qLe," (BART model)"),qLe.forEach(t),zCr=i(ro),x4=n(ro,"LI",{});var GLe=s(x4);H2e=n(GLe,"STRONG",{});var Mht=s(H2e);VCr=r(Mht,"bert"),Mht.forEach(t),WCr=r(GLe," \u2014 "),yX=n(GLe,"A",{href:!0});var Eht=s(yX);QCr=r(Eht,"FlaxBertForQuestionAnswering"),Eht.forEach(t),HCr=r(GLe," (BERT model)"),GLe.forEach(t),UCr=i(ro),k4=n(ro,"LI",{});var OLe=s(k4);U2e=n(OLe,"STRONG",{});var yht=s(U2e);JCr=r(yht,"big_bird"),yht.forEach(t),YCr=r(OLe," \u2014 "),wX=n(OLe,"A",{href:!0});var wht=s(wX);KCr=r(wht,"FlaxBigBirdForQuestionAnswering"),wht.forEach(t),ZCr=r(OLe," (BigBird model)"),OLe.forEach(t),e4r=i(ro),R4=n(ro,"LI",{});var XLe=s(R4);J2e=n(XLe,"STRONG",{});var Aht=s(J2e);o4r=r(Aht,"distilbert"),Aht.forEach(t),r4r=r(XLe," \u2014 "),AX=n(XLe,"A",{href:!0});var Lht=s(AX);t4r=r(Lht,"FlaxDistilBertForQuestionAnswering"),Lht.forEach(t),a4r=r(XLe," (DistilBERT model)"),XLe.forEach(t),n4r=i(ro),S4=n(ro,"LI",{});var zLe=s(S4);Y2e=n(zLe,"STRONG",{});var Bht=s(Y2e);s4r=r(Bht,"electra"),Bht.forEach(t),l4r=r(zLe," \u2014 "),LX=n(zLe,"A",{href:!0});var xht=s(LX);i4r=r(xht,"FlaxElectraForQuestionAnswering"),xht.forEach(t),d4r=r(zLe," (ELECTRA model)"),zLe.forEach(t),c4r=i(ro),P4=n(ro,"LI",{});var VLe=s(P4);K2e=n(VLe,"STRONG",{});var kht=s(K2e);f4r=r(kht,"mbart"),kht.forEach(t),m4r=r(VLe," \u2014 "),BX=n(VLe,"A",{href:!0});var Rht=s(BX);g4r=r(Rht,"FlaxMBartForQuestionAnswering"),Rht.forEach(t),h4r=r(VLe," (mBART model)"),VLe.forEach(t),p4r=i(ro),$4=n(ro,"LI",{});var WLe=s($4);Z2e=n(WLe,"STRONG",{});var Sht=s(Z2e);_4r=r(Sht,"roberta"),Sht.forEach(t),u4r=r(WLe," \u2014 "),xX=n(WLe,"A",{href:!0});var Pht=s(xX);b4r=r(Pht,"FlaxRobertaForQuestionAnswering"),Pht.forEach(t),v4r=r(WLe," (RoBERTa model)"),WLe.forEach(t),T4r=i(ro),I4=n(ro,"LI",{});var QLe=s(I4);e1e=n(QLe,"STRONG",{});var $ht=s(e1e);F4r=r($ht,"roformer"),$ht.forEach(t),C4r=r(QLe," \u2014 "),kX=n(QLe,"A",{href:!0});var Iht=s(kX);M4r=r(Iht,"FlaxRoFormerForQuestionAnswering"),Iht.forEach(t),E4r=r(QLe," (RoFormer model)"),QLe.forEach(t),ro.forEach(t),y4r=i(Ba),o1e=n(Ba,"P",{});var jht=s(o1e);w4r=r(jht,"Examples:"),jht.forEach(t),A4r=i(Ba),m(d0.$$.fragment,Ba),Ba.forEach(t),hi.forEach(t),oBe=i(d),df=n(d,"H2",{class:!0});var fke=s(df);j4=n(fke,"A",{id:!0,class:!0,href:!0});var Nht=s(j4);r1e=n(Nht,"SPAN",{});var Dht=s(r1e);m(c0.$$.fragment,Dht),Dht.forEach(t),Nht.forEach(t),L4r=i(fke),t1e=n(fke,"SPAN",{});var qht=s(t1e);B4r=r(qht,"FlaxAutoModelForTokenClassification"),qht.forEach(t),fke.forEach(t),rBe=i(d),Sr=n(d,"DIV",{class:!0});var _i=s(Sr);m(f0.$$.fragment,_i),x4r=i(_i),cf=n(_i,"P",{});var RV=s(cf);k4r=r(RV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),a1e=n(RV,"CODE",{});var Ght=s(a1e);R4r=r(Ght,"from_pretrained()"),Ght.forEach(t),S4r=r(RV,"class method or the "),n1e=n(RV,"CODE",{});var Oht=s(n1e);P4r=r(Oht,"from_config()"),Oht.forEach(t),$4r=r(RV,`class
method.`),RV.forEach(t),I4r=i(_i),m0=n(_i,"P",{});var mke=s(m0);j4r=r(mke,"This class cannot be instantiated directly using "),s1e=n(mke,"CODE",{});var Xht=s(s1e);N4r=r(Xht,"__init__()"),Xht.forEach(t),D4r=r(mke," (throws an error)."),mke.forEach(t),q4r=i(_i),wt=n(_i,"DIV",{class:!0});var ui=s(wt);m(g0.$$.fragment,ui),G4r=i(ui),l1e=n(ui,"P",{});var zht=s(l1e);O4r=r(zht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zht.forEach(t),X4r=i(ui),ff=n(ui,"P",{});var SV=s(ff);z4r=r(SV,`Note:
Loading a model from its configuration file does `),i1e=n(SV,"STRONG",{});var Vht=s(i1e);V4r=r(Vht,"not"),Vht.forEach(t),W4r=r(SV,` load the model weights. It only affects the
model\u2019s configuration. Use `),d1e=n(SV,"CODE",{});var Wht=s(d1e);Q4r=r(Wht,"from_pretrained()"),Wht.forEach(t),H4r=r(SV,"to load the model weights."),SV.forEach(t),U4r=i(ui),c1e=n(ui,"P",{});var Qht=s(c1e);J4r=r(Qht,"Examples:"),Qht.forEach(t),Y4r=i(ui),m(h0.$$.fragment,ui),ui.forEach(t),K4r=i(_i),So=n(_i,"DIV",{class:!0});var xa=s(So);m(p0.$$.fragment,xa),Z4r=i(xa),f1e=n(xa,"P",{});var Hht=s(f1e);eMr=r(Hht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hht.forEach(t),oMr=i(xa),Bn=n(xa,"P",{});var KM=s(Bn);rMr=r(KM,"The model class to instantiate is selected based on the "),m1e=n(KM,"CODE",{});var Uht=s(m1e);tMr=r(Uht,"model_type"),Uht.forEach(t),aMr=r(KM,` property of the config object (either
passed as an argument or loaded from `),g1e=n(KM,"CODE",{});var Jht=s(g1e);nMr=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),sMr=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(KM,"CODE",{});var Yht=s(h1e);lMr=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),iMr=r(KM,":"),KM.forEach(t),dMr=i(xa),so=n(xa,"UL",{});var ta=s(so);N4=n(ta,"LI",{});var HLe=s(N4);p1e=n(HLe,"STRONG",{});var Kht=s(p1e);cMr=r(Kht,"albert"),Kht.forEach(t),fMr=r(HLe," \u2014 "),RX=n(HLe,"A",{href:!0});var Zht=s(RX);mMr=r(Zht,"FlaxAlbertForTokenClassification"),Zht.forEach(t),gMr=r(HLe," (ALBERT model)"),HLe.forEach(t),hMr=i(ta),D4=n(ta,"LI",{});var ULe=s(D4);_1e=n(ULe,"STRONG",{});var ept=s(_1e);pMr=r(ept,"bert"),ept.forEach(t),_Mr=r(ULe," \u2014 "),SX=n(ULe,"A",{href:!0});var opt=s(SX);uMr=r(opt,"FlaxBertForTokenClassification"),opt.forEach(t),bMr=r(ULe," (BERT model)"),ULe.forEach(t),vMr=i(ta),q4=n(ta,"LI",{});var JLe=s(q4);u1e=n(JLe,"STRONG",{});var rpt=s(u1e);TMr=r(rpt,"big_bird"),rpt.forEach(t),FMr=r(JLe," \u2014 "),PX=n(JLe,"A",{href:!0});var tpt=s(PX);CMr=r(tpt,"FlaxBigBirdForTokenClassification"),tpt.forEach(t),MMr=r(JLe," (BigBird model)"),JLe.forEach(t),EMr=i(ta),G4=n(ta,"LI",{});var YLe=s(G4);b1e=n(YLe,"STRONG",{});var apt=s(b1e);yMr=r(apt,"distilbert"),apt.forEach(t),wMr=r(YLe," \u2014 "),$X=n(YLe,"A",{href:!0});var npt=s($X);AMr=r(npt,"FlaxDistilBertForTokenClassification"),npt.forEach(t),LMr=r(YLe," (DistilBERT model)"),YLe.forEach(t),BMr=i(ta),O4=n(ta,"LI",{});var KLe=s(O4);v1e=n(KLe,"STRONG",{});var spt=s(v1e);xMr=r(spt,"electra"),spt.forEach(t),kMr=r(KLe," \u2014 "),IX=n(KLe,"A",{href:!0});var lpt=s(IX);RMr=r(lpt,"FlaxElectraForTokenClassification"),lpt.forEach(t),SMr=r(KLe," (ELECTRA model)"),KLe.forEach(t),PMr=i(ta),X4=n(ta,"LI",{});var ZLe=s(X4);T1e=n(ZLe,"STRONG",{});var ipt=s(T1e);$Mr=r(ipt,"roberta"),ipt.forEach(t),IMr=r(ZLe," \u2014 "),jX=n(ZLe,"A",{href:!0});var dpt=s(jX);jMr=r(dpt,"FlaxRobertaForTokenClassification"),dpt.forEach(t),NMr=r(ZLe," (RoBERTa model)"),ZLe.forEach(t),DMr=i(ta),z4=n(ta,"LI",{});var e7e=s(z4);F1e=n(e7e,"STRONG",{});var cpt=s(F1e);qMr=r(cpt,"roformer"),cpt.forEach(t),GMr=r(e7e," \u2014 "),NX=n(e7e,"A",{href:!0});var fpt=s(NX);OMr=r(fpt,"FlaxRoFormerForTokenClassification"),fpt.forEach(t),XMr=r(e7e," (RoFormer model)"),e7e.forEach(t),ta.forEach(t),zMr=i(xa),C1e=n(xa,"P",{});var mpt=s(C1e);VMr=r(mpt,"Examples:"),mpt.forEach(t),WMr=i(xa),m(_0.$$.fragment,xa),xa.forEach(t),_i.forEach(t),tBe=i(d),mf=n(d,"H2",{class:!0});var gke=s(mf);V4=n(gke,"A",{id:!0,class:!0,href:!0});var gpt=s(V4);M1e=n(gpt,"SPAN",{});var hpt=s(M1e);m(u0.$$.fragment,hpt),hpt.forEach(t),gpt.forEach(t),QMr=i(gke),E1e=n(gke,"SPAN",{});var ppt=s(E1e);HMr=r(ppt,"FlaxAutoModelForMultipleChoice"),ppt.forEach(t),gke.forEach(t),aBe=i(d),Pr=n(d,"DIV",{class:!0});var bi=s(Pr);m(b0.$$.fragment,bi),UMr=i(bi),gf=n(bi,"P",{});var PV=s(gf);JMr=r(PV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),y1e=n(PV,"CODE",{});var _pt=s(y1e);YMr=r(_pt,"from_pretrained()"),_pt.forEach(t),KMr=r(PV,"class method or the "),w1e=n(PV,"CODE",{});var upt=s(w1e);ZMr=r(upt,"from_config()"),upt.forEach(t),eEr=r(PV,`class
method.`),PV.forEach(t),oEr=i(bi),v0=n(bi,"P",{});var hke=s(v0);rEr=r(hke,"This class cannot be instantiated directly using "),A1e=n(hke,"CODE",{});var bpt=s(A1e);tEr=r(bpt,"__init__()"),bpt.forEach(t),aEr=r(hke," (throws an error)."),hke.forEach(t),nEr=i(bi),At=n(bi,"DIV",{class:!0});var vi=s(At);m(T0.$$.fragment,vi),sEr=i(vi),L1e=n(vi,"P",{});var vpt=s(L1e);lEr=r(vpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vpt.forEach(t),iEr=i(vi),hf=n(vi,"P",{});var $V=s(hf);dEr=r($V,`Note:
Loading a model from its configuration file does `),B1e=n($V,"STRONG",{});var Tpt=s(B1e);cEr=r(Tpt,"not"),Tpt.forEach(t),fEr=r($V,` load the model weights. It only affects the
model\u2019s configuration. Use `),x1e=n($V,"CODE",{});var Fpt=s(x1e);mEr=r(Fpt,"from_pretrained()"),Fpt.forEach(t),gEr=r($V,"to load the model weights."),$V.forEach(t),hEr=i(vi),k1e=n(vi,"P",{});var Cpt=s(k1e);pEr=r(Cpt,"Examples:"),Cpt.forEach(t),_Er=i(vi),m(F0.$$.fragment,vi),vi.forEach(t),uEr=i(bi),Po=n(bi,"DIV",{class:!0});var ka=s(Po);m(C0.$$.fragment,ka),bEr=i(ka),R1e=n(ka,"P",{});var Mpt=s(R1e);vEr=r(Mpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mpt.forEach(t),TEr=i(ka),xn=n(ka,"P",{});var ZM=s(xn);FEr=r(ZM,"The model class to instantiate is selected based on the "),S1e=n(ZM,"CODE",{});var Ept=s(S1e);CEr=r(Ept,"model_type"),Ept.forEach(t),MEr=r(ZM,` property of the config object (either
passed as an argument or loaded from `),P1e=n(ZM,"CODE",{});var ypt=s(P1e);EEr=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),yEr=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(ZM,"CODE",{});var wpt=s($1e);wEr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),AEr=r(ZM,":"),ZM.forEach(t),LEr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);W4=n(aa,"LI",{});var o7e=s(W4);I1e=n(o7e,"STRONG",{});var Apt=s(I1e);BEr=r(Apt,"albert"),Apt.forEach(t),xEr=r(o7e," \u2014 "),DX=n(o7e,"A",{href:!0});var Lpt=s(DX);kEr=r(Lpt,"FlaxAlbertForMultipleChoice"),Lpt.forEach(t),REr=r(o7e," (ALBERT model)"),o7e.forEach(t),SEr=i(aa),Q4=n(aa,"LI",{});var r7e=s(Q4);j1e=n(r7e,"STRONG",{});var Bpt=s(j1e);PEr=r(Bpt,"bert"),Bpt.forEach(t),$Er=r(r7e," \u2014 "),qX=n(r7e,"A",{href:!0});var xpt=s(qX);IEr=r(xpt,"FlaxBertForMultipleChoice"),xpt.forEach(t),jEr=r(r7e," (BERT model)"),r7e.forEach(t),NEr=i(aa),H4=n(aa,"LI",{});var t7e=s(H4);N1e=n(t7e,"STRONG",{});var kpt=s(N1e);DEr=r(kpt,"big_bird"),kpt.forEach(t),qEr=r(t7e," \u2014 "),GX=n(t7e,"A",{href:!0});var Rpt=s(GX);GEr=r(Rpt,"FlaxBigBirdForMultipleChoice"),Rpt.forEach(t),OEr=r(t7e," (BigBird model)"),t7e.forEach(t),XEr=i(aa),U4=n(aa,"LI",{});var a7e=s(U4);D1e=n(a7e,"STRONG",{});var Spt=s(D1e);zEr=r(Spt,"distilbert"),Spt.forEach(t),VEr=r(a7e," \u2014 "),OX=n(a7e,"A",{href:!0});var Ppt=s(OX);WEr=r(Ppt,"FlaxDistilBertForMultipleChoice"),Ppt.forEach(t),QEr=r(a7e," (DistilBERT model)"),a7e.forEach(t),HEr=i(aa),J4=n(aa,"LI",{});var n7e=s(J4);q1e=n(n7e,"STRONG",{});var $pt=s(q1e);UEr=r($pt,"electra"),$pt.forEach(t),JEr=r(n7e," \u2014 "),XX=n(n7e,"A",{href:!0});var Ipt=s(XX);YEr=r(Ipt,"FlaxElectraForMultipleChoice"),Ipt.forEach(t),KEr=r(n7e," (ELECTRA model)"),n7e.forEach(t),ZEr=i(aa),Y4=n(aa,"LI",{});var s7e=s(Y4);G1e=n(s7e,"STRONG",{});var jpt=s(G1e);e3r=r(jpt,"roberta"),jpt.forEach(t),o3r=r(s7e," \u2014 "),zX=n(s7e,"A",{href:!0});var Npt=s(zX);r3r=r(Npt,"FlaxRobertaForMultipleChoice"),Npt.forEach(t),t3r=r(s7e," (RoBERTa model)"),s7e.forEach(t),a3r=i(aa),K4=n(aa,"LI",{});var l7e=s(K4);O1e=n(l7e,"STRONG",{});var Dpt=s(O1e);n3r=r(Dpt,"roformer"),Dpt.forEach(t),s3r=r(l7e," \u2014 "),VX=n(l7e,"A",{href:!0});var qpt=s(VX);l3r=r(qpt,"FlaxRoFormerForMultipleChoice"),qpt.forEach(t),i3r=r(l7e," (RoFormer model)"),l7e.forEach(t),aa.forEach(t),d3r=i(ka),X1e=n(ka,"P",{});var Gpt=s(X1e);c3r=r(Gpt,"Examples:"),Gpt.forEach(t),f3r=i(ka),m(M0.$$.fragment,ka),ka.forEach(t),bi.forEach(t),nBe=i(d),pf=n(d,"H2",{class:!0});var pke=s(pf);Z4=n(pke,"A",{id:!0,class:!0,href:!0});var Opt=s(Z4);z1e=n(Opt,"SPAN",{});var Xpt=s(z1e);m(E0.$$.fragment,Xpt),Xpt.forEach(t),Opt.forEach(t),m3r=i(pke),V1e=n(pke,"SPAN",{});var zpt=s(V1e);g3r=r(zpt,"FlaxAutoModelForNextSentencePrediction"),zpt.forEach(t),pke.forEach(t),sBe=i(d),$r=n(d,"DIV",{class:!0});var Ti=s($r);m(y0.$$.fragment,Ti),h3r=i(Ti),_f=n(Ti,"P",{});var IV=s(_f);p3r=r(IV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W1e=n(IV,"CODE",{});var Vpt=s(W1e);_3r=r(Vpt,"from_pretrained()"),Vpt.forEach(t),u3r=r(IV,"class method or the "),Q1e=n(IV,"CODE",{});var Wpt=s(Q1e);b3r=r(Wpt,"from_config()"),Wpt.forEach(t),v3r=r(IV,`class
method.`),IV.forEach(t),T3r=i(Ti),w0=n(Ti,"P",{});var _ke=s(w0);F3r=r(_ke,"This class cannot be instantiated directly using "),H1e=n(_ke,"CODE",{});var Qpt=s(H1e);C3r=r(Qpt,"__init__()"),Qpt.forEach(t),M3r=r(_ke," (throws an error)."),_ke.forEach(t),E3r=i(Ti),Lt=n(Ti,"DIV",{class:!0});var Fi=s(Lt);m(A0.$$.fragment,Fi),y3r=i(Fi),U1e=n(Fi,"P",{});var Hpt=s(U1e);w3r=r(Hpt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hpt.forEach(t),A3r=i(Fi),uf=n(Fi,"P",{});var jV=s(uf);L3r=r(jV,`Note:
Loading a model from its configuration file does `),J1e=n(jV,"STRONG",{});var Upt=s(J1e);B3r=r(Upt,"not"),Upt.forEach(t),x3r=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y1e=n(jV,"CODE",{});var Jpt=s(Y1e);k3r=r(Jpt,"from_pretrained()"),Jpt.forEach(t),R3r=r(jV,"to load the model weights."),jV.forEach(t),S3r=i(Fi),K1e=n(Fi,"P",{});var Ypt=s(K1e);P3r=r(Ypt,"Examples:"),Ypt.forEach(t),$3r=i(Fi),m(L0.$$.fragment,Fi),Fi.forEach(t),I3r=i(Ti),$o=n(Ti,"DIV",{class:!0});var Ra=s($o);m(B0.$$.fragment,Ra),j3r=i(Ra),Z1e=n(Ra,"P",{});var Kpt=s(Z1e);N3r=r(Kpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kpt.forEach(t),D3r=i(Ra),kn=n(Ra,"P",{});var eE=s(kn);q3r=r(eE,"The model class to instantiate is selected based on the "),ebe=n(eE,"CODE",{});var Zpt=s(ebe);G3r=r(Zpt,"model_type"),Zpt.forEach(t),O3r=r(eE,` property of the config object (either
passed as an argument or loaded from `),obe=n(eE,"CODE",{});var e_t=s(obe);X3r=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),z3r=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(eE,"CODE",{});var o_t=s(rbe);V3r=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),W3r=r(eE,":"),eE.forEach(t),Q3r=i(Ra),tbe=n(Ra,"UL",{});var r_t=s(tbe);eM=n(r_t,"LI",{});var i7e=s(eM);abe=n(i7e,"STRONG",{});var t_t=s(abe);H3r=r(t_t,"bert"),t_t.forEach(t),U3r=r(i7e," \u2014 "),WX=n(i7e,"A",{href:!0});var a_t=s(WX);J3r=r(a_t,"FlaxBertForNextSentencePrediction"),a_t.forEach(t),Y3r=r(i7e," (BERT model)"),i7e.forEach(t),r_t.forEach(t),K3r=i(Ra),nbe=n(Ra,"P",{});var n_t=s(nbe);Z3r=r(n_t,"Examples:"),n_t.forEach(t),eyr=i(Ra),m(x0.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),lBe=i(d),bf=n(d,"H2",{class:!0});var uke=s(bf);oM=n(uke,"A",{id:!0,class:!0,href:!0});var s_t=s(oM);sbe=n(s_t,"SPAN",{});var l_t=s(sbe);m(k0.$$.fragment,l_t),l_t.forEach(t),s_t.forEach(t),oyr=i(uke),lbe=n(uke,"SPAN",{});var i_t=s(lbe);ryr=r(i_t,"FlaxAutoModelForImageClassification"),i_t.forEach(t),uke.forEach(t),iBe=i(d),Ir=n(d,"DIV",{class:!0});var Ci=s(Ir);m(R0.$$.fragment,Ci),tyr=i(Ci),vf=n(Ci,"P",{});var NV=s(vf);ayr=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ibe=n(NV,"CODE",{});var d_t=s(ibe);nyr=r(d_t,"from_pretrained()"),d_t.forEach(t),syr=r(NV,"class method or the "),dbe=n(NV,"CODE",{});var c_t=s(dbe);lyr=r(c_t,"from_config()"),c_t.forEach(t),iyr=r(NV,`class
method.`),NV.forEach(t),dyr=i(Ci),S0=n(Ci,"P",{});var bke=s(S0);cyr=r(bke,"This class cannot be instantiated directly using "),cbe=n(bke,"CODE",{});var f_t=s(cbe);fyr=r(f_t,"__init__()"),f_t.forEach(t),myr=r(bke," (throws an error)."),bke.forEach(t),gyr=i(Ci),Bt=n(Ci,"DIV",{class:!0});var Mi=s(Bt);m(P0.$$.fragment,Mi),hyr=i(Mi),fbe=n(Mi,"P",{});var m_t=s(fbe);pyr=r(m_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m_t.forEach(t),_yr=i(Mi),Tf=n(Mi,"P",{});var DV=s(Tf);uyr=r(DV,`Note:
Loading a model from its configuration file does `),mbe=n(DV,"STRONG",{});var g_t=s(mbe);byr=r(g_t,"not"),g_t.forEach(t),vyr=r(DV,` load the model weights. It only affects the
model\u2019s configuration. Use `),gbe=n(DV,"CODE",{});var h_t=s(gbe);Tyr=r(h_t,"from_pretrained()"),h_t.forEach(t),Fyr=r(DV,"to load the model weights."),DV.forEach(t),Cyr=i(Mi),hbe=n(Mi,"P",{});var p_t=s(hbe);Myr=r(p_t,"Examples:"),p_t.forEach(t),Eyr=i(Mi),m($0.$$.fragment,Mi),Mi.forEach(t),yyr=i(Ci),Io=n(Ci,"DIV",{class:!0});var Sa=s(Io);m(I0.$$.fragment,Sa),wyr=i(Sa),pbe=n(Sa,"P",{});var __t=s(pbe);Ayr=r(__t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),__t.forEach(t),Lyr=i(Sa),Rn=n(Sa,"P",{});var oE=s(Rn);Byr=r(oE,"The model class to instantiate is selected based on the "),_be=n(oE,"CODE",{});var u_t=s(_be);xyr=r(u_t,"model_type"),u_t.forEach(t),kyr=r(oE,` property of the config object (either
passed as an argument or loaded from `),ube=n(oE,"CODE",{});var b_t=s(ube);Ryr=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),Syr=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=n(oE,"CODE",{});var v_t=s(bbe);Pyr=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),$yr=r(oE,":"),oE.forEach(t),Iyr=i(Sa),j0=n(Sa,"UL",{});var vke=s(j0);rM=n(vke,"LI",{});var d7e=s(rM);vbe=n(d7e,"STRONG",{});var T_t=s(vbe);jyr=r(T_t,"beit"),T_t.forEach(t),Nyr=r(d7e," \u2014 "),QX=n(d7e,"A",{href:!0});var F_t=s(QX);Dyr=r(F_t,"FlaxBeitForImageClassification"),F_t.forEach(t),qyr=r(d7e," (BEiT model)"),d7e.forEach(t),Gyr=i(vke),tM=n(vke,"LI",{});var c7e=s(tM);Tbe=n(c7e,"STRONG",{});var C_t=s(Tbe);Oyr=r(C_t,"vit"),C_t.forEach(t),Xyr=r(c7e," \u2014 "),HX=n(c7e,"A",{href:!0});var M_t=s(HX);zyr=r(M_t,"FlaxViTForImageClassification"),M_t.forEach(t),Vyr=r(c7e," (ViT model)"),c7e.forEach(t),vke.forEach(t),Wyr=i(Sa),Fbe=n(Sa,"P",{});var E_t=s(Fbe);Qyr=r(E_t,"Examples:"),E_t.forEach(t),Hyr=i(Sa),m(N0.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),dBe=i(d),Ff=n(d,"H2",{class:!0});var Tke=s(Ff);aM=n(Tke,"A",{id:!0,class:!0,href:!0});var y_t=s(aM);Cbe=n(y_t,"SPAN",{});var w_t=s(Cbe);m(D0.$$.fragment,w_t),w_t.forEach(t),y_t.forEach(t),Uyr=i(Tke),Mbe=n(Tke,"SPAN",{});var A_t=s(Mbe);Jyr=r(A_t,"FlaxAutoModelForVision2Seq"),A_t.forEach(t),Tke.forEach(t),cBe=i(d),jr=n(d,"DIV",{class:!0});var Ei=s(jr);m(q0.$$.fragment,Ei),Yyr=i(Ei),Cf=n(Ei,"P",{});var qV=s(Cf);Kyr=r(qV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ebe=n(qV,"CODE",{});var L_t=s(Ebe);Zyr=r(L_t,"from_pretrained()"),L_t.forEach(t),ewr=r(qV,"class method or the "),ybe=n(qV,"CODE",{});var B_t=s(ybe);owr=r(B_t,"from_config()"),B_t.forEach(t),rwr=r(qV,`class
method.`),qV.forEach(t),twr=i(Ei),G0=n(Ei,"P",{});var Fke=s(G0);awr=r(Fke,"This class cannot be instantiated directly using "),wbe=n(Fke,"CODE",{});var x_t=s(wbe);nwr=r(x_t,"__init__()"),x_t.forEach(t),swr=r(Fke," (throws an error)."),Fke.forEach(t),lwr=i(Ei),xt=n(Ei,"DIV",{class:!0});var yi=s(xt);m(O0.$$.fragment,yi),iwr=i(yi),Abe=n(yi,"P",{});var k_t=s(Abe);dwr=r(k_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),k_t.forEach(t),cwr=i(yi),Mf=n(yi,"P",{});var GV=s(Mf);fwr=r(GV,`Note:
Loading a model from its configuration file does `),Lbe=n(GV,"STRONG",{});var R_t=s(Lbe);mwr=r(R_t,"not"),R_t.forEach(t),gwr=r(GV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bbe=n(GV,"CODE",{});var S_t=s(Bbe);hwr=r(S_t,"from_pretrained()"),S_t.forEach(t),pwr=r(GV,"to load the model weights."),GV.forEach(t),_wr=i(yi),xbe=n(yi,"P",{});var P_t=s(xbe);uwr=r(P_t,"Examples:"),P_t.forEach(t),bwr=i(yi),m(X0.$$.fragment,yi),yi.forEach(t),vwr=i(Ei),jo=n(Ei,"DIV",{class:!0});var Pa=s(jo);m(z0.$$.fragment,Pa),Twr=i(Pa),kbe=n(Pa,"P",{});var $_t=s(kbe);Fwr=r($_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$_t.forEach(t),Cwr=i(Pa),Sn=n(Pa,"P",{});var rE=s(Sn);Mwr=r(rE,"The model class to instantiate is selected based on the "),Rbe=n(rE,"CODE",{});var I_t=s(Rbe);Ewr=r(I_t,"model_type"),I_t.forEach(t),ywr=r(rE,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(rE,"CODE",{});var j_t=s(Sbe);wwr=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),Awr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(rE,"CODE",{});var N_t=s(Pbe);Lwr=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),Bwr=r(rE,":"),rE.forEach(t),xwr=i(Pa),$be=n(Pa,"UL",{});var D_t=s($be);nM=n(D_t,"LI",{});var f7e=s(nM);Ibe=n(f7e,"STRONG",{});var q_t=s(Ibe);kwr=r(q_t,"vision-encoder-decoder"),q_t.forEach(t),Rwr=r(f7e," \u2014 "),UX=n(f7e,"A",{href:!0});var G_t=s(UX);Swr=r(G_t,"FlaxVisionEncoderDecoderModel"),G_t.forEach(t),Pwr=r(f7e," (Vision Encoder decoder model)"),f7e.forEach(t),D_t.forEach(t),$wr=i(Pa),jbe=n(Pa,"P",{});var O_t=s(jbe);Iwr=r(O_t,"Examples:"),O_t.forEach(t),jwr=i(Pa),m(V0.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(Y_t)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(ie,"class","relative group"),c(Pn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoModel"),c(jn,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel"),c(Bf,"id","extending-the-auto-classes"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#extending-the-auto-classes"),c(Pi,"class","relative group"),c(kf,"id","transformers.AutoConfig"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(UL,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(JL,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertConfig"),c(YL,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartConfig"),c(KL,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitConfig"),c(ZL,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertConfig"),c(e7,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(o7,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdConfig"),c(r7,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(t7,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(a7,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(n7,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertConfig"),c(s7,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineConfig"),c(l7,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPConfig"),c(i7,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertConfig"),c(d7,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextConfig"),c(c7,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLConfig"),c(f7,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaConfig"),c(m7,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(g7,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTConfig"),c(h7,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrConfig"),c(p7,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertConfig"),c(_7,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRConfig"),c(u7,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraConfig"),c(b7,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(v7,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertConfig"),c(T7,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetConfig"),c(F7,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTConfig"),c(C7,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelConfig"),c(M7,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Config"),c(E7,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(y7,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJConfig"),c(w7,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertConfig"),c(A7,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertConfig"),c(L7,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(B7,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(x7,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(k7,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDConfig"),c(R7,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerConfig"),c(S7,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeConfig"),c(P7,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertConfig"),c($7,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Config"),c(I7,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianConfig"),c(j7,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartConfig"),c(N7,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(D7,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(q7,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetConfig"),c(G7,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Config"),c(O7,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(X7,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(z7,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusConfig"),c(V7,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverConfig"),c(W7,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartConfig"),c(Q7,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(H7,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(U7,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(J7,"href","/docs/transformers/pr_15529/en/model_doc/rag#transformers.RagConfig"),c(Y7,"href","/docs/transformers/pr_15529/en/model_doc/realm#transformers.RealmConfig"),c(K7,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerConfig"),c(Z7,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertConfig"),c(e8,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertConfig"),c(o8,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaConfig"),c(r8,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerConfig"),c(t8,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerConfig"),c(a8,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWConfig"),c(n8,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDConfig"),c(s8,"href","/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(l8,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(i8,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(d8,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterConfig"),c(c8,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(f8,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinConfig"),c(m8,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Config"),c(g8,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasConfig"),c(h8,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(p8,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRConfig"),c(_8,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(u8,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(b8,"href","/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltConfig"),c(v8,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(T8,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(F8,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(C8,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTConfig"),c(M8,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(E8,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(y8,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMConfig"),c(w8,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMConfig"),c(A8,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMConfig"),c(L8,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(B8,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(x8,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(k8,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetConfig"),c(R8,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(pg,"class","docstring"),c(Go,"class","docstring"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(ji,"class","relative group"),c(S8,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(P8,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertTokenizer"),c($8,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(I8,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartTokenizer"),c(j8,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartTokenizerFast"),c(N8,"href","/docs/transformers/pr_15529/en/model_doc/barthez#transformers.BarthezTokenizer"),c(D8,"href","/docs/transformers/pr_15529/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(q8,"href","/docs/transformers/pr_15529/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(G8,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizer"),c(O8,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizerFast"),c(X8,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(z8,"href","/docs/transformers/pr_15529/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(V8,"href","/docs/transformers/pr_15529/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(W8,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Q8,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(H8,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(U8,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(J8,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Y8,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(K8,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Z8,"href","/docs/transformers/pr_15529/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(eB,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertTokenizer"),c(oB,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(rB,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineTokenizer"),c(tB,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPTokenizer"),c(aB,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nB,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sB,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_15529/en/model_doc/cpm#transformers.CpmTokenizer"),c(iB,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(dB,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cB,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mB,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(gB,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(hB,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_B,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uB,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraTokenizer"),c(bB,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(vB,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TB,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetTokenizer"),c(FB,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(CB,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MB,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelTokenizer"),c(EB,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yB,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LB,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BB,"href","/docs/transformers/pr_15529/en/model_doc/herbert#transformers.HerbertTokenizer"),c(xB,"href","/docs/transformers/pr_15529/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(kB,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RB,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SB,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c($B,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(IB,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jB,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(NB,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(DB,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(qB,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDTokenizer"),c(GB,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDTokenizerFast"),c(OB,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerTokenizer"),c(XB,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(zB,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeTokenizer"),c(VB,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WB,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(QB,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(HB,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianTokenizer"),c(UB,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartTokenizer"),c(JB,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(YB,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(KB,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(ZB,"href","/docs/transformers/pr_15529/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ex,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ox,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(rx,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(tx,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ax,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5Tokenizer"),c(nx,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5TokenizerFast"),c(sx,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(lx,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(ix,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dx,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cx,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(fx,"href","/docs/transformers/pr_15529/en/model_doc/phobert#transformers.PhobertTokenizer"),c(mx,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartTokenizer"),c(gx,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(hx,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizer"),c(px,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertTokenizerFast"),c(_x,"href","/docs/transformers/pr_15529/en/model_doc/rag#transformers.RagTokenizer"),c(ux,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bx,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vx,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Tx,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Fx,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Cx,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Mx,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Ex,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yx,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(wx,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Ax,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Lx,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Bx,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterTokenizer"),c(xx,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kx,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Rx,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Sx,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5Tokenizer"),c(Px,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.T5TokenizerFast"),c($x,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasTokenizer"),c(Ix,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(jx,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Nx,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Dx,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qx,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Gx,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMTokenizer"),c(Ox,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Xx,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zx,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Vx,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Wx,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mo,"class","docstring"),c(Vg,"class","docstring"),c(Oo,"class","docstring"),c(Wg,"id","transformers.AutoFeatureExtractor"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(Qx,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Hx,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Ux,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Jx,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Yx,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Kx,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(Zx,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ek,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ok,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rk,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tk,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(ak,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nk,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sk,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lk,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ik,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(dh,"class","docstring"),c(Xo,"class","docstring"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(Di,"class","relative group"),c(dk,"href","/docs/transformers/pr_15529/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ck,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPProcessor"),c(fk,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(mk,"href","/docs/transformers/pr_15529/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gk,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hk,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pk,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_k,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(uk,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(Th,"class","docstring"),c(zo,"class","docstring"),c(Fh,"id","transformers.AutoModel"),c(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fh,"href","#transformers.AutoModel"),c(Gi,"class","relative group"),c(Nr,"class","docstring"),c(bk,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertModel"),c(vk,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartModel"),c(Tk,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitModel"),c(Fk,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertModel"),c(Ck,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Mk,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdModel"),c(Ek,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(yk,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wk,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Ak,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertModel"),c(Lk,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineModel"),c(Bk,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.CLIPModel"),c(xk,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertModel"),c(kk,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextModel"),c(Rk,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLModel"),c(Sk,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaModel"),c(Pk,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c($k,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTModel"),c(Ik,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrModel"),c(jk,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertModel"),c(Nk,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Dk,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraModel"),c(qk,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertModel"),c(Gk,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetModel"),c(Ok,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTModel"),c(Xk,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelModel"),c(zk,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Vk,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2Model"),c(Wk,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Qk,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJModel"),c(Hk,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertModel"),c(Uk,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertModel"),c(Jk,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Yk,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Kk,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Zk,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDModel"),c(eR,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerModel"),c(oR,"href","/docs/transformers/pr_15529/en/model_doc/luke#transformers.LukeModel"),c(rR,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertModel"),c(tR,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100Model"),c(aR,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianModel"),c(nR,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartModel"),c(sR,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lR,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertModel"),c(iR,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetModel"),c(dR,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5Model"),c(cR,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fR,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mR,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusModel"),c(gR,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverModel"),c(hR,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartModel"),c(pR,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerModel"),c(_R,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(uR,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bR,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModel"),c(vR,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertModel"),c(TR,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel"),c(FR,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaModel"),c(CR,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerModel"),c(MR,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerModel"),c(ER,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWModel"),c(yR,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDModel"),c(wR,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(AR,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterModel"),c(LR,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(BR,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinModel"),c(xR,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5Model"),c(kR,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasModel"),c(RR,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(SR,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechModel"),c(PR,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($R,"href","/docs/transformers/pr_15529/en/model_doc/vilt#transformers.ViltModel"),c(IR,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(jR,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertModel"),c(NR,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTModel"),c(DR,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(qR,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(GR,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMModel"),c(OR,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMModel"),c(XR,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMModel"),c(zR,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(VR,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(WR,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(QR,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetModel"),c(HR,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoModel"),c(xe,"class","docstring"),c(Vo,"class","docstring"),c(Kp,"id","transformers.AutoModelForPreTraining"),c(Kp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kp,"href","#transformers.AutoModelForPreTraining"),c(zi,"class","relative group"),c(Dr,"class","docstring"),c(UR,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForPreTraining"),c(JR,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YR,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForPreTraining"),c(KR,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ZR,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eS,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oS,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(rS,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(tS,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(aS,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForPreTraining"),c(nS,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sS,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForPreTraining"),c(lS,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iS,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(dS,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cS,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fS,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mS,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gS,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hS,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pS,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(_S,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uS,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bS,"href","/docs/transformers/pr_15529/en/model_doc/retribert#transformers.RetriBertModel"),c(vS,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(TS,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FS,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(CS,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MS,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ES,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(yS,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(wS,"href","/docs/transformers/pr_15529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(AS,"href","/docs/transformers/pr_15529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(LS,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(BS,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xS,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kS,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(RS,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(ke,"class","docstring"),c(Wo,"class","docstring"),c(N_,"id","transformers.AutoModelForCausalLM"),c(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N_,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(qr,"class","docstring"),c(SS,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForCausalLM"),c(PS,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertLMHeadModel"),c($S,"href","/docs/transformers/pr_15529/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(IS,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(jS,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(NS,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(DS,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(qS,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(GS,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(OS,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForCausalLM"),c(XS,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(zS,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(VS,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(WS,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianForCausalLM"),c(QS,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForCausalLM"),c(HS,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(US,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(JS,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(YS,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(KS,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(ZS,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(eP,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(oP,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(rP,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(tP,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(aP,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(nP,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(sP,"href","/docs/transformers/pr_15529/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(lP,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(iP,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(dP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(cP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(fP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(mP,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Qo,"class","docstring"),c(Tu,"id","transformers.AutoModelForMaskedLM"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForMaskedLM"),c(Ji,"class","relative group"),c(Gr,"class","docstring"),c(gP,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(hP,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pP,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMaskedLM"),c(_P,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uP,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bP,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(vP,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(TP,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FP,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(CP,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MP,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EP,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(yP,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wP,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AP,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LP,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(BP,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xP,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kP,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(RP,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SP,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(PP,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($P,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(IP,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(jP,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(NP,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DP,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(qP,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GP,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(OP,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zP,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VP,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Ho,"class","docstring"),c(r5,"id","transformers.AutoModelForSeq2SeqLM"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.AutoModelForSeq2SeqLM"),c(Zi,"class","relative group"),c(Or,"class","docstring"),c(WP,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QP,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(HP,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UP,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(JP,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(YP,"href","/docs/transformers/pr_15529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KP,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZP,"href","/docs/transformers/pr_15529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(e$,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.MarianMTModel"),c(o$,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(r$,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(t$,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(a$,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(n$,"href","/docs/transformers/pr_15529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(s$,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(l$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Uo,"class","docstring"),c(T5,"id","transformers.AutoModelForSequenceClassification"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.AutoModelForSequenceClassification"),c(rd,"class","relative group"),c(Xr,"class","docstring"),c(i$,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(d$,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForSequenceClassification"),c(c$,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForSequenceClassification"),c(f$,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(m$,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(g$,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(h$,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(p$,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_$,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(u$,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(b$,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(v$,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(T$,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(F$,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(C$,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(M$,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(E$,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(y$,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(w$,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(A$,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(L$,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(B$,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(x$,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForSequenceClassification"),c(k$,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(R$,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(S$,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(P$,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($$,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(I$,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(j$,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(N$,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(D$,"href","/docs/transformers/pr_15529/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(q$,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(G$,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(O$,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(X$,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(z$,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(V$,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(W$,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Q$,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(H$,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(U$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(J$,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(Y$,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(K$,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Jo,"class","docstring"),c(g2,"id","transformers.AutoModelForMultipleChoice"),c(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g2,"href","#transformers.AutoModelForMultipleChoice"),c(nd,"class","relative group"),c(zr,"class","docstring"),c(Z$,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(eI,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForMultipleChoice"),c(oI,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(rI,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(tI,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(aI,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(nI,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(sI,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(lI,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(iI,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(dI,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(cI,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(fI,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(mI,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(gI,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(hI,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(pI,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(_I,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(uI,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(bI,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(vI,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(TI,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(FI,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(CI,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(MI,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(EI,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(yI,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Yo,"class","docstring"),c(O2,"id","transformers.AutoModelForNextSentencePrediction"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForNextSentencePrediction"),c(id,"class","relative group"),c(Vr,"class","docstring"),c(wI,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(AI,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(LI,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(BI,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(xI,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Ko,"class","docstring"),c(U2,"id","transformers.AutoModelForTokenClassification"),c(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U2,"href","#transformers.AutoModelForTokenClassification"),c(fd,"class","relative group"),c(Wr,"class","docstring"),c(kI,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(RI,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForTokenClassification"),c(SI,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(PI,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c($I,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForTokenClassification"),c(II,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(jI,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NI,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(DI,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(qI,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GI,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(OI,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(XI,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(zI,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(VI,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(WI,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(QI,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HI,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(UI,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(JI,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(YI,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(KI,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(ZI,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(ej,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(oj,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(rj,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(tj,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(aj,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(nj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(sj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(lj,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(ij,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Zo,"class","docstring"),c(B1,"id","transformers.AutoModelForQuestionAnswering"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForQuestionAnswering"),c(hd,"class","relative group"),c(Qr,"class","docstring"),c(dj,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(cj,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(fj,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(mj,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(gj,"href","/docs/transformers/pr_15529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(hj,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(pj,"href","/docs/transformers/pr_15529/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(_j,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(uj,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(bj,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(vj,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Tj,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Fj,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Cj,"href","/docs/transformers/pr_15529/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Mj,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Ej,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(yj,"href","/docs/transformers/pr_15529/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(wj,"href","/docs/transformers/pr_15529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Aj,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Lj,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Bj,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(xj,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(kj,"href","/docs/transformers/pr_15529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Rj,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Sj,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Pj,"href","/docs/transformers/pr_15529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($j,"href","/docs/transformers/pr_15529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Ij,"href","/docs/transformers/pr_15529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jj,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Nj,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Dj,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(qj,"href","/docs/transformers/pr_15529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Gj,"href","/docs/transformers/pr_15529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Oj,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Xj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(zj,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Vj,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Wj,"href","/docs/transformers/pr_15529/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(er,"class","docstring"),c(pb,"id","transformers.AutoModelForTableQuestionAnswering"),c(pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pb,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ud,"class","relative group"),c(Hr,"class","docstring"),c(Qj,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(or,"class","docstring"),c(bb,"id","transformers.AutoModelForImageClassification"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForImageClassification"),c(Td,"class","relative group"),c(Ur,"class","docstring"),c(Hj,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForImageClassification"),c(Uj,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Jj,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Yj,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Kj,"href","/docs/transformers/pr_15529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Zj,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(eN,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(oN,"href","/docs/transformers/pr_15529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(rN,"href","/docs/transformers/pr_15529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(tN,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(aN,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForImageClassification"),c(nN,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForImageClassification"),c(Ge,"class","docstring"),c(rr,"class","docstring"),c(Ab,"id","transformers.AutoModelForVision2Seq"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(Jr,"class","docstring"),c(sN,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Oe,"class","docstring"),c(tr,"class","docstring"),c(xb,"id","transformers.AutoModelForAudioClassification"),c(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xb,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(Yr,"class","docstring"),c(lN,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(iN,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(dN,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(cN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(fN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(mN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(gN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(ar,"class","docstring"),c(Db,"id","transformers.AutoModelForAudioFrameClassification"),c(Db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Db,"href","#transformers.AutoModelForAudioFrameClassification"),c(Bd,"class","relative group"),c(Kr,"class","docstring"),c(hN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_N,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(nr,"class","docstring"),c(zb,"id","transformers.AutoModelForCTC"),c(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zb,"href","#transformers.AutoModelForCTC"),c(Sd,"class","relative group"),c(Zr,"class","docstring"),c(uN,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.HubertForCTC"),c(bN,"href","/docs/transformers/pr_15529/en/model_doc/sew#transformers.SEWForCTC"),c(vN,"href","/docs/transformers/pr_15529/en/model_doc/sew-d#transformers.SEWDForCTC"),c(TN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(FN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(MN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(sr,"class","docstring"),c(Zb,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Id,"class","relative group"),c(et,"class","docstring"),c(EN,"href","/docs/transformers/pr_15529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(yN,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(lr,"class","docstring"),c(tv,"id","transformers.AutoModelForAudioXVector"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(ot,"class","docstring"),c(wN,"href","/docs/transformers/pr_15529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(AN,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(LN,"href","/docs/transformers/pr_15529/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(ir,"class","docstring"),c(iv,"id","transformers.AutoModelForMaskedImageModeling"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Xd,"class","relative group"),c(rt,"class","docstring"),c(BN,"href","/docs/transformers/pr_15529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xN,"href","/docs/transformers/pr_15529/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(kN,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(dr,"class","docstring"),c(gv,"id","transformers.AutoModelForObjectDetection"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForObjectDetection"),c(Qd,"class","relative group"),c(tt,"class","docstring"),c(RN,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(cr,"class","docstring"),c(_v,"id","transformers.AutoModelForImageSegmentation"),c(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_v,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(at,"class","docstring"),c(SN,"href","/docs/transformers/pr_15529/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(fr,"class","docstring"),c(vv,"id","transformers.AutoModelForSemanticSegmentation"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(nt,"class","docstring"),c(PN,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($N,"href","/docs/transformers/pr_15529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Ye,"class","docstring"),c(mr,"class","docstring"),c(Mv,"id","transformers.TFAutoModel"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(st,"class","docstring"),c(IN,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertModel"),c(jN,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartModel"),c(NN,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertModel"),c(DN,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(qN,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(GN,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertModel"),c(ON,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.TFCLIPModel"),c(XN,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertModel"),c(zN,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextModel"),c(VN,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLModel"),c(WN,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaModel"),c(QN,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HN,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(UN,"href","/docs/transformers/pr_15529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(JN,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraModel"),c(YN,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(KN,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelModel"),c(ZN,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(eD,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2Model"),c(oD,"href","/docs/transformers/pr_15529/en/model_doc/hubert#transformers.TFHubertModel"),c(rD,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tD,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDModel"),c(aD,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerModel"),c(nD,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sD,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianModel"),c(lD,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartModel"),c(iD,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dD,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cD,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5Model"),c(fD,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(mD,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusModel"),c(gD,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertModel"),c(hD,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaModel"),c(pD,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerModel"),c(_D,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(uD,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5Model"),c(bD,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasModel"),c(vD,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TD,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTModel"),c(FD,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CD,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMModel"),c(MD,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(ED,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetModel"),c(go,"class","docstring"),c(gr,"class","docstring"),c(fT,"id","transformers.TFAutoModelForPreTraining"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(lt,"class","docstring"),c(yD,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wD,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LD,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BD,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xD,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(RD,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(PD,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($D,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/pr_15529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(jD,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ND,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DD,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qD,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XD,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(zD,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VD,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(WD,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(hr,"class","docstring"),c(PT,"id","transformers.TFAutoModelForCausalLM"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(it,"class","docstring"),c(QD,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(HD,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UD,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JD,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YD,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(KD,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(ZD,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(eq,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oq,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rq,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(pr,"class","docstring"),c(VT,"id","transformers.TFAutoModelForImageClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(dt,"class","docstring"),c(tq,"href","/docs/transformers/pr_15529/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(aq,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(_r,"class","docstring"),c(HT,"id","transformers.TFAutoModelForMaskedLM"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(ct,"class","docstring"),c(nq,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(sq,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(lq,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iq,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(dq,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(cq,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(fq,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mq,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(gq,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hq,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(pq,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(_q,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(uq,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(bq,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(vq,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(Tq,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Fq,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Cq,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Mq,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Eq,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(uo,"class","docstring"),c(ur,"class","docstring"),c(pF,"id","transformers.TFAutoModelForSeq2SeqLM"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(uc,"class","relative group"),c(ft,"class","docstring"),c(yq,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wq,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Aq,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Lq,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Bq,"href","/docs/transformers/pr_15529/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(xq,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.TFMarianMTModel"),c(kq,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Sq,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bo,"class","docstring"),c(br,"class","docstring"),c(wF,"id","transformers.TFAutoModelForSequenceClassification"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.TFAutoModelForSequenceClassification"),c(Tc,"class","relative group"),c(mt,"class","docstring"),c($q,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(jq,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_15529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(qq,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Gq,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Oq,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Xq,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(zq,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Vq,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Wq,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Qq,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Hq,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Uq,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Jq,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Yq,"href","/docs/transformers/pr_15529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Kq,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Zq,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(aG,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nG,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(vo,"class","docstring"),c(vr,"class","docstring"),c(KF,"id","transformers.TFAutoModelForMultipleChoice"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(gt,"class","docstring"),c(sG,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(mG,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hG,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(pG,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(uG,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(vG,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(TG,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(FG,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(CG,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(To,"class","docstring"),c(Tr,"class","docstring"),c(_9,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(wc,"class","relative group"),c(ht,"class","docstring"),c(MG,"href","/docs/transformers/pr_15529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Fo,"class","docstring"),c(Fr,"class","docstring"),c(b9,"id","transformers.TFAutoModelForTokenClassification"),c(b9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b9,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(pt,"class","docstring"),c(EG,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(yG,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wG,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AG,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(LG,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(BG,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xG,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(kG,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(RG,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SG,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(PG,"href","/docs/transformers/pr_15529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c($G,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(IG,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(jG,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(NG,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(DG,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qG,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(GG,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(OG,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(XG,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Co,"class","docstring"),c(Cr,"class","docstring"),c(D9,"id","transformers.TFAutoModelForQuestionAnswering"),c(D9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D9,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(_t,"class","docstring"),c(zG,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_15529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_15529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_15529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_15529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_15529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(ZG,"href","/docs/transformers/pr_15529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_15529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_15529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_15529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_15529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_15529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lO,"href","/docs/transformers/pr_15529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_15529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Mo,"class","docstring"),c(Mr,"class","docstring"),c(nC,"id","transformers.TFAutoModelForVision2Seq"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForVision2Seq"),c($c,"class","relative group"),c(ut,"class","docstring"),c(dO,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Eo,"class","docstring"),c(Er,"class","docstring"),c(lC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Nc,"class","relative group"),c(bt,"class","docstring"),c(cO,"href","/docs/transformers/pr_15529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(yo,"class","docstring"),c(yr,"class","docstring"),c(dC,"id","transformers.FlaxAutoModel"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(vt,"class","docstring"),c(fO,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertModel"),c(mO,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartModel"),c(gO,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitModel"),c(hO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertModel"),c(pO,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(_O,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(uO,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(bO,"href","/docs/transformers/pr_15529/en/model_doc/clip#transformers.FlaxCLIPModel"),c(vO,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TO,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraModel"),c(FO,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(CO,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(MO,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(EO,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianModel"),c(yO,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wO,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AO,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(LO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BO,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(xO,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5Model"),c(kO,"href","/docs/transformers/pr_15529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RO,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTModel"),c(SO,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PO,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(wo,"class","docstring"),c(wr,"class","docstring"),c(PC,"id","transformers.FlaxAutoModelForCausalLM"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(Tt,"class","docstring"),c($O,"href","/docs/transformers/pr_15529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(IO,"href","/docs/transformers/pr_15529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(jO,"href","/docs/transformers/pr_15529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(NO,"href","/docs/transformers/pr_15529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ao,"class","docstring"),c(Ar,"class","docstring"),c(DC,"id","transformers.FlaxAutoModelForPreTraining"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(Ft,"class","docstring"),c(DO,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(qO,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(OO,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XO,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zO,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QO,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HO,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_15529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Lo,"class","docstring"),c(Lr,"class","docstring"),c(YC,"id","transformers.FlaxAutoModelForMaskedLM"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(Ct,"class","docstring"),c(JO,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(YO,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(ZO,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(eX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(oX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(rX,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(tX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(aX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bo,"class","docstring"),c(Br,"class","docstring"),c(l4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(Mt,"class","docstring"),c(nX,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sX,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(lX,"href","/docs/transformers/pr_15529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(iX,"href","/docs/transformers/pr_15529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(dX,"href","/docs/transformers/pr_15529/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(cX,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fX,"href","/docs/transformers/pr_15529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mX,"href","/docs/transformers/pr_15529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(gX,"href","/docs/transformers/pr_15529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xo,"class","docstring"),c(xr,"class","docstring"),c(u4,"id","transformers.FlaxAutoModelForSequenceClassification"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(Et,"class","docstring"),c(hX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(_X,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uX,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(bX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(TX,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(FX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(CX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ko,"class","docstring"),c(kr,"class","docstring"),c(A4,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(yt,"class","docstring"),c(MX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_15529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(AX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(BX,"href","/docs/transformers/pr_15529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(xX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ro,"class","docstring"),c(Rr,"class","docstring"),c(j4,"id","transformers.FlaxAutoModelForTokenClassification"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(wt,"class","docstring"),c(RX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(SX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(PX,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c($X,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(IX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(jX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(NX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(So,"class","docstring"),c(Sr,"class","docstring"),c(V4,"id","transformers.FlaxAutoModelForMultipleChoice"),c(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V4,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(At,"class","docstring"),c(DX,"href","/docs/transformers/pr_15529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(qX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GX,"href","/docs/transformers/pr_15529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OX,"href","/docs/transformers/pr_15529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(XX,"href","/docs/transformers/pr_15529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(zX,"href","/docs/transformers/pr_15529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(VX,"href","/docs/transformers/pr_15529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Po,"class","docstring"),c(Pr,"class","docstring"),c(Z4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Lt,"class","docstring"),c(WX,"href","/docs/transformers/pr_15529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c($o,"class","docstring"),c($r,"class","docstring"),c(oM,"id","transformers.FlaxAutoModelForImageClassification"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(Bt,"class","docstring"),c(QX,"href","/docs/transformers/pr_15529/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(HX,"href","/docs/transformers/pr_15529/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Io,"class","docstring"),c(Ir,"class","docstring"),c(aM,"id","transformers.FlaxAutoModelForVision2Seq"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ff,"class","relative group"),c(xt,"class","docstring"),c(UX,"href","/docs/transformers/pr_15529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(jo,"class","docstring"),c(jr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,ie,u),e(ie,me),e(me,to),g(ce,to,null),e(ie,ue),e(ie,Do),e(Do,Ai),b(d,yf,u),b(d,sa,u),e(sa,Li),e(sa,Bi),e(Bi,tE),e(sa,wf),b(d,ye,u),b(d,io,u),e(io,xi),e(io,Pn),e(Pn,aE),e(io,$n),e(io,In),e(In,nE),e(io,ki),e(io,jn),e(jn,sE),e(io,Ri),b(d,Af,u),g($a,d,u),b(d,co,u),b(d,ge,u),e(ge,XL),e(ge,Si),e(Si,zL),e(ge,VL),b(d,qo,u),b(d,Ia,u),e(Ia,WL),e(Ia,Lf),e(Lf,QL),e(Ia,Cke),b(d,m7e,u),b(d,Pi,u),e(Pi,Bf),e(Bf,OV),g(lE,OV,null),e(Pi,Mke),e(Pi,XV),e(XV,Eke),b(d,g7e,u),b(d,Nn,u),e(Nn,yke),e(Nn,zV),e(zV,wke),e(Nn,Ake),e(Nn,VV),e(VV,Lke),e(Nn,Bke),b(d,h7e,u),g(iE,d,u),b(d,p7e,u),b(d,HL,u),e(HL,xke),b(d,_7e,u),g(xf,d,u),b(d,u7e,u),b(d,$i,u),e($i,kf),e(kf,WV),g(dE,WV,null),e($i,kke),e($i,QV),e(QV,Rke),b(d,b7e,u),b(d,Go,u),g(cE,Go,null),e(Go,Ske),e(Go,fE),e(fE,Pke),e(fE,UL),e(UL,$ke),e(fE,Ike),e(Go,jke),e(Go,mE),e(mE,Nke),e(mE,HV),e(HV,Dke),e(mE,qke),e(Go,Gke),e(Go,fo),g(gE,fo,null),e(fo,Oke),e(fo,UV),e(UV,Xke),e(fo,zke),e(fo,Ii),e(Ii,Vke),e(Ii,JV),e(JV,Wke),e(Ii,Qke),e(Ii,YV),e(YV,Hke),e(Ii,Uke),e(fo,Jke),e(fo,v),e(v,Rf),e(Rf,KV),e(KV,Yke),e(Rf,Kke),e(Rf,JL),e(JL,Zke),e(Rf,eRe),e(v,oRe),e(v,Sf),e(Sf,ZV),e(ZV,rRe),e(Sf,tRe),e(Sf,YL),e(YL,aRe),e(Sf,nRe),e(v,sRe),e(v,Pf),e(Pf,eW),e(eW,lRe),e(Pf,iRe),e(Pf,KL),e(KL,dRe),e(Pf,cRe),e(v,fRe),e(v,$f),e($f,oW),e(oW,mRe),e($f,gRe),e($f,ZL),e(ZL,hRe),e($f,pRe),e(v,_Re),e(v,If),e(If,rW),e(rW,uRe),e(If,bRe),e(If,e7),e(e7,vRe),e(If,TRe),e(v,FRe),e(v,jf),e(jf,tW),e(tW,CRe),e(jf,MRe),e(jf,o7),e(o7,ERe),e(jf,yRe),e(v,wRe),e(v,Nf),e(Nf,aW),e(aW,ARe),e(Nf,LRe),e(Nf,r7),e(r7,BRe),e(Nf,xRe),e(v,kRe),e(v,Df),e(Df,nW),e(nW,RRe),e(Df,SRe),e(Df,t7),e(t7,PRe),e(Df,$Re),e(v,IRe),e(v,qf),e(qf,sW),e(sW,jRe),e(qf,NRe),e(qf,a7),e(a7,DRe),e(qf,qRe),e(v,GRe),e(v,Gf),e(Gf,lW),e(lW,ORe),e(Gf,XRe),e(Gf,n7),e(n7,zRe),e(Gf,VRe),e(v,WRe),e(v,Of),e(Of,iW),e(iW,QRe),e(Of,HRe),e(Of,s7),e(s7,URe),e(Of,JRe),e(v,YRe),e(v,Xf),e(Xf,dW),e(dW,KRe),e(Xf,ZRe),e(Xf,l7),e(l7,eSe),e(Xf,oSe),e(v,rSe),e(v,zf),e(zf,cW),e(cW,tSe),e(zf,aSe),e(zf,i7),e(i7,nSe),e(zf,sSe),e(v,lSe),e(v,Vf),e(Vf,fW),e(fW,iSe),e(Vf,dSe),e(Vf,d7),e(d7,cSe),e(Vf,fSe),e(v,mSe),e(v,Wf),e(Wf,mW),e(mW,gSe),e(Wf,hSe),e(Wf,c7),e(c7,pSe),e(Wf,_Se),e(v,uSe),e(v,Qf),e(Qf,gW),e(gW,bSe),e(Qf,vSe),e(Qf,f7),e(f7,TSe),e(Qf,FSe),e(v,CSe),e(v,Hf),e(Hf,hW),e(hW,MSe),e(Hf,ESe),e(Hf,m7),e(m7,ySe),e(Hf,wSe),e(v,ASe),e(v,Uf),e(Uf,pW),e(pW,LSe),e(Uf,BSe),e(Uf,g7),e(g7,xSe),e(Uf,kSe),e(v,RSe),e(v,Jf),e(Jf,_W),e(_W,SSe),e(Jf,PSe),e(Jf,h7),e(h7,$Se),e(Jf,ISe),e(v,jSe),e(v,Yf),e(Yf,uW),e(uW,NSe),e(Yf,DSe),e(Yf,p7),e(p7,qSe),e(Yf,GSe),e(v,OSe),e(v,Kf),e(Kf,bW),e(bW,XSe),e(Kf,zSe),e(Kf,_7),e(_7,VSe),e(Kf,WSe),e(v,QSe),e(v,Zf),e(Zf,vW),e(vW,HSe),e(Zf,USe),e(Zf,u7),e(u7,JSe),e(Zf,YSe),e(v,KSe),e(v,em),e(em,TW),e(TW,ZSe),e(em,ePe),e(em,b7),e(b7,oPe),e(em,rPe),e(v,tPe),e(v,om),e(om,FW),e(FW,aPe),e(om,nPe),e(om,v7),e(v7,sPe),e(om,lPe),e(v,iPe),e(v,rm),e(rm,CW),e(CW,dPe),e(rm,cPe),e(rm,T7),e(T7,fPe),e(rm,mPe),e(v,gPe),e(v,tm),e(tm,MW),e(MW,hPe),e(tm,pPe),e(tm,F7),e(F7,_Pe),e(tm,uPe),e(v,bPe),e(v,am),e(am,EW),e(EW,vPe),e(am,TPe),e(am,C7),e(C7,FPe),e(am,CPe),e(v,MPe),e(v,nm),e(nm,yW),e(yW,EPe),e(nm,yPe),e(nm,M7),e(M7,wPe),e(nm,APe),e(v,LPe),e(v,sm),e(sm,wW),e(wW,BPe),e(sm,xPe),e(sm,E7),e(E7,kPe),e(sm,RPe),e(v,SPe),e(v,lm),e(lm,AW),e(AW,PPe),e(lm,$Pe),e(lm,y7),e(y7,IPe),e(lm,jPe),e(v,NPe),e(v,im),e(im,LW),e(LW,DPe),e(im,qPe),e(im,w7),e(w7,GPe),e(im,OPe),e(v,XPe),e(v,dm),e(dm,BW),e(BW,zPe),e(dm,VPe),e(dm,A7),e(A7,WPe),e(dm,QPe),e(v,HPe),e(v,cm),e(cm,xW),e(xW,UPe),e(cm,JPe),e(cm,L7),e(L7,YPe),e(cm,KPe),e(v,ZPe),e(v,fm),e(fm,kW),e(kW,e$e),e(fm,o$e),e(fm,B7),e(B7,r$e),e(fm,t$e),e(v,a$e),e(v,mm),e(mm,RW),e(RW,n$e),e(mm,s$e),e(mm,x7),e(x7,l$e),e(mm,i$e),e(v,d$e),e(v,gm),e(gm,SW),e(SW,c$e),e(gm,f$e),e(gm,k7),e(k7,m$e),e(gm,g$e),e(v,h$e),e(v,hm),e(hm,PW),e(PW,p$e),e(hm,_$e),e(hm,R7),e(R7,u$e),e(hm,b$e),e(v,v$e),e(v,pm),e(pm,$W),e($W,T$e),e(pm,F$e),e(pm,S7),e(S7,C$e),e(pm,M$e),e(v,E$e),e(v,_m),e(_m,IW),e(IW,y$e),e(_m,w$e),e(_m,P7),e(P7,A$e),e(_m,L$e),e(v,B$e),e(v,um),e(um,jW),e(jW,x$e),e(um,k$e),e(um,$7),e($7,R$e),e(um,S$e),e(v,P$e),e(v,bm),e(bm,NW),e(NW,$$e),e(bm,I$e),e(bm,I7),e(I7,j$e),e(bm,N$e),e(v,D$e),e(v,vm),e(vm,DW),e(DW,q$e),e(vm,G$e),e(vm,j7),e(j7,O$e),e(vm,X$e),e(v,z$e),e(v,Tm),e(Tm,qW),e(qW,V$e),e(Tm,W$e),e(Tm,N7),e(N7,Q$e),e(Tm,H$e),e(v,U$e),e(v,Fm),e(Fm,GW),e(GW,J$e),e(Fm,Y$e),e(Fm,D7),e(D7,K$e),e(Fm,Z$e),e(v,eIe),e(v,Cm),e(Cm,OW),e(OW,oIe),e(Cm,rIe),e(Cm,q7),e(q7,tIe),e(Cm,aIe),e(v,nIe),e(v,Mm),e(Mm,XW),e(XW,sIe),e(Mm,lIe),e(Mm,G7),e(G7,iIe),e(Mm,dIe),e(v,cIe),e(v,Em),e(Em,zW),e(zW,fIe),e(Em,mIe),e(Em,O7),e(O7,gIe),e(Em,hIe),e(v,pIe),e(v,ym),e(ym,VW),e(VW,_Ie),e(ym,uIe),e(ym,X7),e(X7,bIe),e(ym,vIe),e(v,TIe),e(v,wm),e(wm,WW),e(WW,FIe),e(wm,CIe),e(wm,z7),e(z7,MIe),e(wm,EIe),e(v,yIe),e(v,Am),e(Am,QW),e(QW,wIe),e(Am,AIe),e(Am,V7),e(V7,LIe),e(Am,BIe),e(v,xIe),e(v,Lm),e(Lm,HW),e(HW,kIe),e(Lm,RIe),e(Lm,W7),e(W7,SIe),e(Lm,PIe),e(v,$Ie),e(v,Bm),e(Bm,UW),e(UW,IIe),e(Bm,jIe),e(Bm,Q7),e(Q7,NIe),e(Bm,DIe),e(v,qIe),e(v,xm),e(xm,JW),e(JW,GIe),e(xm,OIe),e(xm,H7),e(H7,XIe),e(xm,zIe),e(v,VIe),e(v,km),e(km,YW),e(YW,WIe),e(km,QIe),e(km,U7),e(U7,HIe),e(km,UIe),e(v,JIe),e(v,Rm),e(Rm,KW),e(KW,YIe),e(Rm,KIe),e(Rm,J7),e(J7,ZIe),e(Rm,eje),e(v,oje),e(v,Sm),e(Sm,ZW),e(ZW,rje),e(Sm,tje),e(Sm,Y7),e(Y7,aje),e(Sm,nje),e(v,sje),e(v,Pm),e(Pm,eQ),e(eQ,lje),e(Pm,ije),e(Pm,K7),e(K7,dje),e(Pm,cje),e(v,fje),e(v,$m),e($m,oQ),e(oQ,mje),e($m,gje),e($m,Z7),e(Z7,hje),e($m,pje),e(v,_je),e(v,Im),e(Im,rQ),e(rQ,uje),e(Im,bje),e(Im,e8),e(e8,vje),e(Im,Tje),e(v,Fje),e(v,jm),e(jm,tQ),e(tQ,Cje),e(jm,Mje),e(jm,o8),e(o8,Eje),e(jm,yje),e(v,wje),e(v,Nm),e(Nm,aQ),e(aQ,Aje),e(Nm,Lje),e(Nm,r8),e(r8,Bje),e(Nm,xje),e(v,kje),e(v,Dm),e(Dm,nQ),e(nQ,Rje),e(Dm,Sje),e(Dm,t8),e(t8,Pje),e(Dm,$je),e(v,Ije),e(v,qm),e(qm,sQ),e(sQ,jje),e(qm,Nje),e(qm,a8),e(a8,Dje),e(qm,qje),e(v,Gje),e(v,Gm),e(Gm,lQ),e(lQ,Oje),e(Gm,Xje),e(Gm,n8),e(n8,zje),e(Gm,Vje),e(v,Wje),e(v,Om),e(Om,iQ),e(iQ,Qje),e(Om,Hje),e(Om,s8),e(s8,Uje),e(Om,Jje),e(v,Yje),e(v,Xm),e(Xm,dQ),e(dQ,Kje),e(Xm,Zje),e(Xm,l8),e(l8,eNe),e(Xm,oNe),e(v,rNe),e(v,zm),e(zm,cQ),e(cQ,tNe),e(zm,aNe),e(zm,i8),e(i8,nNe),e(zm,sNe),e(v,lNe),e(v,Vm),e(Vm,fQ),e(fQ,iNe),e(Vm,dNe),e(Vm,d8),e(d8,cNe),e(Vm,fNe),e(v,mNe),e(v,Wm),e(Wm,mQ),e(mQ,gNe),e(Wm,hNe),e(Wm,c8),e(c8,pNe),e(Wm,_Ne),e(v,uNe),e(v,Qm),e(Qm,gQ),e(gQ,bNe),e(Qm,vNe),e(Qm,f8),e(f8,TNe),e(Qm,FNe),e(v,CNe),e(v,Hm),e(Hm,hQ),e(hQ,MNe),e(Hm,ENe),e(Hm,m8),e(m8,yNe),e(Hm,wNe),e(v,ANe),e(v,Um),e(Um,pQ),e(pQ,LNe),e(Um,BNe),e(Um,g8),e(g8,xNe),e(Um,kNe),e(v,RNe),e(v,Jm),e(Jm,_Q),e(_Q,SNe),e(Jm,PNe),e(Jm,h8),e(h8,$Ne),e(Jm,INe),e(v,jNe),e(v,Ym),e(Ym,uQ),e(uQ,NNe),e(Ym,DNe),e(Ym,p8),e(p8,qNe),e(Ym,GNe),e(v,ONe),e(v,Km),e(Km,bQ),e(bQ,XNe),e(Km,zNe),e(Km,_8),e(_8,VNe),e(Km,WNe),e(v,QNe),e(v,Zm),e(Zm,vQ),e(vQ,HNe),e(Zm,UNe),e(Zm,u8),e(u8,JNe),e(Zm,YNe),e(v,KNe),e(v,eg),e(eg,TQ),e(TQ,ZNe),e(eg,eDe),e(eg,b8),e(b8,oDe),e(eg,rDe),e(v,tDe),e(v,og),e(og,FQ),e(FQ,aDe),e(og,nDe),e(og,v8),e(v8,sDe),e(og,lDe),e(v,iDe),e(v,rg),e(rg,CQ),e(CQ,dDe),e(rg,cDe),e(rg,T8),e(T8,fDe),e(rg,mDe),e(v,gDe),e(v,tg),e(tg,MQ),e(MQ,hDe),e(tg,pDe),e(tg,F8),e(F8,_De),e(tg,uDe),e(v,bDe),e(v,ag),e(ag,EQ),e(EQ,vDe),e(ag,TDe),e(ag,C8),e(C8,FDe),e(ag,CDe),e(v,MDe),e(v,ng),e(ng,yQ),e(yQ,EDe),e(ng,yDe),e(ng,M8),e(M8,wDe),e(ng,ADe),e(v,LDe),e(v,sg),e(sg,wQ),e(wQ,BDe),e(sg,xDe),e(sg,E8),e(E8,kDe),e(sg,RDe),e(v,SDe),e(v,lg),e(lg,AQ),e(AQ,PDe),e(lg,$De),e(lg,y8),e(y8,IDe),e(lg,jDe),e(v,NDe),e(v,ig),e(ig,LQ),e(LQ,DDe),e(ig,qDe),e(ig,w8),e(w8,GDe),e(ig,ODe),e(v,XDe),e(v,dg),e(dg,BQ),e(BQ,zDe),e(dg,VDe),e(dg,A8),e(A8,WDe),e(dg,QDe),e(v,HDe),e(v,cg),e(cg,xQ),e(xQ,UDe),e(cg,JDe),e(cg,L8),e(L8,YDe),e(cg,KDe),e(v,ZDe),e(v,fg),e(fg,kQ),e(kQ,eqe),e(fg,oqe),e(fg,B8),e(B8,rqe),e(fg,tqe),e(v,aqe),e(v,mg),e(mg,RQ),e(RQ,nqe),e(mg,sqe),e(mg,x8),e(x8,lqe),e(mg,iqe),e(v,dqe),e(v,gg),e(gg,SQ),e(SQ,cqe),e(gg,fqe),e(gg,k8),e(k8,mqe),e(gg,gqe),e(v,hqe),e(v,hg),e(hg,PQ),e(PQ,pqe),e(hg,_qe),e(hg,R8),e(R8,uqe),e(hg,bqe),e(fo,vqe),e(fo,$Q),e($Q,Tqe),e(fo,Fqe),g(hE,fo,null),e(Go,Cqe),e(Go,pg),g(pE,pg,null),e(pg,Mqe),e(pg,IQ),e(IQ,Eqe),b(d,v7e,u),b(d,ji,u),e(ji,_g),e(_g,jQ),g(_E,jQ,null),e(ji,yqe),e(ji,NQ),e(NQ,wqe),b(d,T7e,u),b(d,Oo,u),g(uE,Oo,null),e(Oo,Aqe),e(Oo,bE),e(bE,Lqe),e(bE,S8),e(S8,Bqe),e(bE,xqe),e(Oo,kqe),e(Oo,vE),e(vE,Rqe),e(vE,DQ),e(DQ,Sqe),e(vE,Pqe),e(Oo,$qe),e(Oo,mo),g(TE,mo,null),e(mo,Iqe),e(mo,qQ),e(qQ,jqe),e(mo,Nqe),e(mo,ja),e(ja,Dqe),e(ja,GQ),e(GQ,qqe),e(ja,Gqe),e(ja,OQ),e(OQ,Oqe),e(ja,Xqe),e(ja,XQ),e(XQ,zqe),e(ja,Vqe),e(mo,Wqe),e(mo,M),e(M,Dn),e(Dn,zQ),e(zQ,Qqe),e(Dn,Hqe),e(Dn,P8),e(P8,Uqe),e(Dn,Jqe),e(Dn,$8),e($8,Yqe),e(Dn,Kqe),e(M,Zqe),e(M,qn),e(qn,VQ),e(VQ,eGe),e(qn,oGe),e(qn,I8),e(I8,rGe),e(qn,tGe),e(qn,j8),e(j8,aGe),e(qn,nGe),e(M,sGe),e(M,Gn),e(Gn,WQ),e(WQ,lGe),e(Gn,iGe),e(Gn,N8),e(N8,dGe),e(Gn,cGe),e(Gn,D8),e(D8,fGe),e(Gn,mGe),e(M,gGe),e(M,ug),e(ug,QQ),e(QQ,hGe),e(ug,pGe),e(ug,q8),e(q8,_Ge),e(ug,uGe),e(M,bGe),e(M,On),e(On,HQ),e(HQ,vGe),e(On,TGe),e(On,G8),e(G8,FGe),e(On,CGe),e(On,O8),e(O8,MGe),e(On,EGe),e(M,yGe),e(M,bg),e(bg,UQ),e(UQ,wGe),e(bg,AGe),e(bg,X8),e(X8,LGe),e(bg,BGe),e(M,xGe),e(M,vg),e(vg,JQ),e(JQ,kGe),e(vg,RGe),e(vg,z8),e(z8,SGe),e(vg,PGe),e(M,$Ge),e(M,Tg),e(Tg,YQ),e(YQ,IGe),e(Tg,jGe),e(Tg,V8),e(V8,NGe),e(Tg,DGe),e(M,qGe),e(M,Xn),e(Xn,KQ),e(KQ,GGe),e(Xn,OGe),e(Xn,W8),e(W8,XGe),e(Xn,zGe),e(Xn,Q8),e(Q8,VGe),e(Xn,WGe),e(M,QGe),e(M,zn),e(zn,ZQ),e(ZQ,HGe),e(zn,UGe),e(zn,H8),e(H8,JGe),e(zn,YGe),e(zn,U8),e(U8,KGe),e(zn,ZGe),e(M,eOe),e(M,Vn),e(Vn,eH),e(eH,oOe),e(Vn,rOe),e(Vn,J8),e(J8,tOe),e(Vn,aOe),e(Vn,Y8),e(Y8,nOe),e(Vn,sOe),e(M,lOe),e(M,Fg),e(Fg,oH),e(oH,iOe),e(Fg,dOe),e(Fg,K8),e(K8,cOe),e(Fg,fOe),e(M,mOe),e(M,Cg),e(Cg,rH),e(rH,gOe),e(Cg,hOe),e(Cg,Z8),e(Z8,pOe),e(Cg,_Oe),e(M,uOe),e(M,Wn),e(Wn,tH),e(tH,bOe),e(Wn,vOe),e(Wn,eB),e(eB,TOe),e(Wn,FOe),e(Wn,oB),e(oB,COe),e(Wn,MOe),e(M,EOe),e(M,Mg),e(Mg,aH),e(aH,yOe),e(Mg,wOe),e(Mg,rB),e(rB,AOe),e(Mg,LOe),e(M,BOe),e(M,Qn),e(Qn,nH),e(nH,xOe),e(Qn,kOe),e(Qn,tB),e(tB,ROe),e(Qn,SOe),e(Qn,aB),e(aB,POe),e(Qn,$Oe),e(M,IOe),e(M,Hn),e(Hn,sH),e(sH,jOe),e(Hn,NOe),e(Hn,nB),e(nB,DOe),e(Hn,qOe),e(Hn,sB),e(sB,GOe),e(Hn,OOe),e(M,XOe),e(M,Un),e(Un,lH),e(lH,zOe),e(Un,VOe),e(Un,lB),e(lB,WOe),e(Un,QOe),e(Un,iH),e(iH,HOe),e(Un,UOe),e(M,JOe),e(M,Eg),e(Eg,dH),e(dH,YOe),e(Eg,KOe),e(Eg,iB),e(iB,ZOe),e(Eg,eXe),e(M,oXe),e(M,Jn),e(Jn,cH),e(cH,rXe),e(Jn,tXe),e(Jn,dB),e(dB,aXe),e(Jn,nXe),e(Jn,cB),e(cB,sXe),e(Jn,lXe),e(M,iXe),e(M,Yn),e(Yn,fH),e(fH,dXe),e(Yn,cXe),e(Yn,fB),e(fB,fXe),e(Yn,mXe),e(Yn,mB),e(mB,gXe),e(Yn,hXe),e(M,pXe),e(M,Kn),e(Kn,mH),e(mH,_Xe),e(Kn,uXe),e(Kn,gB),e(gB,bXe),e(Kn,vXe),e(Kn,hB),e(hB,TXe),e(Kn,FXe),e(M,CXe),e(M,Zn),e(Zn,gH),e(gH,MXe),e(Zn,EXe),e(Zn,pB),e(pB,yXe),e(Zn,wXe),e(Zn,_B),e(_B,AXe),e(Zn,LXe),e(M,BXe),e(M,es),e(es,hH),e(hH,xXe),e(es,kXe),e(es,uB),e(uB,RXe),e(es,SXe),e(es,bB),e(bB,PXe),e(es,$Xe),e(M,IXe),e(M,yg),e(yg,pH),e(pH,jXe),e(yg,NXe),e(yg,vB),e(vB,DXe),e(yg,qXe),e(M,GXe),e(M,os),e(os,_H),e(_H,OXe),e(os,XXe),e(os,TB),e(TB,zXe),e(os,VXe),e(os,FB),e(FB,WXe),e(os,QXe),e(M,HXe),e(M,wg),e(wg,uH),e(uH,UXe),e(wg,JXe),e(wg,CB),e(CB,YXe),e(wg,KXe),e(M,ZXe),e(M,rs),e(rs,bH),e(bH,eze),e(rs,oze),e(rs,MB),e(MB,rze),e(rs,tze),e(rs,EB),e(EB,aze),e(rs,nze),e(M,sze),e(M,ts),e(ts,vH),e(vH,lze),e(ts,ize),e(ts,yB),e(yB,dze),e(ts,cze),e(ts,wB),e(wB,fze),e(ts,mze),e(M,gze),e(M,as),e(as,TH),e(TH,hze),e(as,pze),e(as,AB),e(AB,_ze),e(as,uze),e(as,LB),e(LB,bze),e(as,vze),e(M,Tze),e(M,ns),e(ns,FH),e(FH,Fze),e(ns,Cze),e(ns,BB),e(BB,Mze),e(ns,Eze),e(ns,xB),e(xB,yze),e(ns,wze),e(M,Aze),e(M,Ag),e(Ag,CH),e(CH,Lze),e(Ag,Bze),e(Ag,kB),e(kB,xze),e(Ag,kze),e(M,Rze),e(M,ss),e(ss,MH),e(MH,Sze),e(ss,Pze),e(ss,RB),e(RB,$ze),e(ss,Ize),e(ss,SB),e(SB,jze),e(ss,Nze),e(M,Dze),e(M,ls),e(ls,EH),e(EH,qze),e(ls,Gze),e(ls,PB),e(PB,Oze),e(ls,Xze),e(ls,$B),e($B,zze),e(ls,Vze),e(M,Wze),e(M,is),e(is,yH),e(yH,Qze),e(is,Hze),e(is,IB),e(IB,Uze),e(is,Jze),e(is,jB),e(jB,Yze),e(is,Kze),e(M,Zze),e(M,ds),e(ds,wH),e(wH,eVe),e(ds,oVe),e(ds,NB),e(NB,rVe),e(ds,tVe),e(ds,DB),e(DB,aVe),e(ds,nVe),e(M,sVe),e(M,cs),e(cs,AH),e(AH,lVe),e(cs,iVe),e(cs,qB),e(qB,dVe),e(cs,cVe),e(cs,GB),e(GB,fVe),e(cs,mVe),e(M,gVe),e(M,fs),e(fs,LH),e(LH,hVe),e(fs,pVe),e(fs,OB),e(OB,_Ve),e(fs,uVe),e(fs,XB),e(XB,bVe),e(fs,vVe),e(M,TVe),e(M,Lg),e(Lg,BH),e(BH,FVe),e(Lg,CVe),e(Lg,zB),e(zB,MVe),e(Lg,EVe),e(M,yVe),e(M,ms),e(ms,xH),e(xH,wVe),e(ms,AVe),e(ms,VB),e(VB,LVe),e(ms,BVe),e(ms,WB),e(WB,xVe),e(ms,kVe),e(M,RVe),e(M,Bg),e(Bg,kH),e(kH,SVe),e(Bg,PVe),e(Bg,QB),e(QB,$Ve),e(Bg,IVe),e(M,jVe),e(M,xg),e(xg,RH),e(RH,NVe),e(xg,DVe),e(xg,HB),e(HB,qVe),e(xg,GVe),e(M,OVe),e(M,gs),e(gs,SH),e(SH,XVe),e(gs,zVe),e(gs,UB),e(UB,VVe),e(gs,WVe),e(gs,JB),e(JB,QVe),e(gs,HVe),e(M,UVe),e(M,hs),e(hs,PH),e(PH,JVe),e(hs,YVe),e(hs,YB),e(YB,KVe),e(hs,ZVe),e(hs,KB),e(KB,eWe),e(hs,oWe),e(M,rWe),e(M,kg),e(kg,$H),e($H,tWe),e(kg,aWe),e(kg,ZB),e(ZB,nWe),e(kg,sWe),e(M,lWe),e(M,ps),e(ps,IH),e(IH,iWe),e(ps,dWe),e(ps,ex),e(ex,cWe),e(ps,fWe),e(ps,ox),e(ox,mWe),e(ps,gWe),e(M,hWe),e(M,_s),e(_s,jH),e(jH,pWe),e(_s,_We),e(_s,rx),e(rx,uWe),e(_s,bWe),e(_s,tx),e(tx,vWe),e(_s,TWe),e(M,FWe),e(M,us),e(us,NH),e(NH,CWe),e(us,MWe),e(us,ax),e(ax,EWe),e(us,yWe),e(us,nx),e(nx,wWe),e(us,AWe),e(M,LWe),e(M,bs),e(bs,DH),e(DH,BWe),e(bs,xWe),e(bs,sx),e(sx,kWe),e(bs,RWe),e(bs,lx),e(lx,SWe),e(bs,PWe),e(M,$We),e(M,vs),e(vs,qH),e(qH,IWe),e(vs,jWe),e(vs,ix),e(ix,NWe),e(vs,DWe),e(vs,dx),e(dx,qWe),e(vs,GWe),e(M,OWe),e(M,Rg),e(Rg,GH),e(GH,XWe),e(Rg,zWe),e(Rg,cx),e(cx,VWe),e(Rg,WWe),e(M,QWe),e(M,Sg),e(Sg,OH),e(OH,HWe),e(Sg,UWe),e(Sg,fx),e(fx,JWe),e(Sg,YWe),e(M,KWe),e(M,Pg),e(Pg,XH),e(XH,ZWe),e(Pg,eQe),e(Pg,mx),e(mx,oQe),e(Pg,rQe),e(M,tQe),e(M,$g),e($g,zH),e(zH,aQe),e($g,nQe),e($g,gx),e(gx,sQe),e($g,lQe),e(M,iQe),e(M,Ts),e(Ts,VH),e(VH,dQe),e(Ts,cQe),e(Ts,hx),e(hx,fQe),e(Ts,mQe),e(Ts,px),e(px,gQe),e(Ts,hQe),e(M,pQe),e(M,Ig),e(Ig,WH),e(WH,_Qe),e(Ig,uQe),e(Ig,_x),e(_x,bQe),e(Ig,vQe),e(M,TQe),e(M,Fs),e(Fs,QH),e(QH,FQe),e(Fs,CQe),e(Fs,ux),e(ux,MQe),e(Fs,EQe),e(Fs,bx),e(bx,yQe),e(Fs,wQe),e(M,AQe),e(M,Cs),e(Cs,HH),e(HH,LQe),e(Cs,BQe),e(Cs,vx),e(vx,xQe),e(Cs,kQe),e(Cs,Tx),e(Tx,RQe),e(Cs,SQe),e(M,PQe),e(M,Ms),e(Ms,UH),e(UH,$Qe),e(Ms,IQe),e(Ms,Fx),e(Fx,jQe),e(Ms,NQe),e(Ms,Cx),e(Cx,DQe),e(Ms,qQe),e(M,GQe),e(M,Es),e(Es,JH),e(JH,OQe),e(Es,XQe),e(Es,Mx),e(Mx,zQe),e(Es,VQe),e(Es,Ex),e(Ex,WQe),e(Es,QQe),e(M,HQe),e(M,ys),e(ys,YH),e(YH,UQe),e(ys,JQe),e(ys,yx),e(yx,YQe),e(ys,KQe),e(ys,wx),e(wx,ZQe),e(ys,eHe),e(M,oHe),e(M,jg),e(jg,KH),e(KH,rHe),e(jg,tHe),e(jg,Ax),e(Ax,aHe),e(jg,nHe),e(M,sHe),e(M,Ng),e(Ng,ZH),e(ZH,lHe),e(Ng,iHe),e(Ng,Lx),e(Lx,dHe),e(Ng,cHe),e(M,fHe),e(M,ws),e(ws,eU),e(eU,mHe),e(ws,gHe),e(ws,Bx),e(Bx,hHe),e(ws,pHe),e(ws,xx),e(xx,_He),e(ws,uHe),e(M,bHe),e(M,As),e(As,oU),e(oU,vHe),e(As,THe),e(As,kx),e(kx,FHe),e(As,CHe),e(As,Rx),e(Rx,MHe),e(As,EHe),e(M,yHe),e(M,Ls),e(Ls,rU),e(rU,wHe),e(Ls,AHe),e(Ls,Sx),e(Sx,LHe),e(Ls,BHe),e(Ls,Px),e(Px,xHe),e(Ls,kHe),e(M,RHe),e(M,Dg),e(Dg,tU),e(tU,SHe),e(Dg,PHe),e(Dg,$x),e($x,$He),e(Dg,IHe),e(M,jHe),e(M,qg),e(qg,aU),e(aU,NHe),e(qg,DHe),e(qg,Ix),e(Ix,qHe),e(qg,GHe),e(M,OHe),e(M,Gg),e(Gg,nU),e(nU,XHe),e(Gg,zHe),e(Gg,jx),e(jx,VHe),e(Gg,WHe),e(M,QHe),e(M,Og),e(Og,sU),e(sU,HHe),e(Og,UHe),e(Og,Nx),e(Nx,JHe),e(Og,YHe),e(M,KHe),e(M,Bs),e(Bs,lU),e(lU,ZHe),e(Bs,eUe),e(Bs,Dx),e(Dx,oUe),e(Bs,rUe),e(Bs,qx),e(qx,tUe),e(Bs,aUe),e(M,nUe),e(M,Xg),e(Xg,iU),e(iU,sUe),e(Xg,lUe),e(Xg,Gx),e(Gx,iUe),e(Xg,dUe),e(M,cUe),e(M,zg),e(zg,dU),e(dU,fUe),e(zg,mUe),e(zg,Ox),e(Ox,gUe),e(zg,hUe),e(M,pUe),e(M,xs),e(xs,cU),e(cU,_Ue),e(xs,uUe),e(xs,Xx),e(Xx,bUe),e(xs,vUe),e(xs,zx),e(zx,TUe),e(xs,FUe),e(M,CUe),e(M,ks),e(ks,fU),e(fU,MUe),e(ks,EUe),e(ks,Vx),e(Vx,yUe),e(ks,wUe),e(ks,Wx),e(Wx,AUe),e(ks,LUe),e(mo,BUe),e(mo,mU),e(mU,xUe),e(mo,kUe),g(FE,mo,null),e(Oo,RUe),e(Oo,Vg),g(CE,Vg,null),e(Vg,SUe),e(Vg,gU),e(gU,PUe),b(d,F7e,u),b(d,Ni,u),e(Ni,Wg),e(Wg,hU),g(ME,hU,null),e(Ni,$Ue),e(Ni,pU),e(pU,IUe),b(d,C7e,u),b(d,Xo,u),g(EE,Xo,null),e(Xo,jUe),e(Xo,yE),e(yE,NUe),e(yE,Qx),e(Qx,DUe),e(yE,qUe),e(Xo,GUe),e(Xo,wE),e(wE,OUe),e(wE,_U),e(_U,XUe),e(wE,zUe),e(Xo,VUe),e(Xo,Le),g(AE,Le,null),e(Le,WUe),e(Le,uU),e(uU,QUe),e(Le,HUe),e(Le,Na),e(Na,UUe),e(Na,bU),e(bU,JUe),e(Na,YUe),e(Na,vU),e(vU,KUe),e(Na,ZUe),e(Na,TU),e(TU,eJe),e(Na,oJe),e(Le,rJe),e(Le,se),e(se,Qg),e(Qg,FU),e(FU,tJe),e(Qg,aJe),e(Qg,Hx),e(Hx,nJe),e(Qg,sJe),e(se,lJe),e(se,Hg),e(Hg,CU),e(CU,iJe),e(Hg,dJe),e(Hg,Ux),e(Ux,cJe),e(Hg,fJe),e(se,mJe),e(se,Ug),e(Ug,MU),e(MU,gJe),e(Ug,hJe),e(Ug,Jx),e(Jx,pJe),e(Ug,_Je),e(se,uJe),e(se,Jg),e(Jg,EU),e(EU,bJe),e(Jg,vJe),e(Jg,Yx),e(Yx,TJe),e(Jg,FJe),e(se,CJe),e(se,Yg),e(Yg,yU),e(yU,MJe),e(Yg,EJe),e(Yg,Kx),e(Kx,yJe),e(Yg,wJe),e(se,AJe),e(se,Kg),e(Kg,wU),e(wU,LJe),e(Kg,BJe),e(Kg,Zx),e(Zx,xJe),e(Kg,kJe),e(se,RJe),e(se,Zg),e(Zg,AU),e(AU,SJe),e(Zg,PJe),e(Zg,ek),e(ek,$Je),e(Zg,IJe),e(se,jJe),e(se,eh),e(eh,LU),e(LU,NJe),e(eh,DJe),e(eh,ok),e(ok,qJe),e(eh,GJe),e(se,OJe),e(se,oh),e(oh,BU),e(BU,XJe),e(oh,zJe),e(oh,rk),e(rk,VJe),e(oh,WJe),e(se,QJe),e(se,rh),e(rh,xU),e(xU,HJe),e(rh,UJe),e(rh,tk),e(tk,JJe),e(rh,YJe),e(se,KJe),e(se,th),e(th,kU),e(kU,ZJe),e(th,eYe),e(th,ak),e(ak,oYe),e(th,rYe),e(se,tYe),e(se,ah),e(ah,RU),e(RU,aYe),e(ah,nYe),e(ah,nk),e(nk,sYe),e(ah,lYe),e(se,iYe),e(se,nh),e(nh,SU),e(SU,dYe),e(nh,cYe),e(nh,sk),e(sk,fYe),e(nh,mYe),e(se,gYe),e(se,sh),e(sh,PU),e(PU,hYe),e(sh,pYe),e(sh,lk),e(lk,_Ye),e(sh,uYe),e(se,bYe),e(se,lh),e(lh,$U),e($U,vYe),e(lh,TYe),e(lh,ik),e(ik,FYe),e(lh,CYe),e(Le,MYe),g(ih,Le,null),e(Le,EYe),e(Le,IU),e(IU,yYe),e(Le,wYe),g(LE,Le,null),e(Xo,AYe),e(Xo,dh),g(BE,dh,null),e(dh,LYe),e(dh,jU),e(jU,BYe),b(d,M7e,u),b(d,Di,u),e(Di,ch),e(ch,NU),g(xE,NU,null),e(Di,xYe),e(Di,DU),e(DU,kYe),b(d,E7e,u),b(d,zo,u),g(kE,zo,null),e(zo,RYe),e(zo,RE),e(RE,SYe),e(RE,dk),e(dk,PYe),e(RE,$Ye),e(zo,IYe),e(zo,SE),e(SE,jYe),e(SE,qU),e(qU,NYe),e(SE,DYe),e(zo,qYe),e(zo,Be),g(PE,Be,null),e(Be,GYe),e(Be,GU),e(GU,OYe),e(Be,XYe),e(Be,qi),e(qi,zYe),e(qi,OU),e(OU,VYe),e(qi,WYe),e(qi,XU),e(XU,QYe),e(qi,HYe),e(Be,UYe),e(Be,we),e(we,fh),e(fh,zU),e(zU,JYe),e(fh,YYe),e(fh,ck),e(ck,KYe),e(fh,ZYe),e(we,eKe),e(we,mh),e(mh,VU),e(VU,oKe),e(mh,rKe),e(mh,fk),e(fk,tKe),e(mh,aKe),e(we,nKe),e(we,gh),e(gh,WU),e(WU,sKe),e(gh,lKe),e(gh,mk),e(mk,iKe),e(gh,dKe),e(we,cKe),e(we,hh),e(hh,QU),e(QU,fKe),e(hh,mKe),e(hh,gk),e(gk,gKe),e(hh,hKe),e(we,pKe),e(we,ph),e(ph,HU),e(HU,_Ke),e(ph,uKe),e(ph,hk),e(hk,bKe),e(ph,vKe),e(we,TKe),e(we,_h),e(_h,UU),e(UU,FKe),e(_h,CKe),e(_h,pk),e(pk,MKe),e(_h,EKe),e(we,yKe),e(we,uh),e(uh,JU),e(JU,wKe),e(uh,AKe),e(uh,_k),e(_k,LKe),e(uh,BKe),e(we,xKe),e(we,bh),e(bh,YU),e(YU,kKe),e(bh,RKe),e(bh,uk),e(uk,SKe),e(bh,PKe),e(Be,$Ke),g(vh,Be,null),e(Be,IKe),e(Be,KU),e(KU,jKe),e(Be,NKe),g($E,Be,null),e(zo,DKe),e(zo,Th),g(IE,Th,null),e(Th,qKe),e(Th,ZU),e(ZU,GKe),b(d,y7e,u),b(d,Gi,u),e(Gi,Fh),e(Fh,eJ),g(jE,eJ,null),e(Gi,OKe),e(Gi,oJ),e(oJ,XKe),b(d,w7e,u),b(d,Vo,u),g(NE,Vo,null),e(Vo,zKe),e(Vo,Oi),e(Oi,VKe),e(Oi,rJ),e(rJ,WKe),e(Oi,QKe),e(Oi,tJ),e(tJ,HKe),e(Oi,UKe),e(Vo,JKe),e(Vo,DE),e(DE,YKe),e(DE,aJ),e(aJ,KKe),e(DE,ZKe),e(Vo,eZe),e(Vo,Nr),g(qE,Nr,null),e(Nr,oZe),e(Nr,nJ),e(nJ,rZe),e(Nr,tZe),e(Nr,Xi),e(Xi,aZe),e(Xi,sJ),e(sJ,nZe),e(Xi,sZe),e(Xi,lJ),e(lJ,lZe),e(Xi,iZe),e(Nr,dZe),e(Nr,iJ),e(iJ,cZe),e(Nr,fZe),g(GE,Nr,null),e(Vo,mZe),e(Vo,xe),g(OE,xe,null),e(xe,gZe),e(xe,dJ),e(dJ,hZe),e(xe,pZe),e(xe,Da),e(Da,_Ze),e(Da,cJ),e(cJ,uZe),e(Da,bZe),e(Da,fJ),e(fJ,vZe),e(Da,TZe),e(Da,mJ),e(mJ,FZe),e(Da,CZe),e(xe,MZe),e(xe,F),e(F,Ch),e(Ch,gJ),e(gJ,EZe),e(Ch,yZe),e(Ch,bk),e(bk,wZe),e(Ch,AZe),e(F,LZe),e(F,Mh),e(Mh,hJ),e(hJ,BZe),e(Mh,xZe),e(Mh,vk),e(vk,kZe),e(Mh,RZe),e(F,SZe),e(F,Eh),e(Eh,pJ),e(pJ,PZe),e(Eh,$Ze),e(Eh,Tk),e(Tk,IZe),e(Eh,jZe),e(F,NZe),e(F,yh),e(yh,_J),e(_J,DZe),e(yh,qZe),e(yh,Fk),e(Fk,GZe),e(yh,OZe),e(F,XZe),e(F,wh),e(wh,uJ),e(uJ,zZe),e(wh,VZe),e(wh,Ck),e(Ck,WZe),e(wh,QZe),e(F,HZe),e(F,Ah),e(Ah,bJ),e(bJ,UZe),e(Ah,JZe),e(Ah,Mk),e(Mk,YZe),e(Ah,KZe),e(F,ZZe),e(F,Lh),e(Lh,vJ),e(vJ,eeo),e(Lh,oeo),e(Lh,Ek),e(Ek,reo),e(Lh,teo),e(F,aeo),e(F,Bh),e(Bh,TJ),e(TJ,neo),e(Bh,seo),e(Bh,yk),e(yk,leo),e(Bh,ieo),e(F,deo),e(F,xh),e(xh,FJ),e(FJ,ceo),e(xh,feo),e(xh,wk),e(wk,meo),e(xh,geo),e(F,heo),e(F,kh),e(kh,CJ),e(CJ,peo),e(kh,_eo),e(kh,Ak),e(Ak,ueo),e(kh,beo),e(F,veo),e(F,Rh),e(Rh,MJ),e(MJ,Teo),e(Rh,Feo),e(Rh,Lk),e(Lk,Ceo),e(Rh,Meo),e(F,Eeo),e(F,Sh),e(Sh,EJ),e(EJ,yeo),e(Sh,weo),e(Sh,Bk),e(Bk,Aeo),e(Sh,Leo),e(F,Beo),e(F,Ph),e(Ph,yJ),e(yJ,xeo),e(Ph,keo),e(Ph,xk),e(xk,Reo),e(Ph,Seo),e(F,Peo),e(F,$h),e($h,wJ),e(wJ,$eo),e($h,Ieo),e($h,kk),e(kk,jeo),e($h,Neo),e(F,Deo),e(F,Ih),e(Ih,AJ),e(AJ,qeo),e(Ih,Geo),e(Ih,Rk),e(Rk,Oeo),e(Ih,Xeo),e(F,zeo),e(F,jh),e(jh,LJ),e(LJ,Veo),e(jh,Weo),e(jh,Sk),e(Sk,Qeo),e(jh,Heo),e(F,Ueo),e(F,Nh),e(Nh,BJ),e(BJ,Jeo),e(Nh,Yeo),e(Nh,Pk),e(Pk,Keo),e(Nh,Zeo),e(F,eoo),e(F,Dh),e(Dh,xJ),e(xJ,ooo),e(Dh,roo),e(Dh,$k),e($k,too),e(Dh,aoo),e(F,noo),e(F,qh),e(qh,kJ),e(kJ,soo),e(qh,loo),e(qh,Ik),e(Ik,ioo),e(qh,doo),e(F,coo),e(F,Gh),e(Gh,RJ),e(RJ,foo),e(Gh,moo),e(Gh,jk),e(jk,goo),e(Gh,hoo),e(F,poo),e(F,Oh),e(Oh,SJ),e(SJ,_oo),e(Oh,uoo),e(Oh,Nk),e(Nk,boo),e(Oh,voo),e(F,Too),e(F,Xh),e(Xh,PJ),e(PJ,Foo),e(Xh,Coo),e(Xh,Dk),e(Dk,Moo),e(Xh,Eoo),e(F,yoo),e(F,zh),e(zh,$J),e($J,woo),e(zh,Aoo),e(zh,qk),e(qk,Loo),e(zh,Boo),e(F,xoo),e(F,Vh),e(Vh,IJ),e(IJ,koo),e(Vh,Roo),e(Vh,Gk),e(Gk,Soo),e(Vh,Poo),e(F,$oo),e(F,Wh),e(Wh,jJ),e(jJ,Ioo),e(Wh,joo),e(Wh,Ok),e(Ok,Noo),e(Wh,Doo),e(F,qoo),e(F,Rs),e(Rs,NJ),e(NJ,Goo),e(Rs,Ooo),e(Rs,Xk),e(Xk,Xoo),e(Rs,zoo),e(Rs,zk),e(zk,Voo),e(Rs,Woo),e(F,Qoo),e(F,Qh),e(Qh,DJ),e(DJ,Hoo),e(Qh,Uoo),e(Qh,Vk),e(Vk,Joo),e(Qh,Yoo),e(F,Koo),e(F,Hh),e(Hh,qJ),e(qJ,Zoo),e(Hh,ero),e(Hh,Wk),e(Wk,oro),e(Hh,rro),e(F,tro),e(F,Uh),e(Uh,GJ),e(GJ,aro),e(Uh,nro),e(Uh,Qk),e(Qk,sro),e(Uh,lro),e(F,iro),e(F,Jh),e(Jh,OJ),e(OJ,dro),e(Jh,cro),e(Jh,Hk),e(Hk,fro),e(Jh,mro),e(F,gro),e(F,Yh),e(Yh,XJ),e(XJ,hro),e(Yh,pro),e(Yh,Uk),e(Uk,_ro),e(Yh,uro),e(F,bro),e(F,Kh),e(Kh,zJ),e(zJ,vro),e(Kh,Tro),e(Kh,Jk),e(Jk,Fro),e(Kh,Cro),e(F,Mro),e(F,Zh),e(Zh,VJ),e(VJ,Ero),e(Zh,yro),e(Zh,Yk),e(Yk,wro),e(Zh,Aro),e(F,Lro),e(F,ep),e(ep,WJ),e(WJ,Bro),e(ep,xro),e(ep,Kk),e(Kk,kro),e(ep,Rro),e(F,Sro),e(F,op),e(op,QJ),e(QJ,Pro),e(op,$ro),e(op,Zk),e(Zk,Iro),e(op,jro),e(F,Nro),e(F,rp),e(rp,HJ),e(HJ,Dro),e(rp,qro),e(rp,eR),e(eR,Gro),e(rp,Oro),e(F,Xro),e(F,tp),e(tp,UJ),e(UJ,zro),e(tp,Vro),e(tp,oR),e(oR,Wro),e(tp,Qro),e(F,Hro),e(F,ap),e(ap,JJ),e(JJ,Uro),e(ap,Jro),e(ap,rR),e(rR,Yro),e(ap,Kro),e(F,Zro),e(F,np),e(np,YJ),e(YJ,eto),e(np,oto),e(np,tR),e(tR,rto),e(np,tto),e(F,ato),e(F,sp),e(sp,KJ),e(KJ,nto),e(sp,sto),e(sp,aR),e(aR,lto),e(sp,ito),e(F,dto),e(F,lp),e(lp,ZJ),e(ZJ,cto),e(lp,fto),e(lp,nR),e(nR,mto),e(lp,gto),e(F,hto),e(F,ip),e(ip,eY),e(eY,pto),e(ip,_to),e(ip,sR),e(sR,uto),e(ip,bto),e(F,vto),e(F,dp),e(dp,oY),e(oY,Tto),e(dp,Fto),e(dp,lR),e(lR,Cto),e(dp,Mto),e(F,Eto),e(F,cp),e(cp,rY),e(rY,yto),e(cp,wto),e(cp,iR),e(iR,Ato),e(cp,Lto),e(F,Bto),e(F,fp),e(fp,tY),e(tY,xto),e(fp,kto),e(fp,dR),e(dR,Rto),e(fp,Sto),e(F,Pto),e(F,mp),e(mp,aY),e(aY,$to),e(mp,Ito),e(mp,cR),e(cR,jto),e(mp,Nto),e(F,Dto),e(F,gp),e(gp,nY),e(nY,qto),e(gp,Gto),e(gp,fR),e(fR,Oto),e(gp,Xto),e(F,zto),e(F,hp),e(hp,sY),e(sY,Vto),e(hp,Wto),e(hp,mR),e(mR,Qto),e(hp,Hto),e(F,Uto),e(F,pp),e(pp,lY),e(lY,Jto),e(pp,Yto),e(pp,gR),e(gR,Kto),e(pp,Zto),e(F,eao),e(F,_p),e(_p,iY),e(iY,oao),e(_p,rao),e(_p,hR),e(hR,tao),e(_p,aao),e(F,nao),e(F,up),e(up,dY),e(dY,sao),e(up,lao),e(up,pR),e(pR,iao),e(up,dao),e(F,cao),e(F,bp),e(bp,cY),e(cY,fao),e(bp,mao),e(bp,_R),e(_R,gao),e(bp,hao),e(F,pao),e(F,vp),e(vp,fY),e(fY,_ao),e(vp,uao),e(vp,uR),e(uR,bao),e(vp,vao),e(F,Tao),e(F,Tp),e(Tp,mY),e(mY,Fao),e(Tp,Cao),e(Tp,bR),e(bR,Mao),e(Tp,Eao),e(F,yao),e(F,Fp),e(Fp,gY),e(gY,wao),e(Fp,Aao),e(Fp,vR),e(vR,Lao),e(Fp,Bao),e(F,xao),e(F,Cp),e(Cp,hY),e(hY,kao),e(Cp,Rao),e(Cp,TR),e(TR,Sao),e(Cp,Pao),e(F,$ao),e(F,Mp),e(Mp,pY),e(pY,Iao),e(Mp,jao),e(Mp,FR),e(FR,Nao),e(Mp,Dao),e(F,qao),e(F,Ep),e(Ep,_Y),e(_Y,Gao),e(Ep,Oao),e(Ep,CR),e(CR,Xao),e(Ep,zao),e(F,Vao),e(F,yp),e(yp,uY),e(uY,Wao),e(yp,Qao),e(yp,MR),e(MR,Hao),e(yp,Uao),e(F,Jao),e(F,wp),e(wp,bY),e(bY,Yao),e(wp,Kao),e(wp,ER),e(ER,Zao),e(wp,eno),e(F,ono),e(F,Ap),e(Ap,vY),e(vY,rno),e(Ap,tno),e(Ap,yR),e(yR,ano),e(Ap,nno),e(F,sno),e(F,Lp),e(Lp,TY),e(TY,lno),e(Lp,ino),e(Lp,wR),e(wR,dno),e(Lp,cno),e(F,fno),e(F,Bp),e(Bp,FY),e(FY,mno),e(Bp,gno),e(Bp,AR),e(AR,hno),e(Bp,pno),e(F,_no),e(F,xp),e(xp,CY),e(CY,uno),e(xp,bno),e(xp,LR),e(LR,vno),e(xp,Tno),e(F,Fno),e(F,kp),e(kp,MY),e(MY,Cno),e(kp,Mno),e(kp,BR),e(BR,Eno),e(kp,yno),e(F,wno),e(F,Rp),e(Rp,EY),e(EY,Ano),e(Rp,Lno),e(Rp,xR),e(xR,Bno),e(Rp,xno),e(F,kno),e(F,Sp),e(Sp,yY),e(yY,Rno),e(Sp,Sno),e(Sp,kR),e(kR,Pno),e(Sp,$no),e(F,Ino),e(F,Pp),e(Pp,wY),e(wY,jno),e(Pp,Nno),e(Pp,RR),e(RR,Dno),e(Pp,qno),e(F,Gno),e(F,$p),e($p,AY),e(AY,Ono),e($p,Xno),e($p,SR),e(SR,zno),e($p,Vno),e(F,Wno),e(F,Ip),e(Ip,LY),e(LY,Qno),e(Ip,Hno),e(Ip,PR),e(PR,Uno),e(Ip,Jno),e(F,Yno),e(F,jp),e(jp,BY),e(BY,Kno),e(jp,Zno),e(jp,$R),e($R,eso),e(jp,oso),e(F,rso),e(F,Np),e(Np,xY),e(xY,tso),e(Np,aso),e(Np,IR),e(IR,nso),e(Np,sso),e(F,lso),e(F,Dp),e(Dp,kY),e(kY,iso),e(Dp,dso),e(Dp,jR),e(jR,cso),e(Dp,fso),e(F,mso),e(F,qp),e(qp,RY),e(RY,gso),e(qp,hso),e(qp,NR),e(NR,pso),e(qp,_so),e(F,uso),e(F,Gp),e(Gp,SY),e(SY,bso),e(Gp,vso),e(Gp,DR),e(DR,Tso),e(Gp,Fso),e(F,Cso),e(F,Op),e(Op,PY),e(PY,Mso),e(Op,Eso),e(Op,qR),e(qR,yso),e(Op,wso),e(F,Aso),e(F,Xp),e(Xp,$Y),e($Y,Lso),e(Xp,Bso),e(Xp,GR),e(GR,xso),e(Xp,kso),e(F,Rso),e(F,zp),e(zp,IY),e(IY,Sso),e(zp,Pso),e(zp,OR),e(OR,$so),e(zp,Iso),e(F,jso),e(F,Vp),e(Vp,jY),e(jY,Nso),e(Vp,Dso),e(Vp,XR),e(XR,qso),e(Vp,Gso),e(F,Oso),e(F,Wp),e(Wp,NY),e(NY,Xso),e(Wp,zso),e(Wp,zR),e(zR,Vso),e(Wp,Wso),e(F,Qso),e(F,Qp),e(Qp,DY),e(DY,Hso),e(Qp,Uso),e(Qp,VR),e(VR,Jso),e(Qp,Yso),e(F,Kso),e(F,Hp),e(Hp,qY),e(qY,Zso),e(Hp,elo),e(Hp,WR),e(WR,olo),e(Hp,rlo),e(F,tlo),e(F,Up),e(Up,GY),e(GY,alo),e(Up,nlo),e(Up,QR),e(QR,slo),e(Up,llo),e(F,ilo),e(F,Jp),e(Jp,OY),e(OY,dlo),e(Jp,clo),e(Jp,HR),e(HR,flo),e(Jp,mlo),e(xe,glo),e(xe,Yp),e(Yp,hlo),e(Yp,XY),e(XY,plo),e(Yp,_lo),e(Yp,zY),e(zY,ulo),e(xe,blo),e(xe,VY),e(VY,vlo),e(xe,Tlo),g(XE,xe,null),b(d,A7e,u),b(d,zi,u),e(zi,Kp),e(Kp,WY),g(zE,WY,null),e(zi,Flo),e(zi,QY),e(QY,Clo),b(d,L7e,u),b(d,Wo,u),g(VE,Wo,null),e(Wo,Mlo),e(Wo,Vi),e(Vi,Elo),e(Vi,HY),e(HY,ylo),e(Vi,wlo),e(Vi,UY),e(UY,Alo),e(Vi,Llo),e(Wo,Blo),e(Wo,WE),e(WE,xlo),e(WE,JY),e(JY,klo),e(WE,Rlo),e(Wo,Slo),e(Wo,Dr),g(QE,Dr,null),e(Dr,Plo),e(Dr,YY),e(YY,$lo),e(Dr,Ilo),e(Dr,Wi),e(Wi,jlo),e(Wi,KY),e(KY,Nlo),e(Wi,Dlo),e(Wi,ZY),e(ZY,qlo),e(Wi,Glo),e(Dr,Olo),e(Dr,eK),e(eK,Xlo),e(Dr,zlo),g(HE,Dr,null),e(Wo,Vlo),e(Wo,ke),g(UE,ke,null),e(ke,Wlo),e(ke,oK),e(oK,Qlo),e(ke,Hlo),e(ke,qa),e(qa,Ulo),e(qa,rK),e(rK,Jlo),e(qa,Ylo),e(qa,tK),e(tK,Klo),e(qa,Zlo),e(qa,aK),e(aK,eio),e(qa,oio),e(ke,rio),e(ke,k),e(k,Zp),e(Zp,nK),e(nK,tio),e(Zp,aio),e(Zp,UR),e(UR,nio),e(Zp,sio),e(k,lio),e(k,e_),e(e_,sK),e(sK,iio),e(e_,dio),e(e_,JR),e(JR,cio),e(e_,fio),e(k,mio),e(k,o_),e(o_,lK),e(lK,gio),e(o_,hio),e(o_,YR),e(YR,pio),e(o_,_io),e(k,uio),e(k,r_),e(r_,iK),e(iK,bio),e(r_,vio),e(r_,KR),e(KR,Tio),e(r_,Fio),e(k,Cio),e(k,t_),e(t_,dK),e(dK,Mio),e(t_,Eio),e(t_,ZR),e(ZR,yio),e(t_,wio),e(k,Aio),e(k,a_),e(a_,cK),e(cK,Lio),e(a_,Bio),e(a_,eS),e(eS,xio),e(a_,kio),e(k,Rio),e(k,n_),e(n_,fK),e(fK,Sio),e(n_,Pio),e(n_,oS),e(oS,$io),e(n_,Iio),e(k,jio),e(k,s_),e(s_,mK),e(mK,Nio),e(s_,Dio),e(s_,rS),e(rS,qio),e(s_,Gio),e(k,Oio),e(k,l_),e(l_,gK),e(gK,Xio),e(l_,zio),e(l_,tS),e(tS,Vio),e(l_,Wio),e(k,Qio),e(k,i_),e(i_,hK),e(hK,Hio),e(i_,Uio),e(i_,aS),e(aS,Jio),e(i_,Yio),e(k,Kio),e(k,d_),e(d_,pK),e(pK,Zio),e(d_,edo),e(d_,nS),e(nS,odo),e(d_,rdo),e(k,tdo),e(k,c_),e(c_,_K),e(_K,ado),e(c_,ndo),e(c_,sS),e(sS,sdo),e(c_,ldo),e(k,ido),e(k,f_),e(f_,uK),e(uK,ddo),e(f_,cdo),e(f_,lS),e(lS,fdo),e(f_,mdo),e(k,gdo),e(k,m_),e(m_,bK),e(bK,hdo),e(m_,pdo),e(m_,iS),e(iS,_do),e(m_,udo),e(k,bdo),e(k,g_),e(g_,vK),e(vK,vdo),e(g_,Tdo),e(g_,dS),e(dS,Fdo),e(g_,Cdo),e(k,Mdo),e(k,h_),e(h_,TK),e(TK,Edo),e(h_,ydo),e(h_,cS),e(cS,wdo),e(h_,Ado),e(k,Ldo),e(k,p_),e(p_,FK),e(FK,Bdo),e(p_,xdo),e(p_,fS),e(fS,kdo),e(p_,Rdo),e(k,Sdo),e(k,__),e(__,CK),e(CK,Pdo),e(__,$do),e(__,mS),e(mS,Ido),e(__,jdo),e(k,Ndo),e(k,u_),e(u_,MK),e(MK,Ddo),e(u_,qdo),e(u_,gS),e(gS,Gdo),e(u_,Odo),e(k,Xdo),e(k,b_),e(b_,EK),e(EK,zdo),e(b_,Vdo),e(b_,hS),e(hS,Wdo),e(b_,Qdo),e(k,Hdo),e(k,v_),e(v_,yK),e(yK,Udo),e(v_,Jdo),e(v_,pS),e(pS,Ydo),e(v_,Kdo),e(k,Zdo),e(k,T_),e(T_,wK),e(wK,eco),e(T_,oco),e(T_,_S),e(_S,rco),e(T_,tco),e(k,aco),e(k,F_),e(F_,AK),e(AK,nco),e(F_,sco),e(F_,uS),e(uS,lco),e(F_,ico),e(k,dco),e(k,C_),e(C_,LK),e(LK,cco),e(C_,fco),e(C_,bS),e(bS,mco),e(C_,gco),e(k,hco),e(k,M_),e(M_,BK),e(BK,pco),e(M_,_co),e(M_,vS),e(vS,uco),e(M_,bco),e(k,vco),e(k,E_),e(E_,xK),e(xK,Tco),e(E_,Fco),e(E_,TS),e(TS,Cco),e(E_,Mco),e(k,Eco),e(k,y_),e(y_,kK),e(kK,yco),e(y_,wco),e(y_,FS),e(FS,Aco),e(y_,Lco),e(k,Bco),e(k,w_),e(w_,RK),e(RK,xco),e(w_,kco),e(w_,CS),e(CS,Rco),e(w_,Sco),e(k,Pco),e(k,A_),e(A_,SK),e(SK,$co),e(A_,Ico),e(A_,MS),e(MS,jco),e(A_,Nco),e(k,Dco),e(k,L_),e(L_,PK),e(PK,qco),e(L_,Gco),e(L_,ES),e(ES,Oco),e(L_,Xco),e(k,zco),e(k,B_),e(B_,$K),e($K,Vco),e(B_,Wco),e(B_,yS),e(yS,Qco),e(B_,Hco),e(k,Uco),e(k,x_),e(x_,IK),e(IK,Jco),e(x_,Yco),e(x_,wS),e(wS,Kco),e(x_,Zco),e(k,efo),e(k,k_),e(k_,jK),e(jK,ofo),e(k_,rfo),e(k_,AS),e(AS,tfo),e(k_,afo),e(k,nfo),e(k,R_),e(R_,NK),e(NK,sfo),e(R_,lfo),e(R_,LS),e(LS,ifo),e(R_,dfo),e(k,cfo),e(k,S_),e(S_,DK),e(DK,ffo),e(S_,mfo),e(S_,BS),e(BS,gfo),e(S_,hfo),e(k,pfo),e(k,P_),e(P_,qK),e(qK,_fo),e(P_,ufo),e(P_,xS),e(xS,bfo),e(P_,vfo),e(k,Tfo),e(k,$_),e($_,GK),e(GK,Ffo),e($_,Cfo),e($_,kS),e(kS,Mfo),e($_,Efo),e(k,yfo),e(k,I_),e(I_,OK),e(OK,wfo),e(I_,Afo),e(I_,RS),e(RS,Lfo),e(I_,Bfo),e(ke,xfo),e(ke,j_),e(j_,kfo),e(j_,XK),e(XK,Rfo),e(j_,Sfo),e(j_,zK),e(zK,Pfo),e(ke,$fo),e(ke,VK),e(VK,Ifo),e(ke,jfo),g(JE,ke,null),b(d,B7e,u),b(d,Qi,u),e(Qi,N_),e(N_,WK),g(YE,WK,null),e(Qi,Nfo),e(Qi,QK),e(QK,Dfo),b(d,x7e,u),b(d,Qo,u),g(KE,Qo,null),e(Qo,qfo),e(Qo,Hi),e(Hi,Gfo),e(Hi,HK),e(HK,Ofo),e(Hi,Xfo),e(Hi,UK),e(UK,zfo),e(Hi,Vfo),e(Qo,Wfo),e(Qo,ZE),e(ZE,Qfo),e(ZE,JK),e(JK,Hfo),e(ZE,Ufo),e(Qo,Jfo),e(Qo,qr),g(e3,qr,null),e(qr,Yfo),e(qr,YK),e(YK,Kfo),e(qr,Zfo),e(qr,Ui),e(Ui,emo),e(Ui,KK),e(KK,omo),e(Ui,rmo),e(Ui,ZK),e(ZK,tmo),e(Ui,amo),e(qr,nmo),e(qr,eZ),e(eZ,smo),e(qr,lmo),g(o3,qr,null),e(Qo,imo),e(Qo,Re),g(r3,Re,null),e(Re,dmo),e(Re,oZ),e(oZ,cmo),e(Re,fmo),e(Re,Ga),e(Ga,mmo),e(Ga,rZ),e(rZ,gmo),e(Ga,hmo),e(Ga,tZ),e(tZ,pmo),e(Ga,_mo),e(Ga,aZ),e(aZ,umo),e(Ga,bmo),e(Re,vmo),e(Re,$),e($,D_),e(D_,nZ),e(nZ,Tmo),e(D_,Fmo),e(D_,SS),e(SS,Cmo),e(D_,Mmo),e($,Emo),e($,q_),e(q_,sZ),e(sZ,ymo),e(q_,wmo),e(q_,PS),e(PS,Amo),e(q_,Lmo),e($,Bmo),e($,G_),e(G_,lZ),e(lZ,xmo),e(G_,kmo),e(G_,$S),e($S,Rmo),e(G_,Smo),e($,Pmo),e($,O_),e(O_,iZ),e(iZ,$mo),e(O_,Imo),e(O_,IS),e(IS,jmo),e(O_,Nmo),e($,Dmo),e($,X_),e(X_,dZ),e(dZ,qmo),e(X_,Gmo),e(X_,jS),e(jS,Omo),e(X_,Xmo),e($,zmo),e($,z_),e(z_,cZ),e(cZ,Vmo),e(z_,Wmo),e(z_,NS),e(NS,Qmo),e(z_,Hmo),e($,Umo),e($,V_),e(V_,fZ),e(fZ,Jmo),e(V_,Ymo),e(V_,DS),e(DS,Kmo),e(V_,Zmo),e($,ego),e($,W_),e(W_,mZ),e(mZ,ogo),e(W_,rgo),e(W_,qS),e(qS,tgo),e(W_,ago),e($,ngo),e($,Q_),e(Q_,gZ),e(gZ,sgo),e(Q_,lgo),e(Q_,GS),e(GS,igo),e(Q_,dgo),e($,cgo),e($,H_),e(H_,hZ),e(hZ,fgo),e(H_,mgo),e(H_,OS),e(OS,ggo),e(H_,hgo),e($,pgo),e($,U_),e(U_,pZ),e(pZ,_go),e(U_,ugo),e(U_,XS),e(XS,bgo),e(U_,vgo),e($,Tgo),e($,J_),e(J_,_Z),e(_Z,Fgo),e(J_,Cgo),e(J_,zS),e(zS,Mgo),e(J_,Ego),e($,ygo),e($,Y_),e(Y_,uZ),e(uZ,wgo),e(Y_,Ago),e(Y_,VS),e(VS,Lgo),e(Y_,Bgo),e($,xgo),e($,K_),e(K_,bZ),e(bZ,kgo),e(K_,Rgo),e(K_,WS),e(WS,Sgo),e(K_,Pgo),e($,$go),e($,Z_),e(Z_,vZ),e(vZ,Igo),e(Z_,jgo),e(Z_,QS),e(QS,Ngo),e(Z_,Dgo),e($,qgo),e($,eu),e(eu,TZ),e(TZ,Ggo),e(eu,Ogo),e(eu,HS),e(HS,Xgo),e(eu,zgo),e($,Vgo),e($,ou),e(ou,FZ),e(FZ,Wgo),e(ou,Qgo),e(ou,US),e(US,Hgo),e(ou,Ugo),e($,Jgo),e($,ru),e(ru,CZ),e(CZ,Ygo),e(ru,Kgo),e(ru,JS),e(JS,Zgo),e(ru,eho),e($,oho),e($,tu),e(tu,MZ),e(MZ,rho),e(tu,tho),e(tu,YS),e(YS,aho),e(tu,nho),e($,sho),e($,au),e(au,EZ),e(EZ,lho),e(au,iho),e(au,KS),e(KS,dho),e(au,cho),e($,fho),e($,nu),e(nu,yZ),e(yZ,mho),e(nu,gho),e(nu,ZS),e(ZS,hho),e(nu,pho),e($,_ho),e($,su),e(su,wZ),e(wZ,uho),e(su,bho),e(su,eP),e(eP,vho),e(su,Tho),e($,Fho),e($,lu),e(lu,AZ),e(AZ,Cho),e(lu,Mho),e(lu,oP),e(oP,Eho),e(lu,yho),e($,who),e($,iu),e(iu,LZ),e(LZ,Aho),e(iu,Lho),e(iu,rP),e(rP,Bho),e(iu,xho),e($,kho),e($,du),e(du,BZ),e(BZ,Rho),e(du,Sho),e(du,tP),e(tP,Pho),e(du,$ho),e($,Iho),e($,cu),e(cu,xZ),e(xZ,jho),e(cu,Nho),e(cu,aP),e(aP,Dho),e(cu,qho),e($,Gho),e($,fu),e(fu,kZ),e(kZ,Oho),e(fu,Xho),e(fu,nP),e(nP,zho),e(fu,Vho),e($,Who),e($,mu),e(mu,RZ),e(RZ,Qho),e(mu,Hho),e(mu,sP),e(sP,Uho),e(mu,Jho),e($,Yho),e($,gu),e(gu,SZ),e(SZ,Kho),e(gu,Zho),e(gu,lP),e(lP,epo),e(gu,opo),e($,rpo),e($,hu),e(hu,PZ),e(PZ,tpo),e(hu,apo),e(hu,iP),e(iP,npo),e(hu,spo),e($,lpo),e($,pu),e(pu,$Z),e($Z,ipo),e(pu,dpo),e(pu,dP),e(dP,cpo),e(pu,fpo),e($,mpo),e($,_u),e(_u,IZ),e(IZ,gpo),e(_u,hpo),e(_u,cP),e(cP,ppo),e(_u,_po),e($,upo),e($,uu),e(uu,jZ),e(jZ,bpo),e(uu,vpo),e(uu,fP),e(fP,Tpo),e(uu,Fpo),e($,Cpo),e($,bu),e(bu,NZ),e(NZ,Mpo),e(bu,Epo),e(bu,mP),e(mP,ypo),e(bu,wpo),e(Re,Apo),e(Re,vu),e(vu,Lpo),e(vu,DZ),e(DZ,Bpo),e(vu,xpo),e(vu,qZ),e(qZ,kpo),e(Re,Rpo),e(Re,GZ),e(GZ,Spo),e(Re,Ppo),g(t3,Re,null),b(d,k7e,u),b(d,Ji,u),e(Ji,Tu),e(Tu,OZ),g(a3,OZ,null),e(Ji,$po),e(Ji,XZ),e(XZ,Ipo),b(d,R7e,u),b(d,Ho,u),g(n3,Ho,null),e(Ho,jpo),e(Ho,Yi),e(Yi,Npo),e(Yi,zZ),e(zZ,Dpo),e(Yi,qpo),e(Yi,VZ),e(VZ,Gpo),e(Yi,Opo),e(Ho,Xpo),e(Ho,s3),e(s3,zpo),e(s3,WZ),e(WZ,Vpo),e(s3,Wpo),e(Ho,Qpo),e(Ho,Gr),g(l3,Gr,null),e(Gr,Hpo),e(Gr,QZ),e(QZ,Upo),e(Gr,Jpo),e(Gr,Ki),e(Ki,Ypo),e(Ki,HZ),e(HZ,Kpo),e(Ki,Zpo),e(Ki,UZ),e(UZ,e_o),e(Ki,o_o),e(Gr,r_o),e(Gr,JZ),e(JZ,t_o),e(Gr,a_o),g(i3,Gr,null),e(Ho,n_o),e(Ho,Se),g(d3,Se,null),e(Se,s_o),e(Se,YZ),e(YZ,l_o),e(Se,i_o),e(Se,Oa),e(Oa,d_o),e(Oa,KZ),e(KZ,c_o),e(Oa,f_o),e(Oa,ZZ),e(ZZ,m_o),e(Oa,g_o),e(Oa,eee),e(eee,h_o),e(Oa,p_o),e(Se,__o),e(Se,I),e(I,Fu),e(Fu,oee),e(oee,u_o),e(Fu,b_o),e(Fu,gP),e(gP,v_o),e(Fu,T_o),e(I,F_o),e(I,Cu),e(Cu,ree),e(ree,C_o),e(Cu,M_o),e(Cu,hP),e(hP,E_o),e(Cu,y_o),e(I,w_o),e(I,Mu),e(Mu,tee),e(tee,A_o),e(Mu,L_o),e(Mu,pP),e(pP,B_o),e(Mu,x_o),e(I,k_o),e(I,Eu),e(Eu,aee),e(aee,R_o),e(Eu,S_o),e(Eu,_P),e(_P,P_o),e(Eu,$_o),e(I,I_o),e(I,yu),e(yu,nee),e(nee,j_o),e(yu,N_o),e(yu,uP),e(uP,D_o),e(yu,q_o),e(I,G_o),e(I,wu),e(wu,see),e(see,O_o),e(wu,X_o),e(wu,bP),e(bP,z_o),e(wu,V_o),e(I,W_o),e(I,Au),e(Au,lee),e(lee,Q_o),e(Au,H_o),e(Au,vP),e(vP,U_o),e(Au,J_o),e(I,Y_o),e(I,Lu),e(Lu,iee),e(iee,K_o),e(Lu,Z_o),e(Lu,TP),e(TP,euo),e(Lu,ouo),e(I,ruo),e(I,Bu),e(Bu,dee),e(dee,tuo),e(Bu,auo),e(Bu,FP),e(FP,nuo),e(Bu,suo),e(I,luo),e(I,xu),e(xu,cee),e(cee,iuo),e(xu,duo),e(xu,CP),e(CP,cuo),e(xu,fuo),e(I,muo),e(I,ku),e(ku,fee),e(fee,guo),e(ku,huo),e(ku,MP),e(MP,puo),e(ku,_uo),e(I,uuo),e(I,Ru),e(Ru,mee),e(mee,buo),e(Ru,vuo),e(Ru,EP),e(EP,Tuo),e(Ru,Fuo),e(I,Cuo),e(I,Su),e(Su,gee),e(gee,Muo),e(Su,Euo),e(Su,yP),e(yP,yuo),e(Su,wuo),e(I,Auo),e(I,Pu),e(Pu,hee),e(hee,Luo),e(Pu,Buo),e(Pu,wP),e(wP,xuo),e(Pu,kuo),e(I,Ruo),e(I,$u),e($u,pee),e(pee,Suo),e($u,Puo),e($u,AP),e(AP,$uo),e($u,Iuo),e(I,juo),e(I,Iu),e(Iu,_ee),e(_ee,Nuo),e(Iu,Duo),e(Iu,LP),e(LP,quo),e(Iu,Guo),e(I,Ouo),e(I,ju),e(ju,uee),e(uee,Xuo),e(ju,zuo),e(ju,BP),e(BP,Vuo),e(ju,Wuo),e(I,Quo),e(I,Nu),e(Nu,bee),e(bee,Huo),e(Nu,Uuo),e(Nu,xP),e(xP,Juo),e(Nu,Yuo),e(I,Kuo),e(I,Du),e(Du,vee),e(vee,Zuo),e(Du,e5o),e(Du,kP),e(kP,o5o),e(Du,r5o),e(I,t5o),e(I,qu),e(qu,Tee),e(Tee,a5o),e(qu,n5o),e(qu,RP),e(RP,s5o),e(qu,l5o),e(I,i5o),e(I,Gu),e(Gu,Fee),e(Fee,d5o),e(Gu,c5o),e(Gu,SP),e(SP,f5o),e(Gu,m5o),e(I,g5o),e(I,Ou),e(Ou,Cee),e(Cee,h5o),e(Ou,p5o),e(Ou,PP),e(PP,_5o),e(Ou,u5o),e(I,b5o),e(I,Xu),e(Xu,Mee),e(Mee,v5o),e(Xu,T5o),e(Xu,$P),e($P,F5o),e(Xu,C5o),e(I,M5o),e(I,zu),e(zu,Eee),e(Eee,E5o),e(zu,y5o),e(zu,IP),e(IP,w5o),e(zu,A5o),e(I,L5o),e(I,Vu),e(Vu,yee),e(yee,B5o),e(Vu,x5o),e(Vu,jP),e(jP,k5o),e(Vu,R5o),e(I,S5o),e(I,Wu),e(Wu,wee),e(wee,P5o),e(Wu,$5o),e(Wu,NP),e(NP,I5o),e(Wu,j5o),e(I,N5o),e(I,Qu),e(Qu,Aee),e(Aee,D5o),e(Qu,q5o),e(Qu,DP),e(DP,G5o),e(Qu,O5o),e(I,X5o),e(I,Hu),e(Hu,Lee),e(Lee,z5o),e(Hu,V5o),e(Hu,qP),e(qP,W5o),e(Hu,Q5o),e(I,H5o),e(I,Uu),e(Uu,Bee),e(Bee,U5o),e(Uu,J5o),e(Uu,GP),e(GP,Y5o),e(Uu,K5o),e(I,Z5o),e(I,Ju),e(Ju,xee),e(xee,e2o),e(Ju,o2o),e(Ju,kee),e(kee,r2o),e(Ju,t2o),e(I,a2o),e(I,Yu),e(Yu,Ree),e(Ree,n2o),e(Yu,s2o),e(Yu,OP),e(OP,l2o),e(Yu,i2o),e(I,d2o),e(I,Ku),e(Ku,See),e(See,c2o),e(Ku,f2o),e(Ku,XP),e(XP,m2o),e(Ku,g2o),e(I,h2o),e(I,Zu),e(Zu,Pee),e(Pee,p2o),e(Zu,_2o),e(Zu,zP),e(zP,u2o),e(Zu,b2o),e(I,v2o),e(I,e5),e(e5,$ee),e($ee,T2o),e(e5,F2o),e(e5,VP),e(VP,C2o),e(e5,M2o),e(Se,E2o),e(Se,o5),e(o5,y2o),e(o5,Iee),e(Iee,w2o),e(o5,A2o),e(o5,jee),e(jee,L2o),e(Se,B2o),e(Se,Nee),e(Nee,x2o),e(Se,k2o),g(c3,Se,null),b(d,S7e,u),b(d,Zi,u),e(Zi,r5),e(r5,Dee),g(f3,Dee,null),e(Zi,R2o),e(Zi,qee),e(qee,S2o),b(d,P7e,u),b(d,Uo,u),g(m3,Uo,null),e(Uo,P2o),e(Uo,ed),e(ed,$2o),e(ed,Gee),e(Gee,I2o),e(ed,j2o),e(ed,Oee),e(Oee,N2o),e(ed,D2o),e(Uo,q2o),e(Uo,g3),e(g3,G2o),e(g3,Xee),e(Xee,O2o),e(g3,X2o),e(Uo,z2o),e(Uo,Or),g(h3,Or,null),e(Or,V2o),e(Or,zee),e(zee,W2o),e(Or,Q2o),e(Or,od),e(od,H2o),e(od,Vee),e(Vee,U2o),e(od,J2o),e(od,Wee),e(Wee,Y2o),e(od,K2o),e(Or,Z2o),e(Or,Qee),e(Qee,e1o),e(Or,o1o),g(p3,Or,null),e(Uo,r1o),e(Uo,Pe),g(_3,Pe,null),e(Pe,t1o),e(Pe,Hee),e(Hee,a1o),e(Pe,n1o),e(Pe,Xa),e(Xa,s1o),e(Xa,Uee),e(Uee,l1o),e(Xa,i1o),e(Xa,Jee),e(Jee,d1o),e(Xa,c1o),e(Xa,Yee),e(Yee,f1o),e(Xa,m1o),e(Pe,g1o),e(Pe,ae),e(ae,t5),e(t5,Kee),e(Kee,h1o),e(t5,p1o),e(t5,WP),e(WP,_1o),e(t5,u1o),e(ae,b1o),e(ae,a5),e(a5,Zee),e(Zee,v1o),e(a5,T1o),e(a5,QP),e(QP,F1o),e(a5,C1o),e(ae,M1o),e(ae,n5),e(n5,eoe),e(eoe,E1o),e(n5,y1o),e(n5,HP),e(HP,w1o),e(n5,A1o),e(ae,L1o),e(ae,s5),e(s5,ooe),e(ooe,B1o),e(s5,x1o),e(s5,UP),e(UP,k1o),e(s5,R1o),e(ae,S1o),e(ae,l5),e(l5,roe),e(roe,P1o),e(l5,$1o),e(l5,JP),e(JP,I1o),e(l5,j1o),e(ae,N1o),e(ae,i5),e(i5,toe),e(toe,D1o),e(i5,q1o),e(i5,YP),e(YP,G1o),e(i5,O1o),e(ae,X1o),e(ae,d5),e(d5,aoe),e(aoe,z1o),e(d5,V1o),e(d5,KP),e(KP,W1o),e(d5,Q1o),e(ae,H1o),e(ae,c5),e(c5,noe),e(noe,U1o),e(c5,J1o),e(c5,ZP),e(ZP,Y1o),e(c5,K1o),e(ae,Z1o),e(ae,f5),e(f5,soe),e(soe,ebo),e(f5,obo),e(f5,e$),e(e$,rbo),e(f5,tbo),e(ae,abo),e(ae,m5),e(m5,loe),e(loe,nbo),e(m5,sbo),e(m5,o$),e(o$,lbo),e(m5,ibo),e(ae,dbo),e(ae,g5),e(g5,ioe),e(ioe,cbo),e(g5,fbo),e(g5,r$),e(r$,mbo),e(g5,gbo),e(ae,hbo),e(ae,h5),e(h5,doe),e(doe,pbo),e(h5,_bo),e(h5,t$),e(t$,ubo),e(h5,bbo),e(ae,vbo),e(ae,p5),e(p5,coe),e(coe,Tbo),e(p5,Fbo),e(p5,a$),e(a$,Cbo),e(p5,Mbo),e(ae,Ebo),e(ae,_5),e(_5,foe),e(foe,ybo),e(_5,wbo),e(_5,n$),e(n$,Abo),e(_5,Lbo),e(ae,Bbo),e(ae,u5),e(u5,moe),e(moe,xbo),e(u5,kbo),e(u5,s$),e(s$,Rbo),e(u5,Sbo),e(ae,Pbo),e(ae,b5),e(b5,goe),e(goe,$bo),e(b5,Ibo),e(b5,l$),e(l$,jbo),e(b5,Nbo),e(Pe,Dbo),e(Pe,v5),e(v5,qbo),e(v5,hoe),e(hoe,Gbo),e(v5,Obo),e(v5,poe),e(poe,Xbo),e(Pe,zbo),e(Pe,_oe),e(_oe,Vbo),e(Pe,Wbo),g(u3,Pe,null),b(d,$7e,u),b(d,rd,u),e(rd,T5),e(T5,uoe),g(b3,uoe,null),e(rd,Qbo),e(rd,boe),e(boe,Hbo),b(d,I7e,u),b(d,Jo,u),g(v3,Jo,null),e(Jo,Ubo),e(Jo,td),e(td,Jbo),e(td,voe),e(voe,Ybo),e(td,Kbo),e(td,Toe),e(Toe,Zbo),e(td,evo),e(Jo,ovo),e(Jo,T3),e(T3,rvo),e(T3,Foe),e(Foe,tvo),e(T3,avo),e(Jo,nvo),e(Jo,Xr),g(F3,Xr,null),e(Xr,svo),e(Xr,Coe),e(Coe,lvo),e(Xr,ivo),e(Xr,ad),e(ad,dvo),e(ad,Moe),e(Moe,cvo),e(ad,fvo),e(ad,Eoe),e(Eoe,mvo),e(ad,gvo),e(Xr,hvo),e(Xr,yoe),e(yoe,pvo),e(Xr,_vo),g(C3,Xr,null),e(Jo,uvo),e(Jo,$e),g(M3,$e,null),e($e,bvo),e($e,woe),e(woe,vvo),e($e,Tvo),e($e,za),e(za,Fvo),e(za,Aoe),e(Aoe,Cvo),e(za,Mvo),e(za,Loe),e(Loe,Evo),e(za,yvo),e(za,Boe),e(Boe,wvo),e(za,Avo),e($e,Lvo),e($e,A),e(A,F5),e(F5,xoe),e(xoe,Bvo),e(F5,xvo),e(F5,i$),e(i$,kvo),e(F5,Rvo),e(A,Svo),e(A,C5),e(C5,koe),e(koe,Pvo),e(C5,$vo),e(C5,d$),e(d$,Ivo),e(C5,jvo),e(A,Nvo),e(A,M5),e(M5,Roe),e(Roe,Dvo),e(M5,qvo),e(M5,c$),e(c$,Gvo),e(M5,Ovo),e(A,Xvo),e(A,E5),e(E5,Soe),e(Soe,zvo),e(E5,Vvo),e(E5,f$),e(f$,Wvo),e(E5,Qvo),e(A,Hvo),e(A,y5),e(y5,Poe),e(Poe,Uvo),e(y5,Jvo),e(y5,m$),e(m$,Yvo),e(y5,Kvo),e(A,Zvo),e(A,w5),e(w5,$oe),e($oe,eTo),e(w5,oTo),e(w5,g$),e(g$,rTo),e(w5,tTo),e(A,aTo),e(A,A5),e(A5,Ioe),e(Ioe,nTo),e(A5,sTo),e(A5,h$),e(h$,lTo),e(A5,iTo),e(A,dTo),e(A,L5),e(L5,joe),e(joe,cTo),e(L5,fTo),e(L5,p$),e(p$,mTo),e(L5,gTo),e(A,hTo),e(A,B5),e(B5,Noe),e(Noe,pTo),e(B5,_To),e(B5,_$),e(_$,uTo),e(B5,bTo),e(A,vTo),e(A,x5),e(x5,Doe),e(Doe,TTo),e(x5,FTo),e(x5,u$),e(u$,CTo),e(x5,MTo),e(A,ETo),e(A,k5),e(k5,qoe),e(qoe,yTo),e(k5,wTo),e(k5,b$),e(b$,ATo),e(k5,LTo),e(A,BTo),e(A,R5),e(R5,Goe),e(Goe,xTo),e(R5,kTo),e(R5,v$),e(v$,RTo),e(R5,STo),e(A,PTo),e(A,S5),e(S5,Ooe),e(Ooe,$To),e(S5,ITo),e(S5,T$),e(T$,jTo),e(S5,NTo),e(A,DTo),e(A,P5),e(P5,Xoe),e(Xoe,qTo),e(P5,GTo),e(P5,F$),e(F$,OTo),e(P5,XTo),e(A,zTo),e(A,$5),e($5,zoe),e(zoe,VTo),e($5,WTo),e($5,C$),e(C$,QTo),e($5,HTo),e(A,UTo),e(A,I5),e(I5,Voe),e(Voe,JTo),e(I5,YTo),e(I5,M$),e(M$,KTo),e(I5,ZTo),e(A,eFo),e(A,j5),e(j5,Woe),e(Woe,oFo),e(j5,rFo),e(j5,E$),e(E$,tFo),e(j5,aFo),e(A,nFo),e(A,N5),e(N5,Qoe),e(Qoe,sFo),e(N5,lFo),e(N5,y$),e(y$,iFo),e(N5,dFo),e(A,cFo),e(A,D5),e(D5,Hoe),e(Hoe,fFo),e(D5,mFo),e(D5,w$),e(w$,gFo),e(D5,hFo),e(A,pFo),e(A,q5),e(q5,Uoe),e(Uoe,_Fo),e(q5,uFo),e(q5,A$),e(A$,bFo),e(q5,vFo),e(A,TFo),e(A,G5),e(G5,Joe),e(Joe,FFo),e(G5,CFo),e(G5,L$),e(L$,MFo),e(G5,EFo),e(A,yFo),e(A,O5),e(O5,Yoe),e(Yoe,wFo),e(O5,AFo),e(O5,B$),e(B$,LFo),e(O5,BFo),e(A,xFo),e(A,X5),e(X5,Koe),e(Koe,kFo),e(X5,RFo),e(X5,x$),e(x$,SFo),e(X5,PFo),e(A,$Fo),e(A,z5),e(z5,Zoe),e(Zoe,IFo),e(z5,jFo),e(z5,k$),e(k$,NFo),e(z5,DFo),e(A,qFo),e(A,V5),e(V5,ere),e(ere,GFo),e(V5,OFo),e(V5,R$),e(R$,XFo),e(V5,zFo),e(A,VFo),e(A,W5),e(W5,ore),e(ore,WFo),e(W5,QFo),e(W5,S$),e(S$,HFo),e(W5,UFo),e(A,JFo),e(A,Q5),e(Q5,rre),e(rre,YFo),e(Q5,KFo),e(Q5,P$),e(P$,ZFo),e(Q5,e9o),e(A,o9o),e(A,H5),e(H5,tre),e(tre,r9o),e(H5,t9o),e(H5,$$),e($$,a9o),e(H5,n9o),e(A,s9o),e(A,U5),e(U5,are),e(are,l9o),e(U5,i9o),e(U5,I$),e(I$,d9o),e(U5,c9o),e(A,f9o),e(A,J5),e(J5,nre),e(nre,m9o),e(J5,g9o),e(J5,j$),e(j$,h9o),e(J5,p9o),e(A,_9o),e(A,Y5),e(Y5,sre),e(sre,u9o),e(Y5,b9o),e(Y5,N$),e(N$,v9o),e(Y5,T9o),e(A,F9o),e(A,K5),e(K5,lre),e(lre,C9o),e(K5,M9o),e(K5,D$),e(D$,E9o),e(K5,y9o),e(A,w9o),e(A,Z5),e(Z5,ire),e(ire,A9o),e(Z5,L9o),e(Z5,q$),e(q$,B9o),e(Z5,x9o),e(A,k9o),e(A,e2),e(e2,dre),e(dre,R9o),e(e2,S9o),e(e2,G$),e(G$,P9o),e(e2,$9o),e(A,I9o),e(A,o2),e(o2,cre),e(cre,j9o),e(o2,N9o),e(o2,O$),e(O$,D9o),e(o2,q9o),e(A,G9o),e(A,r2),e(r2,fre),e(fre,O9o),e(r2,X9o),e(r2,X$),e(X$,z9o),e(r2,V9o),e(A,W9o),e(A,t2),e(t2,mre),e(mre,Q9o),e(t2,H9o),e(t2,z$),e(z$,U9o),e(t2,J9o),e(A,Y9o),e(A,a2),e(a2,gre),e(gre,K9o),e(a2,Z9o),e(a2,V$),e(V$,eCo),e(a2,oCo),e(A,rCo),e(A,n2),e(n2,hre),e(hre,tCo),e(n2,aCo),e(n2,W$),e(W$,nCo),e(n2,sCo),e(A,lCo),e(A,s2),e(s2,pre),e(pre,iCo),e(s2,dCo),e(s2,Q$),e(Q$,cCo),e(s2,fCo),e(A,mCo),e(A,l2),e(l2,_re),e(_re,gCo),e(l2,hCo),e(l2,H$),e(H$,pCo),e(l2,_Co),e(A,uCo),e(A,i2),e(i2,ure),e(ure,bCo),e(i2,vCo),e(i2,U$),e(U$,TCo),e(i2,FCo),e(A,CCo),e(A,d2),e(d2,bre),e(bre,MCo),e(d2,ECo),e(d2,J$),e(J$,yCo),e(d2,wCo),e(A,ACo),e(A,c2),e(c2,vre),e(vre,LCo),e(c2,BCo),e(c2,Y$),e(Y$,xCo),e(c2,kCo),e(A,RCo),e(A,f2),e(f2,Tre),e(Tre,SCo),e(f2,PCo),e(f2,K$),e(K$,$Co),e(f2,ICo),e($e,jCo),e($e,m2),e(m2,NCo),e(m2,Fre),e(Fre,DCo),e(m2,qCo),e(m2,Cre),e(Cre,GCo),e($e,OCo),e($e,Mre),e(Mre,XCo),e($e,zCo),g(E3,$e,null),b(d,j7e,u),b(d,nd,u),e(nd,g2),e(g2,Ere),g(y3,Ere,null),e(nd,VCo),e(nd,yre),e(yre,WCo),b(d,N7e,u),b(d,Yo,u),g(w3,Yo,null),e(Yo,QCo),e(Yo,sd),e(sd,HCo),e(sd,wre),e(wre,UCo),e(sd,JCo),e(sd,Are),e(Are,YCo),e(sd,KCo),e(Yo,ZCo),e(Yo,A3),e(A3,e4o),e(A3,Lre),e(Lre,o4o),e(A3,r4o),e(Yo,t4o),e(Yo,zr),g(L3,zr,null),e(zr,a4o),e(zr,Bre),e(Bre,n4o),e(zr,s4o),e(zr,ld),e(ld,l4o),e(ld,xre),e(xre,i4o),e(ld,d4o),e(ld,kre),e(kre,c4o),e(ld,f4o),e(zr,m4o),e(zr,Rre),e(Rre,g4o),e(zr,h4o),g(B3,zr,null),e(Yo,p4o),e(Yo,Ie),g(x3,Ie,null),e(Ie,_4o),e(Ie,Sre),e(Sre,u4o),e(Ie,b4o),e(Ie,Va),e(Va,v4o),e(Va,Pre),e(Pre,T4o),e(Va,F4o),e(Va,$re),e($re,C4o),e(Va,M4o),e(Va,Ire),e(Ire,E4o),e(Va,y4o),e(Ie,w4o),e(Ie,G),e(G,h2),e(h2,jre),e(jre,A4o),e(h2,L4o),e(h2,Z$),e(Z$,B4o),e(h2,x4o),e(G,k4o),e(G,p2),e(p2,Nre),e(Nre,R4o),e(p2,S4o),e(p2,eI),e(eI,P4o),e(p2,$4o),e(G,I4o),e(G,_2),e(_2,Dre),e(Dre,j4o),e(_2,N4o),e(_2,oI),e(oI,D4o),e(_2,q4o),e(G,G4o),e(G,u2),e(u2,qre),e(qre,O4o),e(u2,X4o),e(u2,rI),e(rI,z4o),e(u2,V4o),e(G,W4o),e(G,b2),e(b2,Gre),e(Gre,Q4o),e(b2,H4o),e(b2,tI),e(tI,U4o),e(b2,J4o),e(G,Y4o),e(G,v2),e(v2,Ore),e(Ore,K4o),e(v2,Z4o),e(v2,aI),e(aI,eMo),e(v2,oMo),e(G,rMo),e(G,T2),e(T2,Xre),e(Xre,tMo),e(T2,aMo),e(T2,nI),e(nI,nMo),e(T2,sMo),e(G,lMo),e(G,F2),e(F2,zre),e(zre,iMo),e(F2,dMo),e(F2,sI),e(sI,cMo),e(F2,fMo),e(G,mMo),e(G,C2),e(C2,Vre),e(Vre,gMo),e(C2,hMo),e(C2,lI),e(lI,pMo),e(C2,_Mo),e(G,uMo),e(G,M2),e(M2,Wre),e(Wre,bMo),e(M2,vMo),e(M2,iI),e(iI,TMo),e(M2,FMo),e(G,CMo),e(G,E2),e(E2,Qre),e(Qre,MMo),e(E2,EMo),e(E2,dI),e(dI,yMo),e(E2,wMo),e(G,AMo),e(G,y2),e(y2,Hre),e(Hre,LMo),e(y2,BMo),e(y2,cI),e(cI,xMo),e(y2,kMo),e(G,RMo),e(G,w2),e(w2,Ure),e(Ure,SMo),e(w2,PMo),e(w2,fI),e(fI,$Mo),e(w2,IMo),e(G,jMo),e(G,A2),e(A2,Jre),e(Jre,NMo),e(A2,DMo),e(A2,mI),e(mI,qMo),e(A2,GMo),e(G,OMo),e(G,L2),e(L2,Yre),e(Yre,XMo),e(L2,zMo),e(L2,gI),e(gI,VMo),e(L2,WMo),e(G,QMo),e(G,B2),e(B2,Kre),e(Kre,HMo),e(B2,UMo),e(B2,hI),e(hI,JMo),e(B2,YMo),e(G,KMo),e(G,x2),e(x2,Zre),e(Zre,ZMo),e(x2,eEo),e(x2,pI),e(pI,oEo),e(x2,rEo),e(G,tEo),e(G,k2),e(k2,ete),e(ete,aEo),e(k2,nEo),e(k2,_I),e(_I,sEo),e(k2,lEo),e(G,iEo),e(G,R2),e(R2,ote),e(ote,dEo),e(R2,cEo),e(R2,uI),e(uI,fEo),e(R2,mEo),e(G,gEo),e(G,S2),e(S2,rte),e(rte,hEo),e(S2,pEo),e(S2,bI),e(bI,_Eo),e(S2,uEo),e(G,bEo),e(G,P2),e(P2,tte),e(tte,vEo),e(P2,TEo),e(P2,vI),e(vI,FEo),e(P2,CEo),e(G,MEo),e(G,$2),e($2,ate),e(ate,EEo),e($2,yEo),e($2,TI),e(TI,wEo),e($2,AEo),e(G,LEo),e(G,I2),e(I2,nte),e(nte,BEo),e(I2,xEo),e(I2,FI),e(FI,kEo),e(I2,REo),e(G,SEo),e(G,j2),e(j2,ste),e(ste,PEo),e(j2,$Eo),e(j2,CI),e(CI,IEo),e(j2,jEo),e(G,NEo),e(G,N2),e(N2,lte),e(lte,DEo),e(N2,qEo),e(N2,MI),e(MI,GEo),e(N2,OEo),e(G,XEo),e(G,D2),e(D2,ite),e(ite,zEo),e(D2,VEo),e(D2,EI),e(EI,WEo),e(D2,QEo),e(G,HEo),e(G,q2),e(q2,dte),e(dte,UEo),e(q2,JEo),e(q2,yI),e(yI,YEo),e(q2,KEo),e(Ie,ZEo),e(Ie,G2),e(G2,e3o),e(G2,cte),e(cte,o3o),e(G2,r3o),e(G2,fte),e(fte,t3o),e(Ie,a3o),e(Ie,mte),e(mte,n3o),e(Ie,s3o),g(k3,Ie,null),b(d,D7e,u),b(d,id,u),e(id,O2),e(O2,gte),g(R3,gte,null),e(id,l3o),e(id,hte),e(hte,i3o),b(d,q7e,u),b(d,Ko,u),g(S3,Ko,null),e(Ko,d3o),e(Ko,dd),e(dd,c3o),e(dd,pte),e(pte,f3o),e(dd,m3o),e(dd,_te),e(_te,g3o),e(dd,h3o),e(Ko,p3o),e(Ko,P3),e(P3,_3o),e(P3,ute),e(ute,u3o),e(P3,b3o),e(Ko,v3o),e(Ko,Vr),g($3,Vr,null),e(Vr,T3o),e(Vr,bte),e(bte,F3o),e(Vr,C3o),e(Vr,cd),e(cd,M3o),e(cd,vte),e(vte,E3o),e(cd,y3o),e(cd,Tte),e(Tte,w3o),e(cd,A3o),e(Vr,L3o),e(Vr,Fte),e(Fte,B3o),e(Vr,x3o),g(I3,Vr,null),e(Ko,k3o),e(Ko,je),g(j3,je,null),e(je,R3o),e(je,Cte),e(Cte,S3o),e(je,P3o),e(je,Wa),e(Wa,$3o),e(Wa,Mte),e(Mte,I3o),e(Wa,j3o),e(Wa,Ete),e(Ete,N3o),e(Wa,D3o),e(Wa,yte),e(yte,q3o),e(Wa,G3o),e(je,O3o),e(je,na),e(na,X2),e(X2,wte),e(wte,X3o),e(X2,z3o),e(X2,wI),e(wI,V3o),e(X2,W3o),e(na,Q3o),e(na,z2),e(z2,Ate),e(Ate,H3o),e(z2,U3o),e(z2,AI),e(AI,J3o),e(z2,Y3o),e(na,K3o),e(na,V2),e(V2,Lte),e(Lte,Z3o),e(V2,eyo),e(V2,LI),e(LI,oyo),e(V2,ryo),e(na,tyo),e(na,W2),e(W2,Bte),e(Bte,ayo),e(W2,nyo),e(W2,BI),e(BI,syo),e(W2,lyo),e(na,iyo),e(na,Q2),e(Q2,xte),e(xte,dyo),e(Q2,cyo),e(Q2,xI),e(xI,fyo),e(Q2,myo),e(je,gyo),e(je,H2),e(H2,hyo),e(H2,kte),e(kte,pyo),e(H2,_yo),e(H2,Rte),e(Rte,uyo),e(je,byo),e(je,Ste),e(Ste,vyo),e(je,Tyo),g(N3,je,null),b(d,G7e,u),b(d,fd,u),e(fd,U2),e(U2,Pte),g(D3,Pte,null),e(fd,Fyo),e(fd,$te),e($te,Cyo),b(d,O7e,u),b(d,Zo,u),g(q3,Zo,null),e(Zo,Myo),e(Zo,md),e(md,Eyo),e(md,Ite),e(Ite,yyo),e(md,wyo),e(md,jte),e(jte,Ayo),e(md,Lyo),e(Zo,Byo),e(Zo,G3),e(G3,xyo),e(G3,Nte),e(Nte,kyo),e(G3,Ryo),e(Zo,Syo),e(Zo,Wr),g(O3,Wr,null),e(Wr,Pyo),e(Wr,Dte),e(Dte,$yo),e(Wr,Iyo),e(Wr,gd),e(gd,jyo),e(gd,qte),e(qte,Nyo),e(gd,Dyo),e(gd,Gte),e(Gte,qyo),e(gd,Gyo),e(Wr,Oyo),e(Wr,Ote),e(Ote,Xyo),e(Wr,zyo),g(X3,Wr,null),e(Zo,Vyo),e(Zo,Ne),g(z3,Ne,null),e(Ne,Wyo),e(Ne,Xte),e(Xte,Qyo),e(Ne,Hyo),e(Ne,Qa),e(Qa,Uyo),e(Qa,zte),e(zte,Jyo),e(Qa,Yyo),e(Qa,Vte),e(Vte,Kyo),e(Qa,Zyo),e(Qa,Wte),e(Wte,ewo),e(Qa,owo),e(Ne,rwo),e(Ne,D),e(D,J2),e(J2,Qte),e(Qte,two),e(J2,awo),e(J2,kI),e(kI,nwo),e(J2,swo),e(D,lwo),e(D,Y2),e(Y2,Hte),e(Hte,iwo),e(Y2,dwo),e(Y2,RI),e(RI,cwo),e(Y2,fwo),e(D,mwo),e(D,K2),e(K2,Ute),e(Ute,gwo),e(K2,hwo),e(K2,SI),e(SI,pwo),e(K2,_wo),e(D,uwo),e(D,Z2),e(Z2,Jte),e(Jte,bwo),e(Z2,vwo),e(Z2,PI),e(PI,Two),e(Z2,Fwo),e(D,Cwo),e(D,e1),e(e1,Yte),e(Yte,Mwo),e(e1,Ewo),e(e1,$I),e($I,ywo),e(e1,wwo),e(D,Awo),e(D,o1),e(o1,Kte),e(Kte,Lwo),e(o1,Bwo),e(o1,II),e(II,xwo),e(o1,kwo),e(D,Rwo),e(D,r1),e(r1,Zte),e(Zte,Swo),e(r1,Pwo),e(r1,jI),e(jI,$wo),e(r1,Iwo),e(D,jwo),e(D,t1),e(t1,eae),e(eae,Nwo),e(t1,Dwo),e(t1,NI),e(NI,qwo),e(t1,Gwo),e(D,Owo),e(D,a1),e(a1,oae),e(oae,Xwo),e(a1,zwo),e(a1,DI),e(DI,Vwo),e(a1,Wwo),e(D,Qwo),e(D,n1),e(n1,rae),e(rae,Hwo),e(n1,Uwo),e(n1,qI),e(qI,Jwo),e(n1,Ywo),e(D,Kwo),e(D,s1),e(s1,tae),e(tae,Zwo),e(s1,eAo),e(s1,GI),e(GI,oAo),e(s1,rAo),e(D,tAo),e(D,l1),e(l1,aae),e(aae,aAo),e(l1,nAo),e(l1,OI),e(OI,sAo),e(l1,lAo),e(D,iAo),e(D,i1),e(i1,nae),e(nae,dAo),e(i1,cAo),e(i1,XI),e(XI,fAo),e(i1,mAo),e(D,gAo),e(D,d1),e(d1,sae),e(sae,hAo),e(d1,pAo),e(d1,zI),e(zI,_Ao),e(d1,uAo),e(D,bAo),e(D,c1),e(c1,lae),e(lae,vAo),e(c1,TAo),e(c1,VI),e(VI,FAo),e(c1,CAo),e(D,MAo),e(D,f1),e(f1,iae),e(iae,EAo),e(f1,yAo),e(f1,WI),e(WI,wAo),e(f1,AAo),e(D,LAo),e(D,m1),e(m1,dae),e(dae,BAo),e(m1,xAo),e(m1,QI),e(QI,kAo),e(m1,RAo),e(D,SAo),e(D,g1),e(g1,cae),e(cae,PAo),e(g1,$Ao),e(g1,HI),e(HI,IAo),e(g1,jAo),e(D,NAo),e(D,h1),e(h1,fae),e(fae,DAo),e(h1,qAo),e(h1,UI),e(UI,GAo),e(h1,OAo),e(D,XAo),e(D,p1),e(p1,mae),e(mae,zAo),e(p1,VAo),e(p1,JI),e(JI,WAo),e(p1,QAo),e(D,HAo),e(D,_1),e(_1,gae),e(gae,UAo),e(_1,JAo),e(_1,YI),e(YI,YAo),e(_1,KAo),e(D,ZAo),e(D,u1),e(u1,hae),e(hae,e6o),e(u1,o6o),e(u1,KI),e(KI,r6o),e(u1,t6o),e(D,a6o),e(D,b1),e(b1,pae),e(pae,n6o),e(b1,s6o),e(b1,ZI),e(ZI,l6o),e(b1,i6o),e(D,d6o),e(D,v1),e(v1,_ae),e(_ae,c6o),e(v1,f6o),e(v1,ej),e(ej,m6o),e(v1,g6o),e(D,h6o),e(D,T1),e(T1,uae),e(uae,p6o),e(T1,_6o),e(T1,oj),e(oj,u6o),e(T1,b6o),e(D,v6o),e(D,F1),e(F1,bae),e(bae,T6o),e(F1,F6o),e(F1,rj),e(rj,C6o),e(F1,M6o),e(D,E6o),e(D,C1),e(C1,vae),e(vae,y6o),e(C1,w6o),e(C1,tj),e(tj,A6o),e(C1,L6o),e(D,B6o),e(D,M1),e(M1,Tae),e(Tae,x6o),e(M1,k6o),e(M1,aj),e(aj,R6o),e(M1,S6o),e(D,P6o),e(D,E1),e(E1,Fae),e(Fae,$6o),e(E1,I6o),e(E1,nj),e(nj,j6o),e(E1,N6o),e(D,D6o),e(D,y1),e(y1,Cae),e(Cae,q6o),e(y1,G6o),e(y1,sj),e(sj,O6o),e(y1,X6o),e(D,z6o),e(D,w1),e(w1,Mae),e(Mae,V6o),e(w1,W6o),e(w1,lj),e(lj,Q6o),e(w1,H6o),e(D,U6o),e(D,A1),e(A1,Eae),e(Eae,J6o),e(A1,Y6o),e(A1,ij),e(ij,K6o),e(A1,Z6o),e(Ne,e0o),e(Ne,L1),e(L1,o0o),e(L1,yae),e(yae,r0o),e(L1,t0o),e(L1,wae),e(wae,a0o),e(Ne,n0o),e(Ne,Aae),e(Aae,s0o),e(Ne,l0o),g(V3,Ne,null),b(d,X7e,u),b(d,hd,u),e(hd,B1),e(B1,Lae),g(W3,Lae,null),e(hd,i0o),e(hd,Bae),e(Bae,d0o),b(d,z7e,u),b(d,er,u),g(Q3,er,null),e(er,c0o),e(er,pd),e(pd,f0o),e(pd,xae),e(xae,m0o),e(pd,g0o),e(pd,kae),e(kae,h0o),e(pd,p0o),e(er,_0o),e(er,H3),e(H3,u0o),e(H3,Rae),e(Rae,b0o),e(H3,v0o),e(er,T0o),e(er,Qr),g(U3,Qr,null),e(Qr,F0o),e(Qr,Sae),e(Sae,C0o),e(Qr,M0o),e(Qr,_d),e(_d,E0o),e(_d,Pae),e(Pae,y0o),e(_d,w0o),e(_d,$ae),e($ae,A0o),e(_d,L0o),e(Qr,B0o),e(Qr,Iae),e(Iae,x0o),e(Qr,k0o),g(J3,Qr,null),e(er,R0o),e(er,De),g(Y3,De,null),e(De,S0o),e(De,jae),e(jae,P0o),e(De,$0o),e(De,Ha),e(Ha,I0o),e(Ha,Nae),e(Nae,j0o),e(Ha,N0o),e(Ha,Dae),e(Dae,D0o),e(Ha,q0o),e(Ha,qae),e(qae,G0o),e(Ha,O0o),e(De,X0o),e(De,R),e(R,x1),e(x1,Gae),e(Gae,z0o),e(x1,V0o),e(x1,dj),e(dj,W0o),e(x1,Q0o),e(R,H0o),e(R,k1),e(k1,Oae),e(Oae,U0o),e(k1,J0o),e(k1,cj),e(cj,Y0o),e(k1,K0o),e(R,Z0o),e(R,R1),e(R1,Xae),e(Xae,eLo),e(R1,oLo),e(R1,fj),e(fj,rLo),e(R1,tLo),e(R,aLo),e(R,S1),e(S1,zae),e(zae,nLo),e(S1,sLo),e(S1,mj),e(mj,lLo),e(S1,iLo),e(R,dLo),e(R,P1),e(P1,Vae),e(Vae,cLo),e(P1,fLo),e(P1,gj),e(gj,mLo),e(P1,gLo),e(R,hLo),e(R,$1),e($1,Wae),e(Wae,pLo),e($1,_Lo),e($1,hj),e(hj,uLo),e($1,bLo),e(R,vLo),e(R,I1),e(I1,Qae),e(Qae,TLo),e(I1,FLo),e(I1,pj),e(pj,CLo),e(I1,MLo),e(R,ELo),e(R,j1),e(j1,Hae),e(Hae,yLo),e(j1,wLo),e(j1,_j),e(_j,ALo),e(j1,LLo),e(R,BLo),e(R,N1),e(N1,Uae),e(Uae,xLo),e(N1,kLo),e(N1,uj),e(uj,RLo),e(N1,SLo),e(R,PLo),e(R,D1),e(D1,Jae),e(Jae,$Lo),e(D1,ILo),e(D1,bj),e(bj,jLo),e(D1,NLo),e(R,DLo),e(R,q1),e(q1,Yae),e(Yae,qLo),e(q1,GLo),e(q1,vj),e(vj,OLo),e(q1,XLo),e(R,zLo),e(R,G1),e(G1,Kae),e(Kae,VLo),e(G1,WLo),e(G1,Tj),e(Tj,QLo),e(G1,HLo),e(R,ULo),e(R,O1),e(O1,Zae),e(Zae,JLo),e(O1,YLo),e(O1,Fj),e(Fj,KLo),e(O1,ZLo),e(R,e7o),e(R,X1),e(X1,ene),e(ene,o7o),e(X1,r7o),e(X1,Cj),e(Cj,t7o),e(X1,a7o),e(R,n7o),e(R,z1),e(z1,one),e(one,s7o),e(z1,l7o),e(z1,Mj),e(Mj,i7o),e(z1,d7o),e(R,c7o),e(R,V1),e(V1,rne),e(rne,f7o),e(V1,m7o),e(V1,Ej),e(Ej,g7o),e(V1,h7o),e(R,p7o),e(R,W1),e(W1,tne),e(tne,_7o),e(W1,u7o),e(W1,yj),e(yj,b7o),e(W1,v7o),e(R,T7o),e(R,Q1),e(Q1,ane),e(ane,F7o),e(Q1,C7o),e(Q1,wj),e(wj,M7o),e(Q1,E7o),e(R,y7o),e(R,H1),e(H1,nne),e(nne,w7o),e(H1,A7o),e(H1,Aj),e(Aj,L7o),e(H1,B7o),e(R,x7o),e(R,U1),e(U1,sne),e(sne,k7o),e(U1,R7o),e(U1,Lj),e(Lj,S7o),e(U1,P7o),e(R,$7o),e(R,J1),e(J1,lne),e(lne,I7o),e(J1,j7o),e(J1,Bj),e(Bj,N7o),e(J1,D7o),e(R,q7o),e(R,Y1),e(Y1,ine),e(ine,G7o),e(Y1,O7o),e(Y1,xj),e(xj,X7o),e(Y1,z7o),e(R,V7o),e(R,K1),e(K1,dne),e(dne,W7o),e(K1,Q7o),e(K1,kj),e(kj,H7o),e(K1,U7o),e(R,J7o),e(R,Z1),e(Z1,cne),e(cne,Y7o),e(Z1,K7o),e(Z1,Rj),e(Rj,Z7o),e(Z1,e8o),e(R,o8o),e(R,eb),e(eb,fne),e(fne,r8o),e(eb,t8o),e(eb,Sj),e(Sj,a8o),e(eb,n8o),e(R,s8o),e(R,ob),e(ob,mne),e(mne,l8o),e(ob,i8o),e(ob,Pj),e(Pj,d8o),e(ob,c8o),e(R,f8o),e(R,rb),e(rb,gne),e(gne,m8o),e(rb,g8o),e(rb,$j),e($j,h8o),e(rb,p8o),e(R,_8o),e(R,tb),e(tb,hne),e(hne,u8o),e(tb,b8o),e(tb,Ij),e(Ij,v8o),e(tb,T8o),e(R,F8o),e(R,ab),e(ab,pne),e(pne,C8o),e(ab,M8o),e(ab,jj),e(jj,E8o),e(ab,y8o),e(R,w8o),e(R,nb),e(nb,_ne),e(_ne,A8o),e(nb,L8o),e(nb,Nj),e(Nj,B8o),e(nb,x8o),e(R,k8o),e(R,sb),e(sb,une),e(une,R8o),e(sb,S8o),e(sb,Dj),e(Dj,P8o),e(sb,$8o),e(R,I8o),e(R,lb),e(lb,bne),e(bne,j8o),e(lb,N8o),e(lb,qj),e(qj,D8o),e(lb,q8o),e(R,G8o),e(R,ib),e(ib,vne),e(vne,O8o),e(ib,X8o),e(ib,Gj),e(Gj,z8o),e(ib,V8o),e(R,W8o),e(R,db),e(db,Tne),e(Tne,Q8o),e(db,H8o),e(db,Oj),e(Oj,U8o),e(db,J8o),e(R,Y8o),e(R,cb),e(cb,Fne),e(Fne,K8o),e(cb,Z8o),e(cb,Xj),e(Xj,eBo),e(cb,oBo),e(R,rBo),e(R,fb),e(fb,Cne),e(Cne,tBo),e(fb,aBo),e(fb,zj),e(zj,nBo),e(fb,sBo),e(R,lBo),e(R,mb),e(mb,Mne),e(Mne,iBo),e(mb,dBo),e(mb,Vj),e(Vj,cBo),e(mb,fBo),e(R,mBo),e(R,gb),e(gb,Ene),e(Ene,gBo),e(gb,hBo),e(gb,Wj),e(Wj,pBo),e(gb,_Bo),e(De,uBo),e(De,hb),e(hb,bBo),e(hb,yne),e(yne,vBo),e(hb,TBo),e(hb,wne),e(wne,FBo),e(De,CBo),e(De,Ane),e(Ane,MBo),e(De,EBo),g(K3,De,null),b(d,V7e,u),b(d,ud,u),e(ud,pb),e(pb,Lne),g(Z3,Lne,null),e(ud,yBo),e(ud,Bne),e(Bne,wBo),b(d,W7e,u),b(d,or,u),g(ey,or,null),e(or,ABo),e(or,bd),e(bd,LBo),e(bd,xne),e(xne,BBo),e(bd,xBo),e(bd,kne),e(kne,kBo),e(bd,RBo),e(or,SBo),e(or,oy),e(oy,PBo),e(oy,Rne),e(Rne,$Bo),e(oy,IBo),e(or,jBo),e(or,Hr),g(ry,Hr,null),e(Hr,NBo),e(Hr,Sne),e(Sne,DBo),e(Hr,qBo),e(Hr,vd),e(vd,GBo),e(vd,Pne),e(Pne,OBo),e(vd,XBo),e(vd,$ne),e($ne,zBo),e(vd,VBo),e(Hr,WBo),e(Hr,Ine),e(Ine,QBo),e(Hr,HBo),g(ty,Hr,null),e(or,UBo),e(or,qe),g(ay,qe,null),e(qe,JBo),e(qe,jne),e(jne,YBo),e(qe,KBo),e(qe,Ua),e(Ua,ZBo),e(Ua,Nne),e(Nne,exo),e(Ua,oxo),e(Ua,Dne),e(Dne,rxo),e(Ua,txo),e(Ua,qne),e(qne,axo),e(Ua,nxo),e(qe,sxo),e(qe,Gne),e(Gne,_b),e(_b,One),e(One,lxo),e(_b,ixo),e(_b,Qj),e(Qj,dxo),e(_b,cxo),e(qe,fxo),e(qe,ub),e(ub,mxo),e(ub,Xne),e(Xne,gxo),e(ub,hxo),e(ub,zne),e(zne,pxo),e(qe,_xo),e(qe,Vne),e(Vne,uxo),e(qe,bxo),g(ny,qe,null),b(d,Q7e,u),b(d,Td,u),e(Td,bb),e(bb,Wne),g(sy,Wne,null),e(Td,vxo),e(Td,Qne),e(Qne,Txo),b(d,H7e,u),b(d,rr,u),g(ly,rr,null),e(rr,Fxo),e(rr,Fd),e(Fd,Cxo),e(Fd,Hne),e(Hne,Mxo),e(Fd,Exo),e(Fd,Une),e(Une,yxo),e(Fd,wxo),e(rr,Axo),e(rr,iy),e(iy,Lxo),e(iy,Jne),e(Jne,Bxo),e(iy,xxo),e(rr,kxo),e(rr,Ur),g(dy,Ur,null),e(Ur,Rxo),e(Ur,Yne),e(Yne,Sxo),e(Ur,Pxo),e(Ur,Cd),e(Cd,$xo),e(Cd,Kne),e(Kne,Ixo),e(Cd,jxo),e(Cd,Zne),e(Zne,Nxo),e(Cd,Dxo),e(Ur,qxo),e(Ur,ese),e(ese,Gxo),e(Ur,Oxo),g(cy,Ur,null),e(rr,Xxo),e(rr,Ge),g(fy,Ge,null),e(Ge,zxo),e(Ge,ose),e(ose,Vxo),e(Ge,Wxo),e(Ge,Ja),e(Ja,Qxo),e(Ja,rse),e(rse,Hxo),e(Ja,Uxo),e(Ja,tse),e(tse,Jxo),e(Ja,Yxo),e(Ja,ase),e(ase,Kxo),e(Ja,Zxo),e(Ge,eko),e(Ge,be),e(be,vb),e(vb,nse),e(nse,oko),e(vb,rko),e(vb,Hj),e(Hj,tko),e(vb,ako),e(be,nko),e(be,Tb),e(Tb,sse),e(sse,sko),e(Tb,lko),e(Tb,Uj),e(Uj,iko),e(Tb,dko),e(be,cko),e(be,Ss),e(Ss,lse),e(lse,fko),e(Ss,mko),e(Ss,Jj),e(Jj,gko),e(Ss,hko),e(Ss,Yj),e(Yj,pko),e(Ss,_ko),e(be,uko),e(be,Fb),e(Fb,ise),e(ise,bko),e(Fb,vko),e(Fb,Kj),e(Kj,Tko),e(Fb,Fko),e(be,Cko),e(be,la),e(la,dse),e(dse,Mko),e(la,Eko),e(la,Zj),e(Zj,yko),e(la,wko),e(la,eN),e(eN,Ako),e(la,Lko),e(la,oN),e(oN,Bko),e(la,xko),e(be,kko),e(be,Cb),e(Cb,cse),e(cse,Rko),e(Cb,Sko),e(Cb,rN),e(rN,Pko),e(Cb,$ko),e(be,Iko),e(be,Mb),e(Mb,fse),e(fse,jko),e(Mb,Nko),e(Mb,tN),e(tN,Dko),e(Mb,qko),e(be,Gko),e(be,Eb),e(Eb,mse),e(mse,Oko),e(Eb,Xko),e(Eb,aN),e(aN,zko),e(Eb,Vko),e(be,Wko),e(be,yb),e(yb,gse),e(gse,Qko),e(yb,Hko),e(yb,nN),e(nN,Uko),e(yb,Jko),e(Ge,Yko),e(Ge,wb),e(wb,Kko),e(wb,hse),e(hse,Zko),e(wb,eRo),e(wb,pse),e(pse,oRo),e(Ge,rRo),e(Ge,_se),e(_se,tRo),e(Ge,aRo),g(my,Ge,null),b(d,U7e,u),b(d,Md,u),e(Md,Ab),e(Ab,use),g(gy,use,null),e(Md,nRo),e(Md,bse),e(bse,sRo),b(d,J7e,u),b(d,tr,u),g(hy,tr,null),e(tr,lRo),e(tr,Ed),e(Ed,iRo),e(Ed,vse),e(vse,dRo),e(Ed,cRo),e(Ed,Tse),e(Tse,fRo),e(Ed,mRo),e(tr,gRo),e(tr,py),e(py,hRo),e(py,Fse),e(Fse,pRo),e(py,_Ro),e(tr,uRo),e(tr,Jr),g(_y,Jr,null),e(Jr,bRo),e(Jr,Cse),e(Cse,vRo),e(Jr,TRo),e(Jr,yd),e(yd,FRo),e(yd,Mse),e(Mse,CRo),e(yd,MRo),e(yd,Ese),e(Ese,ERo),e(yd,yRo),e(Jr,wRo),e(Jr,yse),e(yse,ARo),e(Jr,LRo),g(uy,Jr,null),e(tr,BRo),e(tr,Oe),g(by,Oe,null),e(Oe,xRo),e(Oe,wse),e(wse,kRo),e(Oe,RRo),e(Oe,Ya),e(Ya,SRo),e(Ya,Ase),e(Ase,PRo),e(Ya,$Ro),e(Ya,Lse),e(Lse,IRo),e(Ya,jRo),e(Ya,Bse),e(Bse,NRo),e(Ya,DRo),e(Oe,qRo),e(Oe,xse),e(xse,Lb),e(Lb,kse),e(kse,GRo),e(Lb,ORo),e(Lb,sN),e(sN,XRo),e(Lb,zRo),e(Oe,VRo),e(Oe,Bb),e(Bb,WRo),e(Bb,Rse),e(Rse,QRo),e(Bb,HRo),e(Bb,Sse),e(Sse,URo),e(Oe,JRo),e(Oe,Pse),e(Pse,YRo),e(Oe,KRo),g(vy,Oe,null),b(d,Y7e,u),b(d,wd,u),e(wd,xb),e(xb,$se),g(Ty,$se,null),e(wd,ZRo),e(wd,Ise),e(Ise,eSo),b(d,K7e,u),b(d,ar,u),g(Fy,ar,null),e(ar,oSo),e(ar,Ad),e(Ad,rSo),e(Ad,jse),e(jse,tSo),e(Ad,aSo),e(Ad,Nse),e(Nse,nSo),e(Ad,sSo),e(ar,lSo),e(ar,Cy),e(Cy,iSo),e(Cy,Dse),e(Dse,dSo),e(Cy,cSo),e(ar,fSo),e(ar,Yr),g(My,Yr,null),e(Yr,mSo),e(Yr,qse),e(qse,gSo),e(Yr,hSo),e(Yr,Ld),e(Ld,pSo),e(Ld,Gse),e(Gse,_So),e(Ld,uSo),e(Ld,Ose),e(Ose,bSo),e(Ld,vSo),e(Yr,TSo),e(Yr,Xse),e(Xse,FSo),e(Yr,CSo),g(Ey,Yr,null),e(ar,MSo),e(ar,Xe),g(yy,Xe,null),e(Xe,ESo),e(Xe,zse),e(zse,ySo),e(Xe,wSo),e(Xe,Ka),e(Ka,ASo),e(Ka,Vse),e(Vse,LSo),e(Ka,BSo),e(Ka,Wse),e(Wse,xSo),e(Ka,kSo),e(Ka,Qse),e(Qse,RSo),e(Ka,SSo),e(Xe,PSo),e(Xe,ao),e(ao,kb),e(kb,Hse),e(Hse,$So),e(kb,ISo),e(kb,lN),e(lN,jSo),e(kb,NSo),e(ao,DSo),e(ao,Rb),e(Rb,Use),e(Use,qSo),e(Rb,GSo),e(Rb,iN),e(iN,OSo),e(Rb,XSo),e(ao,zSo),e(ao,Sb),e(Sb,Jse),e(Jse,VSo),e(Sb,WSo),e(Sb,dN),e(dN,QSo),e(Sb,HSo),e(ao,USo),e(ao,Pb),e(Pb,Yse),e(Yse,JSo),e(Pb,YSo),e(Pb,cN),e(cN,KSo),e(Pb,ZSo),e(ao,ePo),e(ao,$b),e($b,Kse),e(Kse,oPo),e($b,rPo),e($b,fN),e(fN,tPo),e($b,aPo),e(ao,nPo),e(ao,Ib),e(Ib,Zse),e(Zse,sPo),e(Ib,lPo),e(Ib,mN),e(mN,iPo),e(Ib,dPo),e(ao,cPo),e(ao,jb),e(jb,ele),e(ele,fPo),e(jb,mPo),e(jb,gN),e(gN,gPo),e(jb,hPo),e(Xe,pPo),e(Xe,Nb),e(Nb,_Po),e(Nb,ole),e(ole,uPo),e(Nb,bPo),e(Nb,rle),e(rle,vPo),e(Xe,TPo),e(Xe,tle),e(tle,FPo),e(Xe,CPo),g(wy,Xe,null),b(d,Z7e,u),b(d,Bd,u),e(Bd,Db),e(Db,ale),g(Ay,ale,null),e(Bd,MPo),e(Bd,nle),e(nle,EPo),b(d,e8e,u),b(d,nr,u),g(Ly,nr,null),e(nr,yPo),e(nr,xd),e(xd,wPo),e(xd,sle),e(sle,APo),e(xd,LPo),e(xd,lle),e(lle,BPo),e(xd,xPo),e(nr,kPo),e(nr,By),e(By,RPo),e(By,ile),e(ile,SPo),e(By,PPo),e(nr,$Po),e(nr,Kr),g(xy,Kr,null),e(Kr,IPo),e(Kr,dle),e(dle,jPo),e(Kr,NPo),e(Kr,kd),e(kd,DPo),e(kd,cle),e(cle,qPo),e(kd,GPo),e(kd,fle),e(fle,OPo),e(kd,XPo),e(Kr,zPo),e(Kr,mle),e(mle,VPo),e(Kr,WPo),g(ky,Kr,null),e(nr,QPo),e(nr,ze),g(Ry,ze,null),e(ze,HPo),e(ze,gle),e(gle,UPo),e(ze,JPo),e(ze,Za),e(Za,YPo),e(Za,hle),e(hle,KPo),e(Za,ZPo),e(Za,ple),e(ple,e$o),e(Za,o$o),e(Za,_le),e(_le,r$o),e(Za,t$o),e(ze,a$o),e(ze,Rd),e(Rd,qb),e(qb,ule),e(ule,n$o),e(qb,s$o),e(qb,hN),e(hN,l$o),e(qb,i$o),e(Rd,d$o),e(Rd,Gb),e(Gb,ble),e(ble,c$o),e(Gb,f$o),e(Gb,pN),e(pN,m$o),e(Gb,g$o),e(Rd,h$o),e(Rd,Ob),e(Ob,vle),e(vle,p$o),e(Ob,_$o),e(Ob,_N),e(_N,u$o),e(Ob,b$o),e(ze,v$o),e(ze,Xb),e(Xb,T$o),e(Xb,Tle),e(Tle,F$o),e(Xb,C$o),e(Xb,Fle),e(Fle,M$o),e(ze,E$o),e(ze,Cle),e(Cle,y$o),e(ze,w$o),g(Sy,ze,null),b(d,o8e,u),b(d,Sd,u),e(Sd,zb),e(zb,Mle),g(Py,Mle,null),e(Sd,A$o),e(Sd,Ele),e(Ele,L$o),b(d,r8e,u),b(d,sr,u),g($y,sr,null),e(sr,B$o),e(sr,Pd),e(Pd,x$o),e(Pd,yle),e(yle,k$o),e(Pd,R$o),e(Pd,wle),e(wle,S$o),e(Pd,P$o),e(sr,$$o),e(sr,Iy),e(Iy,I$o),e(Iy,Ale),e(Ale,j$o),e(Iy,N$o),e(sr,D$o),e(sr,Zr),g(jy,Zr,null),e(Zr,q$o),e(Zr,Lle),e(Lle,G$o),e(Zr,O$o),e(Zr,$d),e($d,X$o),e($d,Ble),e(Ble,z$o),e($d,V$o),e($d,xle),e(xle,W$o),e($d,Q$o),e(Zr,H$o),e(Zr,kle),e(kle,U$o),e(Zr,J$o),g(Ny,Zr,null),e(sr,Y$o),e(sr,Ve),g(Dy,Ve,null),e(Ve,K$o),e(Ve,Rle),e(Rle,Z$o),e(Ve,eIo),e(Ve,en),e(en,oIo),e(en,Sle),e(Sle,rIo),e(en,tIo),e(en,Ple),e(Ple,aIo),e(en,nIo),e(en,$le),e($le,sIo),e(en,lIo),e(Ve,iIo),e(Ve,no),e(no,Vb),e(Vb,Ile),e(Ile,dIo),e(Vb,cIo),e(Vb,uN),e(uN,fIo),e(Vb,mIo),e(no,gIo),e(no,Wb),e(Wb,jle),e(jle,hIo),e(Wb,pIo),e(Wb,bN),e(bN,_Io),e(Wb,uIo),e(no,bIo),e(no,Qb),e(Qb,Nle),e(Nle,vIo),e(Qb,TIo),e(Qb,vN),e(vN,FIo),e(Qb,CIo),e(no,MIo),e(no,Hb),e(Hb,Dle),e(Dle,EIo),e(Hb,yIo),e(Hb,TN),e(TN,wIo),e(Hb,AIo),e(no,LIo),e(no,Ub),e(Ub,qle),e(qle,BIo),e(Ub,xIo),e(Ub,FN),e(FN,kIo),e(Ub,RIo),e(no,SIo),e(no,Jb),e(Jb,Gle),e(Gle,PIo),e(Jb,$Io),e(Jb,CN),e(CN,IIo),e(Jb,jIo),e(no,NIo),e(no,Yb),e(Yb,Ole),e(Ole,DIo),e(Yb,qIo),e(Yb,MN),e(MN,GIo),e(Yb,OIo),e(Ve,XIo),e(Ve,Kb),e(Kb,zIo),e(Kb,Xle),e(Xle,VIo),e(Kb,WIo),e(Kb,zle),e(zle,QIo),e(Ve,HIo),e(Ve,Vle),e(Vle,UIo),e(Ve,JIo),g(qy,Ve,null),b(d,t8e,u),b(d,Id,u),e(Id,Zb),e(Zb,Wle),g(Gy,Wle,null),e(Id,YIo),e(Id,Qle),e(Qle,KIo),b(d,a8e,u),b(d,lr,u),g(Oy,lr,null),e(lr,ZIo),e(lr,jd),e(jd,ejo),e(jd,Hle),e(Hle,ojo),e(jd,rjo),e(jd,Ule),e(Ule,tjo),e(jd,ajo),e(lr,njo),e(lr,Xy),e(Xy,sjo),e(Xy,Jle),e(Jle,ljo),e(Xy,ijo),e(lr,djo),e(lr,et),g(zy,et,null),e(et,cjo),e(et,Yle),e(Yle,fjo),e(et,mjo),e(et,Nd),e(Nd,gjo),e(Nd,Kle),e(Kle,hjo),e(Nd,pjo),e(Nd,Zle),e(Zle,_jo),e(Nd,ujo),e(et,bjo),e(et,eie),e(eie,vjo),e(et,Tjo),g(Vy,et,null),e(lr,Fjo),e(lr,We),g(Wy,We,null),e(We,Cjo),e(We,oie),e(oie,Mjo),e(We,Ejo),e(We,on),e(on,yjo),e(on,rie),e(rie,wjo),e(on,Ajo),e(on,tie),e(tie,Ljo),e(on,Bjo),e(on,aie),e(aie,xjo),e(on,kjo),e(We,Rjo),e(We,Qy),e(Qy,ev),e(ev,nie),e(nie,Sjo),e(ev,Pjo),e(ev,EN),e(EN,$jo),e(ev,Ijo),e(Qy,jjo),e(Qy,ov),e(ov,sie),e(sie,Njo),e(ov,Djo),e(ov,yN),e(yN,qjo),e(ov,Gjo),e(We,Ojo),e(We,rv),e(rv,Xjo),e(rv,lie),e(lie,zjo),e(rv,Vjo),e(rv,iie),e(iie,Wjo),e(We,Qjo),e(We,die),e(die,Hjo),e(We,Ujo),g(Hy,We,null),b(d,n8e,u),b(d,Dd,u),e(Dd,tv),e(tv,cie),g(Uy,cie,null),e(Dd,Jjo),e(Dd,fie),e(fie,Yjo),b(d,s8e,u),b(d,ir,u),g(Jy,ir,null),e(ir,Kjo),e(ir,qd),e(qd,Zjo),e(qd,mie),e(mie,eNo),e(qd,oNo),e(qd,gie),e(gie,rNo),e(qd,tNo),e(ir,aNo),e(ir,Yy),e(Yy,nNo),e(Yy,hie),e(hie,sNo),e(Yy,lNo),e(ir,iNo),e(ir,ot),g(Ky,ot,null),e(ot,dNo),e(ot,pie),e(pie,cNo),e(ot,fNo),e(ot,Gd),e(Gd,mNo),e(Gd,_ie),e(_ie,gNo),e(Gd,hNo),e(Gd,uie),e(uie,pNo),e(Gd,_No),e(ot,uNo),e(ot,bie),e(bie,bNo),e(ot,vNo),g(Zy,ot,null),e(ir,TNo),e(ir,Qe),g(ew,Qe,null),e(Qe,FNo),e(Qe,vie),e(vie,CNo),e(Qe,MNo),e(Qe,rn),e(rn,ENo),e(rn,Tie),e(Tie,yNo),e(rn,wNo),e(rn,Fie),e(Fie,ANo),e(rn,LNo),e(rn,Cie),e(Cie,BNo),e(rn,xNo),e(Qe,kNo),e(Qe,Od),e(Od,av),e(av,Mie),e(Mie,RNo),e(av,SNo),e(av,wN),e(wN,PNo),e(av,$No),e(Od,INo),e(Od,nv),e(nv,Eie),e(Eie,jNo),e(nv,NNo),e(nv,AN),e(AN,DNo),e(nv,qNo),e(Od,GNo),e(Od,sv),e(sv,yie),e(yie,ONo),e(sv,XNo),e(sv,LN),e(LN,zNo),e(sv,VNo),e(Qe,WNo),e(Qe,lv),e(lv,QNo),e(lv,wie),e(wie,HNo),e(lv,UNo),e(lv,Aie),e(Aie,JNo),e(Qe,YNo),e(Qe,Lie),e(Lie,KNo),e(Qe,ZNo),g(ow,Qe,null),b(d,l8e,u),b(d,Xd,u),e(Xd,iv),e(iv,Bie),g(rw,Bie,null),e(Xd,eDo),e(Xd,xie),e(xie,oDo),b(d,i8e,u),b(d,dr,u),g(tw,dr,null),e(dr,rDo),e(dr,zd),e(zd,tDo),e(zd,kie),e(kie,aDo),e(zd,nDo),e(zd,Rie),e(Rie,sDo),e(zd,lDo),e(dr,iDo),e(dr,aw),e(aw,dDo),e(aw,Sie),e(Sie,cDo),e(aw,fDo),e(dr,mDo),e(dr,rt),g(nw,rt,null),e(rt,gDo),e(rt,Pie),e(Pie,hDo),e(rt,pDo),e(rt,Vd),e(Vd,_Do),e(Vd,$ie),e($ie,uDo),e(Vd,bDo),e(Vd,Iie),e(Iie,vDo),e(Vd,TDo),e(rt,FDo),e(rt,jie),e(jie,CDo),e(rt,MDo),g(sw,rt,null),e(dr,EDo),e(dr,He),g(lw,He,null),e(He,yDo),e(He,Nie),e(Nie,wDo),e(He,ADo),e(He,tn),e(tn,LDo),e(tn,Die),e(Die,BDo),e(tn,xDo),e(tn,qie),e(qie,kDo),e(tn,RDo),e(tn,Gie),e(Gie,SDo),e(tn,PDo),e(He,$Do),e(He,Wd),e(Wd,dv),e(dv,Oie),e(Oie,IDo),e(dv,jDo),e(dv,BN),e(BN,NDo),e(dv,DDo),e(Wd,qDo),e(Wd,cv),e(cv,Xie),e(Xie,GDo),e(cv,ODo),e(cv,xN),e(xN,XDo),e(cv,zDo),e(Wd,VDo),e(Wd,fv),e(fv,zie),e(zie,WDo),e(fv,QDo),e(fv,kN),e(kN,HDo),e(fv,UDo),e(He,JDo),e(He,mv),e(mv,YDo),e(mv,Vie),e(Vie,KDo),e(mv,ZDo),e(mv,Wie),e(Wie,eqo),e(He,oqo),e(He,Qie),e(Qie,rqo),e(He,tqo),g(iw,He,null),b(d,d8e,u),b(d,Qd,u),e(Qd,gv),e(gv,Hie),g(dw,Hie,null),e(Qd,aqo),e(Qd,Uie),e(Uie,nqo),b(d,c8e,u),b(d,cr,u),g(cw,cr,null),e(cr,sqo),e(cr,Hd),e(Hd,lqo),e(Hd,Jie),e(Jie,iqo),e(Hd,dqo),e(Hd,Yie),e(Yie,cqo),e(Hd,fqo),e(cr,mqo),e(cr,fw),e(fw,gqo),e(fw,Kie),e(Kie,hqo),e(fw,pqo),e(cr,_qo),e(cr,tt),g(mw,tt,null),e(tt,uqo),e(tt,Zie),e(Zie,bqo),e(tt,vqo),e(tt,Ud),e(Ud,Tqo),e(Ud,ede),e(ede,Fqo),e(Ud,Cqo),e(Ud,ode),e(ode,Mqo),e(Ud,Eqo),e(tt,yqo),e(tt,rde),e(rde,wqo),e(tt,Aqo),g(gw,tt,null),e(cr,Lqo),e(cr,Ue),g(hw,Ue,null),e(Ue,Bqo),e(Ue,tde),e(tde,xqo),e(Ue,kqo),e(Ue,an),e(an,Rqo),e(an,ade),e(ade,Sqo),e(an,Pqo),e(an,nde),e(nde,$qo),e(an,Iqo),e(an,sde),e(sde,jqo),e(an,Nqo),e(Ue,Dqo),e(Ue,lde),e(lde,hv),e(hv,ide),e(ide,qqo),e(hv,Gqo),e(hv,RN),e(RN,Oqo),e(hv,Xqo),e(Ue,zqo),e(Ue,pv),e(pv,Vqo),e(pv,dde),e(dde,Wqo),e(pv,Qqo),e(pv,cde),e(cde,Hqo),e(Ue,Uqo),e(Ue,fde),e(fde,Jqo),e(Ue,Yqo),g(pw,Ue,null),b(d,f8e,u),b(d,Jd,u),e(Jd,_v),e(_v,mde),g(_w,mde,null),e(Jd,Kqo),e(Jd,gde),e(gde,Zqo),b(d,m8e,u),b(d,fr,u),g(uw,fr,null),e(fr,eGo),e(fr,Yd),e(Yd,oGo),e(Yd,hde),e(hde,rGo),e(Yd,tGo),e(Yd,pde),e(pde,aGo),e(Yd,nGo),e(fr,sGo),e(fr,bw),e(bw,lGo),e(bw,_de),e(_de,iGo),e(bw,dGo),e(fr,cGo),e(fr,at),g(vw,at,null),e(at,fGo),e(at,ude),e(ude,mGo),e(at,gGo),e(at,Kd),e(Kd,hGo),e(Kd,bde),e(bde,pGo),e(Kd,_Go),e(Kd,vde),e(vde,uGo),e(Kd,bGo),e(at,vGo),e(at,Tde),e(Tde,TGo),e(at,FGo),g(Tw,at,null),e(fr,CGo),e(fr,Je),g(Fw,Je,null),e(Je,MGo),e(Je,Fde),e(Fde,EGo),e(Je,yGo),e(Je,nn),e(nn,wGo),e(nn,Cde),e(Cde,AGo),e(nn,LGo),e(nn,Mde),e(Mde,BGo),e(nn,xGo),e(nn,Ede),e(Ede,kGo),e(nn,RGo),e(Je,SGo),e(Je,yde),e(yde,uv),e(uv,wde),e(wde,PGo),e(uv,$Go),e(uv,SN),e(SN,IGo),e(uv,jGo),e(Je,NGo),e(Je,bv),e(bv,DGo),e(bv,Ade),e(Ade,qGo),e(bv,GGo),e(bv,Lde),e(Lde,OGo),e(Je,XGo),e(Je,Bde),e(Bde,zGo),e(Je,VGo),g(Cw,Je,null),b(d,g8e,u),b(d,Zd,u),e(Zd,vv),e(vv,xde),g(Mw,xde,null),e(Zd,WGo),e(Zd,kde),e(kde,QGo),b(d,h8e,u),b(d,mr,u),g(Ew,mr,null),e(mr,HGo),e(mr,ec),e(ec,UGo),e(ec,Rde),e(Rde,JGo),e(ec,YGo),e(ec,Sde),e(Sde,KGo),e(ec,ZGo),e(mr,eOo),e(mr,yw),e(yw,oOo),e(yw,Pde),e(Pde,rOo),e(yw,tOo),e(mr,aOo),e(mr,nt),g(ww,nt,null),e(nt,nOo),e(nt,$de),e($de,sOo),e(nt,lOo),e(nt,oc),e(oc,iOo),e(oc,Ide),e(Ide,dOo),e(oc,cOo),e(oc,jde),e(jde,fOo),e(oc,mOo),e(nt,gOo),e(nt,Nde),e(Nde,hOo),e(nt,pOo),g(Aw,nt,null),e(mr,_Oo),e(mr,Ye),g(Lw,Ye,null),e(Ye,uOo),e(Ye,Dde),e(Dde,bOo),e(Ye,vOo),e(Ye,sn),e(sn,TOo),e(sn,qde),e(qde,FOo),e(sn,COo),e(sn,Gde),e(Gde,MOo),e(sn,EOo),e(sn,Ode),e(Ode,yOo),e(sn,wOo),e(Ye,AOo),e(Ye,Bw),e(Bw,Tv),e(Tv,Xde),e(Xde,LOo),e(Tv,BOo),e(Tv,PN),e(PN,xOo),e(Tv,kOo),e(Bw,ROo),e(Bw,Fv),e(Fv,zde),e(zde,SOo),e(Fv,POo),e(Fv,$N),e($N,$Oo),e(Fv,IOo),e(Ye,jOo),e(Ye,Cv),e(Cv,NOo),e(Cv,Vde),e(Vde,DOo),e(Cv,qOo),e(Cv,Wde),e(Wde,GOo),e(Ye,OOo),e(Ye,Qde),e(Qde,XOo),e(Ye,zOo),g(xw,Ye,null),b(d,p8e,u),b(d,rc,u),e(rc,Mv),e(Mv,Hde),g(kw,Hde,null),e(rc,VOo),e(rc,Ude),e(Ude,WOo),b(d,_8e,u),b(d,gr,u),g(Rw,gr,null),e(gr,QOo),e(gr,tc),e(tc,HOo),e(tc,Jde),e(Jde,UOo),e(tc,JOo),e(tc,Yde),e(Yde,YOo),e(tc,KOo),e(gr,ZOo),e(gr,Sw),e(Sw,eXo),e(Sw,Kde),e(Kde,oXo),e(Sw,rXo),e(gr,tXo),e(gr,st),g(Pw,st,null),e(st,aXo),e(st,Zde),e(Zde,nXo),e(st,sXo),e(st,ac),e(ac,lXo),e(ac,ece),e(ece,iXo),e(ac,dXo),e(ac,oce),e(oce,cXo),e(ac,fXo),e(st,mXo),e(st,rce),e(rce,gXo),e(st,hXo),g($w,st,null),e(gr,pXo),e(gr,go),g(Iw,go,null),e(go,_Xo),e(go,tce),e(tce,uXo),e(go,bXo),e(go,ln),e(ln,vXo),e(ln,ace),e(ace,TXo),e(ln,FXo),e(ln,nce),e(nce,CXo),e(ln,MXo),e(ln,sce),e(sce,EXo),e(ln,yXo),e(go,wXo),e(go,B),e(B,Ev),e(Ev,lce),e(lce,AXo),e(Ev,LXo),e(Ev,IN),e(IN,BXo),e(Ev,xXo),e(B,kXo),e(B,yv),e(yv,ice),e(ice,RXo),e(yv,SXo),e(yv,jN),e(jN,PXo),e(yv,$Xo),e(B,IXo),e(B,wv),e(wv,dce),e(dce,jXo),e(wv,NXo),e(wv,NN),e(NN,DXo),e(wv,qXo),e(B,GXo),e(B,Av),e(Av,cce),e(cce,OXo),e(Av,XXo),e(Av,DN),e(DN,zXo),e(Av,VXo),e(B,WXo),e(B,Lv),e(Lv,fce),e(fce,QXo),e(Lv,HXo),e(Lv,qN),e(qN,UXo),e(Lv,JXo),e(B,YXo),e(B,Bv),e(Bv,mce),e(mce,KXo),e(Bv,ZXo),e(Bv,GN),e(GN,ezo),e(Bv,ozo),e(B,rzo),e(B,xv),e(xv,gce),e(gce,tzo),e(xv,azo),e(xv,ON),e(ON,nzo),e(xv,szo),e(B,lzo),e(B,kv),e(kv,hce),e(hce,izo),e(kv,dzo),e(kv,XN),e(XN,czo),e(kv,fzo),e(B,mzo),e(B,Rv),e(Rv,pce),e(pce,gzo),e(Rv,hzo),e(Rv,zN),e(zN,pzo),e(Rv,_zo),e(B,uzo),e(B,Sv),e(Sv,_ce),e(_ce,bzo),e(Sv,vzo),e(Sv,VN),e(VN,Tzo),e(Sv,Fzo),e(B,Czo),e(B,Pv),e(Pv,uce),e(uce,Mzo),e(Pv,Ezo),e(Pv,WN),e(WN,yzo),e(Pv,wzo),e(B,Azo),e(B,$v),e($v,bce),e(bce,Lzo),e($v,Bzo),e($v,QN),e(QN,xzo),e($v,kzo),e(B,Rzo),e(B,Iv),e(Iv,vce),e(vce,Szo),e(Iv,Pzo),e(Iv,HN),e(HN,$zo),e(Iv,Izo),e(B,jzo),e(B,jv),e(jv,Tce),e(Tce,Nzo),e(jv,Dzo),e(jv,UN),e(UN,qzo),e(jv,Gzo),e(B,Ozo),e(B,Nv),e(Nv,Fce),e(Fce,Xzo),e(Nv,zzo),e(Nv,JN),e(JN,Vzo),e(Nv,Wzo),e(B,Qzo),e(B,Dv),e(Dv,Cce),e(Cce,Hzo),e(Dv,Uzo),e(Dv,YN),e(YN,Jzo),e(Dv,Yzo),e(B,Kzo),e(B,Ps),e(Ps,Mce),e(Mce,Zzo),e(Ps,eVo),e(Ps,KN),e(KN,oVo),e(Ps,rVo),e(Ps,ZN),e(ZN,tVo),e(Ps,aVo),e(B,nVo),e(B,qv),e(qv,Ece),e(Ece,sVo),e(qv,lVo),e(qv,eD),e(eD,iVo),e(qv,dVo),e(B,cVo),e(B,Gv),e(Gv,yce),e(yce,fVo),e(Gv,mVo),e(Gv,oD),e(oD,gVo),e(Gv,hVo),e(B,pVo),e(B,Ov),e(Ov,wce),e(wce,_Vo),e(Ov,uVo),e(Ov,rD),e(rD,bVo),e(Ov,vVo),e(B,TVo),e(B,Xv),e(Xv,Ace),e(Ace,FVo),e(Xv,CVo),e(Xv,tD),e(tD,MVo),e(Xv,EVo),e(B,yVo),e(B,zv),e(zv,Lce),e(Lce,wVo),e(zv,AVo),e(zv,aD),e(aD,LVo),e(zv,BVo),e(B,xVo),e(B,Vv),e(Vv,Bce),e(Bce,kVo),e(Vv,RVo),e(Vv,nD),e(nD,SVo),e(Vv,PVo),e(B,$Vo),e(B,Wv),e(Wv,xce),e(xce,IVo),e(Wv,jVo),e(Wv,sD),e(sD,NVo),e(Wv,DVo),e(B,qVo),e(B,Qv),e(Qv,kce),e(kce,GVo),e(Qv,OVo),e(Qv,lD),e(lD,XVo),e(Qv,zVo),e(B,VVo),e(B,Hv),e(Hv,Rce),e(Rce,WVo),e(Hv,QVo),e(Hv,iD),e(iD,HVo),e(Hv,UVo),e(B,JVo),e(B,Uv),e(Uv,Sce),e(Sce,YVo),e(Uv,KVo),e(Uv,dD),e(dD,ZVo),e(Uv,eWo),e(B,oWo),e(B,Jv),e(Jv,Pce),e(Pce,rWo),e(Jv,tWo),e(Jv,cD),e(cD,aWo),e(Jv,nWo),e(B,sWo),e(B,Yv),e(Yv,$ce),e($ce,lWo),e(Yv,iWo),e(Yv,fD),e(fD,dWo),e(Yv,cWo),e(B,fWo),e(B,Kv),e(Kv,Ice),e(Ice,mWo),e(Kv,gWo),e(Kv,mD),e(mD,hWo),e(Kv,pWo),e(B,_Wo),e(B,Zv),e(Zv,jce),e(jce,uWo),e(Zv,bWo),e(Zv,gD),e(gD,vWo),e(Zv,TWo),e(B,FWo),e(B,eT),e(eT,Nce),e(Nce,CWo),e(eT,MWo),e(eT,hD),e(hD,EWo),e(eT,yWo),e(B,wWo),e(B,oT),e(oT,Dce),e(Dce,AWo),e(oT,LWo),e(oT,pD),e(pD,BWo),e(oT,xWo),e(B,kWo),e(B,rT),e(rT,qce),e(qce,RWo),e(rT,SWo),e(rT,_D),e(_D,PWo),e(rT,$Wo),e(B,IWo),e(B,tT),e(tT,Gce),e(Gce,jWo),e(tT,NWo),e(tT,uD),e(uD,DWo),e(tT,qWo),e(B,GWo),e(B,aT),e(aT,Oce),e(Oce,OWo),e(aT,XWo),e(aT,bD),e(bD,zWo),e(aT,VWo),e(B,WWo),e(B,nT),e(nT,Xce),e(Xce,QWo),e(nT,HWo),e(nT,vD),e(vD,UWo),e(nT,JWo),e(B,YWo),e(B,sT),e(sT,zce),e(zce,KWo),e(sT,ZWo),e(sT,TD),e(TD,eQo),e(sT,oQo),e(B,rQo),e(B,lT),e(lT,Vce),e(Vce,tQo),e(lT,aQo),e(lT,FD),e(FD,nQo),e(lT,sQo),e(B,lQo),e(B,iT),e(iT,Wce),e(Wce,iQo),e(iT,dQo),e(iT,CD),e(CD,cQo),e(iT,fQo),e(B,mQo),e(B,dT),e(dT,Qce),e(Qce,gQo),e(dT,hQo),e(dT,MD),e(MD,pQo),e(dT,_Qo),e(B,uQo),e(B,cT),e(cT,Hce),e(Hce,bQo),e(cT,vQo),e(cT,ED),e(ED,TQo),e(cT,FQo),e(go,CQo),e(go,Uce),e(Uce,MQo),e(go,EQo),g(jw,go,null),b(d,u8e,u),b(d,nc,u),e(nc,fT),e(fT,Jce),g(Nw,Jce,null),e(nc,yQo),e(nc,Yce),e(Yce,wQo),b(d,b8e,u),b(d,hr,u),g(Dw,hr,null),e(hr,AQo),e(hr,sc),e(sc,LQo),e(sc,Kce),e(Kce,BQo),e(sc,xQo),e(sc,Zce),e(Zce,kQo),e(sc,RQo),e(hr,SQo),e(hr,qw),e(qw,PQo),e(qw,efe),e(efe,$Qo),e(qw,IQo),e(hr,jQo),e(hr,lt),g(Gw,lt,null),e(lt,NQo),e(lt,ofe),e(ofe,DQo),e(lt,qQo),e(lt,lc),e(lc,GQo),e(lc,rfe),e(rfe,OQo),e(lc,XQo),e(lc,tfe),e(tfe,zQo),e(lc,VQo),e(lt,WQo),e(lt,afe),e(afe,QQo),e(lt,HQo),g(Ow,lt,null),e(hr,UQo),e(hr,ho),g(Xw,ho,null),e(ho,JQo),e(ho,nfe),e(nfe,YQo),e(ho,KQo),e(ho,dn),e(dn,ZQo),e(dn,sfe),e(sfe,eHo),e(dn,oHo),e(dn,lfe),e(lfe,rHo),e(dn,tHo),e(dn,ife),e(ife,aHo),e(dn,nHo),e(ho,sHo),e(ho,H),e(H,mT),e(mT,dfe),e(dfe,lHo),e(mT,iHo),e(mT,yD),e(yD,dHo),e(mT,cHo),e(H,fHo),e(H,gT),e(gT,cfe),e(cfe,mHo),e(gT,gHo),e(gT,wD),e(wD,hHo),e(gT,pHo),e(H,_Ho),e(H,hT),e(hT,ffe),e(ffe,uHo),e(hT,bHo),e(hT,AD),e(AD,vHo),e(hT,THo),e(H,FHo),e(H,pT),e(pT,mfe),e(mfe,CHo),e(pT,MHo),e(pT,LD),e(LD,EHo),e(pT,yHo),e(H,wHo),e(H,_T),e(_T,gfe),e(gfe,AHo),e(_T,LHo),e(_T,BD),e(BD,BHo),e(_T,xHo),e(H,kHo),e(H,uT),e(uT,hfe),e(hfe,RHo),e(uT,SHo),e(uT,xD),e(xD,PHo),e(uT,$Ho),e(H,IHo),e(H,bT),e(bT,pfe),e(pfe,jHo),e(bT,NHo),e(bT,kD),e(kD,DHo),e(bT,qHo),e(H,GHo),e(H,vT),e(vT,_fe),e(_fe,OHo),e(vT,XHo),e(vT,RD),e(RD,zHo),e(vT,VHo),e(H,WHo),e(H,TT),e(TT,ufe),e(ufe,QHo),e(TT,HHo),e(TT,SD),e(SD,UHo),e(TT,JHo),e(H,YHo),e(H,FT),e(FT,bfe),e(bfe,KHo),e(FT,ZHo),e(FT,PD),e(PD,eUo),e(FT,oUo),e(H,rUo),e(H,CT),e(CT,vfe),e(vfe,tUo),e(CT,aUo),e(CT,$D),e($D,nUo),e(CT,sUo),e(H,lUo),e(H,MT),e(MT,Tfe),e(Tfe,iUo),e(MT,dUo),e(MT,ID),e(ID,cUo),e(MT,fUo),e(H,mUo),e(H,ET),e(ET,Ffe),e(Ffe,gUo),e(ET,hUo),e(ET,jD),e(jD,pUo),e(ET,_Uo),e(H,uUo),e(H,yT),e(yT,Cfe),e(Cfe,bUo),e(yT,vUo),e(yT,ND),e(ND,TUo),e(yT,FUo),e(H,CUo),e(H,wT),e(wT,Mfe),e(Mfe,MUo),e(wT,EUo),e(wT,DD),e(DD,yUo),e(wT,wUo),e(H,AUo),e(H,AT),e(AT,Efe),e(Efe,LUo),e(AT,BUo),e(AT,qD),e(qD,xUo),e(AT,kUo),e(H,RUo),e(H,LT),e(LT,yfe),e(yfe,SUo),e(LT,PUo),e(LT,GD),e(GD,$Uo),e(LT,IUo),e(H,jUo),e(H,BT),e(BT,wfe),e(wfe,NUo),e(BT,DUo),e(BT,OD),e(OD,qUo),e(BT,GUo),e(H,OUo),e(H,xT),e(xT,Afe),e(Afe,XUo),e(xT,zUo),e(xT,XD),e(XD,VUo),e(xT,WUo),e(H,QUo),e(H,kT),e(kT,Lfe),e(Lfe,HUo),e(kT,UUo),e(kT,zD),e(zD,JUo),e(kT,YUo),e(H,KUo),e(H,RT),e(RT,Bfe),e(Bfe,ZUo),e(RT,eJo),e(RT,VD),e(VD,oJo),e(RT,rJo),e(H,tJo),e(H,ST),e(ST,xfe),e(xfe,aJo),e(ST,nJo),e(ST,WD),e(WD,sJo),e(ST,lJo),e(ho,iJo),e(ho,kfe),e(kfe,dJo),e(ho,cJo),g(zw,ho,null),b(d,v8e,u),b(d,ic,u),e(ic,PT),e(PT,Rfe),g(Vw,Rfe,null),e(ic,fJo),e(ic,Sfe),e(Sfe,mJo),b(d,T8e,u),b(d,pr,u),g(Ww,pr,null),e(pr,gJo),e(pr,dc),e(dc,hJo),e(dc,Pfe),e(Pfe,pJo),e(dc,_Jo),e(dc,$fe),e($fe,uJo),e(dc,bJo),e(pr,vJo),e(pr,Qw),e(Qw,TJo),e(Qw,Ife),e(Ife,FJo),e(Qw,CJo),e(pr,MJo),e(pr,it),g(Hw,it,null),e(it,EJo),e(it,jfe),e(jfe,yJo),e(it,wJo),e(it,cc),e(cc,AJo),e(cc,Nfe),e(Nfe,LJo),e(cc,BJo),e(cc,Dfe),e(Dfe,xJo),e(cc,kJo),e(it,RJo),e(it,qfe),e(qfe,SJo),e(it,PJo),g(Uw,it,null),e(pr,$Jo),e(pr,po),g(Jw,po,null),e(po,IJo),e(po,Gfe),e(Gfe,jJo),e(po,NJo),e(po,cn),e(cn,DJo),e(cn,Ofe),e(Ofe,qJo),e(cn,GJo),e(cn,Xfe),e(Xfe,OJo),e(cn,XJo),e(cn,zfe),e(zfe,zJo),e(cn,VJo),e(po,WJo),e(po,he),e(he,$T),e($T,Vfe),e(Vfe,QJo),e($T,HJo),e($T,QD),e(QD,UJo),e($T,JJo),e(he,YJo),e(he,IT),e(IT,Wfe),e(Wfe,KJo),e(IT,ZJo),e(IT,HD),e(HD,eYo),e(IT,oYo),e(he,rYo),e(he,jT),e(jT,Qfe),e(Qfe,tYo),e(jT,aYo),e(jT,UD),e(UD,nYo),e(jT,sYo),e(he,lYo),e(he,NT),e(NT,Hfe),e(Hfe,iYo),e(NT,dYo),e(NT,JD),e(JD,cYo),e(NT,fYo),e(he,mYo),e(he,DT),e(DT,Ufe),e(Ufe,gYo),e(DT,hYo),e(DT,YD),e(YD,pYo),e(DT,_Yo),e(he,uYo),e(he,qT),e(qT,Jfe),e(Jfe,bYo),e(qT,vYo),e(qT,KD),e(KD,TYo),e(qT,FYo),e(he,CYo),e(he,GT),e(GT,Yfe),e(Yfe,MYo),e(GT,EYo),e(GT,ZD),e(ZD,yYo),e(GT,wYo),e(he,AYo),e(he,OT),e(OT,Kfe),e(Kfe,LYo),e(OT,BYo),e(OT,eq),e(eq,xYo),e(OT,kYo),e(he,RYo),e(he,XT),e(XT,Zfe),e(Zfe,SYo),e(XT,PYo),e(XT,oq),e(oq,$Yo),e(XT,IYo),e(he,jYo),e(he,zT),e(zT,eme),e(eme,NYo),e(zT,DYo),e(zT,rq),e(rq,qYo),e(zT,GYo),e(po,OYo),e(po,ome),e(ome,XYo),e(po,zYo),g(Yw,po,null),b(d,F8e,u),b(d,fc,u),e(fc,VT),e(VT,rme),g(Kw,rme,null),e(fc,VYo),e(fc,tme),e(tme,WYo),b(d,C8e,u),b(d,_r,u),g(Zw,_r,null),e(_r,QYo),e(_r,mc),e(mc,HYo),e(mc,ame),e(ame,UYo),e(mc,JYo),e(mc,nme),e(nme,YYo),e(mc,KYo),e(_r,ZYo),e(_r,eA),e(eA,eKo),e(eA,sme),e(sme,oKo),e(eA,rKo),e(_r,tKo),e(_r,dt),g(oA,dt,null),e(dt,aKo),e(dt,lme),e(lme,nKo),e(dt,sKo),e(dt,gc),e(gc,lKo),e(gc,ime),e(ime,iKo),e(gc,dKo),e(gc,dme),e(dme,cKo),e(gc,fKo),e(dt,mKo),e(dt,cme),e(cme,gKo),e(dt,hKo),g(rA,dt,null),e(_r,pKo),e(_r,_o),g(tA,_o,null),e(_o,_Ko),e(_o,fme),e(fme,uKo),e(_o,bKo),e(_o,fn),e(fn,vKo),e(fn,mme),e(mme,TKo),e(fn,FKo),e(fn,gme),e(gme,CKo),e(fn,MKo),e(fn,hme),e(hme,EKo),e(fn,yKo),e(_o,wKo),e(_o,aA),e(aA,WT),e(WT,pme),e(pme,AKo),e(WT,LKo),e(WT,tq),e(tq,BKo),e(WT,xKo),e(aA,kKo),e(aA,QT),e(QT,_me),e(_me,RKo),e(QT,SKo),e(QT,aq),e(aq,PKo),e(QT,$Ko),e(_o,IKo),e(_o,ume),e(ume,jKo),e(_o,NKo),g(nA,_o,null),b(d,M8e,u),b(d,hc,u),e(hc,HT),e(HT,bme),g(sA,bme,null),e(hc,DKo),e(hc,vme),e(vme,qKo),b(d,E8e,u),b(d,ur,u),g(lA,ur,null),e(ur,GKo),e(ur,pc),e(pc,OKo),e(pc,Tme),e(Tme,XKo),e(pc,zKo),e(pc,Fme),e(Fme,VKo),e(pc,WKo),e(ur,QKo),e(ur,iA),e(iA,HKo),e(iA,Cme),e(Cme,UKo),e(iA,JKo),e(ur,YKo),e(ur,ct),g(dA,ct,null),e(ct,KKo),e(ct,Mme),e(Mme,ZKo),e(ct,eZo),e(ct,_c),e(_c,oZo),e(_c,Eme),e(Eme,rZo),e(_c,tZo),e(_c,yme),e(yme,aZo),e(_c,nZo),e(ct,sZo),e(ct,wme),e(wme,lZo),e(ct,iZo),g(cA,ct,null),e(ur,dZo),e(ur,uo),g(fA,uo,null),e(uo,cZo),e(uo,Ame),e(Ame,fZo),e(uo,mZo),e(uo,mn),e(mn,gZo),e(mn,Lme),e(Lme,hZo),e(mn,pZo),e(mn,Bme),e(Bme,_Zo),e(mn,uZo),e(mn,xme),e(xme,bZo),e(mn,vZo),e(uo,TZo),e(uo,Y),e(Y,UT),e(UT,kme),e(kme,FZo),e(UT,CZo),e(UT,nq),e(nq,MZo),e(UT,EZo),e(Y,yZo),e(Y,JT),e(JT,Rme),e(Rme,wZo),e(JT,AZo),e(JT,sq),e(sq,LZo),e(JT,BZo),e(Y,xZo),e(Y,YT),e(YT,Sme),e(Sme,kZo),e(YT,RZo),e(YT,lq),e(lq,SZo),e(YT,PZo),e(Y,$Zo),e(Y,KT),e(KT,Pme),e(Pme,IZo),e(KT,jZo),e(KT,iq),e(iq,NZo),e(KT,DZo),e(Y,qZo),e(Y,ZT),e(ZT,$me),e($me,GZo),e(ZT,OZo),e(ZT,dq),e(dq,XZo),e(ZT,zZo),e(Y,VZo),e(Y,eF),e(eF,Ime),e(Ime,WZo),e(eF,QZo),e(eF,cq),e(cq,HZo),e(eF,UZo),e(Y,JZo),e(Y,oF),e(oF,jme),e(jme,YZo),e(oF,KZo),e(oF,fq),e(fq,ZZo),e(oF,eer),e(Y,oer),e(Y,rF),e(rF,Nme),e(Nme,rer),e(rF,ter),e(rF,mq),e(mq,aer),e(rF,ner),e(Y,ser),e(Y,tF),e(tF,Dme),e(Dme,ler),e(tF,ier),e(tF,gq),e(gq,der),e(tF,cer),e(Y,fer),e(Y,aF),e(aF,qme),e(qme,mer),e(aF,ger),e(aF,hq),e(hq,her),e(aF,per),e(Y,_er),e(Y,nF),e(nF,Gme),e(Gme,uer),e(nF,ber),e(nF,pq),e(pq,ver),e(nF,Ter),e(Y,Fer),e(Y,sF),e(sF,Ome),e(Ome,Cer),e(sF,Mer),e(sF,_q),e(_q,Eer),e(sF,yer),e(Y,wer),e(Y,lF),e(lF,Xme),e(Xme,Aer),e(lF,Ler),e(lF,uq),e(uq,Ber),e(lF,xer),e(Y,ker),e(Y,iF),e(iF,zme),e(zme,Rer),e(iF,Ser),e(iF,bq),e(bq,Per),e(iF,$er),e(Y,Ier),e(Y,dF),e(dF,Vme),e(Vme,jer),e(dF,Ner),e(dF,vq),e(vq,Der),e(dF,qer),e(Y,Ger),e(Y,cF),e(cF,Wme),e(Wme,Oer),e(cF,Xer),e(cF,Tq),e(Tq,zer),e(cF,Ver),e(Y,Wer),e(Y,fF),e(fF,Qme),e(Qme,Qer),e(fF,Her),e(fF,Fq),e(Fq,Uer),e(fF,Jer),e(Y,Yer),e(Y,mF),e(mF,Hme),e(Hme,Ker),e(mF,Zer),e(mF,Cq),e(Cq,eor),e(mF,oor),e(Y,ror),e(Y,gF),e(gF,Ume),e(Ume,tor),e(gF,aor),e(gF,Mq),e(Mq,nor),e(gF,sor),e(Y,lor),e(Y,hF),e(hF,Jme),e(Jme,ior),e(hF,dor),e(hF,Eq),e(Eq,cor),e(hF,mor),e(uo,gor),e(uo,Yme),e(Yme,hor),e(uo,por),g(mA,uo,null),b(d,y8e,u),b(d,uc,u),e(uc,pF),e(pF,Kme),g(gA,Kme,null),e(uc,_or),e(uc,Zme),e(Zme,uor),b(d,w8e,u),b(d,br,u),g(hA,br,null),e(br,bor),e(br,bc),e(bc,vor),e(bc,ege),e(ege,Tor),e(bc,For),e(bc,oge),e(oge,Cor),e(bc,Mor),e(br,Eor),e(br,pA),e(pA,yor),e(pA,rge),e(rge,wor),e(pA,Aor),e(br,Lor),e(br,ft),g(_A,ft,null),e(ft,Bor),e(ft,tge),e(tge,xor),e(ft,kor),e(ft,vc),e(vc,Ror),e(vc,age),e(age,Sor),e(vc,Por),e(vc,nge),e(nge,$or),e(vc,Ior),e(ft,jor),e(ft,sge),e(sge,Nor),e(ft,Dor),g(uA,ft,null),e(br,qor),e(br,bo),g(bA,bo,null),e(bo,Gor),e(bo,lge),e(lge,Oor),e(bo,Xor),e(bo,gn),e(gn,zor),e(gn,ige),e(ige,Vor),e(gn,Wor),e(gn,dge),e(dge,Qor),e(gn,Hor),e(gn,cge),e(cge,Uor),e(gn,Jor),e(bo,Yor),e(bo,pe),e(pe,_F),e(_F,fge),e(fge,Kor),e(_F,Zor),e(_F,yq),e(yq,err),e(_F,orr),e(pe,rrr),e(pe,uF),e(uF,mge),e(mge,trr),e(uF,arr),e(uF,wq),e(wq,nrr),e(uF,srr),e(pe,lrr),e(pe,bF),e(bF,gge),e(gge,irr),e(bF,drr),e(bF,Aq),e(Aq,crr),e(bF,frr),e(pe,mrr),e(pe,vF),e(vF,hge),e(hge,grr),e(vF,hrr),e(vF,Lq),e(Lq,prr),e(vF,_rr),e(pe,urr),e(pe,TF),e(TF,pge),e(pge,brr),e(TF,vrr),e(TF,Bq),e(Bq,Trr),e(TF,Frr),e(pe,Crr),e(pe,FF),e(FF,_ge),e(_ge,Mrr),e(FF,Err),e(FF,xq),e(xq,yrr),e(FF,wrr),e(pe,Arr),e(pe,CF),e(CF,uge),e(uge,Lrr),e(CF,Brr),e(CF,kq),e(kq,xrr),e(CF,krr),e(pe,Rrr),e(pe,MF),e(MF,bge),e(bge,Srr),e(MF,Prr),e(MF,Rq),e(Rq,$rr),e(MF,Irr),e(pe,jrr),e(pe,EF),e(EF,vge),e(vge,Nrr),e(EF,Drr),e(EF,Sq),e(Sq,qrr),e(EF,Grr),e(pe,Orr),e(pe,yF),e(yF,Tge),e(Tge,Xrr),e(yF,zrr),e(yF,Pq),e(Pq,Vrr),e(yF,Wrr),e(bo,Qrr),e(bo,Fge),e(Fge,Hrr),e(bo,Urr),g(vA,bo,null),b(d,A8e,u),b(d,Tc,u),e(Tc,wF),e(wF,Cge),g(TA,Cge,null),e(Tc,Jrr),e(Tc,Mge),e(Mge,Yrr),b(d,L8e,u),b(d,vr,u),g(FA,vr,null),e(vr,Krr),e(vr,Fc),e(Fc,Zrr),e(Fc,Ege),e(Ege,etr),e(Fc,otr),e(Fc,yge),e(yge,rtr),e(Fc,ttr),e(vr,atr),e(vr,CA),e(CA,ntr),e(CA,wge),e(wge,str),e(CA,ltr),e(vr,itr),e(vr,mt),g(MA,mt,null),e(mt,dtr),e(mt,Age),e(Age,ctr),e(mt,ftr),e(mt,Cc),e(Cc,mtr),e(Cc,Lge),e(Lge,gtr),e(Cc,htr),e(Cc,Bge),e(Bge,ptr),e(Cc,_tr),e(mt,utr),e(mt,xge),e(xge,btr),e(mt,vtr),g(EA,mt,null),e(vr,Ttr),e(vr,vo),g(yA,vo,null),e(vo,Ftr),e(vo,kge),e(kge,Ctr),e(vo,Mtr),e(vo,hn),e(hn,Etr),e(hn,Rge),e(Rge,ytr),e(hn,wtr),e(hn,Sge),e(Sge,Atr),e(hn,Ltr),e(hn,Pge),e(Pge,Btr),e(hn,xtr),e(vo,ktr),e(vo,X),e(X,AF),e(AF,$ge),e($ge,Rtr),e(AF,Str),e(AF,$q),e($q,Ptr),e(AF,$tr),e(X,Itr),e(X,LF),e(LF,Ige),e(Ige,jtr),e(LF,Ntr),e(LF,Iq),e(Iq,Dtr),e(LF,qtr),e(X,Gtr),e(X,BF),e(BF,jge),e(jge,Otr),e(BF,Xtr),e(BF,jq),e(jq,ztr),e(BF,Vtr),e(X,Wtr),e(X,xF),e(xF,Nge),e(Nge,Qtr),e(xF,Htr),e(xF,Nq),e(Nq,Utr),e(xF,Jtr),e(X,Ytr),e(X,kF),e(kF,Dge),e(Dge,Ktr),e(kF,Ztr),e(kF,Dq),e(Dq,ear),e(kF,oar),e(X,rar),e(X,RF),e(RF,qge),e(qge,tar),e(RF,aar),e(RF,qq),e(qq,nar),e(RF,sar),e(X,lar),e(X,SF),e(SF,Gge),e(Gge,iar),e(SF,dar),e(SF,Gq),e(Gq,car),e(SF,far),e(X,mar),e(X,PF),e(PF,Oge),e(Oge,gar),e(PF,har),e(PF,Oq),e(Oq,par),e(PF,_ar),e(X,uar),e(X,$F),e($F,Xge),e(Xge,bar),e($F,Tar),e($F,Xq),e(Xq,Far),e($F,Car),e(X,Mar),e(X,IF),e(IF,zge),e(zge,Ear),e(IF,yar),e(IF,zq),e(zq,war),e(IF,Aar),e(X,Lar),e(X,jF),e(jF,Vge),e(Vge,Bar),e(jF,xar),e(jF,Vq),e(Vq,kar),e(jF,Rar),e(X,Sar),e(X,NF),e(NF,Wge),e(Wge,Par),e(NF,$ar),e(NF,Wq),e(Wq,Iar),e(NF,jar),e(X,Nar),e(X,DF),e(DF,Qge),e(Qge,Dar),e(DF,qar),e(DF,Qq),e(Qq,Gar),e(DF,Oar),e(X,Xar),e(X,qF),e(qF,Hge),e(Hge,zar),e(qF,Var),e(qF,Hq),e(Hq,War),e(qF,Qar),e(X,Har),e(X,GF),e(GF,Uge),e(Uge,Uar),e(GF,Jar),e(GF,Uq),e(Uq,Yar),e(GF,Kar),e(X,Zar),e(X,OF),e(OF,Jge),e(Jge,enr),e(OF,onr),e(OF,Jq),e(Jq,rnr),e(OF,tnr),e(X,anr),e(X,XF),e(XF,Yge),e(Yge,nnr),e(XF,snr),e(XF,Yq),e(Yq,lnr),e(XF,inr),e(X,dnr),e(X,zF),e(zF,Kge),e(Kge,cnr),e(zF,fnr),e(zF,Kq),e(Kq,mnr),e(zF,gnr),e(X,hnr),e(X,VF),e(VF,Zge),e(Zge,pnr),e(VF,_nr),e(VF,Zq),e(Zq,unr),e(VF,bnr),e(X,vnr),e(X,WF),e(WF,ehe),e(ehe,Tnr),e(WF,Fnr),e(WF,eG),e(eG,Cnr),e(WF,Mnr),e(X,Enr),e(X,QF),e(QF,ohe),e(ohe,ynr),e(QF,wnr),e(QF,oG),e(oG,Anr),e(QF,Lnr),e(X,Bnr),e(X,HF),e(HF,rhe),e(rhe,xnr),e(HF,knr),e(HF,rG),e(rG,Rnr),e(HF,Snr),e(X,Pnr),e(X,UF),e(UF,the),e(the,$nr),e(UF,Inr),e(UF,tG),e(tG,jnr),e(UF,Nnr),e(X,Dnr),e(X,JF),e(JF,ahe),e(ahe,qnr),e(JF,Gnr),e(JF,aG),e(aG,Onr),e(JF,Xnr),e(X,znr),e(X,YF),e(YF,nhe),e(nhe,Vnr),e(YF,Wnr),e(YF,nG),e(nG,Qnr),e(YF,Hnr),e(vo,Unr),e(vo,she),e(she,Jnr),e(vo,Ynr),g(wA,vo,null),b(d,B8e,u),b(d,Mc,u),e(Mc,KF),e(KF,lhe),g(AA,lhe,null),e(Mc,Knr),e(Mc,ihe),e(ihe,Znr),b(d,x8e,u),b(d,Tr,u),g(LA,Tr,null),e(Tr,esr),e(Tr,Ec),e(Ec,osr),e(Ec,dhe),e(dhe,rsr),e(Ec,tsr),e(Ec,che),e(che,asr),e(Ec,nsr),e(Tr,ssr),e(Tr,BA),e(BA,lsr),e(BA,fhe),e(fhe,isr),e(BA,dsr),e(Tr,csr),e(Tr,gt),g(xA,gt,null),e(gt,fsr),e(gt,mhe),e(mhe,msr),e(gt,gsr),e(gt,yc),e(yc,hsr),e(yc,ghe),e(ghe,psr),e(yc,_sr),e(yc,hhe),e(hhe,usr),e(yc,bsr),e(gt,vsr),e(gt,phe),e(phe,Tsr),e(gt,Fsr),g(kA,gt,null),e(Tr,Csr),e(Tr,To),g(RA,To,null),e(To,Msr),e(To,_he),e(_he,Esr),e(To,ysr),e(To,pn),e(pn,wsr),e(pn,uhe),e(uhe,Asr),e(pn,Lsr),e(pn,bhe),e(bhe,Bsr),e(pn,xsr),e(pn,vhe),e(vhe,ksr),e(pn,Rsr),e(To,Ssr),e(To,te),e(te,ZF),e(ZF,The),e(The,Psr),e(ZF,$sr),e(ZF,sG),e(sG,Isr),e(ZF,jsr),e(te,Nsr),e(te,e9),e(e9,Fhe),e(Fhe,Dsr),e(e9,qsr),e(e9,lG),e(lG,Gsr),e(e9,Osr),e(te,Xsr),e(te,o9),e(o9,Che),e(Che,zsr),e(o9,Vsr),e(o9,iG),e(iG,Wsr),e(o9,Qsr),e(te,Hsr),e(te,r9),e(r9,Mhe),e(Mhe,Usr),e(r9,Jsr),e(r9,dG),e(dG,Ysr),e(r9,Ksr),e(te,Zsr),e(te,t9),e(t9,Ehe),e(Ehe,elr),e(t9,olr),e(t9,cG),e(cG,rlr),e(t9,tlr),e(te,alr),e(te,a9),e(a9,yhe),e(yhe,nlr),e(a9,slr),e(a9,fG),e(fG,llr),e(a9,ilr),e(te,dlr),e(te,n9),e(n9,whe),e(whe,clr),e(n9,flr),e(n9,mG),e(mG,mlr),e(n9,glr),e(te,hlr),e(te,s9),e(s9,Ahe),e(Ahe,plr),e(s9,_lr),e(s9,gG),e(gG,ulr),e(s9,blr),e(te,vlr),e(te,l9),e(l9,Lhe),e(Lhe,Tlr),e(l9,Flr),e(l9,hG),e(hG,Clr),e(l9,Mlr),e(te,Elr),e(te,i9),e(i9,Bhe),e(Bhe,ylr),e(i9,wlr),e(i9,pG),e(pG,Alr),e(i9,Llr),e(te,Blr),e(te,d9),e(d9,xhe),e(xhe,xlr),e(d9,klr),e(d9,_G),e(_G,Rlr),e(d9,Slr),e(te,Plr),e(te,c9),e(c9,khe),e(khe,$lr),e(c9,Ilr),e(c9,uG),e(uG,jlr),e(c9,Nlr),e(te,Dlr),e(te,f9),e(f9,Rhe),e(Rhe,qlr),e(f9,Glr),e(f9,bG),e(bG,Olr),e(f9,Xlr),e(te,zlr),e(te,m9),e(m9,She),e(She,Vlr),e(m9,Wlr),e(m9,vG),e(vG,Qlr),e(m9,Hlr),e(te,Ulr),e(te,g9),e(g9,Phe),e(Phe,Jlr),e(g9,Ylr),e(g9,TG),e(TG,Klr),e(g9,Zlr),e(te,eir),e(te,h9),e(h9,$he),e($he,oir),e(h9,rir),e(h9,FG),e(FG,tir),e(h9,air),e(te,nir),e(te,p9),e(p9,Ihe),e(Ihe,sir),e(p9,lir),e(p9,CG),e(CG,iir),e(p9,dir),e(To,cir),e(To,jhe),e(jhe,fir),e(To,mir),g(SA,To,null),b(d,k8e,u),b(d,wc,u),e(wc,_9),e(_9,Nhe),g(PA,Nhe,null),e(wc,gir),e(wc,Dhe),e(Dhe,hir),b(d,R8e,u),b(d,Fr,u),g($A,Fr,null),e(Fr,pir),e(Fr,Ac),e(Ac,_ir),e(Ac,qhe),e(qhe,uir),e(Ac,bir),e(Ac,Ghe),e(Ghe,vir),e(Ac,Tir),e(Fr,Fir),e(Fr,IA),e(IA,Cir),e(IA,Ohe),e(Ohe,Mir),e(IA,Eir),e(Fr,yir),e(Fr,ht),g(jA,ht,null),e(ht,wir),e(ht,Xhe),e(Xhe,Air),e(ht,Lir),e(ht,Lc),e(Lc,Bir),e(Lc,zhe),e(zhe,xir),e(Lc,kir),e(Lc,Vhe),e(Vhe,Rir),e(Lc,Sir),e(ht,Pir),e(ht,Whe),e(Whe,$ir),e(ht,Iir),g(NA,ht,null),e(Fr,jir),e(Fr,Fo),g(DA,Fo,null),e(Fo,Nir),e(Fo,Qhe),e(Qhe,Dir),e(Fo,qir),e(Fo,_n),e(_n,Gir),e(_n,Hhe),e(Hhe,Oir),e(_n,Xir),e(_n,Uhe),e(Uhe,zir),e(_n,Vir),e(_n,Jhe),e(Jhe,Wir),e(_n,Qir),e(Fo,Hir),e(Fo,Yhe),e(Yhe,u9),e(u9,Khe),e(Khe,Uir),e(u9,Jir),e(u9,MG),e(MG,Yir),e(u9,Kir),e(Fo,Zir),e(Fo,Zhe),e(Zhe,edr),e(Fo,odr),g(qA,Fo,null),b(d,S8e,u),b(d,Bc,u),e(Bc,b9),e(b9,epe),g(GA,epe,null),e(Bc,rdr),e(Bc,ope),e(ope,tdr),b(d,P8e,u),b(d,Cr,u),g(OA,Cr,null),e(Cr,adr),e(Cr,xc),e(xc,ndr),e(xc,rpe),e(rpe,sdr),e(xc,ldr),e(xc,tpe),e(tpe,idr),e(xc,ddr),e(Cr,cdr),e(Cr,XA),e(XA,fdr),e(XA,ape),e(ape,mdr),e(XA,gdr),e(Cr,hdr),e(Cr,pt),g(zA,pt,null),e(pt,pdr),e(pt,npe),e(npe,_dr),e(pt,udr),e(pt,kc),e(kc,bdr),e(kc,spe),e(spe,vdr),e(kc,Tdr),e(kc,lpe),e(lpe,Fdr),e(kc,Cdr),e(pt,Mdr),e(pt,ipe),e(ipe,Edr),e(pt,ydr),g(VA,pt,null),e(Cr,wdr),e(Cr,Co),g(WA,Co,null),e(Co,Adr),e(Co,dpe),e(dpe,Ldr),e(Co,Bdr),e(Co,un),e(un,xdr),e(un,cpe),e(cpe,kdr),e(un,Rdr),e(un,fpe),e(fpe,Sdr),e(un,Pdr),e(un,mpe),e(mpe,$dr),e(un,Idr),e(Co,jdr),e(Co,K),e(K,v9),e(v9,gpe),e(gpe,Ndr),e(v9,Ddr),e(v9,EG),e(EG,qdr),e(v9,Gdr),e(K,Odr),e(K,T9),e(T9,hpe),e(hpe,Xdr),e(T9,zdr),e(T9,yG),e(yG,Vdr),e(T9,Wdr),e(K,Qdr),e(K,F9),e(F9,ppe),e(ppe,Hdr),e(F9,Udr),e(F9,wG),e(wG,Jdr),e(F9,Ydr),e(K,Kdr),e(K,C9),e(C9,_pe),e(_pe,Zdr),e(C9,ecr),e(C9,AG),e(AG,ocr),e(C9,rcr),e(K,tcr),e(K,M9),e(M9,upe),e(upe,acr),e(M9,ncr),e(M9,LG),e(LG,scr),e(M9,lcr),e(K,icr),e(K,E9),e(E9,bpe),e(bpe,dcr),e(E9,ccr),e(E9,BG),e(BG,fcr),e(E9,mcr),e(K,gcr),e(K,y9),e(y9,vpe),e(vpe,hcr),e(y9,pcr),e(y9,xG),e(xG,_cr),e(y9,ucr),e(K,bcr),e(K,w9),e(w9,Tpe),e(Tpe,vcr),e(w9,Tcr),e(w9,kG),e(kG,Fcr),e(w9,Ccr),e(K,Mcr),e(K,A9),e(A9,Fpe),e(Fpe,Ecr),e(A9,ycr),e(A9,RG),e(RG,wcr),e(A9,Acr),e(K,Lcr),e(K,L9),e(L9,Cpe),e(Cpe,Bcr),e(L9,xcr),e(L9,SG),e(SG,kcr),e(L9,Rcr),e(K,Scr),e(K,B9),e(B9,Mpe),e(Mpe,Pcr),e(B9,$cr),e(B9,PG),e(PG,Icr),e(B9,jcr),e(K,Ncr),e(K,x9),e(x9,Epe),e(Epe,Dcr),e(x9,qcr),e(x9,$G),e($G,Gcr),e(x9,Ocr),e(K,Xcr),e(K,k9),e(k9,ype),e(ype,zcr),e(k9,Vcr),e(k9,IG),e(IG,Wcr),e(k9,Qcr),e(K,Hcr),e(K,R9),e(R9,wpe),e(wpe,Ucr),e(R9,Jcr),e(R9,jG),e(jG,Ycr),e(R9,Kcr),e(K,Zcr),e(K,S9),e(S9,Ape),e(Ape,efr),e(S9,ofr),e(S9,NG),e(NG,rfr),e(S9,tfr),e(K,afr),e(K,P9),e(P9,Lpe),e(Lpe,nfr),e(P9,sfr),e(P9,DG),e(DG,lfr),e(P9,ifr),e(K,dfr),e(K,$9),e($9,Bpe),e(Bpe,cfr),e($9,ffr),e($9,qG),e(qG,mfr),e($9,gfr),e(K,hfr),e(K,I9),e(I9,xpe),e(xpe,pfr),e(I9,_fr),e(I9,GG),e(GG,ufr),e(I9,bfr),e(K,vfr),e(K,j9),e(j9,kpe),e(kpe,Tfr),e(j9,Ffr),e(j9,OG),e(OG,Cfr),e(j9,Mfr),e(K,Efr),e(K,N9),e(N9,Rpe),e(Rpe,yfr),e(N9,wfr),e(N9,XG),e(XG,Afr),e(N9,Lfr),e(Co,Bfr),e(Co,Spe),e(Spe,xfr),e(Co,kfr),g(QA,Co,null),b(d,$8e,u),b(d,Rc,u),e(Rc,D9),e(D9,Ppe),g(HA,Ppe,null),e(Rc,Rfr),e(Rc,$pe),e($pe,Sfr),b(d,I8e,u),b(d,Mr,u),g(UA,Mr,null),e(Mr,Pfr),e(Mr,Sc),e(Sc,$fr),e(Sc,Ipe),e(Ipe,Ifr),e(Sc,jfr),e(Sc,jpe),e(jpe,Nfr),e(Sc,Dfr),e(Mr,qfr),e(Mr,JA),e(JA,Gfr),e(JA,Npe),e(Npe,Ofr),e(JA,Xfr),e(Mr,zfr),e(Mr,_t),g(YA,_t,null),e(_t,Vfr),e(_t,Dpe),e(Dpe,Wfr),e(_t,Qfr),e(_t,Pc),e(Pc,Hfr),e(Pc,qpe),e(qpe,Ufr),e(Pc,Jfr),e(Pc,Gpe),e(Gpe,Yfr),e(Pc,Kfr),e(_t,Zfr),e(_t,Ope),e(Ope,emr),e(_t,omr),g(KA,_t,null),e(Mr,rmr),e(Mr,Mo),g(ZA,Mo,null),e(Mo,tmr),e(Mo,Xpe),e(Xpe,amr),e(Mo,nmr),e(Mo,bn),e(bn,smr),e(bn,zpe),e(zpe,lmr),e(bn,imr),e(bn,Vpe),e(Vpe,dmr),e(bn,cmr),e(bn,Wpe),e(Wpe,fmr),e(bn,mmr),e(Mo,gmr),e(Mo,Z),e(Z,q9),e(q9,Qpe),e(Qpe,hmr),e(q9,pmr),e(q9,zG),e(zG,_mr),e(q9,umr),e(Z,bmr),e(Z,G9),e(G9,Hpe),e(Hpe,vmr),e(G9,Tmr),e(G9,VG),e(VG,Fmr),e(G9,Cmr),e(Z,Mmr),e(Z,O9),e(O9,Upe),e(Upe,Emr),e(O9,ymr),e(O9,WG),e(WG,wmr),e(O9,Amr),e(Z,Lmr),e(Z,X9),e(X9,Jpe),e(Jpe,Bmr),e(X9,xmr),e(X9,QG),e(QG,kmr),e(X9,Rmr),e(Z,Smr),e(Z,z9),e(z9,Ype),e(Ype,Pmr),e(z9,$mr),e(z9,HG),e(HG,Imr),e(z9,jmr),e(Z,Nmr),e(Z,V9),e(V9,Kpe),e(Kpe,Dmr),e(V9,qmr),e(V9,UG),e(UG,Gmr),e(V9,Omr),e(Z,Xmr),e(Z,W9),e(W9,Zpe),e(Zpe,zmr),e(W9,Vmr),e(W9,JG),e(JG,Wmr),e(W9,Qmr),e(Z,Hmr),e(Z,Q9),e(Q9,e_e),e(e_e,Umr),e(Q9,Jmr),e(Q9,YG),e(YG,Ymr),e(Q9,Kmr),e(Z,Zmr),e(Z,H9),e(H9,o_e),e(o_e,egr),e(H9,ogr),e(H9,KG),e(KG,rgr),e(H9,tgr),e(Z,agr),e(Z,U9),e(U9,r_e),e(r_e,ngr),e(U9,sgr),e(U9,ZG),e(ZG,lgr),e(U9,igr),e(Z,dgr),e(Z,J9),e(J9,t_e),e(t_e,cgr),e(J9,fgr),e(J9,eO),e(eO,mgr),e(J9,ggr),e(Z,hgr),e(Z,Y9),e(Y9,a_e),e(a_e,pgr),e(Y9,_gr),e(Y9,oO),e(oO,ugr),e(Y9,bgr),e(Z,vgr),e(Z,K9),e(K9,n_e),e(n_e,Tgr),e(K9,Fgr),e(K9,rO),e(rO,Cgr),e(K9,Mgr),e(Z,Egr),e(Z,Z9),e(Z9,s_e),e(s_e,ygr),e(Z9,wgr),e(Z9,tO),e(tO,Agr),e(Z9,Lgr),e(Z,Bgr),e(Z,eC),e(eC,l_e),e(l_e,xgr),e(eC,kgr),e(eC,aO),e(aO,Rgr),e(eC,Sgr),e(Z,Pgr),e(Z,oC),e(oC,i_e),e(i_e,$gr),e(oC,Igr),e(oC,nO),e(nO,jgr),e(oC,Ngr),e(Z,Dgr),e(Z,rC),e(rC,d_e),e(d_e,qgr),e(rC,Ggr),e(rC,sO),e(sO,Ogr),e(rC,Xgr),e(Z,zgr),e(Z,tC),e(tC,c_e),e(c_e,Vgr),e(tC,Wgr),e(tC,lO),e(lO,Qgr),e(tC,Hgr),e(Z,Ugr),e(Z,aC),e(aC,f_e),e(f_e,Jgr),e(aC,Ygr),e(aC,iO),e(iO,Kgr),e(aC,Zgr),e(Mo,ehr),e(Mo,m_e),e(m_e,ohr),e(Mo,rhr),g(e6,Mo,null),b(d,j8e,u),b(d,$c,u),e($c,nC),e(nC,g_e),g(o6,g_e,null),e($c,thr),e($c,h_e),e(h_e,ahr),b(d,N8e,u),b(d,Er,u),g(r6,Er,null),e(Er,nhr),e(Er,Ic),e(Ic,shr),e(Ic,p_e),e(p_e,lhr),e(Ic,ihr),e(Ic,__e),e(__e,dhr),e(Ic,chr),e(Er,fhr),e(Er,t6),e(t6,mhr),e(t6,u_e),e(u_e,ghr),e(t6,hhr),e(Er,phr),e(Er,ut),g(a6,ut,null),e(ut,_hr),e(ut,b_e),e(b_e,uhr),e(ut,bhr),e(ut,jc),e(jc,vhr),e(jc,v_e),e(v_e,Thr),e(jc,Fhr),e(jc,T_e),e(T_e,Chr),e(jc,Mhr),e(ut,Ehr),e(ut,F_e),e(F_e,yhr),e(ut,whr),g(n6,ut,null),e(Er,Ahr),e(Er,Eo),g(s6,Eo,null),e(Eo,Lhr),e(Eo,C_e),e(C_e,Bhr),e(Eo,xhr),e(Eo,vn),e(vn,khr),e(vn,M_e),e(M_e,Rhr),e(vn,Shr),e(vn,E_e),e(E_e,Phr),e(vn,$hr),e(vn,y_e),e(y_e,Ihr),e(vn,jhr),e(Eo,Nhr),e(Eo,w_e),e(w_e,sC),e(sC,A_e),e(A_e,Dhr),e(sC,qhr),e(sC,dO),e(dO,Ghr),e(sC,Ohr),e(Eo,Xhr),e(Eo,L_e),e(L_e,zhr),e(Eo,Vhr),g(l6,Eo,null),b(d,D8e,u),b(d,Nc,u),e(Nc,lC),e(lC,B_e),g(i6,B_e,null),e(Nc,Whr),e(Nc,x_e),e(x_e,Qhr),b(d,q8e,u),b(d,yr,u),g(d6,yr,null),e(yr,Hhr),e(yr,Dc),e(Dc,Uhr),e(Dc,k_e),e(k_e,Jhr),e(Dc,Yhr),e(Dc,R_e),e(R_e,Khr),e(Dc,Zhr),e(yr,epr),e(yr,c6),e(c6,opr),e(c6,S_e),e(S_e,rpr),e(c6,tpr),e(yr,apr),e(yr,bt),g(f6,bt,null),e(bt,npr),e(bt,P_e),e(P_e,spr),e(bt,lpr),e(bt,qc),e(qc,ipr),e(qc,$_e),e($_e,dpr),e(qc,cpr),e(qc,I_e),e(I_e,fpr),e(qc,mpr),e(bt,gpr),e(bt,j_e),e(j_e,hpr),e(bt,ppr),g(m6,bt,null),e(yr,_pr),e(yr,yo),g(g6,yo,null),e(yo,upr),e(yo,N_e),e(N_e,bpr),e(yo,vpr),e(yo,Tn),e(Tn,Tpr),e(Tn,D_e),e(D_e,Fpr),e(Tn,Cpr),e(Tn,q_e),e(q_e,Mpr),e(Tn,Epr),e(Tn,G_e),e(G_e,ypr),e(Tn,wpr),e(yo,Apr),e(yo,O_e),e(O_e,iC),e(iC,X_e),e(X_e,Lpr),e(iC,Bpr),e(iC,cO),e(cO,xpr),e(iC,kpr),e(yo,Rpr),e(yo,z_e),e(z_e,Spr),e(yo,Ppr),g(h6,yo,null),b(d,G8e,u),b(d,Gc,u),e(Gc,dC),e(dC,V_e),g(p6,V_e,null),e(Gc,$pr),e(Gc,W_e),e(W_e,Ipr),b(d,O8e,u),b(d,wr,u),g(_6,wr,null),e(wr,jpr),e(wr,Oc),e(Oc,Npr),e(Oc,Q_e),e(Q_e,Dpr),e(Oc,qpr),e(Oc,H_e),e(H_e,Gpr),e(Oc,Opr),e(wr,Xpr),e(wr,u6),e(u6,zpr),e(u6,U_e),e(U_e,Vpr),e(u6,Wpr),e(wr,Qpr),e(wr,vt),g(b6,vt,null),e(vt,Hpr),e(vt,J_e),e(J_e,Upr),e(vt,Jpr),e(vt,Xc),e(Xc,Ypr),e(Xc,Y_e),e(Y_e,Kpr),e(Xc,Zpr),e(Xc,K_e),e(K_e,e_r),e(Xc,o_r),e(vt,r_r),e(vt,Z_e),e(Z_e,t_r),e(vt,a_r),g(v6,vt,null),e(wr,n_r),e(wr,wo),g(T6,wo,null),e(wo,s_r),e(wo,eue),e(eue,l_r),e(wo,i_r),e(wo,Fn),e(Fn,d_r),e(Fn,oue),e(oue,c_r),e(Fn,f_r),e(Fn,rue),e(rue,m_r),e(Fn,g_r),e(Fn,tue),e(tue,h_r),e(Fn,p_r),e(wo,__r),e(wo,V),e(V,cC),e(cC,aue),e(aue,u_r),e(cC,b_r),e(cC,fO),e(fO,v_r),e(cC,T_r),e(V,F_r),e(V,fC),e(fC,nue),e(nue,C_r),e(fC,M_r),e(fC,mO),e(mO,E_r),e(fC,y_r),e(V,w_r),e(V,mC),e(mC,sue),e(sue,A_r),e(mC,L_r),e(mC,gO),e(gO,B_r),e(mC,x_r),e(V,k_r),e(V,gC),e(gC,lue),e(lue,R_r),e(gC,S_r),e(gC,hO),e(hO,P_r),e(gC,$_r),e(V,I_r),e(V,hC),e(hC,iue),e(iue,j_r),e(hC,N_r),e(hC,pO),e(pO,D_r),e(hC,q_r),e(V,G_r),e(V,pC),e(pC,due),e(due,O_r),e(pC,X_r),e(pC,_O),e(_O,z_r),e(pC,V_r),e(V,W_r),e(V,_C),e(_C,cue),e(cue,Q_r),e(_C,H_r),e(_C,uO),e(uO,U_r),e(_C,J_r),e(V,Y_r),e(V,uC),e(uC,fue),e(fue,K_r),e(uC,Z_r),e(uC,bO),e(bO,eur),e(uC,our),e(V,rur),e(V,bC),e(bC,mue),e(mue,tur),e(bC,aur),e(bC,vO),e(vO,nur),e(bC,sur),e(V,lur),e(V,vC),e(vC,gue),e(gue,iur),e(vC,dur),e(vC,TO),e(TO,cur),e(vC,fur),e(V,mur),e(V,TC),e(TC,hue),e(hue,gur),e(TC,hur),e(TC,FO),e(FO,pur),e(TC,_ur),e(V,uur),e(V,FC),e(FC,pue),e(pue,bur),e(FC,vur),e(FC,CO),e(CO,Tur),e(FC,Fur),e(V,Cur),e(V,CC),e(CC,_ue),e(_ue,Mur),e(CC,Eur),e(CC,MO),e(MO,yur),e(CC,wur),e(V,Aur),e(V,MC),e(MC,uue),e(uue,Lur),e(MC,Bur),e(MC,EO),e(EO,xur),e(MC,kur),e(V,Rur),e(V,EC),e(EC,bue),e(bue,Sur),e(EC,Pur),e(EC,yO),e(yO,$ur),e(EC,Iur),e(V,jur),e(V,yC),e(yC,vue),e(vue,Nur),e(yC,Dur),e(yC,wO),e(wO,qur),e(yC,Gur),e(V,Our),e(V,wC),e(wC,Tue),e(Tue,Xur),e(wC,zur),e(wC,AO),e(AO,Vur),e(wC,Wur),e(V,Qur),e(V,AC),e(AC,Fue),e(Fue,Hur),e(AC,Uur),e(AC,LO),e(LO,Jur),e(AC,Yur),e(V,Kur),e(V,LC),e(LC,Cue),e(Cue,Zur),e(LC,e5r),e(LC,BO),e(BO,o5r),e(LC,r5r),e(V,t5r),e(V,BC),e(BC,Mue),e(Mue,a5r),e(BC,n5r),e(BC,xO),e(xO,s5r),e(BC,l5r),e(V,i5r),e(V,xC),e(xC,Eue),e(Eue,d5r),e(xC,c5r),e(xC,kO),e(kO,f5r),e(xC,m5r),e(V,g5r),e(V,kC),e(kC,yue),e(yue,h5r),e(kC,p5r),e(kC,RO),e(RO,_5r),e(kC,u5r),e(V,b5r),e(V,RC),e(RC,wue),e(wue,v5r),e(RC,T5r),e(RC,SO),e(SO,F5r),e(RC,C5r),e(V,M5r),e(V,SC),e(SC,Aue),e(Aue,E5r),e(SC,y5r),e(SC,PO),e(PO,w5r),e(SC,A5r),e(wo,L5r),e(wo,Lue),e(Lue,B5r),e(wo,x5r),g(F6,wo,null),b(d,X8e,u),b(d,zc,u),e(zc,PC),e(PC,Bue),g(C6,Bue,null),e(zc,k5r),e(zc,xue),e(xue,R5r),b(d,z8e,u),b(d,Ar,u),g(M6,Ar,null),e(Ar,S5r),e(Ar,Vc),e(Vc,P5r),e(Vc,kue),e(kue,$5r),e(Vc,I5r),e(Vc,Rue),e(Rue,j5r),e(Vc,N5r),e(Ar,D5r),e(Ar,E6),e(E6,q5r),e(E6,Sue),e(Sue,G5r),e(E6,O5r),e(Ar,X5r),e(Ar,Tt),g(y6,Tt,null),e(Tt,z5r),e(Tt,Pue),e(Pue,V5r),e(Tt,W5r),e(Tt,Wc),e(Wc,Q5r),e(Wc,$ue),e($ue,H5r),e(Wc,U5r),e(Wc,Iue),e(Iue,J5r),e(Wc,Y5r),e(Tt,K5r),e(Tt,jue),e(jue,Z5r),e(Tt,e2r),g(w6,Tt,null),e(Ar,o2r),e(Ar,Ao),g(A6,Ao,null),e(Ao,r2r),e(Ao,Nue),e(Nue,t2r),e(Ao,a2r),e(Ao,Cn),e(Cn,n2r),e(Cn,Due),e(Due,s2r),e(Cn,l2r),e(Cn,que),e(que,i2r),e(Cn,d2r),e(Cn,Gue),e(Gue,c2r),e(Cn,f2r),e(Ao,m2r),e(Ao,Mn),e(Mn,$C),e($C,Oue),e(Oue,g2r),e($C,h2r),e($C,$O),e($O,p2r),e($C,_2r),e(Mn,u2r),e(Mn,IC),e(IC,Xue),e(Xue,b2r),e(IC,v2r),e(IC,IO),e(IO,T2r),e(IC,F2r),e(Mn,C2r),e(Mn,jC),e(jC,zue),e(zue,M2r),e(jC,E2r),e(jC,jO),e(jO,y2r),e(jC,w2r),e(Mn,A2r),e(Mn,NC),e(NC,Vue),e(Vue,L2r),e(NC,B2r),e(NC,NO),e(NO,x2r),e(NC,k2r),e(Ao,R2r),e(Ao,Wue),e(Wue,S2r),e(Ao,P2r),g(L6,Ao,null),b(d,V8e,u),b(d,Qc,u),e(Qc,DC),e(DC,Que),g(B6,Que,null),e(Qc,$2r),e(Qc,Hue),e(Hue,I2r),b(d,W8e,u),b(d,Lr,u),g(x6,Lr,null),e(Lr,j2r),e(Lr,Hc),e(Hc,N2r),e(Hc,Uue),e(Uue,D2r),e(Hc,q2r),e(Hc,Jue),e(Jue,G2r),e(Hc,O2r),e(Lr,X2r),e(Lr,k6),e(k6,z2r),e(k6,Yue),e(Yue,V2r),e(k6,W2r),e(Lr,Q2r),e(Lr,Ft),g(R6,Ft,null),e(Ft,H2r),e(Ft,Kue),e(Kue,U2r),e(Ft,J2r),e(Ft,Uc),e(Uc,Y2r),e(Uc,Zue),e(Zue,K2r),e(Uc,Z2r),e(Uc,e5e),e(e5e,e1r),e(Uc,o1r),e(Ft,r1r),e(Ft,o5e),e(o5e,t1r),e(Ft,a1r),g(S6,Ft,null),e(Lr,n1r),e(Lr,Lo),g(P6,Lo,null),e(Lo,s1r),e(Lo,r5e),e(r5e,l1r),e(Lo,i1r),e(Lo,En),e(En,d1r),e(En,t5e),e(t5e,c1r),e(En,f1r),e(En,a5e),e(a5e,m1r),e(En,g1r),e(En,n5e),e(n5e,h1r),e(En,p1r),e(Lo,_1r),e(Lo,fe),e(fe,qC),e(qC,s5e),e(s5e,u1r),e(qC,b1r),e(qC,DO),e(DO,v1r),e(qC,T1r),e(fe,F1r),e(fe,GC),e(GC,l5e),e(l5e,C1r),e(GC,M1r),e(GC,qO),e(qO,E1r),e(GC,y1r),e(fe,w1r),e(fe,OC),e(OC,i5e),e(i5e,A1r),e(OC,L1r),e(OC,GO),e(GO,B1r),e(OC,x1r),e(fe,k1r),e(fe,XC),e(XC,d5e),e(d5e,R1r),e(XC,S1r),e(XC,OO),e(OO,P1r),e(XC,$1r),e(fe,I1r),e(fe,zC),e(zC,c5e),e(c5e,j1r),e(zC,N1r),e(zC,XO),e(XO,D1r),e(zC,q1r),e(fe,G1r),e(fe,VC),e(VC,f5e),e(f5e,O1r),e(VC,X1r),e(VC,zO),e(zO,z1r),e(VC,V1r),e(fe,W1r),e(fe,WC),e(WC,m5e),e(m5e,Q1r),e(WC,H1r),e(WC,VO),e(VO,U1r),e(WC,J1r),e(fe,Y1r),e(fe,QC),e(QC,g5e),e(g5e,K1r),e(QC,Z1r),e(QC,WO),e(WO,ebr),e(QC,obr),e(fe,rbr),e(fe,HC),e(HC,h5e),e(h5e,tbr),e(HC,abr),e(HC,QO),e(QO,nbr),e(HC,sbr),e(fe,lbr),e(fe,UC),e(UC,p5e),e(p5e,ibr),e(UC,dbr),e(UC,HO),e(HO,cbr),e(UC,fbr),e(fe,mbr),e(fe,JC),e(JC,_5e),e(_5e,gbr),e(JC,hbr),e(JC,UO),e(UO,pbr),e(JC,_br),e(Lo,ubr),e(Lo,u5e),e(u5e,bbr),e(Lo,vbr),g($6,Lo,null),b(d,Q8e,u),b(d,Jc,u),e(Jc,YC),e(YC,b5e),g(I6,b5e,null),e(Jc,Tbr),e(Jc,v5e),e(v5e,Fbr),b(d,H8e,u),b(d,Br,u),g(j6,Br,null),e(Br,Cbr),e(Br,Yc),e(Yc,Mbr),e(Yc,T5e),e(T5e,Ebr),e(Yc,ybr),e(Yc,F5e),e(F5e,wbr),e(Yc,Abr),e(Br,Lbr),e(Br,N6),e(N6,Bbr),e(N6,C5e),e(C5e,xbr),e(N6,kbr),e(Br,Rbr),e(Br,Ct),g(D6,Ct,null),e(Ct,Sbr),e(Ct,M5e),e(M5e,Pbr),e(Ct,$br),e(Ct,Kc),e(Kc,Ibr),e(Kc,E5e),e(E5e,jbr),e(Kc,Nbr),e(Kc,y5e),e(y5e,Dbr),e(Kc,qbr),e(Ct,Gbr),e(Ct,w5e),e(w5e,Obr),e(Ct,Xbr),g(q6,Ct,null),e(Br,zbr),e(Br,Bo),g(G6,Bo,null),e(Bo,Vbr),e(Bo,A5e),e(A5e,Wbr),e(Bo,Qbr),e(Bo,yn),e(yn,Hbr),e(yn,L5e),e(L5e,Ubr),e(yn,Jbr),e(yn,B5e),e(B5e,Ybr),e(yn,Kbr),e(yn,x5e),e(x5e,Zbr),e(yn,evr),e(Bo,ovr),e(Bo,ve),e(ve,KC),e(KC,k5e),e(k5e,rvr),e(KC,tvr),e(KC,JO),e(JO,avr),e(KC,nvr),e(ve,svr),e(ve,ZC),e(ZC,R5e),e(R5e,lvr),e(ZC,ivr),e(ZC,YO),e(YO,dvr),e(ZC,cvr),e(ve,fvr),e(ve,e4),e(e4,S5e),e(S5e,mvr),e(e4,gvr),e(e4,KO),e(KO,hvr),e(e4,pvr),e(ve,_vr),e(ve,o4),e(o4,P5e),e(P5e,uvr),e(o4,bvr),e(o4,ZO),e(ZO,vvr),e(o4,Tvr),e(ve,Fvr),e(ve,r4),e(r4,$5e),e($5e,Cvr),e(r4,Mvr),e(r4,eX),e(eX,Evr),e(r4,yvr),e(ve,wvr),e(ve,t4),e(t4,I5e),e(I5e,Avr),e(t4,Lvr),e(t4,oX),e(oX,Bvr),e(t4,xvr),e(ve,kvr),e(ve,a4),e(a4,j5e),e(j5e,Rvr),e(a4,Svr),e(a4,rX),e(rX,Pvr),e(a4,$vr),e(ve,Ivr),e(ve,n4),e(n4,N5e),e(N5e,jvr),e(n4,Nvr),e(n4,tX),e(tX,Dvr),e(n4,qvr),e(ve,Gvr),e(ve,s4),e(s4,D5e),e(D5e,Ovr),e(s4,Xvr),e(s4,aX),e(aX,zvr),e(s4,Vvr),e(Bo,Wvr),e(Bo,q5e),e(q5e,Qvr),e(Bo,Hvr),g(O6,Bo,null),b(d,U8e,u),b(d,Zc,u),e(Zc,l4),e(l4,G5e),g(X6,G5e,null),e(Zc,Uvr),e(Zc,O5e),e(O5e,Jvr),b(d,J8e,u),b(d,xr,u),g(z6,xr,null),e(xr,Yvr),e(xr,ef),e(ef,Kvr),e(ef,X5e),e(X5e,Zvr),e(ef,eTr),e(ef,z5e),e(z5e,oTr),e(ef,rTr),e(xr,tTr),e(xr,V6),e(V6,aTr),e(V6,V5e),e(V5e,nTr),e(V6,sTr),e(xr,lTr),e(xr,Mt),g(W6,Mt,null),e(Mt,iTr),e(Mt,W5e),e(W5e,dTr),e(Mt,cTr),e(Mt,of),e(of,fTr),e(of,Q5e),e(Q5e,mTr),e(of,gTr),e(of,H5e),e(H5e,hTr),e(of,pTr),e(Mt,_Tr),e(Mt,U5e),e(U5e,uTr),e(Mt,bTr),g(Q6,Mt,null),e(xr,vTr),e(xr,xo),g(H6,xo,null),e(xo,TTr),e(xo,J5e),e(J5e,FTr),e(xo,CTr),e(xo,wn),e(wn,MTr),e(wn,Y5e),e(Y5e,ETr),e(wn,yTr),e(wn,K5e),e(K5e,wTr),e(wn,ATr),e(wn,Z5e),e(Z5e,LTr),e(wn,BTr),e(xo,xTr),e(xo,Te),e(Te,i4),e(i4,e2e),e(e2e,kTr),e(i4,RTr),e(i4,nX),e(nX,STr),e(i4,PTr),e(Te,$Tr),e(Te,d4),e(d4,o2e),e(o2e,ITr),e(d4,jTr),e(d4,sX),e(sX,NTr),e(d4,DTr),e(Te,qTr),e(Te,c4),e(c4,r2e),e(r2e,GTr),e(c4,OTr),e(c4,lX),e(lX,XTr),e(c4,zTr),e(Te,VTr),e(Te,f4),e(f4,t2e),e(t2e,WTr),e(f4,QTr),e(f4,iX),e(iX,HTr),e(f4,UTr),e(Te,JTr),e(Te,m4),e(m4,a2e),e(a2e,YTr),e(m4,KTr),e(m4,dX),e(dX,ZTr),e(m4,eFr),e(Te,oFr),e(Te,g4),e(g4,n2e),e(n2e,rFr),e(g4,tFr),e(g4,cX),e(cX,aFr),e(g4,nFr),e(Te,sFr),e(Te,h4),e(h4,s2e),e(s2e,lFr),e(h4,iFr),e(h4,fX),e(fX,dFr),e(h4,cFr),e(Te,fFr),e(Te,p4),e(p4,l2e),e(l2e,mFr),e(p4,gFr),e(p4,mX),e(mX,hFr),e(p4,pFr),e(Te,_Fr),e(Te,_4),e(_4,i2e),e(i2e,uFr),e(_4,bFr),e(_4,gX),e(gX,vFr),e(_4,TFr),e(xo,FFr),e(xo,d2e),e(d2e,CFr),e(xo,MFr),g(U6,xo,null),b(d,Y8e,u),b(d,rf,u),e(rf,u4),e(u4,c2e),g(J6,c2e,null),e(rf,EFr),e(rf,f2e),e(f2e,yFr),b(d,K8e,u),b(d,kr,u),g(Y6,kr,null),e(kr,wFr),e(kr,tf),e(tf,AFr),e(tf,m2e),e(m2e,LFr),e(tf,BFr),e(tf,g2e),e(g2e,xFr),e(tf,kFr),e(kr,RFr),e(kr,K6),e(K6,SFr),e(K6,h2e),e(h2e,PFr),e(K6,$Fr),e(kr,IFr),e(kr,Et),g(Z6,Et,null),e(Et,jFr),e(Et,p2e),e(p2e,NFr),e(Et,DFr),e(Et,af),e(af,qFr),e(af,_2e),e(_2e,GFr),e(af,OFr),e(af,u2e),e(u2e,XFr),e(af,zFr),e(Et,VFr),e(Et,b2e),e(b2e,WFr),e(Et,QFr),g(e0,Et,null),e(kr,HFr),e(kr,ko),g(o0,ko,null),e(ko,UFr),e(ko,v2e),e(v2e,JFr),e(ko,YFr),e(ko,An),e(An,KFr),e(An,T2e),e(T2e,ZFr),e(An,e9r),e(An,F2e),e(F2e,o9r),e(An,r9r),e(An,C2e),e(C2e,t9r),e(An,a9r),e(ko,n9r),e(ko,Fe),e(Fe,b4),e(b4,M2e),e(M2e,s9r),e(b4,l9r),e(b4,hX),e(hX,i9r),e(b4,d9r),e(Fe,c9r),e(Fe,v4),e(v4,E2e),e(E2e,f9r),e(v4,m9r),e(v4,pX),e(pX,g9r),e(v4,h9r),e(Fe,p9r),e(Fe,T4),e(T4,y2e),e(y2e,_9r),e(T4,u9r),e(T4,_X),e(_X,b9r),e(T4,v9r),e(Fe,T9r),e(Fe,F4),e(F4,w2e),e(w2e,F9r),e(F4,C9r),e(F4,uX),e(uX,M9r),e(F4,E9r),e(Fe,y9r),e(Fe,C4),e(C4,A2e),e(A2e,w9r),e(C4,A9r),e(C4,bX),e(bX,L9r),e(C4,B9r),e(Fe,x9r),e(Fe,M4),e(M4,L2e),e(L2e,k9r),e(M4,R9r),e(M4,vX),e(vX,S9r),e(M4,P9r),e(Fe,$9r),e(Fe,E4),e(E4,B2e),e(B2e,I9r),e(E4,j9r),e(E4,TX),e(TX,N9r),e(E4,D9r),e(Fe,q9r),e(Fe,y4),e(y4,x2e),e(x2e,G9r),e(y4,O9r),e(y4,FX),e(FX,X9r),e(y4,z9r),e(Fe,V9r),e(Fe,w4),e(w4,k2e),e(k2e,W9r),e(w4,Q9r),e(w4,CX),e(CX,H9r),e(w4,U9r),e(ko,J9r),e(ko,R2e),e(R2e,Y9r),e(ko,K9r),g(r0,ko,null),b(d,Z8e,u),b(d,nf,u),e(nf,A4),e(A4,S2e),g(t0,S2e,null),e(nf,Z9r),e(nf,P2e),e(P2e,eCr),b(d,eBe,u),b(d,Rr,u),g(a0,Rr,null),e(Rr,oCr),e(Rr,sf),e(sf,rCr),e(sf,$2e),e($2e,tCr),e(sf,aCr),e(sf,I2e),e(I2e,nCr),e(sf,sCr),e(Rr,lCr),e(Rr,n0),e(n0,iCr),e(n0,j2e),e(j2e,dCr),e(n0,cCr),e(Rr,fCr),e(Rr,yt),g(s0,yt,null),e(yt,mCr),e(yt,N2e),e(N2e,gCr),e(yt,hCr),e(yt,lf),e(lf,pCr),e(lf,D2e),e(D2e,_Cr),e(lf,uCr),e(lf,q2e),e(q2e,bCr),e(lf,vCr),e(yt,TCr),e(yt,G2e),e(G2e,FCr),e(yt,CCr),g(l0,yt,null),e(Rr,MCr),e(Rr,Ro),g(i0,Ro,null),e(Ro,ECr),e(Ro,O2e),e(O2e,yCr),e(Ro,wCr),e(Ro,Ln),e(Ln,ACr),e(Ln,X2e),e(X2e,LCr),e(Ln,BCr),e(Ln,z2e),e(z2e,xCr),e(Ln,kCr),e(Ln,V2e),e(V2e,RCr),e(Ln,SCr),e(Ro,PCr),e(Ro,Ce),e(Ce,L4),e(L4,W2e),e(W2e,$Cr),e(L4,ICr),e(L4,MX),e(MX,jCr),e(L4,NCr),e(Ce,DCr),e(Ce,B4),e(B4,Q2e),e(Q2e,qCr),e(B4,GCr),e(B4,EX),e(EX,OCr),e(B4,XCr),e(Ce,zCr),e(Ce,x4),e(x4,H2e),e(H2e,VCr),e(x4,WCr),e(x4,yX),e(yX,QCr),e(x4,HCr),e(Ce,UCr),e(Ce,k4),e(k4,U2e),e(U2e,JCr),e(k4,YCr),e(k4,wX),e(wX,KCr),e(k4,ZCr),e(Ce,e4r),e(Ce,R4),e(R4,J2e),e(J2e,o4r),e(R4,r4r),e(R4,AX),e(AX,t4r),e(R4,a4r),e(Ce,n4r),e(Ce,S4),e(S4,Y2e),e(Y2e,s4r),e(S4,l4r),e(S4,LX),e(LX,i4r),e(S4,d4r),e(Ce,c4r),e(Ce,P4),e(P4,K2e),e(K2e,f4r),e(P4,m4r),e(P4,BX),e(BX,g4r),e(P4,h4r),e(Ce,p4r),e(Ce,$4),e($4,Z2e),e(Z2e,_4r),e($4,u4r),e($4,xX),e(xX,b4r),e($4,v4r),e(Ce,T4r),e(Ce,I4),e(I4,e1e),e(e1e,F4r),e(I4,C4r),e(I4,kX),e(kX,M4r),e(I4,E4r),e(Ro,y4r),e(Ro,o1e),e(o1e,w4r),e(Ro,A4r),g(d0,Ro,null),b(d,oBe,u),b(d,df,u),e(df,j4),e(j4,r1e),g(c0,r1e,null),e(df,L4r),e(df,t1e),e(t1e,B4r),b(d,rBe,u),b(d,Sr,u),g(f0,Sr,null),e(Sr,x4r),e(Sr,cf),e(cf,k4r),e(cf,a1e),e(a1e,R4r),e(cf,S4r),e(cf,n1e),e(n1e,P4r),e(cf,$4r),e(Sr,I4r),e(Sr,m0),e(m0,j4r),e(m0,s1e),e(s1e,N4r),e(m0,D4r),e(Sr,q4r),e(Sr,wt),g(g0,wt,null),e(wt,G4r),e(wt,l1e),e(l1e,O4r),e(wt,X4r),e(wt,ff),e(ff,z4r),e(ff,i1e),e(i1e,V4r),e(ff,W4r),e(ff,d1e),e(d1e,Q4r),e(ff,H4r),e(wt,U4r),e(wt,c1e),e(c1e,J4r),e(wt,Y4r),g(h0,wt,null),e(Sr,K4r),e(Sr,So),g(p0,So,null),e(So,Z4r),e(So,f1e),e(f1e,eMr),e(So,oMr),e(So,Bn),e(Bn,rMr),e(Bn,m1e),e(m1e,tMr),e(Bn,aMr),e(Bn,g1e),e(g1e,nMr),e(Bn,sMr),e(Bn,h1e),e(h1e,lMr),e(Bn,iMr),e(So,dMr),e(So,so),e(so,N4),e(N4,p1e),e(p1e,cMr),e(N4,fMr),e(N4,RX),e(RX,mMr),e(N4,gMr),e(so,hMr),e(so,D4),e(D4,_1e),e(_1e,pMr),e(D4,_Mr),e(D4,SX),e(SX,uMr),e(D4,bMr),e(so,vMr),e(so,q4),e(q4,u1e),e(u1e,TMr),e(q4,FMr),e(q4,PX),e(PX,CMr),e(q4,MMr),e(so,EMr),e(so,G4),e(G4,b1e),e(b1e,yMr),e(G4,wMr),e(G4,$X),e($X,AMr),e(G4,LMr),e(so,BMr),e(so,O4),e(O4,v1e),e(v1e,xMr),e(O4,kMr),e(O4,IX),e(IX,RMr),e(O4,SMr),e(so,PMr),e(so,X4),e(X4,T1e),e(T1e,$Mr),e(X4,IMr),e(X4,jX),e(jX,jMr),e(X4,NMr),e(so,DMr),e(so,z4),e(z4,F1e),e(F1e,qMr),e(z4,GMr),e(z4,NX),e(NX,OMr),e(z4,XMr),e(So,zMr),e(So,C1e),e(C1e,VMr),e(So,WMr),g(_0,So,null),b(d,tBe,u),b(d,mf,u),e(mf,V4),e(V4,M1e),g(u0,M1e,null),e(mf,QMr),e(mf,E1e),e(E1e,HMr),b(d,aBe,u),b(d,Pr,u),g(b0,Pr,null),e(Pr,UMr),e(Pr,gf),e(gf,JMr),e(gf,y1e),e(y1e,YMr),e(gf,KMr),e(gf,w1e),e(w1e,ZMr),e(gf,eEr),e(Pr,oEr),e(Pr,v0),e(v0,rEr),e(v0,A1e),e(A1e,tEr),e(v0,aEr),e(Pr,nEr),e(Pr,At),g(T0,At,null),e(At,sEr),e(At,L1e),e(L1e,lEr),e(At,iEr),e(At,hf),e(hf,dEr),e(hf,B1e),e(B1e,cEr),e(hf,fEr),e(hf,x1e),e(x1e,mEr),e(hf,gEr),e(At,hEr),e(At,k1e),e(k1e,pEr),e(At,_Er),g(F0,At,null),e(Pr,uEr),e(Pr,Po),g(C0,Po,null),e(Po,bEr),e(Po,R1e),e(R1e,vEr),e(Po,TEr),e(Po,xn),e(xn,FEr),e(xn,S1e),e(S1e,CEr),e(xn,MEr),e(xn,P1e),e(P1e,EEr),e(xn,yEr),e(xn,$1e),e($1e,wEr),e(xn,AEr),e(Po,LEr),e(Po,lo),e(lo,W4),e(W4,I1e),e(I1e,BEr),e(W4,xEr),e(W4,DX),e(DX,kEr),e(W4,REr),e(lo,SEr),e(lo,Q4),e(Q4,j1e),e(j1e,PEr),e(Q4,$Er),e(Q4,qX),e(qX,IEr),e(Q4,jEr),e(lo,NEr),e(lo,H4),e(H4,N1e),e(N1e,DEr),e(H4,qEr),e(H4,GX),e(GX,GEr),e(H4,OEr),e(lo,XEr),e(lo,U4),e(U4,D1e),e(D1e,zEr),e(U4,VEr),e(U4,OX),e(OX,WEr),e(U4,QEr),e(lo,HEr),e(lo,J4),e(J4,q1e),e(q1e,UEr),e(J4,JEr),e(J4,XX),e(XX,YEr),e(J4,KEr),e(lo,ZEr),e(lo,Y4),e(Y4,G1e),e(G1e,e3r),e(Y4,o3r),e(Y4,zX),e(zX,r3r),e(Y4,t3r),e(lo,a3r),e(lo,K4),e(K4,O1e),e(O1e,n3r),e(K4,s3r),e(K4,VX),e(VX,l3r),e(K4,i3r),e(Po,d3r),e(Po,X1e),e(X1e,c3r),e(Po,f3r),g(M0,Po,null),b(d,nBe,u),b(d,pf,u),e(pf,Z4),e(Z4,z1e),g(E0,z1e,null),e(pf,m3r),e(pf,V1e),e(V1e,g3r),b(d,sBe,u),b(d,$r,u),g(y0,$r,null),e($r,h3r),e($r,_f),e(_f,p3r),e(_f,W1e),e(W1e,_3r),e(_f,u3r),e(_f,Q1e),e(Q1e,b3r),e(_f,v3r),e($r,T3r),e($r,w0),e(w0,F3r),e(w0,H1e),e(H1e,C3r),e(w0,M3r),e($r,E3r),e($r,Lt),g(A0,Lt,null),e(Lt,y3r),e(Lt,U1e),e(U1e,w3r),e(Lt,A3r),e(Lt,uf),e(uf,L3r),e(uf,J1e),e(J1e,B3r),e(uf,x3r),e(uf,Y1e),e(Y1e,k3r),e(uf,R3r),e(Lt,S3r),e(Lt,K1e),e(K1e,P3r),e(Lt,$3r),g(L0,Lt,null),e($r,I3r),e($r,$o),g(B0,$o,null),e($o,j3r),e($o,Z1e),e(Z1e,N3r),e($o,D3r),e($o,kn),e(kn,q3r),e(kn,ebe),e(ebe,G3r),e(kn,O3r),e(kn,obe),e(obe,X3r),e(kn,z3r),e(kn,rbe),e(rbe,V3r),e(kn,W3r),e($o,Q3r),e($o,tbe),e(tbe,eM),e(eM,abe),e(abe,H3r),e(eM,U3r),e(eM,WX),e(WX,J3r),e(eM,Y3r),e($o,K3r),e($o,nbe),e(nbe,Z3r),e($o,eyr),g(x0,$o,null),b(d,lBe,u),b(d,bf,u),e(bf,oM),e(oM,sbe),g(k0,sbe,null),e(bf,oyr),e(bf,lbe),e(lbe,ryr),b(d,iBe,u),b(d,Ir,u),g(R0,Ir,null),e(Ir,tyr),e(Ir,vf),e(vf,ayr),e(vf,ibe),e(ibe,nyr),e(vf,syr),e(vf,dbe),e(dbe,lyr),e(vf,iyr),e(Ir,dyr),e(Ir,S0),e(S0,cyr),e(S0,cbe),e(cbe,fyr),e(S0,myr),e(Ir,gyr),e(Ir,Bt),g(P0,Bt,null),e(Bt,hyr),e(Bt,fbe),e(fbe,pyr),e(Bt,_yr),e(Bt,Tf),e(Tf,uyr),e(Tf,mbe),e(mbe,byr),e(Tf,vyr),e(Tf,gbe),e(gbe,Tyr),e(Tf,Fyr),e(Bt,Cyr),e(Bt,hbe),e(hbe,Myr),e(Bt,Eyr),g($0,Bt,null),e(Ir,yyr),e(Ir,Io),g(I0,Io,null),e(Io,wyr),e(Io,pbe),e(pbe,Ayr),e(Io,Lyr),e(Io,Rn),e(Rn,Byr),e(Rn,_be),e(_be,xyr),e(Rn,kyr),e(Rn,ube),e(ube,Ryr),e(Rn,Syr),e(Rn,bbe),e(bbe,Pyr),e(Rn,$yr),e(Io,Iyr),e(Io,j0),e(j0,rM),e(rM,vbe),e(vbe,jyr),e(rM,Nyr),e(rM,QX),e(QX,Dyr),e(rM,qyr),e(j0,Gyr),e(j0,tM),e(tM,Tbe),e(Tbe,Oyr),e(tM,Xyr),e(tM,HX),e(HX,zyr),e(tM,Vyr),e(Io,Wyr),e(Io,Fbe),e(Fbe,Qyr),e(Io,Hyr),g(N0,Io,null),b(d,dBe,u),b(d,Ff,u),e(Ff,aM),e(aM,Cbe),g(D0,Cbe,null),e(Ff,Uyr),e(Ff,Mbe),e(Mbe,Jyr),b(d,cBe,u),b(d,jr,u),g(q0,jr,null),e(jr,Yyr),e(jr,Cf),e(Cf,Kyr),e(Cf,Ebe),e(Ebe,Zyr),e(Cf,ewr),e(Cf,ybe),e(ybe,owr),e(Cf,rwr),e(jr,twr),e(jr,G0),e(G0,awr),e(G0,wbe),e(wbe,nwr),e(G0,swr),e(jr,lwr),e(jr,xt),g(O0,xt,null),e(xt,iwr),e(xt,Abe),e(Abe,dwr),e(xt,cwr),e(xt,Mf),e(Mf,fwr),e(Mf,Lbe),e(Lbe,mwr),e(Mf,gwr),e(Mf,Bbe),e(Bbe,hwr),e(Mf,pwr),e(xt,_wr),e(xt,xbe),e(xbe,uwr),e(xt,bwr),g(X0,xt,null),e(jr,vwr),e(jr,jo),g(z0,jo,null),e(jo,Twr),e(jo,kbe),e(kbe,Fwr),e(jo,Cwr),e(jo,Sn),e(Sn,Mwr),e(Sn,Rbe),e(Rbe,Ewr),e(Sn,ywr),e(Sn,Sbe),e(Sbe,wwr),e(Sn,Awr),e(Sn,Pbe),e(Pbe,Lwr),e(Sn,Bwr),e(jo,xwr),e(jo,$be),e($be,nM),e(nM,Ibe),e(Ibe,kwr),e(nM,Rwr),e(nM,UX),e(UX,Swr),e(nM,Pwr),e(jo,$wr),e(jo,jbe),e(jbe,Iwr),e(jo,jwr),g(V0,jo,null),fBe=!0},p(d,[u]){const W0={};u&2&&(W0.$$scope={dirty:u,ctx:d}),xf.$set(W0);const Nbe={};u&2&&(Nbe.$$scope={dirty:u,ctx:d}),ih.$set(Nbe);const Dbe={};u&2&&(Dbe.$$scope={dirty:u,ctx:d}),vh.$set(Dbe)},i(d){fBe||(h(ce.$$.fragment,d),h($a.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(xf.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(AE.$$.fragment,d),h(ih.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(kE.$$.fragment,d),h(PE.$$.fragment,d),h(vh.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(GE.$$.fragment,d),h(OE.$$.fragment,d),h(XE.$$.fragment,d),h(zE.$$.fragment,d),h(VE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(q3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(V3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(My.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Ny.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Gy.$$.fragment,d),h(Oy.$$.fragment,d),h(zy.$$.fragment,d),h(Vy.$$.fragment,d),h(Wy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(Dw.$$.fragment,d),h(Gw.$$.fragment,d),h(Ow.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(lA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(GA.$$.fragment,d),h(OA.$$.fragment,d),h(zA.$$.fragment,d),h(VA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(s6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(f6.$$.fragment,d),h(m6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(b6.$$.fragment,d),h(v6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(y6.$$.fragment,d),h(w6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(R6.$$.fragment,d),h(S6.$$.fragment,d),h(P6.$$.fragment,d),h($6.$$.fragment,d),h(I6.$$.fragment,d),h(j6.$$.fragment,d),h(D6.$$.fragment,d),h(q6.$$.fragment,d),h(G6.$$.fragment,d),h(O6.$$.fragment,d),h(X6.$$.fragment,d),h(z6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(H6.$$.fragment,d),h(U6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(Z6.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(r0.$$.fragment,d),h(t0.$$.fragment,d),h(a0.$$.fragment,d),h(s0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(c0.$$.fragment,d),h(f0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(p0.$$.fragment,d),h(_0.$$.fragment,d),h(u0.$$.fragment,d),h(b0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(E0.$$.fragment,d),h(y0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(k0.$$.fragment,d),h(R0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(N0.$$.fragment,d),h(D0.$$.fragment,d),h(q0.$$.fragment,d),h(O0.$$.fragment,d),h(X0.$$.fragment,d),h(z0.$$.fragment,d),h(V0.$$.fragment,d),fBe=!0)},o(d){p(ce.$$.fragment,d),p($a.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(xf.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(AE.$$.fragment,d),p(ih.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(kE.$$.fragment,d),p(PE.$$.fragment,d),p(vh.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(GE.$$.fragment,d),p(OE.$$.fragment,d),p(XE.$$.fragment,d),p(zE.$$.fragment,d),p(VE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(q3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(V3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(My.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(xy.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(jy.$$.fragment,d),p(Ny.$$.fragment,d),p(Dy.$$.fragment,d),p(qy.$$.fragment,d),p(Gy.$$.fragment,d),p(Oy.$$.fragment,d),p(zy.$$.fragment,d),p(Vy.$$.fragment,d),p(Wy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(Dw.$$.fragment,d),p(Gw.$$.fragment,d),p(Ow.$$.fragment,d),p(Xw.$$.fragment,d),p(zw.$$.fragment,d),p(Vw.$$.fragment,d),p(Ww.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(lA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(hA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(FA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(LA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p($A.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(GA.$$.fragment,d),p(OA.$$.fragment,d),p(zA.$$.fragment,d),p(VA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(UA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(e6.$$.fragment,d),p(o6.$$.fragment,d),p(r6.$$.fragment,d),p(a6.$$.fragment,d),p(n6.$$.fragment,d),p(s6.$$.fragment,d),p(l6.$$.fragment,d),p(i6.$$.fragment,d),p(d6.$$.fragment,d),p(f6.$$.fragment,d),p(m6.$$.fragment,d),p(g6.$$.fragment,d),p(h6.$$.fragment,d),p(p6.$$.fragment,d),p(_6.$$.fragment,d),p(b6.$$.fragment,d),p(v6.$$.fragment,d),p(T6.$$.fragment,d),p(F6.$$.fragment,d),p(C6.$$.fragment,d),p(M6.$$.fragment,d),p(y6.$$.fragment,d),p(w6.$$.fragment,d),p(A6.$$.fragment,d),p(L6.$$.fragment,d),p(B6.$$.fragment,d),p(x6.$$.fragment,d),p(R6.$$.fragment,d),p(S6.$$.fragment,d),p(P6.$$.fragment,d),p($6.$$.fragment,d),p(I6.$$.fragment,d),p(j6.$$.fragment,d),p(D6.$$.fragment,d),p(q6.$$.fragment,d),p(G6.$$.fragment,d),p(O6.$$.fragment,d),p(X6.$$.fragment,d),p(z6.$$.fragment,d),p(W6.$$.fragment,d),p(Q6.$$.fragment,d),p(H6.$$.fragment,d),p(U6.$$.fragment,d),p(J6.$$.fragment,d),p(Y6.$$.fragment,d),p(Z6.$$.fragment,d),p(e0.$$.fragment,d),p(o0.$$.fragment,d),p(r0.$$.fragment,d),p(t0.$$.fragment,d),p(a0.$$.fragment,d),p(s0.$$.fragment,d),p(l0.$$.fragment,d),p(i0.$$.fragment,d),p(d0.$$.fragment,d),p(c0.$$.fragment,d),p(f0.$$.fragment,d),p(g0.$$.fragment,d),p(h0.$$.fragment,d),p(p0.$$.fragment,d),p(_0.$$.fragment,d),p(u0.$$.fragment,d),p(b0.$$.fragment,d),p(T0.$$.fragment,d),p(F0.$$.fragment,d),p(C0.$$.fragment,d),p(M0.$$.fragment,d),p(E0.$$.fragment,d),p(y0.$$.fragment,d),p(A0.$$.fragment,d),p(L0.$$.fragment,d),p(B0.$$.fragment,d),p(x0.$$.fragment,d),p(k0.$$.fragment,d),p(R0.$$.fragment,d),p(P0.$$.fragment,d),p($0.$$.fragment,d),p(I0.$$.fragment,d),p(N0.$$.fragment,d),p(D0.$$.fragment,d),p(q0.$$.fragment,d),p(O0.$$.fragment,d),p(X0.$$.fragment,d),p(z0.$$.fragment,d),p(V0.$$.fragment,d),fBe=!1},d(d){t(J),d&&t(Ae),d&&t(ie),_(ce),d&&t(yf),d&&t(sa),d&&t(ye),d&&t(io),d&&t(Af),_($a,d),d&&t(co),d&&t(ge),d&&t(qo),d&&t(Ia),d&&t(m7e),d&&t(Pi),_(lE),d&&t(g7e),d&&t(Nn),d&&t(h7e),_(iE,d),d&&t(p7e),d&&t(HL),d&&t(_7e),_(xf,d),d&&t(u7e),d&&t($i),_(dE),d&&t(b7e),d&&t(Go),_(cE),_(gE),_(hE),_(pE),d&&t(v7e),d&&t(ji),_(_E),d&&t(T7e),d&&t(Oo),_(uE),_(TE),_(FE),_(CE),d&&t(F7e),d&&t(Ni),_(ME),d&&t(C7e),d&&t(Xo),_(EE),_(AE),_(ih),_(LE),_(BE),d&&t(M7e),d&&t(Di),_(xE),d&&t(E7e),d&&t(zo),_(kE),_(PE),_(vh),_($E),_(IE),d&&t(y7e),d&&t(Gi),_(jE),d&&t(w7e),d&&t(Vo),_(NE),_(qE),_(GE),_(OE),_(XE),d&&t(A7e),d&&t(zi),_(zE),d&&t(L7e),d&&t(Wo),_(VE),_(QE),_(HE),_(UE),_(JE),d&&t(B7e),d&&t(Qi),_(YE),d&&t(x7e),d&&t(Qo),_(KE),_(e3),_(o3),_(r3),_(t3),d&&t(k7e),d&&t(Ji),_(a3),d&&t(R7e),d&&t(Ho),_(n3),_(l3),_(i3),_(d3),_(c3),d&&t(S7e),d&&t(Zi),_(f3),d&&t(P7e),d&&t(Uo),_(m3),_(h3),_(p3),_(_3),_(u3),d&&t($7e),d&&t(rd),_(b3),d&&t(I7e),d&&t(Jo),_(v3),_(F3),_(C3),_(M3),_(E3),d&&t(j7e),d&&t(nd),_(y3),d&&t(N7e),d&&t(Yo),_(w3),_(L3),_(B3),_(x3),_(k3),d&&t(D7e),d&&t(id),_(R3),d&&t(q7e),d&&t(Ko),_(S3),_($3),_(I3),_(j3),_(N3),d&&t(G7e),d&&t(fd),_(D3),d&&t(O7e),d&&t(Zo),_(q3),_(O3),_(X3),_(z3),_(V3),d&&t(X7e),d&&t(hd),_(W3),d&&t(z7e),d&&t(er),_(Q3),_(U3),_(J3),_(Y3),_(K3),d&&t(V7e),d&&t(ud),_(Z3),d&&t(W7e),d&&t(or),_(ey),_(ry),_(ty),_(ay),_(ny),d&&t(Q7e),d&&t(Td),_(sy),d&&t(H7e),d&&t(rr),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(U7e),d&&t(Md),_(gy),d&&t(J7e),d&&t(tr),_(hy),_(_y),_(uy),_(by),_(vy),d&&t(Y7e),d&&t(wd),_(Ty),d&&t(K7e),d&&t(ar),_(Fy),_(My),_(Ey),_(yy),_(wy),d&&t(Z7e),d&&t(Bd),_(Ay),d&&t(e8e),d&&t(nr),_(Ly),_(xy),_(ky),_(Ry),_(Sy),d&&t(o8e),d&&t(Sd),_(Py),d&&t(r8e),d&&t(sr),_($y),_(jy),_(Ny),_(Dy),_(qy),d&&t(t8e),d&&t(Id),_(Gy),d&&t(a8e),d&&t(lr),_(Oy),_(zy),_(Vy),_(Wy),_(Hy),d&&t(n8e),d&&t(Dd),_(Uy),d&&t(s8e),d&&t(ir),_(Jy),_(Ky),_(Zy),_(ew),_(ow),d&&t(l8e),d&&t(Xd),_(rw),d&&t(i8e),d&&t(dr),_(tw),_(nw),_(sw),_(lw),_(iw),d&&t(d8e),d&&t(Qd),_(dw),d&&t(c8e),d&&t(cr),_(cw),_(mw),_(gw),_(hw),_(pw),d&&t(f8e),d&&t(Jd),_(_w),d&&t(m8e),d&&t(fr),_(uw),_(vw),_(Tw),_(Fw),_(Cw),d&&t(g8e),d&&t(Zd),_(Mw),d&&t(h8e),d&&t(mr),_(Ew),_(ww),_(Aw),_(Lw),_(xw),d&&t(p8e),d&&t(rc),_(kw),d&&t(_8e),d&&t(gr),_(Rw),_(Pw),_($w),_(Iw),_(jw),d&&t(u8e),d&&t(nc),_(Nw),d&&t(b8e),d&&t(hr),_(Dw),_(Gw),_(Ow),_(Xw),_(zw),d&&t(v8e),d&&t(ic),_(Vw),d&&t(T8e),d&&t(pr),_(Ww),_(Hw),_(Uw),_(Jw),_(Yw),d&&t(F8e),d&&t(fc),_(Kw),d&&t(C8e),d&&t(_r),_(Zw),_(oA),_(rA),_(tA),_(nA),d&&t(M8e),d&&t(hc),_(sA),d&&t(E8e),d&&t(ur),_(lA),_(dA),_(cA),_(fA),_(mA),d&&t(y8e),d&&t(uc),_(gA),d&&t(w8e),d&&t(br),_(hA),_(_A),_(uA),_(bA),_(vA),d&&t(A8e),d&&t(Tc),_(TA),d&&t(L8e),d&&t(vr),_(FA),_(MA),_(EA),_(yA),_(wA),d&&t(B8e),d&&t(Mc),_(AA),d&&t(x8e),d&&t(Tr),_(LA),_(xA),_(kA),_(RA),_(SA),d&&t(k8e),d&&t(wc),_(PA),d&&t(R8e),d&&t(Fr),_($A),_(jA),_(NA),_(DA),_(qA),d&&t(S8e),d&&t(Bc),_(GA),d&&t(P8e),d&&t(Cr),_(OA),_(zA),_(VA),_(WA),_(QA),d&&t($8e),d&&t(Rc),_(HA),d&&t(I8e),d&&t(Mr),_(UA),_(YA),_(KA),_(ZA),_(e6),d&&t(j8e),d&&t($c),_(o6),d&&t(N8e),d&&t(Er),_(r6),_(a6),_(n6),_(s6),_(l6),d&&t(D8e),d&&t(Nc),_(i6),d&&t(q8e),d&&t(yr),_(d6),_(f6),_(m6),_(g6),_(h6),d&&t(G8e),d&&t(Gc),_(p6),d&&t(O8e),d&&t(wr),_(_6),_(b6),_(v6),_(T6),_(F6),d&&t(X8e),d&&t(zc),_(C6),d&&t(z8e),d&&t(Ar),_(M6),_(y6),_(w6),_(A6),_(L6),d&&t(V8e),d&&t(Qc),_(B6),d&&t(W8e),d&&t(Lr),_(x6),_(R6),_(S6),_(P6),_($6),d&&t(Q8e),d&&t(Jc),_(I6),d&&t(H8e),d&&t(Br),_(j6),_(D6),_(q6),_(G6),_(O6),d&&t(U8e),d&&t(Zc),_(X6),d&&t(J8e),d&&t(xr),_(z6),_(W6),_(Q6),_(H6),_(U6),d&&t(Y8e),d&&t(rf),_(J6),d&&t(K8e),d&&t(kr),_(Y6),_(Z6),_(e0),_(o0),_(r0),d&&t(Z8e),d&&t(nf),_(t0),d&&t(eBe),d&&t(Rr),_(a0),_(s0),_(l0),_(i0),_(d0),d&&t(oBe),d&&t(df),_(c0),d&&t(rBe),d&&t(Sr),_(f0),_(g0),_(h0),_(p0),_(_0),d&&t(tBe),d&&t(mf),_(u0),d&&t(aBe),d&&t(Pr),_(b0),_(T0),_(F0),_(C0),_(M0),d&&t(nBe),d&&t(pf),_(E0),d&&t(sBe),d&&t($r),_(y0),_(A0),_(L0),_(B0),_(x0),d&&t(lBe),d&&t(bf),_(k0),d&&t(iBe),d&&t(Ir),_(R0),_(P0),_($0),_(I0),_(N0),d&&t(dBe),d&&t(Ff),_(D0),d&&t(cBe),d&&t(jr),_(q0),_(O0),_(X0),_(z0),_(V0)}}}const Y_t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function K_t(wi,J,Ae){let{fw:ie}=J;return wi.$$set=me=>{"fw"in me&&Ae(0,ie=me.fw)},[ie]}class nut extends X_t{constructor(J){super();z_t(this,J,K_t,J_t,V_t,{fw:0})}}export{nut as default,Y_t as metadata};
